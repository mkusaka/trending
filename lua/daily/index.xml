<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-23T01:45:59Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>skywind3000/z.lua</title>
    <updated>2022-07-23T01:45:59Z</updated>
    <id>tag:github.com,2022-07-23:/skywind3000/z.lua</id>
    <link href="https://github.com/skywind3000/z.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡ A new cd command that helps you navigate faster by learning your habits.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;z.lua&lt;/h1&gt; &#xA;&lt;p&gt;A command line tool which helps you navigate faster by learning your habits &lt;span&gt;⚡&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;An alternative to &lt;a href=&#34;https://github.com/rupa/z&#34;&gt;z.sh&lt;/a&gt; with windows and posix shells support and various improvements.&lt;/p&gt; &#xA;&lt;p&gt;【&lt;a href=&#34;https://raw.githubusercontent.com/skywind3000/z.lua/master/README.cn.md&#34;&gt;README in Chinese | 中文文档&lt;/a&gt;】&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;z.lua is a faster way to navigate your filesystem. It tracks your most used directories, based on &#39;frecency&#39;. After a short learning phase, z will take you to the most &#39;frecent&#39; directory that matches ALL of the regexes given on the command line, in order.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;z foo bar&lt;/code&gt; would match &lt;code&gt;/foo/bar&lt;/code&gt; but not &lt;code&gt;/bar/foo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reputation&lt;/h2&gt; &#xA;&lt;p&gt;From people using z.lua:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I like this in principal. I’m pretty damn predictable at the command line and far too lazy to make shortcuts&lt;/li&gt; &#xA; &lt;li&gt;It feels far more intuitive and it&#39;s so incredibly convenient to be able to jump between folders I&#39;m working in without having to traverse an entire tree. The shell used to feel so constraining for me, but tools like this are making me enjoy it so much more.&lt;/li&gt; &#xA; &lt;li&gt;I can finally have autojump-like functionality on my Raspberry Pi 1 without waiting 30 seconds every time I open a new shell. Thanks z.lua devs.&lt;/li&gt; &#xA; &lt;li&gt;Anyway, z.lua is a promising project. If you only need directory jumping, it may be the best choice.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;10x&lt;/strong&gt; times faster than &lt;strong&gt;fasd&lt;/strong&gt; and &lt;strong&gt;autojump&lt;/strong&gt;, &lt;strong&gt;3x&lt;/strong&gt; times faster than &lt;strong&gt;z.sh&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Gain the ultimate speed with an optional &lt;a href=&#34;https://github.com/skywind3000/czmod&#34;&gt;native module&lt;/a&gt; written in C.&lt;/li&gt; &#xA; &lt;li&gt;Available for &lt;strong&gt;posix shells&lt;/strong&gt;: bash, zsh, dash, sh, ash, ksh, busybox and etc.&lt;/li&gt; &#xA; &lt;li&gt;Available for Fish Shell, Power Shell and Windows cmd.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skywind3000/z.lua/master/#enhanced-matching&#34;&gt;Enhanced matching algorithm&lt;/a&gt; takes you to where ever you want precisely.&lt;/li&gt; &#xA; &lt;li&gt;Allow updating database only if &lt;code&gt;$PWD&lt;/code&gt; changed with &#34;$_ZL_ADD_ONCE&#34; set to 1.&lt;/li&gt; &#xA; &lt;li&gt;Interactive selection enables you to choose where to go before cd.&lt;/li&gt; &#xA; &lt;li&gt;Integrated with FZF (optional) for interactive selection and completion.&lt;/li&gt; &#xA; &lt;li&gt;Quickly go back to a parent directory instead of typing &#34;cd ../../..&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Corresponding experience in different shells and operating systems.&lt;/li&gt; &#xA; &lt;li&gt;Compatible with Lua (5.1, 5.2, 5.3+) and luajit.&lt;/li&gt; &#xA; &lt;li&gt;Self contained, distributed as a single &lt;code&gt;z.lua&lt;/code&gt; script, no other dependence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;z foo       # cd to most frecent dir matching foo&#xA;z foo bar   # cd to most frecent dir matching foo and bar&#xA;z -r foo    # cd to the highest ranked dir matching foo&#xA;z -t foo    # cd to most recently accessed dir matching foo&#xA;z -l foo    # list matches instead of cd&#xA;z -c foo    # restrict matches to subdirs of $PWD&#xA;z -e foo    # echo the best match, don&#39;t cd&#xA;z -i foo    # cd with interactive selection&#xA;z -I foo    # cd with interactive selection using fzf&#xA;z -b foo    # cd to the parent directory starting with foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Bash:&lt;/p&gt; &lt;p&gt;put something like this in your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;eval &#34;$(lua /path/to/z.lua --init bash)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;the default matching algorithm is similar to z.sh to keep compatible, you may like the enhanced matching algorithm for productivity:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;eval &#34;$(lua /path/to/z.lua --init bash enhanced once)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and perhaps this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;eval &#34;$(lua /path/to/z.lua --init bash enhanced once echo)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;if you want &lt;code&gt;z.lua&lt;/code&gt; print the new directory after cd.&lt;/p&gt; &lt;p&gt;For &lt;code&gt;fzf&lt;/code&gt; tab completion use:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;eval &#34;$(lua /path/to/z.lua --init bash enhanced once fzf)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: For wsl-1 users, &lt;code&gt;lua-filesystem&lt;/code&gt; must be installed:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt-get install lua-filesystem&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To avoid a wsl-1 &lt;a href=&#34;https://github.com/microsoft/WSL/issues/5505&#34;&gt;defect&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Zsh:&lt;/p&gt; &lt;p&gt;put something like this in your &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;eval &#34;$(lua /path/to/z.lua --init zsh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Options like &#34;enhanced&#34; and &#34;once&#34; can be used after &lt;code&gt;--init&lt;/code&gt; too. It can also be initialized from &#34;skywind3000/z.lua&#34; with your zsh plugin managers (antigen / oh-my-zsh).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: for wsl-1 users, &lt;code&gt;lua-filesystem&lt;/code&gt; must be installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Posix Shells:&lt;/p&gt; &lt;p&gt;put something like this in your &lt;code&gt;.profile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;eval &#34;$(lua /path/to/z.lua --init posix)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For old shells like ksh (Korn Shell), some features are missing, you can try:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;eval &#34;$(lua /path/to/z.lua --init posix legacy)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To generate old posix compatible script.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fish Shell (version &lt;code&gt;2.4.0&lt;/code&gt; or above):&lt;/p&gt; &lt;p&gt;Create &lt;code&gt;~/.config/fish/conf.d/z.fish&lt;/code&gt; with following code&lt;/p&gt; &lt;pre&gt;&lt;code&gt;lua /path/to/z.lua --init fish | source&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;d like &lt;code&gt;z.lua&lt;/code&gt; to cooperate with fish&#39;s own &lt;a href=&#34;https://fishshell.com/docs/3.2/index.html#id34&#34;&gt;directory history&lt;/a&gt;, you can put&lt;/p&gt; &lt;pre&gt;&lt;code&gt;set -gx _ZL_CD cd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;into the same file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Power Shell:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;⚠️ &lt;strong&gt;WARNING&lt;/strong&gt;: users of &lt;a href=&#34;https://starship.rs/&#34;&gt;Starship Prompt&lt;/a&gt; should add the following command &lt;em&gt;after&lt;/em&gt; &lt;code&gt;starship init&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;put something like this in your &lt;code&gt;profile.ps1&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Invoke-Expression (&amp;amp; { (lua /path/to/z.lua --init powershell) -join &#34;`n&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows cmd (with clink):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy z.lua and z.cmd to clink&#39;s home directory&lt;/li&gt; &#xA;   &lt;li&gt;Add clink&#39;s home to &lt;code&gt;%PATH%&lt;/code&gt; (z.cmd can be called anywhere)&lt;/li&gt; &#xA;   &lt;li&gt;Ensure that &#34;lua&#34; can be called in &lt;code&gt;%PATH%&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows cmder:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy z.lua and z.cmd to cmder/vendor&lt;/li&gt; &#xA;   &lt;li&gt;Add cmder/vendor to &lt;code&gt;%PATH%&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Ensure that &#34;lua&#34; can be called in &lt;code&gt;%PATH%&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows WSL-1:&lt;/p&gt; &lt;p&gt;Install &lt;code&gt;lua-filesystem&lt;/code&gt; module before init z.lua:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  sudo apt-get install lua-filesystem&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This module is required due to a wsl-1 &lt;a href=&#34;https://github.com/microsoft/WSL/issues/5505&#34;&gt;defect&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_CMD&lt;/code&gt; in .bashrc/.zshrc to change the command (default z).&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_DATA&lt;/code&gt; in .bashrc/.zshrc to change the datafile (default ~/.zlua).&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_NO_PROMPT_COMMAND&lt;/code&gt; if you&#39;re handling PROMPT_COMMAND yourself.&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_EXCLUDE_DIRS&lt;/code&gt; to a comma separated list of dirs to exclude.&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_ADD_ONCE&lt;/code&gt; to &#39;1&#39; to update database only if &lt;code&gt;$PWD&lt;/code&gt; changed.&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_MAXAGE&lt;/code&gt; to define a aging threshold (default is 5000).&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_CD&lt;/code&gt; to specify your own cd command (default is &lt;code&gt;builtin cd&lt;/code&gt; in Unix shells).&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_ECHO&lt;/code&gt; to 1 to display new directory name after cd.&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_MATCH_MODE&lt;/code&gt; to 1 to enable enhanced matching.&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_NO_CHECK&lt;/code&gt; to 1 to disable path validation, use &lt;code&gt;z --purge&lt;/code&gt; to clean&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_HYPHEN&lt;/code&gt; to 1 to treat hyphon (-) as a normal character not a lua regexp keyword.&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$_ZL_CLINK_PROMPT_PRIORITY&lt;/code&gt; change clink prompt register priority (default 99).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Aging&lt;/h2&gt; &#xA;&lt;p&gt;The rank of directories maintained by z.lua undergoes aging based on a simple formula. The rank of each entry is incremented every time it is accessed. When the sum of ranks is over 5000 (&lt;code&gt;$_ZL_MAXAGE&lt;/code&gt;), all ranks are multiplied by 0.9. Entries with a rank lower than 1 are forgotten.&lt;/p&gt; &#xA;&lt;h2&gt;Frecency&lt;/h2&gt; &#xA;&lt;p&gt;Frecency is a portmanteau of &#39;recent&#39; and &#39;frequency&#39;. It is a weighted rank that depends on how often and how recently something occurred. As far as I know, Mozilla came up with the term.&lt;/p&gt; &#xA;&lt;p&gt;To z.lua, a directory that has low ranking but has been accessed recently will quickly have higher rank than a directory accessed frequently a long time ago. Frecency is determined at runtime.&lt;/p&gt; &#xA;&lt;h2&gt;Default Matching&lt;/h2&gt; &#xA;&lt;p&gt;By default, z.lua uses default matching algorithm similar to the original z.sh. Paths must be match all of the regexes in order.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;cd to a directory contains foo:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;z foo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cd to a directory ends with foo:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;z foo$&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;use multiple arguments:&lt;/p&gt; &lt;p&gt;Assuming the following database:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;10   /home/user/work/inbox&#xA;30   /home/user/mail/inbox&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;&#34;z in&#34;&lt;/code&gt; would cd into &lt;code&gt;/home/user/mail/inbox&lt;/code&gt; as the higher weighted entry. However you can pass multiple arguments to z.lua to prefer a different entry. In the above example, &lt;code&gt;&#34;z w in&#34;&lt;/code&gt; would then change directory to &lt;code&gt;/home/user/work/inbox&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Enhanced Matching&lt;/h2&gt; &#xA;&lt;p&gt;Enhanced matching can be enabled by exporting the environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export _ZL_MATCH_MODE=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, append a &lt;code&gt;enhanced&lt;/code&gt; after &lt;code&gt;--init xxx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval &#34;$(lua /path/to/z.lua --init bash enhanced)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a given set of queries (the set of command-line arguments passed to z.lua), a path is a match if and only if:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Queries match the path in order (same as default method).&lt;/li&gt; &#xA; &lt;li&gt;The last query matches the last segment of the path.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If no match is found, it will fall back to default matching method.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;match the last segment of the path:&lt;/p&gt; &lt;p&gt;Assuming the following database:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;10   /home/user/workspace&#xA;20   /home/user/workspace/project1&#xA;30   /home/user/workspace/project2&#xA;40   /home/user/workspace/project3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you use &lt;code&gt;&#34;z wo&#34;&lt;/code&gt; in enhanced matching mode, only the &lt;code&gt;/home/user/workspace&lt;/code&gt; will be matched, because according to rule No.2 it is the only path whose last segment matches &lt;code&gt;&#34;wo&#34;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Since the last segment of a path is always easier to be recalled, it is sane to give it higher priority. You can also achieve this by typing &lt;code&gt;&#34;z space$&#34;&lt;/code&gt; in both methods, but &lt;code&gt;&#34;z wo&#34;&lt;/code&gt; is easier to type.&lt;/p&gt; &lt;p&gt;Tips for rule No.2:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you want your last query &lt;strong&gt;not only&lt;/strong&gt; to match the last segment of the path, append &#39;$&#39; as the last query. eg. &lt;code&gt;&#34;z wo $&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If you want your last query &lt;strong&gt;not&lt;/strong&gt; to match the last segment of the path, append &#39;/&#39; as the last query. eg. &lt;code&gt;&#34;z wo /&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cd to the existent path if there is no match:&lt;/p&gt; &lt;p&gt;Sometimes if you use:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;z foo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And there is no matching result in the database, but there is an existent directory which can be accessed with the name &#34;foo&#34; from current directory, &#34;&lt;code&gt;z foo&lt;/code&gt;&#34; will just work as:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd foo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So, in the enhanced matching method, you can always use &lt;code&gt;z&lt;/code&gt; like &lt;code&gt;cd&lt;/code&gt; to change directory even if the new directory is untracked (hasn&#39;t been accessed).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Skip the current directory:&lt;/p&gt; &lt;p&gt;When you are calling &lt;code&gt;z xxx&lt;/code&gt; but the best match is the current directory, z.lua will choose the 2nd best match result for you. Assuming the database:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;10   /Users/Great_Wall/.rbenv/versions/2.4.1/lib/ruby/gems&#xA;20   /Library/Ruby/Gems/2.0.0/gems&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When I use &lt;code&gt;z gems&lt;/code&gt; by default, it will take me to &lt;code&gt;/Library/Ruby/Gems/2.0.0/gems&lt;/code&gt;, but it&#39;s not what I want, so I press up arrow and execute &lt;code&gt;z gems&lt;/code&gt; again, it will take me to &lt;code&gt;/Users/Great_Wall/.rbenv/versions/2.4.1/lib/ruby/gems&lt;/code&gt; and this what I want.&lt;/p&gt; &lt;p&gt;Of course, I can always use &lt;code&gt;z env gems&lt;/code&gt; to indicate what I want precisely. Skip the current directory means when you use &lt;code&gt;z xxx&lt;/code&gt; you always want to change directory instead of stay in the same directory and do nothing if current directory is the best match.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default matching method is designed to be compatible with original z.sh, but the enhanced matching method is much more handy and exclusive to z.lua.&lt;/p&gt; &#xA;&lt;h2&gt;Add Once&lt;/h2&gt; &#xA;&lt;p&gt;By default, z.lua will add current directory to database each time before display command prompt (correspond with z.sh). But there is an option to allow z.lua add path only if current working directory changed.&lt;/p&gt; &#xA;&lt;p&gt;To enable this, you can set &lt;code&gt;$_ZL_ADD_ONCE&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; before init z.lua. Or you can initialize z.lua on linux like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval &#34;$(lua /path/to/z.lua --init bash once)&#34;&#xA;eval &#34;$(lua /path/to/z.lua --init zsh once)&#34;&#xA;lua /path/to/z.lua --init fish once | source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;add once&lt;/code&gt; mode off (default), z.lua will consider the time you spent in the directory (like z.sh). When this mode is on, consider the times you accessed the directory (like autojump), and that could be much faster on slow hardware.&lt;/p&gt; &#xA;&lt;h2&gt;Interactive Selection&lt;/h2&gt; &#xA;&lt;p&gt;When there are multiple matches found, using &lt;code&gt;z -i&lt;/code&gt; will display a list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ z -i soft&#xA;3:  0.25        /home/data/software&#xA;2:  3.75        /home/skywind/tmp/comma/software&#xA;1:  21          /home/skywind/software&#xA;&amp;gt; {CURSOR}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you can input the number and choose where to go before actual cd. eg. input 3 to cd to &lt;code&gt;/home/data/software&lt;/code&gt;. And if you just press ENTER and input nothing, it will just quit and stay where you were.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: for fish shell, this feature requires fish 2.7.0 or above.&lt;/p&gt; &#xA;&lt;h2&gt;FZF Supports&lt;/h2&gt; &#xA;&lt;p&gt;From version 1.1.0, a new option &lt;code&gt;&#34;-I&#34;&lt;/code&gt; will allow you to use fzf to select when there are multiple matches.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skywind3000/z.lua/master/images/fzf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When we use &lt;code&gt;&#34;z -I vim&#34;&lt;/code&gt;，12 paths contains keyword &#34;vim&#34; has been matched and ordered by their frecent value, the higher frecent comes with the higher rank. Then without cd to the highest ranked path, z.lua passes all the candidates to fzf.&lt;/p&gt; &#xA;&lt;p&gt;Now you can input some space separated keywords (no order required) or use &lt;code&gt;CTRL+J&lt;/code&gt;/&lt;code&gt;CTRL+K&lt;/code&gt; (same as &lt;code&gt;UP&lt;/code&gt;/&lt;code&gt;DOWN&lt;/code&gt;) to select where you want to go, or &lt;code&gt;ESC&lt;/code&gt; / &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;D&lt;/code&gt;/&lt;code&gt;G&lt;/code&gt; to give up.&lt;/p&gt; &#xA;&lt;p&gt;Of course, you can always give more keywords to &lt;code&gt;z&lt;/code&gt; command to match your destination precisely. &lt;code&gt;&#34;z -I&#34;&lt;/code&gt; is similar to &lt;code&gt;&#34;z -i&#34;&lt;/code&gt;, but use fzf. Both &lt;code&gt;&#34;-i&#34;&lt;/code&gt; and &lt;code&gt;&#34;-I&#34;&lt;/code&gt; provide you another way for path navigation.&lt;/p&gt; &#xA;&lt;p&gt;Usually, &lt;code&gt;z -I&lt;/code&gt; can be aliased to &lt;code&gt;zf&lt;/code&gt; (z + fuzzy finder) for convenience. If there are only one path matched, &lt;code&gt;z -I&lt;/code&gt; will jump to it directly, fzf will only be invoked for multiple matches. &lt;code&gt;&#34;z -I .&#34;&lt;/code&gt; or &lt;code&gt;&#34;zf .&#34;&lt;/code&gt; can be used to use fzf select from entire database.&lt;/p&gt; &#xA;&lt;p&gt;For more information about this, please visit &lt;a href=&#34;https://github.com/skywind3000/z.lua/wiki/Effective-with-fzf&#34;&gt;wiki - effective with fzf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: For fish shell, this feature requires fish 2.7.0 or above. You can specify fzf executable in &lt;code&gt;$_ZL_FZF&lt;/code&gt; environment variable, &lt;code&gt;&#34;fzf&#34;&lt;/code&gt; will be called by default.&lt;/p&gt; &#xA;&lt;h2&gt;Jump Backwards&lt;/h2&gt; &#xA;&lt;p&gt;New option &lt;code&gt;&#34;-b&#34;&lt;/code&gt; can quickly go back to a specific parent directory in bash instead of typing &#34;cd ../../..&#34; redundantly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;(No argument)&lt;/strong&gt;: &lt;code&gt;cd&lt;/code&gt; into the project root, the project root the nearest parent directory with &lt;code&gt;.git&lt;/code&gt;/&lt;code&gt;.hg&lt;/code&gt;/&lt;code&gt;.svn&lt;/code&gt; in it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;(One argument)&lt;/strong&gt;: &lt;code&gt;cd&lt;/code&gt; into the closest parent starting with keyword, if not find, go to the parent containing keyword.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;(Two arguments)&lt;/strong&gt;: replace the first value with the second one (in the current path).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s start by aliasing &lt;code&gt;z -b&lt;/code&gt; to &lt;code&gt;zb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# go all the way up to the project root (in this case, the one that has .git in it)&#xA;~/github/lorem/src/public$ zb&#xA;  =&amp;gt; cd ~/github/lorem&#xA;&#xA;# cd into to the first parent directory named g*&#xA;~/github/vimium/src/public$ zb g&#xA;  =&amp;gt; cd ~/github&#xA;&#xA;# goto the site directory quickly&#xA;~/github/demo/src/org/main/site/utils/file/reader/whatever$ zb si&#xA;  =&amp;gt; cd ~/github/demo/src/org/main/site&#xA;&#xA;# substitute jekyll with ghost&#xA;~/github/jekyll/test$ zb jekyll ghost&#xA;  =&amp;gt; cd ~/github/ghost/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Backward jumping can also be used with &lt;code&gt;$_ZL_ECHO&lt;/code&gt; option (echo $PWD after cd), which makes it possible to combine them with other tools without actually changing the working directory (eg. &lt;code&gt;ls `zb git` &lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Environment variable &lt;code&gt;$_ZL_ROOT_MARKERS&lt;/code&gt; is a comma separated list for project root locating, and can be redefined as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export _ZL_ROOT_MARKERS=&#34;.git,.svn,.hg,.root,package.json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want &lt;code&gt;zb&lt;/code&gt; jump back to a parent directory contains a &lt;code&gt;.root&lt;/code&gt; or &lt;code&gt;package.json&lt;/code&gt; in it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt;: &lt;code&gt;zb ..&lt;/code&gt; equals to &lt;code&gt;cd ..&lt;/code&gt;, &lt;code&gt;zb ...&lt;/code&gt; equals to &lt;code&gt;cd ../..&lt;/code&gt; and &lt;code&gt;zb ....&lt;/code&gt; equals to &lt;code&gt;cd ../../..&lt;/code&gt;, and so on. Finally, &lt;code&gt;zb ..20&lt;/code&gt; equals to &lt;code&gt;cd (..)x20&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt;: try &lt;code&gt;z -b -i&lt;/code&gt; and &lt;code&gt;z -b -I&lt;/code&gt; and you can alias them to &lt;code&gt;zbi&lt;/code&gt; and &lt;code&gt;zbf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Completion&lt;/h2&gt; &#xA;&lt;p&gt;For zsh/fish, completion can be triggered by &lt;code&gt;z foo&amp;lt;tab&amp;gt;&lt;/code&gt;. and a list of candidates will display in zsh / fish:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skywind3000/z.lua/master/images/complete-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Press &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; again, you can select your destination in a visualized way.&lt;/p&gt; &#xA;&lt;p&gt;Bash is not as powerful as zsh/fish, so we introduced fzf-completion for bash, initialize your z.lua and append &lt;code&gt;fzf&lt;/code&gt; keyword after &lt;code&gt;--init&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval &#34;$(lua /path/to/z.lua --init bash enhanced once echo fzf)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then press &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; after &lt;code&gt;z xxx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skywind3000/z.lua/master/images/complete-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;With the help of fzf, completion in bash is much easier now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;z.lua&lt;/code&gt; can cooperate with &lt;a href=&#34;https://github.com/changyuheng/fz&#34;&gt;fz&lt;/a&gt; for &lt;strong&gt;better completion&lt;/strong&gt; result in both bash and zsh, for more information see &lt;a href=&#34;https://github.com/skywind3000/z.lua/wiki/FAQ#fzsh-for-better-completion&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: To enable this, command &lt;code&gt;fzf&lt;/code&gt; must be found in &lt;code&gt;$PATH&lt;/code&gt; before initialization.&lt;/p&gt; &#xA;&lt;h2&gt;Most Recently Accessed Path&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;z.lua&lt;/code&gt; provides a fast way to visit MRU directories without typing any keyword. That is &lt;code&gt;dirstack&lt;/code&gt;, which records recently visited paths and can be manipulated by &lt;code&gt;z -&lt;/code&gt;, &lt;code&gt;z --&lt;/code&gt; and &lt;code&gt;z -{num}&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# display current dir stack&#xA;$ z --    &#xA; 0  /home/skywind/work/match/memory-match&#xA; 1  /home/skywind/.local/etc&#xA; 2  /home/skywind/software/vifm-0.9.1&#xA; 3  /home/skywind/work&#xA; 4  /home/skywind/work/match&#xA;&#xA;# cd to the 2nd directory in the stack&#xA;$ z -2&#xA;  =&amp;gt; cd /home/skywind/software/vifm-0.9.1&#xA;&#xA;# popup stacktop (cd to previous directory), same as &#34;z -0&#34;&#xA;$ z -&#xA;  =&amp;gt; cd -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;dirstack&lt;/code&gt; is calculated from z.lua&#39;s database, and has no dependency on shells or systems. You will not lost records after re-login, and history can be shared across shells and sessions.&lt;/p&gt; &#xA;&lt;p&gt;There is another way to access MRU directories interactively by utilizing parameter &lt;code&gt;-I&lt;/code&gt; (fzf) and &lt;code&gt;-t&lt;/code&gt; (sort by time):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias zh=&#39;z -I -t .&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The new alias &lt;code&gt;zh&lt;/code&gt; (jump to history) is very easy to input:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skywind3000/z.lua/master/images/mru.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The first column indicates how many seconds ago you have visited, and the second column is the path name. With &lt;code&gt;zh&lt;/code&gt;, you can type some character to use string matching in fzf, or use &lt;code&gt;&amp;lt;Up&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;Down&amp;gt;&lt;/code&gt; (as well as &lt;code&gt;CTRL+j/k&lt;/code&gt;) to move the selector (red &lt;code&gt;&amp;gt;&lt;/code&gt;) up and down.&lt;/p&gt; &#xA;&lt;p&gt;At last, press &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; to accept or &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; to give up.&lt;/p&gt; &#xA;&lt;p&gt;Remember to enable the &lt;a href=&#34;https://raw.githubusercontent.com/skywind3000/z.lua/master/#enhanced-matching&#34;&gt;enhanced matching&lt;/a&gt; algorithm, the current working directory can be skipped with it.&lt;/p&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;p&gt;Recommended aliases you may find useful:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias zz=&#39;z -c&#39;      # restrict matches to subdirs of $PWD&#xA;alias zi=&#39;z -i&#39;      # cd with interactive selection&#xA;alias zf=&#39;z -I&#39;      # use fzf to select in multiple matches&#xA;alias zb=&#39;z -b&#39;      # quickly cd to the parent directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import data from z.sh：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat ~/.z &amp;gt;&amp;gt; ~/.zlua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import data from autojump：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;FN=&#34;$HOME/.local/share/autojump/autojump.txt&#34;&#xA;awk -F &#39;\t&#39; &#39;{print $2 &#34;|&#34; $1 &#34;|&#34; 0}&#39; $FN &amp;gt;&amp;gt; ~/.zlua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t forget to read the &lt;a href=&#34;https://github.com/skywind3000/z.lua/wiki/FAQ&#34;&gt;Frequently Asked Questions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;The slowest part is adding path to history data file. It will run every time when you press enter (installed in $PROMPT_COMMAND). So I profile it on my NAS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ time autojump --add /tmp&#xA;real    0m0.352s&#xA;user    0m0.077s&#xA;sys     0m0.185s&#xA;&#xA;$ time fasd -A /tmp&#xA;real    0m0.618s&#xA;user    0m0.076s&#xA;sys     0m0.242s&#xA;&#xA;$ time _z --add /tmp&#xA;real    0m0.194s&#xA;user    0m0.046s&#xA;sys     0m0.154s&#xA;&#xA;$ time _zlua --add /tmp&#xA;real    0m0.052s&#xA;user    0m0.015s&#xA;sys     0m0.030s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you see, z.lua is the fastest one and requires less resource.&lt;/p&gt; &#xA;&lt;h2&gt;Native Module&lt;/h2&gt; &#xA;&lt;p&gt;z.lua is fast enough for most case, the path tracking action will be triggered each time when you change your current directory.&lt;/p&gt; &#xA;&lt;p&gt;So I still recommend the pure lua script for portability and flexibility, but for someone who really care about &lt;code&gt;10ms&lt;/code&gt; or &lt;code&gt;1ms&lt;/code&gt; things, this module can help them to gain the ultimate speed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skywind3000/czmod&#34;&gt;czmod&lt;/a&gt;: native module to boost &lt;code&gt;z.lua&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Average performance:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;czmod&lt;/th&gt; &#xA;   &lt;th&gt;z.lua&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Update Time&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.6ms&lt;/td&gt; &#xA;   &lt;td&gt;13.2ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Query Time&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.5ms&lt;/td&gt; &#xA;   &lt;td&gt;9.8ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.8.7 (2020-06-29): use lfs or luajit&#39;s cffi if possible.&lt;/li&gt; &#xA; &lt;li&gt;1.8.4 (2020-02-10): fish shell: set &lt;code&gt;$_ZL_ECHO&lt;/code&gt; to global scope.&lt;/li&gt; &#xA; &lt;li&gt;1.8.3 (2020-02-09): new: &lt;code&gt;z -b -i&lt;/code&gt; and &lt;code&gt;z -b -I&lt;/code&gt; to jump backwards in interactive mode.&lt;/li&gt; &#xA; &lt;li&gt;1.7.4 (2019-12-29): new: &lt;code&gt;$_ZL_HYPHEN&lt;/code&gt; to treat hyphen as a normal character, see &lt;a href=&#34;https://github.com/skywind3000/z.lua/wiki/FAQ#how-to-input-a-hyphen---in-the-keyword-&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;1.7.3 (2019-09-07): use &lt;a href=&#34;http://keplerproject.github.io/luafilesystem/&#34;&gt;lua-filesystem&lt;/a&gt; package if possible when &lt;code&gt;$_ZL_USE_LFS&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;1.7.2 (2019-08-01): Improve bash/zsh shell compatibility by &lt;a href=&#34;https://github.com/barlik&#34;&gt;@barlik&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;1.7.1 (2019-06-07): Fixed: &lt;code&gt;$_ZL_DATA&lt;/code&gt; failure on Linux sometimes.&lt;/li&gt; &#xA; &lt;li&gt;1.7.0 (2019-03-09): Support &lt;a href=&#34;https://github.com/skywind3000/z.lua/wiki/FAQ#how-to-integrate-zlua-to-ranger-&#34;&gt;ranger&lt;/a&gt;, fix ReplaceFile issue in luajit (windows).&lt;/li&gt; &#xA; &lt;li&gt;1.6.0 (2019-03-04): optimize with ffi module (luajit builtin module).&lt;/li&gt; &#xA; &lt;li&gt;1.5.11 (2019-03-02): fixed: os.path.isdir doesn&#39;t work for symbol link folders.&lt;/li&gt; &#xA; &lt;li&gt;1.5.10 (2019-03-01): Prevent writing file racing.&lt;/li&gt; &#xA; &lt;li&gt;1.5.9 (2019-02-25): &lt;code&gt;z -b&lt;/code&gt; should not match current directory (close #56).&lt;/li&gt; &#xA; &lt;li&gt;1.5.8 (2019-02-21): new &lt;code&gt;$_ZL_FZF_HEIGHT&lt;/code&gt; to control &lt;code&gt;--height&lt;/code&gt; parameter in fzf.&lt;/li&gt; &#xA; &lt;li&gt;1.5.7 (2019-02-21): rename &lt;code&gt;$_ZL_FZF_SORT&lt;/code&gt; to &lt;code&gt;$_ZL_INT_SORT&lt;/code&gt; it will affect both &lt;code&gt;-i&lt;/code&gt; and &lt;code&gt;-I&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;1.5.6 (2019-02-20): set &lt;code&gt;$_ZL_FZF_SORT&lt;/code&gt; to 1 to sort directories by alphabet in fzf.&lt;/li&gt; &#xA; &lt;li&gt;1.5.5 (2019-02-20): &lt;code&gt;$_ZL_FZF_FLAG&lt;/code&gt; can be used to override fzf flags, default to &#34;+s -e&#34;.&lt;/li&gt; &#xA; &lt;li&gt;1.5.4 (2019-02-19): fixed: file/path existence detection fails on read-only fs (closed &lt;a href=&#34;https://github.com/skywind3000/z.lua/issues/49&#34;&gt;#49&lt;/a&gt; by &lt;a href=&#34;https://github.com/contrun&#34;&gt;@contrun&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;1.5.3 (2019-02-17): new &lt;code&gt;$_ZL_FZF_FLAG&lt;/code&gt; for passing additional flags to fzf, add &lt;code&gt;-e&lt;/code&gt; argument to fzf.&lt;/li&gt; &#xA; &lt;li&gt;1.5.2 (2019-02-16): be aware of all arguments in fzf completion.&lt;/li&gt; &#xA; &lt;li&gt;1.5.1 (2019-02-15): new: simulated dir stack by &lt;code&gt;z -&lt;/code&gt;, &lt;code&gt;z --&lt;/code&gt; and &lt;code&gt;z -{num}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;1.5.0 (2019-02-14): fixed minor issues in backward jumping.&lt;/li&gt; &#xA; &lt;li&gt;1.4.7 (2019-02-13): Don&#39;t use regex in backward jumping (use plain text instead).&lt;/li&gt; &#xA; &lt;li&gt;1.4.6 (2019-02-12): change: &lt;code&gt;_ZL_EXCLUDE_DIRS&lt;/code&gt; to a comma separated list of dirs to exclude.&lt;/li&gt; &#xA; &lt;li&gt;1.4.5 (2019-02-10): improve bash fzf completion and posix compatibility.&lt;/li&gt; &#xA; &lt;li&gt;1.4.4 (2019-02-10): supports legacy posix shells like ksh, init with &lt;code&gt;z.lua --init posix legacy&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;1.4.3 (2019-02-08): fixed minor issues.&lt;/li&gt; &#xA; &lt;li&gt;1.4.2 (2019-02-06): you can disabled path validation by &lt;code&gt;$_ZL_NO_CHECK&lt;/code&gt;, and use &lt;code&gt;z --purge&lt;/code&gt; to clear bad paths manually.&lt;/li&gt; &#xA; &lt;li&gt;1.4.1 (2019-02-06): fzf tab-completion in bash (&lt;a href=&#34;https://github.com/BarbUk&#34;&gt;@BarbUk&lt;/a&gt;), fixed hang in fish shell (close &lt;a href=&#34;https://github.com/skywind3000/z.lua/issues/29&#34;&gt;#29&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;1.4.0 (2019-02-04): Ported to Power Shell (&lt;a href=&#34;https://github.com/manhong2112&#34;&gt;@manhong2112&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;1.3.0 (2019-02-04): Backward jumping, prevent &#34;cd ../../..&#34; repeatly.&lt;/li&gt; &#xA; &lt;li&gt;1.2.0 (2019-02-03): Upgrade string lib and path lib.&lt;/li&gt; &#xA; &lt;li&gt;1.1.0 (2019-02-02): New option &#39;-I&#39; to use fzf to select from multiple matches.&lt;/li&gt; &#xA; &lt;li&gt;1.0.0 (2019-02-01): Fixed minor issues and make it stable.&lt;/li&gt; &#xA; &lt;li&gt;0.5.0 (2019-01-21): Ported to Fish Shell (&lt;a href=&#34;https://github.com/TeddyDD&#34;&gt;@TeddyDD&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;0.4.1 (2019-01-20): Don&#39;t return failed exit code when $_ZL_ECHO is unbind (Mario Rodas).&lt;/li&gt; &#xA; &lt;li&gt;0.4.0 (2019-01-17): new enhanced matching algorithm，can be enabled by appending &lt;code&gt;enhanced&lt;/code&gt; keyword after &lt;code&gt;--init&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;0.3.0 (2018-12-26): new option &lt;code&gt;-i&lt;/code&gt; to enable interactive selection.&lt;/li&gt; &#xA; &lt;li&gt;0.2.0 (2018-11-25): new option &lt;code&gt;$_ZL_ADD_ONCE&lt;/code&gt; to enable updating datafile only if &lt;code&gt;$PWD&lt;/code&gt; changed.&lt;/li&gt; &#xA; &lt;li&gt;0.1.0 (2018-04-30): supports windows cmd, cmder and conemu.&lt;/li&gt; &#xA; &lt;li&gt;0.0.0 (2018-03-21): initial commit, compatible with original z.sh.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;This project needs help for the tasks below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support csh/tcsh.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Completion: Actually I got little knowledge in completion, and need help to improve it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Completion: Implement completion for Power Shell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Completion: Implement completion for different arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Packaging: make it possible to be installed easily in different systems or popular plugin managers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/rupa&#34;&gt;@rupa&lt;/a&gt; for inspiring me to start this project.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/vigneshwaranr&#34;&gt;@vigneshwaranr&lt;/a&gt; and &lt;a href=&#34;https://github.com/shyiko&#34;&gt;@shyiko&lt;/a&gt; for inspiring me the backward jumping.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/TeddyDD&#34;&gt;@TeddyDD&lt;/a&gt; for Fish Shell porting.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/manhong2112&#34;&gt;@manhong2112&lt;/a&gt; for Power Shell porting.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/BarbUk&#34;&gt;@BarbUk&lt;/a&gt; for fzf completion in Bash.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/barlik&#34;&gt;@barlik&lt;/a&gt; for many improvements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And many others.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lsyncd/lsyncd</title>
    <updated>2022-07-23T01:45:59Z</updated>
    <id>tag:github.com,2022-07-23:/lsyncd/lsyncd</id>
    <link href="https://github.com/lsyncd/lsyncd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lsyncd (Live Syncing Daemon) synchronizes local directories with remote targets&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lsyncd -- Live Syncing (Mirror) Daemon&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Lsyncd watches a local directory trees event monitor interface (inotify or fsevents). It aggregates and combines events for a few seconds and then spawns one (or more) process(es) to synchronize the changes. By default this is &lt;a href=&#34;http://rsync.samba.org/&#34;&gt;rsync&lt;/a&gt;. Lsyncd is thus a light-weight live mirror solution that is comparatively easy to install not requiring new filesystems or block devices and does not hamper local filesystem performance.&lt;/p&gt; &#xA;&lt;p&gt;Rsync+ssh is an advanced action configuration that uses a SSH to act file and directory moves directly on the target instead of re-transmitting the move destination over the wire.&lt;/p&gt; &#xA;&lt;p&gt;Fine-grained customization can be achieved through the config file. Custom action configs can even be written from scratch in cascading layers ranging from shell scripts to code written in the &lt;a href=&#34;http://www.lua.org/&#34;&gt;Lua language&lt;/a&gt;. This way simple, powerful and flexible configurations can be achieved. See &lt;a href=&#34;https://lsyncd.github.io/lsyncd/&#34;&gt;the manual&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Lsyncd 2.2.1 requires rsync &amp;gt;= 3.1 on all source and target machines.&lt;/p&gt; &#xA;&lt;p&gt;License: &lt;a href=&#34;http://www.fsf.org/licensing/licenses/info/GPLv2.html&#34;&gt;GPLv2&lt;/a&gt; or any later GPL version.&lt;/p&gt; &#xA;&lt;h2&gt;When to use&lt;/h2&gt; &#xA;&lt;p&gt;Lsyncd is designed to synchronize a local directory tree with low profile of expected changes to a remote mirror. Lsyncd is especially useful to sync data from a secure area to a not-so-secure area.&lt;/p&gt; &#xA;&lt;h2&gt;Other synchronization tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.drbd.org&#34;&gt;DRBD&lt;/a&gt; operates on block device level. This makes it useful for synchronizing systems that are under heavy load. Lsyncd on the other hand does not require you to change block devices and/or mount points, allows you to change uid/gid of the transferred files, separates the receiver through the one-way nature of rsync. DRBD is likely the better option if you are syncing databases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.gluster.org&#34;&gt;GlusterFS&lt;/a&gt; and &lt;a href=&#34;http://bindfs.org/&#34;&gt;BindFS&lt;/a&gt; use a FUSE-Filesystem to interject kernel/userspace filesystem events.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stephenh/mirror&#34;&gt;Mirror&lt;/a&gt; is an asynchronous synchronisation tool that takes use of the inotify notifications much like Lsyncd. The main differences are: it is developed specifically for master-master use, thus running on a daemon on both systems, uses its own transportation layer instead of rsync and is Java instead of Lsyncd&#39;s C core with Lua scripting.&lt;/p&gt; &#xA;&lt;h2&gt;Lsyncd usage examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lsyncd -rsync /home remotehost.org::share/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This watches and rsyncs the local directory /home with all sub-directories and transfers them to &#39;remotehost&#39; using the rsync-share &#39;share&#39;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lsyncd -rsyncssh /home remotehost.org backup-home/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will also rsync/watch &#39;/home&#39;, but it uses a ssh connection to make moves local on the remotehost instead of re-transmitting the moved file over the wire.&lt;/p&gt; &#xA;&lt;p&gt;Some more complicated examples, tips and tricks you can find in the &lt;a href=&#34;https://lsyncd.github.io/lsyncd/&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Besides the usual disclaimer in the license, we want to specifically emphasize that the authors, and any organizations the authors are associated with, can not be held responsible for data-loss caused by possible malfunctions of Lsyncd.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>KyYay/CelLua-Machine</title>
    <updated>2022-07-23T01:45:59Z</updated>
    <id>tag:github.com,2022-07-23:/KyYay/CelLua-Machine</id>
    <link href="https://github.com/KyYay/CelLua-Machine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fanmade version of Sam Hogan&#39;s Cell Machine made in Love2d, based heavily off the Mystic Mod, that adds a bunch of new cells.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CelLua Machine&lt;/h1&gt; &#xA;&lt;p&gt;A fanmade version of Sam Hogan&#39;s Cell Machine, based heavily off the Mystic Mod, that adds a bunch of new cells and features.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a release, preferably the latest one, at &lt;a href=&#34;https://github.com/KyYay/CelLua-Machine/releases&#34;&gt;https://github.com/KyYay/CelLua-Machine/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download and install LOVE at &lt;a href=&#34;https://love2d.org&#34;&gt;https://love2d.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Double-click the .love file (might not work on all OS, for more info see &lt;a href=&#34;https://love2d.org/wiki/Getting_Started#Running_Games&#34;&gt;https://love2d.org/wiki/Getting_Started#Running_Games&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Sharing Levels&lt;/h2&gt; &#xA;&lt;p&gt;When you click the save button, the code for your level will simply be copied straight to your clipboard. If you use an app or website to share levels that has markdown, like Discord, use some method of supressing it, otherwise it&#39;s possible that the code will not be posted properly. The easiest way with Discord is to surround your code in two ` marks.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling mods&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a zip file of the whole game directory (make sure the zip contains the files and &lt;em&gt;not&lt;/em&gt; the folder OF the files)&lt;/li&gt; &#xA; &lt;li&gt;Rename the .zip to .love &lt;br&gt; For more info see &lt;a href=&#34;https://love2d.org/wiki/Game_Distribution#Create_a_.love-file&#34;&gt;https://love2d.org/wiki/Game_Distribution#Create_a_.love-file&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Basic Terminology&lt;/h2&gt; &#xA;&lt;p&gt;Semi-immovable - A cell that cannot be moved by pushing or pulling, but can still be moved by position-swapping cells like mirrors and gears. Gate cells are an example of this.&lt;/p&gt; &#xA;&lt;h2&gt;New Cells&lt;/h2&gt; &#xA;&lt;p&gt;Trash Cell - Deletes any cells that get pushed into it. Taken from the Mystic Mod. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050831-631a3a5e-856f-418b-a6a5-0d82c4834672.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;One/Two/Three Directional - Can only be pushed towards the marked directions. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050754-adf65e40-b0f1-46d7-838a-be619b70080b.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050761-58bd68c4-b6e1-45ed-a641-2215cd5e7efc.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050767-433d2200-dd3a-496a-bf16-98f90d3abcb0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;180° Rotator Cell - Rotates cells 180 degrees. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050775-03e39b96-f705-44a9-bc3f-14cfa01945c1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mirror Cell - Swaps the cells that it&#39;s arrows point to. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050777-9a8072e9-88d6-453c-84f5-43e31b175d9a.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129133790-319f2167-1cd9-40c4-8c92-fb0c3a856dcd.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Puller Cell - Pulls cells. Does not push cells. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050778-88e20293-cea0-4c5c-a925-e1a74ae26202.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Diverger Cell - Any forces that come into the sides which the arrows point to get rotated 90° and teleported to the end of the diverger. This is a dangerous cell to play with, as it&#39;s very concept provides the possibility of infinite loops; I have done my best to prevent these, but if an infinite loop slips by, it will stop the loop and create a trash cell, for debugging purposes. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050780-6e618371-dfce-4482-b580-87d5b6cac04b.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126437594-23d8c6c9-2389-4a0f-b4cb-ffd15b14dc73.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129133820-a32bc89b-67c8-4270-b996-7204b47771c5.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129133824-0087fa14-4d51-465c-be3a-34a01603ee2e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Redirector Cell - Sets the rotation of the 4 cells it touches to it&#39;s own rotation. Wont affect other redirectors. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050783-5fd81eeb-c7f5-433a-b894-36390eb88dfe.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gear Cell - Grabs the 8 cells nearby and rotates them 45 degrees around itself. Cells going from diagonally adjacent to orthogonally adjacent will have their rotation adjusted. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050785-8d82bd19-1859-4a33-a3c8-a15a94a1a761.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050787-560bc47e-8b21-4807-aea1-ecbb3170ace8.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mold Cell - Upon being generated by a generator, the generated cell will disappear (but the forces from being cloned will still apply.) &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050788-3ec06ebc-e78f-4282-af07-ea3c509ea1c9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Repulse Cell - Applies a pushing force in all 4 directions. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126256027-cf7ef041-e25f-4b42-a5d8-ca7f0a8001a0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Weight Cell - This cell will effectively remove the force from one mover that is trying to push it. They will stack with each other. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126050791-9d8e1397-cad7-4137-97a1-e8d5bb40f2cf.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cross Generator Cell - Clones in two directions. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126051500-9b347b2a-0b6a-44c6-adfa-714374a4958f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Strong Enemy Cell - An enemy cell that takes two hits to kill. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126051507-b1d115c5-bcc6-41af-8f70-b32fbb13d633.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Freezer Cell - Stops adjacent cells from preforming their actions. Other cells will still treat them as normal. If a cell is moved next to it after it&#39;s subtick finishes, the cell will act normally.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126086251-545d9fc6-6bb9-463d-9c85-de33d05621db.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Angled Generators - Generate at an angle. Rotation of the generated cell will be affected. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126085128-11d6900b-ba94-4275-9d5b-9bd95307cbd1.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126085129-7a778814-2352-4d35-89d4-4ec5b4119da9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Impulse Cell - Pulls cells 2 spaces away towards it. Can pull through trash cells and enemies.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126256021-7ad374ce-d851-4522-a8b8-438a2306bc69.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Advancer Cell - Acts like a mover and puller combined. They are also, in a way, &#34;smarter&#34; than pullers, as if there is too much force going against them when they try to pull, they will just let go and only do the pushing.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126256042-04006b8b-500b-428b-82d2-e10dbd3d3c98.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flipper Cell - Will effectively &#34;flip&#34; the 4 neighboring cells horizontally or vertically, depending on it&#39;s own rotation. &#34;Flipping&#34; includes turning clockwise cells into counter-clockwise cells, and vice versa.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/126307519-0dea882f-cb75-4082-8b86-8ac5a3cef3ea.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Twist Generator Cell - Acts like a flipper and a generator combined.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127073322-801b8fe9-34c9-4232-b8f0-7d5aaebf1436.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gate Cell - Act like conditional (and semi-immobile) generator cells. They take in cells on their left and right, sort of acting like a trash cell, and clone the cell behind them if the condition is satisfied. &lt;br&gt; From left to right: OR, AND, XOR, NOR, NAND, XNOR &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127064896-f5d1c6d5-3062-439b-88d4-2ddf1f705a9f.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127064903-5fd4e6ec-3354-4fff-b69d-bfffb33a5e89.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127064924-07acf6ee-6a06-4d40-bd8c-98ec8695b5a3.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127064933-1cbd9f5a-a70c-48ae-af46-7b6a9dcd773c.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127064945-b49cc596-046d-46b9-b18e-b62112483798.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127064950-c689dded-9b02-44fe-8806-769a9c8b4bfd.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ghost Cell - Acts like a wall cell that cannot be generated, similar to the level border in the Mystic Mod.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127099228-cd03e282-1d3a-41bf-9b4c-26490defd86f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bias Cell - Acts sort of like a frozen mover cell, it will add force to a mover that pushes with it and subtract force from a mover that pushes against it but never moves itself. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127790970-efada7d0-49d3-43d2-ab10-68ffa2d6e927.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Replicator Cell - Basically a generator that generates the cell in front of it. Has a cross variant. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127790974-ca4f2c12-7b16-49a1-a86c-4455dcfb04b1.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127790979-31ac7e7e-20e9-4bd2-a07c-75e238414540.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Intaker Cell - Described by KyYay as &#34;some unholy abomination of a trash cell, an impulse cell, and some sort of weird reverse generator&#34;. Basically sucks cells in and destroys them. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127790986-bce70bd9-e955-4a39-b075-4f5295d3b664.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shield Cell - Protects the cells around it from crashing into enemy cells, being crashed into by enemy cells, or being transformed into fungus.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127791071-993f3893-7768-4790-8992-1d91018aded4.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fungal Cell - Transforms any cells that get pushed into it into more fungus cells.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127791074-24b3e584-629d-4628-99ce-c25388a94aa1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Forker Cell - Acts sort of like a diverger, but it&#39;s one-way and duplicates cells that come into it. Currently does not work with pulling, only pushing.&lt;br&gt; NOTE: These cells are very unstable if used in a nuke, and are very very likely to crash your game. You have been warned. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127791086-ab71252d-802e-4c46-ac83-e64b48a1db83.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/127791139-7a469fe1-12be-4349-81af-af8053a8bcb8.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Demolisher Cell - Acts like a trash cell, but when something is pushed into it, it also destroys the 4 cells around it (if they are destroyable). &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129134219-68c8d8ca-a070-42e4-9f26-26fa734ff3a0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Opposition Cell - Can be pushed in the direction of the blue arrow, and pulled in the direction of the pink arrow. Yellow line represents being able to be both pushed and pulled in both directions that the line points in, like a slide cell. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129134269-6b6d9c28-5017-4653-8622-754bdd8ec9a3.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129134282-54b95e5b-f8dc-4e1b-8d16-640036992434.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129134295-ea119d80-b00c-4d6c-95e6-09cfa49b8dfa.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Super Repulsor Cell - Acts like a repulsor, but it will push cells infinitely until it either comes across an obstacle or realizes it&#39;s in an infinite loop. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129133999-c803ac2c-0313-4389-add9-d2cfde2141c6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Super Generator Cell - Generates the entire row of cells behind it. Will not generate if it gets in an infinite loop. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129133932-584544b2-364e-4548-a6a4-94acb248be1f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Double Rotator Cell - Acts like a cw rotator on two sides, and like a ccw rotator on the other two. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129176904-791dd055-9d7e-4ab6-aca7-3c20311defec.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Driller Cell - Acts sort of like a mirror cell, but it swaps the cell it&#39;s pointing to with itself (or deletes itself if it tries to swap a trash or demolisher cell). Has no actual pushing or pulling force. &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129170430-d7a0289d-6b17-4313-ba6f-87fee77297ee.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Current priority system (updating from left to right) &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/71151507/129170459-4d88cc0e-19b0-4305-ba96-bdfba2e1baee.png&#34; alt=&#34;image&#34;&gt; &lt;br&gt; (Cross generators are like normal generators but are activated in two different subticks, and angled generators are updated after normal/cross generators)&lt;br&gt; (The same logic applies to replicators and the cross mirror)&lt;br&gt; (Twist generators update at the same time as normal generators)&lt;br&gt; (All types of gate cells update at the same time)&lt;/p&gt;</summary>
  </entry>
</feed>