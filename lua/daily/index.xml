<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-28T01:39:25Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bashbunni/dotfiles</title>
    <updated>2023-01-28T01:39:25Z</updated>
    <id>tag:github.com,2023-01-28:/bashbunni/dotfiles</id>
    <link href="https://github.com/bashbunni/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My config/dotfiles for tmux, nvim, i3, bla bla bla, nerd things.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>mrcjkb/haskell-tools.nvim</title>
    <updated>2023-01-28T01:39:25Z</updated>
    <id>tag:github.com,2023-01-28:/mrcjkb/haskell-tools.nvim</id>
    <link href="https://github.com/mrcjkb/haskell-tools.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Supercharge your Haskell experience in neovim!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/nvim-haskell.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;haskell-tools.nvim&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;ðŸ¦¥ Supercharge your Haskell experience in &lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/NeoVim-%2357A143.svg?&amp;amp;style=for-the-badge&amp;amp;logo=neovim&amp;amp;logoColor=white&#34; alt=&#34;Neovim&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/lua-%232C2D72.svg?style=for-the-badge&amp;amp;logo=lua&amp;amp;logoColor=white&#34; alt=&#34;Lua&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Haskell-5e5086?style=for-the-badge&amp;amp;logo=haskell&amp;amp;logoColor=white&#34; alt=&#34;Haskell&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/nix-0175C2?style=for-the-badge&amp;amp;logo=NixOS&amp;amp;logoColor=white&#34; alt=&#34;Nix&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MrcJkb/haskell-tools.nvim/actions/workflows/nix-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/MrcJkb/haskell-tools.nvim/actions/workflows/nix-build.yml/badge.svg?sanitize=true&#34; alt=&#34;Nix build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#contributors-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/all_contributors-3-grey.svg?style=flat-square&#34; alt=&#34;All Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; &#xA;&lt;h2&gt;Quick Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#quick-setup&#34;&gt;Quick Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#advanced-configuration&#34;&gt;Advanced configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#available-functions&#34;&gt;Available functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#available-commands&#34;&gt;Available commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#telescope-extension&#34;&gt;Telescope extension&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#recommendations&#34;&gt;Recommendations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Required&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;neovim &amp;gt;= 0.8&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;&lt;code&gt;plenary.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/installation.html&#34;&gt;&lt;code&gt;haskell-language-server&lt;/code&gt;&lt;/a&gt; (recommended)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;&lt;code&gt;telescope.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A local &lt;a href=&#34;https://github.com/ndmitchell/hoogle/raw/master/docs/Install.md&#34;&gt;&lt;code&gt;hoogle&lt;/code&gt;&lt;/a&gt; installation (recommended for better hoogle search performance)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elaforge/fast-tags&#34;&gt;&lt;code&gt;fast-tags&lt;/code&gt;&lt;/a&gt; (for automatic tag generation as a fallback for &lt;code&gt;vim.lsp.tagfunc&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Example using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;code&gt;packer.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;mrcjkb/haskell-tools.nvim&#39;,&#xA;  requires = {&#xA;    &#39;nvim-lua/plenary.nvim&#39;,&#xA;    &#39;nvim-telescope/telescope.nvim&#39;, -- optional&#xA;    &#39;neovim/nvim-lspconfig&#39;, -- required on the 1.x.x branch&#xA;  },&#xA;  branch = &#39;1.x.x&#39;, -- recommended&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;It is suggested to use the stable branch if you would like to avoid breaking changes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For NixOS users with flakes enabled, this project provides outputs in the form of a package and an overlay; use it as you wish in your nixos or home-manager configuration. It is also available on &lt;code&gt;nixpkgs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Setup&lt;/h2&gt; &#xA;&lt;p&gt;This plugin automatically configures the &lt;code&gt;haskell-language-server&lt;/code&gt; builtin LSP client and integrates with other haskell tools. See the &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#features&#34;&gt;Features&lt;/a&gt; section for more info.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Do not call the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;nvim-lspconfig.hls&lt;/code&gt;&lt;/a&gt; setup or set up the lsp manually, as doing so may cause conflicts.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To get started quickly with the default setup, add the following to your neovim config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ht = require(&#39;haskell-tools&#39;)&#xA;local def_opts = { noremap = true, silent = true, }&#xA;ht.setup {&#xA;  hls = {&#xA;    on_attach = function(client, bufnr)&#xA;      local opts = vim.tbl_extend(&#39;keep&#39;, def_opts, { buffer = bufnr, })&#xA;      -- haskell-language-server relies heavily on codeLenses,&#xA;      -- so auto-refresh (see advanced configuration) is enabled by default&#xA;      vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;ca&#39;, vim.lsp.codelens.run, opts)&#xA;      vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;hs&#39;, ht.hoogle.hoogle_signature, opts)&#xA;    end,&#xA;  },&#xA;}&#xA;-- Suggested keymaps that do not depend on haskell-language-server&#xA;-- Toggle a GHCi repl for the current package&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;rr&#39;, ht.repl.toggle, def_opts)&#xA;-- Toggle a GHCi repl for the current buffer&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;rf&#39;, function()&#xA;  ht.repl.toggle(vim.api.nvim_buf_get_name(0))&#xA;end, def_opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;rq&#39;, ht.repl.quit, def_opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;For more LSP related keymaps, &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig#suggested-configuration&#34;&gt;see the &lt;code&gt;nvim-lspconfig&lt;/code&gt; suggestions&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;If using a local &lt;code&gt;hoogle&lt;/code&gt; installation, &lt;a href=&#34;https://github.com/ndmitchell/hoogle/raw/master/docs/Install.md#generate-a-hoogle-database&#34;&gt;follow these instructions&lt;/a&gt; to generate a database.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic haskell-language-server functionality on par with &lt;code&gt;nvim-lspconfig.hls&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Beyond &lt;code&gt;nvim-lspconfig.hls&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dynamically load &lt;code&gt;haskell-language-server&lt;/code&gt; settings per project from JSON files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Clean shutdown of language server on exit to prevent corrupted files (&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/-/issues/14533&#34;&gt;see ghc #14533&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically adds capabilities for the following plugins, if loaded: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-nvim-lsp&#34;&gt;cmp-nvim-lsp&lt;/a&gt; (provides completion sources for &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/camilledejoye/nvim-lsp-selection-range&#34;&gt;nvim-lsp-selection-range&lt;/a&gt; (Adds haskell-specific &lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/features.html#selection-range&#34;&gt;expand selection&lt;/a&gt; support).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically refreshes code lenses by default, which haskell-language-server heavily relies on. &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#advanced-configuration&#34;&gt;Can be disabled.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; The following code lenses are currently supported:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/features.html#add-type-signature&#34;&gt;Show/Add type signatures for bindings without type signatures&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/zC88fqMhPq25lHFYgEF6OxMgk?t=0:04&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/zC88fqMhPq25lHFYgEF6OxMgk.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/features.html#evaluation-code-snippets-in-comments&#34;&gt;Evaluate code snippets in comments&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/TffryPrWpBkLnBK6dKXvOxd41?t=0:04&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/TffryPrWpBkLnBK6dKXvOxd41.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/features.html#make-import-lists-fully-explicit-code-lens&#34;&gt;Make import lists fully explicit&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/l2ggVaN5eQbOj9iGkaethnS7P?t=0:02&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/l2ggVaN5eQbOj9iGkaethnS7P.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/features.html#fix-module-names&#34;&gt;Fix module names that do not match the file path&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/n2qd2zswLOonl2ZEb8uL4MHsG?t=0:02&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/n2qd2zswLOonl2ZEb8uL4MHsG.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Beyond haskell-language-server&lt;/h3&gt; &#xA;&lt;p&gt;The below features are not implemented by haskell-language-server.&lt;/p&gt; &#xA;&lt;h4&gt;Hoogle-search for signature&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search for the type signature under the cursor.&lt;/li&gt; &#xA; &lt;li&gt;Falls back to the word under the cursor if the type signature cannot be determined.&lt;/li&gt; &#xA; &lt;li&gt;Telescope keymaps: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to copy the selected entry (&#xA;    &lt;name&gt;&#xA;      :: &#xA;     &lt;signature&gt;&#xA;      ) to the clipboard.&#xA;     &lt;/signature&gt;&#xA;    &lt;/name&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt; to open the selected entry&#39;s Hackage URL in a browser.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt; to replace the word under the cursor with the selected entry.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;haskell-tools&#39;).hoogle.hoogle_signature()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/4GSmXrCvpt7idBHnuZVQQkJ9R&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/4GSmXrCvpt7idBHnuZVQQkJ9R.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Hole-driven development powered by Hoogle&lt;/h4&gt; &#xA;&lt;p&gt;With the &lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt; keymap, the Hoogle search telescope integration can be used to fill holes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/xEWKbTELrnJD0wNbC5t6jL6Tw?t=0:04&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/xEWKbTELrnJD0wNbC5t6jL6Tw.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;GHCi repl&lt;/h4&gt; &#xA;&lt;p&gt;Start a GHCi repl for the current project / buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automagically detects the appropriate command (&lt;code&gt;cabal new-repl&lt;/code&gt;, &lt;code&gt;stack ghci&lt;/code&gt; or &lt;code&gt;ghci&lt;/code&gt;) for your project.&lt;/li&gt; &#xA; &lt;li&gt;Choose between a builtin handler or &lt;a href=&#34;https://github.com/akinsho/toggleterm.nvim&#34;&gt;&lt;code&gt;toggleterm.nvim&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Dynamically create a repl command for &lt;a href=&#34;https://github.com/hkupty/iron.nvim&#34;&gt;&lt;code&gt;iron.nvim&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#advanced-configuration&#34;&gt;advanced configuration&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Interact with the repl from within Haskell files using a lua API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/HtTdq1tqxoRVjt4hEf22tInLV&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/HtTdq1tqxoRVjt4hEf22tInLV.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Open project/package files for the current buffer&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/LBZ8jceyWZv9kwrSqskxZTGlr&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/LBZ8jceyWZv9kwrSqskxZTGlr.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Hover actions&lt;/h4&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/simrat39/rust-tools.nvim&#34;&gt;rust-tools.nvim&lt;/a&gt;, this plugin adds the following hover actions (if available):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hoogle search for signature.&lt;/li&gt; &#xA; &lt;li&gt;Open documentation in browser.&lt;/li&gt; &#xA; &lt;li&gt;Open source in browser.&lt;/li&gt; &#xA; &lt;li&gt;Go to definition.&lt;/li&gt; &#xA; &lt;li&gt;Find references.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, the default behaviour of stylizing markdown is disabled. And the hover buffer&#39;s filetype is set to markdown, so that &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; users can benefit from syntax highliting of code snippets.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/AqYEBSIVVSw5qPUHumoxHHiUy&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/AqYEBSIVVSw5qPUHumoxHHiUy.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Automatically generate tags&lt;/h4&gt; &#xA;&lt;p&gt;On attaching, Neovim&#39;s LSP client will set up &lt;code&gt;tagfunc&lt;/code&gt; (&lt;code&gt;:h tagfunc&lt;/code&gt;) to query the language server for locations to jump to. If no location is found, it will fall back to a &lt;code&gt;tags&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://github.com/elaforge/fast-tags&#34;&gt;&lt;code&gt;fast-tags&lt;/code&gt;&lt;/a&gt; is installed, this plugin will set up &lt;code&gt;autocmd&lt;/code&gt;s to automatically generate tags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For the whole project, when starting a session.&lt;/li&gt; &#xA; &lt;li&gt;For the current (sub)package, when writing a file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This feature can be tweaked or disabled in the &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#advanced-configuration&#34;&gt;advanced configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Planned&lt;/h3&gt; &#xA;&lt;p&gt;For planned features, refer to the &lt;a href=&#34;https://github.com/MrcJkb/haskell-tools.nvim/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement&#34;&gt;issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;p&gt;To modify the default configs, call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- defaults&#xA;require(&#39;haskell-tools&#39;).setup {&#xA;  tools = { -- haskell-tools options&#xA;    codeLens = {&#xA;      -- Whether to automatically display/refresh codeLenses&#xA;      -- (explicitly set to false to disable)&#xA;      autoRefresh = true,&#xA;    },&#xA;    hoogle = {&#xA;      -- &#39;auto&#39;: Choose a mode automatically, based on what is available.&#xA;      -- &#39;telescope-local&#39;: Force use of a local installation.&#xA;      -- &#39;telescope-web&#39;: The online version (depends on curl).&#xA;      -- &#39;browser&#39;: Open hoogle search in the default browser.&#xA;      mode = &#39;auto&#39;,&#xA;    },&#xA;    hover = {&#xA;      -- Whether to disable haskell-tools hover and use the builtin lsp&#39;s default handler&#xA;      disable = false,&#xA;      -- Set to nil to disable&#xA;      border = {&#xA;        { &#39;â•­&#39;, &#39;FloatBorder&#39; },&#xA;        { &#39;â”€&#39;, &#39;FloatBorder&#39; },&#xA;        { &#39;â•®&#39;, &#39;FloatBorder&#39; },&#xA;        { &#39;â”‚&#39;, &#39;FloatBorder&#39; },&#xA;        { &#39;â•¯&#39;, &#39;FloatBorder&#39; },&#xA;        { &#39;â”€&#39;, &#39;FloatBorder&#39; },&#xA;        { &#39;â•°&#39;, &#39;FloatBorder&#39; },&#xA;        { &#39;â”‚&#39;, &#39;FloatBorder&#39; },&#xA;      },&#xA;      -- Stylize markdown (the builtin lsp&#39;s default behaviour).&#xA;      -- Setting this option to false sets the file type to markdown and enables&#xA;      -- Treesitter syntax highligting for Haskell snippets if nvim-treesitter is installed&#xA;      stylize_markdown = false,&#xA;      -- Whether to automatically switch to the hover window&#xA;      auto_focus = false,&#xA;    },&#xA;    definition = {&#xA;      -- Configure vim.lsp.definition to fall back to hoogle search&#xA;      -- (does not affect vim.lsp.tagfunc)&#xA;      hoogle_signature_fallback = false,&#xA;    },&#xA;    repl = {&#xA;      -- &#39;builtin&#39;: Use the simple builtin repl&#xA;      -- &#39;toggleterm&#39;: Use akinsho/toggleterm.nvim&#xA;      handler = &#39;builtin&#39;,&#xA;      builtin = {&#xA;        create_repl_window = function(view)&#xA;          -- create_repl_split | create_repl_vsplit | create_repl_tabnew | create_repl_cur_win&#xA;          return view.create_repl_split { size = vim.o.lines / 3 }&#xA;        end&#xA;      },&#xA;      -- Can be overriden to either `true` or `false`. The default behaviour depends on the handler.&#xA;      auto_focus = nil,&#xA;    },&#xA;    -- Set up autocmds to generate tags (using fast-tags)&#xA;    -- e.g. so that `vim.lsp.tagfunc` can fall back to Haskell tags&#xA;    tags = {&#xA;      enable = vim.fn.executable(&#39;fast-tags&#39;) == 1,&#xA;      -- Events to trigger package tag generation&#xA;      package_events = { &#39;BufWritePost&#39; },&#xA;    },&#xA;  },&#xA;  hls = { -- LSP client options&#xA;    -- ...&#xA;    default_settings = {&#xA;      haskell = { -- haskell-language-server options&#xA;        formattingProvider = &#39;ormolu&#39;,&#xA;        checkProject = true, -- Setting this to true could have a performance impact on large mono repos.&#xA;        -- ...&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The full list of defaults &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/lua/haskell-tools/config.lua&#34;&gt;can be found here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To view all available language server settings (including those not set by this plugin), run &lt;code&gt;haskell-language-server generate-default-config&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For detailed descriptions of the configs, look at the &lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/configuration.html&#34;&gt;haskell-language-server documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to dynamically load different &lt;code&gt;haskell-language-server&lt;/code&gt; settings per project&lt;/h3&gt; &#xA;&lt;p&gt;By default, this plugin will look for a &lt;code&gt;hls.json&lt;/code&gt; file in the project root directory, and attempt to load it. If the file does not exist, or it can&#39;t be decoded, the &lt;code&gt;hls.default_settings&lt;/code&gt; will be used.&lt;/p&gt; &#xA;&lt;p&gt;You can change this behaviour with the &lt;code&gt;hls.settings&lt;/code&gt; config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ht = require(&#39;haskell-tools&#39;)&#xA;ht.setup {&#xA;  -- ...&#xA;  hls = {&#xA;    settings = function(project_root)&#xA;      return ht.lsp.load_hls_settings(project_root, {&#xA;        settings_file_pattern = &#39;hls.json&#39;&#xA;      })&#xA;    end,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to disable individual code lenses&lt;/h3&gt; &#xA;&lt;p&gt;Some code lenses might be more interesting than others. For example, the &lt;code&gt;importLens&lt;/code&gt; could be annoying if you prefer to import everything or use a custom prelude. Individual code lenses can be turned off by disabling them in the respective plugin configurations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;hls = {&#xA;  settings = {&#xA;    haskell = {&#xA;      plugin = {&#xA;        class = { -- missing class methods&#xA;          codeLensOn = false,&#xA;        },&#xA;        importLens = { -- make import lists fully explicit&#xA;          codeLensOn = false,&#xA;        },&#xA;        refineImports = { -- refine imports&#xA;          codeLensOn = false,&#xA;        },&#xA;        tactics = { -- wingman&#xA;          codeLensOn = false,&#xA;        },&#xA;        moduleName = { -- fix module names&#xA;          globalOn = false,&#xA;        },&#xA;        eval = { -- evaluate code snippets&#xA;          globalOn = false,&#xA;        },&#xA;        [&#39;ghcide-type-lenses&#39;] = { -- show/add missing type signatures&#xA;          globalOn = false,&#xA;        },&#xA;      },&#xA;    },&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set up &lt;a href=&#34;https://github.com/hkupty/iron.nvim&#34;&gt;&lt;code&gt;iron.nvim&lt;/code&gt;&lt;/a&gt; to use &lt;code&gt;haskell-tools.nvim&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Depends on &lt;a href=&#34;https://github.com/hkupty/iron.nvim/pull/300&#34;&gt;iron.nvim/#300&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local iron = require(&#34;iron.core&#34;)&#xA;iron.setup {&#xA;  config = {&#xA;    repl_definition = {&#xA;      haskell = {&#xA;        command = function(meta)&#xA;          local file = vim.api.nvim_buf_get_name(meta.current_bufnr)&#xA;          -- call `require` in case iron is set up before haskell-tools&#xA;          return require(&#39;haskell-tools&#39;).repl.mk_repl_cmd(file)&#xA;        end,&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available functions&lt;/h3&gt; &#xA;&lt;p&gt;For a complete overview, enter &lt;code&gt;:help haskell-tools&lt;/code&gt; in Neovim.&lt;/p&gt; &#xA;&lt;h4&gt;LSP&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ht = require(&#39;haskell-tools&#39;)&#xA;-- Start or attach the LSP client.&#xA;ht.lsp.start()&#xA;&#xA;-- Stop the LSP client.&#xA;ht.lsp.stop()&#xA;&#xA;-- Restart the LSP client.&#xA;ht.lsp.restart()&#xA;&#xA;-- Callback for dynamically loading haskell-language-server settings&#xA;ht.lsp.load_hls_settnngs(project_root)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hoogle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ht = require(&#39;haskell-tools&#39;)&#xA;-- Run a hoogle signature search for the value under the cursor&#xA;ht.hoogle.hoogle_signature()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Repl&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ht = require(&#39;haskell-tools&#39;)&#xA;-- Toggle a GHCi repl for the current project&#xA;ht.repl.toggle()&#xA;&#xA;-- Toggle a GHCi repl for `file` (must be a Haskell file)&#xA;ht.repl.toggle(file)&#xA;&#xA;-- Quit the repl&#xA;ht.repl.quit()&#xA;&#xA;-- Paste a command to the repl from register `reg`. (`reg` defaults to &#39;&#34;&#39;)&#xA;ht.repl.paste(reg)&#xA;&#xA;-- Query the repl for the type of register `reg`. (`reg` defaults to &#39;&#34;&#39;)&#xA;ht.repl.paste_type(reg)&#xA;&#xA;-- Query the repl for the type of word under the cursor&#xA;ht.repl.cword_type()&#xA;&#xA;-- Query the repl for info on register `reg`. (`reg` defaults to &#39;&#34;&#39;)&#xA;ht.repl.paste_info(reg)&#xA;&#xA;-- Query the repl for info on the word under the cursor&#xA;ht.repl.cword_info()&#xA;&#xA;-- Load a file into the repl&#xA;ht.repl.load_file(file)&#xA;&#xA;-- Reload the repl&#xA;ht.repl.reload()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Project&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ht = require(&#39;haskell-tools&#39;)&#xA;-- Open the project file for the current buffer (cabal.project or stack.yaml)&#xA;ht.project.open_project_file()&#xA;&#xA;-- Open the package.yaml file for the current buffer&#xA;ht.project.open_package_yaml()&#xA;&#xA;-- Open the *.cabal file for the current buffer&#xA;ht.project.open_package_cabal()&#xA;&#xA;-- Search for files within the current (sub)package&#xA;-- `opts`: Optional telescope.nvim find_files options&#xA;ht.project.telescope_package_files(opts)&#xA;-- Live grep within the current (sub)package&#xA;-- `opts`: Optional telescope.nvim live_grep options&#xA;ht.project.telescope_package_grep(opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tags&lt;/h4&gt; &#xA;&lt;p&gt;The following functions depend on &lt;a href=&#34;https://github.com/elaforge/fast-tags&#34;&gt;&lt;code&gt;fast-tags&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ht = require(&#39;haskell-tools&#39;)&#xA;&#xA;-- Generate tags for the whole project&#xA;-- `path`: An optional file path, defaults to the current buffer&#xA;-- `opts`: Optional options:&#xA;-- `opts.refresh`: Whether to refresh tags if they have already been generated for a project&#xA;ht.tags.generate_project_tags(path, opts)&#xA;&#xA;-- Generate tags for the whole project&#xA;-- `path`: An optional file path, defaults to the current buffer&#xA;ht.tags.generate_package_tags(path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available commands&lt;/h3&gt; &#xA;&lt;h4&gt;LSP&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:HlsStart&lt;/code&gt; - Start the LSP client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HlsStop&lt;/code&gt; - Stop the LSP client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HlsRestart&lt;/code&gt; - Restart the LSP client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Project&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:HsProjectFile&lt;/code&gt; - Open the project file for the current buffer (cabal.project or stack.yaml).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HsPackageYaml&lt;/code&gt; - Open the package.yaml file for the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HsPackageCabal&lt;/code&gt; - Open the *.cabal file for the current buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Telescope extension&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;&lt;code&gt;telescope.nvim&lt;/code&gt;&lt;/a&gt; is installed, &lt;code&gt;haskell-tools.nvim&lt;/code&gt; will register the &lt;code&gt;ht&lt;/code&gt; extenstion with the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Telescope ht package_files&lt;/code&gt; - Search for files within the current (sub)package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Telescope ht package_hsfiles&lt;/code&gt; - Search for Haskell files within the current (sub)package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Telescope ht package_grep&lt;/code&gt; - Live grep within the current (sub)package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Telescope ht package_hsgrep&lt;/code&gt; - Live grep Haskell files within the current (sub)package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Telescope ht hoogle_signature&lt;/code&gt; - Run a Hoogle search for the type signature under the cursor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To load the extension, call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).load_extension(&#39;ht&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h4&gt;LSP features not working&lt;/h4&gt; &#xA;&lt;p&gt;Check which version of GHC you are using (&lt;code&gt;haskell-language-server-werapper --version&lt;/code&gt;). Sometimes, certain features take some time to be implemented for the latest GHC versions. You can see how well a specific GHC version is supported &lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/support/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Minimal config&lt;/h4&gt; &#xA;&lt;p&gt;To troubleshoot this plugin with a minimal config in a temporary directory, use &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/tests/minimal.lua&#34;&gt;minimal.lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;mkdir -p /tmp/minimal/&#xA;# The first start will install the plugins into the temporary directory&#xA;NVIM_DATA_MINIMAL=/tmp/minimal nvim -u minimal.lua&#xA;# Quit Neovim and start it up again with the plugins loaded&#xA;NVIM_DATA_MINIMAL=/tmp/minimal nvim -u minimal.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logs&lt;/h4&gt; &#xA;&lt;p&gt;To enable debug logging, set the log level to &lt;code&gt;DEBUG&lt;/code&gt; (&lt;code&gt;:h vim.log.levels&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;haskell-tools&#39;).setup {&#xA;  tools = { -- haskell-tools options&#xA;    log = {&#xA;      level = vim.log.levels.DEBUG,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also temporarily set the log level by calling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#39;haskell-tools&#39;).log.set_level(vim.log.levels.DEBUG)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find the log files by calling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- haskell-tools.nvim log&#xA;:lua =require(&#39;haskell-tools&#39;).log.get_logfile()&#xA;-- haskell-language-server logs&#xA;:lua =require(&#39;haskell-tools&#39;).log.get_hls_logfile()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or open them by calling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#39;haskell-tools&#39;).log.nvim_open_logfile()&#xA;:lua require(&#39;haskell-tools&#39;).log.nvim_open_hls_logfile()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recommendations&lt;/h2&gt; &#xA;&lt;p&gt;Here are some other plugins I recommend for Haskell (and nix) development in neovim:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MrcJkb/neotest-haskell&#34;&gt;neotest-haskell&lt;/a&gt;: Interact with tests in neovim.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/luc-tielen/telescope_hoogle&#34;&gt;telescope_hoogle&lt;/a&gt;: Live Hoogle search.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MrcJkb/telescope-manix&#34;&gt;telescope-manix&lt;/a&gt;: Nix search.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;nvim-lint&lt;/a&gt;: As a fallback in case there are problems with haskell-language-server (e.g. in large mono repos).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;: For syntax highlighting, and much more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-textobjects&#34;&gt;nvim-treesitter-textobjects&lt;/a&gt;: For TreeSitter-based textobjects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors âœ¨&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/fabfianda&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/275653?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;fabfianda&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;fabfianda&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/MrcJkb/haskell-tools.nvim/commits?author=fabfianda&#34; title=&#34;Documentation&#34;&gt;ðŸ“–&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/MangoIV&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/40720523?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Mango The Fourth&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Mango The Fourth&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/haskell-tools.nvim/master/#infra-MangoIV&#34; title=&#34;Infrastructure (Hosting, Build-Tools, etc)&#34;&gt;ðŸš‡&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/yen3&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/387292?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Yen3&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yen3&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/MrcJkb/haskell-tools.nvim/commits?author=yen3&#34; title=&#34;Code&#34;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;</summary>
  </entry>
</feed>