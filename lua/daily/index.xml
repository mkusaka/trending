<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-20T01:34:07Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>seblyng/roslyn.nvim</title>
    <updated>2025-08-20T01:34:07Z</updated>
    <id>tag:github.com,2025-08-20:/seblyng/roslyn.nvim</id>
    <link href="https://github.com/seblyng/roslyn.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Roslyn LSP plugin for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;roslyn.nvim&lt;/h1&gt; &#xA;&lt;p&gt;This is an actively maintained &amp;amp; upgraded &lt;a href=&#34;https://github.com/jmederosalvarado/roslyn.nvim&#34;&gt;fork&lt;/a&gt; that interacts with the improved &amp;amp; open-source C# &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt; language server, meant to replace the old and discontinued OmniSharp. This language server is currently used in the &lt;a href=&#34;https://github.com/dotnet/vscode-csharp&#34;&gt;Visual Studio Code C# Extension&lt;/a&gt;, which is shipped with the standard C# Dev Kit.&lt;/p&gt; &#xA;&lt;h2&gt;IMPORTANT&lt;/h2&gt; &#xA;&lt;p&gt;This plugin does not provide Razor support.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/tris203/rzls.nvim&#34;&gt;https://github.com/tris203/rzls.nvim&lt;/a&gt; if you are using Razor.&lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.11.0&lt;/li&gt; &#xA; &lt;li&gt;Roslyn language server downloaded locally&lt;/li&gt; &#xA; &lt;li&gt;.NET SDK installed and &lt;code&gt;dotnet&lt;/code&gt; command available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Difference to nvim-lspconfig&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;roslyn&lt;/code&gt; is now a part of &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;, but it does not implement all things that are implemented here. This plugin tries to keep things minimal but still implement some things that is not suited for &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;. A couple of additional things this plugin implements&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for multiple solutions&lt;/li&gt; &#xA; &lt;li&gt;Broad root_dir detection support. Meaning it will search for solutions upward in parent directories if &lt;code&gt;broad_search&lt;/code&gt; option is set&lt;/li&gt; &#xA; &lt;li&gt;Support for source generated files&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;Fix all&lt;/code&gt;, &lt;code&gt;Nested code actions&lt;/code&gt; and &lt;code&gt;Complex edit&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Roslyn target&lt;/code&gt; command to switch between multiple solutions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/a749f6c7-fc87-440c-912d-666d86453bc5&#34;&gt;https://github.com/user-attachments/assets/a749f6c7-fc87-440c-912d-666d86453bc5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Mason&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;roslyn&lt;/code&gt; is not in the mason core registry, so a custom registry is used. This registry provides two binaries&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;roslyn&lt;/code&gt; (To be used with this repo)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rzls&lt;/code&gt; (To be used with &lt;a href=&#34;https://github.com/tris203/rzls.nvim&#34;&gt;rzls.nvim&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;You need to set up the custom registry like this&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup({&#xA;    registries = {&#xA;        &#34;github:mason-org/mason-registry&#34;,&#xA;        &#34;github:Crashdummyy/mason-registry&#34;,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can then install it with &lt;code&gt;:MasonInstall roslyn&lt;/code&gt; or through the popup menu by running &lt;code&gt;:Mason&lt;/code&gt;. It is not available through &lt;a href=&#34;https://github.com/williamboman/mason-lspconfig.nvim&#34;&gt;mason-lspconfig.nvim&lt;/a&gt; and the &lt;code&gt;:LspInstall&lt;/code&gt; interface When installing the server through mason, the cmd is automatically added to the LSP config, so no need to add it manually&lt;/p&gt; &#xA; &lt;p&gt;The stable version of &lt;code&gt;roslyn&lt;/code&gt; is provided through &lt;code&gt;roslyn&lt;/code&gt; in the mason registry. This is the same version as in vscode. If you want the bleeding edge features, you can choose &lt;code&gt;roslyn-unstable&lt;/code&gt;. Be aware of breaking changes if you choose this version&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;There&#39;s currently an open &lt;a href=&#34;https://github.com/mason-org/mason-registry/pull/6330&#34;&gt;pull request&lt;/a&gt; to add the Roslyn server to &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;mason&lt;/a&gt;, which would greatly improve the experience. If you are interested in this, please react to the original comment, but don&#39;t spam the thread with unnecessary comments.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Manually&lt;/summary&gt; &#xA; &lt;p&gt;NOTE: The manual installation instructions are the same for this plugin and for nvim-lspconfig. The following instructions are copied from &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/configs.md#roslyn_ls&#34;&gt;nvim-lspconfig&lt;/a&gt;. If the installation instructions are not up-to-date or not clear, please first send a PR to &lt;code&gt;nvim-lspconfig&lt;/code&gt; with improvements so that we can align the installation instructions.&lt;/p&gt; &#xA; &lt;p&gt;To install the server, compile from source or download as nuget package. Go to &lt;code&gt;https://dev.azure.com/azure-public/vside/_artifacts/feed/vs-impl/NuGet/Microsoft.CodeAnalysis.LanguageServer.&amp;lt;platform&amp;gt;/overview&lt;/code&gt; replace &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; with one of the following &lt;code&gt;linux-x64&lt;/code&gt;, &lt;code&gt;osx-x64&lt;/code&gt;, &lt;code&gt;win-x64&lt;/code&gt;, &lt;code&gt;neutral&lt;/code&gt; (for more info on the download location see &lt;a href=&#34;https://github.com/dotnet/roslyn/issues/71474#issuecomment-2177303207&#34;&gt;https://github.com/dotnet/roslyn/issues/71474#issuecomment-2177303207&lt;/a&gt;). Download and extract it (nuget&#39;s are zip files).&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;if you chose &lt;code&gt;neutral&lt;/code&gt; nuget version, then you have to change the &lt;code&gt;cmd&lt;/code&gt; like so:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;cmd = {&#xA;    &#34;dotnet&#34;,&#xA;    &#34;&amp;lt;my_folder&amp;gt;/Microsoft.CodeAnalysis.LanguageServer.dll&#34;,&#xA;    &#34;--logLevel&#34;, -- this property is required by the server&#xA;    &#34;Information&#34;,&#xA;    &#34;--extensionLogDirectory&#34;, -- this property is required by the server&#xA;    fs.joinpath(uv.os_tmpdir(), &#34;roslyn_ls/logs&#34;),&#xA;    &#34;--stdio&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;where &lt;code&gt;&amp;lt;my_folder&amp;gt;&lt;/code&gt; has to be the folder you extracted the nuget package to.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;for all other platforms put the extracted folder to neovim&#39;s PATH (&lt;code&gt;vim.env.PATH&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;br /&gt; For server compatibility check the &lt;a href=&#34;https://github.com/dotnet/roslyn/raw/main/docs/wiki/NuGet-packages.md#versioning&#34;&gt;roslyn repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install the plugin with your preferred package manager:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;    &#34;seblyng/roslyn.nvim&#34;,&#xA;    ---@module &#39;roslyn.config&#39;&#xA;    ---@type RoslynNvimConfig&#xA;    opts = {&#xA;        -- your configuration comes here; leave empty for default settings&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The plugin comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;opts = {&#xA;    -- &#34;auto&#34; | &#34;roslyn&#34; | &#34;off&#34;&#xA;    --&#xA;    -- - &#34;auto&#34;: Does nothing for filewatching, leaving everything as default&#xA;    -- - &#34;roslyn&#34;: Turns off neovim filewatching which will make roslyn do the filewatching&#xA;    -- - &#34;off&#34;: Hack to turn off all filewatching. (Can be used if you notice performance issues)&#xA;    filewatching = &#34;auto&#34;,&#xA;&#xA;    -- Optional function that takes an array of targets as the only argument. Return the target you&#xA;    -- want to use. If it returns `nil`, then it falls back to guessing the target like normal&#xA;    -- Example:&#xA;    --&#xA;    -- choose_target = function(target)&#xA;    --     return vim.iter(target):find(function(item)&#xA;    --         if string.match(item, &#34;Foo.sln&#34;) then&#xA;    --             return item&#xA;    --         end&#xA;    --     end)&#xA;    -- end&#xA;    choose_target = nil,&#xA;&#xA;    -- Optional function that takes the selected target as the only argument.&#xA;    -- Returns a boolean of whether it should be ignored to attach to or not&#xA;    --&#xA;    -- I am for example using this to disable a solution with a lot of .NET Framework code on mac&#xA;    -- Example:&#xA;    --&#xA;    -- ignore_target = function(target)&#xA;    --     return string.match(target, &#34;Foo.sln&#34;) ~= nil&#xA;    -- end&#xA;    ignore_target = nil,&#xA;&#xA;    -- Whether or not to look for solution files in the child of the (root).&#xA;    -- Set this to true if you have some projects that are not a child of the&#xA;    -- directory with the solution file&#xA;    broad_search = false,&#xA;&#xA;    -- Whether or not to lock the solution target after the first attach.&#xA;    -- This will always attach to the target in `vim.g.roslyn_nvim_selected_solution`.&#xA;    -- NOTE: You can use `:Roslyn target` to change the target&#xA;    lock_target = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure language server specific settings sent to the server, you can use the &lt;code&gt;vim.lsp.config&lt;/code&gt; interface with &lt;code&gt;roslyn&lt;/code&gt; as the name of the server.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.config(&#34;roslyn&#34;, {&#xA;    on_attach = function()&#xA;        print(&#34;This will run when the server attaches!&#34;)&#xA;    end,&#xA;    settings = {&#xA;        [&#34;csharp|inlay_hints&#34;] = {&#xA;            csharp_enable_inlay_hints_for_implicit_object_creation = true,&#xA;            csharp_enable_inlay_hints_for_implicit_variable_types = true,&#xA;        },&#xA;        [&#34;csharp|code_lens&#34;] = {&#xA;            dotnet_enable_references_code_lens = true,&#xA;        },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some tips and tricks that may be useful, but not in the scope of this plugin, are documented in the &lt;a href=&#34;https://github.com/seblyng/roslyn.nvim/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br /&gt; These settings are not guaranteed to be up-to-date and new ones can appear in the future. Aditionally, not not all settings are shown here, but only the most relevant ones for Neovim. For a full list, visit &lt;a href=&#34;https://github.com/dotnet/vscode-csharp/raw/main/test/lsptoolshost/unitTests/configurationMiddleware.test.ts&#34;&gt;this&lt;/a&gt; unit test from the vscode extension and look especially for the ones which &lt;strong&gt;don&#39;t&lt;/strong&gt; have &lt;code&gt;vsCodeConfiguration: null&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Background Analysis&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|background_analysis&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These settings control the scope of background diagnostics.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;background_analysis.dotnet_analyzer_diagnostics_scope&lt;/code&gt;&lt;br /&gt; Scope of the background analysis for .NET analyzer diagnostics.&lt;br /&gt; Expected values: &lt;code&gt;openFiles&lt;/code&gt;, &lt;code&gt;fullSolution&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;background_analysis.dotnet_compiler_diagnostics_scope&lt;/code&gt;&lt;br /&gt; Scope of the background analysis for .NET compiler diagnostics.&lt;br /&gt; Expected values: &lt;code&gt;openFiles&lt;/code&gt;, &lt;code&gt;fullSolution&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code Lens&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|code_lens&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These settings control the LSP code lens.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_references_code_lens&lt;/code&gt;&lt;br /&gt; Enable code lens references.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_tests_code_lens&lt;/code&gt;&lt;br /&gt; Enable tests code lens.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You must refresh the code lens yourself. Check &lt;code&gt;:h vim.lsp.codelens.refresh()&lt;/code&gt; and the example autocmd.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Completions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|completion&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These settings control how the completions behave.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_provide_regex_completions&lt;/code&gt;&lt;br /&gt; Show regular expressions in completion list.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_show_completion_items_from_unimported_namespaces&lt;/code&gt;&lt;br /&gt; Enables support for showing unimported types and unimported extension methods in completion lists.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_show_name_completion_suggestions&lt;/code&gt;&lt;br /&gt; Perform automatic object name completion for the members that you have recently selected.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inlay hints&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|inlay_hints&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These settings control what inlay hints should be displayed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;csharp_enable_inlay_hints_for_implicit_object_creation&lt;/code&gt;&lt;br /&gt; Show hints for implicit object creation.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;csharp_enable_inlay_hints_for_implicit_variable_types&lt;/code&gt;&lt;br /&gt; Show hints for variables with inferred types.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;csharp_enable_inlay_hints_for_lambda_parameter_types&lt;/code&gt;&lt;br /&gt; Show hints for lambda parameter types.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;csharp_enable_inlay_hints_for_types&lt;/code&gt;&lt;br /&gt; Display inline type hints.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_inlay_hints_for_indexer_parameters&lt;/code&gt;&lt;br /&gt; Show hints for indexers.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_inlay_hints_for_literal_parameters&lt;/code&gt;&lt;br /&gt; Show hints for literals.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_inlay_hints_for_object_creation_parameters&lt;/code&gt;&lt;br /&gt; Show hints for &#39;new&#39; expressions.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_inlay_hints_for_other_parameters&lt;/code&gt;&lt;br /&gt; Show hints for everything else.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_inlay_hints_for_parameters&lt;/code&gt;&lt;br /&gt; Display inline parameter name hints.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_suppress_inlay_hints_for_parameters_that_differ_only_by_suffix&lt;/code&gt;&lt;br /&gt; Suppress hints when parameter names differ only by suffix.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_suppress_inlay_hints_for_parameters_that_match_argument_name&lt;/code&gt;&lt;br /&gt; Suppress hints when argument matches parameter name.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_suppress_inlay_hints_for_parameters_that_match_method_intent&lt;/code&gt;&lt;br /&gt; Suppress hints when parameter name matches the method&#39;s intent.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] These won&#39;t have any effect if you don&#39;t enable inlay hints in your config. Check &lt;code&gt;:h vim.lsp.inlay_hint.enable()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Symbol search&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|symbol_search&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This setting controls how the language server should search for symbols.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dotnet_search_reference_assemblies&lt;/code&gt;&lt;br /&gt; Search symbols in reference assemblies.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|formatting&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This setting controls how the language server should format code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dotnet_organize_imports_on_format&lt;/code&gt;&lt;br /&gt; Sort using directives on format alphabetically.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìö Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Roslyn restart&lt;/code&gt; restarts the server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Roslyn start&lt;/code&gt; starts the server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Roslyn stop&lt;/code&gt; stops the server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Roslyn target&lt;/code&gt; chooses a solution if there are multiple to chose from&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ Other usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have multiple solutions, this plugin tries to guess which one to use. You can change the target with the &lt;code&gt;:Roslyn target&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;The current solution is always stored in &lt;code&gt;vim.g.roslyn_nvim_selected_solution&lt;/code&gt;. You can use this, for example, to display the current solution in your statusline.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>A7Lavinraj/fyler.nvim</title>
    <updated>2025-08-20T01:34:07Z</updated>
    <id>tag:github.com,2025-08-20:/A7Lavinraj/fyler.nvim</id>
    <link href="https://github.com/A7Lavinraj/fyler.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A neovim file manager which can edit file system like a buffer with tree view&lt;/p&gt;&lt;hr&gt;&lt;div&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;br /&gt; &#xA;  &lt;br /&gt; &#xA;  &lt;br /&gt; &#xA;  &lt;img width=&#34;250&#34; alt=&#34;fyler-logo&#34; src=&#34;https://github.com/user-attachments/assets/24838a97-e3d0-4451-ae69-433f52f816a1&#34; /&gt; &#xA;  &lt;br /&gt; &#xA;  &lt;br /&gt; &#xA;  &lt;br /&gt; &#xA;  &lt;h1&gt;Fyler.nvim&lt;/h1&gt; &#xA;  &lt;table&gt; &#xA;   &lt;tbody&gt;&#xA;    &lt;tr&gt; &#xA;     &lt;td&gt; &lt;strong&gt;A file manager for &lt;a href=&#34;https://neovim.io&#34;&gt;Neovim&lt;/a&gt;&lt;/strong&gt; &lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt;&#xA;  &lt;/table&gt; &#xA;  &lt;div&gt; &#xA;   &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/A7Lavinraj/fyler.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=ee999f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34; /&gt; &#xA;   &lt;img alt=&#34;Stars&#34; src=&#34;https://img.shields.io/github/stars/A7Lavinraj/fyler.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c69ff5&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34; /&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA; &lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://youtube.com/playlist?list=PLE5gu3yOYmtiTiC1J3BysrcormCt_eWuq&amp;amp;si=L6yEiJI7rNuCp5cy&#34;&gt;Live Streams&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/A7Lavinraj/fyler.nvim/wiki&#34;&gt;Wiki Page&lt;/a&gt; &lt;/h4&gt; &#xA; &lt;img alt=&#34;Showcase&#34; src=&#34;https://github.com/user-attachments/assets/51d8d4dd-6b0a-4539-af65-84dc6714066c&#34; /&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Please be careful while choosing between &lt;code&gt;stable&lt;/code&gt; and &lt;code&gt;latest&lt;/code&gt; version.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; branch updates on releases.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; version documentation might be different.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;main&lt;/code&gt; branch updates frequently(can have bugs).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Stable version&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Please refer to &lt;code&gt;stable&lt;/code&gt; version &lt;a href=&#34;https://github.com/A7Lavinraj/fyler.nvim/raw/stable/README.md&#34;&gt;documentation page&lt;/a&gt;. Latest version documentation might not be compatible for stable version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;&lt;strong&gt;Lazy.nvim&lt;/strong&gt;&lt;/a&gt; (recommended)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;A7Lavinraj/fyler.nvim&#34;,&#xA;  dependencies = { &#34;echasnovski/mini.icons&#34; },&#xA;  branch = &#34;stable&#34;,&#xA;  opts = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Latest version&lt;/h3&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;&lt;strong&gt;Lazy.nvim&lt;/strong&gt;&lt;/a&gt; (recommended)&lt;/summary&gt; &#xA; &lt;p&gt;You can use default setup with &lt;code&gt;mini.icons&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;A7Lavinraj/fyler.nvim&#34;,&#xA;  dependencies = { &#34;echasnovski/mini.icons&#34; },&#xA;  opts = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or change to &lt;code&gt;nvim-web-devicons&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;A7Lavinraj/fyler.nvim&#34;,&#xA;  dependencies = { &#34;nvim-tree/nvim-web-devicons&#34; },&#xA;  opts = {&#xA;    icon_provider = &#34;nvim-web-devicons&#34;,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.deps&#34;&gt;&lt;strong&gt;Mini.deps&lt;/strong&gt;&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add({&#xA;  source = &#39;A7Lavinraj/fyler.nvim&#39;,&#xA;  depends = { &#39;echasnovski/mini.icons&#39; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;(Default configuration)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local defaults = {&#xA;  hooks = {&#xA;    on_delete = function(path) end,&#xA;    on_rename = function(src_path, dst_path) end,&#xA;  },&#xA;  -- Changes icon provider&#xA;  icon_provider = &#34;mini-icons&#34;,&#xA;  -- Changes mappings for associated view&#xA;  mappings = {&#xA;    explorer = {&#xA;      [&#34;q&#34;] = &#34;CloseView&#34;,&#xA;      [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;Select&#34;,&#xA;      [&#34;&amp;lt;C-t&amp;gt;&#34;] = &#34;SelectTab&#34;,&#xA;      [&#34;|&#34;] = &#34;SelectVSplit&#34;,&#xA;      [&#34;-&#34;] = &#34;SelectSplit&#34;,&#xA;      [&#34;^&#34;] = &#34;GotoParent&#34;,&#xA;      [&#34;=&#34;] = &#34;GotoCwd&#34;,&#xA;      [&#34;.&#34;] = &#34;GotoNode&#34;,&#xA;    },&#xA;    confirm = {&#xA;      [&#34;y&#34;] = &#34;Confirm&#34;,&#xA;      [&#34;n&#34;] = &#34;Discard&#34;,&#xA;    },&#xA;  },&#xA;  -- Changes builtin highlight groups&#xA;  on_highlights = function() end,&#xA;  -- Changes configuration for associated view&#xA;  views = {&#xA;    confirm = {&#xA;      win = {&#xA;        -- Changes window border&#xA;        border = &#34;single&#34;,&#xA;        -- Changes buffer options&#xA;        buf_opts = {&#xA;          buflisted = false,&#xA;          modifiable = false,&#xA;        },&#xA;        -- Changes window kind&#xA;        kind = &#34;float&#34;,&#xA;        -- Changes window kind preset&#xA;        kind_presets = {&#xA;          float = {&#xA;            height = &#34;0.3rel&#34;,&#xA;            width = &#34;0.4rel&#34;,&#xA;            top = &#34;0.3rel&#34;,&#xA;            left = &#34;0.3rel&#34;,&#xA;          },&#xA;          replace = {},&#xA;          split_above = {&#xA;            height = &#34;0.5rel&#34;,&#xA;          },&#xA;          split_above_all = {&#xA;            height = &#34;0.5rel&#34;,&#xA;          },&#xA;          split_below = {&#xA;            height = &#34;0.5rel&#34;,&#xA;          },&#xA;          split_below_all = {&#xA;            height = &#34;0.5rel&#34;,&#xA;          },&#xA;          split_left = {&#xA;            width = &#34;0.5rel&#34;,&#xA;          },&#xA;          split_left_most = {&#xA;            width = &#34;0.5rel&#34;,&#xA;          },&#xA;          split_right = {&#xA;            width = &#34;0.5rel&#34;,&#xA;          },&#xA;          split_right_most = {&#xA;            width = &#34;0.5rel&#34;,&#xA;          },&#xA;        },&#xA;        -- Changes window options&#xA;        win_opts = {&#xA;          winhighlight = &#34;Normal:Normal,FloatBorder:FloatBorder,FloatTitle:FloatTitle&#34;,&#xA;          wrap = false,&#xA;        },&#xA;      },&#xA;    },&#xA;    explorer = {&#xA;      -- Changes explorer closing behaviour when a file get selected&#xA;      close_on_select = true,&#xA;      -- Changes explorer behaviour to auto confirm simple edits&#xA;      confirm_simple = false,&#xA;      -- Changes explorer behaviour to hijack NETRW&#xA;      default_explorer = false,&#xA;      -- Changes git statuses visibility&#xA;      git_status = true,&#xA;      -- Changes Indentation marker properties&#xA;      indentscope = {&#xA;        enabled = true,&#xA;        group = &#34;FylerIndentMarker&#34;,&#xA;        marker = &#34;‚îÇ&#34;,&#xA;      },&#xA;      win = {&#xA;      -- Changes window border&#xA;        border = &#34;single&#34;,&#xA;      -- Changes buffer options&#xA;        buf_opts = {&#xA;          buflisted = false,&#xA;          buftype = &#34;acwrite&#34;,&#xA;          expandtab = true,&#xA;          filetype = &#34;fyler&#34;,&#xA;          shiftwidth = 2,&#xA;        },&#xA;      -- Changes window kind&#xA;        kind = &#34;replace&#34;,&#xA;      -- Changes window kind preset&#xA;        kind_presets = {&#xA;          float = {&#xA;            height = &#34;0.7rel&#34;,&#xA;            width = &#34;0.7rel&#34;,&#xA;            top = &#34;0.15rel&#34;,&#xA;            left = &#34;0.15rel&#34;,&#xA;          },&#xA;          replace = {},&#xA;          split_above = {&#xA;            height = &#34;0.7rel&#34;,&#xA;          },&#xA;          split_above_all = {&#xA;            height = &#34;0.7rel&#34;,&#xA;          },&#xA;          split_below = {&#xA;            height = &#34;0.7rel&#34;,&#xA;          },&#xA;          split_below_all = {&#xA;            height = &#34;0.7rel&#34;,&#xA;          },&#xA;          split_left = {&#xA;            width = &#34;0.3rel&#34;,&#xA;          },&#xA;          split_left_most = {&#xA;            width = &#34;0.3rel&#34;,&#xA;          },&#xA;          split_right = {&#xA;            width = &#34;0.3rel&#34;,&#xA;          },&#xA;          split_right_most = {&#xA;            width = &#34;0.3rel&#34;,&#xA;          },&#xA;        },&#xA;      -- Changes window options&#xA;        win_opts = {&#xA;          concealcursor = &#34;nvic&#34;,&#xA;          conceallevel = 3,&#xA;          cursorline = true,&#xA;          number = true,&#xA;          relativenumber = true,&#xA;          winhighlight = &#34;Normal:Normal,FloatBorder:FloatBorder,FloatTitle:FloatTitle&#34;,&#xA;          wrap = false,&#xA;        },&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can either open Fyler by &lt;code&gt;Fyler&lt;/code&gt; command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Fyler             &#34; Open with default options&#xA;:Fyler kind=&amp;lt;kind&amp;gt; &#34; Open with specific window kind&#xA;:Fyler cwd=&amp;lt;path&amp;gt;  &#34; Open with specific directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or using lua api&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local fyler = require(&#34;fyler&#34;)&#xA;&#xA;-- Open with default options&#xA;fyler.open()&#xA;&#xA;-- Open with specific directory&#xA;fyler.open({ cwd = &#34;~/&#34; })&#xA;&#xA;-- Open with specific kind&#xA;fyler.open({ kind = &#34;split_left_most&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODOS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; Basic operations &lt;code&gt;CREATE | DELETE | MOVE | COPY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; GIT integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; Indentation guides&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; LSP integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; NETRW Hijacking&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; Public APIs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; Track current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; User command&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; File system watching&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Fuzzy finding&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; SSH integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Have problems with fyler.nvim?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Search for existing &lt;a href=&#34;https://github.com/A7Lavinraj/fyler.nvim/issues&#34;&gt;issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If related issue is not there then open a new one&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Want to contribute to this project?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read the &lt;a href=&#34;https://github.com/A7Lavinraj/fyler.nvim/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Similar plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stevearc/oil.nvim&#34;&gt;oil.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.files&#34;&gt;mini.files&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Codebase inspiration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NeogitOrg/neogit&#34;&gt;neogit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/rename.md&#34;&gt;snacks.rename&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Special thanks to all contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=A7Lavinraj/fyler.nvim&#34; alt=&#34;Contributors&#34; /&gt;&lt;/p&gt;</summary>
  </entry>
</feed>