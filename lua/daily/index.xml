<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-20T01:41:00Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>svrana/neosolarized.nvim</title>
    <updated>2022-08-20T01:41:00Z</updated>
    <id>tag:github.com,2022-08-20:/svrana/neosolarized.nvim</id>
    <link href="https://github.com/svrana/neosolarized.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Truecolor solarized theme for neovim in Lua using colorbuddy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;neosolarized.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A truecolor, solarized dark colorscheme using &lt;a href=&#34;https://github.com/tjdevries/colorbuddy.vim&#34;&gt;tjdevries/colorbuddy.vim&lt;/a&gt; for neovim.&lt;/p&gt; &#xA;&lt;p&gt;Based on &lt;a href=&#34;https://github.com/overcache/NeoSolarized&#34;&gt;NeoSolarized&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/svrana/neosolarized.nvim/raw/assets/assets/screenshot1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve used a bunch of solarized themes. The best I have found is NeoSolarized. Despite it being fantastic, like most themes, I wanted to tweak it here and there and really wanted a lua solution for this in the style of the latest and greatest neovim plugins that allow customizations via a setup function.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dark only&lt;/li&gt; &#xA; &lt;li&gt;termguicolors only&lt;/li&gt; &#xA; &lt;li&gt;neovim only&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have &lt;a href=&#34;https://github.com/tjdevries/colorbuddy.vim&#34;&gt;colorbuddy&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;p&gt;After installed colorbuddy and neosolarized.nvim with your favorite package manager, from your init.vim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lua &amp;lt;&amp;lt; EOF&#xA;  require(&#39;neosolarized&#39;).setup({&#xA;    comment_italics = true,&#xA;  })&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example above is with the default settings.&lt;/p&gt; &#xA;&lt;p&gt;This will change the foreground color of the TODO highlight.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lua &amp;lt;&amp;lt; EOF&#xA;  n = require(&#39;neosolarized&#39;).setup({&#xA;    comment_italics = true,&#xA;  })&#xA;  n.Group.new(&#39;TODO&#39;, n.colors.blue)&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Group&lt;/code&gt; above is from &lt;a href=&#34;https://github.com/tjdevries/colorbuddy.vim&#34;&gt;colorbuddy&lt;/a&gt;. The solarized colors are defined in n.colors and returned so you do not need to define them again.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy customization without messing with nvim highlights&lt;/li&gt; &#xA; &lt;li&gt;LSP diagnostic colors (no need for lsp-colors, for example)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Plugins supported&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nvim-cmp&lt;/li&gt; &#xA; &lt;li&gt;lsp-saga&lt;/li&gt; &#xA; &lt;li&gt;telescope&lt;/li&gt; &#xA; &lt;li&gt;vim-gitgutter&lt;/li&gt; &#xA; &lt;li&gt;neomake&lt;/li&gt; &#xA; &lt;li&gt;seblj/nvim-tabline&lt;/li&gt; &#xA; &lt;li&gt;kevinwhang91/nvim-bqf&lt;/li&gt; &#xA; &lt;li&gt;Primeagen/harpoon&lt;/li&gt; &#xA; &lt;li&gt;lewis6991/gitsigns.nvim&lt;/li&gt; &#xA; &lt;li&gt;phaazon/hop.nvim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pum/lsp-cmp style improvements (A dark background option would be nice)&lt;/li&gt; &#xA; &lt;li&gt;treesitter highlights have not been defined. I do use treesitter for highlighting but the existing groups have worked well enough for me up to this point.&lt;/li&gt; &#xA; &lt;li&gt;port the remaining features from neosolarized if they are requested by others&lt;/li&gt; &#xA; &lt;li&gt;non-truecolors version for console use&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>AaronJackson/vrn-docker</title>
    <updated>2022-08-20T01:41:00Z</updated>
    <id>tag:github.com,2022-08-20:/AaronJackson/vrn-docker</id>
    <link href="https://github.com/AaronJackson/vrn-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üê≥ Docker files for Large Pose 3D Face Reconstruction from a Single Image via Direct Volumetric CNN Regression&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Docker build for vrn code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;ve been redirected here from the 3D face reconstruction demo website: Sorry, I turned it off.&lt;/p&gt; &#xA;&lt;p&gt;This is intended to work on CPU. Will modify eventually to have CUDA support. It&#39;s available on DockerHub but you are welcome to build it yourself too. If you feel like doing this yourself, please feel free to send a pull request to a branch called cuda.&lt;/p&gt; &#xA;&lt;p&gt;** Setup&lt;/p&gt; &#xA;&lt;p&gt;*** Dockerhub&lt;/p&gt; &#xA;&lt;p&gt;The pre-built docker image is available on Docker Hub and includes the CPU float versions of the models.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sudo docker pull asjackson/vrn:latest #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Build docker manually&lt;/p&gt; &#xA;&lt;p&gt;The model files were originally held in GitHub&#39;s LFS, but I ran out of space. If you want to build the container yourself, feel free to ask me for links to these files, or alternatively grab them from inside the Docker Hub container.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC git clone cd vrn-docker docker build -t vrn . #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Running the container&lt;/p&gt; &#xA;&lt;p&gt;An example image of Alan Turing is available in the folder &lt;del&gt;data&lt;/del&gt;, this needs to be bind mounted to &lt;del&gt;/data&lt;/del&gt; in the container. With any luck, &lt;del&gt;data/turing.jpg.obj&lt;/del&gt; will be created.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC docker run -v $PWD/data:/data:Z asjackson/vrn /runner/run.sh /data/turing.jpg #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The Z suffix changes the SELinux context of the directory so that it can be accessed on systems which have SELinux enabled. This might not be necessary on some distributions, such as Ubuntu, where SELinux is disabled by default. However, it is likely required under CentOS and Fedora.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Bimmr/Monster-Hunter-Rise-Reframework-Scripts-</title>
    <updated>2022-08-20T01:41:00Z</updated>
    <id>tag:github.com,2022-08-20:/Bimmr/Monster-Hunter-Rise-Reframework-Scripts-</id>
    <link href="https://github.com/Bimmr/Monster-Hunter-Rise-Reframework-Scripts-" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lua Scripts made for the Reframework mod for Monster Hunter Rise&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Bow Level Indicator&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Indicate bow charge level &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Shown in text&lt;/li&gt; &#xA;   &lt;li&gt;Shown with icons below target indicator&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Configurable &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Change position&lt;/li&gt; &#xA;   &lt;li&gt;Change Colour&lt;/li&gt; &#xA;   &lt;li&gt;Change Icon type&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Buffer&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Buffs for Misc &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unlimited Wirebugs&lt;/li&gt; &#xA;   &lt;li&gt;100% Dango Skills&lt;/li&gt; &#xA;   &lt;li&gt;Healing&lt;/li&gt; &#xA;   &lt;li&gt;Stamina&lt;/li&gt; &#xA;   &lt;li&gt;Unlimited Ammo &amp;amp; Coatings&lt;/li&gt; &#xA;   &lt;li&gt;Unlimited Consumables&lt;/li&gt; &#xA;   &lt;li&gt;Auto Reloading&lt;/li&gt; &#xA;   &lt;li&gt;White Sharpness&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Buffs for weapons &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Great Sword&lt;/li&gt; &#xA;   &lt;li&gt;Long Sword&lt;/li&gt; &#xA;   &lt;li&gt;Dual Blades&lt;/li&gt; &#xA;   &lt;li&gt;Hammer&lt;/li&gt; &#xA;   &lt;li&gt;Hunting Horn&lt;/li&gt; &#xA;   &lt;li&gt;Switch Axe&lt;/li&gt; &#xA;   &lt;li&gt;Charge Blade&lt;/li&gt; &#xA;   &lt;li&gt;Insect Glaive&lt;/li&gt; &#xA;   &lt;li&gt;Light Bowgun&lt;/li&gt; &#xA;   &lt;li&gt;Heavy Bowgun&lt;/li&gt; &#xA;   &lt;li&gt;Bow&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;DevTester&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For personal use to play around and see values &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;View Player data&lt;/li&gt; &#xA;   &lt;li&gt;View values from updates on different paths&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SpiritBirds&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manually spawn different types of SpiritBirds &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Attack&lt;/li&gt; &#xA;   &lt;li&gt;Defense&lt;/li&gt; &#xA;   &lt;li&gt;Health&lt;/li&gt; &#xA;   &lt;li&gt;Stamina&lt;/li&gt; &#xA;   &lt;li&gt;Prism&lt;/li&gt; &#xA;   &lt;li&gt;Golden&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automatically spawn a Prism at the start of a quest&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>