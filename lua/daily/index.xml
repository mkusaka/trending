<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-31T01:33:07Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>greggh/claude-code.nvim</title>
    <updated>2025-05-31T01:33:07Z</updated>
    <id>tag:github.com,2025-05-31:/greggh/claude-code.nvim</id>
    <link href="https://github.com/greggh/claude-code.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Seamless integration between Claude Code AI assistant and Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Claude Code Neovim Plugin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/greggh/claude-code.nvim/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/greggh/claude-code.nvim?style=flat-square&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/greggh/claude-code.nvim?style=flat-square&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/greggh/claude-code.nvim?style=flat-square&#34; alt=&#34;GitHub Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/greggh/claude-code.nvim/ci.yml?branch=main&amp;amp;style=flat-square&amp;amp;logo=github&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim-0.7%2B-blueviolet?style=flat-square&amp;amp;logo=neovim&#34; alt=&#34;Neovim Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Tests-44%20passing-success?style=flat-square&amp;amp;logo=github-actions&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/releases/tag/v0.4.2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Version-0.4.2-blue?style=flat-square&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/greggh/claude-code.nvim?style=flat-square&amp;amp;logo=github&#34; alt=&#34;Discussions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A seamless integration between &lt;a href=&#34;https://github.com/anthropics/claude-code&#34;&gt;Claude Code&lt;/a&gt; AI assistant and Neovim&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#contributing&#34;&gt;Contributing&lt;/a&gt; • &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/greggh/claude-code.nvim/raw/main/assets/claude-code.png?raw=true&#34; alt=&#34;Claude Code in Neovim&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin was built entirely with Claude Code in a Neovim terminal, and then inside itself using Claude Code for everything!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🚀 Toggle Claude Code in a terminal window with a single key press&lt;/li&gt; &#xA; &lt;li&gt;🧠 Support for command-line arguments like &lt;code&gt;--continue&lt;/code&gt; and custom variants&lt;/li&gt; &#xA; &lt;li&gt;🔄 Automatically detect and reload files modified by Claude Code&lt;/li&gt; &#xA; &lt;li&gt;⚡ Real-time buffer updates when files are changed externally&lt;/li&gt; &#xA; &lt;li&gt;📱 Customizable window position and size&lt;/li&gt; &#xA; &lt;li&gt;🤖 Integration with which-key (if available)&lt;/li&gt; &#xA; &lt;li&gt;📂 Automatically uses git project root as working directory (when available)&lt;/li&gt; &#xA; &lt;li&gt;🧩 Modular and maintainable code structure&lt;/li&gt; &#xA; &lt;li&gt;📋 Type annotations with LuaCATS for better IDE support&lt;/li&gt; &#xA; &lt;li&gt;✅ Configuration validation to prevent errors&lt;/li&gt; &#xA; &lt;li&gt;🧪 Testing framework for reliability (44 comprehensive tests)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.7.0 or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anthropics/claude-code&#34;&gt;Claude Code CLI&lt;/a&gt; tool installed and available in your PATH&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt; (dependency for git operations)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for version history and updates.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;greggh/claude-code.nvim&#34;,&#xA;  dependencies = {&#xA;    &#34;nvim-lua/plenary.nvim&#34;, -- Required for git operations&#xA;  },&#xA;  config = function()&#xA;    require(&#34;claude-code&#34;).setup()&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;greggh/claude-code.nvim&#39;,&#xA;  requires = {&#xA;    &#39;nvim-lua/plenary.nvim&#39;, -- Required for git operations&#xA;  },&#xA;  config = function()&#xA;    require(&#39;claude-code&#39;).setup()&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;greggh/claude-code.nvim&#39;&#xA;&#34; After installing, add this to your init.vim:&#xA;&#34; lua require(&#39;claude-code&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The plugin can be configured by passing a table to the &lt;code&gt;setup&lt;/code&gt; function. Here&#39;s the default configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;claude-code&#34;).setup({&#xA;  -- Terminal window settings&#xA;  window = {&#xA;    split_ratio = 0.3,      -- Percentage of screen for the terminal window (height for horizontal, width for vertical splits)&#xA;    position = &#34;botright&#34;,  -- Position of the window: &#34;botright&#34;, &#34;topleft&#34;, &#34;vertical&#34;, &#34;rightbelow vsplit&#34;, etc.&#xA;    enter_insert = true,    -- Whether to enter insert mode when opening Claude Code&#xA;    hide_numbers = true,    -- Hide line numbers in the terminal window&#xA;    hide_signcolumn = true, -- Hide the sign column in the terminal window&#xA;  },&#xA;  -- File refresh settings&#xA;  refresh = {&#xA;    enable = true,           -- Enable file change detection&#xA;    updatetime = 100,        -- updatetime when Claude Code is active (milliseconds)&#xA;    timer_interval = 1000,   -- How often to check for file changes (milliseconds)&#xA;    show_notifications = true, -- Show notification when files are reloaded&#xA;  },&#xA;  -- Git project settings&#xA;  git = {&#xA;    use_git_root = true,     -- Set CWD to git root when opening Claude Code (if in git project)&#xA;  },&#xA;  -- Command settings&#xA;  command = &#34;claude&#34;,        -- Command used to launch Claude Code&#xA;  -- Command variants&#xA;  command_variants = {&#xA;    -- Conversation management&#xA;    continue = &#34;--continue&#34;, -- Resume the most recent conversation&#xA;    resume = &#34;--resume&#34;,     -- Display an interactive conversation picker&#xA;&#xA;    -- Output options&#xA;    verbose = &#34;--verbose&#34;,   -- Enable verbose logging with full turn-by-turn output&#xA;  },&#xA;  -- Keymaps&#xA;  keymaps = {&#xA;    toggle = {&#xA;      normal = &#34;&amp;lt;C-,&amp;gt;&#34;,       -- Normal mode keymap for toggling Claude Code, false to disable&#xA;      terminal = &#34;&amp;lt;C-,&amp;gt;&#34;,     -- Terminal mode keymap for toggling Claude Code, false to disable&#xA;      variants = {&#xA;        continue = &#34;&amp;lt;leader&amp;gt;cC&#34;, -- Normal mode keymap for Claude Code with continue flag&#xA;        verbose = &#34;&amp;lt;leader&amp;gt;cV&#34;,  -- Normal mode keymap for Claude Code with verbose flag&#xA;      },&#xA;    },&#xA;    window_navigation = true, -- Enable window navigation keymaps (&amp;lt;C-h/j/k/l&amp;gt;)&#xA;    scrolling = true,         -- Enable scrolling keymaps (&amp;lt;C-f/b&amp;gt;) for page up/down&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; In your Vim/Neovim commands or init file:&#xA;:ClaudeCode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Or from Lua:&#xA;vim.cmd[[ClaudeCode]]&#xA;&#xA;-- Or map to a key:&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cc&#39;, &#39;&amp;lt;cmd&amp;gt;ClaudeCode&amp;lt;CR&amp;gt;&#39;, { desc = &#39;Toggle Claude Code&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;Basic command:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:ClaudeCode&lt;/code&gt; - Toggle the Claude Code terminal window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Conversation management commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:ClaudeCodeContinue&lt;/code&gt; - Resume the most recent conversation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ClaudeCodeResume&lt;/code&gt; - Display an interactive conversation picker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Output options command:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:ClaudeCodeVerbose&lt;/code&gt; - Enable verbose logging with full turn-by-turn output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Commands are automatically generated for each entry in your &lt;code&gt;command_variants&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Key Mappings&lt;/h3&gt; &#xA;&lt;p&gt;Default key mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ac&lt;/code&gt; - Toggle Claude Code terminal window (normal mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-,&amp;gt;&lt;/code&gt; - Toggle Claude Code terminal window (both normal and terminal modes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Variant mode mappings (if configured):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cC&lt;/code&gt; - Toggle Claude Code with --continue flag&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cV&lt;/code&gt; - Toggle Claude Code with --verbose flag&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, when in the Claude Code terminal:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-h&amp;gt;&lt;/code&gt; - Move to the window on the left&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt; - Move to the window below&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt; - Move to the window above&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt; - Move to the window on the right&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt; - Scroll full-page down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt; - Scroll full-page up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: After scrolling with &lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;, you&#39;ll need to press the &lt;code&gt;i&lt;/code&gt; key to re-enter insert mode so you can continue typing to Claude Code.&lt;/p&gt; &#xA;&lt;p&gt;When Claude Code modifies files that are open in Neovim, they&#39;ll be automatically reloaded.&lt;/p&gt; &#xA;&lt;h2&gt;How it Works&lt;/h2&gt; &#xA;&lt;p&gt;This plugin:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Creates a terminal buffer running the Claude Code CLI&lt;/li&gt; &#xA; &lt;li&gt;Sets up autocommands to detect file changes on disk&lt;/li&gt; &#xA; &lt;li&gt;Automatically reloads files when they&#39;re modified by Claude Code&lt;/li&gt; &#xA; &lt;li&gt;Provides convenient keymaps and commands for toggling the terminal&lt;/li&gt; &#xA; &lt;li&gt;Automatically detects git repositories and sets working directory to the git root&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please check out our &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for details on how to get started.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License - See &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;For a complete guide on setting up a development environment, installing all required tools, and understanding the project structure, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/DEVELOPMENT.md&#34;&gt;DEVELOPMENT.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Development Setup&lt;/h3&gt; &#xA;&lt;p&gt;The project includes comprehensive setup for development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complete installation instructions for all platforms in &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/DEVELOPMENT.md&#34;&gt;DEVELOPMENT.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pre-commit hooks for code quality&lt;/li&gt; &#xA; &lt;li&gt;Testing framework with 44 comprehensive tests&lt;/li&gt; &#xA; &lt;li&gt;Linting and formatting tools&lt;/li&gt; &#xA; &lt;li&gt;Weekly dependency updates workflow for Claude CLI and actions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run tests&#xA;make test&#xA;&#xA;# Check code quality&#xA;make lint&#xA;&#xA;# Set up pre-commit hooks&#xA;scripts/setup-hooks.sh&#xA;&#xA;# Format code&#xA;make format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greggh/claude-code.nvim/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; - Get help, share ideas, and connect with other users&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greggh/claude-code.nvim/issues&#34;&gt;GitHub Issues&lt;/a&gt; - Report bugs or suggest features&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greggh/claude-code.nvim/pulls&#34;&gt;GitHub Pull Requests&lt;/a&gt; - Contribute to the project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anthropics/claude-code&#34;&gt;Claude Code&lt;/a&gt; by Anthropic - This plugin was entirely built using Claude Code. Development cost: $5.42 with 17m 12.9s of API time&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;Plenary.nvim&lt;/a&gt; - Core dependency for testing framework and Git operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; - Versioning standard used in this project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt; - Code of Conduct standard&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://keepachangelog.com/&#34;&gt;Keep a Changelog&lt;/a&gt; - Changelog format&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://luals.github.io/wiki/annotations/&#34;&gt;LuaCATS&lt;/a&gt; - Type annotations for better IDE support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JohnnyMorganz/StyLua&#34;&gt;StyLua&lt;/a&gt; - Lua code formatter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lunarmodules/luacheck&#34;&gt;Luacheck&lt;/a&gt; - Lua static analyzer and linter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Made with ❤️ by &lt;a href=&#34;https://github.com/greggh&#34;&gt;Gregg Housh&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>daid/EmptyEpsilon</title>
    <updated>2025-05-31T01:33:07Z</updated>
    <id>tag:github.com,2025-05-31:/daid/EmptyEpsilon</id>
    <link href="https://github.com/daid/EmptyEpsilon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source bridge simulator. Build with the SeriousProton engine.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/daid/EmptyEpsilon/master/resources/logo_full.png&#34; alt=&#34;EmptyEpsilon logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Started as a cross-platform, open-source &#34;clone&#34; of &lt;a href=&#34;https://www.artemisspaceshipbridge.com/&#34;&gt;Artemis Spaceship Bridge Simulator&lt;/a&gt;, &lt;strong&gt;EmptyEpsilon&lt;/strong&gt; has already deviated from Artemis with new features and gameplay, including a Game Master mode and multiple AI factions. We strive to get EmptyEpsilon working on several platforms, and Windows, Linux, and Android are fully supported.&lt;/p&gt; &#xA;&lt;p&gt;The game is written in C++ with the &lt;a href=&#34;https://github.com/daid/SeriousProton&#34;&gt;SeriousProton&lt;/a&gt; engine and uses &lt;a href=&#34;http://www.libsdl.org/&#34;&gt;SDL2&lt;/a&gt; for most of the heavy lifting.&lt;/p&gt; &#xA;&lt;h2&gt;Download and install&lt;/h2&gt; &#xA;&lt;p&gt;Official releases for Windows, Linux (as a .deb package), and Android (beta quality) are available from the &lt;a href=&#34;https://daid.github.io/EmptyEpsilon/#tabs=5&#34;&gt;EmptyEpsilon website&lt;/a&gt; or &lt;a href=&#34;https://github.com/daid/EmptyEpsilon/releases&#34;&gt;GitHub releases&lt;/a&gt;. Make sure the host and all players run the same version number of EmptyEpsilon; otherwise, players won&#39;t be able to connect.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows releases are distributed as self-contained ZIP archives that don&#39;t need installation. You can expand the ZIP archive and launch EmptyEpsilon directly from the expanded folder.&lt;/li&gt; &#xA; &lt;li&gt;The .deb package requires freetype and SDL2 packages to be installed on your Linux distribution.&lt;/li&gt; &#xA; &lt;li&gt;The Android APK is built for the &lt;code&gt;armeabi-v7a&lt;/code&gt; ABI and should launch on most Android phones and tablets with ARM processors. (For ARM v8, see &lt;a href=&#34;https://github.com/daid/EmptyEpsilon/wiki/Build%5CAndroid#build-for-64-bit-arm-v8&#34;&gt;the wiki&lt;/a&gt;.) The official ARM APK won&#39;t install on Intel x86 or x86_64 devices running Android, but is compatible with &lt;a href=&#34;https://android-developers.googleblog.com/2020/03/run-arm-apps-on-android-emulator.html&#34;&gt;Android Emulator system images that support ARM ABIs&lt;/a&gt;. To build a 32- or 64-bit x86 APK, see &lt;a href=&#34;https://github.com/daid/EmptyEpsilon/wiki/Build%5CAndroid#build-for-x86&#34;&gt;the wiki&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration files&lt;/h3&gt; &#xA;&lt;p&gt;EmptyEpsilon settings are stored in an &lt;code&gt;options.ini&lt;/code&gt; file located in either the &lt;code&gt;.emptyepsilon&lt;/code&gt; directory of your user home or the same directory as the EmptyEpsilon launcher. For details, see &lt;a href=&#34;https://github.com/daid/EmptyEpsilon/wiki/Preferences-file&#34;&gt;this repository&#39;s wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;See this repository&#39;s wiki for guidance on &lt;a href=&#34;https://github.com/daid/EmptyEpsilon/wiki/Build&#34;&gt;building EmptyEpsilon from source&lt;/a&gt;. Several Build subpages on the wiki provide steps for building on specific operating systems, distributions, or hardware.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;For information on EmptyEpsilon&#39;s Discord and forums communities, and regularly planned hosted game sessions, see the &lt;a href=&#34;https://daid.github.io/EmptyEpsilon/#tabs=6&#34;&gt;EmptyEpsilon website&lt;/a&gt;. If you run public EmptyEpsilon games or use it in your gaming projects, &lt;a href=&#34;https://github.com/daid/EmptyEpsilon/issues&#34;&gt;file an issue&lt;/a&gt; to request to be added to that page.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute, we&#39;re mostly looking for awesome models, sound effects, and music. The game is tested regulary by some of our trusty colleagues.&lt;/p&gt; &#xA;&lt;p&gt;Some general contribution rules:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;This project is a dictatorship. Yes, it&#39;s open source, but we&#39;d much rather spend time on building what we like than arguing with people.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Be precise when filing issues. Explain why you posted the issue, what you expect, what is happening, why is your feature worth the time to develop it, what operating system is affected, etc. Unclear issues are subject to rule 1 with extreme prejudice.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Despite the above two, we very much value input, feedback, and suggestions from people playing EmptyEpsilon. If you have ideas or want to donate beer, drop us a line.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Donate&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have the skills to help code or create models but want to give something back, you can always donate a bit. All donations go directly toward buying better assets for the game (in this case, more and better 3D models). You can find the instructions on the &lt;a href=&#34;http://daid.github.io/EmptyEpsilon/&#34;&gt;EmptyEpsilon website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Write code&lt;/h3&gt; &#xA;&lt;p&gt;If you are a coder and want to contribute, there are a few things to take into account.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The code is a undocumented mess at this point. We&#39;re working on fixing that.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We use the following conventions:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Member values use underscores to separate words (&lt;code&gt;zoom_level&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Classes use HighCamelCase (&lt;code&gt;GuiSlider&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Functions use lowCamelCase (&lt;code&gt;getZoomLevel&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use a single pull request to change a single thing. Want to change multiple things? File multiple requests.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Provide art&lt;/h3&gt; &#xA;&lt;p&gt;There is no clear goal where this game is going. This means that there is no formal game, art, or asset design. If you have something that you would like to see in this game (or want to make something), drop us a line. We&#39;d love to see what you can do and how you can help improve the game.&lt;/p&gt; &#xA;&lt;p&gt;For details on how EmptyEpsilon uses 3D models, see &lt;a href=&#34;https://github.com/daid/EmptyEpsilon/wiki/Adding-3D-models&#34;&gt;this repository&#39;s wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Translate and localize&lt;/h3&gt; &#xA;&lt;p&gt;For a guide to translating EmptyEpsilon and its scenarios, see &lt;a href=&#34;https://github.com/daid/EmptyEpsilon/wiki/Translation-and-Localization&#34;&gt;this repository&#39;s wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Basic documentation for setting up and running games is available on the &lt;a href=&#34;https://daid.github.io/EmptyEpsilon/#tabs=2&#34;&gt;EmptyEpsilon website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn EmptyEpsilon gameplay fundamentals, read the &lt;a href=&#34;https://daid.github.io/EmptyEpsilon/#tabs=3&#34;&gt;website&#39;s stations profiles&lt;/a&gt; and play through the game&#39;s built-in tutorial mode available from the main menu, which covers each crew member&#39;s interface and responsibilities.&lt;/p&gt; &#xA;&lt;p&gt;For guidance in scripting scenarios, see the &lt;a href=&#34;https://daid.github.io/EmptyEpsilon/#tabs=4&#34;&gt;website&#39;s mission scripting guide&lt;/a&gt;. For a scripting API reference, open the &lt;code&gt;script_reference.html&lt;/code&gt; file included in your version&#39;s downloaded archive, which is specific to that version of EmptyEpsilon.&lt;/p&gt; &#xA;&lt;p&gt;For documentation on the game&#39;s preferences file and command-line options, hardware and DMX support, more complex internet play configurations like headless and proxy servers, enabling and using EmptyEpsilon&#39;s HTTP API server, or adding ship templates and models, see &lt;a href=&#34;https://github.com/daid/EmptyEpsilon/wiki&#34;&gt;this repository&#39;s wiki&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>