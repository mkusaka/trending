<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-24T01:29:28Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>amitds1997/remote-nvim.nvim</title>
    <updated>2024-04-24T01:29:28Z</updated>
    <id>tag:github.com,2024-04-24:/amitds1997/remote-nvim.nvim</id>
    <link href="https://github.com/amitds1997/remote-nvim.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Remote development in Neovim üî•&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üöÄ Remote Nvim&lt;/h1&gt; &#xA;&lt;p&gt;Adds support for &lt;a href=&#34;https://code.visualstudio.com/docs/remote/remote-overview&#34;&gt;remote development&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/docs/devcontainers/containers&#34;&gt;devcontainers&lt;/a&gt; to Neovim (just like VSCode).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;This plugin has not yet reached maturity. So, breaking changes are expected. Any such change would be communicated through &lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/discussions/78&#34;&gt;this GitHub discussion&lt;/a&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Remote mode&lt;/th&gt; &#xA;   &lt;th&gt;Current support&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SSH (using password)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Fully supported&lt;/em&gt; ‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SSH (using SSH key)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Fully supported&lt;/em&gt; ‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SSH (using &lt;code&gt;ssh_config&lt;/code&gt; file)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Fully supported&lt;/em&gt; ‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;In progress&lt;/em&gt; (&lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/pull/66&#34;&gt;#66&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker container&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;In progress&lt;/em&gt; (&lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/pull/66&#34;&gt;#66&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Devcontainer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;In progress&lt;/em&gt; (&lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/pull/66&#34;&gt;#66&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/remote/tunnels&#34;&gt;Remote Tunnels&lt;/a&gt; is a Microsoft-specific features and will not be supported. If you have an alternative though, I would be happy to integrate it into the plugin.&lt;/p&gt; &#xA;&lt;h3&gt;Implemented features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Offline mode&lt;/strong&gt; - If the remote does not have access to GitHub, Neovim release can be locally downloaded and then transferred to the remote. For more details, see &lt;a href=&#34;https://raw.githubusercontent.com/amitds1997/remote-nvim.nvim/main/#-offline-mode&#34;&gt;Offline mode&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Planned features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic port forwarding&lt;/strong&gt; - I already have a clear path to implementing this, but waiting for complete support for devcontainers to be present and then integrate this. For tracking, see &lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/issues/77&#34;&gt;#77&lt;/a&gt;. For more feature details, see &lt;a href=&#34;https://code.visualstudio.com/docs/devcontainers/containers#_temporarily-forwarding-a-port&#34;&gt;similar implementation in VSCode&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;‚ú® Other noice features&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Automatically install and launch Neovim&lt;/li&gt; &#xA;  &lt;li&gt;No changes to your remote environment&lt;/li&gt; &#xA;  &lt;li&gt;Can copy over and sync your local Neovim configuration to remote&lt;/li&gt; &#xA;  &lt;li&gt;Saves your past sessions automatically so you can easily reconnect&lt;/li&gt; &#xA;  &lt;li&gt;Easily cleanup the remote machine once you are done with a single command&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üìú Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;OS support&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Support level&lt;/th&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ &lt;strong&gt;Supported&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux, MacOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üöß &lt;strong&gt;In progress&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;FreeBSD (&lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/pull/71&#34;&gt;#71&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üü° &lt;strong&gt;Planned but not implemented&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Windows, WSL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Local machine üíª&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenSSH client&lt;/li&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.9.0 (as &lt;code&gt;nvim&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Binaries: &lt;code&gt;tar&lt;/code&gt; (if you use compressed uploads)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Following are also needed unless you are working with &lt;a href=&#34;https://raw.githubusercontent.com/amitds1997/remote-nvim.nvim/main/#offline-on-remote-and-local-machine&#34;&gt;Offline mode (No GitHub)&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binaries: &lt;code&gt;curl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Connectivity to &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim repo&lt;/a&gt; on GitHub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Remote machine ‚òÅÔ∏è&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenSSH-compliant SSH server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bash&lt;/code&gt; shell must be available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Following are also needed unless you are working with &lt;a href=&#34;https://raw.githubusercontent.com/amitds1997/remote-nvim.nvim/main/#-offline-mode&#34;&gt;Offline mode&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binaries: &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Connectivity to &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim repo&lt;/a&gt; on GitHub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì• Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;   &#34;amitds1997/remote-nvim.nvim&#34;,&#xA;   version = &#34;*&#34;, -- Pin to GitHub releases&#xA;   dependencies = {&#xA;       &#34;nvim-lua/plenary.nvim&#34;, -- For standard functions&#xA;       &#34;MunifTanjim/nui.nvim&#34;, -- To build the plugin UI&#xA;       &#34;nvim-telescope/telescope.nvim&#34;, -- For picking b/w different remote methods&#xA;   },&#xA;   config = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use any other plugin manager, ensure that you call &lt;code&gt;require(&#34;remote-nvim&#34;).setup()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;‚öôÔ∏è Advanced configuration&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Below is the default configuration. Please read the associated comments before changing the value.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt; {&#xA;  -- Configuration for SSH connections&#xA;  ssh_config = {&#xA;    ssh_binary = &#34;ssh&#34;, -- Binary to use for running SSH command&#xA;    scp_binary = &#34;scp&#34;, -- Binary to use for running SSH copy commands&#xA;    ssh_config_file_paths = { &#34;$HOME/.ssh/config&#34; }, -- Which files should be considered to contain the ssh host configurations. NOTE: `Include` is respected in the provided files.&#xA;&#xA;    -- These are useful for password-based SSH authentication.&#xA;    -- It provides parsing pattern for the plugin to detect that an input is requested.&#xA;    -- Each element contains the following attributes:&#xA;    -- match - The string to match (plain matching is done)&#xA;    -- type - Supports two values &#34;plain&#34;|&#34;secret&#34;. Secret means when you provide the value, it should not be stored in the completion history of Neovim.&#xA;    -- value - Default value for the prompt&#xA;    -- value_type - &#34;static&#34;|&#34;dynamic&#34;. For things like password, it would be needed for each new connection that the plugin initiates which could be obtrusive.&#xA;    -- So, we save the value (only for current session&#39;s interval) to ease the process. If set to &#34;dynamic&#34;, we do not save the value even for the session. You have to provide a fresh value each time.&#xA;    ssh_prompts = {&#xA;      {&#xA;        match = &#34;password:&#34;,&#xA;        type = &#34;secret&#34;,&#xA;        value_type = &#34;static&#34;,&#xA;        value = &#34;&#34;,&#xA;      },&#xA;      {&#xA;        match = &#34;continue connecting (yes/no/[fingerprint])?&#34;,&#xA;        type = &#34;plain&#34;,&#xA;        value_type = &#34;static&#34;,&#xA;        value = &#34;&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;&#xA;  -- Path to the script that would be copied to the remote and called to ensure that neovim gets installed.&#xA;  -- Default path is to the plugin&#39;s own ./scripts/neovim_install.sh file.&#xA;  neovim_install_script_path = utils.path_join(&#xA;    utils.is_windows,&#xA;    vim.fn.fnamemodify(debug.getinfo(1).source:sub(2), &#34;:h:h:h&#34;),&#xA;    &#34;scripts&#34;,&#xA;    &#34;neovim_install.sh&#34;&#xA;  ),&#xA;&#xA;  -- Modify the UI for the plugin&#39;s progress viewer.&#xA;  -- type can be &#34;split&#34; or &#34;popup&#34;. All options from https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/popup and https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/split are supported.&#xA;  -- Note that some options like &#34;border&#34; are only available for &#34;popup&#34;.&#xA;  progress_view = {&#xA;    type = &#34;popup&#34;,&#xA;  },&#xA;&#xA;&#xA;  -- Offline mode configuration. For more details, see the &#34;Offline mode&#34; section below.&#xA;  offline_mode = {&#xA;    -- Should offline mode be enabled?&#xA;    enabled = false,&#xA;    -- Do not connect to GitHub at all. Not even to get release information.&#xA;    no_github = false,&#xA;    -- What path should be looked at to find locally available releases&#xA;    cache_dir = utils.path_join(utils.is_windows, vim.fn.stdpath(&#34;cache&#34;), constants.PLUGIN_NAME, &#34;version_cache&#34;),&#xA;  },&#xA;&#xA;  -- Remote configuration&#xA;  remote = {&#xA;    -- List of directories that should be copied over&#xA;    copy_dirs = {&#xA;      -- What to copy to remote&#39;s Neovim config directory&#xA;      config = {&#xA;        base = vim.fn.stdpath(&#34;config&#34;), -- Path from where data has to be copied&#xA;        dirs = &#34;*&#34;, -- Directories that should be copied over. &#34;*&#34; means all directories. To specify a subset, use a list like {&#34;lazy&#34;, &#34;mason&#34;} where &#34;lazy&#34;, &#34;mason&#34; are subdirectories&#xA;        -- under path specified in `base`.&#xA;        compression = {&#xA;          enabled = false, -- Should compression be enabled or not&#xA;          additional_opts = {} -- Any additional options that should be used for compression. Any argument that is passed to `tar` (for compression) can be passed here as separate elements.&#xA;        },&#xA;      },&#xA;      -- What to copy to remote&#39;s Neovim data directory&#xA;      data = {&#xA;        base = vim.fn.stdpath(&#34;data&#34;),&#xA;        dirs = {},&#xA;        compression = {&#xA;          enabled = true,&#xA;        },&#xA;      },&#xA;      -- What to copy to remote&#39;s Neovim cache directory&#xA;      cache = {&#xA;        base = vim.fn.stdpath(&#34;cache&#34;),&#xA;        dirs = {},&#xA;        compression = {&#xA;          enabled = true,&#xA;        },&#xA;      },&#xA;      -- What to copy to remote&#39;s Neovim state directory&#xA;      state = {&#xA;        base = vim.fn.stdpath(&#34;state&#34;),&#xA;        dirs = {},&#xA;        compression = {&#xA;          enabled = true,&#xA;        },&#xA;      },&#xA;    },&#xA;  },&#xA;&#xA;  -- You can supply your own callback that should be called to create the local client. This is the default implementation.&#xA;  -- Two arguments are passed to the callback:&#xA;  -- port: Local port at which the remote server is available&#xA;  -- workspace_config: Workspace configuration for the host. For all the properties available, see https://github.com/amitds1997/remote-nvim.nvim/blob/main/lua/remote-nvim/providers/provider.lua#L4&#xA;  -- A sample implementation using WezTerm tab is at: https://github.com/amitds1997/remote-nvim.nvim/wiki/Configuration-recipes&#xA;  client_callback = function(port, _)&#xA;    require(&#34;remote-nvim.ui&#34;).float_term((&#34;nvim --server localhost:%s --remote-ui&#34;):format(port), function(exit_code)&#xA;      if exit_code ~= 0 then&#xA;        vim.notify((&#34;Local client failed with exit code %s&#34;):format(exit_code), vim.log.levels.ERROR)&#xA;      end&#xA;    end)&#xA;  end,&#xA;&#xA;  -- Plugin log related configuration [PREFER NOT TO CHANGE THIS]&#xA;  log = {&#xA;    -- Where is the log file&#xA;    filepath = utils.path_join(utils.is_windows, vim.fn.stdpath(&#34;state&#34;), (&#34;%s.log&#34;):format(constants.PLUGIN_NAME)),&#xA;    -- Level of logging&#xA;    level = &#34;info&#34;,&#xA;    -- At what size, should we truncate the logs&#xA;    max_size = 1024 * 1024 * 2, -- 2MB&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Run &lt;code&gt;:checkhealth remote-nvim.nvim&lt;/code&gt; to ensure necesssary binaries are available. If missing, parts of the plugin might be broken.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üé• Demos&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;How to connect to saved host using SSH config file&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/assets/29333147/6cd2f3fc-3dcc-482f-a6ae-373084d36ca5&#34;&gt;Remote with SSH config file&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;How to connect to SSH server with password based auth&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/assets/29333147/be9bfc0c-6a7c-4304-a68d-3b75256afea6&#34;&gt;Remote with password&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Stop running Neovim server&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This continues from the &lt;em&gt;How to connect to saved host using SSH config file&lt;/em&gt; demo above.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/assets/29333147/b2603583-c80a-41e5-b94e-9e80c56d557c&#34;&gt;Stop running remote Neovim session&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Alternatively, just exit from the Neovim instance using which you launched the server.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Get information about any Remote Neovim launched session&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/assets/29333147/ceb24934-a132-4d0c-8172-7ba58679c467&#34;&gt;Get information about Remote Neovim session&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Delete this plugin&#39;s created resources from the remote machine&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This deletes the resources created during the &lt;em&gt;How to connect to saved host using SSH config file&lt;/em&gt; demo above.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/assets/29333147/3896dda5-b73f-47e4-8e56-72f661e1a623&#34;&gt;Delete all resources created by this plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Delete saved configuration about a remote host&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;We disabled connectivity to the host we connected to in &lt;em&gt;How to connect to SSH server with password based auth&lt;/em&gt; to replicate this scenario.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/assets/29333147/a7f2a9b0-3d04-4c7b-9cea-4fa2a2efdf15&#34;&gt;Delete saved remote configuration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;&lt;i&gt;Youtube video going over an older version of the plugin&lt;/i&gt;&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=5qbDq1lGEx4&#34; title=&#34;Remote development on Neovim using&#xA;remote-nvim.nvim&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/5qbDq1lGEx4/0.jpg&#34; alt=&#34;Tutorial for remote-nvim.nvim plugin v0.0.1&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;All these demos use a custom callback that I use to launch Neovim &lt;a href=&#34;https://github.com/amitds1997/remote-nvim.nvim/wiki/Configuration-recipes&#34;&gt;in a separate Wezterm tab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ü§ñ Available commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:RemoteStart&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Connect to a remote instance. If remote neovim server is already running, allows users to launch local client?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:RemoteStop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stop running Neovim server and close session&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:RemoteInfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get information about any sessions created in the current Neovim run. Opens up the Progress Viewer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:RemoteCleanup&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete workspace and/or entire remote neovim setup from the remote instance. Also, cleanups the configuration for the remote resource.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:RemoteConfigDel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete record of remote instance that no longer exists from saved session records. Prefer &lt;code&gt;:RemoteCleanup&lt;/code&gt; if you can still connect to the remote instance.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:RemoteLog&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open the plugin log file. This is most useful when debugging. &lt;code&gt;:RemoteInfo&lt;/code&gt; should surface all information needed. If not, open an issue.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For demos about the commands, see the &lt;a href=&#34;https://raw.githubusercontent.com/amitds1997/remote-nvim.nvim/main/#-demos&#34;&gt;demos&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;üì¥ Offline mode&lt;/h2&gt; &#xA;&lt;p&gt;There are two types of offline modes available:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Offline on remote&lt;/li&gt; &#xA; &lt;li&gt;Offline on remote and local machine&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The plugin connects to &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim/neovim&lt;/a&gt; repo on GitHub twice. First time, it tries to fetch the latest releases available for Neovim that can be installed to the remote. The second time, on the remote machine, it connects to download the Neovim release.&lt;/p&gt; &#xA;&lt;h3&gt;Offline on remote&lt;/h3&gt; &#xA;&lt;p&gt;On enabling this, Neovim release will be downloaded locally and then copied over to the remote. Plugin would connect to GitHub once to get the list of Neovim versions available. To enable this,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;remote-nvim&#34;).setup({&#xA;  -- Add your other configuration parameters as usual&#xA;  offline_mode = {&#xA;    enabled = true,&#xA;    no_github = false,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Offline on remote and local machine&lt;/h3&gt; &#xA;&lt;p&gt;On enabling this, GitHub will not be connected with at all. This is useful for scenarions when you face connection issues with GitHub. &lt;em&gt;&lt;strong&gt;This is an advanced scenario so make sure that you actually need it&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It assumes that you already have Neovim releases available locally along with their checksum files. Note that, &lt;em&gt;release names are expected to follow a certain pattern.&lt;/em&gt; So, please use the provided script to download releases and drop them in the cache directory where the plugin would read from. If no releases are available, the plugin would not be able to proceed further.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Steps for downloading releases:&lt;/strong&gt; This command is run from the plugin&#39;s root. You can run it from anywhere as long as you have the correct path to the script. Adjust script path as per where the plugin gets installed on your system. Alternatively, you can also clone the repo at a separate location and run this script from inside the cloned repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/neovim_download.sh -v &amp;lt;version&amp;gt; -d &amp;lt;cache-dir&amp;gt; -o &amp;lt;os-type&amp;gt;&#xA;&#xA;# &amp;lt;version&amp;gt; can be stable, nightly or any Neovim release provided like v0.9.4&#xA;# &amp;lt;cache-dir&amp;gt; is the path in which the Neovim release and it&#39;s checksum should be downloaded. This should be same as the cache_dir plugin configuration value else it won&#39;t be&#xA;# detected by the plugin. See configuration below.&#xA;# &amp;lt;os-type&amp;gt; specifies which OS&#39;s binaries should be downloaded. Supported values are &#34;Linux&#34; and &#34;macOS&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable this,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;remote-nvim&#34;).setup({&#xA;  -- Add your other configuration parameters as usual&#xA;  offline_mode = {&#xA;    enabled = true,&#xA;    no_github = true,&#xA;    -- Add this only if you want to change the path where the Neovim releases are downloaded/located.&#xA;    -- Default location is the output of :lua= vim.fn.stdpath(&#34;cache&#34;) .. &#34;/remote-nvim.nvim/version_cache&#34;&#xA;    -- cache_dir = &amp;lt;custom-path&amp;gt;,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Copying additional directories to remote neovim&lt;/h4&gt; &#xA;&lt;p&gt;Above process would prevent the plugin (remote-nvim.nvim) from connecting to GitHub, but nothing is stopping the plugins defined in your configuration from connecting to the internet. To prevent this, you can copy your other Neovim directories onto the remote to prevent at least your plugin manager from doing so since all your dependencies would already be in their right locations. Note: &lt;em&gt;some plugins such as nvim-treesitter might still connect to the internet and there is nothing this plugin can do to restrict that (and neither does this plugin aim to do that)&lt;/em&gt;. In such cases, you have 3 alternatives:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Turn off the plugin&lt;/li&gt; &#xA; &lt;li&gt;Make configuration changes (if possible) for it to not connect to internet&lt;/li&gt; &#xA; &lt;li&gt;Find an alternative to that plugin&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To turn off the plugin only on remote instances, one simple condition would be to check if Neovim is running in &lt;code&gt;headless&lt;/code&gt; mode (That&#39;s how this plugin launches your remote neovim instance).&lt;/p&gt; &#xA;&lt;p&gt;With that out of the way, let&#39;s focus on how you can copy additional Neovim directories onto remote.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;remote-nvim&#34;).setup({&#xA;  remote = {&#xA;    copy_dirs = {&#xA;      data = {&#xA;        base = vim.fn.stdpath(&#34;data&#34;), -- Path from where data has to be copied. You can choose to copy entire path or subdirectories inside using `dirs`&#xA;        dirs = { &#34;lazy&#34; }, -- Directories inside `base` to copy over. If this is set to string &#34;*&#34;; it means entire `base` should be copied over&#xA;        compression = {&#xA;          enabled = true, -- Should data be compressed before uploading&#xA;          additional_opts = { &#34;--exclude-vcs&#34; }, -- Any arguments that can be passed to `tar` for compression can be specified here to improve your compression&#xA;        },&#xA;      },&#xA;      -- cache = {&#xA;      --   base = vim.fn.stdpath(&#34;cache&#34;),&#xA;      --   dirs = {},&#xA;      --   compression = {&#xA;      --     enabled = true,&#xA;      --   },&#xA;      -- },&#xA;      -- state = {&#xA;      --   base = vim.fn.stdpath(&#34;state&#34;),&#xA;      --   dirs = {},&#xA;      --   compression = {&#xA;      --     enabled = true,&#xA;      --   },&#xA;      -- },&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above configuration indicates that the &lt;code&gt;lazy&lt;/code&gt; directory inside your Neovim &lt;code&gt;data&lt;/code&gt; directory should be copied over onto the remote in it&#39;s &lt;code&gt;data&lt;/code&gt; directory. You can similarly specify what should be copied inside the &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;cache&lt;/code&gt; or &lt;code&gt;config&lt;/code&gt; directory on remote.&lt;/p&gt; &#xA;&lt;p&gt;If specified directories are going to contain a lot of data, it&#39;s &lt;em&gt;highly recommended&lt;/em&gt; to enable compression when uploading by setting &lt;code&gt;compression.enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for those particular uploads.&lt;/p&gt; &#xA;&lt;h2&gt;‚ö†Ô∏è Caveats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launched neovim server is bound to the Neovim instance from which it is launched. If you close the instance, the remote Neovim server will also get closed. This has been done to ensure proper cleanup of launched sessions and prevent orphan Neovim servers.&lt;/li&gt; &#xA; &lt;li&gt;The current implementation launches a headless server on the remote machine and then launches a TUI to connect to it. This means that if you quit the TUI using regular operations, the server also gets closed. If you just want to close the TUI, that is currently not possible. You can read more in &lt;a href=&#34;https://github.com/neovim/neovim/issues/23093&#34;&gt;this Neovim discussion&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Neovim versions &lt;code&gt;&amp;lt; v0.9.2&lt;/code&gt; are incompatible with versions &lt;code&gt;&amp;gt;= v0.9.2&lt;/code&gt; due to a breaking UI change introduced in &lt;code&gt;v0.9.2&lt;/code&gt;. For more information, read the &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.9.2&#34;&gt;release notes for v0.9.2&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üåü Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;A big thank you to the amazing Neovim community for Neovim and the plugins! ‚ù§Ô∏è&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>