<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-29T01:42:54Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>arnaupv/nvim-devcontainer-cli</title>
    <updated>2023-06-29T01:42:54Z</updated>
    <id>tag:github.com,2023-06-29:/arnaupv/nvim-devcontainer-cli</id>
    <link href="https://github.com/arnaupv/nvim-devcontainer-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Devcontainer CLI (Nvim Plugin)&lt;/h1&gt; &#xA;&lt;p&gt;Develop your next Repo in a Devcontainer using Nvim thanks to the &lt;a href=&#34;https://github.com/devcontainers/cli&#34;&gt;Devconatiner CLI&lt;/a&gt; and this plugin &lt;img src=&#34;https://raw.githubusercontent.com/arnaupv/nvim-devcontainer-cli/main/doc/gifs/nvim_devcontainer_cli-description.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see in the GIF above, &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;alacritty&lt;/a&gt; is being used as a Terminal Emulator. Any of the ones recommended &lt;a href=&#34;https://www.lazyvim.org/&#34;&gt;here&lt;/a&gt; would work. In case you are struggling configuring the nerd fonts, I personally recommend this great &lt;a href=&#34;https://www.youtube.com/watch?v=mQdB_kHyZn8&amp;amp;t=182s&#34;&gt;youtube video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;First, which problem is this plugin trying to solve?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Situation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Your favorite editor is &lt;strong&gt;nvim&lt;/strong&gt; and you are currently developing a containerized application (using Docker).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can definitely use nvim for developing your code, but you quickly face problems with the &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;LSP&lt;/a&gt; and the &lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/&#34;&gt;DAP&lt;/a&gt; (among other plugins), because such plugins do not have access inside the Docker container. True, you can install &lt;strong&gt;nvim&lt;/strong&gt; together with all your plugins inside the docker container extending the image. However, this can be cumbersome, and ultimately if you are working in a team, chances are you are the only one is using &lt;strong&gt;nvim&lt;/strong&gt;. Also, you do not want to modify your own Docker Target inside your Dockerfile, installing &lt;strong&gt;nvim&lt;/strong&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are multiple IDEs out there who give you the possibility to execute themself inside the Docker container you are developing, fixing the problems above, but there is nothing which works out-of-the-box for &lt;strong&gt;nvim&lt;/strong&gt;. Recently, Microsoft opened the code used in VSCode for attaching the IDE to such containers (&lt;a href=&#34;https://github.com/devcontainers/cli&#34;&gt;Devconatiner CLI&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The current &lt;strong&gt;nvim&lt;/strong&gt; plugin aims to take advantage of such CLI for creating your own local development environment on the top of your containerized applications. This plugin allows you use LSP capabilities for external modules (installed inside the Docker container), and also debug your application (&lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/&#34;&gt;DAP&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;But, what is happening under the hood?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First, devcontainer-cli is used for setting up your devcontainer, building the image based on the instructions defined in your &lt;a href=&#34;https://raw.githubusercontent.com/arnaupv/nvim-devcontainer-cli/main/.devcontainer/devcontainer.json&#34;&gt;devcontainer.json&lt;/a&gt; and initializing a container based on such image.&lt;/li&gt; &#xA; &lt;li&gt;Once the container is already running, nvim installed inside the Docker container together with a set of dependencies that can be found &lt;a href=&#34;https://github.com/arnaupv/nvim-devcontainer-cli/raw/main/bin/devcontainer_setup_scripts/root_setup.sh&#34;&gt;here&lt;/a&gt;. This step resembles the installation of the &lt;a href=&#34;https://code.visualstudio.com/docs/devcontainers/containers&#34;&gt;vscode-server&lt;/a&gt; inside the container when using VSCode.&lt;/li&gt; &#xA; &lt;li&gt;Finally, nvim needs certain configuration to work properly. That&#39;s why the following &lt;a href=&#34;https://github.com/arnaupv/dotfiles&#34;&gt;dotfiles repo&lt;/a&gt; is cloned inside the container (&lt;a href=&#34;https://github.com/arnaupv/nvim-devcontainer-cli/raw/main/bin/devcontainer_setup_scripts/none_root_setup.sh#L6&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The last step is connecting inside the container. This could be done by &lt;code&gt;ssh&lt;/code&gt; connection, but in this case the connection is done using &lt;code&gt;devcontainer exec&lt;/code&gt; (&lt;a href=&#34;https://github.com/arnaupv/nvim-devcontainer-cli/raw/main/bin/connect_to_devcontainer.sh&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As you can see what the plugin does is installing and configuring neovim inside the container, instead of communicating with the info inside the container via nvim client/server. One of the negative consequences of such approach is that all plugins need to be installed each time a devcontainer session starts. This is far from being efficient and it is something that needs to be improved in the future. However, I personally consider that the current solution is good enough for starting to work with nvim inside a Docker container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Inspiration:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin has been inspired by the work previously done by &lt;a href=&#34;https://github.com/esensar/nvim-dev-container&#34;&gt;esensar&lt;/a&gt; and by &lt;a href=&#34;https://github.com/jamestthompson3/nvim-remote-containers&#34;&gt;jamestthompson3&lt;/a&gt;. The main different is that this plugin benefits from the &lt;a href=&#34;https://github.com/devcontainers/cli&#34;&gt;Devcontainer CLI&lt;/a&gt; which was opensourced by Microsoft in April 2022.&lt;/p&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only Ubuntu/Debian Docker Host (tested with Ubuntu 20.04 and 22.04) - &lt;a href=&#34;https://github.com/arnaupv/nvim-devcontainer-cli/issues/5&#34;&gt;Planning to support other OS in the future&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devcontainers/cli#npm-install&#34;&gt;devcontainer-cli&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;🔧 Installation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;arnaupv/nvim-devcontainer-cli&#34;,&#xA;  opts = {}&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How to use?&lt;/h1&gt; &#xA;&lt;p&gt;There are 2 commands: &lt;code&gt;:DevcontainerUp&lt;/code&gt; and &lt;code&gt;:DevcontainerConnect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First you need to have your folder with the devcontainer instructions. This folder is usually called &lt;code&gt;.devcontainer&lt;/code&gt; and contains a &lt;code&gt;devcontainer.json&lt;/code&gt; file. This file is used by the &lt;a href=&#34;https://github.com/devcontainers/cli&#34;&gt;Devcontainer CLI&lt;/a&gt;. As a first approach you can copy-paste the &lt;a href=&#34;https://raw.githubusercontent.com/arnaupv/nvim-devcontainer-cli/main/.devcontainer/devcontainer.json&#34;&gt;.devcontainer&lt;/a&gt; folder of the current project and adapt it for your repo. You can also find more information about the &lt;code&gt;devcontainer.json&lt;/code&gt; file &lt;a href=&#34;https://code.visualstudio.com/docs/remote/devcontainerjson-reference&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then open a nvim session and execute the first command: &lt;code&gt;DevcontainerUp&lt;/code&gt;, which will create the image based on your Dockerfile. Once created it will initialize a container with the previously created image, adding nvim and other tools defined in ./bin/devcontainer_setup_scripts/ . Currently the following &lt;a href=&#34;https://github.com/arnaupv/dotfiles&#34;&gt;dotfiles&lt;/a&gt; are hardcoded &lt;a href=&#34;https://raw.githubusercontent.com/arnaupv/nvim-devcontainer-cli/main/bin/devcontainer_setup_scripts/none_root_setup.sh&#34;&gt;here&lt;/a&gt;. The new devcontainer running can be easily checked with the following command: &lt;code&gt;docker ps -a&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the process above finishes successfully, you are prepared for closing the current nvim session and open a new nvim inside the docker container. All this can be done from nvim itself, using the second command: &lt;code&gt;:DevcontainerConnect&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;As an example, you can try to create the first devcontainer using cloning the current repository, following the instructions above.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Tests&lt;/h1&gt; &#xA;&lt;p&gt;Tests are executed automatically on each PR using Github Actions.&lt;/p&gt; &#xA;&lt;p&gt;In case you want to run Github Actions locally, it is recommended to use &lt;a href=&#34;https://github.com/nektos/act#installation&#34;&gt;act&lt;/a&gt;. And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;act -W .github/workflows/default.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option would be to connect to the devcontainer following the &lt;strong&gt;How to use?&lt;/strong&gt; section. Once connected to the devcontainer, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;FEATUREs (in order of priority)&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Capability to create and run a devcontainer using the &lt;a href=&#34;https://github.com/devcontainers/cli&#34;&gt;Devconatiner CLI&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Capability to attach in a running devcontainer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; The floating window created during the devcontainer Up process (:DevcontainerUp&#xA;  &lt;cr&gt;&#xA;   ) is closed when the process finishes successfully.&#xA;  &lt;/cr&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add unit tests using plenary.busted lua module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The logs printed in the floating window when preparing the Devcontainer are saved and easy to access.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/arnaupv/nvim-devcontainer-cli/issues/1&#34;&gt;Give the possibility of defining custom dotfiles when setting up the devcontainer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Detect the cause/s of the UI issues of neovim when running inside the docker container.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Convert bash scripts in lua code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Currently bash scripts only support Ubuntu (OS). Once the code is migrated to lua, it has to cover the installation other OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create .devcontainer/devcontainer.json template automatically via a nvim command. Add examples for when the devcontainer is created from docker and also from docker-compose.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>abecodes/tabout.nvim</title>
    <updated>2023-06-29T01:42:54Z</updated>
    <id>tag:github.com,2023-06-29:/abecodes/tabout.nvim</id>
    <link href="https://github.com/abecodes/tabout.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;tabout plugin for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🦿 tabout.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Supercharge your workflow and start tabbing out from parentheses, quotes, and similar contexts today.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;intro&#34; width=&#34;480&#34; height=&#34;233&#34; src=&#34;https://raw.githubusercontent.com/abecodes/tabout.nvim/master/assets/intro.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;💡 examples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Before&lt;/th&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;After&lt;/th&gt; &#xA;   &lt;th&gt;Setting&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ | }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{} | &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ |&#34;string&#34; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ &#34;string&#34;| } &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore_beginning = true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ |&#34;string&#34; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ ....|&#34;string&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore_beginning = false, act_as_tab = true,&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ &#34;string&#34;| }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ |&#34;string&#34; } &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;|#[macro_use]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#[macro_use]| &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tabouts = {{open = &#39;#&#39;, close = &#39;]&#39;}}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;📦 requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;nvim&lt;/a&gt; &amp;gt;= 0.5&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;💾 installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;use {&#xA;  &#39;abecodes/tabout.nvim&#39;,&#xA;  config = function()&#xA;    require(&#39;tabout&#39;).setup {&#xA;    tabkey = &#39;&amp;lt;Tab&amp;gt;&#39;, -- key to trigger tabout, set to an empty string to disable&#xA;    backwards_tabkey = &#39;&amp;lt;S-Tab&amp;gt;&#39;, -- key to trigger backwards tabout, set to an empty string to disable&#xA;    act_as_tab = true, -- shift content if tab out is not possible&#xA;    act_as_shift_tab = false, -- reverse shift content if tab out is not possible (if your keyboard/terminal supports &amp;lt;S-Tab&amp;gt;)&#xA;    default_tab = &#39;&amp;lt;C-t&amp;gt;&#39;, -- shift default action (only at the beginning of a line, otherwise &amp;lt;TAB&amp;gt; is used)&#xA;    default_shift_tab = &#39;&amp;lt;C-d&amp;gt;&#39;, -- reverse shift default action,&#xA;    enable_backwards = true, -- well ...&#xA;    completion = true, -- if the tabkey is used in a completion pum&#xA;    tabouts = {&#xA;      {open = &#34;&#39;&#34;, close = &#34;&#39;&#34;},&#xA;      {open = &#39;&#34;&#39;, close = &#39;&#34;&#39;},&#xA;      {open = &#39;`&#39;, close = &#39;`&#39;},&#xA;      {open = &#39;(&#39;, close = &#39;)&#39;},&#xA;      {open = &#39;[&#39;, close = &#39;]&#39;},&#xA;      {open = &#39;{&#39;, close = &#39;}&#39;}&#xA;    },&#xA;    ignore_beginning = true, --[[ if the cursor is at the beginning of a filled element it will rather tab out than shift the content ]]&#xA;    exclude = {} -- tabout will ignore these filetypes&#xA;}&#xA;  end,&#xA;&#x9;wants = {&#39;nvim-treesitter&#39;}, -- or require if not used so far&#xA;&#x9;after = {&#39;nvim-cmp&#39;} -- if a completion plugin is using tabs load it before&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use another plugin manager just make sure &lt;code&gt;tabout.nvim&lt;/code&gt; is loaded after &lt;code&gt;nvim-treesitter&lt;/code&gt; and any completion that already uses your &lt;em&gt;tabkey&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;🛠️ options&lt;/h2&gt; &#xA;&lt;h3&gt;tabkey&lt;/h3&gt; &#xA;&lt;p&gt;Set the key you want to use to trigger tabout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default&#xA;tabkey = &#39;&amp;lt;Tab&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;backwards_tabkey&lt;/h3&gt; &#xA;&lt;p&gt;Set the key you want to use to trigger tabout backwards.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default&#xA;backwards_tabkey = &#39;&amp;lt;S-Tab&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;act_as_tab&lt;/h3&gt; &#xA;&lt;p&gt;If a tab out is not possible shift the content.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default&#xA;act_as_tab = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;act_as_shift_tab&lt;/h3&gt; &#xA;&lt;p&gt;If a backwards tab out is not possible reverse shift the content. (Depends on keyboard/terminal if it will work)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default&#xA;act_as_shift_tab = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;default_tab&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;act_as_tab&lt;/code&gt; is set to true, a tab out is not possible, and the cursor is at the beginnig of a line, this keysignals are sent in &lt;code&gt;insert&lt;/code&gt; mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default&#xA;default_tab = &#39;&amp;lt;C-t&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;default_shift_tab&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;act_as_shift_tab&lt;/code&gt; is set to true and a tab out is not possible, this keysignals are sent in &lt;code&gt;insert&lt;/code&gt; mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default&#xA;default_shift_tab = &#39;&amp;lt;C-d&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;enable_backwards&lt;/h3&gt; &#xA;&lt;p&gt;Disable if you just want to move forward&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default&#xA;enable_backwards = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;completion&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Consider using the &lt;a href=&#34;https://raw.githubusercontent.com/abecodes/tabout.nvim/master/#%F0%9F%A4%96-plug-api&#34;&gt;Plug API&lt;/a&gt; and setting this to false&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you use a completion &lt;em&gt;pum&lt;/em&gt; that also uses the tab key for a smart scroll function. Setting this to true will disable tab out when the &lt;em&gt;pum&lt;/em&gt; is open and execute the smart scroll function instead.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abecodes/tabout.nvim/master/#more-complex-keybindings&#34;&gt;See here&lt;/a&gt; how to ingegrate &lt;code&gt;tabout.vim&lt;/code&gt; into more complex completions with snippets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default&#xA;completion = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;tabouts&lt;/h3&gt; &#xA;&lt;p&gt;Here you can add more symbols you want to tab out from.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;open an close can only contain one character for now&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default&#xA;tabouts = {&#xA;  {open = &#34;&#39;&#34;, close = &#34;&#39;&#34;},&#xA;  {open = &#39;&#34;&#39;, close = &#39;&#34;&#39;},&#xA;  {open = &#39;`&#39;, close = &#39;`&#39;},&#xA;  {open = &#39;(&#39;, close = &#39;)&#39;},&#xA;  {open = &#39;[&#39;, close = &#39;]&#39;},&#xA;  {open = &#39;{&#39;, close = &#39;}&#39;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ignore_beginning&lt;/h3&gt; &#xA;&lt;p&gt;If set to true you can also tab out from the beginning of a string, object property, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default&#xA;ignore_beginning = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;more complex keybindings&lt;/h3&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;tabkey&lt;/code&gt; and &lt;code&gt;backwards_tabkey&lt;/code&gt; to empty strings and define more complex keybindings instead.&lt;/p&gt; &#xA;&lt;p&gt;For example, to make &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt; work with &lt;a href=&#34;https://github.com/hrsh7th/nvim-compe&#34;&gt;nvim-compe&lt;/a&gt;, &lt;a href=&#34;https://github.com/hrsh7th/vim-vsnip&#34;&gt;vim-vsnip&lt;/a&gt; and this plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;tabout&#34;).setup({&#xA;  tabkey = &#34;&#34;,&#xA;  backwards_tabkey = &#34;&#34;,&#xA;})&#xA;&#xA;local function replace_keycodes(str)&#xA;  return vim.api.nvim_replace_termcodes(str, true, true, true)&#xA;end&#xA;&#xA;function _G.tab_binding()&#xA;  if vim.fn.pumvisible() ~= 0 then&#xA;    return replace_keycodes(&#34;&amp;lt;C-n&amp;gt;&#34;)&#xA;  elseif vim.fn[&#34;vsnip#available&#34;](1) ~= 0 then&#xA;    return replace_keycodes(&#34;&amp;lt;Plug&amp;gt;(vsnip-expand-or-jump)&#34;)&#xA;  else&#xA;    return replace_keycodes(&#34;&amp;lt;Plug&amp;gt;(Tabout)&#34;)&#xA;  end&#xA;end&#xA;&#xA;function _G.s_tab_binding()&#xA;  if vim.fn.pumvisible() ~= 0 then&#xA;    return replace_keycodes(&#34;&amp;lt;C-p&amp;gt;&#34;)&#xA;  elseif vim.fn[&#34;vsnip#jumpable&#34;](-1) ~= 0 then&#xA;    return replace_keycodes(&#34;&amp;lt;Plug&amp;gt;(vsnip-jump-prev)&#34;)&#xA;  else&#xA;    return replace_keycodes(&#34;&amp;lt;Plug&amp;gt;(TaboutBack)&#34;)&#xA;  end&#xA;end&#xA;&#xA;vim.api.nvim_set_keymap(&#34;i&#34;, &#34;&amp;lt;Tab&amp;gt;&#34;, &#34;v:lua.tab_binding()&#34;, {expr = true})&#xA;vim.api.nvim_set_keymap(&#34;i&#34;, &#34;&amp;lt;S-Tab&amp;gt;&#34;, &#34;v:lua.s_tab_binding()&#34;, {expr = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that some other plugins that also use &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt; might provide already handlers to avoid clashes with &lt;code&gt;tabout.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; mappings can be created using a function that accepts a callback. When the fallback is called &lt;code&gt;tabout.nvim&lt;/code&gt; is working out of the box and there is no need for special configurations.&lt;/p&gt; &#xA;&lt;p&gt;The example below shows &lt;code&gt;nvim-cmp&lt;/code&gt; with &lt;code&gt;luasnip&lt;/code&gt; mappings using the fallback function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;[&#39;&amp;lt;Tab&amp;gt;&#39;] = function(fallback)&#xA;    if cmp.visible() then&#xA;      cmp.select_next_item()&#xA;    elseif luasnip.expand_or_jumpable() then&#xA;      vim.fn.feedkeys(vim.api.nvim_replace_termcodes(&#39;&amp;lt;Plug&amp;gt;luasnip-expand-or-jump&#39;, true, true, true), &#39;&#39;)&#xA;    else&#xA;      fallback()&#xA;    end&#xA;  end,&#xA;  [&#39;&amp;lt;S-Tab&amp;gt;&#39;] = function(fallback)&#xA;    if cmp.visible() then&#xA;      cmp.select_prev_item()&#xA;    elseif luasnip.jumpable(-1) then&#xA;      vim.fn.feedkeys(vim.api.nvim_replace_termcodes(&#39;&amp;lt;Plug&amp;gt;luasnip-jump-prev&#39;, true, true, true), &#39;&#39;)&#xA;    else&#xA;      fallback()&#xA;    end&#xA;  end,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt; work with &lt;code&gt;vim-vsnip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;[&#34;&amp;lt;Tab&amp;gt;&#34;] = function(fallback)&#xA;  if cmp.visible() then&#xA;    -- cmp.select_next_item()&#xA;    cmp.confirm(&#xA;      {&#xA;        behavior = cmp.ConfirmBehavior.Insert,&#xA;        select = true&#xA;      }&#xA;    )&#xA;  elseif vim.fn[&#34;vsnip#available&#34;](1) ~= 0 then&#xA;    vim.fn.feedkeys(vim.api.nvim_replace_termcodes(&#34;&amp;lt;Plug&amp;gt;(vsnip-expand-or-jump)&#34;, true, true, true), &#34;&#34;)&#xA;  else&#xA;    fallback()&#xA;  end&#xA;end,&#xA;[&#34;&amp;lt;S-Tab&amp;gt;&#34;] = function(fallback)&#xA;  if cmp.visible() then&#xA;    cmp.select_prev_item()&#xA;  elseif vim.fn[&#34;vsnip#available&#34;](1) ~= 0 then&#xA;    vim.fn.feedkeys(vim.api.nvim_replace_termcodes(&#34;&amp;lt;Plug&amp;gt;(vsnip-jump-prev)&#34;, true, true, true), &#34;&#34;)&#xA;  else&#xA;    fallback()&#xA;  end&#xA;end,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki/Example-mappings&#34;&gt;here&lt;/a&gt; for more &lt;code&gt;nvim-cmp&lt;/code&gt; examples.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;🤖 plug api&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;plug&lt;/th&gt; &#xA;   &lt;th&gt;action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(Tabout)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;tabout of current context (current line)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(TaboutMulti)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;tabout of current context (multiple lines)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(TaboutBack)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;tabout backwards of current context (current line)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(TaboutBackMulti)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;tabout backwards of current context (multiple lines)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;multiline tabout&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- A multiline tabout setup could look like this&#xA;vim.api.nvim_set_keymap(&#39;i&#39;, &#39;&amp;lt;A-x&amp;gt;&#39;, &#34;&amp;lt;Plug&amp;gt;(TaboutMulti)&#34;, {silent = true})&#xA;vim.api.nvim_set_keymap(&#39;i&#39;, &#39;&amp;lt;A-z&amp;gt;&#39;, &#34;&amp;lt;Plug&amp;gt;(TaboutBackMulti)&#34;, {silent = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;📋 commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;triggers&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tabout&lt;/td&gt; &#xA;   &lt;td&gt;🚨 DEPRECATED tries to tab out of current context&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TaboutBack&lt;/td&gt; &#xA;   &lt;td&gt;🚨 DEPRECATED tries to tab out backwards of current context&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TaboutToggle&lt;/td&gt; &#xA;   &lt;td&gt;(de)activates the plugin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;⚠️ exceptions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;tabout.nvim&lt;/code&gt; only works with &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter#supported-languages&#34;&gt;nvim-treesitter&#39;s supported filetypes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;✅ todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; tabout in blockcomment strings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; allow multi line tabout&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; support multi character tabouts&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>