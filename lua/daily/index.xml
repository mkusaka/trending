<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-11T01:46:35Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>luukvbaal/stabilize.nvim</title>
    <updated>2022-07-11T01:46:35Z</updated>
    <id>tag:github.com,2022-07-11:/luukvbaal/stabilize.nvim</id>
    <link href="https://github.com/luukvbaal/stabilize.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin to stabilize window open/close events.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;stabilize.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Neovim plugin to stabilize buffer content on window open/close events. There is a currently outstanding &lt;a href=&#34;https://github.com/neovim/neovim/pull/19243&#34;&gt;PR&lt;/a&gt; to Neovim core that supercedes this plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;See example comparing default behavior and with stabilize.nvim active:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Tvu4xVR.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;luukvbaal/stabilize.nvim&#39;&#xA;call plug#end()&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#34;stabilize&#34;).setup()&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;&#x9;&#34;luukvbaal/stabilize.nvim&#34;,&#xA;&#x9;config = function() require(&#34;stabilize&#34;).setup() end&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The plugin will stabilize your buffer content on window open/close events after calling &lt;code&gt;require(&#34;stabilize&#34;).setup()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Default options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;&#x9;force = true, -- stabilize window even when current cursor position will be hidden behind new window&#xA;&#x9;forcemark = nil -- set context mark to register on force event which can be jumped to with &#39;&amp;lt;forcemark&amp;gt;&#xA;&#x9;ignore = {  -- do not manage windows matching these file/buftypes&#xA;&#x9;&#x9;filetype = { &#34;help&#34;, &#34;list&#34;, &#34;Trouble&#34; },&#xA;&#x9;&#x9;buftype = { &#34;terminal&#34;, &#34;quickfix&#34;, &#34;loclist&#34; }&#xA;&#x9;}&#xA;&#x9;nested = nil -- comma-separated list of autocmds that wil trigger the plugins window restore function&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;Because &lt;code&gt;autocmd&lt;/code&gt;s are by default not nested (&lt;code&gt;:h autocmd-nested&lt;/code&gt;), windows spawned by autocommands won&#39;t trigger the plugins window restore function. To stabilize these window events, a config option &lt;code&gt;nested&lt;/code&gt; is exposed which can be used to trigger &lt;code&gt;doautocmd User StabilizeRestore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, to stabilize window events such as opening the quickfix list (or &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt;) on &lt;code&gt;QuickFixCmdPost&lt;/code&gt; or &lt;code&gt;DiagnosticChanged&lt;/code&gt; events. For neovim &amp;gt;= 0.7, set the nested cfg to(mind the wildcard):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nested = &#34;QuickFixCmdPost,DiagnosticChanged *&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The plugin keeps track of the number of windows on the current tabpage and will skip restoring the windows if the number of windows hasn&#39;t changed since before firing these nested events(performance consideration).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>williamboman/mason.nvim</title>
    <updated>2022-07-11T01:46:35Z</updated>
    <id>tag:github.com,2022-07-11:/williamboman/mason.nvim</id>
    <link href="https://github.com/williamboman/mason.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[WIP] Lightweight package manager for Neovim that runs everywhere Neovim runs. Easily install and manage LSP servers, DAP servers, linters, and formatters.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/williamboman/mason.nvim/actions?query=workflow%3ATests+branch%3Aalpha+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/williamboman/mason.nvim/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-linux%20macOS%20windows-blue&#34; alt=&#34;Platforms&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/williamboman/mason.nvim&#34; alt=&#34;Repository size&#34;&gt; &lt;a href=&#34;https://github.com/sponsors/williamboman&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/williamboman?style=flat-square&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/177613416-0c0354d2-f431-40d8-87f0-21310f0bba0e.png&#34; alt=&#34;mason.nvim&#34;&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Lightweight package manager for Neovim that runs everywhere Neovim runs.&lt;br&gt; Easily install and manage LSP servers, DAP servers, linters, and formatters. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;Still a WIP - things remain subject to change and documentation is somewhat lacking.&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/williamboman/mason.nvim/discussions/new?category=ideas&#34;&gt;Early feedback is very much appreciated&lt;/a&gt;&lt;/em&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/alpha/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/alpha/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/alpha/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/alpha/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/alpha/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/alpha/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/alpha/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; is a Neovim plugin that allow you to easily manage external editor tooling such as LSP servers, DAP servers, linters, and formatters through a single interface. It runs everywhere Neovim runs (across Linux, macOS, Windows, etc.), with only a small set of &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/alpha/#requirements&#34;&gt;external requirements&lt;/a&gt; needed.&lt;/p&gt; &#xA;&lt;p&gt;Packages are installed to Neovim&#39;s &lt;code&gt;:h stdpath&lt;/code&gt; by default. Executables are linked to a single &lt;code&gt;bin/&lt;/code&gt; directory, which &lt;code&gt;mason.nvim&lt;/code&gt; will add to Neovim&#39;s PATH during setup, allowing seamless access from Neovim builtins (shell, terminal, etc.) as well as other 3rd party plugins.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/177617680-d62caf26-f253-4ace-ab57-4b590595adca.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/177617684-6bb4c13f-1235-4ac9-829e-120b06f7437b.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/177617688-8f9ba225-00c8-495c-9c4c-b74240d6f280.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/177617692-02c6ddde-a97e-42b4-bca4-4f4caf45d569.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; relaxes the minimum requirements by attempting multiple different utilities (for example, &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, and &lt;code&gt;Invoke-WebRequest&lt;/code&gt; are all perfect substitutes). The &lt;em&gt;minimum&lt;/em&gt; recommended requirements are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Unix systems: &lt;code&gt;git(1)&lt;/code&gt;, &lt;code&gt;curl(1)&lt;/code&gt; or &lt;code&gt;wget(1)&lt;/code&gt;, &lt;code&gt;unzip(1)&lt;/code&gt;, &lt;code&gt;tar(1)&lt;/code&gt;, &lt;code&gt;gzip(1)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Windows systems: powershell, git, tar, and &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; or &lt;a href=&#34;https://peazip.github.io/&#34;&gt;peazip&lt;/a&gt; or &lt;a href=&#34;https://github.com/mholt/archiver&#34;&gt;archiver&lt;/a&gt; or &lt;a href=&#34;https://www.winzip.com/&#34;&gt;winzip&lt;/a&gt; or &lt;a href=&#34;https://www.win-rar.com/&#34;&gt;WinRAR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;mason.nvim&lt;/code&gt; will regularly shell out to external package managers, such as &lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt;. Depending on your personal usage, some of these will also need to be installed. Refer to &lt;code&gt;:checkhealth mason&lt;/code&gt; for a full list.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;williamboman/mason.nvim&#34;, branch = &#34;alpha&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;vim-plug&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;williamboman/mason.nvim&#34;, { &#39;branch&#39;: &#39;alpha&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/alpha/#configuration&#34;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Mason&lt;/code&gt; - opens a graphical status window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonInstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - installs/reinstalls the provided packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonUninstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - uninstalls the provided packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonUninstallAll&lt;/code&gt; - uninstalls all packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonLog&lt;/code&gt; - opens the &lt;code&gt;mason.nvim&lt;/code&gt; log file in a new tab window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;You may optionally configure certain behavior of &lt;code&gt;mason.nvim&lt;/code&gt; when calling the &lt;code&gt;.setup()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup({&#xA;    ui = {&#xA;        icons = {&#xA;            package_installed = &#34;✓&#34;,&#xA;            package_pending = &#34;➜&#34;,&#xA;            package_uninstalled = &#34;✗&#34;&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local DEFAULT_SETTINGS = {&#xA;    ui = {&#xA;        -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.&#xA;        border = &#34;none&#34;,&#xA;&#xA;        icons = {&#xA;            -- The list icon to use for installed packages.&#xA;            package_installed = &#34;◍&#34;,&#xA;            -- The list icon to use for packages that are installing, or queued for installation.&#xA;            package_pending = &#34;◍&#34;,&#xA;            -- The list icon to use for packages that are not installed.&#xA;            package_uninstalled = &#34;◍&#34;,&#xA;        },&#xA;&#xA;        keymaps = {&#xA;            -- Keymap to expand a package&#xA;            toggle_package_expand = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;            -- Keymap to install the package under the current cursor position&#xA;            install_package = &#34;i&#34;,&#xA;            -- Keymap to reinstall/update the package under the current cursor position&#xA;            update_package = &#34;u&#34;,&#xA;            -- Keymap to check for new version for the package under the current cursor position&#xA;            check_package_version = &#34;c&#34;,&#xA;            -- Keymap to update all installed packages&#xA;            update_all_packages = &#34;U&#34;,&#xA;            -- Keymap to check which installed packages are outdated&#xA;            check_outdated_packages = &#34;C&#34;,&#xA;            -- Keymap to uninstall a package&#xA;            uninstall_package = &#34;X&#34;,&#xA;            -- Keymap to cancel a package installation&#xA;            cancel_installation = &#34;&amp;lt;C-c&amp;gt;&#34;,&#xA;            -- Keymap to apply language filter&#xA;            apply_language_filter = &#34;&amp;lt;C-f&amp;gt;&#34;,&#xA;        },&#xA;    },&#xA;&#xA;    -- The directory in which to install packages.&#xA;    install_root_dir = path.concat { vim.fn.stdpath &#34;data&#34;, &#34;mason&#34; },&#xA;&#xA;    pip = {&#xA;        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior&#xA;        -- and is not recommended.&#xA;        --&#xA;        -- Example: { &#34;--proxy&#34;, &#34;https://proxyserver&#34; }&#xA;        install_args = {},&#xA;    },&#xA;&#xA;    -- Controls to which degree logs are written to the log file. It&#39;s useful to set this to vim.log.levels.DEBUG when&#xA;    -- debugging issues with package installations.&#xA;    log_level = vim.log.levels.INFO,&#xA;&#xA;    -- Limit for the maximum amount of packages to be installed at the same time. Once this limit is reached, any further&#xA;    -- packages that are requested to be installed will be put in a queue.&#xA;    max_concurrent_installers = 4,&#xA;&#xA;    github = {&#xA;        -- The template URL to use when downloading assets from GitHub.&#xA;        -- The placeholders are the following (in order):&#xA;        -- 1. The repository (e.g. &#34;rust-lang/rust-analyzer&#34;)&#xA;        -- 2. The release version (e.g. &#34;v0.3.0&#34;)&#xA;        -- 3. The asset name (e.g. &#34;rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz&#34;)&#xA;        download_url_template = &#34;https://github.com/%s/releases/download/%s/%s&#34;,&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>NMAC427/guess-indent.nvim</title>
    <updated>2022-07-11T01:46:35Z</updated>
    <id>tag:github.com,2022-07-11:/NMAC427/guess-indent.nvim</id>
    <link href="https://github.com/NMAC427/guess-indent.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatic indentation style detection for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;:GuessIndent&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/NMAC427/guess-indent.nvim&#34; alt=&#34;MIT License&#34;&gt; &lt;img src=&#34;https://github.com/NMAC427/guess-indent.nvim/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blazing fast indentation style detection for Neovim written in Lua. The goal of this plugin is to automatically detect the indentation style used in a buffer and updating the buffer options accordingly. This mimics the &#34;&lt;em&gt;Guess Indentation Settings From Buffer&lt;/em&gt;&#34; function built into Sublime Text.&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9914734/154780206-c60eda09-175d-4ee8-81be-2aea1fcaadf4.gif&#34; style=&#34;width: 100%&#34;&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Whenever you open a new buffer, guess-indent looks at the first few hundred lines and uses them to determine how the buffer should be indented. It then automatically updates the buffer options so that they match the opened file.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install using your favorite package manager and then call the following setup function somewhere in your config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;guess-indent&#39;).setup {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;, you can install and set up guess-indent simultaneously:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- using packer.nvim&#xA;use {&#xA;  &#39;nmac427/guess-indent.nvim&#39;,&#xA;  config = function() require(&#39;guess-indent&#39;).setup {} end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;By default, guess-indent automatically runs whenever you open a new buffer. You can also run it manually using the &lt;code&gt;:GuessIndent&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The plugin provides the following configuration options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- This is the default configuration&#xA;require(&#39;guess-indent&#39;).setup {&#xA;  auto_cmd = true,  -- Set to false to disable automatic execution&#xA;  filetype_exclude = {  -- A list of filetypes for which the auto command gets disabled&#xA;    &#34;netrw&#34;,&#xA;    &#34;tutor&#34;,&#xA;  },&#xA;  buftype_exclude = {  -- A list of buffer types for which the auto command gets disabled&#xA;    &#34;help&#34;,&#xA;    &#34;nofile&#34;,&#xA;    &#34;terminal&#34;,&#xA;    &#34;prompt&#34;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Normally it should not be necessary to disable the automatic execution of guess-indent, because it usually takes less than a millisecond to run, even for large files.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Darazaki/indent-o-matic&#34;&gt;&lt;code&gt;indent-o-matic&lt;/code&gt;&lt;/a&gt; - Blazingly fast, written in lua, based on a very simple algorithm. &lt;a href=&#34;https://github.com/Darazaki/indent-o-matic/issues/12&#34;&gt;Comparison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-sleuth&#34;&gt;&lt;code&gt;vim-sleuth&lt;/code&gt;&lt;/a&gt; - Very smart but slower heuristic, compatible with Vim.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the MIT license. For more detail check out the &lt;a href=&#34;https://raw.githubusercontent.com/NMAC427/guess-indent.nvim/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>