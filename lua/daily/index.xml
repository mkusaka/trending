<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-22T01:46:50Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>norcalli/nvim-colorizer.lua</title>
    <updated>2022-07-22T01:46:50Z</updated>
    <id>tag:github.com,2022-07-22:/norcalli/nvim-colorizer.lua</id>
    <link href="https://github.com/norcalli/nvim-colorizer.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fastest Neovim colorizer.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;colorizer.lua&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://norcalli.github.io/luadoc/nvim-colorizer.lua/modules/colorizer.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/luadoc-0.1-blue&#34; alt=&#34;luadoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A high-performance color highlighter for Neovim which has &lt;strong&gt;no external dependencies&lt;/strong&gt;! Written in performant Luajit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/norcalli/github-assets/master/nvim-colorizer.lua-demo-short.gif&#34; alt=&#34;Demo.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/norcalli/github-assets/master/nvim-colorizer.lua-demo-short.mp4&#34; alt=&#34;Demo.mp4&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Usage&lt;/h2&gt; &#xA;&lt;p&gt;Requires Neovim &amp;gt;= 0.4.0 and &lt;code&gt;set termguicolors&lt;/code&gt; (I&#39;m looking into relaxing these constraints). If you don&#39;t have true color for your terminal or are unsure, &lt;a href=&#34;https://github.com/termstandard/colors&#34;&gt;read this excellent guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use your plugin manager or clone directly into your &lt;code&gt;runtimepath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;norcalli/nvim-colorizer.lua&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As long as you have &lt;code&gt;malloc()&lt;/code&gt; and &lt;code&gt;free()&lt;/code&gt; on your system, this will work. Which includes Linux, OSX, and Windows.&lt;/p&gt; &#xA;&lt;p&gt;One line setup. This will create an &lt;code&gt;autocmd&lt;/code&gt; for &lt;code&gt;FileType *&lt;/code&gt; to highlight every filetype. &lt;strong&gt;NOTE&lt;/strong&gt;: You should add this line after/below where your plugins are setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua require&#39;colorizer&#39;.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Why another highlighter?&lt;/h3&gt; &#xA;&lt;p&gt;Mostly, &lt;strong&gt;RAW SPEED&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This has no external dependencies, which means you install it and &lt;strong&gt;it just works&lt;/strong&gt;. Other colorizers typically were synchronous and slow, as well. Being written with performance in mind and leveraging the excellent LuaJIT and a handwritten parser, updates can be done in real time. There are plugins such as &lt;a href=&#34;https://github.com/RRethy/vim-hexokinase&#34;&gt;hexokinase&lt;/a&gt; which have good performance, but it has some difficulty with becoming out of sync. The downside is that &lt;em&gt;this only works for Neovim&lt;/em&gt;, and that will never change.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, having a Lua API that&#39;s available means users can use this as a library to do custom highlighting themselves.&lt;/p&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  DEFAULT_OPTIONS = {&#xA;&#x9;RGB      = true;         -- #RGB hex codes&#xA;&#x9;RRGGBB   = true;         -- #RRGGBB hex codes&#xA;&#x9;names    = true;         -- &#34;Name&#34; codes like Blue&#xA;&#x9;RRGGBBAA = false;        -- #RRGGBBAA hex codes&#xA;&#x9;rgb_fn   = false;        -- CSS rgb() and rgba() functions&#xA;&#x9;hsl_fn   = false;        -- CSS hsl() and hsla() functions&#xA;&#x9;css      = false;        -- Enable all CSS features: rgb_fn, hsl_fn, names, RGB, RRGGBB&#xA;&#x9;css_fn   = false;        -- Enable all CSS *functions*: rgb_fn, hsl_fn&#xA;&#x9;-- Available modes: foreground, background&#xA;&#x9;mode     = &#39;background&#39;; -- Set the display mode.&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MODES:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;foreground&lt;/code&gt;: sets the foreground text color.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;background&lt;/code&gt;: sets the background text color.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For basic setup, you can use a command like the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Attaches to every FileType mode&#xA;require &#39;colorizer&#39;.setup()&#xA;&#xA;-- Attach to certain Filetypes, add special configuration for `html`&#xA;-- Use `background` for everything else.&#xA;require &#39;colorizer&#39;.setup {&#xA;  &#39;css&#39;;&#xA;  &#39;javascript&#39;;&#xA;  html = {&#xA;    mode = &#39;foreground&#39;;&#xA;  }&#xA;}&#xA;&#xA;-- Use the `default_options` as the second parameter, which uses&#xA;-- `foreground` for every mode. This is the inverse of the previous&#xA;-- setup configuration.&#xA;require &#39;colorizer&#39;.setup({&#xA;  &#39;css&#39;;&#xA;  &#39;javascript&#39;;&#xA;  html = { mode = &#39;background&#39; };&#xA;}, { mode = &#39;foreground&#39; })&#xA;&#xA;-- Use the `default_options` as the second parameter, which uses&#xA;-- `foreground` for every mode. This is the inverse of the previous&#xA;-- setup configuration.&#xA;require &#39;colorizer&#39;.setup {&#xA;  &#39;*&#39;; -- Highlight all files, but customize some others.&#xA;  css = { rgb_fn = true; }; -- Enable parsing rgb(...) functions in css.&#xA;  html = { names = false; } -- Disable parsing &#34;names&#34; like Blue or Gray&#xA;}&#xA;&#xA;-- Exclude some filetypes from highlighting by using `!`&#xA;require &#39;colorizer&#39;.setup {&#xA;  &#39;*&#39;; -- Highlight all files, but customize some others.&#xA;  &#39;!vim&#39;; -- Exclude vim from highlighting.&#xA;  -- Exclusion Only makes sense if &#39;*&#39; is specified!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For lower level interface, see the &lt;a href=&#34;https://norcalli.github.io/luadoc/nvim-colorizer.lua/modules/colorizer.html&#34;&gt;LuaDocs for API details&lt;/a&gt; or use &lt;code&gt;:h colorizer.lua&lt;/code&gt; once installed.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;|:ColorizerAttachToBuffer|&#xA;&#xA;Attach to the current buffer and start highlighting with the settings as&#xA;specified in setup (or the defaults).&#xA;&#xA;If the buffer was already attached (i.e. being highlighted), the settings will&#xA;be reloaded with the ones from setup. This is useful for reloading settings&#xA;for just one buffer.&#xA;&#xA;|:ColorizerDetachFromBuffer|&#xA;&#xA;Stop highlighting the current buffer (detach).&#xA;&#xA;|:ColorizerReloadAllBuffers|&#xA;&#xA;Reload all buffers that are being highlighted with new settings from the setup&#xA;settings (or the defaults). Shortcut for ColorizerAttachToBuffer on every&#xA;buffer.&#xA;&#xA;|:ColorizerToggle|&#xA;&#xA;Toggle highlighting of the current buffer.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;If the file you are editing has no filetype, the plugin won&#39;t be attached, as it relies on AutoCmd to do so. You can still make it work by running the following command: &lt;code&gt;:ColorizerAttachToBuffer&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/norcalli/nvim-colorizer.lua/issues/9#issuecomment-543742619&#34;&gt;this comment&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add more display modes?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Use a more space efficient trie implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a COMMON_SETUP which does obvious things like enable &lt;code&gt;rgb_fn&lt;/code&gt; for css&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>navarasu/onedark.nvim</title>
    <updated>2022-07-22T01:46:50Z</updated>
    <id>tag:github.com,2022-07-22:/navarasu/onedark.nvim</id>
    <link href="https://github.com/navarasu/onedark.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;One dark and light colorscheme for neovim &gt;= 0.5.0 written in lua based on Atom&#39;s One Dark and Light theme. Additionally, it comes with 5 color variant styles&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;left&#34;&gt; &lt;span&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt; &lt;img height=&#34;100&#34; src=&#34;https://user-images.githubusercontent.com/20145075/127218526-44b107db-92b9-4a47-86a3-132b4c1e45d1.png&#34; alt=&#34;OneDark.nvim&#34;&gt; &lt;/h1&gt; &#xA;&lt;h4&gt;&#xA; &lt;div align=&#34;right&#34;&gt; &#xA;  &lt;a href=&#34;https://raw.githubusercontent.com/navarasu/onedark.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;span&gt; | &lt;/span&gt; &#xA;  &lt;a href=&#34;https://raw.githubusercontent.com/navarasu/onedark.nvim/master/#default-configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;span&gt; | &lt;/span&gt; &#xA;  &lt;a href=&#34;https://raw.githubusercontent.com/navarasu/onedark.nvim/master/#customization&#34;&gt;Customization&lt;/a&gt; &#xA;  &lt;span&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &lt;/span&gt; &#xA; &lt;/div&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dark&lt;/strong&gt; and &lt;strong&gt;Light&lt;/strong&gt; Themes for neovim &amp;gt;= 0.5 based on &lt;a href=&#34;https://github.com/atom/atom/tree/master/packages/one-dark-ui&#34;&gt;Atom One Dark&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/atom/atom/tree/master/packages/one-light-ui&#34;&gt;Atom One Light&lt;/a&gt; theme written in lua with &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;TreeSitter&lt;/a&gt; syntax highlight.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For Vim / Neovim &amp;lt; 0.5, prefer &lt;a href=&#34;https://github.com/joshdick/onedark.vim&#34;&gt;joshdick/onedark.vim&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;8 theme styles (One Dark + 5 variants) and (One Light + 1 variant)&lt;/li&gt; &#xA; &lt;li&gt;Supporting multiple plugins with hand picked proper colors&lt;/li&gt; &#xA; &lt;li&gt;Customize &lt;code&gt;Colors&lt;/code&gt;, &lt;code&gt;Highlights&lt;/code&gt; and &lt;code&gt;Code style&lt;/code&gt; of the theme as you like (Refer &lt;a href=&#34;https://raw.githubusercontent.com/navarasu/onedark.nvim/master/#customization&#34;&gt;Customization&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Toggle the theme style without exiting Neovim using shortcut &lt;code&gt;&amp;lt;leader&amp;gt;ts&lt;/code&gt; (Refer &lt;a href=&#34;https://raw.githubusercontent.com/navarasu/onedark.nvim/master/#default-configuration&#34;&gt;Default Config&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img width=&#34;412&#34; alt=&#34;Onedark - dark&#34; src=&#34;https://user-images.githubusercontent.com/20145075/144289835-cbbbcb22-4eae-41f1-a5a3-e1800a37ae41.png&#34;&gt; &lt;img width=&#34;412&#34; alt=&#34;Onedark - darker&#34; src=&#34;https://user-images.githubusercontent.com/20145075/144293945-ee3b7dca-b119-4709-96d3-50391c7b8aba.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img width=&#34;412&#34; alt=&#34;Onedark - cool&#34; src=&#34;https://user-images.githubusercontent.com/20145075/144298826-5c51eb3a-5529-4fe7-bce2-56508eda93d7.png&#34;&gt; &lt;img width=&#34;412&#34; alt=&#34;Onedark - deep&#34; src=&#34;https://user-images.githubusercontent.com/20145075/144299487-a7e886c7-2cc9-4d85-9aac-8517170432fc.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img width=&#34;412&#34; alt=&#34;Onedark - warm&#34; src=&#34;https://user-images.githubusercontent.com/20145075/144304677-abbf6cc1-4adc-48b4-b675-6f6a5a98b426.png&#34;&gt; &lt;img width=&#34;412&#34; alt=&#34;Onedark - warmer&#34; src=&#34;https://user-images.githubusercontent.com/20145075/144304700-1e333a12-6994-4fb2-9053-1e7f294d41a6.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via your favourite package manager&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Using Vim-Plug&#xA;Plug &#39;navarasu/onedark.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Using Packer&#xA;use &#39;navarasu/onedark.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Enable theme&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#39;onedark&#39;).load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim&#xA;colorscheme onedark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Change default style&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#39;onedark&#39;).setup {&#xA;    style = &#39;darker&#39;&#xA;}&#xA;require(&#39;onedark&#39;).load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim&#xA;let g:onedark_config = {&#xA;    \ &#39;style&#39;: &#39;darker&#39;,&#xA;\}&#xA;colorscheme onedark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Options:&lt;/strong&gt; dark, darker, cool, deep, warm, warmer, light&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Default Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#39;onedark&#39;).setup  {&#xA;    -- Main options --&#xA;    style = &#39;dark&#39;, -- Default theme style. Choose between &#39;dark&#39;, &#39;darker&#39;, &#39;cool&#39;, &#39;deep&#39;, &#39;warm&#39;, &#39;warmer&#39; and &#39;light&#39;&#xA;    transparent = false,  -- Show/hide background&#xA;    term_colors = true, -- Change terminal color as per the selected theme style&#xA;    ending_tildes = false, -- Show the end-of-buffer tildes. By default they are hidden&#xA;    cmp_itemkind_reverse = false, -- reverse item kind highlights in cmp menu&#xA;    -- toggle theme style ---&#xA;    toggle_style_key = &#39;&amp;lt;leader&amp;gt;ts&#39;, -- Default keybinding to toggle&#xA;    toggle_style_list = {&#39;dark&#39;, &#39;darker&#39;, &#39;cool&#39;, &#39;deep&#39;, &#39;warm&#39;, &#39;warmer&#39;, &#39;light&#39;}, -- List of styles to toggle between&#xA;&#xA;    -- Change code style ---&#xA;    -- Options are italic, bold, underline, none&#xA;    -- You can configure multiple style with comma seperated, For e.g., keywords = &#39;italic,bold&#39;&#xA;    code_style = {&#xA;        comments = &#39;italic&#39;,&#xA;        keywords = &#39;none&#39;,&#xA;        functions = &#39;none&#39;,&#xA;        strings = &#39;none&#39;,&#xA;        variables = &#39;none&#39;&#xA;    },&#xA;&#xA;    -- Custom Highlights --&#xA;    colors = {}, -- Override default colors&#xA;    highlights = {}, -- Override highlight groups&#xA;&#xA;    -- Plugins Config --&#xA;    diagnostics = {&#xA;        darker = true, -- darker colors for diagnostic&#xA;        undercurl = true,   -- use undercurl instead of underline for diagnostics&#xA;        background = true,    -- use background color for virtual text&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vimscript configuration&lt;/h3&gt; &#xA;&lt;p&gt;Onedark can be configured also with Vimscript, using the global dictionary &lt;code&gt;g:onedark_config&lt;/code&gt;. &lt;strong&gt;NOTE&lt;/strong&gt;: when setting boolean values use &lt;code&gt;v:true&lt;/code&gt; and &lt;code&gt;v:false&lt;/code&gt; instead of 0 and 1&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:onedark_config = {&#xA;  \ &#39;style&#39;: &#39;deep&#39;,&#xA;  \ &#39;toggle_style_key&#39;: &#39;&amp;lt;leader&amp;gt;ts&#39;,&#xA;  \ &#39;ending_tildes&#39;: v:true,&#xA;  \ &#39;diagnostics&#39;: {&#xA;    \ &#39;darker&#39;: v:false,&#xA;    \ &#39;background&#39;: v:false,&#xA;  \ },&#xA;\ }&#xA;colorscheme onedark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Example custom colors and Highlights config&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;onedark&#39;).setup {&#xA;  colors = {&#xA;    bright_orange = &#34;#ff8800&#34;,    -- define a new color&#xA;    green = &#39;#00ffaa&#39;,            -- redefine an existing color&#xA;  },&#xA;  highlights = {&#xA;    TSKeyword = {fg = &#39;$green&#39;},&#xA;    TSString = {fg = &#39;$bright_orange&#39;, bg = &#39;#00ff00&#39;, fmt = &#39;bold&#39;},&#xA;    TSFunction = {fg = &#39;#0000ff&#39;, sp = &#39;$cyan&#39;, fmt = &#39;underline,italic&#39;},&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugins Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Enable lualine&lt;/h3&gt; &#xA;&lt;p&gt;To Enable the &lt;code&gt;onedark&lt;/code&gt; theme for &lt;code&gt;Lualine&lt;/code&gt;, specify theme as &lt;code&gt;onedark&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    theme = &#39;onedark&#39;&#xA;    -- ... your lualine config&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugins Supported&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;TreeSitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;LSPDiagnostics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;NvimTree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;WhichKey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hoob3rt/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;GitGutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;GitSigns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-fugitive&#34;&gt;VimFugitive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindrets/diffview.nvim&#34;&gt;DiffView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;Hop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;Mini&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tiagovla/tokyodark.nvim&#34;&gt;tokyodark.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andresmichel/one-dark-theme&#34;&gt;one-dark-theme&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome 🎉👍.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>echasnovski/mini.nvim</title>
    <updated>2022-07-22T01:46:50Z</updated>
    <id>tag:github.com,2022-07-22:/echasnovski/mini.nvim</id>
    <link href="https://github.com/echasnovski/mini.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin with collection of minimal, independent, and fast Lua modules dedicated to improve Neovim (version 0.5 and higher) experience&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/logo.png&#34; width=&#34;800em&#34;&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/echasnovski/mini.nvim&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/tags/&#34;&gt;&lt;img src=&#34;https://badgen.net/github/tag/echasnovski/mini.nvim&#34; alt=&#34;GitHub tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/CHANGELOG.md&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/Current%20version/development/cyan&#34; alt=&#34;Current version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Collection of minimal, independent, and fast Lua modules dedicated to improve &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; (version 0.5 and higher) experience. Think about it as &#34;Swiss Army knife&#34; among Neovim plugins: it has many different independent tools (modules) suitable for most common tasks. Each module can be used as a separate sub-plugin without any startup and usage overhead.&lt;/p&gt; &#xA;&lt;p&gt;If you want to help this project grow but don&#39;t know where to start, check out &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/CONTRIBUTING.md&#34;&gt;contributing guides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#general-principles&#34;&gt;General principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#plugin-colorscheme&#34;&gt;Plugin colorscheme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#modules&#34;&gt;Modules&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minibase16&#34;&gt;mini.base16&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minibufremove&#34;&gt;mini.bufremove&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minicomment&#34;&gt;mini.comment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minicompletion&#34;&gt;mini.completion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minicursorword&#34;&gt;mini.cursorword&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minidoc&#34;&gt;mini.doc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minifuzzy&#34;&gt;mini.fuzzy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#miniindentscope&#34;&gt;mini.indentscope&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minijump&#34;&gt;mini.jump&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minijump2d&#34;&gt;mini.jump2d&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minimisc&#34;&gt;mini.misc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minipairs&#34;&gt;mini.pairs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minisessions&#34;&gt;mini.sessions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#ministarter&#34;&gt;mini.starter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#ministatusline&#34;&gt;mini.statusline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minisurround&#34;&gt;mini.surround&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minitabline&#34;&gt;mini.tabline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minitest&#34;&gt;mini.test&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minitrailspace&#34;&gt;mini.trailspace&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#planned-modules&#34;&gt;Planned modules&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin offers two branches to install from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main&lt;/code&gt; (default) will have latest development version of plugin. All changes since last stable release should be perceived as being in beta testing phase (meaning they already passed alpha-testing and are moderately settled).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; will be updated only upon releases with code tested during public beta-testing phase in &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are at least the following ways to install this plugin:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer.nvim&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Development&#xA;use &#39;echasnovski/mini.nvim&#39;&#xA;&#xA;-- Stable&#xA;use { &#39;echasnovski/mini.nvim&#39;, branch = &#39;stable&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Development&#xA;Plug &#39;echasnovski/mini.nvim&#39;&#xA;&#xA;&#34; Stable&#xA;Plug &#39;echasnovski/mini.nvim&#39;, { &#39;branch&#39;: &#39;stable&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each module is independent and implemented within single file. You can copy corresponding file from &#39;lua/mini/&#39; directory to your &#39;.config/nvim/lua&#39; directory and use it from there.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Don&#39;t forget to call module&#39;s &lt;code&gt;setup()&lt;/code&gt; (if required) to enable its functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are on Windows, there might be problems with too long file paths (like &lt;code&gt;error: unable to create file &amp;lt;some file name&amp;gt;: Filename too long&lt;/code&gt;). Try doing one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable corresponding git global config value: &lt;code&gt;git config --system core.longpaths true&lt;/code&gt;. Then try to reinstall.&lt;/li&gt; &#xA; &lt;li&gt;Install plugin in other place with shorter path.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;General principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Design&lt;/strong&gt;. Each module is designed to solve a particular problem targeting balance between feature-richness (handling as many edge-cases as possible) and simplicity of implementation/support. Granted, not all of them ended up with the same balance, but it is the goal nevertheless.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Independence&lt;/strong&gt;. Modules are independent of each other and can be run without external dependencies. Although some of them may need dependencies for full experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Structure&lt;/strong&gt;. Each module is a submodule for a placeholder &#34;mini&#34; module. So, for example, &#34;surround&#34; module should be referred to as &#34;mini.surround&#34;. As later will be explained, this plugin can also be referred to as &#34;MiniSurround&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Setup&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Each module (if needed) should be setup separately with &lt;code&gt;require(&amp;lt;name of module&amp;gt;).setup({})&lt;/code&gt; (possibly replace {} with your config table or omit to use defaults). You can supply only values which differ from defaults, which will be used for the rest ones.&lt;/li&gt; &#xA;   &lt;li&gt;Call to module&#39;s &lt;code&gt;setup()&lt;/code&gt; always creates a global Lua object with coherent camel-case name: &lt;code&gt;require(&#39;mini.surround&#39;).setup()&lt;/code&gt; creates &lt;code&gt;_G.MiniSurround&lt;/code&gt;. This allows for a simpler usage of plugin functionality: instead of &lt;code&gt;require(&#39;mini.surround&#39;)&lt;/code&gt; use &lt;code&gt;MiniSurround&lt;/code&gt; (or manually &lt;code&gt;:lua MiniSurround.*&lt;/code&gt; in command line); available from &lt;code&gt;v:lua&lt;/code&gt; like &lt;code&gt;v:lua.MiniSurround&lt;/code&gt;. Considering this, &#34;module&#34; and &#34;Lua object&#34; names can be used interchangeably: &#39;mini.surround&#39; and &#39;MiniSurround&#39; will mean the same thing.&lt;/li&gt; &#xA;   &lt;li&gt;Each supplied &lt;code&gt;config&lt;/code&gt; table is stored in &lt;code&gt;config&lt;/code&gt; field of global object. Like &lt;code&gt;MiniSurround.config&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Values of &lt;code&gt;config&lt;/code&gt;, which affect runtime activity, can be changed on the fly to have effect. For example, &lt;code&gt;MiniSurround.config.n_lines&lt;/code&gt; can be changed during runtime; but changing &lt;code&gt;MiniSurround.config.mappings&lt;/code&gt; won&#39;t have any effect (as mappings are created once during &lt;code&gt;setup()&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Buffer local configuration&lt;/strong&gt;. Each module can be additionally configured to use certain runtime config settings locally to buffer. See &lt;code&gt;mini.nvim-buffer-local-config&lt;/code&gt; section in help file for more information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Disabling&lt;/strong&gt;. Each module&#39;s core functionality can be disabled globally or locally to buffer by creating appropriate global or buffer-scoped variables equal to &lt;code&gt;v:true&lt;/code&gt;. See &lt;code&gt;mini.nvim-disabling-recipes&lt;/code&gt; section in help file for common recipes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highlight groups&lt;/strong&gt;. Appearance of module&#39;s output is controlled by certain highlight group (see &lt;code&gt;:h highlight-groups&lt;/code&gt;). To customize them, use &lt;code&gt;highlight&lt;/code&gt; command. &lt;strong&gt;Note&lt;/strong&gt;: currently not many Neovim themes support this plugin&#39;s highlight groups; fixing this situation is highly appreciated. To see a more calibrated look, use MiniBase16 or plugin&#39;s colorscheme &lt;code&gt;minischeme&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stability&lt;/strong&gt;. Each module upon release is considered to be relatively stable: both in terms of setup and functionality. Any non-bugfix backward-incompatible change will be released gradually as much as possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plugin colorscheme&lt;/h2&gt; &#xA;&lt;p&gt;This plugin comes with an official colorscheme named &lt;code&gt;minischeme&lt;/code&gt;. This is a MiniBase16 theme created with faster version of the following Lua code: &lt;code&gt;require(&#39;mini.base16&#39;).setup({palette = palette, name = &#39;minischeme&#39;, use_cterm = true})&lt;/code&gt; where &lt;code&gt;palette&lt;/code&gt; is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For dark &#39;background&#39;: &lt;code&gt;require(&#39;mini.base16&#39;).mini_palette(&#39;#112641&#39;, &#39;#e2e98f&#39;, 75)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For light &#39;background&#39;: &lt;code&gt;require(&#39;mini.base16&#39;).mini_palette(&#39;#e2e5ca&#39;, &#39;#002a83&#39;, 75)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Activate it as a regular &lt;code&gt;colorscheme&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All examples use this colorscheme.&lt;/p&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;h3&gt;mini.base16&lt;/h3&gt; &#xA;&lt;p&gt;Fast implementation of &lt;a href=&#34;https://github.com/chriskempson/base16&#34;&gt;chriskempson/base16&lt;/a&gt; theme for manually supplied palette. Has unique palette generator which needs only background and foreground colors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minibase16&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.base16&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Table with names from `base00` to `base0F` and values being strings of&#xA;  -- HEX colors with format &#34;#RRGGBB&#34;. NOTE: this should be explicitly&#xA;  -- supplied in `setup()`.&#xA;  palette = nil,&#xA;&#xA;  -- Whether to support cterm colors. Can be boolean, `nil` (same as&#xA;  -- `false`), or table with cterm colors. See `setup()` documentation for&#xA;  -- more information.&#xA;  use_cterm = nil,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.base16&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chriskempson/base16-vim&#34;&gt;chriskempson/base16-vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.bufremove&lt;/h3&gt; &#xA;&lt;p&gt;Buffer removing (unshow, delete, wipeout) while saving window layout.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minibufremove&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.bufremove&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Whether to set Vim&#39;s settings for buffers (allow hidden buffers)&#xA;  set_vim_settings = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.bufremove&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-sayonara&#34;&gt;mhinz/vim-sayonara&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moll/vim-bbye&#34;&gt;moll/vim-bbye&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.comment&lt;/h3&gt; &#xA;&lt;p&gt;Fast and familiar per-line code commenting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minicomment&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.comment&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    -- Toggle comment (like `gcip` - comment inner paragraph) for both&#xA;    -- Normal and Visual modes&#xA;    comment = &#39;gc&#39;,&#xA;&#xA;    -- Toggle comment on current line&#xA;    comment_line = &#39;gcc&#39;,&#xA;&#xA;    -- Define &#39;comment&#39; textobject (like `dgc` - delete whole comment block)&#xA;    textobject = &#39;gc&#39;,&#xA;  },&#xA;  -- Hook functions to be executed at certain stage of commenting&#xA;  hooks = {&#xA;    -- Before successful commenting. Does nothing by default.&#xA;    pre = function() end,&#xA;    -- After successful commenting. Does nothing by default.&#xA;    post = function() end,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.comment&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-commentary&#34;&gt;tpope/vim-commentary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/preservim/nerdcommenter&#34;&gt;preservim/nerdcommenter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/b3nj5m1n/kommentary&#34;&gt;b3nj5m1n/kommentary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/numToStr/Comment.nvim&#34;&gt;numToStr/Comment.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.completion&lt;/h3&gt; &#xA;&lt;p&gt;Async (with customizable &#39;debounce&#39; delay) &#39;two-stage chain completion&#39;: first builtin LSP, then configurable fallback. Also has functionality for completion item info and function signature (both in floating window appearing after customizable delay).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minicompletion&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.completion&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Delay (debounce type, in ms) between certain Neovim event and action.&#xA;  -- This can be used to (virtually) disable certain automatic actions by&#xA;  -- setting very high delay time (like 10^7).&#xA;  delay = { completion = 100, info = 100, signature = 50 },&#xA;&#xA;  -- Maximum dimensions of floating windows for certain actions. Action&#xA;  -- entry should be a table with &#39;height&#39; and &#39;width&#39; fields.&#xA;  window_dimensions = {&#xA;    info = { height = 25, width = 80 },&#xA;    signature = { height = 25, width = 80 },&#xA;  },&#xA;&#xA;  -- Way of how module does LSP completion&#xA;  lsp_completion = {&#xA;    -- `source_func` should be one of &#39;completefunc&#39; or &#39;omnifunc&#39;.&#xA;    source_func = &#39;completefunc&#39;,&#xA;&#xA;    -- `auto_setup` should be boolean indicating if LSP completion is set up&#xA;    -- on every `BufEnter` event.&#xA;    auto_setup = true,&#xA;&#xA;    -- `process_items` should be a function which takes LSP&#xA;    -- &#39;textDocument/completion&#39; response items and word to complete. Its&#xA;    -- output should be a table of the same nature as input items. The most&#xA;    -- common use-cases are custom filtering and sorting. You can use&#xA;    -- default `process_items` as `MiniCompletion.default_process_items()`.&#xA;    process_items = --&amp;lt;function: filters out snippets; sorts by LSP specs&amp;gt;,&#xA;  },&#xA;&#xA;  -- Fallback action. It will always be run in Insert mode. To use Neovim&#39;s&#xA;  -- built-in completion (see `:h ins-completion`), supply its mapping as&#xA;  -- string. Example: to use &#39;whole lines&#39; completion, supply &#39;&amp;lt;C-x&amp;gt;&amp;lt;C-l&amp;gt;&#39;.&#xA;  fallback_action = --&amp;lt;function: like `&amp;lt;C-n&amp;gt;` completion&amp;gt;,&#xA;&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one. Some of them&#xA;  -- might conflict with system mappings.&#xA;  mappings = {&#xA;    force_twostep = &#39;&amp;lt;C-Space&amp;gt;&#39;, -- Force two-step completion&#xA;    force_fallback = &#39;&amp;lt;A-Space&amp;gt;&#39;, -- Force fallback completion&#xA;  },&#xA;&#xA;  -- Whether to set Vim&#39;s settings for better experience (modifies&#xA;  -- `shortmess` and `completeopt`)&#xA;  set_vim_settings = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.completion&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;hrsh7th/nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shougo/ddc.vim&#34;&gt;Shougo/ddc.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.cursorword&lt;/h3&gt; &#xA;&lt;p&gt;Automatic highlighting of word under cursor (displayed after customizable delay). Current word under cursor can be highlighted differently.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minicursorword&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.cursorword&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Delay (in ms) between when cursor moved and when highlighting appeared&#xA;  delay = 100,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.cursorword&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/itchyny/vim-cursorword&#34;&gt;itchyny/vim-cursorword&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.doc&lt;/h3&gt; &#xA;&lt;p&gt;Generation of help files from EmmyLua-like annotations. Allows flexible customization of output via hook functions. Used for documenting this plugin.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minidoc&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.doc&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Lua string pattern to determine if line has documentation annotation.&#xA;  -- First capture group should describe possible section id. Default value&#xA;  -- means that annotation line should:&#xA;  -- - Start with `---` at first column.&#xA;  -- - Any non-whitespace after `---` will be treated as new section id.&#xA;  -- - Single whitespace at the start of main text will be ignored.&#xA;  annotation_pattern = &#39;^%-%-%-(%S*) ?&#39;,&#xA;&#xA;  -- Identifier of block annotation lines until first captured identifier&#xA;  default_section_id = &#39;@text&#39;,&#xA;&#xA;  -- Hooks to be applied at certain stage of document life cycle. Should&#xA;  -- modify its input in place (and not return new one).&#xA;  hooks = {&#xA;    -- Applied to block before anything else&#xA;    block_pre = --&amp;lt;function: infers header sections (tag and/or signature)&amp;gt;,&#xA;&#xA;    -- Applied to section before anything else&#xA;    section_pre = --&amp;lt;function: replaces current aliases&amp;gt;,&#xA;&#xA;    -- Applied if section has specified captured id&#xA;    sections = {&#xA;      [&#39;@alias&#39;] = --&amp;lt;function: registers alias in MiniDoc.current.aliases&amp;gt;,&#xA;      [&#39;@class&#39;] = --&amp;lt;function&amp;gt;,&#xA;      -- For most typical usage see |MiniDoc.afterlines_to_code|&#xA;      [&#39;@eval&#39;] = --&amp;lt;function: evaluates lines; replaces with their return&amp;gt;,&#xA;      [&#39;@field&#39;] = --&amp;lt;function&amp;gt;,&#xA;      [&#39;@param&#39;] = --&amp;lt;function&amp;gt;,&#xA;      [&#39;@private&#39;] = --&amp;lt;function: registers block for removal&amp;gt;,&#xA;      [&#39;@return&#39;] = --&amp;lt;function&amp;gt;,&#xA;      [&#39;@seealso&#39;] = --&amp;lt;function&amp;gt;,&#xA;      [&#39;@signature&#39;] = --&amp;lt;function: formats signature of documented object&amp;gt;,&#xA;      [&#39;@tag&#39;] = --&amp;lt;function: turns its line in proper tag lines&amp;gt;,&#xA;      [&#39;@text&#39;] = --&amp;lt;function: purposefully does nothing&amp;gt;,&#xA;      [&#39;@type&#39;] = --&amp;lt;function&amp;gt;,&#xA;      [&#39;@usage&#39;] = --&amp;lt;function&amp;gt;,&#xA;    },&#xA;&#xA;    -- Applied to section after all previous steps&#xA;    section_post = --&amp;lt;function: currently does nothing&amp;gt;,&#xA;&#xA;    -- Applied to block after all previous steps&#xA;    block_post = --&amp;lt;function: does many things&amp;gt;,&#xA;&#xA;    -- Applied to file after all previous steps&#xA;    file = --&amp;lt;function: adds separator&amp;gt;,&#xA;&#xA;    -- Applied to doc after all previous steps&#xA;    doc = --&amp;lt;function: adds modeline&amp;gt;,&#xA;  },&#xA;&#xA;  -- Path (relative to current directory) to script which handles project&#xA;  -- specific help file generation (like custom input files, hooks, etc.).&#xA;  script_path = &#39;scripts/minidoc.lua&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.doc&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt; (which is created with this module).&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tjdevries/tree-sitter-lua&#34;&gt;tjdevries/tree-sitter-lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.fuzzy&lt;/h3&gt; &#xA;&lt;p&gt;Functions for fast and simple fuzzy matching. It has not only functions to perform fuzzy matching of one string to others, but also a sorter for &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope/telescope.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minifuzzy&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.fuzzy&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Maximum allowed value of match features (width and first match). All&#xA;  -- feature values greater than cutoff can be considered &#34;equally bad&#34;.&#xA;  cutoff = 100,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.fuzzy&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-fzy-native.nvim&#34;&gt;nvim-telescope/telescope-fzy-native.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.indentscope&lt;/h3&gt; &#xA;&lt;p&gt;Visualize and operate on indent scope. Supports customization of debounce delay, animation style, and different granularity of options for scope computing algorithm.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#miniindentscope&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.indentscope&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  draw = {&#xA;    -- Delay (in ms) between event and start of drawing scope indicator&#xA;    delay = 100,&#xA;&#xA;    -- Animation rule for scope&#39;s first drawing. A function which, given next&#xA;    -- and total step numbers, returns wait time (in ms). See&#xA;    -- |MiniIndentscope.gen_animation()| for builtin options. To not use&#xA;    -- animation, supply `require(&#39;mini.indentscope&#39;).gen_animation(&#39;none&#39;)`.&#xA;    animation = --&amp;lt;function: implements constant 20ms between steps&amp;gt;,&#xA;  },&#xA;&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    -- Textobjects&#xA;    object_scope = &#39;ii&#39;,&#xA;    object_scope_with_border = &#39;ai&#39;,&#xA;&#xA;    -- Motions (jump to respective border line; if not present - body line)&#xA;    goto_top = &#39;[i&#39;,&#xA;    goto_bottom = &#39;]i&#39;,&#xA;  },&#xA;&#xA;  -- Options which control computation of scope. Buffer local values can be&#xA;  -- supplied in buffer variable `vim.b.miniindentscope_options`.&#xA;  options = {&#xA;    -- Type of scope&#39;s border: which line(s) with smaller indent to&#xA;    -- categorize as border. Can be one of: &#39;both&#39;, &#39;top&#39;, &#39;bottom&#39;, &#39;none&#39;.&#xA;    border = &#39;both&#39;,&#xA;&#xA;    -- Whether to use cursor column when computing reference indent. Useful to&#xA;    -- see incremental scopes with horizontal cursor movements.&#xA;    indent_at_cursor = true,&#xA;&#xA;    -- Whether to first check input line to be a border of adjacent scope.&#xA;    -- Use it if you want to place cursor on function header to get scope of&#xA;    -- its body.&#xA;    try_as_border = false,&#xA;  },&#xA;&#xA;  -- Which character to use for drawing scope indicator&#xA;  symbol = &#39;╎&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.indentscope&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;lukas-reineke/indent-blankline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michaeljsmith/vim-indent-object&#34;&gt;michaeljsmith/vim-indent-object&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.jump&lt;/h3&gt; &#xA;&lt;p&gt;Minimal and fast module for smarter jumping to a single character. Initial idea and implementation by &lt;a href=&#34;https://github.com/xigoi&#34;&gt;Adam Blažek&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minijump&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.jump&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    forward = &#39;f&#39;,&#xA;    backward = &#39;F&#39;,&#xA;    forward_till = &#39;t&#39;,&#xA;    backward_till = &#39;T&#39;,&#xA;    repeat_jump = &#39;;&#39;,&#xA;  },&#xA;&#xA;  -- Delay values (in ms) for different functionalities. Set any of them to&#xA;  -- a very big number (like 10^7) to virtually disable.&#xA;  delay = {&#xA;    -- Delay between jump and highlighting all possible jumps&#xA;    highlight = 250,&#xA;&#xA;    -- Delay between jump and automatic stop if idle (no jump is done)&#xA;    idle_stop = 10000000,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.jump&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rhysd/clever-f.vim&#34;&gt;rhysd/clever-f.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;justinmk/vim-sneak&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.jump2d&lt;/h3&gt; &#xA;&lt;p&gt;Minimal and fast Lua plugin for jumping (moving cursor) within visible lines via iterative label filtering. Supports custom jump targets (spots), labels, hooks, allowed windows and lines, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minijump2d&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.jump2d&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Function producing jump spots (byte indexed) for a particular line.&#xA;  -- For more information see |MiniJump2d.start|.&#xA;  -- If `nil` (default) - use |MiniJump2d.default_spotter|&#xA;  spotter = nil,&#xA;&#xA;  -- Characters used for labels of jump spots (in supplied order)&#xA;  labels = &#39;abcdefghijklmnopqrstuvwxyz&#39;,&#xA;&#xA;  -- Which lines are used for computing spots&#xA;  allowed_lines = {&#xA;    blank = true, -- Blank line (not sent to spotter even if `true`)&#xA;    cursor_before = true, -- Lines before cursor line&#xA;    cursor_at = true, -- Cursor line&#xA;    cursor_after = true, -- Lines after cursor line&#xA;    fold = true, -- Start of fold (not sent to spotter even if `true`)&#xA;  },&#xA;&#xA;  -- Which windows from current tabpage are used for visible lines&#xA;  allowed_windows = {&#xA;    current = true,&#xA;    not_current = true,&#xA;  },&#xA;&#xA;  -- Functions to be executed at certain events&#xA;  hooks = {&#xA;    before_start = nil, -- Before jump start&#xA;    after_jump = nil, -- After jump was actually done&#xA;  },&#xA;&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    start_jumping = &#39;&amp;lt;CR&amp;gt;&#39;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.jump2d&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;phaazon/hop.nvim&lt;/a&gt; (main inspiration behind this module)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggandor/lightspeed.nvim&#34;&gt;ggandor/lightspeed.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.misc&lt;/h3&gt; &#xA;&lt;p&gt;Collection of miscellaneous useful functions. Like &lt;code&gt;put()&lt;/code&gt; and &lt;code&gt;put_text()&lt;/code&gt; which print Lua objects to command line and current buffer respectively.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minimisc&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.misc&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Array of fields to make global (to be used as independent variables)&#xA;  make_global = { &#39;put&#39;, &#39;put_text&#39; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.misc&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;mini.pairs&lt;/h3&gt; &#xA;&lt;p&gt;Autopairs plugin which has minimal defaults and functionality to do per-key expression mappings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minipairs&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.pairs&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- In which modes mappings from this `config` should be created&#xA;  modes = { insert = true, command = false, terminal = false },&#xA;&#xA;  -- Global mappings. Each right hand side should be a pair information, a&#xA;  -- table with at least these fields (see more in |MiniPairs.map|):&#xA;  -- - &amp;lt;action&amp;gt; - one of &#39;open&#39;, &#39;close&#39;, &#39;closeopen&#39;.&#xA;  -- - &amp;lt;pair&amp;gt; - two character string for pair to be used.&#xA;  -- By default pair is not inserted after `\`, quotes are not recognized by&#xA;  -- `&amp;lt;CR&amp;gt;`, `&#39;` does not insert pair after a letter.&#xA;  -- Only parts of tables can be tweaked (others will use these defaults).&#xA;  mappings = {&#xA;    [&#39;(&#39;] = { action = &#39;open&#39;, pair = &#39;()&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;[&#39;] = { action = &#39;open&#39;, pair = &#39;[]&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;{&#39;] = { action = &#39;open&#39;, pair = &#39;{}&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;&#xA;    [&#39;)&#39;] = { action = &#39;close&#39;, pair = &#39;()&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;]&#39;] = { action = &#39;close&#39;, pair = &#39;[]&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;}&#39;] = { action = &#39;close&#39;, pair = &#39;{}&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;&#xA;    [&#39;&#34;&#39;] = { action = &#39;closeopen&#39;, pair = &#39;&#34;&#34;&#39;, neigh_pattern = &#39;[^\\].&#39;, register = { cr = false } },&#xA;    [&#34;&#39;&#34;] = { action = &#39;closeopen&#39;, pair = &#34;&#39;&#39;&#34;, neigh_pattern = &#39;[^%a\\].&#39;, register = { cr = false } },&#xA;    [&#39;`&#39;] = { action = &#39;closeopen&#39;, pair = &#39;``&#39;, neigh_pattern = &#39;[^\\].&#39;, register = { cr = false } },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.pairs&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jiangmiao/auto-pairs&#34;&gt;jiangmiao/auto-pairs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs&#34;&gt;windwp/nvim-autopairs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.sessions&lt;/h3&gt; &#xA;&lt;p&gt;Session management (read, write, delete) which works using |mksession|. It was heavily inspired by &#39;vim-startify&#39; and should work out of the box with sessions created by it. Works with global (from configured directory) and local (from current directory) sessions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minisessions&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.sessions&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Whether to read latest session if Neovim opened without file arguments&#xA;  autoread = false,&#xA;&#xA;  -- Whether to write current session before quitting Neovim&#xA;  autowrite = true,&#xA;&#xA;  -- Directory where global sessions are stored (use `&#39;&#39;` to disable)&#xA;  directory = --&amp;lt;&#34;session&#34; subdir of user data directory from |stdpath()|&amp;gt;,&#xA;&#xA;  -- File for local session (use `&#39;&#39;` to disable)&#xA;  file = &#39;Session.vim&#39;,&#xA;&#xA;  -- Whether to force possibly harmful actions (meaning depends on function)&#xA;  force = { read = false, write = true, delete = false },&#xA;&#xA;  -- Hook functions for actions. Default `nil` means &#39;do nothing&#39;.&#xA;  hooks = {&#xA;    -- Before successful action&#xA;    pre = { read = nil, write = nil, delete = nil },&#xA;    -- After successful action&#xA;    post = { read = nil, write = nil, delete = nil },&#xA;  },&#xA;&#xA;  -- Whether to print session path after action&#xA;  verbose = { read = false, write = true, delete = true },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.sessions&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-startify&#34;&gt;mhinz/vim-startify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shatur/neovim-session-manager&#34;&gt;Shatur/neovim-session-manager&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.starter&lt;/h3&gt; &#xA;&lt;p&gt;Minimal, fast, and flexible start screen. Displayed items are fully customizable both in terms of what they do and how they look (with reasonable defaults). Item selection can be done using prefix query with instant visual feedback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#ministarter&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.starter&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Whether to open starter buffer on VimEnter. Not opened if Neovim was&#xA;  -- started with intent to show something else.&#xA;  autoopen = true,&#xA;&#xA;  -- Whether to evaluate action of single active item&#xA;  evaluate_single = false,&#xA;&#xA;  -- Items to be displayed. Should be an array with the following elements:&#xA;  -- - Item: table with &amp;lt;action&amp;gt;, &amp;lt;name&amp;gt;, and &amp;lt;section&amp;gt; keys.&#xA;  -- - Function: should return one of these three categories.&#xA;  -- - Array: elements of these three types (i.e. item, array, function).&#xA;  -- If `nil` (default), default items will be used (see |mini.starter|).&#xA;  items = nil,&#xA;&#xA;  -- Header to be displayed before items. Converted to single string via&#xA;  -- `tostring` (use `\n` to display several lines). If function, it is&#xA;  -- evaluated first. If `nil` (default), polite greeting will be used.&#xA;  header = nil,&#xA;&#xA;  -- Footer to be displayed after items. Converted to single string via&#xA;  -- `tostring` (use `\n` to display several lines). If function, it is&#xA;  -- evaluated first. If `nil` (default), default usage help will be shown.&#xA;  footer = nil,&#xA;&#xA;  -- Array  of functions to be applied consecutively to initial content.&#xA;  -- Each function should take and return content for &#39;Starter&#39; buffer (see&#xA;  -- |mini.starter| and |MiniStarter.content| for more details).&#xA;  content_hooks = nil,&#xA;&#xA;  -- Characters to update query. Each character will have special buffer&#xA;  -- mapping overriding your global ones. Be careful to not add `:` as it&#xA;  -- allows you to go into command mode.&#xA;  query_updaters = &#39;abcdefghijklmnopqrstuvwxyz0123456789_-.&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.starter&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt; (also contains example configurations similar to &#39;vim-startify&#39; and &#39;dashboard-nvim&#39;). For its benchmarks alongside plugins with similar functionality, see &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/benchmarks/starter/startup-summary.md&#34;&gt;benchmarks/starter/startup-summary.md&lt;/a&gt; (more details &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/benchmarks/starter/README.md&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-startify&#34;&gt;mhinz/vim-startify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;glepnir/dashboard-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/goolord/alpha-nvim&#34;&gt;goolord/alpha-nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.statusline&lt;/h3&gt; &#xA;&lt;p&gt;Minimal and fast statusline. Has ability to use custom content supplied with concise function (using module&#39;s provided section functions) along with builtin default. For full experience needs &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd font&lt;/a&gt;, &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;lewis6991/gitsigns.nvim&lt;/a&gt; plugin, and &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt; plugin (but works without any them).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#ministatusline&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.statusline&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Content of statusline as functions which return statusline string. See&#xA;  -- `:h statusline` and code of default contents (used instead of `nil`).&#xA;  content = {&#xA;    -- Content for active window&#xA;    active = nil,&#xA;    -- Content for inactive window(s)&#xA;    inactive = nil,&#xA;  },&#xA;&#xA;  -- Whether to use icons by default&#xA;  use_icons = true,&#xA;&#xA;  -- Whether to set Vim&#39;s settings for statusline (make it always shown with&#xA;  -- &#39;laststatus&#39; set to 2). To use global statusline in Neovim&amp;gt;=0.7.0, set&#xA;  -- this to `false` and &#39;laststatus&#39; to 3.&#xA;  set_vim_settings = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.statusline&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hoob3rt/lualine.nvim&#34;&gt;hoob3rt/lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NTBBloodbath/galaxyline.nvim&#34;&gt;NTBBloodbath/galaxyline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/famiu/feline.nvim&#34;&gt;famiu/feline.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.surround&lt;/h3&gt; &#xA;&lt;p&gt;Fast surround plugin. Add, delete, replace, find, highlight surrounding (like pair of parenthesis, quotes, etc.). Has special &#34;function call&#34;, &#34;tag&#34;, and &#34;interactive&#34; surroundings. Supports dot-repeatability, textobject, motions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minisurround&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.surround&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Add custom surroundings to be used on top of builtin ones. For more&#xA;  -- information with examples, see `:h MiniSurround.config`.&#xA;  custom_surroundings = nil,&#xA;&#xA;  -- Duration (in ms) of highlight when calling `MiniSurround.highlight()`&#xA;  highlight_duration = 500,&#xA;&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    add = &#39;sa&#39;, -- Add surrounding in Normal and Visual modes&#xA;    delete = &#39;sd&#39;, -- Delete surrounding&#xA;    find = &#39;sf&#39;, -- Find surrounding (to the right)&#xA;    find_left = &#39;sF&#39;, -- Find surrounding (to the left)&#xA;    highlight = &#39;sh&#39;, -- Highlight surrounding&#xA;    replace = &#39;sr&#39;, -- Replace surrounding&#xA;    update_n_lines = &#39;sn&#39;, -- Update `n_lines`&#xA;  },&#xA;&#xA;  -- Number of lines within which surrounding is searched&#xA;  n_lines = 20,&#xA;&#xA;  -- How to search for surrounding (first inside current line, then inside&#xA;  -- neighborhood). One of &#39;cover&#39;, &#39;cover_or_next&#39;, &#39;cover_or_prev&#39;,&#xA;  -- &#39;cover_or_nearest&#39;. For more details, see `:h MiniSurround.config`.&#xA;  search_method = &#39;cover&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.surround&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;tpope/vim-surround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylechui/nvim-surround&#34;&gt;kylechui/nvim-surround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/machakann/vim-sandwich&#34;&gt;machakann/vim-sandwich&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.tabline&lt;/h3&gt; &#xA;&lt;p&gt;Minimal tabline which always shows listed (see &lt;code&gt;:h buflisted&lt;/code&gt;) buffers. Allows showing extra information section in case of multiple vim tabpages. For full experience needs &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minitabline&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.tabline&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Whether to show file icons (requires &#39;kyazdani42/nvim-web-devicons&#39;)&#xA;  show_icons = true,&#xA;&#xA;  -- Whether to set Vim&#39;s settings for tabline (make it always shown and&#xA;  -- allow hidden buffers)&#xA;  set_vim_settings = true,&#xA;&#xA;  -- Where to show tabpage section in case of multiple vim tabpages.&#xA;  -- One of &#39;left&#39;, &#39;right&#39;, &#39;none&#39;.&#xA;  tabpage_section = &#39;left&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.tabline&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/bufferline.nvim&#34;&gt;akinsho/bufferline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ap/vim-buftabline&#34;&gt;ap/vim-buftabline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.test&lt;/h3&gt; &#xA;&lt;p&gt;Framework for writing extensive Neovim plugin tests. Supports hierarchical tests, hooks, parametrization, filtering (like from current file or cursor position), screen tests, &#34;busted-style&#34; emulation, customizable reporters, and more. Designed to be used with provided wrapper for managing child Neovim processes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minitest&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.test&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Options for collection of test cases. See `:h MiniTest.collect()`.&#xA;  collect = {&#xA;    -- Temporarily emulate functions from &#39;busted&#39; testing framework&#xA;    -- (`describe`, `it`, `before_each`, `after_each`, and more)&#xA;    emulate_busted = true,&#xA;&#xA;    -- Function returning array of file paths to be collected.&#xA;    -- Default: all Lua files in &#39;tests&#39; directory starting with &#39;test_&#39;.&#xA;    find_files = function()&#xA;      return vim.fn.globpath(&#39;tests&#39;, &#39;**/test_*.lua&#39;, true, true)&#xA;    end,&#xA;&#xA;    -- Predicate function indicating if test case should be executed&#xA;    filter_cases = function(case) return true end,&#xA;  },&#xA;&#xA;  -- Options for execution of test cases. See `:h MiniTest.execute()`.&#xA;  execute = {&#xA;    -- Table with callable fields `start()`, `update()`, and `finish()`&#xA;    reporter = nil,&#xA;&#xA;    -- Whether to stop execution after first error&#xA;    stop_on_error = false,&#xA;  },&#xA;&#xA;  -- Path (relative to current directory) to script which handles project&#xA;  -- specific test running&#xA;  script_path = &#39;scripts/minitest.lua&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further reading:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For more detailed information, read &#39;mini.test&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For more hands-on introduction based on examples, see &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/TESTING.md&#34;&gt;TESTING.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For more in-depth usage see &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/tests&#34;&gt;tests&lt;/a&gt; of this plugin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;nvim-lua/plenary.nvim&lt;/a&gt; (&#39;test_harness&#39;, &#39;busted&#39;, &#39;luassert&#39; modules)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.trailspace&lt;/h3&gt; &#xA;&lt;p&gt;Automatic highlighting of trailing whitespace with functionality to remove it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minitrailspace&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.trailspace&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Highlight only in normal buffers (ones with empty &#39;buftype&#39;). This is&#xA;  -- useful to not show trailing whitespace where it usually doesn&#39;t matter.&#xA;  only_in_normal_buffers = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.trailspace&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ntpeters/vim-better-whitespace&#34;&gt;ntpeters/vim-better-whitespace&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Planned modules&lt;/h2&gt; &#xA;&lt;p&gt;This is the list of modules I currently intend to implement eventually (as my free time and dedication will allow):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#39;mini.align&#39; - fast text alignment. Something like &lt;a href=&#34;https://github.com/tommcdo/vim-lion&#34;&gt;tommcdo/vim-lion&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#39;mini.terminal&#39; (or &#39;mini.repl&#39;) - coherently manage terminal windows and send text from buffers to terminal windows. Something like &lt;a href=&#34;https://github.com/kassio/neoterm&#34;&gt;kassio/neoterm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#39;mini.exchange&#39; (or &#39;mini.swap&#39;) - exchange two regions of text. Something like &lt;a href=&#34;https://github.com/tommcdo/vim-exchange&#34;&gt;tommcdo/vim-exchange&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#39;mini.arguments&#39; - work with listed arguments. Something like &lt;a href=&#34;https://github.com/FooSoft/vim-argwrap&#34;&gt;FooSoft/vim-argwrap&lt;/a&gt; and &lt;a href=&#34;https://github.com/AndrewRadev/sideways.vim&#34;&gt;AndrewRadev/sideways.vim&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#39;mini.tree&#39; - file tree explorer. Truncated version of &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;kyazdani42/nvim-tree&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>