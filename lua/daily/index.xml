<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-30T01:40:12Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Civitasv/cmake-tools.nvim</title>
    <updated>2023-07-30T01:40:12Z</updated>
    <id>tag:github.com,2023-07-30:/Civitasv/cmake-tools.nvim</id>
    <link href="https://github.com/Civitasv/cmake-tools.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CMake integration in Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CMake Tools&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/images/demo.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;🔥CMake Tools for Neovim which is written in pure lua.🔥&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CREDIT:&lt;/p&gt; &#xA; &lt;p&gt;It is a fork from the brilliant &lt;a href=&#34;https://github.com/Shatur/neovim-cmake&#34;&gt;neovim-cmake&lt;/a&gt;. Since I change too much of it, So I make a new repo to develop it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The goal of this plugin is to offer a comprehensive, convenient, and powerful workflow for CMake-based projects in Neovim, comparable to the functionality provided by &lt;a href=&#34;https://github.com/microsoft/vscode-cmake-tools&#34;&gt;vscode-cmake-tools&lt;/a&gt; for Visual Studio Code.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;✨&lt;/span&gt; Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Require Neovim (&amp;gt;=0.7).&lt;/li&gt; &#xA; &lt;li&gt;Require &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install it like any other Neovim plugin. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;: &lt;code&gt;return { &#39;Civitasv/cmake-tools.nvim&#39; }&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;Civitasv/cmake-tools.nvim&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;Civitasv/cmake-tools.nvim&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🎈&lt;/span&gt; Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;cmake-tools&#34;).setup {&#xA;  cmake_command = &#34;cmake&#34;, -- this is used to specify cmake command path&#xA;  cmake_regenerate_on_save = true, -- auto generate when save CMakeLists.txt&#xA;  cmake_generate_options = { &#34;-DCMAKE_EXPORT_COMPILE_COMMANDS=1&#34; }, -- this will be passed when invoke `CMakeGenerate`&#xA;  cmake_build_options = {}, -- this will be passed when invoke `CMakeBuild`&#xA;  cmake_build_directory = &#34;&#34;, -- this is used to specify generate directory for cmake&#xA;  cmake_build_directory_prefix = &#34;cmake_build_&#34;, -- when cmake_build_directory is set to &#34;&#34;, this option will be activated&#xA;  cmake_soft_link_compile_commands = true, -- this will automatically make a soft link from compile commands file to project root dir&#xA;  cmake_compile_commands_from_lsp = false, -- this will automatically set compile commands file location using lsp, to use it, please set `cmake_soft_link_compile_commands` to false&#xA;  cmake_kits_path = nil, -- this is used to specify global cmake kits path, see CMakeKits for detailed usage&#xA;  cmake_variants_message = {&#xA;    short = { show = true }, -- whether to show short message&#xA;    long = { show = true, max_length = 40 } -- whether to show long message&#xA;  },&#xA;  cmake_dap_configuration = { -- debug settings for cmake&#xA;    name = &#34;cpp&#34;,&#xA;    type = &#34;codelldb&#34;,&#xA;    request = &#34;launch&#34;,&#xA;    stopOnEntry = false,&#xA;    runInTerminal = true,&#xA;    console = &#34;integratedTerminal&#34;,&#xA;  },&#xA;  cmake_always_use_terminal = false, -- if true, use terminal for generate, build, clean, install, run, etc, except for debug, else only use terminal for run, use quickfix for others&#xA;  cmake_quickfix_opts = { -- quickfix settings for cmake, quickfix will be used when `cmake_always_use_terminal` is false&#xA;    show = &#34;always&#34;, -- &#34;always&#34;, &#34;only_on_error&#34;&#xA;    position = &#34;belowright&#34;, -- &#34;bottom&#34;, &#34;top&#34;&#xA;    size = 10,&#xA;  },&#xA;  cmake_terminal_opts = { -- terminal settings for cmake, terminal will be used for run when `cmake_always_use_terminal` is false or true, will be used for all tasks except for debug when `cmake_always_use_terminal` is true&#xA;    name = &#34;Main Terminal&#34;,&#xA;    prefix_name = &#34;[CMakeTools]: &#34;, -- This must be included and must be unique, otherwise the terminals will not work. Do not use a simple spacebar &#34; &#34;, or any generic name&#xA;    split_direction = &#34;horizontal&#34;, -- &#34;horizontal&#34;, &#34;vertical&#34;&#xA;    split_size = 11,&#xA;&#xA;    -- Window handling&#xA;    single_terminal_per_instance = true, -- Single viewport, multiple windows&#xA;    single_terminal_per_tab = true, -- Single viewport per tab&#xA;    keep_terminal_static_location = true, -- Static location of the viewport if avialable&#xA;&#xA;    -- Running Tasks&#xA;    start_insert_in_launch_task = false, -- If you want to enter terminal with :startinsert upon using :CMakeRun&#xA;    start_insert_in_other_tasks = false, -- If you want to enter terminal with :startinsert upon launching all other cmake tasks in the terminal. Generally set as false&#xA;    focus_on_main_terminal = false, -- Focus on cmake terminal when cmake task is launched. Only used if cmake_always_use_terminal is true.&#xA;    focus_on_launch_terminal = false, -- Focus on cmake launch terminal when executable target in launched.&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generally, the default is enough.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🪄&lt;/span&gt; Docs&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/basic_usage.md&#34;&gt;basic usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/all_commands.md&#34;&gt;all commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/cmake_presets.md&#34;&gt;cmake presets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/cmake_kits.md&#34;&gt;cmake kits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/cmake_variants.md&#34;&gt;cmake variants&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/sessions.md&#34;&gt;sessions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/howto.md&#34;&gt;how to&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;span&gt;💪&lt;/span&gt; Contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you want to implement a missing feature, &lt;a href=&#34;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/contribute.md&#34;&gt;consider making a PR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;LICENCE&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;GPL-3.0 License&lt;/a&gt; © Civitasv&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-cmake-tools&#34;&gt;vscode-cmake-tools&lt;/a&gt; is an amazing plugin for CMake-based project in Visual Studio Code, &lt;a href=&#34;https://github.com/microsoft/vscode-cmake-tools/raw/main/LICENSE.txt&#34;&gt;MIT LICENSE&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Inspired by &lt;a href=&#34;https://github.com/Shatur/neovim-cmake&#34;&gt;neovim-cmake&lt;/a&gt; which is made by &lt;a href=&#34;https://github.com/Shatur&#34;&gt;Shatur&lt;/a&gt;, &lt;a href=&#34;https://github.com/Shatur/neovim-cmake/raw/master/COPYING&#34;&gt;GPL-3.0 license&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary&lt;/a&gt;, &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim/raw/master/LICENSE&#34;&gt;MIT LICENSE&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>nvim-neotest/neotest-jest</title>
    <updated>2023-07-30T01:40:12Z</updated>
    <id>tag:github.com,2023-07-30:/nvim-neotest/neotest-jest</id>
    <link href="https://github.com/nvim-neotest/neotest-jest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;neotest-jest&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/haydenmeade/neotest-jest/actions/workflows/workflow.yaml&#34;&gt;&lt;img src=&#34;https://github.com/haydenmeade/neotest-jest/actions/workflows/workflow.yaml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin provides a jest adapter for the &lt;a href=&#34;https://github.com/rcarriga/neotest&#34;&gt;Neotest&lt;/a&gt; framework. &lt;strong&gt;It is currently a work in progress&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;  &#39;nvim-neotest/neotest&#39;,&#xA;  requires = {&#xA;    ...,&#xA;    &#39;haydenmeade/neotest-jest&#39;,&#xA;  }&#xA;  config = function()&#xA;    require(&#39;neotest&#39;).setup({&#xA;      ...,&#xA;      adapters = {&#xA;        require(&#39;neotest-jest&#39;)({&#xA;          jestCommand = &#34;npm test --&#34;,&#xA;          jestConfigFile = &#34;custom.jest.config.ts&#34;,&#xA;          env = { CI = true },&#xA;          cwd = function(path)&#xA;            return vim.fn.getcwd()&#xA;          end,&#xA;        }),&#xA;      }&#xA;    })&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have the appropriate &lt;code&gt;treesitter&lt;/code&gt; language parsers installed otherwise no tests will be found:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:TSInstall javascript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See neotest&#39;s documentation for more information on how to run tests.&lt;/p&gt; &#xA;&lt;h3&gt;Running tests in watch mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;jest&lt;/code&gt; allows to run your tests in &lt;a href=&#34;https://jestjs.io/docs/cli#--watch&#34;&gt;watch mode&lt;/a&gt;. To run test in this mode you either can enable it globally in the setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neotest&#39;).setup({&#xA;  ...,&#xA;  adapters = {&#xA;    require(&#39;neotest-jest&#39;)({&#xA;      jestCommand = &#34;jest --watch &#34;,&#xA;    }),&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or add a specific keymap to run tests with watch mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;tw&#34;, &#34;&amp;lt;cmd&amp;gt;lua require(&#39;neotest&#39;).run.run({ jestCommand = &#39;jest --watch &#39; })&amp;lt;cr&amp;gt;&#34;, {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Monorepos&lt;/h3&gt; &#xA;&lt;p&gt;If you have a monorepo setup, you might have to do a little more configuration, especially if you have different jest configurations per package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;jestConfigFile = function()&#xA;  local file = vim.fn.expand(&#39;%:p&#39;)&#xA;  if string.find(file, &#34;/packages/&#34;) then&#xA;    return string.match(file, &#34;(.-/[^/]+/)src&#34;) .. &#34;jest.config.ts&#34;&#xA;  end&#xA;&#xA;  return vim.fn.getcwd() .. &#34;/jest.config.ts&#34;&#xA;end,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, if your monorepo set up requires you to run a specific test file with cwd on the package directory (like when you have a lerna setup for example), you might also have to tweak things a bit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;cwd = function()&#xA;  local file = vim.fn.expand(&#39;%:p&#39;)&#xA;  if string.find(file, &#34;/packages/&#34;) then&#xA;    return string.match(file, &#34;(.-/[^/]+/)src&#34;)&#xA;  end&#xA;  return vim.fn.getcwd()&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;🎁&lt;/span&gt; Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please raise a PR if you are interested in adding new functionality or fixing any bugs. When submitting a bug, please include an example spec that can be tested.&lt;/p&gt; &#xA;&lt;p&gt;To trigger the tests for the adapter, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./scripts/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bug Reports&lt;/h2&gt; &#xA;&lt;p&gt;Please file any bug reports and I &lt;em&gt;might&lt;/em&gt; take a look if time permits otherwise please submit a PR, this plugin is intended to be by the community for the community.&lt;/p&gt;</summary>
  </entry>
</feed>