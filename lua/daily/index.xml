<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-15T01:46:31Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SmiteshP/nvim-navic</title>
    <updated>2022-06-15T01:46:31Z</updated>
    <id>tag:github.com,2022-06-15:/SmiteshP/nvim-navic</id>
    <link href="https://github.com/SmiteshP/nvim-navic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple winbar/statusline plugin that shows your current code context&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üõ∞Ô∏è nvim-navic&lt;/h1&gt; &#xA;&lt;p&gt;A simple statusline/winbar component that uses LSP to show your current code context. Named after the Indian satellite navigation system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43147494/173186210-c8d689ad-1f8a-43cf-8125-127c7bd5be35.gif&#34; alt=&#34;2022-06-11 17-02-33&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.7.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;SmiteshP/nvim-navic&#34;,&#xA;    requires = &#34;neovim/nvim-lspconfig&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;neovim/nvim-lspconfig&#34;&#xA;Plug &#34;SmiteshP/nvim-navic&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Setup&lt;/h2&gt; &#xA;&lt;p&gt;For nvim-navic to work, it needs attach to the lsp server. You can pass the nvim-navic&#39;s &lt;code&gt;attach&lt;/code&gt; function as &lt;code&gt;on_attach&lt;/code&gt; while setting up the lsp server.&lt;/p&gt; &#xA;&lt;p&gt;Note: nvim-navic can attach to only one server per buffer.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local navic = require(&#34;nvim-navic&#34;)&#xA;&#xA;require(&#34;lspconfig&#34;).clangd.setup {&#xA;    on_attach = function(client, bufnr)&#xA;        navic.attach(client, bufnr)&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ü™Ñ Customise&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;setup&lt;/code&gt; function to modify default parameters.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;icons&lt;/code&gt; : Indicate the type of symbol captured. Default icons assume you have nerd-fonts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;highlight&lt;/code&gt; : If set to true, will add colors to icons and text as defined by highlight groups &lt;code&gt;NavicIcons*&lt;/code&gt; (&lt;code&gt;NavicIconsFile&lt;/code&gt;, &lt;code&gt;NavicIconsModule&lt;/code&gt;.. etc.), &lt;code&gt;NavicText&lt;/code&gt; and &lt;code&gt;NavicSeparator&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;depth_limit&lt;/code&gt; : Maximum depth of context to be shown. If the context hits this depth limit, it is truncated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;depth_limit_indicatior&lt;/code&gt; : Icon to indicate that &lt;code&gt;depth_limit&lt;/code&gt; was hit and the shown context is truncated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;navic.setup {&#xA;    icons = {&#xA;        File          = &#34;Ôúò &#34;,&#xA;        Module        = &#34;Óò§ &#34;,&#xA;        Namespace     = &#34;Ô†ñ &#34;,&#xA;        Package       = &#34;Óò§ &#34;,&#xA;        Class         = &#34;Ô†ñ &#34;,&#xA;        Method        = &#34;Ôö¶ &#34;,&#xA;        Property      = &#34;Óûõ &#34;,&#xA;        Field         = &#34;Óúñ &#34;,&#xA;        Constructor   = &#34;Ôê• &#34;,&#xA;        Enum          = &#34;Ô©ó&#34;,&#xA;        Interface     = &#34;Ô©ó&#34;,&#xA;        Function      = &#34;Ôûî &#34;,&#xA;        Variable      = &#34;Ôö¶ &#34;,&#xA;        Constant      = &#34;Ô£æ &#34;,&#xA;        String        = &#34;Ôî´ &#34;,&#xA;        Number        = &#34;Ô¢ü &#34;,&#xA;        Boolean       = &#34;‚ó© &#34;,&#xA;        Array         = &#34;Ôô© &#34;,&#xA;        Object        = &#34;Ôô® &#34;,&#xA;        Key           = &#34;Ô†ä &#34;,&#xA;        Null          = &#34;Ô≥† &#34;,&#xA;        EnumMember    = &#34;ÔÖù &#34;,&#xA;        Struct        = &#34;Ô†ñ &#34;,&#xA;        Event         = &#34;ÔÉß &#34;,&#xA;        Operator      = &#34;Ôöî &#34;,&#xA;        TypeParameter = &#34;ÔûÉ &#34;,&#xA;    },&#xA;    highlight = false,&#xA;    separator = &#34; &amp;gt; &#34;,&#xA;    depth_limit = 0,&#xA;    depth_limit_indicator = &#34;..&#34;,&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For highlights to work, highlight groups must be defined. These may be defined in your colourscheme, if not you can define them yourself too as shown in below code snippet.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example highlight definitions&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_hl(0, &#34;NavicFile&#34;,          {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicModule&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicNamespace&#34;,     {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicPackage&#34;,       {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicClass&#34;,         {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicMethod&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicProperty&#34;,      {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicField&#34;,         {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicConstructor&#34;,   {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicEnum&#34;,          {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicInterface&#34;,     {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicFunction&#34;,      {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicVariable&#34;,      {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicConstant&#34;,      {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicString&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicNumber&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicBoolean&#34;,       {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicArray&#34;,         {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicObject&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicKey&#34;,           {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicNull&#34;,          {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicEnumMember&#34;,    {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicStruct&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicEvent&#34;,         {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicOperator&#34;,      {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicTypeParameter&#34;, {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicText&#34;,          {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicSeparator&#34;,     {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;p&gt;nvim-navic does not alter your statusline or winbar on its own. Instead, you are provided with these two functions and its left up to you how you want to incorporate this into your setup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;is_available()&lt;/code&gt; : Returns boolean value indicating whether output can be provided.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_location()&lt;/code&gt; : Returns a pretty string with context information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Examples&lt;/summary&gt; &#xA; &lt;h3&gt;&lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;feline&lt;/a&gt;&lt;/h3&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;An example feline setup &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local navic = require(&#34;nvim-navic&#34;)&#xA;&#xA;table.insert(components.active[1], {&#xA;    provider = function()&#xA;        return navic.get_location()&#xA;    end,&#xA;    enabled = function()&#xA;        return navic.is_available()&#xA;    end&#xA;})&#xA;&#xA;require(&#34;feline&#34;).setup({components = components})&#xA;--  OR&#xA;require(&#34;feline&#34;).winbar.setup({components = components})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;h3&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine&lt;/a&gt;&lt;/h3&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;An example lualine setup &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local navic = require(&#34;nvim-navic&#34;)&#xA;&#xA;require(&#34;lualine&#34;).setup({&#xA;    sections = {&#xA;        lualine_c = {&#xA;            { navic.get_location, cond = navic.is_available },&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;If you have a creative use case and want the raw context data to work with, you can use the following function&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_data()&lt;/code&gt; : Returns a table of intermediate representation of data. Table of tables that contain &#39;kind&#39;, &#39;name&#39; and &#39;icon&#39; for each context.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;An example output of &lt;code&gt;get_data&lt;/code&gt; function: &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt; {&#xA;    {&#xA;        name = &#34;myclass&#34;,&#xA;        type = &#34;Class&#34;,&#xA;        icon = &#34;Ô†ñ &#34;,&#xA;        kind = 5&#xA;    },&#xA;    {&#xA;        name = &#34;mymethod&#34;,&#xA;        type = &#34;Method&#34;,&#xA;        icon = &#34;Ôö¶ &#34;,&#xA;        kind = 6&#xA;    }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>lukas-reineke/indent-blankline.nvim</title>
    <updated>2022-06-15T01:46:31Z</updated>
    <id>tag:github.com,2022-06-15:/lukas-reineke/indent-blankline.nvim</id>
    <link href="https://github.com/lukas-reineke/indent-blankline.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Indent guides for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Indent Blankline&lt;/h1&gt; &#xA;&lt;p&gt;This plugin adds indentation guides to all lines (including empty lines).&lt;/p&gt; &#xA;&lt;p&gt;It uses Neovims virtual text feature and &lt;strong&gt;no conceal&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin requires Neovim 0.5 or higher. It makes use of Neovim only features so it will not work in Vim. There is a legacy version of the plugin that supports Neovim 0.4 under the branch &lt;code&gt;version-1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Use your favourite plugin manager to install.&lt;/p&gt; &#xA;&lt;h4&gt;Example with Packer&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;require(&#34;packer&#34;).startup(&#xA;    function()&#xA;        use &#34;lukas-reineke/indent-blankline.nvim&#34;&#xA;    end&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example with Plug&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; init.vim&#xA;call plug#begin(&#39;~/.vim/plugged&#39;)&#xA;Plug &#39;lukas-reineke/indent-blankline.nvim&#39;&#xA;call plug#end()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To configure indent-blankline, either run the setup function, or set variables manually. The setup function has a single table as argument, keys of the table match the &lt;code&gt;:help indent-blankline-variables&lt;/code&gt; without the &lt;code&gt;indent_blankline_&lt;/code&gt; part.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;indent_blankline&#34;).setup {&#xA;    -- for example, context is off by default, use this to turn it on&#xA;    show_current_context = true,&#xA;    show_current_context_start = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;:help indent_blankline.txt&lt;/code&gt;for more details and all possible values.&lt;/p&gt; &#xA;&lt;p&gt;A lot of &lt;a href=&#34;https://github.com/Yggdroot/indentLine&#34;&gt;Yggdroot/indentLine&lt;/a&gt; options should work out of the box.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;All screenshots use &lt;a href=&#34;https://github.com/lukas-reineke/onedark.nvim&#34;&gt;my custom onedark color scheme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Simple&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.list = true&#xA;vim.opt.listchars:append(&#34;eol:‚Ü¥&#34;)&#xA;&#xA;require(&#34;indent_blankline&#34;).setup {&#xA;    show_end_of_line = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;900&#34; src=&#34;https://i.imgur.com/3gRG5qI.png&#34; alt=&#34;Screenshot&#34;&gt; &#xA;&lt;h4&gt;With custom &lt;code&gt;listchars&lt;/code&gt; and &lt;code&gt;g:indent_blankline_space_char_blankline&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.list = true&#xA;vim.opt.listchars:append(&#34;space:‚ãÖ&#34;)&#xA;vim.opt.listchars:append(&#34;eol:‚Ü¥&#34;)&#xA;&#xA;require(&#34;indent_blankline&#34;).setup {&#xA;    show_end_of_line = true,&#xA;    space_char_blankline = &#34; &#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;900&#34; src=&#34;https://i.imgur.com/VxCThMu.png&#34; alt=&#34;Screenshot&#34;&gt; &#xA;&lt;h4&gt;With custom &lt;code&gt;g:indent_blankline_char_highlight_list&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.termguicolors = true&#xA;vim.cmd [[highlight IndentBlanklineIndent1 guifg=#E06C75 gui=nocombine]]&#xA;vim.cmd [[highlight IndentBlanklineIndent2 guifg=#E5C07B gui=nocombine]]&#xA;vim.cmd [[highlight IndentBlanklineIndent3 guifg=#98C379 gui=nocombine]]&#xA;vim.cmd [[highlight IndentBlanklineIndent4 guifg=#56B6C2 gui=nocombine]]&#xA;vim.cmd [[highlight IndentBlanklineIndent5 guifg=#61AFEF gui=nocombine]]&#xA;vim.cmd [[highlight IndentBlanklineIndent6 guifg=#C678DD gui=nocombine]]&#xA;&#xA;vim.opt.list = true&#xA;vim.opt.listchars:append(&#34;space:‚ãÖ&#34;)&#xA;vim.opt.listchars:append(&#34;eol:‚Ü¥&#34;)&#xA;&#xA;require(&#34;indent_blankline&#34;).setup {&#xA;    space_char_blankline = &#34; &#34;,&#xA;    char_highlight_list = {&#xA;        &#34;IndentBlanklineIndent1&#34;,&#xA;        &#34;IndentBlanklineIndent2&#34;,&#xA;        &#34;IndentBlanklineIndent3&#34;,&#xA;        &#34;IndentBlanklineIndent4&#34;,&#xA;        &#34;IndentBlanklineIndent5&#34;,&#xA;        &#34;IndentBlanklineIndent6&#34;,&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;900&#34; src=&#34;https://i.imgur.com/E3B0PUb.png&#34; alt=&#34;Screenshot&#34;&gt; &#xA;&lt;h4&gt;With custom background highlight&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.termguicolors = true&#xA;vim.cmd [[highlight IndentBlanklineIndent1 guibg=#1f1f1f gui=nocombine]]&#xA;vim.cmd [[highlight IndentBlanklineIndent2 guibg=#1a1a1a gui=nocombine]]&#xA;&#xA;require(&#34;indent_blankline&#34;).setup {&#xA;    char = &#34;&#34;,&#xA;    char_highlight_list = {&#xA;        &#34;IndentBlanklineIndent1&#34;,&#xA;        &#34;IndentBlanklineIndent2&#34;,&#xA;    },&#xA;    space_char_highlight_list = {&#xA;        &#34;IndentBlanklineIndent1&#34;,&#xA;        &#34;IndentBlanklineIndent2&#34;,&#xA;    },&#xA;    show_trailing_blankline_indent = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;900&#34; src=&#34;https://i.imgur.com/DukMZGk.png&#34; alt=&#34;Screenshot&#34;&gt; &#xA;&lt;h4&gt;With context indent highlighted by treesitter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.list = true&#xA;vim.opt.listchars:append(&#34;space:‚ãÖ&#34;)&#xA;vim.opt.listchars:append(&#34;eol:‚Ü¥&#34;)&#xA;&#xA;require(&#34;indent_blankline&#34;).setup {&#xA;    space_char_blankline = &#34; &#34;,&#xA;    show_current_context = true,&#xA;    show_current_context_start = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;900&#34; src=&#34;https://user-images.githubusercontent.com/12900252/140518531-522aa67a-b377-498c-ad39-85113b2b56df.png&#34; alt=&#34;Screenshot&#34;&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/Yggdroot/indentLine&#34;&gt;Yggdroot/indentLine&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>esx-framework/esx-legacy</title>
    <updated>2022-06-15T01:46:31Z</updated>
    <id>tag:github.com,2022-06-15:/esx-framework/esx-legacy</id>
    <link href="https://github.com/esx-framework/esx-legacy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Repo For ESX-Legacy&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;ESX Legacy&lt;/h1&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;&lt;a href=&#34;https://discord.esx-framework.org/&#34;&gt;Discord&lt;/a&gt; - &lt;a href=&#34;https://esx-framework.org/&#34;&gt;Website&lt;/a&gt; - &lt;a href=&#34;https://docs.esx-framework.org/legacy/installation&#34;&gt;Documentation&lt;/a&gt;&lt;/b&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: ESX Legacy now supports ox Inventory. &lt;strong&gt;HOWEVER, THIS SHOULD ONLY BE USED IF YOU ARE EXPERIENCED AND KNOW WHAT YOU ARE DOING&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;ESX is the leading framework for creating roleplay servers on FiveM, with many official and community resources designed to utilise the tools provided here. For a taste of what&#39;s available&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;esx_identity: Enables character registration defining a players name, sex, height, and date of birth esx_society: Allows job resources to register a society, gaining employee management, society funds, and more esx_billing: Allows members of some societies to send fines or bills to other players esx_vehicleshop: Allow players to purchase vehicles from a dealership, or setup society support for a player-managed dealership esx_ambulancejob: Adds a death and respawn system while allowing players to work as EMS to heal and revive others&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Many more resources are included in this repository, or you can browse the &lt;a href=&#34;https://github.com/esx-community/&#34;&gt;ESX Community Github&lt;/a&gt; or &lt;a href=&#34;https://forum.cfx.re/tag/esx&#34;&gt;Cfx.re Releases board&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;es_extended - ESX framework for FiveM&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2015-2022 J√©r√©mie N&#39;gadi&lt;/p&gt; &#xA;&lt;p&gt;This program Is free software: you can redistribute it And/Or modify it under the terms Of the GNU General Public License As published by the Free Software Foundation, either version 3 Of the License, Or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program Is distributed In the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty Of MERCHANTABILITY Or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License For more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy Of the GNU General Public License along with this program. If Not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
</feed>