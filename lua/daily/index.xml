<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-05T01:45:44Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>glepnir/cosynvim</title>
    <updated>2022-07-05T01:45:44Z</updated>
    <id>tag:github.com,2022-07-05:/glepnir/cosynvim</id>
    <link href="https://github.com/glepnir/cosynvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a modern structure neovim config template write in lua&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&#34; height=&#34;30&#34; width=&#34;0px&#34;&gt; Cosynvim &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&#34; height=&#34;30&#34; width=&#34;0px&#34;&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/glepnir/cosynvim/stargazers&#34;&gt; &lt;img alt=&#34;Stargazers&#34; src=&#34;https://img.shields.io/github/stars/glepnir/cosynvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c678dd&amp;amp;logoColor=d9e0ee&amp;amp;labelColor=282a36&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/glepnir/cosynvim/issues&#34;&gt; &lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/glepnir/cosynvim?style=for-the-badge&amp;amp;logo=gitbook&amp;amp;color=f0c062&amp;amp;logoColor=d9e0ee&amp;amp;labelColor=282a36&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/glepnir/cosynvim/contributors&#34;&gt; &lt;img alt=&#34;Contributors&#34; src=&#34;https://img.shields.io/github/contributors/glepnir/cosynvim?style=for-the-badge&amp;amp;logo=opensourceinitiative&amp;amp;color=abcf84&amp;amp;logoColor=d9e0ee&amp;amp;labelColor=282a36&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/176990490-aeb6111b-41ea-4767-bc03-c0aee4774a4e.png&#34; height=&#34;40%&#34; widht=&#34;40%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is Cosynvim&lt;/h2&gt; &#xA;&lt;p&gt;Many people are interested in my &lt;a href=&#34;https://github.com/glepnir/nvim&#34;&gt;personal configuration&lt;/a&gt;. So I created Cosynvim.&lt;/p&gt; &#xA;&lt;p&gt;What does Cosynvim do? Cosynvim wants vimers to have their own config with high performance&lt;/p&gt; &#xA;&lt;p&gt;fast speed and modernity.&lt;/p&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── init.lua  &#xA;├── lua&#xA;│&amp;nbsp;&amp;nbsp; ├── core                       heart of cosynvim provide api&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── init.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── keymap.lua             keymap api&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── options.lua            vim options&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── pack.lua               hack packer&#xA;│&amp;nbsp;&amp;nbsp; ├── keymap                     your keymap in here&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── config.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── init.lua&#xA;│&amp;nbsp;&amp;nbsp; └── modules                    plugins module usage example&#xA;│&amp;nbsp;&amp;nbsp;     ├── completion&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── config.lua&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── plugins.lua&#xA;│&amp;nbsp;&amp;nbsp;     ├── lang&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── config.lua&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── plugins.lua&#xA;│&amp;nbsp;&amp;nbsp;     ├── tools&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── config.lua&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── plugins.lua&#xA;│&amp;nbsp;&amp;nbsp;     └── ui&#xA;│&amp;nbsp;&amp;nbsp;         ├── config.lua&#xA;│&amp;nbsp;&amp;nbsp;         ├── eviline.lua&#xA;│&amp;nbsp;&amp;nbsp;         └── plugins.lua&#xA;├── snippets                       snippets &#xA;│&amp;nbsp;&amp;nbsp; ├── lua.json&#xA;│&amp;nbsp;&amp;nbsp; └── package.json&#xA;└── static                         dashboard logo&#xA;    └── neovim.cat&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A nice structure right ? Looks complicated ? You can delete any folder except core and keymap modules. The&lt;/p&gt; &#xA;&lt;p&gt;rule of &lt;code&gt;modules&lt;/code&gt; is you can delete folders in modules. And create folder with your favorite name, but you must&lt;/p&gt; &#xA;&lt;p&gt;create &lt;code&gt;plugins.lua&lt;/code&gt; and register your plugins in this file by using cosynvim api.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Click button &lt;code&gt;Use this template&lt;/code&gt; It will genereate a new repo based on cosy on your github&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then you need input repo name, Give your nvim configuration a nice name&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enjoy&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to install plugins&lt;/h3&gt; &#xA;&lt;p&gt;Api is &lt;code&gt;require(&#39;core.pack&#39;).register_plugin&lt;/code&gt;. So pass plugin as param into this function. Usage&lt;/p&gt; &#xA;&lt;p&gt;like in &lt;code&gt;modules/your-folder-name/plugins.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local plugin = require(&#39;core.pack&#39;).register_plugin&#xA;local conf = require(&#39;modules.ui.config&#39;)&#xA;&#xA;plugin {&#39;glepnir/zephyr-nvim&#39;, config = conf.zephyr}&#xA;&#xA;plugin {&#39;plugin github repo name&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;what is &lt;code&gt;config&lt;/code&gt; . This is a keyword of &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;, you need to check the doc of packer to know how to use packer.&lt;/p&gt; &#xA;&lt;p&gt;If a plugin has many configs you can create other file in &lt;code&gt;modules/your-folder-name/config.lua&lt;/code&gt; avoid making the&lt;/p&gt; &#xA;&lt;p&gt;plugins.lua file too long. Recommend lazyload plugins. Check the usage in &lt;code&gt;modules&lt;/code&gt; , it will improve your neovim&lt;/p&gt; &#xA;&lt;p&gt;start speed. &lt;code&gt;lazyload&lt;/code&gt; is not magic, it just generate your config into some &lt;code&gt;autocmds&lt;/code&gt; , you can check the&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;packer_compiled.lua&lt;/code&gt; to check it. I don&#39;t like the default path config in packer it use &lt;code&gt;plugins&lt;/code&gt; folder So i set&lt;/p&gt; &#xA;&lt;p&gt;compiled file path to &lt;code&gt;~/.local/share/nvim/site/lua&lt;/code&gt;, you can find compiled file in this path. Use &lt;code&gt;:h autocmd&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;to know more about. When you edit the config and open neovim and it does not take effect. Please try&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PackerCompile&lt;/code&gt; to generate a new compile file with your new change. In my personal config i have a function that&lt;/p&gt; &#xA;&lt;p&gt;can auto compiled . when i edit the lua file that in this path &lt;code&gt;~/.config/nvim&lt;/code&gt;. But it will make some noise so I didn&#39;t&lt;/p&gt; &#xA;&lt;p&gt;use it in cosynvim. when i have a newimplement I will update it to cosynvim core.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;-- modules/completion/plugins.lua&#xA;plugin {&#39;neovim/nvim-lspconfig&#39;,&#xA; -- used filetype to lazyload lsp&#xA; -- config your language filetype in here&#xA;  ft = { &#39;lua&#39;,&#39;rust&#39;,&#39;c&#39;,&#39;cpp&#39;},&#xA;  config = conf.nvim_lsp,&#xA;}&#xA;&#xA;-- modules/tools/plugins.lua&#xA;plugin {&#39;nvim-telescope/telescope.nvim&#39;,&#xA;  -- use command to lazyload.&#xA;  cmd = &#39;Telescope&#39;,&#xA;  config = conf.telescope,&#xA;  requires = {&#xA;    {&#39;nvim-lua/popup.nvim&#39;, opt = true},&#xA;    {&#39;nvim-lua/plenary.nvim&#39;,opt = true},&#xA;    {&#39;nvim-telescope/telescope-fzy-native.nvim&#39;,opt = true},&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to config keymap&lt;/h3&gt; &#xA;&lt;p&gt;In cosynvim there are some apis that make it easy to set keymap. All apis are defined in &lt;code&gt;core/keymap.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;keymap.(n/i/c/v/x/t)map -- function to generate keymap by vim.keymap.set&#xA;keymap.new_opts -- generate opts into vim.keymap.set&#xA;-- function type that work with keymap.new_opts&#xA;keymap.silent keymap.noremap keymap.expr keymap.nowait keymap.remap&#xA;keymap.cmd -- just return string with &amp;lt;Cmd&amp;gt; and &amp;lt;CR&amp;gt;&#xA;keymap.cu -- work like cmd but for visual map&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use these apis to config your keymap in &lt;code&gt;keymap&lt;/code&gt; folder. In this folder &lt;code&gt;keymap/init.lua&lt;/code&gt; is necessary but if you&lt;/p&gt; &#xA;&lt;p&gt;have many vim mode remap you can config them in &lt;code&gt;keymap/other-file.lua&lt;/code&gt; in cosynvim is &lt;code&gt;config.lua&lt;/code&gt; just an&lt;/p&gt; &#xA;&lt;p&gt;example file. Then config plugins keymap in &lt;code&gt;keymap/init.lua&lt;/code&gt;. the example of api usage&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- genreate keymap in noremal mode&#xA;nmap {&#xA;  -- packer&#xA;  {&#39;&amp;lt;Leader&amp;gt;pu&#39;,cmd(&#39;PackerUpdate&#39;),opts(noremap,silent)},&#xA;  {&#39;&amp;lt;Leader&amp;gt;pi&#39;,cmd(&#39;PackerInstall&#39;),opts(noremap,silent)},&#xA;  {&#39;&amp;lt;Leader&amp;gt;pc&#39;,cmd(&#39;PackerCompile&#39;),opts(noremap,silent)},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;map&lt;/code&gt; foreach every table and generate a new table that can pass to &lt;code&gt;vim.keymap.set&lt;/code&gt;. &lt;code&gt;cmd(&#39;PackerUpdate&#39;)&lt;/code&gt; just&lt;/p&gt; &#xA;&lt;p&gt;return a string &lt;code&gt;&amp;lt;cmd&amp;gt;PackerUpdate&amp;lt;CR&amp;gt;&lt;/code&gt; as rhs. lhs is &lt;code&gt;&amp;lt;leader&amp;gt;pu&amp;gt;&lt;/code&gt;, &lt;code&gt;opts(noremap,silent)&lt;/code&gt; generate options table&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;{noremap = true,silent = true }&lt;/code&gt; . for some vim mode remap. not need use &lt;code&gt;cmd&lt;/code&gt; function. oh maybe you will be&lt;/p&gt; &#xA;&lt;p&gt;confused what is &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt; check &lt;code&gt;:h &amp;lt;cmd&amp;gt;&lt;/code&gt; you will get answer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  -- window jump&#xA;  {&#34;&amp;lt;C-h&amp;gt;&#34;,&#39;&amp;lt;C-w&amp;gt;h&#39;,opts(noremap)},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;also you can pass a table not include sub table to &lt;code&gt;map&lt;/code&gt; like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;nmap {&#39;key&#39;,&#39;rhs&#39;,opts(noremap,silent)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;use &lt;code&gt;:h vim.keymap.set&lt;/code&gt; to know more about.&lt;/p&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve key repeat&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;mac os need restart&#xA;defaults write NSGlobalDomain KeyRepeat -int 1&#xA;defaults write NSGlobalDomain InitialKeyRepeat -int 10&#xA;&#xA;linux&#xA;xset r rate 210 40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paypal.me/bobbyhub&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&#34;https://paypal.me/bobbyhub&#34;&gt;paypal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licenese MIT&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>OTCv8/otclientv8</title>
    <updated>2022-07-05T01:45:44Z</updated>
    <id>tag:github.com,2022-07-05:/OTCv8/otclientv8</id>
    <link href="https://github.com/OTCv8/otclientv8" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean, ready to use version of OTClientV8 - Alternative, highly optimized Tibia client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OTClientV8&lt;/h1&gt; &#xA;&lt;p&gt;OTClientV8 is highly optimized, cross-platform tile based 2d game engine built with c++17, lua, physfs, OpenGL ES 2.0 and OpenAL. It has been created as alternative client for game called &lt;a href=&#34;https://tibia.com/&#34;&gt;Tibia&lt;/a&gt;, but now it&#39;s much more functional and powerful. It works well even on 12 years old computers. In April 2021 it reached 290k unique installations, including 80k android installations.&lt;/p&gt; &#xA;&lt;p&gt;Supported platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows (min. Windows 7, requires &lt;a href=&#34;https://aka.ms/vs/16/release/vc_redist.x86.exe&#34;&gt;https://aka.ms/vs/16/release/vc_redist.x86.exe&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android (min. 5.0)&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;Mac Os (requires &lt;a href=&#34;https://www.xquartz.org/&#34;&gt;https://www.xquartz.org/&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Forum: &lt;a href=&#34;http://otclient.net&#34;&gt;http://otclient.net&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Discord: &lt;a href=&#34;https://discord.gg/feySup6&#34;&gt;https://discord.gg/feySup6&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Website: &lt;a href=&#34;http://otclient.ovh&#34;&gt;http://otclient.ovh&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Wiki: &lt;a href=&#34;https://github.com/OTCv8/otclientv8/wiki&#34;&gt;https://github.com/OTCv8/otclientv8/wiki&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Version for developers&lt;/h2&gt; &#xA;&lt;p&gt;In this repository, you can find clean, always up-to-date, ready to use version of OTClientv8. Most commits from version 3.0 are automatic using GitHub Actions. If you want to help with development, please visit repository for developers - &lt;a href=&#34;https://github.com/OTCv8/otcv8-dev&#34;&gt;https://github.com/OTCv8/otcv8-dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FEATURES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rewritten and optimized rendering (60 fps on 11 years old computer)&lt;/li&gt; &#xA; &lt;li&gt;Better DirectX9 and DirectX11 support&lt;/li&gt; &#xA; &lt;li&gt;Adaptive rendering (automated graphics optimizations)&lt;/li&gt; &#xA; &lt;li&gt;Rewritten and optimized light rendering&lt;/li&gt; &#xA; &lt;li&gt;Rewritten path finding and auto walking&lt;/li&gt; &#xA; &lt;li&gt;Rewritten walking system with animations&lt;/li&gt; &#xA; &lt;li&gt;HTTP/HTTPS lua API with JSON support&lt;/li&gt; &#xA; &lt;li&gt;WebSocket lua API&lt;/li&gt; &#xA; &lt;li&gt;Auto updater with failsafe (recovery) mode&lt;/li&gt; &#xA; &lt;li&gt;New filesystem&lt;/li&gt; &#xA; &lt;li&gt;File encryption and compression&lt;/li&gt; &#xA; &lt;li&gt;Automatic diagnostic system&lt;/li&gt; &#xA; &lt;li&gt;Refreshed interface&lt;/li&gt; &#xA; &lt;li&gt;New crash and error handler&lt;/li&gt; &#xA; &lt;li&gt;New HTTP login protocol&lt;/li&gt; &#xA; &lt;li&gt;Ingame shop&lt;/li&gt; &#xA; &lt;li&gt;Updated hotkey manager&lt;/li&gt; &#xA; &lt;li&gt;Updated and optimized battle list&lt;/li&gt; &#xA; &lt;li&gt;Crosshair, floor fading, extra health/mana bars and panels&lt;/li&gt; &#xA; &lt;li&gt;Much more client options&lt;/li&gt; &#xA; &lt;li&gt;Removed a lot of useless and outdated things&lt;/li&gt; &#xA; &lt;li&gt;Advanced bot&lt;/li&gt; &#xA; &lt;li&gt;Linux version&lt;/li&gt; &#xA; &lt;li&gt;Full tibia 11.00 support&lt;/li&gt; &#xA; &lt;li&gt;Layouts&lt;/li&gt; &#xA; &lt;li&gt;New login server (with ingame account and character creation)&lt;/li&gt; &#xA; &lt;li&gt;Support for proxies to lower latency and protect against DDoS (extra paid option)&lt;/li&gt; &#xA; &lt;li&gt;Bot protection (extra paid option)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;And hundreds of smaller features, optimizations and bug fixes!&lt;/h3&gt; &#xA;&lt;h3&gt;Check out &lt;a href=&#34;https://github.com/OTCv8/otclientv8/wiki&#34;&gt;Wiki page&lt;/a&gt; to see how activate and use new features&lt;/h3&gt; &#xA;&lt;h3&gt;Old tools, like updater and tutorials has been moved to: &lt;a href=&#34;https://github.com/OTCv8/otcv8-tools&#34;&gt;OTCv8/otcv8-tools&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;There&#39;s github repo of tfs 1.3 with otclientv8 features: &lt;a href=&#34;https://github.com/OTCv8/forgottenserver&#34;&gt;OTCv8/otclientv8-tfs&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Quick Start for players&lt;/h2&gt; &#xA;&lt;p&gt;Download whole repository and run one of binary file.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start for server owners&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;code&gt;init.lua&lt;/code&gt; and edit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- CONFIG&#xA;APP_NAME = &#34;otclientv8&#34; -- important, change it, it&#39;s name for config dir and files in appdata&#xA;APP_VERSION = 1337      -- client version for updater and login to indentify outdated client&#xA;DEFAULT_LAYOUT = &#34;retro&#34;&#xA;&#xA;-- If you don&#39;t use updater or other service, set it to updater = &#34;&#34;&#xA;Services = {&#xA;  website = &#34;http://otclient.ovh&#34;, -- currently not used&#xA;  updater = &#34;http://otclient.ovh/api/updater.php&#34;,&#xA;  news = &#34;http://otclient.ovh/api/news.php&#34;,&#xA;  stats = &#34;&#34;,&#xA;  crash = &#34;http://otclient.ovh/api/crash.php&#34;,&#xA;  feedback = &#34;http://otclient.ovh/api/feedback.php&#34;&#xA;}&#xA;&#xA;-- Servers accept http login url or ip:port:version&#xA;Servers = {&#xA;  OTClientV8 = &#34;http://otclient.ovh/api/login.php&#34;,&#xA;  OTClientV8proxy = &#34;http://otclient.ovh/api/login.php?proxy=1&#34;,&#xA;  OTClientV8classic = &#34;otclient.ovh:7171:1099&#34;,&#xA;  OTClientV8cwithfeatures = &#34;otclient.ovh:7171:1099:25:30:80:90&#34;,&#xA;}&#xA;ALLOW_CUSTOM_SERVERS = true -- if true it will show option ANOTHER on server list&#xA;-- CONFIG END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also remember to add your sprite and data file to data/things&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it, you&#39;re ready to use OTClientV8.&lt;/p&gt; &#xA;&lt;p&gt;DirectX version requires 3 dlls: libEGL.dll libGLESv2.dll d3dcompiler_47.dll&lt;/p&gt; &#xA;&lt;p&gt;If it can&#39;t start (missing dlls) then user need to install visual studio 2019 redistributable x86: &lt;a href=&#34;https://aka.ms/vs/16/release/vc_redist.x86.exe&#34;&gt;https://aka.ms/vs/16/release/vc_redist.x86.exe&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kdheepak/lazygit.nvim</title>
    <updated>2022-07-05T01:45:44Z</updated>
    <id>tag:github.com,2022-07-05:/kdheepak/lazygit.nvim</id>
    <link href="https://github.com/kdheepak/lazygit.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Plugin for calling lazygit from within neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lazygit.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Plugin for calling &lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;lazygit&lt;/a&gt; from within neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1813121/87866391-79fcfe00-c93e-11ea-94a9-204947de1b39.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/akinsho/nvim-toggleterm.lua#custom-terminals&#34;&gt;akinsho/nvim-toggleterm&lt;/a&gt; or &lt;a href=&#34;https://github.com/voldikss/vim-floaterm&#34;&gt;voldikss/vim-floaterm&lt;/a&gt; as an alternative to this package.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Install using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;code&gt;vim-plug&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; nvim v0.5.0&#xA;Plug &#39;kdheepak/lazygit.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Feel free to use any plugin manager. Just remember that if you are not using the latest neovim release, you will need to use &lt;a href=&#34;https://github.com/kdheepak/lazygit.vim/tree/nvim-v0.4.3&#34;&gt;the &lt;code&gt;nvim-v0.4.3&lt;/code&gt; branch&lt;/a&gt;. Integration with &lt;code&gt;nvr&lt;/code&gt; works better on the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;You can check what version of &lt;code&gt;neovim&lt;/code&gt; you have:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvim --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;The following are configuration options and their defaults.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:lazygit_floating_window_winblend = 0 &#34; transparency of floating window&#xA;let g:lazygit_floating_window_scaling_factor = 0.9 &#34; scaling factor for floating window&#xA;let g:lazygit_floating_window_corner_chars = [&#39;╭&#39;, &#39;╮&#39;, &#39;╰&#39;, &#39;╯&#39;] &#34; customize lazygit popup window corner characters&#xA;let g:lazygit_floating_window_use_plenary = 0 &#34; use plenary.nvim to manage floating window if available&#xA;let g:lazygit_use_neovim_remote = 1 &#34; fallback to 0 if neovim-remote is not installed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call &lt;code&gt;:LazyGit&lt;/code&gt; to start a floating window with &lt;code&gt;lazygit&lt;/code&gt;. And set up a mapping to call &lt;code&gt;:LazyGit&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; setup mapping to call :LazyGit&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;gg :LazyGit&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open the configuration file for &lt;code&gt;lazygit&lt;/code&gt; directly from vim.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:LazyGitConfig&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the file does not exist it&#39;ll load the defaults for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1813121/78830902-46721580-79d8-11ea-8809-291b346b6c42.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open project commits with &lt;code&gt;lazygit&lt;/code&gt; directly from vim in floating window.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:LazyGitFilter&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open buffer commits with &lt;code&gt;lazygit&lt;/code&gt; directly from vim in floating window.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:LazyGitFilterCurrentFile&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using neovim-remote&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/mhinz/neovim-remote&#34;&gt;neovim-remote&lt;/a&gt; and have configured to use it in neovim, it&#39;ll launch the commit editor inside your neovim instance when you use &lt;code&gt;C&lt;/code&gt; inside &lt;code&gt;lazygit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pip install neovim-remote&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ -n &#34;$NVIM_LISTEN_ADDRESS&#34; ]; then&#xA;    alias nvim=nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Set &lt;code&gt;EDITOR&lt;/code&gt; environment variable in &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ -n &#34;$NVIM_LISTEN_ADDRESS&#34; ]; then&#xA;    export VISUAL=&#34;nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;&#34;&#xA;    export EDITOR=&#34;nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;&#34;&#xA;else&#xA;    export VISUAL=&#34;nvim&#34;&#xA;    export EDITOR=&#34;nvim&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Add the following to &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;if has(&#39;nvim&#39;) &amp;amp;&amp;amp; executable(&#39;nvr&#39;)&#xA;  let $GIT_EDITOR = &#34;nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;&#34;&#xA;endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;neovim-remote&lt;/code&gt; and don&#39;t want &lt;code&gt;lazygit.nvim&lt;/code&gt; to use it, you can disable it using the following configuration option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:lazygit_use_neovim_remote = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Telescope Plugin&lt;/h3&gt; &#xA;&lt;p&gt;The Telescope plugin is used to track all git repository visited in one nvim session.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10464534/156933468-c89abee4-6afb-457c-8b02-55b67913aef2.png&#34; alt=&#34;lazygittelplugin&#34;&gt; (background image is not included &lt;span&gt;😏&lt;/span&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why a telescope Plugin&lt;/strong&gt; ?&lt;/p&gt; &#xA;&lt;p&gt;Assuming you have one or more submodule(s) in your project and you want to commit changes in both the submodule(s) and the main repo. Though switching between submodules and main repo is not straight forward. A solution at first could be:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;open a file inside the submodule&lt;/li&gt; &#xA; &lt;li&gt;open lazygit&lt;/li&gt; &#xA; &lt;li&gt;do commit&lt;/li&gt; &#xA; &lt;li&gt;then open a file in the main repo&lt;/li&gt; &#xA; &lt;li&gt;open lazygit&lt;/li&gt; &#xA; &lt;li&gt;do commit&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That is really annoying. Instead, you can open it with telescope.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to use&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install the plugin using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use({&#xA;    &#34;nvim-telescope/telescope.nvim&#34;,&#xA;    requires = { { &#34;nvim-lua/plenary.nvim&#34; }, { &#34;kdheepak/lazygit.nvim&#34; } },&#xA;    config = function()&#xA;        require(&#34;telescope&#34;).load_extension(&#34;lazygit&#34;)&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lazy loading &lt;code&gt;lazygit.nvim&lt;/code&gt; for telescope functionality is not supported. Open an issue if you wish to have this feature.&lt;/p&gt; &#xA;&lt;p&gt;If you are not using Packer, to load the telescope extension, you have to add this line to your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).load_extension(&#39;lazygit&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the paths of each repo is stored only when lazygit is triggered. Though, this may not be convenient, so it possible to do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;autocmd BufEnter * :lua require(&#39;lazygit.utils&#39;).project_root_dir()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That makes sure that any opened buffer which is contained in a git repo will be tracked.&lt;/p&gt; &#xA;&lt;p&gt;Once you have loaded the extension, you can invoke the plugin using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;telescope&#34;).extensions.lazygit.lazygit()&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>