<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-25T01:41:30Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pmizio/typescript-tools.nvim</title>
    <updated>2023-06-25T01:41:30Z</updated>
    <id>tag:github.com,2023-06-25:/pmizio/typescript-tools.nvim</id>
    <link href="https://github.com/pmizio/typescript-tools.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡ TypeScript integration NeoVim deserves ⚡&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;typescript-tools.nvim&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;sup&gt;⚡ TypeScript integration NeoVim deserves ⚡&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🚧 Warning 🚧&lt;/h3&gt; &#xA;&lt;p&gt;Please note that the plugin is currently in the early beta version, which means you may encounter bugs.&lt;/p&gt; &#xA;&lt;h3&gt;⁉️ Why?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drop in, pure lua replacement for &lt;code&gt;typescript-language-server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you work on a large TS/JS project, you probably understand why this plugin came into existence. The &lt;code&gt;typescript-language-server&lt;/code&gt; can be extremely slow in such projects, and it often fails to provide accurate completions or just crash.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;✨ Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚡ Blazingly fast, thanks to the utilization of the native Tsserver communication protocol, similar to Visual Studio Code&lt;/li&gt; &#xA; &lt;li&gt;🪭 Supports a wide range of TypeScript versions 4.0 and above&lt;/li&gt; &#xA; &lt;li&gt;🌍 Supports the nvim LSP plugin ecosystem&lt;/li&gt; &#xA; &lt;li&gt;🔀 Supports multiple instances of Tsserver&lt;/li&gt; &#xA; &lt;li&gt;💻 Supports both local and global installations of TypeScript&lt;/li&gt; &#xA; &lt;li&gt;💅 Provides out-of-the-box support for styled-components, which is not enabled by default (see Installation and &lt;a href=&#34;https://raw.githubusercontent.com/pmizio/typescript-tools.nvim/master/#-styled-components-support&#34;&gt;Configuration&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;✨ Improved code refactor capabilities e.g. extracting to variable or function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pmizio/typescript-tools.nvim/assets/4346598/50f87c54-c286-473d-ba3d-886ac97ca072&#34; alt=&#34;code_action&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🚀 How it works?&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; If you&#39;re interested in learning more about the technical details of the plugin, you can click here. &lt;/summary&gt; &#xA; &lt;p&gt; &lt;br&gt; This plugin functions exactly like the bundled TypeScript support extension in Visual Studio Code. Thanks to the new (0.8.0) NeoVim API, it is now possible to pass a Lua function as the LSP start command. As a result, the plugin spawns a custom version of the I/O loop to communicate directly with Tsserver using its native protocol, without the need for any additional proxy. The Tsserver protocol, which is a JSON-based communication protocol, likely served as inspiration for the LSP. However, it is incompatible with the LSP. To address this, the I/O loop provided by this plugin features a translation layer that converts all messages to and from the Tsserver format. &lt;/p&gt; &#xA; &lt;p&gt;In summary, the architecture of this plugin can be visualized as shown in the diagram below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt; NeoVim                                                    Tsserver Instance&#xA;┌────────────────────────────────────────────┐            ┌────────────────┐&#xA;│                                            │            │                │&#xA;│  LSP Handlers          Tsserver LSP Loop   │            │                │&#xA;│ ┌─────────┐           ┌──────────────────┐ │            │                │&#xA;│ │         │           │                  │ │            │                │&#xA;│ │         │ Request   │ ┌──────────────┐ │ │            │                │&#xA;│ │         ├───────────┤►│ Translation  │ │ │            │                │&#xA;│ │         │ Response  │ │    Layer     │ │ │            │                │&#xA;│ │         ◄───────────┼─┤              │ │ │            │                │&#xA;│ │         │           │ └───┬─────▲────┘ │ │            │                │&#xA;│ │         │           │     │     │      │ │            │                │&#xA;│ │         │           │ ┌───▼─────┴────┐ │ │ Request    │                │&#xA;│ │         │           │ │   I/O Loop   ├─┼─┼────────────►                │&#xA;│ │         │           │ │              │ │ │ Response   │                │&#xA;│ │         │           │ │              ◄─┼─┼────────────┤                │&#xA;│ │         │           │ └──────────────┘ │ │            │                │&#xA;│ │         │           │                  │ │            │                │&#xA;│ └─────────┘           └──────────────────┘ │            │                │&#xA;│                                            │            │                │&#xA;└────────────────────────────────────────────┘            └────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;📦 Installation&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❗️ IMPORTANT: As mentioned earlier, this plugin serves as a replacement for &lt;code&gt;typescript-language-server&lt;/code&gt;, so you should remove the &lt;code&gt;nvim-lspconfig&lt;/code&gt; setup for it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;⚡️ Requirements&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NeoVim &amp;gt;= 0.8.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TypeScript &amp;gt;= 4.0&lt;/li&gt; &#xA; &lt;li&gt;Node supported suitable for TypeScript version you use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;pmizio/typescript-tools.nvim&#34;,&#xA;  dependencies = { &#34;nvim-lua/plenary.nvim&#34;, &#34;neovim/nvim-lspconfig&#34; },&#xA;  opts = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;pmizio/typescript-tools.nvim&#34;&#xA;  requires = { &#34;nvim-lua/plenary.nvim&#34;, &#34;neovim/nvim-lspconfig&#34; },&#xA;  config = function()&#xA;    require(&#34;typescript-tools&#34;).setup {}&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;⚙️ Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The parameters passed into the &lt;code&gt;setup&lt;/code&gt; function are also passed to the standard &lt;code&gt;nvim-lspconfig&lt;/code&gt; server &lt;code&gt;setup&lt;/code&gt;, allowing you to use the same settings here. But you can pass plugin-specific options through the &lt;code&gt;settings&lt;/code&gt; parameter, which defaults to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;typescript-tools&#34;).setup {&#xA;  on_attach = function() ... end,&#xA;  ...&#xA;  settings = {&#xA;    -- spawn additional tsserver instance to calculate diagnostics on it&#xA;    separate_diagnostic_server = true,&#xA;    -- &#34;change&#34;|&#34;insert_leave&#34; determine when the client asks the server about diagnostic&#xA;    publish_diagnostic_on = &#34;insert_leave&#34;,&#xA;    -- specify a list of plugins to load by tsserver, e.g., for support `styled-components`&#xA;    -- (see 💅 `styled-components` support section)&#xA;    tsserver_plugins = {},&#xA;    -- described below&#xA;    tsserver_format_options = {},&#xA;    tsserver_file_preferences = {},&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass custom configuration options that will be passed to &lt;code&gt;tsserver&lt;/code&gt; instance. You can find available options in &lt;code&gt;typescript&lt;/code&gt; repository (e.g. for version 5.0.4 of typescript):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript/raw/v5.0.4/src/server/protocol.ts#L3439&#34;&gt;tsserver_file_preferences&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript/raw/v5.0.4/src/server/protocol.ts#L3418&#34;&gt;tsserver_format_options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To pass those options to plugin pass them to the plugin &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;typescript-tools&#34;).setup {&#xA;  settings = {&#xA;    ...&#xA;    tsserver_file_preferences = {&#xA;      includeInlayParameterNameHints = &#34;all&#34;,&#xA;      includeCompletionsForModuleExports = true,&#xA;      quotePreference = &#34;auto&#34;,&#xA;      ...&#xA;    },&#xA;    tsserver_format_options = {&#xA;      allowIncompleteCompletions = false,&#xA;      allowRenameOfImportPath = false,&#xA;      ...&#xA;    }&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default values for &lt;code&gt;preferences&lt;/code&gt; and &lt;code&gt;format_options&lt;/code&gt; are in &lt;a href=&#34;https://github.com/pmizio/typescript-tools.nvim/raw/master/lua/typescript-tools/protocol/text_document/did_open.lua#L8&#34;&gt;this file&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;💅 &lt;code&gt;styled-components&lt;/code&gt; support&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show more&lt;/summary&gt; &#xA; &lt;p&gt; &lt;br&gt; To get IntelliSense for &lt;code&gt;styled-components&lt;/code&gt;, you need to install the tsserver plugin globally, which enables support for it: &lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;npm i -g @styled/typescript-styled-plugin typescript-styled-plugin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now, you need to load the plugin by modifying the &lt;code&gt;settings&lt;/code&gt; object as follows:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;typescript-tools&#34;).setup {&#xA;  settings = {&#xA;    ...&#xA;    tsserver_plugins = {&#xA;      -- for TypeScript v4.9+&#xA;      &#34;@styled/typescript-styled-plugin&#34;,&#xA;      -- or for older TypeScript versions&#xA;      -- &#34;typescript-styled-plugin&#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Supported LSP methods&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Request&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/completion&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/hover&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/rename&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/publishDiagnostics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/signatureHelp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/references&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/definition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/typeDefinition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/documentSymbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/documentHighlight&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/codeAction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/formatting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/rangeFormatting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/foldingRange&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/semanticTokens/full (supported from TS v4.1)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/inlayHint (supported from TS v4.4)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;callHierarchy/incomingCalls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;callHierarchy/outgoingCalls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🚧&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/codeLens(&lt;a href=&#34;https://github.com/pmizio/typescript-tools.nvim/pull/39&#34;&gt;#39&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🚧&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/linkedEditingRange (planned)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;workspace/symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;workspace/willRenameFiles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;workspace/applyEdit - N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/declaration - N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;window/logMessage - N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;window/showMessage - N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;window/showMessageRequest - N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🚦 Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;textDocument/codeLens&lt;/code&gt; - &lt;a href=&#34;https://github.com/pmizio/typescript-tools.nvim/pull/39&#34;&gt;#39&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;textDocument/linkedEditingRange&lt;/code&gt; - &lt;a href=&#34;https://github.com/pmizio/typescript-tools.nvim/pull/32&#34;&gt;#32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Embedded language support(JS inside of HTML) - &lt;a href=&#34;https://github.com/pmizio/typescript-tools.nvim/pull/43&#34;&gt;#43&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔨 Development&lt;/h2&gt; &#xA;&lt;p&gt;Useful links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide&#34;&gt;nvim-lua-guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🐛 Run tests&lt;/h3&gt; &#xA;&lt;p&gt;The unit testing environment is automatically bootstrapped, just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to run a single test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make file=test_spec.lua test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💐 Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;null-ls.nvim&lt;/a&gt; - for the idea to monkeypatch nvim API to start a custom LSP I/O loop&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typescript-language-server/typescript-language-server&#34;&gt;typescript-language-server&lt;/a&gt; - for ideas on how to translate certain Tsserver responses&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vscode/tree/main/extensions/typescript-language-features&#34;&gt;Visual Studio Code(TypeScript extension)&lt;/a&gt; - for insights on using the Tsserver protocol and performance optimizations&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>