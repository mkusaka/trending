<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-02T01:33:29Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tiagovla/scope.nvim</title>
    <updated>2024-08-02T01:33:29Z</updated>
    <id>tag:github.com,2024-08-02:/tiagovla/scope.nvim</id>
    <link href="https://github.com/tiagovla/scope.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Revolutionize Your Neovim Tab Workflow: Introducing Enhanced Tab Scoping!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scope.nvim&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;span&gt;üîñ&lt;/span&gt; About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Revolutionize Your Neovim Tab Workflow: Introducing Enhanced Tab Scoping!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Elevate your Neovim tab game with our cutting-edge plugin. Bye-bye cluttered tabs, hello streamlined efficiency!&lt;/p&gt; &#xA;&lt;p&gt;This plugin revolutionizes tab management by introducing scoped buffers. Seamlessly navigate through buffers within each tab using commands like &lt;code&gt;:bnext&lt;/code&gt; and &lt;code&gt;:bprev&lt;/code&gt;. No more buffer chaos!&lt;/p&gt; &#xA;&lt;p&gt;Experience the power of scoped buffers, boost productivity, and reclaim your editing flow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30515389/156297097-08208d0f-9715-4fc4-8aa0-f5980c21173d.gif&#34; alt=&#34;scope&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Upgrade your Neovim tabs now with your favorite package manager!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;Lazy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;tiagovla/scope.nvim&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use(&#34;tiagovla/scope.nvim&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;tiagovla/scope.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;require(&#34;scope&#34;).setup({})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hooks&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the behavior of Scope.nvim using the provided hooks in your configuration. Here&#39;s an example of how to set up the &lt;code&gt;pre_tab_enter&lt;/code&gt; hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;require(&#34;scope&#34;).setup({&#xA;    hooks = {&#xA;        pre_tab_enter = function()&#xA;            -- Your custom logic to run before entering a tab&#xA;        end,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The pre_tab_enter hook allows you to define custom actions to run before entering a tab. This function is just one of several hooks you can use to further customize your experience with Scope.nvim.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an overview of the available hooks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pre_tab_enter&lt;/code&gt;: Run custom logic before entering a tab.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;post_tab_enter&lt;/code&gt;: Run custom logic after entering a tab.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pre_tab_leave&lt;/code&gt;: Run custom logic before leaving a tab.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;post_tab_leave&lt;/code&gt;: Run custom logic after leaving a tab.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pre_tab_close&lt;/code&gt;: Run custom logic before closing a tab.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;post_tab_close&lt;/code&gt;: Run custom logic after closing a tab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&#xA;    &lt;div style=&#34;width:200px&#34;&gt;&#xA;     Command&#xA;    &lt;/div&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:ScopeMoveBuf &amp;lt;tab_nr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move current buffer to the specified tab. &lt;br&gt; If tab_nr is omitted/invalid, &lt;code&gt;scope.nvim&lt;/code&gt; will prompt for a tab number. &lt;br&gt; If current buf is the only buf in current tab, it will be &#34;copied&#34; to target to retain the layout, otherwise, it will be &#34;moved&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üöÄ Extensions&lt;/h2&gt; &#xA;&lt;h3&gt;üî≠ Telescope&lt;/h3&gt; &#xA;&lt;p&gt;Extension to show all buffers from all tabs.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;span&gt;üîå&lt;/span&gt; Setup&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;    require(&#34;telescope&#34;).load_extension(&#34;scope&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;üì¢ Commands&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Telescope scope buffers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;üíæ&lt;/span&gt; Session Support (Experimental)&lt;/h3&gt; &#xA;&lt;p&gt;Extension to allow the usage of the plugin with session managers.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;span&gt;üîå&lt;/span&gt; Setup&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;vim.opt.sessionoptions = { -- required&#xA;    &#34;buffers&#34;,&#xA;    &#34;tabpages&#34;,&#xA;    &#34;globals&#34;,&#xA;}&#xA;require(&#34;scope&#34;).setup({})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;‚öô Session Manager Configurations&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üìå Nvim-Possession&lt;/summary&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;gennaro-tedesco/nvim-possession&#34;,&#xA;    lazy = false,&#xA;    dependencies = {&#xA;        {&#xA;            &#34;tiagovla/scope.nvim&#34;,&#xA;            lazy = false,&#xA;            config = true,&#xA;        },&#xA;    },&#xA;    config = function()&#xA;        require(&#34;nvim-possession&#34;).setup({&#xA;            autoload = true,&#xA;            autoswitch = {&#xA;                enable = true,&#xA;            },&#xA;            save_hook = function()&#xA;                vim.cmd([[ScopeSaveState]]) -- Scope.nvim saving&#xA;            end,&#xA;            post_hook = function()&#xA;                vim.cmd([[ScopeLoadState]]) -- Scope.nvim loading&#xA;            end,&#xA;        })&#xA;    end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;üì¢ Commands&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Commands&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:ScopeLoadState&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;load the plugin&#39;s state as a global variable from a session file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:ScopeSaveState&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;save the plugin&#39;s state as a global variable in a session file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Additionally, the API endpoints &lt;code&gt;require(&#34;scope.session&#34;).serialize_state()&lt;/code&gt; and &lt;code&gt;require(&#34;scope.session&#34;).deserialize_state(state)&lt;/code&gt; are available in case the user prefers to handle the state manually.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;üíæ&lt;/span&gt; &lt;strong&gt;Resession.nvim&lt;/strong&gt; Session Support (without &lt;code&gt;:mksession&lt;/code&gt; underhood)&lt;/h3&gt; &#xA;&lt;p&gt;Extension allows the usage of any supported plugin which wants to store/restore its data.&lt;/p&gt; &#xA;&lt;h4&gt;‚öô Session Manager Configurations&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Resession.nvim&lt;/summary&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;stevearc/resession.nvim&#34;,&#xA;    lazy = false,&#xA;    dependencies = {&#xA;        {&#xA;            &#34;tiagovla/scope.nvim&#34;,&#xA;            lazy = false,&#xA;            config = true,&#xA;        },&#xA;    },&#xA;    opts = {&#xA;        -- override default filter&#xA;        buf_filter = function(bufnr)&#xA;            local buftype = vim.bo[bufnr].buftype&#xA;            if buftype == &#39;help&#39; then&#xA;              return true&#xA;            end&#xA;            if buftype ~= &#34;&#34; and buftype ~= &#34;acwrite&#34; then&#xA;              return false&#xA;            end&#xA;            if vim.api.nvim_buf_get_name(bufnr) == &#34;&#34; then&#xA;              return false&#xA;            end&#xA;&#xA;            -- this is required, since the default filter skips nobuflisted buffers&#xA;            return true&#xA;        end,&#xA;        extensions = { scope = {} }, -- add scope.nvim extension&#xA;    }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;span&gt;üî•&lt;/span&gt; Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests from contributors are warmly welcome. To ensure the highest quality, please remember to carefully review the formatting using &lt;code&gt;stylua&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>