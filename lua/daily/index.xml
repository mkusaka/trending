<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T01:46:54Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>neovim/nvim-lspconfig</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/neovim/nvim-lspconfig</id>
    <link href="https://github.com/neovim/nvim-lspconfig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickstart configurations for the Nvim LSP client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lspconfig&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;collection of common configurations&lt;/a&gt; for Neovim&#39;s built-in &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;language server client&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This plugin allows for declaratively configuring, launching, and initializing language servers you have installed on your system. &lt;strong&gt;Disclaimer: Language server configurations are provided on a best-effort basis and are community-maintained. See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&#34;&gt;contributions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lspconfig&lt;/code&gt; has extensive help documentation, see &lt;code&gt;:help lspconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;LSP overview&lt;/h1&gt; &#xA;&lt;p&gt;Neovim supports the Language Server Protocol (LSP), which means it acts as a client to language servers and includes a Lua framework &lt;code&gt;vim.lsp&lt;/code&gt; for building enhanced LSP tools. LSP facilitates features like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;go-to-definition&lt;/li&gt; &#xA; &lt;li&gt;find-references&lt;/li&gt; &#xA; &lt;li&gt;hover&lt;/li&gt; &#xA; &lt;li&gt;completion&lt;/li&gt; &#xA; &lt;li&gt;rename&lt;/li&gt; &#xA; &lt;li&gt;format&lt;/li&gt; &#xA; &lt;li&gt;refactor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Neovim provides an interface for all of these features, and the language server client is designed to be highly extensible to allow plugins to integrate language server features which are not yet present in Neovim core such as &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&#34;&gt;&lt;strong&gt;auto&lt;/strong&gt;-completion&lt;/a&gt; (as opposed to manual completion with omnifunc) and &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Snippets&#34;&gt;snippet integration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;These features are not implemented in this repo&lt;/strong&gt;, but in Neovim core. See &lt;code&gt;:help lsp&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Requires &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.6.1&#34;&gt;Neovim v0.6.1&lt;/a&gt; or &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/nightly&#34;&gt;Nightly&lt;/a&gt;. Update Neovim and &#39;lspconfig&#39; before reporting an issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &#39;lspconfig&#39; like any other Vim plugin, e.g. with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local use = require(&#39;packer&#39;).use&#xA;require(&#39;packer&#39;).startup(function()&#xA;  use &#39;wbthomason/packer.nvim&#39; -- Package manager&#xA;  use &#39;neovim/nvim-lspconfig&#39; -- Collection of configurations for the built-in LSP client&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install a language server, e.g. &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md#pyright&#34;&gt;pyright&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g pyright&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the language server setup to your init.lua.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;lspconfig&#39;.pyright.setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch neovim, the language server will now be attached and providing diagnostics (see &lt;code&gt;:LspInfo&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;nvim main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#Keybindings-and-completion&#34;&gt;Keybindings and completion&lt;/a&gt; for mapping useful functions and enabling omnifunc completion&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For a full list of servers, see &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt; or &lt;code&gt;:help lspconfig-server-configurations&lt;/code&gt;. This document contains installation instructions and additional, optional, customization suggestions for each language server. For some servers that are not on your system path (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you will be required to manually add &lt;code&gt;cmd&lt;/code&gt; as an entry in the table passed to &lt;code&gt;setup&lt;/code&gt;. Most language servers can be installed in less than a minute.&lt;/p&gt; &#xA;&lt;h2&gt;Suggested configuration&lt;/h2&gt; &#xA;&lt;p&gt;&#39;lspconfig&#39; does not map keybindings or enable completion by default. The following example configuration provides suggested keymaps for the most commonly used language server functions, and manually triggered completion with omnifunc (&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;strong&gt;you must pass the defined &lt;code&gt;on_attach&lt;/code&gt; as an argument to every &lt;code&gt;setup {}&lt;/code&gt; call&lt;/strong&gt; and &lt;strong&gt;the keybindings in &lt;code&gt;on_attach&lt;/code&gt; only take effect on buffers with an active language server&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Mappings.&#xA;-- See `:help vim.diagnostic.*` for documentation on any of the below functions&#xA;local opts = { noremap=true, silent=true }&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;e&#39;, vim.diagnostic.open_float, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;[d&#39;, vim.diagnostic.goto_prev, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;]d&#39;, vim.diagnostic.goto_next, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;q&#39;, vim.diagnostic.setloclist, opts)&#xA;&#xA;-- Use an on_attach function to only map the following keys&#xA;-- after the language server attaches to the current buffer&#xA;local on_attach = function(client, bufnr)&#xA;  -- Enable completion triggered by &amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&#xA;  vim.api.nvim_buf_set_option(bufnr, &#39;omnifunc&#39;, &#39;v:lua.vim.lsp.omnifunc&#39;)&#xA;&#xA;  -- Mappings.&#xA;  -- See `:help vim.lsp.*` for documentation on any of the below functions&#xA;  local bufopts = { noremap=true, silent=true, buffer=bufnr }&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gD&#39;, vim.lsp.buf.declaration, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gd&#39;, vim.lsp.buf.definition, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;K&#39;, vim.lsp.buf.hover, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gi&#39;, vim.lsp.buf.implementation, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-k&amp;gt;&#39;, vim.lsp.buf.signature_help, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;wa&#39;, vim.lsp.buf.add_workspace_folder, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;wr&#39;, vim.lsp.buf.remove_workspace_folder, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;wl&#39;, function()&#xA;    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&#xA;  end, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;D&#39;, vim.lsp.buf.type_definition, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;rn&#39;, vim.lsp.buf.rename, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;ca&#39;, vim.lsp.buf.code_action, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gr&#39;, vim.lsp.buf.references, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;f&#39;, vim.lsp.buf.format, bufopts)&#xA;end&#xA;&#xA;-- Use a loop to conveniently call &#39;setup&#39; on multiple servers and&#xA;-- map buffer local keybindings when the language server attaches&#xA;local servers = { &#39;pyright&#39;, &#39;rust_analyzer&#39;, &#39;tsserver&#39; }&#xA;for _, lsp in pairs(servers) do&#xA;  require(&#39;lspconfig&#39;)[lsp].setup {&#xA;    on_attach = on_attach,&#xA;    flags = {&#xA;      -- This will be the default in neovim 0.7+&#xA;      debounce_text_changes = 150,&#xA;    }&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Manual, triggered completion is provided by neovim&#39;s built-in omnifunc. For &lt;strong&gt;auto&lt;/strong&gt;completion, a general purpose &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&#34;&gt;autocompletion plugin&lt;/a&gt; is required.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;If you have an issue with &#39;lspconfig&#39;, the first step is to reproduce with a &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/test/minimal_init.lua&#34;&gt;minimal configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The most common reasons a language server does not start or attach are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The language server is not installed. &#39;lspconfig&#39; does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in each server&#39;s lua module from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is an executable name instead of an absolute path to the executable, ensure it is on your path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Missing filetype plugins. Certain languages are not detecting by vim/neovim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set ft?&lt;/code&gt; shows the filetype and not an empty value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Not triggering root detection. &lt;strong&gt;Some&lt;/strong&gt; language servers will only start if it is opened in a directory, or child directory, containing a file which signals the &lt;em&gt;root&lt;/em&gt; of the project. Most of the time, this is a &lt;code&gt;.git&lt;/code&gt; folder, but each server defines the root config in the lua file. See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt; or the source for the list of root directories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You must pass &lt;code&gt;on_attach&lt;/code&gt; and &lt;code&gt;capabilities&lt;/code&gt; for &lt;strong&gt;each&lt;/strong&gt; &lt;code&gt;setup {}&lt;/code&gt; if you want these to take effect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Do not call &lt;code&gt;setup {}&lt;/code&gt; twice for the same server&lt;/strong&gt;. The second call to &lt;code&gt;setup {}&lt;/code&gt; will overwrite the first.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:LspInfo&lt;/code&gt;. Add the following to your init.vim to enable logging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.set_log_level(&#34;debug&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attempt to run the language server, and open the log with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:LspLog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of the time, the reason for failure is present in the logs.&lt;/p&gt; &#xA;&lt;h2&gt;Built-in commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; shows the status of active and configured language servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following support tab-completion for all arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass &lt;code&gt;autostart = false&lt;/code&gt; to your &lt;code&gt;.setup{}&lt;/code&gt; call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStop &amp;lt;client_id&amp;gt;&lt;/code&gt; Defaults to stopping all buffer clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspRestart &amp;lt;client_id&amp;gt;&lt;/code&gt; Defaults to restarting all buffer clients.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The wiki&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki&#34;&gt;wiki&lt;/a&gt; for additional topics, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Installing-language-servers#automatically&#34;&gt;Automatic server installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Snippets&#34;&gt;Snippets support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Project-local-settings&#34;&gt;Project local settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Language-specific-plugins&#34;&gt;Recommended plugins for enhanced language server features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If you are missing a language server on the list in &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt;, contributing a new configuration for it would be appreciated. You can follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new file at &lt;code&gt;lua/lspconfig/server_configurations/SERVER_NAME.lua&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy an &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/server_configurations/&#34;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/server_configurations/texlab.lua&#34;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ask questions on our &lt;a href=&#34;https://neovim.discourse.group/c/7-category/7&#34;&gt;Discourse&lt;/a&gt; or in the &lt;a href=&#34;https://app.element.io/#/room/#neovim:matrix.org&#34;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also help out by testing &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/issues?q=is%3Apr+is%3Aopen+label%3Aneeds-testing&#34;&gt;PRs with the &lt;code&gt;needs-testing&lt;/code&gt;&lt;/a&gt; label that affect language servers you use regularly.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nvim-lualine/lualine.nvim</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/nvim-lualine/lualine.nvim</id>
    <link href="https://github.com/nvim-lualine/lualine.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A blazing fast and easy to configure neovim statusline plugin written in pure lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lualine.nvim&lt;/h1&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/nvim-lualine/lualine.nvim?style=flat-square&#34; alt=&#34;code size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/nvim-lualine/lualine.nvim?style=flat-square&#34; alt=&#34;license&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;p&gt;A blazing fast and easy to configure Neovim statusline written in Lua.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lualine.nvim&lt;/code&gt; requires Neovim &amp;gt;= 0.5.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to create an issue/PR if you want to see anything else implemented. If you have some question or need help with configuration, start a &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before opening a PR. You can also help with documentation in the &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Here is a preview of what lualine can look like.&lt;/p&gt; &#xA;&lt;p&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650373-bb025580-74bf-11eb-8682-2c09321dd18e.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650377-bd64af80-74bf-11eb-9c55-fbfc51b39fe8.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650378-be95dc80-74bf-11eb-9718-82b242ecdd54.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650381-bfc70980-74bf-11eb-9245-85c48f0f154a.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/103467925-32372b00-4d54-11eb-88d6-6d39c46854d8.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Screenshots of all available themes are listed in &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&#34;&gt;THEMES.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For those who want to break the norms, you can create custom looks for lualine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/evil_lualine.lua&#34;&gt;evil_lualine&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/13149513/113875129-4453ba00-97d8-11eb-8f21-94a9ef565db3.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/slanted-gaps.lua&#34;&gt;slanted-gaps&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/13149513/143395518-f6d6f748-c1ca-491b-9dab-246d0a8cf23f.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/bubbles.lua&#34;&gt;bubbles&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/20235646/131350468-fc556196-5f46-4bfe-a72e-960f6a58db2c.png&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Performance compared to other plugins&lt;/h2&gt; &#xA;&lt;p&gt;Unlike other statusline plugins, lualine loads only the components you specify, and nothing else.&lt;/p&gt; &#xA;&lt;p&gt;Startup time performance measured with an amazing plugin &lt;a href=&#34;https://github.com/dstein64/vim-startuptime&#34;&gt;dstein64/vim-startuptime&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Times are measured with a clean &lt;code&gt;init.vim&lt;/code&gt; with only &lt;code&gt;vim-startuptime&lt;/code&gt;, &lt;code&gt;vim-plug&lt;/code&gt; and given statusline plugin installed. In control just &lt;code&gt;vim-startuptime&lt;/code&gt; and&lt;code&gt;vim-plug&lt;/code&gt; is installed. And measured time is complete startuptime of vim not time spent on specific plugin. These numbers are the average of 20 runs.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;control&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;lualine&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;lightline&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;airline&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17.2 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24.8 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25.5 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;79.9 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Last Updated On: 18-04-2022&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lualine/lualine.nvim&#39;&#xA;&#34; If you want to have icons in your statusline choose one of these&#xA;Plug &#39;kyazdani42/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;nvim-lualine/lualine.nvim&#39;,&#xA;  requires = { &#39;kyazdani42/nvim-web-devicons&#39;, opt = true }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also need to have a patched font if you want icons.&lt;/p&gt; &#xA;&lt;h2&gt;Usage and customization&lt;/h2&gt; &#xA;&lt;p&gt;Lualine has sections as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-------------------------------------------------+&#xA;| A | B | C                             X | Y | Z |&#xA;+-------------------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each sections holds its components e.g. Vim&#39;s current mode.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring lualine in init.vim&lt;/h3&gt; &#xA;&lt;p&gt;All the examples below are in lua. You can use the same examples in &lt;code&gt;.vim&lt;/code&gt; files by wrapping them in lua heredoc like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; END&#xA;require(&#39;lualine&#39;).setup()&#xA;END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, check out &lt;code&gt;:help lua-heredoc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Default configuration&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    icons_enabled = true,&#xA;    theme = &#39;auto&#39;,&#xA;    component_separators = { left = &#39;&#39;, right = &#39;&#39;},&#xA;    section_separators = { left = &#39;&#39;, right = &#39;&#39;},&#xA;    disabled_filetypes = {},&#xA;    always_divide_middle = true,&#xA;    globalstatus = false,&#xA;  },&#xA;  sections = {&#xA;    lualine_a = {&#39;mode&#39;},&#xA;    lualine_b = {&#39;branch&#39;, &#39;diff&#39;, &#39;diagnostics&#39;},&#xA;    lualine_c = {&#39;filename&#39;},&#xA;    lualine_x = {&#39;encoding&#39;, &#39;fileformat&#39;, &#39;filetype&#39;},&#xA;    lualine_y = {&#39;progress&#39;},&#xA;    lualine_z = {&#39;location&#39;}&#xA;  },&#xA;  inactive_sections = {&#xA;    lualine_a = {},&#xA;    lualine_b = {},&#xA;    lualine_c = {&#39;filename&#39;},&#xA;    lualine_x = {&#39;location&#39;},&#xA;    lualine_y = {},&#xA;    lualine_z = {}&#xA;  },&#xA;  tabline = {},&#xA;  extensions = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to get your current lualine config, you can do so with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).get_config()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Starting lualine&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Setting a theme&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { theme = &#39;gruvbox&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All available themes are listed in &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&#34;&gt;THEMES.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please create a PR if you managed to port a popular theme before us, &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&#34;&gt;here is how to do it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customizing themes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local custom_gruvbox = require&#39;lualine.themes.gruvbox&#39;&#xA;&#xA;-- Change the background of lualine_c section for normal mode&#xA;custom_gruvbox.normal.c.bg = &#39;#112233&#39;&#xA;&#xA;require(&#39;lualine&#39;).setup {&#xA;  options = { theme  = custom_gruvbox },&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Theme structure is available &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Writing-a-theme&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Separators&lt;/h3&gt; &#xA;&lt;p&gt;lualine defines two kinds of separators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;section_separators&lt;/code&gt; - separators between sections&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;components_separators&lt;/code&gt; - separators between the different components in sections&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if viewing this README in a browser, chances are the characters below will not be visible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  section_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  component_separators = { left = &#39;&#39;, right = &#39;&#39; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, left refers to the left-most sections (a, b, c), and right refers to the right-most sections (x, y, z).&lt;/p&gt; &#xA;&lt;h4&gt;Disabling separators&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { section_separators = &#39;&#39;, component_separators = &#39;&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Changing components in lualine sections&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {lualine_a = {&#39;mode&#39;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available components&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;branch&lt;/code&gt; (git branch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buffers&lt;/code&gt; (shows currently available buffers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diagnostics&lt;/code&gt; (diagnostics count from your preferred source)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff&lt;/code&gt; (git diff status)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;encoding&lt;/code&gt; (file encoding)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fileformat&lt;/code&gt; (file format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filesize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filetype&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hostname&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;location&lt;/code&gt; (location in file in line:column format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode&lt;/code&gt; (vim mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;progress&lt;/code&gt; (%progress in file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tabs&lt;/code&gt; (shows currently available tabs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;windows&lt;/code&gt; (shows currently available windows)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom components&lt;/h4&gt; &#xA;&lt;h5&gt;Lua functions as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function hello()&#xA;  return [[hello world]]&#xA;end&#xA;sections = { lualine_a = { hello } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim functions as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_a = {&#39;FugitiveHead&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim&#39;s statusline items as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_c = {&#39;%=&#39;, &#39;%t%m&#39;, &#39;%3p&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim variables as lualine component&lt;/h5&gt; &#xA;&lt;p&gt;Variables from &lt;code&gt;g:&lt;/code&gt;, &lt;code&gt;v:&lt;/code&gt;, &lt;code&gt;t:&lt;/code&gt;, &lt;code&gt;w:&lt;/code&gt;, &lt;code&gt;b:&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;go:&lt;/code&gt;, &lt;code&gt;vo:&lt;/code&gt;, &lt;code&gt;to:&lt;/code&gt;, &lt;code&gt;wo:&lt;/code&gt;, &lt;code&gt;bo:&lt;/code&gt; scopes can be used.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h lua-vim-variables&lt;/code&gt; and &lt;code&gt;:h lua-vim-options&lt;/code&gt; if you are not sure what to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_a = { &#39;g:coc_status&#39;, &#39;bo:filetype&#39; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Lua expressions as lualine component&lt;/h5&gt; &#xA;&lt;p&gt;You can use any valid lua expression as a component including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;oneliners&lt;/li&gt; &#xA; &lt;li&gt;global variables&lt;/li&gt; &#xA; &lt;li&gt;require statements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_c = { &#34;os.date(&#39;%a&#39;)&#34;, &#39;data&#39;, &#34;require&#39;lsp-status&#39;.status()&#34; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is a global variable in this example.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Component options&lt;/h3&gt; &#xA;&lt;p&gt;Component options can change the way a component behave. There are two kinds of options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;global options affecting all components&lt;/li&gt; &#xA; &lt;li&gt;local options affecting specific&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Global options can be used as local options (can be applied to specific components) but you cannot use local options as global. Global option used locally overwrites the global, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#39;lualine&#39;).setup {&#xA;      options = { fmt = string.lower },&#xA;      sections = { lualine_a = {&#xA;        { &#39;mode&#39;, fmt = function(str) return str:sub(1,1) end } },&#xA;                  lualine_b = {&#39;branch&#39;} }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; will be formatted with the passed function so only first char will be shown . On the other hand branch will be formatted with global formatter &lt;code&gt;string.lower&lt;/code&gt; so it will be showed in lower case.&lt;/p&gt; &#xA;&lt;h4&gt;Available options&lt;/h4&gt; &#xA;&lt;h4&gt;Global options&lt;/h4&gt; &#xA;&lt;p&gt;These are &lt;code&gt;options&lt;/code&gt; that are used in options table. They set behavior of lualine.&lt;/p&gt; &#xA;&lt;p&gt;Values set here are treated as default for other options that work in component level.&lt;/p&gt; &#xA;&lt;p&gt;For example even though &lt;code&gt;icons_enabled&lt;/code&gt; is a general component option. you can set &lt;code&gt;icons_enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and icons will be disabled on all component. You can still overwrite defaults set in option table by specifying the option value in component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  theme = &#39;auto&#39;, -- lualine theme&#xA;  component_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  section_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  disabled_filetypes = {},     -- Filetypes to disable lualine for.&#xA;  always_divide_middle = true, -- When set to true, left sections i.e. &#39;a&#39;,&#39;b&#39; and &#39;c&#39;&#xA;                               -- can&#39;t take over the entire statusline even&#xA;                               -- if neither of &#39;x&#39;, &#39;y&#39; or &#39;z&#39; are present.&#xA;  globalstatus = false,        -- enable global statusline (have a single statusline&#xA;                               -- at bottom of neovim instead of one for  every window).&#xA;                               -- This feature is only available in neovim 0.7 and higher.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;General component options&lt;/h4&gt; &#xA;&lt;p&gt;These are options that control behavior at component level and are available for all components.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;mode&#39;,&#xA;      icons_enabled = true, -- Enables the display of icons alongside the component.&#xA;      -- Defines the icon to be displayed in front of the component.&#xA;      -- Can be string|table&#xA;      -- As table it must contain the icon as first entry and can use&#xA;      -- color option to custom color the icon. Example:&#xA;      -- {&#39;branch&#39;, icon = &#39;&#39;} / {&#39;branch&#39;, icon = {&#39;&#39;, color={fg=&#39;green&#39;}}}&#xA;&#xA;      -- icon position can also be set to the right side from table. Example:&#xA;      -- {&#39;branch&#39;, icon = {&#39;&#39;, align=&#39;right&#39;, color={fg=&#39;green&#39;}}}&#xA;      icon = nil,&#xA;&#xA;      separator = nil,      -- Determines what separator to use for the component.&#xA;                            -- Note:&#xA;                            --  When a string is provided it&#39;s treated as component_separator.&#xA;                            --  When a table is provided it&#39;s treated as section_separator.&#xA;                            --  Passing an empty string disables the separator.&#xA;                            --&#xA;                            -- These options can be used to set colored separators&#xA;                            -- around a component.&#xA;                            --&#xA;                            -- The options need to be set as such:&#xA;                            --   separator = { left = &#39;&#39;, right = &#39;&#39;}&#xA;                            --&#xA;                            -- Where left will be placed on left side of component,&#xA;                            -- and right will be placed on its right.&#xA;                            --&#xA;&#xA;      cond = nil,           -- Condition function, the component is loaded when the function returns `true`.&#xA;&#xA;      -- Defines a custom color for the component:&#xA;      --&#xA;      -- &#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; } | function&#xA;      -- Note:&#xA;      --  &#39;|&#39; is synonymous with &#39;or&#39;, meaning a different acceptable format for that placeholder.&#xA;      -- color function has to return one of other color types (&#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; })&#xA;      -- color functions can be used to have different colors based on state as shown below.&#xA;      --&#xA;      -- Examples:&#xA;      --   color = { fg = &#39;#ffaa88&#39;, bg = &#39;grey&#39;, gui=&#39;italic,bold&#39; },&#xA;      --   color = { fg = 204 }   -- When fg/bg are omitted, they default to the your theme&#39;s fg/bg.&#xA;      --   color = &#39;WarningMsg&#39;   -- Highlight groups can also be used.&#xA;      --   color = function(section)&#xA;      --      return { fg = vim.bo.modified and &#39;#aa3355&#39; or &#39;#33aa88&#39; }&#xA;      --   end,&#xA;      color = nil, -- The default is your theme&#39;s color for that section and mode.&#xA;&#xA;      -- Specify what type a component is, if omitted, lualine will guess it for you.&#xA;      --&#xA;      -- Available types are:&#xA;      --   [format: type_name(example)], mod(branch/filename),&#xA;      --   stl(%f/%m), var(g:coc_status/bo:modifiable),&#xA;      --   lua_expr(lua expressions), vim_fun(viml function name)&#xA;      --&#xA;      -- Note:&#xA;      -- lua_expr is short for lua-expression and vim_fun is short for vim-function.&#xA;      type = nil,&#xA;&#xA;      padding = 1, -- Adds padding to the left and right of components.&#xA;                   -- Padding can be specified to left or right independently, e.g.:&#xA;                   --   padding = { left = left_padding, right = right_padding }&#xA;&#xA;      fmt = nil,   -- Format function, formats the component&#39;s output.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Component specific options&lt;/h4&gt; &#xA;&lt;p&gt;These are options that are available on specific components. For example you have option on &lt;code&gt;diagnostics&lt;/code&gt; component to specify what your diagnostic sources will be.&lt;/p&gt; &#xA;&lt;h4&gt;buffers component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;buffers&#39;,&#xA;      show_filename_only = true,   -- Shows shortened relative path when set to false.&#xA;      hide_filename_extension = false,   -- Hide filename extension when set to true.&#xA;      show_modified_status = true, -- Shows indicator when the buffer is modified.&#xA;&#xA;      mode = 0, -- 0: Shows buffer name&#xA;                -- 1: Shows buffer index&#xA;                -- 2: Shows buffer name + buffer index &#xA;                -- 3: Shows buffer number&#xA;                -- 4: Shows buffer name + buffer number&#xA;&#xA;      max_length = vim.o.columns * 2 / 3, -- Maximum width of buffers component,&#xA;                                          -- it can also be a function that returns&#xA;                                          -- the value of `max_length` dynamically.&#xA;      filetype_names = {&#xA;        TelescopePrompt = &#39;Telescope&#39;,&#xA;        dashboard = &#39;Dashboard&#39;,&#xA;        packer = &#39;Packer&#39;,&#xA;        fzf = &#39;FZF&#39;,&#xA;        alpha = &#39;Alpha&#39;&#xA;      }, -- Shows specific buffer name for that filetype ( { `filetype` = `buffer_name`, ... } )&#xA;&#xA;      buffers_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active buffer.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive buffer.&#xA;      },&#xA;&#xA;      symbols = {&#xA;        modified = &#39; ●&#39;,      -- Text to show when the buffer is modified&#xA;        alternate_file = &#39;#&#39;, -- Text to show to identify the alternate file&#xA;        directory =  &#39;&#39;,     -- Text to show when the buffer is a directory&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;diagnostics component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;diagnostics&#39;,&#xA;&#xA;      -- Table of diagnostic sources, available sources are:&#xA;      --   &#39;nvim_lsp&#39;, &#39;nvim_diagnostic&#39;, &#39;coc&#39;, &#39;ale&#39;, &#39;vim_lsp&#39;.&#xA;      -- or a function that returns a table as such:&#xA;      --   { error=error_cnt, warn=warn_cnt, info=info_cnt, hint=hint_cnt }&#xA;      sources = { &#39;nvim_diagnostic&#39;, &#39;coc&#39; },&#xA;&#xA;      -- Displays diagnostics for the defined severity types&#xA;      sections = { &#39;error&#39;, &#39;warn&#39;, &#39;info&#39;, &#39;hint&#39; },&#xA;&#xA;      diagnostics_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        error = &#39;DiagnosticError&#39;, -- Changes diagnostics&#39; error color.&#xA;        warn  = &#39;DiagnosticWarn&#39;,  -- Changes diagnostics&#39; warn color.&#xA;        info  = &#39;DiagnosticInfo&#39;,  -- Changes diagnostics&#39; info color.&#xA;        hint  = &#39;DiagnosticHint&#39;,  -- Changes diagnostics&#39; hint color.&#xA;      },&#xA;      symbols = {error = &#39;E&#39;, warn = &#39;W&#39;, info = &#39;I&#39;, hint = &#39;H&#39;},&#xA;      colored = true,           -- Displays diagnostics status in color if set to true.&#xA;      update_in_insert = false, -- Update diagnostics in insert mode.&#xA;      always_visible = false,   -- Show diagnostics even if there are none.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;diff component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;diff&#39;,&#xA;      colored = true, -- Displays a colored diff status if set to true&#xA;      diff_color = {&#xA;        -- Same color values as the general color option can be used here.&#xA;        added    = &#39;DiffAdd&#39;,    -- Changes the diff&#39;s added color&#xA;        modified = &#39;DiffChange&#39;, -- Changes the diff&#39;s modified color&#xA;        removed  = &#39;DiffDelete&#39;, -- Changes the diff&#39;s removed color you&#xA;      },&#xA;      symbols = {added = &#39;+&#39;, modified = &#39;~&#39;, removed = &#39;-&#39;}, -- Changes the symbols used by the diff.&#xA;      source = nil, -- A function that works as a data source for diff.&#xA;                    -- It must return a table as such:&#xA;                    --   { added = add_count, modified = modified_count, removed = removed_count }&#xA;                    -- or nil on failure. count &amp;lt;= 0 won&#39;t be displayed.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;fileformat component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;fileformat&#39;,&#xA;      symbols = {&#xA;        unix = &#39;&#39;, -- e712&#xA;        dos = &#39;&#39;,  -- e70f&#xA;        mac = &#39;&#39;,  -- e711&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;filename component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;filename&#39;,&#xA;      file_status = true,      -- Displays file status (readonly status, modified status)&#xA;      path = 0,                -- 0: Just the filename&#xA;                               -- 1: Relative path&#xA;                               -- 2: Absolute path&#xA;                               -- 3: Absolute path, with tilde as the home directory&#xA;&#xA;      shorting_target = 40,    -- Shortens path to leave 40 spaces in the window&#xA;                               -- for other components. (terrible name, any suggestions?)&#xA;      symbols = {&#xA;        modified = &#39;[+]&#39;,      -- Text to show when the file is modified.&#xA;        readonly = &#39;[-]&#39;,      -- Text to show when the file is non-modifiable or readonly.&#xA;        unnamed = &#39;[No Name]&#39;, -- Text to show for unnamed buffers.&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;filetype component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;filetype&#39;,&#xA;      colored = true,   -- Displays filetype icon in color if set to true&#xA;      icon_only = false, -- Display only an icon for filetype&#xA;      icon = { align = &#39;right&#39; }, -- Display filetype icon on the right hand side&#xA;      -- icon =    {&#39;X&#39;, align=&#39;right&#39;}&#xA;      -- Icon string ^ in table is ignored in filetype component&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;tabs component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;tabs&#39;,&#xA;      max_length = vim.o.columns / 3, -- Maximum width of tabs component.&#xA;                                      -- Note:&#xA;                                      -- It can also be a function that returns&#xA;                                      -- the value of `max_length` dynamically.&#xA;      mode = 0, -- 0: Shows tab_nr&#xA;                -- 1: Shows tab_name&#xA;                -- 2: Shows tab_nr + tab_name&#xA;&#xA;      tabs_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active tab.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive tab.&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;windows component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;windows&#39;,&#xA;      show_filename_only = true,   -- Shows shortened relative path when set to false.&#xA;      show_modified_status = true, -- Shows indicator when the window is modified.&#xA;&#xA;      mode = 0, -- 0: Shows window name&#xA;                -- 1: Shows window index&#xA;                -- 2: Shows window name + window index&#xA;&#xA;      max_length = vim.o.columns * 2 / 3, -- Maximum width of windows component,&#xA;                                          -- it can also be a function that returns&#xA;                                          -- the value of `max_length` dynamically.&#xA;      filetype_names = {&#xA;        TelescopePrompt = &#39;Telescope&#39;,&#xA;        dashboard = &#39;Dashboard&#39;,&#xA;        packer = &#39;Packer&#39;,&#xA;        fzf = &#39;FZF&#39;,&#xA;        alpha = &#39;Alpha&#39;&#xA;      }, -- Shows specific window name for that filetype ( { `filetype` = `window_name`, ... } )&#xA;&#xA;      disabled_buftypes = { &#39;quickfix&#39;, &#39;prompt&#39; }, -- Hide a window if its buffer&#39;s type is disabled&#xA;&#xA;      windows_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active window.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive window.&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Tabline&lt;/h3&gt; &#xA;&lt;p&gt;You can use lualine to display components in tabline. The configuration for tabline sections is exactly the same as that of the statusline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;  lualine_a = {},&#xA;  lualine_b = {&#39;branch&#39;},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the branch and filename components on top of neovim inside tabline.&lt;/p&gt; &#xA;&lt;p&gt;lualine also provides 2 components, buffers and tabs, that you can use to get a more traditional tabline/bufferline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;  lualine_a = {&#39;buffers&#39;},&#xA;  lualine_b = {&#39;branch&#39;},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {&#39;tabs&#39;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Buffers&lt;/h4&gt; &#xA;&lt;p&gt;Shows currently open buffers. Like bufferline . See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#buffers-component-options&#34;&gt;buffers options&lt;/a&gt; for all builtin behaviors of buffers component. You can use &lt;code&gt;:LualineBuffersJump&lt;/code&gt; to jump to buffer based on index of buffer in buffers component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;  :LualineBuffersJump 2  &#34; Jumps to 2nd buffer in buffers component.&#xA;  :LualineBuffersJump $  &#34; Jumps to last buffer in buffers component.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tabs&lt;/h4&gt; &#xA;&lt;p&gt;Shows currently open tab. Like usual tabline. See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#tabs-component-options&#34;&gt;tabs options&lt;/a&gt; for all builtin behaviors of tabs component. You can also use &lt;code&gt;:LualineRenameTab&lt;/code&gt; to set a name for a tabpage. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:LualineRenameTab Project_K&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s useful when you&#39;re using rendering mode 2/3 in tabs. To unname a tabpage run &lt;code&gt;:LualineRenameTab&lt;/code&gt; without argument.&lt;/p&gt; &#xA;&lt;h4&gt;Tabline as statusline&lt;/h4&gt; &#xA;&lt;p&gt;You can also completely move your statusline to a tabline by configuring &lt;code&gt;lualine.tabline&lt;/code&gt; and disabling &lt;code&gt;lualine.sections&lt;/code&gt; and &lt;code&gt;lualine.inactive_sections&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;......&#xA;  },&#xA;sections = {},&#xA;inactive_sections = {},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a more sophisticated tabline you can use other tabline plugins with lualine too, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;nvim-bufferline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kdheepak/tabline.nvim&#34;&gt;tabline.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;tabline.nvim even uses lualine&#39;s theme by default 🙌 You can find a bigger list &lt;a href=&#34;https://github.com/rockerBOO/awesome-neovim#tabline&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;lualine extensions change statusline appearance for a window/buffer with specified filetypes.&lt;/p&gt; &#xA;&lt;p&gt;By default no extensions are loaded to improve performance. You can load extensions with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;extensions = {&#39;quickfix&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available extensions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;aerial&lt;/li&gt; &#xA; &lt;li&gt;chadtree&lt;/li&gt; &#xA; &lt;li&gt;fern&lt;/li&gt; &#xA; &lt;li&gt;fugitive&lt;/li&gt; &#xA; &lt;li&gt;fzf&lt;/li&gt; &#xA; &lt;li&gt;nerdtree&lt;/li&gt; &#xA; &lt;li&gt;neo-tree&lt;/li&gt; &#xA; &lt;li&gt;nvim-tree&lt;/li&gt; &#xA; &lt;li&gt;quickfix&lt;/li&gt; &#xA; &lt;li&gt;symbols-outline&lt;/li&gt; &#xA; &lt;li&gt;toggleterm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom extensions&lt;/h4&gt; &#xA;&lt;p&gt;You can define your own extensions. If you believe an extension may be useful to others, then please submit a PR.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local my_extension = { sections = { lualine_a = {&#39;mode&#39;} }, filetypes = {&#39;lua&#39;} }&#xA;require(&#39;lualine&#39;).setup { extensions = { my_extension } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Disabling lualine&lt;/h3&gt; &#xA;&lt;p&gt;You can disable lualine for specific filetypes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { disabled_filetypes = {&#39;lua&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to these wonderful people, we enjoy this awesome plugin.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=nvim-lualine/lualine.nvim&#34;&gt; &lt;/a&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Wiki&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki&#34;&gt;wiki&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;You can find some useful &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Component-snippets&#34;&gt;configuration snippets&lt;/a&gt; here. You can also share your awesome snippets with others.&lt;/p&gt; &#xA;&lt;p&gt;If you want to extend lualine with plugins or want to know which ones already do, &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Plugins&#34;&gt;wiki/plugins&lt;/a&gt; is for you.&lt;/p&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;If you appreciate my work you can buy me a coffee.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/shadmansalJ&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-black.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simrat39/rust-tools.nvim</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/simrat39/rust-tools.nvim</id>
    <link href="https://github.com/simrat39/rust-tools.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for better development in rust using neovim&#39;s builtin lsp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rust-tools.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Extra rust tools for writing applications in neovim using the native lsp. This plugin adds extra functionality over rust analyzer.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;em&gt;&lt;strong&gt;Recent breaking changes&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;p&gt;We no longer use telescope.nvim for Runnables/Debuggables. Instead we now use vim.ui.select. Check out &lt;a href=&#34;https://github.com/nvim-telescope/telescope-ui-select.nvim&#34;&gt;telescope-ui-select.nvim&lt;/a&gt; or &lt;a href=&#34;https://github.com/hood/popui.nvim&#34;&gt;popui.nvim&lt;/a&gt; for pretty interfaces.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;neovim 0.6&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-lspconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-analyzer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dot&lt;/code&gt; from &lt;code&gt;graphviz&lt;/code&gt; (only for crate graph)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;using &lt;code&gt;vim-plug&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;simrat39/rust-tools.nvim&#39;&#xA;&#xA;&#34; Debugging&#xA;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;mfussenegger/nvim-dap&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;Look at the configuration information below to get started.&lt;/b&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Configuration + Functionality&lt;/h1&gt; &#xA;&lt;p&gt;This plugin automatically sets up nvim-lspconfig for rust_analyzer for you, so there is no need to do that manually&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Put this in your init.lua or any lua file that is sourced.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;For most people, the defaults are fine, but for advanced configuration, see &lt;a href=&#34;https://raw.githubusercontent.com/simrat39/rust-tools.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;rust-tools&#39;).setup({})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;RustSetInlayHints&#xA;RustDisableInlayHints&#xA;RustToggleInlayHints&#xA;RustRunnables&#xA;RustExpandMacro&#xA;RustOpenCargo &#xA;RustParentModule&#xA;RustJoinLines&#xA;RustHoverActions&#xA;RustHoverRange &#xA;RustMoveItemDown&#xA;RustMoveItemUp&#xA;RustStartStandaloneServerForBuffer &#xA;RustDebuggables&#xA;RustViewCrateGraph&#xA;RustReloadWorkspace&#xA;RustSSR&#xA;RustOpenExternalDocs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Standalone File Support&lt;/h2&gt; &#xA;&lt;p&gt;rust-tools supports rust analyzer for standalone files (not in a cargo project). The language server is automatically started when you start a rust file which is not in a cargo file (nvim abc.rs). If you want to attach some other buffer to the standalone client (after opening nvim and switching to a new rust file), then use the RustStartStandaloneServerForBuffer command.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;Depends on:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lldb.llvm.org/&#34;&gt;lldb-vscode&lt;/a&gt; (Comes with an installation of lldb)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;rust-tools supports debugging with the help of rust-analyzer. Note that the plugin does not setup nvim-dap for you, but it has its own internal configuration, so if you want a seperate debugging config then you can do it the normal way.&lt;/p&gt; &#xA;&lt;p&gt;Currently, rust-tools support debugging in two different ways:&lt;/p&gt; &#xA;&lt;h3&gt;RustDebuggables&lt;/h3&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;RustRunnables&lt;/code&gt;, this command provides a list of targets that can be debugged, from specific tests to the entire project. Just run the command and chose your target, and the debugging will begin.&lt;/p&gt; &#xA;&lt;h3&gt;Hover actions&lt;/h3&gt; &#xA;&lt;p&gt;Put your cursor on the main function, enter the hover actions menu and select the debug option to debug the entire application.&lt;/p&gt; &#xA;&lt;p&gt;Put your cursor on any test module or function, enter the hover actions menu and select the debug option to debug the certain test.&lt;/p&gt; &#xA;&lt;p&gt;Future support for code lenses and telescope/runnables is also planned.&lt;/p&gt; &#xA;&lt;h3&gt;A better debugging experience...&lt;/h3&gt; &#xA;&lt;p&gt;For basic debugging, lldb-vscode is good enough. But if you want something better, you might wanna read this section.&lt;/p&gt; &#xA;&lt;p&gt;You might have noticed that lldb-vscode does not show types like strings and enums properly, but vscode does. How could this be 🤔 🤔&lt;/p&gt; &#xA;&lt;p&gt;This is because vscode uses a wrapper &lt;em&gt;over&lt;/em&gt; lldb which provides all the goodies. Setting it up for nvim is a bit wack, but thankfully rust-tools provides some utility functions to make the process easier.&lt;/p&gt; &#xA;&lt;p&gt;Steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb&#34;&gt;CodeLLDB&lt;/a&gt; vscode extension.&lt;/li&gt; &#xA; &lt;li&gt;Find out where its installed. On linux, it&#39;s usually in &lt;code&gt;$HOME/.vscode/extensions/...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update your configuration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Update this path&#xA;local extension_path = vim.env.HOME .. &#39;/.vscode/extensions/vadimcn.vscode-lldb-1.6.7/&#39;&#xA;local codelldb_path = extension_path .. &#39;adapter/codelldb&#39;&#xA;local liblldb_path = extension_path .. &#39;lldb/lib/liblldb.so&#39;&#xA;&#xA;local opts = {&#xA;    -- ... other configs&#xA;    dap = {&#xA;        adapter = require(&#39;rust-tools.dap&#39;).get_codelldb_adapter(&#xA;            codelldb_path, liblldb_path)&#xA;    }&#xA;}&#xA;&#xA;-- Normal setup&#xA;require(&#39;rust-tools&#39;).setup(opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The options shown below are the defaults. You only need to pass the keys to the setup function that you want to be changed, because the defaults are applied for keys that are not provided.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local opts = {&#xA;&#x9;tools = { -- rust-tools options&#xA;&#x9;&#x9;-- automatically set inlay hints (type hints)&#xA;&#x9;&#x9;-- There is an issue due to which the hints are not applied on the first&#xA;&#x9;&#x9;-- opened file. For now, write to the file to trigger a reapplication of&#xA;&#x9;&#x9;-- the hints or just run :RustSetInlayHints.&#xA;&#x9;&#x9;-- default: true&#xA;&#x9;&#x9;autoSetHints = true,&#xA;&#xA;&#x9;&#x9;-- whether to show hover actions inside the hover window&#xA;&#x9;&#x9;-- this overrides the default hover handler so something like lspsaga.nvim&#39;s hover would be overriden by this&#xA;&#x9;&#x9;-- default: true&#xA;&#x9;&#x9;hover_with_actions = true,&#xA;&#xA;&#x9;&#x9;-- how to execute terminal commands&#xA;&#x9;&#x9;-- options right now: termopen / quickfix&#xA;&#x9;&#x9;executor = require(&#34;rust-tools/executors&#34;).termopen,&#xA;&#xA;&#x9;&#x9;-- callback to execute once rust-analyzer is done initializing the workspace&#xA;&#x9;&#x9;-- The callback receives one parameter indicating the `health` of the server: &#34;ok&#34; | &#34;warning&#34; | &#34;error&#34;&#xA;&#x9;&#x9;on_initialized = nil,&#xA;&#xA;&#x9;&#x9;-- These apply to the default RustSetInlayHints command&#xA;&#x9;&#x9;inlay_hints = {&#xA;&#xA;&#x9;&#x9;&#x9;-- Only show inlay hints for the current line&#xA;&#x9;&#x9;&#x9;only_current_line = false,&#xA;&#xA;&#x9;&#x9;&#x9;-- Event which triggers a refersh of the inlay hints.&#xA;&#x9;&#x9;&#x9;-- You can make this &#34;CursorMoved&#34; or &#34;CursorMoved,CursorMovedI&#34; but&#xA;&#x9;&#x9;&#x9;-- not that this may cause higher CPU usage.&#xA;&#x9;&#x9;&#x9;-- This option is only respected when only_current_line and&#xA;&#x9;&#x9;&#x9;-- autoSetHints both are true.&#xA;&#x9;&#x9;&#x9;only_current_line_autocmd = &#34;CursorHold&#34;,&#xA;&#xA;&#x9;&#x9;&#x9;-- whether to show parameter hints with the inlay hints or not&#xA;&#x9;&#x9;&#x9;-- default: true&#xA;&#x9;&#x9;&#x9;show_parameter_hints = true,&#xA;&#xA;&#x9;&#x9;&#x9;-- whether to show variable name before type hints with the inlay hints or not&#xA;&#x9;&#x9;&#x9;-- default: false&#xA;&#x9;&#x9;&#x9;show_variable_name = false,&#xA;&#xA;&#x9;&#x9;&#x9;-- prefix for parameter hints&#xA;&#x9;&#x9;&#x9;-- default: &#34;&amp;lt;-&#34;&#xA;&#x9;&#x9;&#x9;parameter_hints_prefix = &#34;&amp;lt;- &#34;,&#xA;&#xA;&#x9;&#x9;&#x9;-- prefix for all the other hints (type, chaining)&#xA;&#x9;&#x9;&#x9;-- default: &#34;=&amp;gt;&#34;&#xA;&#x9;&#x9;&#x9;other_hints_prefix = &#34;=&amp;gt; &#34;,&#xA;&#xA;&#x9;&#x9;&#x9;-- whether to align to the lenght of the longest line in the file&#xA;&#x9;&#x9;&#x9;max_len_align = false,&#xA;&#xA;&#x9;&#x9;&#x9;-- padding from the left if max_len_align is true&#xA;&#x9;&#x9;&#x9;max_len_align_padding = 1,&#xA;&#xA;&#x9;&#x9;&#x9;-- whether to align to the extreme right or not&#xA;&#x9;&#x9;&#x9;right_align = false,&#xA;&#xA;&#x9;&#x9;&#x9;-- padding from the right if right_align is true&#xA;&#x9;&#x9;&#x9;right_align_padding = 7,&#xA;&#xA;&#x9;&#x9;&#x9;-- The color of the hints&#xA;&#x9;&#x9;&#x9;highlight = &#34;Comment&#34;,&#xA;&#x9;&#x9;},&#xA;&#xA;&#x9;&#x9;-- options same as lsp hover / vim.lsp.util.open_floating_preview()&#xA;&#x9;&#x9;hover_actions = {&#xA;&#x9;&#x9;&#x9;-- the border that is used for the hover window&#xA;&#x9;&#x9;&#x9;-- see vim.api.nvim_open_win()&#xA;&#x9;&#x9;&#x9;border = {&#xA;&#x9;&#x9;&#x9;&#x9;{ &#34;╭&#34;, &#34;FloatBorder&#34; },&#xA;&#x9;&#x9;&#x9;&#x9;{ &#34;─&#34;, &#34;FloatBorder&#34; },&#xA;&#x9;&#x9;&#x9;&#x9;{ &#34;╮&#34;, &#34;FloatBorder&#34; },&#xA;&#x9;&#x9;&#x9;&#x9;{ &#34;│&#34;, &#34;FloatBorder&#34; },&#xA;&#x9;&#x9;&#x9;&#x9;{ &#34;╯&#34;, &#34;FloatBorder&#34; },&#xA;&#x9;&#x9;&#x9;&#x9;{ &#34;─&#34;, &#34;FloatBorder&#34; },&#xA;&#x9;&#x9;&#x9;&#x9;{ &#34;╰&#34;, &#34;FloatBorder&#34; },&#xA;&#x9;&#x9;&#x9;&#x9;{ &#34;│&#34;, &#34;FloatBorder&#34; },&#xA;&#x9;&#x9;&#x9;},&#xA;&#xA;&#x9;&#x9;&#x9;-- whether the hover action window gets automatically focused&#xA;&#x9;&#x9;&#x9;-- default: false&#xA;&#x9;&#x9;&#x9;auto_focus = false,&#xA;&#x9;&#x9;},&#xA;&#xA;&#x9;&#x9;-- settings for showing the crate graph based on graphviz and the dot&#xA;&#x9;&#x9;-- command&#xA;&#x9;&#x9;crate_graph = {&#xA;&#x9;&#x9;&#x9;-- Backend used for displaying the graph&#xA;&#x9;&#x9;&#x9;-- see: https://graphviz.org/docs/outputs/&#xA;&#x9;&#x9;&#x9;-- default: x11&#xA;&#x9;&#x9;&#x9;backend = &#34;x11&#34;,&#xA;&#x9;&#x9;&#x9;-- where to store the output, nil for no output stored (relative&#xA;&#x9;&#x9;&#x9;-- path from pwd)&#xA;&#x9;&#x9;&#x9;-- default: nil&#xA;&#x9;&#x9;&#x9;output = nil,&#xA;&#x9;&#x9;&#x9;-- true for all crates.io and external crates, false only the local&#xA;&#x9;&#x9;&#x9;-- crates&#xA;&#x9;&#x9;&#x9;-- default: true&#xA;&#x9;&#x9;&#x9;full = true,&#xA;&#xA;&#x9;&#x9;&#x9;-- List of backends found on: https://graphviz.org/docs/outputs/&#xA;&#x9;&#x9;&#x9;-- Is used for input validation and autocompletion&#xA;&#x9;&#x9;&#x9;-- Last updated: 2021-08-26&#xA;&#x9;&#x9;&#x9;enabled_graphviz_backends = {&#xA;&#x9;&#x9;&#x9;&#x9;&#34;bmp&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;cgimage&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;canon&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;dot&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;gv&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;xdot&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;xdot1.2&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;xdot1.4&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;eps&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;exr&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;fig&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;gd&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;gd2&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;gif&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;gtk&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ico&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;cmap&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ismap&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;imap&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;cmapx&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;imap_np&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;cmapx_np&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;jpg&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;jpeg&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;jpe&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;jp2&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;json&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;json0&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;dot_json&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;xdot_json&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;pdf&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;pic&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;pct&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;pict&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;plain&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;plain-ext&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;png&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;pov&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ps&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ps2&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;psd&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;sgi&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;svg&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;svgz&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;tga&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;tiff&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;tif&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;tk&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;vml&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;vmlz&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;wbmp&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;webp&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;xlib&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;x11&#34;,&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;&#xA;&#x9;-- all the opts to send to nvim-lspconfig&#xA;&#x9;-- these override the defaults set by rust-tools.nvim&#xA;&#x9;-- see https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer&#xA;&#x9;server = {&#xA;&#x9;&#x9;-- standalone file support&#xA;&#x9;&#x9;-- setting it to false may improve startup time&#xA;&#x9;&#x9;standalone = true,&#xA;&#x9;}, -- rust-analyer options&#xA;&#xA;&#x9;-- debugging stuff&#xA;&#x9;dap = {&#xA;&#x9;&#x9;adapter = {&#xA;&#x9;&#x9;&#x9;type = &#34;executable&#34;,&#xA;&#x9;&#x9;&#x9;command = &#34;lldb-vscode&#34;,&#xA;&#x9;&#x9;&#x9;name = &#34;rt_lldb&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;}&#xA;&#xA;require(&#39;rust-tools&#39;).setup(opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/rust-tools-debug.gif&#34; alt=&#34;debugging&#34;&gt; Read what I wrote above smh&lt;/p&gt; &#xA;&lt;h3&gt;Inlay Hints&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/inlay_hints.png&#34; alt=&#34;inlay hints&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustSetInlayHints&#xA;-- RustDisableInlayHints &#xA;-- RustToggleInlayHints &#xA;&#xA;-- set inlay hints&#xA;require(&#39;rust-tools.inlay_hints&#39;).set_inlay_hints()&#xA;-- disable inlay hints&#xA;require(&#39;rust-tools.inlay_hints&#39;).disable_inlay_hints()&#xA;-- toggle inlay hints&#xA;require(&#39;rust-tools.inlay_hints&#39;).toggle_inlay_hints()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Runnables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/runnables.gif&#34; alt=&#34;runnables&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustRunnables&#xA;require(&#39;rust-tools.runnables&#39;).runnables()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expand Macros Recursively&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/expand_macros_recursively.gif&#34; alt=&#34;expand macros&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustExpandMacro  &#xA;require&#39;rust-tools.expand_macro&#39;.expand_macro()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Move Item Up/Down&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/move_item.gif&#34; alt=&#34;move items&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustMoveItemUp    &#xA;-- RustMoveItemDown    &#xA;local up = true -- true = move up, false = move down&#xA;require&#39;rust-tools.move_item&#39;.move_item(up)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hover Actions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/hover_actions.gif&#34; alt=&#34;hover actions&#34;&gt; Note: To activate hover actions, run the command twice (or your hover keymap if you have &lt;code&gt;hover_with_actions&lt;/code&gt; set to true AND are using &lt;code&gt;vim.lsp.buf.hover()&lt;/code&gt;). This will move you into the window, then press enter on the selection you want. Alternatively, you can set &lt;code&gt;auto_focus&lt;/code&gt; to true in your config and you will automatically enter the hover actions window.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustHoverActions &#xA;require&#39;rust-tools.hover_actions&#39;.hover_actions()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hover Range&lt;/h3&gt; &#xA;&lt;p&gt;Note: Requires rust-analyzer version after 2021-08-02. Shows the type in visual mode when hovering.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustHoverRange &#xA;require&#39;rust-tools.hover_range&#39;.hover_range()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Open Cargo.toml&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/open_cargo_toml.gif&#34; alt=&#34;open cargo&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustOpenCargo&#xA;require&#39;rust-tools.open_cargo_toml&#39;.open_cargo_toml()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parent Module&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/parent_module.gif&#34; alt=&#34;parent module&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustParentModule &#xA;require&#39;rust-tools.parent_module&#39;.parent_module()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Join Lines&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/join_lines.gif&#34; alt=&#34;join lines&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustJoinLines  &#xA;require&#39;rust-tools.join_lines&#39;.join_lines()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Structural Search Replace&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustSSR [query]&#xA;require&#39;rust-tools.ssr&#39;.ssr(query)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View crate graph&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustViewCrateGraph [backend [output]]&#xA;require&#39;rust-tools.crate_graph&#39;.view_crate_graph(backend, output)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Saecki/crates.nvim&#34;&gt;&lt;code&gt;Saecki/crates.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;This plugin draws inspiration from &lt;a href=&#34;https://github.com/akinsho/flutter-tools.nvim&#34;&gt;&lt;code&gt;akinsho/flutter-tools.nvim&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ckosmic/g64</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/ckosmic/g64</id>
    <link href="https://github.com/ckosmic/g64" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Garry&#39;s Mod addon that uses libsm64 to put Mario in the game&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;G64&lt;/h1&gt; &#xA;&lt;p&gt;A Garry&#39;s Mod addon that uses &lt;a href=&#34;https://github.com/libsm64/libsm64/&#34;&gt;libsm64&lt;/a&gt; to put a playable Mario in the game. &lt;br&gt; Note: This requires Windows and 64-bit Garry&#39;s Mod.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download G64 &lt;a href=&#34;https://steamcommunity.com/sharedfiles/filedetails/?id=2814638140&#34;&gt;from the workshop&lt;/a&gt;. Alternatively, clone this repo in your &lt;code&gt;GarrysMod\garrysmod\addons&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;Download the G64 binary module and libsm64 release from the &lt;a href=&#34;https://github.com/ckosmic/g64/releases/latest&#34;&gt;releases page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Obtain a copy of the US version of the Super Mario 64 ROM (MD5: &lt;code&gt;20b854b239203baf6c961b850a4a51a2&lt;/code&gt;, SHA1: &lt;code&gt;9bef1128717f958171a4afac3ed78ee2bb4e86ce&lt;/code&gt;). No, I will not tell you how or where to get this, nor will I send it to you.&lt;/li&gt; &#xA; &lt;li&gt;Now that you have every file you need, extract the release you downloaded from here into your GarrysMod folder: &lt;code&gt;steamapps\common\GarrysMod&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To check if you did this correctly, check that both &lt;code&gt;GarrysMod\bin\win64\sm64.dll&lt;/code&gt; and &lt;code&gt;GarrysMod\garrysmod\lua\bin\gmcl_g64_win64.dll&lt;/code&gt; exist.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you&#39;re on the 64-bit version of the game &lt;strong&gt;or this will not work at all.&lt;/strong&gt; To do this, right click on Garry&#39;s Mod in your Steam library and click &lt;code&gt;Properties...&lt;/code&gt;. Then click &lt;code&gt;BETAS&lt;/code&gt; and select &lt;code&gt;x86-64 - Chromium + 64-bit binaries&lt;/code&gt; from the dropdown.&lt;/li&gt; &#xA; &lt;li&gt;Now that Gmod is in 64-bit mode, open it and load a map. Open the spawn menu and under Utilities &amp;gt; G64, set the path to the ROM you obtained.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You&#39;re now all set! Spawn Mario from Entities &amp;gt; G64 and if you did everything right, Mario will spawn. Enjoy!&lt;/p&gt; &#xA;&lt;h2&gt;See More&lt;/h2&gt; &#xA;&lt;p&gt;Source to my gmod fork of libsm64 can be found here: &lt;a href=&#34;https://github.com/ckosmic/libsm64/tree/gmod&#34;&gt;https://github.com/ckosmic/libsm64/tree/gmod&lt;/a&gt; &lt;br&gt; Source to the G64 binary module can be found here: &lt;a href=&#34;https://github.com/ckosmic/libsm64-gmod&#34;&gt;https://github.com/ckosmic/libsm64-gmod&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Many features of this addon (like sound and multiplayer) would not be possible without @dylanpdx&#39;s &lt;a href=&#34;https://github.com/Retro64Mod/libsm64-retro64/&#34;&gt;Retro64Mod fork of libsm64&lt;/a&gt;. &lt;br&gt; &lt;a href=&#34;https://github.com/SnisnotAl/SysTimeTimers&#34;&gt;SysTimeTimers&lt;/a&gt; by @SnisnotAI &lt;br&gt; &lt;a href=&#34;https://github.com/h3xcat/gmod-luabsp/raw/master/luabsp.lua&#34;&gt;gmod-luabsp&lt;/a&gt; by @h3xcat&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>numToStr/Comment.nvim</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/numToStr/Comment.nvim</id>
    <link href="https://github.com/numToStr/Comment.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🧠 💪 // Smart and powerful comment plugin for neovim. Supports treesitter, dot repeat, left-right/up-down motions, hooks, and more&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;// Comment.nvim &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;sup&gt;⚡ Smart and Powerful commenting plugin for neovim ⚡&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/42532967/136532939-926a8350-84b7-4e78-b045-fe21b5947388.gif&#34; alt=&#34;Comment.nvim&#34; title=&#34;Commenting go brrrr&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;✨ Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports treesitter. &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#treesitter&#34;&gt;Read more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;code&gt;commentstring&lt;/code&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#commentstring&#34;&gt;Read more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prefers single-line/linewise comments&lt;/li&gt; &#xA; &lt;li&gt;Supports line (&lt;code&gt;//&lt;/code&gt;) and block (&lt;code&gt;/* */&lt;/code&gt;) comments&lt;/li&gt; &#xA; &lt;li&gt;Dot (&lt;code&gt;.&lt;/code&gt;) repeat support for &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;gbc&lt;/code&gt; and friends&lt;/li&gt; &#xA; &lt;li&gt;Count support for &lt;code&gt;[count]gcc&lt;/code&gt; and &lt;code&gt;[count]gbc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Left-right (&lt;code&gt;gcw&lt;/code&gt; &lt;code&gt;gc$&lt;/code&gt;) and Up-Down (&lt;code&gt;gc2j&lt;/code&gt; &lt;code&gt;gc4k&lt;/code&gt;) motions&lt;/li&gt; &#xA; &lt;li&gt;Use with text-objects (&lt;code&gt;gci{&lt;/code&gt; &lt;code&gt;gbat&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Supports pre and post hooks&lt;/li&gt; &#xA; &lt;li&gt;Ignore certain lines, powered by Lua regex&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🚀 Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;numToStr/Comment.nvim&#39;,&#xA;    config = function()&#xA;        require(&#39;Comment&#39;).setup()&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;numToStr/Comment.nvim&#39;&#xA;&#xA;&#34; Somewhere after plug#end()&#xA;lua require(&#39;Comment&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;setup&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;⚒️ Setup&lt;/h3&gt; &#xA;&lt;p&gt;First you need to call the &lt;code&gt;setup()&lt;/code&gt; method to create the default mappings.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;Comment&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VimL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;Comment&#39;).setup()&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;config&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuration (optional)&lt;/h4&gt; &#xA;&lt;p&gt;Following are the &lt;strong&gt;default&lt;/strong&gt; config for the &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&#34;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;. If you want to override, just modify the option that you want then it will be merged with the default config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    ---Add a space b/w comment and the line&#xA;    ---@type boolean|fun():boolean&#xA;    padding = true,&#xA;&#xA;    ---Whether the cursor should stay at its position&#xA;    ---NOTE: This only affects NORMAL mode mappings and doesn&#39;t work with dot-repeat&#xA;    ---@type boolean&#xA;    sticky = true,&#xA;&#xA;    ---Lines to be ignored while comment/uncomment.&#xA;    ---Could be a regex string or a function that returns a regex string.&#xA;    ---Example: Use &#39;^$&#39; to ignore empty lines&#xA;    ---@type string|fun():string&#xA;    ignore = nil,&#xA;&#xA;    ---LHS of toggle mappings in NORMAL + VISUAL mode&#xA;    ---@type table&#xA;    toggler = {&#xA;        ---Line-comment toggle keymap&#xA;        line = &#39;gcc&#39;,&#xA;        ---Block-comment toggle keymap&#xA;        block = &#39;gbc&#39;,&#xA;    },&#xA;&#xA;    ---LHS of operator-pending mappings in NORMAL + VISUAL mode&#xA;    ---@type table&#xA;    opleader = {&#xA;        ---Line-comment keymap&#xA;        line = &#39;gc&#39;,&#xA;        ---Block-comment keymap&#xA;        block = &#39;gb&#39;,&#xA;    },&#xA;&#xA;    ---LHS of extra mappings&#xA;    ---@type table&#xA;    extra = {&#xA;        ---Add comment on the line above&#xA;        above = &#39;gcO&#39;,&#xA;        ---Add comment on the line below&#xA;        below = &#39;gco&#39;,&#xA;        ---Add comment at the end of line&#xA;        eol = &#39;gcA&#39;,&#xA;    },&#xA;&#xA;    ---Create basic (operator-pending) and extended mappings for NORMAL + VISUAL mode&#xA;    ---NOTE: If `mappings = false` then the plugin won&#39;t create any mappings&#xA;    ---@type boolean|table&#xA;    mappings = {&#xA;        ---Operator-pending mapping&#xA;        ---Includes `gcc`, `gbc`, `gc[count]{motion}` and `gb[count]{motion}`&#xA;        ---NOTE: These mappings can be changed individually by `opleader` and `toggler` config&#xA;        basic = true,&#xA;        ---Extra mapping&#xA;        ---Includes `gco`, `gcO`, `gcA`&#xA;        extra = true,&#xA;        ---Extended mapping&#xA;        ---Includes `g&amp;gt;`, `g&amp;lt;`, `g&amp;gt;[count]{motion}` and `g&amp;lt;[count]{motion}`&#xA;        extended = false,&#xA;    },&#xA;&#xA;    ---Pre-hook, called before commenting the line&#xA;    ---@type fun(ctx: CommentCtx):string&#xA;    pre_hook = nil,&#xA;&#xA;    ---Post-hook, called after commenting is done&#xA;    ---@type fun(ctx: CommentCtx)&#xA;    post_hook = nil,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔥 Usage&lt;/h3&gt; &#xA;&lt;p&gt;When you call &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&#34;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; method, &lt;code&gt;Comment.nvim&lt;/code&gt; sets up some basic mapping which can used in NORMAL and VISUAL mode to get you started with the pleasure of commenting stuff out.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;basic-mappings&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Basic mappings&lt;/h4&gt; &#xA;&lt;p&gt;These mappings are enabled by default. (config: &lt;code&gt;mappings.basic&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NORMAL mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;`gcc` - Toggles the current line using linewise comment&#xA;`gbc` - Toggles the current line using blockwise comment&#xA;`[count]gcc` - Toggles the number of line given as a prefix-count using linewise&#xA;`[count]gbc` - Toggles the number of line given as a prefix-count using blockwise&#xA;`gc[count]{motion}` - (Op-pending) Toggles the region using linewise comment&#xA;`gb[count]{motion}` - (Op-pending) Toggles the region using blockwise comment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VISUAL mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;`gc` - Toggles the region using linewise comment&#xA;`gb` - Toggles the region using blockwise comment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;extra-mappings&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Extra mappings&lt;/h4&gt; &#xA;&lt;p&gt;These mappings are enabled by default. (config: &lt;code&gt;mappings.extra&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NORMAL mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;`gco` - Insert comment to the next line and enters INSERT mode&#xA;`gcO` - Insert comment to the previous line and enters INSERT mode&#xA;`gcA` - Insert comment to end of the current line and enters INSERT mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;extended-mappings&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Extended mappings&lt;/h4&gt; &#xA;&lt;p&gt;These mappings are disabled by default. (config: &lt;code&gt;mappings.extended&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NORMAL mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;`g&amp;gt;[count]{motion}` - (Op-pending) Comments the region using linewise comment&#xA;`g&amp;gt;c` - Comments the current line using linewise comment&#xA;`g&amp;gt;b` - Comments the current line using blockwise comment&#xA;`g&amp;lt;[count]{motion}` - (Op-pending) Uncomments the region using linewise comment&#xA;`g&amp;lt;c` - Uncomments the current line using linewise comment&#xA;`g&amp;lt;b`- Uncomments the current line using blockwise comment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VISUAL mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;`g&amp;gt;` - Comments the region using single line&#xA;`g&amp;lt;` - Unomments the region using single line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Examples&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;# Linewise&#xA;&#xA;`gcw` - Toggle from the current cursor position to the next word&#xA;`gc$` - Toggle from the current cursor position to the end of line&#xA;`gc}` - Toggle until the next blank line&#xA;`gc5j` - Toggle 5 lines after the current cursor position&#xA;`gc8k` - Toggle 8 lines before the current cursor position&#xA;`gcip` - Toggle inside of paragraph&#xA;`gca}` - Toggle around curly brackets&#xA;&#xA;# Blockwise&#xA;&#xA;`gb2}` - Toggle until the 2 next blank line&#xA;`gbaf` - Toggle comment around a function (w/ LSP/treesitter support)&#xA;`gbac` - Toggle comment around a class (w/ LSP/treesitter support)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;api&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;⚙️ API&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/doc/plugs.md&#34;&gt;Plug Mappings&lt;/a&gt; - Excellent for creating custom keybindings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/doc/API.md&#34;&gt;Lua API&lt;/a&gt; - Details the Lua API. Great for making custom comment function.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;treesitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🌳 Treesitter&lt;/h3&gt; &#xA;&lt;p&gt;This plugin has native &lt;strong&gt;treesitter&lt;/strong&gt; support for calculating &lt;code&gt;commentstring&lt;/code&gt; which works for multiple (injected/embedded) languages like Vue or Markdown. But due to the nature of the parsed tree, this implementation has some known limitations.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;No &lt;code&gt;jsx/tsx&lt;/code&gt; support. Its implementation was quite complicated.&lt;/li&gt; &#xA; &lt;li&gt;Invalid comment on the region where one language ends and the other starts. &lt;a href=&#34;https://github.com/numToStr/Comment.nvim/pull/62#issuecomment-972790418&#34;&gt;Read more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unexpected comment on a line with multiple languages. &lt;a href=&#34;https://github.com/numToStr/Comment.nvim/issues/144&#34;&gt;#144&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For advance use cases, use &lt;a href=&#34;https://github.com/JoosepAlviste/nvim-ts-context-commentstring&#34;&gt;nvim-ts-context-commentstring&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#pre-hook&#34;&gt;&lt;code&gt;pre_hook&lt;/code&gt;&lt;/a&gt; section for the integration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;hooks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🎣 Hooks&lt;/h3&gt; &#xA;&lt;p&gt;There are two hook methods i.e &lt;code&gt;pre_hook&lt;/code&gt; and &lt;code&gt;post_hook&lt;/code&gt; which are called before comment and after comment respectively. Both should be provided during &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&#34;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;pre-hook&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pre_hook&lt;/code&gt; - This method is called with a &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#comment-context&#34;&gt;&lt;code&gt;ctx&lt;/code&gt;&lt;/a&gt; argument before comment/uncomment is started. It can be used to return a custom &lt;code&gt;commentstring&lt;/code&gt; which will be used for comment/uncomment the lines. You can use something like &lt;a href=&#34;https://github.com/JoosepAlviste/nvim-ts-context-commentstring&#34;&gt;nvim-ts-context-commentstring&lt;/a&gt; to compute the commentstring using treesitter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- NOTE: The example below is a proper integration and it is RECOMMENDED.&#xA;{&#xA;    ---@param ctx CommentCtx&#xA;    pre_hook = function(ctx)&#xA;        -- Only calculate commentstring for tsx filetypes&#xA;        if vim.bo.filetype == &#39;typescriptreact&#39; then&#xA;            local U = require(&#39;Comment.utils&#39;)&#xA;&#xA;            -- Determine whether to use linewise or blockwise commentstring&#xA;            local type = ctx.ctype == U.ctype.line and &#39;__default&#39; or &#39;__multiline&#39;&#xA;&#xA;            -- Determine the location where to calculate commentstring from&#xA;            local location = nil&#xA;            if ctx.ctype == U.ctype.block then&#xA;                location = require(&#39;ts_context_commentstring.utils&#39;).get_cursor_location()&#xA;            elseif ctx.cmotion == U.cmotion.v or ctx.cmotion == U.cmotion.V then&#xA;                location = require(&#39;ts_context_commentstring.utils&#39;).get_visual_start_location()&#xA;            end&#xA;&#xA;            return require(&#39;ts_context_commentstring.internal&#39;).calculate_commentstring({&#xA;                key = type,&#xA;                location = location,&#xA;            })&#xA;        end&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;post-hook&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;post_hook&lt;/code&gt; - This method is called after commenting is done. It receives the same &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#comment-context&#34;&gt;&lt;code&gt;ctx&lt;/code&gt;&lt;/a&gt; argument as &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#pre_hook&#34;&gt;&lt;code&gt;pre_hook&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    ---@param ctx CommentCtx&#xA;    post_hook = function(ctx)&#xA;        if ctx.range.srow == ctx.range.erow then&#xA;            -- do something with the current line&#xA;        else&#xA;            -- do something with lines range&#xA;        end&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;post_hook&lt;/code&gt; can be implemented to cover some niche use cases like the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using newlines instead of padding e.g. for commenting out code in C with &lt;code&gt;#if 0&lt;/code&gt;. See an example &lt;a href=&#34;https://github.com/numToStr/Comment.nvim/issues/38#issuecomment-945082507&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Duplicating the commented block (using &lt;code&gt;pre_hook&lt;/code&gt;) and moving the cursor to the next block (using &lt;code&gt;post_hook&lt;/code&gt;). See &lt;a href=&#34;https://github.com/numToStr/Comment.nvim/issues/70&#34;&gt;this&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: When pressing &lt;code&gt;gc&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt; and friends, &lt;code&gt;cmode&lt;/code&gt; (Comment mode) inside &lt;code&gt;pre_hook&lt;/code&gt; will always be toggle because when pre-hook is called, in that moment we don&#39;t know whether &lt;code&gt;gc&lt;/code&gt; or &lt;code&gt;gb&lt;/code&gt; will comment or uncomment the lines. But luckily, we do know this before &lt;code&gt;post_hook&lt;/code&gt; and this will always receive either comment or uncomment status&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🚫 Ignoring lines&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;ignore&lt;/code&gt; to ignore certain lines during comment/uncomment. It can takes lua regex string or a function that returns a regex string and should be provided during &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&#34;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Ignore only works when with linewise comment. This is by design. As ignoring lines in block comments doesn&#39;t make that much sense.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;code&gt;string&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- ignores empty lines&#xA;ignore = &#39;^$&#39;&#xA;&#xA;-- ignores line that starts with `local` (excluding any leading whitespace)&#xA;ignore = &#39;^(%s*)local&#39;&#xA;&#xA;-- ignores any lines similar to arrow function&#xA;ignore = &#39;^const(.*)=(%s?)%((.*)%)(%s?)=&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    ignore = function()&#xA;        -- Only ignore empty lines for lua files&#xA;        if vim.bo.filetype == &#39;lua&#39; then&#xA;            return &#39;^$&#39;&#xA;        end&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;languages&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🗨️ Filetypes + Languages&lt;/h3&gt; &#xA;&lt;p&gt;Most languages/filetypes have native support for comments via &lt;code&gt;commentstring&lt;/code&gt; but there might be a filetype that is not supported. There are two ways to enable commenting for unsupported filetypes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You can set &lt;code&gt;commentstring&lt;/code&gt; for that particular filetype like the following&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.bo.commentstring = &#39;//%s&#39;&#xA;&#xA;-- or&#xA;vim.api.nvim_command(&#39;set commentstring=//%s&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Run &lt;code&gt;:h commentstring&lt;/code&gt; for more help&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;You can also use this plugin interface to store both line and block commentstring for the filetype. You can treat this as a more powerful version of the &lt;code&gt;commentstring&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ft = require(&#39;Comment.ft&#39;)&#xA;&#xA;-- 1. Using set function&#xA;&#xA;-- Just set only line comment&#xA;ft.set(&#39;yaml&#39;, &#39;#%s&#39;)&#xA;&#xA;-- Or set both line and block commentstring&#xA;-- You can also chain the set calls&#xA;ft.set(&#39;javascript&#39;, {&#39;//%s&#39;, &#39;/*%s*/&#39;}).set(&#39;conf&#39;, &#39;#%s&#39;)&#xA;&#xA;-- 2. Metatable magic&#xA;&#xA;-- One filetype at a time&#xA;ft.javascript = {&#39;//%s&#39;, &#39;/*%s*/&#39;}&#xA;ft.yaml = &#39;#%s&#39;&#xA;&#xA;-- Multiple filetypes&#xA;ft({&#39;go&#39;, &#39;rust&#39;}, {&#39;//%s&#39;, &#39;/*%s*/&#39;})&#xA;ft({&#39;toml&#39;, &#39;graphql&#39;}, &#39;#%s&#39;)&#xA;&#xA;-- 3. Get the whole set of commentstring&#xA;ft.lang(&#39;lua&#39;) -- { &#39;--%s&#39;, &#39;--[[%s]]&#39; }&#xA;ft.lang(&#39;javascript&#39;) -- { &#39;//%s&#39;, &#39;/*%s*/&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;PR(s) are welcome to add more commentstring inside the plugin&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a id=&#34;commentstring&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🧵 Comment String&lt;/h3&gt; &#xA;&lt;p&gt;Although, &lt;code&gt;Comment.nvim&lt;/code&gt; supports neovim&#39;s &lt;code&gt;commentstring&lt;/code&gt; but unfortunately it has the least priority. The commentstring is taken from the following place in the respective order.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#hooks&#34;&gt;&lt;code&gt;pre_hook&lt;/code&gt;&lt;/a&gt; - If a string is returned from this method then it will be used for commenting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#languages&#34;&gt;&lt;code&gt;ft_table&lt;/code&gt;&lt;/a&gt; - If the current filetype is found in the table, then the string there will be used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;commentstring&lt;/code&gt; - Neovim&#39;s native commentstring for the filetype&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;commentstring-caveat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There is one caveat with this approach. If someone sets the &lt;code&gt;commentstring&lt;/code&gt; (w/o returning a string) from the &lt;code&gt;pre_hook&lt;/code&gt; method and if the current filetype also exists in the &lt;code&gt;ft_table&lt;/code&gt; then the commenting will be done using the string in &lt;code&gt;ft_table&lt;/code&gt; instead of using &lt;code&gt;commentstring&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a id=&#34;comment-context&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🧠 Comment Context&lt;/h3&gt; &#xA;&lt;p&gt;The following object is provided as an argument to &lt;code&gt;pre_hook&lt;/code&gt; and &lt;code&gt;post_hook&lt;/code&gt; functions.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I am just placing it here just for documentation purpose&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---Comment context&#xA;---@class CommentCtx&#xA;---@field ctype CommentType&#xA;---@field cmode CommentMode&#xA;---@field cmotion CommentMotion&#xA;---@field range CommentRange&#xA;&#xA;---Range of the selection that needs to be commented&#xA;---@class CommentRange&#xA;---@field srow number Starting row&#xA;---@field scol number Starting column&#xA;---@field erow number Ending row&#xA;---@field ecol number Ending column&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;CommentType&lt;/code&gt;, &lt;code&gt;CommentMode&lt;/code&gt; and &lt;code&gt;CommentMotion&lt;/code&gt; all of them are exported from the plugin&#39;s utils for reuse&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;Comment.utils&#39;).ctype.{line,block}&#xA;&#xA;require(&#39;Comment.utils&#39;).cmode.{toggle,comment,uncomment}&#xA;&#xA;require(&#39;Comment.utils&#39;).cmotion.{line,char,v,V}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🤝 Contributing&lt;/h3&gt; &#xA;&lt;p&gt;There are multiple ways to contribute reporting/fixing bugs, feature requests. You can also submit commentstring to this plugin by updating &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/lua/Comment/ft.lua&#34;&gt;ft.lua&lt;/a&gt; and sending PR.&lt;/p&gt; &#xA;&lt;h3&gt;📺 Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-InmtHhk2qM&#34;&gt;TakeTuesday E02: Comment.nvim&lt;/a&gt; by &lt;a href=&#34;https://github.com/tjdevries&#34;&gt;TJ DeVries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;💐 Credits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomtom/tcomment_vim&#34;&gt;tcomment&lt;/a&gt; - To be with me forever and motivated me to write this.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/terrortylor/nvim-comment&#34;&gt;nvim-comment&lt;/a&gt; - Little and less powerful cousin. Also I took some code from it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/b3nj5m1n/kommentary&#34;&gt;kommentary&lt;/a&gt; - Nicely done plugin but lacks some features. But it helped me to design this plugin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🚗 Roadmap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Doc comment i.e &lt;code&gt;/**%s*/&lt;/code&gt; (js), &lt;code&gt;///%s&lt;/code&gt; (rust)&lt;/li&gt; &#xA; &lt;li&gt;Header comment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;----------------------&#xA;-- This is a header --&#xA;----------------------&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>akinsho/bufferline.nvim</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/akinsho/bufferline.nvim</id>
    <link href="https://github.com/akinsho/bufferline.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A snazzy bufferline for Neovim&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/akinsho/bufferline.nvim/actions/workflows/test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/akinsho/bufferline.nvim/actions/workflows/test.yaml/badge.svg?sanitize=true&#34; alt=&#34;Run tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; bufferline.nvim &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A &lt;i&gt;snazzy&lt;/i&gt; 💅 buffer line (with tabpage integration) for Neovim built using &lt;b&gt;lua&lt;/b&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111992693-9c6a9b00-8b0d-11eb-8c39-19db58583061.gif&#34; alt=&#34;Demo GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin shamelessly attempts to emulate the aesthetics of GUI text editors/Doom Emacs. It was inspired by a screenshot of DOOM Emacs using &lt;a href=&#34;https://github.com/ema2159/centaur-tabs&#34;&gt;centaur tabs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#alternate-styling&#34;&gt;Alternate styling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#tabpages-mode&#34;&gt;Tabpages mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#lsp-error-indicators&#34;&gt;LSP error indicators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#buffer-groups&#34;&gt;Buffer groups&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#sidebar-offset&#34;&gt;Sidebar offset&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#buffer-numbers&#34;&gt;Buffer numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#buffer-pick&#34;&gt;Buffer pick&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#unique-buffer-names&#34;&gt;Unique buffer names&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#close-icons&#34;&gt;Close icons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#buffer-re-ordering&#34;&gt;Buffer re-ordering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#pinning-buffers&#34;&gt;Pinning buffers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#caveats&#34;&gt;Caveats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#feature-overview&#34;&gt;Feature overview&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#tabpages&#34;&gt;Tabpages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#lsp-indicators&#34;&gt;LSP indicators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#conditional-buffer-based-lsp-indicators&#34;&gt;Conditional buffer based LSP indicators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#groups&#34;&gt;Groups&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#pinning&#34;&gt;Pinning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#regular-tab-sizes&#34;&gt;Regular tab sizes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#numbers&#34;&gt;Numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#sorting&#34;&gt;Sorting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#sidebar-offset-1&#34;&gt;Sidebar offset&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#buffer-pick-functionality&#34;&gt;Buffer pick functionality&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#mouse-actions&#34;&gt;Mouse actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#custom-area&#34;&gt;Custom area&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Colours derived from colorscheme where possible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sort buffers by &lt;code&gt;extension&lt;/code&gt;, &lt;code&gt;directory&lt;/code&gt; or pass in a custom compare function&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configuration via lua functions for greater customization.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Alternate styling&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111992989-fec39b80-8b0d-11eb-851b-010641196a04.png&#34; alt=&#34;slanted tabs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: some terminals require special characters to be padded so set the style to &lt;code&gt;padded_slant&lt;/code&gt; if the appearance isn&#39;t right in your terminal emulator. Please keep in mind though that results may vary depending on your terminal emulator of choice and this style might will not work for all terminals&lt;/p&gt; &#xA;&lt;p&gt;see: &lt;code&gt;:h bufferline-styling&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Tabpages mode&lt;/h4&gt; &#xA;&lt;img width=&#34;800&#34; alt=&#34;Screen Shot 2022-03-08 at 17 39 57&#34; src=&#34;https://user-images.githubusercontent.com/22454918/157337891-1848da24-69d6-4970-96ee-cf65b2a25c46.png&#34;&gt; &#xA;&lt;p&gt;You can use this plugin to visualise only native vim tabpages.&lt;/p&gt; &#xA;&lt;h4&gt;LSP error indicators&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111993085-1d299700-8b0e-11eb-96eb-c1c289e36b08.png&#34; alt=&#34;LSP error&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Buffer Groups&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/132410772-0a4c0b95-63bb-4281-8a4e-a652458c3f0f.gif&#34; alt=&#34;bufferline_group_toggle&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Sidebar offset&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/117363338-5fd3e280-aeb4-11eb-99f2-5ec33dff6f31.png&#34; alt=&#34;explorer header&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Buffer numbers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/119562833-b5f2c200-bd9e-11eb-81d3-06876024bf30.png&#34; alt=&#34;bufferline with numbers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ordinal number and buffer number with a customized number styles.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/130784872-936d4c55-b9dd-413b-871d-7bc66caf8f17.png&#34; alt=&#34;numbers&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Buffer pick&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111993296-5bbf5180-8b0e-11eb-9ad9-fcf9619436fd.gif&#34; alt=&#34;bufferline pick&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Unique buffer names&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111993343-6da0f480-8b0e-11eb-8d93-44019458d2c9.png&#34; alt=&#34;duplicate names&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Close icons&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111993390-7a254d00-8b0e-11eb-9951-43b4350f6a29.gif&#34; alt=&#34;close button&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Buffer re-ordering&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111993463-91643a80-8b0e-11eb-87f0-26acfe92c021.gif&#34; alt=&#34;re-order buffers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This order can be persisted between sessions (enabled by default).&lt;/p&gt; &#xA;&lt;h4&gt;Pinning buffers&lt;/h4&gt; &#xA;&lt;img width=&#34;899&#34; alt=&#34;Screen Shot 2022-03-31 at 18 13 50&#34; src=&#34;https://user-images.githubusercontent.com/22454918/161112867-ba48fdf6-42ee-4cd3-9e1a-7118c4a2738b.png&#34;&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.7+&lt;/li&gt; &#xA; &lt;li&gt;A patched font (see &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;nerd fonts&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A colorscheme (either your custom highlight or a maintained one somewhere)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;It is advised that you specify either the latest tag or a specific tag and bump them manually if you&#39;d prefer to inspect changes before updating. If you&#39;d like to use an older version of the plugin compatible with nvim-0.6.1 and below please change your tag to &lt;code&gt;tag = &#34;v1.*&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- using packer.nvim&#xA;use {&#39;akinsho/bufferline.nvim&#39;, tag = &#34;v2.*&#34;, requires = &#39;kyazdani42/nvim-web-devicons&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vimscript&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;kyazdani42/nvim-web-devicons&#39; &#34; Recommended (for coloured icons)&#xA;&#34; Plug &#39;ryanoasis/vim-devicons&#39; Icons without colours&#xA;Plug &#39;akinsho/bufferline.nvim&#39;, { &#39;tag&#39;: &#39;v2.*&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What about Tabs?&lt;/h2&gt; &#xA;&lt;p&gt;This plugin, as the name implies, shows a user their buffers but can also show tabs if using the &lt;code&gt;tabs&lt;/code&gt; mode. If you&#39;re unclear as to what the difference is please read &lt;code&gt;:help tabpage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This won&#39;t appeal to everyone&#39;s tastes. This plugin is opinionated about how the tabline looks, it&#39;s unlikely to please everyone.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I want to prevent this becoming a pain to maintain so I&#39;ll be conservative about what I add.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This plugin relies on some basic highlights being set by your colour scheme i.e. &lt;code&gt;Normal&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;TabLineSel&lt;/code&gt; (&lt;code&gt;WildMenu&lt;/code&gt; as fallback), &lt;code&gt;Comment&lt;/code&gt;. It&#39;s unlikely to work with all colour schemes. You can either try manually overriding the colours or manually creating these highlight groups before loading this plugin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the contrast in your colour scheme isn&#39;t very high, think an all black colour scheme, some of the highlights of this plugin won&#39;t really work as intended since it depends on darkening things.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the docs for details &lt;code&gt;:h bufferline.nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You need to be using &lt;code&gt;termguicolors&lt;/code&gt; for this plugin to work, as it reads the hex &lt;code&gt;gui&lt;/code&gt; color values of various highlight groups.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vimscript&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; In your init.lua or init.vim&#xA;set termguicolors&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#34;bufferline&#34;).setup{}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.termguicolors = true&#xA;require(&#34;bufferline&#34;).setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can close buffers by clicking the close icon or by &lt;em&gt;right clicking&lt;/em&gt; the tab anywhere&lt;/p&gt; &#xA;&lt;p&gt;A few of this plugins commands can be mapped for ease of use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; These commands will navigate through buffers in order regardless of which mode you are using&#xA;&#34; e.g. if you change the order of buffers :bnext and :bprevious will not respect the custom ordering&#xA;nnoremap &amp;lt;silent&amp;gt;[b :BufferLineCycleNext&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;b] :BufferLineCyclePrev&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; These commands will move the current buffer backwards or forwards in the bufferline&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;mymap&amp;gt; :BufferLineMoveNext&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;mymap&amp;gt; :BufferLineMovePrev&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; These commands will sort buffers by directory, language, or a custom criteria&#xA;nnoremap &amp;lt;silent&amp;gt;be :BufferLineSortByExtension&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;bd :BufferLineSortByDirectory&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;mymap&amp;gt; :lua require&#39;bufferline&#39;.sort_buffers_by(function (buf_a, buf_b) return buf_a.id &amp;lt; buf_b.id end)&amp;lt;CR&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you manually arrange your buffers using &lt;code&gt;:BufferLineMove{Prev|Next}&lt;/code&gt; during an nvim session this can be persisted for the session. This is enabled by default but you need to ensure that your &lt;code&gt;sessionoptions+=globals&lt;/code&gt; otherwise the session file will not track global variables which is the mechanism used to store your sort order.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;bufferline&#39;).setup {&#xA;  options = {&#xA;    mode = &#34;buffers&#34;, -- set to &#34;tabs&#34; to only show tabpages instead&#xA;    numbers = &#34;none&#34; | &#34;ordinal&#34; | &#34;buffer_id&#34; | &#34;both&#34; | function({ ordinal, id, lower, raise }): string,&#xA;    close_command = &#34;bdelete! %d&#34;,       -- can be a string | function, see &#34;Mouse actions&#34;&#xA;    right_mouse_command = &#34;bdelete! %d&#34;, -- can be a string | function, see &#34;Mouse actions&#34;&#xA;    left_mouse_command = &#34;buffer %d&#34;,    -- can be a string | function, see &#34;Mouse actions&#34;&#xA;    middle_mouse_command = nil,          -- can be a string | function, see &#34;Mouse actions&#34;&#xA;    -- NOTE: this plugin is designed with this icon in mind,&#xA;    -- and so changing this is NOT recommended, this is intended&#xA;    -- as an escape hatch for people who cannot bear it for whatever reason&#xA;    indicator_icon = &#39;▎&#39;,&#xA;    buffer_close_icon = &#39;&#39;,&#xA;    modified_icon = &#39;●&#39;,&#xA;    close_icon = &#39;&#39;,&#xA;    left_trunc_marker = &#39;&#39;,&#xA;    right_trunc_marker = &#39;&#39;,&#xA;    --- name_formatter can be used to change the buffer&#39;s label in the bufferline.&#xA;    --- Please note some names can/will break the&#xA;    --- bufferline so use this at your discretion knowing that it has&#xA;    --- some limitations that will *NOT* be fixed.&#xA;    name_formatter = function(buf)  -- buf contains a &#34;name&#34;, &#34;path&#34; and &#34;bufnr&#34;&#xA;      -- remove extension from markdown files for example&#xA;      if buf.name:match(&#39;%.md&#39;) then&#xA;        return vim.fn.fnamemodify(buf.name, &#39;:t:r&#39;)&#xA;      end&#xA;    end,&#xA;    max_name_length = 18,&#xA;    max_prefix_length = 15, -- prefix used when a buffer is de-duplicated&#xA;    tab_size = 18,&#xA;    diagnostics = false | &#34;nvim_lsp&#34; | &#34;coc&#34;,&#xA;    diagnostics_update_in_insert = false,&#xA;    diagnostics_indicator = function(count, level, diagnostics_dict, context)&#xA;      return &#34;(&#34;..count..&#34;)&#34;&#xA;    end,&#xA;    -- NOTE: this will be called a lot so don&#39;t do any heavy processing here&#xA;    custom_filter = function(buf_number, buf_numbers)&#xA;      -- filter out filetypes you don&#39;t want to see&#xA;      if vim.bo[buf_number].filetype ~= &#34;&amp;lt;i-dont-want-to-see-this&amp;gt;&#34; then&#xA;        return true&#xA;      end&#xA;      -- filter out by buffer name&#xA;      if vim.fn.bufname(buf_number) ~= &#34;&amp;lt;buffer-name-I-dont-want&amp;gt;&#34; then&#xA;        return true&#xA;      end&#xA;      -- filter out based on arbitrary rules&#xA;      -- e.g. filter out vim wiki buffer from tabline in your work repo&#xA;      if vim.fn.getcwd() == &#34;&amp;lt;work-repo&amp;gt;&#34; and vim.bo[buf_number].filetype ~= &#34;wiki&#34; then&#xA;        return true&#xA;      end&#xA;      -- filter out by it&#39;s index number in list (don&#39;t show first buffer)&#xA;      if buf_numbers[1] ~= buf_number then&#xA;        return true&#xA;      end&#xA;    end,&#xA;    offsets = {{filetype = &#34;NvimTree&#34;, text = &#34;File Explorer&#34; | function , text_align = &#34;left&#34; | &#34;center&#34; | &#34;right&#34;}},&#xA;    color_icons = true | false, -- whether or not to add the filetype icon highlights&#xA;    show_buffer_icons = true | false, -- disable filetype icons for buffers&#xA;    show_buffer_close_icons = true | false,&#xA;    show_buffer_default_icon = true | false, -- whether or not an unrecognised filetype should show a default icon&#xA;    show_close_icon = true | false,&#xA;    show_tab_indicators = true | false,&#xA;    persist_buffer_sort = true, -- whether or not custom sorted buffers should persist&#xA;    -- can also be a table containing 2 custom separators&#xA;    -- [focused and unfocused]. eg: { &#39;|&#39;, &#39;|&#39; }&#xA;    separator_style = &#34;slant&#34; | &#34;thick&#34; | &#34;thin&#34; | { &#39;any&#39;, &#39;any&#39; },&#xA;    enforce_regular_tabs = false | true,&#xA;    always_show_bufferline = true | false,&#xA;    sort_by = &#39;insert_after_current&#39; |&#39;insert_at_end&#39; | &#39;id&#39; | &#39;extension&#39; | &#39;relative_directory&#39; | &#39;directory&#39; | &#39;tabs&#39; | function(buffer_a, buffer_b)&#xA;      -- add custom logic&#xA;      return buffer_a.modified &amp;gt; buffer_b.modified&#xA;    end&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feature overview&lt;/h2&gt; &#xA;&lt;h3&gt;Tabpages&lt;/h3&gt; &#xA;&lt;p&gt;This plugin can also be set to show only tabpages. This can be done by setting the &lt;code&gt;mode&lt;/code&gt; option to &lt;code&gt;tabs&lt;/code&gt;. This will change the bufferline to a tabline it has a lot of the same features/styling but not all. A few things to note are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Diagnostics only show if the buffer with issues is the current window selected in that tab page&lt;/li&gt; &#xA; &lt;li&gt;Sorting doesn&#39;t work yet as that needs to be thought through.&lt;/li&gt; &#xA; &lt;li&gt;Grouping doesn&#39;t work yet as that also needs to be thought through.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LSP indicators&lt;/h3&gt; &#xA;&lt;p&gt;By setting &lt;code&gt;diagnostics = &#34;nvim_lsp&#34; | &#34;coc&#34;&lt;/code&gt; you will get an indicator in the bufferline for a given tab if it has any errors This will allow you to tell at a glance if a particular buffer has errors. Currently only the native neovim lsp is supported, mainly because it has the easiest API for fetching all errors for all buffers (with an attached lsp client).&lt;/p&gt; &#xA;&lt;p&gt;In order to customise the appearance of the diagnostic count you can pass a custom function in your setup.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/113215394-b1180300-9272-11eb-9632-8a9f9aae99fa.png&#34; alt=&#34;custom indicator&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Snippet&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- rest of config ...&#xA;&#xA;--- count is an integer representing total count of errors&#xA;--- level is a string &#34;error&#34; | &#34;warning&#34;&#xA;--- diagnostics_dict is a dictionary from error level (&#34;error&#34;, &#34;warning&#34; or &#34;info&#34;)to number of errors for each level.&#xA;--- this should return a string&#xA;--- Don&#39;t get too fancy as this function will be executed a lot&#xA;diagnostics_indicator = function(count, level, diagnostics_dict, context)&#xA;  local icon = level:match(&#34;error&#34;) and &#34; &#34; or &#34; &#34;&#xA;  return &#34; &#34; .. icon .. count&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4028913/112573484-9ee92100-8da9-11eb-9ffd-da9cb9cae3a6.png&#34; alt=&#34;diagnostics_indicator&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Snippet&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;diagnostics_indicator = function(count, level, diagnostics_dict, context)&#xA;  local s = &#34; &#34;&#xA;  for e, n in pairs(diagnostics_dict) do&#xA;    local sym = e == &#34;error&#34; and &#34; &#34;&#xA;      or (e == &#34;warning&#34; and &#34; &#34; or &#34;&#34; )&#xA;    s = s .. n .. sym&#xA;  end&#xA;  return s&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;The highlighting for the file name if there is an error can be changed by replacing the highlights for see &lt;code&gt;:h bufferline-highlights&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Conditional buffer based LSP indicators&lt;/h3&gt; &#xA;&lt;p&gt;LSP indicators can additionally be reported conditionally, based on buffer context. For instance, you could disable reporting LSP indicators for the current buffer and only have them appear for other buffers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;diagnostics_indicator = function(count, level, diagnostics_dict, context)&#xA;  if context.buffer:current() then&#xA;    return &#39;&#39;&#xA;  end&#xA;&#xA;  return &#39;&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/58056722/119390133-e5d19500-bccc-11eb-915d-f5d11f8e652c.jpeg&#34; alt=&#34;current&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/58056722/119390136-e66a2b80-bccc-11eb-9a87-e622e3e20563.jpeg&#34; alt=&#34;visible&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The first bufferline shows &lt;code&gt;diagnostic.lua&lt;/code&gt; as the currently opened &lt;code&gt;current&lt;/code&gt; buffer. It has LSP reported errors, but they don&#39;t show up in the bufferline. The second bufferline shows &lt;code&gt;500-nvim-bufferline.lua&lt;/code&gt; as the currently opened &lt;code&gt;current&lt;/code&gt; buffer. Because the &#39;faulty&#39; &lt;code&gt;diagnostic.lua&lt;/code&gt; buffer has now transitioned from &lt;code&gt;current&lt;/code&gt; to &lt;code&gt;visible&lt;/code&gt;, the LSP indicator does show up.&lt;/p&gt; &#xA;&lt;h3&gt;Groups&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/132225763-1bfeb6cb-40e1-414b-8355-05726778b8b8.png&#34; alt=&#34;groups&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The buffers this plugin shows can be grouped based on a users configuration. Groups are a way of allowing a user to visualize related buffers in clusters as well as operating on them together e.g. by clicking the group indicator all grouped buffers can be hidden. They are partially inspired by google chrome&#39;s tabs as well as centaur tab&#39;s groups.&lt;/p&gt; &#xA;&lt;p&gt;In order to group buffers specify a list of groups in your config e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;groups = {&#xA;  options = {&#xA;    toggle_hidden_on_enter = true -- when you re-enter a hidden group this options re-opens that group so the buffer is visible&#xA;  },&#xA;  items = {&#xA;    {&#xA;      name = &#34;Tests&#34;, -- Mandatory&#xA;      highlight = {gui = &#34;underline&#34;, guisp = &#34;blue&#34;}, -- Optional&#xA;      priority = 2, -- determines where it will appear relative to other groups (Optional)&#xA;      icon = &#34;&#34;, -- Optional&#xA;      matcher = function(buf) -- Mandatory&#xA;        return buf.name:match(&#39;%_test&#39;) or buf.name:match(&#39;%_spec&#39;)&#xA;      end,&#xA;    },&#xA;    {&#xA;      name = &#34;Docs&#34;,&#xA;      highlight = {gui = &#34;undercurl&#34;, guisp = &#34;green&#34;},&#xA;      auto_close = false,  -- whether or not close this group if it doesn&#39;t contain the current buffer&#xA;      matcher = function(buf)&#xA;        return buf.name:match(&#39;%.md&#39;) or buf.name:match(&#39;%.txt&#39;)&#xA;      end,&#xA;      separator = { -- Optional&#xA;        style = require(&#39;bufferline.groups&#39;).separator.tab&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ordering groups&lt;/h4&gt; &#xA;&lt;p&gt;Groups are ordered by their position in the &lt;code&gt;items&lt;/code&gt; list, the first group shows at the start of the bufferline and so on. You might want to order groups &lt;em&gt;around&lt;/em&gt; the un-grouped buffers e.g. &lt;code&gt;| group 1 | buf 1 (ungrouped) | buf 2 (ungrouped) | group 2 |&lt;/code&gt;. In this case builtin groups are provided (for now just the &lt;code&gt;ungrouped&lt;/code&gt;) builtin so you can achieve the order above using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local groups = require(&#39;bufferline.groups&#39;)&#xA;groups = {&#xA;  items = {&#xA;    {name = &#34;group 1&#34;, ... },&#xA;    groups.builtin.ungrouped, -- the ungrouped buffers will be in the middle of the grouped ones&#xA;    {name = &#34;group 2&#34;, ...},&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Group commands&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/132410772-0a4c0b95-63bb-4281-8a4e-a652458c3f0f.gif&#34; alt=&#34;bufferline_group_toggle&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Grouped buffers can also be interacted with using a few commands namely These commands can be &lt;kbd&gt;tab&lt;/kbd&gt; completed to open a list of the current groups.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:BufferLineGroupClose&lt;/code&gt; &#xA;  &lt;tab&gt;&#xA;    - which will close all buffers in this group&#xA;  &lt;/tab&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:BufferLineGroupToggle&lt;/code&gt; &#xA;  &lt;tab&gt;&#xA;    - which will hide or show a group&#xA;  &lt;/tab&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Grouped buffers can also be interacted with using the &lt;code&gt;require(&#39;bufferline&#39;).group_action&lt;/code&gt; API.&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function _G.__group_open()&#xA;  require(&#39;bufferline&#39;).group_action(&amp;lt;GROUP_NAME&amp;gt;, function(buf)&#xA;    vim.cmd(&#39;vsplit &#39;..buf.path)&#xA;  end)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pinning&lt;/h3&gt; &#xA;&lt;p&gt;Buffers can be pinned to the start of the bufferline by using the &lt;code&gt;:BufferLineTogglePin&lt;/code&gt; command, this will override other groupings or sorting order for the buffer and position it left of all other buffers.&lt;/p&gt; &#xA;&lt;p&gt;Pinned buffers are essentially a builtin group that positions the assigned elements. The icons and highlights for pinned buffers can be changed similarly to other groups e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt; config = {&#xA;    options = {&#xA;        groups = {&#xA;            items = {&#xA;                require(&#39;bufferline.groups&#39;).builtin.pinned:with({ icon = &#34;&#34; }),&#xA;                ... -- other items&#xA;            }&#xA;        }&#xA;    }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Regular tab sizes&lt;/h3&gt; &#xA;&lt;p&gt;Generally this plugin enforces a minimum tab size so that the buffer line appears consistent. Where a tab is smaller than the tab size it is padded. If it is larger than the tab size it is allowed to grow up to the max name length specified (+ the other indicators). If you set &lt;code&gt;enforce_regular_tabs = true&lt;/code&gt; tabs will be prevented from extending beyond the tab size and all tabs will be the same length&lt;/p&gt; &#xA;&lt;h3&gt;Numbers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/130784872-936d4c55-b9dd-413b-871d-7bc66caf8f17.png&#34; alt=&#34;numbers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can prefix buffer names with either the &lt;code&gt;ordinal&lt;/code&gt; or &lt;code&gt;buffer id&lt;/code&gt;, using the &lt;code&gt;numbers&lt;/code&gt; option. Currently this can be specified as either a string of &lt;code&gt;buffer_id&lt;/code&gt; | &lt;code&gt;ordinal&lt;/code&gt; or a function This function allows maximum flexibility in determining the appearance of this section. It is passed a table with the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;raise&lt;/code&gt; - a helper function to convert the passed number to superscript e.g. &lt;code&gt;raise(id)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lower&lt;/code&gt; - a helper function to convert the passed number to subscript e.g. &lt;code&gt;lower(id)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ordinal&lt;/code&gt; - The buffer ordinal number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt; - The buffer ID.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  -- For ⁸·₂&#xA;  numbers = function(opts)&#xA;    return string.format(&#39;%s·%s&#39;, opts.raise(opts.id), opts.lower(opts.ordinal))&#xA;  end,&#xA;&#xA;  -- For ₈.₂&#xA;  numbers = function(opts)&#xA;    return string.format(&#39;%s.%s&#39;, opts.lower(opts.id), opts.lower(opts.ordinal))&#xA;  end,&#xA;&#xA;  -- For 2.)8.) - change he order of arguments to change the order in the string&#xA;  numbers = function(opts)&#xA;    return string.format(&#39;%s.)%s.)&#39;, opts.ordinal, opts.id)&#xA;  end,&#xA;&#xA;  -- For 8|² -&#xA;  numbers = function(opts)&#xA;    return string.format(&#39;%s|%s.)&#39;, opts.id, opts.raise(opts.ordinal))&#xA;  end,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sorting&lt;/h3&gt; &#xA;&lt;p&gt;Bufferline allows you to sort the visible buffers by &lt;code&gt;extension&lt;/code&gt;, &lt;code&gt;directory&lt;/code&gt; or &lt;code&gt;tabs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If using a plugin such as &lt;code&gt;vim-rooter&lt;/code&gt; and you want to sort by path, prefer using &lt;code&gt;directory&lt;/code&gt; rather than &lt;code&gt;relative_directory&lt;/code&gt;. Relative directory works by ordering relative paths first, however if you move from project to project and vim switches its directory, the bufferline will re-order itself as a different set of buffers will now be relative.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Using vim commands&#xA;:BufferLineSortByExtension&#xA;:BufferLineSortByDirectory&#xA;:BufferLineSortByTabs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Or using lua functions&#xA;:lua require&#39;bufferline&#39;.sort_buffers_by(&#39;extension&#39;)&#xA;:lua require&#39;bufferline&#39;.sort_buffers_by(&#39;directory&#39;)&#xA;:lua require&#39;bufferline&#39;.sort_buffers_by(&#39;tabs&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more advanced usage you can provide a custom compare function which will receive two buffers to compare. You can see what fields are available to use using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sort_by = function(buffer_a, buffer_b)&#xA;  print(vim.inspect(buffer_a))&#xA;-- add custom logic&#xA;  local mod_a = vim.loop.fs_stat(buffer_a.path).mtime.sec&#xA;  local mod_b = vim.loop.fs_stat(buffer_b.path).mtime.sec&#xA;  return mod_a &amp;gt; mod_b&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using a sorted bufferline it&#39;s advisable that you use the &lt;code&gt;BufferLineCycleNext&lt;/code&gt; and &lt;code&gt;BufferLineCyclePrev&lt;/code&gt; commands since these will traverse the bufferline bufferlist in order whereas &lt;code&gt;bnext&lt;/code&gt; and &lt;code&gt;bprev&lt;/code&gt; will cycle buffers according to the buffer numbers given by vim.&lt;/p&gt; &#xA;&lt;h3&gt;Closing buffers&lt;/h3&gt; &#xA;&lt;p&gt;Bufferline provides &lt;em&gt;a few&lt;/em&gt; commands to handle closing buffers visible in the tabline using &lt;code&gt;BufferLineCloseRight&lt;/code&gt; and &lt;code&gt;BufferLineCloseLeft&lt;/code&gt;. As their names suggest these commands will close all visible buffers to the left or right of the current buffer. Another way to close any single buffer is the &lt;code&gt;BufferLinePickClose&lt;/code&gt; command (&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#buffer-pick-functionality&#34;&gt;see below&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Sidebar offset&lt;/h3&gt; &#xA;&lt;p&gt;You can prevent the bufferline drawing above a &lt;strong&gt;vertical&lt;/strong&gt; sidebar split such as a file explorer. To do this you must set the &lt;code&gt;offsets&lt;/code&gt; configuration option to a list of tables containing the details of the window to avoid. &lt;em&gt;NOTE:&lt;/em&gt; this is only relevant for left or right aligned sidebar windows such as &lt;code&gt;NvimTree&lt;/code&gt;, &lt;code&gt;NERDTree&lt;/code&gt; or &lt;code&gt;Vista&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;offsets = {&#xA;  {&#xA;    filetype = &#34;NvimTree&#34;,&#xA;    text = &#34;File Explorer&#34;,&#xA;    highlight = &#34;Directory&#34;,&#xA;    text_align = &#34;left&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;filetype&lt;/code&gt; is used to check whether a particular window is a match, the &lt;code&gt;text&lt;/code&gt; is &lt;em&gt;optional&lt;/em&gt; and will show above the window if specified. &lt;code&gt;text&lt;/code&gt; can be either a string or a function which should also return a string. See the example below. &lt;em&gt;NOTE:&lt;/em&gt; to find the &lt;code&gt;filetype&lt;/code&gt; of a side panel go into the buffer and run &lt;code&gt;:echo &amp;amp;filetype&lt;/code&gt; to print its &lt;code&gt;filetype&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;offsets = {&#xA;  {&#xA;    filetype = &#34;NvimTree&#34;,&#xA;    text = function()&#xA;      return vim.fn.getcwd()&#xA;    end,&#xA;    highlight = &#34;Directory&#34;,&#xA;    text_align = &#34;left&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it is too long it will be truncated. The highlight controls what highlight is shown above the window. You can also change the alignment of the text in the offset section using &lt;code&gt;text_align&lt;/code&gt; which can be set to &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; or &lt;code&gt;center&lt;/code&gt;. You can also add a &lt;code&gt;padding&lt;/code&gt; key which should be an integer if you want the offset to be larger than the window width.&lt;/p&gt; &#xA;&lt;h3&gt;Buffer pick functionality&lt;/h3&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;BufferLinePick&lt;/code&gt; command will allow for easy selection of a buffer in view. Trigger the command, using &lt;code&gt;:BufferLinePick&lt;/code&gt; or better still map this to a key, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;silent&amp;gt; gb :BufferLinePick&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then pick a buffer by typing the character for that specific buffer that appears&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111994691-f2404280-8b0f-11eb-9bc1-6664ccb93154.gif&#34; alt=&#34;bufferline_pick&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Likewise, &lt;code&gt;BufferLinePickClose&lt;/code&gt; closes the buffer instead of viewing it.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;BufferLineGoToBuffer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can select a buffer by it&#39;s &lt;em&gt;visible&lt;/em&gt; position in the bufferline using the &lt;code&gt;BufferLineGoToBuffer&lt;/code&gt; command. This means that if you have 60 buffers open but only 7 visible in the bufferline then using &lt;code&gt;BufferLineGoToBuffer 4&lt;/code&gt; will go to the 4th visible buffer not necessarily the 5 in the absolute list of open buffers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;- (30) | buf31 | buf32 | buf33 | buf34 | buf35 | buf36 | buf37 (24) -&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;BufferLineGoToBuffer 4&lt;/code&gt; will open &lt;code&gt;buf34&lt;/code&gt; as it is the 4th visible buffer.&lt;/p&gt; &#xA;&lt;p&gt;This can then be mapped using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;1 &amp;lt;Cmd&amp;gt;BufferLineGoToBuffer 1&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;2 &amp;lt;Cmd&amp;gt;BufferLineGoToBuffer 2&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;3 &amp;lt;Cmd&amp;gt;BufferLineGoToBuffer 3&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;4 &amp;lt;Cmd&amp;gt;BufferLineGoToBuffer 4&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;5 &amp;lt;Cmd&amp;gt;BufferLineGoToBuffer 5&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;6 &amp;lt;Cmd&amp;gt;BufferLineGoToBuffer 6&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;7 &amp;lt;Cmd&amp;gt;BufferLineGoToBuffer 7&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;8 &amp;lt;Cmd&amp;gt;BufferLineGoToBuffer 8&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;9 &amp;lt;Cmd&amp;gt;BufferLineGoToBuffer 9&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mouse actions&lt;/h3&gt; &#xA;&lt;p&gt;You can configure different type of mouse clicks to behave differently. The current mouse click types are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Left - &lt;code&gt;left_mouse_command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Right - &lt;code&gt;right_mouse_command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Middle - &lt;code&gt;middle_mouse_command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Close - &lt;code&gt;close_command&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently left mouse opens the selected buffer but the command can be tweaked using &lt;code&gt;left_mouse_command&lt;/code&gt; which can be specified as either a lua function or string which uses &lt;a href=&#34;https://www.lua.org/pil/20.html&#34;&gt;lua&#39;s printf style string formatting&lt;/a&gt; e.g. &lt;code&gt;buffer %d&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can do things like open a vertical split on right clicking the buffer name for example using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;right_mouse_command = &#34;vertical sbuffer %d&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can set the value to a function and handle the click action however you please for example you can use another plugin such as &lt;a href=&#34;https://github.com/famiu/bufdelete.nvim&#34;&gt;bufdelete.nvim&lt;/a&gt; to handle closing the buffer using the &lt;code&gt;close_command&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;left_mouse_command = function(bufnum)&#xA;   require(&#39;bufdelete&#39;).bufdelete(bufnum, true)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom functions&lt;/h3&gt; &#xA;&lt;p&gt;A user can also execute arbitrary functions against a buffer using the &lt;code&gt;exec&lt;/code&gt; function. For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#39;bufferline&#39;).exec(&#xA;        4, -- the forth visible buffer from the left&#xA;        user_function -- an arbitrary user function which gets passed the buffer&#xA;    )&#xA;&#xA;    -- e.g.&#xA;    function _G.bdel(num)&#xA;        require(&#39;bufferline&#39;).exec(num, function(buf, visible_buffers)&#xA;            vim.cmd(&#39;bdelete &#39;..buf.id)&#xA;        end&#xA;    end&#xA;&#xA;    vim.cmd [[&#xA;        command -count Bdel &amp;lt;Cmd&amp;gt;lua _G.bdel(&amp;lt;count&amp;gt;)&amp;lt;CR&amp;gt;&#xA;    ]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom area&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/118527523-4d219f00-b739-11eb-889f-60fb06fd71bc.png&#34; alt=&#34;custom area&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also add custom content at the start or end of the bufferline using &lt;code&gt;custom_areas&lt;/code&gt; this option allows a user to specify a function which should return the text and highlight for that text to be shown in a list of tables. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;custom_areas = {&#xA;  right = function()&#xA;    local result = {}&#xA;    local seve = vim.diagnostic.severity&#xA;    local error = #vim.diagnostic.get(0, {severity = seve.ERROR})&#xA;    local warning = #vim.diagnostic.get(0, {severity = seve.WARN})&#xA;    local info = #vim.diagnostic.get(0, {severity = seve.INFO})&#xA;    local hint = #vim.diagnostic.get(0, {severity = seve.HINT})&#xA;&#xA;    if error ~= 0 then&#xA;      table.insert(result, {text = &#34;  &#34; .. error, guifg = &#34;#EC5241&#34;})&#xA;    end&#xA;&#xA;    if warning ~= 0 then&#xA;      table.insert(result, {text = &#34;  &#34; .. warning, guifg = &#34;#EFB839&#34;})&#xA;    end&#xA;&#xA;    if hint ~= 0 then&#xA;      table.insert(result, {text = &#34;  &#34; .. hint, guifg = &#34;#A3BA5E&#34;})&#xA;    end&#xA;&#xA;    if info ~= 0 then&#xA;      table.insert(result, {text = &#34;  &#34; .. info, guifg = &#34;#7EA9A7&#34;})&#xA;    end&#xA;    return result&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that this function will be called a lot and should be as inexpensive as possible so it does not block rendering the tabline.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why isn&#39;t the bufferline appearing?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The most common reason for this that has come up in various issues is it clashes with another plugin. Please make sure that you do not have another bufferline plugin installed.&lt;/p&gt; &lt;p&gt;If you are using &lt;code&gt;airline&lt;/code&gt; make sure you set &lt;code&gt;let g:airline#extensions#tabline#enabled = 0&lt;/code&gt;. If you are using &lt;code&gt;lightline&lt;/code&gt; this also takes over the tabline by default and needs to be deactivated.&lt;/p&gt; &lt;p&gt;If you are on Windows and use the GUI version of nvim (nvim-qt.exe) then also ensure, that &lt;code&gt;GuiTabline&lt;/code&gt; is disabled. For this create a file called &lt;code&gt;ginit.vim&lt;/code&gt; in your nvim config directory and put the line &lt;code&gt;GuiTabline 0&lt;/code&gt; in it. Otherwise the QT tabline will overlay any terminal tablines.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Doesn&#39;t this plugin go against the &#34;vim way&#34;?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This is much better explained by &lt;a href=&#34;https://github.com/ap/vim-buftabline#why-this-and-not-vim-tabs&#34;&gt;buftablines&#39;s author&lt;/a&gt;. Please read this for a more comprehensive answer to this questions. The short answer to this is buffers represent files in nvim and tabs, a collection of windows (or just one). Vim natively allows visualising tabs i.e. collections of window, but not just the files that are open. There are &lt;em&gt;endless&lt;/em&gt; debates on this topic, but allowing a user to see what files they have open doesn&#39;t go against any clearly stated vim philosophy. It&#39;s a text editor and not a religion 🙏. Obviously this won&#39;t appeal to everyone, which isn&#39;t really a feasible objective anyway.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>akinsho/toggleterm.nvim</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/akinsho/toggleterm.nvim</id>
    <link href="https://github.com/akinsho/toggleterm.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A neovim lua plugin to help easily manage multiple terminal windows&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; toggleterm.nvim &lt;/h1&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A &lt;i&gt;neovim&lt;/i&gt; plugin to persist and toggle multiple terminals during an editing session&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/akinsho/toggleterm.nvim/main/github/toggleterm.gif&#34; alt=&#34;screenshot&#34; title=&#34;Toggleterm in action&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Multiple orientations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Float&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/115306123-42d2ac00-a15f-11eb-84fc-c4246ee82a09.png&#34; alt=&#34;floating window&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vertical&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/akinsho/toggleterm.nvim/main/github/vertical-terms.png&#34; alt=&#34;vertical orientation&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tab&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/133490969-6a59e623-79db-4ca7-a73b-ef4b24a73b91.gif&#34; alt=&#34;tab orientation&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Send commands to different terminals&lt;/h3&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/112119367-36d1e980-8bb5-11eb-9787-5936391127a3.gif&#34; alt=&#34;exec&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This plugin only works in &lt;em&gt;Neovim 0.7&lt;/em&gt; or newer.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using packer in lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#34;akinsho/toggleterm.nvim&#34;, tag = &#39;v1.*&#39;, config = function()&#xA;  require(&#34;toggleterm&#34;).setup()&#xA;end}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using vim-plug in vimscript&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;akinsho/toggleterm.nvim&#39;, tag = &#39;v1.*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can/should specify a tag for the current major version of the plugin, to avoid breaking changes as this plugin evolves. To use a version of this plugin compatible with nvim versions less than 0.7 please use the tag &lt;code&gt;v1.*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Neovim&#39;s terminal is a very cool, but not super ergonomic tool to use. I find that I often want to set a process going and leave it to continue to run in the background. I don&#39;t need to see it all the time. I just need to be able to refer back to it at intervals. I also sometimes want to create a new terminal and run a few commands.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes I want these side by side, and I &lt;em&gt;really&lt;/em&gt; want these terminals to be easy to access. I also want my terminal to look different from non-terminal buffers so I use &lt;code&gt;winhighlight&lt;/code&gt; to darken them based on the &lt;code&gt;Normal&lt;/code&gt; background colour.&lt;/p&gt; &#xA;&lt;p&gt;This is the exact use case this was designed for. If that&#39;s your use case this might work for you.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;All I really want this plugin to be is what I described above. A wrapper around the terminal functionality.&lt;/p&gt; &#xA;&lt;p&gt;It basically (almost) does all that I need it to.&lt;/p&gt; &#xA;&lt;p&gt;I won&#39;t be turning this into a REPL plugin or doing a bunch of complex stuff. If you find any issues, &lt;em&gt;please&lt;/em&gt; consider a &lt;em&gt;pull request&lt;/em&gt; not an issue. I&#39;m also going to be pretty conservative about what I add.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;This plugin must be explicitly enabled by using &lt;code&gt;require(&#34;toggleterm&#34;).setup{}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;open_mapping&lt;/code&gt; key to use for toggling the terminal(s) will setup mappings for &lt;em&gt;normal&lt;/em&gt; mode If you prefix the mapping with a number that particular terminal will be opened.&lt;/p&gt; &#xA;&lt;p&gt;If you set the &lt;code&gt;insert_mappings&lt;/code&gt; key to true, the mapping will also take effect in insert mode; similarly setting &lt;code&gt;terminal_mappings&lt;/code&gt; to will have the mappings take effect in the opened terminal.&lt;/p&gt; &#xA;&lt;p&gt;However you will not be able to use a count with the open mapping in terminal and insert modes. You can create buffer specific mappings to exit terminal mode and then use a count with the open mapping. Check &lt;em&gt;Terminal window mappings&lt;/em&gt; for an example of how to do this.&lt;/p&gt; &#xA;&lt;p&gt;alternatively you can do this manually (not recommended but, your prerogative)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; set&#xA;autocmd TermEnter term://*toggleterm#*&#xA;      \ tnoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Cmd&amp;gt;exe v:count1 . &#34;ToggleTerm&#34;&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; By applying the mappings this way you can pass a count to your&#xA;&#34; mapping to open a specific window.&#xA;&#34; For example: 2&amp;lt;C-t&amp;gt; will open terminal 2&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Cmd&amp;gt;exe v:count1 . &#34;ToggleTerm&#34;&amp;lt;CR&amp;gt;&#xA;inoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;exe v:count1 . &#34;ToggleTerm&#34;&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Please ensure you have set &lt;code&gt;hidden&lt;/code&gt; in your neovim config, otherwise the terminals will be discarded when closed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Please do not copy and paste this configuration! It is here to show what options are available. It is not written be used as is.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;toggleterm&#34;).setup{&#xA;  -- size can be a number or function which is passed the current terminal&#xA;  size = 20 | function(term)&#xA;    if term.direction == &#34;horizontal&#34; then&#xA;      return 15&#xA;    elseif term.direction == &#34;vertical&#34; then&#xA;      return vim.o.columns * 0.4&#xA;    end&#xA;  end,&#xA;  open_mapping = [[&amp;lt;c-\&amp;gt;]],&#xA;  on_open = fun(t: Terminal), -- function to run when the terminal opens&#xA;  on_close = fun(t: Terminal), -- function to run when the terminal closes&#xA;  on_stdout = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stdout&#xA;  on_stderr = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stderr&#xA;  on_exit = fun(t: Terminal, job: number, exit_code: number, name: string) -- function to run when terminal process exits&#xA;  hide_numbers = true, -- hide the number column in toggleterm buffers&#xA;  shade_filetypes = {},&#xA;  highlights = {&#xA;    -- highlights which map to a highlight group name and a table of it&#39;s values&#xA;    -- NOTE: this is only a subset of values, any group placed here will be set for the terminal window split&#xA;    Normal = {&#xA;      guibg = &amp;lt;VALUE-HERE&amp;gt;,&#xA;    },&#xA;    NormalFloat = {&#xA;      link = &#39;Normal&#39;&#xA;    },&#xA;    FloatBorder = {&#xA;      guifg = &amp;lt;VALUE-HERE&amp;gt;,&#xA;      guibg = &amp;lt;VALUE-HERE&amp;gt;,&#xA;    },&#xA;  },&#xA;  shade_terminals = true, -- NOTE: this option takes priority over highlights specified so if you specify Normal highlights you should set this to false&#xA;  shading_factor = &#39;&amp;lt;number&amp;gt;&#39;, -- the degree by which to darken to terminal colour, default: 1 for dark backgrounds, 3 for light&#xA;  start_in_insert = true,&#xA;  insert_mappings = true, -- whether or not the open mapping applies in insert mode&#xA;  terminal_mappings = true, -- whether or not the open mapping applies in the opened terminals&#xA;  persist_size = true,&#xA;  direction = &#39;vertical&#39; | &#39;horizontal&#39; | &#39;tab&#39; | &#39;float&#39;,&#xA;  close_on_exit = true, -- close the terminal window when the process exits&#xA;  shell = vim.o.shell, -- change the default shell&#xA;  -- This field is only relevant if direction is set to &#39;float&#39;&#xA;  float_opts = {&#xA;    -- The border key is *almost* the same as &#39;nvim_open_win&#39;&#xA;    -- see :h nvim_open_win for details on borders however&#xA;    -- the &#39;curved&#39; border is a custom border type&#xA;    -- not natively supported but implemented in this plugin.&#xA;    border = &#39;single&#39; | &#39;double&#39; | &#39;shadow&#39; | &#39;curved&#39; | ... other options supported by win open&#xA;    width = &amp;lt;value&amp;gt;,&#xA;    height = &amp;lt;value&amp;gt;,&#xA;    winblend = 3,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;code&gt;ToggleTerm&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is the command the mappings call under the hood. You can use it directly and prefix it with a count to target a specific terminal. This function also takes arguments &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt;. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:ToggleTerm size=40 dir=~/Desktop direction=horizontal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;dir&lt;/code&gt; is specified on creation toggle term will open at the specified directory. If the terminal has already been opened at a particular directory it will remain in that directory.&lt;/p&gt; &#xA;&lt;p&gt;The directory can also be specified as &lt;code&gt;git_dir&lt;/code&gt; which toggleterm will then use to try and derive the git repo directory. &lt;em&gt;NOTE&lt;/em&gt;: This currently will not work for &lt;code&gt;git-worktrees&lt;/code&gt; or other more complex setups.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;size&lt;/code&gt; is specified and the command opens a split (horizontal/vertical) terminal, the height/width of all terminals in the same direction will be changed to &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;direction&lt;/code&gt; is specified and the command opens a terminal, the terminal will be changed to the specified direction.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;size&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt; are ignored if the command closes a terminal.&lt;/p&gt; &#xA;&lt;h4&gt;Caveats&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Having multiple terminals with different directions open at the same time is currently unsupported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;ToggleTermToggleAll&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command allows you to open all the previously toggled terminal in one go or close all the currently open terminals at once.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;TermExec&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command allows you to open a terminal with a specific action. e.g. &lt;code&gt;2TermExec cmd=&#34;git status&#34; dir=~/&amp;lt;my-repo-path&amp;gt;&lt;/code&gt; will run git status in terminal 2. note that the &lt;code&gt;cmd&lt;/code&gt; argument &lt;strong&gt;must be quoted&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; the &lt;code&gt;dir&lt;/code&gt; argument can also be &lt;em&gt;optionally&lt;/em&gt; quoted if it contains spaces.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cmd&lt;/code&gt; and &lt;code&gt;dir&lt;/code&gt; arguments can also expand the same special keywords as &lt;code&gt;:h expand&lt;/code&gt; e.g. &lt;code&gt;TermExec cmd=&#34;echo %&#34;&lt;/code&gt; will be expanded to &lt;code&gt;TermExec cmd=&#34;echo /file/example&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These special keywords can be escaped using the &lt;code&gt;\&lt;/code&gt; character, if you want to print character as is.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt; arguments are like the &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt; arguments of &lt;code&gt;ToggleTerm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default focus is returned to the original window after executing the command (except for floating terminals). Use argument &lt;code&gt;go_back=0&lt;/code&gt; to disable this behaviour.&lt;/p&gt; &#xA;&lt;p&gt;You can send commands to a terminal without opening its window by using the &lt;code&gt;open=0&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;see &lt;code&gt;:h expand()&lt;/code&gt; for more details&lt;/p&gt; &#xA;&lt;h3&gt;Sending lines to the terminal&lt;/h3&gt; &#xA;&lt;p&gt;You can &#34;send lines&#34; to the toggled terminals with the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:ToggleTermSendCurrentLine &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends the whole line where you are currently standing with your cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ToggleTermSendVisualLines &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends all of the (whole) lines in your visual selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ToggleTermSendVisualSelection &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends only the visually selected text (this can be a block of text or a selection in a single line)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(&lt;code&gt;&amp;lt;T_ID&lt;/code&gt; is an optional terminal ID parameter which defines where should we send the lines. If the parameter is not provided, then the default is the &lt;code&gt;first terminal&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://user-images.githubusercontent.com/18753533/159889865-724becab-877b-45a2-898e-820afd6a4ee1.mov&#34; controls=&#34;controls&#34; muted height=&#34;640px&#34;&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Set terminal shading&lt;/h3&gt; &#xA;&lt;p&gt;This plugin automatically shades terminal filetypes to be darker than other window you can disable this by setting &lt;code&gt;shade_terminals = false&lt;/code&gt; in the setup object&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;toggleterm&#39;.setup {&#xA;  shade_terminals = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;alternatively you can set &lt;em&gt;which&lt;/em&gt; filetypes should be shaded by setting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- fzf is just an example&#xA;require&#39;toggleterm&#39;.setup {&#xA;  shade_filetypes = { &#34;none&#34;, &#34;fzf&#34; }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;setting &lt;code&gt;&#34;none&#34;&lt;/code&gt; will allow normal terminal buffers to be highlighted.&lt;/p&gt; &#xA;&lt;h3&gt;Set persistent size&lt;/h3&gt; &#xA;&lt;p&gt;By default, this plugin will persist the size of horizontal and vertical terminals. Split terminals in the same direction always have the same size. You can disable this behaviour by setting &lt;code&gt;persist_size = false&lt;/code&gt; in the setup object. Disabling this behaviour forces the opening terminal size to the &lt;code&gt;size&lt;/code&gt; defined in the setup object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;toggleterm&#39;.setup{&#xA;  persist_size = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Terminal window mappings&lt;/h3&gt; &#xA;&lt;p&gt;It can be helpful to add mappings to make moving in and out of a terminal easier once toggled, whilst still keeping it open.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function _G.set_terminal_keymaps()&#xA;  local opts = {noremap = true}&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;esc&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;jk&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-h&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;h]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-j&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;j]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-k&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;k]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-l&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;l]], opts)&#xA;end&#xA;&#xA;-- if you only want these mappings for toggle term use term://*toggleterm#* instead&#xA;vim.cmd(&#39;autocmd! TermOpen term://* lua set_terminal_keymaps()&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Terminals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/116447435-e69f1480-a84f-11eb-86dd-19fa29646aa1.png&#34; alt=&#34;lazy git&#34;&gt; &lt;em&gt;using &lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;lazygit&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Toggleterm also exposes the &lt;code&gt;Terminal&lt;/code&gt; class so that this can be used to create custom terminals for showing terminal UIs like &lt;code&gt;lazygit&lt;/code&gt;, &lt;code&gt;htop&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;Each terminal can take the following arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Terminal:new {&#xA;  cmd = string -- command to execute when creating the terminal e.g. &#39;top&#39;&#xA;  direction = string -- the layout for the terminal, same as the main config options&#xA;  dir = string -- the directory for the terminal&#xA;  close_on_exit = bool -- close the terminal window when the process exits&#xA;  highlights = table -- a table with highlights&#xA;  env = table -- key:value table with environmental variables passed to jobstart()&#xA;  clear_env = bool -- use only environmental variables from `env`, passed to jobstart()&#xA;  on_open = fun(t: Terminal) -- function to run when the terminal opens&#xA;  on_close = fun(t: Terminal) -- function to run when the terminal closes&#xA;  -- callbacks for processing the output&#xA;  on_stdout = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stdout&#xA;  on_stderr = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stderr&#xA;  on_exit = fun(t: Terminal, job: number, exit_code: number, name: string) -- function to run when terminal process exits&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Terminal  = require(&#39;toggleterm.terminal&#39;).Terminal&#xA;local lazygit = Terminal:new({ cmd = &#34;lazygit&#34;, hidden = true })&#xA;&#xA;function _lazygit_toggle()&#xA;  lazygit:toggle()&#xA;end&#xA;&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;g&#34;, &#34;&amp;lt;cmd&amp;gt;lua _lazygit_toggle()&amp;lt;CR&amp;gt;&#34;, {noremap = true, silent = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new terminal but the specified command is not being run immediately. The command will run once the terminal is opened. Alternatively &lt;code&gt;term:spawn()&lt;/code&gt; can be used to start the command in a background buffer without opening a terminal window yet. If the &lt;code&gt;hidden&lt;/code&gt; key is set to true, this terminal will not be toggled by normal toggleterm commands such as &lt;code&gt;:ToggleTerm&lt;/code&gt; or the open mapping. It will only open and close by using the returned terminal object. A mapping for toggling the terminal can be set as in the example above.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively the terminal can be specified with a count which is the number that can be used to trigger this specific terminal. This can then be triggered using the current count e.g. &lt;code&gt;:5ToggleTerm&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lazygit = Terminal:new({ cmd = &#34;lazygit&#34;, count = 5 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set a custom layout for a terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lazygit = Terminal:new({&#xA;  cmd = &#34;lazygit&#34;,&#xA;  dir = &#34;git_dir&#34;,&#xA;  direction = &#34;float&#34;,&#xA;  float_opts = {&#xA;    border = &#34;double&#34;,&#xA;  },&#xA;  -- function to run on opening the terminal&#xA;  on_open = function(term)&#xA;    vim.cmd(&#34;startinsert!&#34;)&#xA;    vim.api.nvim_buf_set_keymap(term.bufnr, &#34;n&#34;, &#34;q&#34;, &#34;&amp;lt;cmd&amp;gt;close&amp;lt;CR&amp;gt;&#34;, {noremap = true, silent = true})&#xA;  end,&#xA;  -- function to run on closing the terminal&#xA;  on_close = function(term)&#xA;    vim.cmd(&#34;Closing terminal&#34;)&#xA;  end,&#xA;})&#xA;&#xA;function _lazygit_toggle()&#xA;  lazygit:toggle()&#xA;end&#xA;&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;g&#34;, &#34;&amp;lt;cmd&amp;gt;lua _lazygit_toggle()&amp;lt;CR&amp;gt;&#34;, {noremap = true, silent = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: do not use any of the private functionality of the terminal or other non-public parts of the API as these can change in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Statusline&lt;/h3&gt; &#xA;&lt;p&gt;In order to tell each terminal apart you can use the terminal buffer variable &lt;code&gt;b:toggle_number&lt;/code&gt; in your statusline&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; this is pseudo code&#xA;let statusline .= &#39;%{&amp;amp;ft == &#34;toggleterm&#34; ? &#34;terminal (&#34;.b:toggle_number.&#34;)&#34; : &#34;&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom commands&lt;/h3&gt; &#xA;&lt;p&gt;You can create your on commands by using the lua functions this plugin provides directly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;command! -count=1 TermGitPush  lua require&#39;toggleterm&#39;.exec(&#34;git push&#34;,    &amp;lt;count&amp;gt;, 12)&#xA;command! -count=1 TermGitPushF lua require&#39;toggleterm&#39;.exec(&#34;git push -f&#34;, &amp;lt;count&amp;gt;, 12)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Open multiple terminals side-by-side&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Direction&lt;/th&gt; &#xA;   &lt;th&gt;Supported&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vertical&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;horizontal&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tab&lt;/td&gt; &#xA;   &lt;td&gt;✖️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;✖️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In your first terminal, you need to leave the &lt;code&gt;TERMINAL&lt;/code&gt; mode using &lt;kbd&gt;C-\&lt;/kbd&gt;&lt;kbd&gt;C-N&lt;/kbd&gt; which can be remapped to &lt;kbd&gt;Esc&lt;/kbd&gt; for ease of use. &lt;img src=&#34;https://user-images.githubusercontent.com/31947091/133395516-22fef1e6-633d-4964-9175-f76fabf66794.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then you type on: &lt;code&gt;2&amp;lt;C-\&amp;gt;&lt;/code&gt;, and the result: &lt;img src=&#34;https://user-images.githubusercontent.com/31947091/133396789-fdf68b30-3a8c-440b-822f-6549f282c4fc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Explain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: this is the terminal&#39;s number (or ID), your first terminal is &lt;code&gt;1&lt;/code&gt; (e.g. your 3rd terminal will be &lt;code&gt;3&amp;lt;C-\&amp;gt;&lt;/code&gt;, so on).&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;C-\&lt;/kbd&gt;: this is the combined key mapping to the command &lt;code&gt;:ToggleTerm&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-management</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/qbcore-framework/qb-management</id>
    <link href="https://github.com/qbcore-framework/qb-management" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Management menu for jobs &amp; gangs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-management&lt;/h1&gt; &#xA;&lt;p&gt;New qb-bossmenu / qb-gangmenu converted into one resource using qb-menu and qb-input, with SQL support for society funds!&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-core&#34;&gt;qb-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-smallresources&#34;&gt;qb-smallresources&lt;/a&gt; (For the Logs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-input&#34;&gt;qb-input&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-menu&#34;&gt;qb-menu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-inventory&#34;&gt;qb-inventory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-clothing&#34;&gt;qb-clothing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9yiQZDX.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://i.imgur.com/MRMWeqX.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the script and put it in the &lt;code&gt;[qb]&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;IF NEW SERVER: Import &lt;code&gt;qb-management.sql&lt;/code&gt; in your database&lt;/li&gt; &#xA; &lt;li&gt;IF EXISTING SERVER: Import &lt;code&gt;qb-management_upgrade.sql&lt;/code&gt; in your database&lt;/li&gt; &#xA; &lt;li&gt;Edit config.lua with coords&lt;/li&gt; &#xA; &lt;li&gt;Restart Script / Server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ATTENTION&lt;/h2&gt; &#xA;&lt;h3&gt;YOU NEED TO CREATE A ROW IN DATABASE WITH NAME OF SOCIETY IN MANAGEMENT_FUNDS TABLE IF YOU HAVE CUSTOM JOBS / GANGS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6cd3NLU.png&#34; alt=&#34;database&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-drugs</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/qbcore-framework/qb-drugs</id>
    <link href="https://github.com/qbcore-framework/qb-drugs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Drugs Script For QB-Core 🌿&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-drugs&lt;/h1&gt; &#xA;&lt;p&gt;Drugs Script For QB-Core&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>solidiquis/dotfiles</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/solidiquis/dotfiles</id>
    <link href="https://github.com/solidiquis/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Me confeegs.. me precious confeegs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dotfiles&lt;/h1&gt; &#xA;&lt;h2&gt;Zsh Rice&lt;/h2&gt; &#xA;&lt;img width=&#34;388&#34; alt=&#34;Screen Shot 2022-05-30 at 2 57 15 PM&#34; src=&#34;https://user-images.githubusercontent.com/45523555/171047963-c9dd7f01-a564-4e85-9498-2dc47f3ce318.png&#34;&gt; &#xA;&lt;h2&gt;NeoVim Rice&lt;/h2&gt; &#xA;&lt;img src=&#34;https://github.com/solidiquis/solidiquis/raw/master/assets/Screen%20Shot%202022-02-28%20at%209.36.05%20AM.png?raw=true&#34;&gt; &#xA;&lt;img src=&#34;https://github.com/solidiquis/solidiquis/raw/master/assets/Screen%20Shot%202022-02-28%20at%209.36.15%20AM.png?raw=true&#34;&gt; &#xA;&lt;img src=&#34;https://github.com/solidiquis/solidiquis/raw/master/assets/Screen%20Shot%202022-02-28%20at%209.47.47%20AM.png?raw=true&#34;&gt;</summary>
  </entry>
  <entry>
    <title>AstroNvim/AstroNvim</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/AstroNvim/AstroNvim</id>
    <link href="https://github.com/AstroNvim/AstroNvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AstroNvim is an aesthetic and feature-rich neovim config that is extensible and easy to use with a great set of plugins&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; id=&#34;madewithlua&#34;&gt; &#xA; &lt;img src=&#34;https://astronvim.github.io/img/logo/astronvim.svg?sanitize=true&#34; width=&#34;110&#34; , height=&#34;100&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;AstroNvim&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/AstroNvim/AstroNvim/pulse&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/AstroNvim/AstroNvim?color=%4dc71f&amp;amp;label=Last%20Commit&amp;amp;logo=github&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/AstroNvim/AstroNvim/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/AstroNvim/AstroNvim?label=License&amp;amp;logo=GNU&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://neovim.io/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Neovim-0.7+-blueviolet.svg?style=flat-square&amp;amp;logo=Neovim&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/UcZutyeaFW&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/discord-Join-7289da?color=%235865F2%20&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=%23ffffff&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; AstroNvim is an aesthetic and feature-rich neovim config that is extensible and easy to use with a great set of plugins &lt;/p&gt; &#xA;&lt;h2&gt;🌟 Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/dashboard.png&#34; alt=&#34;Preview1&#34;&gt; &lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/overview.png&#34; alt=&#34;Preview2&#34;&gt; &lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/lsp_hover.png&#34; alt=&#34;Preview33&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File explorer with &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;Neo-tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Autocompletion with &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;Cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git integration with &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Gitsigns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Statusline with &lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;Feline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terminal with &lt;a href=&#34;https://github.com/akinsho/toggleterm.nvim&#34;&gt;Toggleterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fuzzy finding with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting with &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Formatting and linting with &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;Null-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Language Server Protocol with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;Native LSP&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Fonts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.7.0&#34;&gt;Neovim 0.7+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terminal with true color support (for the default theme, otherwise it is dependent on the theme you are using)&lt;/li&gt; &#xA; &lt;li&gt;Optional Requirements: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; - live grep telescope search (&lt;code&gt;&amp;lt;leader&amp;gt;fw&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;lazygit&lt;/a&gt; - git ui toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tl&lt;/code&gt; or &lt;code&gt;&amp;lt;leader&amp;gt;gg&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dev.yorhel.nl/ncdu&#34;&gt;NCDU&lt;/a&gt; - disk usage toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tu&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://htop.dev/&#34;&gt;Htop&lt;/a&gt; - process viewer toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tt&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; - python repl toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tp&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node&lt;/a&gt; - node repl toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tn&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note when using default theme: For MacOS, the default terminal does not have true color support. You wil need to use &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; or another &lt;a href=&#34;https://gist.github.com/XVilka/8346728#terminal-emulators&#34;&gt;terminal emulator&lt;/a&gt; that has true color support.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note if you are still on Neovim v0.6: You can still install the previous version of AstroNvim that supported. After cloning the repository run &lt;code&gt;git checkout nvim-0.6&lt;/code&gt; to check out this version. This will no longer be receiving updates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🛠️ Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Make a backup of your current nvim folder&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;mv ~/.config/nvim ~/.config/nvimbackup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Clone the repository&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/AstroNvim/AstroNvim ~/.config/nvim&#xA;nvim +PackerSync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📦 Basic Setup&lt;/h2&gt; &#xA;&lt;h4&gt;Install LSP&lt;/h4&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;:LspInstall&lt;/code&gt; followed by the name of the server you want to install&lt;br&gt; Example: &lt;code&gt;:LspInstall pyright&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Install language parser&lt;/h4&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;:TSInstall&lt;/code&gt; followed by the name of the language you want to install&lt;br&gt; Example: &lt;code&gt;:TSInstall python&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Manage plugins&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;:PackerClean&lt;/code&gt; to remove any disabled or unused plugins&lt;br&gt; Run &lt;code&gt;:PackerSync&lt;/code&gt; to update and clean plugins&lt;br&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Update AstroNvim&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;:AstroUpdate&lt;/code&gt; to get the latest updates from the repository&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🗒️ Links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://astronvim.github.io/&#34;&gt;AstroNvim Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/usage/walkthrough&#34;&gt;Basic Usage&lt;/a&gt; is given for basic usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/usage/mappings&#34;&gt;Default Mappings&lt;/a&gt; more about the default key bindings&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/configuration/plugin_defaults&#34;&gt;Default Plugin Configuration&lt;/a&gt; more about the provided plugin defaults&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/configuration/config_options&#34;&gt;Advanced Configuration&lt;/a&gt; more about advanced configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JQLZ7NJRTEo&amp;amp;t=4s&amp;amp;ab_channel=JohnCodes&#34;&gt;Watch&lt;/a&gt; a review video to know about the out of the box experience&lt;/p&gt; &#xA;&lt;h2&gt;⭐ Credits&lt;/h2&gt; &#xA;&lt;p&gt;Sincere appreciation to the following repositories, plugin authors and the entire neovim community out there that made the development of AstroNvim possible.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/acknowledgements#plugins-used-in-astronvim&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NvChad/NvChad&#34;&gt;NvChad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LunarVim&#34;&gt;LunarVim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CosmicNvim/CosmicNvim&#34;&gt;CosmicVim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34; id=&#34;madewithlua&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://lua.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>NextCitizens/ncs_core</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/NextCitizens/ncs_core</id>
    <link href="https://github.com/NextCitizens/ncs_core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful, optimized but above all open-source FiveM RolePlay core. Created by the community, for the community.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/862693343358877727/979757385520381984/Nouveau_projet_17.png&#34; alt=&#34;App Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NextCitizens Core&lt;/h1&gt; &#xA;&lt;p&gt;NextCitizens is a powerful and optimized core for your FiveM server based on RolePlay.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- NCS is under development and therefore cannot be used at this time. The official and stable versions are given as a release.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About us&lt;/h2&gt; &#xA;&lt;p&gt;NCS is a core created by the community, for the community. It was designed to enhance FiveM server development based on RolePlay. NCS was created and maintained by the community and will not be left behind.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nextcitizens.github.io/ncs_documentation/&#34;&gt;Official documentation of NextCitizens.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Server Convar [&lt;strong&gt;Requiered&lt;/strong&gt;]&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cfg&#34;&gt;ncs_log_level {1 -&amp;gt; 4}&#xA;ncs_unique_identifier {steam, license, xbl, ip, discord, live}&#xA;ncs_allow_multiple_characters {0, 1}&#xA;ncs_max_characters {1 -&amp;gt; 10} [Useless if ncs_allow_multiple_characters is 0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Discord&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/T8u4JsserD&#34;&gt;Official Discord of NextCitizens.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NextCitizens/ncs_example_server/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-yellow.svg?sanitize=true&#34; alt=&#34;GPLv3 License&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>max397574/colortils.nvim</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/max397574/colortils.nvim</id>
    <link href="https://github.com/max397574/colortils.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Some color utils for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🎨 Colortils.nvim&lt;/h1&gt; &#xA;&lt;h3&gt;Color utils for neovim&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/81827001/171041720-6bc1fc72-dd82-4250-83ec-5c08c907c695.mov&#34;&gt;https://user-images.githubusercontent.com/81827001/171041720-6bc1fc72-dd82-4250-83ec-5c08c907c695.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Color picker with nice ui&lt;/li&gt; &#xA; &lt;li&gt;Some utilities for css colors &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;List Colors&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation and Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use you favourite package manager and call the setup function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;max397574/colortils.nvim&#34;,&#xA;  cmd = &#34;Colortils&#34;,&#xA;  config = function()&#xA;    require(&#34;colortils&#34;).setup()&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;Colortils&lt;/code&gt; command to use this plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Color picker&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Colortils picker&lt;/code&gt; to access the color picker. You can provide an optional argument which is the intial color the picker will have. This is a hex color code without the &lt;code&gt;#&lt;/code&gt; at the beginning (e.g. FF00AB).&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;h&lt;/code&gt;/&lt;code&gt;l&lt;/code&gt; to change the color value under the cursor. With &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; you can yank the hex color code into the register specified in settings (see defaults below).&lt;/p&gt; &#xA;&lt;h4&gt;Css Utilities&lt;/h4&gt; &#xA;&lt;h5&gt;List colors&lt;/h5&gt; &#xA;&lt;p&gt;Use &lt;code&gt;:Colortils css list&lt;/code&gt; to get a list of all the colors in a floating window. This will &lt;em&gt;try&lt;/em&gt; (&lt;strong&gt;it&#39;s not a dependency&lt;/strong&gt;) to attach &lt;a href=&#34;https://github.com/norcalli/nvim-colorizer.lua&#34;&gt;nvim-colorizer.lua&lt;/a&gt; (&lt;a href=&#34;https://github.com/xiyaowong/nvim-colorizer.lua&#34;&gt;maintained fork&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;⚙️ Customization&lt;/h2&gt; &#xA;&lt;p&gt;You can change the settings by passing options to the setup function. This is the default configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;colortils&#34;).setup({&#xA;    register=&#34;+&#34;, -- register in which color codes will be copied: any register&#xA;    color_preview =  &#34;█ %s&#34;, -- preview for colors, if it contains `%s` this will be replaced with a hex color code of the color&#xA;    border = &#34;rounded&#34;, -- border for the float&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👀 Demo&lt;/h2&gt; &#xA;&lt;h4&gt;Color Picker with &#34;block&#34;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81827001/171042127-6b7fe7f3-a95e-4ce7-b1ea-8026d3c03805.png&#34; alt=&#34;Screenshot 2022-05-30 at 20 02 39&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Color Picker with &#34;hex&#34;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81827001/171042234-295e9bbf-d093-491c-98e8-c753f23f6dd1.png&#34; alt=&#34;Screenshot 2022-05-30 at 20 03 40&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;List css colors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81827001/171230907-313fddc8-29e6-4b97-a842-8ea69ed5b6d5.png&#34; alt=&#34;Screenshot 2022-05-31 at 18 56 23&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>glepnir/lspsaga.nvim</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/glepnir/lspsaga.nvim</id>
    <link href="https://github.com/glepnir/lspsaga.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;neovim lsp plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lspsaga.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A light-weight lsp plugin based on neovim built-in lsp with highly a performant UI.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vim-plug&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;glepnir/lspsaga.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Lspsaga support use command &lt;code&gt;Lspsaga&lt;/code&gt; with completion or use lua function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;local saga = require &#39;lspsaga&#39;&#xA;&#xA;-- add your config value here&#xA;-- default value&#xA;-- use_saga_diagnostic_sign = true&#xA;-- error_sign = &#39;&#39;,&#xA;-- warn_sign = &#39;&#39;,&#xA;-- hint_sign = &#39;&#39;,&#xA;-- infor_sign = &#39;&#39;,&#xA;-- dianostic_header_icon = &#39;   &#39;,&#xA;-- code_action_icon = &#39; &#39;,&#xA;-- code_action_prompt = {&#xA;--   enable = true,&#xA;--   sign = true,&#xA;--   sign_priority = 20,&#xA;--   virtual_text = true,&#xA;-- },&#xA;-- finder_definition_icon = &#39;  &#39;,&#xA;-- finder_reference_icon = &#39;  &#39;,&#xA;-- max_preview_lines = 10, -- preview lines of lsp_finder and definition preview&#xA;-- finder_action_keys = {&#xA;--   open = &#39;o&#39;, vsplit = &#39;s&#39;,split = &#39;i&#39;,quit = &#39;q&#39;,scroll_down = &#39;&amp;lt;C-f&amp;gt;&#39;, scroll_up = &#39;&amp;lt;C-b&amp;gt;&#39; -- quit can be a table&#xA;-- },&#xA;-- code_action_keys = {&#xA;--   quit = &#39;q&#39;,exec = &#39;&amp;lt;CR&amp;gt;&#39;&#xA;-- },&#xA;-- rename_action_keys = {&#xA;--   quit = &#39;&amp;lt;C-c&amp;gt;&#39;,exec = &#39;&amp;lt;CR&amp;gt;&#39;  -- quit can be a table&#xA;-- },&#xA;-- definition_preview_icon = &#39;  &#39;&#xA;-- &#34;single&#34; &#34;double&#34; &#34;round&#34; &#34;plus&#34;&#xA;-- border_style = &#34;single&#34;&#xA;-- rename_prompt_prefix = &#39;➤&#39;,&#xA;-- if you don&#39;t use nvim-lspconfig you must pass your server name and&#xA;-- the related filetypes into this table&#xA;-- like server_filetype_map = {metals = {&#39;sbt&#39;, &#39;scala&#39;}}&#xA;-- server_filetype_map = {}&#xA;&#xA;saga.init_lsp_saga {&#xA;  your custom option here&#xA;}&#xA;&#xA;or --use default config&#xA;saga.init_lsp_saga()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Async Lsp Finder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lsp provider to find the cursor word definition and reference&#xA;nnoremap &amp;lt;silent&amp;gt; gh &amp;lt;cmd&amp;gt;lua require&#39;lspsaga.provider&#39;.lsp_finder()&amp;lt;CR&amp;gt;&#xA;-- or use command LspSagaFinder&#xA;nnoremap &amp;lt;silent&amp;gt; gh :Lspsaga lsp_finder&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/107140076-ae77ec00-695a-11eb-8329-0b9d8361bfeb.gif&#34; width=&#34;500&#34; height=&#34;500/&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Code Action&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- code action&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;ca &amp;lt;cmd&amp;gt;lua require(&#39;lspsaga.codeaction&#39;).code_action()&amp;lt;CR&amp;gt;&#xA;vnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;ca :&amp;lt;C-U&amp;gt;lua require(&#39;lspsaga.codeaction&#39;).range_code_action()&amp;lt;CR&amp;gt;&#xA;-- or use command&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;ca :Lspsaga code_action&amp;lt;CR&amp;gt;&#xA;vnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;ca :&amp;lt;C-U&amp;gt;Lspsaga range_code_action&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/105657414-490a1100-5eff-11eb-897d-587ac1375d4e.gif&#34; width=&#34;500&#34; height=&#34;500/&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;code action auto prompt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/110590664-0e102400-81b3-11eb-9b9d-a894537104bc.gif&#34; width=&#34;500&#34; height=&#34;500/&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Hover Doc&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- show hover doc&#xA;nnoremap &amp;lt;silent&amp;gt; K &amp;lt;cmd&amp;gt;lua require(&#39;lspsaga.hover&#39;).render_hover_doc()&amp;lt;CR&amp;gt;&#xA;-- or use command&#xA;nnoremap &amp;lt;silent&amp;gt;K :Lspsaga hover_doc&amp;lt;CR&amp;gt;&#xA;&#xA;-- scroll down hover doc or scroll in definition preview&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-f&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;lspsaga.action&#39;).smart_scroll_with_saga(1)&amp;lt;CR&amp;gt;&#xA;-- scroll up hover doc&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-b&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;lspsaga.action&#39;).smart_scroll_with_saga(-1)&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/106566308-1dc09b00-656b-11eb-85e2-2ab5b23599c9.gif&#34; width=&#34;500&#34; height=&#34;500/&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;SignatureHelp&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- show signature help&#xA;nnoremap &amp;lt;silent&amp;gt; gs &amp;lt;cmd&amp;gt;lua require(&#39;lspsaga.signaturehelp&#39;).signature_help()&amp;lt;CR&amp;gt;&#xA;-- or command&#xA;nnoremap &amp;lt;silent&amp;gt; gs :Lspsaga signature_help&amp;lt;CR&amp;gt;&#xA;&#xA;and you also can use smart_scroll_with_saga to scroll in signature help win&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/105969051-c7fb7700-60c2-11eb-9c79-aef3e01d88b1.gif&#34; width=&#34;500&#34; height=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Rename&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- rename&#xA;nnoremap &amp;lt;silent&amp;gt;gr &amp;lt;cmd&amp;gt;lua require(&#39;lspsaga.rename&#39;).rename()&amp;lt;CR&amp;gt;&#xA;-- or command&#xA;nnoremap &amp;lt;silent&amp;gt;gr :Lspsaga rename&amp;lt;CR&amp;gt;&#xA;-- close rename win use &amp;lt;C-c&amp;gt; in insert mode or `q` in noremal mode or `:q`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/106115648-f6915480-618b-11eb-9818-003cfb15c8ac.gif&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Preview Definition&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- preview definition&#xA;nnoremap &amp;lt;silent&amp;gt; gd &amp;lt;cmd&amp;gt;lua require&#39;lspsaga.provider&#39;.preview_definition()&amp;lt;CR&amp;gt;&#xA;-- or use command&#xA;nnoremap &amp;lt;silent&amp;gt; gd :Lspsaga preview_definition&amp;lt;CR&amp;gt;&#xA;&#xA;can use smart_scroll_with_saga to scroll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/105657900-5b387f00-5f00-11eb-8b39-4d3b1433cb75.gif&#34; width=&#34;500&#34; height=&#34;500/&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Jump Diagnostic and Show Diagnostics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- show&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;cd &amp;lt;cmd&amp;gt;lua&#xA;require&#39;lspsaga.diagnostic&#39;.show_line_diagnostics()&amp;lt;CR&amp;gt;&#xA;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cd :Lspsaga show_line_diagnostics&amp;lt;CR&amp;gt;&#xA;-- only show diagnostic if cursor is over the area&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;cc &amp;lt;cmd&amp;gt;lua&#xA;require&#39;lspsaga.diagnostic&#39;.show_cursor_diagnostics()&amp;lt;CR&amp;gt;&#xA;&#xA;-- jump diagnostic&#xA;nnoremap &amp;lt;silent&amp;gt; [e &amp;lt;cmd&amp;gt;lua require&#39;lspsaga.diagnostic&#39;.lsp_jump_diagnostic_prev()&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; ]e &amp;lt;cmd&amp;gt;lua require&#39;lspsaga.diagnostic&#39;.lsp_jump_diagnostic_next()&amp;lt;CR&amp;gt;&#xA;-- or use command&#xA;nnoremap &amp;lt;silent&amp;gt; [e :Lspsaga diagnostic_jump_next&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; ]e :Lspsaga diagnostic_jump_prev&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/102290042-21786e00-3f7b-11eb-8026-d467bc256ba8.gif&#34; width=&#34;500&#34; height=&#34;300/&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Float Terminal&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- float terminal also you can pass the cli command in open_float_terminal function&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;A-d&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;lspsaga.floaterm&#39;).open_float_terminal()&amp;lt;CR&amp;gt; -- or open_float_terminal(&#39;lazygit&#39;)&amp;lt;CR&amp;gt;&#xA;tnoremap &amp;lt;silent&amp;gt; &amp;lt;A-d&amp;gt; &amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;:lua require(&#39;lspsaga.floaterm&#39;).close_float_terminal()&amp;lt;CR&amp;gt;&#xA;-- or use command&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;A-d&amp;gt; :Lspsaga open_floaterm&amp;lt;CR&amp;gt;&#xA;tnoremap &amp;lt;silent&amp;gt; &amp;lt;A-d&amp;gt; &amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;:Lspsaga close_floaterm&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/105658287-2c6ed880-5f01-11eb-8af6-daa6fd23576c.gif&#34; width=&#34;500&#34; height=&#34;500/&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Customize Appearance&lt;/h2&gt; &#xA;&lt;h3&gt;Colors&lt;/h3&gt; &#xA;&lt;p&gt;Colors can be simply changed by overwriting the default highlights groups LspSaga is using.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;highlight link LspSagaFinderSelection Search&#xA;&#34; or&#xA;highlight link LspSagaFinderSelection guifg=&#39;#ff0000&#39; guibg=&#39;#00ff00&#39; gui=&#39;bold&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available highlight groups are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Group Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaFinderSelection&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Currently active entry in the finder window that gets previewed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspFloatWinNormal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspFloatWinBorder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaBorderTitle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;TargetWord&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ReferencesCount&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DefinitionCount&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;TargetFileName&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DefinitionIcon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ReferencesIcon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ProviderTruncateLine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;SagaShadow&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaFinderSelection&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DiagnosticTruncateLine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DiagnosticError&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DiagnosticWarning&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DiagnosticInformation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DiagnosticHint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DefinitionPreviewTitle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaShTruncateLine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaDocTruncateLine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LineDiagTuncateLine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaCodeActionTitle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaCodeActionTruncateLine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaCodeActionContent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaRenamePromptPrefix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaRenameBorder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaHoverBorder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaSignatureHelpBorder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaCodeActionBorder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaAutoPreview&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspSagaDefPreviewBorder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LspLinesDiagBorder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ntop/ntopng</title>
    <updated>2022-06-02T01:46:54Z</updated>
    <id>tag:github.com,2022-06-02:/ntop/ntopng</id>
    <link href="https://github.com/ntop/ntopng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web-based Traffic and Security Network Traffic Monitoring&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/0f789abcef232035c05e0d2e82afa3cc3be46485/687474703a2f2f7777772e6e746f702e6f72672f77702d636f6e74656e742f75706c6f6164732f323031312f30382f6e746f706e672d69636f6e2d313530783135302e706e67&#34; alt=&#34;ntop&#34;&gt; &lt;img src=&#34;https://camo.githubusercontent.com/58e2a1ecfff62d8ecc9d74633bd1013f26e06cba/687474703a2f2f7777772e6e746f702e6f72672f77702d636f6e74656e742f75706c6f6164732f323031352f30352f6e746f702e706e67&#34; alt=&#34;ntop&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ntopng&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/ntop/ntopng&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ntop/ntopng.png?branch=dev&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/ntop/ntopng/alerts&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/ntop/ntopng.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total Alerts&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;ntopng® is a web-based network traffic monitoring application released under GPLv3. It is the new incarnation of the original ntop written in 1998, and now revamped in terms of performance, usability, and features.&lt;/p&gt; &#xA;&lt;p&gt;While you can read more about ntopng on the ntop web site (&lt;a href=&#34;http://www.ntop.org&#34;&gt;http://www.ntop.org&lt;/a&gt;), we suggest you to start reading the &lt;a href=&#34;https://github.com/ntop/ntopng/raw/dev/doc/README.md&#34;&gt;doc/README.md&lt;/a&gt; file for learning how to compile and use ntopng.&lt;/p&gt; &#xA;&lt;p&gt;If instead of source code you prefer to use a pre-built package, please go to &lt;a href=&#34;http://packages.ntop.org&#34;&gt;http://packages.ntop.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We build binary packages for the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu Linux Server x64&lt;/li&gt; &#xA; &lt;li&gt;CentOS/RedHat Linux x64&lt;/li&gt; &#xA; &lt;li&gt;Windows x64&lt;/li&gt; &#xA; &lt;li&gt;RaspberryPI/BeagleBoard ARM (based on Ubuntu Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enjoy.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;If you want to learn more about ntopng please visit the &lt;a href=&#34;https://www.ntop.org/guides/ntopng/&#34;&gt;User&#39;s Guide&lt;/a&gt; and the &lt;a href=&#34;https://www.ntop.org/guides/ntopng/api/index.html&#34;&gt;API Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;For more information about ntopng, please visit &lt;a href=&#34;https://www.ntop.org/products/traffic-analysis/ntop/&#34;&gt;http://ntop.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ntopng is a registered trademark in the US and EU.&lt;/p&gt;</summary>
  </entry>
</feed>