<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-25T01:32:47Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>frankroeder/parrot.nvim</title>
    <updated>2024-10-25T01:32:47Z</updated>
    <id>tag:github.com,2024-10-25:/frankroeder/parrot.nvim</id>
    <link href="https://github.com/frankroeder/parrot.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;parrot.nvim ðŸ¦œ - the plugin that brings stochastic parrots to Neovim. This is a gp.nvim-fork focused on simplicity.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;parrot.nvim ðŸ¦œ&lt;/h1&gt; &#xA; &lt;p&gt;This is &lt;a href=&#34;https://github.com/frankroeder/parrot.nvim&#34;&gt;parrot.nvim&lt;/a&gt;, the ultimate &lt;a href=&#34;https://en.wikipedia.org/wiki/Stochastic_parrot&#34;&gt;stochastic parrot&lt;/a&gt; to support your text editing inside Neovim.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/frankroeder/parrot.nvim/main/#features&#34;&gt;Features&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/frankroeder/parrot.nvim/main/#demo&#34;&gt;Demo&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/frankroeder/parrot.nvim/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/frankroeder/parrot.nvim/main/#commands&#34;&gt;Commands&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/frankroeder/parrot.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/frankroeder/parrot.nvim/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/frankroeder/parrot.nvim/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA; &lt;img src=&#34;https://github.com/frankroeder/parrot.nvim/assets/19746932/b19c5260-1713-400a-bd55-3faa87f4b509&#34; alt=&#34;parrot.nvim logo&#34; width=&#34;50%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/frankroeder/parrot.nvim&#34;&gt;parrot.nvim&lt;/a&gt; offers a seamless out-of-the-box experience, providing tight integration of current LLM APIs into your Neovim workflows, with a focus solely on text generation. The selected core features include on-demand text completion and editing, as well as chat-like sessions within native Neovim buffers. While this project is still under development, a substantial part of the code is based on an early fork of the brilliant work by Tibor Schmidt&#39;s &lt;a href=&#34;https://github.com/Robitx/gp.nvim&#34;&gt;gp.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Persistent conversations stored as markdown files within Neovim&#39;s standard path or a user-defined location&lt;/li&gt; &#xA; &lt;li&gt;Custom hooks for inline text editing based on user instructions and chats with predefined system prompts&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple providers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.anthropic.com/api&#34;&gt;Anthropic API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://blog.perplexity.ai/blog/introducing-pplx-api&#34;&gt;Perplexity.ai API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/&#34;&gt;OpenAI API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.mistral.ai/api/&#34;&gt;Mistral API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ai.google.dev/gemini-api/docs&#34;&gt;Gemini API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://console.groq.com&#34;&gt;Groq API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Local and offline serving via &lt;a href=&#34;https://github.com/ollama/ollama&#34;&gt;ollama&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/models&#34;&gt;GitHub Models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.api.nvidia.com&#34;&gt;NVIDIA API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://console.x.ai&#34;&gt;xAI API&lt;/a&gt; for &lt;strong&gt;Grok&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Flexible API credential management from various sources: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Environment variables&lt;/li&gt; &#xA;   &lt;li&gt;Bash commands&lt;/li&gt; &#xA;   &lt;li&gt;Password manager CLIs (lazy evaluation)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Repository-specific instructions via &lt;code&gt;.parrot.md&lt;/code&gt; file using the &lt;code&gt;PrtContext&lt;/code&gt; command&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No&lt;/strong&gt; autocompletion and &lt;strong&gt;no&lt;/strong&gt; hidden requests in the background to analyze your files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Seamlessly switch between providers and models.&lt;/p&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/user-attachments/assets/0df0348f-85c0-4a2d-ba1f-ede2738c6d02&#34; width=&#34;100%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Trigger code completions based on comments.&lt;/p&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/user-attachments/assets/197f99ac-9854-4fe9-bddb-394c1b64f6b6&#34; width=&#34;100%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Let the parrot fix your bugs.&lt;/p&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/user-attachments/assets/d3a0b261-a9dd-45e6-b508-dc5280594b06&#34; width=&#34;100%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Rewrite a visual selection with `PrtRewrite`.&lt;/summary&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img src=&#34;https://github.com/user-attachments/assets/c3d38702-7558-4e9e-96a3-c43312a543d0&#34; width=&#34;100%&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Append code with the visual selection as context with `PrtAppend`.&lt;/summary&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img src=&#34;https://github.com/user-attachments/assets/80af02fa-cd88-4023-8a55-f2d3c0a2f28e&#34; width=&#34;100%&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Add comments to a function with `PrtPrepend`.&lt;/summary&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img src=&#34;https://github.com/user-attachments/assets/9a6bfe66-4bc7-4b63-8694-67bf9c23c064&#34; width=&#34;100%&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Retry your latest rewrite, append or prepend with `PrtRetry`.&lt;/summary&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img src=&#34;https://github.com/user-attachments/assets/03442f34-687b-482e-b7f1-7812f70739cc&#34; width=&#34;100%&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;This plugin requires the latest version of Neovim and relies on a carefully selected set of established plugins.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases&#34;&gt;&lt;code&gt;neovim 0.10+&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;&lt;code&gt;plenary&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/a&gt; (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; (optional, requires ripgrep)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lazy.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;frankroeder/parrot.nvim&#34;,&#xA;  dependencies = { &#34;ibhagwan/fzf-lua&#34;, &#34;nvim-lua/plenary.nvim&#34; },&#xA;  opts = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;packer&#34;).startup(function()&#xA;  use({&#xA;    &#34;frankroeder/parrot.nvim&#34;,&#xA;    requires = { &#39;ibhagwan/fzf-lua&#39;, &#39;nvim-lua/plenary.nvim&#39;},&#xA;    config = function()&#xA;      require(&#34;parrot&#34;).setup()&#xA;    end,&#xA;  })&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/frankroeder/parrot.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/parrot/start/parrot.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;The minimal requirement is to at least set up one provider, hence one from the selection below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;frankroeder/parrot.nvim&#34;,&#xA;  dependencies = { &#39;ibhagwan/fzf-lua&#39;, &#39;nvim-lua/plenary.nvim&#39; },&#xA;  -- optionally include &#34;rcarriga/nvim-notify&#34; for beautiful notifications&#xA;  config = function()&#xA;    require(&#34;parrot&#34;).setup {&#xA;      -- Providers must be explicitly added to make them available.&#xA;      providers = {&#xA;        anthropic = {&#xA;          api_key = os.getenv &#34;ANTHROPIC_API_KEY&#34;,&#xA;        },&#xA;        gemini = {&#xA;          api_key = os.getenv &#34;GEMINI_API_KEY&#34;,&#xA;        },&#xA;        groq = {&#xA;          api_key = os.getenv &#34;GROQ_API_KEY&#34;,&#xA;        },&#xA;        mistral = {&#xA;          api_key = os.getenv &#34;MISTRAL_API_KEY&#34;,&#xA;        },&#xA;        pplx = {&#xA;          api_key = os.getenv &#34;PERPLEXITY_API_KEY&#34;,&#xA;        },&#xA;        -- provide an empty list to make provider available (no API key required)&#xA;        ollama = {},&#xA;        openai = {&#xA;          api_key = os.getenv &#34;OPENAI_API_KEY&#34;,&#xA;        },&#xA;        github = {&#xA;          api_key = os.getenv &#34;GITHUB_TOKEN&#34;,&#xA;        },&#xA;        nvidia = {&#xA;          api_key = os.getenv &#34;NVIDIA_API_KEY&#34;,&#xA;        },&#xA;        xai = {&#xA;          api_key = os.getenv &#34;XAI_API_KEY&#34;,&#xA;        },&#xA;      },&#xA;    }&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;Below are the available commands that can be configured as keybindings. These commands are included in the default setup. Additional useful commands are implemented through hooks (see below).&lt;/p&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtChatNew &amp;lt;target&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open a new chat&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtChatToggle &amp;lt;target&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle chat (open last chat or new one)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtChatPaste &amp;lt;target&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Paste visual selection into the latest chat&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtInfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print plugin config&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtContext &amp;lt;target&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Edits the local context file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtChatFinder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fuzzy search chat files using fzf&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtChatDelete&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete the current chat file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtChatRespond&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Trigger chat respond (in chat file)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtStop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interrupt ongoing respond&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtProvider &amp;lt;provider&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Switch the provider (empty arg triggers fzf)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtModel &amp;lt;model&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Switch the model (empty arg triggers fzf)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtStatus&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prints current provider and model selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Interactive&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtRewrite&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rewrites the visual selection based on a provided prompt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtAppend&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Append text to the visual selection based on a provided prompt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtPrepend&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prepend text to the visual selection based on a provided prompt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtNew&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompt the model to respond in a new window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtEnew&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompt the model to respond in a new buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtVnew&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompt the model to respond in a vsplit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtTabnew&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompt the model to respond in a new tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtRetry&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Repeats the last rewrite/append/prepend&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Example Hooks&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtImplement&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Takes the visual selection as prompt to generate code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PrtAsk&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ask the model a question&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;With &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt;, we indicate the command to open the chat within one of the following target locations (defaults to &lt;code&gt;toggle_target&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;popup&lt;/code&gt;: open a popup window which can be configured via the options provided below&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;split&lt;/code&gt;: open the chat in a horizontal split&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vsplit&lt;/code&gt;: open the chat in a vertical split&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tabnew&lt;/code&gt;: open the chat in a new tab&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All chat commands (&lt;code&gt;PrtChatNew, PrtChatToggle&lt;/code&gt;) and custom hooks support the visual selection to appear in the chat when triggered. Interactive commands require the user to make use of the &lt;a href=&#34;https://raw.githubusercontent.com/frankroeder/parrot.nvim/main/#template-placeholders&#34;&gt;template placeholders&lt;/a&gt; to consider a visual selection within an API request.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    -- The provider definitions include endpoints, API keys, default parameters,&#xA;    -- and topic model arguments for chat summarization, with an example provided for Anthropic.&#xA;    providers = {&#xA;      anthropic = {&#xA;        api_key = os.getenv(&#34;ANTHROPIC_API_KEY&#34;),&#xA;        -- OPTIONAL: Alternative methods to retrieve API key&#xA;        -- Using GPG for decryption:&#xA;        -- api_key = { &#34;gpg&#34;, &#34;--decrypt&#34;, vim.fn.expand(&#34;$HOME&#34;) .. &#34;/anthropic_api_key.txt.gpg&#34; },&#xA;        -- Using macOS Keychain:&#xA;        -- api_key = { &#34;/usr/bin/security&#34;, &#34;find-generic-password&#34;, &#34;-s anthropic-api-key&#34;, &#34;-w&#34; },&#xA;        endpoint = &#34;https://api.anthropic.com/v1/messages&#34;,&#xA;        topic_prompt = &#34;You only respond with 3 to 4 words to summarize the past conversation.&#34;,&#xA;        -- usually a cheap and fast model to generate the chat topic based on&#xA;        -- the whole chat history&#xA;        topic = {&#xA;          model = &#34;claude-3-haiku-20240307&#34;,&#xA;          params = { max_tokens = 32 },&#xA;        },&#xA;        -- default parameters for the actual model&#xA;        params = {&#xA;          chat = { max_tokens = 4096 },&#xA;          command = { max_tokens = 4096 },&#xA;        },&#xA;      },&#xA;      ...&#xA;    }&#xA;&#xA;    -- default system prompts used for the chat sessions and the command routines&#xA;    system_prompt = {&#xA;      chat = ...,&#xA;      command = ...&#xA;    },&#xA;&#xA;    -- the prefix used for all commands&#xA;    cmd_prefix = &#34;Prt&#34;,&#xA;&#xA;    -- optional parameters for curl&#xA;    curl_params = {},&#xA;&#xA;    -- The directory to store persisted state information like the&#xA;    -- current provider and the selected models&#xA;    state_dir = vim.fn.stdpath(&#34;data&#34;):gsub(&#34;/$&#34;, &#34;&#34;) .. &#34;/parrot/persisted&#34;,&#xA;&#xA;    -- The directory to store the chats (searched with PrtChatFinder)&#xA;    chat_dir = vim.fn.stdpath(&#34;data&#34;):gsub(&#34;/$&#34;, &#34;&#34;) .. &#34;/parrot/chats&#34;,&#xA;&#xA;    -- Chat user prompt prefix&#xA;    chat_user_prefix = &#34;ðŸ—¨:&#34;,&#xA;&#xA;    -- llm prompt prefix&#xA;    llm_prefix = &#34;ðŸ¦œ:&#34;,&#xA;&#xA;    -- Explicitly confirm deletion of a chat file&#xA;    chat_confirm_delete = true,&#xA;&#xA;    -- When available, call API for model selection&#xA;    online_model_selection = false,&#xA;&#xA;    -- Local chat buffer shortcuts&#xA;    chat_shortcut_respond = { modes = { &#34;n&#34;, &#34;i&#34;, &#34;v&#34;, &#34;x&#34; }, shortcut = &#34;&amp;lt;C-g&amp;gt;&amp;lt;C-g&amp;gt;&#34; },&#xA;    chat_shortcut_delete = { modes = { &#34;n&#34;, &#34;i&#34;, &#34;v&#34;, &#34;x&#34; }, shortcut = &#34;&amp;lt;C-g&amp;gt;d&#34; },&#xA;    chat_shortcut_stop = { modes = { &#34;n&#34;, &#34;i&#34;, &#34;v&#34;, &#34;x&#34; }, shortcut = &#34;&amp;lt;C-g&amp;gt;s&#34; },&#xA;    chat_shortcut_new = { modes = { &#34;n&#34;, &#34;i&#34;, &#34;v&#34;, &#34;x&#34; }, shortcut = &#34;&amp;lt;C-g&amp;gt;c&#34; },&#xA;&#xA;    -- Option to move the cursor to the end of the file after finished respond&#xA;    chat_free_cursor = false,&#xA;&#xA;     -- use prompt buftype for chats (:h prompt-buffer)&#xA;    chat_prompt_buf_type = false,&#xA;&#xA;    -- Default target for  PrtChatToggle, PrtChatNew, PrtContext and the chats opened from the ChatFinder&#xA;    -- values: popup / split / vsplit / tabnew&#xA;    toggle_target = &#34;vsplit&#34;,&#xA;&#xA;    -- The interactive user input appearing when can be &#34;native&#34; for&#xA;    -- vim.ui.input or &#34;buffer&#34; to query the input within a native nvim buffer&#xA;    -- (see video demonstrations below)&#xA;    user_input_ui = &#34;native&#34;,&#xA;&#xA;    -- Popup window layout&#xA;    -- border: &#34;single&#34;, &#34;double&#34;, &#34;rounded&#34;, &#34;solid&#34;, &#34;shadow&#34;, &#34;none&#34;&#xA;    style_popup_border = &#34;single&#34;,&#xA;&#xA;    -- margins are number of characters or lines&#xA;    style_popup_margin_bottom = 8,&#xA;    style_popup_margin_left = 1,&#xA;    style_popup_margin_right = 2,&#xA;    style_popup_margin_top = 2,&#xA;    style_popup_max_width = 160&#xA;&#xA;    -- Prompt used for interactive LLM calls like PrtRewrite where {{llm}} is&#xA;    -- a placeholder for the llm name&#xA;    command_prompt_prefix_template = &#34;ðŸ¤– {{llm}} ~ &#34;,&#xA;&#xA;    -- auto select command response (easier chaining of commands)&#xA;    -- if false it also frees up the buffer cursor for further editing elsewhere&#xA;    command_auto_select_response = true,&#xA;&#xA;    -- fzf_lua options for PrtModel and PrtChatFinder when plugin is installed&#xA;    fzf_lua_opts = {&#xA;        [&#34;--ansi&#34;] = true,&#xA;        [&#34;--sort&#34;] = &#34;&#34;,&#xA;        [&#34;--info&#34;] = &#34;inline&#34;,&#xA;        [&#34;--layout&#34;] = &#34;reverse&#34;,&#xA;        [&#34;--preview-window&#34;] = &#34;nohidden:right:75%&#34;,&#xA;    },&#xA;&#xA;    -- Enables the query spinner animation &#xA;    enable_spinner = true,&#xA;    -- Type of spinner animation to display while loading&#xA;    -- Available options: &#34;dots&#34;, &#34;line&#34;, &#34;star&#34;, &#34;bouncing_bar&#34;, &#34;bouncing_ball&#34;&#xA;    spinner_type = &#34;star&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Demonstrations&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With `user_input_ui = &#34;native&#34;`, use `vim.ui.input` as slim input interface.&lt;/summary&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img src=&#34;https://github.com/user-attachments/assets/c2fe3bde-a35a-4f2a-957b-687e4f6f2e5c&#34; width=&#34;100%&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With `user_input_ui = &#34;buffer&#34;`, your input is simply a buffer. All of the content is passed to the API when closed.&lt;/summary&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img src=&#34;https://github.com/user-attachments/assets/63e6e1c4-a2ab-4c60-9b43-332e4b581360&#34; width=&#34;100%&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;The spinner is a useful indicator for providers that take longer to respond.&lt;/summary&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;img src=&#34;https://github.com/user-attachments/assets/ebcd27cb-da00-4150-a0f8-1d2e1afa0acb&#34; width=&#34;100%&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Key Bindings&lt;/h3&gt; &#xA;&lt;p&gt;This plugin provides the following default key mappings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keymap&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-g&amp;gt;c&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens a new chat via &lt;code&gt;PrtChatNew&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-g&amp;gt;&amp;lt;C-g&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Trigger the API to generate a response via &lt;code&gt;PrtChatRespond&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-g&amp;gt;s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stop the current text generation via &lt;code&gt;PrtStop&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-g&amp;gt;d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete the current chat file via &lt;code&gt;PrtChatDelete&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Adding a new command&lt;/h3&gt; &#xA;&lt;h4&gt;Ask a single-turn question and receive the answer in a popup window&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;parrot&#34;).setup {&#xA;    -- ...&#xA;    hooks = {&#xA;      Ask = function(parrot, params)&#xA;        local template = [[&#xA;          In light of your existing knowledge base, please generate a response that&#xA;          is succinct and directly addresses the question posed. Prioritize accuracy&#xA;          and relevance in your answer, drawing upon the most recent information&#xA;          available to you. Aim to deliver your response in a concise manner,&#xA;          focusing on the essence of the inquiry.&#xA;          Question: {{command}}&#xA;        ]]&#xA;        local model_obj = parrot.get_model(&#34;command&#34;)&#xA;        parrot.logger.info(&#34;Asking model: &#34; .. model_obj.name)&#xA;        parrot.Prompt(params, parrot.ui.Target.popup, model_obj, &#34;ðŸ¤– Ask ~ &#34;, template)&#xA;      end,&#xA;    }&#xA;    -- ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Start a chat with a predefined chat prompt to check your spelling.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;parrot&#34;).setup {&#xA;    -- ...&#xA;    hooks = {&#xA;      SpellCheck = function(prt, params)&#xA;        local chat_prompt = [[&#xA;          Your task is to take the text provided and rewrite it into a clear,&#xA;          grammatically correct version while preserving the original meaning&#xA;          as closely as possible. Correct any spelling mistakes, punctuation&#xA;          errors, verb tense issues, word choice problems, and other&#xA;          grammatical mistakes.&#xA;        ]]&#xA;        prt.ChatNew(params, chat_prompt)&#xA;      end,&#xA;    }&#xA;    -- ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to my &lt;a href=&#34;https://github.com/frankroeder/dotfiles/raw/master/nvim/lua/plugins/parrot.lua&#34;&gt;personal lazy.nvim setup&lt;/a&gt; or those of &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=frankroeder%2Fparrot.nvim+language%3ALua&amp;amp;type=code&amp;amp;l=Lua&#34;&gt;other users&lt;/a&gt; for further hooks and key bindings.&lt;/p&gt; &#xA;&lt;h3&gt;Template Placeholders&lt;/h3&gt; &#xA;&lt;p&gt;Users can utilize the following placeholders in their hook and system templates to inject additional context:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Placeholder&lt;/th&gt; &#xA;   &lt;th&gt;Content&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{selection}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Current visual selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{filetype}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filetype of the current buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{filepath}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Full path of the current file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{filecontent}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Full content of the current buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{multifilecontent}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Full content of all open buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Below is an example of how to use these placeholders in a completion hook, which receives the full file context and the selected code snippet as input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;parrot&#34;).setup {&#xA;    -- ...&#xA;    hooks = {&#xA;      CompleteFullContext = function(prt, params)&#xA;        local template = [[&#xA;        I have the following code from {{filename}}:&#xA;&#xA;        ```{{filetype}}&#xA;        {filecontent}}&#xA;        ```&#xA;&#xA;        Please look at the following section specifically:&#xA;        ```{{filetype}}&#xA;        {{selection}}&#xA;        ```&#xA;&#xA;        Please finish the code above carefully and logically.&#xA;        Respond just with the snippet of code that should be inserted.&#xA;        ]]&#xA;        local model_obj = prt.get_model(&#34;command&#34;)&#xA;        prt.Prompt(params, prt.ui.Target.append, model_obj, nil, template)&#xA;      end,&#xA;    }&#xA;    -- ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The placeholders &lt;code&gt;{{filetype}}&lt;/code&gt; and &lt;code&gt;{{filecontent}}&lt;/code&gt; can also be used in the &lt;code&gt;chat_prompt&lt;/code&gt; when creating custom hooks calling &lt;code&gt;prt.ChatNew(params, chat_prompt)&lt;/code&gt; to directly inject the whole file content.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;parrot&#34;).setup {&#xA;    -- ...&#xA;      CodeConsultant = function(prt, params)&#xA;        local chat_prompt = [[&#xA;          Your task is to analyze the provided {{filetype}} code and suggest&#xA;          improvements to optimize its performance. Identify areas where the&#xA;          code can be made more efficient, faster, or less resource-intensive.&#xA;          Provide specific suggestions for optimization, along with explanations&#xA;          of how these changes can enhance the code&#39;s performance. The optimized&#xA;          code should maintain the same functionality as the original code while&#xA;          demonstrating improved efficiency.&#xA;&#xA;          Here is the code&#xA;          ```{{filetype}}&#xA;          {{filecontent}}&#xA;          ```&#xA;        ]]&#xA;        prt.ChatNew(params, chat_prompt)&#xA;      end,&#xA;    }&#xA;    -- ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Statusline Support&lt;/h2&gt; &#xA;&lt;p&gt;Knowing the current chat or command model can be shown using your favorite statusline plugin. Below, we provide an example for &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  -- define function and formatting of the information&#xA;  local function parrot_status()&#xA;    local status_info = require(&#34;parrot.config&#34;).get_status_info()&#xA;    local status = &#34;&#34;&#xA;    if status_info.is_chat then&#xA;      status = status_info.prov.chat.name&#xA;    else&#xA;      status = status_info.prov.command.name&#xA;    end&#xA;    return string.format(&#34;%s(%s)&#34;, status, status_info.model)&#xA;  end&#xA;&#xA;  -- add to lueline section&#xA;  require(&#39;lualine&#39;).setup {&#xA;    sections = {&#xA;      lualine_a = { parrot_status }&#xA;  }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bonus&lt;/h2&gt; &#xA;&lt;p&gt;Access parrot.nvim directly from your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;command nvim -c &#34;PrtChatNew&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also works by piping content directly into the chat:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls -l | command nvim - -c &#34;normal ggVGy&#34; -c &#34;:PrtChatNew&#34; -c &#34;normal p&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add status line integration/ notifications for summary of tokens used or money spent&lt;/li&gt; &#xA; &lt;li&gt;Improve the documentation&lt;/li&gt; &#xA; &lt;li&gt;Create a tutorial video&lt;/li&gt; &#xA; &lt;li&gt;Reduce overall code complexity and improve robustness&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I am encountering errors related to the state. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If the state is corrupted, simply delete the file &lt;code&gt;~/.local/share/nvim/parrot/persisted/state.json&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;The completion feature is not functioning, and I am receiving errors. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Ensure that you have an adequate amount of API credits and examine the log file &lt;code&gt;~/.local/state/nvim/parrot.nvim.log&lt;/code&gt; for any errors.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;I have discovered a bug, have a feature suggestion, or possess a general idea to enhance this project. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Everyone is invited to contribute to this project! If you have any suggestions, ideas, or bug reports, please feel free to submit an issue.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frankroeder/parrot.nvim&#34;&gt;parrot.nvim&lt;/a&gt; is a fork of an earlier version of &lt;a href=&#34;https://github.com/Robitx/gp.nvim&#34;&gt;robitx/gp.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huynle/ogpt.nvim&#34;&gt;huynle/ogpt.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#frankroeder/parrot.nvim&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=frankroeder/parrot.nvim&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>