<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-09T01:44:22Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ibhagwan/fzf-lua</title>
    <updated>2022-06-09T01:44:22Z</updated>
    <id>tag:github.com,2022-06-09:/ibhagwan/fzf-lua</id>
    <link href="https://github.com/ibhagwan/fzf-lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Improved fzf.vim written in lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;fzf &lt;span&gt;❤️&lt;/span&gt; lua&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim-0.5-57A143?style=flat-square&amp;amp;logo=neovim&#34; alt=&#34;Neovim version&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#commands&#34;&gt;Commands&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#customization&#34;&gt;Customization&lt;/a&gt; • &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/ibhagwan/fzf-lua/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; changed my life, it can change yours too, if you allow it.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;p&gt;What more can be said about &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt;? It is the single most impactful tool for my command line workflow, once I started using fzf I couldn’t see myself living without it.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;To understand fzf properly I highly recommended &lt;a href=&#34;https://www.youtube.com/watch?v=qgG5Jhi_Els&#34;&gt;fzf screencast&lt;/a&gt; by &lt;a href=&#34;https://github.com/samoshkin&#34;&gt;@samoshkin&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is my take on the original &lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;fzf.vim&lt;/a&gt;, written in lua for neovim 0.5, it builds on the elegant &lt;a href=&#34;https://github.com/vijaymarupudi/nvim-fzf&#34;&gt;nvim-fzf&lt;/a&gt; as an async interface to create a performant and lightweight fzf client for neovim that rivals any of the new shiny fuzzy finders for neovim.&lt;/p&gt; &#xA;&lt;h2&gt;Why Fzf-Lua&lt;/h2&gt; &#xA;&lt;p&gt;... and not, to name a few, &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope&lt;/a&gt; or &lt;a href=&#34;https://github.com/liuchengxu/vim-clap&#34;&gt;vim-clap&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;p&gt;As &lt;a href=&#34;https://github.com/junegunn&#34;&gt;@junegunn&lt;/a&gt; himself put it, “because you can and you love &lt;code&gt;fzf&lt;/code&gt;”.&lt;/p&gt; &#xA;&lt;p&gt;If you’re happy with your current setup there is absolutely no reason to switch.&lt;/p&gt; &#xA;&lt;p&gt;That said, without taking anything away from the greatness of other plugins I found it more efficient having a uniform experience between my shell and my nvim. In addition &lt;code&gt;fzf&lt;/code&gt; has been a rock for me since I started using it and hadn’t failed me once, it never hangs and can handle almost anything you throw at it. That, &lt;strong&gt;and colorful file icons and git indicators!&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Linux&lt;/code&gt; or &lt;code&gt;MacOS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases&#34;&gt;&lt;code&gt;neovim&lt;/code&gt;&lt;/a&gt; version &amp;gt; &lt;code&gt;0.5.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; version &amp;gt; &lt;code&gt;0.27&lt;/code&gt; (see note below) &lt;strong&gt;or&lt;/strong&gt; &lt;a href=&#34;https://github.com/lotabout/skim&#34;&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/a&gt; binary installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;fzf&lt;/code&gt; version &amp;gt; &lt;code&gt;0.27&lt;/code&gt; is recommended but it&#39;s still possible to use &lt;code&gt;fzf&lt;/code&gt; version &amp;gt; &lt;code&gt;0.24&lt;/code&gt; by setting &lt;code&gt;fzf_opts = { [&#39;--border&#39;] = false }&lt;/code&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#customization&#34;&gt;Customization&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; - better &lt;code&gt;find&lt;/code&gt; utility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;rg&lt;/a&gt; - better &lt;code&gt;grep&lt;/code&gt; utility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/bat&#34;&gt;bat&lt;/a&gt; - syntax highlighted previews when using fzf&#39;s native previewer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dandavison/delta&#34;&gt;delta&lt;/a&gt; - syntax highlighted git pager for git status previews&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atanunq/viu&#34;&gt;viu&lt;/a&gt; - terminal image previews (needs to be configured via &lt;code&gt;previewer.builtin.extensions&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seebye/ueberzug&#34;&gt;ueberzug&lt;/a&gt; - X11 image previews (needs to be configured via &lt;code&gt;previewer.builtin.extensions&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; - for Debug Adapter Protocol (DAP) support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;ibhagwan/fzf-lua&#39;, {&#39;branch&#39;: &#39;main&#39;}&#xA;&#34; optional for icon support&#xA;Plug &#39;kyazdani42/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#39;ibhagwan/fzf-lua&#39;,&#xA;  -- optional for icon support&#xA;  requires = { &#39;kyazdani42/nvim-web-devicons&#39; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you already have fzf installed you do not need to install &lt;code&gt;fzf&lt;/code&gt; or &lt;code&gt;fzf.vim&lt;/code&gt;, however if you do not have it installed, &lt;strong&gt;you only need&lt;/strong&gt; fzf which can be installed with (fzf.vim is not a requirement nor conflict):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;junegunn/fzf&#39;, { &#39;do&#39;: { -&amp;gt; fzf#install() } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;or with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use = { &#39;junegunn/fzf&#39;, run = &#39;./install --bin&#39;, }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Fzf-lua aims to be as plug and play as possible with sane defaults, you can run any fzf-lua command like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#39;fzf-lua&#39;).files()&#xA;-- or using the `FzfLua` vim command:&#xA;:FzfLua files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#39;fzf-lua&#39;).files({ cwd = &#39;~/.config&#39; })&#xA;-- or using the `FzfLua` vim command:&#xA;:FzfLua files cwd=~/.config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which can be easily mapped to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;c-P&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;fzf-lua&#39;).files()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if using &lt;code&gt;init.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;c-P&amp;gt;&#39;,&#xA;    &#34;&amp;lt;cmd&amp;gt;lua require(&#39;fzf-lua&#39;).files()&amp;lt;CR&amp;gt;&#34;,&#xA;    { noremap = true, silent = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Buffers and Files&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt; on a path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;oldfiles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;opened files history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;quickfix list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;loclist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;location list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open buffers lines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;blines&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;current buffer lines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tabs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open tabs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;args&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;argument list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search for a pattern with &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;rg&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_last&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;run search again with the last pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_cword&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search word under cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_cWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search WORD under cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_visual&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search visual selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_project&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search all project lines (fzf.vim&#39;s &lt;code&gt;:Rg&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_curbuf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search current buffer lines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lgrep_curbuf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;live grep current buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;live grep current project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;live_grep_resume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;live grep continue last search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;live_grep_glob&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;live_grep with &lt;code&gt;rg --glob&lt;/code&gt; support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;live_grep_native&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;performant version of &lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Tags&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search project tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;btags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search buffer tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;grep project tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep_cword&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; word under cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep_cWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; WORD under cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep_visual&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; visual selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_live_grep&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;live grep project tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Git&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;git ls-files&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_status&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_commits&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;git commit log (project)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_bcommits&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;git commit log (buffer)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_branches&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;git branches&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_stash&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;git stash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;LSP&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_references&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;References&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_definitions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Definitions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_declarations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Declarations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_typedefs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Type Definitions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_implementations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Implementations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_document_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Document Symbols&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_workspace_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Workspace Symbols&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_live_workspace_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Workspace Symbols (live query)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_code_actions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Code Actions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_document_diagnostics&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Document Diagnostics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_workspace_diagnostics&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Workspace Diagnostics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_incoming_calls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Incoming Calls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_outgoing_calls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Outgoing Calls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Misc&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;resume last command/query&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fzf-lua builtin commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;help_tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;help tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;man_pages&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;man pages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;colorschemes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;color schemes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlights&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;highlight groups&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;commands&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;neovim commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;command_history&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;command history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;search_history&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;marks&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:marks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;jumps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:jumps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;changes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;registers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:registers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tagstack&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;keymaps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;key mappings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;spell_suggest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;spelling suggestions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;filetypes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;neovim filetypes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;packadd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:packadd &#xA;    &lt;package&gt;&lt;/package&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Neovim API&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:help vim.ui.select&lt;/code&gt; for more info&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;register_ui_select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;register fzf-lua as the UI interface for &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;deregister_ui_select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;de-register fzf-lua with &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;nvim-dap&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Requires &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap_commands&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;list,run &lt;code&gt;nvim-dap&lt;/code&gt; builtin commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap_configurations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;list,run debug configurations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap_breakpoints&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;list,delete breakpoints&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap_variables&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;active session variables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap_frames&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;active session jump to frame&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;I tried to make it as customizable as possible, if you find you need to change something that isn’t below, open an issue and I’ll do my best to add it.&lt;/p&gt; &#xA;&lt;p&gt;customization can be achieved by calling the &lt;code&gt;setup()&lt;/code&gt; function or individually sending parameters to a builtin command, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#39;fzf-lua&#39;).files({ fzf_opts = {[&#39;--layout&#39;] = &#39;reverse-list&#39;} })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consult the list below for available settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local actions = require &#34;fzf-lua.actions&#34;&#xA;require&#39;fzf-lua&#39;.setup {&#xA;  -- fzf_bin         = &#39;sk&#39;,            -- use skim instead of fzf?&#xA;                                        -- https://github.com/lotabout/skim&#xA;  global_resume      = true,            -- enable global `resume`?&#xA;                                        -- can also be sent individually:&#xA;                                        -- `&amp;lt;any_function&amp;gt;.({ gl ... })`&#xA;  global_resume_query = true,           -- include typed query in `resume`?&#xA;  winopts = {&#xA;    -- split         = &#34;belowright new&#34;,-- open in a split instead?&#xA;                                        -- &#34;belowright new&#34;  : split below&#xA;                                        -- &#34;aboveleft new&#34;   : split above&#xA;                                        -- &#34;belowright vnew&#34; : split right&#xA;                                        -- &#34;aboveleft vnew   : split left&#xA;    -- Only valid when using a float window&#xA;    -- (i.e. when &#39;split&#39; is not defined, default)&#xA;    height           = 0.85,            -- window height&#xA;    width            = 0.80,            -- window width&#xA;    row              = 0.35,            -- window row position (0=top, 1=bottom)&#xA;    col              = 0.50,            -- window col position (0=left, 1=right)&#xA;    -- border argument passthrough to nvim_open_win(), also used&#xA;    -- to manually draw the border characters around the preview&#xA;    -- window, can be set to &#39;false&#39; to remove all borders or to&#xA;    -- &#39;none&#39;, &#39;single&#39;, &#39;double&#39;, &#39;thicc&#39; or &#39;rounded&#39; (default)&#xA;    border           = { &#39;╭&#39;, &#39;─&#39;, &#39;╮&#39;, &#39;│&#39;, &#39;╯&#39;, &#39;─&#39;, &#39;╰&#39;, &#39;│&#39; },&#xA;    fullscreen       = false,           -- start fullscreen?&#xA;    hl = {&#xA;      normal         = &#39;Normal&#39;,        -- window normal color (fg+bg)&#xA;      border         = &#39;Normal&#39;,        -- border color (try &#39;FloatBorder&#39;)&#xA;      -- Only valid with the builtin previewer:&#xA;      cursor         = &#39;Cursor&#39;,        -- cursor highlight (grep/LSP matches)&#xA;      cursorline     = &#39;CursorLine&#39;,    -- cursor line&#xA;      search         = &#39;Search&#39;,        -- search matches (ctags)&#xA;      -- title       = &#39;Normal&#39;,        -- preview border title (file/buffer)&#xA;      -- scrollbar_f = &#39;PmenuThumb&#39;,    -- scrollbar &#34;full&#34; section highlight&#xA;      -- scrollbar_e = &#39;PmenuSbar&#39;,     -- scrollbar &#34;empty&#34; section highlight&#xA;    },&#xA;    preview = {&#xA;      -- default     = &#39;bat&#39;,           -- override the default previewer?&#xA;                                        -- default uses the &#39;builtin&#39; previewer&#xA;      border         = &#39;border&#39;,        -- border|noborder, applies only to&#xA;                                        -- native fzf previewers (bat/cat/git/etc)&#xA;      wrap           = &#39;nowrap&#39;,        -- wrap|nowrap&#xA;      hidden         = &#39;nohidden&#39;,      -- hidden|nohidden&#xA;      vertical       = &#39;down:45%&#39;,      -- up|down:size&#xA;      horizontal     = &#39;right:60%&#39;,     -- right|left:size&#xA;      layout         = &#39;flex&#39;,          -- horizontal|vertical|flex&#xA;      flip_columns   = 120,             -- #cols to switch to horizontal on flex&#xA;      -- Only valid with the builtin previewer:&#xA;      title          = true,            -- preview border title (file/buf)?&#xA;      scrollbar      = &#39;float&#39;,         -- `false` or string:&#39;float|border&#39;&#xA;                                        -- float:  in-window floating border&#xA;                                        -- border: in-border chars (see below)&#xA;      scrolloff      = &#39;-2&#39;,            -- float scrollbar offset from right&#xA;                                        -- applies only when scrollbar = &#39;float&#39;&#xA;      scrollchars    = {&#39;█&#39;, &#39;&#39; },      -- scrollbar chars ({ &amp;lt;full&amp;gt;, &amp;lt;empty&amp;gt; }&#xA;                                        -- applies only when scrollbar = &#39;border&#39;&#xA;      delay          = 100,             -- delay(ms) displaying the preview&#xA;                                        -- prevents lag on fast scrolling&#xA;      winopts = {                       -- builtin previewer window options&#xA;        number            = true,&#xA;        relativenumber    = false,&#xA;        cursorline        = true,&#xA;        cursorlineopt     = &#39;both&#39;,&#xA;        cursorcolumn      = false,&#xA;        signcolumn        = &#39;no&#39;,&#xA;        list              = false,&#xA;        foldenable        = false,&#xA;        foldmethod        = &#39;manual&#39;,&#xA;      },&#xA;    },&#xA;    on_create = function()&#xA;      -- called once upon creation of the fzf main window&#xA;      -- can be used to add custom fzf-lua mappings, e.g:&#xA;      --   vim.api.nvim_buf_set_keymap(0, &#34;t&#34;, &#34;&amp;lt;C-j&amp;gt;&#34;, &#34;&amp;lt;Down&amp;gt;&#34;,&#xA;      --     { silent = true, noremap = true })&#xA;    end,&#xA;  },&#xA;  keymap = {&#xA;    -- These override the default tables completely&#xA;    -- no need to set to `false` to disable a bind&#xA;    -- delete or modify is sufficient&#xA;    builtin = {&#xA;      -- neovim `:tmap` mappings for the fzf win&#xA;      [&#34;&amp;lt;F1&amp;gt;&#34;]        = &#34;toggle-help&#34;,&#xA;      [&#34;&amp;lt;F2&amp;gt;&#34;]        = &#34;toggle-fullscreen&#34;,&#xA;      -- Only valid with the &#39;builtin&#39; previewer&#xA;      [&#34;&amp;lt;F3&amp;gt;&#34;]        = &#34;toggle-preview-wrap&#34;,&#xA;      [&#34;&amp;lt;F4&amp;gt;&#34;]        = &#34;toggle-preview&#34;,&#xA;      -- Rotate preview clockwise/counter-clockwise&#xA;      [&#34;&amp;lt;F5&amp;gt;&#34;]        = &#34;toggle-preview-ccw&#34;,&#xA;      [&#34;&amp;lt;F6&amp;gt;&#34;]        = &#34;toggle-preview-cw&#34;,&#xA;      [&#34;&amp;lt;S-down&amp;gt;&#34;]    = &#34;preview-page-down&#34;,&#xA;      [&#34;&amp;lt;S-up&amp;gt;&#34;]      = &#34;preview-page-up&#34;,&#xA;      [&#34;&amp;lt;S-left&amp;gt;&#34;]    = &#34;preview-page-reset&#34;,&#xA;    },&#xA;    fzf = {&#xA;      -- fzf &#39;--bind=&#39; options&#xA;      [&#34;ctrl-z&#34;]      = &#34;abort&#34;,&#xA;      [&#34;ctrl-u&#34;]      = &#34;unix-line-discard&#34;,&#xA;      [&#34;ctrl-f&#34;]      = &#34;half-page-down&#34;,&#xA;      [&#34;ctrl-b&#34;]      = &#34;half-page-up&#34;,&#xA;      [&#34;ctrl-a&#34;]      = &#34;beginning-of-line&#34;,&#xA;      [&#34;ctrl-e&#34;]      = &#34;end-of-line&#34;,&#xA;      [&#34;alt-a&#34;]       = &#34;toggle-all&#34;,&#xA;      -- Only valid with fzf previewers (bat/cat/git/etc)&#xA;      [&#34;f3&#34;]          = &#34;toggle-preview-wrap&#34;,&#xA;      [&#34;f4&#34;]          = &#34;toggle-preview&#34;,&#xA;      [&#34;shift-down&#34;]  = &#34;preview-page-down&#34;,&#xA;      [&#34;shift-up&#34;]    = &#34;preview-page-up&#34;,&#xA;    },&#xA;  },&#xA;  actions = {&#xA;    -- These override the default tables completely&#xA;    -- no need to set to `false` to disable an action&#xA;    -- delete or modify is sufficient&#xA;    files = {&#xA;      -- providers that inherit these actions:&#xA;      --   files, git_files, git_status, grep, lsp&#xA;      --   oldfiles, quickfix, loclist, tags, btags&#xA;      --   args&#xA;      -- default action opens a single selection&#xA;      -- or sends multiple selection to quickfix&#xA;      -- replace the default action with the below&#xA;      -- to open all files whether single or multiple&#xA;      -- [&#34;default&#34;]     = actions.file_edit,&#xA;      [&#34;default&#34;]     = actions.file_edit_or_qf,&#xA;      [&#34;ctrl-s&#34;]      = actions.file_split,&#xA;      [&#34;ctrl-v&#34;]      = actions.file_vsplit,&#xA;      [&#34;ctrl-t&#34;]      = actions.file_tabedit,&#xA;      [&#34;alt-q&#34;]       = actions.file_sel_to_qf,&#xA;    },&#xA;    buffers = {&#xA;      -- providers that inherit these actions:&#xA;      --   buffers, tabs, lines, blines&#xA;      [&#34;default&#34;]     = actions.buf_edit,&#xA;      [&#34;ctrl-s&#34;]      = actions.buf_split,&#xA;      [&#34;ctrl-v&#34;]      = actions.buf_vsplit,&#xA;      [&#34;ctrl-t&#34;]      = actions.buf_tabedit,&#xA;    }&#xA;  },&#xA;  fzf_opts = {&#xA;    -- options are sent as `&amp;lt;left&amp;gt;=&amp;lt;right&amp;gt;`&#xA;    -- set to `false` to remove a flag&#xA;    -- set to &#39;&#39; for a non-value flag&#xA;    -- for raw args use `fzf_args` instead&#xA;    [&#39;--ansi&#39;]        = &#39;&#39;,&#xA;    [&#39;--prompt&#39;]      = &#39;&amp;gt; &#39;,&#xA;    [&#39;--info&#39;]        = &#39;inline&#39;,&#xA;    [&#39;--height&#39;]      = &#39;100%&#39;,&#xA;    [&#39;--layout&#39;]      = &#39;reverse&#39;,&#xA;    [&#39;--border&#39;]      = &#39;none&#39;,&#xA;  },&#xA;  -- fzf &#39;--color=&#39; options (optional)&#xA;  --[[ fzf_colors = {&#xA;      [&#34;fg&#34;]          = { &#34;fg&#34;, &#34;CursorLine&#34; },&#xA;      [&#34;bg&#34;]          = { &#34;bg&#34;, &#34;Normal&#34; },&#xA;      [&#34;hl&#34;]          = { &#34;fg&#34;, &#34;Comment&#34; },&#xA;      [&#34;fg+&#34;]         = { &#34;fg&#34;, &#34;Normal&#34; },&#xA;      [&#34;bg+&#34;]         = { &#34;bg&#34;, &#34;CursorLine&#34; },&#xA;      [&#34;hl+&#34;]         = { &#34;fg&#34;, &#34;Statement&#34; },&#xA;      [&#34;info&#34;]        = { &#34;fg&#34;, &#34;PreProc&#34; },&#xA;      [&#34;prompt&#34;]      = { &#34;fg&#34;, &#34;Conditional&#34; },&#xA;      [&#34;pointer&#34;]     = { &#34;fg&#34;, &#34;Exception&#34; },&#xA;      [&#34;marker&#34;]      = { &#34;fg&#34;, &#34;Keyword&#34; },&#xA;      [&#34;spinner&#34;]     = { &#34;fg&#34;, &#34;Label&#34; },&#xA;      [&#34;header&#34;]      = { &#34;fg&#34;, &#34;Comment&#34; },&#xA;      [&#34;gutter&#34;]      = { &#34;bg&#34;, &#34;Normal&#34; },&#xA;  }, ]]&#xA;  previewers = {&#xA;    cat = {&#xA;      cmd             = &#34;cat&#34;,&#xA;      args            = &#34;--number&#34;,&#xA;    },&#xA;    bat = {&#xA;      cmd             = &#34;bat&#34;,&#xA;      args            = &#34;--style=numbers,changes --color always&#34;,&#xA;      theme           = &#39;Coldark-Dark&#39;, -- bat preview theme (bat --list-themes)&#xA;      config          = nil,            -- nil uses $BAT_CONFIG_PATH&#xA;    },&#xA;    head = {&#xA;      cmd             = &#34;head&#34;,&#xA;      args            = nil,&#xA;    },&#xA;    git_diff = {&#xA;      cmd_deleted     = &#34;git diff --color HEAD --&#34;,&#xA;      cmd_modified    = &#34;git diff --color HEAD&#34;,&#xA;      cmd_untracked   = &#34;git diff --color --no-index /dev/null&#34;,&#xA;      -- pager        = &#34;delta&#34;,      -- if you have `delta` installed&#xA;    },&#xA;    man = {&#xA;      -- NOTE: remove the `-c` flag when using man-db&#xA;      cmd             = &#34;man -c %s | col -bx&#34;,&#xA;    },&#xA;    builtin = {&#xA;      syntax          = true,         -- preview syntax highlight?&#xA;      syntax_limit_l  = 0,            -- syntax limit (lines), 0=nolimit&#xA;      syntax_limit_b  = 1024*1024,    -- syntax limit (bytes), 0=nolimit&#xA;      limit_b         = 1024*1024*10, -- preview limit (bytes), 0=nolimit&#xA;      -- preview extensions using a custom shell command:&#xA;      -- for example, use `viu` for image previews&#xA;      -- will do nothing if `viu` isn&#39;t executable&#xA;      extensions      = {&#xA;        -- neovim terminal only supports `viu` block output&#xA;        [&#34;png&#34;]       = { &#34;viu&#34;, &#34;-b&#34; },&#xA;        [&#34;jpg&#34;]       = { &#34;ueberzug&#34; },&#xA;      },&#xA;      -- if using `ueberzug` in the above extensions map&#xA;      -- set the default image scaler, possible scalers:&#xA;      --   false (none), &#34;crop&#34;, &#34;distort&#34;, &#34;fit_contain&#34;,&#xA;      --   &#34;contain&#34;, &#34;forced_cover&#34;, &#34;cover&#34;&#xA;      -- https://github.com/seebye/ueberzug&#xA;      ueberzug_scaler = &#34;cover&#34;,&#xA;    },&#xA;  },&#xA;  -- provider setup&#xA;  files = {&#xA;    -- previewer      = &#34;bat&#34;,          -- uncomment to override previewer&#xA;                                        -- (name from &#39;previewers&#39; table)&#xA;                                        -- set to &#39;false&#39; to disable&#xA;    prompt            = &#39;Files❯ &#39;,&#xA;    multiprocess      = true,           -- run command in a separate process&#xA;    git_icons         = true,           -- show git icons?&#xA;    file_icons        = true,           -- show file icons?&#xA;    color_icons       = true,           -- colorize file|git icons&#xA;    -- path_shorten   = 1,              -- &#39;true&#39; or number, shorten path?&#xA;    -- executed command priority is &#39;cmd&#39; (if exists)&#xA;    -- otherwise auto-detect prioritizes `fd`:`rg`:`find`&#xA;    -- default options are controlled by &#39;fd|rg|find|_opts&#39;&#xA;    -- NOTE: &#39;find -printf&#39; requires GNU find&#xA;    -- cmd            = &#34;find . -type f -printf &#39;%P\n&#39;&#34;,&#xA;    find_opts         = [[-type f -not -path &#39;*/\.git/*&#39; -printf &#39;%P\n&#39;]],&#xA;    rg_opts           = &#34;--color=never --files --hidden --follow -g &#39;!.git&#39;&#34;,&#xA;    fd_opts           = &#34;--color=never --type f --hidden --follow --exclude .git&#34;,&#xA;    actions = {&#xA;      -- inherits from &#39;actions.files&#39;, here we can override&#xA;      -- or set bind to &#39;false&#39; to disable a default action&#xA;      [&#34;default&#34;]     = actions.file_edit,&#xA;      -- custom actions are available too&#xA;      [&#34;ctrl-y&#34;]      = function(selected) print(selected[1]) end,&#xA;    }&#xA;  },&#xA;  git = {&#xA;    files = {&#xA;      prompt          = &#39;GitFiles❯ &#39;,&#xA;      cmd             = &#39;git ls-files --exclude-standard&#39;,&#xA;      multiprocess    = true,           -- run command in a separate process&#xA;      git_icons       = true,           -- show git icons?&#xA;      file_icons      = true,           -- show file icons?&#xA;      color_icons     = true,           -- colorize file|git icons&#xA;      -- force display the cwd header line regardles of your current working&#xA;      -- directory can also be used to hide the header when not wanted&#xA;      -- show_cwd_header = true&#xA;    },&#xA;    status = {&#xA;      prompt          = &#39;GitStatus❯ &#39;,&#xA;      cmd             = &#34;git status -s&#34;,&#xA;      previewer       = &#34;git_diff&#34;,&#xA;      file_icons      = true,&#xA;      git_icons       = true,&#xA;      color_icons     = true,&#xA;      actions = {&#xA;        -- actions inherit from &#39;actions.files&#39; and merge&#xA;        [&#34;right&#34;]   = { actions.git_unstage, actions.resume },&#xA;        [&#34;left&#34;]    = { actions.git_stage, actions.resume },&#xA;      },&#xA;    },&#xA;    commits = {&#xA;      prompt          = &#39;Commits❯ &#39;,&#xA;      cmd             = &#34;git log --pretty=oneline --abbrev-commit --color&#34;,&#xA;      preview         = &#34;git show --pretty=&#39;%Cred%H%n%Cblue%an%n%Cgreen%s&#39; --color {1}&#34;,&#xA;      actions = {&#xA;        [&#34;default&#34;] = actions.git_checkout,&#xA;      },&#xA;    },&#xA;    bcommits = {&#xA;      prompt          = &#39;BCommits❯ &#39;,&#xA;      cmd             = &#34;git log --pretty=oneline --abbrev-commit --color&#34;,&#xA;      preview         = &#34;git show --pretty=&#39;%Cred%H%n%Cblue%an%n%Cgreen%s&#39; --color {1}&#34;,&#xA;      actions = {&#xA;        [&#34;default&#34;] = actions.git_buf_edit,&#xA;        [&#34;ctrl-s&#34;]  = actions.git_buf_split,&#xA;        [&#34;ctrl-v&#34;]  = actions.git_buf_vsplit,&#xA;        [&#34;ctrl-t&#34;]  = actions.git_buf_tabedit,&#xA;      },&#xA;    },&#xA;    branches = {&#xA;      prompt          = &#39;Branches❯ &#39;,&#xA;      cmd             = &#34;git branch --all --color&#34;,&#xA;      preview         = &#34;git log --graph --pretty=oneline --abbrev-commit --color {1}&#34;,&#xA;      actions = {&#xA;        [&#34;default&#34;] = actions.git_switch,&#xA;      },&#xA;    },&#xA;    stash = {&#xA;      prompt          = &#39;Stash&amp;gt; &#39;,&#xA;      cmd             = &#34;git --no-pager stash list&#34;,&#xA;      preview         = &#34;git --no-pager stash show --patch --color {1}&#34;,&#xA;      actions = {&#xA;        [&#34;default&#34;]   = actions.git_stash_apply,&#xA;        [&#34;ctrl-x&#34;]    = { actions.git_stash_drop, actions.resume },&#xA;      },&#xA;      fzf_opts = {&#xA;        [&#34;--no-multi&#34;]  = &#39;&#39;,&#xA;        [&#39;--delimiter&#39;] = &#34;&#39;[:]&#39;&#34;,&#xA;      },&#xA;    },&#xA;    icons = {&#xA;      [&#34;M&#34;]           = { icon = &#34;M&#34;, color = &#34;yellow&#34; },&#xA;      [&#34;D&#34;]           = { icon = &#34;D&#34;, color = &#34;red&#34; },&#xA;      [&#34;A&#34;]           = { icon = &#34;A&#34;, color = &#34;green&#34; },&#xA;      [&#34;R&#34;]           = { icon = &#34;R&#34;, color = &#34;yellow&#34; },&#xA;      [&#34;C&#34;]           = { icon = &#34;C&#34;, color = &#34;yellow&#34; },&#xA;      [&#34;T&#34;]           = { icon = &#34;T&#34;, color = &#34;magenta&#34; },&#xA;      [&#34;?&#34;]           = { icon = &#34;?&#34;, color = &#34;magenta&#34; },&#xA;      -- override git icons?&#xA;      -- [&#34;M&#34;]        = { icon = &#34;★&#34;, color = &#34;red&#34; },&#xA;      -- [&#34;D&#34;]        = { icon = &#34;✗&#34;, color = &#34;red&#34; },&#xA;      -- [&#34;A&#34;]        = { icon = &#34;+&#34;, color = &#34;green&#34; },&#xA;    },&#xA;  },&#xA;  grep = {&#xA;    prompt            = &#39;Rg❯ &#39;,&#xA;    input_prompt      = &#39;Grep For❯ &#39;,&#xA;    multiprocess      = true,           -- run command in a separate process&#xA;    git_icons         = true,           -- show git icons?&#xA;    file_icons        = true,           -- show file icons?&#xA;    color_icons       = true,           -- colorize file|git icons&#xA;    -- executed command priority is &#39;cmd&#39; (if exists)&#xA;    -- otherwise auto-detect prioritizes `rg` over `grep`&#xA;    -- default options are controlled by &#39;rg|grep_opts&#39;&#xA;    -- cmd            = &#34;rg --vimgrep&#34;,&#xA;    grep_opts         = &#34;--binary-files=without-match --line-number --recursive --color=auto --perl-regexp&#34;,&#xA;    rg_opts           = &#34;--column --line-number --no-heading --color=always --smart-case --max-columns=512&#34;,&#xA;    -- set to &#39;true&#39; to always parse globs in both &#39;grep&#39; and &#39;live_grep&#39;&#xA;    -- search strings will be split using the &#39;glob_separator&#39; and translated&#xA;    -- to &#39;--iglob=&#39; arguments, requires &#39;rg&#39;&#xA;    -- can still be used when &#39;false&#39; by calling &#39;live_grep_glob&#39; directly&#xA;    rg_glob           = false,        -- default to glob parsing?&#xA;    glob_flag         = &#34;--iglob&#34;,    -- for case sensitive globs use &#39;--glob&#39;&#xA;    glob_separator    = &#34;%s%-%-&#34;,     -- query separator pattern (lua): &#39; --&#39;&#xA;    -- advanced usage: for custom argument parsing define&#xA;    -- &#39;rg_glob_fn&#39; to return a pair:&#xA;    --   first returned argument is the new search query&#xA;    --   second returned argument are addtional rg flags&#xA;    -- rg_glob_fn = function(opts, query)&#xA;    --   ...&#xA;    --   return new_query, flags&#xA;    -- end,&#xA;    actions = {&#xA;      -- actions inherit from &#39;actions.files&#39; and merge&#xA;      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;&#xA;      [&#34;ctrl-g&#34;]      = { actions.grep_lgrep }&#xA;    },&#xA;    no_header             = false,    -- hide grep|cwd header?&#xA;    no_header_i           = false,    -- hide interactive header?&#xA;  },&#xA;  args = {&#xA;    prompt            = &#39;Args❯ &#39;,&#xA;    files_only        = true,&#xA;    -- actions inherit from &#39;actions.files&#39; and merge&#xA;    actions           = { [&#34;ctrl-x&#34;] = { actions.arg_del, actions.resume } }&#xA;  },&#xA;  oldfiles = {&#xA;    prompt            = &#39;History❯ &#39;,&#xA;    cwd_only          = false,&#xA;    stat_file         = true,         -- verify files exist on disk&#xA;    include_current_session = false,  -- include bufs from current session&#xA;  },&#xA;  buffers = {&#xA;    prompt            = &#39;Buffers❯ &#39;,&#xA;    file_icons        = true,         -- show file icons?&#xA;    color_icons       = true,         -- colorize file|git icons&#xA;    sort_lastused     = true,         -- sort buffers() by last used&#xA;    actions = {&#xA;      -- actions inherit from &#39;actions.buffers&#39; and merge&#xA;      -- by supplying a table of functions we&#39;re telling&#xA;      -- fzf-lua to not close the fzf window, this way we&#xA;      -- can resume the buffers picker on the same window&#xA;      -- eliminating an otherwise unaesthetic win &#34;flash&#34;&#xA;      [&#34;ctrl-x&#34;]      = { actions.buf_del, actions.resume },&#xA;    }&#xA;  },&#xA;  tabs = {&#xA;    prompt            = &#39;Tabs❯ &#39;,&#xA;    tab_title         = &#34;Tab&#34;,&#xA;    tab_marker        = &#34;&amp;lt;&amp;lt;&#34;,&#xA;    file_icons        = true,         -- show file icons?&#xA;    color_icons       = true,         -- colorize file|git icons&#xA;    actions = {&#xA;      -- actions inherit from &#39;actions.buffers&#39; and merge&#xA;      [&#34;default&#34;]     = actions.buf_switch,&#xA;      [&#34;ctrl-x&#34;]      = { actions.buf_del, actions.resume },&#xA;    },&#xA;    fzf_opts = {&#xA;      -- hide tabnr&#xA;      [&#39;--delimiter&#39;] = &#34;&#39;[\\):]&#39;&#34;,&#xA;      [&#34;--with-nth&#34;]  = &#39;2..&#39;,&#xA;    },&#xA;  },&#xA;  lines = {&#xA;    previewer         = &#34;builtin&#34;,    -- set to &#39;false&#39; to disable&#xA;    prompt            = &#39;Lines❯ &#39;,&#xA;    show_unlisted     = false,        -- exclude &#39;help&#39; buffers&#xA;    no_term_buffers   = true,         -- exclude &#39;term&#39; buffers&#xA;    fzf_opts = {&#xA;      -- do not include bufnr in fuzzy matching&#xA;      -- tiebreak by line no.&#xA;      [&#39;--delimiter&#39;] = &#34;&#39;[\\]:]&#39;&#34;,&#xA;      [&#34;--nth&#34;]       = &#39;2..&#39;,&#xA;      [&#34;--tiebreak&#34;]  = &#39;index&#39;,&#xA;    },&#xA;    -- actions inherit from &#39;actions.buffers&#39; and merge&#xA;    actions = {&#xA;      [&#34;default&#34;]     = { actions.buf_edit_or_qf },&#xA;      [&#34;alt-q&#34;]       = { actions.buf_sel_to_qf }&#xA;    },&#xA;  },&#xA;  blines = {&#xA;    previewer         = &#34;builtin&#34;,    -- set to &#39;false&#39; to disable&#xA;    prompt            = &#39;BLines❯ &#39;,&#xA;    show_unlisted     = true,         -- include &#39;help&#39; buffers&#xA;    no_term_buffers   = false,        -- include &#39;term&#39; buffers&#xA;    fzf_opts = {&#xA;      -- hide filename, tiebreak by line no.&#xA;      [&#39;--delimiter&#39;] = &#34;&#39;[\\]:]&#39;&#34;,&#xA;      [&#34;--with-nth&#34;]  = &#39;2..&#39;,&#xA;      [&#34;--tiebreak&#34;]  = &#39;index&#39;,&#xA;    },&#xA;    -- actions inherit from &#39;actions.buffers&#39; and merge&#xA;    actions = {&#xA;      [&#34;default&#34;]     = { actions.buf_edit_or_qf },&#xA;      [&#34;alt-q&#34;]       = { actions.buf_sel_to_qf }&#xA;    },&#xA;  },&#xA;  tags = {&#xA;    prompt                = &#39;Tags❯ &#39;,&#xA;    ctags_file            = &#34;tags&#34;,&#xA;    multiprocess          = true,&#xA;    file_icons            = true,&#xA;    git_icons             = true,&#xA;    color_icons           = true,&#xA;    -- &#39;tags_live_grep&#39; options, `rg` prioritizes over `grep`&#xA;    rg_opts               = &#34;--no-heading --color=always --smart-case&#34;,&#xA;    grep_opts             = &#34;--color=auto --perl-regexp&#34;,&#xA;    actions = {&#xA;      -- actions inherit from &#39;actions.files&#39; and merge&#xA;      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;&#xA;      [&#34;ctrl-g&#34;]          = { actions.grep_lgrep }&#xA;    },&#xA;    no_header             = false,    -- hide grep|cwd header?&#xA;    no_header_i           = false,    -- hide interactive header?&#xA;  },&#xA;  btags = {&#xA;    prompt                = &#39;BTags❯ &#39;,&#xA;    ctags_file            = &#34;tags&#34;,&#xA;    multiprocess          = true,&#xA;    file_icons            = true,&#xA;    git_icons             = true,&#xA;    color_icons           = true,&#xA;    rg_opts               = &#34;--no-heading --color=always&#34;,&#xA;    grep_opts             = &#34;--color=auto --perl-regexp&#34;,&#xA;    fzf_opts = {&#xA;      [&#39;--delimiter&#39;]     = &#34;&#39;[\\]:]&#39;&#34;,&#xA;      [&#34;--with-nth&#34;]      = &#39;2..&#39;,&#xA;      [&#34;--tiebreak&#34;]      = &#39;index&#39;,&#xA;    },&#xA;    -- actions inherit from &#39;actions.files&#39;&#xA;  },&#xA;  colorschemes = {&#xA;    prompt            = &#39;Colorschemes❯ &#39;,&#xA;    live_preview      = true,       -- apply the colorscheme on preview?&#xA;    actions           = { [&#34;default&#34;] = actions.colorscheme, },&#xA;    winopts           = { height = 0.55, width = 0.30, },&#xA;    post_reset_cb     = function()&#xA;      -- reset statusline highlights after&#xA;      -- a live_preview of the colorscheme&#xA;      -- require(&#39;feline&#39;).reset_highlights()&#xA;    end,&#xA;  },&#xA;  quickfix = {&#xA;    file_icons        = true,&#xA;    git_icons         = true,&#xA;  },&#xA;  lsp = {&#xA;    prompt_postfix    = &#39;❯ &#39;,       -- will be appended to the LSP label&#xA;                                    -- to override use &#39;prompt&#39; instead&#xA;    cwd_only          = false,      -- LSP/diagnostics for cwd only?&#xA;    async_or_timeout  = 5000,       -- timeout(ms) or &#39;true&#39; for async calls&#xA;    file_icons        = true,&#xA;    git_icons         = false,&#xA;    lsp_icons         = true,&#xA;    ui_select         = true,       -- use &#39;vim.ui.select&#39; for code actions&#xA;    symbol_style      = 1,          -- style for document/workspace symbols&#xA;                                    -- false: disable,    1: icon+kind&#xA;                                    --     2: icon only,  3: kind only&#xA;                                    -- NOTE: icons are extracted from&#xA;                                    -- vim.lsp.protocol.CompletionItemKind&#xA;    -- colorize using nvim-cmp&#39;s CmpItemKindXXX highlights&#xA;    -- can also be set to &#39;TS&#39; for treesitter highlights (&#39;TSProperty&#39;, etc)&#xA;    -- or &#39;false&#39; to disable highlighting&#xA;    symbol_hl_prefix  = &#34;CmpItemKind&#34;,&#xA;    -- additional symbol formatting, works with or without style&#xA;    symbol_fmt        = function(s) return &#34;[&#34;..s..&#34;]&#34; end,&#xA;    severity          = &#34;hint&#34;,&#xA;    icons = {&#xA;      [&#34;Error&#34;]       = { icon = &#34;&#34;, color = &#34;red&#34; },       -- error&#xA;      [&#34;Warning&#34;]     = { icon = &#34;&#34;, color = &#34;yellow&#34; },    -- warning&#xA;      [&#34;Information&#34;] = { icon = &#34;&#34;, color = &#34;blue&#34; },      -- info&#xA;      [&#34;Hint&#34;]        = { icon = &#34;&#34;, color = &#34;magenta&#34; },   -- hint&#xA;    },&#xA;  },&#xA;  -- uncomment to disable the previewer&#xA;  -- nvim = { marks = { previewer = { _ctor = false } } },&#xA;  -- helptags = { previewer = { _ctor = false } },&#xA;  -- manpages = { previewer = { _ctor = false } },&#xA;  -- uncomment to set dummy win location (help|man bar)&#xA;  -- &#34;topleft&#34;  : up&#xA;  -- &#34;botright&#34; : down&#xA;  -- helptags = { previewer = { split = &#34;topleft&#34; } },&#xA;  -- uncomment to use `man` command as native fzf previewer&#xA;  -- manpages = { previewer = { _ctor = require&#39;fzf-lua.previewer&#39;.fzf.man_pages } },&#xA;  -- optional override of file extension icon colors&#xA;  -- available colors (terminal):&#xA;  --    clear, bold, black, red, green, yellow&#xA;  --    blue, magenta, cyan, grey, dark_grey, white&#xA;  -- padding can help kitty term users with&#xA;  -- double-width icon rendering&#xA;  file_icon_padding = &#39;&#39;,&#xA;  file_icon_colors = {&#xA;    [&#34;lua&#34;]   = &#34;blue&#34;,&#xA;  },&#xA;  -- uncomment if your terminal/font does not support unicode character&#xA;  -- &#39;EN SPACE&#39; (U+2002), the below sets it to &#39;NBSP&#39; (U+00A0) instead&#xA;  -- nbsp = &#39;\xc2\xa0&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be run from a &lt;code&gt;.vim&lt;/code&gt; file using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;fzf-lua&#39;).setup{&#xA;-- ...&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Big thank you to all those I borrowed code/ideas from, I read so many configs and plugin codes that I probably forgot where I found some samples from so if I missed your name feel free to contact me and I&#39;ll add it below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vijaymarupudi/&#34;&gt;@vijaymarupudi&lt;/a&gt; for his wonderful &lt;a href=&#34;https://github.com/vijaymarupudi/nvim-fzf&#34;&gt;nvim-fzf&lt;/a&gt; plugin which is in the core of this plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tjdevries/&#34;&gt;@tjdevries&lt;/a&gt; for too many great things to list here and for borrowing some of his &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope&lt;/a&gt; provider code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke&#34;&gt;@lukas-reineke&lt;/a&gt; for inspiring the solution after browsing his &lt;a href=&#34;https://github.com/lukas-reineke/dotfiles&#34;&gt;dotfiles&lt;/a&gt; and coming across his &lt;a href=&#34;https://github.com/lukas-reineke/dotfiles/raw/master/vim/lua/fuzzy.lua&#34;&gt;fuzzy.lua&lt;/a&gt; , and while we&#39;re, also here for his great lua plugin &lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;indent-blankline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindrets&#34;&gt;@sindrets&lt;/a&gt; for borrowing utilities from his fantastic lua plugin &lt;a href=&#34;https://github.com/sindrets/diffview.nvim&#34;&gt;diffview.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevinhwang91&#34;&gt;@kevinhwang91&lt;/a&gt; for using his previewer code as baseline for the builtin previewer and his must have plugin &lt;a href=&#34;https://github.com/kevinhwang91/nvim-bqf&#34;&gt;nvim-bqf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ayamir/nvimdots</title>
    <updated>2022-06-09T01:44:22Z</updated>
    <id>tag:github.com,2022-06-09:/ayamir/nvimdots</id>
    <link href="https://github.com/ayamir/nvimdots" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A well configured and structured Neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/dashboard.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/telescope.png&#34; alt=&#34;Telescope&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/coding.png&#34; alt=&#34;Coding&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/dap.png&#34; alt=&#34;Debuging&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/gitui.png&#34; alt=&#34;Gitui&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is my neovim&#39;s configuration, which contains two branches.&lt;/p&gt; &#xA;&lt;p&gt;I use &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt; to manage plugins.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Branch&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Completion Solution&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;main&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;nvim-lspconfig+nvim-cmp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;coc&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;coc.nvim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Chinese introduction is &lt;a href=&#34;https://zhuanlan.zhihu.com/p/382092667&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast. Less than &lt;strong&gt;50ms&lt;/strong&gt; to start(Depends on SSD, tested on Sumsung 970 evo).&lt;/li&gt; &#xA; &lt;li&gt;Simple. Run out of the box.&lt;/li&gt; &#xA; &lt;li&gt;Modern. Pure lua to config.&lt;/li&gt; &#xA; &lt;li&gt;Modular. Easy to customize.&lt;/li&gt; &#xA; &lt;li&gt;Powerful. Full functionality to code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/startuptime.png&#34; alt=&#34;startup time&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/vimstartup.png&#34; alt=&#34;vim-startuptime&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(Tested with &lt;a href=&#34;https://github.com/rhysd/vim-startuptime&#34;&gt;rhysd/vim-startuptime&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;Details&lt;/h1&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/ayamir/nvimdots/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgement&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/nvim&#34;&gt;glepnir/nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>7GrandDadPGN/VapeV4ForRoblox</title>
    <updated>2022-06-09T01:44:22Z</updated>
    <id>tag:github.com,2022-06-09:/7GrandDadPGN/VapeV4ForRoblox</id>
    <link href="https://github.com/7GrandDadPGN/VapeV4ForRoblox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vape V4 for Roblox, because bored.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vape V4&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you make a script for 2 years lol.&lt;/strong&gt; &lt;em&gt;Project I made for some reason idk&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>