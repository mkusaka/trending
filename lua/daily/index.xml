<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-24T01:28:40Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>leoluz/nvim-dap-go</title>
    <updated>2024-02-24T01:28:40Z</updated>
    <id>tag:github.com,2024-02-24:/leoluz/nvim-dap-go</id>
    <link href="https://github.com/leoluz/nvim-dap-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extension for nvim-dap providing configurations for launching go debugger (delve) and debugging individual tests&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-dap-go&lt;/h1&gt; &#xA;&lt;p&gt;An extension for &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; providing configurations for launching go debugger (delve) and debugging individual tests.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Auto launch Delve. No configuration needed. You just have to have &lt;code&gt;dlv&lt;/code&gt; in your path.&lt;/li&gt; &#xA; &lt;li&gt;Run just the closest test from the cursor in debug mode (uses treesitter). See &lt;a href=&#34;https://raw.githubusercontent.com/leoluz/nvim-dap-go/main/#debugging-individual-tests&#34;&gt;debugging individual tests&lt;/a&gt; section below for more details.&lt;/li&gt; &#xA; &lt;li&gt;Configuration to attach nvim-dap and Delve into a running process and start a debug session.&lt;/li&gt; &#xA; &lt;li&gt;Configuration to start a debug session in the main function.&lt;/li&gt; &#xA; &lt;li&gt;Configuration to run tests in a debug session.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pre-reqs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.9.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-delve/delve&#34;&gt;delve&lt;/a&gt; &amp;gt;= 1.7.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This plugin extension make usage of treesitter to find the nearest test to debug. Make sure you have the Go treesitter parser installed. If using &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; plugin you can install with &lt;code&gt;:TSInstall go&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install like any other neovim plugin: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;leoluz/nvim-dap-go&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;leoluz/nvim-dap-go&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Register the plugin&lt;/h3&gt; &#xA;&lt;p&gt;Call the setup function in your &lt;code&gt;init.vim&lt;/code&gt; to register the go adapter and the configurations to debug go tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;lua require(&#39;dap-go&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to customize nvim-dap-go by passing a config table in the setup function.&lt;/p&gt; &#xA;&lt;p&gt;The example below shows all the possible configurations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#39;dap-go&#39;).setup {&#xA;  -- Additional dap configurations can be added.&#xA;  -- dap_configurations accepts a list of tables where each entry&#xA;  -- represents a dap configuration. For more details do:&#xA;  -- :help dap-configuration&#xA;  dap_configurations = {&#xA;    {&#xA;      -- Must be &#34;go&#34; or it will be ignored by the plugin&#xA;      type = &#34;go&#34;,&#xA;      name = &#34;Attach remote&#34;,&#xA;      mode = &#34;remote&#34;,&#xA;      request = &#34;attach&#34;,&#xA;    },&#xA;  },&#xA;  -- delve configurations&#xA;  delve = {&#xA;    -- the path to the executable dlv which will be used for debugging.&#xA;    -- by default, this is the &#34;dlv&#34; executable on your PATH.&#xA;    path = &#34;dlv&#34;,&#xA;    -- time to wait for delve to initialize the debug session.&#xA;    -- default to 20 seconds&#xA;    initialize_timeout_sec = 20,&#xA;    -- a string that defines the port to start delve debugger.&#xA;    -- default to string &#34;${port}&#34; which instructs nvim-dap&#xA;    -- to start the process in a random available port&#xA;    port = &#34;${port}&#34;,&#xA;    -- additional args to pass to dlv&#xA;    args = {},&#xA;    -- the build flags that are passed to delve.&#xA;    -- defaults to empty string, but can be used to provide flags&#xA;    -- such as &#34;-tags=unit&#34; to make sure the test suite is&#xA;    -- compiled during debugging, for example.&#xA;    -- passing build flags using args is ineffective, as those are&#xA;    -- ignored by delve in dap mode.&#xA;    build_flags = &#34;&#34;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use nvim-dap as usual&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Call &lt;code&gt;:lua require(&#39;dap&#39;).continue()&lt;/code&gt; to start debugging.&lt;/li&gt; &#xA; &lt;li&gt;All pre-configured debuggers will be displayed for you to choose from.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;code&gt;:help dap-mappings&lt;/code&gt; and &lt;code&gt;:help dap-api&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debugging individual tests&lt;/h3&gt; &#xA;&lt;p&gt;To debug the closest method above the cursor use you can run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:lua require(&#39;dap-go&#39;).debug_test()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once a test was run, you can simply run it again from anywhere:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:lua require(&#39;dap-go&#39;).debug_last_test()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is better to define a mapping to invoke this command. See the mapping section below.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging with command-line arguments&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select the option &lt;code&gt;Debug (Arguments)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter each argument separated by a space (i.e. &lt;code&gt;option1 option2 option3&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Press enter&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leoluz/nvim-dap-go/main/images/image1.png&#34; alt=&#34;Start Debug Session with Arguments&#34; title=&#34;Start Debug Session with Arguments&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/leoluz/nvim-dap-go/main/images/image2.png&#34; alt=&#34;Enter Arguments&#34; title=&#34;Enter Arguments&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/leoluz/nvim-dap-go/main/images/image3.png&#34; alt=&#34;Begin Debugging&#34; title=&#34;Being Debugging&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging with dlv in headless mode&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Register a new option to attach to a remote debugger:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#39;dap-go&#39;).setup {&#xA;  dap_configurations = {&#xA;    {&#xA;      type = &#34;go&#34;,&#xA;      name = &#34;Attach remote&#34;,&#xA;      mode = &#34;remote&#34;,&#xA;      request = &#34;attach&#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start &lt;code&gt;dlv&lt;/code&gt; in headless mode. You can specify subcommands and flags after &lt;code&gt;--&lt;/code&gt;, e.g.,&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dlv debug -l 127.0.0.1:38697 --headless ./main.go -- subcommand --myflag=xyz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Call &lt;code&gt;:lua require(&#39;dap&#39;).continue()&lt;/code&gt; to start debugging.&lt;/li&gt; &#xA; &lt;li&gt;Select the new registered option &lt;code&gt;Attach remote&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Mappings&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;nmap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;td :lua require(&#39;dap-go&#39;).debug_test()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to the &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap-python&#34;&gt;nvim-dap-python&lt;/a&gt; for the inspiration.&lt;/p&gt;</summary>
  </entry>
</feed>