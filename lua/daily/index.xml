<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-11T01:39:25Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>echasnovski/mini.animate</title>
    <updated>2023-06-11T01:39:25Z</updated>
    <id>tag:github.com,2023-06-11:/echasnovski/mini.animate</id>
    <link href="https://github.com/echasnovski/mini.animate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim Lua plugin to animate common Neovim actions. Part of &#39;mini.nvim&#39; library.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/echasnovski/media/raw/main/mini.nvim/logo/logo_animate.png&#34; style=&#34;width: 100%&#34;&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/echasnovski/mini.nvim&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h3&gt;Animate common Neovim actions&lt;/h3&gt; &#xA;&lt;p&gt;See more details in &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.animate/main/#features&#34;&gt;Features&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.animate/main/doc/mini-animate.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;⦿ This is a part of &lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;mini.nvim&lt;/a&gt; library. Please use &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-animate.md&#34;&gt;this link&lt;/a&gt; if you want to mention this module.&lt;/p&gt; &#xA;&lt;p&gt;⦿ All contributions (issues, pull requests, discussions, etc.) are done inside of &#39;mini.nvim&#39;.&lt;/p&gt; &#xA;&lt;p&gt;⦿ See the repository page to learn about common design principles and configuration recipes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you want to help this project grow but don&#39;t know where to start, check out &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/CONTRIBUTING.md&#34;&gt;contributing guides of &#39;mini.nvim&#39;&lt;/a&gt; or leave a Github star for &#39;mini.nvim&#39; project and/or any its standalone Git repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/24854248/215829092-5aba4e8d-94a5-43da-8ef0-243bf0708f76.mp4&#34;&gt;https://user-images.githubusercontent.com/24854248/215829092-5aba4e8d-94a5-43da-8ef0-243bf0708f76.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Works out of the box with a single &lt;code&gt;require(&#39;mini.animate&#39;).setup()&lt;/code&gt;. No extra mappings or commands needed.&lt;/li&gt; &#xA; &lt;li&gt;Animate &lt;strong&gt;cursor movement&lt;/strong&gt; inside same buffer by showing customizable path.&lt;/li&gt; &#xA; &lt;li&gt;Animate &lt;strong&gt;scrolling&lt;/strong&gt; with a series of subscrolls (&#34;smooth scrolling&#34;).&lt;/li&gt; &#xA; &lt;li&gt;Animate &lt;strong&gt;window resize&lt;/strong&gt; by gradually changing sizes of all windows.&lt;/li&gt; &#xA; &lt;li&gt;Animate &lt;strong&gt;window open/close&lt;/strong&gt; with visually updating floating window.&lt;/li&gt; &#xA; &lt;li&gt;Timings for all actions can be customized independently.&lt;/li&gt; &#xA; &lt;li&gt;Action animations can be enabled/disabled independently.&lt;/li&gt; &#xA; &lt;li&gt;All animations are asynchronous/non-blocking and trigger a targeted event which can be used to perform actions after animation is done.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MiniAnimate.animate()&lt;/code&gt; function which can be used to perform own animations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Although all animations work in all supported versions of Neovim, scroll and resize animations have best experience with Neovim&amp;gt;=0.9.&lt;/li&gt; &#xA; &lt;li&gt;Scroll and resize animations actually change Neovim state to achieve their effects and are asynchronous. This can cause following issues: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you have remapped any movement operation to center after it is done (like with &lt;code&gt;nzvzz&lt;/code&gt; or &lt;code&gt;&amp;lt;C-d&amp;gt;zz&lt;/code&gt;), you need to change those mappings. Either remove them or update to use &lt;code&gt;MiniAnimate.execute_after()&lt;/code&gt; (see &lt;code&gt;:h MiniAnimate.config.scroll&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Using mouse wheel to scroll can appear slower or can have visual jitter. This usually happens due to high number of wheel turns per second: each turn is taking over previous one to start new animation. To mitigate this, you can either modify &#39;mousescroll&#39; option (set vertical scroll to 1 and use high turn speed or set to high value and use one turn at a time) or &lt;code&gt;config.scroll&lt;/code&gt; to fine tune when/how scroll animation is done.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin can be installed as part of &#39;mini.nvim&#39; library (&lt;strong&gt;recommended&lt;/strong&gt;) or as a standalone Git repository.&lt;/p&gt; &#xA;&lt;p&gt;There are two branches to install from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main&lt;/code&gt; (default, &lt;strong&gt;recommended&lt;/strong&gt;) will have latest development version of plugin. All changes since last stable release should be perceived as being in beta testing phase (meaning they already passed alpha-testing and are moderately settled).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; will be updated only upon releases with code tested during public beta-testing phase in &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are code snippets for some common installation methods (use only one):&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;folke/lazy.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = false },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = &#39;*&#39; },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.animate&#39;, version = false },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.animate&#39;, version = &#39;*&#39; },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.nvim&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.animate&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.animate&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.animate&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.animate&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: don&#39;t forget to call &lt;code&gt;require(&#39;mini.animate&#39;).setup()&lt;/code&gt; to enable its functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are on Windows, there might be problems with too long file paths (like &lt;code&gt;error: unable to create file &amp;lt;some file name&amp;gt;: Filename too long&lt;/code&gt;). Try doing one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable corresponding git global config value: &lt;code&gt;git config --system core.longpaths true&lt;/code&gt;. Then try to reinstall.&lt;/li&gt; &#xA; &lt;li&gt;Install plugin in other place with shorter path.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Default config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- No need to copy this inside `setup()`. Will be used automatically.&#xA;{&#xA;  -- Cursor path&#xA;  cursor = {&#xA;    -- Whether to enable this animation&#xA;    enable = true,&#xA;&#xA;    -- Timing of animation (how steps will progress in time)&#xA;    timing = --&amp;lt;function: implements linear total 250ms animation duration&amp;gt;,&#xA;&#xA;    -- Path generator for visualized cursor movement&#xA;    path = --&amp;lt;function: implements shortest line path&amp;gt;,&#xA;  },&#xA;&#xA;  -- Vertical scroll&#xA;  scroll = {&#xA;    -- Whether to enable this animation&#xA;    enable = true,&#xA;&#xA;    -- Timing of animation (how steps will progress in time)&#xA;    timing = --&amp;lt;function: implements linear total 250ms animation duration&amp;gt;,&#xA;&#xA;    -- Subscroll generator based on total scroll&#xA;    subscroll = --&amp;lt;function: implements equal scroll with at most 60 steps&amp;gt;,&#xA;  },&#xA;&#xA;  -- Window resize&#xA;  resize = {&#xA;    -- Whether to enable this animation&#xA;    enable = true,&#xA;&#xA;    -- Timing of animation (how steps will progress in time)&#xA;    timing = --&amp;lt;function: implements linear total 250ms animation duration&amp;gt;,&#xA;&#xA;    -- Subresize generator for all steps of resize animations&#xA;    subresize = --&amp;lt;function: implements equal linear steps&amp;gt;,&#xA;  },&#xA;&#xA;  -- Window open&#xA;  open = {&#xA;    -- Whether to enable this animation&#xA;    enable = true,&#xA;&#xA;    -- Timing of animation (how steps will progress in time)&#xA;    timing = --&amp;lt;function: implements linear total 250ms animation duration&amp;gt;,&#xA;&#xA;    -- Floating window config generator visualizing specific window&#xA;    winconfig = --&amp;lt;function: implements static window for 25 steps&amp;gt;,&#xA;&#xA;    -- &#39;winblend&#39; (window transparency) generator for floating window&#xA;    winblend = --&amp;lt;function: implements equal linear steps from 80 to 100&amp;gt;,&#xA;  },&#xA;&#xA;  -- Window close&#xA;  close = {&#xA;    -- Whether to enable this animation&#xA;    enable = true,&#xA;&#xA;    -- Timing of animation (how steps will progress in time)&#xA;    timing = --&amp;lt;function: implements linear total 250ms animation duration&amp;gt;,&#xA;&#xA;    -- Floating window config generator visualizing specific window&#xA;    winconfig = --&amp;lt;function: implements static window for 25 steps&amp;gt;,&#xA;&#xA;    -- &#39;winblend&#39; (window transparency) generator for floating window&#xA;    winblend = --&amp;lt;function: implements equal linear steps from 80 to 100&amp;gt;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Similar plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovide.dev/&#34;&gt;Neovide&lt;/a&gt; (Neovim GUI, not a plugin)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edluffy/specs.nvim&#34;&gt;edluffy/specs.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/karb94/neoscroll.nvim&#34;&gt;karb94/neoscroll.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anuvyklack/windows.nvim&#34;&gt;anuvyklack/windows.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hrsh7th/cmp-cmdline</title>
    <updated>2023-06-11T01:39:25Z</updated>
    <id>tag:github.com,2023-06-11:/hrsh7th/cmp-cmdline</id>
    <link href="https://github.com/hrsh7th/cmp-cmdline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nvim-cmp source for vim&#39;s cmdline&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cmp-cmdline&lt;/h1&gt; &#xA;&lt;p&gt;nvim-cmp source for vim&#39;s cmdline.&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;Completions for &lt;code&gt;/&lt;/code&gt; search based on current buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    -- `/` cmdline setup.&#xA;    cmp.setup.cmdline(&#39;/&#39;, {&#xA;      mapping = cmp.mapping.preset.cmdline(),&#xA;      sources = {&#xA;        { name = &#39;buffer&#39; }&#xA;      }&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Completions for command mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    -- `:` cmdline setup.&#xA;    cmp.setup.cmdline(&#39;:&#39;, {&#xA;      mapping = cmp.mapping.preset.cmdline(),&#xA;      sources = cmp.config.sources({&#xA;        { name = &#39;path&#39; }&#xA;      }, {&#xA;        {&#xA;          name = &#39;cmdline&#39;,&#xA;          option = {&#xA;            ignore_cmds = { &#39;Man&#39;, &#39;!&#39; }&#xA;          }&#xA;        }&#xA;      })&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the buffer source to work, &lt;a href=&#34;https://github.com/hrsh7th/cmp-buffer&#34;&gt;cmp-buffer&lt;/a&gt; is needed.&lt;/p&gt; &#xA;&lt;h1&gt;Option&lt;/h1&gt; &#xA;&lt;h3&gt;ignore_cmds: string[]&lt;/h3&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;{ &#34;Man&#34;, &#34;!&#34; }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can specify ignore command name.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jake-stewart/jfind.nvim</title>
    <updated>2023-06-11T01:39:25Z</updated>
    <id>tag:github.com,2023-06-11:/jake-stewart/jfind.nvim</id>
    <link href="https://github.com/jake-stewart/jfind.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jfind.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A plugin for using jfind as a neovim fuzzy finder.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jake-stewart/jfind&#34;&gt;jfind&lt;/a&gt; (Required)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fdfind&lt;/a&gt; (Recommended as a faster alternative to &lt;code&gt;find&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can install jfind with this one liner. You will need git, cmake, and make.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/jake-stewart/jfind &amp;amp;&amp;amp; cd jfind &amp;amp;&amp;amp; cmake -S . -B build &amp;amp;&amp;amp; cd build &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are migrating to 1.0 from an earlier version, make sure to recompile jfind!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;jake-stewart/jfind.nvim&#34;, branch = &#34;1.0&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;jake-stewart/jfind.nvim&#34;, { &#34;branch&#34;: &#34;1.0&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;dein.vim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#34;jake-stewart/jfind.nvim&#34;, { &#34;rev&#34;: &#34;1.0&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jake-stewart/jfind.nvim/main/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;jake-stewart/jfind.nvim&#34;, branch = &#34;1.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local jfind = require(&#34;jfind&#34;)&#xA;local key = require(&#34;jfind.key&#34;)&#xA;&#xA;jfind.setup({&#xA;    exclude = {&#xA;        &#34;.git&#34;,&#xA;        &#34;.idea&#34;,&#xA;        &#34;.vscode&#34;,&#xA;        &#34;.sass-cache&#34;,&#xA;        &#34;.class&#34;,&#xA;        &#34;__pycache__&#34;,&#xA;        &#34;node_modules&#34;,&#xA;        &#34;target&#34;,&#xA;        &#34;build&#34;,&#xA;        &#34;tmp&#34;,&#xA;        &#34;assets&#34;,&#xA;        &#34;dist&#34;,&#xA;        &#34;public&#34;,&#xA;        &#34;*.iml&#34;,&#xA;        &#34;*.meta&#34;&#xA;    },&#xA;    border = &#34;rounded&#34;,&#xA;    tmux = true,&#xA;});&#xA;&#xA;-- fuzzy file search can be started simply with&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;c-f&amp;gt;&#34;, jfind.findFile)&#xA;&#xA;-- or you can provide more customization&#xA;-- for more information, read the &#34;Lua Jfind Interface&#34; section&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;c-f&amp;gt;&#34;, function()&#xA;    jfind.findFile({&#xA;        formatPaths = true,&#xA;        callback = {&#xA;            [key.DEFAULT] = vim.cmd.edit,&#xA;            [key.CTRL_S] = vim.cmd.split,&#xA;            [key.CTRL_V] = vim.cmd.vsplit,&#xA;        }&#xA;    })&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a boolean of whether a tmux window is preferred over a neovim window. If tmux is not active, then this value is ignored. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;exclude&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a list of strings of files/directories that should be ignored. Entries can contain wildcard matching (e.g. &lt;code&gt;*.png&lt;/code&gt;). Default is an empty list.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;border&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The style of the border when not fullscreen. The default is &lt;code&gt;&#34;single&#34;&lt;/code&gt;. Possible values include: &lt;br&gt;- &lt;code&gt;&#34;none&#34;&lt;/code&gt;: No border.&lt;br&gt;- &lt;code&gt;&#34;single&#34;&lt;/code&gt;: A single line box.&lt;br&gt;- &lt;code&gt;&#34;double&#34;&lt;/code&gt;: A double line box.&lt;br&gt;- &lt;code&gt;&#34;rounded&#34;&lt;/code&gt;: Like &#34;single&#34;, but with rounded corners.&lt;br&gt;- &lt;code&gt;&#34;solid&#34;&lt;/code&gt;: Adds padding by a single whitespace cell.&lt;br&gt;- &lt;code&gt;&#34;shadow&#34;&lt;/code&gt;: A drop shadow effect by blending with the background.&lt;br&gt;- Or an array for a custom border. See &lt;code&gt;:h nvim_open_win&lt;/code&gt; for details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;maxWidth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An integer of how large in width the jfind can be as fullscreen until it becomes a popup window. default is &lt;code&gt;120&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;maxHeight&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An integer of how large in height the jfind can be as fullscreen until it becomes a popup window. default is &lt;code&gt;28&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Lua Jfind Interface&lt;/h2&gt; &#xA;&lt;p&gt;This section is useful if you want to create your own fuzzy finders using jfind, or if you want to understand the configuration better.&lt;/p&gt; &#xA;&lt;h3&gt;The jfind function&lt;/h3&gt; &#xA;&lt;p&gt;This plugin provides the &lt;code&gt;jfind()&lt;/code&gt; function, which can be accessed via &lt;code&gt;require(&#34;jfind&#34;).jfind&lt;/code&gt;. This function opens a tmux or nvim popup based on user configuration, performs fuzzy finding, and calls a provided callback with the result if there is one.&lt;/p&gt; &#xA;&lt;h3&gt;Fuzzy finding script output&lt;/h3&gt; &#xA;&lt;p&gt;Below is an example usage of &lt;code&gt;jfind()&lt;/code&gt;. It takes a script, which in this case is the &lt;code&gt;seq&lt;/code&gt; command. It also provides an argument to the &lt;code&gt;seq&lt;/code&gt; command. Upon completion, the result of the fuzzy finding will be printed using the provided &lt;code&gt;print&lt;/code&gt; callback. The &lt;code&gt;seq&lt;/code&gt; command could just as easily have been a path to a shell script, as is the case for &lt;code&gt;findFile()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local jfind = require(&#34;jfind&#34;)&#xA;&#xA;jfind.jfind({&#xA;    script = &#34;seq&#34;,&#xA;    args = {100},&#xA;    callback = print&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fuzzy finding a list of strings&lt;/h3&gt; &#xA;&lt;p&gt;Instead of a program/script, you can provide a list of strings with the input option. This is useful for generating the input data in lua instead of a shell script, since a shell script does not have access to neovim state.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local jfind = require(&#34;jfind&#34;)&#xA;&#xA;jfind.jfind({&#xA;    input = {&#34;one&#34;, &#34;two&#34;, &#34;three&#34;, &#34;four&#34;},&#xA;    callback = print&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple keybindings&lt;/h3&gt; &#xA;&lt;p&gt;The callback option is either a function or a table. You can provide a table if you want different actions for different keybinds. For example, you may want to vertically split when pressing &lt;code&gt;&amp;lt;c-v&amp;gt;&lt;/code&gt; on an item. Below is an example of having multiple keybindings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local jfind = require(&#34;jfind&#34;)&#xA;local key = require(&#34;jfind.key&#34;)&#xA;&#xA;jfind.jfind({&#xA;    script = &#34;ls&#34;,&#xA;    callback = {&#xA;        [key.DEFAULT] = vim.cmd.edit,&#xA;        [key.CTRL_V] = vim.cmd.vsplit,&#xA;        [key.CTRL_S] = vim.cmd.split&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the &lt;code&gt;key.DEFAULT&lt;/code&gt; applies to the user hitting enter or double clicking on an item, unless overridden.&lt;/p&gt; &#xA;&lt;h3&gt;Hints&lt;/h3&gt; &#xA;&lt;p&gt;You may have noticed that the builtin &lt;code&gt;findFile()&lt;/code&gt; accepts an option called &lt;code&gt;formatPaths&lt;/code&gt;. When this option is true, the jfind window has two columns, where the one on the right shows the full path, but is not searchable. These are called hints. They are useful for separating what the user is searching for from the result we want.&lt;/p&gt; &#xA;&lt;p&gt;For instance, when I am searching for a path, I do not want to search the full &lt;code&gt;~/projects/foo/bar/baz/item/item.java&lt;/code&gt;, I just want to search the final &lt;code&gt;item/item.java&lt;/code&gt;. In this case, the &lt;code&gt;item/item.java&lt;/code&gt; would be the search item, and &lt;code&gt;~/projects/foo/bar/baz/item/item.java&lt;/code&gt; would be the hint. We can then use the hint when actually editing the file, since trying to edit &lt;code&gt;item/item.java&lt;/code&gt; is missing its hierarchy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local jfind = require(&#34;jfind&#34;)&#xA;&#xA;jfind.jfind({&#xA;    input = {&#34;item one&#34;, &#34;hint one&#34;, &#34;item two&#34;, &#34;hint two&#34;},&#xA;    hints = true,&#xA;    callback = function(result, hint)&#xA;        print(&#34;result: &#34; .. result, &#34;hint: &#34; .. hint)&#xA;    end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wrapping the callbacks&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes it may be useful to wrap each callback in a function. This can save needing the same boilerplate for every callback. The following example is using a snippet from the &#34;Fuzzy finding open buffers&#34; example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local jfind = require(&#34;jfind&#34;)&#xA;local key = require(&#34;jfind.key&#34;)&#xA;&#xA;-- without wrapper&#xA;jfind.jfind({&#xA;    input = get_buffers(),&#xA;    hints = true,&#xA;    callback = {&#xA;        [key.DEFAULT] = function(_, path) vim.cmd.edit(path) end,&#xA;        [key.CTRL_S] = function(_, path) vim.cmd.split(path) end,&#xA;        [key.CTRL_V] = function(_, path) vim.cmd.vsplit(path end,&#xA;    }&#xA;})&#xA;&#xA;-- with wrapper&#xA;jfind.jfind({&#xA;    input = get_buffers(),&#xA;    hints = true,&#xA;    callbackWrapper = function(callback, _, path)&#xA;        callback(path)&#xA;    end,&#xA;    callback = {&#xA;        [key.DEFAULT] = vim.cmd.edit,&#xA;        [key.CTRL_S] = vim.cmd.split,&#xA;        [key.CTRL_V] = vim.cmd.vsplit,&#xA;    }&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Fuzzy finding open buffers&lt;/h3&gt; &#xA;&lt;p&gt;This example combines it all together to create a fuzzy finder for open buffers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local jfind = require(&#34;jfind&#34;)&#xA;local key = require(&#34;jfind.key&#34;)&#xA;&#xA;local function get_buffers()&#xA;    local buffers = {}&#xA;    for i, buf_hndl in ipairs(vim.api.nvim_list_bufs()) do&#xA;        if vim.api.nvim_buf_is_loaded(buf_hndl) then&#xA;            local path = vim.api.nvim_buf_get_name(buf_hndl)&#xA;            if path ~= nil and path ~= &#34;&#34; then&#xA;                buffers[i * 2 - 1] = jfind.formatPath(path)&#xA;                buffers[i * 2] = path&#xA;            end&#xA;        end&#xA;    end&#xA;    return buffers&#xA;end&#xA;&#xA;jfind.jfind({&#xA;    input = get_buffers(),&#xA;    hints = true,&#xA;    callbackWrapper = function(callback, _, path)&#xA;        callback(path)&#xA;    end,&#xA;    callback = {&#xA;        [key.DEFAULT] = vim.cmd.edit,&#xA;        [key.CTRL_S] = vim.cmd.split,&#xA;        [key.CTRL_V] = vim.cmd.vsplit,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>