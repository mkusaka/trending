<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-11T01:46:16Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>craftzdog/dotfiles-public</title>
    <updated>2022-08-11T01:46:16Z</updated>
    <id>tag:github.com,2022-08-11:/craftzdog/dotfiles-public</id>
    <link href="https://github.com/craftzdog/dotfiles-public" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My personal dotfiles&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/craftzdog/dotfiles-public/master/images/screenshot-1.png&#34; alt=&#34;fish screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/craftzdog/dotfiles-public/master/images/screenshot-neovim.png&#34; alt=&#34;nvim screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Takuya&#39;s dotfiles&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Don’t blindly use my settings unless you know what that entails. Use at your own risk!&lt;/p&gt; &#xA;&lt;h3&gt;Looking for a Markdown note-taking app?&lt;/h3&gt; &#xA;&lt;p&gt;Check out my app called &lt;a href=&#34;https://www.inkdrop.app/&#34;&gt;Inkdrop&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.inkdrop.app/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/craftzdog/dotfiles-public/master/images/screenshot-inkdrop.png&#34; alt=&#34;Inkdrop&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vim (NeoVim) config&lt;/li&gt; &#xA; &lt;li&gt;tmux config&lt;/li&gt; &#xA; &lt;li&gt;git config&lt;/li&gt; &#xA; &lt;li&gt;fish config&lt;/li&gt; &#xA; &lt;li&gt;PowerShell config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Neovim setup&lt;/h2&gt; &#xA;&lt;p&gt;Requires &lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt; (&amp;gt;= 0.7)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer.nvim&lt;/a&gt; - A plugin manager for Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/svrana/neosolarized.nvim&#34;&gt;svrana/neosolarized.nvim&lt;/a&gt; - A truecolor, solarized dark colorscheme&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;nvim-lualine/lualine.nvim&lt;/a&gt; - A blazing fast and easy to configure Neovim statusline written in Lua&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onsails/lspkind-nvim&#34;&gt;onsails/lspkind-nvim&lt;/a&gt; - VSCode-like pictograms&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;L3MON4D3/LuaSnip&lt;/a&gt; - Snippet Engine for Neovim written in Lua&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-nvim-lsp&#34;&gt;hrsh7th/cmp-nvim-lsp&lt;/a&gt; - nvim-cmp source for neovim&#39;s built-in LSP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-buffer&#34;&gt;hrsh7th/cmp-buffer&lt;/a&gt; - nvim-cmp source for buffer words&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;hrsh7th/nvim-cmp&lt;/a&gt; - A completion engine plugin for neovim written in Lua&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;neovim/nvim-lspconfig&lt;/a&gt; - A collection of configurations for Neovim&#39;s built-in LSP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;jose-elias-alvarez/null-ls.nvim&lt;/a&gt; - Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunifTanjim/prettier.nvim&#34;&gt;MunifTanjim/prettier.nvim&lt;/a&gt; - Prettier plugin for Neovim&#39;s built-in LSP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;williamboman/mason.nvim&lt;/a&gt; - Portable package manager for Neovim that runs everywhere Neovim runs. Easily install and manage LSP servers, DAP servers, linters, and formatters&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/mason-lspconfig.nvim&#34;&gt;williamboman/mason-lspconfig.nvim&lt;/a&gt; - Extension to mason.nvim that makes it easier to use lspconfig with mason.nvim&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;glepnir/lspsaga.nvim&lt;/a&gt; - A light-weight lsp plugin based on neovim&#39;s built-in lsp with a highly performant UI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter/nvim-treesitter&lt;/a&gt; - &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;Treesitter&lt;/a&gt; configurations and abstraction layer for Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt; - Lua &lt;code&gt;fork&lt;/code&gt; of vim-web-devicons for neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope/telescope.nvim&lt;/a&gt; - A highly extendable fuzzy finder over lists&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-file-browser.nvim&#34;&gt;nvim-telescope/telescope-file-browser.nvim&lt;/a&gt; - File Browser extension for telescope.nvim&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs&#34;&gt;windwp/nvim-autopairs&lt;/a&gt; - Autopairs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/windwp/nvim-ts-autotag&#34;&gt;windwp/nvim-ts-autotag&lt;/a&gt; - Use treesitter to auto close and auto rename html tag&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/norcalli/nvim-colorizer.lua&#34;&gt;norcalli/nvim-colorizer.lua&lt;/a&gt; - A high-performance color highlighter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;akinsho/nvim-bufferline.lua&lt;/a&gt; - A snazzy bufferline&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;lewis6991/gitsigns.nvim&lt;/a&gt; - Git integration for buffers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dinhhuy258/git.nvim&#34;&gt;dinhhuy258/git.nvim&lt;/a&gt; - A simple clone of the plugin vim-fugitive&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/zen-mode.nvim&#34;&gt;folke/zen-mode.nvim&lt;/a&gt; - Distraction-free mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iamcco/markdown-preview.nvim&#34;&gt;iamcco/markdown-preview.nvim&lt;/a&gt; - Markdown live preview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Shell setup (macOS &amp;amp; Linux)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fishshell.com/&#34;&gt;Fish shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jorgebucaran/fisher&#34;&gt;Fisher&lt;/a&gt; - Plugin manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IlanCosman/tide&#34;&gt;Tide&lt;/a&gt; - Shell theme. Use version 5: &lt;code&gt;fisher install ilancosman/tide@v5&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;Nerd fonts&lt;/a&gt; - Powerline-patched fonts. I use Hack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jethrokuan/z&#34;&gt;z for fish&lt;/a&gt; - Directory jumping&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://the.exa.website/&#34;&gt;Exa&lt;/a&gt; - &lt;code&gt;ls&lt;/code&gt; replacement&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/x-motemen/ghq&#34;&gt;ghq&lt;/a&gt; - Local Git repository organizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peco/peco&#34;&gt;peco&lt;/a&gt; - Interactive filtering&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PowerShell setup (Windows)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt; - A command-line installer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ohmyposh.dev/&#34;&gt;Oh My Posh&lt;/a&gt; - Prompt theme engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devblackops/Terminal-Icons&#34;&gt;Terminal Icons&lt;/a&gt; - Folder and file icons&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/psreadline/&#34;&gt;PSReadLine&lt;/a&gt; - Cmdlets for customizing the editing environment, used for autocompletion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.powershellgallery.com/packages/z&#34;&gt;z&lt;/a&gt; - Directory jumper&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kelleyma49/PSFzf&#34;&gt;PSFzf&lt;/a&gt; - Fuzzy finder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Watch my video tutorials:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=sSOfr2MtRU8&amp;amp;list=PLxQA0uNgQDCICMRwlOzWAZBPL05XBC_br&amp;amp;index=10&#34;&gt;My dev workflow using tmux and vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UZBjt04y4Oo&amp;amp;list=PLxQA0uNgQDCICMRwlOzWAZBPL05XBC_br&amp;amp;index=3&#34;&gt;My vim setup to speed up JavaScript coding for my Electron and React Native apps&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dev.to/craftzdog/my-vim-setup-to-speed-up-javascript-coding-for-my-electron-and-react-native-apps-4ebp&#34;&gt;Blogpost&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qKpY7t5m35k&amp;amp;list=PLxQA0uNgQDCICMRwlOzWAZBPL05XBC_br&amp;amp;index=4&#34;&gt;A productive command-line Git workflow for indie app developers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dev.to/craftzdog/a-productive-command-line-git-workflow-for-indie-app-developers-k7d&#34;&gt;Blogpost&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KKxhf50FIPI&#34;&gt;My Fish shell workflow for coding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5-aK2_WwrmM&#34;&gt;How to set up PowerShell prompt with Oh My Posh on Windows 11&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;About me&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/inkdrop_app&#34;&gt;Twitter @inkdrop_app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.inkdrop.app/&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.inkdrop.app/&#34;&gt;My product: Inkdrop - Markdown note-taking app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Pocco81/auto-save.nvim</title>
    <updated>2022-08-11T01:46:16Z</updated>
    <id>tag:github.com,2022-08-11:/Pocco81/auto-save.nvim</id>
    <link href="https://github.com/Pocco81/auto-save.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🧶 Automatically save your changes in NeoVim&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;🧶 auto-save.nvim&lt;/h2&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Automatically save your changes in NeoVim &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Pocco81/auto-save.nvim/stargazers&#34;&gt; &lt;img alt=&#34;Stars&#34; src=&#34;https://img.shields.io/github/stars/Pocco81/auto-save.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Pocco81/auto-save.nvim/issues&#34;&gt; &lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/Pocco81/auto-save.nvim?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Pocco81/auto-save.nvim&#34;&gt; &lt;img alt=&#34;Repo Size&#34; src=&#34;https://img.shields.io/github/repo-size/Pocco81/auto-save.nvim?color=%23DDB6F2&amp;amp;label=SIZE&amp;amp;logo=codesandbox&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;📢 Disclaimer: Breaking Change&lt;/h3&gt; &#xA;&lt;p&gt;This plugin has been renamed from &lt;code&gt;AutoSave&lt;/code&gt; to &lt;code&gt;auto-save&lt;/code&gt;, and this repository has accordingly moved from &lt;code&gt;pocco81/AutoSave.nvim&lt;/code&gt; to &lt;code&gt;pocco81/auto-save.nvim&lt;/code&gt;. To prevent errors with your configuration, make sure to update both the name and the repository url in your config!&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;📋 Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;automatically save your changes so the world doesn&#39;t collapse&lt;/li&gt; &#xA; &lt;li&gt;highly customizable: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;conditionals to assert whether to save or not&lt;/li&gt; &#xA;   &lt;li&gt;execution message (it can be dimmed and personalized)&lt;/li&gt; &#xA;   &lt;li&gt;events that trigger auto-save&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;debounce the save with a delay&lt;/li&gt; &#xA; &lt;li&gt;multiple callbacks&lt;/li&gt; &#xA; &lt;li&gt;automatically clean the message area&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;📚 Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;📦 Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install the plugin with your favourite package manager:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;&#x9;&#34;Pocco81/auto-save.nvim&#34;,&#xA;&#x9;config = function()&#xA;&#x9;&#x9; require(&#34;auto-save&#34;).setup {&#xA;&#x9;&#x9;&#x9;-- your config goes here&#xA;&#x9;&#x9;&#x9;-- or just leave it empty :)&#xA;&#x9;&#x9; }&#xA;&#x9;end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;Pocco81/auto-save.nvim&#39;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;&#x9;require(&#34;auto-save&#34;).setup {&#xA;&#x9;&#x9;-- your config goes here&#xA;&#x9;&#x9;-- or just leave it empty :)&#xA;&#x9;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;⚙️ Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;auto-save&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    enabled = true, -- start auto-save when the plugin is loaded (i.e. when your package manager loads it)&#xA;    execution_message = {&#xA;&#x9;&#x9;message = function() -- message to print on save&#xA;&#x9;&#x9;&#x9;return (&#34;AutoSave: saved at &#34; .. vim.fn.strftime(&#34;%H:%M:%S&#34;))&#xA;&#x9;&#x9;end,&#xA;&#x9;&#x9;dim = 0.18, -- dim the color of `message`&#xA;&#x9;&#x9;cleaning_interval = 1250, -- (milliseconds) automatically clean MsgArea after displaying `message`. See :h MsgArea&#xA;&#x9;},&#xA;    trigger_events = {&#34;InsertLeave&#34;, &#34;TextChanged&#34;}, -- vim events that trigger auto-save. See :h events&#xA;&#x9;-- function that determines whether to save the current buffer or not&#xA;&#x9;-- return true: if buffer is ok to be saved&#xA;&#x9;-- return false: if it&#39;s not ok to be saved&#xA;&#x9;condition = function(buf)&#xA;&#x9;&#x9;local fn = vim.fn&#xA;&#x9;&#x9;local utils = require(&#34;auto-save.utils.data&#34;)&#xA;&#xA;&#x9;&#x9;if&#xA;&#x9;&#x9;&#x9;fn.getbufvar(buf, &#34;&amp;amp;modifiable&#34;) == 1 and&#xA;&#x9;&#x9;&#x9;utils.not_in(fn.getbufvar(buf, &#34;&amp;amp;filetype&#34;), {}) then&#xA;&#x9;&#x9;&#x9;return true -- met condition(s), can save&#xA;&#x9;&#x9;end&#xA;&#x9;&#x9;return false -- can&#39;t save&#xA;&#x9;end,&#xA;    write_all_buffers = false, -- write all buffers when the current one meets `condition`&#xA;    debounce_delay = 135, -- saves the file at most every `debounce_delay` milliseconds&#xA;&#x9;callbacks = { -- functions to be executed at different intervals&#xA;&#x9;&#x9;enabling = nil, -- ran when enabling auto-save&#xA;&#x9;&#x9;disabling = nil, -- ran when disabling auto-save&#xA;&#x9;&#x9;before_asserting_save = nil, -- ran before checking `condition`&#xA;&#x9;&#x9;before_saving = nil, -- ran before doing the actual save&#xA;&#x9;&#x9;after_saving = nil -- ran after doing the actual save&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally you may want to set up a key mapping to toggle auto-save:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;n&#34;, &#34;:ASToggle&amp;lt;CR&amp;gt;&#34;, {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;🪴 Usage&lt;/h3&gt; &#xA;&lt;p&gt;Besides running auto-save at startup (if you have &lt;code&gt;enabled = true&lt;/code&gt; in your config), you may as well:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ASToggle&lt;/code&gt;: toggle auto-save&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>andythigpen/nvim-coverage</title>
    <updated>2022-08-11T01:46:16Z</updated>
    <id>tag:github.com,2022-08-11:/andythigpen/nvim-coverage</id>
    <link href="https://github.com/andythigpen/nvim-coverage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Displays test coverage data in the sign column&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-coverage&lt;/h1&gt; &#xA;&lt;p&gt;Displays coverage information in the sign column.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/542263/159128715-32e6eddf-5f9f-4853-9e2b-abd66bbf01d4.png&#34; alt=&#34;markers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays a coverage summary report in a pop-up window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/542263/159128732-8189b89d-4f71-4a34-8c6a-176e40fcd48d.png&#34; alt=&#34;summary&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dart (lcov)&lt;/li&gt; &#xA; &lt;li&gt;Go (coverprofile)&lt;/li&gt; &#xA; &lt;li&gt;Javascript/Typescript (lcov): &lt;a href=&#34;https://jestjs.io/docs/getting-started&#34;&gt;jest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Julia (lcov): &lt;a href=&#34;https://pkgdocs.julialang.org/v1/&#34;&gt;Pkg.jl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python (json): &lt;a href=&#34;https://coverage.readthedocs.io/en/6.3.2/index.html&#34;&gt;coverage.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby (json): &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov&#34;&gt;SimpleCov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust (json): &lt;a href=&#34;https://github.com/mozilla/grcov#usage&#34;&gt;grcov&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; This plugin does not run tests. It justs loads/displays a coverage report generated by a test suite. To run tests from neovim with coverage enabled, try one of these plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest&#34;&gt;neotest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vim-test/vim-test&#34;&gt;vim-test&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin depends on &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Using vim-plug:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;andythigpen/nvim-coverage&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following lua is required to configure the plugin after installation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;coverage&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;  &#34;andythigpen/nvim-coverage&#34;,&#xA;  requires = &#34;nvim-lua/plenary.nvim&#34;,&#xA;  config = function()&#xA;    require(&#34;user.coverage&#34;)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/andythigpen/nvim-coverage/raw/main/doc/nvim-coverage.txt&#34;&gt;docs&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;coverage&#34;).setup({&#xA;&#x9;commands = true, -- create commands&#xA;&#x9;highlights = {&#xA;&#x9;&#x9;-- customize highlight groups created by the plugin&#xA;&#x9;&#x9;covered = { fg = &#34;#C3E88D&#34; },   -- supports style, fg, bg, sp (see :h highlight-gui)&#xA;&#x9;&#x9;uncovered = { fg = &#34;#F07178&#34; },&#xA;&#x9;},&#xA;&#x9;signs = {&#xA;&#x9;&#x9;-- use your own highlight groups or text markers&#xA;&#x9;&#x9;covered = { hl = &#34;CoverageCovered&#34;, text = &#34;▎&#34; },&#xA;&#x9;&#x9;uncovered = { hl = &#34;CoverageUncovered&#34;, text = &#34;▎&#34; },&#xA;&#x9;},&#xA;&#x9;summary = {&#xA;&#x9;&#x9;-- customize the summary pop-up&#xA;&#x9;&#x9;min_coverage = 80.0,      -- minimum coverage threshold (used for highlighting)&#xA;&#x9;},&#xA;&#x9;lang = {&#xA;&#x9;&#x9;-- customize language specific settings&#xA;&#x9;},&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extending to other languages&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new lua module matching the pattern &lt;code&gt;coverage.languages.&amp;lt;filetype&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;filetype&amp;gt;&lt;/code&gt; matches the vim filetype for the coverage language (ex. python).&lt;/li&gt; &#xA; &lt;li&gt;Implement the required methods listed below.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Required methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local M = {}&#xA;&#xA;--- Loads a coverage report.&#xA;-- This method should perform whatever steps are necessary to generate a coverage report.&#xA;-- The coverage report results should passed to the callback, which will be cached by the plugin.&#xA;-- @param callback called with results of the coverage report&#xA;M.load = function(callback)&#xA;  -- TODO: callback(results)&#xA;end&#xA;&#xA;--- Returns a list of signs that will be placed in buffers.&#xA;-- This method should use the coverage data (previously generated via the load method) to &#xA;-- return a list of signs.&#xA;-- @return list of signs&#xA;M.sign_list = function(data)&#xA;  -- TODO: generate a list of signs using:&#xA;  -- require(&#34;coverage.signs&#34;).new_covered(bufnr, linenr)&#xA;  -- require(&#34;coverage.signs&#34;).new_uncovered(bufnr, linenr)&#xA;end&#xA;&#xA;--- Returns a summary report.&#xA;-- @return summary report&#xA;M.summary = function(data)&#xA;  -- TODO: generate a summary report in the format&#xA;  return {&#xA;    files = {&#xA;      { -- all fields, except filename, are optional - the report will be blank if the field is nil&#xA;        filename = fname,            -- filename displayed in the report&#xA;        statements = statements,     -- number of total statements in the file&#xA;        missing = missing,           -- number of lines missing coverage (uncovered) in the file&#xA;        excluded = excluded,         -- number of lines excluded from coverage reporting in the file&#xA;        branches = branches,         -- number of total branches in the file&#xA;        partial = partial_branches,  -- number of branches that are partially covered in the file&#xA;        coverage = coverage,         -- coverage percentage (float) for this file&#xA;      }&#xA;    },&#xA;    totals = { -- optional&#xA;      statements = total_statements,     -- number of total statements in the report&#xA;      missing = total_missing,           -- number of lines missing coverage (uncovered) in the report&#xA;      excluded = total_excluded,         -- number of lines excluded from coverage reporting in the report&#xA;      branches = total_branches,         -- number of total branches in the report&#xA;      partial = total_partial_branches,  -- number of branches that are partially covered in the report&#xA;      coverage = total_coverage,         -- coverage percentage to display in the report&#xA;    }&#xA;  }&#xA;end&#xA;&#xA;return M&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>