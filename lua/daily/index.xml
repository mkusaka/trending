<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-11T01:52:09Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>willothy/flatten.nvim</title>
    <updated>2023-12-11T01:52:09Z</updated>
    <id>tag:github.com,2023-12-11:/willothy/flatten.nvim</id>
    <link href="https://github.com/willothy/flatten.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open files and command output from wezterm, kitty, and neovim terminals in your current neovim instance&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; flatten.nvim &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Open files and command output from `:term`, Wezterm and Kitty in your current neovim instance&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/willothy/flatten.nvim/assets/38540736/b4e4e75a-9be2-478d-9098-7e421dd6d1d9&#34;&gt;https://github.com/willothy/flatten.nvim/assets/38540736/b4e4e75a-9be2-478d-9098-7e421dd6d1d9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Config for demo &lt;a href=&#34;https://raw.githubusercontent.com/willothy/flatten.nvim/main/#advanced-configuration-examples&#34;&gt;here&lt;/a&gt; (autodelete gitcommit on write and toggling terminal are not defaults)&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Open files from terminal buffers without creating a nested session&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow blocking for git commits&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Configuration &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Callbacks/hooks for user-specific workflows&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Open in vsplit, split, tab, current window, or alternate window&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pipe from terminal into a new Neovim buffer&#xA;  &lt;!-- panvimdoc-ignore-start --&gt; (&lt;a href=&#34;https://user-images.githubusercontent.com/38540736/225779817-ed7efea8-9108-4f28-983f-1a889d32826f.mp4&#34;&gt;demo&lt;/a&gt;) &#xA;  &lt;!-- panvimdoc-ignore-end --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setting to force blocking from the commandline, regardless of filetype&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Command passthrough from guest to host&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Flatten instances from wezterm and kitty tabs/panes based on working directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation[^1]&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;code&gt;lazy.nvim&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup({&#xA;  {&#xA;    &#34;willothy/flatten.nvim&#34;,&#xA;    config = true,&#xA;    -- or pass configuration with&#xA;    -- opts = {  }&#xA;    -- Ensure that it runs first to minimize delay when opening file from terminal&#xA;    lazy = false,&#xA;    priority = 1001,&#xA;  },&#xA;  --- ...&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Open files normally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvim file1 file2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Force blocking for a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# with a custom block handler, you can use `nvim -b file1 file2`&#xA;nvim --cmd &#39;let g:flatten_wait=1&#39; file1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open files in diff mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvim -d file1 file2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable blocking for &lt;code&gt;$VISUAL&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# with a custom block handler, you can use `export VISUAL=&#34;nvim -b&#34;`&#xA;export VISUAL=&#34;nvim --cmd &#39;let g:flatten_wait=1&#39;&#34; # allows edit-exec &amp;lt;C-x&amp;gt;&amp;lt;C-e&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable manpage formatting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export MANPAGER=&#34;nvim +Man!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Execute a command in the host instance, before opening files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvim --cmd &amp;lt;cmd&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Execute a command in the host instance, after opening files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvim +&amp;lt;cmd&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Defaults&lt;/h3&gt; &#xA;&lt;p&gt;Flatten comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---Types:&#xA;--&#xA;-- Passed to callbacks that handle opening files&#xA;---@alias BufInfo { fname: string, bufnr: buffer }&#xA;--&#xA;-- The first argument is a list of BufInfo tables representing the newly opened files.&#xA;-- The third argument is a single BufInfo table, only provided when a buffer is created from stdin.&#xA;--&#xA;-- IMPORTANT: For `block_for` to work, you need to return a buffer number OR a buffer number and a window number.&#xA;--            The `winnr` return value is not required, `vim.fn.bufwinid(bufnr)` is used if it is not provided.&#xA;--            The `filetype` of this buffer will determine whether block should happen or not.&#xA;--&#xA;---@alias OpenHandler fun(files: BufInfo[], argv: string[], stdin_buf: BufInfo, guest_cwd: string):window, buffer&#xA;--&#xA;local config = {&#xA;  callbacks = {&#xA;    ---Called to determine if a nested session should wait for the host to close the file.&#xA;    ---@param argv table a list of all the arguments in the nested session&#xA;    ---@return boolean&#xA;    should_block = require(&#34;flatten&#34;).default_should_block,&#xA;    ---If this returns true, the nested session will be opened.&#xA;    ---If false, default behavior is used, and&#xA;    ---config.nest_if_no_args is respected.&#xA;    ---@type fun(host: channel):boolean&#xA;    should_nest = require(&#34;flatten&#34;).default_should_nest,&#xA;    ---Called before a nested session is opened.&#xA;    pre_open = function() end,&#xA;    ---Called after a nested session is opened.&#xA;    ---@param bufnr buffer&#xA;    ---@param winnr window&#xA;    ---@param filetype string&#xA;    ---@param is_blocking boolean&#xA;    ---@param is_diff boolean&#xA;    post_open = function(bufnr, winnr, filetype, is_blocking, is_diff) end,&#xA;    ---Called when a nested session is done waiting for the host.&#xA;    ---@param filetype string&#xA;    block_end = function(filetype) end,&#xA;  },&#xA;  -- &amp;lt;String, Bool&amp;gt; dictionary of filetypes that should be blocking&#xA;  block_for = {&#xA;    gitcommit = true,&#xA;    gitrebase = true,&#xA;  },&#xA;  -- Command passthrough&#xA;  allow_cmd_passthrough = true,&#xA;  -- Allow a nested session to open if Neovim is opened without arguments&#xA;  nest_if_no_args = false,&#xA;  -- Window options&#xA;  window = {&#xA;    -- Options:&#xA;    -- current        -&amp;gt; open in current window (default)&#xA;    -- alternate      -&amp;gt; open in alternate window (recommended)&#xA;    -- tab            -&amp;gt; open in new tab&#xA;    -- split          -&amp;gt; open in split&#xA;    -- vsplit         -&amp;gt; open in vsplit&#xA;    -- smart          -&amp;gt; smart open (avoids special buffers)&#xA;    -- OpenHandler    -&amp;gt; allows you to handle file opening yourself (see Types)&#xA;    --&#xA;    open = &#34;current&#34;,&#xA;    -- Options:&#xA;    -- vsplit         -&amp;gt; opens files in diff vsplits&#xA;    -- split          -&amp;gt; opens files in diff splits&#xA;    -- tab_vsplit     -&amp;gt; creates a new tabpage, and opens diff vsplits&#xA;    -- tab_split      -&amp;gt; creates a new tabpage, and opens diff splits&#xA;    -- OpenHandler    -&amp;gt; allows you to handle file opening yourself (see Types)&#xA;    diff = &#34;tab_vsplit&#34;,&#xA;    -- Affects which file gets focused when opening multiple at once&#xA;    -- Options:&#xA;    -- &#34;first&#34;        -&amp;gt; open first file of new files (default)&#xA;    -- &#34;last&#34;         -&amp;gt; open last file of new files&#xA;    focus = &#34;first&#34;,&#xA;  },&#xA;  -- Override this function to use a different socket to connect to the host&#xA;  -- On the host side this can return nil or the socket address.&#xA;  -- On the guest side this should return the socket address&#xA;  -- or a non-zero channel id from `sockconnect`&#xA;  -- flatten.nvim will detect if the address refers to this instance of nvim, to determine if this is a host or a guest&#xA;  pipe_path = require(&#34;flatten&#34;).default_pipe_path,&#xA;  -- The `default_pipe_path` will treat the first nvim instance within a single kitty/wezterm session as the host&#xA;  -- You can configure this behaviour using the following opt-in integrations:&#xA;  one_per = {&#xA;    kitty = false, -- Flatten all instance in the current Kitty session&#xA;    wezterm = false, -- Flatten all instance in the current Wezterm session&#xA;  },&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced configuration examples&lt;/h3&gt; &#xA;&lt;h4&gt;Toggleterm&lt;/h4&gt; &#xA;&lt;p&gt;If you use a toggleable terminal and don&#39;t want the new buffer(s) to be opened in your current window, you can use the &lt;code&gt;alternate&lt;/code&gt; mode instead of &lt;code&gt;current&lt;/code&gt; to open in your last window. With this method, the terminal doesn&#39;t need to be closed and re-opened as it did with the &lt;a href=&#34;https://github.com/willothy/flatten.nvim/raw/c986f98bc1d1e2365dfb2e97dda58ca5d0ae24ae/README.md&#34;&gt;old example config&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The only reason &#39;alternate&#39; isn&#39;t the default is to avoid breaking people&#39;s configs. It may become the default at some point if that&#39;s something that people ask for (e.g., open an issue if you want that, or comment on one if it exists).&lt;/p&gt; &#xA;&lt;p&gt;Note that when opening a file in blocking mode, such as a git commit, the terminal will be inaccessible. You can get the filetype from the bufnr or filetype arguments of the &lt;code&gt;post_open&lt;/code&gt; callback to only close the terminal for blocking files, and the &lt;code&gt;block_end&lt;/code&gt; callback to reopen it afterwards.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s my setup for toggleterm, including an autocmd to automatically close a git commit buffer on write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local flatten = {&#xA;  &#34;willothy/flatten.nvim&#34;,&#xA;  opts = function()&#xA;    ---@type Terminal?&#xA;    local saved_terminal&#xA;&#xA;    return {&#xA;      window = {&#xA;        open = &#34;alternate&#34;,&#xA;      },&#xA;      callbacks = {&#xA;        should_block = function(argv)&#xA;          -- Note that argv contains all the parts of the CLI command, including&#xA;          -- Neovim&#39;s path, commands, options and files.&#xA;          -- See: :help v:argv&#xA;&#xA;          -- In this case, we would block if we find the `-b` flag&#xA;          -- This allows you to use `nvim -b file1` instead of&#xA;          -- `nvim --cmd &#39;let g:flatten_wait=1&#39; file1`&#xA;          return vim.tbl_contains(argv, &#34;-b&#34;)&#xA;&#xA;          -- Alternatively, we can block if we find the diff-mode option&#xA;          -- return vim.tbl_contains(argv, &#34;-d&#34;)&#xA;        end,&#xA;        pre_open = function()&#xA;          local term = require(&#34;toggleterm.terminal&#34;)&#xA;          local termid = term.get_focused_id()&#xA;          saved_terminal = term.get(termid)&#xA;        end,&#xA;        post_open = function(bufnr, winnr, ft, is_blocking)&#xA;          if is_blocking and saved_terminal then&#xA;            -- Hide the terminal while it&#39;s blocking&#xA;            saved_terminal:close()&#xA;          else&#xA;            -- If it&#39;s a normal file, just switch to its window&#xA;            vim.api.nvim_set_current_win(winnr)&#xA;&#xA;            -- If we&#39;re in a different wezterm pane/tab, switch to the current one&#xA;            -- Requires willothy/wezterm.nvim&#xA;            require(&#34;wezterm&#34;).switch_pane.id(&#xA;              tonumber(os.getenv(&#34;WEZTERM_PANE&#34;))&#xA;            )&#xA;          end&#xA;&#xA;          -- If the file is a git commit, create one-shot autocmd to delete its buffer on write&#xA;          -- If you just want the toggleable terminal integration, ignore this bit&#xA;          if ft == &#34;gitcommit&#34; or ft == &#34;gitrebase&#34; then&#xA;            vim.api.nvim_create_autocmd(&#34;BufWritePost&#34;, {&#xA;              buffer = bufnr,&#xA;              once = true,&#xA;              callback = vim.schedule_wrap(function()&#xA;                vim.api.nvim_buf_delete(bufnr, {})&#xA;              end),&#xA;            })&#xA;          end&#xA;        end,&#xA;        block_end = function()&#xA;          -- After blocking ends (for a git commit, etc), reopen the terminal&#xA;          vim.schedule(function()&#xA;            if saved_terminal then&#xA;              saved_terminal:open()&#xA;              saved_terminal = nil&#xA;            end&#xA;          end)&#xA;        end,&#xA;      },&#xA;    }&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pipe path&lt;/h4&gt; &#xA;&lt;p&gt;Flatten now checks for kitty and wezterm by default, but this is how it works. If you use another terminal emulator or multiplexer, you can implement your &lt;code&gt;pipe_path&lt;/code&gt; function based on this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local pipe_path = function()&#xA;  -- If running in a terminal inside Neovim:&#xA;  if vim.env.NVIM then&#xA;    return vim.env.NVIM&#xA;  end&#xA;  -- If running in a Kitty terminal,&#xA;  -- all tabs/windows/os-windows in the same instance of kitty&#xA;  -- will open in the first neovim instance&#xA;  if vim.env.KITTY_PID then&#xA;    local addr = (&#34;%s/%s&#34;):format(&#xA;      vim.fn.stdpath(&#34;run&#34;),&#xA;      &#34;kitty.nvim-&#34; .. vim.env.KITTY_PID&#xA;    )&#xA;    if not vim.loop.fs_stat(addr) then&#xA;      vim.fn.serverstart(addr)&#xA;    end&#xA;    return addr&#xA;  end&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;The name is inspired by the flatten function in Rust (and maybe other languages?), which flattens nested types (&lt;code&gt;Option&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, etc).&lt;/p&gt; &#xA;&lt;p&gt;The plugin itself is inspired by &lt;a href=&#34;https://github.com/samjwill/nvim-unception&#34;&gt;&lt;code&gt;nvim-unception&lt;/code&gt;&lt;/a&gt;, which accomplishes the same goal but functions a bit differently and doesn&#39;t allow as much configuration.&lt;/p&gt; &#xA;&lt;p&gt;[^1]: Lazy loading this plugin is not recommended - flatten should always be loaded as early as possible. Starting the host is essentially overhead-free other than the setup() function as it leverages the RPC server started on init by Neovim, and loading plugins before this in a guest session will only result in poor performance.&lt;/p&gt;</summary>
  </entry>
</feed>