<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-29T01:32:47Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Steamopollys/Steamodded</title>
    <updated>2024-02-29T01:32:47Z</updated>
    <id>tag:github.com,2024-02-29:/Steamopollys/Steamodded</id>
    <link href="https://github.com/Steamopollys/Steamodded" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Balatro ModLoader&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Steamodded - A Balatro ModLoader&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Steamodded is a mod loader and injector for the game Balatro. It is developed using Lua for the injected code and Python for additional tools. Currently, Steamodded focuses on basic mod loading and injection functionalities and does not include a modding API.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mod Loader:&lt;/strong&gt; Loads mods into the game.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It will load every mods located at the path &lt;code&gt;C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Balatro&lt;/code&gt; (or &lt;code&gt;%appdata%\Balatro\Mods&lt;/code&gt;) into the game. If it&#39;s for now very simple, it will seach for an header at the top of the file that looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;--- STEAMODDED HEADER&#xA;--- MOD_NAME: Your Mod Name&#xA;--- MOD_ID: YourModID&#xA;--- MOD_AUTHOR: [You, AnotherDev, AnotherOtherDev]&#xA;--- MOD_DESCRIPTION: The Description of your Mod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This header is mandatory and the mod loader will not load the mod without it.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;MOD_ID&lt;/code&gt; must be unique and without spaces. The &lt;code&gt;MOD_AUTHOR&lt;/code&gt; mus be an array. Every part of the Header must be present.&lt;/p&gt; &#xA;&lt;p&gt;After the Header validation, the lua code of your mod will be loaded.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Core Management:&lt;/strong&gt; Handles the overall management of mods.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is the hearth of the project, every parts depend on it.&lt;/p&gt; &#xA;&lt;p&gt;For now it&#39;s not doing much outside of displaying basic informations and offering a basic GUI for Steamodded. In the future it will be the most important part of the project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debug Socket:&lt;/strong&gt; Provides a way to output debug data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The debug Socket is used to send debug informtions from the Game and the Mods outside of the Game. Since we can&#39;t launch Balatro linked with a console interface, it&#39;s the most efficient way to provide debug data.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Injector:&lt;/strong&gt; Injects Steamodded into Balatro.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The injector is coded in Python. It&#39;s used to inject every other parts of Steamodded into the base game.&lt;/p&gt; &#xA;&lt;p&gt;It use 2 external tools: &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; for is extreme capability in term of SFX ZIP, permiting Steamodded to modify the executable without breaking it, and &lt;a href=&#34;https://github.com/marsinator358/luajit-decompiler-v2&#34;&gt;luajit-decompiler-v2&lt;/a&gt; that is used for decompiling the code before reinjection. Big thanks to them, they made this project way easier to do.&lt;/p&gt; &#xA;&lt;p&gt;The code is NOT recompiled after injection. It might change in the future but it will stay like that for now.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;How to Install Steamodded&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CLOSE THE GAME !&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to the &lt;a href=&#34;https://github.com/Steamopollys/steamodded/releases&#34;&gt;release page&lt;/a&gt; and download the latest or nightly release (Your aiming for the &#34;.exe&#34; download)&lt;/li&gt; &#xA; &lt;li&gt;Drag and Drop your &#34;Balatro.exe&#34; to the executable&lt;/li&gt; &#xA; &lt;li&gt;Wait for it to finish&lt;/li&gt; &#xA; &lt;li&gt;And that&#39;s it! Balatro is now ready to be Modded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CLOSE THE GAME !&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have python3, pip3, MPocate/PLocate, 7zip-full, and the python requests library.&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;git clone https://github.com/Steamopollys/Steamodded.git &amp;amp;&amp;amp; cd Steamodded &amp;amp;&amp;amp; python3 steamodded_injector.py $(/common/Balatro/Balatro.exe | head -n 1)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wait for it to finish&lt;/li&gt; &#xA; &lt;li&gt;And that&#39;s it! Balatro is now ready to be Modded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mac&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CLOSE THE GAME !&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have python3, pip3, MPocate/PLocate, 7zip-full, and the python requests library.&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;git clone https://github.com/Steamopollys/Steamodded.git &amp;amp;&amp;amp; cd Steamodded &amp;amp;&amp;amp; python3 steamodded_injector.py&lt;/code&gt; and drag in the Balatro.exe before hitting enter!&lt;/li&gt; &#xA; &lt;li&gt;Wait for it to finish&lt;/li&gt; &#xA; &lt;li&gt;And that&#39;s it! Balatro is now ready to be Modded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to Install a Mod&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Balatro\Mods&lt;/code&gt; (or &lt;code&gt;%appdata%\Balatro\Mods&lt;/code&gt;) (Create the &#34;Mods&#34; directory if necessary)&lt;/li&gt; &#xA; &lt;li&gt;On Linux it is typically &lt;code&gt;/home/$USER/.local/share/Steam/steamapps/compatdata/2379780/pfx/drive_c/users/steamuser/AppData/Roaming/Balatro/Mods&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Put the mod into the directory (only the Mod File if there is only one file provided or all the files in a subdirectory)&lt;/li&gt; &#xA; &lt;li&gt;Launch the Game and enjoy!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; - Used by the Injector (A gpg pubkey signed repack is used as a better alternative has not been found yet. You can get the pubkey with &lt;code&gt;gpg --keyserver hkp://keys.openpgp.org --recv-keys 77317C3B9C73D835B9312414D5C9523EBB5CC15B&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/marsinator358/luajit-decompiler-v2&#34;&gt;luajit-decompiler-v2&lt;/a&gt; - Used by the Injector&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All the previous depencies are automaticaly downloaded during the injection.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/Nuitka/&#34;&gt;Nuitka&lt;/a&gt; - Used to compile the injector&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is open for contribution. Please, feel free to open a merge request to do so.&lt;/p&gt; &#xA;&lt;p&gt;Instruction to compile the injector are provided into is dedicated directory.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the GNU General Public License. This ensures that the software is free to use, modify, and distribute. For more details, see the LICENSE file in the repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dmmulroy/ts-error-translator.nvim</title>
    <updated>2024-02-29T01:32:47Z</updated>
    <id>tag:github.com,2024-02-29:/dmmulroy/ts-error-translator.nvim</id>
    <link href="https://github.com/dmmulroy/ts-error-translator.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ts-error-translator.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dmmulroy/ts-error-translator.nvim/assets/2755722/5fcd1f42-d941-491b-a89b-33ab3c2ed29b&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Neovim port of &lt;a href=&#34;https://github.com/mattpocock/ts-error-translator&#34;&gt;Matt Pocock&#39;s ts-error-translator for VSCode&lt;/a&gt; for turning messy and confusing TypeScript errors into plain English.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the plugin, use your preferred Neovim plugin manager.&lt;/p&gt; &#xA;&lt;h3&gt;lazy.nvim&lt;/h3&gt; &#xA;&lt;p&gt;To install the plugin using lazy.nvim, add the following to your plugin configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#39;dmmulroy/ts-error-translator.nvim&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Packer&lt;/h3&gt; &#xA;&lt;p&gt;To install the plugin using packer.nvim, add the following to your plugin configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use(&#39;dmmulroy/ts-error-translator.nvim&#39;,)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vim-Plug&lt;/h3&gt; &#xA;&lt;p&gt;To install the plugin using vim-plug, add the following to your plugin configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;dmmulroy/ts-error-translator.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;:PlugInstall&lt;/code&gt; to install the plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To set up the plugin, add the following line to where you manage your plugins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;ts-error-translator&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;ts-error-translator.nvim&lt;/code&gt; will attach itself to your &lt;code&gt;tsserver&lt;/code&gt; lsp and automatically start translating errors for you. The following is the default configuration for the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  auto_override_publish_diagnostics = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to override &lt;code&gt;tsserver&lt;/code&gt;&#39;s &lt;code&gt;textDocument/publishDiagnostics&lt;/code&gt; handler &lt;code&gt;manually, ts-error-translator.nvim&lt;/code&gt; exports a function, &lt;code&gt;require(&#39;ts-error-translator&#39;).translate_diagnostics&lt;/code&gt;, that you can then use to override your lsp handlers. Here is example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.handlers[&#34;textDocument/publishDiagnostics&#34;] = function(err, result, ctx, config)&#xA;  require(&#34;ts-error-translator&#34;).translate_diagnostics(err, result, ctx, config)&#xA;  vim.lsp.diagnostic.on_publish_diagnostics(err, result, ctx, config)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;p&gt;If you like this plugin and find it useful, you might also like my plugin, &lt;a href=&#34;https://github.com/dmmulroy/tsc.nvim&#34;&gt;tsc.nvim&lt;/a&gt;, a Neovim plugin for seamless, asynchronous project-wide TypeScript type-checking using the TypeScript compiler (tsc)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open issues or submit pull requests if you encounter any bugs or have suggestions for improvements. Your contributions are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is released under the MIT License. See the &lt;a href=&#34;https://raw.githubusercontent.com/dmmulroy/ts-error-translator.nvim/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;A special thanks to &lt;a href=&#34;https://github.com/mattpocock&#34;&gt;Matt Pocock&lt;/a&gt; for creating the &lt;code&gt;ts-error-translator&lt;/code&gt;, providing the foundation for this project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xiaorouji/openwrt-passwall</title>
    <updated>2024-02-29T01:32:47Z</updated>
    <id>tag:github.com,2024-02-29:/xiaorouji/openwrt-passwall</id>
    <link href="https://github.com/xiaorouji/openwrt-passwall" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>