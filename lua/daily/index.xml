<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-25T01:31:38Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Xilophinum/posters</title>
    <updated>2024-04-25T01:31:38Z</updated>
    <id>tag:github.com,2024-04-25:/Xilophinum/posters</id>
    <link href="https://github.com/Xilophinum/posters" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Poster system for FiveM using DUIs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FiveM Posters&lt;/h1&gt; &#xA;&lt;h2&gt;A FiveM Poster system, designed for placing images on walls, all you need is a URL!&lt;/h2&gt; &#xA;&lt;h2&gt;Video Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Xilophinum/posters/assets/44152393/9db2ec16-0b3d-43bd-a2b2-4ab00acfbe48&#34;&gt;https://github.com/Xilophinum/posters/assets/44152393/9db2ec16-0b3d-43bd-a2b2-4ab00acfbe48&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;p&gt;This is a &#34;poster&#34; system designed to allow people to create their own posters and draw them on any vertically flat surface. There are already a few of these systems out there, but I wanted to share a version that is free, and only requires really one dependancy (ox_lib). This has QBCore code with ox_inventory items, feel free to fork and make your own framework/inventory version, I will not do so for you!&lt;/p&gt; &#xA;&lt;p&gt;This version does not require you to input any image size data, it is automatically captured by the images url. All you need is a valid image URL. Thats it. The DUI will be created based on the images actual size.&lt;/p&gt; &#xA;&lt;p&gt;This system is great for &#34;graffiti&#34; tagging, advertising your player owned business, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ox_lib&lt;/li&gt; &#xA; &lt;li&gt;QBCore&lt;/li&gt; &#xA; &lt;li&gt;ox_inventory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As I stated above, feel free to rework this how you would like with your own systems.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>andrewferrier/debugprint.nvim</title>
    <updated>2024-04-25T01:31:38Z</updated>
    <id>tag:github.com,2024-04-25:/andrewferrier/debugprint.nvim</id>
    <link href="https://github.com/andrewferrier/debugprint.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Debugging in NeoVim the print() way!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;debugprint.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/andrewferrier/debugprint.nvim/actions/workflows/tests.yaml/badge.svg?sanitize=true&#34; alt=&#34;Test status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;debugprint&lt;/code&gt; is a NeoVim plugin that simplifies debugging for those who prefer a low-tech approach. Instead of using a sophisticated debugger like &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;, some people prefer using a &#39;print&#39; statement to trace the output during execution. With &lt;code&gt;debugprint&lt;/code&gt;, you can insert &#39;print&#39; statements, with debug information pre-populated, relevant to the language you&#39;re editing. These statements include reference information for quick output navigation and the ability to output variable values.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;debugprint&lt;/code&gt; supports 30 filetypes/programming languages out-of-the-box, including Python, JavaScript/TypeScript, Java, C/C++ and more. See &lt;a href=&#34;https://raw.githubusercontent.com/andrewferrier/debugprint.nvim/main/#feature-comparison-with-other-plugins&#34;&gt;the comparison table&lt;/a&gt; for the full list. It can also be extended to support other languages.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;debugprint&lt;/code&gt; is inspired by &lt;a href=&#34;https://github.com/bergercookie/vim-debugstring&#34;&gt;vim-debugstring&lt;/a&gt;, but is updated and refreshed for the NeoVim generation. It has these features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It includes reference information in each &#39;print line&#39; such as file names, line numbers, a monotonic counter, and snippets of other lines to make it easier to cross-reference them in output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It can output the value of variables (or in some cases, expressions).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It &lt;a href=&#34;https://jovicailic.org/2018/03/vim-the-dot-command/&#34;&gt;dot-repeats&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It can detect a variable name under the cursor if it&#39;s a supported Treesitter-based language, or will prompt for the variable name with a sensible default if not.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It knows which filetype you are working with when embedded inside another filetype, e.g. JavaScript-in-HTML, using Treesitter magic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In addition to normal mode, it provides keymappings for visual and operator-pending modes, so you can select variables visually and using motions respectively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It provides commands to delete all debugging lines added to the current buffer as well as comment/uncomment those lines.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It can optionally move to the inserted line (or not).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can add support for languages it doesn&#39;t support out of the box.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/andrewferrier/debugprint.nvim/main/LICENSE.txt&#34;&gt;MIT Licensed&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;video src=&#34;https://github.com/andrewferrier/debugprint.nvim/assets/107015/e1a8b93b-0c8f-4f02-86e8-cbe1d476940c&#34; type=&#34;video/mp4&#34;&gt;&lt;/video&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requires NeoVim 0.8+.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example for &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;    &#34;andrewferrier/debugprint.nvim&#34;,&#xA;    opts = { … },&#xA;    dependencies = {&#xA;        &#34;echasnovski/mini.nvim&#34;, -- Needed to enable :ToggleCommentDebugPrints for NeoVim &amp;lt;= 0.9&#xA;        &#34;nvim-treesitter/nvim-treesitter&#34; -- Needed to enable treesitter for NeoVim 0.8&#xA;    },&#xA;    -- Remove the following line to use development versions,&#xA;    -- not just the formal releases&#xA;    version = &#34;*&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example for &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;code&gt;packer.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup(function(use)&#xA;    …&#xA;    use({&#xA;        &#34;andrewferrier/debugprint.nvim&#34;,&#xA;        config = function()&#xA;            opts = { … }&#xA;            require(&#34;debugprint&#34;).setup(opts)&#xA;        end,&#xA;        requires = {&#xA;            &#34;echasnovski/mini.nvim&#34;, -- Needed to enable :ToggleCommentDebugPrints for NeoVim &amp;lt;= 0.9&#xA;            &#34;nvim-treesitter/nvim-treesitter&#34; -- Needed to enable treesitter for NeoVim 0.8&#xA;        }&#xA;    })&#xA;    …&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The sections below detail the allowed options that can appear in the &lt;code&gt;opts&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;Please subscribe to &lt;a href=&#34;https://github.com/andrewferrier/debugprint.nvim/issues/25&#34;&gt;this GitHub issue&lt;/a&gt; to be notified of any breaking changes to &lt;code&gt;debugprint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Keymappings and Commands&lt;/h2&gt; &#xA;&lt;p&gt;By default, the plugin will create some keymappings and commands for use &#39;out of the box&#39;. There are also some function invocations which are not mapped to any keymappings or commands by default, but could be. This is all shown in the following table.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;Default Key / Cmd&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Above/Below Line&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Plain debug&lt;/td&gt; &#xA;   &lt;td&gt;Below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?P&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Plain debug&lt;/td&gt; &#xA;   &lt;td&gt;Above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?v&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Variable debug&lt;/td&gt; &#xA;   &lt;td&gt;Below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?V&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Variable debug&lt;/td&gt; &#xA;   &lt;td&gt;Above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;Variable debug (always prompt for variable)&lt;/td&gt; &#xA;   &lt;td&gt;Below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;Variable debug (always prompt for variable)&lt;/td&gt; &#xA;   &lt;td&gt;Above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;Delete debug lines in buffer&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;Comment/uncomment debug lines in buffer&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visual&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?v&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Variable debug&lt;/td&gt; &#xA;   &lt;td&gt;Below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visual&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?V&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Variable debug&lt;/td&gt; &#xA;   &lt;td&gt;Above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Op-pending&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?o&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Variable debug&lt;/td&gt; &#xA;   &lt;td&gt;Below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Op-pending&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?O&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Variable debug&lt;/td&gt; &#xA;   &lt;td&gt;Above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Command&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:DeleteDebugPrints&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete debug lines in buffer&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Command&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:ToggleCommentDebugPrints&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comment/uncomment debug lines in buffer&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The keys and commands outlined above can be specifically overridden using the &lt;code&gt;keymaps&lt;/code&gt; and &lt;code&gt;commands&lt;/code&gt; objects inside the &lt;code&gt;opts&lt;/code&gt; object used above during configuration of debugprint. For example, if configuring via &lt;code&gt;lazy.nvim&lt;/code&gt;, it might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;    &#34;andrewferrier/debugprint.nvim&#34;,&#xA;    opts = {&#xA;        keymaps = {&#xA;            normal = {&#xA;                plain_below = &#34;g?p&#34;,&#xA;                plain_above = &#34;g?P&#34;,&#xA;                variable_below = &#34;g?v&#34;,&#xA;                variable_above = &#34;g?V&#34;,&#xA;                variable_below_alwaysprompt = nil,&#xA;                variable_above_alwaysprompt = nil,&#xA;                textobj_below = &#34;g?o&#34;,&#xA;                textobj_above = &#34;g?O&#34;,&#xA;                toggle_comment_debug_prints = nil,&#xA;                delete_debug_prints = nil,&#xA;            },&#xA;            visual = {&#xA;                variable_below = &#34;g?v&#34;,&#xA;                variable_above = &#34;g?V&#34;,&#xA;            },&#xA;        },&#xA;        commands = {&#xA;            toggle_comment_debug_prints = &#34;ToggleCommentDebugPrints&#34;,&#xA;            delete_debug_prints = &#34;DeleteDebugPrints&#34;,&#xA;        },&#xA;    },&#xA;    -- The &#39;keys&#39; and &#39;cmds&#39; sections of this configuration are only needed if&#xA;    -- you want to take advantage of `lazy.nvim` lazy-loading.&#xA;    keys = {&#xA;        { &#34;g?p&#34;, mode = &#39;n&#39; },&#xA;        { &#34;g?P&#34;, mode = &#39;n&#39; },&#xA;        { &#34;g?v&#34;, mode = &#39;n&#39; },&#xA;        { &#34;g?V&#34;, mode = &#39;n&#39; },&#xA;        { &#34;g?o&#34;, mode = &#39;n&#39; },&#xA;        { &#34;g?O&#34;, mode = &#39;n&#39; },&#xA;        { &#34;g?v&#34;, mode = &#39;x&#39; },&#xA;        { &#34;g?V&#34;, mode = &#39;x&#39; },&#xA;    },&#xA;    cmd = {&#xA;        &#34;ToggleCommentDebugPrints&#34;,&#xA;        &#34;DeleteDebugPrints&#34;,&#xA;    },&#xA;    version = &#34;*&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You only need to include the keys / commands which you wish to override, others will default as shown above. Setting any key or command to &lt;code&gt;nil&lt;/code&gt; will skip it.&lt;/p&gt; &#xA;&lt;p&gt;The default keymappings are chosen specifically because ordinarily in NeoVim they are used to convert sections to ROT-13, which most folks don&#39;t use.&lt;/p&gt; &#xA;&lt;h2&gt;Mapping Deprecation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: as of version 2.0.0, the old mechanism of configuring keymaps/commands which specifically allowed for mapping directly to &lt;code&gt;require(&#39;debugprint&#39;).debugprint(...)&lt;/code&gt; is no longer officially supported or documented. This is primarily because of confusion which arose over how to do this mapping. Existing mappings performed this way are likely to continue to work for some time. You should, however, migrate over to the new method outlined above. If this doesn&#39;t give you the flexibility to map how you wish for some reason, please open an &lt;a href=&#34;https://github.com/andrewferrier/debugprint.nvim/issues/new&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other Options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;debugprint&lt;/code&gt; supports the following options in its global &lt;code&gt;opts&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;move_to_debugline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When adding a debug line, moves the cursor to that line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;display_counter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to display/include the monotonically increasing counter in each debug message&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;display_snippet&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to include a snippet of the line above/below in plain debug lines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;filetypes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See below&lt;/td&gt; &#xA;   &lt;td&gt;Custom filetypes - see below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore_treesitter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Never use treesitter to find a variable under the cursor, always prompt for it - overrides the same setting on &lt;code&gt;debugprint()&lt;/code&gt; if set to true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;print_tag&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;DEBUGPRINT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The string inserted into each print statement, which can be used to uniquely identify statements inserted by &lt;code&gt;debugprint&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Add Custom Filetypes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: If you work out a configuration for a filetype not supported out-of-the-box, it would be appreciated if you can open an &lt;a href=&#34;https://github.com/andrewferrier/debugprint.nvim/issues/new&#34;&gt;issue&lt;/a&gt; to have it supported out-of-the-box in &lt;code&gt;debugprint&lt;/code&gt; so others can benefit. Similarly, if you spot any issues with, or improvements to, the language configurations out-of-the-box, please open an issue also.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;debugprint&lt;/code&gt; doesn&#39;t support your filetype, you can add it as a custom filetype in one of two ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;code&gt;opts.filetypes&lt;/code&gt; object in &lt;code&gt;setup()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using the &lt;code&gt;require(&#39;debugprint&#39;).add_custom_filetypes()&lt;/code&gt; method (designed for use from &lt;code&gt;ftplugin/&lt;/code&gt; directories, etc.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In either case, the format is the same. For example, if adding via &lt;code&gt;setup()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local my_fileformat = {&#xA;    left = &#39;print &#34;&#39;,&#xA;    left_var = &#39;print &#34;&#39;, -- `left_var` is optional, for &#39;variable&#39; lines only; `left` will be used if it&#39;s not present&#xA;    right = &#39;&#34;&#39;,&#xA;    mid_var = &#34;${&#34;,&#xA;    right_var = &#39;}&#34;&#39;,&#xA;}&#xA;&#xA;require(&#39;debugprint&#39;).setup({ filetypes = { [&#34;filetype&#34;] = my_fileformat, [&#34;another_filetype&#34;] = another_of_my_fileformats, ... }})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or &lt;code&gt;add_custom_filetypes()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;debugprint&#39;).add_custom_filetypes({ my_fileformat, ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your new file format will be &lt;em&gt;merged&lt;/em&gt; in with those that already exist. If you pass in one that already exists, your configuration will override the built-in configuration.&lt;/p&gt; &#xA;&lt;p&gt;The keys in the configuration are used like this:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Debug line type&lt;/th&gt; &#xA;   &lt;th&gt;Default keys&lt;/th&gt; &#xA;   &lt;th&gt;How debug line is constructed&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Plain debug line&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?p&lt;/code&gt;/&lt;code&gt;g?P&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;my_fileformat.left .. &#34;auto-gen DEBUG string&#34; .. my_fileformat.right&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Variable debug line&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?v&lt;/code&gt;/&lt;code&gt;g?V&lt;/code&gt;/&lt;code&gt;g?o&lt;/code&gt;/&lt;code&gt;g?O&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;my_fileformat.left_var (or my_fileformat.left) .. &#34;auto-gen DEBUG string, variable=&#34; .. my_file_format.mid_var .. variable .. my_fileformat.right_var&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If it helps to understand these, you can look at the built-in configurations in &lt;a href=&#34;https://raw.githubusercontent.com/andrewferrier/debugprint.nvim/main/lua/debugprint/filetypes.lua&#34;&gt;filetypes.lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feature Comparison with Other Plugins&lt;/h2&gt; &#xA;&lt;p&gt;(This table is quite wide, you may need to scroll horizontally)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;debugprint.nvim&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/bergercookie/vim-debugstring&#34;&gt;vim-debugstring&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/rareitems/printer.nvim&#34;&gt;printer.nvim&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/ThePrimeagen/refactoring.nvim&#34;&gt;refactoring.nvim&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/meain/vim-printer&#34;&gt;vim-printer&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/mptre/vim-printf&#34;&gt;vim-printf&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/gaelph/logsitter.nvim&#34;&gt;logsitter&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Print plain debug lines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Print variables using current word/heuristic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Print variables using treesitter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Print variables/expressions using prompts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Print variables using motions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Print variables using visual mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Print debug lines above/below current line&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(via global config)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Supports &lt;a href=&#34;https://www.vikasraj.dev/blog/vim-dot-repeat&#34;&gt;dot-repeat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Can control whether to move to inserted lines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Command to clean up all debug lines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Can put debugprint text into default register&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Built-in support for:&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;arduino&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bash/sh&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CMake&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dart&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DOS/Windows Batch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fish&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fortran&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Golang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haskell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Javascript/Typescript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lua&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GNU Make&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Perl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Powershell/ps1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VimL (vimscript)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zsh&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Add custom filetypes (doced/supported)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Customizable callback formatter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Implemented in&lt;/td&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;VimL&lt;/td&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;VimL&lt;/td&gt; &#xA;   &lt;td&gt;VimL&lt;/td&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>