<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-12T01:36:57Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phelipetls/jsonpath.nvim</title>
    <updated>2022-10-12T01:36:57Z</updated>
    <id>tag:github.com,2022-10-12:/phelipetls/jsonpath.nvim</id>
    <link href="https://github.com/phelipetls/jsonpath.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Neovim plugin to help you access JSON values, powered by treesitter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a Neovim-only plugin containing a function to return a path to access the value under the cursor by using treesitter. It may help you understand how to access even deeply nested values in JSON files.&lt;/p&gt; &#xA;&lt;p&gt;A &#34;JSON path&#34; is a &lt;a href=&#34;https://github.com/stedolan/jq&#34;&gt;jq&lt;/a&gt;-like expression, such as &lt;code&gt;.&lt;/code&gt; for root, &lt;code&gt;.[0]&lt;/code&gt; for the first array item, &lt;code&gt;.name&lt;/code&gt; for the property &#34;name&#34; of an object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/39670535/194754315-57601183-fd1e-4633-982b-66c0c77fea29.webm&#34;&gt;jsonpath-nvim-demo.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Colorscheme is &lt;a href=&#34;https://github.com/bluz71/vim-moonfly-colors&#34;&gt;vim-moonfly-colors&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter/&#34;&gt;nvim-treesitter&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; in ~/after/ftplugin/json.vim&#xA;&#xA;&#34; show json path in the winbar&#xA;if exists(&#39;+winbar&#39;)&#xA;  setlocal winbar=%{luaeval(&#39;require\&#34;jsonpath\&#34;.get()&#39;)}&#xA;endif&#xA;&#xA;&#34; send json path to clipboard&#xA;nnoremap &amp;lt;buffer&amp;gt; y&amp;lt;C-p&amp;gt; :let @+=luaeval(&#39;require&#34;jsonpath&#34;.get()&#39;)&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ibhagwan/smartyank.nvim</title>
    <updated>2022-10-12T01:36:57Z</updated>
    <id>tag:github.com,2022-10-12:/ibhagwan/smartyank.nvim</id>
    <link href="https://github.com/ibhagwan/smartyank.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;smartyank.nvim&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim-0.7-57A143?style=flat-square&amp;amp;logo=neovim&#34; alt=&#34;Neovim version&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/smartyank.nvim/master/#what-is-smartyank&#34;&gt;What is SmartYank&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/smartyank.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/smartyank.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/smartyank.nvim/master/tmux&#34;&gt;Tmux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;The copy-pasta rabbit hole&lt;/h2&gt; &#xA;&lt;p&gt;Have you ever tried to paste something from the clipboard while using neovim and realized this wasn&#39;t the text you wanted to paste?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If the answer is yes this plugin might be for you&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/smartyank.nvim/master/#what-is-smartyank&#34;&gt;&lt;strong&gt;Take me directly to the juice&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Background&lt;/h3&gt; &#xA;&lt;p&gt;When starting to use vim/neovim I found the whole copy-pasta process a bit counter intuitive, coming from systems where there&#39;s just one clipboard managed by &lt;code&gt;&amp;lt;Cmd-c&amp;gt;|&amp;lt;Cmd-v&amp;gt;&lt;/code&gt; getting used to registers and the way the &lt;code&gt;clipboard&lt;/code&gt; option works took some time.&lt;/p&gt; &#xA;&lt;p&gt;At first I was mad at neovim for polluting my clipboard every time I deleted or changed a text (using &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; or eve &lt;code&gt;s&lt;/code&gt;) so I used the &#34;blackhole&#34; mappings in order to disable that functionality via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap d &#34;_d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But then I realized I actually wanted some of the deleted texts and I was also &#34;missing out&#34; on the &#34;true way of the vimmer&#34; so I decided to use blackhole mappings only with the &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt; key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;leader&amp;gt;d &#34;_d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above was much better, but this added to my mental overhead of having to think before each delete/change operation if I wanted to use the default operator or my soup&#39;d up leader-prefix version.&lt;/p&gt; &#xA;&lt;p&gt;In addition I also wanted separation between neovim and the system clipboard so I started using &lt;code&gt;:set clipboard=&#34;&#34;&lt;/code&gt; which introduced yet another sequence/keybind I needed to press in order to copy the text from the yank register &lt;code&gt;&#34;0&lt;/code&gt; to the clipboard.&lt;/p&gt; &#xA;&lt;p&gt;Then came copy-pasting over SSH... that required &lt;strong&gt;yet an additional&lt;/strong&gt; keybind/workflow of having to yank the text using OSC52 (using the wonderful &lt;a href=&#34;https://github.com/ojroques/vim-oscyank&#34;&gt;&lt;code&gt;ojroques/vim-oscyank&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;I needed a better solution with the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No changes to default neovim key mappings&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Minimum clipboard/register pollution: only copy to clipboard when I intent on doing so (i.e. do not overwrite my clipboard on neovim&#39;s &lt;code&gt;dd&lt;/code&gt; and similar operations)&lt;/li&gt; &#xA; &lt;li&gt;Copying over ssh should be seamless, I don&#39;t need to care or worry whether I&#39;m local or remote, with or without tmux.&lt;/li&gt; &#xA; &lt;li&gt;Easily accessible clipboard history when using neovim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enter &#34;SmartYank&#34;...&lt;/p&gt; &#xA;&lt;h2&gt;What is SmartYank&lt;/h2&gt; &#xA;&lt;p&gt;SmartYank is an opinionated (yet customizable) yank, it utilizes the &lt;code&gt;TextYankPost&lt;/code&gt; event to detect intentional yank operations (by testing &lt;code&gt;vim.v.operator&lt;/code&gt;) and:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Highlight yanked text&lt;/li&gt; &#xA; &lt;li&gt;Copy yanked text to system clipboard (regardless of &lt;code&gt;clipboard&lt;/code&gt; setting)&lt;/li&gt; &#xA; &lt;li&gt;If tmux is available, copy to a tmux clipboard buffer (enables history)&lt;/li&gt; &#xA; &lt;li&gt;If ssh session is detected, use OSC52 to copy to the terminal host clipboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;ibhagwan/smartyank.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#39;ibhagwan/smartyank.nvim&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires neovim &amp;gt; &lt;code&gt;0.7&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Calling &lt;code&gt;require&#39;smartyank&#39;.setup {}&lt;/code&gt; is optional&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Configuring additional options can be done via the &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;smartyank&#39;).setup {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if using a &lt;code&gt;.vim&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;smartyank&#39;).setup{&#xA;  ...&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Options&lt;/h3&gt; &#xA;&lt;p&gt;Below is a list of all default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;smartyank&#39;).setup {&#xA;  highlight = {&#xA;    enabled = true,         -- highlight yanked text&#xA;    higroup = &#34;IncSearch&#34;,  -- highlight group of yanked text&#xA;    timeout = 2000,         -- timeout for clearing the highlight&#xA;  },&#xA;  clipboard = {&#xA;    enabled = true&#xA;  },&#xA;  tmux = {&#xA;    enabled = true,&#xA;    -- remove `-w` to disable copy to host client&#39;s clipboard&#xA;    cmd = { &#39;tmux&#39;, &#39;set-buffer&#39;, &#39;-w&#39; }&#xA;  },&#xA;  osc52 = {&#xA;    enabled = true,&#xA;    ssh_only = true,        -- false to OSC52 yank also in local sessions&#xA;    silent = false,         -- true to disable the &#34;n chars copied&#34; echo&#xA;    echo_hl = &#34;Directory&#34;,  -- highlight group of the OSC52 echo message&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tmux&lt;/h2&gt; &#xA;&lt;p&gt;One (of the many) advantages of using &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/a&gt; is the ability to view the yank history by using &lt;code&gt;&amp;lt;prefix&amp;gt;#&lt;/code&gt; (by default &lt;code&gt;&amp;lt;C-a&amp;gt;#&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua&#34;&gt;&lt;code&gt;fzf-lua&lt;/code&gt;&lt;/a&gt; &lt;code&gt;tmux_buffers&lt;/code&gt; we can fuzzy find the tmux paste buffers and by pressing &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; copy the current selection into the &#34;unnamed&#34; register for easy pasting with &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;P&lt;/code&gt; (similar functionality to what is achieved using &lt;a href=&#34;https://github.com/AckslD/nvim-neoclip.lua&#34;&gt;&lt;code&gt;nvim-neoclip.lua&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ibhagwan/smartyank.nvim/raw/master/fzf-lua-tmux.png&#34; alt=&#34;fzf-lua-tmux&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>evil-morfar/RCLootCouncil2</title>
    <updated>2022-10-12T01:36:57Z</updated>
    <id>tag:github.com,2022-10-12:/evil-morfar/RCLootCouncil2</id>
    <link href="https://github.com/evil-morfar/RCLootCouncil2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RCLootCouncil - addon for World of Warcraft&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.curseforge.com/wow/addons/rclootcouncil&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/evil-morfar/RCLootCouncil2?include_prereleases&#34; alt=&#34;GitHub release (latest by date including pre-releases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://discord.rclootcouncil.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/427445230870986752?color=%237289DA&amp;amp;label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://patreon.com/rclootcouncil&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-donate-orange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;RCLootCouncil&lt;/h1&gt; &#xA;&lt;p&gt;The latest release is available at &lt;a href=&#34;https://www.curseforge.com/wow/addons/rclootcouncil&#34;&gt;Curse&lt;/a&gt; where you&#39;ll also find a functionality description. A Wiki is available here on GitHub.&lt;/p&gt; &#xA;&lt;h3&gt;Official Modules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RCLootCouncil Classic &lt;a href=&#34;https://www.curseforge.com/wow/addons/rclootcouncil-classic/&#34;&gt;Curse&lt;/a&gt; | &lt;a href=&#34;https://github.com/evil-morfar/RCLootCouncil_Classic&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ExtraUtilities &lt;a href=&#34;https://www.curseforge.com/wow/addons/rclootcouncil-extrautilities&#34;&gt;Curse&lt;/a&gt; | &lt;a href=&#34;https://github.com/evil-morfar/RCLootCouncil_ExtraUtilities&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;GroupGear &lt;a href=&#34;https://www.curseforge.com/wow/addons/rclootcouncil-groupgear&#34;&gt;Curse&lt;/a&gt; | &lt;a href=&#34;https://github.com/evil-morfar/RCLootCouncil_GroupGear&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Modules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EPGP &lt;a href=&#34;https://mods.curse.com/addons/wow/269161-rclootcouncil-epgp&#34;&gt;Curse&lt;/a&gt; | &lt;a href=&#34;https://github.com/SafeteeWoW/RCLootCouncil_EPGP&#34;&gt;GitHub&lt;/a&gt; by safetee.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Development&lt;/h4&gt; &#xA;&lt;p&gt;RCLootCouncil is being developed using the Git Flow branch structure. All new code should have .specs associated with it when feasible.&lt;/p&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/evil-morfar/RCLootCouncil2/master/.specs/README.md&#34;&gt;RCLootCouncil Testing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Bugtracking&lt;/h4&gt; &#xA;&lt;p&gt;Preferred on GitHub if possible, otherwise on &lt;a href=&#34;https://www.curseforge.com/wow/addons/rclootcouncil/issues&#34;&gt;Curse&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>