<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-30T01:36:01Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kevinhwang91/promise-async</title>
    <updated>2023-11-30T01:36:01Z</updated>
    <id>tag:github.com,2023-11-30:/kevinhwang91/promise-async</id>
    <link href="https://github.com/kevinhwang91/promise-async" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Promise &amp; Async in Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;promise-async&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kevinhwang91/promise-async/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;GitHub Test&#34;&gt; &lt;img src=&#34;https://github.com/kevinhwang91/promise-async/workflows/Lint/badge.svg?sanitize=true&#34; alt=&#34;GitHub Lint&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goal of promise-async is to port &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promise&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&#34;&gt;Async&lt;/a&gt; from JavaScript to Lua.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A value returned by async function in JavaScript is actually a Promise Object. It&#39;s incomplete and inflexible for using an async function wrapped by bare coroutine without Promise in almost Lua implementation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#demonstration&#34;&gt;Demonstration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#script&#34;&gt;Script&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#demo.lua&#34;&gt;demo.lua&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#demo.js&#34;&gt;demo.js&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#as-a-plugin-for-neovim-platform&#34;&gt;As a plugin for Neovim platform&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#as-a-library-from-luarocks&#34;&gt;As a library from Luarocks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#async&#34;&gt;async&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#development&#34;&gt;Development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#neovim-tips&#34;&gt;Neovim tips&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#run-tests&#34;&gt;Run tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#improve-completion-experience&#34;&gt;Improve completion experience&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#customize-eventloop&#34;&gt;Customize EventLoop&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#credit&#34;&gt;Credit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#feedback&#34;&gt;Feedback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API is similar to JavaScript&#39;s&lt;/li&gt; &#xA; &lt;li&gt;Customize EventLoop in any platforms&lt;/li&gt; &#xA; &lt;li&gt;Support Lua 5.1-5.4 and LuaJIT with an EventLoop module&lt;/li&gt; &#xA; &lt;li&gt;Support Neovim platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demonstration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/17562139/169118448-9468909b-dbde-4dde-9308-ffe71abb24cd.mp4&#34;&gt;https://user-images.githubusercontent.com/17562139/169118448-9468909b-dbde-4dde-9308-ffe71abb24cd.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Script&lt;/h3&gt; &#xA;&lt;h4&gt;demo.lua&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kevinhwang91/promise-async/raw/3f6dcb2f0f546e8be7e170785f07f71ef6afab34/examples/demo.lua#L17-L82&#34;&gt;https://github.com/kevinhwang91/promise-async/blob/3f6dcb2f0f546e8be7e170785f07f71ef6afab34/examples/demo.lua#L17-L82&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;demo.js&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kevinhwang91/promise-async/raw/3f6dcb2f0f546e8be7e170785f07f71ef6afab34/examples/demo.js#L1-L58&#34;&gt;https://github.com/kevinhwang91/promise-async/blob/3f6dcb2f0f546e8be7e170785f07f71ef6afab34/examples/demo.js#L1-L58&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lua 5.1 or latter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/luvit/luv&#34;&gt;Luv&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Luv is a default EventLoop for promise-async. It doesn&#39;t mean promise-async must require it. In fact, promise-async require a general EventLoop module which Luv like.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;As a plugin for Neovim platform&lt;/h4&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As a normal plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#39;kevinhwang91/promise-async&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As a Luarocks plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use_rocks {&#39;promise-async&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;As a library from Luarocks&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;luarocks install promise-async&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;luarocks install luv&lt;/code&gt; or implement an EventLoop &lt;a href=&#34;https://github.com/kevinhwang91/promise-async/raw/main/typings/loop.lua&#34;&gt;interface&lt;/a&gt; to adapt your platform&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;promise-async&#39;s API is based on &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;MDN-Promise&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/typings/promise.lua&#34;&gt;typings/promise.lua&lt;/a&gt; is the typings with documentation of Promise class.&lt;/p&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;p&gt;Summary up the API different from JavaScript.&lt;/p&gt; &#xA;&lt;!-- markdownlint-disable MD013 --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;JavaScript&lt;/th&gt; &#xA;   &lt;th&gt;Lua&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;new Promise&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise:new&lt;/code&gt;/&lt;code&gt;Promise&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.then&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise:thenCall&lt;/code&gt;, &lt;code&gt;then&lt;/code&gt; is language keyword&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.catch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise:catch&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.finally&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise:finally&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.resolve&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.resolve&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.reject&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.reject&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.all&lt;/code&gt;: &lt;code&gt;Symbol.iterator&lt;/code&gt; as iterator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.all&lt;/code&gt;: &lt;code&gt;pairs&lt;/code&gt; as iterator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.allSettled&lt;/code&gt;: &lt;code&gt;Symbol.iterator&lt;/code&gt; as iterator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.allSettled&lt;/code&gt;: &lt;code&gt;pairs&lt;/code&gt; as iterator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.any&lt;/code&gt;: &lt;code&gt;Symbol.iterator&lt;/code&gt; as iterator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.any&lt;/code&gt;: &lt;code&gt;pairs&lt;/code&gt; as iterator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.race&lt;/code&gt;: &lt;code&gt;Symbol.iterator&lt;/code&gt; as iterator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.race&lt;/code&gt;: &lt;code&gt;pairs&lt;/code&gt; as iterator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;async&lt;/code&gt;: as keyword at the start of a function&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Async&lt;/code&gt;/&lt;code&gt;Async.sync&lt;/code&gt;: as a surrounding function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;await&lt;/code&gt;: as keyword&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;await&lt;/code&gt;/&lt;code&gt;Async.wait&lt;/code&gt; as a function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-enable MD013 --&gt; &#xA;&lt;h3&gt;async&lt;/h3&gt; &#xA;&lt;p&gt;The environment in &lt;code&gt;Async.sync&lt;/code&gt; function have been injected some new functions for compatibility or enhancement:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;await&lt;/code&gt;: A reference of &lt;code&gt;Async.wait&lt;/code&gt; function;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pcall&lt;/code&gt;: Be compatible with LuaJIT;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xpcall&lt;/code&gt;: Be compatible with LuaJIT;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;async&lt;/code&gt; in JavaScript return Promise object only with single result, but may carry multiple results in Lua. The resolved result of Promise object return by &lt;code&gt;async&lt;/code&gt; function will be packed into a table via &lt;code&gt;{...}&lt;/code&gt;. However, the result handled by &lt;code&gt;await&lt;/code&gt; will be unpacked and return multiple values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local async = require(&#39;async&#39;)&#xA;&#xA;local function f()&#xA;    return 1, 2, 3&#xA;end&#xA;&#xA;-- multiple results are packed into resolved result in Promise&#xA;async(f):thenCall(function(v)&#xA;    print(v[1], v[2], v[3]) -- output: 1 2 3&#xA;end)&#xA;&#xA;-- results returned by `await`&#xA;async(function()&#xA;    local v1, v2, v3 = await(async(f))&#xA;    print(v1, v2, v3) -- output: 1 2 3&#xA;end)&#xA;&#xA;uv.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Neovim tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Promise.resolve():thenCall(cb)&lt;/code&gt; is almost equivalent to &lt;code&gt;vim.schedule(cb)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run tests&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;make test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Improve completion experience&lt;/h3&gt; &#xA;&lt;p&gt;Following &lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/typings/README.md&#34;&gt;typings/README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Customize EventLoop&lt;/h3&gt; &#xA;&lt;p&gt;TODO, refer to &lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/lua/promise-async/loop.lua&#34;&gt;loop.lua&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promise&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&#34;&gt;Async&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/promises-aplus/promises-tests&#34;&gt;promises-tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/then/promise&#34;&gt;then/promise&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.promisejs.org&#34;&gt;promisejs.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick&#34;&gt;event-loop-timers-and-nexttick&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you get an issue or come up with an awesome idea, don&#39;t hesitate to open an issue in github.&lt;/li&gt; &#xA; &lt;li&gt;If you think this plugin is useful or cool, consider rewarding it a star.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is licensed under a BSD-3-clause license. See &lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/promise-async/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Arius-Development/ars_ambulancejob</title>
    <updated>2023-11-30T01:36:01Z</updated>
    <id>tag:github.com,2023-11-30:/Arius-Development/ars_ambulancejob</id>
    <link href="https://github.com/Arius-Development/ars_ambulancejob" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Advanced ambulancejob system for fivem&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/Arius-Development/ars_ambulancejob/assets/70983185/5cbe1ee4-b75c-4134-87ee-99fb4c651bf8&#34; alt=&#34;06&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Experience the intensity of emergency response in Arius Ambulance Job &lt;span&gt;🚑&lt;/span&gt;! Transport patients, deliver critical care, and immerse yourself in hyper-realistic roleplay and more. Ready to be the hero on the front lines?&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🔄&lt;/span&gt; &lt;strong&gt;Frameworks&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ESX&lt;/li&gt; &#xA; &lt;li&gt;QBCORE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;🎯&lt;/span&gt; &lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ox_inventory&lt;/li&gt; &#xA; &lt;li&gt;ox_target&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;📢&lt;/span&gt; &lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create hospitals without any limitations.&lt;/li&gt; &#xA; &lt;li&gt;Integrated death handling system.&lt;/li&gt; &#xA; &lt;li&gt;Internal dispatch system for hospital service calls.&lt;/li&gt; &#xA; &lt;li&gt;Realistic injury system.&lt;/li&gt; &#xA; &lt;li&gt;Service garages for all your vehicle needs.&lt;/li&gt; &#xA; &lt;li&gt;Convenient storage stashes for item management.&lt;/li&gt; &#xA; &lt;li&gt;Private / Public shops.&lt;/li&gt; &#xA; &lt;li&gt;Easy access to the Boss Menu.&lt;/li&gt; &#xA; &lt;li&gt;Cloakrooms for changing into work clothes.&lt;/li&gt; &#xA; &lt;li&gt;Usable stretchers for transporting injured players.&lt;/li&gt; &#xA; &lt;li&gt;A variety of items for treating injuries.&lt;/li&gt; &#xA; &lt;li&gt;NPC paramedics to heal players.&lt;/li&gt; &#xA; &lt;li&gt;A handy medical bag to store emergency items.&lt;/li&gt; &#xA; &lt;li&gt;Synchronized revive animation.&lt;/li&gt; &#xA; &lt;li&gt;A quick /911 command for emergency calls.&lt;/li&gt; &#xA; &lt;li&gt;Rewards for healing injuries.&lt;/li&gt; &#xA; &lt;li&gt;Rewards for successful revivals.&lt;/li&gt; &#xA; &lt;li&gt;A feature that allows player revival even in the absence of medics.&lt;/li&gt; &#xA; &lt;li&gt;&#34;revive [id]&#34; command to revive specific players.&lt;/li&gt; &#xA; &lt;li&gt;&#34;revive [radius]&#34; command to revive players within a defined area.&lt;/li&gt; &#xA; &lt;li&gt;&#34;heal [id]&#34; command to heal specific players.&lt;/li&gt; &#xA; &lt;li&gt;&#34;heal [radius]&#34; command to heal players within a designated area.&lt;/li&gt; &#xA; &lt;li&gt;Respawn bed animation.&lt;/li&gt; &#xA; &lt;li&gt;Saved deaths&lt;/li&gt; &#xA; &lt;li&gt;Optimized idle (0.0 ms).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;🔮&lt;/span&gt; &lt;em&gt;Stay tuned for more exciting features coming soon!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;📄&lt;/span&gt; &lt;strong&gt;GitHub Repository:&lt;/strong&gt; &lt;a href=&#34;https://github.com/Arius-Development/ars_ambulancejob&#34;&gt;Download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🔗&lt;/span&gt; &lt;strong&gt;Video Preview:&lt;/strong&gt; &lt;a href=&#34;https://youtu.be/q59_st6iuQU&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🌐&lt;/span&gt; &lt;strong&gt;Cfx Forums&lt;/strong&gt; &lt;a href=&#34;https://forum.cfx.re/t/free-esx-qbcore-arius-ambulancejob/5184085&#34;&gt;Forums&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;💬&lt;/span&gt; &lt;strong&gt;Join our discord&lt;/strong&gt; &lt;a href=&#34;https://discord.gg/TkjDhjyeSe&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;📖&lt;/span&gt; &lt;strong&gt;Check out the documentation&lt;/strong&gt; &lt;a href=&#34;https://arius-development.gitbook.io/ariusdevelopment/arius-ambulancejob&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to provide suggestions and report any bugs you encounter. Your feedback is invaluable to us as we continue to improve the script. Enjoy!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Hubro/nvim-splitrun</title>
    <updated>2023-11-30T01:36:01Z</updated>
    <id>tag:github.com,2023-11-30:/Hubro/nvim-splitrun</id>
    <link href="https://github.com/Hubro/nvim-splitrun" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Super simple plugin for running a command in a new split&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-splitrun&lt;/h1&gt; &#xA;&lt;p&gt;The super simple command runner plugin I&#39;ve always wanted.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Hubro/nvim-splitrun/main/.github/screenshots/example.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nnoremap &amp;lt;F5&amp;gt; :Splitrun cargo test&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Runs a command and displays the output in a scratch buffer in a new split. The split direction is automatically selected based on where you have the most room.&lt;/p&gt; &#xA;&lt;p&gt;Subsequent executions reuse the same split if it&#39;s still open, but you can choose to always create new splits by using &lt;code&gt;:SplitrunNew&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;The command is run with &lt;code&gt;:terminal&lt;/code&gt;, so terminal colors work as you would expect.&lt;/p&gt; &#xA;&lt;p&gt;Keyboard focus is moved to the new window for convenient scrolling and yanking. The &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; key is automatically bound to close the split, leaving no trace of the temporary buffer.&lt;/p&gt; &#xA;&lt;p&gt;The intention is to create simple keybinds to run often repeated commands such as &lt;code&gt;cargo test&lt;/code&gt; or &lt;code&gt;npm run test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installs like any other Neovim plugin.&lt;/p&gt; &#xA;&lt;p&gt;Example installation with Lazy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;Hubro/nvim-splitrun&#34;,&#xA;  opts = {},&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>