<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-22T01:28:31Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Zeioth/garbage-day.nvim</title>
    <updated>2024-03-22T01:28:31Z</updated>
    <id>tag:github.com,2024-03-22:/Zeioth/garbage-day.nvim</id>
    <link href="https://github.com/Zeioth/garbage-day.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Garbage collector that stops inactive LSP clients to free RAM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;garbage-day.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Garbage collector that stops inactive LSP clients to free RAM&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Zeioth/garbage-day.nvim/assets/3357792/e4dbd49e-5470-4d1a-939b-1b55d9b2d97c&#34; alt=&#34;screenshot_2023-11-08_08-12-12_851558101&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://discord.gg/ymcMaSnq7d&#34; rel=&#34;nofollow&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1121138836525813760?color=azure&amp;amp;labelColor=6DC2A4&amp;amp;logo=discord&amp;amp;logoColor=black&amp;amp;label=Join the discord server&amp;amp;style=for-the-badge&#34; data-canonical-src=&#34;https://img.shields.io/discord/1121138836525813760&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;In many scenarios, unmanaged LSP clients running on background can take several Gb of RAM. So I wrote this LSP garbage collector for &lt;a href=&#34;https://github.com/NormalNvim/NormalNvim&#34;&gt;NormalNvim&lt;/a&gt; to auto free it. But you can use it on any distro.&lt;/p&gt; &#xA;&lt;h2&gt;How to setup&lt;/h2&gt; &#xA;&lt;p&gt;Add this to lazy&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;zeioth/garbage-day.nvim&#34;,&#xA;  dependencies = &#34;neovim/nvim-lspconfig&#34;,&#xA;  event = &#34;VeryLazy&#34;,&#xA;  opts = {&#xA;    -- your options here&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also support changing opts on execution time like &lt;code&gt;:let g:garbage_day_config[&#39;option&#39;]=&#39;value&#39; &lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Available options&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aggressive_mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set it to &lt;code&gt;true&lt;/code&gt; to stop all lsp clients except the current buffer, every time you enter a buffer. &lt;code&gt;aggressive_mode&lt;/code&gt; ignores &lt;code&gt;grace_period&lt;/code&gt;, and it only triggers when entering a buffer with a different filetype than the current buffer. Ensures the maximum RAM save.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;excluded_lsp_clients&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;null-ls&#34;, &#34;jdtls&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LSP clients that should never be stopped. Useful for LSP clients that miss behave.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grace_period&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;60*15&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Seconds to wait before stopping all LSP clients after neovim loses focus.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;wakeup_delay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Milliseconds to wait before restoring LSP after the mouse re-enters nvim. Useful to avoid waking up the LSP clients by accident when passing the mouse over it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Debug options&lt;/h2&gt; &#xA;&lt;p&gt;You can tweak them in case some particular LSP client don&#39;t start/stop correctly on your machine.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aggressive_mode_ignore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/garbage-day.nvim/raw/main/lua/garbage-day/config.lua&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Buffers to ignore on &lt;code&gt;aggressive_mode&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notifications&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set it to &lt;code&gt;true&lt;/code&gt; to get a notification every time LSP garbage collection triggers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;retries&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Times to try to start a LSP client before giving up.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Milliseconds that will take for &lt;code&gt;retries&lt;/code&gt; to complete. Example: by default we try 3 retries for 1000ms.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;IMPORTANT: If you change the default values, make sure the value of &lt;code&gt;grace_period&lt;/code&gt; is always bigger than &lt;code&gt;timeout&lt;/code&gt;/1000. This ensures you are leaving enough time between &lt;code&gt;stop_lsp()&lt;/code&gt;/&lt;code&gt;start_lsp()&lt;/code&gt;, so they don&#39;t overlap.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;If it doesn&#39;t work&lt;/code&gt; This plugin has been tested with neovim 0.9 and 0.10. If you are in a neovim version superior to nvim 0.10, and it doesn&#39;t work, please &lt;a href=&#34;https://github.com/Zeioth/garbage-day.nvim/issues&#34;&gt;open a issue tagging me&lt;/a&gt; and I will fix it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Can I manually trigger garbage collection?&lt;/code&gt; Yes, you can do it like&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;garbage-day.utils&#34;).stop_lsp()  -- stop all lsp clients.&#xA;require(&#34;garbage-day.utils&#34;).start_lsp() -- start lsp clients for the current buffer.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ðŸŒŸ Support the project&lt;/h2&gt; &#xA;&lt;p&gt;If you want to help me, please star this repository to increase the visibility of the project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/Zeioth/garbage-day.nvim&#34;&gt;&lt;img src=&#34;https://starchart.cc/Zeioth/garbage-day.nvim.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Where do that cheesy name come from?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://knowyourmeme.com/memes/garbage-day&#34;&gt;It comes from the beloved meme&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hinell/lsp-timeout.nvim&#34;&gt;lsp-timeout&lt;/a&gt;: Recommended for nvim versions &lt;code&gt;&amp;lt;=0.8&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Once nvim 0.10 is oficially released and we drop 0.9 support, we must replace the &lt;a href=&#34;https://neovim.io/doc/user/deprecated.html#vim.lsp.buf_get_clients()&#34;&gt;deprecated function&lt;/a&gt; &lt;code&gt;get_active_clients()&lt;/code&gt; by &lt;code&gt;get_clients()&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>