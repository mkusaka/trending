<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-01T01:41:59Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tomrus88/BlizzardInterfaceCode</title>
    <updated>2022-12-01T01:41:59Z</updated>
    <id>tag:github.com,2022-12-01:/tomrus88/BlizzardInterfaceCode</id>
    <link href="https://github.com/tomrus88/BlizzardInterfaceCode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>otavioschwanck/tmux-awesome-manager.nvim</title>
    <updated>2022-12-01T01:41:59Z</updated>
    <id>tag:github.com,2022-12-01:/otavioschwanck/tmux-awesome-manager.nvim</id>
    <link href="https://github.com/otavioschwanck/tmux-awesome-manager.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TMUX Commands manager / runner for Neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tmux Awesome Manager&lt;/h1&gt; &#xA;&lt;p&gt;This plugin provides a pack of functionalities to work with TMUX on Neovim. Manage your commands and run inside neovim! This plugin is perfect for common commands of your workflow like yarn install, rails console, yarn add, bundle install, etc.&lt;/p&gt; &#xA;&lt;h1&gt;Features:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bind commands to shortcuts with a lot of options (open as tab / window, orientation, name, pass user input, etc).&lt;/li&gt; &#xA; &lt;li&gt;Search for the commands that you binded with Telescope.&lt;/li&gt; &#xA; &lt;li&gt;Verify open terminals and visit then.&lt;/li&gt; &#xA; &lt;li&gt;Send text to the tmux panes / windows managed by Tmux Awesome Manager.&lt;/li&gt; &#xA; &lt;li&gt;Create startup commands per project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Demonstration&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/WnIEglJ.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tmux &amp;gt;= 3.3 (Ubuntu 22.04 has an older version, install for another font)&lt;/li&gt; &#xA; &lt;li&gt;Telescope (Optional)&lt;/li&gt; &#xA; &lt;li&gt;Which-key (Optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;tmux-awesome-manager&#39;).setup({&#xA;  per_project_commands = { -- Configure your per project servers with&#xA;  -- project name = { { cmd, name } }&#xA;    api = { { cmd = &#39;rails server&#39;, name = &#39;Rails Server&#39; } },&#xA;    front = { { cmd = &#39;yarn dev&#39;, name = &#39;react server&#39; } },&#xA;  },&#xA;  -- default_size = &#39;30%&#39;, -- on panes, the default size&#xA;  -- open_new_as = &#39;window&#39; -- open new command as.  options: pane, window.&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Keybindings&lt;/h1&gt; &#xA;&lt;h2&gt;Global Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;Example mappings&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local tmux = require(&#34;tmux-awesome-manager&#34;)&#xA;&#xA;vim.keymap.set(&#39;v&#39;, &#39;l&#39;, tmux.send_text_to, {}) -- Send text to a open terminal?&#xA;vim.keymap.set(&#39;n&#39;, &#39;lo&#39;, tmux.switch_orientation, {}) -- Open new panes as vertical / horizontal?&#xA;vim.keymap.set(&#39;n&#39;, &#39;lp&#39;, tmux.switch_open_as, {}) -- Open new terminals as panes or windows?&#xA;vim.keymap.set(&#39;n&#39;, &#39;lk&#39;, tmux.kill_all_terms, {}) -- Kill all open terms.&#xA;vim.keymap.set(&#39;n&#39;, &#39;l!&#39;, tmux.run_project_terms, {}) -- Run the per project commands&#xA;vim.keymap.set(&#39;n&#39;, &#39;lf&#39;, function() vim.cmd(&#34;:Telescope tmux-awesome-manager list_terms&#34;) end, {}) -- List all terminals&#xA;vim.keymap.set(&#39;n&#39;, &#39;ll&#39;, function() vim.cmd(&#34;:Telescope tmux-awesome-manager list_open_terms&#34;) end, {}) -- List open terminals&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands Mappings&lt;/h2&gt; &#xA;&lt;p&gt;I recommend the which-key, but is possible to map with vim.keymap too&lt;/p&gt; &#xA;&lt;p&gt;tmux_term.run() and tmux_term.run_wk() parameters:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;param&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmd&lt;/td&gt; &#xA;   &lt;td&gt;Command to be runned on terminal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;Humanized name of command (to search and window name)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;focus_when_call&lt;/td&gt; &#xA;   &lt;td&gt;Focus terminal instead opening a enw one - default = true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;visit_first_call&lt;/td&gt; &#xA;   &lt;td&gt;Focus the new opened window / pane. default = true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;size&lt;/td&gt; &#xA;   &lt;td&gt;If open_as = pane, split with this size. default = 50%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;open_as&lt;/td&gt; &#xA;   &lt;td&gt;Open as window or pane? Default: what is setted on setup (window)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;use_cwd&lt;/td&gt; &#xA;   &lt;td&gt;Use current cwd on new window / pane? Default: what is setted on setup (true)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;close_on_timer&lt;/td&gt; &#xA;   &lt;td&gt;When the command completed, sleep for some seconds - default = what is setted on setup: 0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;read_after_cmd&lt;/td&gt; &#xA;   &lt;td&gt;When the command completed, wait for enter to close the window. default = true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;questions&lt;/td&gt; &#xA;   &lt;td&gt;Array of user inputs to be asked for the command. On &lt;code&gt;cmd&lt;/code&gt;, the result of inputs will be added on %1 %2.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example of question mapping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tmux.run_wk({ cmd = &#39;yarn add %1&#39;, name = &#39;Yarn Add&#39;, questions = { { question = &#39;package name: &#39;, required = true } } })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;vim.keymap&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local tmux_term = require(&#39;tmux-awesome-manager.src.term&#39;)&#xA;&#xA;vim.keymap.set(&#39;n&#39;, &#39;rr&#39;, tmux_term.run({ name = &#39;Rails Console&#39;, name = &#39;console&#39;, open_as = &#39;pane&#39; }), {}) -- Send text to a open terminal?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Which-key&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local tmux_term = require(&#39;tmux-awesome-manager.src.term&#39;)&#xA;local wk = require(&#34;which-key&#34;)&#xA;&#xA;wk.register({&#xA;  r = {&#xA;    name = &#34;+rails&#34;,&#xA;    R = tmux_term.run_wk({ cmd = &#39;rails s&#39;, name = &#39;Rails Server&#39;, visit_first_call = false, open_as = &#39;panel&#39; }),&#xA;    r = tmux_term.run_wk({ cmd = &#39;rails s&#39;, name = &#39;Rails Console&#39;, open_as = &#39;window&#39; }),&#xA;    b = tmux_term.run_wk({ cmd = &#39;bundle install&#39;, name = &#39;Bundle Install&#39;, open_as = &#39;pane&#39;, close_on_timer = 2, visit_first_call = false, focus_when_call = false }),&#xA;    g = tmux_term.run_wk({ cmd = &#39;rails generate %1&#39;, name = &#39;Rails Generate&#39;,&#xA;      questions = { { question = &#34;Rails generate: &#34;, required = true, open_as = &#39;pane&#39;, close_on_timer = 4,&#xA;        visit_first_call = false, focus_when_call = false } } }),&#xA;    d = tmux_term.run_wk({ cmd = &#39;rails destroy %1&#39;, name = &#39;Rails Destroy&#39;,&#xA;      questions = { { question = &#34;Rails destroy: &#34;, required = true, open_as = &#39;pane&#39;, close_on_timer = 4,&#xA;        visit_first_call = false, focus_when_call = false } } }),&#xA;  },&#xA;}, { prefix = &#34;&amp;lt;leader&amp;gt;&#34;, silent = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Tmux Pro tips to improve this plugin workflow&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a shortcut for break pane / join pane:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tmux&#34;&gt;bind-key m choose-tree -Zw &#34;join-pane -t &#39;%%&#39;&#34;&#xA;bind-key b break-pane&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a shortcut to switch between two windows (last window and current):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tmux&#34;&gt;bind-key = last-window&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use alacritty terminal to bypass tmux prefix.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In my case, my prefix is C-x:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set-option -g prefix C-x&#xA;unbind-key C-x&#xA;bind-key C-x send-prefix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, in alacritty config, when i need to call something, i just put \x18 + the code of the key i want. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# This will call C-x j using Alt + j&#xA;- { key: J, mods: Alt, chars: &#34;\x18\x6d&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see what is the code of a key, just run: &lt;code&gt;xxd -psd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To copy my tmux and alacritty config, visit my config at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/otavioschwanck/mood-nvim&#34;&gt;https://github.com/otavioschwanck/mood-nvim&lt;/a&gt; (config)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/otavioschwanck/mood-nvim/raw/main/extra/.tmux.conf&#34;&gt;https://github.com/otavioschwanck/mood-nvim/blob/main/extra/.tmux.conf&lt;/a&gt; (tmux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/otavioschwanck/mood-nvim/raw/main/extra/alacritty.yml&#34;&gt;https://github.com/otavioschwanck/mood-nvim/blob/main/extra/alacritty.yml&lt;/a&gt; (alacritty)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Eandrju/cellular-automaton.nvim</title>
    <updated>2022-12-01T01:41:59Z</updated>
    <id>tag:github.com,2022-12-01:/Eandrju/cellular-automaton.nvim</id>
    <link href="https://github.com/Eandrju/cellular-automaton.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A useless plugin that might help you cope with stubbornly broken tests or overall lack of sense in life. It lets you execute aesthetically pleasing, cellular automaton animations based on the content of neovim buffer.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cellular-automaton.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A useless plugin that might help you cope with stubbornly broken tests or overall lack of sense in life. It lets you execute aesthetically pleasing, cellular automaton animations based on the content of neovim buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/37074839/204104990-6ebd7767-92e9-43b9-878a-3493a08a3308.mov&#34;&gt;https://user-images.githubusercontent.com/37074839/204104990-6ebd7767-92e9-43b9-878a-3493a08a3308.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is cellular automata&lt;/h2&gt; &#xA;&lt;p&gt;From the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cellular_automaton&#34;&gt;Wiki&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A cellular automaton is a model used in computer science and mathematics. The idea is to model a dynamic system by using a number of cells. Each cell has one of several possible states. With each &#34;turn&#34; or iteration the state of the current cell is determined by two things: its current state, and the states of the neighbouring cells.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;But.. why?&lt;/h2&gt; &#xA;&lt;p&gt;There is no pragmatic use case whatsoever. However, there are some pseudo-scientifically proven &#34;use-cases&#34;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Urgent deadline approaches? Don&#39;t worry. With this plugin you can procrastinate even more!&lt;/li&gt; &#xA; &lt;li&gt;Are you stuck and don&#39;t know how to proceed? You can use this plugin as a visual stimulant for epic ideas!&lt;/li&gt; &#xA; &lt;li&gt;Those nasty colleagues keep peeking over your shoulder and stealing your code? Now you can obfuscate your editor! Good luck stealing that.&lt;/li&gt; &#xA; &lt;li&gt;Working with legacy code? Just create a &lt;code&gt;&amp;lt;leader&amp;gt;fml&lt;/code&gt; mapping and see it melt.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim &amp;gt;= 0.8&lt;/li&gt; &#xA; &lt;li&gt;nvim-treesitter plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;use &#39;eandrju/cellular-automaton.nvim&#39; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can trigger it using simple command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:CellularAutomaton make_it_rain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:CellularAutomaton game_of_life&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or just create a mapping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;fml&#34;, &#34;&amp;lt;cmd&amp;gt;CellularAutomaton make_it_rain&amp;lt;CR&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can close animation window with one of: &lt;code&gt;q&lt;/code&gt;/&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported animations&lt;/h2&gt; &#xA;&lt;h3&gt;Make it Rain&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/37074839/204104990-6ebd7767-92e9-43b9-878a-3493a08a3308.mov&#34;&gt;https://user-images.githubusercontent.com/37074839/204104990-6ebd7767-92e9-43b9-878a-3493a08a3308.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Game of Life&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/37074839/204162517-35b429ad-4cef-45b1-b680-bc7a69a4e8c7.mov&#34;&gt;https://user-images.githubusercontent.com/37074839/204162517-35b429ad-4cef-45b1-b680-bc7a69a4e8c7.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Implementing your own cellular automaton logic&lt;/h2&gt; &#xA;&lt;p&gt;Using a simple interface you can implement your own cellular automaton animation. You need to provide a configuration table with an &lt;code&gt;update&lt;/code&gt; function, which takes a 2D grid of cells and modifies it in place. Each cell by default consist of two fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;char&lt;/code&gt; - single string character&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hl_group&lt;/code&gt; - treesitter&#39;s highlight group&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example sliding animation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local config = {&#xA;    fps = 50,&#xA;    name = &#39;snake&#39;,&#xA;}&#xA;&#xA;-- init function is invoked only once at the start&#xA;-- config.init = function (grid)&#xA;--&#xA;-- end&#xA;&#xA;-- update function&#xA;config.update = function (grid)&#xA;    for i = 1, #grid do&#xA;        local prev = grid[i][#(grid[i])]&#xA;        for j = 1, #(grid[i]) do&#xA;            grid[i][j], prev = prev, grid[i][j]&#xA;        end&#xA;    end&#xA;    return true&#xA;end&#xA;&#xA;require(&#34;cellular-automaton&#34;).register_animation(config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/37074839/204161376-3b10aadd-90e1-4059-b701-ce318085622c.mov&#34;&gt;https://user-images.githubusercontent.com/37074839/204161376-3b10aadd-90e1-4059-b701-ce318085622c.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration and references&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5Ka3tbbT-9E&#34;&gt;https://www.youtube.com/watch?v=5Ka3tbbT-9E&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=prXuyMCgbTc&#34;&gt;https://www.youtube.com/watch?v=prXuyMCgbTc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>