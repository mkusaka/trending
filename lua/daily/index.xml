<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-05T01:32:57Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mrthinger/wow-voiceover</title>
    <updated>2023-04-05T01:32:57Z</updated>
    <id>tag:github.com,2023-04-05:/mrthinger/wow-voiceover</id>
    <link href="https://github.com/mrthinger/wow-voiceover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Voiceover for World of Warcraft&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VoiceOver for World of Warcraft Quests and Gossip&lt;/h1&gt; &#xA;&lt;p&gt;This project contains a CLI (Command Line Interface) tool that generates Text-to-Speech (TTS) audio files for World of Warcraft quests and gossip texts. The tool uses data fetched from a local MySQL database and the ElevenLabs TTS API to generate the audio files. It also contains an addon for playing and queuing the text in game.&lt;/p&gt; &#xA;&lt;h2&gt;Development Discord: &lt;a href=&#34;https://discord.gg/VdhUmA8ZCt&#34;&gt;https://discord.gg/VdhUmA8ZCt&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initialize quest and gossip text database&lt;/li&gt; &#xA; &lt;li&gt;Fetch quest and gossip texts from a local MySQL database.&lt;/li&gt; &#xA; &lt;li&gt;Generate TTS audio files using the ElevenLabs TTS API.&lt;/li&gt; &#xA; &lt;li&gt;Supports multiple races and genders.&lt;/li&gt; &#xA; &lt;li&gt;Generates lookup tables for use in addon.&lt;/li&gt; &#xA; &lt;li&gt;Parallel processing for faster generation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;python 3.9+&lt;/li&gt; &#xA; &lt;li&gt;docker (for the database)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make a python virtual enviornment. (make sure to source it after creating)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m venv .venv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install the required packages.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Copy the .env.example file to .env and fill in your ElevenLabs API Key and database credentials. The included database values are fine if you&#39;re going to use the docker-compose file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Start the MySQL DB&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Seed the MySQL DB&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python cli-main.py init-db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Voice Setup&lt;/h2&gt; &#xA;&lt;p&gt;The generation scripts assume you have voices created in Elevenlabs named in the format &lt;code&gt;race-gender&lt;/code&gt;. For the exact races the script checks your elevenlabs account for, refer to &lt;code&gt;tts_cli\consts.py&lt;/code&gt;. Gender will always either be &lt;code&gt;male&lt;/code&gt; or &lt;code&gt;female&lt;/code&gt;. ex: &lt;code&gt;orc-male&lt;/code&gt;. You will need to create your own voice clones. A good place to get samples is @ &lt;a href=&#34;https://www.wowhead.com/sounds/npc-greetings/name:orc&#34;&gt;https://www.wowhead.com/sounds/npc-greetings/name:orc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the interactive CLI tool, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python cli-main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Output&lt;/h2&gt; &#xA;&lt;p&gt;The generated TTS audio files will be saved in the sounds folder, with separate subfolders for quests and gossip. Lookup tables and sound length tables will also be generated for use in the addon.&lt;/p&gt; &#xA;&lt;h2&gt;Addon Install&lt;/h2&gt; &#xA;&lt;p&gt;Copy over the &lt;code&gt;generated&lt;/code&gt; folder to the VoiceOverData_Vanilla folder, then the VoiceOver and VoiceOverData_Vanilla folder to &lt;code&gt;World of Warcraft/_classic_era_/Interface/AddOns&lt;/code&gt;. Alternatively, you can syslink instead of copying for faster development. Example syslink:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export WOW_DIR=PATH_OF_YOUR_WOW_DIR&#xA;ln -s ./VoiceOver &#34;$WOW_DIR/_classic_era_/Interface/AddOns&#34;&#xA;ln -s ./VoiceOver_Vanilla &#34;$WOW_DIR/_classic_era_/Interface/AddOns&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to this project, please feel free to open an issue or submit a pull request.&lt;/p&gt; &#xA;&lt;h1&gt;CLI Docs&lt;/h1&gt; &#xA;&lt;h2&gt;Dataframe Schema&lt;/h2&gt; &#xA;&lt;p&gt;The dataframe schema before calling the &lt;code&gt;preprocess_dataframe&lt;/code&gt; function consists of the following columns:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;source&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Indicates the type of interaction, can be &#39;accept&#39;, &#39;progress&#39;, &#39;complete&#39;, or &#39;gossip&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;quest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The quest ID or empty string if it&#39;s a gossip interaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The text template content of the interaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DisplayRaceID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The race ID of the NPC involved in the interaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DisplaySexID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The gender ID of the NPC involved in the interaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The name of the NPC involved in the interaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The creature ID of the NPC involved in the interaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;New Fields Added by &lt;code&gt;preprocess_dataframe&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;preprocess_dataframe&lt;/code&gt; function adds the following new fields to the dataframe:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;race&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The race of the NPC, mapped from &lt;code&gt;DisplayRaceID&lt;/code&gt; using &lt;code&gt;RACE_DICT&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gender&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The gender of the NPC, mapped from &lt;code&gt;DisplaySexID&lt;/code&gt; using &lt;code&gt;GENDER_DICT&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;voice_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The voice name, which is a combination of the race and gender fields&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;templateText_race_gender&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A combination of the text, race, and gender fields&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;templateText_race_gender_hash&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A hash of the &lt;code&gt;templateText_race_gender&lt;/code&gt; field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cleanedText&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt; after rendering template&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>letieu/hacker.nvim</title>
    <updated>2023-04-05T01:32:57Z</updated>
    <id>tag:github.com,2023-04-05:/letieu/hacker.nvim</id>
    <link href="https://github.com/letieu/hacker.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hollywood hacker experience in your neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ðŸ“Ÿ hacker.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Hollywood hacker experience in your neovim, like &lt;a href=&#34;https://hackertyper.net/&#34;&gt;hacker typer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/53562817/229345368-2392e84f-f02e-48d5-91dc-ad4116819320.mp4&#34;&gt;https://user-images.githubusercontent.com/53562817/229345368-2392e84f-f02e-48d5-91dc-ad4116819320.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ðŸª„ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can custom fake code&lt;/li&gt; &#xA; &lt;li&gt;Can fake code follow with &lt;em&gt;current file&lt;/em&gt; with &lt;code&gt;:HackFollow&lt;/code&gt; or use default fake code with &lt;code&gt;:Hack&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Config speed, show popup or not, time to show popup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ðŸ“¦ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;letieu/hacker.nvim&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup({&#xA;    { &#xA;        &#34;letieu/hacker.nvim&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ðŸª„ Options&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;setup&lt;/code&gt; to override any of the default options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default config&#xA;require(&#34;hacker&#34;).setup {&#xA;  content = [[ Code want to show.... ]], -- The code snippet that show when typing&#xA;  filetype = &#34;lua&#34;, -- filetype of code snippet&#xA;  speed = { -- characters insert each time, random from min -&amp;gt; max&#xA;    min = 2,&#xA;    max = 10,&#xA;  },&#xA;  is_popup = false, -- show random float window when typing&#xA;  popup_after = 5,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ðŸš€ Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Hack&lt;/code&gt; command can be used to open hacker and start hacking&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Hack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;HackFollow&lt;/code&gt; command can be used to use current file as fake code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:HackFollow&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>