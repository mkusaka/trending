<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-31T01:41:27Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>betaflight/betaflight-tx-lua-scripts</title>
    <updated>2023-05-31T01:41:27Z</updated>
    <id>tag:github.com,2023-05-31:/betaflight/betaflight-tx-lua-scripts</id>
    <link href="https://github.com/betaflight/betaflight-tx-lua-scripts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of scripts to configure Betaflight from your TX (currently only supported in OpenTx)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/betaflight/betaflight-tx-lua-scripts/master/docs/assets/images/bf_lua_logo_light_mode.png#gh-light-mode-only&#34; alt=&#34;BF lua logo light mode&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/betaflight/betaflight-tx-lua-scripts/master/docs/assets/images/bf_lua_logo_dark_mode.png#gh-dark-mode-only&#34; alt=&#34;BF lua logo dark mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/betaflight/betaflight-tx-lua-scripts/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/betaflight/betaflight-tx-lua-scripts&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/betaflight/betaflight-tx-lua-scripts/actions/workflows/nightly.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/betaflight/betaflight-tx-lua-scripts/nightly.yml?branch=master&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Betaflight - As a best practice, it is recommended to use the most recent stable release of Betaflight to obtain the best possible results;&lt;/li&gt; &#xA; &lt;li&gt;Telemetry - Telemetry has to be enabled and supported by the TX / RX for the scripts to be able to communicate with the flight controller;&lt;/li&gt; &#xA; &lt;li&gt;OpenTX - 2.3.12 or newer;&lt;/li&gt; &#xA; &lt;li&gt;EdgeTX - 2.4.0 or newer;&lt;/li&gt; &#xA; &lt;li&gt;ExpressLRS - 2.0.1 or newer;&lt;/li&gt; &#xA; &lt;li&gt;TBS Crossfire/Tracer TX / RX - v2.11 or newer;&lt;/li&gt; &#xA; &lt;li&gt;FrSky TX / RX with support for SmartPort - While most receivers with SmartPort support work fine, it is recommended to update the receiver to the most recent firmware version to correct any known bugs in telemetry.&lt;/li&gt; &#xA; &lt;li&gt;ImmersionRC Ghost - Latest firmware.&lt;/li&gt; &#xA; &lt;li&gt;Baud rate - Set to 400K in EdgeTX/OpenTX for Crossfire, Tracer, ExpressLRS and Ghost.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;!! IMPORTANT: DON&#39;T COPY THE CONTENTS OF THIS REPOSITORY ONTO YOUR SDCARD !!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download a zip file containing the latest version from the &lt;a href=&#34;https://github.com/betaflight/betaflight-tx-lua-scripts/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unzip the files from the link above and drag the contents of the &lt;code&gt;obj&lt;/code&gt; folder to your radios SD card. If you do this correctly, the &lt;code&gt;SCRIPTS&lt;/code&gt; directory will merge with your existing directories, placing the scripts in their appropriate paths. You will know if you did this correctly if the &lt;code&gt;bf.lua&lt;/code&gt; file shows up in your &lt;code&gt;/SCRIPTS/TOOLS&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/betaflight/betaflight-tx-lua-scripts/master/docs/assets/images/install.gif&#34; alt=&#34;Install&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Navigate to the TOOLS menu in OpenTX, select &#34;Betaflight setup&#34; or &#34;Betaflight CMS&#34; and press the [ENTER] button. The first time the script is launched after a clean install or upgrade it will go through it&#39;s compile procedure and exit back to the TOOLS menu when it&#39;s done.&lt;/p&gt; &#xA;&lt;h3&gt;Betaflight setup&lt;/h3&gt; &#xA;&lt;p&gt;The &#34;Betaflight setup&#34; script lets you configure Betaflight through the MSP protocol.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/betaflight/betaflight-tx-lua-scripts/master/docs/assets/images/how_to_use.gif&#34; alt=&#34;Betaflight setup&#34;&gt;&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Controls&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[+] / [-] / [ROTARY ENCODER] - Used to navigate.&lt;/li&gt; &#xA; &lt;li&gt;[PAGE] - Press to move to the next page. Long press to move to the previous page.&lt;/li&gt; &#xA; &lt;li&gt;[ENTER] - Press to access the selected element. Long press to open the function menu.&lt;/li&gt; &#xA; &lt;li&gt;[EXIT] - Press to go back or exit the script.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Saving your changes&lt;/h4&gt; &#xA;&lt;p&gt;Any changes to parameters in the script will not take effect until a save is manually initiated. Change the parameters you want to change, open the function menu by long pressing [ENTER] and select &#34;save page&#34; to send the modified parameters back to the flight controller.&lt;/p&gt; &#xA;&lt;h4&gt;Setting up VTX tables&lt;/h4&gt; &#xA;&lt;p&gt;If you are using a VTX that supports the SmartAudio or Tramp protocols then bands and channels etc. are managed using VTX tables since Betaflight version 4.1.0. The script will be downloading and storing the current VTX table for every model the first time the model is connected and the script is run. If you change the VTX table, you have to re-load the updated VTX table in the script, by choosing the &#39;vtx tables&#39; option in the function menu.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the size of the vtx tables and the telemetry protocol used, downloading the vtx tables can take a while.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/betaflight/betaflight-tx-lua-scripts/master/docs/assets/images/download_vtx_tables.gif&#34; alt=&#34;Download VTX tables&#34;&gt;&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Betaflight CMS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;!! IMPORTANT: TBS Crossfire/Tracer only !!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;Betaflight CMS&#34; lets you access the same CMS menu that is available in the OSD.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/betaflight/betaflight-tx-lua-scripts/master/docs/assets/images/how_to_use_cms.gif&#34; alt=&#34;Betaflight CMS&#34;&gt;&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Controls&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[PITCH] - Navigate the current menu.&lt;/li&gt; &#xA; &lt;li&gt;[ROLL] - Enter menu or change selected parameter.&lt;/li&gt; &#xA; &lt;li&gt;[YAW] - Left to go back and right to enter the &#34;SAVE / EXIT&#34; menu.&lt;/li&gt; &#xA; &lt;li&gt;[+] / [ENTER] - Manual refresh. Press if the script doesn&#39;t update.&lt;/li&gt; &#xA; &lt;li&gt;[EXIT] - Close CMS menu and exit script. &lt;strong&gt;!! IMPORTANT: Single press only. Long press will exit the script without closing CMS and as a result you will not be able to arm !!&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Background script&lt;/h3&gt; &#xA;&lt;p&gt;The optional background script offers RTC synchronization and RSSI through MSP. RSSI will only be sent if no other RSSI source is detected. It can be setup as a special or global function in OpenTX. The image below shows how to run the background script as a special function.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/betaflight/betaflight-tx-lua-scripts/master/docs/assets/images/background_script_setup.png&#34; alt=&#34;Background script setup&#34;&gt;&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Unstable testing versions&lt;/h2&gt; &#xA;&lt;p&gt;Unstable testing versions of the latest builds of the Lua Script can be downloaded from &lt;a href=&#34;https://github.com/betaflight/betaflight-tx-lua-scripts-nightlies/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Be aware that these versions are intended for testing / feedback only, and may be buggy or broken. Caution is advised when using these versions.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be sure to have &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;luac&lt;/code&gt; in version 5.2 installed in the path&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make&lt;/code&gt; from the root folder&lt;/li&gt; &#xA; &lt;li&gt;The installation files will be created in the &lt;code&gt;obj&lt;/code&gt; folder. Copy the files to your transmitter as instructed in the &#39;&lt;a href=&#34;https://raw.githubusercontent.com/betaflight/betaflight-tx-lua-scripts/master/#installing&#34;&gt;Installing&lt;/a&gt;&#39; section as if you unzipped from a downloaded file.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Brian0255/NDS-Ironmon-Tracker</title>
    <updated>2023-05-31T01:41:27Z</updated>
    <id>tag:github.com,2023-05-31:/Brian0255/NDS-Ironmon-Tracker</id>
    <link href="https://github.com/Brian0255/NDS-Ironmon-Tracker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An ironMON tracker for Nintendo DS Pok√©mon games.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NDS-Ironmon-Tracker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/61294586/173255404-ecd702ad-b23d-4b1c-a6ce-b98c09270c9d.mp4&#34;&gt;https://user-images.githubusercontent.com/61294586/173255404-ecd702ad-b23d-4b1c-a6ce-b98c09270c9d.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This tracker is a lua script that runs with &lt;a href=&#34;https://tasvideos.org/BizHawk/ReleaseHistory&#34;&gt;BizHawk&lt;/a&gt;. It&#39;s made primarily for the ironMON challenge(created by Iateyourpie) and is used to track Pok√©mon data dynamically.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For more information on this challenge, head on over to &lt;a href=&#34;http://ironmon.gg&#34;&gt;ironmon.gg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Come join the amazing Discord! &lt;a href=&#34;https://discord.gg/jFPYsZAhjX&#34;&gt;https://discord.gg/jFPYsZAhjX&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This tracker is based on the Nintendo DS (NDS) Pok√©mon games. As such, the following games are currently supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pok√©mon Diamond/Pearl&lt;/li&gt; &#xA; &lt;li&gt;Pok√©mon Platinum&lt;/li&gt; &#xA; &lt;li&gt;Pok√©mon HeartGold/SoulSilver&lt;/li&gt; &#xA; &lt;li&gt;Pok√©mon Black/White&lt;/li&gt; &#xA; &lt;li&gt;Pok√©mon Black2/White2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project initially started from &lt;a href=&#34;https://github.com/besteon/Ironmon-Tracker&#34;&gt;https://github.com/besteon/Ironmon-Tracker&lt;/a&gt;, so I cannot thank them and all of the project&#39;s contributors enough for all the amazing groundwork they did. Also, huge shoutouts to the people over at projectpokemon.org for all their technical documentation on Pok√©mon data.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you don&#39;t have BizHawk, &lt;a href=&#34;https://tasvideos.org/BizHawk/ReleaseHistory&#34;&gt;download the emulator&lt;/a&gt; (v2.8 or higher). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: &lt;strong&gt;Run BizHawk once and close it.&lt;/strong&gt; This creates a config file in BizHawk&#39;s folder that ensures the tracker will work correctly. If you don&#39;t do this, errors may occur.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download this tracker from the &lt;a href=&#34;https://github.com/Brian0255/NDS-Ironmon-Tracker/releases/&#34;&gt;releases&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Unzip the tracker&#39;s files to a location of your choosing. One good location is the &lt;code&gt;Lua&lt;/code&gt; folder where you installed BizHawk. Make sure the &#34;ironmon_tracker&#34; folder is in the same directory as &#34;Ironmon_Tracker.lua&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Load your ROM into &lt;a href=&#34;https://tasvideos.org/BizHawk/ReleaseHistory&#34;&gt;BizHawk&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the Lua Console (Tools -&amp;gt; Lua Console). Click on the folder icon and open &lt;code&gt;Ironmon_Tracker.lua&lt;/code&gt; in the location you extracted it to. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you installed the tracker in Bizhawk&#39;s &lt;code&gt;Lua&lt;/code&gt; folder, this location is shown by default and you should see the &lt;code&gt;Ironmon_Tracker.lua&lt;/code&gt; file right away.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Main Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic Pok√©mon Tracking&lt;/strong&gt;: All of your Pok√©mon&#39;s data are updated as you play! Its stats, nature, moves(and various information about them), ability, and typing are all shown for you. No more having to bring up the summary constantly!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stat Increases and Decreases&lt;/strong&gt;: Moves that change stats (such as &lt;code&gt;Dragon Dance&lt;/code&gt;, &lt;code&gt;Tail Glow&lt;/code&gt;, and &lt;code&gt;Tail Whip&lt;/code&gt;) will be shown on the tracker next to the pokemon&#39;s stats. Positive stat increases will be shown with up arrows that turn green, and negative will be shown with down arrows that turn red.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enemy Moves&lt;/strong&gt;: Enemy Pok√©mon moves are tracked for you as well! Just in a little bit of a different way. Once you&#39;ve seen an enemy pokemon&#39;s move, the tracker will display it. If you encounter that same Pok√©mon later, the move will have an asterisk &lt;code&gt;*&lt;/code&gt; next to it, which means it might not have the move anymore.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Predicting Enemy Stats&lt;/strong&gt;: Think an enemy is massive tank? Think an enemy hits like a truck? Well you can mark that in the tracker! When viewing an enemy pokemon, just click the boxes next to the enemy Pok√©mon&#39;s stats, and it will cycle through &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, and blank.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Move effectiveness&lt;/strong&gt;: Knowing what moves are super effective and such can be tricky! For your convenience, that can be done for you. When a move is super effective, it will display green up arrows depending on x2 or x4. Not very effective moves will display red down arrows in a similar fashion. If a move can&#39;t hit at all (like normal types and ghost types), a red &#34;X&#39; will be displayed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Attack type icons&lt;/strong&gt;: The Physical/Special split on moves can be a LOT to remember. Luckily, the tracker will display this information for you! Depending on if a move is physical or special, a small icon will be displayed to the left of the move&#39;s name. If it&#39;s a status move, no icon will be displayed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Healing items&lt;/strong&gt;: The tracker also has the capability to track how many heals you have and display the total heals as a percent of your HP. For example, if my Pok√©mon had 40 HP and 3 potions, it would display &#34;Heals in Bag: 150%&#34;. Super helpful!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Quick loading seeds&lt;/strong&gt;: The tracker has a very nice feature to auto-load the next seed, which you can accomplish with the following:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Create a bunch of seeds with a .bat file (check the Ironmon discord in the getting-started channel)&lt;/li&gt; &#xA;   &lt;li&gt;Ensure that the seeds are in a format like &lt;code&gt;seed1.nds&lt;/code&gt;, &lt;code&gt;seed2.nds&lt;/code&gt;, &lt;code&gt;seed3.nds&lt;/code&gt;, etc. &lt;code&gt;seed0003&lt;/code&gt;, &lt;code&gt;S33D3&lt;/code&gt;, and &lt;code&gt;34555_1&lt;/code&gt; will not work.&lt;/li&gt; &#xA;   &lt;li&gt;Once you&#39;ve been sent back to the lab and need to load the next seed, use the NEXT_SEED button combo in the Settings file. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;By default, the button combo is A,B,Start,Select.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;: You can leave a quick note about an enemy Pok√©mon by clicking the note button in the middle of the tracker.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Found a bug or the program stopped working? Did Aura Sphere have a missing category icon? Great! For stuff like this, you can open up an issue on the project &lt;a href=&#34;https://github.com/Brian0255/NDS-Ironmon-Tracker/issues&#34;&gt;here,&lt;/a&gt; or just DM me on Discord (OnlySpaghettiCode#1024). I am more than happy to respond to feedback and bug reports!&lt;/li&gt; &#xA; &lt;li&gt;Think you have a cool idea for the tracker or just want to give feedback? I&#39;d love to hear it! Feel free to DM me on Discord or open up an issue on the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Common errors and solutions&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Error: &lt;code&gt;Can&#39;t have lua running in two host threads at a time!&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cause: Outdated version of Bizhawk&lt;/p&gt; &#xA;&lt;p&gt;Fix: Use &lt;a href=&#34;https://tasvideos.org/BizHawk/ReleaseHistory&#34;&gt;Bizhawk emulator&lt;/a&gt; version 2.8 or higher&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Error: &lt;code&gt;ironmon_tracker/ironmon_tracker.lua: attempt to index field &#39;field&#39; (a nil value)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cause: Updating to a new version of the tracker and using a savestate from an older version.&lt;/p&gt; &#xA;&lt;p&gt;Fix: Only update the tracker between runs when you can make a new savestate.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Error: &lt;code&gt;NullHawk does not implement memory domains NLua.Exceptions.LuaException: unprotected error in call to Lua API (0)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cause: Your roms must not have spaces in the names, or the &lt;code&gt;ROMS_FOLDER&lt;/code&gt; path specified in &lt;code&gt;Settings.ini&lt;/code&gt; is not correct. Your rom number also can&#39;t have leading zeros, such as Kaizo001.nds, Kaizo002.nds, etc. They must be Kaizo1.nds, Kaizo2.nds, etc.&lt;/p&gt; &#xA;&lt;p&gt;Fix: Rename your roms so they don&#39;t have spaces in the names.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Error: &lt;code&gt;ironmon_tracker/ironmon_tracker.lua: attempt to index field &#39;?&#39; (a nil value)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cause: Usually happens when you run the tracker without opening and closing BizHawk at least once.&lt;/p&gt; &#xA;&lt;p&gt;Fix: Open and close BizHawk at least once to generate the config.ini file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jmbuhr/otter.nvim</title>
    <updated>2023-05-31T01:41:27Z</updated>
    <id>tag:github.com,2023-05-31:/jmbuhr/otter.nvim</id>
    <link href="https://github.com/jmbuhr/otter.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Just ask an otter! ü¶¶&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;otter.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Just ask an otter! ü¶¶&lt;/p&gt; &#xA;&lt;h2&gt;What is otter.nvim?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;tldr: Otter.nvim provides lsp features and a code completion source for code embedded in other documents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Demo&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/17450586/209436156-f7f42ea9-471c-478a-868e-77517d71a1c5.mp4&#34;&gt;https://user-images.githubusercontent.com/17450586/209436156-f7f42ea9-471c-478a-868e-77517d71a1c5.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When implementing autocompletion, code diagnostics and the likes for &lt;a href=&#34;https://github.com/quarto-dev/quarto-nvim&#34;&gt;quarto-nvim&lt;/a&gt; I realized that a core feature would be useful to other plugins and usecases as well. &lt;a href=&#34;https://quarto.org&#34;&gt;quarto&lt;/a&gt; documents are computational notebooks for scientific communication based on &lt;a href=&#34;https://pandoc.org/&#34;&gt;pandoc&lt;/a&gt;s markdown. One key feature is that these &lt;code&gt;qmd&lt;/code&gt; documents can contain exectuable code blocks, with possibly different languages such as &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;python&lt;/code&gt; mixed in one document.&lt;/p&gt; &#xA;&lt;p&gt;How do we get all the cool language features we get for a pure e.g. &lt;code&gt;python&lt;/code&gt; file -- like code completion, documentation hover windows, diagnostics -- when the code is just embedded as code blocks in a document? Well, if one document can&#39;t give us the answer, we ask an otter (another)! &lt;code&gt;otter.nvim&lt;/code&gt; creates and synchronizes hidden buffers containing a single language each and directs requests for completion and lsp requests from the main buffer to those other buffers (otter buffers).&lt;/p&gt; &#xA;&lt;p&gt;Example in a markdown (or quarto markdown) document &lt;code&gt;index.md&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Some markdown&#xA;&#xA;Hello world&#xA;&#xA;```python&#xA;import numpy as np&#xA;np.zeros(10)&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We create a hidden buffer for a file &lt;code&gt;index.md.tmp.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; &#xA; &#xA; &#xA; &#xA;  import numpy as np&#xA;  np.zeros(10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This contains just the python code and blank lines for all other lines (this keeps line numbers the same, which comes straight from the trick that the quarto dev team uses for the vs code extension as well). Language servers can then attach to this hidden buffer. We can do this for all embedded languages found in a document.&lt;/p&gt; &#xA;&lt;h3&gt;A group of otters is called a raft&lt;/h3&gt; &#xA;&lt;p&gt;Each otter-activated buffer can maintain a set of other buffers synchronized to the main buffer.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In other words, each buffer can have a raft of otters!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;otter.nvim&lt;/code&gt; contains a completion source for &lt;a href=&#34;https://github.com/hrsh7th/cmp-nvim-lua&#34;&gt;nvim-cmp&lt;/a&gt;. When a completion request is made, the whole raft of otters is synchronized and the question is directed to the otters. The accumulated answers are then displayed in the main buffer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;stateDiagram-v2&#xA;    Main --&amp;gt; ü¶¶1&#xA;    Main --&amp;gt; ü¶¶2&#xA;    Main --&amp;gt; ü¶¶3&#xA;    ü¶¶1 --&amp;gt; response&#xA;    ü¶¶2 --&amp;gt; response&#xA;    ü¶¶3 --&amp;gt; response&#xA;    response --&amp;gt; Main: filter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do I use otter.nvim?&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started is try it out in &lt;a href=&#34;https://github.com/quarto-dev/quarto-nvim&#34;&gt;quarto-nvim&lt;/a&gt; or look at the usecases there. Specifically, you&#39;ll want to look at the &lt;code&gt;lua/plugins/quarto.lua&lt;/code&gt; file in the &lt;a href=&#34;https://github.com/jmbuhr/quarto-nvim-kickstarter&#34;&gt;quarto-nvim-kickstarter&lt;/a&gt; configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;otter.nvim&lt;/code&gt; relies on the following plugins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;hrsh7th/nvim-cmp&#39;,&#xA;  &#39;neovim/nvim-lspconfig&#39;,&#xA;  &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you call &lt;code&gt;require&#39;otter&#39;.dev_setup()&lt;/code&gt; in your nvim configuration you will even see code completion and documentation windows for the lua chunks in this readme! All this function does is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;otter = require&#39;otter&#39;&#xA;&#xA;api.nvim_create_autocmd({ &#34;BufEnter&#34; }, {&#xA;  pattern = { &#34;*.md&#34; },&#xA;  callback = function()&#xA;    otter.activate({ &#39;r&#39;, &#39;python&#39;, &#39;lua&#39; }, true)&#xA;    vim.api.nvim_buf_set_keymap(0, &#39;n&#39;, &#39;gd&#39;, &#34;:lua require&#39;otter&#39;.ask_definition()&amp;lt;cr&amp;gt;&#34;, { silent = true })&#xA;    vim.api.nvim_buf_set_keymap(0, &#39;n&#39;, &#39;K&#39;, &#34;:lua require&#39;otter&#39;.ask_hover()&amp;lt;cr&amp;gt;&#34;, { silent = true })&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jmbuhr/otter.nvim/main/img/2022-12-23-15-59-24.png&#34; alt=&#34;An otter eagerly awaiting your lsp requests. Generated with DALL-E 2.&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>