<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-23T01:32:13Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chrishrb/gx.nvim</title>
    <updated>2024-07-23T01:32:13Z</updated>
    <id>tag:github.com,2024-07-23:/chrishrb/gx.nvim</id>
    <link href="https://github.com/chrishrb/gx.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of gx without the need of netrw&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üîó gx.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/chrishrb/gx.nvim/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ATTENTION: There was a breaking change in version v0.5.0. The keybinding &lt;code&gt;gx&lt;/code&gt; must now be configured manually. See &lt;a href=&#34;https://raw.githubusercontent.com/chrishrb/gx.nvim/main/#-installation&#34;&gt;Installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;open links without &lt;code&gt;netrw&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;normal and visual mode support&lt;/li&gt; &#xA; &lt;li&gt;links with/without an explicit protocol (e.g. &lt;code&gt;google.com&lt;/code&gt; will open &lt;code&gt;https://google.com&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;open plugins in the browser with a single command (e.g. in lazy, packer you can hover over a plugin name, simply press &lt;code&gt;gx&lt;/code&gt; or execute command &lt;code&gt;Browse&lt;/code&gt; and you get to the github page of the plugin)&lt;/li&gt; &#xA; &lt;li&gt;open github issues directly in the browser (e.g. &lt;code&gt;Fixes #22&lt;/code&gt; opens &lt;code&gt;https://github.com/chrishrb/gx.nvim/issues/22&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;dependencies from &lt;code&gt;package.json&lt;/code&gt; (e.g. line &lt;code&gt;&#34;express&#34;: &#34;^4.18.2&#34;,&lt;/code&gt; in the &lt;code&gt;package.json&lt;/code&gt; opens &lt;code&gt;https://www.npmjs.com/package/express&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;formulae and casks from &lt;code&gt;Brewfile&lt;/code&gt; (e.g. line &lt;code&gt;brew &#34;neovim&#34;&lt;/code&gt; in the &lt;code&gt;Brewfile&lt;/code&gt; opens &lt;code&gt;https://formulae.brew.sh/formula/neovim&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;go packages from an import statement (e.g. line &lt;code&gt;import &#34;github.com/joho/godotenv&#34;&lt;/code&gt; opens &lt;code&gt;https://pkg.go.dev/github.com/joho/godotenv&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;if there is no url found under the cursor, the word/selection is automatically searched on the web&lt;/li&gt; &#xA; &lt;li&gt;supports user defined handlers to extend the functionality&lt;/li&gt; &#xA; &lt;li&gt;support for macOS, Linux and Windows&lt;/li&gt; &#xA; &lt;li&gt;if multiple patterns match you can simply select the desired URL from the menu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA; &lt;li&gt;macOS (&lt;code&gt;open&lt;/code&gt;), Linux (&lt;code&gt;xdg-open&lt;/code&gt;) or Windows (&lt;code&gt;powershell.exe start explorer.exe&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;require(&#34;lazy&#34;).setup({&#xA;  {&#xA;    &#34;chrishrb/gx.nvim&#34;,&#xA;    keys = { { &#34;gx&#34;, &#34;&amp;lt;cmd&amp;gt;Browse&amp;lt;cr&amp;gt;&#34;, mode = { &#34;n&#34;, &#34;x&#34; } } },&#xA;    cmd = { &#34;Browse&#34; },&#xA;    init = function ()&#xA;      vim.g.netrw_nogx = 1 -- disable netrw gx&#xA;    end,&#xA;    dependencies = { &#34;nvim-lua/plenary.nvim&#34; },&#xA;    config = true, -- default settings&#xA;    submodules = false, -- not needed, submodules are required only for tests&#xA;&#xA;    -- you can specify also another config if you want&#xA;    config = function() require(&#34;gx&#34;).setup {&#xA;      open_browser_app = &#34;os_specific&#34;, -- specify your browser app; default for macOS is &#34;open&#34;, Linux &#34;xdg-open&#34; and Windows &#34;powershell.exe&#34;&#xA;      open_browser_args = { &#34;--background&#34; }, -- specify any arguments, such as --background for macOS&#39; &#34;open&#34;.&#xA;      handlers = {&#xA;        plugin = true, -- open plugin links in lua (e.g. packer, lazy, ..)&#xA;        github = true, -- open github issues&#xA;        brewfile = true, -- open Homebrew formulaes and casks&#xA;        package_json = true, -- open dependencies from package.json&#xA;        search = true, -- search the web/selection on the web if nothing else is found&#xA;        go = true, -- open pkg.go.dev from an import statement (uses treesitter)&#xA;        jira = { -- custom handler to open Jira tickets (these have higher precedence than builtin handlers)&#xA;          name = &#34;jira&#34;, -- set name of handler&#xA;          handle = function(mode, line, _)&#xA;            local ticket = require(&#34;gx.helper&#34;).find(line, mode, &#34;(%u+-%d+)&#34;)&#xA;            if ticket and #ticket &amp;lt; 20 then&#xA;              return &#34;http://jira.company.com/browse/&#34; .. ticket&#xA;            end&#xA;          end,&#xA;        },&#xA;        rust = { -- custom handler to open rust&#39;s cargo packages&#xA;          name = &#34;rust&#34;, -- set name of handler&#xA;          filetype = { &#34;toml&#34; }, -- you can also set the required filetype for this handler&#xA;          filename = &#34;Cargo.toml&#34;, -- or the necessary filename&#xA;          handle = function(mode, line, _)&#xA;            local crate = require(&#34;gx.helper&#34;).find(line, mode, &#34;(%w+)%s-=%s&#34;)&#xA;&#xA;            if crate then&#xA;              return &#34;https://crates.io/crates/&#34; .. crate&#xA;            end&#xA;          end,&#xA;        },&#xA;      },&#xA;      handler_options = {&#xA;        search_engine = &#34;google&#34;, -- you can select between google, bing, duckduckgo, ecosia and yandex&#xA;        search_engine = &#34;https://search.brave.com/search?q=&#34;, -- or you can pass in a custom search engine&#xA;        select_for_search = false, -- if your cursor is e.g. on a link, the pattern for the link AND for the word will always match. This disables this behaviour for default so that the link is opened without the select option for the word AND link&#xA;&#xA;        git_remotes = { &#34;upstream&#34;, &#34;origin&#34; }, -- list of git remotes to search for git issue linking, in priority&#xA;        git_remotes = function(fname) -- you can also pass in a function&#xA;            if fname:match(&#34;myproject&#34;) then&#xA;                return { &#34;mygit&#34; }&#xA;            end&#xA;            return { &#34;upstream&#34;, &#34;origin&#34; }&#xA;        end,&#xA;&#xA;        git_remote_push = false, -- use the push url for git issue linking,&#xA;        git_remote_push = function(fname) -- you can also pass in a function&#xA;          return fname:match(&#34;myproject&#34;)&#xA;        end,&#xA;      },&#xA;    } end,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üì° Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Browse &amp;lt;URL or WORDS&amp;gt;&lt;/code&gt;, e.g. &lt;code&gt;Browse http://google.de&lt;/code&gt;, &lt;code&gt;Browse example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;OR hover/select words, links and more and execute command &lt;code&gt;Browse&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;p&gt;When your cursor is over a link or you mark a link or part of a link with the visual mode, you can press &lt;code&gt;gx&lt;/code&gt; to open the link in the browser.&lt;/p&gt; &#xA;&lt;h2&gt;üìÑ Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lua functions library &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>