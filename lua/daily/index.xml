<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-06T01:35:13Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kndndrj/nvim-dbee</title>
    <updated>2024-01-06T01:35:13Z</updated>
    <id>tag:github.com,2024-01-06:/kndndrj/nvim-dbee</id>
    <link href="https://github.com/kndndrj/nvim-dbee" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interactive database client for neovim&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/kndndrj/nvim-dbee/lint.yml?label=linting&amp;amp;style=for-the-badge&#34; alt=&#34;Linting Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/kndndrj/nvim-dbee/docgen.yml?label=docgen&amp;amp;logo=neovim&amp;amp;logoColor=white&amp;amp;style=for-the-badge&#34; alt=&#34;Docgen Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/go-backend-lightblue?style=for-the-badge&amp;amp;logo=go&amp;amp;logoColor=white&#34; alt=&#34;Backend&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/lua-frontend-blue?style=for-the-badge&amp;amp;logo=lua&amp;amp;logoColor=white&#34; alt=&#34;Frontend&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/kndndrj&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/yellow_img.png&#34; alt=&#34;&amp;quot;Buy Me A Coffee&amp;quot;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- DOCGEN_IGNORE_END --&gt; &#xA;&lt;h1&gt;Neovim DBee&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Database Client for NeoVim!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Execute Your Favourite Queries From the Comfort of Your Editor!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Backend in Go!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Frontend in Lua!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Doesn&#39;t rely on CLI tools!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Get Results FAST With Under-the-hood Iterator!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bees Love It!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Alpha Software - Expect Breaking Changes!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!-- DOCGEN_IGNORE_START --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kndndrj/nvim-dbee/master/assets/screenshot.jpg&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- DOCGEN_IGNORE_END --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;packer.nvim:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;kndndrj/nvim-dbee&#34;,&#xA;  requires = {&#xA;    &#34;MunifTanjim/nui.nvim&#34;,&#xA;  },&#xA;  run = function()&#xA;    -- Install tries to automatically detect the install method.&#xA;    -- if it fails, try calling it with one of these parameters:&#xA;    --    &#34;curl&#34;, &#34;wget&#34;, &#34;bitsadmin&#34;, &#34;go&#34;&#xA;    require(&#34;dbee&#34;).install()&#xA;  end,&#xA;  config = function()&#xA;    require(&#34;dbee&#34;).setup(--[[optional config]])&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;lazy.nvim:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;kndndrj/nvim-dbee&#34;,&#xA;  dependencies = {&#xA;    &#34;MunifTanjim/nui.nvim&#34;,&#xA;  },&#xA;  build = function()&#xA;    -- Install tries to automatically detect the install method.&#xA;    -- if it fails, try calling it with one of these parameters:&#xA;    --    &#34;curl&#34;, &#34;wget&#34;, &#34;bitsadmin&#34;, &#34;go&#34;&#xA;    require(&#34;dbee&#34;).install()&#xA;  end,&#xA;  config = function()&#xA;    require(&#34;dbee&#34;).setup(--[[optional config]])&#xA;  end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Platform Support&lt;/h3&gt; &#xA;&lt;!-- DOCGEN_IGNORE_START --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand&lt;/summary&gt; &#xA; &lt;!-- DOCGEN_IGNORE_END --&gt; &#xA; &lt;p&gt;This project aims to be as cross-platform as possible, but there are some limitations (for example some of the go dependencies only work on certain platforms). To address this issue, the client implementations are detached from the main logic and they register themselves to dbee backend on plugin start. This allows the use of build constraints, which we use to exclued certain client implementations on certain platforms.&lt;/p&gt; &#xA; &lt;p&gt;The CI pipeline tries building the binary for GOARCH/GOOS combinations specified in &lt;a href=&#34;https://raw.githubusercontent.com/kndndrj/nvim-dbee/master/ci/targets.json&#34;&gt;targets.json&lt;/a&gt; - if the builds succeed, they are stored in a &lt;a href=&#34;https://github.com/kndndrj/nvim-dbee-bucket&#34;&gt;remote bucket&lt;/a&gt; on a separate branch per run. Additionally, the &lt;a href=&#34;https://raw.githubusercontent.com/kndndrj/nvim-dbee/master/lua/dbee/install/__manifest.lua&#34;&gt;install manifest&lt;/a&gt; gets created.&lt;/p&gt; &#xA; &lt;p&gt;To increase cgo cross-platform support, the pipeline uses zig as a C compiler.&lt;/p&gt; &#xA; &lt;p&gt;To check if your platform is currently supported, check out the mentioned manifest and the targets file.&lt;/p&gt; &#xA; &lt;!-- DOCGEN_IGNORE_START --&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- DOCGEN_IGNORE_END --&gt; &#xA;&lt;h3&gt;Manual Binary Installation&lt;/h3&gt; &#xA;&lt;!-- DOCGEN_IGNORE_START --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand&lt;/summary&gt; &#xA; &lt;!-- DOCGEN_IGNORE_END --&gt; &#xA; &lt;p&gt;The installation examples include the &lt;code&gt;build&lt;/code&gt;/&lt;code&gt;run&lt;/code&gt; functions, which get triggered once the plugin updates. This should be sufficient for the majority of users. If that doesn&#39;t include you, then you have a few options:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;just install with the &lt;code&gt;&#34;go&#34;&lt;/code&gt; option (this performs &lt;code&gt;go build&lt;/code&gt; under the hood): &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dbee&#34;).install(&#34;go&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Download an already compiled binary from one of urls in the &lt;a href=&#34;https://raw.githubusercontent.com/kndndrj/nvim-dbee/master/lua/dbee/install/__manifest.lua&#34;&gt;install manifest&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;go install&lt;/code&gt; (the install location will vary depending on your local go configuration): &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/kndndrj/nvim-dbee/dbee@&amp;lt;version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Clone and build &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Clone the repository and cd into the &#34;go subfolder&#34;&#xA;git clone &amp;lt;this_repo&amp;gt;&#xA;cd &amp;lt;this_repo&amp;gt;/dbee&#xA;# Build the binary (optional output path)&#xA;go build [-o ~/.local/share/nvim/dbee/bin/dbee]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;!-- DOCGEN_IGNORE_START --&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- DOCGEN_IGNORE_END --&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can pass an optional table parameter to &lt;code&gt;setup()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Here are the defaults:&lt;/p&gt; &#xA;&lt;!--DOCGEN_CONFIG_START--&gt; &#xA;&lt;!-- Contents from lua/dbee/config.lua are inserted between these tags for docgen. --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kndndrj/nvim-dbee/master/lua/dbee/config.lua&#34;&gt;&lt;code&gt;config.lua&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--DOCGEN_CONFIG_END--&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Call the &lt;code&gt;setup()&lt;/code&gt; function with an optional config parameter.&lt;/p&gt; &#xA;&lt;!-- DOCGEN_IGNORE_START --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Brief reference (click to expand):&lt;/summary&gt; &#xA; &lt;!-- DOCGEN_IGNORE_END --&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Open/close/toggle the UI.&#xA;require(&#34;dbee&#34;).open()&#xA;require(&#34;dbee&#34;).close()&#xA;require(&#34;dbee&#34;).toggle()&#xA;-- Run a query on the currently active connection.&#xA;require(&#34;dbee&#34;).execute(query)&#xA;-- Store the current result to file/buffer/yank-register (see &#34;Getting Started&#34;).&#xA;require(&#34;dbee&#34;).store(format, output, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The same functions are also available through the &lt;code&gt;:Dbee&lt;/code&gt; user command.&lt;/p&gt; &#xA; &lt;!-- DOCGEN_IGNORE_START --&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- DOCGEN_IGNORE_END --&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Here are a few steps to quickly get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;call the &lt;code&gt;setup()&lt;/code&gt; function in your &lt;code&gt;init.lua&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify connections using one or more sources (reffer to &lt;a href=&#34;https://raw.githubusercontent.com/kndndrj/nvim-dbee/master/#specifying-connections&#34;&gt;this section&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you restart the editor, call &lt;code&gt;lua require(&#34;dbee&#34;).open()&lt;/code&gt; to open the UI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the drawer (tree) and use the following key-bindings to perform different actions depending on the context (the mappings can all be changed in the config):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;All nodes:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Press &lt;code&gt;o&lt;/code&gt; to toggle the tree node.&lt;/li&gt; &#xA;     &lt;li&gt;Press &lt;code&gt;r&lt;/code&gt; to manually refresh the tree.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Connections:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Press &lt;code&gt;cw&lt;/code&gt; to edit the connection&lt;/li&gt; &#xA;     &lt;li&gt;Press &lt;code&gt;dd&lt;/code&gt; to delete it (if source supports saving, it&#39;s also removed from there - see more below.)&lt;/li&gt; &#xA;     &lt;li&gt;Press &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to perform an action - view history or look at helper queries. Pressing &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; directly on the connection node will set it as the active one&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Scratchpads:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Press &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; on the &lt;code&gt;new&lt;/code&gt; node to create a new scratchpad.&lt;/li&gt; &#xA;     &lt;li&gt;When you try to save it to disk (&lt;code&gt;:w&lt;/code&gt;), the path is automatically filled for you. You can change the name to anything you want, if you save it to the suggested directory, it will load the next time you open DBee.&lt;/li&gt; &#xA;     &lt;li&gt;Press &lt;code&gt;cw&lt;/code&gt; to rename the scratchpad.&lt;/li&gt; &#xA;     &lt;li&gt;Press &lt;code&gt;dd&lt;/code&gt; to delete it (also from disk).&lt;/li&gt; &#xA;     &lt;li&gt;Pressing &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; on an existing scratchpad in the drawer will open it in the editor pane.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Help:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Just view the key bindings.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once you selected the connection and created a scratchpad, you can navigate to the editor pane (top-right by default) and start writing queries. In editor pane, you can use the following actions:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Highlight some text in visual mode and press &lt;code&gt;BB&lt;/code&gt; - this will run the selected query on the active connection.&lt;/li&gt; &#xA;   &lt;li&gt;If you press &lt;code&gt;BB&lt;/code&gt; in normal mode, you run the whole scratchpad on the active connection.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the request was successful, the results should appear in the &#34;result&#34; buffer (bottom right by default). If the total number of results was lower than the &lt;code&gt;page_size&lt;/code&gt; parameter in config (100 by default), all results should already be present. If there are more than &lt;code&gt;page_size&lt;/code&gt; results, you can &#34;page&#34; thrugh them using one of the following:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using &lt;code&gt;require(&#34;dbee&#34;)api.ui.result_page_next()&lt;/code&gt; and &lt;code&gt;require(&#34;dbee&#34;)api.ui.result_page_prev()&lt;/code&gt; from anywhere (even if your cursor is outside the result buffer).&lt;/li&gt; &#xA;   &lt;li&gt;Using &lt;code&gt;L&lt;/code&gt; for next and &lt;code&gt;H&lt;/code&gt; for previous page if the cursor is located inside the results buffer.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once in the &#34;result&#34; buffer, you can yank the results with the following keys:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;yaj&lt;/code&gt; yank current row as json (or row range in visual mode)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;yac&lt;/code&gt; yank current row as CSV (or row range in visual mode)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;yaJ&lt;/code&gt; to yank all rows as json&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;yaC&lt;/code&gt; to yank all rows as CSV&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The current result (of the active connection) can also be saved to a file, yank-register or buffer using &lt;code&gt;require(&#34;dbee&#34;).store()&lt;/code&gt; lua function or &lt;code&gt;:Dbee store&lt;/code&gt; Ex command. Here are some examples:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- All rows as CSV to current buffer:&#xA;require(&#34;dbee&#34;).store(&#34;csv&#34;, &#34;buffer&#34;, { extra_arg = 0 })&#xA;-- Results from row 2 to row 7 as json to file (index is zero based):&#xA;require(&#34;dbee&#34;).store(&#34;json&#34;, &#34;file&#34;, { from = 2, to = 7, extra_arg = &#34;path/to/file.json&#34;  })&#xA;-- Yank the first row as table&#xA;require(&#34;dbee&#34;).store(&#34;table&#34;, &#34;yank&#34;, { from = 0, to = 1 })&#xA;-- Yank the last 2 rows as CSV&#xA;-- (negative indices are interpreted as length+1+index - same as nvim_buf_get_lines())&#xA;-- Be aware that using negative indices requires for the&#xA;-- iterator of the result to be drained completely, which might affect large result sets.&#xA;require(&#34;dbee&#34;).store(&#34;csv&#34;, &#34;yank&#34;, { from = -3, to = -1 })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once you are done or you want to go back to where you were, you can call &lt;code&gt;require(&#34;dbee&#34;).close()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Specifying Connections&lt;/h3&gt; &#xA;&lt;p&gt;Connection represents an instance of the database client (i.e. one database). This is how it looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  id = &#34;optional_identifier&#34; -- only mandatory if you edit a file by hand. IT&#39;S YOUR JOB TO KEEP THESE UNIQUE!&#xA;  name = &#34;My Database&#34;,&#xA;  type = &#34;sqlite&#34;, -- type of database driver&#xA;  url = &#34;~/path/to/mydb.db&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The connections are loaded to dbee using so-called &#34;sources&#34;. They can be added to dbee using the &lt;code&gt;setup()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  require(&#34;dbee&#34;).setup {&#xA;    sources = {&#xA;      require(&#34;dbee.sources&#34;).MemorySource:new({&#xA;        {&#xA;          name = &#34;...&#34;,&#xA;          type = &#34;...&#34;,&#xA;          url = &#34;...&#34;,&#xA;        },&#xA;        -- ...&#xA;      }),&#xA;      require(&#34;dbee.sources&#34;).EnvSource:new(&#34;DBEE_CONNECTIONS&#34;),&#xA;      require(&#34;dbee.sources&#34;).FileSource:new(vim.fn.stdpath(&#34;cache&#34;) .. &#34;/dbee/persistence.json&#34;),&#xA;    },&#xA;    -- ...&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above sources are just built-ins. Here is a short description of them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;MemorySource&lt;/code&gt; just loads the connections you give it as an argument.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;EnvSource&lt;/code&gt; loads connection from an environment variable Just export the variable you gave to the loader and you are good to go:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  export DBEE_CONNECTIONS=&#39;[&#xA;      {&#xA;          &#34;name&#34;: &#34;DB from env&#34;,&#xA;          &#34;url&#34;: &#34;mysql://...&#34;,&#xA;          &#34;type&#34;: &#34;mysql&#34;&#xA;      }&#xA;  ]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FileSource&lt;/code&gt; loads connections from a given json file. It also supports editing and adding connections interactively&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the source supports saving and editing you can add connections manually using the &#34;add&#34; item in the drawer. Fill in the values and write the buffer (&lt;code&gt;:w&lt;/code&gt;) to save the connection. By default, this will save the connection to the global connections file and will persist over restarts (because default &lt;code&gt;FileSource&lt;/code&gt; supports saving)&lt;/p&gt; &#xA;&lt;p&gt;Another option is to use &#34;edit&#34; item in the tree and just edit the source manually.&lt;/p&gt; &#xA;&lt;p&gt;If you aren&#39;t satisfied with the default capabilities, you can implement your own source. You just need to fill the &lt;code&gt;Source&lt;/code&gt; interface and pass it to config at setup (&lt;code&gt;:h dbee.sources&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Secrets&lt;/h4&gt; &#xA;&lt;p&gt;If you don&#39;t want to have secrets laying around your disk in plain text, you can use the special placeholders in connection strings (this works using any method for specifying connections).&lt;/p&gt; &#xA;&lt;p&gt;Each connection parameter is passed through go templating engine, which has two available functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;env&lt;/code&gt; for retrieving environment variables and&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exec&lt;/code&gt; for evaluating shell commands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The template syntax for functions is the following: &lt;code&gt;{{ &amp;lt;func&amp;gt; &#34;&amp;lt;param&amp;gt;&#34; }}&lt;/code&gt;. If you are dealing with json, you need to escape double quotes, so it&#39;s sometimes better to use backticks instead (&lt;code&gt;{{ &amp;lt;func&amp;gt; `&amp;lt;param&amp;gt;` }}&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;DBEE_CONNECTIONS&lt;/code&gt; environment variable for specifying connections and exporting secrets to environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Define connections&#xA;export DBEE_CONNECTIONS=&#39;[&#xA;    {&#xA;        &#34;name&#34;: &#34;{{ exec `echo Hidden Database` }}&#34;,&#xA;        &#34;url&#34;: &#34;postgres://{{ env \&#34;SECRET_DB_USER\&#34; }}:{{ env `SECRET_DB_PASS` }}@localhost:5432/{{ env `SECRET_DB_NAME` }}?sslmode=disable&#34;,&#xA;        &#34;type&#34;: &#34;postgres&#34;&#xA;    }&#xA;]&#39;&#xA;&#xA;# Export secrets&#xA;export SECRET_DB_NAME=&#34;secretdb&#34;&#xA;export SECRET_DB_USER=&#34;secretuser&#34;&#xA;export SECRET_DB_PASS=&#34;secretpass&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you start neovim in the same shell, this will evaluate to the following connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ {&#xA;  name = &#34;Hidden Database&#34;,&#xA;  url = &#34;postgres://secretuser:secretpass@localhost:5432/secretdb?sslmode=disable&#34;,&#xA;  type = &#34;postgres&#34;,&#xA;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Dbee comes with it&#39;s own API interface. It is split into two parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;core (interacting with core of the plugin),&lt;/li&gt; &#xA; &lt;li&gt;ui (interacting with ui of the plugin).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can access it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dbee&#34;).api.core.some_func()&#xA;require(&#34;dbee&#34;).api.ui.some_func()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Projector Integration&lt;/h2&gt; &#xA;&lt;p&gt;DBee is compatible with my other plugin &lt;a href=&#34;https://github.com/kndndrj/nvim-projector&#34;&gt;nvim-projector&lt;/a&gt;, a code-runner/project-configurator.&lt;/p&gt; &#xA;&lt;p&gt;To use dbee with it, use &lt;a href=&#34;https://github.com/kndndrj/projector-dbee&#34;&gt;this extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- DOCGEN_IGNORE_START --&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Reffer to &lt;a href=&#34;https://raw.githubusercontent.com/kndndrj/nvim-dbee/master/ARCHITECTURE.md&#34;&gt;ARCHITECTURE.md&lt;/a&gt; for a brief overview of the architecture.&lt;/p&gt; &#xA;&lt;!-- DOCGEN_IGNORE_END --&gt;</summary>
  </entry>
  <entry>
    <title>pgosar/CyberNvim</title>
    <updated>2024-01-06T01:35:13Z</updated>
    <id>tag:github.com,2024-01-06:/pgosar/CyberNvim</id>
    <link href="https://github.com/pgosar/CyberNvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CyberNvim: A IDE-like Neovim distribution. Simplicity is Power.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;CyberNvim&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;b&gt;CyberNvim is the world&#39;s simplest and most extensible fully-fledged Neovim distribution.&lt;/b&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pgosar/CyberNvim/assets/55164602/15020588-441d-4ddc-aef3-2bf37e0d7ae1&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h5 align=&#34;center&#34;&gt;&lt;b&gt;CyberNvim Start Screen&lt;/b&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pgosar/CyberNvim/assets/55164602/003c1a80-ea0a-4af4-b1bd-5d0b6729b1c5&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h5 align=&#34;center&#34;&gt;&lt;b&gt;Text editor view&lt;/b&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pgosar/CyberNvim/assets/55164602/ef8bb684-9b85-4afe-81c0-d254100d0db1&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h5 align=&#34;center&#34;&gt;&lt;b&gt;Debugging UI and the Lazygit integration superimposed on top&lt;/b&gt;&lt;/h5&gt; &#xA;&lt;br&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;b&gt;Where simplicity meets power&lt;/b&gt;&lt;/h3&gt; &#xA;&lt;p&gt;CyberNvim is...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple and Extensible&lt;/li&gt; &#xA; &lt;li&gt;Uncompromising in its &lt;a href=&#34;https://raw.githubusercontent.com/pgosar/CyberNvim/main/#fantastic-featureset-good--&#34;&gt;featureset&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CyberNvim is a fully-featured and incredibly easy-to-understand Neovim config. It is a fully-featured IDE-like setup with the same ease of modification as &lt;a href=&#34;https://github.com/nvim-lua/kickstart.nvim&#34;&gt;Kickstart.nvim&lt;/a&gt; but offering the more complete and uncompromising base experience of &lt;a href=&#34;https://github.com/AstroNvim/AstroNvim/tree/main&#34;&gt;Astronvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/LazyVim/LazyVim&#34;&gt;LazyNvim&lt;/a&gt;. Its goal is to be both a ready-to-use editor for everyone, a great starting point for powerusers who want the freedom to possibly overwrite the entire config, and a great example for beginners who want to learn how to configure Neovim.&lt;/p&gt; &#xA;&lt;p&gt;CyberNvim is the most simple and extensible Neovim configuration. At only 1200 lines of code, it is the smallest major Neovim distribution. As the user, you are given the power to go so far as to remove almost every change CyberNvim makes and be left with base Neovim. CyberNvim lets you go farther than &lt;strong&gt;any&lt;/strong&gt; other distribution so you can truly make your Neovim yours.&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;b&gt;Intractable codebase BAD 👎 ☹️&lt;/b&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Why use many lines when few do the trick?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only &lt;b&gt;1200&lt;/b&gt; lines of code&lt;/li&gt; &#xA; &lt;li&gt;Built to be broken&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Zero&lt;/b&gt; compromises in available features&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Minimal&lt;/b&gt; learning curve&lt;/li&gt; &#xA; &lt;li&gt;Plug and go personal configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Despite offering a complete IDE-like feature set, CyberNvim&#39;s codebase is simple, modular, and built to be broken (in a good way). It was made for people who want the convenience of a fully-fledged Neovim configuration and the simplicity and flexibility to make widespread changes even as a beginner programmer. Strict and intuitive code organization makes the codebase especially easy to understand.&lt;/p&gt; &#xA;&lt;p&gt;At only 1200 lines of Lua (as of December 2023), CyberNvim is around 5-7 times smaller than similar distributions (AstroNvim at 6.3k lines of Lua, LunarVim at 8k, LazyVim at 5k etc.). The codebase is built to be understood in less than 10 minutes with simple, self-documenting code and an intuitive file structure. I would call it SpeedyToUnderstandNvim but that doesn&#39;t have the same ring to it.&lt;/p&gt; &#xA;&lt;p&gt;The codebase mainly saves on line count by minimizing unnecessary abstractions wherever possible. One of CyberNvim&#39;s goals is to maintain a minimalistic codebase with a style similar to what many create as their own personal configuration rather than what one would expect in a large software project. This approach is similar to &lt;a href=&#34;https://github.com/NvChad/NvChad/tree/v2.0&#34;&gt;NvChad&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, to lower the learning curve of using the distribution, it avoids completely overhauling Neovim and the included plugins wherever it does not detract from the experience of using CyberNvim. As such, the distribution is easy to learn and should feel familiar to most people. With this in mind, the distribution takes care to ensure that every part of the configuration is easily understandable, extendable, and rewriteable for those that love tailoring every inch of their setup to their specific tastes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt;User configuration can be as simple as copy-pasting your current configuration in the &lt;a href=&#34;https://github.com/pgosar/CyberNvim/wiki/Configuration#predefined-sections&#34;&gt;user conf section&lt;/a&gt;.&lt;/b&gt;&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;b&gt;Fantastic featureset GOOD 👍 🥰&lt;/b&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Including but not limited to...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Incredibly fast speeds!&lt;/li&gt; &#xA; &lt;li&gt;Fully featured intellisense (linters, code formatters, auto-complete, code actions)!&lt;/li&gt; &#xA; &lt;li&gt;floating and inline function documentation, hover support, etc.&lt;/li&gt; &#xA; &lt;li&gt;Auto-save and formatting&lt;/li&gt; &#xA; &lt;li&gt;Persistent and configurable sessions and project management!&lt;/li&gt; &#xA; &lt;li&gt;Fancy start screen&lt;/li&gt; &#xA; &lt;li&gt;Amazing tabline and statusline&lt;/li&gt; &#xA; &lt;li&gt;File explorer and file overview for functions, classes, etc.&lt;/li&gt; &#xA; &lt;li&gt;Git integration with &lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;lazygit&lt;/a&gt; and more&lt;/li&gt; &#xA; &lt;li&gt;Complete inbuilt debugging support&lt;/li&gt; &#xA; &lt;li&gt;Aesthetic UI enhancements!&lt;/li&gt; &#xA; &lt;li&gt;Complete freedom to rewrite the config as you see fit&lt;/li&gt; &#xA; &lt;li&gt;Incredibly easy &lt;a href=&#34;https://github.com/pgosar/CyberNvim-Configuration&#34;&gt;user configuration&lt;/a&gt; setup!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation and Configuration&lt;/h3&gt; &#xA;&lt;p&gt;First, backup (rename, move etc.) your existing nvim configuration. Clone the repository and symlink it with your &lt;code&gt;~/.config/nvim&lt;/code&gt; directory with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/pgosar/CyberNvim&#xA;ln -s ~/path/to/CyberNvim/nvim ~/.config/nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, directly clone it to the nvim folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/pgosar/CyberNvim ~/.config/nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your personal configuration is housed in &lt;code&gt;user/user_config.lua&lt;/code&gt;. Use &lt;code&gt;example_user_config.lua&lt;/code&gt; as a guide to writing your own configuration. As an initial quickstart, I recommend running the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -pv ~/.config/nvim/lua/user&#xA;cp ~/.config/nvim/lua/example_user_config.lua ~/.config/nvim/lua/user/user_config.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can also take a look at my own &lt;a href=&#34;https://github.com/pgosar/CyberNvim-Configuration.git&#34;&gt;configuration&lt;/a&gt;. Simply clone this as your user folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/pgosar/CyberNvim-Configuration.git ~/.config/nvim/lua/user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to backup your personal configuration to git I suggest doing the following. The user folder is gitignored, meaning you can create a new git repository under that folder . CyberNvim will never push changes to your configuration files - at most it will update example_user_config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/.config/nvim/lua/user&#xA;git init&#xA;# setup repository&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once done, Install any language servers, linters, etc. using &lt;code&gt;:MasonInstall&lt;/code&gt; and/or &lt;code&gt;:LspInstall&lt;/code&gt;. Use &lt;code&gt;:CyberUpdate&lt;/code&gt; to update the distribution, including all plugins and parsers. Run &lt;code&gt;:checkhealth&lt;/code&gt; to find any common issues with the installation.&lt;/p&gt; &#xA;&lt;p&gt;Beyond this, if you want to plug your current configuration in, it can be as simple as requiring all your files in the allotted user configuration function (see the &lt;a href=&#34;https://github.com/pgosar/CyberNvim/raw/main/lua/example_user_config.lua&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For more information, be sure to check the repository&#39;s wiki.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/stable&#34;&gt;Neovim 0.8+, built with LuaJIT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optional Dependencies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;A Nerd Font&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;Ripgrep&lt;/a&gt; for live grep in Telescope&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;Lazygit&lt;/a&gt; for the git ui&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/aristocratos/bashtop&#34;&gt;Bashtop&lt;/a&gt; to manage processes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Acknowledgements&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AstroNvim/AstroNvim/tree/main&#34;&gt;Astronvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/LazyVim/LazyVim&#34;&gt;LazyNvim&lt;/a&gt; are two fantastic Neovim distributions that provided the inspiration for this project. They significantly raised the bar for what a modern, fully-fledged Neovim distribution should offer.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Byte-Labs-Project/bl_customs</title>
    <updated>2024-01-06T01:35:13Z</updated>
    <id>tag:github.com,2024-01-06:/Byte-Labs-Project/bl_customs</id>
    <link href="https://github.com/Byte-Labs-Project/bl_customs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bl_customs&lt;/h1&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;bl_customs is a vehicle customization script built using React and TypeScript.&lt;/p&gt; &#xA;&lt;h1&gt;Requirement&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/overextended/ox_lib&#34;&gt;ox_lib&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Byte-Labs-Project/bl_bridge&#34;&gt;bl_bridge&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;Build the source code using &lt;code&gt;pnpm&lt;/code&gt; or download the &lt;a href=&#34;https://github.com/Byte-Labs-Project/bl_customs/releases/tag/v1.0.0&#34;&gt;release&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h1&gt;Note:&lt;/h1&gt; &#xA;&lt;p&gt;The prices for mods, as defined in the configuration, correspond to the price of the last mod index. For example, if a spoiler has four options, the prices for each option will be calculated based on the number of mods, with the last mod having the specified price.&lt;/p&gt; &#xA;&lt;h1&gt;Preview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://streamable.com/jkieot&#34;&gt;https://streamable.com/jkieot&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Discord/Support&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://discord.gg/HGFSzQuHSJ&#34;&gt;Byte Labs&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
</feed>