<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-26T01:35:23Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Chaitanyabsprip/fastaction.nvim</title>
    <updated>2025-04-26T01:35:23Z</updated>
    <id>tag:github.com,2025-04-26:/Chaitanyabsprip/fastaction.nvim</id>
    <link href="https://github.com/Chaitanyabsprip/fastaction.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Efficiency plugin designed to optimize code actions in Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FastAction.nvim&lt;/h1&gt; &#xA;&lt;p&gt;FastAction.nvim is a sleek, efficiency plugin designed to optimize code actions in Neovim. By leveraging Neovim&#39;s built-in LSP capabilities, it offers a simple and intuitive interface that enhances your coding experience.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Popup Interface&lt;/strong&gt;: Display code actions in a customizable popup window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keybindings&lt;/strong&gt;: Configure keys to quickly dismiss or select code actions, making your workflow more efficient.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Priority Handling&lt;/strong&gt;: Customize the display order of actions based on priority, ensuring the most used actions are always visible on top.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible Selection&lt;/strong&gt;: Extendable selection prompt that can replace Neovim&#39;s built-in &lt;code&gt;vim.ui.select&lt;/code&gt;, providing more versatility in how you interact with lists&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  {&#xA;      &#39;Chaitanyabsprip/fastaction.nvim&#39;,&#xA;      ---@type FastActionConfig&#xA;      opts = {},&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;fastaction.nvim&lt;/strong&gt; comes with sensible defaults to get you started quickly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  dismiss_keys = { &#34;j&#34;, &#34;k&#34;, &#34;&amp;lt;c-c&amp;gt;&#34;, &#34;q&#34; },&#xA;  override_function = function(_) end,&#xA;  keys = &#34;qwertyuiopasdfghlzxcvbnm&#34;,&#xA;  popup = {&#xA;    border = &#34;rounded&#34;,&#xA;    hide_cursor = true,&#xA;    highlight = {&#xA;      divider = &#34;FloatBorder&#34;,&#xA;      key = &#34;MoreMsg&#34;,&#xA;      title = &#34;Title&#34;,&#xA;      window = &#34;NormalFloat&#34;,&#xA;    },&#xA;    title = &#34;Select one of:&#34;,&#xA;  },&#xA;  priority = {&#xA;    -- dart = {&#xA;    --   { pattern = &#34;organize import&#34;, key =&#34;o&#34;, order = 1 },&#xA;    --   { pattern = &#34;extract method&#34;, key =&#34;x&#34;, order = 2 },&#xA;    --   { pattern = &#34;extract widget&#34;, key =&#34;e&#34;, order = 3 },&#xA;    -- },&#xA;  },&#xA; register_ui_select = false,&#xA; format_right_section = nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The order key in the priority table determines the position of that match in the code actions selection prompt. Lower number means higher up in the prompt.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example Configuration&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  dismiss_keys = { &#34;j&#34;, &#34;k&#34;, &#34;&amp;lt;c-c&amp;gt;&#34;, &#34;q&#34; },&#xA;  override_function = function(params) -- to retain built-in style keymaps&#xA;      params.invalid_keys[#params.invalid_keys + 1] = tostring(#params.invalid_keys + 1)&#xA;      return { key = tostring(#params.invalid_keys), order = 0 }&#xA;  end,&#xA;  keys = &#34;asdfghlzxcvbnm&#34;,&#xA;  popup = {&#xA;    border = &#34;rounded&#34;,&#xA;    hide_cursor = true,&#xA;    highlight = {&#xA;      divider = &#34;FloatBorder&#34;,&#xA;      key = &#34;MoreMsg&#34;,&#xA;      title = &#34;Title&#34;,&#xA;      window = &#34;NormalFloat&#34;,&#xA;    },&#xA;    title = &#34;Select one of:&#34;, -- or false to disable title&#xA;  },&#xA;  priority = {&#xA;    dart = {&#xA;      { pattern = &#34;organize import&#34;, key =&#34;o&#34;, order = 1 },&#xA;      { pattern = &#34;extract method&#34;, key =&#34;x&#34;, order = 2 },&#xA;      { pattern = &#34;extract widget&#34;, key =&#34;e&#34;, order = 3 },&#xA;    },&#xA;    typescript = {&#xA;      { pattern = &#39;to existing import declaration&#39;, key = &#39;a&#39;, order = 2 },&#xA;      { pattern = &#39;from module&#39;, key = &#39;i&#39;, order = 1 },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;fastaction.nvim&lt;/strong&gt; exposes three function apart from setup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;code_action()&lt;/code&gt;: Displays code actions in a popup window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;select(items: any, opts: SelectOpts, on_choice: fun(item: any))&lt;/code&gt;: Displays a selection prompt window for items.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To integrate these functions with your LSP mappings, add the following to your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    vim.keymap.set(&#xA;        { &#39;n&#39;, &#39;x&#39; },&#xA;        &#39;&amp;lt;leader&amp;gt;a&#39;,&#xA;        &#39;&amp;lt;cmd&amp;gt;lua require(&#34;fastaction&#34;).code_action()&amp;lt;CR&amp;gt;&#39;,&#xA;        { buffer = bufnr }&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;require(&#39;fastaction&#39;).select&lt;/code&gt; as a replacement for &lt;code&gt;vim.ui.select&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/18aadd07-73fe-4d62-885e-b5e4d3a4bfc4&#34; alt=&#34;code-action&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;fastaction.nvim&lt;/strong&gt; enhances the selection process by assigning key mappings to each option in the selection prompt. Here&#39;s how it achieves this:&lt;/p&gt; &#xA;&lt;h3&gt;Intelligent key mapping&lt;/h3&gt; &#xA;&lt;p&gt;For each option, the plugin selects a key mapping based on the priority configuration. If no priority is set, it falls back to using the letters in the option&#39;s title. For example, if the option is &#34;organize imports,&#34; the plugin first checks if the &#39;o&#39; key is available. If &#39;o&#39; is taken, it moves to the next letter, &#39;r,&#39; and so on, until it finds an available key The code_action function are essentially using the stylized prompt to choose from the available code actions.&lt;/p&gt; &#xA;&lt;h3&gt;Streamlined Code Actions&lt;/h3&gt; &#xA;&lt;p&gt;The code_action function utilize this intelligent prompt to display and select from the available code actions efficiently. By leveraging this stylized prompt, FastAction.nvim ensures a smoother and more intuitive selection process, making your coding experience more fluid and enjoyable.&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;This repository is a fork of &lt;a href=&#34;https://github.com/nvim-pack/lsp-fastaction.nvim&#34;&gt;nvim-pack/lsp-fastaction.nvim&lt;/a&gt; building on its foundations to provide an even more streamlined and efficient experience.&lt;/p&gt;</summary>
  </entry>
</feed>