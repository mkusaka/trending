<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-12T01:34:57Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>letieu/btw.nvim</title>
    <updated>2024-04-12T01:34:57Z</updated>
    <id>tag:github.com,2024-04-12:/letieu/btw.nvim</id>
    <link href="https://github.com/letieu/btw.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;I use Neovim (BTW)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;btw.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Show &lt;strong&gt;&#34;I use Neovim (BTW)&#34;&lt;/strong&gt; when &lt;strong&gt;open neovim&lt;/strong&gt;. That&#39;s all you need.&lt;/p&gt; &#xA;&lt;img width=&#34;1336&#34; alt=&#34;Screenshot 2024-04-10 at 11 32 10 PM&#34; src=&#34;https://github.com/letieu/btw.nvim/assets/53562817/f61b39e2-46fc-4d1c-b0f8-8a0a04d42b1f&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Why bother with &lt;strong&gt;mini.starter&lt;/strong&gt;, &lt;strong&gt;vim-startify&lt;/strong&gt;, &lt;strong&gt;dashboard-nvim&lt;/strong&gt;, or any of those distractions? I know you, my friend. Forget about all that noise – all you truly need is &lt;code&gt;I use Neovim (BTW)&lt;/code&gt;. Embrace it proudly, and let your ego shine!&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;-- ChatGPT&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instant Ego Boost&lt;/strong&gt;: Get greeted with &#34;I use neovim (BTW)&#34; on launch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;strong&gt;lazy.nvim&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;letieu/btw.nvim&#34;,&#xA;  config = function()&#xA;    require(&#39;btw&#39;).setup()&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;strong&gt;packer.nvim&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;letieu/btw.nvim&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: don&#39;t forget to call &lt;code&gt;require(&#39;btw&#39;).setup()&lt;/code&gt; to enable its functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;btw&#39;).setup({&#xA;  text = &#34;I use Neovim (BTW)&#34;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inspiration and Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.starter&#34;&gt;mini.starter&lt;/a&gt;&lt;/strong&gt; by @echasnovski for code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Github Copilot&lt;/strong&gt; for code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt; for &lt;code&gt;README.md&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>vm-001/lua-radix-router</title>
    <updated>2024-04-12T01:34:57Z</updated>
    <id>tag:github.com,2024-04-12:/vm-001/lua-radix-router</id>
    <link href="https://github.com/vm-001/lua-radix-router" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight high-performance and radix tree based router for Lua/LuaJIT/OpenResty https://github.com/vm-001/gateways-routing-benchmark&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;special sponsor appwrite&#34; src=&#34;https://raw.githubusercontent.com/vm-001/lua-radix-router/main/lua-radix-router.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Lua-Radix-Router &lt;a href=&#34;https://github.com/vm-001/lua-radix-router/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/vm-001/lua-radix-router/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vm-001/lua-radix-router/actions/workflows/examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/vm-001/lua-radix-router/actions/workflows/examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/vm-001/lua-radix-router&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/vm-001/lua-radix-router/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Lua-%205.2%20%7C%205.3%20%7C%205.4-blue.svg?sanitize=true&#34; alt=&#34;Lua Versions&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/vm-001/lua-radix-router/main/README.zh.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lua-Radix-Router is a lightweight high-performance router library written in pure Lua. It&#39;s easy to use with only two exported functions, &lt;code&gt;Router.new()&lt;/code&gt; and &lt;code&gt;router:match()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The router is optimized for high performance. It combines HashTable(O(1)) and Compressed Trie(or Radix Tree, O(m) where m is the length of path being searched) for efficient matching. Some of the utility functions have the LuaJIT version for better performance, and will automatically switch when running in LuaJIT. It also scales well even with long paths and a large number of routes.&lt;/p&gt; &#xA;&lt;p&gt;The router can be run in different runtimes such as Lua, LuaJIT, or OpenResty.&lt;/p&gt; &#xA;&lt;p&gt;This library is considered production ready.&lt;/p&gt; &#xA;&lt;h2&gt;🔨 Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Patterned path:&lt;/strong&gt; You can define named or unnamed patterns in path with pattern syntax &#34;{}&#34; and &#34;{*}&#34;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;named variables: &lt;code&gt;/users/{id}/profile-{year}.{format}&lt;/code&gt;, matches with /users/1/profile-2024.html.&lt;/li&gt; &#xA; &lt;li&gt;named prefix: &lt;code&gt;/api/authn/{*path}&lt;/code&gt;, matches with /api/authn/foo and /api/authn/foo/bar.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Variable binding:&lt;/strong&gt; Stop manually parsing the URL, let the router injects the binding variables for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Best performance:&lt;/strong&gt; The fastest router in Lua/LuaJIT and open-source API Gateways. See &lt;a href=&#34;https://raw.githubusercontent.com/vm-001/lua-radix-router/main/#-Benchmarks&#34;&gt;Benchmarks&lt;/a&gt; and &lt;a href=&#34;https://github.com/vm-001/gateways-routing-benchmark&#34;&gt;Routing Benchmark&lt;/a&gt; in different API Gateways.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenAPI friendly:&lt;/strong&gt; OpenAPI(Swagger) is fully compatible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Trailing slash match:&lt;/strong&gt; You can make the Router to ignore the trailing slash by setting &lt;code&gt;trailing_slash_match&lt;/code&gt; to true. For example, /foo/ to match the existing /foo, /foo to match the existing /foo/.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Custom Matcher:&lt;/strong&gt; The router has two efficient matchers built in, MethodMatcher(&lt;code&gt;method&lt;/code&gt;) and HostMatcher(&lt;code&gt;host&lt;/code&gt;). They can be disabled via &lt;code&gt;opts.matcher_names&lt;/code&gt;. You can also add your custom matchers via &lt;code&gt;opts.matchers&lt;/code&gt;. For example, an IpMatcher to evaluate whether the &lt;code&gt;ctx.ip&lt;/code&gt; is matched with the &lt;code&gt;ips&lt;/code&gt; of a route.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Regex pattern:&lt;/strong&gt; You can define regex pattern in variables. a variable without regex pattern is treated as &lt;code&gt;[^/]+&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/users/{uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/users/{id:\\d+}/profile-{year:\\d{4}}.{format:(html|pdf)}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features in the roadmap&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expression condition: defines custom matching conditions by using expression language.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📖 Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Install radix-router via LuaRocks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;luarocks install radix-router&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or from source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get started by an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Router = require &#34;radix-router&#34;&#xA;local router, err = Router.new({&#xA;  { -- static path&#xA;    paths = { &#34;/foo&#34;, &#34;/foo/bar&#34;, &#34;/html/index.html&#34; },&#xA;    handler = &#34;1&#34; -- handler can be any non-nil value. (e.g. boolean, table, function)&#xA;  },&#xA;  { -- variable path&#xA;    paths = { &#34;/users/{id}/profile-{year}.{format}&#34; },&#xA;    handler = &#34;2&#34;&#xA;  },&#xA;  { -- prefix path&#xA;    paths = { &#34;/api/authn/{*path}&#34; },&#xA;    handler = &#34;3&#34;&#xA;  },&#xA;  { -- methods condition&#xA;    paths = { &#34;/users/{id}&#34; },&#xA;    methods = { &#34;POST&#34; },&#xA;    handler = &#34;4&#34;&#xA;  }&#xA;})&#xA;if not router then&#xA;  error(&#34;failed to create router: &#34; .. err)&#xA;end&#xA;&#xA;assert(&#34;1&#34; == router:match(&#34;/html/index.html&#34;))&#xA;assert(&#34;2&#34; == router:match(&#34;/users/100/profile-2023.pdf&#34;))&#xA;assert(&#34;3&#34; == router:match(&#34;/api/authn/token/genreate&#34;))&#xA;assert(&#34;4&#34; == router:match(&#34;/users/100&#34;, { method = &#34;POST&#34; }))&#xA;&#xA;-- variable binding&#xA;local params = {}&#xA;router:match(&#34;/users/100/profile-2023.pdf&#34;, nil, params)&#xA;assert(params.year == &#34;2023&#34;)&#xA;assert(params.format == &#34;pdf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more usage samples, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/vm-001/lua-radix-router/main/examples&#34;&gt;/examples&lt;/a&gt; directory. For more use cases, please check out &lt;a href=&#34;https://github.com/vm-001/lua-radix-router-use-cases&#34;&gt;lua-radix-router-use-cases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📄 Methods&lt;/h2&gt; &#xA;&lt;h3&gt;new&lt;/h3&gt; &#xA;&lt;p&gt;Creates a radix router instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local router, err = Router.new(routes, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;routes&lt;/strong&gt; (&lt;code&gt;table|nil&lt;/code&gt;): the array-like Route table.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;opts&lt;/strong&gt; (&lt;code&gt;table|nil&lt;/code&gt;): the object-like Options table.&lt;/p&gt; &lt;p&gt;The available options are as follow&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;NAME&lt;/th&gt; &#xA;     &lt;th&gt;TYPE&lt;/th&gt; &#xA;     &lt;th&gt;DEFAULT&lt;/th&gt; &#xA;     &lt;th&gt;DESCRIPTION&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;trailing_slash_match&lt;/td&gt; &#xA;     &lt;td&gt;boolean&lt;/td&gt; &#xA;     &lt;td&gt;false&lt;/td&gt; &#xA;     &lt;td&gt;whether to enable the trailing slash match behavior&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;matcher_names&lt;/td&gt; &#xA;     &lt;td&gt;table&lt;/td&gt; &#xA;     &lt;td&gt;{&#34;method&#34;,&#34;host&#34;}&lt;/td&gt; &#xA;     &lt;td&gt;enabled built-in macher list&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;matchers&lt;/td&gt; &#xA;     &lt;td&gt;table&lt;/td&gt; &#xA;     &lt;td&gt;{ }&lt;/td&gt; &#xA;     &lt;td&gt;custom matcher list&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Route defines the matching conditions for its handler.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;PROPERTY&lt;/th&gt; &#xA;   &lt;th&gt;DESCRIPTION&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;paths&lt;/code&gt;&lt;br&gt; &lt;em&gt;required*&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list of paths that match the Route.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;methods&lt;/code&gt;&lt;br&gt; &lt;em&gt;optional&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list of HTTP methods that match the Route. &lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hosts&lt;/code&gt;&lt;br&gt; &lt;em&gt;optional&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list of hostnames that match the Route. Note that the value is case-sensitive. Wildcard hostnames are supported. For example, &lt;code&gt;*.foo.com&lt;/code&gt; can match with &lt;code&gt;a.foo.com&lt;/code&gt; or &lt;code&gt;a.b.foo.com&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;handler&lt;/code&gt;&lt;br&gt; &lt;em&gt;required*&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The value of handler will be returned by &lt;code&gt;router:match()&lt;/code&gt; when the route is matched.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;priority&lt;/code&gt;&lt;br&gt; &lt;em&gt;optional&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The priority of the route in case of radix tree node conflict.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;match&lt;/h3&gt; &#xA;&lt;p&gt;Return the handler of a matched route that matches the path and condition ctx.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local handler = router:match(path, ctx, params, matched)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;(&lt;code&gt;string&lt;/code&gt;): the path to use for matching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ctx&lt;/strong&gt;(&lt;code&gt;table|nil&lt;/code&gt;): the optional condition ctx to use for matching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;(&lt;code&gt;table|nil&lt;/code&gt;): the optional table to use for storing the parameters binding result.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;matched&lt;/strong&gt;(&lt;code&gt;table|nil&lt;/code&gt;): the optional table to use for storing the matched conditions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📝 Examples&lt;/h2&gt; &#xA;&lt;h4&gt;Regex pattern&lt;/h4&gt; &#xA;&lt;p&gt;Using regex to define the pattern of a variable. Note that at most one URL segment is evaluated when matching a variable&#39;s pattern, which means it&#39;s not allowed to define a pattern crossing multiple URL segments, for example, &lt;code&gt;{var:[/0-9a-z]+}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Router = require &#34;radix-router&#34;&#xA;local router = Router.new({&#xA;  {&#xA;    paths = { &#34;/users/{id:\\d+}/profile-{year:\\d{4}}.{format:(html|pdf)}&#34; },&#xA;    handler = &#34;1&#34;&#xA;  },&#xA;  {&#xA;    paths = { &#34;/users/{uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}}&#34; },&#xA;    handler = &#34;2&#34;&#xA;  },&#xA;})&#xA;assert(&#34;1&#34; == router:match(&#34;/users/100/profile-2024.pdf&#34;))&#xA;assert(&#34;2&#34; == router:match(&#34;/users/00000000-0000-0000-0000-000000000000&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🧠 Data Structure and Implementation&lt;/h2&gt; &#xA;&lt;p&gt;Inside the Router, it has a hash-like table to optimize the static path matching. Due to the LuaJIT optimization, static path matching is the fastest and has lower memory usage. (see &lt;a href=&#34;https://raw.githubusercontent.com/vm-001/lua-radix-router/main/#-Benchmarks&#34;&gt;Benchmarks&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;The Router also has a tree structure for patterned path matching. The tree is basically a compact &lt;a href=&#34;https://en.wikipedia.org/wiki/Trie&#34;&gt;prefix tree&lt;/a&gt; (or &lt;a href=&#34;https://en.wikipedia.org/wiki/Radix_tree&#34;&gt;Radix Tree&lt;/a&gt;). The primary structure of Router is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  static&amp;lt;Table&amp;gt;   = {},&#xA;  trie&amp;lt;TrieNode&amp;gt;  = TrieNode.new(),&#xA;  ...&#xA;}&#xA;&#xA;+--------+----------+------------------------------------+&#xA;| FIELD  |   TYPE   |                DESC                |&#xA;+--------+----------+------------------------------------+&#xA;| static | table    | a hash-like table for static paths |&#xA;| trie   | TrieNode | a radix tree for pattern paths     |&#xA;+--------+----------+------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TrieNode is an array-like table. Compared with the hash-like, it reduces memory usage by 20%. The data structure of TrieNode is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{ &amp;lt;type&amp;gt;, &amp;lt;path&amp;gt;, &amp;lt;pathn&amp;gt;, &amp;lt;children&amp;gt;, &amp;lt;value&amp;gt; }&#xA;&#xA;+-------+----------+------------------+&#xA;| INDEX |   NAME   |       TYPE       |&#xA;+-------+----------+------------------+&#xA;|     1 | type     | integer          |&#xA;|     2 | path     | string           |&#xA;|     3 | pathn    | integer          |&#xA;|     4 | children | hash-like table  |&#xA;|     5 | value    | array-like table |&#xA;+-------+----------+------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nodes with a common prefix share a common parent. Here is an example of what a Router with three routes could look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local router = Router.new({&#xA;  { -- &amp;lt;table 1&amp;gt;&#xA;    paths = { &#34;/api/login&#34; },&#xA;    handler = &#34;1&#34;,&#xA;  }, { -- &amp;lt;table 2&amp;gt;&#xA;    paths = { &#34;/people/{id}/profile&#34; },&#xA;    handler = &#34;2&#34;,&#xA;  }, { -- &amp;lt;table 3&amp;gt;&#xA;    paths = { &#34;/search/{query}&#34;, &#34;/src/{*filename}&#34; },&#xA;    handler = &#34;3&#34;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;router.static = {&#xA;  [/api/login] = { *&amp;lt;table 1&amp;gt; }&#xA;}&#xA;&#xA;              TrieNode.path       TrieNode.value&#xA;router.trie = /                   nil&#xA;              ├─people/           nil&#xA;              │ └─{wildcard}      nil&#xA;              │   └─/profile      { &#34;/people/{id}/profile&#34;,  *&amp;lt;table 2&amp;gt; }&#xA;              └─s                 nil&#xA;               ├─earch/           nil&#xA;               │ └─{wildcard}     { &#34;/search/{query}&#34;,       *&amp;lt;table 3&amp;gt; }&#xA;               └─rc/              nil&#xA;                 └─{catchall}     { &#34;/src/{*filename}&#34;,      *&amp;lt;table 3&amp;gt; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Benchmarks&lt;/h2&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;To run the benchmark&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-$&#34;&gt;$ make install&#xA;$ make bench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Environments&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple MacBook Pro(M1 Pro), 32GB&lt;/li&gt; &#xA; &lt;li&gt;LuaJIT 2.1.1700008891&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Results&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;test case&lt;/th&gt; &#xA;   &lt;th&gt;route number&lt;/th&gt; &#xA;   &lt;th&gt;ns/op&lt;/th&gt; &#xA;   &lt;th&gt;OPS&lt;/th&gt; &#xA;   &lt;th&gt;RSS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;static path&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;0.0171333&lt;/td&gt; &#xA;   &lt;td&gt;58,365,872&lt;/td&gt; &#xA;   &lt;td&gt;48.69 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simple variable&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;0.0844033&lt;/td&gt; &#xA;   &lt;td&gt;11,847,877&lt;/td&gt; &#xA;   &lt;td&gt;99.97 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simple variable&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;0.087095&lt;/td&gt; &#xA;   &lt;td&gt;11,481,675&lt;/td&gt; &#xA;   &lt;td&gt;1000.41 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simple prefix&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;0.0730344&lt;/td&gt; &#xA;   &lt;td&gt;13,692,177&lt;/td&gt; &#xA;   &lt;td&gt;99.92 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simple regex&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;0.14444&lt;/td&gt; &#xA;   &lt;td&gt;6,923,289&lt;/td&gt; &#xA;   &lt;td&gt;126.64 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;complex variable&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;0.858975&lt;/td&gt; &#xA;   &lt;td&gt;1,164,178&lt;/td&gt; &#xA;   &lt;td&gt;140.08 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simple variable binding&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;0.1843245&lt;/td&gt; &#xA;   &lt;td&gt;5,425,214&lt;/td&gt; &#xA;   &lt;td&gt;99.94 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github&lt;/td&gt; &#xA;   &lt;td&gt;609&lt;/td&gt; &#xA;   &lt;td&gt;0.38436&lt;/td&gt; &#xA;   &lt;td&gt;2,601,727&lt;/td&gt; &#xA;   &lt;td&gt;2.69 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand output&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;RADIX_ROUTER_ROUTES=100000 RADIX_ROUTER_TIMES=10000000 luajit benchmark/static-paths.lua&#xA;========== static path ==========&#xA;routes  :&#x9;100000&#xA;times   :&#x9;10000000&#xA;elapsed :&#x9;0.171333 s&#xA;QPS     :&#x9;58365872&#xA;ns/op   :&#x9;0.0171333 ns&#xA;path    :&#x9;/50000&#xA;handler :&#x9;50000&#xA;Memory  :&#x9;48.69 MB&#xA;&#xA;RADIX_ROUTER_ROUTES=100000 RADIX_ROUTER_TIMES=10000000 luajit benchmark/simple-variable.lua&#xA;========== variable ==========&#xA;routes  :&#x9;100000&#xA;times   :&#x9;10000000&#xA;elapsed :&#x9;0.844033 s&#xA;QPS     :&#x9;11847877&#xA;ns/op   :&#x9;0.0844033 ns&#xA;path    :&#x9;/1/foo&#xA;handler :&#x9;1&#xA;Memory  :&#x9;99.97 MB&#xA;&#xA;RADIX_ROUTER_ROUTES=1000000 RADIX_ROUTER_TIMES=10000000 luajit benchmark/simple-variable.lua&#xA;========== variable ==========&#xA;routes  :&#x9;1000000&#xA;times   :&#x9;10000000&#xA;elapsed :&#x9;0.870953 s&#xA;QPS     :&#x9;11481675&#xA;ns/op   :&#x9;0.0870953 ns&#xA;path    :&#x9;/1/foo&#xA;handler :&#x9;1&#xA;Memory  :&#x9;1000.41 MB&#xA;&#xA;RADIX_ROUTER_ROUTES=100000 RADIX_ROUTER_TIMES=10000000 luajit benchmark/simple-prefix.lua&#xA;========== prefix ==========&#xA;routes  :&#x9;100000&#xA;times   :&#x9;10000000&#xA;elapsed :&#x9;0.730344 s&#xA;QPS     :&#x9;13692177&#xA;ns/op   :&#x9;0.0730344 ns&#xA;path    :&#x9;/1/a&#xA;handler :&#x9;1&#xA;Memory  :&#x9;99.92 MB&#xA;&#xA;RADIX_ROUTER_ROUTES=100000 RADIX_ROUTER_TIMES=1000000 luajit benchmark/simple-regex.lua&#xA;========== regex ==========&#xA;routes  :&#x9;100000&#xA;times   :&#x9;1000000&#xA;elapsed :&#x9;0.14444 s&#xA;QPS     :&#x9;6923289&#xA;ns/op   :&#x9;0.14444 ns&#xA;path    :&#x9;/1/a&#xA;handler :&#x9;1&#xA;Memory  :&#x9;126.64 MB&#xA;&#xA;RADIX_ROUTER_ROUTES=100000 RADIX_ROUTER_TIMES=1000000 luajit benchmark/complex-variable.lua&#xA;========== variable ==========&#xA;routes  :&#x9;100000&#xA;times   :&#x9;1000000&#xA;elapsed :&#x9;0.858975 s&#xA;QPS     :&#x9;1164178&#xA;ns/op   :&#x9;0.858975 ns&#xA;path    :&#x9;/aa/bb/cc/dd/ee/ff/gg/hh/ii/jj/kk/ll/mm/nn/oo/pp/qq/rr/ss/tt/uu/vv/ww/xx/yy/zz50000&#xA;handler :&#x9;50000&#xA;Memory  :&#x9;140.08 MB&#xA;&#xA;RADIX_ROUTER_ROUTES=100000 RADIX_ROUTER_TIMES=10000000 luajit benchmark/simple-variable-binding.lua&#xA;========== variable ==========&#xA;routes  :&#x9;100000&#xA;times   :&#x9;10000000&#xA;elapsed :&#x9;1.843245 s&#xA;QPS     :&#x9;5425214&#xA;ns/op   :&#x9;0.1843245 ns&#xA;path    :&#x9;/1/foo&#xA;handler :&#x9;1&#xA;params : name = foo&#xA;Memory  :&#x9;99.94 MB&#xA;&#xA;RADIX_ROUTER_TIMES=1000000 luajit benchmark/github-routes.lua&#xA;========== github apis ==========&#xA;routes  :&#x9;609&#xA;times   :&#x9;1000000&#xA;elapsed :&#x9;0.38436 s&#xA;QPS     :&#x9;2601727&#xA;ns/op   :&#x9;0.38436 ns&#xA;path    :&#x9;/repos/vm-001/lua-radix-router/import&#xA;handler :&#x9;/repos/{owner}/{repo}/import&#xA;Memory  :&#x9;2.69 MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;BSD 2-Clause License&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2024, Yusheng Li&lt;/p&gt;</summary>
  </entry>
</feed>