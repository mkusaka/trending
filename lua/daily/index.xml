<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-25T01:38:46Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ecthelionvi/NeoComposer.nvim</title>
    <updated>2023-04-25T01:38:46Z</updated>
    <id>tag:github.com,2023-04-25:/ecthelionvi/NeoComposer.nvim</id>
    <link href="https://github.com/ecthelionvi/NeoComposer.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin that simplifies macros, enhancing productivity with harmony.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; üéª NeoComposer.nvim &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://www.lua.org&#34;&gt; &lt;img alt=&#34;Lua&#34; src=&#34;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://neovim.io/&#34;&gt; &lt;img alt=&#34;Neovim&#34; src=&#34;https://img.shields.io/badge/NeoVim-%2357A143.svg?&amp;amp;style=for-the-badge&amp;amp;logo=neovim&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ecthelionvi/Images/main/NeoComposer.png&#34; alt=&#34;NeoComposer&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üéµ Introduction&lt;/h2&gt; &#xA;&lt;p&gt;NeoComposer is a Neovim plugin that streamlines macro management and execution with a customizable Status Line Component and Telescope Extension.&lt;/p&gt; &#xA;&lt;h2&gt;üéπ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View the status of your macros interactively with the status component&lt;/li&gt; &#xA; &lt;li&gt;Browse, search, and manage macros using the Telescope extension&lt;/li&gt; &#xA; &lt;li&gt;Delay playback to ensure proper macro execution&lt;/li&gt; &#xA; &lt;li&gt;Edit macros in an interactive buffer&lt;/li&gt; &#xA; &lt;li&gt;Queue, yank, and delete macros&lt;/li&gt; &#xA; &lt;li&gt;Stop macros during playback&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üêî Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kkharji/sqlite.lua&#34;&gt;sqlite.lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü•ö Optional Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;Lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üî≠ Telescope&lt;/h2&gt; &#xA;&lt;p&gt;Install the Telescope Extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).load_extension(&#39;macros&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch the Telescope extension using the &lt;code&gt;Telescope macros&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope macros&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keymap&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yq&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yank the currently selected macro, in human readable format (normal)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Queue the currently selected macro (insert, normal)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;c-d&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete the currently selected macro (insert)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete the currently selected macro&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üö• Status Line&lt;/h2&gt; &#xA;&lt;p&gt;NeoComposer provides an easy way to display the recording, playback, and delay status in your status line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ecthelionvi/Images/main/StatusLine.png&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;NeoComposer.ui&#39;).status_recording()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;Lualine&lt;/a&gt; Config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lualine_c = {&#xA;&#x9;{ require(&#39;NeoComposer.ui&#39;).status_recording },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üê¢ Delay Timer&lt;/h2&gt; &#xA;&lt;p&gt;For complex macros over large counts, you can toggle a delay between macro playback using the &lt;code&gt;ToggleDelay&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:ToggleDelay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ecthelionvi/Images/main/Delay.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üí≠ Popup Menu&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;toggle_macro_menu&lt;/code&gt; keybind &lt;code&gt;&amp;lt;m-q&amp;gt;&lt;/code&gt; to open the interactive popup macro menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ecthelionvi/Images/main/Popup.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üîç Macro Preview&lt;/h2&gt; &#xA;&lt;p&gt;As you cycle your available macros with the &lt;code&gt;cycle_next&lt;/code&gt;: &lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt; and &lt;code&gt;cycle_prev&lt;/code&gt;: &lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt; keybinds the queued macro will be previewed in the buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ecthelionvi/Images/main/Preview.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü™Ñ Usage&lt;/h2&gt; &#xA;&lt;p&gt;NeoComposer designates macro number &lt;code&gt;1&lt;/code&gt; as &lt;code&gt;queued&lt;/code&gt; for quick access and execution.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Keymap&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;play_macro&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Plays queued macro&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;stop_macro&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cq&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Halts macro playback&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_macro_menu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;m-q&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggles popup macro menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cycle_next&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cycles available macros forward&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cycle_prev&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cycles available macros backward&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_record&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Starts recording, press again to end recording&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yank_macro&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yq&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yank the currently selected macro, in human readable format into the default register&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Edit your macros in a more comprehensive way with the &lt;code&gt;EditMacros&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:EditMacros&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clear the list of macros with the &lt;code&gt;ClearNeoComposer&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:ClearNeoComposer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install via your favorite package manager.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lua&#34;&gt;{&#xA;  &#34;ecthelionvi/NeoComposer.nvim&#34;,&#xA;  dependencies = { &#34;kkharji/sqlite.lua&#34; },&#xA;  opts = {}&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lua&#34;&gt;use {&#xA;  &#34;ecthelionvi/NeoComposer.nvim&#34;,&#xA;  requires = { &#34;kkharji/sqlite.lua&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Setup the plugin in your &lt;code&gt;init.lua&lt;/code&gt;. Skip this step if you are using lazy.nvim with opts set as above.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lua&#34;&gt;require(&#34;NeoComposer&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üîß Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can pass your config table into the &lt;code&gt;setup()&lt;/code&gt; function or &lt;code&gt;opts&lt;/code&gt; if you use lazy.nvim.&lt;/p&gt; &#xA;&lt;p&gt;The available options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Keymap&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable/Disable notifications&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;delay_timer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;150&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Time in &lt;code&gt;ms&lt;/code&gt; between macro playback when Delay Enabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;status_bg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;#16161e&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Background color of status line component&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;preview_fg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;#ff9e64&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Foreground color of macro preview text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_macro_menu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;m-q&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggles popup macro menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;play_macro&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Play queued macro&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yank_macro&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yq&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yank the currently selected macro, in human readable format into the default register&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;stop_macro&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cq&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Halts macro playback&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_record&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Starts recording, press again to end recording&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cycle_next&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cycles available macros forward&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cycle_prev&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cycles available macros backward&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Default Config&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lua&#34;&gt;local config = {&#xA;  notify = true,&#xA;  delay_timer = 150,&#xA;  colors = {&#xA;    bg = &#34;#16161e&#34;,&#xA;    fg = &#34;#ff9e64&#34;,&#xA;    red = &#34;#ec5f67&#34;,&#xA;    blue = &#34;#5fb3b3&#34;,&#xA;    green = &#34;#99c794&#34;,&#xA;  },&#xA;  keymaps = {&#xA;    play_macro = &#34;Q&#34;,&#xA;    yank_macro = &#34;yq&#34;,&#xA;    stop_macro = &#34;cq&#34;,&#xA;    toggle_record = &#34;q&#34;,&#xA;    cycle_next = &#34;&amp;lt;c-n&amp;gt;&#34;,&#xA;    cycle_prev = &#34;&amp;lt;c-p&amp;gt;&#34;,&#xA;    toggle_macro_menu = &#34;&amp;lt;m-q&amp;gt;&#34;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Made with ‚ù§Ô∏è in Nebraska &lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>nvimdev/dashboard-nvim</title>
    <updated>2023-04-25T01:38:46Z</updated>
    <id>tag:github.com,2023-04-25:/nvimdev/dashboard-nvim</id>
    <link href="https://github.com/nvimdev/dashboard-nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;vim dashboard&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Fancy and Blazing Fast start screen plugin of neovim &lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&#xA;    &lt;center&gt;&#xA;     Hyper&#xA;    &lt;/center&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&#xA;    &lt;center&gt;&#xA;     Doom&#xA;    &lt;/center&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#xA;    &lt;center&gt;&#xA;     &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/215015845-b13343c4-427e-45d6-9f92-267ab909eff1.png&#34; width=&#34;80%&#34; height=&#34;80%/&#34;&gt;&#xA;    &lt;/center&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;center&gt; &#xA;     &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/214518543-d7d6afbf-f405-4a6f-a505-568c5a101e92.png&#34; width=&#34;80%&#34; height=&#34;80%/&#34;&gt; &#xA;    &lt;/center&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Feature&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Low memory usage. dashboard does not store the all user configs in memory like header etc these string will take some memory. now it will be clean after you open a file. you can still use dashboard command to open a new one , then dashboard will read the config from cache.&lt;/li&gt; &#xA; &lt;li&gt;Blazing fast&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lazy.nvim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;glepnir/dashboard-nvim&#39;,&#xA;  event = &#39;VimEnter&#39;,&#xA;  config = function()&#xA;    require(&#39;dashboard&#39;).setup {&#xA;      -- config&#xA;    }&#xA;  end,&#xA;  dependencies = { {&#39;nvim-tree/nvim-web-devicons&#39;}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Packer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;glepnir/dashboard-nvim&#39;,&#xA;  event = &#39;VimEnter&#39;,&#xA;  config = function()&#xA;    require(&#39;dashboard&#39;).setup {&#xA;      -- config&#xA;    }&#xA;  end,&#xA;  requires = {&#39;nvim-tree/nvim-web-devicons&#39;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;theme = &#39;hyper&#39; --  theme is doom and hyper default is hyper&#xA;disable_move    --  default is false disable move keymap for hyper&#xA;shortcut_type   --  shorcut type &#39;letter&#39; or &#39;number&#39;&#xA;change_to_vcs_root -- default is false,for open file in hyper mru. it will change to the root of vcs&#xA;config = {},    --  config used for theme&#xA;hide = {&#xA;  statusline    -- hide statusline default is true&#xA;  tabline       -- hide the tabline&#xA;  winbar        -- hide winbar&#xA;},&#xA;preview = {&#xA;  command       -- preview command&#xA;  file_path     -- preview file path&#xA;  file_height   -- preview file height&#xA;  file_width    -- preview file width&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Theme config&lt;/h2&gt; &#xA;&lt;p&gt;the &lt;code&gt;config&lt;/code&gt; field is used for theme. general field&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;  header -- type is table def&#xA;  week_header = {&#xA;    enable  --boolean use a week header&#xA;    concat  --concat string after time string line&#xA;    append  --table append after time string line&#xA;  },&#xA;  disable_move  -- boolean default is false disable move key&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hyper&lt;/h3&gt; &#xA;&lt;p&gt;when use &lt;code&gt;hyper&lt;/code&gt; theme the available options in &lt;code&gt;config&lt;/code&gt; is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;  shortcut = {&#xA;    -- action can be a function type&#xA;    { desc = string, group = &#39;highlight group&#39;, key = &#39;shortcut key&#39;, action = &#39;action when you press key&#39; },&#xA;  },&#xA;  packages = { enable = true }, -- show how many plugins neovim loaded&#xA;  -- limit how many projects list, action when you press key or enter it will run this action.&#xA;  -- action can be a functino type, e.g.&#xA;  -- action = func(path) vim.cmd(&#39;Telescope find_files cwd=&#39; .. path) end&#xA;  project = { enable = true, limit = 8, icon = &#39;your icon&#39;, label = &#39;&#39;, action = &#39;Telescope find_files cwd=&#39; },&#xA;  mru = { limit = 10, icon = &#39;your icon&#39;, label = &#39;&#39;, },&#xA;  footer = {}, -- footer&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Doom&lt;/h3&gt; &#xA;&lt;p&gt;when use &lt;code&gt;doom&lt;/code&gt; theme the available options in &lt;code&gt;config&lt;/code&gt; is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;  center = {&#xA;    {&#xA;      icon = &#39;&#39;,&#xA;      icon_hl = &#39;group&#39;,&#xA;      desc = &#39;description&#39;,&#xA;      desc_hl = &#39;group&#39;,&#xA;      key = &#39;shortcut key in dashboard buffer not keymap !!&#39;,&#xA;      key_hl = &#39;group&#39;,&#xA;      action = &#39;&#39;,&#xA;    },&#xA;  },&#xA;  footer = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;notice if you don&#39;t link config every highlight group. you can ignore this key. dashboard will use default highlight group like &lt;code&gt;DashboardKey/Icon/Desc&lt;/code&gt; instead&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Dashboard&lt;/code&gt; open dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DbProjectDelete count&lt;/code&gt; delete project in cache works for hyper theme. count is number&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Highlight&lt;/h3&gt; &#xA;&lt;p&gt;all highlight groups&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- General&#xA;DashboardHeader DashboardFooter&#xA;-- Hyper theme&#xA;DashboardProjectTitle DashboardProjectTitleIcon DashboardProjectIcon&#xA;DashboardMruTitle DashboardMruIcon DashboardFiles DashboardShotCutIcon&#xA;-- Doome theme&#xA;DashboardDesc DashboardKey DashboardIcon DashboardShotCut&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example config&lt;/h3&gt; &#xA;&lt;p&gt;example config of screenshot&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Hyper &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  db.setup({&#xA;    theme = &#39;hyper&#39;,&#xA;    config = {&#xA;      week_header = {&#xA;       enable = true,&#xA;      },&#xA;      shortcut = {&#xA;        { desc = &#39;Ôû≤ Update&#39;, group = &#39;@property&#39;, action = &#39;Lazy update&#39;, key = &#39;u&#39; },&#xA;        {&#xA;          icon = &#39;Óàï &#39;,&#xA;          icon_hl = &#39;@variable&#39;,&#xA;          desc = &#39;Files&#39;,&#xA;          group = &#39;Label&#39;,&#xA;          action = &#39;Telescope find_files&#39;,&#xA;          key = &#39;f&#39;,&#xA;        },&#xA;        {&#xA;          desc = &#39;ÔÄï Apps&#39;,&#xA;          group = &#39;DiagnosticHint&#39;,&#xA;          action = &#39;Telescope app&#39;,&#xA;          key = &#39;a&#39;,&#xA;        },&#xA;        {&#xA;          desc = &#39;Ó¨© dotfiles&#39;,&#xA;          group = &#39;Number&#39;,&#xA;          action = &#39;Telescope dotfiles&#39;,&#xA;          key = &#39;d&#39;,&#xA;        },&#xA;      },&#xA;    },&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Doom &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;db.setup({&#xA;  theme = &#39;doom&#39;,&#xA;  config = {&#xA;    header = {}, --your header&#xA;    center = {&#xA;      {&#xA;        icon = &#39;ÔÜ≤ &#39;,&#xA;        icon_hl = &#39;Title&#39;,&#xA;        desc = &#39;Find File           &#39;,&#xA;        desc_hl = &#39;String&#39;,&#xA;        key = &#39;b&#39;,&#xA;        keymap = &#39;SPC f f&#39;,&#xA;        key_hl = &#39;Number&#39;,&#xA;        action = &#39;lua print(2)&#39;&#xA;      },&#xA;      {&#xA;        icon = &#39;ÔÜ≤ &#39;,&#xA;        desc = &#39;Find Dotfiles&#39;,&#xA;        key = &#39;f&#39;,&#xA;        keymap = &#39;SPC f d&#39;,&#xA;        action = &#39;lua print(3)&#39;&#xA;      },&#xA;    },&#xA;    footer = {}  --your footer&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;Changed &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Removed Session as a start screen plugin speed is first.if you want use session you can take a look at &lt;a href=&#34;https://github.com/glepnir/dbsession.nvim&#34;&gt;glepnir/dbsession.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Removed Ueberzug script, as the Ueberzug author has deleted the repository.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I will write a plugin to implement some popular terminal evaluators image protocol then I think can make it work with dashboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Backers&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RakerZh&#34;&gt;@RakerZh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Donate&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;d like to support my work financially, buy me a drink through Github Sponsor or &lt;a href=&#34;https://paypal.me/bobbyhub&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>