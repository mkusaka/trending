<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-12T01:40:11Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>echasnovski/mini.pairs</title>
    <updated>2023-07-12T01:40:11Z</updated>
    <id>tag:github.com,2023-07-12:/echasnovski/mini.pairs</id>
    <link href="https://github.com/echasnovski/mini.pairs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim Lua plugin to automatically manage character pairs. Part of &#39;mini.nvim&#39; library.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/echasnovski/media/raw/main/mini.nvim/logo/logo_pairs.png&#34; style=&#34;width: 100%&#34;&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/echasnovski/mini.nvim&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h3&gt;Minimal and fast autopairs&lt;/h3&gt; &#xA;&lt;p&gt;See more details in &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.pairs/main/#features&#34;&gt;Features&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.pairs/main/doc/mini-pairs.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;⦿ This is a part of &lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;mini.nvim&lt;/a&gt; library. Please use &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/README.md&#34;&gt;this link&lt;/a&gt; if you want to mention this module.&lt;/p&gt; &#xA;&lt;p&gt;⦿ All contributions (issues, pull requests, discussions, etc.) are done inside of &#39;mini.nvim&#39;.&lt;/p&gt; &#xA;&lt;p&gt;⦿ See the repository page to learn about common design principles and configuration recipes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you want to help this project grow but don&#39;t know where to start, check out &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/CONTRIBUTING.md&#34;&gt;contributing guides of &#39;mini.nvim&#39;&lt;/a&gt; or leave a Github star for &#39;mini.nvim&#39; project and/or any its standalone Git repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/24854248/173044991-18653715-9b4e-444e-a4ba-14eb80bc4e38.mp4&#34;&gt;https://user-images.githubusercontent.com/24854248/173044991-18653715-9b4e-444e-a4ba-14eb80bc4e38.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functionality to work with &#39;paired&#39; characters conditional on cursor&#39;s neighborhood (two characters to its left and right).&lt;/li&gt; &#xA; &lt;li&gt;Usage should be through making appropriate mappings using &lt;code&gt;MiniPairs.map()&lt;/code&gt; or in &lt;code&gt;MiniPairs.setup()&lt;/code&gt; (for global mapping), &lt;code&gt;MiniPairs.map_buf()&lt;/code&gt; (for buffer mapping).&lt;/li&gt; &#xA; &lt;li&gt;Pairs get automatically registered to be recognized by &lt;code&gt;&amp;lt;BS&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin can be installed as part of &#39;mini.nvim&#39; library (&lt;strong&gt;recommended&lt;/strong&gt;) or as a standalone Git repository.&lt;/p&gt; &#xA;&lt;p&gt;There are two branches to install from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main&lt;/code&gt; (default, &lt;strong&gt;recommended&lt;/strong&gt;) will have latest development version of plugin. All changes since last stable release should be perceived as being in beta testing phase (meaning they already passed alpha-testing and are moderately settled).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; will be updated only upon releases with code tested during public beta-testing phase in &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are code snippets for some common installation methods (use only one):&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;folke/lazy.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = false },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = &#39;*&#39; },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.pairs&#39;, version = false },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.pairs&#39;, version = &#39;*&#39; },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.nvim&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.pairs&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.pairs&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.pairs&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.pairs&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: don&#39;t forget to call &lt;code&gt;require(&#39;mini.pairs&#39;).setup()&lt;/code&gt; to enable its functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are on Windows, there might be problems with too long file paths (like &lt;code&gt;error: unable to create file &amp;lt;some file name&amp;gt;: Filename too long&lt;/code&gt;). Try doing one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable corresponding git global config value: &lt;code&gt;git config --system core.longpaths true&lt;/code&gt;. Then try to reinstall.&lt;/li&gt; &#xA; &lt;li&gt;Install plugin in other place with shorter path.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Default config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- No need to copy this inside `setup()`. Will be used automatically.&#xA;{&#xA;  -- In which modes mappings from this `config` should be created&#xA;  modes = { insert = true, command = false, terminal = false },&#xA;&#xA;  -- Global mappings. Each right hand side should be a pair information, a&#xA;  -- table with at least these fields (see more in |MiniPairs.map|):&#xA;  -- - &amp;lt;action&amp;gt; - one of &#39;open&#39;, &#39;close&#39;, &#39;closeopen&#39;.&#xA;  -- - &amp;lt;pair&amp;gt; - two character string for pair to be used.&#xA;  -- By default pair is not inserted after `\`, quotes are not recognized by&#xA;  -- `&amp;lt;CR&amp;gt;`, `&#39;` does not insert pair after a letter.&#xA;  -- Only parts of tables can be tweaked (others will use these defaults).&#xA;  mappings = {&#xA;    [&#39;(&#39;] = { action = &#39;open&#39;, pair = &#39;()&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;[&#39;] = { action = &#39;open&#39;, pair = &#39;[]&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;{&#39;] = { action = &#39;open&#39;, pair = &#39;{}&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;&#xA;    [&#39;)&#39;] = { action = &#39;close&#39;, pair = &#39;()&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;]&#39;] = { action = &#39;close&#39;, pair = &#39;[]&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;}&#39;] = { action = &#39;close&#39;, pair = &#39;{}&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;&#xA;    [&#39;&#34;&#39;] = { action = &#39;closeopen&#39;, pair = &#39;&#34;&#34;&#39;, neigh_pattern = &#39;[^\\].&#39;, register = { cr = false } },&#xA;    [&#34;&#39;&#34;] = { action = &#39;closeopen&#39;, pair = &#34;&#39;&#39;&#34;, neigh_pattern = &#39;[^%a\\].&#39;, register = { cr = false } },&#xA;    [&#39;`&#39;] = { action = &#39;closeopen&#39;, pair = &#39;``&#39;, neigh_pattern = &#39;[^\\].&#39;, register = { cr = false } },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Similar plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs&#34;&gt;windwp/nvim-autopairs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jiangmiao/auto-pairs&#34;&gt;jiangmiao/auto-pairs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dgagn/diagflow.nvim</title>
    <updated>2023-07-12T01:40:11Z</updated>
    <id>tag:github.com,2023-07-12:/dgagn/diagflow.nvim</id>
    <link href="https://github.com/dgagn/diagflow.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LSP diagnostics in virtual text at the top right of your screen&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;diagflow.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;diagflow.nvim&lt;/strong&gt; is a Neovim plugin that provides a neat and distraction-free way to display LSP diagnostics. It shows diagnostics in virtual text at the top-right corner of your screen, only when the cursor is positioned over the problematic code or across an entire line, according to your preference. This provides a clean and focused coding environment. This approach to diagnostics management is inspired by the Helix editor.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Opening a file with multiple diagnostics but no issues under the cursor:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgagn/diagflow.nvim/main/images/nothing.png&#34; alt=&#34;nothing&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;An error under the cursor:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgagn/diagflow.nvim/main/images/error.png&#34; alt=&#34;error&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;A hint under the cursor:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgagn/diagflow.nvim/main/images/hint.png&#34; alt=&#34;hint&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install &lt;strong&gt;diagflow.nvim&lt;/strong&gt;, use your preferred Neovim package manager. If you&#39;re using &lt;code&gt;packer.nvim&lt;/code&gt;, add the following line to your plugin list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Packer&#xA;use {&#39;dgagn/diagflow.nvim&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;code&gt;lazy.nvim&lt;/code&gt;, add the following line to your plugin list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lazy&#xA;{&#xA;    &#39;dgagn/diagflow.nvim&#39;,&#xA;    opts = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; if you are using the &lt;code&gt;opts&lt;/code&gt; with &lt;code&gt;lazy.nvim&lt;/code&gt;, you don&#39;t need to run the setup, it does it for you.&lt;/p&gt; &#xA;&lt;p&gt;The scope option determines the context of diagnostics display: &#39;cursor&#39; (default) shows diagnostics only under the cursor, while &#39;line&#39; shows diagnostics for the entire line where the cursor is positioned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;diagflow&#39;).setup({&#xA;    enable = true,&#xA;    max_width = 60,  -- The maximum width of the diagnostic messages&#xA;    severity_colors = {  -- The highlight groups to use for each diagnostic severity level&#xA;        error = &#34;DiagnosticFloatingError&#34;,&#xA;        warning = &#34;DiagnosticFloatingWarn&#34;,&#xA;        info = &#34;DiagnosticFloatingInfo&#34;,&#xA;        hint = &#34;DiagnosticFloatingHint&#34;,&#xA;    },&#xA;    gap_size = 1,&#xA;    scope = &#39;cursor&#39;, -- &#39;cursor&#39;, &#39;line&#39;&#xA;    padding_top = 0,&#xA;    padding_right = 0,&#xA;    text_align = &#39;right&#39;, -- &#39;left&#39;, &#39;right&#39;&#xA;    placement = &#39;top&#39;, -- &#39;top&#39;, &#39;inline&#39;&#xA;    inline_padding_left = 0, -- the padding left when the placement is inline&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or simply use the default configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;diagflow&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;How do I change the colors of the virtual text?&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can set up custom colors by changing the highlight group in the configuration. For instance, in the default configuration, &lt;code&gt;:hi Hint&lt;/code&gt; determines the color of the hints. You can change the hint color to blue with &lt;code&gt;:hi Hint guifg=blue&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Can I still have the diagnostics inline?&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Yes, with the new option &lt;code&gt;placement&lt;/code&gt;, you can set the diagnostics inline instead of at the top right.&lt;/p&gt; &#xA;&lt;p&gt;Here is a example :&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgagn/diagflow.nvim/main/images/inline.png&#34; alt=&#34;inline&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is the example config used in this screenshot :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;dgagn/diagflow.nvim&#39;,&#xA;  opts = {&#xA;    placement = &#39;inline&#39;,&#xA;    inline_padding_left = 3,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>evaera/Cmdr</title>
    <updated>2023-07-12T01:40:11Z</updated>
    <id>tag:github.com,2023-07-12:/evaera/Cmdr</id>
    <link href="https://github.com/evaera/Cmdr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extensible command console for Roblox developers&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/evaera/Cmdr/master/assets/logo.png&#34; alt=&#34;Cmdr&#34; height=&#34;150&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://discord.gg/g5PdMxh&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/425800792679645204.svg?label=discord&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://eryn.io/Cmdr/&#34;&gt;View Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cmdr&lt;/strong&gt; is a fully extensible and type safe command console for Roblox developers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Great for admin commands, but does much more.&lt;/li&gt; &#xA; &lt;li&gt;Make commands that tie in specifically with your game systems.&lt;/li&gt; &#xA; &lt;li&gt;Intelligent autocompletion and instant validation.&lt;/li&gt; &#xA; &lt;li&gt;Run commands programmatically on behalf of the local user.&lt;/li&gt; &#xA; &lt;li&gt;Bind commands to user input.&lt;/li&gt; &#xA; &lt;li&gt;Secure: the client and server both validate input separately.&lt;/li&gt; &#xA; &lt;li&gt;Embedded commands: dynamically use the output of an inner command when running a command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://giant.gfycat.com/HatefulTanAzurewingedmagpie.mp4&#34;&gt;&lt;img src=&#34;https://thumbs.gfycat.com/HatefulTanAzurewingedmagpie-size_restricted.gif&#34; alt=&#34;Demo video&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
</feed>