<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-12T01:39:49Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>luukvbaal/statuscol.nvim</title>
    <updated>2023-01-12T01:39:49Z</updated>
    <id>tag:github.com,2023-01-12:/luukvbaal/statuscol.nvim</id>
    <link href="https://github.com/luukvbaal/statuscol.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Status column plugin for neovim with presets and click handlers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;statuscol.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Status column plugin that provides click handlers for the &lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;statuscolumn&#39;&#34;&gt;&#39;statuscolumn&#39;&lt;/a&gt;. Requires Neovim &amp;gt;= 0.9&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;  &#34;luukvbaal/statuscol.nvim&#34;,&#xA;  config = function() require(&#34;statuscol&#34;).setup() end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This plugin provides four global lua functions. &lt;code&gt;ScFa&lt;/code&gt;, &lt;code&gt;ScSa&lt;/code&gt; and &lt;code&gt;ScLa&lt;/code&gt; are to be used as &lt;code&gt;%@&lt;/code&gt; click-handlers for the fold, sign and line number segments in your &lt;code&gt;&#39;statuscolumn&#39;&lt;/code&gt; string respectively. &lt;code&gt;ScLn&lt;/code&gt; will return the line number string, which can be configured through the &lt;a href=&#34;https://raw.githubusercontent.com/luukvbaal/statuscol.nvim/main/#Configuration&#34;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; function. They can be used like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vim.o.statuscolumn = &#34;%@v:lua.ScFa@%C%T%@v:lua.ScLa@%s%T@v:lua.ScNa@%=%{v:lua.ScLn()}%T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, passing &lt;code&gt;setopt = true&lt;/code&gt; to the &lt;code&gt;setup()&lt;/code&gt; function will configure the &lt;code&gt;&#39;statuscolumn&#39;&lt;/code&gt; option for you.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Default options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local builtin = require(&#34;statuscol.builtin&#34;)&#xA;local cfg = {&#xA;  separator = false,     -- separator between line number and buffer text (&#34;â”‚&#34; or extra &#34; &#34; padding)&#xA;  -- Builtin line number string options for ScLn() segment&#xA;  thousands = false      -- or line number thousands separator string (&#34;.&#34; / &#34;,&#34;)&#xA;  relculright = false,   -- whether to right-align the cursor line number with &#39;relativenumber&#39; set&#xA;  -- Custom line number string options for ScLn() segment&#xA;  lnumfunc = nil,        -- custom function called by ScLn(), should return a string&#xA;  reeval = false,        -- whether or not the string returned by lnumfunc should be reevaluated&#xA;  -- Builtin &#39;statuscolumn&#39; options&#xA;  setopt = false,        -- whether to set the &#39;statuscolumn&#39;, providing builtin click actions&#xA;  order = &#34;FSNs&#34;,        -- order of the fold, sign, line number and separator segments&#xA;  -- Click actions&#xA;  Lnum                   = builtin.lnum_click,&#xA;  FoldPlus               = builtin.foldplus_click,&#xA;  FoldMinus              = builtin.foldminus_click,&#xA;  FoldEmpty              = builtin.foldempty_click,&#xA;  DapBreakpointRejected  = builtin.toggle_breakpoint,&#xA;  DapBreakpoint          = builtin.toggle_breakpoint,&#xA;  DapBreakpointCondition = builtin.toggle_breakpoint,&#xA;  DiagnosticSignError    = builtin.diagnostic_click,&#xA;  DiagnosticSignHint     = builtin.diagnostic_click,&#xA;  DiagnosticSignInfo     = builtin.diagnostic_click,&#xA;  DiagnosticSignWarn     = builtin.diagnostic_click,&#xA;  GitSignsTopdelete      = builtin.gitsigns_click,&#xA;  GitSignsUntracked      = builtin.gitsigns_click,&#xA;  GitSignsAdd            = builtin.gitsigns_click,&#xA;  GitSignsChangedelete   = builtin.gitsigns_click,&#xA;  GitSignsDelete         = builtin.gitsigns_click,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The configuration table can contain, besides the options, a list of sign/click action pairs. Each entry is the name of a sign, or &lt;code&gt;Lnum&lt;/code&gt; and &lt;code&gt;FoldPlus/Minus/Empty&lt;/code&gt; for the number and fold columns. To modify the default options, pass a table with the options you want to overwrite to the &lt;code&gt;setup()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cfg = {&#xA;  order = &#34;FNSs&#34;,&#xA;  --- The click actions have the following signature:&#xA;  ---@param args (table): {&#xA;  ---   minwid = minwid,            -- 1st argument to &#39;statuscolumn&#39; %@ callback&#xA;  ---   clicks = clicks,            -- 2nd argument to &#39;statuscolumn&#39; %@ callback&#xA;  ---   button = button,            -- 3rd argument to &#39;statuscolumn&#39; %@ callback&#xA;  ---   mods = mods,                -- 4th argument to &#39;statuscolumn&#39; %@ callback&#xA;  ---   mousepos = f.getmousepos()  -- getmousepos() table, containing clicked line number/window id etc.&#xA;  --- }&#xA;  Lnum = function(args)&#xA;    if args.button == &#34;l&#34; and args.mods:find(&#34;c&#34;) then&#xA;      print(&#34;I Ctrl-left clicked on line &#34;..args.mousepos.line)&#xA;    end&#xA;  end,&#xA;}&#xA;&#xA;require(&#34;statuscol&#34;).setup(cfg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default click actions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sign/click action pair suggestions are welcome!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently the following builtin actions are supported:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sign&lt;/th&gt; &#xA;   &lt;th&gt;Button&lt;/th&gt; &#xA;   &lt;th&gt;Modifier&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lnum&lt;/td&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;DAP&lt;/a&gt; breakpoint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lnum&lt;/td&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle DAP conditional breakpoint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lnum&lt;/td&gt; &#xA;   &lt;td&gt;Middle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yank line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lnum&lt;/td&gt; &#xA;   &lt;td&gt;Right&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Paste line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lnum&lt;/td&gt; &#xA;   &lt;td&gt;Right x2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FoldPlus&lt;/td&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open fold&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FoldPlus&lt;/td&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open fold recursively&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FoldMinus&lt;/td&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close fold&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FoldMinus&lt;/td&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close fold recursively&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FoldPlus/Minus&lt;/td&gt; &#xA;   &lt;td&gt;Right&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete fold&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FoldPlus/Minus&lt;/td&gt; &#xA;   &lt;td&gt;Right&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete fold recursively&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fold*&lt;/td&gt; &#xA;   &lt;td&gt;Middle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create fold in range(click twice)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Diagnostic*&lt;/td&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open diagnostic &lt;a href=&#34;https://neovim.io/doc/user/diagnostic.html#vim.diagnostic.open_float()&#34;&gt;float&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Diagnostic*&lt;/td&gt; &#xA;   &lt;td&gt;Middle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select available &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.code_action()&#34;&gt;code action&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;GitSigns&lt;/a&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Preview hunk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GitSigns*&lt;/td&gt; &#xA;   &lt;td&gt;Middle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reset hunk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GitSigns*&lt;/td&gt; &#xA;   &lt;td&gt;Right&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stage hunk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>echasnovski/mini.indentscope</title>
    <updated>2023-01-12T01:39:49Z</updated>
    <id>tag:github.com,2023-01-12:/echasnovski/mini.indentscope</id>
    <link href="https://github.com/echasnovski/mini.indentscope" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim Lua plugin to visualize and operate on indent scope. Part of &#39;mini.nvim&#39; library.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/echasnovski/media/raw/main/mini.nvim/logo/logo_indentscope.png&#34; style=&#34;width: 100%&#34;&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/echasnovski/mini.nvim&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h3&gt;Visualize and operate on indent scope&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customizable debounce delay, animation style, and scope computation options.&lt;/li&gt; &#xA; &lt;li&gt;Implements scope-related motions and textobjects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See more details in &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.indentscope/main/#features&#34;&gt;Features&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.indentscope/main/doc/mini-indentscope.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;â¦¿ This is a part of &lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;mini.nvim&lt;/a&gt; library. Please use &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/README.md&#34;&gt;this link&lt;/a&gt; if you want to mention this module.&lt;/p&gt; &#xA;&lt;p&gt;â¦¿ All contributions (issues, pull requests, discussions, etc.) are done inside of &#39;mini.nvim&#39;.&lt;/p&gt; &#xA;&lt;p&gt;â¦¿ See the repository page to learn about common design principles and configuration recipes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you want to help this project grow but don&#39;t know where to start, check out &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/CONTRIBUTING.md&#34;&gt;contributing guides of &#39;mini.nvim&#39;&lt;/a&gt; or leave a Github star for &#39;mini.nvim&#39; project and/or any its standalone Git repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/24854248/173044654-f5f0b928-6bd9-4064-a916-1f980044c7ad.mp4&#34;&gt;https://user-images.githubusercontent.com/24854248/173044654-f5f0b928-6bd9-4064-a916-1f980044c7ad.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visualize scope with &lt;strong&gt;animated&lt;/strong&gt; vertical line. It is very fast and done automatically in a non-blocking way (other operations can be performed, like moving cursor). You can customize debounce delay and animation rule.&lt;/li&gt; &#xA; &lt;li&gt;Customization of scope computation options can be done on global level (in &lt;code&gt;MiniIndentscope.config&lt;/code&gt;), for a certain buffer (using &lt;code&gt;vim.b.miniindentscope_config&lt;/code&gt; buffer variable), or within a call (using &lt;code&gt;opts&lt;/code&gt; variable in &lt;code&gt;MiniIndentscope.get_scope()&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Customizable notion of a border: which adjacent lines with strictly lower indent are recognized as such. This is useful for a certain filetypes (for example, Python or plain text).&lt;/li&gt; &#xA; &lt;li&gt;Customizable way of line to be considered &#34;border first&#34;. This is useful if you want to place cursor on function header and get scope of its body.&lt;/li&gt; &#xA; &lt;li&gt;There are textobjects and motions to operate on scope. Support &lt;code&gt;v:count&lt;/code&gt; and dot-repeat (in operator pending mode).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin can be installed as part of &#39;mini.nvim&#39; library (&lt;strong&gt;recommended&lt;/strong&gt;) or as a standalone Git repository.&lt;/p&gt; &#xA;&lt;p&gt;There are two branches to install from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main&lt;/code&gt; (default, &lt;strong&gt;recommended&lt;/strong&gt;) will have latest development version of plugin. All changes since last stable release should be perceived as being in beta testing phase (meaning they already passed alpha-testing and are moderately settled).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; will be updated only upon releases with code tested during public beta-testing phase in &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are code snippets for some common installation methods (use only one):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer.nvim&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Github repo&lt;/th&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th&gt;Code snippet&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;   &lt;td&gt;Main&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.nvim&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;   &lt;td&gt;Main&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.indentscope&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.indentscope&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Github repo&lt;/th&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th&gt;Code snippet&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;   &lt;td&gt;Main&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;   &lt;td&gt;Main&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.indentscope&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.indentscope&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: don&#39;t forget to call &lt;code&gt;require(&#39;mini.indentscope&#39;).setup()&lt;/code&gt; to enable its functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are on Windows, there might be problems with too long file paths (like &lt;code&gt;error: unable to create file &amp;lt;some file name&amp;gt;: Filename too long&lt;/code&gt;). Try doing one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable corresponding git global config value: &lt;code&gt;git config --system core.longpaths true&lt;/code&gt;. Then try to reinstall.&lt;/li&gt; &#xA; &lt;li&gt;Install plugin in other place with shorter path.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Default config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- No need to copy this inside `setup()`. Will be used automatically.&#xA;{&#xA;  draw = {&#xA;    -- Delay (in ms) between event and start of drawing scope indicator&#xA;    delay = 100,&#xA;&#xA;    -- Animation rule for scope&#39;s first drawing. A function which, given&#xA;    -- next and total step numbers, returns wait time (in ms). See&#xA;    -- |MiniIndentscope.gen_animation| for builtin options. To disable&#xA;    -- animation, use `require(&#39;mini.indentscope&#39;).gen_animation.none()`.&#xA;    animation = --&amp;lt;function: implements constant 20ms between steps&amp;gt;,&#xA;  },&#xA;&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    -- Textobjects&#xA;    object_scope = &#39;ii&#39;,&#xA;    object_scope_with_border = &#39;ai&#39;,&#xA;&#xA;    -- Motions (jump to respective border line; if not present - body line)&#xA;    goto_top = &#39;[i&#39;,&#xA;    goto_bottom = &#39;]i&#39;,&#xA;  },&#xA;&#xA;  -- Options which control scope computation&#xA;  options = {&#xA;    -- Type of scope&#39;s border: which line(s) with smaller indent to&#xA;    -- categorize as border. Can be one of: &#39;both&#39;, &#39;top&#39;, &#39;bottom&#39;, &#39;none&#39;.&#xA;    border = &#39;both&#39;,&#xA;&#xA;    -- Whether to use cursor column when computing reference indent.&#xA;    -- Useful to see incremental scopes with horizontal cursor movements.&#xA;    indent_at_cursor = true,&#xA;&#xA;    -- Whether to first check input line to be a border of adjacent scope.&#xA;    -- Use it if you want to place cursor on function header to get scope of&#xA;    -- its body.&#xA;    try_as_border = false,&#xA;  },&#xA;&#xA;  -- Which character to use for drawing scope indicator&#xA;  symbol = &#39;â•Ž&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Similar plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;lukas-reineke/indent-blankline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michaeljsmith/vim-indent-object&#34;&gt;michaeljsmith/vim-indent-object&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>echasnovski/mini.comment</title>
    <updated>2023-01-12T01:39:49Z</updated>
    <id>tag:github.com,2023-01-12:/echasnovski/mini.comment</id>
    <link href="https://github.com/echasnovski/mini.comment" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim Lua plugin for fast and familiar per-line commenting. Part of &#39;mini.nvim&#39; library.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/echasnovski/media/raw/main/mini.nvim/logo/logo_comment.png&#34; style=&#34;width: 100%&#34;&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/echasnovski/mini.nvim&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h3&gt;Fast and familiar per-line commenting&lt;/h3&gt; &#xA;&lt;p&gt;See more details in &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.comment/main/#features&#34;&gt;Features&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.comment/main/doc/mini-comment.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;â¦¿ This is a part of &lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;mini.nvim&lt;/a&gt; library. Please use &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/README.md&#34;&gt;this link&lt;/a&gt; if you want to mention this module.&lt;/p&gt; &#xA;&lt;p&gt;â¦¿ All contributions (issues, pull requests, discussions, etc.) are done inside of &#39;mini.nvim&#39;.&lt;/p&gt; &#xA;&lt;p&gt;â¦¿ See the repository page to learn about common design principles and configuration recipes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you want to help this project grow but don&#39;t know where to start, check out &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/CONTRIBUTING.md&#34;&gt;contributing guides of &#39;mini.nvim&#39;&lt;/a&gt; or leave a Github star for &#39;mini.nvim&#39; project and/or any its standalone Git repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/24854248/173044250-1a8bceae-8f14-40e2-a678-31aca0cd6c1a.mp4&#34;&gt;https://user-images.githubusercontent.com/24854248/173044250-1a8bceae-8f14-40e2-a678-31aca0cd6c1a.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Commenting in Normal mode respects &lt;code&gt;v:count&lt;/code&gt; and is dot-repeatable.&lt;/li&gt; &#xA; &lt;li&gt;Comment structure is inferred from &#39;commentstring&#39;.&lt;/li&gt; &#xA; &lt;li&gt;Handles both tab and space indenting (but not when they are mixed).&lt;/li&gt; &#xA; &lt;li&gt;Allows custom hooks before and after successful commenting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin can be installed as part of &#39;mini.nvim&#39; library (&lt;strong&gt;recommended&lt;/strong&gt;) or as a standalone Git repository.&lt;/p&gt; &#xA;&lt;p&gt;There are two branches to install from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main&lt;/code&gt; (default, &lt;strong&gt;recommended&lt;/strong&gt;) will have latest development version of plugin. All changes since last stable release should be perceived as being in beta testing phase (meaning they already passed alpha-testing and are moderately settled).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; will be updated only upon releases with code tested during public beta-testing phase in &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are code snippets for some common installation methods (use only one):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer.nvim&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Github repo&lt;/th&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th&gt;Code snippet&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;   &lt;td&gt;Main&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.nvim&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;   &lt;td&gt;Main&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.comment&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.comment&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Github repo&lt;/th&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th&gt;Code snippet&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;   &lt;td&gt;Main&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;   &lt;td&gt;Main&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.comment&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.comment&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: don&#39;t forget to call &lt;code&gt;require(&#39;mini.comment&#39;).setup()&lt;/code&gt; to enable its functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are on Windows, there might be problems with too long file paths (like &lt;code&gt;error: unable to create file &amp;lt;some file name&amp;gt;: Filename too long&lt;/code&gt;). Try doing one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable corresponding git global config value: &lt;code&gt;git config --system core.longpaths true&lt;/code&gt;. Then try to reinstall.&lt;/li&gt; &#xA; &lt;li&gt;Install plugin in other place with shorter path.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Default config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- No need to copy this inside `setup()`. Will be used automatically.&#xA;{&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    -- Toggle comment (like `gcip` - comment inner paragraph) for both&#xA;    -- Normal and Visual modes&#xA;    comment = &#39;gc&#39;,&#xA;&#xA;    -- Toggle comment on current line&#xA;    comment_line = &#39;gcc&#39;,&#xA;&#xA;    -- Define &#39;comment&#39; textobject (like `dgc` - delete whole comment block)&#xA;    textobject = &#39;gc&#39;,&#xA;  },&#xA;  -- Hook functions to be executed at certain stage of commenting&#xA;  hooks = {&#xA;    -- Before successful commenting. Does nothing by default.&#xA;    pre = function() end,&#xA;    -- After successful commenting. Does nothing by default.&#xA;    post = function() end,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Similar plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/numToStr/Comment.nvim&#34;&gt;numToStr/Comment.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-commentary&#34;&gt;tpope/vim-commentary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/preservim/nerdcommenter&#34;&gt;preservim/nerdcommenter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/b3nj5m1n/kommentary&#34;&gt;b3nj5m1n/kommentary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>