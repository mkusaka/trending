<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-30T01:44:53Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hrsh7th/nvim-cmp</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/hrsh7th/nvim-cmp</id>
    <link href="https://github.com/hrsh7th/nvim-cmp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A completion plugin for neovim coded in Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-cmp&lt;/h1&gt; &#xA;&lt;p&gt;A completion engine plugin for neovim written in Lua. Completion sources are installed from external repositories and &#34;sourced&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://user-images.githubusercontent.com/629908/139000570-3ac39587-a88b-43c6-b35e-207489719359.mp4&#34; width=&#34;100%&#34;&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Readme!&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;There is a Github issue that documents &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/issues/231&#34;&gt;breaking changes&lt;/a&gt; for nvim-cmp. Subscribe to the issue to be notified of upcoming breaking changes.&lt;/li&gt; &#xA; &lt;li&gt;This is my hobby project. You can support me via GitHub sponsors.&lt;/li&gt; &#xA; &lt;li&gt;Bug reports are welcome, but I might not fix if you don&#39;t provide a minimal reproduction configuration and steps.&lt;/li&gt; &#xA; &lt;li&gt;The nvim-cmp documents is &lt;a href=&#34;https://raw.githubusercontent.com/hrsh7th/nvim-cmp/main/doc/cmp.txt&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The nvim-cmp is designed for &lt;code&gt;customization&lt;/code&gt;! It&#39;s not designed to &lt;code&gt;work out of the box&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Concept&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full support for LSP completion related capabilities&lt;/li&gt; &#xA; &lt;li&gt;Powerful customizability via Lua functions&lt;/li&gt; &#xA; &lt;li&gt;Smart handling of key mapping&lt;/li&gt; &#xA; &lt;li&gt;No flicker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h3&gt;Recommended Configuration&lt;/h3&gt; &#xA;&lt;p&gt;This example configuration uses &lt;code&gt;vim-plug&lt;/code&gt; as the plugin manager and &lt;code&gt;vim-vsnip&lt;/code&gt; as snippet plugin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;call plug#begin(s:plug_dir)&#xA;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;hrsh7th/cmp-nvim-lsp&#39;&#xA;Plug &#39;hrsh7th/cmp-buffer&#39;&#xA;Plug &#39;hrsh7th/cmp-path&#39;&#xA;Plug &#39;hrsh7th/cmp-cmdline&#39;&#xA;Plug &#39;hrsh7th/nvim-cmp&#39;&#xA;&#xA;&#34; For vsnip users.&#xA;Plug &#39;hrsh7th/cmp-vsnip&#39;&#xA;Plug &#39;hrsh7th/vim-vsnip&#39;&#xA;&#xA;&#34; For luasnip users.&#xA;&#34; Plug &#39;L3MON4D3/LuaSnip&#39;&#xA;&#34; Plug &#39;saadparwaiz1/cmp_luasnip&#39;&#xA;&#xA;&#34; For ultisnips users.&#xA;&#34; Plug &#39;SirVer/ultisnips&#39;&#xA;&#34; Plug &#39;quangnguyen30192/cmp-nvim-ultisnips&#39;&#xA;&#xA;&#34; For snippy users.&#xA;&#34; Plug &#39;dcampos/nvim-snippy&#39;&#xA;&#34; Plug &#39;dcampos/cmp-snippy&#39;&#xA;&#xA;call plug#end()&#xA;&#xA;set completeopt=menu,menuone,noselect&#xA;&#xA;lua &amp;lt;&amp;lt;EOF&#xA;  -- Setup nvim-cmp.&#xA;  local cmp = require&#39;cmp&#39;&#xA;&#xA;  cmp.setup({&#xA;    snippet = {&#xA;      -- REQUIRED - you must specify a snippet engine&#xA;      expand = function(args)&#xA;        vim.fn[&#34;vsnip#anonymous&#34;](args.body) -- For `vsnip` users.&#xA;        -- require(&#39;luasnip&#39;).lsp_expand(args.body) -- For `luasnip` users.&#xA;        -- require(&#39;snippy&#39;).expand_snippet(args.body) -- For `snippy` users.&#xA;        -- vim.fn[&#34;UltiSnips#Anon&#34;](args.body) -- For `ultisnips` users.&#xA;      end,&#xA;    },&#xA;    window = {&#xA;      -- completion = cmp.config.window.bordered(),&#xA;      -- documentation = cmp.config.window.bordered(),&#xA;    },&#xA;    mapping = cmp.mapping.preset.insert({&#xA;      [&#39;&amp;lt;C-b&amp;gt;&#39;] = cmp.mapping.scroll_docs(-4),&#xA;      [&#39;&amp;lt;C-f&amp;gt;&#39;] = cmp.mapping.scroll_docs(4),&#xA;      [&#39;&amp;lt;C-Space&amp;gt;&#39;] = cmp.mapping.complete(),&#xA;      [&#39;&amp;lt;C-e&amp;gt;&#39;] = cmp.mapping.abort(),&#xA;      [&#39;&amp;lt;CR&amp;gt;&#39;] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.&#xA;    }),&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;nvim_lsp&#39; },&#xA;      { name = &#39;vsnip&#39; }, -- For vsnip users.&#xA;      -- { name = &#39;luasnip&#39; }, -- For luasnip users.&#xA;      -- { name = &#39;ultisnips&#39; }, -- For ultisnips users.&#xA;      -- { name = &#39;snippy&#39; }, -- For snippy users.&#xA;    }, {&#xA;      { name = &#39;buffer&#39; },&#xA;    })&#xA;  })&#xA;&#xA;  -- Set configuration for specific filetype.&#xA;  cmp.setup.filetype(&#39;gitcommit&#39;, {&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;cmp_git&#39; }, -- You can specify the `cmp_git` source if you were installed it.&#xA;    }, {&#xA;      { name = &#39;buffer&#39; },&#xA;    })&#xA;  })&#xA;&#xA;  -- Use buffer source for `/` (if you enabled `native_menu`, this won&#39;t work anymore).&#xA;  cmp.setup.cmdline(&#39;/&#39;, {&#xA;    mapping = cmp.mapping.preset.cmdline(),&#xA;    sources = {&#xA;      { name = &#39;buffer&#39; }&#xA;    }&#xA;  })&#xA;&#xA;  -- Use cmdline &amp;amp; path source for &#39;:&#39; (if you enabled `native_menu`, this won&#39;t work anymore).&#xA;  cmp.setup.cmdline(&#39;:&#39;, {&#xA;    mapping = cmp.mapping.preset.cmdline(),&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;path&#39; }&#xA;    }, {&#xA;      { name = &#39;cmdline&#39; }&#xA;    })&#xA;  })&#xA;&#xA;  -- Setup lspconfig.&#xA;  local capabilities = require(&#39;cmp_nvim_lsp&#39;).update_capabilities(vim.lsp.protocol.make_client_capabilities())&#xA;  -- Replace &amp;lt;YOUR_LSP_SERVER&amp;gt; with each lsp server you&#39;ve enabled.&#xA;  require(&#39;lspconfig&#39;)[&#39;&amp;lt;YOUR_LSP_SERVER&amp;gt;&#39;].setup {&#xA;    capabilities = capabilities&#xA;  }&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Where can I find more completion sources?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki/List-of-sources&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://github.com/topics/nvim-cmp&#34;&gt;GitHub topic&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Where can I find advanced configuration examples?&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>williamboman/nvim-lsp-installer</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/williamboman/nvim-lsp-installer</id>
    <link href="https://github.com/williamboman/nvim-lsp-installer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin that allows you to seamlessly manage LSP servers with :LspInstall. With full Windows support!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/6705160/118490159-f064bb00-b71d-11eb-883e-4affbd020074.png&#34; alt=&#34;nvim-lsp-installer&#34; width=&#34;50%&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#available-lsps&#34;&gt;Available LSPs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#custom-servers&#34;&gt;Custom servers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#logo&#34;&gt;Logo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#default-configuration&#34;&gt;Default configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Neovim plugin that allows you to manage LSP servers (servers are installed inside &lt;code&gt;:echo stdpath(&#34;data&#34;)&lt;/code&gt; by default). It works in tandem with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;lspconfig&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; by registering a hook that enhances the &lt;code&gt;PATH&lt;/code&gt; environment variable, allowing neovim&#39;s LSP client to locate the installed server executable.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;On top of just providing commands for installing &amp;amp; uninstalling LSP servers, it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;provides a graphical UI&lt;/li&gt; &#xA; &lt;li&gt;provides the ability to check for, and upgrade to, new server versions through a single interface&lt;/li&gt; &#xA; &lt;li&gt;supports installing custom versions of LSP servers (for example &lt;code&gt;:LspInstall rust_analyzer@nightly&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;relaxes the minimum requirements by attempting multiple different utilities (for example, only one of &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, or &lt;code&gt;Invoke-WebRequest&lt;/code&gt; is required for HTTP requests)&lt;/li&gt; &#xA; &lt;li&gt;hosts &lt;a href=&#34;https://github.com/williamboman/nvim-lspconfig-test&#34;&gt;a suite of system tests&lt;/a&gt; for all supported servers&lt;/li&gt; &#xA; &lt;li&gt;has full support for Windows &lt;img src=&#34;https://user-images.githubusercontent.com/6705160/131256603-cacf7f66-dfa9-4515-8ae4-0e42d08cfc6a.png&#34; height=&#34;20&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;sup&gt;1 - while lspconfig is the main target, this plugin may also be used for other use cases&lt;/sup&gt; &lt;br&gt; &lt;sup&gt;2 - some servers don&#39;t provide an executable, in which case the full command to spawn the server is provided instead&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685720-782e33ba-172c-44b6-8558-fb4e98495294.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685404-2cd34b25-166e-4c84-b9dd-1d5580dc2bdd.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685322-a537f021-5850-4bbc-8be2-1ece5678d205.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685324-1310ae7d-67bf-4053-872c-d27e8a4c4b80.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150686052-fd5c4d54-b4da-4cb3-bb82-a094526ee5b5.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150686059-f1be8131-1274-4f62-9aa8-345599cbd8bc.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requires neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt; and &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;. The &lt;em&gt;full requirements&lt;/em&gt; to install &lt;em&gt;all&lt;/em&gt; servers are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Unix systems: git(1), curl(1) or wget(1), unzip(1), tar(1), gzip(1)&lt;/li&gt; &#xA; &lt;li&gt;For Windows systems: powershell, git, tar, and &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; or &lt;a href=&#34;https://peazip.github.io/&#34;&gt;peazip&lt;/a&gt; or &lt;a href=&#34;https://github.com/mholt/archiver&#34;&gt;archiver&lt;/a&gt; or &lt;a href=&#34;https://www.winzip.com/&#34;&gt;winzip&lt;/a&gt; or &lt;a href=&#34;https://www.win-rar.com/&#34;&gt;WinRAR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Node.js (LTS) &amp;amp; npm&lt;/li&gt; &#xA; &lt;li&gt;Python3 &amp;amp; pip3&lt;/li&gt; &#xA; &lt;li&gt;go &amp;gt;= 1.17&lt;/li&gt; &#xA; &lt;li&gt;JDK&lt;/li&gt; &#xA; &lt;li&gt;Ruby &amp;amp; gem&lt;/li&gt; &#xA; &lt;li&gt;PHP &amp;amp; Composer&lt;/li&gt; &#xA; &lt;li&gt;dotnet&lt;/li&gt; &#xA; &lt;li&gt;pwsh&lt;/li&gt; &#xA; &lt;li&gt;Julia&lt;/li&gt; &#xA; &lt;li&gt;valac (and meson &amp;amp; ninja)&lt;/li&gt; &#xA; &lt;li&gt;rebar3&lt;/li&gt; &#xA; &lt;li&gt;cargo&lt;/li&gt; &#xA; &lt;li&gt;ghcup&lt;/li&gt; &#xA; &lt;li&gt;luarocks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;williamboman/nvim-lsp-installer&#34;,&#xA;    &#34;neovim/nvim-lspconfig&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;williamboman/nvim-lsp-installer&#34;&#xA;Plug &#34;neovim/nvim-lspconfig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;In order for nvim-lsp-installer to register the necessary hooks at the right moment, &lt;strong&gt;make sure you call the &lt;code&gt;.setup()&lt;/code&gt; function before you set up any servers with &lt;code&gt;lspconfig&lt;/code&gt;&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-lsp-installer&#34;).setup {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Important if you use packer.nvim! (click to expand) &lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Do not separate the nvim-lsp-installer setup from lspconfig, for example via the &lt;code&gt;config&lt;/code&gt; hook. Make sure to colocate the nvim-lsp-installer setup with the lspconfig setup. This is because load order of plugins is not guaranteed, leading to nvim-lsp-installer&#39;s &lt;code&gt;config&lt;/code&gt; function potentially executing after lspconfig&#39;s.&lt;/p&gt; &#xA;  &lt;p&gt;❌ Do not do this:&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    {&#xA;        &#34;williamboman/nvim-lsp-installer&#34;,&#xA;        config = function()&#xA;            require(&#34;nvim-lsp-installer&#34;).setup {}&#xA;        end&#xA;    },&#xA;    {&#xA;        &#34;neovim/nvim-lspconfig&#34;,&#xA;        config = function()&#xA;            local lspconfig = require(&#34;lspconfig&#34;)&#xA;            lspconfig.sumneko_lua.setup {}&#xA;        end&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;✅ Instead, do this:&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;williamboman/nvim-lsp-installer&#34;,&#xA;    {&#xA;        &#34;neovim/nvim-lspconfig&#34;,&#xA;        config = function()&#xA;            require(&#34;nvim-lsp-installer&#34;).setup {}&#xA;            local lspconfig = require(&#34;lspconfig&#34;)&#xA;            lspconfig.sumneko_lua.setup {}&#xA;        end&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#configuration&#34;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstallInfo&lt;/code&gt; - opens a graphical overview of your language servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstall [--sync] [server] ...&lt;/code&gt; - installs/reinstalls language servers. Runs in a blocking fashion if the &lt;code&gt;--sync&lt;/code&gt; argument is passed (only recommended for scripting purposes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspUninstall [--sync] &amp;lt;server&amp;gt; ...&lt;/code&gt; - uninstalls language servers. Runs in a blocking fashion if the &lt;code&gt;--sync&lt;/code&gt; argument is passed (only recommended for scripting purposes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspUninstallAll [--no-confirm]&lt;/code&gt; - uninstalls all language servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstallLog&lt;/code&gt; - opens the log file in a new tab window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspPrintInstalled&lt;/code&gt; - prints all installed language servers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You may optionally configure certain behavior of nvim-lsp-installer when calling the &lt;code&gt;.setup()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#default-configuration&#34;&gt;default configuration&lt;/a&gt; for all available settings.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-lsp-installer&#34;).setup({&#xA;    automatic_installation = true, -- automatically detect which servers to install (based on which servers are set up via lspconfig)&#xA;    ui = {&#xA;        icons = {&#xA;            server_installed = &#34;✓&#34;,&#xA;            server_pending = &#34;➜&#34;,&#xA;            server_uninstalled = &#34;✗&#34;&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available LSPs&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Server name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWK&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;awk_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Angular&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;angularls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ansible&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ansiblels&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arduino &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/arduino_language_server/README.md&#34;&gt;(docs!!!)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;arduino_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Assembly (GAS/NASM, GO)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;asm_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Astro&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;astro&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bash&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bashls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Beancount&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;beancount&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bicep&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bicep&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;csharp_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C# &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/omnisharp/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;omnisharp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CMake&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cssls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cssmodules_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clarity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clarity_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clojure&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clojure_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;codeqlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;crystalline&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scry&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cucumber&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cucumber_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dart&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dartls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deno&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;denols&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dhall&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dhall_lsp_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Diagnostic (general purpose server)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;diagnosticls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dlang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;serve_d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dockerls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dot&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EFM (general purpose server)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;efm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESLint &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/eslint/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixirls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elmls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ember&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ember&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Emmet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;emmet_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Erlang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;erlangls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fsautocomplete&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flux_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Foam (OpenFOAM)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;foam_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fortran&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fortls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;golangci_lint_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gopls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Grammarly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;grammarly&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GraphQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;graphql&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Groovy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;groovyls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;html&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haskell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haxe&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;haxe_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hoon&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hoon_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jdtls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;quick_lint_js&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jsonnet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonnet_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Julia&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;julials&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;kotlin_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ltex&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;texlab&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lelwel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lelwel_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sumneko_lua&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;prosemd_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;remark_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zk&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metamath Zero&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mm0_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nickel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nickel_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nimls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCaml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ocamlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCaml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ocamllsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Objective C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OneScript, 1C:Enterprise&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bsl_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenCL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;opencl_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;intelephense&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpactor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;psalm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Perl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;perlnavigator&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Powershell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;powershell_es&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prisma&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;prismals&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Puppet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;puppet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PureScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;purescriptls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jedi_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pyright&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sourcery&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/pylsp/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pylsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;r_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rescriptls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reason&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reason_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Robot Framework&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;robotframework_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rome&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rome&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solargraph&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rust_analyzer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Salt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;salt_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shopify Theme Check&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;theme_check&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;slint_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solang&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity (VSCode)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solidity_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sorbet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorbet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sphinx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;esbonio&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stylelint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;stylelint_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Svelte&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svelte&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sourcekit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;verible&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TOML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;taplo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tailwind CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tailwindcss&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Teal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;teal_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terraform&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;terraformls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terraform &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/tflint/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tflint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TypeScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;V&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vala&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vala_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VimL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vimls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;volar&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuels&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lemminx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yamlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Custom servers&lt;/h2&gt; &#xA;&lt;p&gt;You can create your own installers by using the same APIs nvim-lsp-installer itself uses. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/CUSTOM_SERVERS.md&#34;&gt;CUSTOM_SERVERS.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Logo&lt;/h2&gt; &#xA;&lt;p&gt;Illustrations in the logo are derived from &lt;a href=&#34;https://schauderbasis.de/&#34;&gt;@Kaligule&lt;/a&gt;&#39;s &#34;Robots&#34; collection.&lt;/p&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local DEFAULT_SETTINGS = {&#xA;    -- A list of servers to automatically install if they&#39;re not already installed. Example: { &#34;rust_analyzer&#34;, &#34;sumneko_lua&#34; }&#xA;    -- This setting has no relation with the `automatic_installation` setting.&#xA;    ensure_installed = {},&#xA;&#xA;    -- Whether servers that are set up (via lspconfig) should be automatically installed if they&#39;re not already installed.&#xA;    -- This setting has no relation with the `ensure_installed` setting.&#xA;    -- Can either be:&#xA;    --   - false: Servers are not automatically installed.&#xA;    --   - true: All servers set up via lspconfig are automatically installed.&#xA;    --   - { exclude: string[] }: All servers set up via lspconfig, except the ones provided in the list, are automatically installed.&#xA;    --       Example: automatic_installation = { exclude = { &#34;rust_analyzer&#34;, &#34;solargraph&#34; } }&#xA;    automatic_installation = false,&#xA;&#xA;    ui = {&#xA;        -- Whether to automatically check for outdated servers when opening the UI window.&#xA;        check_outdated_servers_on_open = true,&#xA;&#xA;        icons = {&#xA;            -- The list icon to use for installed servers.&#xA;            server_installed = &#34;◍&#34;,&#xA;            -- The list icon to use for servers that are pending installation.&#xA;            server_pending = &#34;◍&#34;,&#xA;            -- The list icon to use for servers that are not installed.&#xA;            server_uninstalled = &#34;◍&#34;,&#xA;        },&#xA;        keymaps = {&#xA;            -- Keymap to expand a server in the UI&#xA;            toggle_server_expand = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;            -- Keymap to install the server under the current cursor position&#xA;            install_server = &#34;i&#34;,&#xA;            -- Keymap to reinstall/update the server under the current cursor position&#xA;            update_server = &#34;u&#34;,&#xA;            -- Keymap to check for new version for the server under the current cursor position&#xA;            check_server_version = &#34;c&#34;,&#xA;            -- Keymap to update all installed servers&#xA;            update_all_servers = &#34;U&#34;,&#xA;            -- Keymap to check which installed servers are outdated&#xA;            check_outdated_servers = &#34;C&#34;,&#xA;            -- Keymap to uninstall a server&#xA;            uninstall_server = &#34;X&#34;,&#xA;        },&#xA;    },&#xA;&#xA;    -- The directory in which to install all servers.&#xA;    install_root_dir = path.concat { vim.fn.stdpath &#34;data&#34;, &#34;lsp_servers&#34; },&#xA;&#xA;    pip = {&#xA;        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior&#xA;        -- and is not recommended.&#xA;        --&#xA;        -- Example: { &#34;--proxy&#34;, &#34;https://proxyserver&#34; }&#xA;        install_args = {},&#xA;    },&#xA;&#xA;    -- Controls to which degree logs are written to the log file. It&#39;s useful to set this to vim.log.levels.DEBUG when&#xA;    -- debugging issues with server installations.&#xA;    log_level = vim.log.levels.INFO,&#xA;&#xA;    -- Limit for the maximum amount of servers to be installed at the same time. Once this limit is reached, any further&#xA;    -- servers that are requested to be installed will be put in a queue.&#xA;    max_concurrent_installers = 4,&#xA;&#xA;    github = {&#xA;        -- The template URL to use when downloading assets from GitHub.&#xA;        -- The placeholders are the following (in order):&#xA;        -- 1. The repository (e.g. &#34;rust-lang/rust-analyzer&#34;)&#xA;        -- 2. The release version (e.g. &#34;v0.3.0&#34;)&#xA;        -- 3. The asset name (e.g. &#34;rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz&#34;)&#xA;        download_url_template = &#34;https://github.com/%s/releases/download/%s/%s&#34;,&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Koko-boya/Grasscutter_Resources</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/Koko-boya/Grasscutter_Resources</id>
    <link href="https://github.com/Koko-boya/Grasscutter_Resources" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Combined Resource Folder from Multiple Sources of certain anime game&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Grasscutter_Resources&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Resource Version - &#34;Certain Anime Game&#34; 2.6.0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ExcelBinOutput &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fixed &lt;a href=&#34;https://github.com/Dimbreath/GenshinData/raw/104c21c6530885e450975b13830639e9ca649799/ExcelBinOutput/ReliquaryMainPropExcelConfigData.json&#34;&gt;ReliquaryMainPropExcelConfigData.json&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/Dimbreath/GenshinData/raw/a92b5842daa911c095f47ef235b2bcd4b388d65a/ExcelBinOutput/ReliquaryAffixExcelConfigData.json&#34;&gt;ReliquaryAffixExcelConfigData.json&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;BinOutput&lt;/li&gt; &#xA; &lt;li&gt;Scripts&lt;/li&gt; &#xA; &lt;li&gt;Readable&lt;/li&gt; &#xA; &lt;li&gt;Subtitle&lt;/li&gt; &#xA; &lt;li&gt;TextMap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Grasscutters/Grasscutter&#34;&gt;Grasscutter&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dimbreath&#34;&gt;Dimbreath&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radioegor146&#34;&gt;radioegor146&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheLostTree&#34;&gt;TheLostTree&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wbthomason/packer.nvim</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/wbthomason/packer.nvim</id>
    <link href="https://github.com/wbthomason/packer.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A use-package inspired plugin manager for Neovim. Uses native packages, supports Luarocks dependencies, written in Lua, allows for expressive config&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;packer.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/packer-nvim/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/packer-nvim/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; inspired plugin/package management for Neovim.&lt;/p&gt; &#xA;&lt;p&gt;Have questions? Start a &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Have a problem or idea? Make an &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues&#34;&gt;issue&lt;/a&gt; or a &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/pulls&#34;&gt;PR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Packer is built on native packages. You may wish to read &lt;code&gt;:h packages&lt;/code&gt; before continuing&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#notices&#34;&gt;Notices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#bootstrapping&#34;&gt;Bootstrapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#the-startup-function&#34;&gt;The startup function&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#custom-initialization&#34;&gt;Custom Initialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#specifying-plugins&#34;&gt;Specifying Plugins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#performing-plugin-management-operations&#34;&gt;Performing plugin management operations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#extending-packer&#34;&gt;Extending packer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#compiling-lazy-loaders&#34;&gt;Compiling Lazy-Loaders&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#user-autocommands&#34;&gt;User autocommands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#using-a-floating-window&#34;&gt;Using a floating window&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#profiling&#34;&gt;Profiling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Notices&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-07-31:&lt;/strong&gt; If you&#39;re on macOS, note that building Neovim with the version of &lt;code&gt;luv&lt;/code&gt; from &lt;code&gt;homebrew&lt;/code&gt; &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues/496#issuecomment-890371022&#34;&gt;will cause any &lt;code&gt;packer&lt;/code&gt; command to crash&lt;/a&gt;. More about this issue at &lt;a href=&#34;https://github.com/neovim/neovim/issues/15054&#34;&gt;neovim/neovim#15054&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-07-28:&lt;/strong&gt; &lt;code&gt;packer&lt;/code&gt; will now highlight commits/plugin names with potentially breaking changes (determined by looking for &lt;code&gt;breaking change&lt;/code&gt; or &lt;code&gt;breaking_change&lt;/code&gt;, case insensitive, in the update commit bodies and headers) as &lt;code&gt;WarningMsg&lt;/code&gt; in the status window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-06-06&lt;/strong&gt;: Your Neovim must include &lt;a href=&#34;https://github.com/neovim/neovim/pull/14659&#34;&gt;https://github.com/neovim/neovim/pull/14659&lt;/a&gt;; &lt;code&gt;packer&lt;/code&gt; uses the &lt;code&gt;noautocmd&lt;/code&gt; key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-04-19&lt;/strong&gt;: &lt;code&gt;packer&lt;/code&gt; now provides built-in profiling for your config via the &lt;code&gt;packer_compiled&lt;/code&gt; file. Take a look at &lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#profiling&#34;&gt;the docs&lt;/a&gt; for more information!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-02-18&lt;/strong&gt;: Having trouble with Luarocks on macOS? See &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues/180&#34;&gt;this issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-01-19&lt;/strong&gt;: Basic Luarocks support has landed! Use the &lt;code&gt;rocks&lt;/code&gt; key with a string or table to specify packages to install.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-12-10&lt;/strong&gt;: The &lt;code&gt;disable_commands&lt;/code&gt; configuration flag now affects non-&lt;code&gt;startup&lt;/code&gt; use as well. This means that, by default, &lt;code&gt;packer&lt;/code&gt; will create commands for basic operations for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-11-13&lt;/strong&gt;: There is now a default implementation for a floating window &lt;code&gt;open_fn&lt;/code&gt; in &lt;code&gt;packer.util&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-09-04:&lt;/strong&gt; Due to changes to the Neovim &lt;code&gt;extmark&lt;/code&gt; api (see: &lt;a href=&#34;https://github.com/neovim/neovim/commit/3853276d9cacc99a2698117e904475dbf7033383&#34;&gt;https://github.com/neovim/neovim/commit/3853276d9cacc99a2698117e904475dbf7033383&lt;/a&gt;), users will need to update to a version of Neovim &lt;strong&gt;after&lt;/strong&gt; the aforementioned PR was merged. There are currently shims around the changed functions which should maintain support for earlier versions of Neovim, but these are intended to be temporary and will be removed by &lt;strong&gt;2020-10-04&lt;/strong&gt;. Therefore Packer will not work with Neovim v0.4.4, which was released before the &lt;code&gt;extmark&lt;/code&gt; change.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Declarative plugin specification&lt;/li&gt; &#xA; &lt;li&gt;Support for dependencies&lt;/li&gt; &#xA; &lt;li&gt;Support for Luarocks dependencies&lt;/li&gt; &#xA; &lt;li&gt;Expressive configuration and lazy-loading options&lt;/li&gt; &#xA; &lt;li&gt;Automatically compiles efficient lazy-loading code to improve startup time&lt;/li&gt; &#xA; &lt;li&gt;Uses native packages&lt;/li&gt; &#xA; &lt;li&gt;Extensible&lt;/li&gt; &#xA; &lt;li&gt;Written in Lua, configured in Lua&lt;/li&gt; &#xA; &lt;li&gt;Post-install/update hooks&lt;/li&gt; &#xA; &lt;li&gt;Uses jobs for async installation&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;git&lt;/code&gt; tags, branches, revisions, submodules&lt;/li&gt; &#xA; &lt;li&gt;Support for local plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;You need to be running Neovim v0.5.0+&lt;/strong&gt;; &lt;code&gt;packer&lt;/code&gt; makes use of extmarks and other newly-added Neovim features.&lt;/li&gt; &#xA; &lt;li&gt;If you are on Windows 10, you need developer mode enabled in order to use local plugins (creating symbolic links requires admin privileges on Windows - credit to @TimUntersberger for this note)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To get started, first clone this repository to somewhere on your &lt;code&gt;packpath&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Unix, Linux Installation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --depth 1 https://github.com/wbthomason/packer.nvim\&#xA; ~/.local/share/nvim/site/pack/packer/start/packer.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use Arch Linux, there is also &lt;a href=&#34;https://aur.archlinux.org/packages/nvim-packer-git/&#34;&gt;an AUR package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Windows Powershell Installation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/wbthomason/packer.nvim &#34;$env:LOCALAPPDATA\nvim-data\site\pack\packer\start\packer.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can write your plugin specification in Lua, e.g. (in &lt;code&gt;~/.config/nvim/lua/plugins.lua&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- This file can be loaded by calling `lua require(&#39;plugins&#39;)` from your init.vim&#xA;&#xA;-- Only required if you have packer configured as `opt`&#xA;vim.cmd [[packadd packer.nvim]]&#xA;&#xA;return require(&#39;packer&#39;).startup(function()&#xA;  -- Packer can manage itself&#xA;  use &#39;wbthomason/packer.nvim&#39;&#xA;&#xA;  -- Simple plugins can be specified as strings&#xA;  use &#39;9mm/vim-closer&#39;&#xA;&#xA;  -- Lazy loading:&#xA;  -- Load on specific commands&#xA;  use {&#39;tpope/vim-dispatch&#39;, opt = true, cmd = {&#39;Dispatch&#39;, &#39;Make&#39;, &#39;Focus&#39;, &#39;Start&#39;}}&#xA;&#xA;  -- Load on an autocommand event&#xA;  use {&#39;andymass/vim-matchup&#39;, event = &#39;VimEnter&#39;}&#xA;&#xA;  -- Load on a combination of conditions: specific filetypes or commands&#xA;  -- Also run code after load (see the &#34;config&#34; key)&#xA;  use {&#xA;    &#39;w0rp/ale&#39;,&#xA;    ft = {&#39;sh&#39;, &#39;zsh&#39;, &#39;bash&#39;, &#39;c&#39;, &#39;cpp&#39;, &#39;cmake&#39;, &#39;html&#39;, &#39;markdown&#39;, &#39;racket&#39;, &#39;vim&#39;, &#39;tex&#39;},&#xA;    cmd = &#39;ALEEnable&#39;,&#xA;    config = &#39;vim.cmd[[ALEEnable]]&#39;&#xA;  }&#xA;&#xA;  -- Plugins can have dependencies on other plugins&#xA;  use {&#xA;    &#39;haorenW1025/completion-nvim&#39;,&#xA;    opt = true,&#xA;    requires = {{&#39;hrsh7th/vim-vsnip&#39;, opt = true}, {&#39;hrsh7th/vim-vsnip-integ&#39;, opt = true}}&#xA;  }&#xA;&#xA;  -- Plugins can also depend on rocks from luarocks.org:&#xA;  use {&#xA;    &#39;my/supercoolplugin&#39;,&#xA;    rocks = {&#39;lpeg&#39;, {&#39;lua-cjson&#39;, version = &#39;2.1.0&#39;}}&#xA;  }&#xA;&#xA;  -- You can specify rocks in isolation&#xA;  use_rocks &#39;penlight&#39;&#xA;  use_rocks {&#39;lua-resty-http&#39;, &#39;lpeg&#39;}&#xA;&#xA;  -- Local plugins can be included&#xA;  use &#39;~/projects/personal/hover.nvim&#39;&#xA;&#xA;  -- Plugins can have post-install/update hooks&#xA;  use {&#39;iamcco/markdown-preview.nvim&#39;, run = &#39;cd app &amp;amp;&amp;amp; yarn install&#39;, cmd = &#39;MarkdownPreview&#39;}&#xA;&#xA;  -- Post-install/update hook with neovim command&#xA;  use { &#39;nvim-treesitter/nvim-treesitter&#39;, run = &#39;:TSUpdate&#39; }&#xA;&#xA;  -- Post-install/update hook with call of vimscript function with argument&#xA;  use { &#39;glacambre/firenvim&#39;, run = function() vim.fn[&#39;firenvim#install&#39;](0) end }&#xA;&#xA;  -- Use specific branch, dependency and run lua file after load&#xA;  use {&#xA;    &#39;glepnir/galaxyline.nvim&#39;, branch = &#39;main&#39;, config = function() require&#39;statusline&#39; end,&#xA;    requires = {&#39;kyazdani42/nvim-web-devicons&#39;}&#xA;  }&#xA;&#xA;  -- Use dependency and run lua function after load&#xA;  use {&#xA;    &#39;lewis6991/gitsigns.nvim&#39;, requires = { &#39;nvim-lua/plenary.nvim&#39; },&#xA;    config = function() require(&#39;gitsigns&#39;).setup() end&#xA;  }&#xA;&#xA;  -- You can specify multiple plugins in a single call&#xA;  use {&#39;tjdevries/colorbuddy.vim&#39;, {&#39;nvim-treesitter/nvim-treesitter&#39;, opt = true}}&#xA;&#xA;  -- You can alias plugin names&#xA;  use {&#39;dracula/vim&#39;, as = &#39;dracula&#39;}&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you get linter complaints about &lt;code&gt;use&lt;/code&gt; being an undefined global, these errors are spurious - &lt;code&gt;packer&lt;/code&gt; injects &lt;code&gt;use&lt;/code&gt; into the scope of the function passed to &lt;code&gt;startup&lt;/code&gt;. If these errors bother you, the easiest fix is to simply specify &lt;code&gt;use&lt;/code&gt; as an argument to the function you pass to &lt;code&gt;startup&lt;/code&gt;, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup(function(use)&#xA;...your config...&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; provides the following commands after you&#39;ve run and configured &lt;code&gt;packer&lt;/code&gt; with &lt;code&gt;require(&#39;packer&#39;).startup(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- You must run this or `PackerSync` whenever you make changes to your plugin configuration&#xA;-- Regenerate compiled loader file&#xA;:PackerCompile&#xA;&#xA;-- Remove any disabled or unused plugins&#xA;:PackerClean&#xA;&#xA;-- Clean, then install missing plugins&#xA;:PackerInstall&#xA;&#xA;-- Clean, then update and install plugins&#xA;:PackerUpdate&#xA;&#xA;-- Perform `PackerUpdate` and then `PackerCompile`&#xA;:PackerSync&#xA;&#xA;-- Loads opt plugin immediately&#xA;:PackerLoad completion-nvim ale&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can configure Neovim to automatically run &lt;code&gt;:PackerCompile&lt;/code&gt; whenever &lt;code&gt;plugins.lua&lt;/code&gt; is updated with &lt;a href=&#34;https://neovim.io/doc/user/autocmd.html#:autocmd&#34;&gt;an autocommand&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;augroup packer_user_config&#xA;  autocmd!&#xA;  autocmd BufWritePost plugins.lua source &amp;lt;afile&amp;gt; | PackerCompile&#xA;augroup end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This autocommand can be placed in your &lt;code&gt;init.vim&lt;/code&gt;, or any other startup file as per your setup. Placing this in &lt;code&gt;plugins.lua&lt;/code&gt; could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd([[&#xA;  augroup packer_user_config&#xA;    autocmd!&#xA;    autocmd BufWritePost plugins.lua source &amp;lt;afile&amp;gt; | PackerCompile&#xA;  augroup end&#xA;]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bootstrapping&lt;/h2&gt; &#xA;&lt;p&gt;If you want to automatically install and set up &lt;code&gt;packer.nvim&lt;/code&gt; on any machine you clone your configuration to, add the following snippet (which is due to @Iron-E and @khuedoan) somewhere in your config &lt;strong&gt;before&lt;/strong&gt; your first usage of &lt;code&gt;packer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local fn = vim.fn&#xA;local install_path = fn.stdpath(&#39;data&#39;)..&#39;/site/pack/packer/start/packer.nvim&#39;&#xA;if fn.empty(fn.glob(install_path)) &amp;gt; 0 then&#xA;  packer_bootstrap = fn.system({&#39;git&#39;, &#39;clone&#39;, &#39;--depth&#39;, &#39;1&#39;, &#39;https://github.com/wbthomason/packer.nvim&#39;, install_path})&#xA;end&#xA;&#xA;return require(&#39;packer&#39;).startup(function(use)&#xA;  -- My plugins here&#xA;  -- use &#39;foo1/bar1.nvim&#39;&#xA;  -- use &#39;foo2/bar2.nvim&#39;&#xA;&#xA;  -- Automatically set up your configuration after cloning packer.nvim&#xA;  -- Put this at the end after all plugins&#xA;  if packer_bootstrap then&#xA;    require(&#39;packer&#39;).sync()&#xA;  end&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the following command (with &lt;code&gt;packer&lt;/code&gt; bootstrapped) to have &lt;code&gt;packer&lt;/code&gt; setup your configuration (or simply run updates) and close once all operations are completed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nvim --headless -c &#39;autocmd User PackerComplete quitall&#39; -c &#39;PackerSync&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The above snippets give some examples of &lt;code&gt;packer&lt;/code&gt; features and use. Examples include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;My dotfiles: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/lua/plugins.lua&#34;&gt;Specification file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/lua/plugins.lua&#34;&gt;Loading file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/plugin/packer_compiled.lua&#34;&gt;Generated lazy-loader file&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;An example using the &lt;code&gt;startup&lt;/code&gt; method: &lt;a href=&#34;https://github.com/tjdevries/config_manager/raw/master/xdg_config/nvim/lua/tj/plugins.lua&#34;&gt;tjdevries&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using this method, you do not require a &#34;loading&#34; file. You can simply &lt;code&gt;lua require(&#39;plugins&#39;)&lt;/code&gt; from your &lt;code&gt;init.vim&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following is a more in-depth explanation of &lt;code&gt;packer&lt;/code&gt;&#39;s features and use.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;startup&lt;/code&gt; function&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; provides &lt;code&gt;packer.startup(spec)&lt;/code&gt;, which is used in the above examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;startup&lt;/code&gt; is a convenience function for simple setup and can be invoked as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a function: &lt;code&gt;packer.startup(function() use &#39;tjdevries/colorbuddy.vim&#39; end)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a table with a function as its first element and config overrides as another element: &lt;code&gt;packer.startup({function() use &#39;tjdevries/colorbuddy.vim&#39; end, config = { ... }})&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a table with a table of plugin specifications as its first element, config overrides as another element, and optional rock specifications as another element: &lt;code&gt;packer.startup({{&#39;tjdevries/colorbuddy.vim&#39;}, config = { ... }, rocks = { ... }})&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom Initialization&lt;/h3&gt; &#xA;&lt;p&gt;You are not required to use &lt;code&gt;packer.startup&lt;/code&gt; if you prefer a more manual setup with finer control over configuration and loading.&lt;/p&gt; &#xA;&lt;p&gt;To take this approach, load &lt;code&gt;packer&lt;/code&gt; like any other Lua module. You must call &lt;code&gt;packer.init()&lt;/code&gt; before performing any operations; it is recommended to call &lt;code&gt;packer.reset()&lt;/code&gt; if you may be re-running your specification code (e.g. by sourcing your plugin specification file with &lt;code&gt;luafile&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You may pass a table of configuration values to &lt;code&gt;packer.init()&lt;/code&gt; to customize its operation. The default configuration values (and structure of the configuration table) are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ensure_dependencies   = true, -- Should packer install plugin dependencies?&#xA;  snapshot = nil, -- Name of the snapshot you would like to load at startup&#xA;  snapshot_path = join_paths(stdpath &#39;cache&#39;, &#39;packer.nvim&#39;), -- Default save directory for snapshots&#xA;  package_root   = util.join_paths(vim.fn.stdpath(&#39;data&#39;), &#39;site&#39;, &#39;pack&#39;),&#xA;  compile_path = util.join_paths(vim.fn.stdpath(&#39;config&#39;), &#39;plugin&#39;, &#39;packer_compiled.lua&#39;),&#xA;  plugin_package = &#39;packer&#39;, -- The default package for plugins&#xA;  max_jobs = nil, -- Limit the number of simultaneous jobs. nil means no limit&#xA;  auto_clean = true, -- During sync(), remove unused plugins&#xA;  compile_on_sync = true, -- During sync(), run packer.compile()&#xA;  disable_commands = false, -- Disable creating commands&#xA;  opt_default = false, -- Default to using opt (as opposed to start) plugins&#xA;  transitive_opt = true, -- Make dependencies of opt plugins also opt by default&#xA;  transitive_disable = true, -- Automatically disable dependencies of disabled plugins&#xA;  auto_reload_compiled = true, -- Automatically reload the compiled file after creating it.&#xA;  git = {&#xA;    cmd = &#39;git&#39;, -- The base command for git operations&#xA;    subcommands = { -- Format strings for git subcommands&#xA;      update         = &#39;pull --ff-only --progress --rebase=false&#39;,&#xA;      install        = &#39;clone --depth %i --no-single-branch --progress&#39;,&#xA;      fetch          = &#39;fetch --depth 999999 --progress&#39;,&#xA;      checkout       = &#39;checkout %s --&#39;,&#xA;      update_branch  = &#39;merge --ff-only @{u}&#39;,&#xA;      current_branch = &#39;branch --show-current&#39;,&#xA;      diff           = &#39;log --color=never --pretty=format:FMT --no-show-signature HEAD@{1}...HEAD&#39;,&#xA;      diff_fmt       = &#39;%%h %%s (%%cr)&#39;,&#xA;      get_rev        = &#39;rev-parse --short HEAD&#39;,&#xA;      get_msg        = &#39;log --color=never --pretty=format:FMT --no-show-signature HEAD -n 1&#39;,&#xA;      submodules     = &#39;submodule update --init --recursive --progress&#39;&#xA;    },&#xA;    depth = 1, -- Git clone depth&#xA;    clone_timeout = 60, -- Timeout, in seconds, for git clones&#xA;    default_url_format = &#39;https://github.com/%s&#39; -- Lua format string used for &#34;aaa/bbb&#34; style plugins&#xA;  },&#xA;  display = {&#xA;    non_interactive = false, -- If true, disable display windows for all operations&#xA;    open_fn  = nil, -- An optional function to open a window for packer&#39;s display&#xA;    open_cmd = &#39;65vnew \\[packer\\]&#39;, -- An optional command to open a window for packer&#39;s display&#xA;    working_sym = &#39;⟳&#39;, -- The symbol for a plugin being installed/updated&#xA;    error_sym = &#39;✗&#39;, -- The symbol for a plugin with an error in installation/updating&#xA;    done_sym = &#39;✓&#39;, -- The symbol for a plugin which has completed installation/updating&#xA;    removed_sym = &#39;-&#39;, -- The symbol for an unused plugin which was removed&#xA;    moved_sym = &#39;→&#39;, -- The symbol for a plugin which was moved (e.g. from opt to start)&#xA;    header_sym = &#39;━&#39;, -- The symbol for the header line in packer&#39;s display&#xA;    show_all_info = true, -- Should packer show all update details automatically?&#xA;    prompt_border = &#39;double&#39;, -- Border style of prompt popups.&#xA;    keybindings = { -- Keybindings for the display window&#xA;      quit = &#39;q&#39;,&#xA;      toggle_info = &#39;&amp;lt;CR&amp;gt;&#39;,&#xA;      diff = &#39;d&#39;,&#xA;      prompt_revert = &#39;r&#39;,&#xA;    }&#xA;  },&#xA;  luarocks = {&#xA;    python_cmd = &#39;python&#39; -- Set the python command to use for running hererocks&#xA;  },&#xA;  log = { level = &#39;warn&#39; }, -- The default print log level. One of: &#34;trace&#34;, &#34;debug&#34;, &#34;info&#34;, &#34;warn&#34;, &#34;error&#34;, &#34;fatal&#34;.&#xA;  profile = {&#xA;    enable = false,&#xA;    threshold = 1, -- integer in milliseconds, plugins which load faster than this won&#39;t be shown in profile output&#xA;  },&#xA;  autoremove = false, -- Remove disabled or unused plugins without prompting the user&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying plugins&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; is based around declarative specification of plugins. You can declare a plugin using the function &lt;code&gt;packer.use&lt;/code&gt;, which I highly recommend locally binding to &lt;code&gt;use&lt;/code&gt; for conciseness.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;use&lt;/code&gt; takes either a string or a table. If a string is provided, it is treated as a plugin location for a non-optional plugin with no additional configuration. Plugin locations may be specified as&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Absolute paths to a local plugin&lt;/li&gt; &#xA; &lt;li&gt;Full URLs (treated as plugins managed with &lt;code&gt;git&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;username/repo&lt;/code&gt; paths (treated as Github &lt;code&gt;git&lt;/code&gt; plugins)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A table given to &lt;code&gt;use&lt;/code&gt; can take two forms:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A list of plugin specifications (strings or tables)&lt;/li&gt; &#xA; &lt;li&gt;A table specifying a single plugin. It must have a plugin location string as its first element, and may additionally have a number of optional keyword elements, shown below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;myusername/example&#39;,        -- The plugin location string&#xA;  -- The following keys are all optional&#xA;  disable = boolean,           -- Mark a plugin as inactive&#xA;  as = string,                 -- Specifies an alias under which to install the plugin&#xA;  installer = function,        -- Specifies custom installer. See &#34;custom installers&#34; below.&#xA;  updater = function,          -- Specifies custom updater. See &#34;custom installers&#34; below.&#xA;  after = string or list,      -- Specifies plugins to load before this plugin. See &#34;sequencing&#34; below&#xA;  rtp = string,                -- Specifies a subdirectory of the plugin to add to runtimepath.&#xA;  opt = boolean,               -- Manually marks a plugin as optional.&#xA;  branch = string,             -- Specifies a git branch to use&#xA;  tag = string,                -- Specifies a git tag to use. Supports &#39;*&#39; for &#34;latest tag&#34;&#xA;  commit = string,             -- Specifies a git commit to use&#xA;  lock = boolean,              -- Skip updating this plugin in updates/syncs. Still cleans.&#xA;  run = string, function, or table, -- Post-update/install hook. See &#34;update/install hooks&#34;.&#xA;  requires = string or list,   -- Specifies plugin dependencies. See &#34;dependencies&#34;.&#xA;  rocks = string or list,      -- Specifies Luarocks dependencies for the plugin&#xA;  config = string or function, -- Specifies code to run after this plugin is loaded.&#xA;  -- The setup key implies opt = true&#xA;  setup = string or function,  -- Specifies code to run before this plugin is loaded.&#xA;  -- The following keys all imply lazy-loading and imply opt = true&#xA;  cmd = string or list,        -- Specifies commands which load this plugin. Can be an autocmd pattern.&#xA;  ft = string or list,         -- Specifies filetypes which load this plugin.&#xA;  keys = string or list,       -- Specifies maps which load this plugin. See &#34;Keybindings&#34;.&#xA;  event = string or list,      -- Specifies autocommand events which load this plugin.&#xA;  fn = string or list          -- Specifies functions which load this plugin.&#xA;  cond = string, function, or list of strings/functions,   -- Specifies a conditional test to load this plugin&#xA;  module = string or list      -- Specifies Lua module names for require. When requiring a string which starts&#xA;                               -- with one of these module names, the plugin will be loaded.&#xA;  module_pattern = string/list -- Specifies Lua pattern of Lua module names for require. When&#xA;  requiring a string which matches one of these patterns, the plugin will be loaded.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the &lt;code&gt;cmd&lt;/code&gt; option, the command may be a full command, or an autocommand pattern. If the command contains any non-alphanumeric characters, it is assumed to be a pattern, and instead of creating a stub command, it creates a CmdUndefined autocmd to load the plugin when a command that matches the pattern is invoked.&lt;/p&gt; &#xA;&lt;h4&gt;Checking plugin statuses&lt;/h4&gt; &#xA;&lt;p&gt;You can check whether or not a particular plugin is installed with &lt;code&gt;packer&lt;/code&gt; as well as if that plugin is loaded. To do this you can check for the plugin&#39;s name in the &lt;code&gt;packer_plugins&lt;/code&gt; global table. Plugins in this table are saved using only the last section of their names e.g. &lt;code&gt;tpope/vim-fugitive&lt;/code&gt; if installed will be under the key &lt;code&gt;vim-fugitive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;if packer_plugins[&#34;vim-fugitive&#34;] and packer_plugins[&#34;vim-fugitive&#34;].loaded then&#xA;print(&#34;Vim fugitive is loaded&#34;)&#xA;-- other custom logic&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; this table is only available &lt;em&gt;after&lt;/em&gt; &lt;code&gt;packer_compiled.vim&lt;/code&gt; is loaded so cannot be used till &lt;em&gt;after&lt;/em&gt; plugins have been loaded.&lt;/p&gt; &#xA;&lt;h4&gt;Luarocks support&lt;/h4&gt; &#xA;&lt;p&gt;You may specify that a plugin requires one or more Luarocks packages using the &lt;code&gt;rocks&lt;/code&gt; key. This key takes either a string specifying the name of a package (e.g. &lt;code&gt;rocks=lpeg&lt;/code&gt;), or a list specifying one or more packages. Entries in the list may either be strings, a list of strings or a table --- the latter case is used to specify arguments such as the particular version of a package. all supported luarocks keys are allowed except: &lt;code&gt;tree&lt;/code&gt; and &lt;code&gt;local&lt;/code&gt;. Environment variables for the luarocks command can also be specified using the &lt;code&gt;env&lt;/code&gt; key which takes a table as the value as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;rocks = {&#39;lpeg&#39;, {&#39;lua-cjson&#39;, version = &#39;2.1.0&#39;}}&#xA;use_rocks {&#39;lua-cjson&#39;, &#39;lua-resty-http&#39;}&#xA;use_rocks {&#39;luaformatter&#39;, server = &#39;https://luarocks.org/dev&#39;}&#xA;use_rocks {&#39;openssl&#39; env = {OPENSSL_DIR = &#34;/path/to/dir&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, &lt;code&gt;packer&lt;/code&gt; only supports equality constraints on package versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; also provides the function &lt;code&gt;packer.luarocks.install_commands()&lt;/code&gt;, which creates the &lt;code&gt;PackerRocks &amp;lt;cmd&amp;gt; &amp;lt;packages...&amp;gt;&lt;/code&gt; command. &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt; must be one of &#34;install&#34; or &#34;remove&#34;; &lt;code&gt;&amp;lt;packages...&amp;gt;&lt;/code&gt; is one or more package names (currently, version restrictions are not supported with this command). Running &lt;code&gt;PackerRocks&lt;/code&gt; will install or remove the given packages. You can use this command even if you don&#39;t use &lt;code&gt;packer&lt;/code&gt; to manage your plugins. However, please note that (1) packages installed through &lt;code&gt;PackerRocks&lt;/code&gt; &lt;strong&gt;will&lt;/strong&gt; be removed by calls to &lt;code&gt;packer.luarocks.clean()&lt;/code&gt; (unless they are also part of a &lt;code&gt;packer&lt;/code&gt; plugin specification), and (2) you will need to manually invoke &lt;code&gt;packer.luarocks.setup_paths&lt;/code&gt; (or otherwise modify your &lt;code&gt;package.path&lt;/code&gt;) to ensure that Neovim can find the installed packages.&lt;/p&gt; &#xA;&lt;p&gt;Finally, &lt;code&gt;packer&lt;/code&gt; provides the function &lt;code&gt;packer.use_rocks&lt;/code&gt;, which takes a string or table specifying one or more Luarocks packages as in the &lt;code&gt;rocks&lt;/code&gt; key. You can use this to ensure that &lt;code&gt;packer&lt;/code&gt; downloads and manages some rocks which you want to use, but which are not associated with any particular plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Custom installers&lt;/h4&gt; &#xA;&lt;p&gt;You may specify a custom installer &amp;amp; updater for a plugin using the &lt;code&gt;installer&lt;/code&gt; and &lt;code&gt;updater&lt;/code&gt; keys. Note that either both or none of these keys are required. These keys should be functions which take as an argument a &lt;code&gt;display&lt;/code&gt; object (from &lt;code&gt;lua/packer/display.lua&lt;/code&gt;) and return an async function (per &lt;code&gt;lua/packer/async.lua&lt;/code&gt;) which (respectively) installs/updates the given plugin.&lt;/p&gt; &#xA;&lt;p&gt;Providing the &lt;code&gt;installer&lt;/code&gt;/&lt;code&gt;updater&lt;/code&gt; keys overrides plugin type detection, but you still need to provide a location string for the name of the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Update/install hooks&lt;/h4&gt; &#xA;&lt;p&gt;You may specify operations to be run after successful installs/updates of a plugin with the &lt;code&gt;run&lt;/code&gt; key. This key may either be a Lua function, which will be called with the &lt;code&gt;plugin&lt;/code&gt; table for this plugin (containing the information passed to &lt;code&gt;use&lt;/code&gt; as well as output from the installation/update commands, the installation path of the plugin, etc.), a string, or a table of functions and strings.&lt;/p&gt; &#xA;&lt;p&gt;If an element of &lt;code&gt;run&lt;/code&gt; is a string, then either:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If the first character of &lt;code&gt;run&lt;/code&gt; is &#34;:&#34;, it is treated as a Neovim command and executed.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, &lt;code&gt;run&lt;/code&gt; is treated as a shell command and run in the installation directory of the plugin via &lt;code&gt;$SHELL -c &#39;&amp;lt;run&amp;gt;&#39;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Plugins may specify dependencies via the &lt;code&gt;requires&lt;/code&gt; key. This key can be a string or a list (table).&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;requires&lt;/code&gt; is a string, it is treated as specifying a single plugin. If a plugin with the name given in &lt;code&gt;requires&lt;/code&gt; is already known in the managed set, nothing happens. Otherwise, the string is treated as a plugin location string and the corresponding plugin is added to the managed set.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;requires&lt;/code&gt; is a list, it is treated as a list of plugin specifications following the format given above.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ensure_dependencies&lt;/code&gt; is true, the plugins specified in &lt;code&gt;requires&lt;/code&gt; will be installed.&lt;/p&gt; &#xA;&lt;p&gt;Plugins specified in &lt;code&gt;requires&lt;/code&gt; are removed when no active plugins require them.&lt;/p&gt; &#xA;&lt;h4&gt;Sequencing&lt;/h4&gt; &#xA;&lt;p&gt;You may specify a loading order for plugins using the &lt;code&gt;after&lt;/code&gt; key. This key can be a string or a list (table).&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;after&lt;/code&gt; is a string, it must be the name of another plugin managed by &lt;code&gt;packer&lt;/code&gt; (e.g. the final segment of a plugin&#39;s path - for a Github plugin &lt;code&gt;FooBar/Baz&lt;/code&gt;, the name would be just &lt;code&gt;Baz&lt;/code&gt;). If &lt;code&gt;after&lt;/code&gt; is a table, it must be a list of plugin names. If a plugin has an alias (i.e. uses the &lt;code&gt;as&lt;/code&gt; key), this alias is its name.&lt;/p&gt; &#xA;&lt;p&gt;The set of plugins specified in a plugin&#39;s &lt;code&gt;after&lt;/code&gt; key must &lt;strong&gt;all&lt;/strong&gt; be loaded before the plugin using &lt;code&gt;after&lt;/code&gt; will be loaded. For example, in the specification&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  use {&#39;FooBar/Baz&#39;, ft = &#39;bax&#39;}&#xA;  use {&#39;Something/Else&#39;, after = &#39;Baz&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the plugin &lt;code&gt;Else&lt;/code&gt; will only be loaded after the plugin &lt;code&gt;Baz&lt;/code&gt;, which itself is only loaded for files with &lt;code&gt;bax&lt;/code&gt; filetype.&lt;/p&gt; &#xA;&lt;h4&gt;Keybindings&lt;/h4&gt; &#xA;&lt;p&gt;Plugins may be lazy-loaded on the use of keybindings/maps. Individual keybindings are specified either as a string (in which case they are treated as normal mode maps) or a table in the format &lt;code&gt;{mode, map}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Performing plugin management operations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; exposes the following functions for common plugin management operations. In all of the below, &lt;code&gt;plugins&lt;/code&gt; is an optional table of plugin names; if not provided, the default is &#34;all managed plugins&#34;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.install(plugins)&lt;/code&gt;: Install the specified plugins if they are not already installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.update(plugins)&lt;/code&gt;: Update the specified plugins, installing any that are missing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.clean()&lt;/code&gt;: Remove any disabled or no longer managed plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.sync(plugins)&lt;/code&gt;: Perform a &lt;code&gt;clean&lt;/code&gt; followed by an &lt;code&gt;update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.compile(path)&lt;/code&gt;: Compile lazy-loader code and save to &lt;code&gt;path&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.snapshot(snapshot_name, ...)&lt;/code&gt;: Creates a snapshot file that will live under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be taken. Optionally, a list of plugins name can be provided to selectively choose the plugins to snapshot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.rollback(snapshot_name, ...)&lt;/code&gt;: Rollback plugins status a snapshot file that will live under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be taken. Optionally, a list of plugins name can be provided to selectively choose which plugins to revert.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.delete(snapshot_name)&lt;/code&gt;: Deletes a snapshot file under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be deleted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extending &lt;code&gt;packer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can add custom key handlers to &lt;code&gt;packer&lt;/code&gt; by calling &lt;code&gt;packer.set_handler(name, func)&lt;/code&gt; where &lt;code&gt;name&lt;/code&gt; is the key you wish to handle and &lt;code&gt;func&lt;/code&gt; is a function with the signature &lt;code&gt;func(plugins, plugin, value)&lt;/code&gt; where &lt;code&gt;plugins&lt;/code&gt; is the global table of managed plugins, &lt;code&gt;plugin&lt;/code&gt; is the table for a specific plugin, and &lt;code&gt;value&lt;/code&gt; is the value associated with key &lt;code&gt;name&lt;/code&gt; in &lt;code&gt;plugin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling Lazy-Loaders&lt;/h3&gt; &#xA;&lt;p&gt;To optimize startup time, &lt;code&gt;packer.nvim&lt;/code&gt; compiles code to perform the lazy-loading operations you specify. This means that you do not need to load &lt;code&gt;packer.nvim&lt;/code&gt; unless you want to perform some plugin management operations.&lt;/p&gt; &#xA;&lt;p&gt;To generate the compiled code, call &lt;code&gt;packer.compile(path)&lt;/code&gt;, where &lt;code&gt;path&lt;/code&gt; is some file path on your &lt;code&gt;runtimepath&lt;/code&gt;, with a &lt;code&gt;.vim&lt;/code&gt; extension. This will generate a blend of Lua and Vimscript to load and configure all your lazy-loaded plugins (e.g. generating commands, autocommands, etc.) and save it to &lt;code&gt;path&lt;/code&gt;. Then, when you start vim, the file at &lt;code&gt;path&lt;/code&gt; is loaded (because &lt;code&gt;path&lt;/code&gt; must be on your &lt;code&gt;runtimepath&lt;/code&gt;), and lazy-loading works.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;path&lt;/code&gt; is not provided to &lt;code&gt;packer.compile&lt;/code&gt;, the output file will default to the value of &lt;code&gt;config.compile_path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The option &lt;code&gt;compile_on_sync&lt;/code&gt;, which defaults to &lt;code&gt;true&lt;/code&gt;, will run &lt;code&gt;packer.compile()&lt;/code&gt; during &lt;code&gt;packer.sync()&lt;/code&gt;, if set to &lt;code&gt;true&lt;/code&gt;. Note that otherwise, you &lt;strong&gt;must&lt;/strong&gt; run &lt;code&gt;packer.compile&lt;/code&gt; yourself to generate the lazy-loader file!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you use a function value for &lt;code&gt;config&lt;/code&gt; or &lt;code&gt;setup&lt;/code&gt; keys in any plugin specifications, it &lt;strong&gt;must not&lt;/strong&gt; have any upvalues (i.e. captures). We currently use Lua&#39;s &lt;code&gt;string.dump&lt;/code&gt; to compile config/setup functions to bytecode, which has this limitation. Additionally, if functions are given for these keys, the functions will be passed the plugin name and information table as arguments.&lt;/p&gt; &#xA;&lt;h3&gt;User autocommands&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; runs most of its operations asyncronously. If you would like to implement automations that require knowing when the operations are complete, you can use the following &lt;code&gt;User&lt;/code&gt; autocmds (see &lt;code&gt;:help User&lt;/code&gt; for more info on how to use):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PackerComplete&lt;/code&gt;: Fires after install, update, clean, and sync asynchronous operations finish.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PackerCompileDone&lt;/code&gt;: Fires after compiling (see &lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#compiling-lazy-loaders&#34;&gt;the section on compilation&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using a floating window&lt;/h3&gt; &#xA;&lt;p&gt;You can configure Packer to use a floating window for command outputs by passing a utility function to &lt;code&gt;packer&lt;/code&gt;&#39;s config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup({function()&#xA;  -- Your plugins here&#xA;end,&#xA;config = {&#xA;  display = {&#xA;    open_fn = require(&#39;packer.util&#39;).float,&#xA;  }&#xA;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this floating window will show doubled borders. If you want to customize the window appearance, you can pass a configuration to &lt;code&gt;float&lt;/code&gt;, which is the same configuration that would be passed to &lt;code&gt;nvim_open_win&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup({function()&#xA;  -- Your plugins here&#xA;end,&#xA;config = {&#xA;  display = {&#xA;    open_fn = function()&#xA;      return require(&#39;packer.util&#39;).float({ border = &#39;single&#39; })&#xA;    end&#xA;  }&#xA;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profiling&lt;/h2&gt; &#xA;&lt;p&gt;Packer has built in functionality that can allow you to profile the time taken loading your plugins. In order to use this functionality you must either enable profiling in your config, or pass in an argument when running packer compile.&lt;/p&gt; &#xA;&lt;h4&gt;Setup via config&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;  profile = {&#xA;    enable = true,&#xA;    threshold = 1 -- the amount in ms that a plugins load time must be over for it to be included in the profile&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using the packer compile command&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:PackerCompile profile=true&#xA;&#34; or&#xA;:PackerCompile profile=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Profiling usage&lt;/h4&gt; &#xA;&lt;p&gt;This will rebuild your &lt;code&gt;packer_compiled.vim&lt;/code&gt; with profiling code included. In order to visualise the output of the profile restart your neovim and run &lt;code&gt;PackerProfile&lt;/code&gt;. This will open a window with the output of your profiling.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;packer.nvim&lt;/code&gt; logs to &lt;code&gt;stdpath(cache)/packer.nvim.log&lt;/code&gt;. Looking at this file is usually a good start if something isn&#39;t working as expected.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: Beta. Things seem to work and most features are complete, but certainly not every edge case has been tested. People willing to give it a try and report bugs/errors are very welcome!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic package management works (i.e. installation, updating, cleaning, start/opt plugins, displaying results)&lt;/li&gt; &#xA; &lt;li&gt;Automatic generation of lazy-loading code works&lt;/li&gt; &#xA; &lt;li&gt;More testing is needed&lt;/li&gt; &#xA; &lt;li&gt;The code is messy and needs more cleanup and refactoring&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current work-in-progress&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Playing with ideas to make manual compilation less necessary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to those who have contributed to the project! PRs and issues are always welcome. This list is infrequently updated; please feel free to bug me if you&#39;re not listed here and you would like to be.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@akinsho&lt;/li&gt; &#xA; &lt;li&gt;@nanotee&lt;/li&gt; &#xA; &lt;li&gt;@weilbith&lt;/li&gt; &#xA; &lt;li&gt;@Iron-E&lt;/li&gt; &#xA; &lt;li&gt;@tjdevries&lt;/li&gt; &#xA; &lt;li&gt;@numToStr&lt;/li&gt; &#xA; &lt;li&gt;@fsouza&lt;/li&gt; &#xA; &lt;li&gt;@gbrlsnchs&lt;/li&gt; &#xA; &lt;li&gt;@lewis6991&lt;/li&gt; &#xA; &lt;li&gt;@TimUntersberger&lt;/li&gt; &#xA; &lt;li&gt;@bfredl&lt;/li&gt; &#xA; &lt;li&gt;@sunjon&lt;/li&gt; &#xA; &lt;li&gt;@gwerbin&lt;/li&gt; &#xA; &lt;li&gt;@shadmansaleh&lt;/li&gt; &#xA; &lt;li&gt;@ur4ltz&lt;/li&gt; &#xA; &lt;li&gt;@EdenEast&lt;/li&gt; &#xA; &lt;li&gt;@khuedoan&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jerrykuku/luci-app-vssr</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/jerrykuku/luci-app-vssr</id>
    <link href="https://github.com/jerrykuku/luci-app-vssr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HelloWorld是一个以用户最佳主观体验为导向的插件，它支持多种主流协议和多种自定义视频分流服务，拥有精美的操作界面，并配上直观的节点信息。&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/jerrykuku/staff/master/helloworld-logo1.png&#34; width=&#34;500px&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt; An OpenWrt Internet surfing plug-in &lt;/h1&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt; HelloWorld是一个以用户最佳主观体验为导向的插件，它支持多种主流协议和多种自定义视频分流服务，拥有精美的操作界面，并配上直观的节点信息。&lt;br&gt;&lt;br&gt; &lt;/h3&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/jerrykuku/luci-app-vssr/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jerrykuku/luci-app-vssr/pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jerrykuku/luci-app-vssr/issues/new&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Issues-welcome-brightgreen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jerrykuku/luci-app-vssr/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/release-v1.25-blue.svg?&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jerrykuku/luci-app-vssr/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/jerrykuku/luci-app-vssr/total&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://t.me/PIN1Group&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Contact-telegram-blue&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;b&gt;&lt;br&gt;支持全部类型的节点分流&lt;/b&gt;&lt;br&gt; 目前只适配最新版 argon主题 （其他主题下应该也可以用 但显示应该不会很完美）&lt;br&gt; 目前Lean最新版本的openwrt 已经可以直接拉取源码到 package/lean 下直接进行勾选并编译。&lt;/p&gt; &#xA;&lt;h3&gt;更新日志 2022-04-23 v1.25&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UPDATE: 适配19.07 LuCI。&lt;/li&gt; &#xA; &lt;li&gt;FIX: 继续优化订阅节点时旗帜匹配的准确性。&lt;/li&gt; &#xA; &lt;li&gt;FIX: 优化了一些block的间距问题，同时优化了暗黑模式下的颜色显示【最好搭配最新版argon主题】。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;详情见&lt;a href=&#34;https://raw.githubusercontent.com/jerrykuku/luci-app-vssr/master/relnotes.txt&#34;&gt;具体日志&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;插件介绍&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;基于 Lean ssrp 全新MOD的 Hello World ,在原插件的基础上做了一些优化用户操作体验的修改，感谢插件原作者所做出的的努力和贡献！&lt;/li&gt; &#xA; &lt;li&gt;节点列表支持国旗显示并且页面打开自动检测节点的连接时间。&lt;/li&gt; &#xA; &lt;li&gt;支持各种分流组合，并且可以自己编辑所有分流的域名，相当于七组自定义分流。&lt;/li&gt; &#xA; &lt;li&gt;将节点订阅转移至[高级设置]请悉知。&lt;/li&gt; &#xA; &lt;li&gt;底部状态栏：左边显示国旗地区以及IP,右边为四个站点的可访问状态，彩色为可访问，灰色为不能访问。&lt;/li&gt; &#xA; &lt;li&gt;优化了国旗匹配方法。&lt;/li&gt; &#xA; &lt;li&gt;建议搭配Argon主题，以达到最佳的显示效果。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;欢迎提交bug。&lt;/p&gt; &#xA;&lt;h3&gt;如何编译&lt;/h3&gt; &#xA;&lt;p&gt;假设你的Lean openwrt（最新版本19.07） 在 lede 目录下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd lede/package/lean/  &#xA;&#xA;git clone https://github.com/jerrykuku/lua-maxminddb.git  #git lua-maxminddb 依赖&#xA;&#xA;git clone https://github.com/jerrykuku/luci-app-vssr.git  &#xA;&#xA;make menuconfig&#xA;&#xA;make -j1 V=s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;问题解决&lt;/h3&gt; &#xA;&lt;p&gt;使用lede最新源码编译失败，报错缺少依赖：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;satisfy_dependencies_for: Cannot satisfy the following dependencies for luci-app-vssr:&#xA;- shadowsocksr-libev-ssr-local&#xA;- shadowsocksr-libev-ssr-redir&#xA;- shadowsocksr-libev-ssr-check&#xA;- xray-core&#xA;- xray-plugin&#xA;- shadowsocksr-libev-ssr-server&#xA;opkg_install_cmd: Cannot install package luci-app-vssr.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;原因是lede缺少软件源，解决办法，清除缓存重新下载编译：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 1.清除缓存&#xA;rm -rf tmp&#xA;&#xA;# 2.feeds.conf文件添加源&#xA;src-git helloworld https://github.com/fw876/helloworld&#xA;src-git passwall https://github.com/xiaorouji/openwrt-passwall&#xA;&#xA;# 3.重新执行升级安装下载编译等操作&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make -j8 download V=s&#xA;make -j1 V=s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或者也可以完全删除lede，重新git并修改feeds.conf（比较耗时）&lt;/p&gt; &#xA;&lt;h3&gt;感谢&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/coolsnowwolf/lede&#34;&gt;https://github.com/coolsnowwolf/lede&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;我的其它项目&lt;/h3&gt; &#xA;&lt;p&gt;Argon theme ：&lt;a href=&#34;https://github.com/jerrykuku/luci-theme-argon&#34;&gt;https://github.com/jerrykuku/luci-theme-argon&lt;/a&gt;&lt;br&gt; 京东签到插件 ：&lt;a href=&#34;https://github.com/jerrykuku/luci-app-jd-dailybonus&#34;&gt;https://github.com/jerrykuku/luci-app-jd-dailybonus&lt;/a&gt;&lt;br&gt; openwrt-nanopi-r1s-h5 ： &lt;a href=&#34;https://github.com/jerrykuku/openwrt-nanopi-r1s-h5&#34;&gt;https://github.com/jerrykuku/openwrt-nanopi-r1s-h5&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linty-org/key-menu.nvim</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/linty-org/key-menu.nvim</id>
    <link href="https://github.com/linty-org/key-menu.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Key mapping hints in a floating window&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;key-menu.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;🚧 This plugin is currently in a beta state. It is usable and I use it as part of my normal, everyday config. But many features are missing and there may be bugs. Bug reports and feature requests are welcome! 🚧&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5308024/169894329-7e14d3b1-fa9e-4326-92f2-de82d3b0096e.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Just works. Lightweight and simple. Minimal configuration.&lt;/li&gt; &#xA; &lt;li&gt;The hint window pops up next to your cursor, and uses as little screen real estate as possible.&lt;/li&gt; &#xA; &lt;li&gt;No custom syntax for creating mappings – just use Neovim&#39;s standard, built-in &lt;code&gt;vim.keymap.set&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup and usage&lt;/h2&gt; &#xA;&lt;p&gt;Install key-menu.nvim using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt; with &lt;code&gt;Plug &#39;linty-org/key-menu.nvim&#39;&lt;/code&gt;, or use your favorite Neovim plugin manager. Requires at least Neovim 0.7.&lt;/p&gt; &#xA;&lt;p&gt;Sample configuration (in &lt;code&gt;init.lua&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- This Vim setting controls the delay before the popup appears. The way it&#xA;-- works is, if you have mappings for, say, the key &#34;a&#34; and the key sequence&#xA;-- &#34;ab&#34;, if you type &#34;a&#34;, then Vim waits timeoutlen, and if you don&#39;t press&#xA;-- another key before that amount of time, then the &#34;a&#34; mapping is executed, but&#xA;-- if you press &#34;b&#34; before timeoutlen, then the &#34;ab&#34; mapping is executed.&#xA;vim.o.timeoutlen = 300&#xA;&#xA;-- If you use &amp;lt;Space&amp;gt; as your mapping prefix, then this will make the key-menu&#xA;-- popup appear in Normal mode, after you press &amp;lt;Space&amp;gt;, after timeoutlen.&#xA;require &#39;key-menu&#39;.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;&#39;)&#xA;&#xA;-- Use the desc option to Vim&#39;s built-in vim.keymap.set to describe mappings.&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;w&#39;, &#39;&amp;lt;Cmd&amp;gt;w&amp;lt;CR&amp;gt;&#39;, {desc=&#39;Save&#39;})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;q&#39;, &#39;&amp;lt;Cmd&amp;gt;q&amp;lt;CR&amp;gt;&#39;, {desc=&#39;Quit&#39;})&#xA;&#xA;-- You can also pass Lua functions to vim.keymap.set.&#xA;local erase_all_lines = function()&#xA;  vim.api.nvim_buf_set_lines(0, 0, -1, false, {})&#xA;end&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;k&#39;, erase_all_lines, {desc=&#39;Erase all&#39;})&#xA;&#xA;-- You can put mappings several keys deep, in a mapping group. For some kinds of&#xA;-- mappings, even if you don&#39;t include a description, key-menu will try to&#xA;-- render them nicely, for example by not showing the &amp;lt;Cmd&amp;gt; and &amp;lt;CR&amp;gt;.&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;gs&#39;, &#39;&amp;lt;Cmd&amp;gt;Git status&amp;lt;CR&amp;gt;&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;gc&#39;, &#39;&amp;lt;Cmd&amp;gt;Git commit&amp;lt;CR&amp;gt;&#39;)&#xA;&#xA;-- To describe the group of mappings under &amp;lt;Space&amp;gt;g, use key-menu.set.&#xA;require &#39;key-menu&#39;.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;g&#39;, {desc=&#39;Git&#39;})&#xA;&#xA;-- The function key-menu.set is just a thin wrapper around vim.keymap.set, and&#xA;-- is provided for convenience so that you don&#39;t have to type the key sequence&#xA;-- twice. The above call to key-menu.set is equivalent to this:&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;g&#39;,&#xA;  function() require &#39;key-menu&#39;.open_window(&#39;&amp;lt;Space&amp;gt;g&#39;) end,&#xA;  {desc=&#39;Git&#39;})&#xA;&#xA;-- The arguments to key-menu.set are the same as those for vim.keymap.set,&#xA;-- except that the RHS/callback argument is omitted.&#xA;&#xA;-- Create a buffer-local mapping group to echo some example text.&#xA;require &#39;key-menu&#39;.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;s&#39;,&#xA;  {desc = &#39;Say something&#39;, buffer = true})&#xA;-- Create buffer-local mappings to say hello and goodbye.&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;sh&#39;,&#xA;  function() print(&#39;Hello, world&#39;) end,&#xA;  {desc = &#39;...hello!&#39;, buffer = true})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;sg&#39;,&#xA;  function() print(&#39;Goodbye, world!&#39;) end,&#xA;  {desc = &#39;...goodbye!&#39;, buffer = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Final results:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5308024/170115903-a10692a8-11b7-4f4b-9194-c958251772fb.png&#34; alt=&#34;sample-config-root&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/5308024/170115928-cbd9cb25-eb13-49ee-9fa0-eab22d0f9fe3.png&#34; alt=&#34;sample-config-git&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/5308024/170115942-1ab0d108-77e9-47ad-a019-c766fa26965f.png&#34; alt=&#34;sample-config-say&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to understand how this plugin works is to run the following command interactively in Neovim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:lua require &#39;key-menu&#39;.open_window(&#39;g&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This opens a window showing your mappings that start with a &lt;code&gt;g&lt;/code&gt;. You can press one of the keys in the popup menu to complete or advance the mapping.&lt;/p&gt; &#xA;&lt;p&gt;So, if we want to see hints for mappings starting with &lt;code&gt;g&lt;/code&gt;, then all we have to do is make this window appear when we press &lt;code&gt;g&lt;/code&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vim.keymap.set( -- define a new mapping&#xA;  &#39;n&#39;,          -- in Normal mode&#xA;  &#39;g&#39;,          -- which is bound to the &#39;g&#39; key&#xA;  function()    -- executing this function&#xA;    require &#39;key-menu&#39;.open_window(&#39;g&#39;)&#xA;  end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, when we press &lt;code&gt;g&lt;/code&gt;, if we don&#39;t quickly press another key (within &lt;code&gt;timeoutlen&lt;/code&gt;) to invoke a different mapping (like &lt;code&gt;gx&lt;/code&gt; or &lt;code&gt;gc&lt;/code&gt;), then &lt;em&gt;this&lt;/em&gt; mapping will be executed, which pops up the &lt;code&gt;key-menu&lt;/code&gt; window.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s annoying that we have to say &lt;code&gt;&#39;g&#39;&lt;/code&gt; twice, once in the arguments to &lt;code&gt;vim.keymap.set&lt;/code&gt;, and once in the arguments to &lt;code&gt;open_window&lt;/code&gt;. So &lt;code&gt;key-menu&lt;/code&gt; provides a convenience function called &lt;code&gt;set&lt;/code&gt;, which can be used like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require &#39;key-menu&#39;.set( -- pop up a hint window&#xA;  &#39;n&#39;,                  -- in Normal mode&#xA;  &#39;g&#39;)                  -- when the letter g is pressed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the same as the &lt;code&gt;vim.keymap.set&lt;/code&gt; in the previous code block.&lt;/p&gt; &#xA;&lt;p&gt;We can also use &lt;code&gt;desc&lt;/code&gt; to configure the hint that is shown in the window. For example, suppose that we use &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt; as a leader key, and &lt;code&gt;&amp;lt;Space&amp;gt;g&lt;/code&gt; for a collection of Git-related mappings. Then we might do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require &#39;key-menu&#39;.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;&#39;)&#xA;require &#39;key-menu&#39;.set(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;g&#39;, {desc=&#39;Git&#39;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now a hint window will be shown if you press &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt;, with a &lt;code&gt;g → Git&lt;/code&gt; entry.&lt;/p&gt; &#xA;&lt;h2&gt;Related plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;folke/which-key.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spinks/vim-leader-guide&#34;&gt;spinks/vim-leader-guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lifepillar/vim-cheat40&#34;&gt;lifepillar/vim-cheat40&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hecal3/vim-leader-guide&#34;&gt;hecal3/vim-leader-guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liuchengxu/vim-which-key&#34;&gt;liuchengxu/vim-which-key&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rxyhn/dotfiles</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/rxyhn/dotfiles</id>
    <link href="https://github.com/rxyhn/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My awesomewm dotfiles for awesome people! ✨&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/rxhyn-dotfile-header.png&#34; alt=&#34;Home Preview&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#wrench--setup&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-setup.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rxyhn/dotfiles/wiki&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-wiki.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#ocean--gallery&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-gallery.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#money_with_wings--tip-jar&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-tipjar.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- RICE PREVIEW --&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/aesthetic.png&#34; alt=&#34;Rice Preview&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- BADGES --&gt; &#xA;&lt;h1&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img alt=&#34;&#34; align=&#34;left&#34; src=&#34;https://img.shields.io/github/stars/rxyhn/dotfiles?color=162026&amp;amp;labelColor=162026&amp;amp;style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img alt=&#34;&#34; align=&#34;right&#34; src=&#34;https://badges.pufler.dev/visits/rxyhn/dotfiles?style=for-the-badge&amp;amp;color=162026&amp;amp;logoColor=white&amp;amp;labelColor=162026&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Hi there! Thanks for dropping by! &lt;span&gt;💙&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://awesomewm.org/&#34;&gt;&lt;img alt=&#34;AwesomeWM Logo&#34; height=&#34;150&#34; align=&#34;left&#34; src=&#34;https://awesomewm.org/doc/api/images/AUTOGEN_wibox_logo_logo_and_name.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt; Rxyhn&#39;s Aesthetic AwesomeWM Configuration Files! &lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to my AwesomeWM configuration files!&lt;/p&gt; &#xA;&lt;p&gt;This is my personal collection of configuration files.&lt;/p&gt; &#xA;&lt;p&gt;You might be here for looking my AwesomeWM configuration files? or looking for &lt;strong&gt;Linux Rice&lt;/strong&gt; reference?&lt;/p&gt; &#xA;&lt;p&gt;feel free to steal anything from here but don&#39;t forget to give me &lt;strong&gt;credits&lt;/strong&gt; :)&lt;/p&gt; &#xA;&lt;p&gt;AwesomeWM is the most powerful and highly configurable, next generation framework window manager for X, Although it takes time and effort to configure it, but I&#39;m very satisfied with the result.&lt;/p&gt; &#xA;&lt;p&gt;This is a beautiful user interface isn&#39;t it?&lt;/p&gt; &#xA;&lt;p&gt;These dotfiles are made with love, for sure.&lt;/p&gt; &#xA;&lt;!-- INFORMATION --&gt; &#xA;&lt;h2&gt;&lt;span&gt;❄&lt;/span&gt; ‎ &lt;samp&gt;Information&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Here are some details about my setup:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OS:&lt;/strong&gt; &lt;a href=&#34;https://archlinux.org&#34;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WM:&lt;/strong&gt; &lt;a href=&#34;https://github.com/awesomeWM/awesome&#34;&gt;awesome&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Terminal:&lt;/strong&gt; &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;alacritty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shell:&lt;/strong&gt; &lt;a href=&#34;https://www.zsh.org/&#34;&gt;zsh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Editor:&lt;/strong&gt; &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim&lt;/a&gt; / &lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;vscode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compositor:&lt;/strong&gt; &lt;a href=&#34;https://github.com/yshui/picom&#34;&gt;picom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Application Launcher:&lt;/strong&gt; &lt;a href=&#34;https://github.com/davatorium/rofi&#34;&gt;rofi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Music Player&lt;/strong&gt; &lt;a href=&#34;https://github.com/ncmpcpp/ncmpcpp&#34;&gt;ncmpcpp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AwesomeWM Modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/blingcorp/bling&#34;&gt;bling&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adds new layouts, modules, and widgets that try to primarily focus on window management&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/andOrlando/rubato&#34;&gt;rubato&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Creates smooth animations with a slope curve for awesomeWM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/xinhaoyuan/layout-machi&#34;&gt;layout-machi&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Manual layout for Awesome with an interactive editor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/andOrlando/color&#34;&gt;color&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clean and efficient api for color conversion in lua&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Aire-One/awesome-battery_widget&#34;&gt;UPower Battery Widget&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A UPowerGlib based battery widget for the Awesome WM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Main Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dashboard&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Animated Dock&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Info Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Notification Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Word Clock Lockscreen&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exit Screen&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Music Player&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;App Launcher&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Github Activity Previews&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brightness / Volume OSD&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battery Indicator&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wifi Indicator&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This repo has a wiki! You can check it by clicking &lt;del&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UIp6_0kct_U&#34;&gt;here&lt;/a&gt;&lt;/del&gt; &lt;a href=&#34;https://github.com/rxyhn/dotfiles/wiki&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- SETUP --&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔧&lt;/span&gt; ‎ &lt;samp&gt;Setup&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is step-by-step how to install these dotfiles. Just &lt;a href=&#34;https://en.wikipedia.org/wiki/RTFM&#34;&gt;R.T.F.M&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;1. Install Required Dependencies and Enable Services&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; ‎ &lt;strong&gt;This setup instructions only provided for Arch Linux (and other Arch-based distributions)&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Assuming your &lt;em&gt;AUR Helper&lt;/em&gt; is &lt;a href=&#34;https://github.com/Morganamilo/paru&#34;&gt;paru&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;First of all you should install the &lt;a href=&#34;https://github.com/awesomeWM/awesome/&#34;&gt;git version of AwesomeWM&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -S awesome-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Install necessary dependencies&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -Sy picom-git alacritty rofi todo-bin acpi acpid acpi_call upower \&#xA;jq inotify-tools polkit-gnome xdotool xclip gpick ffmpeg blueman \&#xA;pipewire pipewire-alsa pipewire-pulse pamixer brightnessctl scrot redshift \&#xA;feh mpv mpd mpc mpdris2 ncmpcpp playerctl --needed &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Enable Services&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl --user enable mpd.service&#xA;systemctl --user start mpd.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;2. Install My AwesomeWM Dotfiles&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Clone this repository&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recurse-submodules https://github.com/rxyhn/dotfiles.git&#xA;cd dotfiles &amp;amp;&amp;amp; git submodule update --remote --merge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Copy config files&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp -r config/* ~/.config/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Install a few fonts (mainly icon fonts) in order for text and icons to be rendered properly.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp -r misc/fonts/* ~/.fonts/&#xA;# or to ~/.local/share/fonts&#xA;cp -r misc/fonts/* ~/.local/share/fonts/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And run this command for your system to detect the newly installed fonts.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fc-cache -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Finally, now you can login with AwesomeWM&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;Congratulations, at this point you have installed this aesthetic dotfiles! &lt;span&gt;🎉&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;Log out from your current desktop session and log in into AwesomeWM&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- MISCELLANEOUS --&gt; &#xA;&lt;h2&gt;&lt;span&gt;🍀&lt;/span&gt; ‎ &lt;samp&gt;Miscellaneous&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;VSCode Themes&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/93292023/170319552-a42b920d-9f59-44d9-a9ad-b3aeed55bf6a.png&#34; alt=&#34;VSCode Preview&#34; width=&#34;500px&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;span&gt;🌌&lt;/span&gt; ‎ &lt;samp&gt;Aesthetic VSCode&lt;/samp&gt;&lt;/p&gt; &#xA; &lt;p&gt;Setup:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Install required extension&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=iocave.customize-ui&#34;&gt;Customize UI&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=antfu.icons-carbon&#34;&gt;Carbon Product Icons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;p&gt;note: You can use any themes, but some of the colors will be overwritten by mine&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;copy config file&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp misc/vscode/User/settings.json ~/.config/Code/User&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Touchpad tap-to-click &amp;amp; natural (reverse) scrolling (&lt;a href=&#34;https://wiki.archlinux.org/title/Libinput#Tapping_button_re-mapping&#34;&gt;libinput&lt;/a&gt;)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;/etc/X11/xorg.conf.d/30-touchpad.conf&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cfg&#34;&gt;Section &#34;InputClass&#34;&#xA;    Identifier &#34;touchpad&#34;&#xA;    Driver &#34;libinput&#34;&#xA;    MatchIsTouchpad &#34;on&#34;&#xA;    Option &#34;Tapping&#34; &#34;on&#34;&#xA;    Option &#34;TappingButtonMap&#34; &#34;lmr&#34;&#xA;    Option &#34;NaturalScrolling&#34; &#34;true&#34;&#xA;EndSection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- GALLERY --&gt; &#xA;&lt;h2&gt;&lt;span&gt;🌊&lt;/span&gt; ‎ &lt;samp&gt;Gallery&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Simple, Minimalist and Modern Bar&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/wibar.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Aesthetic Dashboard with neat grid layout and Notification Center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/dashboard.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Complete information, Info Center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/info-center.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;MacOS like control center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/control-center.png&#34; width=&#34;500px&#34; alt=&#34;control center preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Custom mouse-friendly ncmpcpp UI&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/ncmpcpp.png&#34; width=&#34;500px&#34; alt=&#34;ncmpcpp preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Lockscreen with &lt;a href=&#34;https://github.com/RMTT/lua-pam&#34;&gt;PAM Integration&lt;/a&gt;&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/lockscreen.png&#34; width=&#34;500px&#34; alt=&#34;word clock lockscreen preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Minimalist Exitscreen&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/exitscreen.png&#34; width=&#34;500px&#34; alt=&#34;exitscreen preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- HISTORY --&gt; &#xA;&lt;h2&gt;&lt;span&gt;🗾&lt;/span&gt; ‎ &lt;samp&gt;History&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Ngl this is started when im feel bored lol and decided to start using Linux, more precisely in January 2022. Fyi im a &lt;strong&gt;new Linux user,&lt;/strong&gt; when it&#39;s in &lt;a href=&#34;https://facebook.com/groups/linuxart&#34;&gt;Linuxer Desktop Art&lt;/a&gt; i saw a linux setup that caught my eye, then I&#39;m interested in and trying something similar, So yeaaaaaah this is my current setup, my purpose of doing this is to hone my skills to make an attractive UI and also as a hobby. I wanna say thank you to those of you who like and love my setup &amp;lt;3&lt;/p&gt; &#xA;&lt;pre align=&#34;center&#34;&gt;&#xA;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#japan--history&#34;&gt;&#xA;&lt;img alt=&#34;&#34; align=&#34;center&#34; width=&#34;96%&#34; src=&#34;https://api.star-history.com/svg?repos=rxyhn/dotfiles&amp;amp;type=Date&#34;&gt;&#xA;&lt;/a&gt;&#xA;&lt;/pre&gt; &#xA;&lt;!-- TIP JAR --&gt; &#xA;&lt;h2&gt;&lt;span&gt;💸&lt;/span&gt; ‎ &lt;samp&gt;TIP JAR&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you enjoyed it and would like to show your appreciation, you may want to tip me here.&lt;/p&gt; &#xA;&lt;p&gt;It is never required but always appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Thanks from the bottom of my heart! ‎ &lt;span&gt;💗&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/rxyhn&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ACKNOWLEDGEMENTS --&gt; &#xA;&lt;h2&gt;&lt;span&gt;💡&lt;/span&gt; ‎ &lt;samp&gt;Acknowledgements&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Special thanks to&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Contributors&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/rxyhn&#34;&gt;&lt;code&gt;rxyhn&lt;/code&gt;&lt;/a&gt; &lt;em&gt;there&#39;s nothing wrong with thanking yourself right?&lt;/em&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ner0z&#34;&gt;&lt;code&gt;ner0z&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/paulhersch&#34;&gt;&lt;code&gt;paulhersch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ChocolateBread799&#34;&gt;&lt;code&gt;ChocolateBread799&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/janleigh&#34;&gt;&lt;code&gt;janleigh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/rototrash&#34;&gt;&lt;code&gt;rototrash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;And for them, ofc.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/elenapan&#34;&gt;&lt;code&gt;elenapan&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/manilarome&#34;&gt;&lt;code&gt;manilarome&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/JavaCafe01&#34;&gt;&lt;code&gt;JavaCafe01&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/andOrlando&#34;&gt;&lt;code&gt;andOrlando&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rxyhn/AwesomeWM-Dotfiles/raw/main/.github/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?style=flat-square&amp;amp;label=License&amp;amp;message=GPL-3.0&amp;amp;logoColor=eceff4&amp;amp;logo=github&amp;amp;colorA=162026&amp;amp;colorB=162026&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LunarVim/Neovim-from-scratch</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/LunarVim/Neovim-from-scratch</id>
    <link href="https://github.com/LunarVim/Neovim-from-scratch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Neovim config designed from scratch to be understandable&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neovim from scratch&lt;/h1&gt; &#xA;&lt;p&gt;Each video will be associated with a branch so checkout the one you are interested in, you can follow along with this &lt;a href=&#34;https://www.youtube.com/watch?v=ctH-a-1eUME&amp;amp;list=PLhoH5vyxr6Qq41NFL4GvhFp-WLd5xzIzZ&#34;&gt;playlist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Try out this config&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to remove or move your current &lt;code&gt;nvim&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; Requires [Neovim v0.8.0]](&lt;a href=&#34;https://github.com/neovim/neovim/releases&#34;&gt;https://github.com/neovim/neovim/releases&lt;/a&gt;). &lt;a href=&#34;https://raw.githubusercontent.com/LunarVim/Neovim-from-scratch/master/#upgrade-to-latest-release&#34;&gt;Upgrade&lt;/a&gt; if you&#39;re on an earlier version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/LunarVim/Neovim-from-scratch.git ~/.config/nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;nvim&lt;/code&gt; and wait for the plugins to be installed&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; (You will notice treesitter pulling in a bunch of parsers the next time you open Neovim)&lt;/p&gt; &#xA;&lt;h2&gt;Get healthy&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;code&gt;nvim&lt;/code&gt; and enter the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:checkhealth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll probably notice you don&#39;t have support for copy/paste also that python and node haven&#39;t been setup&lt;/p&gt; &#xA;&lt;p&gt;So let&#39;s fix that&lt;/p&gt; &#xA;&lt;p&gt;First we&#39;ll fix copy/paste&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On mac &lt;code&gt;pbcopy&lt;/code&gt; should be builtin&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Ubuntu&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt install xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Arch Linux&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo pacman -S xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next we need to install python support (node is optional)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim python support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip install pynvim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim node support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm i -g neovim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; make sure you have &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node&lt;/a&gt; installed, I recommend a node manager like &lt;a href=&#34;https://github.com/Schniz/fnm&#34;&gt;fnm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrade to latest release&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you &lt;a href=&#34;https://github.com/neovim/neovim/wiki/Building-Neovim#quick-start&#34;&gt;built from source&lt;/a&gt;, &lt;code&gt;cd&lt;/code&gt; into the folder where you cloned &lt;code&gt;neovim&lt;/code&gt; and run the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git pull&#xA;make distclean &amp;amp;&amp;amp; make CMAKE_BUILD_TYPE=Release&#xA;sudo make install&#xA;nvim -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The computing scientist&#39;s main challenge is not to get confused by the complexities of his own making.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;- Edsger W. Dijkstra&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ray-x/lsp_signature.nvim</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/ray-x/lsp_signature.nvim</id>
    <link href="https://github.com/ray-x/lsp_signature.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LSP signature hint as you type&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lsp_signature.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Show function signature when you type&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This nvim plugin is made for completion plugins that do not support signature help. Need neovim-0.6.1+ and enable nvim-lsp. (check neovim-0.5 branch for earlier version support)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/nvim-lua/completion-nvim&#34;&gt;completion-nvim&lt;/a&gt;, which does have lots of cool features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fully asynchronous lsp buf request.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Virtual text available&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Golang with markdown&lt;/h5&gt; &#xA;&lt;p&gt;Highlight with &#34;Search&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1681295/122633027-a7879400-d119-11eb-95ff-d06e6aeeb0b2.mov&#34;&gt;https://user-images.githubusercontent.com/1681295/122633027-a7879400-d119-11eb-95ff-d06e6aeeb0b2.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Lua&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/109505092-5b73fd80-7af0-11eb-9ec7-15b297c6e3be.png?raw=true&#34; alt=&#34;lua&#34; title=&#34;lua&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;The plugin also re-write the builtin lsp signature allow the parameter highlight&lt;/h4&gt; &#xA;&lt;img width=&#34;1230&#34; alt=&#34;signature_with_virtual_hint&#34; src=&#34;https://user-images.githubusercontent.com/1681295/122689853-11628380-d269-11eb-994f-65974fb1312d.png&#34;&gt; &#xA;&lt;h4&gt;Using virtual text to show the next parameter&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/signature/virtual_text.jpg?raw=true&#34; alt=&#34;virtual_hint&#34; title=&#34;show_virtual_text&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Virtual text only mode&lt;/h4&gt; &#xA;&lt;p&gt;(from @fdioguardi)&lt;/p&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;virtual_text_only&#34; src=&#34;https://user-images.githubusercontent.com/1681295/120172944-e3c88280-c246-11eb-95a6-40a0bbc1df9c.png&#34;&gt; &#xA;&lt;h4&gt;Multiple signatures&lt;/h4&gt; &#xA;&lt;p&gt;In case some of the languages allow function overload, the plugin will show all available signatures&lt;/p&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;multiple_signature&#34; src=&#34;https://user-images.githubusercontent.com/1681295/120487194-17e3a500-c3f9-11eb-9561-82b3854694c5.png&#34;&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;signature2&#34; src=&#34;https://user-images.githubusercontent.com/1681295/120487380-43ff2600-c3f9-11eb-9684-f6e7a1f8e170.png&#34;&gt; &#xA;&lt;h1&gt;Install:&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; dein&#xA;dein#add(&#39;ray-x/lsp_signature.nvim&#39;)&#xA;&#xA;&#34; plug&#xA;Plug &#39;ray-x/lsp_signature.nvim&#39;&#xA;&#xA;&#34; Packer&#xA;use {&#xA;  &#34;ray-x/lsp_signature.nvim&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setup / Attach the plugin&lt;/h1&gt; &#xA;&lt;p&gt;In your init.lua, call setup()&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;cfg = {...}  -- add you config here&#xA;require &#34;lsp_signature&#34;.setup(cfg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, call on_attach() when the LSP client attaches to a buffer&lt;/p&gt; &#xA;&lt;p&gt;e.g. gopls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local golang_setup = {&#xA;  on_attach = function(client, bufnr)&#xA;    ...&#xA;    require &#34;lsp_signature&#34;.on_attach()  -- Note: add in lsp client on-attach&#xA;    ...&#xA;  end,&#xA;  ...&#xA;}&#xA;&#xA;require&#39;lspconfig&#39;.gopls.setup(golang_setup)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure&lt;/h2&gt; &#xA;&lt;h3&gt;Floating window borders&lt;/h3&gt; &#xA;&lt;p&gt;If you have a recent enough build of Neovim, you can configure borders in the signature help floating window(Thanks &lt;a href=&#34;https://github.com/gbrlsnchs&#34;&gt;@Gabriel Sanches&lt;/a&gt; for the PR):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local example_setup = {&#xA;  on_attach = function(client, bufnr)&#xA;    ...&#xA;    require &#34;lsp_signature&#34;.on_attach({&#xA;      bind = true, -- This is mandatory, otherwise border config won&#39;t get registered.&#xA;      handler_opts = {&#xA;        border = &#34;rounded&#34;&#xA;      }&#xA;    }, bufnr)&#xA;    ...&#xA;  end,&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  require&#39;lspconfig&#39;.gopls.setup()&#xA;  require &#34;lsp_signature&#34;.setup({&#xA;    bind = true, -- This is mandatory, otherwise border config won&#39;t get registered.&#xA;    handler_opts = {&#xA;      border = &#34;rounded&#34;&#xA;    }&#xA;  })&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Full configuration (with default values)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; cfg = {&#xA;  debug = false, -- set to true to enable debug logging&#xA;  log_path = vim.fn.stdpath(&#34;cache&#34;) .. &#34;/lsp_signature.log&#34;, -- log dir when debug is on&#xA;  -- default is  ~/.cache/nvim/lsp_signature.log&#xA;  verbose = false, -- show debug line number&#xA;&#xA;  bind = true, -- This is mandatory, otherwise border config won&#39;t get registered.&#xA;               -- If you want to hook lspsaga or other signature handler, pls set to false&#xA;  doc_lines = 10, -- will show two lines of comment/doc(if there are more than two lines in doc, will be truncated);&#xA;                 -- set to 0 if you DO NOT want any API comments be shown&#xA;                 -- This setting only take effect in insert mode, it does not affect signature help in normal&#xA;                 -- mode, 10 by default&#xA;&#xA;  floating_window = true, -- show hint in a floating window, set to false for virtual text only mode&#xA;&#xA;  floating_window_above_cur_line = true, -- try to place the floating above the current line when possible Note:&#xA;  -- will set to true when fully tested, set to false will use whichever side has more space&#xA;  -- this setting will be helpful if you do not want the PUM and floating win overlap&#xA;&#xA;  floating_window_off_x = 1, -- adjust float windows x position.&#xA;  floating_window_off_y = 1, -- adjust float windows y position.&#xA;&#xA;&#xA;  fix_pos = false,  -- set to true, the floating window will not auto-close until finish all parameters&#xA;  hint_enable = true, -- virtual hint enable&#xA;  hint_prefix = &#34;🐼 &#34;,  -- Panda for parameter&#xA;  hint_scheme = &#34;String&#34;,&#xA;  hi_parameter = &#34;LspSignatureActiveParameter&#34;, -- how your parameter will be highlight&#xA;  max_height = 12, -- max height of signature floating_window, if content is more than max_height, you can scroll down&#xA;                   -- to view the hiding contents&#xA;  max_width = 80, -- max_width of signature floating_window, line will be wrapped if exceed max_width&#xA;  handler_opts = {&#xA;    border = &#34;rounded&#34;   -- double, rounded, single, shadow, none&#xA;  },&#xA;&#xA;  always_trigger = false, -- sometime show signature on new line or in middle of parameter can be confusing, set it to false for #58&#xA;&#xA;  auto_close_after = nil, -- autoclose signature float win after x sec, disabled if nil.&#xA;  extra_trigger_chars = {}, -- Array of extra characters that will trigger signature completion, e.g., {&#34;(&#34;, &#34;,&#34;}&#xA;  zindex = 200, -- by default it will be on top of all floating windows, set to &amp;lt;= 50 send it to bottom&#xA;&#xA;  padding = &#39;&#39;, -- character to pad on left and right of signature can be &#39; &#39;, or &#39;|&#39;  etc&#xA;&#xA;  transparency = nil, -- disabled by default, allow floating win transparent value 1~100&#xA;  shadow_blend = 36, -- if you using shadow as border use this set the opacity&#xA;  shadow_guibg = &#39;Black&#39;, -- if you using shadow as border use this set the color e.g. &#39;Green&#39; or &#39;#121315&#39;&#xA;  timer_interval = 200, -- default timer check interval set to lower value if you want to reduce latency&#xA;  toggle_key = nil -- toggle signature on and off in insert mode,  e.g. toggle_key = &#39;&amp;lt;M-x&amp;gt;&#39;&#xA;}&#xA;&#xA;-- recommended:&#xA;require&#39;lsp_signature&#39;.setup(cfg) -- no need to specify bufnr if you don&#39;t use toggle_key&#xA;&#xA;-- You can also do this inside lsp on_attach&#xA;-- note: on_attach deprecated&#xA;require&#39;lsp_signature&#39;.on_attach(cfg, bufnr) -- no need to specify bufnr if you don&#39;t use toggle_key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Signature in status line&lt;/h3&gt; &#xA;&lt;p&gt;Sample config&lt;/p&gt; &#xA;&lt;p&gt;API&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lsp_signature&#34;).status_line(max_width)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;return a table&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  label = &#39;func fun_name(arg1, arg2...)&#39;&#xA;  hint = &#39;arg1&#39;,&#xA;  range = {start = 13, [&#39;end&#39;] = 17 }&#xA;  doc = &#39;func_name return arg1 + arg2 ...&#39;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your statusline or winbar&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local current_signature = function(width)&#xA;  if not pcall(require, &#39;lsp_signature&#39;) then return end&#xA;  local sig = require(&#34;lsp_signature&#34;).status_line(width)&#xA;  return sig.label .. &#34;🐼&#34; .. sig.hint&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.redd.it/b842vy1dm6681.png&#34; alt=&#34;signature in status line&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Should signature floating windows fixed&lt;/h3&gt; &#xA;&lt;p&gt;fix_pos can be a function, it took two element, first is the signature result for your signature, second is lsp client.&lt;/p&gt; &#xA;&lt;p&gt;You can provide a function.&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;fix_pos = function(signatures, lspclient)&#xA;   if signatures[1].activeParameter &amp;gt;= 0 and #signatures[1].parameters == 1 then&#xA;     return false&#xA;   end&#xA;   if lspclient.name == &#39;sumneko_lua&#39; then&#xA;     return true&#xA;   end&#xA;   return false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sample config with cmp, luasnipet and autopair&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ray-x/lsp_signature.nvim/raw/master/tests/init_paq.lua&#34;&gt;init.lua&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Q&amp;amp;A:&lt;/h3&gt; &#xA;&lt;p&gt;Q: What is the default colorscheme in screenshot:&lt;/p&gt; &#xA;&lt;p&gt;A: &lt;a href=&#34;https://github.com/ray-x/aurora&#34;&gt;aurora&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Q: I can not see border after enable border = &#34;single&#34;/&#34;rounded&#34;&lt;/p&gt; &#xA;&lt;p&gt;A: Try another colorscheme (e.g. colorscheme aurora, or colorscheme luna). If issue persists, please submit an issue&lt;/p&gt; &#xA;&lt;p&gt;Q: It is not working 😡&lt;/p&gt; &#xA;&lt;p&gt;A: Here is some trouble shooting: &lt;a href=&#34;https://github.com/ray-x/lsp_signature.nvim/issues/1&#34;&gt;https://github.com/ray-x/lsp_signature.nvim/issues/1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are using JDTLS, please read this: issue &lt;a href=&#34;https://github.com/ray-x/lsp_signature.nvim/issues/97&#34;&gt;#97&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Q:I do not like the pop window background highlight, how to change it?&lt;/p&gt; &#xA;&lt;p&gt;A: Redefine your &lt;code&gt;NormalFloat&lt;/code&gt; and &lt;code&gt;FloatBorder&lt;/code&gt;, esp if your colorscheme dose not define it.&lt;/p&gt; &#xA;&lt;p&gt;Q: How to change parameter highlight&lt;/p&gt; &#xA;&lt;p&gt;A: By default, the highlight is using &#34;LspSignatureActiveParameter&#34; defined in your colorscheme, you can either override &#34;LspSignatureActiveParameter&#34; or define, e.g. use &lt;code&gt;IncSearch&lt;/code&gt; setup({ hi_parameter = &#34;IncSearch&#34;})&lt;/p&gt; &#xA;&lt;p&gt;Q: I can not see 🐼 in virtual text&lt;/p&gt; &#xA;&lt;p&gt;A: It is emoji, not nerdfont. Please check how to enable emoji for your terminal.&lt;/p&gt; &#xA;&lt;p&gt;Q: Working with cmp/coq. The floating windows block cmp/coq&lt;/p&gt; &#xA;&lt;p&gt;A: A few options here, z-index, floating_window_above_cur_line, floating_window_off_x/y, toggle_key. You can find the best setup for your workflow.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>thanhvule0310/dotfiles</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/thanhvule0310/dotfiles</id>
    <link href="https://github.com/thanhvule0310/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;code&gt;|.dotfiles&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;os: Ubuntu 22.04 LTS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;terminal: kitty&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;font: Liga SFMono Nerd Font&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;editor: nvim 0.8&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thanhvule0310/dotfiles/main/assets/preview.png&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thanhvule0310/dotfiles/main/assets/telescope.png&#34; alt=&#34;telescope&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cmp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thanhvule0310/dotfiles/main/assets/cmp.png&#34; alt=&#34;nvim-cmp&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/arcticicestudio/nord-docs/develop/assets/images/nord/repository-footer-separator.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Warning: Don’t blindly use my settings unless you know what that entails. Use at your own risk!&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>L3MON4D3/LuaSnip</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/L3MON4D3/LuaSnip</id>
    <link href="https://github.com/L3MON4D3/LuaSnip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snippet Engine for Neovim written in Lua.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/%23luasnip:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/luasnip:matrix.org?label=Matrix&amp;amp;logo=matrix&#34; alt=&#34;LuaSnip&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LuaSnip&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/41961280/122515860-5179fa00-d00e-11eb-91f7-331893f61fbf.mp4&#34;&gt;https://user-images.githubusercontent.com/41961280/122515860-5179fa00-d00e-11eb-91f7-331893f61fbf.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tabstops&lt;/li&gt; &#xA; &lt;li&gt;Text-Transformations using Lua functions&lt;/li&gt; &#xA; &lt;li&gt;Conditional Expansion&lt;/li&gt; &#xA; &lt;li&gt;Defining nested Snippets&lt;/li&gt; &#xA; &lt;li&gt;Filetype-specific Snippets&lt;/li&gt; &#xA; &lt;li&gt;Choices&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Snippet creation&lt;/li&gt; &#xA; &lt;li&gt;Regex-Trigger&lt;/li&gt; &#xA; &lt;li&gt;Autotriggered Snippets&lt;/li&gt; &#xA; &lt;li&gt;Fast&lt;/li&gt; &#xA; &lt;li&gt;Parse &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specification#snippet_syntax&#34;&gt;LSP-Style&lt;/a&gt; Snippets either directly in lua, as a vscode package or a snipmate snippet collection.&lt;/li&gt; &#xA; &lt;li&gt;Expand LSP-Snippets with &lt;a href=&#34;https://github.com/hrsh7th/nvim-compe&#34;&gt;nvim-compe&lt;/a&gt; (or its&#39; successor, &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; (requires &lt;a href=&#34;https://github.com/saadparwaiz1/cmp_luasnip&#34;&gt;cmp_luasnip&lt;/a&gt;))&lt;/li&gt; &#xA; &lt;li&gt;Snippet history (jump back into older snippets)&lt;/li&gt; &#xA; &lt;li&gt;Resolve filetype at the cursor using Treesitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Drawbacks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Snippets that make use of the entire functionality of this plugin have to be defined in Lua (but 95% of snippets can be written in lsp-syntax).&lt;/li&gt; &#xA; &lt;li&gt;The LSP-parser does not support Regex-Transformations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Neovim &amp;gt;= 0.5 (extmarks)&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Ie. With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Keymaps&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; press &amp;lt;Tab&amp;gt; to expand or jump in a snippet. These can also be mapped separately&#xA;&#34; via &amp;lt;Plug&amp;gt;luasnip-expand-snippet and &amp;lt;Plug&amp;gt;luasnip-jump-next.&#xA;imap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;Tab&amp;gt; luasnip#expand_or_jumpable() ? &#39;&amp;lt;Plug&amp;gt;luasnip-expand-or-jump&#39; : &#39;&amp;lt;Tab&amp;gt;&#39; &#xA;&#34; -1 for jumping backwards.&#xA;inoremap &amp;lt;silent&amp;gt; &amp;lt;S-Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require&#39;luasnip&#39;.jump(-1)&amp;lt;Cr&amp;gt;&#xA;&#xA;snoremap &amp;lt;silent&amp;gt; &amp;lt;Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;luasnip&#39;).jump(1)&amp;lt;Cr&amp;gt;&#xA;snoremap &amp;lt;silent&amp;gt; &amp;lt;S-Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;luasnip&#39;).jump(-1)&amp;lt;Cr&amp;gt;&#xA;&#xA;&#34; For changing choices in choiceNodes (not strictly necessary for a basic setup).&#xA;imap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;C-E&amp;gt; luasnip#choice_active() ? &#39;&amp;lt;Plug&amp;gt;luasnip-next-choice&#39; : &#39;&amp;lt;C-E&amp;gt;&#39;&#xA;smap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;C-E&amp;gt; luasnip#choice_active() ? &#39;&amp;lt;Plug&amp;gt;luasnip-next-choice&#39; : &#39;&amp;lt;C-E&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-cmp&lt;/code&gt;&#39;s wiki also contains &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki/Example-mappings#luasnip&#34;&gt;an example&lt;/a&gt; for setting up a super-tab-like mapping.&lt;/p&gt; &#xA;&lt;h2&gt;Add Snippets&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#loaders&#34;&gt;the doc&lt;/a&gt; for a general explanation of the loaders and their benefits. The following list serves only as a short overview.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vscode-like&lt;/strong&gt;: To use existing vs-code style snippets from a plugin (eg. &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets&#34;&gt;rafamadriz/friendly-snippets&lt;/a&gt;) simply install the plugin and then add&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;luasnip.loaders.from_vscode&#34;).lazy_load()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;somewhere in your nvim-config. LuaSnip will then load the snippets contained in the plugin on startup. You can also easily &lt;strong&gt;load your own custom vscode style snippets&lt;/strong&gt; by passing the path to the custom snippet-directory to the load function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- load snippets from path/of/your/nvim/config/my-cool-snippets&#xA;require(&#34;luasnip.loaders.from_vscode&#34;).lazy_load({ paths = { &#34;./my-cool-snippets&#34; } })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more info on the vscode-loader, check the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/b5a72f1fbde545be101fcd10b70bcd51ea4367de/Examples/snippets.lua#L501&#34;&gt;examples&lt;/a&gt; or &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#loaders&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Snipmate-like&lt;/strong&gt;: Very similar to Vscode-packages: install a plugin that provides snippets and call the &lt;code&gt;load&lt;/code&gt;-function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;luasnip.loaders.from_snipmate&#34;).lazy_load()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The snipmate format is very simple, so adding &lt;strong&gt;custom snippets&lt;/strong&gt; only requires a few steps:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;add a directory beside your &lt;code&gt;init.vim&lt;/code&gt; (or any other place that is in your &lt;code&gt;runtimepath&lt;/code&gt;) named &lt;code&gt;snippets&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;inside that directory, create files named &lt;code&gt;&amp;lt;filetype&amp;gt;.snippets&lt;/code&gt; and add snippets for the given filetype in it (for inspiration, check &lt;a href=&#34;https://github.com/honza/vim-snippets/tree/master/snippets&#34;&gt;honza/vim-snippets&lt;/a&gt;). &lt;pre&gt;&lt;code class=&#34;language-snipmate&#34;&gt;# comment&#xA;snippet &amp;lt;trigger&amp;gt; &amp;lt;description&amp;gt;&#xA;&amp;lt;snippet-body&amp;gt;&#xA;snippet if C-style if&#xA;if ($1)&#xA;&#x9;$0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Again, there are some &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/b5a72f1fbde545be101fcd10b70bcd51ea4367de/Examples/snippets.lua#L517&#34;&gt;examples&lt;/a&gt; and &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#snipmate&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;: Add the snippets by calling &lt;code&gt;require(&#34;luasnip&#34;).add_snippets(filetype, snippets)&lt;/code&gt;. An example for this can be found &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/Examples/snippets.lua#L190&#34;&gt;here&lt;/a&gt;.&lt;br&gt; This can also be done much cleaner, with all the benefits that come with using a loader, by using the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#lua&#34;&gt;loader for lua&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s also a repository collecting snippets for various languages, &lt;a href=&#34;https://github.com/molleweide/LuaSnip-snippets.nvim&#34;&gt;molleweide/LuaSnip-snippets.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docs and Examples&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md&#34;&gt;&lt;code&gt;DOC.md&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;:help luasnip&lt;/code&gt;) for a short overview and in-depth explanations of the different nodes and available API.&lt;br&gt; I highly recommend looking into (or better yet, &lt;code&gt;:luafile&lt;/code&gt;ing) &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/Examples/snippets.lua&#34;&gt;&lt;code&gt;Examples/snippets.lua&lt;/code&gt;&lt;/a&gt; before writing snippets in lua.&lt;br&gt; The &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/wiki&#34;&gt;Wiki&lt;/a&gt; contains some pretty useful extensions to Luasnip.&lt;/p&gt; &#xA;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;history&lt;/code&gt;: If true, Snippets that were exited can still be jumped back into. As Snippets are not removed when their text is deleted, they have to be removed manually via &lt;code&gt;LuasnipUnlinkCurrent&lt;/code&gt; if &lt;code&gt;delete_check_events&lt;/code&gt; is not enabled (set to eg. &lt;code&gt;&#39;TextChanged&#39;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;update_events&lt;/code&gt;: Choose which events trigger an update of the active nodes&#39; dependents. Default is just &lt;code&gt;&#39;InsertLeave&#39;&lt;/code&gt;, &lt;code&gt;&#39;TextChanged,TextChangedI&#39;&lt;/code&gt; would update on every change.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;region_check_events&lt;/code&gt;: Events on which to leave the current snippet if the cursor is outside its&#39; &#39;region&#39;. Disabled by default, &lt;code&gt;&#39;CursorMoved&#39;&lt;/code&gt;, &lt;code&gt;&#39;CursorHold&#39;&lt;/code&gt; or &lt;code&gt;&#39;InsertEnter&#39;&lt;/code&gt; seem reasonable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delete_check_events&lt;/code&gt;: When to check if the current snippet was deleted, and if so, remove it from the history. Off by default, &lt;code&gt;&#39;TextChanged&#39;&lt;/code&gt; (perhaps &lt;code&gt;&#39;InsertLeave&#39;&lt;/code&gt;, to react to changes done in Insert mode) should work just fine (alternatively, this can also be mapped using &lt;code&gt;&amp;lt;Plug&amp;gt;luasnip-delete-check&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;store_selection_keys&lt;/code&gt;: Mapping for populating &lt;code&gt;TM_SELECTED_TEXT&lt;/code&gt; and related variables (not set by default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enable_autosnippets&lt;/code&gt;: Autosnippets are disabled by default to minimize performance penalty if unused. Set to &lt;code&gt;true&lt;/code&gt; to enable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext_opts&lt;/code&gt;: Additional options passed to extmarks. Can be used to add passive/active highlight on a per-node-basis (more info in DOC.md)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parser_nested_assembler&lt;/code&gt;: Override the default behaviour of inserting a &lt;code&gt;choiceNode&lt;/code&gt; containing the nested snippet and an empty &lt;code&gt;insertNode&lt;/code&gt; for nested placeholders (&lt;code&gt;&#34;${1: ${2: this is nested}}&#34;&lt;/code&gt;). For an example (behaviour more similar to vscode), check &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/wiki/Nice-Configs#imitate-vscodes-behaviour-for-nested-placeholders&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ft_func&lt;/code&gt;: Source of possible filetypes for snippets. Defaults to a function, which returns &lt;code&gt;vim.split(vim.bo.filetype, &#34;.&#34;, true)&lt;/code&gt;, but check &lt;a href=&#34;https://raw.githubusercontent.com/L3MON4D3/LuaSnip/master/lua/luasnip/extras/filetype_functions.lua&#34;&gt;filetype_functions&lt;/a&gt; or &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#filetype_functions&#34;&gt;the docs&lt;/a&gt; for more options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;load_ft_func&lt;/code&gt;: Function to determine which filetypes belong to a given buffer (used for &lt;code&gt;lazy_loading&lt;/code&gt;). &lt;code&gt;fn(bufnr) -&amp;gt; filetypes (string[])&lt;/code&gt;. Again, there are some examples in &lt;a href=&#34;https://raw.githubusercontent.com/L3MON4D3/LuaSnip/master/lua/luasnip/extras/filetype_functions.lua&#34;&gt;filetype_functions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;snip_env&lt;/code&gt;: The global environment will be extended with this table in some places, eg. in files loaded by the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#lua-snippets-loader&#34;&gt;lua-loader&lt;/a&gt;.&lt;br&gt; Setting &lt;code&gt;snip_env&lt;/code&gt; to &lt;code&gt;{ some_global = &#34;a value&#34; }&lt;/code&gt; will add the global variable &lt;code&gt;some_global&lt;/code&gt; while evaluating these files. If you mind the (probably) large number of generated warnings, consider adding the keys set here to the globals recognized by lua-language-server or add &lt;code&gt;---@diagnostic disable: undefined-global&lt;/code&gt; somewhere in the affected files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/hrsh7th/vim-vsnip/&#34;&gt;vsnip.vim&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>7GrandDadPGN/VapeV4ForRoblox</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/7GrandDadPGN/VapeV4ForRoblox</id>
    <link href="https://github.com/7GrandDadPGN/VapeV4ForRoblox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vape V4 for Roblox, because bored.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vape V4&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you make a script for 2 years lol.&lt;/strong&gt; &lt;em&gt;Project I made for some reason idk&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>neovim/nvim-lspconfig</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/neovim/nvim-lspconfig</id>
    <link href="https://github.com/neovim/nvim-lspconfig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickstart configurations for the Nvim LSP client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lspconfig&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;collection of common configurations&lt;/a&gt; for Neovim&#39;s built-in &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;language server client&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This plugin allows for declaratively configuring, launching, and initializing language servers you have installed on your system. &lt;strong&gt;Disclaimer: Language server configurations are provided on a best-effort basis and are community-maintained. See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&#34;&gt;contributions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lspconfig&lt;/code&gt; has extensive help documentation, see &lt;code&gt;:help lspconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;LSP overview&lt;/h1&gt; &#xA;&lt;p&gt;Neovim supports the Language Server Protocol (LSP), which means it acts as a client to language servers and includes a Lua framework &lt;code&gt;vim.lsp&lt;/code&gt; for building enhanced LSP tools. LSP facilitates features like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;go-to-definition&lt;/li&gt; &#xA; &lt;li&gt;find-references&lt;/li&gt; &#xA; &lt;li&gt;hover&lt;/li&gt; &#xA; &lt;li&gt;completion&lt;/li&gt; &#xA; &lt;li&gt;rename&lt;/li&gt; &#xA; &lt;li&gt;format&lt;/li&gt; &#xA; &lt;li&gt;refactor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Neovim provides an interface for all of these features, and the language server client is designed to be highly extensible to allow plugins to integrate language server features which are not yet present in Neovim core such as &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&#34;&gt;&lt;strong&gt;auto&lt;/strong&gt;-completion&lt;/a&gt; (as opposed to manual completion with omnifunc) and &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Snippets&#34;&gt;snippet integration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;These features are not implemented in this repo&lt;/strong&gt;, but in Neovim core. See &lt;code&gt;:help lsp&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Requires &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.6.1&#34;&gt;Neovim v0.6.1&lt;/a&gt; or &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/nightly&#34;&gt;Nightly&lt;/a&gt;. Update Neovim and &#39;lspconfig&#39; before reporting an issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &#39;lspconfig&#39; like any other Vim plugin, e.g. with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local use = require(&#39;packer&#39;).use&#xA;require(&#39;packer&#39;).startup(function()&#xA;  use &#39;wbthomason/packer.nvim&#39; -- Package manager&#xA;  use &#39;neovim/nvim-lspconfig&#39; -- Collection of configurations for the built-in LSP client&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install a language server, e.g. &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md#pyright&#34;&gt;pyright&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g pyright&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the language server setup to your init.lua.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;lspconfig&#39;.pyright.setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch neovim, the language server will now be attached and providing diagnostics (see &lt;code&gt;:LspInfo&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;nvim main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#Keybindings-and-completion&#34;&gt;Keybindings and completion&lt;/a&gt; for mapping useful functions and enabling omnifunc completion&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For a full list of servers, see &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt; or &lt;code&gt;:help lspconfig-server-configurations&lt;/code&gt;. This document contains installation instructions and additional, optional, customization suggestions for each language server. For some servers that are not on your system path (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you will be required to manually add &lt;code&gt;cmd&lt;/code&gt; as an entry in the table passed to &lt;code&gt;setup&lt;/code&gt;. Most language servers can be installed in less than a minute.&lt;/p&gt; &#xA;&lt;h2&gt;Suggested configuration&lt;/h2&gt; &#xA;&lt;p&gt;&#39;lspconfig&#39; does not map keybindings or enable completion by default. The following example configuration provides suggested keymaps for the most commonly used language server functions, and manually triggered completion with omnifunc (&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;strong&gt;you must pass the defined &lt;code&gt;on_attach&lt;/code&gt; as an argument to every &lt;code&gt;setup {}&lt;/code&gt; call&lt;/strong&gt; and &lt;strong&gt;the keybindings in &lt;code&gt;on_attach&lt;/code&gt; only take effect on buffers with an active language server&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Mappings.&#xA;-- See `:help vim.diagnostic.*` for documentation on any of the below functions&#xA;local opts = { noremap=true, silent=true }&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;e&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.diagnostic.open_float()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;[d&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.diagnostic.goto_prev()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;]d&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.diagnostic.goto_next()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;q&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.diagnostic.setloclist()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;&#xA;-- Use an on_attach function to only map the following keys&#xA;-- after the language server attaches to the current buffer&#xA;local on_attach = function(client, bufnr)&#xA;  -- Enable completion triggered by &amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&#xA;  vim.api.nvim_buf_set_option(bufnr, &#39;omnifunc&#39;, &#39;v:lua.vim.lsp.omnifunc&#39;)&#xA;&#xA;  -- Mappings.&#xA;  -- See `:help vim.lsp.*` for documentation on any of the below functions&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;gD&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.declaration()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;gd&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.definition()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;K&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.hover()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;gi&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.implementation()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;C-k&amp;gt;&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.signature_help()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;wa&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.add_workspace_folder()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;wr&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.remove_workspace_folder()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;wl&#39;, &#39;&amp;lt;cmd&amp;gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;D&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.type_definition()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;rn&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.rename()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;ca&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.code_action()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;gr&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.references()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;f&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.formatting()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;end&#xA;&#xA;-- Use a loop to conveniently call &#39;setup&#39; on multiple servers and&#xA;-- map buffer local keybindings when the language server attaches&#xA;local servers = { &#39;pyright&#39;, &#39;rust_analyzer&#39;, &#39;tsserver&#39; }&#xA;for _, lsp in pairs(servers) do&#xA;  require(&#39;lspconfig&#39;)[lsp].setup {&#xA;    on_attach = on_attach,&#xA;    flags = {&#xA;      -- This will be the default in neovim 0.7+&#xA;      debounce_text_changes = 150,&#xA;    }&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Manual, triggered completion is provided by neovim&#39;s built-in omnifunc. For &lt;strong&gt;auto&lt;/strong&gt;completion, a general purpose &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&#34;&gt;autocompletion plugin&lt;/a&gt; is required.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;If you have an issue with &#39;lspconfig&#39;, the first step is to reproduce with a &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/test/minimal_init.lua&#34;&gt;minimal configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The most common reasons a language server does not start or attach are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The language server is not installed. &#39;lspconfig&#39; does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in each server&#39;s lua module from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is an executable name instead of an absolute path to the executable, ensure it is on your path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Missing filetype plugins. Certain languages are not detecting by vim/neovim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set ft?&lt;/code&gt; shows the filetype and not an empty value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Not triggering root detection. &lt;strong&gt;Some&lt;/strong&gt; language servers will only start if it is opened in a directory, or child directory, containing a file which signals the &lt;em&gt;root&lt;/em&gt; of the project. Most of the time, this is a &lt;code&gt;.git&lt;/code&gt; folder, but each server defines the root config in the lua file. See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt; or the source for the list of root directories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You must pass &lt;code&gt;on_attach&lt;/code&gt; and &lt;code&gt;capabilities&lt;/code&gt; for &lt;strong&gt;each&lt;/strong&gt; &lt;code&gt;setup {}&lt;/code&gt; if you want these to take effect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Do not call &lt;code&gt;setup {}&lt;/code&gt; twice for the same server&lt;/strong&gt;. The second call to &lt;code&gt;setup {}&lt;/code&gt; will overwrite the first.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:LspInfo&lt;/code&gt;. Add the following to your init.vim to enable logging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.set_log_level(&#34;debug&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attempt to run the language server, and open the log with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:LspLog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of the time, the reason for failure is present in the logs.&lt;/p&gt; &#xA;&lt;h2&gt;Built-in commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; shows the status of active and configured language servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following support tab-completion for all arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass &lt;code&gt;autostart = false&lt;/code&gt; to your &lt;code&gt;.setup{}&lt;/code&gt; call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStop &amp;lt;client_id&amp;gt;&lt;/code&gt; Defaults to stopping all buffer clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspRestart &amp;lt;client_id&amp;gt;&lt;/code&gt; Defaults to restarting all buffer clients.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The wiki&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki&#34;&gt;wiki&lt;/a&gt; for additional topics, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Installing-language-servers#automatically&#34;&gt;Automatic server installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Snippets&#34;&gt;Snippets support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Project-local-settings&#34;&gt;Project local settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Language-specific-plugins&#34;&gt;Recommended plugins for enhanced language server features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If you are missing a language server on the list in &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt;, contributing a new configuration for it would be appreciated. You can follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new file at &lt;code&gt;lua/lspconfig/server_configurations/SERVER_NAME.lua&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy an &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/server_configurations/&#34;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/server_configurations/texlab.lua&#34;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ask questions on our &lt;a href=&#34;https://neovim.discourse.group/c/7-category/7&#34;&gt;Discourse&lt;/a&gt; or in the &lt;a href=&#34;https://app.element.io/#/room/#neovim:matrix.org&#34;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also help out by testing &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/issues?q=is%3Apr+is%3Aopen+label%3Aneeds-testing&#34;&gt;PRs with the &lt;code&gt;needs-testing&lt;/code&gt;&lt;/a&gt; label that affect language servers you use regularly.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>akinsho/toggleterm.nvim</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/akinsho/toggleterm.nvim</id>
    <link href="https://github.com/akinsho/toggleterm.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A neovim lua plugin to help easily manage multiple terminal windows&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; toggleterm.nvim &lt;/h1&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A &lt;i&gt;neovim&lt;/i&gt; plugin to persist and toggle multiple terminals during an editing session&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/akinsho/toggleterm.nvim/main/github/toggleterm.gif&#34; alt=&#34;screenshot&#34; title=&#34;Toggleterm in action&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Multiple orientations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Float&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/115306123-42d2ac00-a15f-11eb-84fc-c4246ee82a09.png&#34; alt=&#34;floating window&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vertical&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/akinsho/toggleterm.nvim/main/github/vertical-terms.png&#34; alt=&#34;vertical orientation&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tab&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/133490969-6a59e623-79db-4ca7-a73b-ef4b24a73b91.gif&#34; alt=&#34;tab orientation&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Send commands to different terminals&lt;/h3&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/112119367-36d1e980-8bb5-11eb-9787-5936391127a3.gif&#34; alt=&#34;exec&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This plugin only works in &lt;em&gt;Neovim 0.7&lt;/em&gt; or newer.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using packer in lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#34;akinsho/toggleterm.nvim&#34;, tag = &#39;v1.*&#39;, config = function()&#xA;  require(&#34;toggleterm&#34;).setup()&#xA;end}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using vim-plug in vimscript&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;akinsho/toggleterm.nvim&#39;, tag = &#39;v1.*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can/should specify a tag for the current major version of the plugin, to avoid breaking changes as this plugin evolves. To use a version of this plugin compatible with nvim versions less than 0.7 please use the tag &lt;code&gt;v1.*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Neovim&#39;s terminal is a very cool, but not super ergonomic tool to use. I find that I often want to set a process going and leave it to continue to run in the background. I don&#39;t need to see it all the time. I just need to be able to refer back to it at intervals. I also sometimes want to create a new terminal and run a few commands.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes I want these side by side, and I &lt;em&gt;really&lt;/em&gt; want these terminals to be easy to access. I also want my terminal to look different from non-terminal buffers so I use &lt;code&gt;winhighlight&lt;/code&gt; to darken them based on the &lt;code&gt;Normal&lt;/code&gt; background colour.&lt;/p&gt; &#xA;&lt;p&gt;This is the exact use case this was designed for. If that&#39;s your use case this might work for you.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;All I really want this plugin to be is what I described above. A wrapper around the terminal functionality.&lt;/p&gt; &#xA;&lt;p&gt;It basically (almost) does all that I need it to.&lt;/p&gt; &#xA;&lt;p&gt;I won&#39;t be turning this into a REPL plugin or doing a bunch of complex stuff. If you find any issues, &lt;em&gt;please&lt;/em&gt; consider a &lt;em&gt;pull request&lt;/em&gt; not an issue. I&#39;m also going to be pretty conservative about what I add.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;This plugin must be explicitly enabled by using &lt;code&gt;require(&#34;toggleterm&#34;).setup{}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;open_mapping&lt;/code&gt; key to use for toggling the terminal(s) will setup mappings for &lt;em&gt;normal&lt;/em&gt; mode If you prefix the mapping with a number that particular terminal will be opened.&lt;/p&gt; &#xA;&lt;p&gt;If you set the &lt;code&gt;insert_mappings&lt;/code&gt; key to true, the mapping will also take effect in insert mode; similarly setting &lt;code&gt;terminal_mappings&lt;/code&gt; to will have the mappings take effect in the opened terminal.&lt;/p&gt; &#xA;&lt;p&gt;However you will not be able to use a count with the open mapping in terminal and insert modes. You can create buffer specific mappings to exit terminal mode and then use a count with the open mapping. Check &lt;em&gt;Terminal window mappings&lt;/em&gt; for an example of how to do this.&lt;/p&gt; &#xA;&lt;p&gt;alternatively you can do this manually (not recommended but, your prerogative)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; set&#xA;autocmd TermEnter term://*toggleterm#*&#xA;      \ tnoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Cmd&amp;gt;exe v:count1 . &#34;ToggleTerm&#34;&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; By applying the mappings this way you can pass a count to your&#xA;&#34; mapping to open a specific window.&#xA;&#34; For example: 2&amp;lt;C-t&amp;gt; will open terminal 2&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Cmd&amp;gt;exe v:count1 . &#34;ToggleTerm&#34;&amp;lt;CR&amp;gt;&#xA;inoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;exe v:count1 . &#34;ToggleTerm&#34;&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Please ensure you have set &lt;code&gt;hidden&lt;/code&gt; in your neovim config, otherwise the terminals will be discarded when closed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Please do not copy and paste this configuration! It is here to show what options are available. It is not written be used as is.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;toggleterm&#34;).setup{&#xA;  -- size can be a number or function which is passed the current terminal&#xA;  size = 20 | function(term)&#xA;    if term.direction == &#34;horizontal&#34; then&#xA;      return 15&#xA;    elseif term.direction == &#34;vertical&#34; then&#xA;      return vim.o.columns * 0.4&#xA;    end&#xA;  end,&#xA;  open_mapping = [[&amp;lt;c-\&amp;gt;]],&#xA;  on_open = fun(t: Terminal), -- function to run when the terminal opens&#xA;  on_close = fun(t: Terminal), -- function to run when the terminal closes&#xA;  on_stdout = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stdout&#xA;  on_stderr = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stderr&#xA;  on_exit = fun(t: Terminal, job: number, exit_code: number, name: string) -- function to run when terminal process exits&#xA;  hide_numbers = true, -- hide the number column in toggleterm buffers&#xA;  shade_filetypes = {},&#xA;  highlights = {&#xA;    -- highlights which map to a highlight group name and a table of it&#39;s values&#xA;    -- NOTE: this is only a subset of values, any group placed here will be set for the terminal window split&#xA;    Normal = {&#xA;      guibg = &amp;lt;VALUE-HERE&amp;gt;,&#xA;    },&#xA;    NormalFloat = {&#xA;      link = &#39;Normal&#39;&#xA;    },&#xA;    FloatBorder = {&#xA;      guifg = &amp;lt;VALUE-HERE&amp;gt;,&#xA;      guibg = &amp;lt;VALUE-HERE&amp;gt;,&#xA;    },&#xA;  },&#xA;  shade_terminals = true, -- NOTE: this option takes priority over highlights specified so if you specify Normal highlights you should set this to false&#xA;  shading_factor = &#39;&amp;lt;number&amp;gt;&#39;, -- the degree by which to darken to terminal colour, default: 1 for dark backgrounds, 3 for light&#xA;  start_in_insert = true,&#xA;  insert_mappings = true, -- whether or not the open mapping applies in insert mode&#xA;  terminal_mappings = true, -- whether or not the open mapping applies in the opened terminals&#xA;  persist_size = true,&#xA;  direction = &#39;vertical&#39; | &#39;horizontal&#39; | &#39;tab&#39; | &#39;float&#39;,&#xA;  close_on_exit = true, -- close the terminal window when the process exits&#xA;  shell = vim.o.shell, -- change the default shell&#xA;  -- This field is only relevant if direction is set to &#39;float&#39;&#xA;  float_opts = {&#xA;    -- The border key is *almost* the same as &#39;nvim_open_win&#39;&#xA;    -- see :h nvim_open_win for details on borders however&#xA;    -- the &#39;curved&#39; border is a custom border type&#xA;    -- not natively supported but implemented in this plugin.&#xA;    border = &#39;single&#39; | &#39;double&#39; | &#39;shadow&#39; | &#39;curved&#39; | ... other options supported by win open&#xA;    width = &amp;lt;value&amp;gt;,&#xA;    height = &amp;lt;value&amp;gt;,&#xA;    winblend = 3,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;code&gt;ToggleTerm&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is the command the mappings call under the hood. You can use it directly and prefix it with a count to target a specific terminal. This function also takes arguments &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt;. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:ToggleTerm size=40 dir=~/Desktop direction=horizontal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;dir&lt;/code&gt; is specified on creation toggle term will open at the specified directory. If the terminal has already been opened at a particular directory it will remain in that directory.&lt;/p&gt; &#xA;&lt;p&gt;The directory can also be specified as &lt;code&gt;git_dir&lt;/code&gt; which toggleterm will then use to try and derive the git repo directory. &lt;em&gt;NOTE&lt;/em&gt;: This currently will not work for &lt;code&gt;git-worktrees&lt;/code&gt; or other more complex setups.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;size&lt;/code&gt; is specified and the command opens a split (horizontal/vertical) terminal, the height/width of all terminals in the same direction will be changed to &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;direction&lt;/code&gt; is specified and the command opens a terminal, the terminal will be changed to the specified direction.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;size&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt; are ignored if the command closes a terminal.&lt;/p&gt; &#xA;&lt;h4&gt;Caveats&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Having multiple terminals with different directions open at the same time is currently unsupported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;ToggleTermToggleAll&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command allows you to open all the previously toggled terminal in one go or close all the currently open terminals at once.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;TermExec&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command allows you to open a terminal with a specific action. e.g. &lt;code&gt;2TermExec cmd=&#34;git status&#34; dir=~/&amp;lt;my-repo-path&amp;gt;&lt;/code&gt; will run git status in terminal 2. note that the &lt;code&gt;cmd&lt;/code&gt; argument &lt;strong&gt;must be quoted&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; the &lt;code&gt;dir&lt;/code&gt; argument can also be &lt;em&gt;optionally&lt;/em&gt; quoted if it contains spaces.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cmd&lt;/code&gt; and &lt;code&gt;dir&lt;/code&gt; arguments can also expand the same special keywords as &lt;code&gt;:h expand&lt;/code&gt; e.g. &lt;code&gt;TermExec cmd=&#34;echo %&#34;&lt;/code&gt; will be expanded to &lt;code&gt;TermExec cmd=&#34;echo /file/example&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These special keywords can be escaped using the &lt;code&gt;\&lt;/code&gt; character, if you want to print character as is.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt; arguments are like the &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt; arguments of &lt;code&gt;ToggleTerm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default focus is returned to the original window after executing the command (except for floating terminals). Use argument &lt;code&gt;go_back=0&lt;/code&gt; to disable this behaviour.&lt;/p&gt; &#xA;&lt;p&gt;You can send commands to a terminal without opening its window by using the &lt;code&gt;open=0&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;see &lt;code&gt;:h expand()&lt;/code&gt; for more details&lt;/p&gt; &#xA;&lt;h3&gt;Sending lines to the terminal&lt;/h3&gt; &#xA;&lt;p&gt;You can &#34;send lines&#34; to the toggled terminals with the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:ToggleTermSendCurrentLine &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends the whole line where you are currently standing with your cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ToggleTermSendVisualLines &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends all of the (whole) lines in your visual selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ToggleTermSendVisualSelection &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends only the visually selected text (this can be a block of text or a selection in a single line)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(&lt;code&gt;&amp;lt;T_ID&lt;/code&gt; is an optional terminal ID parameter which defines where should we send the lines. If the parameter is not provided, then the default is the &lt;code&gt;first terminal&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://user-images.githubusercontent.com/18753533/159889865-724becab-877b-45a2-898e-820afd6a4ee1.mov&#34; controls=&#34;controls&#34; muted height=&#34;640px&#34;&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Set terminal shading&lt;/h3&gt; &#xA;&lt;p&gt;This plugin automatically shades terminal filetypes to be darker than other window you can disable this by setting &lt;code&gt;shade_terminals = false&lt;/code&gt; in the setup object&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;toggleterm&#39;.setup {&#xA;  shade_terminals = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;alternatively you can set &lt;em&gt;which&lt;/em&gt; filetypes should be shaded by setting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- fzf is just an example&#xA;require&#39;toggleterm&#39;.setup {&#xA;  shade_filetypes = { &#34;none&#34;, &#34;fzf&#34; }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;setting &lt;code&gt;&#34;none&#34;&lt;/code&gt; will allow normal terminal buffers to be highlighted.&lt;/p&gt; &#xA;&lt;h3&gt;Set persistent size&lt;/h3&gt; &#xA;&lt;p&gt;By default, this plugin will persist the size of horizontal and vertical terminals. Split terminals in the same direction always have the same size. You can disable this behaviour by setting &lt;code&gt;persist_size = false&lt;/code&gt; in the setup object. Disabling this behaviour forces the opening terminal size to the &lt;code&gt;size&lt;/code&gt; defined in the setup object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;toggleterm&#39;.setup{&#xA;  persist_size = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Terminal window mappings&lt;/h3&gt; &#xA;&lt;p&gt;It can be helpful to add mappings to make moving in and out of a terminal easier once toggled, whilst still keeping it open.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function _G.set_terminal_keymaps()&#xA;  local opts = {noremap = true}&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;esc&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;jk&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-h&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;h]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-j&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;j]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-k&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;k]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-l&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;l]], opts)&#xA;end&#xA;&#xA;-- if you only want these mappings for toggle term use term://*toggleterm#* instead&#xA;vim.cmd(&#39;autocmd! TermOpen term://* lua set_terminal_keymaps()&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Terminals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/116447435-e69f1480-a84f-11eb-86dd-19fa29646aa1.png&#34; alt=&#34;lazy git&#34;&gt; &lt;em&gt;using &lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;lazygit&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Toggleterm also exposes the &lt;code&gt;Terminal&lt;/code&gt; class so that this can be used to create custom terminals for showing terminal UIs like &lt;code&gt;lazygit&lt;/code&gt;, &lt;code&gt;htop&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;Each terminal can take the following arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Terminal:new {&#xA;  cmd = string -- command to execute when creating the terminal e.g. &#39;top&#39;&#xA;  direction = string -- the layout for the terminal, same as the main config options&#xA;  dir = string -- the directory for the terminal&#xA;  close_on_exit = bool -- close the terminal window when the process exits&#xA;  highlights = table -- a table with highlights&#xA;  env = table -- key:value table with environmental variables passed to jobstart()&#xA;  clear_env = bool -- use only environmental variables from `env`, passed to jobstart()&#xA;  on_open = fun(t: Terminal) -- function to run when the terminal opens&#xA;  on_close = fun(t: Terminal) -- function to run when the terminal closes&#xA;  -- callbacks for processing the output&#xA;  on_stdout = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stdout&#xA;  on_stderr = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stderr&#xA;  on_exit = fun(t: Terminal, job: number, exit_code: number, name: string) -- function to run when terminal process exits&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Terminal  = require(&#39;toggleterm.terminal&#39;).Terminal&#xA;local lazygit = Terminal:new({ cmd = &#34;lazygit&#34;, hidden = true })&#xA;&#xA;function _lazygit_toggle()&#xA;  lazygit:toggle()&#xA;end&#xA;&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;g&#34;, &#34;&amp;lt;cmd&amp;gt;lua _lazygit_toggle()&amp;lt;CR&amp;gt;&#34;, {noremap = true, silent = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new terminal but the specified command is not being run immediately. The command will run once the terminal is opened. Alternatively &lt;code&gt;term:spawn()&lt;/code&gt; can be used to start the command in a background buffer without opening a terminal window yet. If the &lt;code&gt;hidden&lt;/code&gt; key is set to true, this terminal will not be toggled by normal toggleterm commands such as &lt;code&gt;:ToggleTerm&lt;/code&gt; or the open mapping. It will only open and close by using the returned terminal object. A mapping for toggling the terminal can be set as in the example above.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively the terminal can be specified with a count which is the number that can be used to trigger this specific terminal. This can then be triggered using the current count e.g. &lt;code&gt;:5ToggleTerm&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lazygit = Terminal:new({ cmd = &#34;lazygit&#34;, count = 5 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set a custom layout for a terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lazygit = Terminal:new({&#xA;  cmd = &#34;lazygit&#34;,&#xA;  dir = &#34;git_dir&#34;,&#xA;  direction = &#34;float&#34;,&#xA;  float_opts = {&#xA;    border = &#34;double&#34;,&#xA;  },&#xA;  -- function to run on opening the terminal&#xA;  on_open = function(term)&#xA;    vim.cmd(&#34;startinsert!&#34;)&#xA;    vim.api.nvim_buf_set_keymap(term.bufnr, &#34;n&#34;, &#34;q&#34;, &#34;&amp;lt;cmd&amp;gt;close&amp;lt;CR&amp;gt;&#34;, {noremap = true, silent = true})&#xA;  end,&#xA;  -- function to run on closing the terminal&#xA;  on_close = function(term)&#xA;    vim.cmd(&#34;Closing terminal&#34;)&#xA;  end,&#xA;})&#xA;&#xA;function _lazygit_toggle()&#xA;  lazygit:toggle()&#xA;end&#xA;&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;g&#34;, &#34;&amp;lt;cmd&amp;gt;lua _lazygit_toggle()&amp;lt;CR&amp;gt;&#34;, {noremap = true, silent = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: do not use any of the private functionality of the terminal or other non-public parts of the API as these can change in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Statusline&lt;/h3&gt; &#xA;&lt;p&gt;In order to tell each terminal apart you can use the terminal buffer variable &lt;code&gt;b:toggle_number&lt;/code&gt; in your statusline&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; this is pseudo code&#xA;let statusline .= &#39;%{&amp;amp;ft == &#34;toggleterm&#34; ? &#34;terminal (&#34;.b:toggle_number.&#34;)&#34; : &#34;&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom commands&lt;/h3&gt; &#xA;&lt;p&gt;You can create your on commands by using the lua functions this plugin provides directly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;command! -count=1 TermGitPush  lua require&#39;toggleterm&#39;.exec(&#34;git push&#34;,    &amp;lt;count&amp;gt;, 12)&#xA;command! -count=1 TermGitPushF lua require&#39;toggleterm&#39;.exec(&#34;git push -f&#34;, &amp;lt;count&amp;gt;, 12)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Open multiple terminals side-by-side&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Direction&lt;/th&gt; &#xA;   &lt;th&gt;Supported&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vertical&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;horizontal&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tab&lt;/td&gt; &#xA;   &lt;td&gt;✖️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;✖️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In your first terminal, you need to leave the &lt;code&gt;TERMINAL&lt;/code&gt; mode using &lt;kbd&gt;C-\&lt;/kbd&gt;&lt;kbd&gt;C-N&lt;/kbd&gt; which can be remapped to &lt;kbd&gt;Esc&lt;/kbd&gt; for ease of use. &lt;img src=&#34;https://user-images.githubusercontent.com/31947091/133395516-22fef1e6-633d-4964-9175-f76fabf66794.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then you type on: &lt;code&gt;2&amp;lt;C-\&amp;gt;&lt;/code&gt;, and the result: &lt;img src=&#34;https://user-images.githubusercontent.com/31947091/133396789-fdf68b30-3a8c-440b-822f-6549f282c4fc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Explain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: this is the terminal&#39;s number (or ID), your first terminal is &lt;code&gt;1&lt;/code&gt; (e.g. your 3rd terminal will be &lt;code&gt;3&amp;lt;C-\&amp;gt;&lt;/code&gt;, so on).&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;C-\&lt;/kbd&gt;: this is the combined key mapping to the command &lt;code&gt;:ToggleTerm&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-lualine/lualine.nvim</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/nvim-lualine/lualine.nvim</id>
    <link href="https://github.com/nvim-lualine/lualine.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A blazing fast and easy to configure neovim statusline plugin written in pure lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lualine.nvim&lt;/h1&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/nvim-lualine/lualine.nvim?style=flat-square&#34; alt=&#34;code size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/nvim-lualine/lualine.nvim?style=flat-square&#34; alt=&#34;license&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;p&gt;A blazing fast and easy to configure Neovim statusline written in Lua.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lualine.nvim&lt;/code&gt; requires Neovim &amp;gt;= 0.5.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to create an issue/PR if you want to see anything else implemented. If you have some question or need help with configuration, start a &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before opening a PR. You can also help with documentation in the &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Here is a preview of what lualine can look like.&lt;/p&gt; &#xA;&lt;p&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650373-bb025580-74bf-11eb-8682-2c09321dd18e.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650377-bd64af80-74bf-11eb-9c55-fbfc51b39fe8.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650378-be95dc80-74bf-11eb-9718-82b242ecdd54.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650381-bfc70980-74bf-11eb-9245-85c48f0f154a.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/103467925-32372b00-4d54-11eb-88d6-6d39c46854d8.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Screenshots of all available themes are listed in &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&#34;&gt;THEMES.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For those who want to break the norms, you can create custom looks for lualine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/evil_lualine.lua&#34;&gt;evil_lualine&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/13149513/113875129-4453ba00-97d8-11eb-8f21-94a9ef565db3.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/slanted-gaps.lua&#34;&gt;slanted-gaps&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/13149513/143395518-f6d6f748-c1ca-491b-9dab-246d0a8cf23f.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/bubbles.lua&#34;&gt;bubbles&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/20235646/131350468-fc556196-5f46-4bfe-a72e-960f6a58db2c.png&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Performance compared to other plugins&lt;/h2&gt; &#xA;&lt;p&gt;Unlike other statusline plugins, lualine loads only the components you specify, and nothing else.&lt;/p&gt; &#xA;&lt;p&gt;Startup time performance measured with an amazing plugin &lt;a href=&#34;https://github.com/dstein64/vim-startuptime&#34;&gt;dstein64/vim-startuptime&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Times are measured with a clean &lt;code&gt;init.vim&lt;/code&gt; with only &lt;code&gt;vim-startuptime&lt;/code&gt;, &lt;code&gt;vim-plug&lt;/code&gt; and given statusline plugin installed. In control just &lt;code&gt;vim-startuptime&lt;/code&gt; and&lt;code&gt;vim-plug&lt;/code&gt; is installed. And measured time is complete startuptime of vim not time spent on specific plugin. These numbers are the average of 20 runs.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;control&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;lualine&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;lightline&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;airline&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17.2 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24.8 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25.5 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;79.9 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Last Updated On: 18-04-2022&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lualine/lualine.nvim&#39;&#xA;&#34; If you want to have icons in your statusline choose one of these&#xA;Plug &#39;kyazdani42/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;nvim-lualine/lualine.nvim&#39;,&#xA;  requires = { &#39;kyazdani42/nvim-web-devicons&#39;, opt = true }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also need to have a patched font if you want icons.&lt;/p&gt; &#xA;&lt;h2&gt;Usage and customization&lt;/h2&gt; &#xA;&lt;p&gt;Lualine has sections as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-------------------------------------------------+&#xA;| A | B | C                             X | Y | Z |&#xA;+-------------------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each sections holds its components e.g. Vim&#39;s current mode.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring lualine in init.vim&lt;/h3&gt; &#xA;&lt;p&gt;All the examples below are in lua. You can use the same examples in &lt;code&gt;.vim&lt;/code&gt; files by wrapping them in lua heredoc like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; END&#xA;require(&#39;lualine&#39;).setup()&#xA;END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, check out &lt;code&gt;:help lua-heredoc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Default configuration&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    icons_enabled = true,&#xA;    theme = &#39;auto&#39;,&#xA;    component_separators = { left = &#39;&#39;, right = &#39;&#39;},&#xA;    section_separators = { left = &#39;&#39;, right = &#39;&#39;},&#xA;    disabled_filetypes = {},&#xA;    always_divide_middle = true,&#xA;    globalstatus = false,&#xA;  },&#xA;  sections = {&#xA;    lualine_a = {&#39;mode&#39;},&#xA;    lualine_b = {&#39;branch&#39;, &#39;diff&#39;, &#39;diagnostics&#39;},&#xA;    lualine_c = {&#39;filename&#39;},&#xA;    lualine_x = {&#39;encoding&#39;, &#39;fileformat&#39;, &#39;filetype&#39;},&#xA;    lualine_y = {&#39;progress&#39;},&#xA;    lualine_z = {&#39;location&#39;}&#xA;  },&#xA;  inactive_sections = {&#xA;    lualine_a = {},&#xA;    lualine_b = {},&#xA;    lualine_c = {&#39;filename&#39;},&#xA;    lualine_x = {&#39;location&#39;},&#xA;    lualine_y = {},&#xA;    lualine_z = {}&#xA;  },&#xA;  tabline = {},&#xA;  extensions = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to get your current lualine config, you can do so with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).get_config()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Starting lualine&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Setting a theme&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { theme = &#39;gruvbox&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All available themes are listed in &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&#34;&gt;THEMES.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please create a PR if you managed to port a popular theme before us, &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&#34;&gt;here is how to do it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customizing themes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local custom_gruvbox = require&#39;lualine.themes.gruvbox&#39;&#xA;&#xA;-- Change the background of lualine_c section for normal mode&#xA;custom_gruvbox.normal.c.bg = &#39;#112233&#39;&#xA;&#xA;require(&#39;lualine&#39;).setup {&#xA;  options = { theme  = custom_gruvbox },&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Theme structure is available &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Writing-a-theme&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Separators&lt;/h3&gt; &#xA;&lt;p&gt;lualine defines two kinds of separators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;section_separators&lt;/code&gt; - separators between sections&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;components_separators&lt;/code&gt; - separators between the different components in sections&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if viewing this README in a browser, chances are the characters below will not be visible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  section_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  component_separators = { left = &#39;&#39;, right = &#39;&#39; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, left refers to the left-most sections (a, b, c), and right refers to the right-most sections (x, y, z).&lt;/p&gt; &#xA;&lt;h4&gt;Disabling separators&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { section_separators = &#39;&#39;, component_separators = &#39;&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Changing components in lualine sections&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {lualine_a = {&#39;mode&#39;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available components&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;branch&lt;/code&gt; (git branch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buffers&lt;/code&gt; (shows currently available buffers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diagnostics&lt;/code&gt; (diagnostics count from your preferred source)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff&lt;/code&gt; (git diff status)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;encoding&lt;/code&gt; (file encoding)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fileformat&lt;/code&gt; (file format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filesize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filetype&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hostname&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;location&lt;/code&gt; (location in file in line:column format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode&lt;/code&gt; (vim mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;progress&lt;/code&gt; (%progress in file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tabs&lt;/code&gt; (shows currently available tabs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;windows&lt;/code&gt; (shows currently available windows)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom components&lt;/h4&gt; &#xA;&lt;h5&gt;Lua functions as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function hello()&#xA;  return [[hello world]]&#xA;end&#xA;sections = { lualine_a = { hello } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim functions as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_a = {&#39;FugitiveHead&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim&#39;s statusline items as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_c = {&#39;%=&#39;, &#39;%t%m&#39;, &#39;%3p&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim variables as lualine component&lt;/h5&gt; &#xA;&lt;p&gt;Variables from &lt;code&gt;g:&lt;/code&gt;, &lt;code&gt;v:&lt;/code&gt;, &lt;code&gt;t:&lt;/code&gt;, &lt;code&gt;w:&lt;/code&gt;, &lt;code&gt;b:&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;go:&lt;/code&gt;, &lt;code&gt;vo:&lt;/code&gt;, &lt;code&gt;to:&lt;/code&gt;, &lt;code&gt;wo:&lt;/code&gt;, &lt;code&gt;bo:&lt;/code&gt; scopes can be used.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h lua-vim-variables&lt;/code&gt; and &lt;code&gt;:h lua-vim-options&lt;/code&gt; if you are not sure what to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_a = { &#39;g:coc_status&#39;, &#39;bo:filetype&#39; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Lua expressions as lualine component&lt;/h5&gt; &#xA;&lt;p&gt;You can use any valid lua expression as a component including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;oneliners&lt;/li&gt; &#xA; &lt;li&gt;global variables&lt;/li&gt; &#xA; &lt;li&gt;require statements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_c = { &#34;os.date(&#39;%a&#39;)&#34;, &#39;data&#39;, &#34;require&#39;lsp-status&#39;.status()&#34; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is a global variable in this example.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Component options&lt;/h3&gt; &#xA;&lt;p&gt;Component options can change the way a component behave. There are two kinds of options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;global options affecting all components&lt;/li&gt; &#xA; &lt;li&gt;local options affecting specific&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Global options can be used as local options (can be applied to specific components) but you cannot use local options as global. Global option used locally overwrites the global, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#39;lualine&#39;).setup {&#xA;      options = { fmt = string.lower },&#xA;      sections = { lualine_a = {&#xA;        { &#39;mode&#39;, fmt = function(str) return str:sub(1,1) end } },&#xA;                  lualine_b = {&#39;branch&#39;} }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; will be formatted with the passed function so only first char will be shown . On the other hand branch will be formatted with global formatter &lt;code&gt;string.lower&lt;/code&gt; so it will be showed in lower case.&lt;/p&gt; &#xA;&lt;h4&gt;Available options&lt;/h4&gt; &#xA;&lt;h4&gt;Global options&lt;/h4&gt; &#xA;&lt;p&gt;These are &lt;code&gt;options&lt;/code&gt; that are used in options table. They set behavior of lualine.&lt;/p&gt; &#xA;&lt;p&gt;Values set here are treated as default for other options that work in component level.&lt;/p&gt; &#xA;&lt;p&gt;For example even though &lt;code&gt;icons_enabled&lt;/code&gt; is a general component option. you can set &lt;code&gt;icons_enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and icons will be disabled on all component. You can still overwrite defaults set in option table by specifying the option value in component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  theme = &#39;auto&#39;, -- lualine theme&#xA;  component_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  section_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  disabled_filetypes = {},     -- Filetypes to disable lualine for.&#xA;  always_divide_middle = true, -- When set to true, left sections i.e. &#39;a&#39;,&#39;b&#39; and &#39;c&#39;&#xA;                               -- can&#39;t take over the entire statusline even&#xA;                               -- if neither of &#39;x&#39;, &#39;y&#39; or &#39;z&#39; are present.&#xA;  globalstatus = false,        -- enable global statusline (have a single statusline&#xA;                               -- at bottom of neovim instead of one for  every window).&#xA;                               -- This feature is only available in neovim 0.7 and higher.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;General component options&lt;/h4&gt; &#xA;&lt;p&gt;These are options that control behavior at component level and are available for all components.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;mode&#39;,&#xA;      icons_enabled = true, -- Enables the display of icons alongside the component.&#xA;      -- Defines the icon to be displayed in front of the component.&#xA;      -- Can be string|table&#xA;      -- As table it must contain the icon as first entry and can use&#xA;      -- color option to custom color the icon. Example:&#xA;      -- {&#39;branch&#39;, icon = &#39;&#39;} / {&#39;branch&#39;, icon = {&#39;&#39;, color={fg=&#39;green&#39;}}}&#xA;&#xA;      -- icon position can also be set to the right side from table. Example:&#xA;      -- {&#39;branch&#39;, icon = {&#39;&#39;, align=&#39;right&#39;, color={fg=&#39;green&#39;}}}&#xA;      icon = nil,&#xA;&#xA;      separator = nil,      -- Determines what separator to use for the component.&#xA;                            -- Note:&#xA;                            --  When a string is provided it&#39;s treated as component_separator.&#xA;                            --  When a table is provided it&#39;s treated as section_separator.&#xA;                            --  Passing an empty string disables the separator.&#xA;                            --&#xA;                            -- These options can be used to set colored separators&#xA;                            -- around a component.&#xA;                            --&#xA;                            -- The options need to be set as such:&#xA;                            --   separator = { left = &#39;&#39;, right = &#39;&#39;}&#xA;                            --&#xA;                            -- Where left will be placed on left side of component,&#xA;                            -- and right will be placed on its right.&#xA;                            --&#xA;&#xA;      cond = nil,           -- Condition function, the component is loaded when the function returns `true`.&#xA;&#xA;      -- Defines a custom color for the component:&#xA;      --&#xA;      -- &#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; } | function&#xA;      -- Note:&#xA;      --  &#39;|&#39; is synonymous with &#39;or&#39;, meaning a different acceptable format for that placeholder.&#xA;      -- color function has to return one of other color types (&#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; })&#xA;      -- color functions can be used to have different colors based on state as shown below.&#xA;      --&#xA;      -- Examples:&#xA;      --   color = { fg = &#39;#ffaa88&#39;, bg = &#39;grey&#39;, gui=&#39;italic,bold&#39; },&#xA;      --   color = { fg = 204 }   -- When fg/bg are omitted, they default to the your theme&#39;s fg/bg.&#xA;      --   color = &#39;WarningMsg&#39;   -- Highlight groups can also be used.&#xA;      --   color = function(section)&#xA;      --      return { fg = vim.bo.modified and &#39;#aa3355&#39; or &#39;#33aa88&#39; }&#xA;      --   end,&#xA;      color = nil, -- The default is your theme&#39;s color for that section and mode.&#xA;&#xA;      -- Specify what type a component is, if omitted, lualine will guess it for you.&#xA;      --&#xA;      -- Available types are:&#xA;      --   [format: type_name(example)], mod(branch/filename),&#xA;      --   stl(%f/%m), var(g:coc_status/bo:modifiable),&#xA;      --   lua_expr(lua expressions), vim_fun(viml function name)&#xA;      --&#xA;      -- Note:&#xA;      -- lua_expr is short for lua-expression and vim_fun is short for vim-function.&#xA;      type = nil,&#xA;&#xA;      padding = 1, -- Adds padding to the left and right of components.&#xA;                   -- Padding can be specified to left or right independently, e.g.:&#xA;                   --   padding = { left = left_padding, right = right_padding }&#xA;&#xA;      fmt = nil,   -- Format function, formats the component&#39;s output.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Component specific options&lt;/h4&gt; &#xA;&lt;p&gt;These are options that are available on specific components. For example you have option on &lt;code&gt;diagnostics&lt;/code&gt; component to specify what your diagnostic sources will be.&lt;/p&gt; &#xA;&lt;h4&gt;buffers component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;buffers&#39;,&#xA;      show_filename_only = true,   -- Shows shortened relative path when set to false.&#xA;      hide_filename_extension = false,   -- Hide filename extension when set to true.&#xA;      show_modified_status = true, -- Shows indicator when the buffer is modified.&#xA;&#xA;      mode = 0, -- 0: Shows buffer name&#xA;                -- 1: Shows buffer index&#xA;                -- 2: Shows buffer name + buffer index &#xA;                -- 3: Shows buffer number&#xA;                -- 4: Shows buffer name + buffer number&#xA;&#xA;      max_length = vim.o.columns * 2 / 3, -- Maximum width of buffers component,&#xA;                                          -- it can also be a function that returns&#xA;                                          -- the value of `max_length` dynamically.&#xA;      filetype_names = {&#xA;        TelescopePrompt = &#39;Telescope&#39;,&#xA;        dashboard = &#39;Dashboard&#39;,&#xA;        packer = &#39;Packer&#39;,&#xA;        fzf = &#39;FZF&#39;,&#xA;        alpha = &#39;Alpha&#39;&#xA;      }, -- Shows specific buffer name for that filetype ( { `filetype` = `buffer_name`, ... } )&#xA;&#xA;      buffers_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active buffer.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive buffer.&#xA;      },&#xA;&#xA;      symbols = {&#xA;        modified = &#39; ●&#39;,      -- Text to show when the buffer is modified&#xA;        alternate_file = &#39;#&#39;, -- Text to show to indify the alternate file&#xA;        directory =  &#39;&#39;,     -- Text to show when the buffer is a directory&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;diagnostics component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;diagnostics&#39;,&#xA;&#xA;      -- Table of diagnostic sources, available sources are:&#xA;      --   &#39;nvim_lsp&#39;, &#39;nvim_diagnostic&#39;, &#39;coc&#39;, &#39;ale&#39;, &#39;vim_lsp&#39;.&#xA;      -- or a function that returns a table as such:&#xA;      --   { error=error_cnt, warn=warn_cnt, info=info_cnt, hint=hint_cnt }&#xA;      sources = { &#39;nvim_diagnostic&#39;, &#39;coc&#39; },&#xA;&#xA;      -- Displays diagnostics for the defined severity types&#xA;      sections = { &#39;error&#39;, &#39;warn&#39;, &#39;info&#39;, &#39;hint&#39; },&#xA;&#xA;      diagnostics_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        error = &#39;DiagnosticError&#39;, -- Changes diagnostics&#39; error color.&#xA;        warn  = &#39;DiagnosticWarn&#39;,  -- Changes diagnostics&#39; warn color.&#xA;        info  = &#39;DiagnosticInfo&#39;,  -- Changes diagnostics&#39; info color.&#xA;        hint  = &#39;DiagnosticHint&#39;,  -- Changes diagnostics&#39; hint color.&#xA;      },&#xA;      symbols = {error = &#39;E&#39;, warn = &#39;W&#39;, info = &#39;I&#39;, hint = &#39;H&#39;},&#xA;      colored = true,           -- Displays diagnostics status in color if set to true.&#xA;      update_in_insert = false, -- Update diagnostics in insert mode.&#xA;      always_visible = false,   -- Show diagnostics even if there are none.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;diff component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;diff&#39;,&#xA;      colored = true, -- Displays a colored diff status if set to true&#xA;      diff_color = {&#xA;        -- Same color values as the general color option can be used here.&#xA;        added    = &#39;DiffAdd&#39;,    -- Changes the diff&#39;s added color&#xA;        modified = &#39;DiffChange&#39;, -- Changes the diff&#39;s modified color&#xA;        removed  = &#39;DiffDelete&#39;, -- Changes the diff&#39;s removed color you&#xA;      },&#xA;      symbols = {added = &#39;+&#39;, modified = &#39;~&#39;, removed = &#39;-&#39;}, -- Changes the symbols used by the diff.&#xA;      source = nil, -- A function that works as a data source for diff.&#xA;                    -- It must return a table as such:&#xA;                    --   { added = add_count, modified = modified_count, removed = removed_count }&#xA;                    -- or nil on failure. count &amp;lt;= 0 won&#39;t be displayed.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;fileformat component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;fileformat&#39;,&#xA;      symbols = {&#xA;        unix = &#39;&#39;, -- e712&#xA;        dos = &#39;&#39;,  -- e70f&#xA;        mac = &#39;&#39;,  -- e711&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;filename component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;filename&#39;,&#xA;      file_status = true,      -- Displays file status (readonly status, modified status)&#xA;      path = 0,                -- 0: Just the filename&#xA;                               -- 1: Relative path&#xA;                               -- 2: Absolute path&#xA;                               -- 3: Absolute path, with tilde as the home directory&#xA;&#xA;      shorting_target = 40,    -- Shortens path to leave 40 spaces in the window&#xA;                               -- for other components. (terrible name, any suggestions?)&#xA;      symbols = {&#xA;        modified = &#39;[+]&#39;,      -- Text to show when the file is modified.&#xA;        readonly = &#39;[-]&#39;,      -- Text to show when the file is non-modifiable or readonly.&#xA;        unnamed = &#39;[No Name]&#39;, -- Text to show for unnamed buffers.&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;filetype component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;filetype&#39;,&#xA;      colored = true,   -- Displays filetype icon in color if set to true&#xA;      icon_only = false, -- Display only an icon for filetype&#xA;      icon = { align = &#39;right&#39; }, -- Display filetype icon on the right hand side&#xA;      -- icon =    {&#39;X&#39;, align=&#39;right&#39;}&#xA;      -- Icon string ^ in table is ignored in filetype component&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;tabs component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;tabs&#39;,&#xA;      max_length = vim.o.columns / 3, -- Maximum width of tabs component.&#xA;                                      -- Note:&#xA;                                      -- It can also be a function that returns&#xA;                                      -- the value of `max_length` dynamically.&#xA;      mode = 0, -- 0: Shows tab_nr&#xA;                -- 1: Shows tab_name&#xA;                -- 2: Shows tab_nr + tab_name&#xA;&#xA;      tabs_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active tab.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive tab.&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;windows component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;windows&#39;,&#xA;      show_filename_only = true,   -- Shows shortened relative path when set to false.&#xA;      show_modified_status = true, -- Shows indicator when the window is modified.&#xA;&#xA;      mode = 0, -- 0: Shows window name&#xA;                -- 1: Shows window index&#xA;                -- 2: Shows window name + window index&#xA;&#xA;      max_length = vim.o.columns * 2 / 3, -- Maximum width of windows component,&#xA;                                          -- it can also be a function that returns&#xA;                                          -- the value of `max_length` dynamically.&#xA;      filetype_names = {&#xA;        TelescopePrompt = &#39;Telescope&#39;,&#xA;        dashboard = &#39;Dashboard&#39;,&#xA;        packer = &#39;Packer&#39;,&#xA;        fzf = &#39;FZF&#39;,&#xA;        alpha = &#39;Alpha&#39;&#xA;      }, -- Shows specific window name for that filetype ( { `filetype` = `window_name`, ... } )&#xA;&#xA;      disabled_buftypes = { &#39;quickfix&#39;, &#39;prompt&#39; }, -- Hide a window if its buffer&#39;s type is disabled&#xA;&#xA;      windows_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active window.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive window.&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Tabline&lt;/h3&gt; &#xA;&lt;p&gt;You can use lualine to display components in tabline. The configuration for tabline sections is exactly the same as that of the statusline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;  lualine_a = {},&#xA;  lualine_b = {&#39;branch&#39;},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the branch and filename components on top of neovim inside tabline.&lt;/p&gt; &#xA;&lt;p&gt;lualine also provides 2 components, buffers and tabs, that you can use to get a more traditional tabline/bufferline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;  lualine_a = {&#39;buffers&#39;},&#xA;  lualine_b = {&#39;branch&#39;},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {&#39;tabs&#39;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Buffers&lt;/h4&gt; &#xA;&lt;p&gt;Shows currently open buffers. Like bufferline . See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#buffers-component-options&#34;&gt;buffers options&lt;/a&gt; for all builtin behaviors of buffers component. You can use &lt;code&gt;:LualineBuffersJump&lt;/code&gt; to jump to buffer based on index of buffer in buffers component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;  :LualineBuffersJump 2  &#34; Jumps to 2nd buffer in buffers component.&#xA;  :LualineBuffersJump $  &#34; Jumps to last buffer in buffers component.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tabs&lt;/h4&gt; &#xA;&lt;p&gt;Shows currently open tab. Like usual tabline. See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#tabs-component-options&#34;&gt;tabs options&lt;/a&gt; for all builtin behaviors of tabs component. You can also use &lt;code&gt;:LualineRenameTab&lt;/code&gt; to set a name for a tabpage. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:LualineRenameTab Project_K&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s useful when you&#39;re using rendering mode 2/3 in tabs. To unname a tablage run &lt;code&gt;:LualineRenameTab&lt;/code&gt; without argument.&lt;/p&gt; &#xA;&lt;h4&gt;Tabline as statusline&lt;/h4&gt; &#xA;&lt;p&gt;You can also completely move your statusline to a tabline by configuring &lt;code&gt;lualine.tabline&lt;/code&gt; and disabling &lt;code&gt;lualine.sections&lt;/code&gt; and &lt;code&gt;lualine.inactive_sections&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;......&#xA;  },&#xA;sections = {},&#xA;inactive_sections = {},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a more sophisticated tabline you can use other tabline plugins with lualine too, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;nvim-bufferline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kdheepak/tabline.nvim&#34;&gt;tabline.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;tabline.nvim even uses lualine&#39;s theme by default 🙌 You can find a bigger list &lt;a href=&#34;https://github.com/rockerBOO/awesome-neovim#tabline&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;lualine extensions change statusline appearance for a window/buffer with specified filetypes.&lt;/p&gt; &#xA;&lt;p&gt;By default no extensions are loaded to improve performance. You can load extensions with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;extensions = {&#39;quickfix&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available extensions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;aerial&lt;/li&gt; &#xA; &lt;li&gt;chadtree&lt;/li&gt; &#xA; &lt;li&gt;fern&lt;/li&gt; &#xA; &lt;li&gt;fugitive&lt;/li&gt; &#xA; &lt;li&gt;fzf&lt;/li&gt; &#xA; &lt;li&gt;nerdtree&lt;/li&gt; &#xA; &lt;li&gt;neo-tree&lt;/li&gt; &#xA; &lt;li&gt;nvim-tree&lt;/li&gt; &#xA; &lt;li&gt;quickfix&lt;/li&gt; &#xA; &lt;li&gt;symbols-outline&lt;/li&gt; &#xA; &lt;li&gt;toggleterm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom extensions&lt;/h4&gt; &#xA;&lt;p&gt;You can define your own extensions. If you believe an extension may be useful to others, then please submit a PR.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local my_extension = { sections = { lualine_a = {&#39;mode&#39;} }, filetypes = {&#39;lua&#39;} }&#xA;require(&#39;lualine&#39;).setup { extensions = { my_extension } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Disabling lualine&lt;/h3&gt; &#xA;&lt;p&gt;You can disable lualine for specific filetypes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { disabled_filetypes = {&#39;lua&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to these wonderful people, we enjoy this awesome plugin.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=nvim-lualine/lualine.nvim&#34;&gt; &lt;/a&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Wiki&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki&#34;&gt;wiki&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;You can find some useful &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Component-snippets&#34;&gt;configuration snippets&lt;/a&gt; here. You can also share your awesome snippets with others.&lt;/p&gt; &#xA;&lt;p&gt;If you want to extend lualine with plugins or want to know which ones already do, &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Plugins&#34;&gt;wiki/plugins&lt;/a&gt; is for you.&lt;/p&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;If you appreciate my work you can buy me a coffee.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/shadmansalJ&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-black.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kyazdani42/nvim-tree.lua</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/kyazdani42/nvim-tree.lua</id>
    <link href="https://github.com/kyazdani42/nvim-tree.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A file explorer tree for neovim written in lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A File Explorer For Neovim Written In Lua&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/kyazdani42/nvim-tree.lua/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notice&lt;/h2&gt; &#xA;&lt;p&gt;This plugin requires &lt;a href=&#34;https://github.com/neovim/neovim/wiki/Installing-Neovim&#34;&gt;neovim &amp;gt;=0.7.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have issues since the recent setup migration, check out &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/674&#34;&gt;this guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; requires&#xA;Plug &#39;kyazdani42/nvim-web-devicons&#39; &#34; for file icons&#xA;Plug &#39;kyazdani42/nvim-tree.lua&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;kyazdani42/nvim-tree.lua&#39;,&#xA;    requires = {&#xA;      &#39;kyazdani42/nvim-web-devicons&#39;, -- optional, for file icon&#xA;    },&#xA;    tag = &#39;nightly&#39; -- optional, updated every week. (see issue #1193)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Setup should be run in a lua file or in a lua heredoc (&lt;code&gt;:help lua-heredoc&lt;/code&gt;) if using in a vim file. Legacy &lt;code&gt;g:&lt;/code&gt; options have been migrated to the setup function. See &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/674&#34;&gt;this issue&lt;/a&gt; for information on migrating your configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; vimrc&#xA;nnoremap &amp;lt;C-n&amp;gt; :NvimTreeToggle&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;r :NvimTreeRefresh&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;n :NvimTreeFindFile&amp;lt;CR&amp;gt;&#xA;&#34; More available functions:&#xA;&#34; NvimTreeOpen&#xA;&#34; NvimTreeClose&#xA;&#34; NvimTreeFocus&#xA;&#34; NvimTreeFindFileToggle&#xA;&#34; NvimTreeResize&#xA;&#34; NvimTreeCollapse&#xA;&#34; NvimTreeCollapseKeepBuffers&#xA;&#xA;set termguicolors &#34; this variable must be enabled for colors to be applied properly&#xA;&#xA;&#34; a list of groups can be found at `:help nvim_tree_highlight`&#xA;highlight NvimTreeFolderIcon guibg=blue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;&#xA;-- empty setup using defaults: add your own options&#xA;require&#39;nvim-tree&#39;.setup {&#xA;}&#xA;&#xA;-- OR&#xA;&#xA;-- setup with all defaults&#xA;-- each of these are documented in `:help nvim-tree.OPTION_NAME`&#xA;-- nested options are documented by accessing them with `.` (eg: `:help nvim-tree.view.mappings.list`).&#xA;require&#39;nvim-tree&#39;.setup { -- BEGIN_DEFAULT_OPTS&#xA;  auto_reload_on_write = true,&#xA;  create_in_closed_folder = false,&#xA;  disable_netrw = false,&#xA;  hijack_cursor = false,&#xA;  hijack_netrw = true,&#xA;  hijack_unnamed_buffer_when_opening = false,&#xA;  ignore_buffer_on_setup = false,&#xA;  open_on_setup = false,&#xA;  open_on_setup_file = false,&#xA;  open_on_tab = false,&#xA;  sort_by = &#34;name&#34;,&#xA;  update_cwd = false,&#xA;  reload_on_bufenter = false,&#xA;  respect_buf_cwd = false,&#xA;  view = {&#xA;    width = 30,&#xA;    height = 30,&#xA;    hide_root_folder = false,&#xA;    side = &#34;left&#34;,&#xA;    preserve_window_proportions = false,&#xA;    number = false,&#xA;    relativenumber = false,&#xA;    signcolumn = &#34;yes&#34;,&#xA;    mappings = {&#xA;      custom_only = false,&#xA;      list = {&#xA;        -- user mappings go here&#xA;      },&#xA;    },&#xA;  },&#xA;  renderer = {&#xA;    add_trailing = false,&#xA;    group_empty = false,&#xA;    highlight_git = false,&#xA;    highlight_opened_files = &#34;none&#34;,&#xA;    root_folder_modifier = &#34;:~&#34;,&#xA;    indent_markers = {&#xA;      enable = false,&#xA;      icons = {&#xA;        corner = &#34;└ &#34;,&#xA;        edge = &#34;│ &#34;,&#xA;        none = &#34;  &#34;,&#xA;      },&#xA;    },&#xA;    icons = {&#xA;      webdev_colors = true,&#xA;      git_placement = &#34;before&#34;,&#xA;      padding = &#34; &#34;,&#xA;      symlink_arrow = &#34; ➛ &#34;,&#xA;      show = {&#xA;        file = true,&#xA;        folder = true,&#xA;        folder_arrow = true,&#xA;        git = true,&#xA;      },&#xA;      glyphs = {&#xA;        default = &#34;&#34;,&#xA;        symlink = &#34;&#34;,&#xA;        folder = {&#xA;          arrow_closed = &#34;&#34;,&#xA;          arrow_open = &#34;&#34;,&#xA;          default = &#34;&#34;,&#xA;          open = &#34;&#34;,&#xA;          empty = &#34;&#34;,&#xA;          empty_open = &#34;&#34;,&#xA;          symlink = &#34;&#34;,&#xA;          symlink_open = &#34;&#34;,&#xA;        },&#xA;        git = {&#xA;          unstaged = &#34;✗&#34;,&#xA;          staged = &#34;✓&#34;,&#xA;          unmerged = &#34;&#34;,&#xA;          renamed = &#34;➜&#34;,&#xA;          untracked = &#34;★&#34;,&#xA;          deleted = &#34;&#34;,&#xA;          ignored = &#34;◌&#34;,&#xA;        },&#xA;      },&#xA;    },&#xA;    special_files = { &#34;Cargo.toml&#34;, &#34;Makefile&#34;, &#34;README.md&#34;, &#34;readme.md&#34; },&#xA;  },&#xA;  hijack_directories = {&#xA;    enable = true,&#xA;    auto_open = true,&#xA;  },&#xA;  update_focused_file = {&#xA;    enable = false,&#xA;    update_cwd = false,&#xA;    ignore_list = {},&#xA;  },&#xA;  ignore_ft_on_setup = {},&#xA;  system_open = {&#xA;    cmd = &#34;&#34;,&#xA;    args = {},&#xA;  },&#xA;  diagnostics = {&#xA;    enable = false,&#xA;    show_on_dirs = false,&#xA;    icons = {&#xA;      hint = &#34;&#34;,&#xA;      info = &#34;&#34;,&#xA;      warning = &#34;&#34;,&#xA;      error = &#34;&#34;,&#xA;    },&#xA;  },&#xA;  filters = {&#xA;    dotfiles = false,&#xA;    custom = {},&#xA;    exclude = {},&#xA;  },&#xA;  git = {&#xA;    enable = true,&#xA;    ignore = true,&#xA;    timeout = 400,&#xA;  },&#xA;  actions = {&#xA;    use_system_clipboard = true,&#xA;    change_dir = {&#xA;      enable = true,&#xA;      global = false,&#xA;      restrict_above_cwd = false,&#xA;    },&#xA;    expand_all = {&#xA;      max_folder_discovery = 300,&#xA;    },&#xA;    open_file = {&#xA;      quit_on_open = false,&#xA;      resize_window = true,&#xA;      window_picker = {&#xA;        enable = true,&#xA;        chars = &#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#34;,&#xA;        exclude = {&#xA;          filetype = { &#34;notify&#34;, &#34;packer&#34;, &#34;qf&#34;, &#34;diff&#34;, &#34;fugitive&#34;, &#34;fugitiveblame&#34; },&#xA;          buftype = { &#34;nofile&#34;, &#34;terminal&#34;, &#34;help&#34; },&#xA;        },&#xA;      },&#xA;    },&#xA;    remove_file = {&#xA;      close_window = true,&#xA;    },&#xA;  },&#xA;  trash = {&#xA;    cmd = &#34;trash&#34;,&#xA;    require_confirm = true,&#xA;  },&#xA;  live_filter = {&#xA;    prefix = &#34;[FILTER]: &#34;,&#xA;    always_show_folders = true,&#xA;  },&#xA;  log = {&#xA;    enable = false,&#xA;    truncate = false,&#xA;    types = {&#xA;      all = false,&#xA;      config = false,&#xA;      copy_paste = false,&#xA;      diagnostics = false,&#xA;      git = false,&#xA;      profile = false,&#xA;    },&#xA;  },&#xA;} -- END_DEFAULT_OPTS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Key Bindings&lt;/h2&gt; &#xA;&lt;h3&gt;Default actions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; or &lt;code&gt;o&lt;/code&gt; on the root folder will cd in the above directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-]&amp;gt;&lt;/code&gt; will cd in the directory under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;BS&amp;gt;&lt;/code&gt; will close current opened directory or parent&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;a&lt;/code&gt; to add a file. Adding a directory requires leaving a leading &lt;code&gt;/&lt;/code&gt; at the end of the path. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;you can add multiple directories by doing foo/bar/baz/f and it will add foo bar and baz directories and f as a file&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;r&lt;/code&gt; to rename a file&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt; to rename a file and omit the filename on input&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;x&lt;/code&gt; to add/remove file/directory to cut clipboard&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;c&lt;/code&gt; to add/remove file/directory to copy clipboard&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;y&lt;/code&gt; will copy name to system clipboard&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;Y&lt;/code&gt; will copy relative path to system clipboard&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;gy&lt;/code&gt; will copy absolute path to system clipboard&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;p&lt;/code&gt; to paste from clipboard. Cut clipboard has precedence over copy (will prompt for confirmation)&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;d&lt;/code&gt; to delete a file (will prompt for confirmation)&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;D&lt;/code&gt; to trash a file (configured in setup())&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;]c&lt;/code&gt; to go to next git item&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;[c&lt;/code&gt; to go to prev git item&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;-&lt;/code&gt; to navigate up to the parent directory of the current file/directory&lt;/li&gt; &#xA; &lt;li&gt;type &lt;code&gt;s&lt;/code&gt; to open a file with default system application or a folder with default file manager (if you want to change the command used to do it see &lt;code&gt;:h nvim-tree.setup&lt;/code&gt; under &lt;code&gt;system_open&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;if the file is a directory, &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; will open the directory otherwise it will open the file in the buffer near the tree&lt;/li&gt; &#xA; &lt;li&gt;if the file is a symlink, &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; will follow the symlink (if the target is a file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-v&amp;gt;&lt;/code&gt; will open the file in a vertical split&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-x&amp;gt;&lt;/code&gt; will open the file in a horizontal split&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt; will open the file in a new tab&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; will open the file as a preview (keeps the cursor in the tree)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;I&lt;/code&gt; will toggle visibility of hidden folders / files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;H&lt;/code&gt; will toggle visibility of dotfiles (files/folders starting with a &lt;code&gt;.&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;R&lt;/code&gt; will refresh the tree&lt;/li&gt; &#xA; &lt;li&gt;Double left click acts like &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Double right click acts like &lt;code&gt;&amp;lt;C-]&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;W&lt;/code&gt; will collapse the whole tree&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;E&lt;/code&gt; will expand the whole tree. Be aware this might hang neovim for a while if running on a big folder (see &lt;code&gt;:help nvim-tree.actions.expand_all.max_folder_discovery&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;S&lt;/code&gt; will prompt the user to enter a path and then expands the tree to match the path&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.&lt;/code&gt; will enter vim command mode with the file the cursor is on&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-k&lt;/code&gt; will toggle a popup with file infos about the file under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;f&lt;/code&gt; will allow you to filter nodes dynamically based on regex matching.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;list&lt;/code&gt; option in &lt;code&gt;view.mappings.list&lt;/code&gt; is a table of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- key can be either a string or a table of string (lhs)&#xA;-- action is the name of the action, set to `&#34;&#34;` to remove default action&#xA;-- action_cb is the function that will be called, it receives the node as a parameter. Optional for default actions&#xA;-- mode is normal by default&#xA;&#xA;local tree_cb = require&#39;nvim-tree.config&#39;.nvim_tree_callback&#xA;&#xA;local function print_node_path(node) {&#xA;  print(node.absolute_path)&#xA;}&#xA;&#xA;local list = {&#xA;  { key = {&#34;&amp;lt;CR&amp;gt;&#34;, &#34;o&#34; }, action = &#34;edit&#34;, mode = &#34;n&#34;},&#xA;  { key = &#34;p&#34;, action = &#34;print_path&#34;, action_cb = print_node_path },&#xA;  { key = &#34;s&#34;, cb = tree_cb(&#34;vsplit&#34;) }, --tree_cb and the cb property are deprecated&#xA;  { key = &#34;&amp;lt;2-RightMouse&amp;gt;&#34;, action = &#34;&#34; }, -- will remove default cd action&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are the default bindings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;-- default mappings&#xA;local list = {&#xA;  { key = {&#34;&amp;lt;CR&amp;gt;&#34;, &#34;o&#34;, &#34;&amp;lt;2-LeftMouse&amp;gt;&#34;}, action = &#34;edit&#34; },&#xA;  { key = &#34;&amp;lt;C-e&amp;gt;&#34;,                        action = &#34;edit_in_place&#34; },&#xA;  { key = {&#34;O&#34;},                          action = &#34;edit_no_picker&#34; },&#xA;  { key = {&#34;&amp;lt;2-RightMouse&amp;gt;&#34;, &#34;&amp;lt;C-]&amp;gt;&#34;},    action = &#34;cd&#34; },&#xA;  { key = &#34;&amp;lt;C-v&amp;gt;&#34;,                        action = &#34;vsplit&#34; },&#xA;  { key = &#34;&amp;lt;C-x&amp;gt;&#34;,                        action = &#34;split&#34; },&#xA;  { key = &#34;&amp;lt;C-t&amp;gt;&#34;,                        action = &#34;tabnew&#34; },&#xA;  { key = &#34;&amp;lt;&#34;,                            action = &#34;prev_sibling&#34; },&#xA;  { key = &#34;&amp;gt;&#34;,                            action = &#34;next_sibling&#34; },&#xA;  { key = &#34;P&#34;,                            action = &#34;parent_node&#34; },&#xA;  { key = &#34;&amp;lt;BS&amp;gt;&#34;,                         action = &#34;close_node&#34; },&#xA;  { key = &#34;&amp;lt;Tab&amp;gt;&#34;,                        action = &#34;preview&#34; },&#xA;  { key = &#34;K&#34;,                            action = &#34;first_sibling&#34; },&#xA;  { key = &#34;J&#34;,                            action = &#34;last_sibling&#34; },&#xA;  { key = &#34;I&#34;,                            action = &#34;toggle_git_ignored&#34; },&#xA;  { key = &#34;H&#34;,                            action = &#34;toggle_dotfiles&#34; },&#xA;  { key = &#34;R&#34;,                            action = &#34;refresh&#34; },&#xA;  { key = &#34;a&#34;,                            action = &#34;create&#34; },&#xA;  { key = &#34;d&#34;,                            action = &#34;remove&#34; },&#xA;  { key = &#34;D&#34;,                            action = &#34;trash&#34; },&#xA;  { key = &#34;r&#34;,                            action = &#34;rename&#34; },&#xA;  { key = &#34;&amp;lt;C-r&amp;gt;&#34;,                        action = &#34;full_rename&#34; },&#xA;  { key = &#34;x&#34;,                            action = &#34;cut&#34; },&#xA;  { key = &#34;c&#34;,                            action = &#34;copy&#34; },&#xA;  { key = &#34;p&#34;,                            action = &#34;paste&#34; },&#xA;  { key = &#34;y&#34;,                            action = &#34;copy_name&#34; },&#xA;  { key = &#34;Y&#34;,                            action = &#34;copy_path&#34; },&#xA;  { key = &#34;gy&#34;,                           action = &#34;copy_absolute_path&#34; },&#xA;  { key = &#34;[c&#34;,                           action = &#34;prev_git_item&#34; },&#xA;  { key = &#34;]c&#34;,                           action = &#34;next_git_item&#34; },&#xA;  { key = &#34;-&#34;,                            action = &#34;dir_up&#34; },&#xA;  { key = &#34;s&#34;,                            action = &#34;system_open&#34; },&#xA;  { key = &#34;f&#34;,                            action = &#34;live_filter&#34; },&#xA;  { key = &#34;F&#34;,                            action = &#34;clear_live_filter&#34; },&#xA;  { key = &#34;q&#34;,                            action = &#34;close&#34; },&#xA;  { key = &#34;g?&#34;,                           action = &#34;toggle_help&#34; },&#xA;  { key = &#34;W&#34;,                            action = &#34;collapse_all&#34; },&#xA;  { key = &#34;E&#34;,                            action = &#34;expand_all&#34; },&#xA;  { key = &#34;S&#34;,                            action = &#34;search_node&#34; },&#xA;  { key = &#34;&amp;lt;C-k&amp;gt;&#34;,                        action = &#34;toggle_file_info&#34; },&#xA;  { key = &#34;.&#34;,                            action = &#34;run_file_command&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can toggle the help UI by pressing &lt;code&gt;g?&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tips &amp;amp; reminders&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You can add a directory by adding a &lt;code&gt;/&lt;/code&gt; at the end of the paths, entering multiple directories &lt;code&gt;BASE/foo/bar/baz&lt;/code&gt; will add directory foo, then bar and add a file baz to it.&lt;/li&gt; &#xA; &lt;li&gt;You can update window options for the tree by setting &lt;code&gt;require&#34;nvim-tree.view&#34;.View.winopts.MY_OPTION = MY_OPTION_VALUE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle&lt;/code&gt; has a second parameter which allows to toggle without focusing the explorer (&lt;code&gt;require&#34;nvim-tree&#34;.toggle(false, true)&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;You can allow nvim-tree to behave like vinegar (see &lt;code&gt;:help nvim-tree-vinegar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;code&gt;:set nosplitright&lt;/code&gt;, the files will open on the left side of the tree, placing the tree window in the right side of the file you opened.&lt;/li&gt; &#xA; &lt;li&gt;You can automatically close the tab/vim when nvim-tree is the last window in the tab: &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/discussions/1115&#34;&gt;https://github.com/kyazdani42/nvim-tree.lua/discussions/1115&lt;/a&gt;. WARNING: other plugins or automation may interfere with this.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Diagnostic Logging&lt;/h2&gt; &#xA;&lt;p&gt;You may enable diagnostic logging to &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt;. See &lt;code&gt;:help nvim-tree.log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are experiencing performance issues with nvim-tree.lua, you can enable profiling in the logs. It is advisable to enable git logging at the same time, as that can be a source of performance problems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;log = {&#xA;  enable = true,&#xA;  truncate = true,&#xA;  types = {&#xA;    git = true,&#xA;    profile = true,&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please attach &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt; if you raise an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Performance Tips:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using fish as an editor shell (which might be fixed in the future), try set &lt;code&gt;shell=/bin/bash&lt;/code&gt; in your vim config. Alternatively, you can &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/549#issuecomment-1127394585&#34;&gt;prevent fish from loading interactive configuration in a non-interactive shell&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try manually running the git command (see the logs) in your shell e.g. &lt;code&gt;git --no-optional-locks status --porcelain=v1 --ignored=matching -u&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Huge git repositories may timeout after the default &lt;code&gt;git.timeout&lt;/code&gt; of 400ms. Try increasing that in your setup if you see &lt;code&gt;[git] job timed out&lt;/code&gt; in the logs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try temporarily disabling git integration by setting &lt;code&gt;git.enable = false&lt;/code&gt; in your setup.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;kyazdani42 tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;akin909 tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot3.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;stsewd tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot4.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;reyhankaplan tree&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nvim-pack/nvim-spectre</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/nvim-pack/nvim-spectre</id>
    <link href="https://github.com/nvim-pack/nvim-spectre" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find the enemy and replace them with dark power.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-spectre&lt;/h1&gt; &#xA;&lt;p&gt;A search panel for neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spectre&lt;/strong&gt; &lt;strong&gt;find the enemy and replace them with dark power.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/windwp/nvim-spectre/wiki/assets/demospectre.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Spectre?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use regex in search&lt;/li&gt; &#xA; &lt;li&gt;It can filter search by path glob (filetype)&lt;/li&gt; &#xA; &lt;li&gt;It only search when you leave &lt;strong&gt;Insert Mode&lt;/strong&gt;. You don&#39;t need a typeahead function . It always search when you type and it is very useless on search with regex&lt;/li&gt; &#xA; &lt;li&gt;Use 1 buffer and you can edit or move&lt;/li&gt; &#xA; &lt;li&gt;A tool to replace text on project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;windwp/nvim-spectre&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need install rg and sed&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;BurntSushi/ripgrep&lt;/a&gt; (finder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;devicons&lt;/a&gt; (icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/sed/&#34;&gt;sed&lt;/a&gt; (replace tool)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MacOs&lt;/h3&gt; &#xA;&lt;p&gt;you need run &lt;code&gt;brew install gnu-sed&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;leader&amp;gt;S &amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).open()&amp;lt;CR&amp;gt;&#xA;&#xA;&#34;search current word&#xA;nnoremap &amp;lt;leader&amp;gt;sw &amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).open_visual({select_word=true})&amp;lt;CR&amp;gt;&#xA;vnoremap &amp;lt;leader&amp;gt;s &amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).open_visual()&amp;lt;CR&amp;gt;&#xA;&#34;  search in current file&#xA;nnoremap &amp;lt;leader&amp;gt;sp viw:lua require(&#39;spectre&#39;).open_file_search()&amp;lt;cr&amp;gt;&#xA;&#34; run command :Spectre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Commit your file before you replace text. It does not support undo&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t use your crazy vim skill to edit result text or UI.&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;dd&lt;/code&gt; to toggle result item&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Regex Issue&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;default regex use vim regex &lt;strong&gt;magic mode&lt;/strong&gt; &lt;code&gt;\v&lt;/code&gt; and &lt;strong&gt;no-ignore-case&lt;/strong&gt; .&lt;/li&gt; &#xA; &lt;li&gt;It has different regex of search command &lt;code&gt;rg&lt;/code&gt; and replace command &lt;code&gt;sed&lt;/code&gt; so careful if you want to replace text.&lt;/li&gt; &#xA; &lt;li&gt;It has a different of highlight result because I use vim regex to highlight text so careful but you can try to replace.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Replace&lt;/h2&gt; &#xA;&lt;p&gt;you can replace with group by &lt;code&gt;\0-9&lt;/code&gt; like vim and sed if you run command replace and don&#39;t see the change. you need to reload file with &lt;code&gt;:e&lt;/code&gt; because &lt;code&gt;sed&lt;/code&gt; is replace outside vim.&lt;/p&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;spectre&#39;).setup()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change any setting if you don&#39;t like it. &lt;strong&gt;Don&#39;t copy all&lt;/strong&gt; . It can be change when plugin update so better use a default setting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;spectre&#39;).setup({&#xA;&#xA;  color_devicons = true,&#xA;  open_cmd = &#39;vnew&#39;,&#xA;  live_update = false, -- auto excute search again when you write any file in vim&#xA;  line_sep_start = &#39;┌-----------------------------------------&#39;,&#xA;  result_padding = &#39;¦  &#39;,&#xA;  line_sep       = &#39;└-----------------------------------------&#39;,&#xA;  highlight = {&#xA;      ui = &#34;String&#34;,&#xA;      search = &#34;DiffChange&#34;,&#xA;      replace = &#34;DiffDelete&#34;&#xA;  },&#xA;  mapping={&#xA;    [&#39;toggle_line&#39;] = {&#xA;        map = &#34;dd&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).toggle_line()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;toggle current item&#34;&#xA;    },&#xA;    [&#39;enter_file&#39;] = {&#xA;        map = &#34;&amp;lt;cr&amp;gt;&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).select_entry()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;goto current file&#34;&#xA;    },&#xA;    [&#39;send_to_qf&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;q&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).send_to_qf()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;send all item to quickfix&#34;&#xA;    },&#xA;    [&#39;replace_cmd&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;c&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).replace_cmd()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;input replace vim command&#34;&#xA;    },&#xA;    [&#39;show_option_menu&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;o&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).show_options()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;show option&#34;&#xA;    },&#xA;    [&#39;run_replace&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;R&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).run_replace()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;replace all&#34;&#xA;    },&#xA;    [&#39;change_view_mode&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;v&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_view()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;change result view mode&#34;&#xA;    },&#xA;    [&#39;toggle_live_update&#39;]={&#xA;      map = &#34;tu&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).toggle_live_update()&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;update change when vim write file.&#34;&#xA;    },&#xA;    [&#39;toggle_ignore_case&#39;] = {&#xA;      map = &#34;ti&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_options(&#39;ignore-case&#39;)&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;toggle ignore case&#34;&#xA;    },&#xA;    [&#39;toggle_ignore_hidden&#39;] = {&#xA;      map = &#34;th&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_options(&#39;hidden&#39;)&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;toggle search hidden&#34;&#xA;    },&#xA;    -- you can put your mapping here it only use normal mode&#xA;  },&#xA;  find_engine = {&#xA;    -- rg is map with finder_cmd&#xA;    [&#39;rg&#39;] = {&#xA;      cmd = &#34;rg&#34;,&#xA;      -- default args&#xA;      args = {&#xA;        &#39;--color=never&#39;,&#xA;        &#39;--no-heading&#39;,&#xA;        &#39;--with-filename&#39;,&#xA;        &#39;--line-number&#39;,&#xA;        &#39;--column&#39;,&#xA;      } ,&#xA;      options = {&#xA;        [&#39;ignore-case&#39;] = {&#xA;          value= &#34;--ignore-case&#34;,&#xA;          icon=&#34;[I]&#34;,&#xA;          desc=&#34;ignore case&#34;&#xA;        },&#xA;        [&#39;hidden&#39;] = {&#xA;          value=&#34;--hidden&#34;,&#xA;          desc=&#34;hidden file&#34;,&#xA;          icon=&#34;[H]&#34;&#xA;        },&#xA;        -- you can put any rg search option you want here it can toggle with&#xA;        -- show_option function&#xA;      }&#xA;    },&#xA;    [&#39;ag&#39;] = {&#xA;      cmd = &#34;ag&#34;,&#xA;      args = {&#xA;        &#39;--vimgrep&#39;,&#xA;        &#39;-s&#39;&#xA;      } ,&#xA;      options = {&#xA;        [&#39;ignore-case&#39;] = {&#xA;          value= &#34;-i&#34;,&#xA;          icon=&#34;[I]&#34;,&#xA;          desc=&#34;ignore case&#34;&#xA;        },&#xA;        [&#39;hidden&#39;] = {&#xA;          value=&#34;--hidden&#34;,&#xA;          desc=&#34;hidden file&#34;,&#xA;          icon=&#34;[H]&#34;&#xA;        },&#xA;      },&#xA;    },&#xA;  },&#xA;  replace_engine={&#xA;      [&#39;sed&#39;]={&#xA;          cmd = &#34;sed&#34;,&#xA;          args = nil&#xA;      },&#xA;      options = {&#xA;        [&#39;ignore-case&#39;] = {&#xA;          value= &#34;--ignore-case&#34;,&#xA;          icon=&#34;[I]&#34;,&#xA;          desc=&#34;ignore case&#34;&#xA;        },&#xA;      }&#xA;  },&#xA;  default = {&#xA;      find = {&#xA;          --pick one of item in find_engine&#xA;          cmd = &#34;rg&#34;,&#xA;          options = {&#34;ignore-case&#34;}&#xA;      },&#xA;      replace={&#xA;          --pick one of item in replace_engine&#xA;          cmd = &#34;sed&#34;&#xA;      }&#xA;  },&#xA;  replace_vim_cmd = &#34;cdo&#34;,&#xA;  is_open_target_win = true, --open file on opener window&#xA;  is_insert_mode = false  -- start open panel on is_insert_mode&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom function&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- if you want to get item from spectre panel.&#xA;-- you can use some following function to get data from spectre.&#xA;require(&#39;spectre.actions&#39;).get_current_entry()&#xA;require(&#39;spectre.actions&#39;).get_all_entries()&#xA;require(&#39;spectre.actions&#39;).get_state()&#xA;&#xA;-- write your custom open function&#xA;require(&#39;spectre&#39;).open({&#xA;  is_insert_mode = true,&#xA;  cwd = &#34;~/.config/nvim&#34;,&#xA;  search_text=&#34;test&#34;,&#xA;  replace_text=&#34;test&#34;,&#xA;  path=&#34;lua/**/*.lua&#34;&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add custom statusline &lt;a href=&#34;https://github.com/windwp/windline.nvim&#34;&gt;windline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#39;windline&#39;).add_status(&#xA;        require(&#39;spectre.state_utils&#39;).status_line()&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;what is Spectre?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I want create a &lt;code&gt;Search Panel&lt;/code&gt; but this name is not cool. I get the name of a hero on a game. Spectre has a skill to find enemy on global map so I use it:)&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>folke/trouble.nvim</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/folke/trouble.nvim</id>
    <link href="https://github.com/folke/trouble.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚦 A pretty diagnostics, references, telescope results, quickfix and location list to help you solve all the trouble your code is causing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🚦 Trouble&lt;/h1&gt; &#xA;&lt;p&gt;A pretty list for showing diagnostics, references, telescope results, quickfix and location lists to help you solve all the trouble your code is causing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/folke/trouble.nvim/main/media/shot.png&#34; alt=&#34;LSP Trouble Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pretty list of: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Diagnostics&lt;/li&gt; &#xA;   &lt;li&gt;LSP references&lt;/li&gt; &#xA;   &lt;li&gt;LSP implementations&lt;/li&gt; &#xA;   &lt;li&gt;LSP definitions&lt;/li&gt; &#xA;   &lt;li&gt;LSP type definitions&lt;/li&gt; &#xA;   &lt;li&gt;quickfix list&lt;/li&gt; &#xA;   &lt;li&gt;location list&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt; search results&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;automatically updates on new diagnostics&lt;/li&gt; &#xA; &lt;li&gt;toggle &lt;strong&gt;diagnostics&lt;/strong&gt; mode between &lt;strong&gt;workspace&lt;/strong&gt; or &lt;strong&gt;document&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;interactive preview&lt;/strong&gt; in your last accessed window&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;cancel&lt;/em&gt; preview or &lt;em&gt;jump&lt;/em&gt; to the location&lt;/li&gt; &#xA; &lt;li&gt;configurable actions, signs, highlights,...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA; &lt;li&gt;Properly configured Neovim LSP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; is optional to enable file icons&lt;/li&gt; &#xA; &lt;li&gt;a theme with properly configured highlight groups for Neovim Diagnostics&lt;/li&gt; &#xA; &lt;li&gt;or install 🌈 &lt;a href=&#34;https://github.com/folke/lsp-colors.nvim&#34;&gt;lsp-colors&lt;/a&gt; to automatically create the missing highlight groups&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;patched font&lt;/a&gt; for the default severity and fold icons&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;Plug &#39;kyazdani42/nvim-web-devicons&#39;&#xA;Plug &#39;folke/trouble.nvim&#39;&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;  require(&#34;trouble&#34;).setup {&#xA;    -- your configuration comes here&#xA;    -- or leave it empty to use the default settings&#xA;    -- refer to the configuration section below&#xA;  }&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;use {&#xA;  &#34;folke/trouble.nvim&#34;,&#xA;  requires = &#34;kyazdani42/nvim-web-devicons&#34;,&#xA;  config = function()&#xA;    require(&#34;trouble&#34;).setup {&#xA;      -- your configuration comes here&#xA;      -- or leave it empty to use the default settings&#xA;      -- refer to the configuration section below&#xA;    }&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Trouble comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    position = &#34;bottom&#34;, -- position of the list can be: bottom, top, left, right&#xA;    height = 10, -- height of the trouble list when position is top or bottom&#xA;    width = 50, -- width of the list when position is left or right&#xA;    icons = true, -- use devicons for filenames&#xA;    mode = &#34;workspace_diagnostics&#34;, -- &#34;workspace_diagnostics&#34;, &#34;document_diagnostics&#34;, &#34;quickfix&#34;, &#34;lsp_references&#34;, &#34;loclist&#34;&#xA;    fold_open = &#34;&#34;, -- icon used for open folds&#xA;    fold_closed = &#34;&#34;, -- icon used for closed folds&#xA;    group = true, -- group results by file&#xA;    padding = true, -- add an extra new line on top of the list&#xA;    action_keys = { -- key mappings for actions in the trouble list&#xA;        -- map to {} to remove a mapping, for example:&#xA;        -- close = {},&#xA;        close = &#34;q&#34;, -- close the list&#xA;        cancel = &#34;&amp;lt;esc&amp;gt;&#34;, -- cancel the preview and get back to your last window / buffer / cursor&#xA;        refresh = &#34;r&#34;, -- manually refresh&#xA;        jump = {&#34;&amp;lt;cr&amp;gt;&#34;, &#34;&amp;lt;tab&amp;gt;&#34;}, -- jump to the diagnostic or open / close folds&#xA;        open_split = { &#34;&amp;lt;c-x&amp;gt;&#34; }, -- open buffer in new split&#xA;        open_vsplit = { &#34;&amp;lt;c-v&amp;gt;&#34; }, -- open buffer in new vsplit&#xA;        open_tab = { &#34;&amp;lt;c-t&amp;gt;&#34; }, -- open buffer in new tab&#xA;        jump_close = {&#34;o&#34;}, -- jump to the diagnostic and close the list&#xA;        toggle_mode = &#34;m&#34;, -- toggle between &#34;workspace&#34; and &#34;document&#34; diagnostics mode&#xA;        toggle_preview = &#34;P&#34;, -- toggle auto_preview&#xA;        hover = &#34;K&#34;, -- opens a small popup with the full multiline message&#xA;        preview = &#34;p&#34;, -- preview the diagnostic location&#xA;        close_folds = {&#34;zM&#34;, &#34;zm&#34;}, -- close all folds&#xA;        open_folds = {&#34;zR&#34;, &#34;zr&#34;}, -- open all folds&#xA;        toggle_fold = {&#34;zA&#34;, &#34;za&#34;}, -- toggle fold of current file&#xA;        previous = &#34;k&#34;, -- preview item&#xA;        next = &#34;j&#34; -- next item&#xA;    },&#xA;    indent_lines = true, -- add an indent guide below the fold icons&#xA;    auto_open = false, -- automatically open the list when you have diagnostics&#xA;    auto_close = false, -- automatically close the list when you have no diagnostics&#xA;    auto_preview = true, -- automatically preview the location of the diagnostic. &amp;lt;esc&amp;gt; to close preview and go back to last window&#xA;    auto_fold = false, -- automatically fold a file trouble list at creation&#xA;    auto_jump = {&#34;lsp_definitions&#34;}, -- for the given modes, automatically jump if there is only a single result&#xA;    signs = {&#xA;        -- icons / text used for a diagnostic&#xA;        error = &#34;&#34;,&#xA;        warning = &#34;&#34;,&#xA;        hint = &#34;&#34;,&#xA;        information = &#34;&#34;,&#xA;        other = &#34;﫠&#34;&#xA;    },&#xA;    use_diagnostic_signs = false -- enabling this will use the signs defined in your lsp client&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡 if you don&#39;t want to use icons or a patched font, you can use the settings below&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- settings without a patched font or icons&#xA;{&#xA;    icons = false,&#xA;    fold_open = &#34;v&#34;, -- icon used for open folds&#xA;    fold_closed = &#34;&amp;gt;&#34;, -- icon used for closed folds&#xA;    indent_lines = false, -- add an indent guide below the fold icons&#xA;    signs = {&#xA;        -- icons / text used for a diagnostic&#xA;        error = &#34;error&#34;,&#xA;        warning = &#34;warn&#34;,&#xA;        hint = &#34;hint&#34;,&#xA;        information = &#34;info&#34;&#xA;    },&#xA;    use_diagnostic_signs = false -- enabling this will use the signs defined in your lsp client&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;Trouble comes with the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Trouble [mode]&lt;/code&gt;: open the list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TroubleClose [mode]&lt;/code&gt;: close the list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TroubleToggle [mode]&lt;/code&gt;: toggle the list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TroubleRefresh&lt;/code&gt;: manually refresh the active list&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;document_diagnostics:&lt;/strong&gt; document diagnostics from the builtin LSP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;workspace_diagnostics:&lt;/strong&gt; workspace diagnostics from the builtin LSP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lsp_references:&lt;/strong&gt; references of the word under the cursor from the builtin LSP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lsp_definitions:&lt;/strong&gt; definitions of the word under the cursor from the builtin LSP client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;lsp_type_definitions:&lt;/strong&gt; tupe definitions of the word under the cursor from the builtin LSP client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;quickfix:&lt;/strong&gt; &lt;a href=&#34;https://neovim.io/doc/user/quickfix.html&#34;&gt;quickfix&lt;/a&gt; items&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;loclist:&lt;/strong&gt; items from the window&#39;s &lt;a href=&#34;https://neovim.io/doc/user/quickfix.html&#34;&gt;location list&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example keybindings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;nnoremap &amp;lt;leader&amp;gt;xx &amp;lt;cmd&amp;gt;TroubleToggle&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;xw &amp;lt;cmd&amp;gt;TroubleToggle workspace_diagnostics&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;xd &amp;lt;cmd&amp;gt;TroubleToggle document_diagnostics&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;xq &amp;lt;cmd&amp;gt;TroubleToggle quickfix&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;xl &amp;lt;cmd&amp;gt;TroubleToggle loclist&amp;lt;cr&amp;gt;&#xA;nnoremap gR &amp;lt;cmd&amp;gt;TroubleToggle lsp_references&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xx&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xw&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble workspace_diagnostics&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xd&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble document_diagnostics&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xl&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble loclist&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xq&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble quickfix&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;gR&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble lsp_references&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;You can use the following functions in your keybindings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- jump to the next item, skipping the groups&#xA;require(&#34;trouble&#34;).next({skip_groups = true, jump = true});&#xA;&#xA;-- jump to the previous item, skipping the groups&#xA;require(&#34;trouble&#34;).previous({skip_groups = true, jump = true});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Telescope&lt;/h3&gt; &#xA;&lt;p&gt;You can easily open any search results in &lt;strong&gt;Trouble&lt;/strong&gt;, by defining a custom action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local actions = require(&#34;telescope.actions&#34;)&#xA;local trouble = require(&#34;trouble.providers.telescope&#34;)&#xA;&#xA;local telescope = require(&#34;telescope&#34;)&#xA;&#xA;telescope.setup {&#xA;  defaults = {&#xA;    mappings = {&#xA;      i = { [&#34;&amp;lt;c-t&amp;gt;&#34;] = trouble.open_with_trouble },&#xA;      n = { [&#34;&amp;lt;c-t&amp;gt;&#34;] = trouble.open_with_trouble },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you open telescope, you can now hit &lt;code&gt;&amp;lt;c-t&amp;gt;&lt;/code&gt; to open the results in &lt;strong&gt;Trouble&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎨 Colors&lt;/h2&gt; &#xA;&lt;p&gt;The table below shows all the highlight groups defined for Trouble.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleCount&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleError&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleNormal&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleTextInformation&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSignWarning&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleLocation&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleWarning&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroublePreview&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleTextError&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSignInformation&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleIndent&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSource&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSignHint&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSignOther&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleFoldIcon&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleTextWarning&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleCode&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleInformation&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSignError&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleFile&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleHint&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleTextHint&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleText&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>AstroNvim/AstroNvim</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/AstroNvim/AstroNvim</id>
    <link href="https://github.com/AstroNvim/AstroNvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AstroNvim is an aesthetic and feature-rich neovim config that is extensible and easy to use with a great set of plugins&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; id=&#34;madewithlua&#34;&gt; &#xA; &lt;img src=&#34;https://astronvim.github.io/img/logo/astronvim.svg?sanitize=true&#34; width=&#34;110&#34; , height=&#34;100&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;AstroNvim&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/AstroNvim/AstroNvim/pulse&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/AstroNvim/AstroNvim?color=%4dc71f&amp;amp;label=Last%20Commit&amp;amp;logo=github&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/AstroNvim/AstroNvim/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/AstroNvim/AstroNvim?label=License&amp;amp;logo=GNU&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://neovim.io/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Neovim-0.7+-blueviolet.svg?style=flat-square&amp;amp;logo=Neovim&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/UcZutyeaFW&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/discord-Join-7289da?color=%235865F2%20&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=%23ffffff&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; AstroNvim is an aesthetic and feature-rich neovim config that is extensible and easy to use with a great set of plugins &lt;/p&gt; &#xA;&lt;h2&gt;🌟 Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/dashboard.png&#34; alt=&#34;Preview1&#34;&gt; &lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/overview.png&#34; alt=&#34;Preview2&#34;&gt; &lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/lsp_hover.png&#34; alt=&#34;Preview33&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File explorer with &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;Neo-tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Autocompletion with &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;Cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git integration with &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Gitsigns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Statusline with &lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;Feline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terminal with &lt;a href=&#34;https://github.com/akinsho/toggleterm.nvim&#34;&gt;Toggleterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fuzzy finding with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting with &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Formatting and linting with &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;Null-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Language Server Protocol with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;Native LSP&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Fonts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.7.0&#34;&gt;Neovim 0.7+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terminal with true color support (for the default theme, otherwise it is dependent on the theme you are using)&lt;/li&gt; &#xA; &lt;li&gt;Optional Requirements: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; - live grep telescope search (&lt;code&gt;&amp;lt;leader&amp;gt;fw&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;lazygit&lt;/a&gt; - git ui toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tl&lt;/code&gt; or &lt;code&gt;&amp;lt;leader&amp;gt;gg&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dev.yorhel.nl/ncdu&#34;&gt;NCDU&lt;/a&gt; - disk usage toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tu&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://htop.dev/&#34;&gt;Htop&lt;/a&gt; - process viewer toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tt&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; - python repl toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tp&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node&lt;/a&gt; - node repl toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tn&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note when using default theme: For MacOS, the default terminal does not have true color support. You wil need to use &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; or another &lt;a href=&#34;https://gist.github.com/XVilka/8346728#terminal-emulators&#34;&gt;terminal emulator&lt;/a&gt; that has true color support.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note if you are still on Neovim v0.6: You can still install the previous version of AstroNvim that supported. After cloning the repository run &lt;code&gt;git checkout nvim-0.6&lt;/code&gt; to check out this version. This will no longer be receiving updates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🛠️ Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Make a backup of your current nvim folder&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;mv ~/.config/nvim ~/.config/nvimbackup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Clone the repository&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/AstroNvim/AstroNvim ~/.config/nvim&#xA;nvim +PackerSync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📦 Basic Setup&lt;/h2&gt; &#xA;&lt;h4&gt;Install LSP&lt;/h4&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;:LspInstall&lt;/code&gt; followed by the name of the server you want to install&lt;br&gt; Example: &lt;code&gt;:LspInstall pyright&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Install language parser&lt;/h4&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;:TSInstall&lt;/code&gt; followed by the name of the language you want to install&lt;br&gt; Example: &lt;code&gt;:TSInstall python&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Manage plugins&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;:PackerClean&lt;/code&gt; to remove any disabled or unused plugins&lt;br&gt; Run &lt;code&gt;:PackerSync&lt;/code&gt; to update and clean plugins&lt;br&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Update AstroNvim&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;:AstroUpdate&lt;/code&gt; to get the latest updates from the repository&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🗒️ Links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://astronvim.github.io/&#34;&gt;AstroNvim Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/usage/walkthrough&#34;&gt;Basic Usage&lt;/a&gt; is given for basic usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/usage/mappings&#34;&gt;Default Mappings&lt;/a&gt; more about the default key bindings&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/configuration/plugin_defaults&#34;&gt;Default Plugin Configuration&lt;/a&gt; more about the provided plugin defaults&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/configuration/config_options&#34;&gt;Advanced Configuration&lt;/a&gt; more about advanced configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JQLZ7NJRTEo&amp;amp;t=4s&amp;amp;ab_channel=JohnCodes&#34;&gt;Watch&lt;/a&gt; a review video to know about the out of the box experience&lt;/p&gt; &#xA;&lt;h2&gt;⭐ Credits&lt;/h2&gt; &#xA;&lt;p&gt;Sincere appreciation to the following repositories, plugin authors and the entire neovim community out there that made the development of AstroNvim possible.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/acknowledgements#plugins-used-in-astronvim&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NvChad/NvChad&#34;&gt;NvChad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LunarVim&#34;&gt;LunarVim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CosmicNvim/CosmicNvim&#34;&gt;CosmicVim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34; id=&#34;madewithlua&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://lua.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>awesomeWM/awesome</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/awesomeWM/awesome</id>
    <link href="https://github.com/awesomeWM/awesome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;awesome window manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Readme&lt;/h1&gt; &#xA;&lt;h2&gt;About Awesome&lt;/h2&gt; &#xA;&lt;p&gt;Awesome is a highly configurable, next generation framework window manager for X.&lt;/p&gt; &#xA;&lt;h2&gt;Building and installation&lt;/h2&gt; &#xA;&lt;p&gt;After extracting the dist tarball or cloning the repository, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;create a build directory at &lt;code&gt;./build&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;cmake&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;build Awesome and&lt;/li&gt; &#xA; &lt;li&gt;install it to the default prefix path &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Alternatively to the above, you can generate a &lt;code&gt;.deb&lt;/code&gt; or &lt;code&gt;.rpm&lt;/code&gt; package, for easy installation management:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make package&#xA;&#xA;sudo dpkg -i awesome-x.y.z.deb&#xA;# or&#xA;sudo rpm -Uvh awesome-x.y.z.rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced options and testing&lt;/h3&gt; &#xA;&lt;p&gt;A full list of dependencies, more advanced build options, as well as instructions on how to use the test suite can be found &lt;a href=&#34;https://awesomewm.org/apidoc/documentation/10-building-and-testing.md.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing current git master as a package receipts&lt;/h3&gt; &#xA;&lt;h4&gt;Arch Linux AUR&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S --needed base-devel git&#xA;git clone https://aur.archlinux.org/awesome-git.git&#xA;cd awesome-git&#xA;makepkg -fsri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debian-based&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt build-dep awesome&#xA;git clone https://github.com/awesomewm/awesome&#xA;cd awesome&#xA;make package&#xA;sudo apt install *.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Awesome&lt;/h2&gt; &#xA;&lt;p&gt;You can directly select Awesome from your display manager. If not, you can add the following line to your &lt;code&gt;.xinitrc&lt;/code&gt; to start Awesome using &lt;code&gt;startx&lt;/code&gt; or to &lt;code&gt;.xsession&lt;/code&gt; to start Awesome using your display manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;exec awesome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to connect Awesome to a specific display, make sure that the &lt;code&gt;DISPLAY&lt;/code&gt; environment variable is set correctly, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DISPLAY=foo.bar:1 exec awesome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(This will start Awesome on display &lt;code&gt;:1&lt;/code&gt; of the host foo.bar.)&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration of Awesome is done by creating a &lt;code&gt;$XDG_CONFIG_HOME/awesome/rc.lua&lt;/code&gt; file, typically &lt;code&gt;~/.config/awesome/rc.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example configuration named &lt;code&gt;awesomerc.lua&lt;/code&gt; is provided in the source.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;On most systems any message printed by Awesome (including warnings and errors) is written to &lt;code&gt;~/.xsession-errors&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If Awesome does not start or the configuration file is not producing the desired results the user should examine this file to gain insight into the problem.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging tips&lt;/h3&gt; &#xA;&lt;p&gt;You can call &lt;code&gt;awesome&lt;/code&gt; with &lt;code&gt;gdb&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DISPLAY=:2 gdb awesome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in &lt;code&gt;gdb&lt;/code&gt; set any arguments and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(gdb) set args --replace&#xA;(gdb) run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Asking questions&lt;/h2&gt; &#xA;&lt;h4&gt;IRC&lt;/h4&gt; &#xA;&lt;p&gt;You can join us in the &lt;code&gt;#awesome&lt;/code&gt; channel on the &lt;a href=&#34;http://www.oftc.net/&#34;&gt;OFTC&lt;/a&gt; IRC network.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webchat.oftc.net/?channels=awesome&#34;&gt;IRC Webchat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Stack Overflow&lt;/h4&gt; &#xA;&lt;p&gt;You can ask questions on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/awesome-wm&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Reddit&lt;/h4&gt; &#xA;&lt;p&gt;We also have a &lt;a href=&#34;https://www.reddit.com/r/awesomewm/&#34;&gt;awesome subreddit&lt;/a&gt; where you can share your work and ask questions.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting issues&lt;/h2&gt; &#xA;&lt;p&gt;Please report any issues you may find on &lt;a href=&#34;https://github.com/awesomeWM/awesome/issues&#34;&gt;our bugtracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing code&lt;/h2&gt; &#xA;&lt;p&gt;You can submit pull requests on the &lt;a href=&#34;https://github.com/awesomeWM/awesome&#34;&gt;github repository&lt;/a&gt;. Please read the &lt;a href=&#34;https://github.com/awesomeWM/awesome/raw/master/docs/02-contributing.md&#34;&gt;contributing guide&lt;/a&gt; for any coding, documentation or patch guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/awesomeWM/awesome&#34;&gt;&lt;img src=&#34;https://travis-ci.com/awesomeWM/awesome.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Online documentation is available &lt;a href=&#34;https://awesomewm.org/apidoc/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is licensed under GNU General Public License v2 or later. You can read it online at (&lt;a href=&#34;http://www.gnu.org/licenses/gpl-2.0.html&#34;&gt;v2&lt;/a&gt; or &lt;a href=&#34;http://www.gnu.org/licenses/gpl.html&#34;&gt;v3&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>windwp/nvim-autopairs</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/windwp/nvim-autopairs</id>
    <link href="https://github.com/windwp/nvim-autopairs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;autopairs for neovim written by lua&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;nvim-autopairs&lt;/h2&gt; &#xA;&lt;p&gt;A super powerful autopair plugin for Neovim that supports multiple characters.&lt;/p&gt; &#xA;&lt;p&gt;Requires neovim 0.5+&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default values&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local disable_filetype = { &#34;TelescopePrompt&#34; }&#xA;local disable_in_macro = false  -- disable when recording or executing a macro&#xA;local disable_in_visualblock = false -- disable when insert after visual block mode&#xA;local ignored_next_char = [=[[%w%%%&#39;%[%&#34;%.]]=]&#xA;local enable_moveright = true&#xA;local enable_afterquote = true  -- add bracket pairs after quote&#xA;local enable_check_bracket_line = true  --- check bracket in same line&#xA;local enable_bracket_in_quote = true --&#xA;local check_ts = false&#xA;local map_cr = true&#xA;local map_bs = true  -- map the &amp;lt;BS&amp;gt; key&#xA;local map_c_h = false  -- Map the &amp;lt;C-h&amp;gt; key to delete a pair&#xA;local map_c_w = false -- map &amp;lt;c-w&amp;gt; to delete a pair if possible&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Override default values&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  disable_filetype = { &#34;TelescopePrompt&#34; , &#34;vim&#34; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mapping &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Before        Input         After&#xA;------------------------------------&#xA;{|}           &amp;lt;CR&amp;gt;          {&#xA;                                |&#xA;                            }&#xA;------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;nvim-cmp&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;h3&gt; You need to add mapping `CR` on nvim-cmp setup. Check readme.md on nvim-cmp repo. &lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- If you want insert `(` after select function or method item&#xA;local cmp_autopairs = require(&#39;nvim-autopairs.completion.cmp&#39;)&#xA;local cmp = require(&#39;cmp&#39;)&#xA;cmp.event:on( &#39;confirm_done&#39;, cmp_autopairs.on_confirm_done({  map_char = { tex = &#39;&#39; } }))&#xA;&#xA;&#xA;-- add a lisp filetype (wrap my-function), FYI: Hardcoded = { &#34;clojure&#34;, &#34;clojurescript&#34;, &#34;fennel&#34;, &#34;janet&#34; }&#xA;cmp_autopairs.lisp[#cmp_autopairs.lisp+1] = &#34;racket&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;coq_nvim&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local remap = vim.api.nvim_set_keymap&#xA;local npairs = require(&#39;nvim-autopairs&#39;)&#xA;&#xA;npairs.setup({ map_bs = false, map_cr = false })&#xA;&#xA;vim.g.coq_settings = { keymap = { recommended = false } }&#xA;&#xA;-- these mappings are coq recommended mappings unrelated to nvim-autopairs&#xA;remap(&#39;i&#39;, &#39;&amp;lt;esc&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-e&amp;gt;&amp;lt;esc&amp;gt;&#34; : &#34;&amp;lt;esc&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;c-c&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-e&amp;gt;&amp;lt;c-c&amp;gt;&#34; : &#34;&amp;lt;c-c&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;tab&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-n&amp;gt;&#34; : &#34;&amp;lt;tab&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;s-tab&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-p&amp;gt;&#34; : &#34;&amp;lt;bs&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;&#xA;-- skip it, if you use another global object&#xA;_G.MUtils= {}&#xA;&#xA;MUtils.CR = function()&#xA;  if vim.fn.pumvisible() ~= 0 then&#xA;    if vim.fn.complete_info({ &#39;selected&#39; }).selected ~= -1 then&#xA;      return npairs.esc(&#39;&amp;lt;c-y&amp;gt;&#39;)&#xA;    else&#xA;      return npairs.esc(&#39;&amp;lt;c-e&amp;gt;&#39;) .. npairs.autopairs_cr()&#xA;    end&#xA;  else&#xA;    return npairs.autopairs_cr()&#xA;  end&#xA;end&#xA;remap(&#39;i&#39;, &#39;&amp;lt;cr&amp;gt;&#39;, &#39;v:lua.MUtils.CR()&#39;, { expr = true, noremap = true })&#xA;&#xA;MUtils.BS = function()&#xA;  if vim.fn.pumvisible() ~= 0 and vim.fn.complete_info({ &#39;mode&#39; }).mode == &#39;eval&#39; then&#xA;    return npairs.esc(&#39;&amp;lt;c-e&amp;gt;&#39;) .. npairs.autopairs_bs()&#xA;  else&#xA;    return npairs.autopairs_bs()&#xA;  end&#xA;end&#xA;remap(&#39;i&#39;, &#39;&amp;lt;bs&amp;gt;&#39;, &#39;v:lua.MUtils.BS()&#39;, { expr = true, noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;without completion plugin&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- add option map_cr&#xA;npairs.setup({ map_cr = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Completion-plugin&#34;&gt;another completion plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have a problem with indent after you press &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; please check the settings of treesitter indent or install a plugin that has indent support for your filetype.&lt;/p&gt; &#xA;&lt;h3&gt;Rule&lt;/h3&gt; &#xA;&lt;p&gt;nvim-autopairs uses rules with conditions to check pairs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Rule = require(&#39;nvim-autopairs.rule&#39;)&#xA;local npairs = require(&#39;nvim-autopairs&#39;)&#xA;&#xA;npairs.add_rule(Rule(&#34;$$&#34;,&#34;$$&#34;,&#34;tex&#34;))&#xA;&#xA;-- you can use some built-in conditions&#xA;&#xA;local cond = require(&#39;nvim-autopairs.conds&#39;)&#xA;print(vim.inspect(cond))&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;$&#34;, &#34;$&#34;,{&#34;tex&#34;, &#34;latex&#34;})&#xA;    -- don&#39;t add a pair if the next character is %&#xA;    :with_pair(cond.not_after_regex(&#34;%%&#34;))&#xA;    -- don&#39;t add a pair if  the previous character is xxx&#xA;    :with_pair(cond.not_before_regex(&#34;xxx&#34;, 3))&#xA;    -- don&#39;t move right when repeat character&#xA;    :with_move(cond.none())&#xA;    -- don&#39;t delete if the next character is xx&#xA;    :with_del(cond.not_after_regex(&#34;xx&#34;))&#xA;    -- disable adding a newline when you press &amp;lt;cr&amp;gt;&#xA;    :with_cr(cond.none())&#xA;  },&#xA;  -- disable for .vim files, but it work for another filetypes&#xA;  Rule(&#34;a&#34;,&#34;a&#34;,&#34;-vim&#34;)&#xA;)&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;$$&#34;,&#34;$$&#34;,&#34;tex&#34;)&#xA;    :with_pair(function(opts)&#xA;        print(vim.inspect(opts))&#xA;        if opts.line==&#34;aa $$&#34; then&#xA;        -- don&#39;t add pair on that line&#xA;          return false&#xA;        end&#xA;    end)&#xA;   }&#xA;)&#xA;&#xA;-- you can use regex&#xA;-- press u1234 =&amp;gt; u1234number&#xA;npairs.add_rules({&#xA;    Rule(&#34;u%d%d%d%d$&#34;, &#34;number&#34;, &#34;lua&#34;)&#xA;      :use_regex(true)&#xA;})&#xA;&#xA;&#xA;&#xA;-- press x1234 =&amp;gt; x12341234&#xA;npairs.add_rules({&#xA;    Rule(&#34;x%d%d%d%d$&#34;, &#34;number&#34;, &#34;lua&#34;)&#xA;      :use_regex(true)&#xA;      :replace_endpair(function(opts)&#xA;          -- print(vim.inspect(opts))&#xA;          return opts.prev_char:sub(#opts.prev_char - 3,#opts.prev_char)&#xA;      end)&#xA;})&#xA;&#xA;&#xA;-- you can do anything with regex +special key&#xA;-- example press tab to uppercase text:&#xA;-- press b1234s&amp;lt;tab&amp;gt; =&amp;gt; B1234S1234S&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;b%d%d%d%d%w$&#34;, &#34;&#34;, &#34;vim&#34;)&#xA;    :use_regex(true,&#34;&amp;lt;tab&amp;gt;&#34;)&#xA;    :replace_endpair(function(opts)&#xA;          return&#xA;              opts.prev_char:sub(#opts.prev_char - 4,#opts.prev_char)&#xA;              ..&#34;&amp;lt;esc&amp;gt;viwU&#34;&#xA;    end)&#xA;})&#xA;&#xA;-- you can exclude filetypes&#xA;npairs.add_rule(&#xA;  Rule(&#34;$$&#34;,&#34;$$&#34;)&#xA;    :with_pair(cond.not_filetypes({&#34;lua&#34;}))&#xA;)&#xA;--- check ./lua/nvim-autopairs/rules/basic.lua&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Rules-API&#34;&gt;Rules API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Treesitter&lt;/h3&gt; &#xA;&lt;p&gt;You can use treesitter to check for a pair.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local npairs = require(&#34;nvim-autopairs&#34;)&#xA;local Rule = require(&#39;nvim-autopairs.rule&#39;)&#xA;&#xA;npairs.setup({&#xA;    check_ts = true,&#xA;    ts_config = {&#xA;        lua = {&#39;string&#39;},-- it will not add a pair on that treesitter node&#xA;        javascript = {&#39;template_string&#39;},&#xA;        java = false,-- don&#39;t check treesitter on java&#xA;    }&#xA;})&#xA;&#xA;local ts_conds = require(&#39;nvim-autopairs.ts-conds&#39;)&#xA;&#xA;&#xA;-- press % =&amp;gt; %% only while inside a comment or string&#xA;npairs.add_rules({&#xA;  Rule(&#34;%&#34;, &#34;%&#34;, &#34;lua&#34;)&#xA;    :with_pair(ts_conds.is_ts_node({&#39;string&#39;,&#39;comment&#39;})),&#xA;  Rule(&#34;$&#34;, &#34;$&#34;, &#34;lua&#34;)&#xA;    :with_pair(ts_conds.is_not_ts_node({&#39;function&#39;}))&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t add pairs if it already has a close pair in the same line&lt;/h3&gt; &#xA;&lt;p&gt;if &lt;strong&gt;next character&lt;/strong&gt; is a close pair and it doesn&#39;t have an open pair in same line, then it will not add a close pair&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input         After&#xA;------------------------------------&#xA;(  |))         (            (  (|))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  enable_check_bracket_line = false&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t add pairs if the next char is alphanumeric&lt;/h3&gt; &#xA;&lt;p&gt;You can customize how nvim-autopairs will behave if it encounters a specific character&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  ignored_next_char = &#34;[%w%.]&#34; -- will ignore alphanumeric and `.` symbol&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input         After&#xA;------------------------------------&#xA;|foobar        (            (|foobar&#xA;|.foobar       (            (|.foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugin Integration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  require(&#39;nvim-autopairs&#39;).disable()&#xA;  require(&#39;nvim-autopairs&#39;).enable()&#xA;  require(&#39;nvim-autopairs&#39;).remove_rule(&#39;(&#39;) -- remove rule (&#xA;  require(&#39;nvim-autopairs&#39;).clear_rules() -- clear all rules&#xA;  require(&#39;nvim-autopairs&#39;).get_rule(&#39;&#34;&#39;) -- get rule &#34; then modify it&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FastWrap&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input                    After&#xA;--------------------------------------------------&#xA;(|foobar      &amp;lt;M-e&amp;gt; then press $        (|foobar)&#xA;(|)(foobar)   &amp;lt;M-e&amp;gt; then press q       (|(foobar))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- put this to setup function and press &amp;lt;a-e&amp;gt; to use fast_wrap&#xA;npairs.setup({&#xA;    fast_wrap = {},&#xA;})&#xA;&#xA;-- change default fast_wrap&#xA;npairs.setup({&#xA;    fast_wrap = {&#xA;      map = &#39;&amp;lt;M-e&amp;gt;&#39;,&#xA;      chars = { &#39;{&#39;, &#39;[&#39;, &#39;(&#39;, &#39;&#34;&#39;, &#34;&#39;&#34; },&#xA;      pattern = [=[[%&#39;%&#34;%)%&amp;gt;%]%)%}%,]]=],&#xA;      end_key = &#39;$&#39;,&#xA;      keys = &#39;qwertyuiopzxcvbnmasdfghjkl&#39;,&#xA;      check_comma = true,&#xA;      highlight = &#39;Search&#39;,&#xA;      highlight_grey=&#39;Comment&#39;&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;autotag html and tsx&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-ts-autotag&#34;&gt;autotag&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Endwise&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Endwise&#34;&gt;endwise&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom rules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Custom-rules&#34;&gt;rules&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>catppuccin/nvim</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/catppuccin/nvim</id>
    <link href="https://github.com/catppuccin/nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍨 Soothing pastel theme for NeoVim&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/logos/exports/1544x1544_circle.png&#34; width=&#34;100&#34; alt=&#34;Logo&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&#34; height=&#34;30&#34; width=&#34;0px&#34;&gt; Catppuccin for NeoVim &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&#34; height=&#34;30&#34; width=&#34;0px&#34;&gt; &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/catppuccin/nvim/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/catppuccin/nvim?colorA=1e1e28&amp;amp;colorB=c9cbff&amp;amp;style=for-the-badge&amp;amp;logo=starship style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/catppuccin/nvim/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/catppuccin/nvim?colorA=1e1e28&amp;amp;colorB=f7be95&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/catppuccin/nvim/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/catppuccin/nvim?colorA=1e1e28&amp;amp;colorB=b1e1a6&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/nvim/main/assets/demo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;This port of Catppuccin is special because it was the first one and the one that originated the project itself. Given this, it&#39;s important to acknowledge that it all didn&#39;t come to be what it is now out of nowhere. So, if you are interested in knowing more about the initial stages of the theme, you can find it under the &lt;a href=&#34;https://github.com/catppuccin/nvim/tree/old-catppuccino&#34;&gt;&lt;code&gt;old-catppuccino&lt;/code&gt;&lt;/a&gt; branch.&lt;/p&gt; &#xA;&lt;h1&gt;🎁 Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handy CLI.&lt;/li&gt; &#xA; &lt;li&gt;Extensible for many use cases.&lt;/li&gt; &#xA; &lt;li&gt;Integrations with a bunch of plugins: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;Native LSP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;Feline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hoob3rt/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;Nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tami5/lspsaga.nvim&#34;&gt;LSP Saga&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Git signs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;Indent Blankline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;Trouble&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;WhichKey&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim&#34;&gt;BarBar&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;NvimTree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;Neo-tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;Git Gutter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lambdalisue/fern.vim&#34;&gt;Fern&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;Lightline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.markdownguide.org/&#34;&gt;Markdown&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggandor/lightspeed.nvim&#34;&gt;Lightspeed&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/p00f/nvim-ts-rainbow&#34;&gt;Nvim-ts-Rainbow&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;Sneak&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;Hop&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;Neogit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/renerocksai/telekasten.nvim&#34;&gt;Telekasten&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;Notify&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/symbols-outline.nvim&#34;&gt;Symbols-Outline&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can use your favorite plugin manager for this. Here are some examples with the most popular ones:&lt;/p&gt; &#xA;&lt;h4&gt;Vim-plug&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Plug &#39;catppuccin/nvim&#39;, {&#39;as&#39;: &#39;catppuccin&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Packer.nvim&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;&#x9;&#34;catppuccin/nvim&#34;,&#xA;&#x9;as = &#34;catppuccin&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Vundle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Plugin &#39;catppuccin/nvim&#39;, {&#39;name&#39;: &#39;catppuccin&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;There are already some sane defaults that you may like, however you can change them to match your taste. These are the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;transparent_background = false,&#xA;term_colors = false,&#xA;styles = {&#xA;&#x9;comments = &#34;italic&#34;,&#xA;&#x9;conditionals = &#34;italic&#34;,&#xA;&#x9;loops = &#34;NONE&#34;,&#xA;&#x9;functions = &#34;NONE&#34;,&#xA;&#x9;keywords = &#34;NONE&#34;,&#xA;&#x9;strings = &#34;NONE&#34;,&#xA;&#x9;variables = &#34;NONE&#34;,&#xA;&#x9;numbers = &#34;NONE&#34;,&#xA;&#x9;booleans = &#34;NONE&#34;,&#xA;&#x9;properties = &#34;NONE&#34;,&#xA;&#x9;types = &#34;NONE&#34;,&#xA;&#x9;operators = &#34;NONE&#34;,&#xA;},&#xA;integrations = {&#xA;&#x9;treesitter = true,&#xA;&#x9;native_lsp = {&#xA;&#x9;&#x9;enabled = true,&#xA;&#x9;&#x9;virtual_text = {&#xA;&#x9;&#x9;&#x9;errors = &#34;italic&#34;,&#xA;&#x9;&#x9;&#x9;hints = &#34;italic&#34;,&#xA;&#x9;&#x9;&#x9;warnings = &#34;italic&#34;,&#xA;&#x9;&#x9;&#x9;information = &#34;italic&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;underlines = {&#xA;&#x9;&#x9;&#x9;errors = &#34;underline&#34;,&#xA;&#x9;&#x9;&#x9;hints = &#34;underline&#34;,&#xA;&#x9;&#x9;&#x9;warnings = &#34;underline&#34;,&#xA;&#x9;&#x9;&#x9;information = &#34;underline&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;&#x9;lsp_trouble = false,&#xA;&#x9;cmp = true,&#xA;&#x9;lsp_saga = false,&#xA;&#x9;gitgutter = false,&#xA;&#x9;gitsigns = true,&#xA;&#x9;telescope = true,&#xA;&#x9;nvimtree = {&#xA;&#x9;&#x9;enabled = true,&#xA;&#x9;&#x9;show_root = false,&#xA;&#x9;&#x9;transparent_panel = false,&#xA;&#x9;},&#xA;&#x9;neotree = {&#xA;&#x9;&#x9;enabled = false,&#xA;&#x9;&#x9;show_root = false,&#xA;&#x9;&#x9;transparent_panel = false,&#xA;&#x9;},&#xA;&#x9;which_key = false,&#xA;&#x9;indent_blankline = {&#xA;&#x9;&#x9;enabled = true,&#xA;&#x9;&#x9;colored_indent_levels = false,&#xA;&#x9;},&#xA;&#x9;dashboard = true,&#xA;&#x9;neogit = false,&#xA;&#x9;vim_sneak = false,&#xA;&#x9;fern = false,&#xA;&#x9;barbar = false,&#xA;&#x9;bufferline = true,&#xA;&#x9;markdown = true,&#xA;&#x9;lightspeed = false,&#xA;&#x9;ts_rainbow = false,&#xA;&#x9;hop = false,&#xA;&#x9;notify = true,&#xA;&#x9;telekasten = true,&#xA;&#x9;symbols_outline = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The way you setup the settings on your configuration varies based on whether you are using vimL for this or Lua.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;For init.lua&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local catppuccin = require(&#34;catppuccin&#34;)&#xA;&#xA;-- configure it&#xA;catppuccin.setup(&amp;lt;settings&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;For init.vim&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;local catppuccin = require(&#34;catppuccin&#34;)&#xA;&#xA;-- configure it&#xA;catppuccin.setup(&amp;lt;settings&amp;gt;)&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;After setting things up, you can load catppuccin like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;let g:catppuccin_flavour = &#34;dusk&#34; &#34; latte, frappe, macchiato, mocha&#xA;colorscheme catppuccin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;vim.g.catppuccin_flavour = &#34;frappe&#34; -- latte, frappe, macchiato, mocha&#xA;vim.cmd[[colorscheme catppuccin]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember that if you want to switch your Catppuccin flavour &#34;on the fly&#34; you may use the &lt;code&gt;:Catppuccin &amp;lt;flavour&amp;gt;&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: the command has autocompletion enabled, so you can just press tab to cycle through the flavours&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Although settings already have self-explanatory names, here is where you can find info about each one of them and their classifications!&lt;/p&gt; &#xA;&lt;h4&gt;General&lt;/h4&gt; &#xA;&lt;p&gt;This settings are unrelated to any group and are independent.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;transparent_background&lt;/code&gt;: (Boolean) if true, disables setting the background color.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;term_colors&lt;/code&gt;: (Boolean) if true, sets terminal colors (e.g. &lt;code&gt;g:terminal_color_0&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Styles&lt;/h4&gt; &#xA;&lt;p&gt;Handles the style of general hi groups (see &lt;code&gt;:h highlight-args&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;comments&lt;/code&gt;: (String) changed the style of the comments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;functions&lt;/code&gt;: (String) changed the style of the functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: (String) changed the style of the keywords.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strings&lt;/code&gt;: (String) changed the style of the strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;variables&lt;/code&gt;: (String) changed the style of the variables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Integrations&lt;/h4&gt; &#xA;&lt;p&gt;These integrations allow catppuccin to set the theme of various plugins/stuff. To enable an integration you just need to set it to &lt;code&gt;true&lt;/code&gt;, however, there are some special integrations...&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to know which highlight groups are being affected by catppuccin, checkout this directory: &lt;a href=&#34;https://github.com/catppuccin/nvim/tree/main/lua/catppuccin/core/integrations&#34;&gt;&lt;code&gt;lua/catppuccin/core/integrations/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Special Integrations&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feline.nvim&lt;/strong&gt;: First make sure that the &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons/&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt; plugin is installed. Then update your Feline config to use the Catppuccin components:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;feline&#34;).setup({&#xA;&#x9;components = require(&#39;catppuccin.core.integrations.feline&#39;),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Indent-blankline.nvim&lt;/strong&gt;: setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration. &lt;code&gt;colored_indent_levels&lt;/code&gt; enables char highlights per indent level. Follow the instructions &lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim#with-custom-gindent_blankline_char_highlight_list&#34;&gt;here&lt;/a&gt; to set the latter up.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lightline:&lt;/strong&gt; use this to set it up (Note: &lt;code&gt;catppuccin&lt;/code&gt; is the only valid colorscheme name. It will pick the one set in your config):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;let g:lightline = {&#39;colorscheme&#39;: &#39;catppuccin&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lualine:&lt;/strong&gt; use this to set it up (Note: &lt;code&gt;catppuccin&lt;/code&gt; is the only valid theme name. It will pick the one set in your config):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    theme = &#34;catppuccin&#34;&#xA;&#x9;-- ... the rest of your lualine config&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native Nvim LSP:&lt;/strong&gt; setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration. In the inners tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NvimTree:&lt;/strong&gt; setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;integration = {&#xA;  nvimtree = {&#xA;    enabled = true,&#xA;    show_root = true, -- makes the root folder not transparent&#xA;&#x9;transparent_panel = false, -- make the panel transparent&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neo-tree:&lt;/strong&gt; setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;integration = {&#xA;  neotree = {&#xA;    enabled = true,&#xA;    show_root = true, -- makes the root folder not transparent&#xA;&#x9;transparent_panel = false, -- make the panel transparent&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extra&lt;/h3&gt; &#xA;&lt;h4&gt;API&lt;/h4&gt; &#xA;&lt;p&gt;The API allows you fetch data from Catppuccin. It can be required as a Lua module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cp_api = require(&#34;catppuccin.api.&amp;lt;module&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Modules&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;colors&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;cp_api.get_colors()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Returns a table where the key is the name of the color and the value is its hex value.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Overwriting highlight groups&lt;/h4&gt; &#xA;&lt;p&gt;Highlight groups can be overwritten like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;catppuccin.remap({ &amp;lt;hi_group&amp;gt; = { &amp;lt;fields&amp;gt; }, })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local colors = require&#39;catppuccin.api.colors&#39;.get_colors() -- fetch colors with API&#xA;catppuccin.remap({ Comment = { fg = colors.flamingo }, })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hooks&lt;/h4&gt; &#xA;&lt;p&gt;Use them to execute code at certain events. These are the ones available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;before_loading()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Before loading a colorscheme&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;after_loading()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;After loading a colorscheme&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;They can be used like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local catppuccin = require(&#34;catppuccin&#34;)&#xA;&#xA;catppuccin.before_loading = function ()&#xA;&#x9;print(&#34;I ran before loading Catppuccin!&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💝 Thanks to&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Pocco81&#34;&gt;Pocco81&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/dev/assets/footers/gray0_ctp_on_line.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Copyright © 2020-present &lt;a href=&#34;https://github.com/catppuccin&#34; target=&#34;_blank&#34;&gt;Catppuccin Org&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/catppuccin/catppuccin/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?style=for-the-badge&amp;amp;label=License&amp;amp;message=MIT&amp;amp;logoColor=d9e0ee&amp;amp;colorA=302d41&amp;amp;colorB=c9cbff&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NvChad/NvChad</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/NvChad/NvChad</id>
    <link href="https://github.com/NvChad/NvChad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An attempt to make neovim cli functional like an IDE while being very beautiful, blazing fast startuptime ~ 20ms to 70ms&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;NvChad&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://nvchad.github.io/&#34;&gt;Home&lt;/a&gt; &#xA; &lt;span&gt; • &lt;/span&gt; &#xA; &lt;a href=&#34;https://nvchad.github.io/getting-started/setup&#34;&gt;Install&lt;/a&gt; &#xA; &lt;span&gt; • &lt;/span&gt; &#xA; &lt;a href=&#34;https://nvchad.github.io/contribute&#34;&gt;Contribute&lt;/a&gt; &#xA; &lt;span&gt; • &lt;/span&gt; &#xA; &lt;a href=&#34;https://github.com/NvChad/NvChad#gift_heart-support&#34;&gt;Support&lt;/a&gt; &#xA; &lt;span&gt; • &lt;/span&gt; &#xA; &lt;a href=&#34;https://nvchad.github.io/Extras&#34;&gt;Extras&lt;/a&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/NvChad/NvChad/Super-Linter/main?style=flat-square&amp;amp;logo=github&amp;amp;label=Build&amp;amp;color=8DBBE9&#34; alt=&#34;Super Linter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NvChad/NvChad/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/NvChad/NvChad?style=flat-square&amp;amp;logo=GNU&amp;amp;label=License&amp;amp;color=df967f&#34; alt=&#34;License&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim-0.7.0-blueviolet.svg?style=flat-square&amp;amp;logo=Neovim&amp;amp;color=90E59A&amp;amp;logoColor=white&#34; alt=&#34;Neovim Minimum Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NvChad/NvChad/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/NvChad/NvChad.svg?style=flat-square&amp;amp;label=Issues&amp;amp;color=d77982&#34; alt=&#34;GitHub Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/gADmkJb9Fb&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/869557815780470834?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#nvchad:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Matrix-40aa8b.svg?style=flat-square&amp;amp;logo=Matrix&amp;amp;logoColor=white&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/DE_WM&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-blue.svg?style=flat-square&amp;amp;logo=Telegram&amp;amp;logoColor=white&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/dashboard.png&#34;&gt; &#xA;&lt;img src=&#34;https://cdn.discordapp.com/attachments/610012460828852229/853933487295299584/unknown.png&#34;&gt; &#xA;&lt;p&gt;( Zoom in the screenshot )&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/main.png&#34;&gt; &#xA;&lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/rxyhn1.png&#34;&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;NvChad is a neovim config written in lua aiming to provide a base configuration with very beautiful UI and blazing fast startuptime (around 0.02 secs ~ 0.07 secs). We tweak UI plugins such as telescope, nvim-tree, bufferline etc well to provide an asethetic UI experience.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lazy loading is done 93% of the time meaning that plugins will not be loaded by default, they will be loaded only when required also at specific commands, events etc. This lowers the startuptime and it was like 0.07~ secs tested on an old pentium machine 1.4ghz + 4gb ram &amp;amp; HDD.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NvChad isnt a framework! Its supposed to be used as a &#34;base&#34; config, so users could tweak the defaults well, can also remove the things they dont like in the default config and build their config on top of it. Users can tweak the entire default config while staying in their custom config (lua/custom dir). This is the control center of the user&#39;s config and gitignored so the users can stay update to-date with NvChad&#39;s latest config (main branch) while still controlling it with their chadrc (file that controls entire custom dir)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Theme Showcase&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; &lt;b&gt;Images (Click to expand!)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/four_Themes.png&#34; alt=&#34;main themes&#34;&gt; &lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/radium1.png&#34; alt=&#34;radium&#34;&gt; &lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/radium2.png&#34; alt=&#34;radium&#34;&gt; &lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/radium3.png&#34; alt=&#34;radium&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;(Note: these are just 4-5 themes, NvChad has around 27+ themes)&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;UI related plugins used&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; &lt;b&gt;Images (Click to expand!)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;h3&gt; Nvim-tree.lua &lt;/h3&gt; &#xA; &lt;p&gt;Fast file tree:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/nvimtree.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Telescope-nvim &lt;/h3&gt; &#xA; &lt;p&gt;A fuzzy file finder, picker, sorter, previewer and much more:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/tel.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Indent-blankline.nvim &lt;/h3&gt; &#xA; &lt;p&gt;Adds indentline:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/blanklineNvim.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Feline.nvim &lt;/h3&gt; &#xA; &lt;p&gt;Highly configurable statusline plugin:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/statusline.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Nvim-bufferline.lua &lt;/h3&gt; &#xA; &lt;p&gt;Better tab implementation:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/bufferline.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Nvim-web-devicons &lt;/h3&gt; &#xA; &lt;p&gt;Lua fork of Vim Devicons which offers more file icon customisability:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/image.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Nvim-treesitter &lt;/h3&gt;Better syntax highlighting for programming languages (NvChad by default comes with Lua/bash treesitter parsers).&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;Without/with Treesitter:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/woTree.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Plugins list&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Many beautiful themes, theme toggler by &lt;a href=&#34;https://github.com/NvChad/base46&#34;&gt;our base46 plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Inbuilt terminal toggling &amp;amp; management with &lt;a href=&#34;https://github.com/NvChad/nvterm&#34;&gt;Nvterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NvChad updater, hide &amp;amp; unhide terminal buffers with &lt;a href=&#34;https://github.com/NvChad/extensions&#34;&gt;NvChad extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;File navigation with &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Managing tabs, buffers with &lt;a href=&#34;https://github.com/akinsho/bufferline.nvim&#34;&gt;bufferline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Beautiful and configurable icons with &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pretty and functional statusline with &lt;a href=&#34;https://github.com/Famiu/feline.nvim&#34;&gt;feline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git diffs and more with &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NeoVim Lsp configuration with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt; and &lt;a href=&#34;https://github.com/williamboman/nvim-lsp-installer/&#34;&gt;lsp-installer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Autocompletion with &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;File searching, previewing image and text files and more with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting with &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Autoclosing braces and html tags with &lt;a href=&#34;https://github.com/windwp/nvim-autopairs&#34;&gt;nvim-autopairs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Indentlines with &lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;indent-blankline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Useful snippets with &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets&#34;&gt;friendly snippets&lt;/a&gt; + &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;LuaSnip&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Popup mappings keysheet &lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;whichkey.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;I (@siduck i.e creator of NvChad) in my initial days of learning to program wanted a lightweight IDE for writing code, I had a very low end system which was like 1.4ghz pentium + 4gb ram &amp;amp; HDD. I was into web dev stuff so many suggested me to use vscode but that thing was very heavy on my system, It took more ram than my browser! ( minimal ungoogled chromium ) so I never tried it again, sublime text was nice but the fear of using proprietary software XD for a linux user bugged me a lot. Then I tried doom-emacs which looked pretty but it was slow and I was lost within its docs, I tried lunarvim but too lazy to read the docs. Doom-emacs and lunarvim inspired me to make a config which is the prettiest + very fast and simple.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I&#39;m decent at ricing i.e customizing system and making it look pretty so I posted my neovim rice on &lt;a href=&#34;https://www.reddit.com/r/neovim/comments/m3xl4f/neovim_rice/&#34;&gt;neovim subreddit&lt;/a&gt;, my neovim-dotfiles github repo blew up and then I had to come up with a name, I was amazed by the chad meme lol so I put NvChad as the name, the chad word in here doesnt literally mean the chad guy but in the sense such as chad linux vs windows i.e meaning superior, best etc. NvChad was made for my personal use but it gained some popularity which inspired me to make a public config i.e config usable by many and less hassle to update as everyone&#39;s going to use the same base config (NvChad) with their custom modifications (which are gitignored so that wont mess up), without the custom config stuff users would have to keep a track of every commit and copy paste git diffs to manually update nvchad.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;💝&lt;/span&gt; Support&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m (@siduck) really very sorry to remove the previous charity links but I had to do it for various reasons. A lot has been going here regarding financial issues and I do need some support if it&#39;s possible from your end. I haven&#39;t graduated yet and it would be great to earn some stuff as that&#39;d help me with daily minor expenses. If you like NvChad and would like to support &amp;amp; appreciate it via donation then I&#39;ll gladly accept it. Dont worry! NvChad will still stay alive &amp;amp; active without your donations! I will remove the sponsor button and re-add the charity links once I get a job, probably a year or two.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/siduck&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Ko--fi-F16061?style=for-the-badge&amp;amp;logo=ko-fi&amp;amp;logoColor=white&#34; alt=&#34;kofi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/siduck76&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&#34; alt=&#34;paypal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/siduck&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Buy_Me_A_Coffee-FFDD00?style=for-the-badge&amp;amp;logo=buy-me-a-coffee&amp;amp;logoColor=black&#34; alt=&#34;buymeacoffee&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/siduck&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Patreon-F96854?style=for-the-badge&amp;amp;logo=patreon&amp;amp;logoColor=white&#34; alt=&#34;patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elianiva&#34;&gt;Elianiva&lt;/a&gt; helped me with NeoVim Lua related issues many times, NvChad wouldn&#39;t exist without his help at all as he helped me in my initial neovim journey!&lt;/li&gt; &#xA; &lt;li&gt;@lorvethe for making the beautiful NvChad logo.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mfussenegger/nvim-dap</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/mfussenegger/nvim-dap</id>
    <link href="https://github.com/mfussenegger/nvim-dap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Debug Adapter Protocol client implementation for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DAP (Debug Adapter Protocol)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-dap&lt;/code&gt; is a Debug Adapter Protocol client implementation for &lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt;. &lt;code&gt;nvim-dap&lt;/code&gt; allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launch an application to debug&lt;/li&gt; &#xA; &lt;li&gt;Attach to running applications and debug them&lt;/li&gt; &#xA; &lt;li&gt;Set breakpoints and step through code&lt;/li&gt; &#xA; &lt;li&gt;Inspect the state of the application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38700/124292938-669a7100-db56-11eb-93b8-77b66994fc8a.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Neovim (&amp;gt;= 0.6)&lt;/li&gt; &#xA; &lt;li&gt;nvim-dap is a plugin. Install it like any other Neovim plugin. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generate the documentation for nvim-dap using &lt;code&gt;:helptags ALL&lt;/code&gt; or &lt;code&gt;:helptags &amp;lt;PATH-TO-PLUGIN/doc/&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You&#39;ll need to install and configure a debug adapter per language. See&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&#34;&gt;:help dap.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&#34;&gt;Debug-Adapter Installation&lt;/a&gt; wiki&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:help dap-adapter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:help dap-configuration&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A typical debug flow consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setting breakpoints via &lt;code&gt;:lua require&#39;dap&#39;.toggle_breakpoint()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Launching debug sessions and resuming execution via &lt;code&gt;:lua require&#39;dap&#39;.continue()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Stepping through code via &lt;code&gt;:lua require&#39;dap&#39;.step_over()&lt;/code&gt; and &lt;code&gt;:lua require&#39;dap&#39;.step_into()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Inspecting the state via the built-in REPL: &lt;code&gt;:lua require&#39;dap&#39;.repl.open()&lt;/code&gt; or using the widget UI (&lt;code&gt;:help dap-widgets&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&#34;&gt;:help dap.txt&lt;/a&gt;, &lt;code&gt;:help dap-mapping&lt;/code&gt; and &lt;code&gt;:help dap-api&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;p&gt;In theory all of the languages for which a debug adapter exists should be supported.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/&#34;&gt;Available debug adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&#34;&gt;nvim-dap Debug-Adapter Installation &amp;amp; Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Wiki is community maintained. If you got an adapter working that isn&#39;t listed yet, please extend the Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Some debug adapters have &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Extensions#language-specific-extensions&#34;&gt;language specific extensions&lt;/a&gt;. Using them over a manual configuration is recommended, as they&#39;re usually better maintained.&lt;/p&gt; &#xA;&lt;p&gt;If the instructions in the wiki for a debug adapter are not working, consider that debug adapters may have made changes since the instructions were written. You may want to read the release notes of the debug adapters or try with an older version. Please update the wiki if you discover outdated examples.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Have a basic debugger in Neovim.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extensibility and double as a DAP client library. This allows other plugins to extend the debugging experience. Either by improving the UI or by making it easier to debug parts of an application.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Examples of UI/UX extensions are &lt;a href=&#34;https://github.com/theHamsta/nvim-dap-virtual-text&#34;&gt;nvim-dap-virtual-text&lt;/a&gt; and &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Examples for language specific extensions include &lt;a href=&#34;https://github.com/mfussenegger/nvim-jdtls&#34;&gt;nvim-jdtls&lt;/a&gt; and &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap-python&#34;&gt;nvim-dap-python&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;All known extensions are listed in the &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Extensions&#34;&gt;Wiki&lt;/a&gt;. The wiki is community maintained. Please add new extensions if you built one or if you discovered one that&#39;s not listed.&lt;/p&gt; &#xA;&lt;h2&gt;Non-Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Debug adapter installations are out of scope. It&#39;s not the business of an editor plugin to re-invent a package manager. Use your system package manager. Use Nix. Use Ansible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/nvim-lua/wishlist/issues/37#issuecomment-1023363686&#34;&gt;nvim-dapconfig&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Vim support. It&#39;s not going to happen. Use &lt;a href=&#34;https://github.com/puremourning/vimspector&#34;&gt;vimspector&lt;/a&gt; instead.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/puremourning/vimspector&#34;&gt;vimspector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Give concrete feedback about usability.&lt;/li&gt; &#xA; &lt;li&gt;Triage issues. Many of the problems people encounter are debug adapter specific.&lt;/li&gt; &#xA; &lt;li&gt;Improve upstream debug adapter documentation to make them more editor agnostic.&lt;/li&gt; &#xA; &lt;li&gt;Improve the Wiki. But please refrain from turning it into comprehensive debug adapter documentation that should go upstream.&lt;/li&gt; &#xA; &lt;li&gt;Write extensions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before making direct code contributions, please create a discussion or issue to clarify whether the change is in scope of the nvim-dap core.&lt;/p&gt; &#xA;&lt;p&gt;Please keep pull requests focused and don&#39;t change multiple things at the same time.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; launch debug adapter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; attach to debug adapter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; toggle breakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; breakpoints with conditions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; logpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; set exception breakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; step over, step into, step out&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; step back, reverse continue&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Goto&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; restart&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; stop&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; pause&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; evaluate expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; REPL (incl. commands to show threads, frames and scopes)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>phaazon/hop.nvim</title>
    <updated>2022-05-30T01:44:53Z</updated>
    <id>tag:github.com,2022-05-30:/phaazon/hop.nvim</id>
    <link href="https://github.com/phaazon/hop.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim motions on speed!&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;                                          __&#xA;                                         / /_  ____  ____&#xA;                                        / __ \/ __ \/ __ \&#xA;                                       / / / / /_/ / /_/ /&#xA;                                      /_/ /_/\____/ .___/&#xA;                                                 /_/&#xA;                                  · Neovim motions on speed! ·&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#hop.nvim:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/matrix-join%20the%20speed!-blueviolet&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hop&lt;/strong&gt; is an &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt;-like plugin allowing you to jump anywhere in a document with as few keystrokes as possible. It does so by annotating text in your buffer with hints, short string sequences for which each character represents a key to type to jump to the annotated text. Most of the time, those sequences’ lengths will be between 1 to 3 characters, making every jump target in your document reachable in a few keystrokes.&lt;/p&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#word-mode-hopword&#34;&gt;Word mode (&lt;code&gt;:HopWord&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#line-mode-hopline&#34;&gt;Line mode (&lt;code&gt;:HopLine&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#1-char-mode-hopchar1&#34;&gt;1-char mode (&lt;code&gt;:HopChar1&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#2-char-mode-hopchar2&#34;&gt;2-char mode (&lt;code&gt;:HopChar2&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#pattern-mode-hoppattern&#34;&gt;Pattern mode (&lt;code&gt;:HopPattern&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#visual-extend&#34;&gt;Visual extend&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#jump-on-sole-occurrence&#34;&gt;Jump on sole occurrence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#use-as-operator-motion&#34;&gt;Use as operator motion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#inclusive--exclusive-motion&#34;&gt;Inclusive / exclusive motion&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#important-note-about-versioning&#34;&gt;Important note about versioning&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#using-vim-plug&#34;&gt;Using vim-plug&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#using-packer&#34;&gt;Using packer&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#nightly-users&#34;&gt;Nightly users&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#keybindings&#34;&gt;Keybindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#extension&#34;&gt;Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#chat&#34;&gt;Chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hop&lt;/strong&gt; is a complete from-scratch rewrite of &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt;, a famous plugin to enhance the native motions of Vim. Even though &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt; is usable in Neovim, it suffers from a few drawbacks making it not comfortable to use with Neovim version &amp;gt;0.5 – at least at the time of writing these lines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt; uses an old trick to annotate jump targets by saving the contents of the buffer, replacing it with the highlighted annotations and then restoring the initial buffer after jump. This trick is dangerous as it will change the contents of your buffer. A UI plugin should never do anything to existing buffers’ contents.&lt;/li&gt; &#xA; &lt;li&gt;Because the contents of buffers will temporarily change, other parts of the editor and/or plugins relying on buffer change events will react and will go mad. An example is the internal LSP client implementation of Neovim &amp;gt;0.5 or its treesitter native implementation. For LSP, it means that the connected LSP server will receive a buffer with the jump target annotations… not ideal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hop&lt;/strong&gt; is a modern take implementing this concept for the latest versions of Neovim.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Go to any word in the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Go to any character in the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Go to any bigrams in the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use Hop cross windows with multi-windows support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make an arbitrary search akin to &lt;kbd&gt;/&lt;/kbd&gt; and go to any occurrences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Go to any line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Visual extend mode, which allows you to extend a visual selection by hopping elsewhere in the document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use it with commands like &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; to delete/change/yank up to your new cursor position.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support a wide variety of user configuration options, among the possibility to alter the behavior of commands to hint only before or after the cursor, for the current line, change the dictionary keys to use for the labels, jump on sole occurrence, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extensible: provide your own jump targets and create Hop extensions!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Word mode (&lt;code&gt;:HopWord&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;This mode highlights all the recognized words in the visible part of the buffer and allows you to jump to any.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_word_mode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Line mode (&lt;code&gt;:HopLine&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;This mode highlights the beginnings of each line in the visible part of the buffer for quick line hopping.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_line_mode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1-char mode (&lt;code&gt;:HopChar1&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;This mode expects the user to type a single character. That character will then be highlighted in the visible part of the buffer, allowing to jump to any of its occurrence. This mode is especially useful to jump to operators, punctuations or any symbols not recognized as parts of words.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_char1_mode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2-char mode (&lt;code&gt;:HopChar2&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;A variant of the 1-char mode, this mode exacts the user to type two characters, representing a &lt;em&gt;bigram&lt;/em&gt; (they follow each other, in order). The bigram occurrences in the visible part of the buffer will then be highlighted for you to jump to any.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_char2_mode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that it’s possible to &lt;em&gt;fallback to 1-char mode&lt;/em&gt; if you hit a special key as second key. This key can be controlled via the user configuration. &lt;code&gt;:h hop-config-char2_fallback_key&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pattern mode (&lt;code&gt;:HopPattern&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;Akin to &lt;code&gt;/&lt;/code&gt;, this mode prompts you for a pattern (regex) to search. Occurrences will be highlighted, allowing you to jump to any.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_pattern_mode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Visual extend&lt;/h2&gt; &#xA;&lt;p&gt;If you call any Hop commands / Lua functions from one of the visual modes, the visual selection will be extended.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_visual_extend.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Jump on sole occurrence&lt;/h2&gt; &#xA;&lt;p&gt;If only a single occurrence is visible in the buffer, Hop will automatically jump to it without requiring pressing any extra key.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_sole_occurrence.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use as operator motion&lt;/h2&gt; &#xA;&lt;p&gt;You can use Hop with any command that expects a motion, such as &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, and it does what you would expect: Delete/yank/change the document up to the new cursor position.&lt;/p&gt; &#xA;&lt;h2&gt;Inclusive / exclusive motion&lt;/h2&gt; &#xA;&lt;p&gt;By default, Hop will operate in exclusive mode, which is similar to what you get with &lt;code&gt;t&lt;/code&gt;: deleting from the cursor position up to the next &lt;code&gt;)&lt;/code&gt; (without deleting the &lt;code&gt;)&lt;/code&gt;), which is normally done with &lt;code&gt;dt)&lt;/code&gt;. However, if you want to be inclusive (i.e. delete the &lt;code&gt;)&lt;/code&gt;, which is &lt;code&gt;df)&lt;/code&gt; in vanilla), you can set the &lt;code&gt;inclusive_jump&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some limitations currently exist, requiring &lt;code&gt;virtualedit&lt;/code&gt; special settings. &lt;code&gt;:h hop-config-inclusive_jump&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;This section will guide you through the list of steps you must take to be able to get started with &lt;strong&gt;Hop&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This plugin was written against Neovim 0.5, which is currently a nightly version. This plugin will not work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With a version of Neovim before 0.5.&lt;/li&gt; &#xA; &lt;li&gt;On Vim. &lt;strong&gt;No support for Vim is planned.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Whatever solution / package manager you are using, you need to ensure that the &lt;code&gt;setup&lt;/code&gt; Lua function is called at some point, otherwise the plugin will not work. If your package manager doesn’t support automatic calling of this function, you can call it manually after your plugin is installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;hop&#39;.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a default experience. Feel free to customize later the &lt;code&gt;setup&lt;/code&gt; invocation (&lt;code&gt;:h hop.setup&lt;/code&gt;). If you do, then you will probably want to ensure the configuration is okay by running &lt;code&gt;:checkhealth&lt;/code&gt;. Various checks will be performed by Hop to ensure everything is all good.&lt;/p&gt; &#xA;&lt;h3&gt;Important note about versioning&lt;/h3&gt; &#xA;&lt;p&gt;This plugin implements &lt;a href=&#34;https://semver.org&#34;&gt;SemVer&lt;/a&gt; via git branches and tags. Versions are prefixed with a &lt;code&gt;v&lt;/code&gt;, and only patch versions are git tags. Major and minor versions are git branches. You are &lt;strong&gt;very strongly advised&lt;/strong&gt; to use a major version dependency to be sure your config will not break when Hop gets updated.&lt;/p&gt; &#xA;&lt;h3&gt;Using vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;phaazon/hop.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;phaazon/hop.nvim&#39;,&#xA;  branch = &#39;v1&#39;, -- optional but strongly recommended&#xA;  config = function()&#xA;    -- you can configure Hop the way you like here; see :h hop-config&#xA;    require&#39;hop&#39;.setup { keys = &#39;etovxqpdygfblzhckisuran&#39; }&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nightly users&lt;/h3&gt; &#xA;&lt;p&gt;Hop supports nightly releases of Neovim. However, keep in mind that if you are on a nightly version, you must be &lt;strong&gt;on the last one&lt;/strong&gt;. If you are not, then you are exposed to compatibility issues / breakage.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;A bunch of vim commands are available to get your fingers wrapped around &lt;strong&gt;Hop&lt;/strong&gt; quickly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopWord&lt;/code&gt;: hop around by highlighting words.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopPattern&lt;/code&gt;: hop around by matching against a pattern (as with &lt;code&gt;/&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopChar1&lt;/code&gt;: type a single key and hop to any occurrence of that key in the document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopChar2&lt;/code&gt;: type a bigram (two keys) and hop to any occurrence of that bigram in the document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopLine&lt;/code&gt;: jump to any visible line in your buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopLineStart&lt;/code&gt;: jump to any visible first non-whitespace character of each line in your buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of these commands have variant to jump before / after the cursor, and on the current line. For instance, &lt;code&gt;:HopChar1CurrentLineAC&lt;/code&gt; is a form of &lt;code&gt;f&lt;/code&gt; (Vim native motion) using Hop.&lt;/p&gt; &#xA;&lt;p&gt;If you would rather use the Lua API, you can test it via the command prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:lua require&#39;hop&#39;.hint_words()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more complete user guide and help pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:help hop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Keybindings&lt;/h1&gt; &#xA;&lt;p&gt;Hop doesn’t set any keybindings; you will have to define them by yourself.&lt;/p&gt; &#xA;&lt;p&gt;If you want to create a key binding from within Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- place this in one of your configuration file(s)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;f&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.AFTER_CURSOR, current_line_only = true })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;F&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.BEFORE_CURSOR, current_line_only = true })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;o&#39;, &#39;f&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.AFTER_CURSOR, current_line_only = true, inclusive_jump = true })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;o&#39;, &#39;F&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.BEFORE_CURSOR, current_line_only = true, inclusive_jump = true })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;&#39;, &#39;t&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.AFTER_CURSOR, current_line_only = true })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;&#39;, &#39;T&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.BEFORE_CURSOR, current_line_only = true })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;e&#39;, &#34;&amp;lt;cmd&amp;gt; lua require&#39;hop&#39;.hint_words({ hint_position = require&#39;hop.hint&#39;.HintPosition.END })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;e&#39;, &#34;&amp;lt;cmd&amp;gt; lua require&#39;hop&#39;.hint_words({ hint_position = require&#39;hop.hint&#39;.HintPosition.END })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;o&#39;, &#39;&amp;lt;leader&amp;gt;e&#39;, &#34;&amp;lt;cmd&amp;gt; lua require&#39;hop&#39;.hint_words({ hint_position = require&#39;hop.hint&#39;.HintPosition.END, inclusive_jump = true })&amp;lt;cr&amp;gt;&#34;, {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;You can configure Hop via several different mechanisms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Global configuration&lt;/em&gt; uses the Lua &lt;code&gt;setup&lt;/code&gt; API (&lt;code&gt;:h hop.setup&lt;/code&gt;). This allows you to setup global options that will be used by all Hop Lua functions as well as the vim commands (e.g. &lt;code&gt;:HopWord&lt;/code&gt;). This is the easiest way to configure Hop on a global scale. You can do this in your &lt;code&gt;init.lua&lt;/code&gt; or any &lt;code&gt;.vim&lt;/code&gt; file by using the &lt;code&gt;lua&lt;/code&gt; vim command. Example: &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; init.vim&#xA;&#34;&#xA;&#34; Use better keys for the bépo keyboard layout and set&#xA;&#34; a balanced distribution of terminal / sequence keys&#xA;lua require&#39;hop&#39;.setup { keys = &#39;etovxqpdygfblzhckisuran&#39;, jump_on_sole_occurrence = false }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Local configuration overrides&lt;/em&gt; are available only on the Lua API and are &lt;code&gt;{opts}&lt;/code&gt; Lua tables passed to the various Lua functions. Those options have precedence over global options, so they allow to locally override options. Useful if you want to test a special option for a single Lua function, such as &lt;code&gt;require&#39;hop&#39;.hint_lines()&lt;/code&gt;. You can test them inside the command line, such as: &lt;pre&gt;&lt;code&gt;:lua require&#39;hop&#39;.hint_words({ direction = require&#39;hop.hint&#39;.HintDirection.BEFORE_CURSOR })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;In the case of none of the above are provided, options are automatically read from the &lt;em&gt;default&lt;/em&gt; options. See &lt;code&gt;:h hop-config&lt;/code&gt; for a list of default values.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Extension&lt;/h1&gt; &#xA;&lt;p&gt;It is possible to extend Hop by creating &lt;em&gt;Hop extension plugins&lt;/em&gt;. For more info:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:h hop-extension&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Disclaimer: you may have written a nice Hop extension plugin. You can open an issue to merge it upstream but remember that it’s unlikely to be merged as Hop should remain small and straight-to-the point.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Chat&lt;/h1&gt; &#xA;&lt;p&gt;Join the discussion on the official &lt;a href=&#34;https://matrix.to/#/#hop.nvim:matrix.org&#34;&gt;Matrix room&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
</feed>