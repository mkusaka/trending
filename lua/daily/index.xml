<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-24T01:48:50Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phaazon/hop.nvim</title>
    <updated>2022-06-24T01:48:50Z</updated>
    <id>tag:github.com,2022-06-24:/phaazon/hop.nvim</id>
    <link href="https://github.com/phaazon/hop.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim motions on speed!&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;                                          __&#xA;                                         / /_  ____  ____&#xA;                                        / __ \/ __ \/ __ \&#xA;                                       / / / / /_/ / /_/ /&#xA;                                      /_/ /_/\____/ .___/&#xA;                                                 /_/&#xA;                                  · Neovim motions on speed! ·&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#hop.nvim:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/matrix-join%20the%20speed!-blueviolet&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hop&lt;/strong&gt; is an &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt;-like plugin allowing you to jump anywhere in a document with as few keystrokes as possible. It does so by annotating text in your buffer with hints, short string sequences for which each character represents a key to type to jump to the annotated text. Most of the time, those sequences’ lengths will be between 1 to 3 characters, making every jump target in your document reachable in a few keystrokes.&lt;/p&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#word-mode-hopword&#34;&gt;Word mode (&lt;code&gt;:HopWord&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#line-mode-hopline&#34;&gt;Line mode (&lt;code&gt;:HopLine&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#1-char-mode-hopchar1&#34;&gt;1-char mode (&lt;code&gt;:HopChar1&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#2-char-mode-hopchar2&#34;&gt;2-char mode (&lt;code&gt;:HopChar2&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#pattern-mode-hoppattern&#34;&gt;Pattern mode (&lt;code&gt;:HopPattern&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#visual-extend&#34;&gt;Visual extend&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#jump-on-sole-occurrence&#34;&gt;Jump on sole occurrence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#use-as-operator-motion&#34;&gt;Use as operator motion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#inclusive--exclusive-motion&#34;&gt;Inclusive / exclusive motion&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#important-note-about-versioning&#34;&gt;Important note about versioning&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#using-vim-plug&#34;&gt;Using vim-plug&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#using-packer&#34;&gt;Using packer&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#nightly-users&#34;&gt;Nightly users&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#keybindings&#34;&gt;Keybindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#extension&#34;&gt;Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#chat&#34;&gt;Chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hop&lt;/strong&gt; is a complete from-scratch rewrite of &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt;, a famous plugin to enhance the native motions of Vim. Even though &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt; is usable in Neovim, it suffers from a few drawbacks making it not comfortable to use with Neovim version &amp;gt;0.5 – at least at the time of writing these lines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt; uses an old trick to annotate jump targets by saving the contents of the buffer, replacing it with the highlighted annotations and then restoring the initial buffer after jump. This trick is dangerous as it will change the contents of your buffer. A UI plugin should never do anything to existing buffers’ contents.&lt;/li&gt; &#xA; &lt;li&gt;Because the contents of buffers will temporarily change, other parts of the editor and/or plugins relying on buffer change events will react and will go mad. An example is the internal LSP client implementation of Neovim &amp;gt;0.5 or its treesitter native implementation. For LSP, it means that the connected LSP server will receive a buffer with the jump target annotations… not ideal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hop&lt;/strong&gt; is a modern take implementing this concept for the latest versions of Neovim.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Go to any word in the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Go to any character in the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Go to any bigrams in the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use Hop cross windows with multi-windows support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make an arbitrary search akin to &lt;kbd&gt;/&lt;/kbd&gt; and go to any occurrences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Go to any line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Visual extend mode, which allows you to extend a visual selection by hopping elsewhere in the document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use it with commands like &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; to delete/change/yank up to your new cursor position.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support a wide variety of user configuration options, among the possibility to alter the behavior of commands to hint only before or after the cursor, for the current line, change the dictionary keys to use for the labels, jump on sole occurrence, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extensible: provide your own jump targets and create Hop extensions!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Word mode (&lt;code&gt;:HopWord&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;This mode highlights all the recognized words in the visible part of the buffer and allows you to jump to any.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_word_mode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Line mode (&lt;code&gt;:HopLine&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;This mode highlights the beginnings of each line in the visible part of the buffer for quick line hopping.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_line_mode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1-char mode (&lt;code&gt;:HopChar1&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;This mode expects the user to type a single character. That character will then be highlighted in the visible part of the buffer, allowing to jump to any of its occurrence. This mode is especially useful to jump to operators, punctuations or any symbols not recognized as parts of words.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_char1_mode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2-char mode (&lt;code&gt;:HopChar2&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;A variant of the 1-char mode, this mode exacts the user to type two characters, representing a &lt;em&gt;bigram&lt;/em&gt; (they follow each other, in order). The bigram occurrences in the visible part of the buffer will then be highlighted for you to jump to any.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_char2_mode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that it’s possible to &lt;em&gt;fallback to 1-char mode&lt;/em&gt; if you hit a special key as second key. This key can be controlled via the user configuration. &lt;code&gt;:h hop-config-char2_fallback_key&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pattern mode (&lt;code&gt;:HopPattern&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;Akin to &lt;code&gt;/&lt;/code&gt;, this mode prompts you for a pattern (regex) to search. Occurrences will be highlighted, allowing you to jump to any.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_pattern_mode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Visual extend&lt;/h2&gt; &#xA;&lt;p&gt;If you call any Hop commands / Lua functions from one of the visual modes, the visual selection will be extended.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_visual_extend.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Jump on sole occurrence&lt;/h2&gt; &#xA;&lt;p&gt;If only a single occurrence is visible in the buffer, Hop will automatically jump to it without requiring pressing any extra key.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaazon.net/media/uploads/hop_sole_occurrence.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use as operator motion&lt;/h2&gt; &#xA;&lt;p&gt;You can use Hop with any command that expects a motion, such as &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, and it does what you would expect: Delete/yank/change the document up to the new cursor position.&lt;/p&gt; &#xA;&lt;h2&gt;Inclusive / exclusive motion&lt;/h2&gt; &#xA;&lt;p&gt;By default, Hop will operate in exclusive mode, which is similar to what you get with &lt;code&gt;t&lt;/code&gt;: deleting from the cursor position up to the next &lt;code&gt;)&lt;/code&gt; (without deleting the &lt;code&gt;)&lt;/code&gt;), which is normally done with &lt;code&gt;dt)&lt;/code&gt;. However, if you want to be inclusive (i.e. delete the &lt;code&gt;)&lt;/code&gt;, which is &lt;code&gt;df)&lt;/code&gt; in vanilla), you can set the &lt;code&gt;inclusive_jump&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some limitations currently exist, requiring &lt;code&gt;virtualedit&lt;/code&gt; special settings. &lt;code&gt;:h hop-config-inclusive_jump&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;This section will guide you through the list of steps you must take to be able to get started with &lt;strong&gt;Hop&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This plugin was written against Neovim 0.5, which is currently a nightly version. This plugin will not work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With a version of Neovim before 0.5.&lt;/li&gt; &#xA; &lt;li&gt;On Vim. &lt;strong&gt;No support for Vim is planned.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Whatever solution / package manager you are using, you need to ensure that the &lt;code&gt;setup&lt;/code&gt; Lua function is called at some point, otherwise the plugin will not work. If your package manager doesn’t support automatic calling of this function, you can call it manually after your plugin is installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;hop&#39;.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a default experience. Feel free to customize later the &lt;code&gt;setup&lt;/code&gt; invocation (&lt;code&gt;:h hop.setup&lt;/code&gt;). If you do, then you will probably want to ensure the configuration is okay by running &lt;code&gt;:checkhealth&lt;/code&gt;. Various checks will be performed by Hop to ensure everything is all good.&lt;/p&gt; &#xA;&lt;h3&gt;Important note about versioning&lt;/h3&gt; &#xA;&lt;p&gt;This plugin implements &lt;a href=&#34;https://semver.org&#34;&gt;SemVer&lt;/a&gt; via git branches and tags. Versions are prefixed with a &lt;code&gt;v&lt;/code&gt;, and only patch versions are git tags. Major and minor versions are git branches. You are &lt;strong&gt;very strongly advised&lt;/strong&gt; to use a major version dependency to be sure your config will not break when Hop gets updated.&lt;/p&gt; &#xA;&lt;h3&gt;Using vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;phaazon/hop.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;phaazon/hop.nvim&#39;,&#xA;  branch = &#39;v1&#39;, -- optional but strongly recommended&#xA;  config = function()&#xA;    -- you can configure Hop the way you like here; see :h hop-config&#xA;    require&#39;hop&#39;.setup { keys = &#39;etovxqpdygfblzhckisuran&#39; }&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nightly users&lt;/h3&gt; &#xA;&lt;p&gt;Hop supports nightly releases of Neovim. However, keep in mind that if you are on a nightly version, you must be &lt;strong&gt;on the last one&lt;/strong&gt;. If you are not, then you are exposed to compatibility issues / breakage.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;A bunch of vim commands are available to get your fingers wrapped around &lt;strong&gt;Hop&lt;/strong&gt; quickly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopWord&lt;/code&gt;: hop around by highlighting words.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopPattern&lt;/code&gt;: hop around by matching against a pattern (as with &lt;code&gt;/&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopChar1&lt;/code&gt;: type a single key and hop to any occurrence of that key in the document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopChar2&lt;/code&gt;: type a bigram (two keys) and hop to any occurrence of that bigram in the document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopLine&lt;/code&gt;: jump to any visible line in your buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:HopLineStart&lt;/code&gt;: jump to any visible first non-whitespace character of each line in your buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of these commands have variant to jump before / after the cursor, and on the current line. For instance, &lt;code&gt;:HopChar1CurrentLineAC&lt;/code&gt; is a form of &lt;code&gt;f&lt;/code&gt; (Vim native motion) using Hop.&lt;/p&gt; &#xA;&lt;p&gt;If you would rather use the Lua API, you can test it via the command prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:lua require&#39;hop&#39;.hint_words()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more complete user guide and help pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:help hop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Keybindings&lt;/h1&gt; &#xA;&lt;p&gt;Hop doesn’t set any keybindings; you will have to define them by yourself.&lt;/p&gt; &#xA;&lt;p&gt;If you want to create a key binding from within Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- place this in one of your configuration file(s)&#xA;vim.api.nvim_set_keymap(&#39;&#39;, &#39;f&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.AFTER_CURSOR, current_line_only = true })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;&#39;, &#39;F&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.BEFORE_CURSOR, current_line_only = true })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;&#39;, &#39;t&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.AFTER_CURSOR, current_line_only = true, hint_offset = -1 })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;&#39;, &#39;T&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.BEFORE_CURSOR, current_line_only = true, hint_offset = 1 })&amp;lt;cr&amp;gt;&#34;, {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;You can configure Hop via several different mechanisms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Global configuration&lt;/em&gt; uses the Lua &lt;code&gt;setup&lt;/code&gt; API (&lt;code&gt;:h hop.setup&lt;/code&gt;). This allows you to setup global options that will be used by all Hop Lua functions as well as the vim commands (e.g. &lt;code&gt;:HopWord&lt;/code&gt;). This is the easiest way to configure Hop on a global scale. You can do this in your &lt;code&gt;init.lua&lt;/code&gt; or any &lt;code&gt;.vim&lt;/code&gt; file by using the &lt;code&gt;lua&lt;/code&gt; vim command. Example: &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; init.vim&#xA;&#34;&#xA;&#34; Use better keys for the bépo keyboard layout and set&#xA;&#34; a balanced distribution of terminal / sequence keys&#xA;lua require&#39;hop&#39;.setup { keys = &#39;etovxqpdygfblzhckisuran&#39;, jump_on_sole_occurrence = false }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Local configuration overrides&lt;/em&gt; are available only on the Lua API and are &lt;code&gt;{opts}&lt;/code&gt; Lua tables passed to the various Lua functions. Those options have precedence over global options, so they allow to locally override options. Useful if you want to test a special option for a single Lua function, such as &lt;code&gt;require&#39;hop&#39;.hint_lines()&lt;/code&gt;. You can test them inside the command line, such as: &lt;pre&gt;&lt;code&gt;:lua require&#39;hop&#39;.hint_words({ direction = require&#39;hop.hint&#39;.HintDirection.BEFORE_CURSOR })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;In the case of none of the above are provided, options are automatically read from the &lt;em&gt;default&lt;/em&gt; options. See &lt;code&gt;:h hop-config&lt;/code&gt; for a list of default values.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Extension&lt;/h1&gt; &#xA;&lt;p&gt;It is possible to extend Hop by creating &lt;em&gt;Hop extension plugins&lt;/em&gt;. For more info:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:h hop-extension&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Disclaimer: you may have written a nice Hop extension plugin. You can open an issue to merge it upstream but remember that it’s unlikely to be merged as Hop should remain small and straight-to-the point.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Chat&lt;/h1&gt; &#xA;&lt;p&gt;Join the discussion on the official &lt;a href=&#34;https://matrix.to/#/#hop.nvim:matrix.org&#34;&gt;Matrix room&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-doorlock</title>
    <updated>2022-06-24T01:48:50Z</updated>
    <id>tag:github.com,2022-06-24:/qbcore-framework/qb-doorlock</id>
    <link href="https://github.com/qbcore-framework/qb-doorlock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Doorlock Script For QB-Core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-doorlock&lt;/h1&gt; &#xA;&lt;p&gt;Doorlock System For QBCore&lt;/p&gt; &#xA;&lt;p&gt;This doorlock system is based on &lt;a href=&#34;https://github.com/thelindat/nui_doorlock&#34;&gt;nui_doorlock by thelindat&lt;/a&gt; and contains compatibility with it&#39;s format.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-core&#34;&gt;qb-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-input&#34;&gt;qb-input&lt;/a&gt; - For Making New Doors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-lockpick&#34;&gt;qb-lockpick&lt;/a&gt; - For Lockpicking Doors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick in-game door creation with /newdoor&lt;/li&gt; &#xA; &lt;li&gt;Multiple door types to support all possible doors&lt;/li&gt; &#xA; &lt;li&gt;Support for item checking, multiple or single items&lt;/li&gt; &#xA; &lt;li&gt;Support for citizenid, gang and job checking&lt;/li&gt; &#xA; &lt;li&gt;Support for qb-lockpick&lt;/li&gt; &#xA; &lt;li&gt;NUI Text as interaction text&lt;/li&gt; &#xA; &lt;li&gt;Great performance&lt;/li&gt; &#xA; &lt;li&gt;Uses the native door system&lt;/li&gt; &#xA; &lt;li&gt;Support for object names and hashes&lt;/li&gt; &#xA; &lt;li&gt;Play any sound you want when unlocking/locking a door&lt;/li&gt; &#xA; &lt;li&gt;Highly customisable&lt;/li&gt; &#xA; &lt;li&gt;Auto lock, to automatically lock a door after it has been opened&lt;/li&gt; &#xA; &lt;li&gt;Admin access option&lt;/li&gt; &#xA; &lt;li&gt;Change color based on locked state&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Single Door Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;  [&#39;somesingledoor&#39;] = { -- The index of the table, this is used as the doorID&#xA;        objName = &#39;hei_v_ilev_bk_gate2_pris&#39;, -- Door object name can be a string or a number. Alias: objHash = &#39;hei_v_ilev_bk_gate2_pris&#39;,&#xA;        objCoords  = vec3(261.83, 221.39, 106.41), -- Object coords&#xA;        textCoords = vec3(261.83, 221.39, 106.41), -- Coords for the interaction text&#xA;        authorizedJobs = { [&#39;police&#39;] = 0 }, -- Job access (checks for a minimum grade of 0)&#xA;        authorizedGangs = { [&#39;vagos&#39;] = 0 }, -- Gang access (checks for a minimum grade of 0)&#xA;        authorizedCitizenIDs = { [&#39;BUI05180&#39;] = true }, -- Citizen ID access&#xA;        items = { [&#39;keycard&#39;] = 1, [&#39;banana&#39;] = 3 }, -- Item access, can be a string or table | the value of the item is the amount of items needed when using a table, if it is a string it will always check if this person has one or more of the item&#xA;        needsAllItems = false, -- true or false | Whether to check if the person has all items to unlock the door or just one of the items&#xA;        allAuthorized = false, -- true or false | Will give access to everyone if it is true&#xA;        objYaw = -110.0, -- Heading of the door. Alias: objHeading = -110.0,&#xA;        locked = true, -- true or false | Is the door locked by default&#xA;        pickable = false, -- true or false | Can the door be lockpicked. Alias: lockpick = false,&#xA;        distance = 1.5, -- At what range the interaction text will show. Alis: maxDistance = 1.5,&#xA;        doorType = &#39;door&#39;, -- The type of door, can be door, double, sliding, doublesliding or garage&#xA;        fixText = true, -- true or false | fix the text to the center of the door&#xA;        doorLabel = &#39;Cloakroom&#39;, -- Label of the door that shows up when nearby&#xA;        audioRemote = true, -- true or false | Play sound from the player instead of the door&#xA;        audioLock = {[&#39;file&#39;] = &#39;metal-locker.ogg&#39;, [&#39;volume&#39;] = 0.6}, -- Play sound on door lock&#xA;        audioUnlock = {[&#39;file&#39;] = &#39;metallic-creak.ogg&#39;, [&#39;volume&#39;] = 0.7}, -- Play sound on door unlock&#xA;        autoLock = 1000, -- Auto lock after this many miliseconds&#xA;        doorRate = 1.0,  -- The rate of the animation to lock/unlock the door&#xA;        cantUnlock = true -- true or false | Set to true to not allow the player to unlock the door, only lock it. This means a script will have to trigger the unlock&#xA;        hideLabel = true, -- Set to true to hide the popup label, for hiding doors&#xA;        remoteTrigger = true, -- true or false | If you want to be able to remote trigger a door with H, put this here&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Double Door Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;  [&#39;somedoubledoor&#39;] = { -- The index of the table, this is used as the doorID, can be a number or a string&#xA;        doors = { -- Table of doors which holds both doors&#39; data&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;objName = &#39;v_ilev_rc_door2&#39;, -- Door object name can be a string or a number. Alias: objHash = &#39;v_ilev_rc_door2&#39;,&#xA;&#x9;&#x9;&#x9;objYaw = 135.0, -- Heading of the door. Alias: objHeading = 135.0,&#xA;&#x9;&#x9;&#x9;objCoords = vec3(-447.7283, 6006.702, 31.86523), -- Object coords&#xA;&#x9;&#x9;},&#xA;&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;objName = &#39;v_ilev_rc_door2&#39;, -- Door object name can be a string or a number. Alias: objHash = &#39;v_ilev_rc_door2&#39;,&#xA;&#x9;&#x9;&#x9;objYaw = -45.0,  -- Heading of the door. Alias: objHeading = -45.0,&#xA;&#x9;&#x9;&#x9;objCoords = vec3(-449.5656, 6008.538, 31.86523), -- Object coords&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;        textCoords = vec3(-448.67, 6007.52, 31.86523), -- Coords for the interaction text&#xA;        authorizedJobs = { [&#39;police&#39;] = 0 }, -- Job access (checks for a minimum grade of 0)&#xA;        authorizedGangs = { [&#39;vagos&#39;] = 0 }, -- Gang access (checks for a minimum grade of 0)&#xA;        authorizedCitizenIDs = { [&#39;BUI05180&#39;] = true }, -- Citizen ID access&#xA;        items = { [&#39;keycard&#39;] = 1, [&#39;banana&#39;] = 3 }, -- Item access, can be a string or table | the value of the item is the amount of items needed when using a table, if it is a string it will always check if this person has one or more of the item&#xA;        needsAllItems = false, -- true or false | Whether to check if the person has all items to unlock the door or just one of the items&#xA;        allAuthorized = false, -- true or false | Will give access to everyone if it is true&#xA;        locked = true, -- true or false | Is the door locked by default&#xA;        pickable = false, -- true or false | Can the door be lockpicked. Alias: lockpick = false,&#xA;        distance = 2.5, -- At what range the interaction text will show. Alis: maxDistance = 2.5,&#xA;        doorType = &#39;double&#39;, -- The type of door, can be door, double, sliding, doublesliding or garage&#xA;                    fixText = true, -- true or false | fix the text to the center of the door&#xA;        doorLabel = &#39;Cloakroom&#39;, -- Label of the door that shows up when nearby&#xA;        audioRemote = true, -- true or false | Play sound from the player instead of the door&#xA;        audioLock = {[&#39;file&#39;] = &#39;metal-locker.ogg&#39;, [&#39;volume&#39;] = 0.6}, -- Play sound on door lock&#xA;        audioUnlock = {[&#39;file&#39;] = &#39;metallic-creak.ogg&#39;, [&#39;volume&#39;] = 0.7}, -- Play sound on door unlock&#xA;        autoLock = 1000, -- Auto lock after this many miliseconds&#xA;        doorRate = 1.0,  -- The rate of the animation to lock/unlock the door&#xA;        cantUnlock = true -- true or false | Set to true to not allow the player to unlock the door, only lock it. This means a script will have to trigger the unlock&#xA;        hideLabel = true, -- Set to true to hide the popup label, for hiding doors&#xA;        remoteTrigger = true, -- true or false | If you want to be able to remote trigger a door with H, put this here&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>j-hui/fidget.nvim</title>
    <updated>2022-06-24T01:48:50Z</updated>
    <id>tag:github.com,2022-06-24:/j-hui/fidget.nvim</id>
    <link href="https://github.com/j-hui/fidget.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standalone UI for nvim-lsp progress&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fidget.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Standalone UI for nvim-lsp progress. Eye candy for the impatient.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/j-hui/fidget.nvim/raw/media/gifs/fidget-demo-rust-analyzer.gif?raw=true&#34; alt=&#34;fidget.nvim demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;The goals of this plugin are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to provide a UI for nvim-lsp&#39;s &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/specification-3-17/#progress&#34;&gt;progress&lt;/a&gt; handler.&lt;/li&gt; &#xA; &lt;li&gt;to be easy to configure&lt;/li&gt; &#xA; &lt;li&gt;to stay out of the way of other plugins (in particular status lines)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The language server protocol (LSP) defines an &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/specification-3-17/#progress&#34;&gt;endpoint&lt;/a&gt; for servers to report their progress while performing work. This endpoint is supported by Neovim&#39;s builtin LSP client, but only a handful of plugins (that I&#39;m aware of) make use of this feature. Those that do typically report progress in the status line, where space is at a premium and the layout is not well-suited to display the progress of concurrent tasks coming from multiple LSP servers. This approach also made status line configuration more complicated.&lt;/p&gt; &#xA;&lt;p&gt;I wanted be able to see the progress reported by LSP servers without involving the status line. Who doesn&#39;t love a little bit of eye candy?&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim v0.7.0+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;An LSP server that implements LSP&#39;s &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/specification-3-17/#progress&#34;&gt;progress&lt;/a&gt; endpoint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Having a working nvim-lsp setup is not technically necessary to &lt;em&gt;setup&lt;/em&gt; the plugin, but it won&#39;t do anything without a source of progress notifications.&lt;/p&gt; &#xA;&lt;p&gt;For an up-to-date list of LSP servers this plugin is known to work with, see &lt;a href=&#34;https://github.com/j-hui/fidget.nvim/issues/17&#34;&gt;this pinned issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Install this plugin using your favorite plugin manager. For example, using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;j-hui/fidget.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure the plugin installed (e.g., run &lt;code&gt;:PlugInstall&lt;/code&gt; if using vim-plug). After the plugin is loaded (e.g., after &lt;code&gt;plug#end()&lt;/code&gt; for vim-plug), call its &lt;code&gt;setup&lt;/code&gt; function (in Lua):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#34;fidget&#34;.setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/j-hui/fidget.nvim/main/doc/fidget.md&#34;&gt;documentation&lt;/a&gt; for configuration options.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements and Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;This plugin takes inspiration and borrows code from &lt;a href=&#34;https://github.com/arkav/lualine-lsp-progress&#34;&gt;arkav/lualine-lsp-progress&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Fidget spinner designs were adapted from the npm package &lt;a href=&#34;https://github.com/sindresorhus/cli-spinners&#34;&gt;sindresorhus/cli-spinners&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-lua/lsp-status.nvim&#34;&gt;nvim-lua/lsp-status.nvim&lt;/a&gt; also supports showing progress text, though it requires some configuration to integrate that into their status line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;neoclide/coc.nvim&lt;/a&gt; provides a nice LSP progress UI in the status line, which first inspired my desire to have this feature for nvim-lsp.&lt;/p&gt;</summary>
  </entry>
</feed>