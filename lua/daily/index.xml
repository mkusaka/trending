<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-14T01:32:59Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dcampos/nvim-snippy</title>
    <updated>2024-06-14T01:32:59Z</updated>
    <id>tag:github.com,2024-06-14:/dcampos/nvim-snippy</id>
    <link href="https://github.com/dcampos/nvim-snippy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snippet plugin for Neovim written in Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Snippy&lt;/h1&gt; &#xA;&lt;p&gt;A snippets plugin for Neovim &lt;strong&gt;0.7.0+&lt;/strong&gt; written in Lua.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;The plugin is mostly stable and feature complete as a minimal and simple snippets manager. Also, see the &lt;a href=&#34;https://raw.githubusercontent.com/dcampos/nvim-snippy/master/#faq&#34;&gt;FAQ&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses the built-in &lt;code&gt;extmarks&lt;/code&gt; feature&lt;/li&gt; &#xA; &lt;li&gt;Support for defining multiple snippets in a single file&lt;/li&gt; &#xA; &lt;li&gt;Support for expanding LSP provided snippets&lt;/li&gt; &#xA; &lt;li&gt;Full support for the syntax and file format used by SnipMate&lt;/li&gt; &#xA; &lt;li&gt;No dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install using your favorite plugin manager.&lt;/p&gt; &#xA;&lt;p&gt;Using vim-plug:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;dcampos/nvim-snippy&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are no snippets installed by default. You can create your own, or install &lt;code&gt;vim-snippets&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;honza/vim-snippets&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use Snippy with &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;, please install and configure &lt;a href=&#34;https://github.com/dcampos/cmp-snippy&#34;&gt;cmp-snippy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Snippy comes with no mappings activated by default, so you need to define some.&lt;/p&gt; &#xA;&lt;p&gt;For example, to use &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; to expand and jump forward, &lt;code&gt;&amp;lt;S-Tab&lt;/code&gt; to jump back:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;imap &amp;lt;expr&amp;gt; &amp;lt;Tab&amp;gt; snippy#can_expand_or_advance() ? &#39;&amp;lt;Plug&amp;gt;(snippy-expand-or-advance)&#39; : &#39;&amp;lt;Tab&amp;gt;&#39;&#xA;imap &amp;lt;expr&amp;gt; &amp;lt;S-Tab&amp;gt; snippy#can_jump(-1) ? &#39;&amp;lt;Plug&amp;gt;(snippy-previous)&#39; : &#39;&amp;lt;S-Tab&amp;gt;&#39;&#xA;smap &amp;lt;expr&amp;gt; &amp;lt;Tab&amp;gt; snippy#can_jump(1) ? &#39;&amp;lt;Plug&amp;gt;(snippy-next)&#39; : &#39;&amp;lt;Tab&amp;gt;&#39;&#xA;smap &amp;lt;expr&amp;gt; &amp;lt;S-Tab&amp;gt; snippy#can_jump(-1) ? &#39;&amp;lt;Plug&amp;gt;(snippy-previous)&#39; : &#39;&amp;lt;S-Tab&amp;gt;&#39;&#xA;xmap &amp;lt;Tab&amp;gt; &amp;lt;Plug&amp;gt;(snippy-cut-text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using Lua, you can wrap the above block in a &lt;code&gt;vim.cmd([[...]])&lt;/code&gt; call, or call the &lt;code&gt;snippy.setup()&lt;/code&gt; function passing your mapping options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;snippy&#39;).setup({&#xA;    mappings = {&#xA;        is = {&#xA;            [&#39;&amp;lt;Tab&amp;gt;&#39;] = &#39;expand_or_advance&#39;,&#xA;            [&#39;&amp;lt;S-Tab&amp;gt;&#39;] = &#39;previous&#39;,&#xA;        },&#xA;        nx = {&#xA;            [&#39;&amp;lt;leader&amp;gt;x&#39;] = &#39;cut_text&#39;,&#xA;        },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also define separate mappings to expand and jump forward. See &lt;code&gt;:help snippy-usage&lt;/code&gt; and also the &lt;a href=&#34;https://raw.githubusercontent.com/dcampos/wiki/Mappings&#34;&gt;mapping examples&lt;/a&gt; on the Wiki.&lt;/p&gt; &#xA;&lt;h2&gt;Adding snippets&lt;/h2&gt; &#xA;&lt;p&gt;Normally, you should place your custom snippets in &lt;code&gt;$XDG_CONFIG_HOME/nvim/snippets&lt;/code&gt;. However, any &lt;code&gt;snippets&lt;/code&gt; directory in &lt;code&gt;runtimepath&lt;/code&gt; will be searched for snippets. Files with the &lt;code&gt;.snippet&lt;/code&gt; extension contain a single snippet, while files with the &lt;code&gt;.snippets&lt;/code&gt; extension can be used to declare multiple snippets.&lt;/p&gt; &#xA;&lt;p&gt;A basic &lt;code&gt;lua.snippets&lt;/code&gt; file for Lua, demonstrating some of the plugin&#39;s features, would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim-snippet&#34;&gt;# Comments are possible&#xA;snippet fun&#xA;&#x9;function ${1:name}(${2:params})&#xA;&#x9;&#x9;${0:$VISUAL}&#xA;&#x9;end&#xA;snippet upcase&#xA;&#x9;local ${1:var} = &#39;${1/.*/\U\0/g}&#39;&#xA;snippet choices&#xA;&#x9;print(&#39;My favorite language is: ${1|JavaScript,Lua,Rust|}&#39;)&#xA;snippet date&#xA;&#x9;Current date is `strftime(&#39;%c&#39;)`&#xA;# Custom tabstop order&#xA;snippet repeat&#xA;&#x9;repeat&#xA;&#x9;&#x9;${2:what}&#xA;&#x9;while ${1:condition}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find example snippets in the &lt;a href=&#34;https://github.com/honza/vim-snippets&#34;&gt;honza/vim-snippets&lt;/a&gt; repository, which, if installed, Snippy will also use automatically as a source of snippets.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:help snippy-usage-snippets&lt;/code&gt; and &lt;code&gt;:help snippy-snippet-syntax&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Expanding LSP snippets&lt;/h2&gt; &#xA;&lt;p&gt;The LSP snippet syntax is almost fully supported. If you use a completion plugin like nvim-cmp, please install the respective integration plugin listed above in the &lt;a href=&#34;https://raw.githubusercontent.com/dcampos/nvim-snippy/master/#installation&#34;&gt;Installation&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;You can also expand LSP snippets present in completion items provided by Neovim&#39;s built-in &lt;code&gt;vim.lsp.omnifunc&lt;/code&gt;. See &lt;code&gt;:help snippy.complete_done()&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;There are some functional and unit tests available. To run them, use either:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make functionaltest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make unittest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to have &lt;a href=&#34;https://github.com/notomo/vusted&#34;&gt;&lt;code&gt;vusted&lt;/code&gt;&lt;/a&gt; installed for running the unit tests.&lt;/p&gt; &#xA;&lt;h2&gt;Advantages&lt;/h2&gt; &#xA;&lt;p&gt;These are some of the advantages of this plugin when compared with other snippet plugins for Vim/Neovim:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core Neovim only, no external dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Uses built-in &lt;code&gt;extmarks&lt;/code&gt; feature, avoiding insertion of markers in the text.&lt;/li&gt; &#xA; &lt;li&gt;Simple snippet file format, no need to edit JSON files by hand.&lt;/li&gt; &#xA; &lt;li&gt;No need to define snippets in Lua or Vimscript code.&lt;/li&gt; &#xA; &lt;li&gt;Simple and standard snippet syntax.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;Is feature X from Ultisnips available?&lt;/h4&gt; &#xA;&lt;p&gt;This question is very frequently asked and the answer is usually no. UltiSnips is a great snippet manager for those who want to use advanced snippet features, such as Python code evaluation, but that comes with the cost of being heavy and complex, whereas Snippy aims to be minimal and simple. That said, UltiSnips has some useful features, like auto-trigger, that have been added to Snippy in order to improve usability.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt; issues with label &lt;a href=&#34;https://github.com/dcampos/nvim-snippy/issues?q=label%3Aquestion&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/labels/dcampos/nvim-snippy/question&#34; alt=&#34;label: question&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known bugs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is a bug in Neovim where &lt;code&gt;extmarks&lt;/code&gt; are extended to the beginning of the completed item when the &lt;code&gt;complete()&lt;/code&gt; function is called and a completion menu is shown, even if the user does not select or confirm anything. See the &lt;a href=&#34;https://github.com/neovim/neovim/issues/13816&#34;&gt;bug report&lt;/a&gt; for more information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;The snippet parsing code is based on &lt;a href=&#34;https://github.com/hrsh7th/vim-vsnip&#34;&gt;vsnip&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>