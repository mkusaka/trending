<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-23T01:33:44Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>folke/drop.nvim</title>
    <updated>2022-12-23T01:33:44Z</updated>
    <id>tag:github.com,2022-12-23:/folke/drop.nvim</id>
    <link href="https://github.com/folke/drop.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍁 Fun little plugin that can be used as a screensaver and on your dashboard&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🍁 Drop&lt;/h1&gt; &#xA;&lt;p&gt;Fun little plugin that can be used as a screensaver and on your dashboard.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/292349/198708737-a1d2d24a-1faa-40f1-9c6d-ca13c60290b7.webm&#34;&gt;drop.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;automatically enables/disables on dashboard plugins: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-starter.md&#34;&gt;mini.starter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/goolord/alpha-nvim&#34;&gt;alpha-nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;dashboard-nvim&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;runs as a screen saver when no there is no activity for a specified amount of time&lt;/li&gt; &#xA; &lt;li&gt;currently, the following themes are available: &lt;code&gt;&#34;leaves&#34;&lt;/code&gt;, &lt;code&gt;&#34;snow&#34;&lt;/code&gt;, &lt;code&gt;&#34;stars&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8.0&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Font&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Packer&#xA;use({&#xA;  &#34;folke/drop.nvim&#34;,&#xA;  event = &#34;VimEnter&#34;,&#xA;  config = function()&#xA;    require(&#34;drop&#34;).setup()&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;drop.nvim&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ---@type DropTheme|string&#xA;  theme = &#34;leaves&#34;, -- can be one of rhe default themes, or a custom theme&#xA;  max = 40, -- maximum number of drops on the screen&#xA;  interval = 150, -- every 150ms we update the drops&#xA;  screensaver = 1000 * 60 * 5, -- show after 5 minutes. Set to false, to disable&#xA;  filetypes = { &#34;dashboard&#34;, &#34;alpha&#34;, &#34;starter&#34; }, -- will enable/disable automatically for the following filetypes&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>folke/dot</title>
    <updated>2022-12-23T01:33:44Z</updated>
    <id>tag:github.com,2022-12-23:/folke/dot</id>
    <link href="https://github.com/folke/dot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;☕️ My Dot Files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dot Files&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>folke/lazy.nvim</title>
    <updated>2022-12-23T01:33:44Z</updated>
    <id>tag:github.com,2022-12-23:/folke/lazy.nvim</id>
    <link href="https://github.com/folke/lazy.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💤 A modern plugin manager for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;💤 lazy.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; is a modern plugin manager for Neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/208301737-68fb279c-ba70-43ef-a369-8c3e8367d6b1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📦 Manage all your Neovim plugins with a powerful UI&lt;/li&gt; &#xA; &lt;li&gt;🚀 Fast startup times thanks to automatic caching and bytecode compilation of lua modules&lt;/li&gt; &#xA; &lt;li&gt;💾 Partial clones instead of shallow clones&lt;/li&gt; &#xA; &lt;li&gt;🔌 Automatic lazy-loading of lua modules and lazy-loading on events, commands, filetypes, and key mappings&lt;/li&gt; &#xA; &lt;li&gt;⏳ Automatically install missing plugins before starting up Neovim, allowing you to start using it right away&lt;/li&gt; &#xA; &lt;li&gt;💪 Async execution for improved performance&lt;/li&gt; &#xA; &lt;li&gt;🛠️ No need to manually compile plugins&lt;/li&gt; &#xA; &lt;li&gt;🧪 Correct sequencing of dependencies&lt;/li&gt; &#xA; &lt;li&gt;📁 Configurable in multiple files&lt;/li&gt; &#xA; &lt;li&gt;📚 Generates helptags of the headings in &lt;code&gt;README.md&lt;/code&gt; files for plugins that don&#39;t have vimdocs&lt;/li&gt; &#xA; &lt;li&gt;💻 Dev options and patterns for using local plugins&lt;/li&gt; &#xA; &lt;li&gt;📊 Profiling tools to optimize performance&lt;/li&gt; &#xA; &lt;li&gt;🔒 Lockfile &lt;code&gt;lazy-lock.json&lt;/code&gt; to keep track of installed plugins&lt;/li&gt; &#xA; &lt;li&gt;🔎 Automatically check for updates&lt;/li&gt; &#xA; &lt;li&gt;📋 Commit, branch, tag, version, and full &lt;a href=&#34;https://devhints.io/semver&#34;&gt;Semver&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;📈 Statusline component to see the number of pending updates&lt;/li&gt; &#xA; &lt;li&gt;🎨 Automatically lazy-loads colorschemes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.8.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can add the following Lua code to your &lt;code&gt;init.lua&lt;/code&gt; to bootstrap &lt;strong&gt;lazy.nvim&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- bootstrap:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lazypath = vim.fn.stdpath(&#34;data&#34;) .. &#34;/lazy/lazy.nvim&#34;&#xA;if not vim.loop.fs_stat(lazypath) then&#xA;  vim.fn.system({&#xA;    &#34;git&#34;,&#xA;    &#34;clone&#34;,&#xA;    &#34;--filter=blob:none&#34;,&#xA;    &#34;--single-branch&#34;,&#xA;    &#34;https://github.com/folke/lazy.nvim.git&#34;,&#xA;    lazypath,&#xA;  })&#xA;end&#xA;vim.opt.runtimepath:prepend(lazypath)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- bootstrap:end --&gt; &#xA;&lt;p&gt;Next step is to add &lt;strong&gt;lazy.nvim&lt;/strong&gt; to the top of your &lt;code&gt;init.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup(plugins, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;plugins&lt;/strong&gt;: this should be a &lt;code&gt;table&lt;/code&gt; or a &lt;code&gt;string&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;table&lt;/code&gt;: a list with your &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#-plugin-spec&#34;&gt;Plugin Spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;string&lt;/code&gt;: a Lua module name that contains your &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#-plugin-spec&#34;&gt;Plugin Spec&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#-structuring-your-plugins&#34;&gt;Structuring Your Plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;opts&lt;/strong&gt;: see &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#%EF%B8%8F-configuration&#34;&gt;Configuration&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- example using a list of specs with the default options&#xA;vim.g.mapleader = &#34; &#34; -- make sure to set `mapleader` before lazy so your mappings are correct&#xA;&#xA;require(&#34;lazy&#34;).setup({&#xA;  &#34;folke/which-key.nvim&#34;,&#xA;  { &#34;folke/neoconf.nvim&#34;, cmd = &#34;Neoconf&#34; },&#xA;  &#34;folke/neodev.nvim&#34;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ℹ️ It is recommended to run &lt;code&gt;:checkhealth lazy&lt;/code&gt; after installation&lt;/p&gt; &#xA;&lt;h2&gt;🔌 Plugin Spec&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[1]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Short plugin url. Will be expanded using &lt;code&gt;config.git.url_format&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;dir&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A directory pointing to a local plugin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;url&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A custom git url where the plugin is hosted&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A custom name for the plugin used for the local plugin directory and as the display name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;dev&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, a local plugin directory will be used instead. See &lt;code&gt;config.dev&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;lazy&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, the plugin will only be loaded when needed. Lazy-loaded plugins are automatically loaded when their lua modules are &lt;code&gt;required&lt;/code&gt;, or when one of the laz-loading handlers triggers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;enabled&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt; or &lt;code&gt;fun():boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;false&lt;/code&gt;, or if the &lt;code&gt;function&lt;/code&gt; returns false, then this plugin will not be used&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;dependencies&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LazySpec[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list of plugin specs that should be loaded when the plugin loads. Dependencies are always lazy-loaded unless specified otherwise&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;init&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun(LazyPlugin)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;init&lt;/code&gt; functions are always executed during startup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;config&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun(LazyPlugin)&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;config&lt;/code&gt; is executed when the plugin loads. You can also set to &lt;code&gt;true&lt;/code&gt; or pass a &lt;code&gt;table&lt;/code&gt;, that will be passed to &lt;code&gt;require(&#34;plugin&#34;).setup(opts)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;build&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun(LazyPlugin)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;build&lt;/code&gt; is executed when a plugin is installed or updated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;branch&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Branch of the repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;tag&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tag of the repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;commit&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Commit of the repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;version&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Version to use from the repository. Full &lt;a href=&#34;https://devhints.io/semver&#34;&gt;Semver&lt;/a&gt; ranges are supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;pin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, this plugin will not be included in updates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;event&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on event&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;cmd&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ft&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on filetype&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;keys&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt; or &lt;code&gt;LazyKeys[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on key mapping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;module&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do not automatically load this lua module when it&#39;s required somewhere&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Lazy Loading&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; automagically lazy-loads Lua modules, so it is not needed to specify &lt;code&gt;module=...&lt;/code&gt; everywhere in your plugin specification. This mean that if you have a plugin &lt;code&gt;A&lt;/code&gt; that is lazy-loaded and a plugin &lt;code&gt;B&lt;/code&gt; that requires a module of plugin &lt;code&gt;A&lt;/code&gt;, then plugin &lt;code&gt;A&lt;/code&gt; will be loaded on demand as expected.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want this behavior for a certain plugin, you can specify that with &lt;code&gt;module=false&lt;/code&gt;. You can then manually load the plugin with &lt;code&gt;:Lazy load foobar.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Colorscheme plugins can be configured with &lt;code&gt;lazy=true&lt;/code&gt;. The plugin will automagically load when doing &lt;code&gt;colorscheme foobar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can configure &lt;strong&gt;lazy.nvim&lt;/strong&gt; to lazy-load all plugins by default with &lt;code&gt;config.defaults.lazy = true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can also lazy-load on &lt;strong&gt;events&lt;/strong&gt;, &lt;strong&gt;commands&lt;/strong&gt;, &lt;strong&gt;file types&lt;/strong&gt; and &lt;strong&gt;key mappings&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins will be lazy-loaded when one of the following is &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the plugin only exists as a dependency in your spec&lt;/li&gt; &#xA; &lt;li&gt;it has an &lt;code&gt;event&lt;/code&gt;, &lt;code&gt;cmd&lt;/code&gt;, &lt;code&gt;ft&lt;/code&gt; or &lt;code&gt;keys&lt;/code&gt; key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config.defaults.lazy == true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;⌨️ Lazy Key Mappings&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;keys&lt;/code&gt; property can be a &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt; for simple normal-mode mappings, or it can be a &lt;code&gt;LazyKeys&lt;/code&gt; table with the following key-value pairs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[1]&lt;/strong&gt;: (&lt;code&gt;string&lt;/code&gt;) lhs &lt;strong&gt;&lt;em&gt;(required)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2]&lt;/strong&gt;: (&lt;code&gt;string|fun()&lt;/code&gt;) rhs &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;: (&lt;code&gt;string|string[]&lt;/code&gt;) mode &lt;strong&gt;&lt;em&gt;(optional, defaults to &lt;code&gt;&#34;n&#34;&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;any other option valid for &lt;code&gt;vim.keymap.set&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Key mappings will load the plugin the first time they get executed.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;[2]&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, then the real mapping has to be created by the &lt;code&gt;config()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example for neo-tree.nvim&#xA;{&#xA;  &#34;nvim-neo-tree/neo-tree.nvim&#34;,&#xA;    keys = {&#xA;      { &#34;&amp;lt;leader&amp;gt;ft&#34;, &#34;&amp;lt;cmd&amp;gt;Neotree toggle&amp;lt;cr&amp;gt;&#34;, desc = &#34;NeoTree&#34; },&#xA;    },&#xA;    config = function()&#xA;      require(&#34;neo-tree&#34;).setup()&#xA;      end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;p&gt;If you want to install a specific revision of a plugin, you can use &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;version&lt;/code&gt; property supports &lt;a href=&#34;https://semver.org/&#34;&gt;Semver&lt;/a&gt; ranges.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see some examples&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;*&lt;/code&gt;: latest stable version (this excludes pre-release versions)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;1.2.x&lt;/code&gt;: any version that starts with &lt;code&gt;1.2&lt;/code&gt;, such as &lt;code&gt;1.2.0&lt;/code&gt;, &lt;code&gt;1.2.3&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;^1.2.3&lt;/code&gt;: any version that is compatible with &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.3.0&lt;/code&gt;, &lt;code&gt;1.4.5&lt;/code&gt;, etc., but not &lt;code&gt;2.0.0&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;~1.2.3&lt;/code&gt;: any version that is compatible with &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.2.4&lt;/code&gt;, &lt;code&gt;1.2.5&lt;/code&gt;, but not &lt;code&gt;1.3.0&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;gt;1.2.3&lt;/code&gt;: any version that is greater than &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.3.0&lt;/code&gt;, &lt;code&gt;1.4.5&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;gt;=1.2.3&lt;/code&gt;: any version that is greater than or equal to &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.2.3&lt;/code&gt;, &lt;code&gt;1.3.0&lt;/code&gt;, &lt;code&gt;1.4.5&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;lt;1.2.3&lt;/code&gt;: any version that is less than &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.1.0&lt;/code&gt;, &lt;code&gt;1.0.5&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;lt;=1.2.3&lt;/code&gt;: any version that is less than or equal to &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.2.3&lt;/code&gt;, &lt;code&gt;1.1.0&lt;/code&gt;, &lt;code&gt;1.0.5&lt;/code&gt;, etc&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;config.defaults.version = &#34;*&#34;&lt;/code&gt; to install the latest stable version of plugins that support Semver.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;!-- spec:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  -- the colorscheme should be available when starting Neovim&#xA;  &#34;folke/tokyonight.nvim&#34;,&#xA;&#xA;  -- I have a separate config.mappings file where I require which-key.&#xA;  -- With lazy the plugin will be automatically loaded when it is required somewhere&#xA;  { &#34;folke/which-key.nvim&#34;, lazy = true },&#xA;&#xA;  {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    -- lazy-load on filetype&#xA;    ft = &#34;norg&#34;,&#xA;    -- custom config that will be executed when loading the plugin&#xA;    config = function()&#xA;      require(&#34;neorg&#34;).setup()&#xA;    end,&#xA;  },&#xA;&#xA;  -- the above could also be written as&#xA;  {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    ft = &#34;norg&#34;,&#xA;    config = true, -- run require(&#34;norg&#34;).setup()&#xA;  },&#xA;&#xA;  -- or set custom config&#xA;  {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    ft = &#34;norg&#34;,&#xA;    config = { foo = &#34;bar&#34; }, -- run require(&#34;norg&#34;).setup({foo = &#34;bar&#34;})&#xA;  },&#xA;&#xA;  {&#xA;    &#34;dstein64/vim-startuptime&#34;,&#xA;    -- lazy-load on a command&#xA;    cmd = &#34;StartupTime&#34;,&#xA;  },&#xA;&#xA;  {&#xA;    &#34;hrsh7th/nvim-cmp&#34;,&#xA;    -- load cmp on InsertEnter&#xA;    event = &#34;InsertEnter&#34;,&#xA;    -- these dependencies will only be loaded when cmp loads&#xA;    -- dependencies are always lazy-loaded unless specified otherwise&#xA;    dependencies = {&#xA;      &#34;hrsh7th/cmp-nvim-lsp&#34;,&#xA;      &#34;hrsh7th/cmp-buffer&#34;,&#xA;    },&#xA;    config = function()&#xA;      -- ...&#xA;    end,&#xA;  },&#xA;&#xA;  -- you can use the VeryLazy event for things that can&#xA;  -- load later and are not important for the initial UI&#xA;  { &#34;stevearc/dressing.nvim&#34;, event = &#34;VeryLazy&#34; },&#xA;&#xA;  {&#xA;    &#34;cshuaimin/ssr.nvim&#34;,&#xA;    -- init is always executed during startup, but doesn&#39;t load the plugin yet.&#xA;    init = function()&#xA;      vim.keymap.set({ &#34;n&#34;, &#34;x&#34; }, &#34;&amp;lt;leader&amp;gt;cR&#34;, function()&#xA;        -- this require will automatically load the plugin&#xA;        require(&#34;ssr&#34;).open()&#xA;      end, { desc = &#34;Structural Replace&#34; })&#xA;    end,&#xA;  },&#xA;&#xA;  {&#xA;    &#34;monaqa/dial.nvim&#34;,&#xA;    -- lazy-load on keys&#xA;    keys = { &#34;&amp;lt;C-a&amp;gt;&#34;, &#34;&amp;lt;C-x&amp;gt;&#34; },&#xA;  },&#xA;&#xA;  -- local plugins need to be explicitly configured with dir&#xA;  { dir = &#34;~/projects/secret.nvim&#34; },&#xA;&#xA;  -- you can use a custom url to fetch a plugin&#xA;  { url = &#34;git@github.com:folke/noice.nvim.git&#34; },&#xA;&#xA;  -- local plugins can also be configure with the dev option.&#xA;  -- This will use {config.dev.path}/noice.nvim/ instead of fetching it from Github&#xA;  -- With the dev option, you can easily switch between the local and installed version of a plugin&#xA;  { &#34;folke/noice.nvim&#34;, dev = true },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- spec:end --&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;!-- config:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  root = vim.fn.stdpath(&#34;data&#34;) .. &#34;/lazy&#34;, -- directory where plugins will be installed&#xA;  defaults = {&#xA;    lazy = false, -- should plugins be lazy-loaded?&#xA;    version = nil,&#xA;    -- version = &#34;*&#34;, -- enable this to try installing the latest stable versions of plugins&#xA;  },&#xA;  lockfile = vim.fn.stdpath(&#34;config&#34;) .. &#34;/lazy-lock.json&#34;, -- lockfile generated after running update.&#xA;  concurrency = nil, ---@type number limit the maximum amount of concurrent tasks&#xA;  git = {&#xA;    -- defaults for the `Lazy log` command&#xA;    -- log = { &#34;-10&#34; }, -- show the last 10 commits&#xA;    log = { &#34;--since=3 days ago&#34; }, -- show commits from the last 3 days&#xA;    timeout = 120, -- kill processes that take more than 2 minutes&#xA;    url_format = &#34;https://github.com/%s.git&#34;,&#xA;  },&#xA;  dev = {&#xA;    -- directory where you store your local plugin projects&#xA;    path = &#34;~/projects&#34;,&#xA;    ---@type string[] plugins that match these patterns will use your local versions instead of being fetched from GitHub&#xA;    patterns = {}, -- For example {&#34;folke&#34;}&#xA;  },&#xA;  install = {&#xA;    -- install missing plugins on startup. This doesn&#39;t increase startup time.&#xA;    missing = true,&#xA;    -- try to load one of these colorschemes when starting an installation during startup&#xA;    colorscheme = { &#34;habamax&#34; },&#xA;  },&#xA;  ui = {&#xA;    -- a number &amp;lt;1 is a percentage., &amp;gt;1 is a fixed size&#xA;    size = { width = 0.8, height = 0.8 },&#xA;    -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.&#xA;    border = &#34;none&#34;,&#xA;    icons = {&#xA;      cmd = &#34; &#34;,&#xA;      config = &#34;&#34;,&#xA;      event = &#34;&#34;,&#xA;      ft = &#34; &#34;,&#xA;      init = &#34; &#34;,&#xA;      keys = &#34; &#34;,&#xA;      plugin = &#34; &#34;,&#xA;      runtime = &#34; &#34;,&#xA;      source = &#34; &#34;,&#xA;      start = &#34;&#34;,&#xA;      task = &#34;✔ &#34;,&#xA;    },&#xA;    throttle = 20, -- how frequently should the ui process render events&#xA;  },&#xA;  checker = {&#xA;    -- automatically check for plugin updates&#xA;    enabled = false,&#xA;    concurrency = nil, ---@type number? set to 1 to check for updates very slowly&#xA;    notify = true, -- get a notification when new updates are found&#xA;    frequency = 3600, -- check for updates every hour&#xA;  },&#xA;  change_detection = {&#xA;    -- automatically check for config file changes and reload the ui&#xA;    enabled = true,&#xA;    notify = true, -- get a notification when changes are found&#xA;  },&#xA;  performance = {&#xA;    cache = {&#xA;      enabled = true,&#xA;      path = vim.fn.stdpath(&#34;state&#34;) .. &#34;/lazy/cache&#34;,&#xA;      -- Once one of the following events triggers, caching will be disabled.&#xA;      -- To cache all modules, set this to `{}`, but that is not recommended.&#xA;      -- The default is to disable on:&#xA;      --  * VimEnter: not useful to cache anything else beyond startup&#xA;      --  * BufReadPre: this will be triggered early when opening a file from the command line directly&#xA;      disable_events = { &#34;VimEnter&#34;, &#34;BufReadPre&#34; },&#xA;    },&#xA;    reset_packpath = true, -- reset the package path to improve startup time&#xA;    rtp = {&#xA;      reset = true, -- reset the runtime path to $VIMRUNTIME and your config directory&#xA;      ---@type string[]&#xA;      paths = {}, -- add any custom paths here that you want to indluce in the rtp&#xA;      ---@type string[] list any plugins you want to disable here&#xA;      disabled_plugins = {&#xA;        -- &#34;gzip&#34;,&#xA;        -- &#34;matchit&#34;,&#xA;        -- &#34;matchparen&#34;,&#xA;        -- &#34;netrwPlugin&#34;,&#xA;        -- &#34;tarPlugin&#34;,&#xA;        -- &#34;tohtml&#34;,&#xA;        -- &#34;tutor&#34;,&#xA;        -- &#34;zipPlugin&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;  -- lazy can generate helptags from the headings in markdown readme files,&#xA;  -- so :help works even for plugins that don&#39;t have vim docs.&#xA;  -- when the readme opens with :help it will be correctly displayed as markdown&#xA;  readme = {&#xA;    root = vim.fn.stdpath(&#34;state&#34;) .. &#34;/lazy/readme&#34;,&#xA;    files = { &#34;README.md&#34; },&#xA;    -- only generate markdown helptags for plugins that dont have docs&#xA;    skip_if_doc_exists = true,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- config:end --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;If you don&#39;t want to use a Nerd Font, you can replace the icons with Unicode symbols.&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ui = {&#xA;    icons = {&#xA;      cmd = &#34;⌘&#34;,&#xA;      config = &#34;🛠&#34;,&#xA;      event = &#34;📅&#34;,&#xA;      ft = &#34;📂&#34;,&#xA;      init = &#34;⚙&#34;,&#xA;      keys = &#34;🗝&#34;,&#xA;      plugin = &#34;🔌&#34;,&#xA;      runtime = &#34;💻&#34;,&#xA;      source = &#34;📄&#34;,&#xA;      start = &#34;🚀&#34;,&#xA;      task = &#34;📌&#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;p&gt;Plugins are managed with the &lt;code&gt;:Lazy&lt;/code&gt; command. Open the help with &lt;code&gt;&amp;lt;?&amp;gt;&lt;/code&gt; to see all the key mappings.&lt;/p&gt; &#xA;&lt;p&gt;You can press &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; on a plugin to show its details. Most properties can be hovered with &lt;code&gt;&amp;lt;K&amp;gt;&lt;/code&gt; to open links, help files, readmes, git commits and git issues.&lt;/p&gt; &#xA;&lt;p&gt;Lazy can automatically check for updates in the background. This feature can be enabled with &lt;code&gt;config.checker.enabled = true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any operation can be started from the UI, with a sub command or an API function:&lt;/p&gt; &#xA;&lt;!-- commands:start --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Lua&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy check [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).check(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check for updates and show the log (git fetch)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy clean [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).clean(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clean plugins that are no longer needed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy clear&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).clear()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clear finished tasks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy debug&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).debug()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show debug information&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy help&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).help()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle this help page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy home&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).home()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go back to plugin list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy install [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).install(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Install missing plugins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy load {plugins}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).load(opts)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Load a plugin that has not been loaded yet. Similar to &lt;code&gt;:packadd&lt;/code&gt;. Like &lt;code&gt;:Lazy load foo.nvim&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy log [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).log(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show recent updates for all plugins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy profile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).profile()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show detailed profiling&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy restore [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).restore(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Updates all plugins to the state in the lockfile&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy sync [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).sync(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run install, clean and update&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy update [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).update(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Update all plugins. This will also update the lockfile&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- commands:end --&gt; &#xA;&lt;p&gt;Any command can have a &lt;strong&gt;bang&lt;/strong&gt; to make the command wait till it finished. For example, if you want to sync lazy from the cmdline, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ nvim --headless &#34;+Lazy! sync&#34; +qa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;opts&lt;/code&gt; is a table with the following key-values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;wait&lt;/strong&gt;: when true, then the call will wait till the operation completed&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;show&lt;/strong&gt;: when false, the UI will not be shown&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;plugins&lt;/strong&gt;: a list of plugin names to run the operation on&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;concurrency&lt;/strong&gt;: limit the &lt;code&gt;number&lt;/code&gt; of concurrently running tasks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to display the number of plugins on your dashboard, you can use this simple API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local plugins = require(&#34;lazy&#34;).stats().count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; provides a statusline component that you can use to show the number of pending updates. Make sure to enable &lt;code&gt;config.checker.enabled = true&lt;/code&gt; to make this work.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of configuring &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lualine&#34;).setup({&#xA;  sections = {&#xA;    lualine_x = {&#xA;      {&#xA;        require(&#34;lazy.status&#34;).updates,&#xA;        cond = require(&#34;lazy.status&#34;).has_updates,&#xA;        color = { fg = &#34;#ff9e64&#34; },&#xA;      },&#xA;    },&#xA;  },&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🔒 Lockfile &lt;code&gt;lazy-lock.json&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;After every &lt;strong&gt;update&lt;/strong&gt;, the local lockfile is updated with the installed revisions. It is recommended to have this file under version control.&lt;/p&gt; &#xA;&lt;p&gt;If you use your Neovim config on multiple machines, using the lockfile, you can ensure that the same version of every plugin is installed.&lt;/p&gt; &#xA;&lt;p&gt;On the other machine, you can do &lt;code&gt;Lazy restore&lt;/code&gt;, to update all your plugins to the version from the lockfile&lt;/p&gt; &#xA;&lt;h2&gt;⚡ Performance&lt;/h2&gt; &#xA;&lt;p&gt;Great care has been taken to make the startup code (&lt;code&gt;lazy.core&lt;/code&gt;) as efficient as possible. During startup, all lua files used before &lt;code&gt;VimEnter&lt;/code&gt; or &lt;code&gt;BufReadPre&lt;/code&gt; are byte-compiled and cached, similar to what &lt;a href=&#34;https://github.com/lewis6991/impatient.nvim&#34;&gt;impatient.nvim&lt;/a&gt; does.&lt;/p&gt; &#xA;&lt;p&gt;My config for example loads in about &lt;code&gt;11ms&lt;/code&gt; with &lt;code&gt;93&lt;/code&gt; plugins. I do a lot of lazy-loading though :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; comes with an advanced profiler &lt;code&gt;:Lazy profile&lt;/code&gt; to help you improve performance. The profiling view shows you why and how long it took to load your plugins.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/208301766-5c400561-83c3-4811-9667-1ec4bb3c43b8.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🪲 Debug&lt;/h2&gt; &#xA;&lt;p&gt;See an overview of active lazy-loading handlers and what&#39;s in the module cache&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/208301790-7eedbfa5-d202-4e70-852e-de68aa47233b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;▶️ Startup Sequence&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; does &lt;strong&gt;NOT&lt;/strong&gt; use Neovim packages and even disables plugin loading completely (&lt;code&gt;vim.go.loadplugins = false&lt;/code&gt;). It takes over the complete startup sequence for more flexibility and better performance.&lt;/p&gt; &#xA;&lt;p&gt;In practice this means that step 10 of &lt;a href=&#34;https://neovim.io/doc/user/starting.html#initialization&#34;&gt;Neovim Initialization&lt;/a&gt; is done by Lazy:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;all the plugins&#39; &lt;code&gt;init()&lt;/code&gt; functions are executed&lt;/li&gt; &#xA; &lt;li&gt;all plugins with &lt;code&gt;lazy=false&lt;/code&gt; are loaded. This includes sourcing &lt;code&gt;/plugin&lt;/code&gt; and &lt;code&gt;/ftdetect&lt;/code&gt; files. (&lt;code&gt;/after&lt;/code&gt; will not be sourced yet)&lt;/li&gt; &#xA; &lt;li&gt;all files from &lt;code&gt;/plugin&lt;/code&gt; and &lt;code&gt;/ftdetect&lt;/code&gt; directories in you rtp are sourced (excluding &lt;code&gt;/after&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;all &lt;code&gt;/after/plugin&lt;/code&gt; files are sourced (this inludes &lt;code&gt;/after&lt;/code&gt; from plugins)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Files from runtime directories are always sourced in alphabetical order.&lt;/p&gt; &#xA;&lt;h2&gt;📂 Structuring Your Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Some users may want to split their plugin specs in multiple files. Instead of passing a spec table to &lt;code&gt;setup()&lt;/code&gt;, you can use a lua module. The specs from the &lt;strong&gt;module&lt;/strong&gt; and any &lt;strong&gt;sub-modules&lt;/strong&gt; will be merged together in the final spec, so it is not needed to add &lt;code&gt;require&lt;/code&gt; calls in your main plugin file to the other files.&lt;/p&gt; &#xA;&lt;p&gt;The benefits of using this approach:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;simple to &lt;strong&gt;add&lt;/strong&gt; new plugin specs. Just create a new file in your plugins module.&lt;/li&gt; &#xA; &lt;li&gt;allows for &lt;strong&gt;caching&lt;/strong&gt; of all your plugin specs. This becomes important if you have a lot of smaller plugin specs.&lt;/li&gt; &#xA; &lt;li&gt;spec changes will automatically be &lt;strong&gt;reloaded&lt;/strong&gt; when they&#39;re updated, so the &lt;code&gt;:Lazy&lt;/code&gt; UI is always up to date&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup(&#34;plugins&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/nvim/lua/plugins.lua&lt;/code&gt; or &lt;code&gt;~/.config/nvim/lua/plugins/init.lua&lt;/code&gt; &lt;strong&gt;&lt;em&gt;(this file is optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;folke/neodev.nvim&#34;,&#xA;    &#34;folke/which-key.nvim&#34;,&#xA;    { &#34;folke/neoconf.nvim&#34;, cmd = &#34;Neoconf&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;any lua file in &lt;code&gt;~/.config/nvim/lua/plugins/*.lua&lt;/code&gt; will be automatically merged in the main plugin spec&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a real-life example, you can check my personal dots:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/dot/raw/master/config/nvim/init.lua&#34;&gt;init.lua&lt;/a&gt; where I require &lt;code&gt;config.lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/dot/raw/master/config/nvim/lua/config/lazy.lua&#34;&gt;config.lazy&lt;/a&gt; where I bootstrap and setup &lt;strong&gt;lazy.nvim&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/dot/raw/master/config/nvim/lua/config/plugins.lua&#34;&gt;config.plugins&lt;/a&gt; is my main plugin config module&lt;/li&gt; &#xA; &lt;li&gt;Any submodule of &lt;a href=&#34;https://github.com/folke/dot/tree/master/config/nvim/lua/config/plugins&#34;&gt;config.plugins (submodules)&lt;/a&gt; will be automatically loaded as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Migration Guide&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;setup&lt;/code&gt; ➡️ &lt;code&gt;init&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;requires&lt;/code&gt; ➡️ &lt;code&gt;dependencies&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;as&lt;/code&gt; ➡️ &lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opt&lt;/code&gt; ➡️ &lt;code&gt;lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run&lt;/code&gt; ➡️ &lt;code&gt;build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lock&lt;/code&gt; ➡️ &lt;code&gt;pin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disable=true&lt;/code&gt; ➡️ &lt;code&gt;enabled = false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tag=&#39;*&#39;&lt;/code&gt; ➡️ &lt;code&gt;version=&#34;*&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;module&lt;/code&gt; is auto-loaded. No need to specify&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/savq/paq-nvim&#34;&gt;paq-nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;as&lt;/code&gt; ➡️ &lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opt&lt;/code&gt; ➡️ &lt;code&gt;lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run&lt;/code&gt; ➡️ &lt;code&gt;build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;❌ Uninstalling&lt;/h2&gt; &#xA;&lt;p&gt;To uninstall &lt;strong&gt;lazy.nvim&lt;/strong&gt;, you need to remove the following files and directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: &lt;code&gt;~/.local/share/nvim/lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;: &lt;code&gt;~/.local/state/nvim/lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lockfile&lt;/strong&gt;: &lt;code&gt;~/.config/nvim/lazy-lock.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;paths can differ if you changed &lt;code&gt;XDG&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;📦 Other Neovim Plugin Managers in Lua&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/savq/paq-nvim&#34;&gt;paq-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ii14/neopm&#34;&gt;neopm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chiyadev/dep&#34;&gt;dep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/notomo/optpack.nvim&#34;&gt;optpack.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rktjmp/pact.nvim&#34;&gt;pact.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>