<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:36:38Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>elihunter173/dirbuf.nvim</title>
    <updated>2022-11-01T01:36:38Z</updated>
    <id>tag:github.com,2022-11-01:/elihunter173/dirbuf.nvim</id>
    <link href="https://github.com/elihunter173/dirbuf.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A file manager for Neovim which lets you edit your filesystem like you edit text&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dirbuf.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A directory buffer for Neovim that lets you edit your filesystem like you edit text. Inspired by &lt;a href=&#34;https://github.com/justinmk/vim-dirvish&#34;&gt;vim-dirvish&lt;/a&gt; and &lt;a href=&#34;https://github.com/trapd00r/vidir&#34;&gt;vidir&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Intuitive:&lt;/em&gt; Create, copy, delete, and rename files, directories, and more by editing their lines in the directory buffer. Buffer names are automatically updated to reflect changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Minimal:&lt;/em&gt; Works out of the box with no configuration. Default mappings easily changed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Unobtrusive:&lt;/em&gt; Preserves alternate buffers and navigation history. Switch between files with &lt;code&gt;Ctrl-^&lt;/code&gt; (&lt;code&gt;Ctrl-6&lt;/code&gt;) and jump around your navigation history with custom &lt;code&gt;&amp;lt;Plug&amp;gt;&lt;/code&gt; mappings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Safe:&lt;/em&gt; Does not modify the filesystem until you save the buffer. Optionally request confirmation and dry-run saving.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Reliable:&lt;/em&gt; Resolves inter-dependencies in batch renames, including cycles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Polite:&lt;/em&gt; Plays nicely with tree-based file viewers like &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt;, &lt;a href=&#34;https://github.com/lambdalisue/fern.vim&#34;&gt;fern.vim&lt;/a&gt;, and &lt;a href=&#34;https://github.com/SidOfc/carbon.nvim&#34;&gt;carbon.nvim&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/42009212/162110083-9fd3701f-8ffb-4cf7-9333-d57020a9242e.mp4&#34;&gt;https://user-images.githubusercontent.com/42009212/162110083-9fd3701f-8ffb-4cf7-9333-d57020a9242e.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requires &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.6.0&#34;&gt;Neovim 0.6&lt;/a&gt; or higher.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#34;elihunter173/dirbuf.nvim&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#34;elihunter173/dirbuf.nvim&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;&lt;code&gt;nvim-tree.lua&lt;/code&gt;&lt;/a&gt;, you must disable the &lt;code&gt;:help nvim-tree.update_to_buf_dir&lt;/code&gt; option. Otherwise, Dirbuf will fail to open directory buffers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-tree&#34;).setup {&#xA;    update_to_buf_dir = { enable = false }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run the command &lt;code&gt;:Dirbuf&lt;/code&gt; to open a directory buffer. Press &lt;code&gt;-&lt;/code&gt; in any buffer to open a directory buffer for its parent. Editing a directory will also open up a directory buffer, overriding Netrw.&lt;/p&gt; &#xA;&lt;p&gt;Inside a directory buffer, there are the following keybindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;: Open the file or directory at the cursor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gh&lt;/code&gt;: Toggle showing hidden files (i.e. dot files).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&lt;/code&gt;: Open parent directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;code&gt;:help dirbuf.txt&lt;/code&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Configuration is not necessary for Dirbuf to work. But for those that want to override the default config, the following options are available with their default values listed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dirbuf&#34;).setup {&#xA;    hash_padding = 2,&#xA;    show_hidden = true,&#xA;    sort_order = &#34;default&#34;,&#xA;    write_cmd = &#34;DirbufSync&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/elihunter173/dirbuf.nvim/main/doc/dirbuf.txt&#34;&gt;documentation&lt;/a&gt; for more information (&lt;code&gt;:help dirbuf-options&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/casey/just&#34;&gt;Justfile&lt;/a&gt; is provided to test and lint the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Run unit tests&#xA;$ just test&#xA;# Run luacheck&#xA;$ just lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;just test&lt;/code&gt; will automatically download &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;&#39;s test harness and run the &lt;code&gt;*_spec.lua&lt;/code&gt; tests in &lt;code&gt;tests/&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Rencikas/ren-businesses</title>
    <updated>2022-11-01T01:36:38Z</updated>
    <id>tag:github.com,2022-11-01:/Rencikas/ren-businesses</id>
    <link href="https://github.com/Rencikas/ren-businesses" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A business script for qbcore&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;This is a plug and play script made for qbcore. It allows you to configure multiple businesses just in a single resource&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/85559163/198835306-a319679d-ed28-4c0d-b258-592757325dd1.png&#34; alt=&#34;renbusinnes&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Are you tired of having to add 20 million different business scripts that all do the same but are just registered with a different job? Well me TO!! introducing ren-businesses now you don&#39;t have to worry about adding a new business script you can just configure them in the config with just few clicks and few keyboard strokes. You&#39;re probably are asking but does ren-businesses have everything? Well maybe not everything but it is sure enough for your business man desires. ren-businesses comes included with duty, cash register, storage, outfit, ingredient store and crafting. And did I told you this is fully free? yes you heard me right&lt;/p&gt; &#xA;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;p&gt;You can easily config every part of this business system, you can remove the unneeded things and the system won&#39;t break&lt;/p&gt; &#xA;&lt;h1&gt;How to configure zones&lt;/h1&gt; &#xA;&lt;p&gt;Target points are created with qb-target box zones so to add a new location you will need to use built in zone creating tools from PolyZone. You can find there wiki on how to use the tools &lt;a href=&#34;https://github.com/mkafrin/PolyZone/wiki/Using-the-creation-script&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Suggestions&lt;/h1&gt; &#xA;&lt;p&gt;I am fully open for suggestions and if you find that this scripts lacks in some features please let me know!&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;Crafting table with fully customizable item requirements, Duty, Cloak rooms, with player saved outfits, Cash register, where employees can create a new bill and customers can pay with targeting the cash register and split the profits with the business owner and the worker, Storages that you can easily customize to your likings, ingredient stores with fully customizable items, item price and item authorization&lt;/p&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;qb-target&lt;/strong&gt;, &lt;strong&gt;qb-core&lt;/strong&gt;, &lt;strong&gt;qb-inventory&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Thanks Å POKAS#8262 for making this background image!!!&lt;/p&gt; &#xA;&lt;h1&gt;My other work&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Rencikas/ren-grandma&#34;&gt;ren-grandma&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ThePrimeagen/vim-be-good</title>
    <updated>2022-11-01T01:36:38Z</updated>
    <id>tag:github.com,2022-11-01:/ThePrimeagen/vim-be-good</id>
    <link href="https://github.com/ThePrimeagen/vim-be-good" rel="alternate"></link>
    <summary type="html">&lt;p&gt;vim-be-good is a nvim plugin designed to make you better at Vim Movements.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vim-be-good&lt;/h1&gt; &#xA;&lt;p&gt;Vim be good is a plugin designed to make you better at vim by creating a game to practice basic movements in.&lt;/p&gt; &#xA;&lt;h2&gt;Programmed with Love and Fury&lt;/h2&gt; &#xA;&lt;p&gt;and tunes &lt;a href=&#34;https://www.youtube.com/watch?v=emOKaGi8u5U&#34;&gt;https://www.youtube.com/watch?v=emOKaGi8u5U&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;WARNING&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The code is a heaping pile of awfulness. It was developed live on Twitch, which means I did not carefully think through anything other than memes.&lt;/li&gt; &#xA; &lt;li&gt;If you wish to create your own game, look at how relative is done. Everything else should be straight forward, except for the parts that are not.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Difficulty&lt;/h2&gt; &#xA;&lt;p&gt;The difficulty only works on a few games for now. Still a work in progress, if you have any ideas, please submit them either as tickets or as a PR.&lt;/p&gt; &#xA;&lt;h2&gt;Ideas?&lt;/h2&gt; &#xA;&lt;p&gt;Please submit a ticket for your idea!!!&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;h3&gt;Games - relative&lt;/h3&gt; &#xA;&lt;p&gt;By default vim be good returns random offset for game difficulty above noob, if you wish to set fixed offset set &lt;code&gt;vim_be_good_delete_me_offset&lt;/code&gt; to desired value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;let g:vim_be_good_delete_me_offset = 35&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Instructions are at the top of games.&lt;/h2&gt; &#xA;&lt;p&gt;here too!&lt;/p&gt; &#xA;&lt;p&gt;To play &lt;code&gt;relative&lt;/code&gt; you need to delete the line that says &lt;code&gt;DELETE ME&lt;/code&gt;. Use relative jumps&lt;/p&gt; &#xA;&lt;p&gt;To play &lt;code&gt;ci{&lt;/code&gt; you need to replace the contents inside the &lt;em&gt;first&lt;/em&gt; { or [ with bar. HINT, use ci[ or ci{ and type bar.&lt;/p&gt; &#xA;&lt;p&gt;To play &lt;code&gt;whackamole&lt;/code&gt; you need to navigate to the character with the caret under it as fast as possible. Once you have reached the character, flip the character&#39;s case to complete the round.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h2&gt;MUST USE NEOVIM 5.x!!!!!!&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use your favorite plugin manager to install! Only works on Nvim, the one true vim.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;Plug &#39;ThePrimeagen/vim-be-good&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;If you would like, you can use docker to run the game. Doing this will automatically use the correct version of neovim for you, as well as run the game immediately when neovim starts.&lt;/p&gt; &#xA;&lt;h4&gt;Stable image&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/brandoncc/docker-vim-be-good/raw/master/stable/Dockerfile&#34;&gt;This image&lt;/a&gt; always runs the version of the game that was bundled when the image was built. Images are generally built within one day of the main branch receiving new commits, but you won&#39;t get the new images unless you manually run &lt;code&gt;docker pull brandoncc/vim-be-good:stable&lt;/code&gt; periodically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm brandoncc/vim-be-good:stable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&#34;Latest&#34; image&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/brandoncc/docker-vim-be-good/raw/master/latest/Dockerfile&#34;&gt;This image&lt;/a&gt; runs &lt;code&gt;:PlugUpdate&lt;/code&gt; before running neovim. This adds about one second to the startup time of the game. The trade-off is that you are always playing the latest version of the game, as long as your machine is able to access Github.com to pull it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm brandoncc/vim-be-good:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Playing the games.&lt;/h2&gt; &#xA;&lt;p&gt;Before doing ANYTHING at all, make sure you are in an empty file. If the file you are in is not empty, VimBeGood will throw an error.&lt;/p&gt; &#xA;&lt;p&gt;Ok, you are in an empty file, so first execute the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;:VimBeGood&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will echo out the available set of games. Each game can take a set of options to change how it is played, the above help menu should include each game.&lt;/p&gt; &#xA;&lt;h2&gt;Future Games&lt;/h2&gt; &#xA;&lt;p&gt;Please make an issue if you have a command you wish to practice and i&#39;ll make it into a game!!&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;Please file an issue. But if you do, please run the logger first and paste in the input.&lt;/p&gt; &#xA;&lt;p&gt;To initialize the logger, add this to your vimrc&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;let g:vim_be_good_log_file = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to get the log file executed &lt;code&gt;:echo stdpath(&#34;data&#34;)&lt;/code&gt; to find the path and then copy paste it into the issues.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork&lt;/li&gt; &#xA; &lt;li&gt;Create a feature branch&lt;/li&gt; &#xA; &lt;li&gt;Make changes&lt;/li&gt; &#xA; &lt;li&gt;Modify the configuration to use local build: &lt;code&gt;~/.config/nvim/init.vim&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;    call plug#begin(&#39;~/.vim/plugged&#39;)&#xA;    Plug &#39;/tmp/vim-be-good&#39; &#34; path to your vim-be-good fork&#xA;    call plug#end()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can also just use nvim --cmd &#34;set rtp+=$(pwd)&#34; . to set your current&#xA;run time path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make PR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Live on Stream&lt;/h2&gt; &#xA;&lt;p&gt;Everything you see here has been developed on stream at &lt;a href=&#34;https://twitch.tv/ThePrimeagen&#34;&gt;ThePrimeagen&lt;/a&gt;. Stop by and troll away. Helpful troll hints would be to complement the size of my hands.&lt;/p&gt; &#xA;&lt;p&gt;Big shout outs to PolarMutex, Brandon CC (stands for credit card) and TEEEEEEEEEJ @brandoncc @bryall @tjdevries&lt;/p&gt;</summary>
  </entry>
</feed>