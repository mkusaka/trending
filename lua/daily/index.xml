<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-16T01:32:51Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-java/nvim-java</title>
    <updated>2023-12-16T01:32:51Z</updated>
    <id>tag:github.com,2023-12-16:/nvim-java/nvim-java</id>
    <link href="https://github.com/nvim-java/nvim-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Painless Java in Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;span&gt;☕&lt;/span&gt; nvim-java&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&amp;amp;logo=openjdk&amp;amp;logoColor=white&#34; alt=&#34;Java&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Gradle-02303A.svg?style=for-the-badge&amp;amp;logo=Gradle&amp;amp;logoColor=white&#34; alt=&#34;Gradle&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Apache%20Maven-C71A36?style=for-the-badge&amp;amp;logo=Apache%20Maven&amp;amp;logoColor=white&#34; alt=&#34;Apache Maven&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/NeoVim-%2357A143.svg?&amp;amp;style=for-the-badge&amp;amp;logo=neovim&amp;amp;logoColor=white&#34; alt=&#34;Neovim&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/lua-%232C2D72.svg?style=for-the-badge&amp;amp;logo=lua&amp;amp;logoColor=white&#34; alt=&#34;Lua&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just install and start writing &lt;code&gt;public static void main(String[] args)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;📢&lt;/span&gt; Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-java/nvim-java/assets/18459807/047c8c46-9a0a-4869-b342-d5c2e15647bc&#34;&gt;https://github.com/nvim-java/nvim-java/assets/18459807/047c8c46-9a0a-4869-b342-d5c2e15647bc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;💫&lt;/span&gt; Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; Diagnostics &amp;amp; Auto Completion&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; Automatic &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;DAP&lt;/a&gt; debug configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; Running tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;💡&lt;/span&gt; Why&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Everything necessary will be installed automatically&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt; to setup &lt;code&gt;jdtls&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Realtime server settings updates is possible using &lt;a href=&#34;https://github.com/folke/neoconf.nvim&#34;&gt;neoconf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Auto loads necessary &lt;code&gt;jdtls&lt;/code&gt; plugins &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supported plugins are, &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;lombok&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;java-test&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;java-debug-adapter&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔨&lt;/span&gt; How to Install&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;🔸&lt;/span&gt;details&lt;/summary&gt; &#xA; &lt;h3&gt;Distributions:&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-java/nvim-java/wiki/Lazyvim&#34;&gt;Lazyvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Custom:&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Install the plugin&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#39;nvim-java/nvim-java&#39;,&#xA;  dependencies = {&#xA;    &#39;nvim-java/lua-async-await&#39;,&#xA;    &#39;nvim-java/nvim-java-core&#39;,&#xA;    &#39;nvim-java/nvim-java-test&#39;,&#xA;    &#39;nvim-java/nvim-java-dap&#39;,&#xA;    &#39;MunifTanjim/nui.nvim&#39;,&#xA;    &#39;neovim/nvim-lspconfig&#39;,&#xA;    &#39;mfussenegger/nvim-dap&#39;,&#xA;    {&#xA;      &#39;williamboman/mason.nvim&#39;,&#xA;      opts = {&#xA;        registries = {&#xA;          &#39;github:nvim-java/mason-registry&#39;,&#xA;          &#39;github:mason-org/mason-registry&#39;,&#xA;        },&#xA;      },&#xA;    }&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Setup nvim-java before &lt;code&gt;lspconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;java&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Setup jdtls like you would usually do&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lspconfig&#39;).jdtls.setup({})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Yep! That&#39;s all :)&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;span&gt;⌨&lt;/span&gt; Commands&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;🔸&lt;/span&gt;details&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;JavaDapConfig&lt;/code&gt; - DAP is autoconfigured on start up, but in case you want to force configure it again, you can use this API&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;JavaTestRunCurrentClass&lt;/code&gt; - Run the test class in the active buffer&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;JavaTestDebugCurrentClass&lt;/code&gt; - Debug the test class in the active buffer&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;JavaTestRunCurrentMethod&lt;/code&gt; - Run the test method on the cursor&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;JavaTestDebugCurrentMethod&lt;/code&gt; - Debug the test method on the cursor&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;JavaTestViewLastReport&lt;/code&gt; - Open the last test report in a popup window&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;span&gt;💻&lt;/span&gt; APIs&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;🔸&lt;/span&gt;details&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;DAP&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;config_dap&lt;/code&gt; - DAP is autoconfigured on start up, but in case you want to force configure it again, you can use this API&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;java&#39;).dap.config_dap()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Test&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;run_current_class&lt;/code&gt; - Run the test class in the active buffer&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;java&#39;).test.run_current_class()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;debug_current_class&lt;/code&gt; - Debug the test class in the active buffer&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;java&#39;).test.debug_current_class()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;run_current_method&lt;/code&gt; - Run the test method on the cursor&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;java&#39;).test.run_current_method()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;debug_current_method&lt;/code&gt; - Debug the test method on the cursor&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;java&#39;).test.debug_current_method()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;view_report&lt;/code&gt; - Open the last test report in a popup window&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;java&#39;).test.view_last_report()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;span&gt;🗜&lt;/span&gt; How to Use JDK X.X Version?&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;🔸&lt;/span&gt;details&lt;/summary&gt; &#xA; &lt;h3&gt;Method 1:&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/folke/neoconf.nvim&#34;&gt;Neoconf&lt;/a&gt; can be used to manage LSP setting including jdtls. Neoconf allows global configuration as well as project vice configurations. Here is how you can set Jdtls setting on &lt;code&gt;neoconf.json&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;lspconfig&#34;: {&#xA;    &#34;jdtls&#34;: {&#xA;      &#34;java.configuration.runtimes&#34;: [&#xA;        {&#xA;          &#34;name&#34;: &#34;JavaSE-21&#34;,&#xA;          &#34;path&#34;: &#34;/opt/jdk-21&#34;,&#xA;          &#34;default&#34;: true&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Method 2:&lt;/h3&gt; &#xA; &lt;p&gt;Pass the settings to Jdtls setup.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lspconfig&#39;).jdtls.setup({&#xA;  settings = {&#xA;    java = {&#xA;      configuration = {&#xA;        runtimes = {&#xA;          {&#xA;            name = &#34;JavaSE-21&#34;,&#xA;            path = &#34;/opt/jdk-21&#34;,&#xA;            default = true,&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;span&gt;⛳&lt;/span&gt; Architecture&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;🔸&lt;/span&gt;details&lt;/summary&gt; &#xA; &lt;p&gt;Following is the high level idea. Jdtls is the language server nvim-java communicates with. However, we don&#39;t have all the features we need just in Jdtls. So, we are loading java-test &amp;amp; java-debug-adapter extensions when we launch Jdtls. Once the language server is started, we communicate with the language server to do stuff.&lt;/p&gt; &#xA; &lt;p&gt;For instance, to run the current test,&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Request Jdtls for test classes&lt;/li&gt; &#xA;  &lt;li&gt;Request Jdtls for class paths, module paths, java executable&lt;/li&gt; &#xA;  &lt;li&gt;Request Jdtls to start a debug session and send the port of the session back&lt;/li&gt; &#xA;  &lt;li&gt;Prepare TCP connections to listen to the test results&lt;/li&gt; &#xA;  &lt;li&gt;Start nvim-dap and let user interactions to be handled by nvim-dap&lt;/li&gt; &#xA;  &lt;li&gt;Parse the test results as they come in&lt;/li&gt; &#xA;  &lt;li&gt;Once the execution is done, open a window show the test results&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code&gt;  ┌────────────┐                         ┌────────────┐&#xA;  │            │                         │            │&#xA;  │   Neovim   │                         │   VSCode   │&#xA;  │            │                         │            │&#xA;  └─────▲──────┘                         └──────▲─────┘&#xA;        │                                       │&#xA;        │                                       │&#xA;        │                                       │&#xA;        │                                       │&#xA;┌───────▼───────┐                ┌──────────────▼──────────────┐&#xA;│               │                │                             │&#xA;│   nvim-java   │                │   Extension Pack for Java   │&#xA;│               │                │                             │&#xA;└───────▲───────┘                └──────────────▲──────────────┘&#xA;        │                                       │&#xA;        │                                       │&#xA;        │                                       │&#xA;        │                                       │&#xA;        │                                       │&#xA;        │              ┌───────────┐            │&#xA;        │              │           │            │&#xA;        └──────────────►   JDTLS   ◄────────────┘&#xA;                       │           │&#xA;                       └───▲───▲───┘&#xA;                           │   │&#xA;                           │   │&#xA;                           │   │&#xA;                           │   │&#xA;                           │   │&#xA;  ┌───────────────┐        │   │         ┌────────────────────────┐&#xA;  │               │        │   │         │                        │&#xA;  │   java-test   ◄────────┘   └─────────►   java-debug-adapter   │&#xA;  │               │                      │                        │&#xA;  └───────────────┘                      └────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;span&gt;📑&lt;/span&gt; Projects Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-jdtls&#34;&gt;nvim-jdtls&lt;/a&gt; is a plugin that follows &#34;Keep it simple, stupid!&#34; approach. If you love customizing things by yourself, then give nvim-jdtls a try. I may or may not have copied some code &lt;span&gt;😉&lt;/span&gt; Beauty of Open source!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>thegrb93/StarfallEx</title>
    <updated>2023-12-16T01:32:51Z</updated>
    <id>tag:github.com,2023-12-16:/thegrb93/StarfallEx</id>
    <link href="https://github.com/thegrb93/StarfallEx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starfall, but with active development and more features. Write Garry&#39;s mod chips similar to E2, but in lua&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Starfall Scripting Environment&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Method 1&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone https://github.com/thegrb93/StarfallEx &#34;C:\path\to\Steam\steamapps\common\GarrysMod\garrysmod\addons\starfallex&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Method 2&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download source code &lt;code&gt;Code &amp;gt; Download Zip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract zip contents &lt;code&gt;StarfallEx-master&lt;/code&gt; to Garry&#39;s Mod addons&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\path\to\Steam\steamapps\common\GarrysMod\garrysmod\addons&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Discord Server: &lt;a href=&#34;https://discord.gg/yFBU8PU&#34;&gt;&lt;code&gt;https://discord.gg/yFBU8PU&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Documentation: &lt;a href=&#34;http://thegrb93.github.io/StarfallEx/&#34;&gt;&lt;code&gt;http://thegrb93.github.io/StarfallEx/&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Examples: &lt;a href=&#34;https://github.com/thegrb93/StarfallEx/tree/master/lua/starfall/examples&#34;&gt;&lt;code&gt;https://github.com/thegrb93/StarfallEx/tree/master/lua/starfall/examples&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows Joystick DLL Source: &lt;a href=&#34;https://github.com/MattJeanes/Joystick-Module&#34;&gt;&lt;code&gt;https://github.com/MattJeanes/Joystick-Modulet&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows XInput DLL Source: &lt;a href=&#34;https://github.com/mitterdoo/garrysmod-xinput&#34;&gt;&lt;code&gt;https://github.com/mitterdoo/garrysmod-xinput&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows Luasocket DLL Source: &lt;a href=&#34;https://github.com/danielga/gmod_luasocket&#34;&gt;&lt;code&gt;https://github.com/danielga/gmod_luasocket&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux Joystick DLL Source: &lt;a href=&#34;https://gitlab.h08.us/puff/joystick-module-linux&#34;&gt;&lt;code&gt;https://gitlab.h08.us/puff/joystick-module-linux&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>