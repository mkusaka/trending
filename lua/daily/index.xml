<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-16T01:40:13Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CreativePSofficial/CreativePSScripts</title>
    <updated>2023-04-16T01:40:13Z</updated>
    <id>tag:github.com,2023-04-16:/CreativePSofficial/CreativePSScripts</id>
    <link href="https://github.com/CreativePSofficial/CreativePSScripts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Popular scripts for CreativePS, which have been deobfuscated for the security of the players.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CreativePSScripts&lt;/h1&gt; &#xA;&lt;p&gt;Popular scripts for CreativePS, which have been deobfuscated for the security of the players.&lt;/p&gt; &#xA;&lt;p&gt;[INDO] Skrip CPS Populer yang telah didekripsi untuk tujuan keamanan oleh Intel kami.&lt;/p&gt; &#xA;&lt;h1&gt;If you have a suspicion and need any script de-obfuscated, you can create a request in the &#39;Issues&#39; tab.&lt;/h1&gt; &#xA;&lt;p&gt;Script obfuscation is a threat to the security of the players who want to try them, therefore you can request to decrypt any script if necessary. I will upload a decrypted version of it when I am not busy and have time.&lt;/p&gt; &#xA;&lt;p&gt;[INDO] Kebingungan skrip adalah ancaman bagi keamanan para pemain yang ingin mencobanya, oleh karena itu Anda dapat meminta untuk mendekripsi skrip apa pun jika perlu. Saya akan mengunggah versi yang didekripsi ketika saya tidak sibuk dan punya waktu.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Bryley/neoai.nvim</title>
    <updated>2023-04-16T01:40:13Z</updated>
    <id>tag:github.com,2023-04-16:/Bryley/neoai.nvim</id>
    <link href="https://github.com/Bryley/neoai.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin for intracting with GPT models from OpenAI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NeoAI&lt;/h1&gt; &#xA;&lt;p&gt;NeoAI is a Neovim plugin that brings the power of OpenAI&#39;s GPT-4 directly to your editor. It helps you generate code, rewrite text, and even get suggestions in-context with your code. The plugin is built with a user-friendly interface, making it easy to interact with the AI and get the assistance you need.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This plugin is in early it&#39;s early changes and is subject to change.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install NeoAI, you can use your favorite plugin manager. For example, with vim-plug, add the following line to your &lt;code&gt;init.vim&lt;/code&gt; or &lt;code&gt;.vimrc&lt;/code&gt;, note that it also requires the &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui&lt;/a&gt; dependency and curl installed on the system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plug &#39;MunifTanjim/nui.nvim&#39;&#xA;Plug &#39;Bryley/neoai.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;:PlugInstall&lt;/code&gt; to install the plugins.&lt;/p&gt; &#xA;&lt;p&gt;For lazy.nvim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;    &#34;Bryley/neoai.nvim&#34;,&#xA;    dependencies = {&#xA;        &#34;MunifTanjim/nui.nvim&#34;,&#xA;    },&#xA;    cmd = {&#xA;        &#34;NeoAI&#34;,&#xA;        &#34;NeoAIOpen&#34;,&#xA;        &#34;NeoAIClose&#34;,&#xA;        &#34;NeoAIToggle&#34;,&#xA;        &#34;NeoAIContext&#34;,&#xA;        &#34;NeoAIContextOpen&#34;,&#xA;        &#34;NeoAIContextClose&#34;,&#xA;        &#34;NeoAIInject&#34;,&#xA;        &#34;NeoAIInjectCode&#34;,&#xA;        &#34;NeoAIInjectContext&#34;,&#xA;        &#34;NeoAIInjectContextCode&#34;,&#xA;    },&#xA;    keys = {&#xA;        { &#34;&amp;lt;leader&amp;gt;as&#34;, desc = &#34;summarize text&#34; },&#xA;        { &#34;&amp;lt;leader&amp;gt;ag&#34;, desc = &#34;generate git message&#34; },&#xA;    },&#xA;    config = function()&#xA;        require(&#34;neoai&#34;).setup({&#xA;            -- Options go here&#xA;        })&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Showcase and Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use this plugin make sure you have an OpenAI API key which can be created &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;here&lt;/a&gt;. Save this key in your environment variables as &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT NOTE&lt;/strong&gt; : This plugin is not responsible for unintentional purchases made to OpenAI. While using this plugin I would recommend you frequently check the &lt;a href=&#34;https://platform.openai.com/account/usage&#34;&gt;usage&lt;/a&gt; of your account and &lt;a href=&#34;https://platform.openai.com/account/billing/limits&#34;&gt;setup limits&lt;/a&gt;, so you don&#39;t spend more that you can afford.&lt;/p&gt; &#xA;&lt;p&gt;This plugin introduces 3 modes or ways to interact with the AI models.&lt;/p&gt; &#xA;&lt;h3&gt;Normal GUI Mode&lt;/h3&gt; &#xA;&lt;p&gt;In the default mode, a GUI opens up on the side using the &lt;code&gt;:NeoAI&lt;/code&gt; command, allowing you to chat with the model. This operation is similar to what you get when using it in a browser, but now it&#39;s made more convenient by the GUI being inside your editor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Bryley/neoai.nvim/main/gifs/normal_mode.gif&#34; alt=&#34;Normal Mode GUI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the Prompt Buffer, you can send text by pressing Enter while in insert mode. Additionally, you can insert a newline by using Control Enter.&lt;/p&gt; &#xA;&lt;p&gt;Also note that the plugin has a feature where the output from the model automatically gets saved to the &lt;code&gt;g&lt;/code&gt; register and all code snippets get saved to the &lt;code&gt;c&lt;/code&gt; register. These can be changed in the config.&lt;/p&gt; &#xA;&lt;h3&gt;Context Mode&lt;/h3&gt; &#xA;&lt;p&gt;The Context mode works similarly to the Normal mode. However, you have the ability to provide additional information about what you want to change. For instance, if you are reading someone else&#39;s code and need a description of what it does, you can highlight the code in the buffer via the visual mode. Then, you can run &lt;code&gt;:NeoAIContext&lt;/code&gt; and type something like &#34;Please explain this code for me&#34; in the prompt buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Bryley/neoai.nvim/main/gifs/context_mode.gif&#34; alt=&#34;Context Mode GUI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can highlight some text and request &#34;Fix up the punctuation and grammar in this text&#34; to obtain a better version of the text.&lt;/p&gt; &#xA;&lt;p&gt;Note that if you run the command without any selection then the whole buffer is passed in.&lt;/p&gt; &#xA;&lt;h3&gt;Inject Mode&lt;/h3&gt; &#xA;&lt;p&gt;The final mode is known as &#34;inject mode&#34; by using &lt;code&gt;:NeoAIInject&lt;/code&gt;. This mode operates without the graphical user interface, allowing you to quickly send a prompt to the model and have the resulting output automatically inserted below your cursor. All of this can be done without opening the GUI. Additionally, there is a sub-mode within Inject mode that can be executed with context.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Bryley/neoai.nvim/main/gifs/inject_mode.gif&#34; alt=&#34;Inject Mode&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;One feature of this plugin is creating shortcuts, which are explained below. The plugin includes two built-in shortcuts; the first one reformats selected text to improve readability, with the default key bind being &lt;code&gt;&amp;lt;leader&amp;gt;as&lt;/code&gt; (A for AI and S for summarize).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Bryley/neoai.nvim/main/gifs/better_typing.gif&#34; alt=&#34;Summarize Shortcut&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The other built-in shortcut is auto generating git commit messages for you:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Bryley/neoai.nvim/main/gifs/git_commit_message.gif&#34; alt=&#34;Git Commit Message&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;: Be aware that overusing this feature might lead to an accumulation of data sent to the model, which can result in high costs. To avoid this, it is recommended that smaller commits be made or the feature be used less frequently. It is imperative to keep track of your usage, which can be monitored through &lt;a href=&#34;https://platform.openai.com/account/usage&#34;&gt;this link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To set up the plugin, add the following to your &lt;code&gt;init.vim&lt;/code&gt; or &lt;code&gt;.vimrc&lt;/code&gt; (or put under the &lt;code&gt;config&lt;/code&gt; option if using lazy.nvim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;neoai&#39;).setup{&#xA;    -- Below are the default options, feel free to override what you would like changed&#xA;    ui = {&#xA;        output_popup_text = &#34;NeoAI&#34;,&#xA;        input_popup_text = &#34;Prompt&#34;,&#xA;        width = 30,      -- As percentage eg. 30%&#xA;        output_popup_height = 80, -- As percentage eg. 80%&#xA;    },&#xA;    models = {&#xA;        {&#xA;            name = &#34;openai&#34;,&#xA;            model = &#34;gpt-3.5-turbo&#34;&#xA;        },&#xA;    },&#xA;    register_output = {&#xA;        [&#34;g&#34;] = function(output)&#xA;            return output&#xA;        end,&#xA;        [&#34;c&#34;] = require(&#34;neoai.utils&#34;).extract_code_snippets,&#xA;    },&#xA;    inject = {&#xA;        cutoff_width = 75,&#xA;    },&#xA;    prompts = {&#xA;        context_prompt = function(context)&#xA;            return &#34;Hey, I&#39;d like to provide some context for future &#34;&#xA;                .. &#34;messages. Here is the code/text that I want to refer &#34;&#xA;                .. &#34;to in our upcoming conversations:\n\n&#34;&#xA;                .. context&#xA;        end,&#xA;    },&#xA;    open_api_key_env = &#34;OPENAI_API_KEY&#34;,&#xA;    shortcuts = {&#xA;        {&#xA;            key = &#34;&amp;lt;leader&amp;gt;as&#34;,&#xA;            use_context = true,&#xA;            prompt = [[&#xA;                Please rewrite the text to make it more readable, clear,&#xA;                concise, and fix any grammatical, punctuation, or spelling&#xA;                errors&#xA;            ]],&#xA;            modes = { &#34;v&#34; },&#xA;            strip_function = nil,&#xA;        },&#xA;        {&#xA;            key = &#34;&amp;lt;leader&amp;gt;ag&#34;,&#xA;            use_context = false,&#xA;            prompt = function ()&#xA;                return [[&#xA;                    Using the following git diff generate a consise and&#xA;                    clear git commit message, with a short title summary&#xA;                    that is 75 characters or less:&#xA;                ]] .. vim.fn.system(&#34;git diff --cached&#34;)&#xA;            end,&#xA;            modes = { &#34;n&#34; },&#xA;            strip_function = nil,&#xA;        },&#xA;    },&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;The setup function accepts a table of options to configure the plugin. The available options are as follows:&lt;/p&gt; &#xA;&lt;h3&gt;UI Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;output_popup_text&lt;/code&gt;: Header text shown on the output popup window (default: &#34;NeoAI&#34;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;input_popup_text&lt;/code&gt;: Header text shown on the input popup window (default: &#34;Prompt&#34;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;width&lt;/code&gt;: Width of the window as a percentage (e.g., 30 = 30%, default: 30).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;output_popup_height&lt;/code&gt;: Height of the output popup as a percentage (e.g., 80 = 80%, default: 80).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Model Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;models&lt;/code&gt;: A list of models to use: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: The name of the model provider (eg. &#34;openai&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;model&lt;/code&gt;: Either a string of the model name to use or a list of model names&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Register Output&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;register_output&lt;/code&gt;: A table with a register as the key and a function that takes the raw output from the AI and outputs what you want to save into that register. Example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;register_output = {&#xA;    [&#34;g&#34;] = function(output)&#xA;        return output&#xA;    end,&#xA;    [&#34;c&#34;] = require(&#34;neoai.utils&#34;).extract_code_snippets,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inject Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cutoff_width&lt;/code&gt;: When injecting, if the text becomes longer than this value, it should go to a new line. If set to nil, the length is ignored (default: 75).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prompt Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;context_prompt&lt;/code&gt;: A function that generates the prompt to be used when using Context modes. Example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;context_prompt = function(context)&#xA;    return &#34;Hi ChatGPT, I&#39;d like to provide some context for future &#34;&#xA;        .. &#34;messages. Here is the code/text that I want to refer &#34;&#xA;        .. &#34;to in our upcoming conversations:\n\n&#34;&#xA;        .. context&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OpenAI API Key&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;open_api_key_env&lt;/code&gt;: The environment variable that contains the OpenAI API key (default: &#34;OPENAI_API_KEY&#34;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Shortcut Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;shortcuts&lt;/code&gt;: An array of shortcuts. Each shortcut is a table containing:&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;key&lt;/code&gt;: The keybind value to listen for.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use_context&lt;/code&gt;: If the context from the selection/buffer should be used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prompt&lt;/code&gt;: The prompt to send or a function to generate the prompt to send.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;modes&lt;/code&gt;: A list of modes to set the keybind up for &#34;n&#34; for normal, &#34;v&#34; for visual.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strip_function&lt;/code&gt;: The strip function to use (optional).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User Commands&lt;/h2&gt; &#xA;&lt;h3&gt;:NeoAI [prompt]&lt;/h3&gt; &#xA;&lt;p&gt;Smart toggles the NeoAI window. If the window is closed, it will open and send the optional [prompt]. If the window is open and focused, it will close, finally if the window is open but not focused, it will focus the window and send the optional [prompt].&lt;/p&gt; &#xA;&lt;h3&gt;:NeoAIToggle [prompt]&lt;/h3&gt; &#xA;&lt;p&gt;Toggles the NeoAI window. If the window is closed, it will open and send the optional [prompt]. If the window is open, it will close.&lt;/p&gt; &#xA;&lt;h3&gt;:NeoAIOpen [prompt]&lt;/h3&gt; &#xA;&lt;p&gt;Opens the NeoAI window and sends the optional [prompt].&lt;/p&gt; &#xA;&lt;h3&gt;:NeoAIClose&lt;/h3&gt; &#xA;&lt;p&gt;Closes the NeoAI window.&lt;/p&gt; &#xA;&lt;h3&gt;:NeoAIContext [prompt]&lt;/h3&gt; &#xA;&lt;p&gt;Smart toggles the NeoAI window with context. If the window is closed, it will open and send the optional [prompt]. If the window is open and focused, it will close, finally if the window is open but not focused, it will focus the window and send the optional [prompt]. The context used for this command is the visually selected text or the entire buffer if no selection is made.&lt;/p&gt; &#xA;&lt;h3&gt;:NeoAIContextOpen [prompt]&lt;/h3&gt; &#xA;&lt;p&gt;Opens the NeoAI window with context and sends the optional [prompt]. The context used for this command is the visually selected text or the entire buffer if no selection is made.&lt;/p&gt; &#xA;&lt;h3&gt;:NeoAIContextClose&lt;/h3&gt; &#xA;&lt;p&gt;Closes the NeoAI window with context.&lt;/p&gt; &#xA;&lt;h3&gt;:NeoAIInject [prompt]&lt;/h3&gt; &#xA;&lt;p&gt;Sends the [prompt] to the AI and directly injects the AI response into the buffer without opening the NeoAI window.&lt;/p&gt; &#xA;&lt;h3&gt;:NeoAIInjectCode [prompt]&lt;/h3&gt; &#xA;&lt;p&gt;Sends the [prompt] to the AI and directly injects the AI response into the buffer without opening the NeoAI window. The response will be stripped of everything except code snippets.&lt;/p&gt; &#xA;&lt;h3&gt;:NeoAIInjectContext [prompt]&lt;/h3&gt; &#xA;&lt;p&gt;Sends the [prompt] to the AI with context and directly injects the AI response into the buffer without opening the NeoAI window. The context used for this command is the visually selected text or the entire buffer if no selection is made.&lt;/p&gt; &#xA;&lt;h3&gt;:NeoAIInjectContextCode [prompt]&lt;/h3&gt; &#xA;&lt;p&gt;Sends the [prompt] to the AI with context and directly injects the AI response into the buffer without opening the NeoAI window. The response will be stripped of everything except code snippets. The context used for this command is the visually selected text or the entire buffer if no selection is made.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bryley/neoai.nvim/issues/1&#34;&gt;Issue 1&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add description option for shortcuts&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Have ability to have shortcuts be run via user command instead&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Switching Models&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better Colours (eg. highlighting user input)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Highlight context when inside NeoAIContext buffer or make context clear&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Keymap for replacing context with newly generated code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better error detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Back and forth conversations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Context using visual mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix when using :q on NeoAI GUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Config&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add custom keybinds for context related issues&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Join undos of inject&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inject fix mark sometimes not set inject mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inject strip output for code or other. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure to match end of file as well and use for inject mode&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Context using buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Strip code from output and put in buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add setup config&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Better way to focus on GUI window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the MIT License. Check the LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hrsh7th/cmp-nvim-lua</title>
    <updated>2023-04-16T01:40:13Z</updated>
    <id>tag:github.com,2023-04-16:/hrsh7th/cmp-nvim-lua</id>
    <link href="https://github.com/hrsh7th/cmp-nvim-lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nvim-cmp source for nvim lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cmp-nvim-lua&lt;/h1&gt; &#xA;&lt;p&gt;nvim-cmp source for neovim Lua API.&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;cmp&#39;.setup {&#xA;  sources = {&#xA;    { name = &#39;nvim_lua&#39; }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Options&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;code&gt;include_deprecated&lt;/code&gt; (boolean: default false)&lt;/h3&gt; &#xA;&lt;p&gt;Specify should includes deprecated things or not.&lt;/p&gt; &#xA;&lt;h1&gt;What is this source?&lt;/h1&gt; &#xA;&lt;p&gt;This source will complete neovim&#39;s Lua runtime API such &lt;code&gt;vim.lsp.*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can get the &lt;code&gt;vim.lsp.util.*&lt;/code&gt; API with this source.&lt;/p&gt;</summary>
  </entry>
</feed>