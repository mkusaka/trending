<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-28T01:31:27Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RaafatTurki/corn.nvim</title>
    <updated>2024-02-28T01:31:27Z</updated>
    <id>tag:github.com,2024-02-28:/RaafatTurki/corn.nvim</id>
    <link href="https://github.com/RaafatTurki/corn.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LSP diagnostics at your corner&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Corn.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blueviolet.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;LSP diagnostics at your corner.&lt;/p&gt; &#xA;&lt;p&gt;Get your LSP feedback the helix way, denoised, uncluttered and cornered.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16624558/265285866-8257051e-b944-4759-96b7-e5a97587ea21.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#39;RaafatTurki/corn.nvim&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#39;corn&#39;.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#39;corn&#39;.toggle(state?)       -- toggle visiblity (true, false)&#xA;require &#39;corn&#39;.scope(scope_type)    -- change scope type (&#34;line&#34;, &#34;file&#34;)&#xA;require &#39;corn&#39;.scope_cycle()        -- cycle scope type&#xA;require &#39;corn&#39;.render()             -- manually invoke the renderer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or their vim cmds&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Corn toggle [on|off]&#xA;:Corn scope &amp;lt;file|line&amp;gt;&#xA;:Corn scope_cycle&#xA;:Corn render&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- defaults&#xA;require &#39;corn&#39;.setup {&#xA;  -- enables plugin auto commands&#xA;  auto_cmds = true,&#xA;&#xA;  -- sorts diagnostics according to a criteria. must be one of `severity`, `severity_reverse`, `column`, `column_reverse`, `line_number` or `line_number_reverse`&#xA;  sort_method = &#39;severity&#39;,&#xA;&#xA;  -- sets the scope to be searched for diagnostics, must be one of `line` or `file`&#xA;  scope = &#39;line&#39;,&#xA;&#xA;  -- sets the style of the border, must be one of `single`, `double`, `rounded`, `solid`, `shadow` or `none`&#xA;  border_style = &#39;single&#39;,&#xA;&#xA;  -- sets which vim modes corn isn&#39;t allowed to render in, should contain strings like &#39;n&#39;, &#39;i&#39;, &#39;v&#39;, &#39;V&#39; .. etc&#xA;  blacklisted_modes = {},&#xA;&#xA;  -- sets which severity corn isn&#39;t allowed to render in, should contain diagnostic severities like:&#xA;  -- vim.diagnostic.severity.HINT&#xA;  -- vim.diagnostic.severity.INFO&#xA;  -- vim.diagnostic.severity.WARN&#xA;  -- vim.diagnostic.severity.ERROR&#xA;  blacklisted_severities = {},&#xA;&#xA;  -- highlights to use for each diagnostic severity level&#xA;  highlights = {&#xA;    error = &#34;DiagnosticFloatingError&#34;,&#xA;    warn = &#34;DiagnosticFloatingWarn&#34;,&#xA;    info = &#34;DiagnosticFloatingInfo&#34;,&#xA;    hint = &#34;DiagnosticFloatingHint&#34;,&#xA;  },&#xA;&#xA;  -- icons to use for each diagnostic severity level&#xA;  icons = {&#xA;    error = &#34;E&#34;,&#xA;    warn = &#34;W&#34;,&#xA;    hint = &#34;H&#34;,&#xA;    info = &#34;I&#34;,&#xA;  },&#xA;&#xA;  -- a preprocessor function that takes a raw Corn.Item and returns it after modification, could be used for truncation or other purposes&#xA;  item_preprocess_func = function(item)&#xA;    -- the default truncation logic is here ...&#xA;    return item&#xA;  end,&#xA;&#xA;  -- a hook that executes each time corn is toggled. the current state is provided via `is_hidden`&#xA;  on_toggle = function(is_hidden)&#xA;    -- custom logic goes here&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; virtual text diagnostics visiblity &lt;/summary&gt; &#xA; &lt;p&gt;enable virtual text diagnostics when corn is off and disable it when it&#39;s on&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- ensure virtual_text diags are disabled&#xA;vim.diagnostic.config { virtual_text = false }&#xA;&#xA;-- toggle virtual_text diags when corn is toggled&#xA;require &#39;corn&#39;.setup {&#xA;  on_toggle = function(is_hidden)&#xA;    vim.diagnostic.config({ virtual_text = not vim.diagnostic.config().virtual_text })&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; disable truncation &lt;/summary&gt; &#xA; &lt;p&gt;disable the default truncation which is implemented inside item_preprocess_func&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- set item_preprocess_func to return the item unmodified&#xA;require &#39;corn&#39;.setup {&#xA;  item_preprocess_func = function(item)&#xA;    return item&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Plans&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add a component based custom render function for both window opts and text rendering&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>