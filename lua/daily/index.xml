<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-01T01:40:16Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>docker/dockercraft</title>
    <updated>2023-03-01T01:40:16Z</updated>
    <id>tag:github.com,2023-03-01:/docker/dockercraft</id>
    <link href="https://github.com/docker/dockercraft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker + Minecraft = Dockercraft&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dockercraft&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/docker/dockercraft/raw/master/docs/img/logo.png?raw=true&#34; alt=&#34;Dockercraft&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple Minecraft Docker client, to visualize and manage Docker containers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/docker/dockercraft/raw/master/docs/img/dockercraft.gif?raw=true&#34; alt=&#34;Dockercraft&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=eZDlJgJf55o&#34;&gt;YouTube video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;WARNING: Please use Dockercraft on your local machine only. It currently doesn&#39;t support authentication. Every player should be considered a root user!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to run Dockercraft&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install Minecraft: &lt;a href=&#34;https://minecraft.net&#34;&gt;minecraft.net&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The Minecraft client hasn&#39;t been modified, just get the official release.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pull or build Dockercraft image:&lt;/strong&gt; (an official image will be available soon)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker pull gaetan/dockercraft&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone git@github.com:docker/dockercraft.git&#xA;docker build -t gaetan/dockercraft dockercraft&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run Dockercraft container:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run -t -i -d -p 25565:25565 \&#xA;-v /var/run/docker.sock:/var/run/docker.sock \&#xA;--name dockercraft \&#xA;gaetan/dockercraft&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Mounting &lt;code&gt;/var/run/docker.sock&lt;/code&gt; inside the container is necessary to send requests to the Docker remote API.&lt;/p&gt; &lt;p&gt;The default port for a Minecraft server is &lt;em&gt;25565&lt;/em&gt;, if you prefer a different one: &lt;code&gt;-p &amp;lt;port&amp;gt;:25565&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open Minecraft &amp;gt; Multiplayer &amp;gt; Add Server&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The server address is the IP of Docker host. No need to specify a port if you used the default one.&lt;/p&gt; &lt;p&gt;If you&#39;re using &lt;a href=&#34;https://docs.docker.com/machine/install-machine/&#34;&gt;Docker Machine&lt;/a&gt;: &lt;code&gt;docker-machine ip &amp;lt;machine_name&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Join Server!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You should see at least one container in your world, which is the one hosting your Dockercraft server.&lt;/p&gt; &lt;p&gt;You can start, stop and remove containers interacting with levers and buttons. Some Docker commands are also supported directly via Minecraft&#39;s chat window, which is displayed by pressing the &lt;code&gt;T&lt;/code&gt; key (default) or &lt;code&gt;/&lt;/code&gt; key.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A command always starts with a &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you open the prompt using the &lt;code&gt;/&lt;/code&gt; key, it will be prefilled with a &lt;code&gt;/&lt;/code&gt; character, but if you open it with the &lt;code&gt;T&lt;/code&gt; key, it will not be prefilled and you will have to type a &lt;code&gt;/&lt;/code&gt; yourself before typing your docker command.&lt;/p&gt; &#xA; &lt;p&gt;example: &lt;code&gt;/docker run redis&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/docker/dockercraft/raw/master/docs/img/landscape.png?raw=true&#34; alt=&#34;Dockercraft&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Customizing Dockercraft&lt;/h2&gt; &#xA;&lt;p&gt;Do you find the plains too plain? If so, you are in luck!&lt;/p&gt; &#xA;&lt;p&gt;Dockercraft can be customised to use any of the &lt;a href=&#34;https://github.com/cuberite/cuberite/raw/7f8a4eb7264a12ca2035b4e4d412485e01f309d4/src/BiomeDef.cpp#L17&#34;&gt;Biomes&lt;/a&gt; and &lt;a href=&#34;https://github.com/cuberite/cuberite/raw/7f8a4eb7264a12ca2035b4e4d412485e01f309d4/src/Generating/ComposableGenerator.cpp#L299&#34;&gt;Finishers&lt;/a&gt; supported by Cuberite!&lt;/p&gt; &#xA;&lt;p&gt;You can pass these additional arguments to your &lt;code&gt;docker run&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -t -i -d -p 25565:25565 \&#xA;    -v /var/run/docker.sock:/var/run/docker.sock \&#xA;    --name dockercraft \&#xA;    gaetan/dockercraft &amp;lt;biome&amp;gt; &amp;lt;groundlevel&amp;gt; &amp;lt;sealevel&amp;gt; &amp;lt;finishers&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are some examples:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do you long for the calm of the oceans?&lt;/strong&gt; &lt;img src=&#34;https://github.com/docker/dockercraft/raw/master/docs/img/ocean.png?raw=true&#34; alt=&#34;oceans&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Try &lt;code&gt;Ocean 50 63&lt;/code&gt;, or for a more frozen alternative, &lt;code&gt;FrozenOcean 50 63 Ice&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Or perhaps the heat of the desert?&lt;/strong&gt; &lt;img src=&#34;https://github.com/docker/dockercraft/raw/master/docs/img/desert.png?raw=true&#34; alt=&#34;desert&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then &lt;code&gt;Desert 63 0 DeadBushes&lt;/code&gt; is what you need&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Are you pining for the... Pines?&lt;/strong&gt; &lt;img src=&#34;https://github.com/docker/dockercraft/raw/master/docs/img/forest.png?raw=true&#34; alt=&#34;forest&#34;&gt; We have you covered. Try &lt;code&gt;Forest 63 0 Trees&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Or maybe you are looking for fun and games?&lt;/strong&gt; &lt;img src=&#34;https://github.com/docker/dockercraft/raw/master/docs/img/jungle.png?raw=true&#34; alt=&#34;jungle&#34;&gt; If so, Welcome to the Jungle. &lt;code&gt;Jungle 63 0 Trees&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Upcoming features&lt;/h2&gt; &#xA;&lt;p&gt;This is just the beginning for Dockercraft! We should be able to support a lot more Docker features like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;List &lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Docker Machines&lt;/a&gt; and use portals to see what&#39;s inside&lt;/li&gt; &#xA; &lt;li&gt;Support more Docker commands&lt;/li&gt; &#xA; &lt;li&gt;Display &lt;a href=&#34;https://docs.docker.com/v1.8/reference/commandline/logs/&#34;&gt;logs&lt;/a&gt; (for each container, pushing a simple button)&lt;/li&gt; &#xA; &lt;li&gt;Represent links&lt;/li&gt; &#xA; &lt;li&gt;Docker networking&lt;/li&gt; &#xA; &lt;li&gt;Docker volumes&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re interested about Dockercraft&#39;s design, discussions happen in &lt;a href=&#34;https://github.com/docker/dockercraft/issues/19&#34;&gt;that issue&lt;/a&gt;. Also, we&#39;re using &lt;a href=&#34;https://ephtracy.github.io/&#34;&gt;Magicavoxel&lt;/a&gt; to do these nice prototypes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/docker/dockercraft/raw/master/docs/img/voxelproto.jpg?raw=true&#34; alt=&#34;Dockercraft&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find our Magicavoxel patterns in &lt;a href=&#34;https://raw.githubusercontent.com/docker/dockercraft/master/!%5BDockercraft%5D(https://github.com/docker/dockercraft/tree/master/docs/magicavoxel)&#34;&gt;that folder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get fresh news, follow our Twitter account: &lt;a href=&#34;https://twitter.com/dockercraft&#34;&gt;@dockercraft&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The Minecraft client itself remains unmodified. All operations are done server side.&lt;/p&gt; &#xA;&lt;p&gt;The Minecraft server we use is &lt;a href=&#34;http://cuberite.org&#34;&gt;http://cuberite.org&lt;/a&gt;. A custom Minecraft compatible game server written in C++. &lt;a href=&#34;https://github.com/cuberite/cuberite&#34;&gt;github repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This server accepts plugins, scripts written in Lua. So we did one for Docker. (world/Plugins/Docker)&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, there&#39;s no nice API to communicate with these plugins. But there&#39;s a webadmin, and plugins can be responsible for &#34;webtabs&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Plugin:AddWebTab(&#34;Docker&#34;,HandleRequest_Docker)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basically it means the plugin can catch POST requests sent to &lt;code&gt;http://127.0.0.1:8080/webadmin/Docker/Docker&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Goproxy&lt;/h3&gt; &#xA;&lt;p&gt;Events from the Docker remote API are transmitted to the Lua plugin by a small daemon (written in Go). (go/src/goproxy)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func MCServerRequest(data url.Values, client *http.Client) {&#xA;&#x9;req, _ := http.NewRequest(&#34;POST&#34;, &#34;http://127.0.0.1:8080/webadmin/Docker/Docker&#34;, strings.NewReader(data.Encode()))&#xA;&#x9;req.Header.Set(&#34;Content-Type&#34;, &#34;application/x-www-form-urlencoded&#34;)&#xA;&#x9;req.SetBasicAuth(&#34;admin&#34;, &#34;admin&#34;)&#xA;&#x9;client.Do(req)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The goproxy binary can also be executed with parameters from the Lua plugin, to send requests to the daemon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function PlayerJoined(Player)&#xA;&#x9;-- refresh containers&#xA;&#x9;r = os.execute(&#34;goproxy containers&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to hack on Dockercraft? &lt;a href=&#34;https://github.com/docker/docker/raw/master/CONTRIBUTING.md&#34;&gt;Docker&#39;s contributions guidelines&lt;/a&gt; apply.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/docker/dockercraft/raw/master/docs/img/contribute.png?raw=true&#34; alt=&#34;Dockercraft&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rmagatti/goto-preview</title>
    <updated>2023-03-01T01:40:16Z</updated>
    <id>tag:github.com,2023-03-01:/rmagatti/goto-preview</id>
    <link href="https://github.com/rmagatti/goto-preview" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small Neovim plugin for previewing definitions using floating windows.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;⭐ Goto Preview&lt;/h2&gt; &#xA;&lt;p&gt;A small Neovim plugin for previewing native LSP&#39;s goto definition, type definition, implementation, and references calls in floating windows.&lt;/p&gt; &#xA;&lt;h3&gt;🚀 Showcase&lt;/h3&gt; &#xA;&lt;img src=&#34;https://github.com/rmagatti/readme-assets/raw/main/goto-preview-zoomed.gif&#34;&gt; &#xA;&lt;h4&gt;🔗 References&lt;/h4&gt; &#xA;&lt;img src=&#34;https://github.com/rmagatti/readme-assets/raw/main/goto-preview-references.gif&#34;&gt; &#xA;&lt;h3&gt;⚠️ IMPORTANT NOTE&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you use Neovim &lt;code&gt;0.5.1&lt;/code&gt; or GUIs like &lt;a href=&#34;https://github.com/akiyosi/goneovim&#34;&gt;Goneovim&lt;/a&gt; and &lt;a href=&#34;https://github.com/smolck/uivonim&#34;&gt;Uivonim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is a bug in &lt;a href=&#34;https://github.com/neovim/neovim/issues/14735&#34;&gt;Neovim &lt;code&gt;0.5&lt;/code&gt;&lt;/a&gt; that prevents the correct positioning of more than one preview window.&lt;/p&gt; &#xA;&lt;h3&gt;📦 Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;rmagatti/goto-preview&#39;,&#xA;  config = function()&#xA;    require(&#39;goto-preview&#39;).setup {}&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;rmagatti/goto-preview&#39;&#xA;&#xA;&#34; Then at some later point (outside of the plug block):&#xA;:lua require(&#39;goto-preview&#39;).setup {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;⚙️ Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;goto-preview&#39;).setup {&#xA;  width = 120; -- Width of the floating window&#xA;  height = 15; -- Height of the floating window&#xA;  border = {&#34;↖&#34;, &#34;─&#34; ,&#34;┐&#34;, &#34;│&#34;, &#34;┘&#34;, &#34;─&#34;, &#34;└&#34;, &#34;│&#34;}; -- Border characters of the floating window&#xA;  default_mappings = false; -- Bind default mappings&#xA;  debug = false; -- Print debug information&#xA;  opacity = nil; -- 0-100 opacity level of the floating window where 100 is fully transparent.&#xA;  resizing_mappings = false; -- Binds arrow keys to resizing the floating window.&#xA;  post_open_hook = nil; -- A function taking two arguments, a buffer and a window to be ran as a hook.&#xA;  references = { -- Configure the telescope UI for slowing the references cycling window.&#xA;    telescope = require(&#34;telescope.themes&#34;).get_dropdown({ hide_preview = false })&#xA;  };&#xA;  -- These two configs can also be passed down to the goto-preview definition and implementation calls for one off &#34;peak&#34; functionality.&#xA;  focus_on_open = true; -- Focus the floating window when opening it.&#xA;  dismiss_on_move = false; -- Dismiss the floating window when moving the cursor.&#xA;  force_close = true, -- passed into vim.api.nvim_win_close&#39;s second argument. See :h nvim_win_close&#xA;  bufhidden = &#34;wipe&#34;, -- the bufhidden option to set on the floating window. See :h bufhidden&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;post_open_hook&lt;/code&gt; function gets called right before setting the cursor position in the new floating window. One can use this to set custom key bindings or really anything else they want to do when a new preview window opens.&lt;/p&gt; &#xA;&lt;h3&gt;⌨️ Mappings&lt;/h3&gt; &#xA;&lt;p&gt;There are no mappings by default, you can set &lt;code&gt;default_mappings = true&lt;/code&gt; in the config to make use of the mappings I use or define your own.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;nnoremap gpd &amp;lt;cmd&amp;gt;lua require(&#39;goto-preview&#39;).goto_preview_definition()&amp;lt;CR&amp;gt;&#xA;nnoremap gpt &amp;lt;cmd&amp;gt;lua require(&#39;goto-preview&#39;).goto_preview_type_definition()&amp;lt;CR&amp;gt;&#xA;nnoremap gpi &amp;lt;cmd&amp;gt;lua require(&#39;goto-preview&#39;).goto_preview_implementation()&amp;lt;CR&amp;gt;&#xA;nnoremap gP &amp;lt;cmd&amp;gt;lua require(&#39;goto-preview&#39;).close_all_win()&amp;lt;CR&amp;gt;&#xA;nnoremap gpr &amp;lt;cmd&amp;gt;lua require(&#39;goto-preview&#39;).goto_preview_references()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Custom example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;gp&#34;, &#34;&amp;lt;cmd&amp;gt;lua require(&#39;goto-preview&#39;).goto_preview_definition()&amp;lt;CR&amp;gt;&#34;, {noremap=true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Window manipulation&lt;/h3&gt; &#xA;&lt;p&gt;One can manipulate floating windows with the regular Vim window moving commands. See &lt;code&gt;:h window-moving&lt;/code&gt;. Example: &lt;img src=&#34;https://user-images.githubusercontent.com/2881382/121652080-88716e00-ca58-11eb-811c-677ec61d8e25.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supported languages&lt;/h3&gt; &#xA;&lt;p&gt;Goto Preview should work with LSP responses for most languages now! If something doesn&#39;t work as expected, drop an issue and I&#39;ll be happy to check it out!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; different language servers have potentially different shapes for the result of the &lt;code&gt;textDocument/definition&lt;/code&gt;, &lt;code&gt;textDocument/typeDefinition&lt;/code&gt; and &lt;code&gt;textDocument/implementation&lt;/code&gt; calls. Until more are added one can pass in custom responses through the &lt;code&gt;lsp_configs&lt;/code&gt; config value. Just follow the same pattern returning two values, a &lt;code&gt;target (string)&lt;/code&gt; and a &lt;code&gt;cursor_position ({line_num, col_num})&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; parameter is the &lt;code&gt;[1]&lt;/code&gt; of the LSP&#39;s &lt;code&gt;result&lt;/code&gt; of the definition/implementation calls and is what gets passed into the custom &lt;code&gt;get_config&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;h3&gt;Tested with&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;NVIM v0.5.0-dev+7d4f890aa&#xA;Build type: Release&#xA;LuaJIT 2.1.0-beta3&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>