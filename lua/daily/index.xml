<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-28T01:38:03Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dundalek/lazy-lsp.nvim</title>
    <updated>2022-09-28T01:38:03Z</updated>
    <id>tag:github.com,2022-09-28:/dundalek/lazy-lsp.nvim</id>
    <link href="https://github.com/dundalek/lazy-lsp.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin to auto install LSP servers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lazy-lsp.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Neovim plugin to automatically install &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt; language servers.&lt;/p&gt; &#xA;&lt;p&gt;Language servers are loaded in the background without a need of a manual user intervention. They are not installed upfront, but only on-demand after a source file for a given language is opened. The plugin works by relying on Nix package manager which works on Linux, macOS and Windows WSL.&lt;/p&gt; &#xA;&lt;p&gt;Currently supports 71 out of 174 servers available in lspconfig, see the full list of &lt;a href=&#34;https://raw.githubusercontent.com/dundalek/lazy-lsp.nvim/master/servers.md&#34;&gt;supported servers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Requires Neovim v0.7.0+&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nixos.org/download.html#nix-quick-install&#34;&gt;Nix&lt;/a&gt; package manager: &lt;code&gt;curl -L https://nixos.org/nix/install | sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the plugin using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;use { &#39;dundalek/lazy-lsp.nvim&#39;, requires = { &#39;neovim/nvim-lspconfig&#39; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;That&#39;s it, nothing else to install!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Add to &lt;code&gt;init.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lazy-lsp&#39;).setup {&#xA;  -- By default all available servers are set up. Exclude unwanted or misbehaving servers.&#xA;  excluded_servers = {&#xA;    &#34;ccls&#34;, &#34;zk&#34;,&#xA;  },&#xA;  -- Default config passed to all servers to specify on_attach callback and other options.&#xA;  default_config = {&#xA;    flags = {&#xA;      debounce_text_changes = 150,&#xA;    },&#xA;    -- on_attach = on_attach,&#xA;    -- capabilities = capabilities,&#xA;  },&#xA;  -- Override config for specific servers that will passed down to lspconfig setup.&#xA;  configs = {&#xA;    sumneko_lua = {&#xA;      cmd = {&#34;lua-language-server&#34;},&#xA;      -- on_attach = on_lua_attach,&#xA;      -- capabilities = capabilities,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;init.vim&lt;/code&gt; based config wrap with lua command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;lazy-lsp&#39;).setup {&#xA;  ...&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lazy-lsp&lt;/code&gt; registers all available configurations from lspconfig to start LSP servers by wrapping the commands in a &lt;a href=&#34;https://nixos.org/manual/nix/unstable/command-ref/nix-shell.html&#34;&gt;nix-shell&lt;/a&gt; environment. The nix-shell prepares the environment by pulling all specified dependencies regardless of what is installed on the host system and avoids packages clashes. The first time a server is run there is a delay until dependencies are downloaded, but on subsequent runs the time to prepare the shell environment is negligeable.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison with alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installing manually, or via language specific package managers like npm, pip, etc. is a hassle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/nvim-lsp-installer&#34;&gt;nvim-lsp-installer&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pro: Supports Windows natively&lt;/li&gt; &#xA;   &lt;li&gt;Pro: Supports more servers at the moment&lt;/li&gt; &#xA;   &lt;li&gt;Con: &lt;code&gt;:LspInstall&lt;/code&gt; command needs to be run manually for each server&lt;br&gt; (vs. automatic installation in the background)&lt;/li&gt; &#xA;   &lt;li&gt;Con: Additional dependencies like npm, pip, etc. need to be installed separately&lt;br&gt; (vs. a single Nix dependency)&lt;/li&gt; &#xA;   &lt;li&gt;Con: Maintaining cross-platform installation scripts is a large maintanance burden&lt;br&gt; (vs. leveraging work by a large Nix community specializing in software packaging)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lspcontainers/lspcontainers.nvim&#34;&gt;lspcontainers.nvim&lt;/a&gt; - uses docker containers to run servers in a portable way which comes with an extra overhead&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The available lsp servers and stats are generated from &lt;code&gt;nvim-lspconfig&lt;/code&gt; source.&lt;/p&gt; &#xA;&lt;p&gt;Make a local copy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir tmp &amp;amp;&amp;amp; cd tmp&#xA;git clone https://github.com/neovim/nvim-lspconfig.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update &lt;code&gt;servers.lua&lt;/code&gt; with new entries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd tmp/nvim-lspconfig&#xA;git pull&#xA;cd ../..&#xA;scripts/update.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once done specifying servers, generate the stats in &lt;a href=&#34;https://raw.githubusercontent.com/dundalek/lazy-lsp.nvim/master/servers.md&#34;&gt;servers.md&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scripts/genstats.lua&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>martineausimon/nvim-lilypond-suite</title>
    <updated>2022-09-28T01:38:03Z</updated>
    <id>tag:github.com,2022-09-28:/martineausimon/nvim-lilypond-suite</id>
    <link href="https://github.com/martineausimon/nvim-lilypond-suite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin for writing LilyPond scores, with asynchronous make, midi/mp3 player, fast syntax highlighting, and support for LaTex files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lilypond-suite&lt;/h1&gt; &#xA;&lt;p&gt;This is a plugin (Neovim only) for &lt;strong&gt;LilyPond&lt;/strong&gt; with fast syntax highlighting and dictionary for auto-completion. This repository also contains an ftplugin for &lt;strong&gt;LaTeX&lt;/strong&gt; files which allows embedded LilyPond syntax highlighting, and makeprg which support &lt;code&gt;lilypond-book&lt;/code&gt; or &lt;code&gt;lyluatex&lt;/code&gt; package out of the box.&lt;/p&gt; &#xA;&lt;h2&gt;FEATURES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Better syntax file for LilyPond&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Asynchronous :make&lt;/strong&gt; - compile in background without freezing Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mp3 player in floating window&lt;/strong&gt; (LilyPond only) - convert and play midi file while writing score (using &lt;code&gt;mpv&lt;/code&gt;, &lt;code&gt;fluidsynth&lt;/code&gt; &amp;amp; &lt;code&gt;ffmpeg&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple ftplugin for LilyPond&lt;/strong&gt; with &lt;code&gt;makeprg&lt;/code&gt;, correct &lt;code&gt;errorformat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compile only main file when working on multiple files project&lt;/strong&gt; (LilyPond only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ftplugin for TeX files&lt;/strong&gt; whith detect and allows embedded LilyPond syntax, adaptive &lt;code&gt;makeprg&lt;/code&gt; function for &lt;code&gt;lyluatex&lt;/code&gt; or &lt;code&gt;lilypond-book&lt;/code&gt;, correct &lt;code&gt;errorformat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy auto-completion and Point &amp;amp; Click configuration&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/89019438/191845626-4ba6224c-46c3-484f-a355-5cf10a66889f.png&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#nvim-lilypond-suite-plugin&#34;&gt;nvim-lilypond-suite&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#dependences&#34;&gt;Dependences&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#settings&#34;&gt;Settings&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#mappings&#34;&gt;Mappings&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#player-mappings-lilypond-only&#34;&gt;Player mappings&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#lighter-syntax-highlighting&#34;&gt;Lighter syntax highlighting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#highlight-pitches-for-others-languages&#34;&gt;Highlight pitches for others languages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#quickfix&#34;&gt;QuickFix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#multiple-files-projects&#34;&gt;Multiple files projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#recommended-highlightings&#34;&gt;Recommended highlightings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#recommended-settings-for-auto-completion&#34;&gt;Recommended settings for Auto-completion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#my-neovim-settings-for-point-click&#34;&gt;Point &amp;amp; click configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#latex&#34;&gt;LaTex&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#clean-log-files-on-exit&#34;&gt;Clean log files on exit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#tricks-for-lilypond-book&#34;&gt;Tricks for lilypond-book&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#License&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;INSTALLATION&lt;/h2&gt; &#xA;&lt;h3&gt;nvim-lilypond-suite plugin&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠ This plugin requires Nvim &amp;gt;= 0.7&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;martineausimon/nvim-lilypond-suite&#39;,&#xA;  requires = { &#39;MunifTanjim/nui.nvim&#39; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;martineausimon/nvim-lilypond-suite&#39;&#xA;Plug &#39;MunifTanjim/nui.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependences&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the mp3/midi player, you&#39;ll need to install the following packages :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install and configure &lt;code&gt;fluidsynth&lt;/code&gt; (e.g. on &lt;a href=&#34;https://wiki.archlinux.org/title/FluidSynth&#34;&gt;Arch&lt;/a&gt; with &lt;code&gt;soundfont-fluid&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S fluidsynth soundfont-fluid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify a default soundfont&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /usr/share/soundfonts/FluidR3_GM.sf2 /usr/share/soundfonts/default.sf2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;code&gt;mpv&lt;/code&gt; and &lt;code&gt;ffmpeg&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S mpv ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SETTINGS&lt;/h2&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Nvim-lilypond-suite is configurable, here is the default configuration that you can copy-paste and modify in your init.lua :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvls&#39;).setup({&#xA;  lilypond = {&#xA;    mappings = {&#xA;      player = &#34;&amp;lt;F3&amp;gt;&#34;,&#xA;      compile = &#34;&amp;lt;F5&amp;gt;&#34;,&#xA;      open_pdf = &#34;&amp;lt;F6&amp;gt;&#34;,&#xA;      switch_buffers = &#34;&amp;lt;A-Space&amp;gt;&#34;,&#xA;      insert_version = &#34;&amp;lt;F4&amp;gt;&#34;&#xA;    },&#xA;    options = {&#xA;      pitches_language = &#34;default&#34;&#xA;    },&#xA;  },&#xA;  latex = {&#xA;    mappings = {&#xA;      compile = &#34;&amp;lt;F5&amp;gt;&#34;,&#xA;      open_pdf = &#34;&amp;lt;F6&amp;gt;&#34;,&#xA;      lilypond_syntax = &#34;&amp;lt;F3&amp;gt;&#34;&#xA;    },&#xA;    options = {&#xA;      clean_logs = false&#xA;    },&#xA;  },&#xA;  player = {&#xA;    mappings = {&#xA;      quit = &#34;q&#34;,&#xA;      play_pause = &#34;p&#34;,&#xA;      loop = &#34;&amp;lt;A-l&amp;gt;&#34;,&#xA;      backward = &#34;h&#34;,&#xA;      small_backward = &#34;&amp;lt;S-h&amp;gt;&#34;,&#xA;      forward = &#34;l&#34;,&#xA;      small_forward = &#34;&amp;lt;S-l&amp;gt;&#34;,&#xA;      decrease_speed = &#34;j&#34;,&#xA;      increase_speed = &#34;k&#34;,&#xA;      halve_speed = &#34;&amp;lt;S-j&amp;gt;&#34;,&#xA;      double_speed = &#34;&amp;lt;S-k&amp;gt;&#34;&#xA;    },&#xA;    options = {&#xA;      row = &#34;2%&#34;,&#xA;      col = &#34;99%&#34;,&#xA;      width = &#34;37&#34;,&#xA;      height = &#34;1&#34;,&#xA;      border_style = &#34;single&#34;&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mappings&lt;/h3&gt; &#xA;&lt;h4&gt;Commands&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LilyPond files :&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Default mappings&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:LilyPlayer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;F3&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert midi file to mp3 and play in a floating window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;F4&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Insert current version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:LilyCmp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;F5&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save &amp;amp; compile pdf&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Viewer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;F6&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open %.pdf&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LaTex files :&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Default mappings&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:ToggleSyn&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;F3&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable or disable LilyPond embed syntax&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:TexCmp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;F5&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save &amp;amp; compile pdf&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Viewer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;F6&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open %.pdf&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Player mappings (LilyPond only)&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;A-Space&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Switch between player and LilyPond buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;q&lt;/code&gt; and &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exit player&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Play / Pause&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;A-l&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Loop start/stop/clean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Seek backward 5 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-h&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Seek backward 1 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;l&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Seek forward 5 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-l&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Seek forward 1 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-j&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;S-k&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Halve/double current playback speed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Decrease/increase current playback speed by 10%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Lighter syntax highlighting&lt;/h4&gt; &#xA;&lt;p&gt;Since &lt;a href=&#34;https://github.com/martineausimon/nvim-lilypond-suite/commit/7df532ef0476299b03cc72e3160e13c7ae54488c&#34;&gt;7df532e&lt;/a&gt; commit, I changed my method for syntax highlighting and avoided word lists as much as possible, for more lightness. You can also define &lt;code&gt;pitches_language = &#34;nohl&#34;&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#configuration&#34;&gt;&lt;code&gt;require(&#39;nvls&#39;).setup()&lt;/code&gt;&lt;/a&gt; to avoid pitches highlighting.&lt;/p&gt; &#xA;&lt;p&gt;Recommended settings in &lt;code&gt;init.lua&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#39;BufEnter&#39;, { &#xA;  command = &#34;syntax sync fromstart&#34;,&#xA;  pattern = { &#39;*.ly&#39;, &#39;*.ily&#39; }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Highlight pitches for others languages&lt;/h3&gt; &#xA;&lt;p&gt;If you use others languages for pitch names, you can configure nvim-lilypond-suite to highlight the right words with &lt;code&gt;pitches_language&lt;/code&gt; option in &lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#configuration&#34;&gt;&lt;code&gt;require(&#39;nvls&#39;).setup()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For now, only &lt;em&gt;english&lt;/em&gt;, &lt;em&gt;français&lt;/em&gt;, &lt;em&gt;nohl&lt;/em&gt; (no highlight) and &lt;em&gt;default&lt;/em&gt; highlights are availables.&lt;br&gt; TODO : create pitches pattern for other languages&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;QuickFix&lt;/h3&gt; &#xA;&lt;p&gt;This plugin have no defaults for &lt;code&gt;QuickFixCmdPost&lt;/code&gt; event. You can configure your &lt;code&gt;init.lua&lt;/code&gt; using an autocommand, e.g. :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd( &#39;QuickFixCmdPost&#39;, { &#xA;  command = &#34;cwindow&#34;,&#xA;  pattern = &#34;*&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple files projects&lt;/h3&gt; &#xA;&lt;p&gt;When working on a multiple files project, with &lt;code&gt;\include&lt;/code&gt;d sources in a main file, only the file called &lt;code&gt;main.ly&lt;/code&gt; is selected for compilation, open pdf and play midi. Two others options are availables to define a custom main file (see discussion with &lt;a href=&#34;https://github.com/martineausimon/nvim-lilypond-suite/issues?q=is%3Aissue+is%3Aopen+author%3AniveK77pur&#34;&gt;niveK77pur&lt;/a&gt; on &lt;a href=&#34;https://github.com/martineausimon/nvim-lilypond-suite/issues/3&#34;&gt;issue #3&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;h4&gt;using a local vimrc file&lt;/h4&gt; &#xA;&lt;p&gt;If you already use a plugin like &lt;a href=&#34;https://github.com/MunifTanjim/exrc.nvim&#34;&gt;exrc.nvim&lt;/a&gt; to work with local nvim config files, I recommend using this variable to define a custom main lilypond file :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.nvls_main_file = &#34;/complete/path/to/custom/main/file.ly&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This variable is never overwrited by the plugin, be careful to not open severals projects already using this variable in the same nvim session, and always open files from working directory.&lt;/p&gt; &#xA;&lt;h4&gt;using .lilyrc config file&lt;/h4&gt; &#xA;&lt;p&gt;You can define a custom main file by creating a &lt;code&gt;.lilyrc&lt;/code&gt; file in the project directory containing this variable (in lua only) :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.nvls_main = &#34;/complete/path/to/custom/main/file.ly&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This one is called on each command (compile, open, play midi file), and should work if you open differents projects with differents main files in the same nvim session, even if you call files from another directory.&lt;/p&gt; &#xA;&lt;h3&gt;Recommended highlightings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local hi = vim.api.nvim_set_hl&#xA;&#xA;hi(0, &#39;Keyword&#39;,        {ctermfg = &#34;yellow&#34;,       bold = true})&#xA;hi(0, &#39;Tag&#39;,            {ctermfg = &#34;blue&#34;})&#xA;hi(0, &#39;Label&#39;,          {ctermfg = &#34;lightYellow&#34;})&#xA;hi(0, &#39;SpecialComment&#39;, {ctermfg = &#34;lightCyan&#34;})&#xA;hi(0, &#39;SpecialChar&#39;,    {ctermfg = &#34;lightMagenta&#34;, bold = true})&#xA;hi(0, &#39;PreCondit&#39;,      {ctermfg = &#34;cyan&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Recommended settings for Auto-completion&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;coc.nvim&lt;/a&gt; and &lt;code&gt;coc-dictionary&lt;/code&gt; &amp;amp; &lt;code&gt;coc-tabnine&lt;/code&gt; : works out of the box !&lt;/p&gt; &#xA;&lt;p&gt;If you want to use another completion plugin like &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;hrsh7th/nvim-cmp&lt;/a&gt; with &lt;a href=&#34;https://github.com/uga-rosa/cmp-dictionary&#34;&gt;uga-rosa/cmp-dictionary&lt;/a&gt;, vim-lilypond-suite uses the following dictionary files :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$LILYDICTPATH/grobs&#xA;$LILYDICTPATH/keywords&#xA;$LILYDICTPATH/musicFunctions&#xA;$LILYDICTPATH/articulations&#xA;$LILYDICTPATH/grobProperties&#xA;$LILYDICTPATH/paperVariables&#xA;$LILYDICTPATH/headerVariables&#xA;$LILYDICTPATH/contextProperties&#xA;$LILYDICTPATH/clefs&#xA;$LILYDICTPATH/repeatTypes&#xA;$LILYDICTPATH/languageNames&#xA;$LILYDICTPATH/accidentalsStyles&#xA;$LILYDICTPATH/scales&#xA;$LILYDICTPATH/musicCommands&#xA;$LILYDICTPATH/markupCommands&#xA;$LILYDICTPATH/contextsCmd&#xA;$LILYDICTPATH/dynamics&#xA;$LILYDICTPATH/contexts&#xA;$LILYDICTPATH/translators&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;My Neovim settings for Point &amp;amp; Click&lt;/h3&gt; &#xA;&lt;p&gt;Recommended pdf viewer : &lt;a href=&#34;https://pwmt.org/projects/zathura/&#34;&gt;zathura&lt;/a&gt; with &lt;a href=&#34;https://pwmt.org/projects/zathura-pdf-mupdf/&#34;&gt;zathura-pdf-mupdf plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add this line to &lt;code&gt;~/.config/zathura/zathurarc&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set synctex-editor-command &#34;lilypond-invoke-editor %s&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/mhinz/neovim-remote&#34;&gt;neovim-remote&lt;/a&gt; and add this line to &lt;code&gt;~/.profile&lt;/code&gt; (or &lt;code&gt;~/.bashrc&lt;/code&gt;) :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export LYEDITOR=&#34;nvr -s +:&#39;dr %(file)s | call cursor(%(line)s,%(char)s+1)&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Alternate &lt;code&gt;custom text editor&lt;/code&gt; command, for &lt;a href=&#34;https://github.com/KDE/okular&#34;&gt;Okular&lt;/a&gt; :&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvr +:&#39;dr %f | call cursor(%l,%c+1)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Follow the instructions on the &lt;a href=&#34;https://lilypond.org/doc/v2.23/Documentation/usage/configuring-the-system-for-point-and-click#&#34;&gt;LilyPond website&lt;/a&gt; to configure the system and create &lt;code&gt;lilypond-invoke-editor.desktop&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reboot or reload session&lt;/p&gt; &#xA;&lt;h2&gt;LaTex&lt;/h2&gt; &#xA;&lt;p&gt;This plugin works with &lt;code&gt;lilypond-book&lt;/code&gt; by default if the &lt;code&gt;.tex&lt;/code&gt; file contains &lt;code&gt;\begin{lilypond}&lt;/code&gt;. To use &lt;code&gt;lyluatex&lt;/code&gt;, just add &lt;code&gt;\usepackage{lyluatex}&lt;/code&gt; to your preamble.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE : &lt;code&gt;lyluatex&lt;/code&gt; package does not allow files containing spaces, and does not allow compiling in a directory other than the working directory&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Syntax highlighting can be slow with embedded LilyPond, you can use &lt;code&gt;&amp;lt;F3&amp;gt;&lt;/code&gt; to activate or deactivate it.&lt;/p&gt; &#xA;&lt;h3&gt;Clean log files on exit&lt;/h3&gt; &#xA;&lt;p&gt;Define &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;clean_logs&lt;/code&gt; option in &lt;a href=&#34;https://raw.githubusercontent.com/martineausimon/nvim-lilypond-suite/main/#configuration&#34;&gt;&lt;code&gt;require(&#39;nvls&#39;).setup()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tricks for lilypond-book&lt;/h3&gt; &#xA;&lt;p&gt;Add this lines to your preamble to avoid the padding on the left side and keep the score justified :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\def\preLilyPondExample{\hspace*{-3mm}}&#xA;\newcommand{\betweenLilyPondSystem}[1]{\linebreak\hspace*{-3mm}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adjust space between systems using this line (in &lt;code&gt;\renewcommand&lt;/code&gt; or &lt;code&gt;\newcommand&lt;/code&gt;) :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;{\betweenLilyPondSystem}[1]{\vspace{5mm}\linebreak\hspace*{-3mm}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>