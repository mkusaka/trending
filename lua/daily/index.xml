<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-10T01:33:51Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>1msorry/Eulen-Cheats-Cracked-by-1msorry</title>
    <updated>2022-12-10T01:33:51Z</updated>
    <id>tag:github.com,2022-12-10:/1msorry/Eulen-Cheats-Cracked-by-1msorry</id>
    <link href="https://github.com/1msorry/Eulen-Cheats-Cracked-by-1msorry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EULEN CHEATS CRACKED - FREE DOWNLOAD | FIVEM LUA EXECUTOR | MOD MENU GTA V | GTA RP | SPOOFER FIVEM | DUMPER&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eulen-Cheats-FiveM-Lua-Executor-Cracked-by-1msorry&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Any Problem? Check Our Discord:&lt;/strong&gt; &lt;a href=&#34;https://discord.com/invite/c2pCQCEP&#34;&gt;https://discord.com/invite/c2pCQCEP&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;üîê || PASS: 1msorry&lt;/h1&gt; &#xA;&lt;p&gt;Compiled: &lt;a href=&#34;https://github.com/1msorry/Eulen-Cheats-Cracked-by-1msorry/releases/tag/v5.3&#34;&gt;https://github.com/1msorry/Eulen-Cheats-Cracked-by-1msorry/releases/tag/v5.3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üé• || SHOWCASE EULEN CRACKED:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=651B2MJ-zAk&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/651B2MJ-zAk/maxresdefault.jpg&#34; alt=&#34;Alt text&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚ö†Ô∏è || REQUIRES .NET 4.8&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Force Third Person NOT WORKING (don&#39;t use)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CCQcMaK.png&#34; alt=&#34;This is an image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üñï FCK EULEN TEAM &lt;del&gt;&lt;a href=&#34;https://eulencheats.com/&#34;&gt;https://eulencheats.com/&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dv5frDP.png&#34; alt=&#34;This is an image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;eulencheats free, eulencheats cracked, eulencheats, fivem lua executor, fivem cheat, gta v cheat, gta rp hack, eulen cheats gta v, eulencheats download, eulen cheats download, fivem modmenu, modmenu cracked, modmenu free, felipemenu, felipemenu download, download fivem cheat&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>xmake-io/xmake</title>
    <updated>2022-12-10T01:33:51Z</updated>
    <id>tag:github.com,2022-12-10:/xmake-io/xmake</id>
    <link href="https://github.com/xmake-io/xmake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üî• A cross-platform build utility based on Lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://xmake.io&#34;&gt; &lt;img width=&#34;160&#34; heigth=&#34;160&#34; src=&#34;https://tboox.org/static/img/xmake/logo256c.png&#34;&gt; &lt;/a&gt; &#xA; &lt;h1&gt;xmake&lt;/h1&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/actions?query=workflow%3AWindows&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/xmake-io/xmake/Windows/master.svg?style=flat-square&amp;amp;logo=windows&#34; alt=&#34;github-ci&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/actions?query=workflow%3ALinux&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/xmake-io/xmake/Linux/master.svg?style=flat-square&amp;amp;logo=linux&#34; alt=&#34;github-ci&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/actions?query=workflow%3AmacOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/xmake-io/xmake/macOS/master.svg?style=flat-square&amp;amp;logo=apple&#34; alt=&#34;github-ci&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/xmake-io/xmake.svg?style=flat-square&#34; alt=&#34;Github All Releases&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://aur.archlinux.org/packages/xmake&#34;&gt; &lt;img src=&#34;https://img.shields.io/aur/votes/xmake.svg?style=flat-square&#34; alt=&#34;AUR votes&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/raw/master/LICENSE.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/xmake-io/xmake.svg?colorB=f48041&amp;amp;style=flat-square&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://www.reddit.com/r/xmake/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20reddit-ff3f34.svg?style=flat-square&#34; alt=&#34;Reddit&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://gitter.im/xmake-io/xmake?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/gitter/room/xmake-io/xmake.svg?style=flat-square&amp;amp;colorB=96c312&#34; alt=&#34;Gitter&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://t.me/tbooxorg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20telegram-blue.svg?style=flat-square&#34; alt=&#34;Telegram&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=5hpwWFv&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20QQ-ff69b4.svg?style=flat-square&#34; alt=&#34;QQ&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://discord.gg/xmake&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?style=flat-square&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://xmake.io/#/sponsor&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/donate-us-orange.svg?style=flat-square&#34; alt=&#34;Donate&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;p&gt;&lt;b&gt;A cross-platform build utility based on Lua&lt;/b&gt;&lt;br&gt; &lt;i&gt;Modern C/C++ build tool: Simple, Fast, Powerful dependency package integration&lt;/i&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Support this project&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by &lt;a href=&#34;https://xmake.io/#/about/sponsor&#34;&gt;becoming a sponsor&lt;/a&gt;. Your logo will show up here with a link to your website. üôè&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/xmake#sponsors&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xmake/sponsors.svg?width=890&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xmake#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xmake/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Technical Support&lt;/h2&gt; &#xA;&lt;p&gt;You can also consider sponsoring us to get extra technical support services via the &lt;a href=&#34;https://github.com/sponsors/waruqi&#34;&gt;Github sponsor program&lt;/a&gt;, This gives you access to the &lt;a href=&#34;https://github.com/xmake-io/technical-support&#34;&gt;xmake-io/technical-support&lt;/a&gt; repository, where you can get more information on consulting.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Handling Issues with higher priority&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; One-to-one technical consulting service&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Review your xmake.lua and provide suggestions for improvement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction (&lt;a href=&#34;https://raw.githubusercontent.com/xmake-io/xmake/master/README_zh.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;Xmake is a lightweight, cross-platform build utility based on Lua.&lt;/p&gt; &#xA;&lt;p&gt;It is very lightweight and has no dependencies due to the integration of the Lua runtime.&lt;/p&gt; &#xA;&lt;p&gt;It uses xmake.lua to maintain project builds with a very simple and readable syntax.&lt;/p&gt; &#xA;&lt;p&gt;We can use it to build projects directly like Make/Ninja or generate project files like CMake/Meson. It also has a built-in package management system to help users integrate C/C++ dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although not very precise, we can still understand Xmake in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Xmake ~= Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to know more, please refer to: &lt;a href=&#34;https://xmake.io/#/getting_started&#34;&gt;Documents&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmake-io/xmake&#34;&gt;Github&lt;/a&gt; and &lt;a href=&#34;https://gitee.com/tboox/xmake&#34;&gt;Gitee&lt;/a&gt;. You are also welcome to join our &lt;a href=&#34;https://xmake.io/#/about/contact&#34;&gt;community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://xmake.io/assets/img/index/xmake-basic-render.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;via curl&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(curl -fsSL https://xmake.io/shget.text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;via wget&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(wget https://xmake.io/shget.text -O -)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;via powershell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-Expression (Invoke-Webrequest &#39;https://xmake.io/psget.text&#39; -UseBasicParsing).Content&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Other installation methods&lt;/h4&gt; &#xA;&lt;p&gt;If you don&#39;t want to use the script to install xmake, see &lt;a href=&#34;https://xmake.io/#/guide/installation&#34;&gt;Installation Guide&lt;/a&gt; for other installation methods.&lt;/p&gt; &#xA;&lt;h2&gt;Simple description&lt;/h2&gt; &#xA;&lt;img src=&#34;https://xmake.io/assets/img/index/showcode1.png&#34; width=&#34;340px&#34;&gt; &#xA;&lt;h2&gt;Package dependences&lt;/h2&gt; &#xA;&lt;img src=&#34;https://xmake.io/assets/img/index/add_require.png&#34; width=&#34;600px&#34;&gt; &#xA;&lt;p&gt;An official xmake package repository exists at: &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://xmake.io/assets/img/index/package.gif&#34; width=&#34;650px&#34;&gt; &#xA;&lt;h2&gt;Create project&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake create hello&#xA;$ cd hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build project&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run target&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake run console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debug target&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake run -d console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure platform&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake f -p [windows|linux|macosx|android|iphoneos ..] -a [x86|arm64 ..] -m [debug|release]&#xA;$ xmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Menu configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake f --menu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://xmake.io/assets/img/index/menuconf.png&#34; width=&#34;650px&#34;&gt; &#xA;&lt;h2&gt;Build as fast as ninja&lt;/h2&gt; &#xA;&lt;p&gt;The test project: &lt;a href=&#34;https://github.com/xmake-io/xmake/tree/master/core&#34;&gt;xmake-core&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Multi-task parallel compilation&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;Termux (8core/-j12)&lt;/th&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;MacOS (8core/-j12)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;24.890s&lt;/td&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;12.264s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;25.682s&lt;/td&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;11.327s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;5.416s+28.473s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;1.203s+14.030s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;4.458s+24.842s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;0.988s+11.644s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Single task compilation&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;Termux (-j1)&lt;/th&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;MacOS (-j1)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;1m57.707s&lt;/td&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;39.937s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;1m52.845s&lt;/td&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;38.995s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;5.416s+2m10.539s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;1.203s+41.737s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;4.458s+1m54.868s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;0.988s+38.022s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Package management&lt;/h2&gt; &#xA;&lt;h3&gt;Processing architecture&lt;/h3&gt; &#xA;&lt;img src=&#34;https://xmake.io/assets/img/index/package_arch.png&#34; width=&#34;650px&#34;&gt; &#xA;&lt;h3&gt;Supported package repositories&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official package repository &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt; (tbox &amp;gt;1.6.1)&lt;/li&gt; &#xA; &lt;li&gt;Official package manager &lt;a href=&#34;https://github.com/xmake-io/xrepo&#34;&gt;Xrepo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmake.io/#/package/remote_package?id=using-self-built-private-package-repository&#34;&gt;User-built repositories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Conan (conan::openssl/1.1.1g)&lt;/li&gt; &#xA; &lt;li&gt;Conda (conda::libpng 1.3.67)&lt;/li&gt; &#xA; &lt;li&gt;Vcpkg (vcpkg::ffmpeg)&lt;/li&gt; &#xA; &lt;li&gt;Homebrew/Linuxbrew (brew::pcre2/libpcre2-8)&lt;/li&gt; &#xA; &lt;li&gt;Pacman on archlinux/msys2 (pacman::libcurl)&lt;/li&gt; &#xA; &lt;li&gt;Apt on ubuntu/debian (apt::zlib1g-dev)&lt;/li&gt; &#xA; &lt;li&gt;Clib (clib::clibs/bytes@0.0.4)&lt;/li&gt; &#xA; &lt;li&gt;Dub (dub::log 0.4.3)&lt;/li&gt; &#xA; &lt;li&gt;Portage on Gentoo/Linux (portage::libhandy)&lt;/li&gt; &#xA; &lt;li&gt;Nimble for nimlang (nimble::zip &amp;gt;1.3)&lt;/li&gt; &#xA; &lt;li&gt;Cargo for rust (cargo::base64 0.13.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Package management features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The official repository provides nearly 700+ packages with one-click compilation on all platforms&lt;/li&gt; &#xA; &lt;li&gt;Full platform package support, support for cross-compiled dependent packages&lt;/li&gt; &#xA; &lt;li&gt;Support package virtual environment using &lt;code&gt;xrepo env shell&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Precompiled package acceleration for Windows&lt;/li&gt; &#xA; &lt;li&gt;Support self-built package repositories and private repository deployment&lt;/li&gt; &#xA; &lt;li&gt;Third-party package repository support for repositories such as: vcpkg, conan, conda, etc.&lt;/li&gt; &#xA; &lt;li&gt;Supports automatic pulling of remote toolchains&lt;/li&gt; &#xA; &lt;li&gt;Supports dependency version locking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows (x86, x64)&lt;/li&gt; &#xA; &lt;li&gt;macOS (i386, x86_64, arm64)&lt;/li&gt; &#xA; &lt;li&gt;Linux (i386, x86_64, cross-toolchains ..)&lt;/li&gt; &#xA; &lt;li&gt;*BSD (i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;Android (x86, x86_64, armeabi, armeabi-v7a, arm64-v8a)&lt;/li&gt; &#xA; &lt;li&gt;iOS (armv7, armv7s, arm64, i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;WatchOS (armv7k, i386)&lt;/li&gt; &#xA; &lt;li&gt;AppleTVOS (armv7, arm64, i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;MSYS (i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;MinGW (i386, x86_64, arm, arm64)&lt;/li&gt; &#xA; &lt;li&gt;Cygwin (i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;Wasm (wasm32)&lt;/li&gt; &#xA; &lt;li&gt;Cross (cross-toolchains ..)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported toolchains&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake show -l toolchains&#xA;xcode         Xcode IDE&#xA;msvc          Microsoft Visual C/C++ Compiler&#xA;clang-cl      LLVM Clang C/C++ Compiler compatible with msvc&#xA;yasm          The Yasm Modular Assembler&#xA;clang         A C language family frontend for LLVM&#xA;go            Go Programming Language Compiler&#xA;dlang         D Programming Language Compiler&#xA;gfortran      GNU Fortran Programming Language Compiler&#xA;zig           Zig Programming Language Compiler&#xA;sdcc          Small Device C Compiler&#xA;cuda          CUDA Toolkit (nvcc, nvc, nvc++, nvfortran)&#xA;ndk           Android NDK&#xA;rust          Rust Programming Language Compiler&#xA;swift         Swift Programming Language Compiler&#xA;llvm          A collection of modular and reusable compiler and toolchain technologies&#xA;cross         Common cross compilation toolchain&#xA;nasm          NASM Assembler&#xA;gcc           GNU Compiler Collection&#xA;mingw         Minimalist GNU for Windows&#xA;gnu-rm        GNU Arm Embedded Toolchain&#xA;envs          Environment variables toolchain&#xA;fasm          Flat Assembler&#xA;tinycc        Tiny C Compiler&#xA;emcc          A toolchain for compiling to asm.js and WebAssembly&#xA;icc           Intel C/C++ Compiler&#xA;ifort         Intel Fortran Compiler&#xA;muslcc        The musl-based cross-compilation toolchain&#xA;fpc           Free Pascal Programming Language Compiler&#xA;wasi          WASI-enabled WebAssembly C/C++ toolchain&#xA;nim           Nim Programming Language Compiler&#xA;circle        A new C++20 compiler&#xA;armcc         ARM Compiler Version 5 of Keil MDK&#xA;armclang      ARM Compiler Version 6 of Keil MDK&#xA;c51           Keil development tools for the 8051 Microcontroller Architecture&#xA;icx           Intel LLVM C/C++ Compiler&#xA;dpcpp         Intel LLVM C++ Compiler for data parallel programming model based on Khronos SYCL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C&lt;/li&gt; &#xA; &lt;li&gt;C++&lt;/li&gt; &#xA; &lt;li&gt;Objective-C and Objective-C++&lt;/li&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA; &lt;li&gt;Assembly&lt;/li&gt; &#xA; &lt;li&gt;Golang&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;Dlang&lt;/li&gt; &#xA; &lt;li&gt;Fortran&lt;/li&gt; &#xA; &lt;li&gt;Cuda&lt;/li&gt; &#xA; &lt;li&gt;Zig&lt;/li&gt; &#xA; &lt;li&gt;Vala&lt;/li&gt; &#xA; &lt;li&gt;Pascal&lt;/li&gt; &#xA; &lt;li&gt;Nim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The configuration grammar is simple and easy to use&lt;/li&gt; &#xA; &lt;li&gt;Quick, dependency-free installation&lt;/li&gt; &#xA; &lt;li&gt;One-click compilation for all platforms&lt;/li&gt; &#xA; &lt;li&gt;Supports cross compilation with intelligent analysis of cross toolchain information&lt;/li&gt; &#xA; &lt;li&gt;Extremely fast parallel compilation support&lt;/li&gt; &#xA; &lt;li&gt;C++20 module support&lt;/li&gt; &#xA; &lt;li&gt;Supports cross-platform C/C++ dependencies with built-in package manager&lt;/li&gt; &#xA; &lt;li&gt;Multi-language compilation support including mixed-language projects.&lt;/li&gt; &#xA; &lt;li&gt;Rich plug-in support with various project generators (ex. vs/makefile/cmakelists/compile_commands)&lt;/li&gt; &#xA; &lt;li&gt;REPL interactive execution support&lt;/li&gt; &#xA; &lt;li&gt;Incremental compilation support with automatic analysis of header files&lt;/li&gt; &#xA; &lt;li&gt;Quick toolchain management&lt;/li&gt; &#xA; &lt;li&gt;A large number of expansion modules&lt;/li&gt; &#xA; &lt;li&gt;Remote compilation support&lt;/li&gt; &#xA; &lt;li&gt;Distributed compilation support&lt;/li&gt; &#xA; &lt;li&gt;Local and remote build cache support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Static Library&lt;/li&gt; &#xA; &lt;li&gt;Shared Library&lt;/li&gt; &#xA; &lt;li&gt;Console&lt;/li&gt; &#xA; &lt;li&gt;Cuda Program&lt;/li&gt; &#xA; &lt;li&gt;Qt Application&lt;/li&gt; &#xA; &lt;li&gt;WDK Driver (umdf/kmdf/wdm)&lt;/li&gt; &#xA; &lt;li&gt;WinSDK Application&lt;/li&gt; &#xA; &lt;li&gt;MFC Application&lt;/li&gt; &#xA; &lt;li&gt;iOS/MacOS Application (Support .metal)&lt;/li&gt; &#xA; &lt;li&gt;Framework and Bundle Program (iOS/MacOS)&lt;/li&gt; &#xA; &lt;li&gt;SWIG Modules (Lua, python, ...)&lt;/li&gt; &#xA; &lt;li&gt;Luarocks Modules&lt;/li&gt; &#xA; &lt;li&gt;Protobuf Program&lt;/li&gt; &#xA; &lt;li&gt;Lex/yacc program&lt;/li&gt; &#xA; &lt;li&gt;C++20 Modules&lt;/li&gt; &#xA; &lt;li&gt;Linux Kernel Driver Modules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Distributed Compilation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cross-platform support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for msvc, clang, gcc and cross-compilation toolchain&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for building android, ios, linux, win, macOS programs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; No dependencies other than the compilation toolchain&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for build server load balancing scheduling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for real time compressed transfer of large files (lz4)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Almost zero configuration cost, no shared filesystem required, more convenience and security&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;About distributed compilation and build cache, you can see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmake.io/#/features/distcc_build&#34;&gt;Distributed Compilation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmake.io/#/features/build_cache&#34;&gt;Build Cache&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Remote Compilation&lt;/h2&gt; &#xA;&lt;p&gt;For more details see: &lt;a href=&#34;https://xmake.io/#/features/remote_build&#34;&gt;Remote Compilation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;h4&gt;Debug and release profiles&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_rules(&#34;mode.debug&#34;, &#34;mode.release&#34;)&#xA;&#xA;target(&#34;console&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    if is_mode(&#34;debug&#34;) then&#xA;        add_defines(&#34;DEBUG&#34;)&#xA;    end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom scripts&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    after_build(function (target)&#xA;        print(&#34;hello: %s&#34;, target:name())&#xA;        os.exec(&#34;echo %s&#34;, target:targetfile())&#xA;    end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Automatic integration of dependent packages&lt;/h4&gt; &#xA;&lt;p&gt;Download and use packages in &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt; or third-party repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;tbox &amp;gt;1.6.1&#34;, &#34;libuv master&#34;, &#34;vcpkg::ffmpeg&#34;, &#34;brew::pcre2/libpcre2-8&#34;)&#xA;add_requires(&#34;conan::openssl/1.1.1g&#34;, {alias = &#34;openssl&#34;, optional = true, debug = true})&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    add_packages(&#34;tbox&#34;, &#34;libuv&#34;, &#34;vcpkg::ffmpeg&#34;, &#34;brew::pcre2/libpcre2-8&#34;, &#34;openssl&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, we can also use the &lt;a href=&#34;https://github.com/xmake-io/xrepo&#34;&gt;xrepo&lt;/a&gt; command to quickly install dependencies.&lt;/p&gt; &#xA;&lt;h4&gt;Qt QuickApp Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    add_rules(&#34;qt.quickapp&#34;)&#xA;    add_files(&#34;src/*.cpp&#34;)&#xA;    add_files(&#34;src/qml.qrc&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Cuda Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.cu&#34;)&#xA;    add_cugencodes(&#34;native&#34;)&#xA;    add_cugencodes(&#34;compute_35&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;WDK/UMDF Driver Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;echo&#34;)&#xA;    add_rules(&#34;wdk.driver&#34;, &#34;wdk.env.umdf&#34;)&#xA;    add_files(&#34;driver/*.c&#34;)&#xA;    add_files(&#34;driver/*.inx&#34;)&#xA;    add_includedirs(&#34;exe&#34;)&#xA;&#xA;target(&#34;app&#34;)&#xA;    add_rules(&#34;wdk.binary&#34;, &#34;wdk.env.umdf&#34;)&#xA;    add_files(&#34;exe/*.cpp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More wdk driver program examples exist (umdf/kmdf/wdm), please see &lt;a href=&#34;https://xmake.io/#/guide/project_examples?id=wdk-driver-program&#34;&gt;WDK Program Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;iOS/MacOS Application&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    add_rules(&#34;xcode.application&#34;)&#xA;    add_files(&#34;src/*.m&#34;, &#34;src/**.storyboard&#34;, &#34;src/*.xcassets&#34;)&#xA;    add_files(&#34;src/Info.plist&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Framework and Bundle Program (iOS/MacOS)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    add_rules(&#34;xcode.framework&#34;) -- or xcode.bundle&#xA;    add_files(&#34;src/*.m&#34;)&#xA;    add_files(&#34;src/Info.plist&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenMP Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;libomp&#34;, {optional = true})&#xA;target(&#34;loop&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.cpp&#34;)&#xA;    add_rules(&#34;c++.openmp&#34;)&#xA;    add_packages(&#34;libomp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Zig Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/main.zig&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatically fetch remote toolchain&lt;/h3&gt; &#xA;&lt;h4&gt;fetch a special version of llvm&lt;/h4&gt; &#xA;&lt;p&gt;We use Clang in &lt;code&gt;llvm-10&lt;/code&gt; to compile the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;llvm 10.x&#34;, {alias = &#34;llvm-10&#34;})&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    set_toolchains(&#34;llvm@llvm-10&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fetch cross-compilation toolchain&lt;/h4&gt; &#xA;&lt;p&gt;We can also pull a specified cross-compilation toolchain to compile the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;muslcc&#34;)&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    set_toolchains(&#34;@muslcc&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fetch toolchain and packages&lt;/h4&gt; &#xA;&lt;p&gt;We can also use the specified &lt;code&gt;muslcc&lt;/code&gt; cross-compilation toolchain to compile and integrate all dependent packages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;muslcc&#34;)&#xA;add_requires(&#34;zlib&#34;, &#34;libogg&#34;, {system = false})&#xA;&#xA;set_toolchains(&#34;@muslcc&#34;)&#xA;&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    add_packages(&#34;zlib&#34;, &#34;libogg&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;h4&gt;Generate IDE project file pluginÔºàmakefile, vs2002 - vs2022 .. Ôºâ&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake project -k vsxmake -m &#34;debug,release&#34; # New vsproj generator (Recommended)&#xA;$ xmake project -k vs -m &#34;debug,release&#34;&#xA;$ xmake project -k cmake&#xA;$ xmake project -k ninja&#xA;$ xmake project -k compile_commands&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run a custom lua script plugin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake l ./test.lua&#xA;$ xmake l -c &#34;print(&#39;hello xmake!&#39;)&#34;&#xA;$ xmake l lib.detect.find_tool gcc&#xA;$ xmake l&#xA;&amp;gt; print(&#34;hello xmake!&#34;)&#xA;&amp;gt; {1, 2, 3}&#xA;&amp;lt; {&#xA;    1,&#xA;    2,&#xA;    3&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More builtin plugins exist, please see: &lt;a href=&#34;https://xmake.io/#/plugin/builtin_plugins&#34;&gt;Builtin plugins&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please download and install other plugins from the plugins repository &lt;a href=&#34;https://github.com/xmake-io/xmake-plugins&#34;&gt;xmake-plugins&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;IDE/Editor Integration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmake-io/xmake-vscode&#34;&gt;xmake-vscode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmake-io/xmake-vscode/master/res/problem.gif&#34; width=&#34;650px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmake-io/xmake-sublime&#34;&gt;xmake-sublime&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmake-io/xmake-sublime/master/res/problem.gif&#34; width=&#34;650px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmake-io/xmake-idea&#34;&gt;xmake-idea&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmake-io/xmake-idea/master/res/problem.gif&#34; width=&#34;650px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/luzhlon/xmake.vim&#34;&gt;xmake.vim&lt;/a&gt; (third-party, thanks &lt;a href=&#34;https://github.com/luzhlon&#34;&gt;@luzhlon&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HelloWorld886/xmake-visualstudio&#34;&gt;xmake-visualstudio&lt;/a&gt; (third-party, thanks &lt;a href=&#34;https://github.com/HelloWorld886&#34;&gt;@HelloWorld886&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Arthapz/xmake-project-manager&#34;&gt;xmake-qtcreator&lt;/a&gt; (third-party, thanks &lt;a href=&#34;https://github.com/Arthapz&#34;&gt;@Arthapz&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;XMake Gradle Plugin (JNI)&lt;/h3&gt; &#xA;&lt;p&gt;We can use the &lt;a href=&#34;https://github.com/xmake-io/xmake-gradle&#34;&gt;xmake-gradle&lt;/a&gt; plugin to compile JNI libraries via gradle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;plugins {&#xA;  id &#39;org.tboox.gradle-xmake-plugin&#39; version &#39;1.1.5&#39;&#xA;}&#xA;&#xA;android {&#xA;    externalNativeBuild {&#xA;        xmake {&#xA;            path &#34;jni/xmake.lua&#34;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;xmakeBuild&lt;/code&gt; task will be injected into the &lt;code&gt;assemble&lt;/code&gt; task automatically if the &lt;code&gt;gradle-xmake-plugin&lt;/code&gt; has been applied.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./gradlew app:assembleDebug&#xA;&amp;gt; Task :nativelib:xmakeConfigureForArm64&#xA;&amp;gt; Task :nativelib:xmakeBuildForArm64&#xA;&amp;gt;&amp;gt; xmake build&#xA;[ 50%]: ccache compiling.debug nativelib.cc&#xA;[ 75%]: linking.debug libnativelib.so&#xA;[100%]: build ok!&#xA;&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/arm64-v8a&#xA;&amp;gt; Task :nativelib:xmakeConfigureForArmv7&#xA;&amp;gt; Task :nativelib:xmakeBuildForArmv7&#xA;&amp;gt;&amp;gt; xmake build&#xA;[ 50%]: ccache compiling.debug nativelib.cc&#xA;[ 75%]: linking.debug libnativelib.so&#xA;[100%]: build ok!&#xA;&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/armeabi-v7a&#xA;&amp;gt; Task :nativelib:preBuild&#xA;&amp;gt; Task :nativelib:assemble&#xA;&amp;gt; Task :app:assembleDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CI Integration&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub Action&lt;/h3&gt; &#xA;&lt;p&gt;We can use &lt;a href=&#34;https://github.com/xmake-io/github-action-setup-xmake&#34;&gt;github-action-setup-xmake&lt;/a&gt; to setup Xmake in Github Actions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uses: xmake-io/github-action-setup-xmake@v1&#xA;with:&#xA;  xmake-version: latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Who is using Xmake?&lt;/h2&gt; &#xA;&lt;p&gt;The user list is available &lt;a href=&#34;https://xmake.io/#/about/who_is_using_xmake&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are using xmake, you are welcome to submit your information to the above list through a PR, so that others can know how many users are using it.&lt;/p&gt; &#xA;&lt;p&gt;This also let users use xmake more confidently and give us motivation to continue to maintain it. This will help the xmake project and it&#39;s community to grow stronger.&lt;/p&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EmailÔºö&lt;a href=&#34;mailto:waruqi@gmail.com&#34;&gt;waruqi@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HomepageÔºö&lt;a href=&#34;https://xmake.io&#34;&gt;xmake.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Community &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/xmake/&#34;&gt;Chat on reddit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://t.me/tbooxorg&#34;&gt;Chat on telegram&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gitter.im/xmake-io/xmake?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;Chat on gitter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://discord.gg/xmake&#34;&gt;Chat on discord&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Chat on QQ Group: 343118190, 662147501&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Source CodeÔºö&lt;a href=&#34;https://github.com/xmake-io/xmake&#34;&gt;Github&lt;/a&gt;, &lt;a href=&#34;https://gitee.com/tboox/xmake&#34;&gt;Gitee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wechat Public: tboox-os&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who have &lt;a href=&#34;https://raw.githubusercontent.com/xmake-io/xmake/master/CONTRIBUTING.md&#34;&gt;contributed&lt;/a&gt;: &lt;a href=&#34;https://github.com/xmake-io/xmake/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/xmake/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TitanSnow&#34;&gt;TitanSnow&lt;/a&gt;: provide the xmake &lt;a href=&#34;https://github.com/TitanSnow/ts-xmake-logo&#34;&gt;logo&lt;/a&gt; and install scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uael&#34;&gt;uael&lt;/a&gt;: provide the semantic versioning library &lt;a href=&#34;https://github.com/uael/sv&#34;&gt;sv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpportunityLiu&#34;&gt;OpportunityLiu&lt;/a&gt;: improve cuda, tests and ci&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xq114&#34;&gt;xq144&lt;/a&gt;: Improve &lt;code&gt;xrepo env shell&lt;/code&gt;, and contribute a lot of packages to the &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt; repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enderger&lt;/code&gt;: Helped smooth out the edges on the English translation of the README&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jay-babu/mason-nvim-dap.nvim</title>
    <updated>2022-12-10T01:33:51Z</updated>
    <id>tag:github.com,2022-12-10:/jay-babu/mason-nvim-dap.nvim</id>
    <link href="https://github.com/jay-babu/mason-nvim-dap.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;code&gt;mason-nvim-dap&lt;/code&gt; bridges &lt;code&gt;mason.nvim&lt;/code&gt; with the &lt;code&gt;nvim-dap&lt;/code&gt; plugin - making it easier to use both plugins together.&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;mason-nvim-dap.nvim&lt;/code&gt; closes some gaps that exist between &lt;code&gt;mason.nvim&lt;/code&gt; and &lt;code&gt;nvim-dap&lt;/code&gt;. Its main responsibilities are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;provide extra convenience APIs such as the &lt;code&gt;:DapInstall&lt;/code&gt; command&lt;/li&gt; &#xA; &lt;li&gt;allow you to (i) automatically install, and (ii) automatically set up a predefined list of adapters&lt;/li&gt; &#xA; &lt;li&gt;translate between &lt;code&gt;dap&lt;/code&gt; adapter names and &lt;code&gt;mason.nvim&lt;/code&gt; package names (e.g. &lt;code&gt;python&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;debugpy&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to use this extension if you use &lt;code&gt;mason.nvim&lt;/code&gt; and &lt;code&gt;nvim-dap&lt;/code&gt;. (This plugin won&#39;t really work without them)&lt;/p&gt; &#xA;&lt;p&gt;**Note: this plugin uses the &lt;code&gt;dap&lt;/code&gt; adapter names in the APIs it exposes - not &lt;code&gt;mason.nvim&lt;/code&gt; package names.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;williamboman/mason.nvim&#34;,&#xA;    &#34;mfussenegger/nvim-dap&#34;,&#xA;    &#34;jayp0521/mason-nvim-dap.nvim&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;vim-plug&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;williamboman/mason.nvim&#39;&#xA;Plug &#39;mfussenegger/nvim-dap&#39;&#xA;Plug &#39;jayp0521/mason-nvim-dap.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;It&#39;s important that you set up the plugins in the following order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mason-nvim-dap.nvim&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Pay extra attention to this if you&#39;re using a plugin manager to load plugins for you, as there are no guarantees it&#39;ll load plugins in the correct order unless explicitly instructed to.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup()&#xA;require(&#34;mason-nvim-dap&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-nvim-dap.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:DapInstall [&amp;lt;adapter&amp;gt;...]&lt;/code&gt; - installs the provided adapter&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DapUninstall &amp;lt;adapter&amp;gt; ...&lt;/code&gt; - uninstalls the provided adapter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;You may optionally configure certain behavior of &lt;code&gt;mason-nvim-dap.nvim&lt;/code&gt; when calling the &lt;code&gt;.setup()&lt;/code&gt; function. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-nvim-dap.nvim/main/#default-configuration&#34;&gt;default configuration&lt;/a&gt; for a list of all available settings.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason-nvim-dap&#34;).setup({&#xA;    ensure_installed = { &#34;python&#34;, &#34;delve&#34; }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local DEFAULT_SETTINGS = {&#xA;    -- A list of adapters to install if they&#39;re not already installed.&#xA;    -- This setting has no relation with the `automatic_installation` setting.&#xA;    ensure_installed = {},&#xA;&#xA;&#x9;-- NOTE: this is left here for future porting in case needed&#xA;&#x9;-- Whether adapters that are set up (via dap) should be automatically installed if they&#39;re not already installed.&#xA;&#x9;-- This setting has no relation with the `ensure_installed` setting.&#xA;&#x9;-- Can either be:&#xA;&#x9;--   - false: Daps are not automatically installed.&#xA;&#x9;--   - true: All adapters set up via dap are automatically installed.&#xA;&#x9;--   - { exclude: string[] }: All adapters set up via mason-nvim-dap, except the ones provided in the list, are automatically installed.&#xA;&#x9;--       Example: automatic_installation = { exclude = { &#34;python&#34;, &#34;delve&#34; } }&#xA;    automatic_installation = false,&#xA;&#xA;&#x9;-- Whether adapters that are installed in mason should be automatically set up in dap.&#xA;&#x9;-- Removes the need to set up dap manually.&#xA;&#x9;-- See mappings.adapters and mappings.configurations for settings.&#xA;&#x9;-- Must invoke when set to true: `require &#39;mason-nvim-dap&#39;.setup_handlers()`&#xA;&#x9;-- Can either be:&#xA;&#x9;-- &#x9;- false: Dap is not automatically configured.&#xA;&#x9;-- &#x9;- true: Dap is automatically configured.&#xA;&#x9;-- &#x9;- {adapters: {ADAPTER: {}, }, configurations: {ADAPTER: {}, }}. Allows overriding default configuration.&#xA;&#x9;automatic_setup = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Automatic Setup Usage&lt;/h1&gt; &#xA;&lt;p&gt;Automatic Setup is a need feature that removes the need to configure &lt;code&gt;dap&lt;/code&gt; for supported adapters. Adapters found installed in &lt;code&gt;mason&lt;/code&gt; will automatically be setup for dap.&lt;/p&gt; &#xA;&lt;h2&gt;Example Config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup()&#xA;require(&#34;mason-nvim-dap&#34;).setup({&#xA;    automatic_setup = true,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the Default Configuration section to understand how the default dap configs can be overriden.&lt;/p&gt; &#xA;&lt;h1&gt;Setup handlers usage&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;setup_handlers()&lt;/code&gt; function provides a dynamic way of setting up sources and any other needed logic, It can also do that during runtime.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; When setting &lt;code&gt;automatic_setup = true&lt;/code&gt;, the handler function needs to be called at a minimum like: &lt;code&gt;require &#39;mason-nvim-dap&#39;.setup_handlers()&lt;/code&gt;. When passing in a custom handler function for the the default or a source, then the automatic_setup function one won&#39;t be invoked. See below to keep original functionality inside the custom handler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local dap = require(&#34;dap&#34;)&#xA;&#xA;require (&#39;mason-nvim-dap&#39;).setup({&#xA;    ensure_installed = {&#39;stylua&#39;, &#39;jq&#39;}&#xA;})&#xA;&#xA;require &#39;mason-nvim-dap&#39;.setup_handlers {&#xA;    function(source_name)&#xA;      -- all sources with no handler get passed here&#xA;&#xA;&#xA;      -- Keep original functionality of `automatic_setup = true`&#xA;      require(&#39;mason-nvim-dap.automatic_setup&#39;)(source_name)&#xA;    end,&#xA;    python = function(source_name)&#xA;        dap.adapters.python = {&#xA;&#x9;        type = &#34;executable&#34;,&#xA;&#x9;        command = &#34;/usr/bin/python3&#34;,&#xA;&#x9;        args = {&#xA;&#x9;&#x9;        &#34;-m&#34;,&#xA;&#x9;&#x9;        &#34;debugpy.adapter&#34;,&#xA;&#x9;        },&#xA;        }&#xA;&#xA;        dap.configurations.python = {&#xA;&#x9;        {&#xA;&#x9;&#x9;        type = &#34;python&#34;,&#xA;&#x9;&#x9;        request = &#34;launch&#34;,&#xA;&#x9;&#x9;        name = &#34;Launch file&#34;,&#xA;&#x9;&#x9;        program = &#34;${file}&#34;, -- This configuration will launch the current file if used.&#xA;&#x9;        },&#xA;        }&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Available Dap Adapters&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jayp0521/mason-nvim-dap/raw/main/lua/mason-nvim-dap/mappings/source.lua&#34;&gt;https://github.com/jayp0521/mason-nvim-dap/blob/main/lua/mason-nvim-dap/mappings/source.lua&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>