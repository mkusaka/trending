<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-16T01:33:44Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kosayoda/nvim-lightbulb</title>
    <updated>2022-12-16T01:33:44Z</updated>
    <id>tag:github.com,2022-12-16:/kosayoda/nvim-lightbulb</id>
    <link href="https://github.com/kosayoda/nvim-lightbulb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VSCode ðŸ’¡ for neovim&#39;s built-in LSP.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lightbulb&lt;/h1&gt; &#xA;&lt;p&gt;VSCode ðŸ’¡ for neovim&#39;s built-in LSP.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s2.gifyu.com/images/nvim-lightbulb.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Code Action selection window shown in the gif is &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Introduction/Rationale&lt;/h2&gt; &#xA;&lt;p&gt;The plugin shows a lightbulb in the sign column whenever a &lt;code&gt;textDocument/codeAction&lt;/code&gt; is available at the current cursor position.&lt;/p&gt; &#xA;&lt;p&gt;This makes code actions both &lt;a href=&#34;https://rust-analyzer.github.io/blog/2020/09/28/how-to-make-a-light-bulb.html#the-mighty&#34;&gt;discoverable and efficient&lt;/a&gt;, as code actions can be available even when there are no visible diagnostics (warning, information, hints etc.).&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim&lt;/a&gt; with LSP capabilities.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/antoinemadec/FixCursorHold.nvim&#34;&gt;FixCursorHold.nvim plugin&lt;/a&gt; is strongly recommended to work around existing Neovim issues surrounding the &lt;code&gt;CursorHold&lt;/code&gt; and &lt;code&gt;CursorHoldI&lt;/code&gt; autocmd events.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Just like any other plugin.&lt;/p&gt; &#xA;&lt;p&gt;Example using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;kosayoda/nvim-lightbulb&#39;&#xA;Plug &#39;antoinemadec/FixCursorHold.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;kosayoda/nvim-lightbulb&#39;,&#xA;    requires = &#39;antoinemadec/FixCursorHold.nvim&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Call &lt;code&gt;require(&#39;nvim-lightbulb&#39;).update_lightbulb()&lt;/code&gt; whenever you want to show a lightbulb if a code action is available at the current cursor position. Example with an &lt;a href=&#34;https://neovim.io/doc/user/autocmd.html&#34;&gt;&lt;code&gt;autocmd&lt;/code&gt;&lt;/a&gt; for all filetypes:&lt;/p&gt; &#xA;&lt;p&gt;VimScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;autocmd CursorHold,CursorHoldI * lua require(&#39;nvim-lightbulb&#39;).update_lightbulb()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd [[autocmd CursorHold,CursorHoldI * lua require(&#39;nvim-lightbulb&#39;).update_lightbulb()]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to let the plugin create this autocommand for you. This can be enabled using the &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-lightbulb&#39;).setup({autocmd = {enabled = true}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For all options, see the Configuration section.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;h5&gt;Set defaults&lt;/h5&gt; &#xA;&lt;p&gt;Configuration can be passed to the setup function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Showing defaults&#xA;require(&#39;nvim-lightbulb&#39;).setup({&#xA;    -- LSP client names to ignore&#xA;    -- Example: {&#34;sumneko_lua&#34;, &#34;null-ls&#34;}&#xA;    ignore = {},&#xA;    sign = {&#xA;        enabled = true,&#xA;        -- Priority of the gutter sign&#xA;        priority = 10,&#xA;    },&#xA;    float = {&#xA;        enabled = false,&#xA;        -- Text to show in the popup float&#xA;        text = &#34;ðŸ’¡&#34;,&#xA;        -- Available keys for window options:&#xA;        -- - height     of floating window&#xA;        -- - width      of floating window&#xA;        -- - wrap_at    character to wrap at for computing height&#xA;        -- - max_width  maximal width of floating window&#xA;        -- - max_height maximal height of floating window&#xA;        -- - pad_left   number of columns to pad contents at left&#xA;        -- - pad_right  number of columns to pad contents at right&#xA;        -- - pad_top    number of lines to pad contents at top&#xA;        -- - pad_bottom number of lines to pad contents at bottom&#xA;        -- - offset_x   x-axis offset of the floating window&#xA;        -- - offset_y   y-axis offset of the floating window&#xA;        -- - anchor     corner of float to place at the cursor (NW, NE, SW, SE)&#xA;        -- - winblend   transparency of the window (0-100)&#xA;        win_opts = {},&#xA;    },&#xA;    virtual_text = {&#xA;        enabled = false,&#xA;        -- Text to show at virtual text&#xA;        text = &#34;ðŸ’¡&#34;,&#xA;        -- highlight mode to use for virtual text (replace, combine, blend), see :help nvim_buf_set_extmark() for reference&#xA;        hl_mode = &#34;replace&#34;,&#xA;    },&#xA;    status_text = {&#xA;        enabled = false,&#xA;        -- Text to provide when code actions are available&#xA;        text = &#34;ðŸ’¡&#34;,&#xA;        -- Text to provide when no actions are available&#xA;        text_unavailable = &#34;&#34;&#xA;    },&#xA;    autocmd = {&#xA;        enabled = false,&#xA;        -- see :help autocmd-pattern&#xA;        pattern = {&#34;*&#34;},&#xA;        -- see :help autocmd-events&#xA;        events = {&#34;CursorHold&#34;, &#34;CursorHoldI&#34;}&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Per-call configuration&lt;/h5&gt; &#xA;&lt;p&gt;You can overwrite the defaults by passing options to the &lt;code&gt;update_lightbulb&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;VimScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;autocmd CursorHold,CursorHoldI * lua require&#39;nvim-lightbulb&#39;.update_lightbulb({ ignore = {&#34;null-ls&#34;} })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd [[autocmd CursorHold,CursorHoldI * lua require&#39;nvim-lightbulb&#39;.update_lightbulb({ ignore = {&#34;null-ls&#34;} })]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Modify the &lt;a href=&#34;https://neovim.io/doc/user/sign.html#:sign-define&#34;&gt;lightbulb sign&lt;/a&gt;:&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Fill &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;texthl&lt;/code&gt;, &lt;code&gt;linehl&lt;/code&gt;, and &lt;code&gt;numhl&lt;/code&gt; according to your preferences&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;VimScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call sign_define(&#39;LightBulbSign&#39;, { text = &#34;&#34;, texthl = &#34;&#34;, linehl=&#34;&#34;, numhl=&#34;&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.fn.sign_define(&#39;LightBulbSign&#39;, { text = &#34;&#34;, texthl = &#34;&#34;, linehl=&#34;&#34;, numhl=&#34;&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Modify the lightbulb float window and virtual text colors&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Fill &lt;code&gt;ctermfg&lt;/code&gt;, &lt;code&gt;ctermbg&lt;/code&gt;, &lt;code&gt;guifg&lt;/code&gt;, &lt;code&gt;guibg&lt;/code&gt; according to your preferences&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;VimScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;augroup HighlightOverride&#xA;  autocmd!&#xA;  au ColorScheme * highlight LightBulbFloatWin ctermfg= ctermbg= guifg= guibg=&#xA;  au ColorScheme * highlight LightBulbVirtualText ctermfg= ctermbg= guifg= guibg=&#xA;augroup END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_command(&#39;highlight LightBulbFloatWin ctermfg= ctermbg= guifg= guibg=&#39;)&#xA;vim.api.nvim_command(&#39;highlight LightBulbVirtualText ctermfg= ctermbg= guifg= guibg=&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Status-line text usage&lt;/h5&gt; &#xA;&lt;p&gt;With the status_text option enabled you can access the current lightbulb state through the lua function &lt;code&gt;require(&#39;nvim-lightbulb&#39;).get_status_text()&lt;/code&gt;. This allows easy integration with multiple different status line plugins.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ii14/neopm</title>
    <updated>2022-12-16T01:33:44Z</updated>
    <id>tag:github.com,2022-12-16:/ii14/neopm</id>
    <link href="https://github.com/ii14/neopm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Plugin manager for neovim, pre-alpha stage.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;neopm&lt;/h1&gt; &#xA;&lt;p&gt;Plugin manager for neovim, pre-alpha stage. &lt;strong&gt;Expect breaking changes.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Install plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatic plugin patching&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate help tags&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; User interface &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Error reporting&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fetch and review pending updates&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Show git log&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Show git reflog and restore updates&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Show diffs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Manage patches&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Overview&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Plugin options &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Plugin dependencies&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Post load hook&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Post install hook&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Lazy loading &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Filetype&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Commands&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Key mappings&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Events&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Functions&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Lua modules&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; On demand&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Clone &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; branch&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; tag&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; commit&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Lockfile&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Optional &lt;code&gt;runtimepath&lt;/code&gt; optimization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p ~/.config/nvim/lua&#xA;git clone https://github.com/ii14/neopm ~/.config/nvim/lua/neopm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Managing plugins&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- can be a global or local variable, doesn&#39;t matter.&#xA;-- name can be anything, eg. you can use `p` or `P` if&#xA;-- you prefer it to be something shorter.&#xA;Plug = require(&#39;neopm&#39;)&#xA;&#xA;-- default config:&#xA;-- Plug.config {&#xA;--   install_dir = vim.fn.stdpath(&#39;data&#39;)..&#39;/neopm&#39;,&#xA;--   patch_dir   = vim.fn.stdpath(&#39;config&#39;)..&#39;/patches&#39;,&#xA;--   git_command = &#39;git&#39;,&#xA;-- }&#xA;&#xA;-- Editing --&#xA;Plug &#39;ii14/vim-surround&#39;&#xA;Plug &#39;numToStr/Comment.nvim&#39;&#xA;Plug &#39;tpope/vim-repeat&#39;&#xA;Plug &#39;tpope/vim-abolish&#39;&#xA;Plug &#39;wellle/targets.vim&#39;&#xA;Plug &#39;tommcdo/vim-exchange&#39;&#xA;Plug &#39;haya14busa/vim-asterisk&#39;&#xA;Plug &#39;romainl/vim-cool&#39;&#xA;Plug &#39;godlygeek/tabular&#39;&#xA;Plug &#39;ii14/vim-bbye&#39;&#xA;Plug &#39;mbbill/undotree&#39;&#xA;Plug &#39;wellle/visual-split.vim&#39;&#xA;&#xA;-- Visual --&#xA;if vim.g.enable_lua_theme == nil then&#xA;  Plug &#39;itchyny/lightline.vim&#39;&#xA;  Plug &#39;mengelbrecht/lightline-bufferline&#39;&#xA;end&#xA;Plug &#39;lukas-reineke/indent-blankline.nvim&#39;&#xA;&#xA;-- File management --&#xA;Plug &#39;junegunn/fzf&#39; { run = &#39;:call fzf#install()&#39; } -- post install hook, not implemented&#xA;Plug &#39;junegunn/fzf.vim&#39; { depends = &#39;junegunn/fzf&#39; } -- depend on other plugin&#xA;Plug &#39;lambdalisue/fern.vim&#39; { depends = &#39;antoinemadec/FixCursorHold.nvim&#39; }&#xA;Plug &#39;LumaKernel/fern-mapping-fzf.vim&#39;&#xA;Plug &#39;bogado/file-line&#39;&#xA;&#xA;-- Autocompletion --&#xA;if vim.g.disable_lsp == nil then&#xA;  Plug &#39;neovim/nvim-lspconfig&#39;&#xA;  Plug &#39;ii14/lsp-command&#39;&#xA;  Plug &#39;jose-elias-alvarez/null-ls.nvim&#39; { depends = &#39;nvim-lua/plenary.nvim&#39; }&#xA;  Plug &#39;folke/trouble.nvim&#39;&#xA;end&#xA;Plug &#39;hrsh7th/nvim-compe&#39;&#xA;Plug &#39;L3MON4D3/LuaSnip&#39;&#xA;&#xA;-- Development --&#xA;Plug &#39;tpope/vim-fugitive&#39;&#xA;Plug &#39;rbong/vim-flog&#39;&#xA;Plug &#39;lewis6991/gitsigns.nvim&#39; { depends = &#39;nvim-lua/plenary.nvim&#39; }&#xA;Plug &#39;sindrets/diffview.nvim&#39; { depends = &#39;nvim-lua/plenary.nvim&#39; }&#xA;Plug &#39;tpope/vim-dispatch&#39;&#xA;Plug &#39;ii14/exrc.vim&#39;&#xA;if vim.env.NO_NREPL == nil then&#xA;  Plug &#39;ii14/nrepl.nvim&#39;&#xA;end&#xA;&#xA;-- Syntax --&#xA;Plug &#39;sheerun/vim-polyglot&#39;&#xA;Plug &#39;fedorenchik/qt-support.vim&#39;&#xA;Plug &#39;PotatoesMaster/i3-vim-syntax&#39;&#xA;Plug &#39;ii14/vim-rasi&#39;&#xA;Plug &#39;norcalli/nvim-colorizer.lua&#39;&#xA;Plug &#39;milisims/nvim-luaref&#39;&#xA;&#xA;-- Misc --&#xA;Plug &#39;vimwiki/vimwiki&#39; { on = &#39;VimwikiIndex&#39;, ft = { &#39;vimwiki&#39;, &#39;markdown&#39; } }&#xA;Plug &#39;kizza/actionmenu.nvim&#39;&#xA;&#xA;-- Performance --&#xA;Plug &#39;tweekmonster/startuptime.vim&#39;&#xA;Plug &#39;lewis6991/impatient.nvim&#39;&#xA;Plug &#39;nathom/filetype.nvim&#39;&#xA;&#xA;-- checks if there are any uninstalled plugins&#xA;Plug.autoinstall(true)&#xA;-- finish it up by loading declared plugins&#xA;Plug.load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install and update plugins&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neopm install&#xA;:Neopm update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Patching plugins&lt;/h3&gt; &#xA;&lt;p&gt;You can create automatically applied patches for plugins by saving diffs to the &lt;code&gt;~/.config/nvim/patches&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p ~/.config/nvim/patches&#xA;cd ~/.local/share/nvim/neopm/some-vim-plugin&#xA;# make some edits&#xA;git diff &amp;gt; ~/.config/nvim/patches/some-vim-plugin.diff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This process will be more streamlined in the future.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SiarkowyMods/Bagnon_Square</title>
    <updated>2022-12-16T01:33:44Z</updated>
    <id>tag:github.com,2022-12-16:/SiarkowyMods/Bagnon_Square</id>
    <link href="https://github.com/SiarkowyMods/Bagnon_Square" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WoW addon: Bagnon module that sets inventory and bank layout to form a square.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bagnon_Square&lt;/h1&gt; &#xA;&lt;p&gt;Bagnon module that sets inventory and bank layout to form a square.&lt;/p&gt;</summary>
  </entry>
</feed>