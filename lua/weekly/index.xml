<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-27T01:47:23Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>numToStr/Comment.nvim</title>
    <updated>2022-11-27T01:47:23Z</updated>
    <id>tag:github.com,2022-11-27:/numToStr/Comment.nvim</id>
    <link href="https://github.com/numToStr/Comment.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üß† üí™ // Smart and powerful comment plugin for neovim. Supports treesitter, dot repeat, left-right/up-down motions, hooks, and more&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;// Comment.nvim &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;sup&gt;‚ö° Smart and Powerful commenting plugin for neovim ‚ö°&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/42532967/136532939-926a8350-84b7-4e78-b045-fe21b5947388.gif&#34; alt=&#34;Comment.nvim&#34; title=&#34;Commenting go brrrr&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;‚ú® Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports treesitter. &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#treesitter&#34;&gt;Read more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;code&gt;commentstring&lt;/code&gt;. Read &lt;code&gt;:h comment.commentstring&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports line (&lt;code&gt;//&lt;/code&gt;) and block (&lt;code&gt;/* */&lt;/code&gt;) comments&lt;/li&gt; &#xA; &lt;li&gt;Dot (&lt;code&gt;.&lt;/code&gt;) repeat support for &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;gbc&lt;/code&gt; and friends&lt;/li&gt; &#xA; &lt;li&gt;Count support for &lt;code&gt;[count]gcc&lt;/code&gt; and &lt;code&gt;[count]gbc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Left-right (&lt;code&gt;gcw&lt;/code&gt; &lt;code&gt;gc$&lt;/code&gt;) and Up-Down (&lt;code&gt;gc2j&lt;/code&gt; &lt;code&gt;gc4k&lt;/code&gt;) motions&lt;/li&gt; &#xA; &lt;li&gt;Use with text-objects (&lt;code&gt;gci{&lt;/code&gt; &lt;code&gt;gbat&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Supports pre and post hooks&lt;/li&gt; &#xA; &lt;li&gt;Ignore certain lines, powered by Lua regex&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üöÄ Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;numToStr/Comment.nvim&#39;,&#xA;    config = function()&#xA;        require(&#39;Comment&#39;).setup()&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;numToStr/Comment.nvim&#39;&#xA;&#xA;&#34; Somewhere after plug#end()&#xA;lua require(&#39;Comment&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üìñ Getting Help&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Comment.nvim&lt;/code&gt; provides help docs which can be accessed by running &lt;code&gt;:help comment-nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;setup&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;‚öíÔ∏è Setup&lt;/h3&gt; &#xA;&lt;p&gt;First you need to call the &lt;code&gt;setup()&lt;/code&gt; method to create the default mappings.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - If you are facing &lt;strong&gt;Keybindings are mapped but they are not working&lt;/strong&gt; issue then please try &lt;a href=&#34;https://github.com/numToStr/Comment.nvim/issues/115#issuecomment-1032290098&#34;&gt;this&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;Comment&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VimL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;Comment&#39;).setup()&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;config&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuration (optional)&lt;/h4&gt; &#xA;&lt;p&gt;Following are the &lt;strong&gt;default&lt;/strong&gt; config for the &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&#34;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;. If you want to override, just modify the option that you want then it will be merged with the default config. Read &lt;code&gt;:h comment.config&lt;/code&gt; for more info.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    ---Add a space b/w comment and the line&#xA;    padding = true,&#xA;    ---Whether the cursor should stay at its position&#xA;    sticky = true,&#xA;    ---Lines to be ignored while (un)comment&#xA;    ignore = nil,&#xA;    ---LHS of toggle mappings in NORMAL mode&#xA;    toggler = {&#xA;        ---Line-comment toggle keymap&#xA;        line = &#39;gcc&#39;,&#xA;        ---Block-comment toggle keymap&#xA;        block = &#39;gbc&#39;,&#xA;    },&#xA;    ---LHS of operator-pending mappings in NORMAL and VISUAL mode&#xA;    opleader = {&#xA;        ---Line-comment keymap&#xA;        line = &#39;gc&#39;,&#xA;        ---Block-comment keymap&#xA;        block = &#39;gb&#39;,&#xA;    },&#xA;    ---LHS of extra mappings&#xA;    extra = {&#xA;        ---Add comment on the line above&#xA;        above = &#39;gcO&#39;,&#xA;        ---Add comment on the line below&#xA;        below = &#39;gco&#39;,&#xA;        ---Add comment at the end of line&#xA;        eol = &#39;gcA&#39;,&#xA;    },&#xA;    ---Enable keybindings&#xA;    ---NOTE: If given `false` then the plugin won&#39;t create any mappings&#xA;    mappings = {&#xA;        ---Operator-pending mapping; `gcc` `gbc` `gc[count]{motion}` `gb[count]{motion}`&#xA;        basic = true,&#xA;        ---Extra mapping; `gco`, `gcO`, `gcA`&#xA;        extra = true,&#xA;    },&#xA;    ---Function to call before (un)comment&#xA;    pre_hook = nil,&#xA;    ---Function to call after (un)comment&#xA;    post_hook = nil,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üî• Usage&lt;/h3&gt; &#xA;&lt;p&gt;When you call &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&#34;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; method, &lt;code&gt;Comment.nvim&lt;/code&gt; sets up some basic mapping which can used in NORMAL and VISUAL mode to get you started with the pleasure of commenting stuff out.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;basic-mappings&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Basic mappings&lt;/h4&gt; &#xA;&lt;p&gt;These mappings are enabled by default. (config: &lt;code&gt;mappings.basic&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NORMAL mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;`gcc` - Toggles the current line using linewise comment&#xA;`gbc` - Toggles the current line using blockwise comment&#xA;`[count]gcc` - Toggles the number of line given as a prefix-count using linewise&#xA;`[count]gbc` - Toggles the number of line given as a prefix-count using blockwise&#xA;`gc[count]{motion}` - (Op-pending) Toggles the region using linewise comment&#xA;`gb[count]{motion}` - (Op-pending) Toggles the region using blockwise comment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VISUAL mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;`gc` - Toggles the region using linewise comment&#xA;`gb` - Toggles the region using blockwise comment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;extra-mappings&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Extra mappings&lt;/h4&gt; &#xA;&lt;p&gt;These mappings are enabled by default. (config: &lt;code&gt;mappings.extra&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NORMAL mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;`gco` - Insert comment to the next line and enters INSERT mode&#xA;`gcO` - Insert comment to the previous line and enters INSERT mode&#xA;`gcA` - Insert comment to end of the current line and enters INSERT mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Examples&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;# Linewise&#xA;&#xA;`gcw` - Toggle from the current cursor position to the next word&#xA;`gc$` - Toggle from the current cursor position to the end of line&#xA;`gc}` - Toggle until the next blank line&#xA;`gc5j` - Toggle 5 lines after the current cursor position&#xA;`gc8k` - Toggle 8 lines before the current cursor position&#xA;`gcip` - Toggle inside of paragraph&#xA;`gca}` - Toggle around curly brackets&#xA;&#xA;# Blockwise&#xA;&#xA;`gb2}` - Toggle until the 2 next blank line&#xA;`gbaf` - Toggle comment around a function (w/ LSP/treesitter support)&#xA;`gbac` - Toggle comment around a class (w/ LSP/treesitter support)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;treesitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üå≥ Treesitter&lt;/h3&gt; &#xA;&lt;p&gt;This plugin has native &lt;strong&gt;treesitter&lt;/strong&gt; support for calculating &lt;code&gt;commentstring&lt;/code&gt; which works for multiple (injected/embedded) languages like Vue or Markdown. But due to the nature of the parsed tree, this implementation has some known limitations.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;No &lt;code&gt;jsx/tsx&lt;/code&gt; support. Its implementation was quite complicated.&lt;/li&gt; &#xA; &lt;li&gt;Invalid comment on the region where one language ends and the other starts. &lt;a href=&#34;https://github.com/numToStr/Comment.nvim/pull/62#issuecomment-972790418&#34;&gt;Read more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unexpected comment on a line with multiple languages. &lt;a href=&#34;https://github.com/numToStr/Comment.nvim/issues/144&#34;&gt;#144&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For advance use cases, use &lt;a href=&#34;https://github.com/JoosepAlviste/nvim-ts-context-commentstring&#34;&gt;nvim-ts-context-commentstring&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#pre-hook&#34;&gt;&lt;code&gt;pre_hook&lt;/code&gt;&lt;/a&gt; section for the integration.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - This plugin does not depend on &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; however it is recommended in order to easily install tree-sitter parsers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a id=&#34;hooks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üé£ Hooks&lt;/h3&gt; &#xA;&lt;p&gt;There are two hook methods i.e &lt;code&gt;pre_hook&lt;/code&gt; and &lt;code&gt;post_hook&lt;/code&gt; which are called before comment and after comment respectively. Both should be provided during &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&#34;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;pre-hook&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pre_hook&lt;/code&gt; - Called with a &lt;code&gt;ctx&lt;/code&gt; argument (Read &lt;code&gt;:h comment.utils.CommentCtx&lt;/code&gt;) before (un)comment. Can optionally return a &lt;code&gt;commentstring&lt;/code&gt; to be used for (un)commenting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    pre_hook = function(ctx)&#xA;        if ctx.range.srow == ctx.range.erow then&#xA;            -- do something with the current line&#xA;        else&#xA;            -- do something with lines range&#xA;        end&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also integrate &lt;a href=&#34;https://github.com/JoosepAlviste/nvim-ts-context-commentstring#commentnvim&#34;&gt;nvim-ts-context-commentstring&lt;/a&gt; using &lt;code&gt;pre_hook&lt;/code&gt; to easily comment &lt;code&gt;tsx/jsx&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - &lt;code&gt;Comment.nvim&lt;/code&gt; already supports &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#treesitter&#34;&gt;&lt;code&gt;treesitter&lt;/code&gt;&lt;/a&gt; out-of-the-box for all the languages except &lt;code&gt;tsx/jsx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    pre_hook = require(&#39;ts_context_commentstring.integrations.comment_nvim&#39;).create_pre_hook(),&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;post-hook&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;post_hook&lt;/code&gt; - This method is called after (un)commenting. It receives the same &lt;code&gt;ctx&lt;/code&gt; (Read &lt;code&gt;:h comment.utils.CommentCtx&lt;/code&gt;) argument as &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#pre_hook&#34;&gt;&lt;code&gt;pre_hook&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    post_hook = function(ctx)&#xA;        if ctx.range.srow == ctx.range.erow then&#xA;            -- do something with the current line&#xA;        else&#xA;            -- do something with lines range&#xA;        end&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;post_hook&lt;/code&gt; can be implemented to cover some niche use cases like the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using newlines instead of padding e.g. for commenting out code in C with &lt;code&gt;#if 0&lt;/code&gt;. See an example &lt;a href=&#34;https://github.com/numToStr/Comment.nvim/issues/38#issuecomment-945082507&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Duplicating the commented block (using &lt;code&gt;pre_hook&lt;/code&gt;) and moving the cursor to the next block (using &lt;code&gt;post_hook&lt;/code&gt;). See &lt;a href=&#34;https://github.com/numToStr/Comment.nvim/issues/70&#34;&gt;this&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: When pressing &lt;code&gt;gc&lt;/code&gt;, &lt;code&gt;gb&lt;/code&gt; and friends, &lt;code&gt;cmode&lt;/code&gt; (Comment mode) inside &lt;code&gt;pre_hook&lt;/code&gt; will always be toggle because when pre-hook is called, in that moment we don&#39;t know whether &lt;code&gt;gc&lt;/code&gt; or &lt;code&gt;gb&lt;/code&gt; will comment or uncomment the lines. But luckily, we do know this before &lt;code&gt;post_hook&lt;/code&gt; and this will always receive either comment or uncomment status&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üö´ Ignoring lines&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;ignore&lt;/code&gt; to ignore certain lines during comment/uncomment. It can takes lua regex string or a function that returns a regex string and should be provided during &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/#setup&#34;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Ignore only works when with linewise comment. This is by design. As ignoring lines in block comments doesn&#39;t make that much sense.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;code&gt;string&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- ignores empty lines&#xA;ignore = &#39;^$&#39;&#xA;&#xA;-- ignores line that starts with `local` (excluding any leading whitespace)&#xA;ignore = &#39;^(%s*)local&#39;&#xA;&#xA;-- ignores any lines similar to arrow function&#xA;ignore = &#39;^const(.*)=(%s?)%((.*)%)(%s?)=&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    ignore = function()&#xA;        -- Only ignore empty lines for lua files&#xA;        if vim.bo.filetype == &#39;lua&#39; then&#xA;            return &#39;^$&#39;&#xA;        end&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;languages&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üó®Ô∏è Filetypes + Languages&lt;/h3&gt; &#xA;&lt;p&gt;Most languages/filetypes have native support for comments via &lt;code&gt;commentstring&lt;/code&gt; but there might be a filetype that is not supported. There are two ways to enable commenting for unsupported filetypes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You can set &lt;code&gt;commentstring&lt;/code&gt; for that particular filetype like the following. Read &lt;code&gt;:h commentstring&lt;/code&gt; for more info.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.bo.commentstring = &#39;//%s&#39;&#xA;&#xA;-- or&#xA;vim.api.nvim_command(&#39;set commentstring=//%s&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ft-lua&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;You can also use this plugin interface to store both line and block commentstring for the filetype. You can treat this as a more powerful version of the &lt;code&gt;commentstring&lt;/code&gt;. Read &lt;code&gt;:h comment.ft&lt;/code&gt; for more info.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ft = require(&#39;Comment.ft&#39;)&#xA;&#xA;-- 1. Using set function&#xA;&#xA;ft&#xA; -- Set only line comment&#xA; .set(&#39;yaml&#39;, &#39;#%s&#39;)&#xA; -- Or set both line and block commentstring&#xA; .set(&#39;javascript&#39;, {&#39;//%s&#39;, &#39;/*%s*/&#39;})&#xA;&#xA;-- 2. Metatable magic&#xA;&#xA;ft.javascript = {&#39;//%s&#39;, &#39;/*%s*/&#39;}&#xA;ft.yaml = &#39;#%s&#39;&#xA;&#xA;-- Multiple filetypes&#xA;ft({&#39;go&#39;, &#39;rust&#39;}, ft.get(&#39;c&#39;))&#xA;ft({&#39;toml&#39;, &#39;graphql&#39;}, &#39;#%s&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;PR(s) are welcome to add more commentstring inside the plugin&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;ü§ù Contributing&lt;/h3&gt; &#xA;&lt;p&gt;There are multiple ways to contribute reporting/fixing bugs, feature requests. You can also submit commentstring to this plugin by updating &lt;a href=&#34;https://raw.githubusercontent.com/numToStr/Comment.nvim/master/lua/Comment/ft.lua&#34;&gt;ft.lua&lt;/a&gt; and sending PR.&lt;/p&gt; &#xA;&lt;h3&gt;üì∫ Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-InmtHhk2qM&#34;&gt;TakeTuesday E02: Comment.nvim&lt;/a&gt; by &lt;a href=&#34;https://github.com/tjdevries&#34;&gt;TJ DeVries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üíê Credits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomtom/tcomment_vim&#34;&gt;tcomment&lt;/a&gt; - To be with me forever and motivated me to write this.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/terrortylor/nvim-comment&#34;&gt;nvim-comment&lt;/a&gt; - Little and less powerful cousin. Also I took some code from it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/b3nj5m1n/kommentary&#34;&gt;kommentary&lt;/a&gt; - Nicely done plugin but lacks some features. But it helped me to design this plugin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üöó Roadmap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Doc comment i.e &lt;code&gt;/**%s*/&lt;/code&gt; (js), &lt;code&gt;///%s&lt;/code&gt; (rust)&lt;/li&gt; &#xA; &lt;li&gt;Header comment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;----------------------&#xA;-- This is a header --&#xA;----------------------&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>esx-framework/esx-legacy</title>
    <updated>2022-11-27T01:47:23Z</updated>
    <id>tag:github.com,2022-11-27:/esx-framework/esx-legacy</id>
    <link href="https://github.com/esx-framework/esx-legacy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Repo For ESX-Legacy&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;ESX Legacy&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;&lt;a href=&#34;https://discord.esx-framework.org/&#34;&gt;Discord&lt;/a&gt; - &lt;a href=&#34;https://esx-framework.org/&#34;&gt;Website&lt;/a&gt; - &lt;a href=&#34;https://docs.esx-framework.org/legacy/installation&#34;&gt;Documentation&lt;/a&gt;&lt;/b&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;Want More resources? You can browse the &lt;a href=&#34;https://github.com/esx-community/&#34;&gt;ESX Community Github&lt;/a&gt; or &lt;a href=&#34;https://forum.cfx.re/tag/esx&#34;&gt;Cfx.re Releases board&lt;/a&gt; for more! &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;ESX is the leading framework, trusted By thousands of commmunitys for the heighest quality roleplay servers on FiveM&lt;/b&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Supporters&lt;/h3&gt; &#xA;&lt;p&gt;Interested in helping us? &lt;a href=&#34;https://www.patreon.com/esx&#34; title=&#34;Take a look at our patreon&#34;&gt;Take a look at our patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;We would like to sincerely thank the following donors who helped fund the development of ESX.&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mohamad Buhamad - Michael Hein - RoadToSix - Montree Narathong&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Saydoon - Muhannad alyamani - iSentrie - Wecity - Samuel Nicol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kyle McShea - Artin - Mathias Christoffersen - Jaylan Yilmaz - Callum&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CONGRESS KW - Michael Hein - Smery sitbon - daZepelin - CMF Community&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;ESX-legacy - ESX framework for FiveM&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2015-2022 ESX-Framework&lt;/p&gt; &#xA;&lt;p&gt;This program Is free software: you can redistribute it And/Or modify it under the terms Of the GNU General Public License As published by the Free Software Foundation, either version 3 Of the License, Or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program Is distributed In the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty Of MERCHANTABILITY Or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License For more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy Of the GNU General Public License along with this program. If Not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>overextended/ox_lib</title>
    <updated>2022-11-27T01:47:23Z</updated>
    <id>tag:github.com,2022-11-27:/overextended/ox_lib</id>
    <link href="https://github.com/overextended/ox_lib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modules to utilise in other resources via imports and exports.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;h1&gt;&lt;a href=&#34;https://overextended.github.io/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Lua Library for FiveM&lt;/h2&gt; &#xA;&lt;p&gt;FXServer provides its own system for including files, which we use to load this resource in the fxmanifest via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;shared_script &#39;@ox_lib/init.lua&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;server.cfg&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;add_ace resource.ox_lib command.add_ace allow&#xA;add_ace resource.ox_lib command.remove_ace allow&#xA;add_ace resource.ox_lib command.add_principal allow&#xA;add_ace resource.ox_lib command.remove_principal allow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/lgpl-3.0.en.html&#34;&gt;LGPL-3.0-or-later&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>