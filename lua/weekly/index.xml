<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T01:58:27Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mikesmithgh/kitty-scrollback.nvim</title>
    <updated>2023-10-01T01:58:27Z</updated>
    <id>tag:github.com,2023-10-01:/mikesmithgh/kitty-scrollback.nvim</id>
    <link href="https://github.com/mikesmithgh/kitty-scrollback.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üòΩ Open your Kitty scrollback buffer with Neovim. Ameowzing!&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/a7357844-e0e4-4053-8c77-6d129528504f&#34; alt=&#34;kitty-scrollback&#34; style=&#34;width: 20%&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;üòΩ kitty-scrollback.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Navigate your Kitty scrollback buffer to quickly search, copy, or execute commands in Neovim.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=flat-square&amp;amp;label=neovim&amp;amp;message=v0.10%2b&amp;amp;logo=neovim&amp;amp;labelColor=282828&amp;amp;logoColor=8faa80&amp;amp;color=414b32&#34; alt=&#34;neovim: v0.10+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/v0.29%2B-352217?style=flat-square&amp;amp;logo=data%3Aimage%2Fjpeg%3Bbase64%2C%2F9j%2F4AAQSkZJRgABAQAAAQABAAD%2F4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb%2F2wBDACodICUgGiolIiUvLSoyP2lEPzo6P4FcYUxpmYagnpaGk5GovfLNqLPltZGT0v%2FV5fr%2F%2F%2F%2F%2Fo8v%2F%2F%2F%2F%2F%2F%2FL%2F%2F%2F%2F%2F2wBDAS0vLz83P3xERHz%2FrpOu%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwAARCAEAAQADASIAAhEBAxEB%2F8QAGgABAAMBAQEAAAAAAAAAAAAAAAECAwQFBv%2FEAC8QAQACAQIEAgkFAQEAAAAAAAABAgMEERIhMVFBYQUTFCIyUnGRoUJTgZLB4SP%2FxAAXAQEBAQEAAAAAAAAAAAAAAAAAAQID%2F8QAGxEBAQEBAQEBAQAAAAAAAAAAAAERAhIhMUH%2F2gAMAwEAAhEDEQA%2FAPHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHXix1ikTtG8rzWs9ax9mfTXlwjrtgpPht9GVtPaPhnddieaxCYmJ2mNhUAiJmdojdpXBefCI%2BppjMbxpu9vwt7NXvKbF81zDp9mr3lWdN2t%2BDYeawGlsF48In6M5iYnnEwupgBETM7RG4A2rp7T8U7NK4KR4b%2FVNi%2Ba5R2xSsdKx9lcuOs0mdoiYhPS%2BXIA0yAAAAAAAAAA7MU746z5LsNNb3Zr2bud%2FXSfgAiotWLRtaN2UaesTvO8x2bC6YiIiI2iNkggAAAAImImNpjdIDGdPWZ3jeI7Na1isbVjZIumACAplnbHafJdhqbbVivdZ%2BpfxzgOjmAAAAAABtunhnsCBPDPZALY7cF4n7u1wOnT5N68M9Y6M9RrmtgGGwAATFLW%2BGsz9IJiYnaYmPqCAAAAAiJmdoiZnyWml6xvNbR9YBUAAABx5b8eSZ8PBvnvw02jrLlb5jHV%2FgCeGezTKBPDPZG2wAAAJisgg3nutwx3TwwmrisWlaJiUcMI4T4fUzWCsTF4267o3mq1bc%2FMHYKY78Uea7DoPQ02krWItkje3afBzaOkX1Fd%2Bkc3qNcxnqit6VvG16xMeaMlprtELVneIknUtxh5uq03qZ4q86T%2BHO9jNSMmK1Z8YeOlmOnN0b6XTzmtvblSOvmwevgpFMNKx25kmnVxalK442pWIjyWRadqzKuO02336r6kuObDU6St4m2ONrdo6S87o9t5mtpFNRO36o3Oo3zXOCmTJFeUdWWnNliZy23RFY8VrW57zzlTebNua0zEKzaThTwwfD6rvPcX4YRwx3NMVEzWUKgAALRXunesdk1cU3nunilbihpSsTG8gzj3vCUxXhtE7dJbgqs0%2FXjlpS3FXdTaazvX7d167Tzjlv1ZrUdWhtFdRG%2FjGz03iRMxMTHKYepp9RXNXaZ2v4wvNZ6i2X4o%2Bi%2BP4ILVi3VPKI7RDM5s6tZRktFMdrT4Ru8Z16zUxf8A86TvXxnu5F6rfMHsYrRfFW0eMPHdWj1MY%2FcvPuz0nsc06mu7J8CuLrLTlaO8SitYrHJLzb3Kws83X2i2o2j9MbOzUaiuGve3hDy7TNrTaZ3mectdVrmKZL8Fd%2FsypT9eWf4a2iN4tPPbpCm02ne327JGqyvXjvNoidlZ93wl0DWMuXilG89296REbwz4oEUF96yiax4GmKgKgAAtjpxz5Kt8HwT9QXisVjlCQRQAAAF6zunp0YZbzSu8TtLL12T5vwnlr09GuqzVjaMk%2FwA81b5smT47zMdnB67J834PXZPm%2FBlNjsb10ma0b8G31l5sZ8kTvFua%2Ftup%2Fev9zyXp3zpM0fo3%2BksJiYnaY2mHP7bqf3r%2FAHUnPlmZmbzMz4nlJ07qZsmP4LzEdl51Wa0bTkn%2BOTzfXZPm%2FB67J834Mq%2Bo7JmZneecomdnJ67J834a4rzeJ4p3lPJ6XmdwGkABBW1K26wsA5r0mk%2BSrfP8H8sFQAAAAXx34J59JUAdUTExyndLkImYneBddYyrm5e9H2JzRtyj7g0m0R1mIVnLWPHdzzMzO89QNTe03neUAIAAAAAAAAJpaazvCAHRXLWevJaLRPSYlykTMTvAuusZVzRt70fYtm5e7H3BqiZiOs7OWZmZ3nqBq%2BS%2FHPLpCgCAAAAAAAAAAAALY8d8s7Y6WtPlCLVtS01tExMdYl6vobJj4L4%2BUZN9%2FrDp12jrqqbxtGSOk%2F5IPAFslLY7zS8TFo6xKoAAAAAAAAAAAAAAAAAAAAAAAAAAAAJpa1LRaszFo6TD3dBra6mvDfaMsdY7vBTW1qWi1ZmLR0mAe9rtHXVU3jaMkdJ%2FyXhZKWx3ml4mLR1h7eg1tdTXhvtGWOsd1tdo66qm8bRkjpP%2BSDwBOSlsd5peJi0dYQAAAAAAAAAAAAAAAAAAAAAAAAAAAACa2tS0WrMxaOkw93QayNVThtyyVjn5%2BbxcGG%2BoyxTHG8z%2BHv6XTU02Phrzmetu4M9fo66jHNo5ZKxynv5PAex6S10Y4nDine88rT2eOAAAAAAAAAAAAAAAAAAAAAAAAAAA0wYb6jLFMcbzP4MGG%2BoyxTHG8z%2BHv6XTU02Lhpzmetu4Gl01NNj4a85nrbu5fSOv9VE4sM%2B%2F4z8v%2FT0jr%2FVb4sM%2B%2FwCNvl%2F68br1A6zzAAF64ct43pjvaO8VmU%2BzZ%2F2cn9ZBmNfZs%2F7OT%2Bsns2f9nJ%2FWQZDT2bP%2Bzk%2FrKLYctI3vjvWO81mAUAAAAAAAAAAAAAAAAAAAB6vobJirjvWZiMkzvz8YX9IekIxxOLBaJvPW0eDxwDr1AAI68%2BgA%2BmwXx2xVnFMTXblsu%2BWAfVIfLAPqVM18dMVpyzEV257vmQCevIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH%2F9k%3D&amp;amp;label=kitty&amp;amp;labelColor=282828&#34; alt=&#34;kitty v0.29+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/semantic-release/semantic-release&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=flat-square&amp;amp;label=semantic-release&amp;amp;message=angular&amp;amp;logo=semantic-release&amp;amp;labelColor=282828&amp;amp;logoColor=d8869b&amp;amp;color=8f3f71&#34; alt=&#34;semantic-release: angular&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/Demo&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/6dd229dd-0206-4d50-b627-f5f0f5fe8cd1&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/6dd229dd-0206-4d50-b627-f5f0f5fe8cd1&#34;&gt; &#xA;  &lt;img alt=&#34;kitty-scrollback.nvim demo&#34; src=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/6dd229dd-0206-4d50-b627-f5f0f5fe8cd1&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üòª Navigate Kitty&#39;s scrollback buffer with Neovim&lt;/li&gt; &#xA; &lt;li&gt;üê± Copy contents from Neovim to system clipboard&lt;/li&gt; &#xA; &lt;li&gt;üò∫ Send contents from Neovim to Kitty shell&lt;/li&gt; &#xA; &lt;li&gt;üôÄ Execute shell command from Neovim to Kitty shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§Ø Example use cases&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Copy scrollback text to the clipboard&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open Kitty&#39;s scrollback history (default mapping &lt;code&gt;&amp;lt;C-S-h&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Search backward for a pattern in Neovim &lt;code&gt;?{pattern}&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Enter Visual mode &lt;code&gt;v&lt;/code&gt; and select desired text&lt;/li&gt; &#xA;  &lt;li&gt;Copy selection to clipboard (default mapping &lt;code&gt;&amp;lt;leader&amp;gt;y&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; automatically closes and returns to Kitty&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Modify and execute command&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open Kitty&#39;s scrollback history (default mapping &lt;code&gt;&amp;lt;C-S-h&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Copy desired selection to clipboard (e.g., &lt;code&gt;yy&lt;/code&gt;) &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Alternatively, you could just enter Insert mode (&lt;code&gt;i&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt;) to open an empty floating window (similar to &lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-e&amp;gt;&lt;/code&gt; in Bash)&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; opens a floating window in Neovim with the contents of the selection&lt;/li&gt; &#xA;  &lt;li&gt;Modify the content&lt;/li&gt; &#xA;  &lt;li&gt;Execute the command (default mapping &lt;code&gt;&amp;lt;C-CR&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; automatically closes and executes the command in Kitty&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Modify and paste content&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open Kitty&#39;s scrollback history (default mapping &lt;code&gt;&amp;lt;C-S-h&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Copy desired selection to clipboard (e.g., &lt;code&gt;yy&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; opens a floating window in Neovim with the contents of the selection&lt;/li&gt; &#xA;  &lt;li&gt;Modify the content &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Note: you can close (default mapping &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt;) and reopen (yank or enter Insert mode) the floating window multiple times&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Paste the content (default mapping &lt;code&gt;&amp;lt;S-CR&amp;gt;&lt;/code&gt; or &lt;code&gt;:w&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; automatically closes and paste the contents in Kitty for further editing&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üìö Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &lt;a href=&#34;https://github.com/neovim/neovim/releases&#34;&gt;v0.10+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kitty &lt;a href=&#34;https://github.com/kovidgoyal/kitty/releases&#34;&gt;v0.29+&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üèÉ Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To quickly test this plugin without changing your configuration run the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh -c &#34;$(curl -s https://raw.githubusercontent.com/mikesmithgh/kitty-scrollback.nvim/main/scripts/mini.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; It is good practice to first &lt;a href=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/raw/main/scripts/mini.sh&#34;&gt;read the script&lt;/a&gt; before running &lt;code&gt;sh -c&lt;/code&gt; directly from the web&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  {&#xA;    &#39;mikesmithgh/kitty-scrollback.nvim&#39;,&#xA;    enabled = true,&#xA;    lazy = true,&#xA;    cmd = { &#39;KittyScrollbackGenerateKittens&#39;, &#39;KittyScrollbackCheckHealth&#39; },&#xA;    -- version = &#39;*&#39;, -- latest stable version, may have breaking changes if major version changed&#xA;    -- version = &#39;^1.0.0&#39;, -- pin major version, include fixes and features that do not have breaking changes&#xA;    config = function()&#xA;      require(&#39;kitty-scrollback&#39;).setup()&#xA;    end,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  use({&#xA;    &#39;mikesmithgh/kitty-scrollback.nvim&#39;,&#xA;    disable = false,&#xA;    opt = true,&#xA;    cmd = { &#39;KittyScrollbackGenerateKittens&#39;, &#39;KittyScrollbackCheckHealth&#39; },&#xA;    -- tag = &#39;*&#39;, -- latest stable version, may have breaking changes if major version changed&#xA;    -- tag = &#39;v1.0.0&#39;, -- pin specific tag&#xA;    config = function()&#xA;      require(&#39;kitty-scrollback&#39;).setup()&#xA;    end,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Neovim&#39;s built-in package support &lt;a href=&#34;https://neovim.io/doc/user/usr_05.html#05.4&#34;&gt;pack&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &#34;$HOME/.local/share/nvim/site/pack/mikesmithgh/start/&#34;&#xA;cd $HOME/.local/share/nvim/site/pack/mikesmithgh/start&#xA;git clone git@github.com:mikesmithgh/kitty-scrollback.nvim.git&#xA;nvim -u NONE -c &#34;helptags kitty-scrollback.nvim/doc&#34; -c q&#xA;mkdir -p &#34;$HOME/.config/nvim&#34;&#xA;echo &#34;require(&#39;kitty-scrollback&#39;).setup()&#34; &amp;gt;&amp;gt; &#34;$HOME/.config/nvim/init.lua&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;‚úçÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Kitty&lt;/h3&gt; &#xA;&lt;p&gt;The following steps outline how to properly configure &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf/&#34;&gt;kitty.conf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Enable &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.allow_remote_control&#34;&gt;allow_remote_control&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Valid values are &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;socket&lt;/code&gt;, &lt;code&gt;socket-only&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;If &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; is the only application controlling Kitty then &lt;code&gt;socket-only&lt;/code&gt; is preferred to continue denying TTY requests.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Set &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.listen_on&#34;&gt;listen_on&lt;/a&gt; to a Unix socket&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;For example, &lt;code&gt;listen_on unix:/tmp/kitty&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Enable &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.shell_integration&#34;&gt;shell_integration&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Set &lt;code&gt;shell_integration&lt;/code&gt; to &lt;code&gt;enabled&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Do not add the option &lt;code&gt;no-prompt-mark&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Add &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; mappings&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Generate default Kitten mappings and add to &lt;code&gt;kitty.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvim --headless +&#39;KittyScrollbackGenerateKittens&#39; +&#39;set nonumber&#39; +&#39;set norelativenumber&#39; +&#39;%print&#39; +&#39;quit!&#39; 2&amp;gt;&amp;amp;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Completely close and reopen Kitty&lt;/summary&gt; &#xA;&lt;/details&gt;  &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Check the health of &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvim +&#39;KittyScrollbackCheckHealth&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Follow the instructions of any &lt;code&gt;ERROR&lt;/code&gt; or &lt;code&gt;WARNINGS&lt;/code&gt; reported during the healthcheck&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Test &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; is working as expected by pressing &lt;code&gt;ctrl+shift+h&lt;/code&gt; to open the scrollback buffer in Neovim&lt;/summary&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See example &lt;code&gt;kitty.conf&lt;/code&gt; for reference&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;allow_remote_control yes&#xA;listen_on unix:/tmp/kitty&#xA;shell_integration enabled&#xA;&#xA;# kitty-scrollback.nvim Kitten alias&#xA;action_alias kitty_scrollback_nvim kitten /Users/mike/gitrepos/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py --cwd /Users/mike/gitrepos/kitty-scrollback.nvim/lua/kitty-scrollback/configs&#xA;&#xA;# Browse scrollback buffer in nvim&#xA;map ctrl+shift+h kitty_scrollback_nvim&#xA;# Browse output of the last shell command in nvim&#xA;map ctrl+shift+g kitty_scrollback_nvim --config-file get_text_last_cmd_output.lua&#xA;# Show clicked command output in nvim&#xA;mouse_map ctrl+shift+right press ungrabbed combine : mouse_select_command_output : kitty_scrollback_nvim --config-file get_text_last_visited_cmd_output.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Kitten arguments&lt;/h3&gt; &#xA;&lt;p&gt;Arguments that can be passed to the &lt;code&gt;kitty_scrollback_nvim&lt;/code&gt; Kitten defined in &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf/&#34;&gt;kitty.conf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Argument&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; plugin configuration file. The configuration file must return a Lua table with the function &lt;code&gt;config(kitty_data): table&lt;/code&gt;. You may specify multiple config files that will merge all configuration options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--no-nvim-args&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not provide any arguments to the Neovim instance that displays the scrollback buffer. The default arguments passed to Neovim are &lt;code&gt;--clean --noplugin -n&lt;/code&gt;. This flag removes those options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--nvim-args&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;All arguments after this flag are passed to the Neovim instance that displays the scrollback buffer. This must be the last of the &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; Kitten arguments that are configured. Otherwise, you may unintentionally send the wrong arguments to Neovim. The default arguments passed to Neovim are &lt;code&gt;--clean --noplugin -n&lt;/code&gt;. This flag removes those options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--env&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Environment variable that is passed to the Neovim instance that displays the scrollback buffer. Format is &lt;code&gt;--env var_name=var_value&lt;/code&gt;. You may specify multiple config files that will merge all configuration options. Useful for setting &lt;code&gt;NVIM_APPNAME&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--cwd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The current working directory of the Neovim instance that displays the scrollback buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; configuration file&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Options&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callbacks&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;KsbCallbacks?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;fire and forget callback functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callbacks.after_setup&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(kitty_data: KsbKittyData, opts: KsbOpts)?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callback executed after initializing kitty-scrollback.nvim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callbacks.after_launch&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(kitty_data: KsbKittyData, opts: KsbOpts)?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callback executed after launch started to process the scrollback buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callbacks.after_ready&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(kitty_data: KsbKittyData, opts: KsbOpts)?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callback executed after scrollback buffer is loaded and cursor is positioned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;keymaps_enabled&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;if true, enabled all default keymaps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;restore_options&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;if true, restore options that were modified while processing the scrollback buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;KsbHighlights?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kitty-scrollback.nvim highlight overrides&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimNormal&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window Normal highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimHeart&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window heart icon highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimSpinner&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window spinner icon highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimReady&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window ready icon highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimKitty&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window kitty icon highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimVim&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window vim icon highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimPasteWinNormal&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste window Normal highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimPasteWinFloatBorder&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste window FloatBorder highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimPasteWinFloatTitle&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste window FloatTitle highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status_window&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;KsbStatusWindowOpts?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;options for status window indicating that kitty-scrollback.nvim is ready&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status_window.enabled&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, show status window in upper right corner of the screen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status_window.style_simple&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, use plaintext instead of nerd font icons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status_window.autoclose&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, close the status window after kitty-scrollback.nvim is ready&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status_window.show_timer&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, show a timer in the status window while kitty-scrollback.nvim is loading&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;KsbPasteWindowOpts?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;options for paste window that sends commands to Kitty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.highlight_as_normal_win&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(): boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If function returns true, use Normal highlight group. If false, use NormalFloat&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.filetype&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The filetype of the paste window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.hide_footer&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, hide the footer when the paste window is initially opened&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.winblend&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;integer?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The winblend setting of the window, see :help winblend&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.winopts_overrides&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(paste_winopts: KsbWinOpts): table&amp;lt;string,any&amp;gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Paste float window overrides, see nvim_open_win() for configuration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.footer_winopts_overrides&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(footer_winopts: KsbWinOpts, paste_winopts: KsbWinOpts): table&amp;lt;string,any&amp;gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Paste footer window overrides, see nvim_open_win() for configuration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.yank_register&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;register used during yanks to paste window, see &lt;code&gt;:h registers&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.yank_register_enabled&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, the &lt;code&gt;yank_register&lt;/code&gt; copies content to the paste window. If false, disable yank to paste window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kitty_get_text&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;KsbKittyGetText?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;options passed to get-text when reading scrollback buffer, see &lt;code&gt;kitty @ get-text --help&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kitty_get_text.ansi&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, the text will include the ANSI formatting escape codes for colors, bold, italic, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kitty_get_text.clear_selection&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, clear the selection in the matched window, if any.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kitty_get_text.extent&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;What text to get. The default of screen means all text currently on the screen. all means all the &lt;code&gt;screen+scrollback&lt;/code&gt; and selection means the currently selected text. &lt;code&gt;first_cmd_output_on_screen&lt;/code&gt; means the output of the first command that was run in the window on screen. &lt;code&gt;last_cmd_output&lt;/code&gt; means the output of the last command that was run in the window. &lt;code&gt;last_visited_cmd_output&lt;/code&gt; means the first command output below the last scrolled position via scroll_to_prompt. &lt;code&gt;last_non_empty_output&lt;/code&gt; is the output from the last command run in the window that had some non empty output. The last four require &lt;code&gt;shell_integration&lt;/code&gt; to be enabled. Choices: &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;first_cmd_output_on_screen&lt;/code&gt;, &lt;code&gt;last_cmd_output&lt;/code&gt;, &lt;code&gt;last_non_empty_output&lt;/code&gt;, &lt;code&gt;last_visited_cmd_output&lt;/code&gt;, &lt;code&gt;selection&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;checkhealth&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;if true execute :checkhealth kitty-scrollback and skip setup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Nerd Fonts&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; uses &lt;a href=&#34;https://www.nerdfonts.com&#34;&gt;Nerd Fonts&lt;/a&gt; in the status window. If you would like to use ASCII instead, set the option &lt;code&gt;status_window.style_simple&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Status window with Nerd Fonts &lt;code&gt;opts.status_window.style_simple = false&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/4cf5b303-5061-43da-a857-c99daea82332&#34;&gt;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/4cf5b303-5061-43da-a857-c99daea82332&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Status window with ASCII text &lt;code&gt;opts.status_window.style_simple = true&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/a0e1b574-59ab-4abf-93a1-f314c7cd47b3&#34;&gt;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/a0e1b574-59ab-4abf-93a1-f314c7cd47b3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;ü´° Commands and Lua API&lt;/h2&gt; &#xA;&lt;p&gt;The API is available via the &lt;code&gt;kitty-scrollback.api&lt;/code&gt; module. e.g., &lt;code&gt;require(&#39;kitty-scrollback.api&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;API&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;:KittyScrollbackGenerateKittens[!]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;generate_kittens(boolean?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Generate Kitten commands used as reference for configuring &lt;code&gt;kitty.conf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;:KittyScrollbackCheckHealth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;checkhealth()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Run &lt;code&gt;:checkhealth kitty-scrollback&lt;/code&gt; in the context of Kitty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;‚å®Ô∏è Keymaps and Lua API&lt;/h2&gt; &#xA;&lt;p&gt;The API is available via the &lt;code&gt;kitty-scrollback.api&lt;/code&gt; module. e.g., &lt;code&gt;require(&#39;kitty-scrollback.api&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;&lt;/code&gt; Mapping&lt;/th&gt; &#xA;   &lt;th&gt;Default Mapping&lt;/th&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;API&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbExecuteCmd)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-CR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n,i&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;execute_command()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute the contents of the paste window in Kitty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbPasteCmd)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-CR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n,i&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;paste_command()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Paste the contents of the paste window to Kitty without executing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbToggleFooter)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_footer()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle the paste window footer that displays mappings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbCloseOrQuitAll)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;close_or_quit_all()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If the current buffer is the paste buffer, then close the window. Otherwise quit Neovim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbQuitAll)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n,i,t&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;quit_all()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quit Neovim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbVisualYankLine)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;Y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maps to &lt;code&gt;&#34;+Y&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbVisualYank)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maps to &lt;code&gt;&#34;+y&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbNormalYankEnd)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;Y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maps to &lt;code&gt;&#34;+y$&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbNormalYank)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maps to &lt;code&gt;&#34;+y&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbNormalYankLine)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;yy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maps to &lt;code&gt;&#34;+yy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üëè Recommendations&lt;/h2&gt; &#xA;&lt;p&gt;The following plugins are nice additions to your Neovim and Kitty setup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fladson/vim-kitty&#34;&gt;vim-kitty&lt;/a&gt; - Syntax highlighting for Kitty terminal config files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrjones2014/smart-splits.nvim&#34;&gt;smart-splits.nvim&lt;/a&gt; - Seamless navigation between Neovim and Kitty split panes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ù Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kitty &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/kittens/custom/&#34;&gt;custom kitten&lt;/a&gt; documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/m00qek/baleia.nvim&#34;&gt;baleia.nvim&lt;/a&gt; - very nice plugin to colorize Neovim buffer containing ANSI escape sequences. I plan to add integration with this plugin ü§ù&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kovidgoyal/kitty/issues/719&#34;&gt;kovidgoyal/kitty#719 Feature Request: Ability to select text with the keyboard (vim-like)&lt;/a&gt; - ideas for passing the scrollback buffer to Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kovidgoyal/kitty/issues/2426&#34;&gt;kovidgoyal/kitty#2426 &#39;Failed to open controlling terminal&#39; error when trying to remote control from vim&lt;/a&gt; - workaround for issuing kitty remote commands without a tty &lt;code&gt;listen_on unix:/tmp/mykitty&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kovidgoyal/kitty/discussions/6485&#34;&gt;kovidgoyal/kitty#6485 Vi mode for kitty&lt;/a&gt; - inspiration to leverage Neovim&#39;s terminal for the scrollback buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/tokyonight.nvim&#34;&gt;tokyonight.nvim&lt;/a&gt; - referenced for color darkening, thank you folke!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt; - referenced for window sizing, thank you folke!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ibhagwan/fzf-lua&#34;&gt;fzf-lua&lt;/a&gt; - quickstart &lt;code&gt;mini.sh&lt;/code&gt; and inspiration/reference for displaying keymapping footer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Eandrju/cellular-automaton.nvim&#34;&gt;cellular-automaton.nvim&lt;/a&gt; - included in a fun example config&lt;/li&gt; &#xA; &lt;li&gt;StackExchange &lt;a href=&#34;https://codegolf.stackexchange.com/a/177958/119424&#34;&gt;CamelCase2snake_case()&lt;/a&gt; - for converting Neovim highlight names to &lt;code&gt;SCREAMING_SNAKE_CASE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kdheepak/panvimdoc&#34;&gt;panvimdoc&lt;/a&gt; - generating vimdocs from README&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/numToStr/lemmy-help&#34;&gt;lemmy-help&lt;/a&gt; - generating vimdocs from Lua annotations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MordechaiHadad/bob&#34;&gt;bob&lt;/a&gt; - easy Neovim version management to check backward compatibility&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üê∂ Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yurikhan/kitty_grab&#34;&gt;kitty_grab&lt;/a&gt; - Keyboard-driven screen grabber for Kitty&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trygveaa/kitty-kitten-search&#34;&gt;kitty-kitten-search&lt;/a&gt; - Kitten for the kitty terminal emulator providing live incremental search in the terminal history.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/50852780-b3ce-4cb2-8e88-c1ea79e3e140&#34; alt=&#34;scared cat&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-core</title>
    <updated>2023-10-01T01:58:27Z</updated>
    <id>tag:github.com,2023-10-01:/qbcore-framework/qb-core</id>
    <link href="https://github.com/qbcore-framework/qb-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FiveM RP Framework Core üí™&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-core&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://docs.qbcore.org&#34;&gt;Official QBCore Documentation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2015-2022 ESX (J√©r√©mie N&#39;gadi), Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ray-x/go.nvim</title>
    <updated>2023-10-01T01:58:27Z</updated>
    <id>tag:github.com,2023-10-01:/ray-x/go.nvim</id>
    <link href="https://github.com/ray-x/go.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A feature-rich Go development plugin, leveraging gopls, treesitter AST, Dap, and various Go tools to enhance the development experience.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;go.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A modern go neovim plugin based on treesitter, nvim-lsp and dap debugger. It is written in Lua and async as much as possible. PR &amp;amp; Suggestions welcome. The plugin covers most features required for a gopher.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Perproject setup. Allows you setup plugin behavior per project based on project files(launch.json, .gonvim)&lt;/li&gt; &#xA; &lt;li&gt;Async jobs with libuv&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlight &amp;amp; Texobject: Native treesitter support is faster and more accurate. All you need is a theme support treesitter, try &lt;a href=&#34;https://github.com/ray-x/aurora&#34;&gt;aurora&lt;/a&gt;, &lt;a href=&#34;https://github.com/ray-x/starry.nvim&#34;&gt;starry.nvim&lt;/a&gt;. Also, there are quite a few listed in &lt;a href=&#34;https://github.com/rockerBOO/awesome-neovim&#34;&gt;awesome-neovim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;All the GoToXxx (E.g reference, implementation, definition, goto doc, peek code/doc etc) You need lspconfig setup. There are lots of posts on how to set it up. You can also check my &lt;a href=&#34;https://github.com/ray-x/navigator.lua&#34;&gt;navigator&lt;/a&gt; gopls setup &lt;a href=&#34;https://github.com/ray-x/navigator.lua/raw/master/lua/navigator/lspclient/clients.lua&#34;&gt;lspconfig.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;gopls commands: e.g. fillstruct, organize imports, list modules, list packages, gc_details, generate etc.&lt;/li&gt; &#xA; &lt;li&gt;Runtime lint/vet/compile: Supported by lsp (once you setup up your lsp client), GoLint with golangci-lint also supported&lt;/li&gt; &#xA; &lt;li&gt;Build/Make/Test: Go.nvim provides supports for these by an async job wrapper.&lt;/li&gt; &#xA; &lt;li&gt;Test coverage: run test coverage and show coverage sign and function metrics&lt;/li&gt; &#xA; &lt;li&gt;Dlv Debug: with &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; and &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;Dap UI&lt;/a&gt;. Go adapter included, zero config for your debug setup.&lt;/li&gt; &#xA; &lt;li&gt;Load vscode launch configuration&lt;/li&gt; &#xA; &lt;li&gt;Unit test: generate unit test framework with &lt;a href=&#34;https://github.com/cweill/gotests&#34;&gt;gotests&lt;/a&gt;. Run test with richgo/ginkgo/gotestsum/go test&lt;/li&gt; &#xA; &lt;li&gt;Add and remove tag for struct with tag modify(gomodifytags)&lt;/li&gt; &#xA; &lt;li&gt;Code format: Supports LSP format and GoFmt(with golines)&lt;/li&gt; &#xA; &lt;li&gt;CodeLens : gopls codelens and codelens action support&lt;/li&gt; &#xA; &lt;li&gt;Comments: Add autodocument for your package/function/struct/interface. This feature is unique and can help you suppress golint errors...&lt;/li&gt; &#xA; &lt;li&gt;Go to alternative go file (between test and source)&lt;/li&gt; &#xA; &lt;li&gt;Test with ginkgo, richgo inside floaterm (to enable floaterm, guihua.lua has to be installed)&lt;/li&gt; &#xA; &lt;li&gt;Code refactor made easy: GoFixPlural, FixStruct, FixSwitch, Add comment, IfErr, ModTidy, GoGet, extract function/block with codeactions... Most of the tools are built on top of treesitter AST or go AST. Fast and accurate.&lt;/li&gt; &#xA; &lt;li&gt;GoCheat get go cheatsheet from &lt;a href=&#34;https://cheat.sh/&#34;&gt;cheat.sh&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Smart build tag detection when debug/run tests (e.g. &lt;code&gt;//go:build integration&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Generate mocks with mockgen&lt;/li&gt; &#xA; &lt;li&gt;Inlay hints: gopls (version 0.9.x or greater) inlay hints; version 0.10.x inlay hints are enabled by default.&lt;/li&gt; &#xA; &lt;li&gt;luasnip: go.nvim included a feature rich luasnips you definitally need to try.&lt;/li&gt; &#xA; &lt;li&gt;Treesitter highlight injection: go.nvim included a treesitter highlight injection for SQL and json.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use your favorite package manager to install. The dependency &lt;code&gt;treesitter&lt;/code&gt; (and optionally, treesitter-objects) should be installed the first time you use it. Also Run &lt;code&gt;TSInstall go&lt;/code&gt; to install the go parser if not installed yet. &lt;code&gt;sed&lt;/code&gt; is recommend to run this plugin.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;ray-x/go.nvim&#39;&#xA;Plug &#39;ray-x/guihua.lua&#39; ; recommended if need floating window support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;ray-x/go.nvim&#39;&#xA;use &#39;ray-x/guihua.lua&#39; -- recommended if need floating window support&#xA;use &#39;neovim/nvim-lspconfig&#39;&#xA;use &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;ray-x/go.nvim&#34;,&#xA;  dependencies = {  -- optional packages&#xA;    &#34;ray-x/guihua.lua&#34;,&#xA;    &#34;neovim/nvim-lspconfig&#34;,&#xA;    &#34;nvim-treesitter/nvim-treesitter&#34;,&#xA;  },&#xA;  config = function()&#xA;    require(&#34;go&#34;).setup()&#xA;  end,&#xA;  event = {&#34;CmdlineEnter&#34;},&#xA;  ft = {&#34;go&#34;, &#39;gomod&#39;},&#xA;  build = &#39;:lua require(&#34;go.install&#34;).update_all_sync()&#39; -- if you need to install/update all binaries&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The go.nvim load speed is fast and you can enable it by default &lt;img width=&#34;479&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1681295/218074895-5182c791-8649-46ad-b18e-8eb1af8c0ffa.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure the &lt;code&gt;$GOPATH/bin&lt;/code&gt; path is added to your &lt;code&gt;$PATH&lt;/code&gt; environment variable. To check this you can run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $PATH | grep &#34;$GOPATH/bin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If nothing shows up, you can add the following to your shell config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$PATH:$GOPATH/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add format in your vimrc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt;EOF&#xA;local format_sync_grp = vim.api.nvim_create_augroup(&#34;GoFormat&#34;, {})&#xA;vim.api.nvim_create_autocmd(&#34;BufWritePre&#34;, {&#xA;  pattern = &#34;*.go&#34;,&#xA;  callback = function()&#xA;   require(&#39;go.format&#39;).goimport()&#xA;  end,&#xA;  group = format_sync_grp,&#xA;})&#xA;&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To startup/setup the plugin&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;go&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;Add comments&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/go.nvim/comment.gif?raw=true&#34; alt=&#34;auto comments&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Add/Remove tags&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/go.nvim/tags.gif?raw=true&#34; alt=&#34;auto tag&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;GoTest in floating term&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/143160335-b8046ffa-82cd-4d84-af3e-3b0dbb4c609e.png&#34; alt=&#34;gotest&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:GoTermClose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To close the floating term.&lt;/p&gt; &#xA;&lt;h3&gt;SQL/JSON Highlight injection&lt;/h3&gt; &#xA;&lt;img width=&#34;718&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1681295/227125827-538c5f3f-298d-4ae1-8762-42dfb92e79f3.png&#34;&gt; &#xA;&lt;h3&gt;Inlay hints&lt;/h3&gt; &#xA;&lt;img width=&#34;491&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1681295/240350775-a1d92c06-66d2-4e4b-9225-538cf1a201b2.png&#34;&gt; &#xA;&lt;h2&gt;refactor gorename&lt;/h2&gt; &#xA;&lt;p&gt;gorename as an alternative to gopls rename as it supports rename across packages Note: use with care Command: GoRename&lt;/p&gt; &#xA;&lt;h2&gt;code format&lt;/h2&gt; &#xA;&lt;p&gt;nvim-lsp support goimport by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;autocmd BufWritePre (InsertLeave?) &amp;lt;buffer&amp;gt; lua vim.lsp.buf.formatting_sync(nil,500)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The plugin provides code format, by default is goline + gofumpt (stricter version of gofmt)&lt;/p&gt; &#xA;&lt;p&gt;Use following code to format go code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;go.format&#34;).gofmt()  -- gofmt only&#xA;require(&#34;go.format&#34;).goimport()  -- goimport + gofmt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Format on save&lt;/h3&gt; &#xA;&lt;p&gt;To config format on save, add one of the following to your init.lua:&lt;/p&gt; &#xA;&lt;h4&gt;Run gofmt on save&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Run gofmt on save&#xA;&#xA;local format_sync_grp = vim.api.nvim_create_augroup(&#34;GoFormat&#34;, {})&#xA;vim.api.nvim_create_autocmd(&#34;BufWritePre&#34;, {&#xA;  pattern = &#34;*.go&#34;,&#xA;  callback = function()&#xA;   require(&#39;go.format&#39;).gofmt()&#xA;  end,&#xA;  group = format_sync_grp,&#xA;})&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run gofmt + goimport on save&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Run gofmt + goimport on save&#xA;&#xA;local format_sync_grp = vim.api.nvim_create_augroup(&#34;GoImport&#34;, {})&#xA;vim.api.nvim_create_autocmd(&#34;BufWritePre&#34;, {&#xA;  pattern = &#34;*.go&#34;,&#xA;  callback = function()&#xA;   require(&#39;go.format&#39;).goimport()&#xA;  end,&#xA;  group = format_sync_grp,&#xA;})&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Auto fill&lt;/h2&gt; &#xA;&lt;p&gt;Note: auto fill struct also supported by gopls lsp-action&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoFillStruct&lt;/td&gt; &#xA;   &lt;td&gt;auto fill struct&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoFillSwitch&lt;/td&gt; &#xA;   &lt;td&gt;fill switch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoIfErr&lt;/td&gt; &#xA;   &lt;td&gt;Add if err&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoFixPlurals&lt;/td&gt; &#xA;   &lt;td&gt;change func foo(b int, a int, r int) -&amp;gt; func foo(b, a, r int)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=IP67Gkb5-qA&#34;&gt;GoFixPlurals Youtube video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package foo&#xA;&#xA;import &#34;io&#34;&#xA;&#xA;func Foo() (io.Reader, error) { // the cursor on this line to add if err statement&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/go.nvim/fstruct.gif?raw=true&#34; alt=&#34;auto struct&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Textobject&lt;/h2&gt; &#xA;&lt;p&gt;Supported by treesitter. TS provided better parse result compared to regular expression. See the example &lt;a href=&#34;https://github.com/ray-x/go.nvim#text-object&#34;&gt;treesitter config file&lt;/a&gt; on how to setup textobjects. Also with treesitter-objects, you can move, swap the selected blocks of codes, which is fast and accurate. &lt;code&gt;go.nvim&lt;/code&gt; will load textobject with treesiteter, with default keybindings, if you what to set it up yourself, you can set &lt;code&gt;textobject&lt;/code&gt; to false.&lt;/p&gt; &#xA;&lt;h2&gt;Go binaries install and update&lt;/h2&gt; &#xA;&lt;p&gt;The following go binaries are used in &lt;code&gt;go.nvim&lt;/code&gt; (depends on your setup):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gofumpt&lt;/li&gt; &#xA; &lt;li&gt;golines&lt;/li&gt; &#xA; &lt;li&gt;goimports&lt;/li&gt; &#xA; &lt;li&gt;gorename&lt;/li&gt; &#xA; &lt;li&gt;gomodifytags&lt;/li&gt; &#xA; &lt;li&gt;gotests&lt;/li&gt; &#xA; &lt;li&gt;iferr&lt;/li&gt; &#xA; &lt;li&gt;impl&lt;/li&gt; &#xA; &lt;li&gt;fillstruct&lt;/li&gt; &#xA; &lt;li&gt;fillswitch&lt;/li&gt; &#xA; &lt;li&gt;dlv&lt;/li&gt; &#xA; &lt;li&gt;ginkgo&lt;/li&gt; &#xA; &lt;li&gt;richgo&lt;/li&gt; &#xA; &lt;li&gt;gotestsum&lt;/li&gt; &#xA; &lt;li&gt;govulncheck&lt;/li&gt; &#xA; &lt;li&gt;goenum&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you run &lt;code&gt;GoFmt&lt;/code&gt; and the configured binary (e.g. golines) was not installed, the plugin will install it for you. But the first run of &lt;code&gt;GoFmt&lt;/code&gt; may fail. Recommended to run &lt;code&gt;GoInstallBinaries&lt;/code&gt; to install all binaries before using the plugin.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoInstallBinary go_binary_name&lt;/td&gt; &#xA;   &lt;td&gt;use &lt;code&gt;go install go_binary_url@latest&lt;/code&gt; to install tool, if installed will skip&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoUpdateBinary go_binary_name&lt;/td&gt; &#xA;   &lt;td&gt;use &lt;code&gt;go install go_binary_url@latest&lt;/code&gt; Will force re-install/update if already installed, otherwise same as GoInstallBinary&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoInstallBinaries&lt;/td&gt; &#xA;   &lt;td&gt;use &lt;code&gt;go install&lt;/code&gt; to install all tools, skip the ones installed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoUpdateBinaries&lt;/td&gt; &#xA;   &lt;td&gt;use &lt;code&gt;go install&lt;/code&gt; to update all tools to the latest version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Build and test&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoMake&lt;/td&gt; &#xA;   &lt;td&gt;async make, use with other commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoBuild args&lt;/td&gt; &#xA;   &lt;td&gt;go build args (-g: enable debug, %: expand to current file, %:h expand to current package)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoGenerate&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoRun {args} -a {cmd_args}&lt;/td&gt; &#xA;   &lt;td&gt;e.g. GoRun equal to &lt;code&gt;go run .&lt;/code&gt;; or &lt;code&gt;GoRun ./cmd&lt;/code&gt; equal to &lt;code&gt;go run ./cmd, Additional args: -F run in floaterm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoRun -a {cmd_args}&lt;/td&gt; &#xA;   &lt;td&gt;specify additional arguments pass to your main(), see notes 3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoStop {job_id}&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;stop the job started with GoRun&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest&lt;/td&gt; &#xA;   &lt;td&gt;go test ./...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTestSum {pkgname} {gotestsum arguments}&lt;/td&gt; &#xA;   &lt;td&gt;run gotestsum and show result in side panel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTestSum -w&lt;/td&gt; &#xA;   &lt;td&gt;run gotestsum in watch mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest -v&lt;/td&gt; &#xA;   &lt;td&gt;go test -v current_file_path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest -c&lt;/td&gt; &#xA;   &lt;td&gt;go test -c current_file_path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest -n&lt;/td&gt; &#xA;   &lt;td&gt;test nearest, see GoTestFunc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest -f&lt;/td&gt; &#xA;   &lt;td&gt;test current file, see GoTestFile&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest -n 1&lt;/td&gt; &#xA;   &lt;td&gt;-count=1 flag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest -p&lt;/td&gt; &#xA;   &lt;td&gt;test current package, see GoTestPkg&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest -b {build_flags}&lt;/td&gt; &#xA;   &lt;td&gt;run &lt;code&gt;go test&lt;/code&gt; with build flags e.g. &lt;code&gt;-gcflags=.&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest -t yourtags&lt;/td&gt; &#xA;   &lt;td&gt;go test ./... -tags=yourtags, see notes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest -a your_args&lt;/td&gt; &#xA;   &lt;td&gt;go test ./... -args=yourargs, see notes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest package_path -t yourtags&lt;/td&gt; &#xA;   &lt;td&gt;go test packagepath -tags=yourtags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTest package_path -t yourtags other_args&lt;/td&gt; &#xA;   &lt;td&gt;go test packagepath -tags=yourtags other_args&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoLint&lt;/td&gt; &#xA;   &lt;td&gt;golangci-lint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoGet {package_url}&lt;/td&gt; &#xA;   &lt;td&gt;go get package_url and restart gopls. Note1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoVet&lt;/td&gt; &#xA;   &lt;td&gt;go vet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoCoverage&lt;/td&gt; &#xA;   &lt;td&gt;go test -coverprofile&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoCoverage -p&lt;/td&gt; &#xA;   &lt;td&gt;go test -coverprofile (only tests package for current buffer)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoCoverage -f coverage_file_name&lt;/td&gt; &#xA;   &lt;td&gt;load coverage file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoCoverage {flags}&lt;/td&gt; &#xA;   &lt;td&gt;-t : toggle, -r: remove signs, -R remove sings from all files, -m show metrics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoCoverage {flags} {go test flags}&lt;/td&gt; &#xA;   &lt;td&gt;e.g: GoCoverage -p -coverpkg &#39;yourpackagename&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTermClose&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;closes the floating term&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;if package_url not provided, will check current line is a valid package url or not, if it is valid, will fetch current url&lt;/li&gt; &#xA; &lt;li&gt;tags: if &lt;code&gt;//+build tags&lt;/code&gt; exist it will be added automatically&lt;/li&gt; &#xA; &lt;li&gt;args: if multiple args is provided, you need toconcatenate it with &#39;\ &#39;, e.g. GoTest -a yourtags\ other_args&lt;/li&gt; &#xA; &lt;li&gt;% will expand to current file path, e.g. GoBuild %&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Show test coverage:&lt;/p&gt; &#xA;&lt;img width=&#34;479&#34; alt=&#34;GoTestCoverage&#34; src=&#34;https://user-images.githubusercontent.com/1681295/130821038-fa2545c6-16f6-4448-9a0c-91a1ab333750.png&#34;&gt; &#xA;&lt;p&gt;Provided wrapper for gobulild/test etc with async make Also suggest to use &lt;a href=&#34;https://github.com/vim-test/vim-test&#34;&gt;vim-test&lt;/a&gt;, which can run running tests on different granularities.&lt;/p&gt; &#xA;&lt;h2&gt;Unit test with &lt;a href=&#34;https://github.com/cweill/gotests&#34;&gt;gotests&lt;/a&gt; and testify&lt;/h2&gt; &#xA;&lt;p&gt;Support table based unit test auto generate, parse current function/method name using treesitter&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTestFunc&lt;/td&gt; &#xA;   &lt;td&gt;run test for current func&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTestFunc -s&lt;/td&gt; &#xA;   &lt;td&gt;select the test function you want to run&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTestFunc -tags=yourtag&lt;/td&gt; &#xA;   &lt;td&gt;run test for current func with &lt;code&gt;-tags yourtag&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTestFile&lt;/td&gt; &#xA;   &lt;td&gt;run test for current file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTestFile -tags=yourtag&lt;/td&gt; &#xA;   &lt;td&gt;run test for current folder with &lt;code&gt;-tags yourtag&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTestPkg&lt;/td&gt; &#xA;   &lt;td&gt;run test for current package/folder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoTestPkg -tags=yourtag&lt;/td&gt; &#xA;   &lt;td&gt;run test for current folder with &lt;code&gt;-tags yourtag&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoAddTest [-parallel]&lt;/td&gt; &#xA;   &lt;td&gt;Add test for current func&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoAddExpTest [-parallel]&lt;/td&gt; &#xA;   &lt;td&gt;Add tests for exported funcs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoAddAllTest [-parallel]&lt;/td&gt; &#xA;   &lt;td&gt;Add tests for all funcs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;GoTestXXX Arguments&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;arguments&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-v&lt;/td&gt; &#xA;   &lt;td&gt;verbose mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-c&lt;/td&gt; &#xA;   &lt;td&gt;compile&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-C&lt;/td&gt; &#xA;   &lt;td&gt;coverprofile&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-n&lt;/td&gt; &#xA;   &lt;td&gt;count&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-t&lt;/td&gt; &#xA;   &lt;td&gt;tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-f&lt;/td&gt; &#xA;   &lt;td&gt;fuzz&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-bench&lt;/td&gt; &#xA;   &lt;td&gt;bench test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-m&lt;/td&gt; &#xA;   &lt;td&gt;metric&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s&lt;/td&gt; &#xA;   &lt;td&gt;select&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-p&lt;/td&gt; &#xA;   &lt;td&gt;package&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-F&lt;/td&gt; &#xA;   &lt;td&gt;floaterm mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-a&lt;/td&gt; &#xA;   &lt;td&gt;args&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: For GoTestXXX&lt;/p&gt; &#xA;&lt;p&gt;You can add available arguments with long name or character flag e.g. &lt;code&gt;GoTest -tags=integration ./internal/web -b=. -count=1 -&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also add other unmapped arguments after the &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;-args&lt;/code&gt; flag &lt;code&gt;GoTest -a mock=true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GoCheat&lt;/h2&gt; &#xA;&lt;p&gt;Show &lt;a href=&#34;https://github.com/chubin/cheat.sh&#34;&gt;cheat.sh&lt;/a&gt; for api in neovim new buffer. e.g. &lt;code&gt;GoCheat sort&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GoDoc&lt;/h2&gt; &#xA;&lt;p&gt;Show go doc for api in neovim floating window. e.g. &lt;code&gt;GoDoc fmt.Println&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/133886804-cc110fae-6fbf-4218-9c22-07fc9d6a64d2.jpg&#34; alt=&#34;Godoc&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If no argument provided, fallback to lsp.hover()&lt;/p&gt; &#xA;&lt;h2&gt;GoPkgOutline&lt;/h2&gt; &#xA;&lt;p&gt;A symbole outline for all symbols (var, const, func, struct, interface etc) inside a package You can still use navigator or sidebar plugins (e.g. vista, symbols-outline) to check outline within a file. But it is more useful for go to check the symbols in a package, as those symbols are visuals inside package, also the method can be defined in different source file.&lt;/p&gt; &#xA;&lt;p&gt;Command format: GoPkgOutline {options} options: -f: show in floatwing window (default side panel, both require quihua.lua) -p package_name: the package you want to list. e.g. GoPkgOutline -p json; default package is current file&#39;s package If guihua not installed fallback to loclist&lt;/p&gt; &#xA;&lt;img width=&#34;902&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1681295/175231905-82df4e4b-a508-4bb8-b878-9f0029643005.png&#34;&gt; &#xA;&lt;h2&gt;Modifytags&lt;/h2&gt; &#xA;&lt;p&gt;Modify struct tags by &lt;a href=&#34;https://github.com/fatih/gomodifytags&#34;&gt;&lt;code&gt;gomodifytags&lt;/code&gt;&lt;/a&gt; and treesitter&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoAddTag&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoRmTag&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoClearTag&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Options: -transform/-t: transform the tag -add-options/-a: add options to the tag&lt;/p&gt; &#xA;&lt;h2&gt;GoFmt&lt;/h2&gt; &#xA;&lt;p&gt;nvim-lsp support goimport by default. The plugin provided a new formatter, goline + gofumpt (stricter version of gofmt)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoFmt {opts}&lt;/td&gt; &#xA;   &lt;td&gt;default: gofumpt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoImport&lt;/td&gt; &#xA;   &lt;td&gt;default: goimport&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoImport package_path&lt;/td&gt; &#xA;   &lt;td&gt;gopls add_import package&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;{opts} : &lt;code&gt;-a&lt;/code&gt; format all buffers&lt;/p&gt; &#xA;&lt;h2&gt;GoImpl&lt;/h2&gt; &#xA;&lt;p&gt;generate method stubs for implementing an interface&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:GoImpl {receiver} {interface}&#xA;&#xA;Also you can put cursor on struct and run&#xA;&#xA;```vim&#xA;:GoImpl {interface}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:GoImpl f *File io.Reader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or simply put your cursor in a struct and do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:GoImpl io.Reader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or simply your cursor on a interface and specify a receiver type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:GoImpl MyType&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debug&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug&lt;/td&gt; &#xA;   &lt;td&gt;start debug session, Note 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug -h&lt;/td&gt; &#xA;   &lt;td&gt;show helps info&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug -c&lt;/td&gt; &#xA;   &lt;td&gt;compile only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug -t&lt;/td&gt; &#xA;   &lt;td&gt;start debug session for go test file, Note 2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug -R&lt;/td&gt; &#xA;   &lt;td&gt;restart debug session&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug -n&lt;/td&gt; &#xA;   &lt;td&gt;start debug session for nearest go test function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug -p&lt;/td&gt; &#xA;   &lt;td&gt;launch package test and start debug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug -e program&lt;/td&gt; &#xA;   &lt;td&gt;dap exec program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug -a&lt;/td&gt; &#xA;   &lt;td&gt;attach to remote process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug -s&lt;/td&gt; &#xA;   &lt;td&gt;stop debug session and unmap debug keymap&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug -A args&lt;/td&gt; &#xA;   &lt;td&gt;debug session with args&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDbgKeys&lt;/td&gt; &#xA;   &lt;td&gt;show debug keymaps in a floating window (guihua)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoBreakToggle&lt;/td&gt; &#xA;   &lt;td&gt;GoDebug -b&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDbgStop&lt;/td&gt; &#xA;   &lt;td&gt;Same as GoDebug -s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDbgContinue&lt;/td&gt; &#xA;   &lt;td&gt;Continue debug session&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BreakCondition&lt;/td&gt; &#xA;   &lt;td&gt;conditional break&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Without any argument, will check if launch.json existed or not, if existed, using launch.json and popup input. If launch.json not existed, will start debug session for current file, if current file is package main will run main(), else will start debug package test&lt;/li&gt; &#xA; &lt;li&gt;with -t option, if current file is not test file, will switch to test file and run test for current function&lt;/li&gt; &#xA; &lt;li&gt;If cursor inside scope of a test function, will debug current test function, if cursor inside a test file, will debug current test file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Switch between go and test file&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoAlt / GoAlt!&lt;/td&gt; &#xA;   &lt;td&gt;open alternative go file (use ! to create if not exist)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoAltS / GoAltS!&lt;/td&gt; &#xA;   &lt;td&gt;open alternative go file in split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoAltV / GoAltV!&lt;/td&gt; &#xA;   &lt;td&gt;open alternative go file in vertical split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Go Mock&lt;/h2&gt; &#xA;&lt;p&gt;go mock with mockgen is supported&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoMockGen&lt;/td&gt; &#xA;   &lt;td&gt;default: generate mocks for current file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;options:&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s source mode(default)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-i interface mode, provide interface name or put cursor on interface&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-p package name default: mocks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-d destination directory, default: ./mocks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Comments and Doc&lt;/h2&gt; &#xA;&lt;p&gt;Auto doc (to suppress golang-lint warning), generate comments by treesitter parsing result&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type GoLintComplaining struct{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt; lua.require(&#39;go.comment&#39;).gen() -- or your faviourite key binding and setup placeholder &#34;no more complaint ;P&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// GoLintComplaining struct no more complaint ;P&#xA;type GoLintComplaining struct{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoCmt&lt;/td&gt; &#xA;   &lt;td&gt;Add comment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;GoModTidy&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoModInit&lt;/td&gt; &#xA;   &lt;td&gt;run &lt;code&gt;go mod init&lt;/code&gt; and restart gopls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoModTidy&lt;/td&gt; &#xA;   &lt;td&gt;run &lt;code&gt;go mod tidy&lt;/code&gt; and restart gopls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoModVendor&lt;/td&gt; &#xA;   &lt;td&gt;run &lt;code&gt;go mod vendor&lt;/code&gt; and restart gopls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;run &lt;code&gt;go mod tidy&lt;/code&gt; and restart gopls&lt;/p&gt; &#xA;&lt;h2&gt;LSP&lt;/h2&gt; &#xA;&lt;p&gt;Nvim-lsp is good enough for a gopher. If you looking for a better GUI. You can install &lt;a href=&#34;https://github.com/ray-x/navigator.lua&#34;&gt;navigator&lt;/a&gt;, or lspsaga, and lsp-utils etc. The goal of go.nvim is more provide unique functions releated to gopls instead of a general lsp gui client. The lsp config in go.nvim has a none default setup and contains some improvement and I would suggest you to use.&lt;/p&gt; &#xA;&lt;h2&gt;LSP cmp support&lt;/h2&gt; &#xA;&lt;p&gt;The latest version enabled lsp snippets (and other setups) by default. In case you need flowing the setup from cmp README.md, please use flowing command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local capabilities = require(&#39;cmp_nvim_lsp&#39;).default_capabilities(vim.lsp.protocol.make_client_capabilities())&#xA;require(&#39;go&#39;).setup({&#xA;  -- other setups ....&#xA;  lsp_cfg = {&#xA;    capabilities = capabilities,&#xA;    -- other setups&#xA;  },&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LSP CodeLens&lt;/h2&gt; &#xA;&lt;p&gt;Gopls supports code lens. To run gopls code lens action &lt;code&gt;GoCodeLenAct&lt;/code&gt; Note: codelens need to be enabled in gopls, check default config in&lt;/p&gt; &#xA;&lt;h2&gt;LSP CodeActions&lt;/h2&gt; &#xA;&lt;p&gt;You can use native code action provided by lspconfig. If you installed guihua, you can also use a GUI version of code action &lt;code&gt;GoCodeAction&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Lint&lt;/h2&gt; &#xA;&lt;p&gt;Supported by LSP, also GoLint command (by calling golangcl-lint) if you need background golangci-lint check, you can configure it with ALE&lt;/p&gt; &#xA;&lt;h2&gt;Debug with dlv&lt;/h2&gt; &#xA;&lt;p&gt;Setup(adapter) for go included. Need Dap and Dap UI plugin &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1681295/125160289-743ba080-e1bf-11eb-804f-6a6d227ec33b.jpg&#34; alt=&#34;dap&#34;&gt; GDB style key mapping is used&lt;/p&gt; &#xA;&lt;h3&gt;Keymaps&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c&lt;/td&gt; &#xA;   &lt;td&gt;continue&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;next&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s&lt;/td&gt; &#xA;   &lt;td&gt;step&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;o&lt;/td&gt; &#xA;   &lt;td&gt;stepout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;cap S: stop debug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;u&lt;/td&gt; &#xA;   &lt;td&gt;up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;D&lt;/td&gt; &#xA;   &lt;td&gt;cap D: down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;cap C: run to cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;b&lt;/td&gt; &#xA;   &lt;td&gt;toggle breakpoint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;P&lt;/td&gt; &#xA;   &lt;td&gt;cap P: pause&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;p&lt;/td&gt; &#xA;   &lt;td&gt;print, hover value (also in visual mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Moving from vscode-go debug&lt;/h3&gt; &#xA;&lt;p&gt;Please check &lt;a href=&#34;https://code.visualstudio.com/docs/editor/debugging#_launch-configurations&#34;&gt;Vscode Launch configurations&lt;/a&gt; for more info go.nvim support launch debuger from vscode-go .vscode/launch.json configurations If launch.json is valid, run &lt;code&gt;GoDebug&lt;/code&gt; will launch from the launch.json configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Inlay hints&lt;/h3&gt; &#xA;&lt;img width=&#34;808&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1681295/179863119-b7463072-015f-404c-b082-7bf6a01e3ab6.png&#34;&gt; &#xA;&lt;h3&gt;Command&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GoToggleInlay&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Note:&lt;/h4&gt; &#xA;&lt;p&gt;Please use jsonls/null-ls check your launch.json is valid json file. Following syntax is not supported&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trailing comma&lt;/li&gt; &#xA; &lt;li&gt;Comment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is a sample &lt;a href=&#34;https://github.com/ray-x/go.nvim/raw/master/playground/sampleApp/.vscode/launch.json&#34;&gt;launch.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Json to Go struct&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[&#34;x]GoJson2Struct! Visual select the json and run &lt;code&gt;GoJson2Struct youStructName&lt;/code&gt; -bang will put result to register &lt;code&gt;a&lt;/code&gt; if [&#34;x] specified, will put get json from clipboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Load Env file&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GoEnv {filename} By default load .env file in current directory, if you want to load other file, use {filename} option&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Generate return value&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GoGenReturn&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;create return value for current function e.g. if we have&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Foo() (int, error) {&#xA;  return 1, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and in your code you cursor on Foo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Foo()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will generate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;i, err := Foo()&#xA;if err != nil {&#xA;  return&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rename modules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gomvp Rename module name in under cursor e.g. Gomvp Gomvp old_mod_name Gomvp old_mod_name new_mod_name&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;govulncheck&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GoVulnCheck {arguments} Run govulncheck on current project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;goenum&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Goenum {arguments} Run goenum on current project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;gonew&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GoNew {filename} Create new go file. It will use template file. e.g. &lt;code&gt;GoNew ./pkg/string.go&lt;/code&gt; will create string.go with template file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ginkgo&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ginkgo {args}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Arg&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;run&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;watch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;build&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bootstrap&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;labels&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;outline&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Debug Commands&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebug&lt;/td&gt; &#xA;   &lt;td&gt;Start debugger, to debug test, run &lt;code&gt;GoDebug test&lt;/code&gt;, to add addition args run &lt;code&gt;GoDebug arg1 arg2&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoDebugConfig&lt;/td&gt; &#xA;   &lt;td&gt;Open launch.json file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoBreakSave&lt;/td&gt; &#xA;   &lt;td&gt;save all breakpoints to project file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoBreakLoad&lt;/td&gt; &#xA;   &lt;td&gt;load all breakpoints from project file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoBreakToggle&lt;/td&gt; &#xA;   &lt;td&gt;toggle break point&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BreakCondition&lt;/td&gt; &#xA;   &lt;td&gt;conditional break point&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReplRun&lt;/td&gt; &#xA;   &lt;td&gt;dap repl run_last&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReplToggle&lt;/td&gt; &#xA;   &lt;td&gt;dap repl toggle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Required DAP plugins&lt;/h3&gt; &#xA;&lt;p&gt;The plugin will setup debugger. But you need to install&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;dap&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#39;mfussenegger/nvim-dap&#39;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;dap ui (optional)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#39;rcarriga/nvim-dap-ui&#39;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;dap virtual text (optional)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#39;theHamsta/nvim-dap-virtual-text&#39;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also you can check telescope dap extension : nvim-telescope/telescope-dap.nvim&lt;/p&gt; &#xA;&lt;p&gt;Sample vimrc for DAP&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt; Plug &#39;mfussenegger/nvim-dap&#39;&#xA; Plug &#39;rcarriga/nvim-dap-ui&#39;&#xA; Plug &#39;theHamsta/nvim-dap-virtual-text&#39;&#xA; &#34; Plug &#39;nvim-telescope/telescope-dap.nvim&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/ray-x/go.nvim/raw/master/lua/go/commands.lua&#34;&gt;commands.lua&lt;/a&gt; on all the commands provided&lt;/p&gt; &#xA;&lt;h2&gt;configuration&lt;/h2&gt; &#xA;&lt;p&gt;Configure from lua suggested, The default setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;go&#39;).setup({&#xA;&#xA;  disable_defaults = false, -- true|false when true set false to all boolean settings and replace all table&#xA;  -- settings with {}&#xA;  go=&#39;go&#39;, -- go command, can be go[default] or go1.18beta1&#xA;  goimport=&#39;gopls&#39;, -- goimport command, can be gopls[default] or goimport&#xA;  fillstruct = &#39;gopls&#39;, -- can be nil (use fillstruct, slower) and gopls&#xA;  gofmt = &#39;gofumpt&#39;, --gofmt cmd,&#xA;  max_line_len = 128, -- max line length in golines format, Target maximum line length for golines&#xA;  tag_transform = false, -- can be transform option(&#34;snakecase&#34;, &#34;camelcase&#34;, etc) check gomodifytags for details and more options&#xA;  tag_options = &#39;json=omitempty&#39;, -- sets options sent to gomodifytags, i.e., json=omitempty&#xA;  gotests_template = &#34;&#34;, -- sets gotests -template parameter (check gotests for details)&#xA;  gotests_template_dir = &#34;&#34;, -- sets gotests -template_dir parameter (check gotests for details)&#xA;  comment_placeholder = &#39;&#39; ,  -- comment_placeholder your cool placeholder e.g. Û∞üì Óú§  Óòß  Ôåà  Óúà&#xA;  icons = {breakpoint = &#39;üßò&#39;, currentpos = &#39;üèÉ&#39;},  -- setup to `false` to disable icons setup&#xA;  verbose = false,  -- output loginf in messages&#xA;  lsp_cfg = false, -- true: use non-default gopls setup specified in go/lsp.lua&#xA;                   -- false: do nothing&#xA;                   -- if lsp_cfg is a table, merge table with with non-default gopls setup in go/lsp.lua, e.g.&#xA;                   --   lsp_cfg = {settings={gopls={matcher=&#39;CaseInsensitive&#39;, [&#39;local&#39;] = &#39;your_local_module_path&#39;, gofumpt = true }}}&#xA;  lsp_gofumpt = false, -- true: set default gofmt in gopls format to gofumpt&#xA;  lsp_on_attach = nil, -- nil: use on_attach function defined in go/lsp.lua,&#xA;                       --      when lsp_cfg is true&#xA;                       -- if lsp_on_attach is a function: use this function as on_attach function for gopls&#xA;  lsp_keymaps = true, -- set to false to disable gopls/lsp keymap&#xA;  lsp_codelens = true, -- set to false to disable codelens, true by default, you can use a function&#xA;  -- function(bufnr)&#xA;  --    vim.api.nvim_buf_set_keymap(bufnr, &#34;n&#34;, &#34;&amp;lt;space&amp;gt;F&#34;, &#34;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.formatting()&amp;lt;CR&amp;gt;&#34;, {noremap=true, silent=true})&#xA;  -- end&#xA;  -- to setup a table of codelens&#xA;  diagnostic = {  -- set diagnostic to false to disable vim.diagnostic setup&#xA;    hdlr = true, -- hook lsp diag handler&#xA;    underline = true,&#xA;    -- virtual text setup&#xA;    virtual_text = { space = 0, prefix = &#39;‚ñ†&#39; },&#xA;    signs = true,&#xA;    update_in_insert = false,&#xA;  },&#xA;  lsp_document_formatting = true,&#xA;  -- set to true: use gopls to format&#xA;  -- false if you want to use other formatter tool(e.g. efm, nulls)&#xA; lsp_inlay_hints = {&#xA;    enable = true,&#xA;    -- Only show inlay hints for the current line&#xA;    only_current_line = false,&#xA;    -- Event which triggers a refersh of the inlay hints.&#xA;    -- You can make this &#34;CursorMoved&#34; or &#34;CursorMoved,CursorMovedI&#34; but&#xA;    -- not that this may cause higher CPU usage.&#xA;    -- This option is only respected when only_current_line and&#xA;    -- autoSetHints both are true.&#xA;    only_current_line_autocmd = &#34;CursorHold&#34;,&#xA;    -- whether to show variable name before type hints with the inlay hints or not&#xA;    -- default: false&#xA;    show_variable_name = true,&#xA;    -- prefix for parameter hints&#xA;    parameter_hints_prefix = &#34;Û∞äï &#34;,&#xA;    show_parameter_hints = true,&#xA;    -- prefix for all the other hints (type, chaining)&#xA;    other_hints_prefix = &#34;=&amp;gt; &#34;,&#xA;    -- whether to align to the lenght of the longest line in the file&#xA;    max_len_align = false,&#xA;    -- padding from the left if max_len_align is true&#xA;    max_len_align_padding = 1,&#xA;    -- whether to align to the extreme right or not&#xA;    right_align = false,&#xA;    -- padding from the right if right_align is true&#xA;    right_align_padding = 6,&#xA;    -- The color of the hints&#xA;    highlight = &#34;Comment&#34;,&#xA;  },&#xA;  gopls_cmd = nil, -- if you need to specify gopls path and cmd, e.g {&#34;/home/user/lsp/gopls&#34;, &#34;-logfile&#34;,&#34;/var/log/gopls.log&#34; }&#xA;  gopls_remote_auto = true, -- add -remote=auto to gopls&#xA;  gocoverage_sign = &#34;‚ñà&#34;,&#xA;  sign_priority = 5, -- change to a higher number to override other signs&#xA;  dap_debug = true, -- set to false to disable dap&#xA;  dap_debug_keymap = true, -- true: use keymap for debugger defined in go/dap.lua&#xA;                           -- false: do not use keymap in go/dap.lua.  you must define your own.&#xA;                           -- windows: use visual studio keymap&#xA;  dap_debug_gui = {}, -- bool|table put your dap-ui setup here set to false to disable&#xA;  dap_debug_vt = { enabled_commands = true, all_frames = true }, -- bool|table put your dap-virtual-text setup here set to false to disable&#xA;&#xA;  dap_port = 38697, -- can be set to a number, if set to -1 go.nvim will pickup a random port&#xA;  dap_timeout = 15, --  see dap option initialize_timeout_sec = 15,&#xA;  dap_retries = 20, -- see dap option max_retries&#xA;  build_tags = &#34;tag1,tag2&#34;, -- set default build tags&#xA;  textobjects = true, -- enable default text jobects through treesittter-text-objects&#xA;  test_runner = &#39;go&#39;, -- one of {`go`, `richgo`, `dlv`, `ginkgo`, `gotestsum`}&#xA;  verbose_tests = true, -- set to add verbose flag to tests deprecated, see &#39;-v&#39; option&#xA;  run_in_floaterm = false, -- set to true to run in float window. :GoTermClose closes the floatterm&#xA;                           -- float term recommend if you use richgo/ginkgo with terminal color&#xA;&#xA;  floaterm = {   -- position&#xA;    posititon = &#39;auto&#39;, -- one of {`top`, `bottom`, `left`, `right`, `center`, `auto`}&#xA;    width = 0.45, -- width of float window if not auto&#xA;    height = 0.98, -- height of float window if not auto&#xA;  },&#xA;  trouble = false, -- true: use trouble to open quickfix&#xA;  test_efm = false, -- errorfomat for quickfix, default mix mode, set to true will be efm only&#xA;  luasnip = false, -- enable included luasnip snippets. you can also disable while add lua/snips folder to luasnip load&#xA;  --  Do not enable this if you already added the path, that will duplicate the entries&#xA;  on_jobstart = function(cmd) _=cmd end, -- callback for stdout&#xA;  on_stdout = function(err, data) _, _ = err, data end, -- callback when job started&#xA;  on_stderr = function(err, data)  _, _ = err, data  end, -- callback for stderr&#xA;  on_exit = function(code, signal, output)  _, _, _ = code, signal, output  end, -- callback for jobexit, output : string&#xA;  iferr_vertical_shift = 4 -- defines where the cursor will end up vertically from the begining of if err statement &#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need to add keybind yourself: e.g&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  vim.cmd(&#34;autocmd FileType go nmap &amp;lt;Leader&amp;gt;&amp;lt;Leader&amp;gt;l GoLint&#34;)&#xA;  vim.cmd(&#34;autocmd FileType go nmap &amp;lt;Leader&amp;gt;gc :lua require(&#39;go.comment&#39;).gen()&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;go.nvim&lt;/code&gt; allow you override your setup by a project file. Put &lt;code&gt;.gonvim/init.lua&lt;/code&gt; in your root folder. It is a small lua script and will be run durning go.setup(). The return value is used to override &lt;code&gt;go.nvim&lt;/code&gt; setup. The sample project setup. You can check the &lt;a href=&#34;https://www.youtube.com/watch?v=XrxSUp0E9Qw&#34;&gt;youtube video here&lt;/a&gt; on how to use this feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- .gonvim/init.lua project config&#xA;vim.g.null_ls_disable = true&#xA;&#xA;return {&#xA;  go = &#34;go&#34;, -- set to go1.18beta1 if necessary&#xA;  goimport = &#34;gopls&#34;, -- if set to &#39;gopls&#39; will use gopls format, also goimport&#xA;  fillstruct = &#34;gopls&#34;,&#xA;  gofmt = &#34;gofumpt&#34;, -- if set to gopls will use gopls format&#xA;  max_line_len = 120&#xA;  null_ls_document_formatting_disable = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will override your global &lt;code&gt;go.nvim&lt;/code&gt; setup&lt;/p&gt; &#xA;&lt;h2&gt;Text object&lt;/h2&gt; &#xA;&lt;p&gt;I did not provide textobject support in the plugin. Please use treesitter textobject plugin. My treesitter config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  require &#34;nvim-treesitter.configs&#34;.setup {&#xA;    incremental_selection = {&#xA;      enable = enable,&#xA;      keymaps = {&#xA;        -- mappings for incremental selection (visual mappings)&#xA;        init_selection = &#34;gnn&#34;, -- maps in normal mode to init the node/scope selection&#xA;        node_incremental = &#34;grn&#34;, -- increment to the upper named parent&#xA;        scope_incremental = &#34;grc&#34;, -- increment to the upper scope (as defined in locals.scm)&#xA;        node_decremental = &#34;grm&#34; -- decrement to the previous node&#xA;      }&#xA;    },&#xA;&#xA;    textobjects = {&#xA;      -- syntax-aware textobjects&#xA;      enable = enable,&#xA;      lsp_interop = {&#xA;        enable = enable,&#xA;        peek_definition_code = {&#xA;          [&#34;DF&#34;] = &#34;@function.outer&#34;,&#xA;          [&#34;DF&#34;] = &#34;@class.outer&#34;&#xA;        }&#xA;      },&#xA;      keymaps = {&#xA;        [&#34;iL&#34;] = {&#xA;          -- you can define your own textobjects directly here&#xA;          go = &#34;(function_definition) @function&#34;,&#xA;        },&#xA;        -- or you use the queries from supported languages with textobjects.scm&#xA;        [&#34;af&#34;] = &#34;@function.outer&#34;,&#xA;        [&#34;if&#34;] = &#34;@function.inner&#34;,&#xA;        [&#34;aC&#34;] = &#34;@class.outer&#34;,&#xA;        [&#34;iC&#34;] = &#34;@class.inner&#34;,&#xA;        [&#34;ac&#34;] = &#34;@conditional.outer&#34;,&#xA;        [&#34;ic&#34;] = &#34;@conditional.inner&#34;,&#xA;        [&#34;ae&#34;] = &#34;@block.outer&#34;,&#xA;        [&#34;ie&#34;] = &#34;@block.inner&#34;,&#xA;        [&#34;al&#34;] = &#34;@loop.outer&#34;,&#xA;        [&#34;il&#34;] = &#34;@loop.inner&#34;,&#xA;        [&#34;is&#34;] = &#34;@statement.inner&#34;,&#xA;        [&#34;as&#34;] = &#34;@statement.outer&#34;,&#xA;        [&#34;ad&#34;] = &#34;@comment.outer&#34;,&#xA;        [&#34;am&#34;] = &#34;@call.outer&#34;,&#xA;        [&#34;im&#34;] = &#34;@call.inner&#34;&#xA;      },&#xA;      move = {&#xA;        enable = enable,&#xA;        set_jumps = true, -- whether to set jumps in the jumplist&#xA;        goto_next_start = {&#xA;          [&#34;]m&#34;] = &#34;@function.outer&#34;,&#xA;          [&#34;]]&#34;] = &#34;@class.outer&#34;&#xA;        },&#xA;        goto_next_end = {&#xA;          [&#34;]M&#34;] = &#34;@function.outer&#34;,&#xA;          [&#34;][&#34;] = &#34;@class.outer&#34;&#xA;        },&#xA;        goto_previous_start = {&#xA;          [&#34;[m&#34;] = &#34;@function.outer&#34;,&#xA;          [&#34;[[&#34;] = &#34;@class.outer&#34;&#xA;        },&#xA;        goto_previous_end = {&#xA;          [&#34;[M&#34;] = &#34;@function.outer&#34;,&#xA;          [&#34;[]&#34;] = &#34;@class.outer&#34;&#xA;        }&#xA;      },&#xA;      select = {&#xA;        enable = enable,&#xA;        keymaps = {&#xA;          -- You can use the capture groups defined in textobjects.scm&#xA;          [&#34;af&#34;] = &#34;@function.outer&#34;,&#xA;          [&#34;if&#34;] = &#34;@function.inner&#34;,&#xA;          [&#34;ac&#34;] = &#34;@class.outer&#34;,&#xA;          [&#34;ic&#34;] = &#34;@class.inner&#34;,&#xA;          -- Or you can define your own textobjects like this&#xA;          [&#34;iF&#34;] = {&#xA;            python = &#34;(function_definition) @function&#34;,&#xA;            cpp = &#34;(function_definition) @function&#34;,&#xA;            c = &#34;(function_definition) @function&#34;,&#xA;            java = &#34;(method_declaration) @function&#34;,&#xA;            go = &#34;(method_declaration) @function&#34;&#xA;          }&#xA;        }&#xA;      },&#xA;      swap = {&#xA;        enable = enable,&#xA;        swap_next = {&#xA;          [&#34;&amp;lt;leader&amp;gt;a&#34;] = &#34;@parameter.inner&#34;&#xA;        },&#xA;        swap_previous = {&#xA;          [&#34;&amp;lt;leader&amp;gt;A&#34;] = &#34;@parameter.inner&#34;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LuaSnip supports&lt;/h2&gt; &#xA;&lt;p&gt;go.nvim provides a better snippet support for go. Please check &lt;a href=&#34;https://github.com/ray-x/go.nvim/raw/master/lua/snips/all.lua&#34;&gt;snippets for all languages&lt;/a&gt; and &lt;a href=&#34;https://github.com/ray-x/go.nvim/raw/master/lua/snips/go.lua&#34;&gt;snippets for go&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a video demo, please check this: &lt;a href=&#34;https://www.youtube.com/watch?v=tsLnEfYTgcM&#34;&gt;go.nvim new features work through&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are not familiar with luasnip, please checkout &lt;a href=&#34;https://www.youtube.com/watch?v=ub0REXjhpmk&#34;&gt;LuaSnip Tutorial&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=Dn800rlPIho&#34;&gt;TJ&#39;s Introduction to LuaSnip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Nvim LSP setup&lt;/h2&gt; &#xA;&lt;p&gt;go.nvim provided a better non-default setup for gopls (includes debounce, staticcheck, diagnosticsDelay etc)&lt;/p&gt; &#xA;&lt;p&gt;This gopls setup provided by go.nvim works perfectly fine for most of the cases. You can also install &lt;a href=&#34;https://github.com/ray-x/navigator.lua&#34;&gt;navigator.lua&lt;/a&gt; which can auto setup all lsp clients and provides a better GUI.&lt;/p&gt; &#xA;&lt;p&gt;For diagnostic issue, you can use the default setup. There are also quite a few plugins that you can use to explore issues, e.g. &lt;a href=&#34;https://github.com/ray-x/navigator.lua&#34;&gt;navigator.lua&lt;/a&gt;, &lt;a href=&#34;https://github.com/folke/lsp-trouble.nvim&#34;&gt;folke/lsp-trouble.nvim&lt;/a&gt;. &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;Nvim-tree&lt;/a&gt; and &lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;Bufferline&lt;/a&gt; also introduced lsp diagnostic hooks.&lt;/p&gt; &#xA;&lt;h2&gt;Integrate with mason-lspconfig&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup()&#xA;require(&#34;mason-lspconfig&#34;).setup()&#xA;require(&#39;lspconfig&#39;).gopls.setup({&#xA;  gopls_cmd = {install_root_dir .. &#39;/go/gopls&#39;},&#xA;  fillstruct = &#39;gopls&#39;,&#xA;  dap_debug = true,&#xA;  dap_debug_gui = true&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use gopls setup provided by go.nvim&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;-- setup your go.nvim&#xA;-- make sure lsp_cfg is disabled&#xA;require(&#34;mason&#34;).setup()&#xA;require(&#34;mason-lspconfig&#34;).setup()&#xA;require(&#39;go&#39;).setup{&#xA;  lsp_cfg = false&#xA;  -- other setups...&#xA;}&#xA;local cfg = require&#39;go.lsp&#39;.config() -- config() return the go.nvim gopls setup&#xA;&#xA;require(&#39;lspconfig&#39;).gopls.setup(cfg)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integrate null-ls&lt;/h2&gt; &#xA;&lt;h3&gt;The plugin provides:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gotest&lt;/code&gt; LSP diagnostic source for null-ls&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;golangci_lint&lt;/code&gt; A async version of golangci-lint null-ls lint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gotest_action&lt;/code&gt; LSP test code action for null-ls&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Gotest allow you run &lt;code&gt;go test &amp;lt;package&amp;gt;&lt;/code&gt; when you save your go file and add diagnostics to nvim&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;local sources = {&#xA;  null_ls.builtins.diagnostics.revive,&#xA;  null_ls.builtins.formatting.golines.with({&#xA;    extra_args = {&#xA;      &#34;--max-len=180&#34;,&#xA;      &#34;--base-formatter=gofumpt&#34;,&#xA;    },&#xA;  })&#xA;}&#xA;-- for go.nvim&#xA;local gotest = require(&#34;go.null_ls&#34;).gotest()&#xA;local gotest_codeaction = require(&#34;go.null_ls&#34;).gotest_action()&#xA;local golangci_lint = require(&#34;go.null_ls&#34;).golangci_lint()&#xA;table.insert(sources, gotest)&#xA;table.insert(sources, golangci_lint)&#xA;table.insert(sources, gotest_codeaction)&#xA;null_ls.setup({ sources = sources, debounce = 1000, default_timeout = 5000 })&#xA;&#xA;-- alternatively&#xA;null_ls.register(gotest)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will see the failed tests flagged &lt;img src=&#34;https://user-images.githubusercontent.com/1681295/212526174-4fa98a63-c90a-4a54-9340-27de98ecf17c.jpg&#34; alt=&#34;null-ls go.nvim&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sample vimrc&lt;/h2&gt; &#xA;&lt;p&gt;The following vimrc will enable all features provided by go.nvim&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;set termguicolors&#xA;call plug#begin(&#39;~/.vim/plugged&#39;)&#xA;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;&#xA;Plug &#39;mfussenegger/nvim-dap&#39;&#xA;Plug &#39;rcarriga/nvim-dap-ui&#39;&#xA;Plug &#39;theHamsta/nvim-dap-virtual-text&#39;&#xA;Plug &#39;ray-x/guihua.lua&#39; &#34; float term, codeaction and codelens gui support&#xA;&#xA;Plug &#39;ray-x/go.nvim&#39;&#xA;&#xA;call plug#end()&#xA;&#xA;lua &amp;lt;&amp;lt;EOF&#xA;require &#39;go&#39;.setup({&#xA;  goimport = &#39;gopls&#39;, -- if set to &#39;gopls&#39; will use golsp format&#xA;  gofmt = &#39;gopls&#39;, -- if set to gopls will use golsp format&#xA;  max_line_len = 120,&#xA;  tag_transform = false,&#xA;  test_dir = &#39;&#39;,&#xA;  comment_placeholder = &#39; Óòß  &#39;,&#xA;  lsp_cfg = true, -- false: use your own lspconfig&#xA;  lsp_gofumpt = true, -- true: set default gofmt in gopls format to gofumpt&#xA;  lsp_on_attach = true, -- use on_attach from go.nvim&#xA;  dap_debug = true,&#xA;})&#xA;&#xA;local protocol = require&#39;vim.lsp.protocol&#39;&#xA;&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will setup gopls with non default configure provided by go.nvim (Includes lspconfig default keymaps)&lt;/p&gt; &#xA;&lt;h2&gt;Other plugins that you may like&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeniasaigak/goplay.nvim&#34;&gt;goplay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rafaelsq/nvim-goc.lua&#34;&gt;a different way to highlight coverage results&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Q &amp;amp; A:&lt;/h2&gt; &#xA;&lt;p&gt;Q: What is &lt;code&gt;Toggle gc annotation details&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: This is a codelens message, please run codelens &lt;code&gt;GoCodeLenAct&lt;/code&gt; and get more info&lt;/p&gt;</summary>
  </entry>
</feed>