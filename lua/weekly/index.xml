<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-02T01:58:44Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SmiteshP/nvim-navic</title>
    <updated>2023-04-02T01:58:44Z</updated>
    <id>tag:github.com,2023-04-02:/SmiteshP/nvim-navic</id>
    <link href="https://github.com/SmiteshP/nvim-navic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple winbar/statusline plugin that shows your current code context&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üõ∞Ô∏è nvim-navic&lt;/h1&gt; &#xA;&lt;p&gt;A simple statusline/winbar component that uses LSP to show your current code context. Named after the Indian satellite navigation system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43147494/173186210-c8d689ad-1f8a-43cf-8125-127c7bd5be35.gif&#34; alt=&#34;2022-06-11 17-02-33&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You might also be interested in &lt;a href=&#34;https://github.com/SmiteshP/nvim-navbuddy&#34;&gt;nvim-navbuddy&lt;/a&gt;. Paired with nvim-navic, it will give you complete breadcrumbs experience like in an IDE!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.7.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;SmiteshP/nvim-navic&#34;,&#xA;    requires = &#34;neovim/nvim-lspconfig&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;neovim/nvim-lspconfig&#34;&#xA;Plug &#34;SmiteshP/nvim-navic&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Setup&lt;/h2&gt; &#xA;&lt;p&gt;For nvim-navic to work, it needs attach to the lsp server. You can pass the nvim-navic&#39;s &lt;code&gt;attach&lt;/code&gt; function as &lt;code&gt;on_attach&lt;/code&gt; while setting up the lsp server.&lt;/p&gt; &#xA;&lt;p&gt;Note: nvim-navic can attach to only one server per buffer.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local navic = require(&#34;nvim-navic&#34;)&#xA;&#xA;require(&#34;lspconfig&#34;).clangd.setup {&#xA;    on_attach = function(client, bufnr)&#xA;        navic.attach(client, bufnr)&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re sharing your &lt;code&gt;on-attach&lt;/code&gt; function between lspconfigs, better wrap nvim-navic&#39;s &lt;code&gt;attach&lt;/code&gt; function to make sure &lt;code&gt;documentSymbolProvider&lt;/code&gt; is enabled:&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local on_attach = function(client, bufnr)&#xA;    ...&#xA;    if client.server_capabilities.documentSymbolProvider then&#xA;        navic.attach(client, bufnr)&#xA;    end&#xA;    ...&#xA;end&#xA;&#xA;require(&#34;lspconfig&#34;).clangd.setup {&#xA;    on_attach = on_attach&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: You can set &lt;code&gt;vim.g.navic_silence = true&lt;/code&gt; to supress error messages thrown by nvim-navic. However this is not recommended as the error messages indicate that there is problem in your setup. That is, you are attaching nvim-navic to servers that don&#39;t support documentSymbol or are attaching navic to multiple servers for a single buffer.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: You can set &lt;code&gt;vim.b.navic_lazy_update_context = true&lt;/code&gt; for specific buffers, where you want the the updates to not occur on every &lt;code&gt;CursorMoved&lt;/code&gt; event. It should help if you are facing performance issues in large files. Read the docs for example usage of this variable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;ü™Ñ Customise&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;setup&lt;/code&gt; function to modify default parameters.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;icons&lt;/code&gt; : Indicate the type of symbol captured. Default icons assume you have nerd-fonts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;highlight&lt;/code&gt; : If set to true, will add colors to icons and text as defined by highlight groups &lt;code&gt;NavicIcons*&lt;/code&gt; (&lt;code&gt;NavicIconsFile&lt;/code&gt;, &lt;code&gt;NavicIconsModule&lt;/code&gt;.. etc.), &lt;code&gt;NavicText&lt;/code&gt; and &lt;code&gt;NavicSeparator&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;depth_limit&lt;/code&gt; : Maximum depth of context to be shown. If the context hits this depth limit, it is truncated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;depth_limit_indicator&lt;/code&gt; : Icon to indicate that &lt;code&gt;depth_limit&lt;/code&gt; was hit and the shown context is truncated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;safe_output&lt;/code&gt; : Sanitize the output for use in statusline and winbar.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;navic.setup {&#xA;    icons = {&#xA;        File          = &#34;Ôúò &#34;,&#xA;        Module        = &#34;Óò§ &#34;,&#xA;        Namespace     = &#34;Ô†ñ &#34;,&#xA;        Package       = &#34;Óò§ &#34;,&#xA;        Class         = &#34;Ô†ñ &#34;,&#xA;        Method        = &#34;Ôö¶ &#34;,&#xA;        Property      = &#34;Óûõ &#34;,&#xA;        Field         = &#34;Óúñ &#34;,&#xA;        Constructor   = &#34;Ôê• &#34;,&#xA;        Enum          = &#34;Ô©ó&#34;,&#xA;        Interface     = &#34;Ô©ó&#34;,&#xA;        Function      = &#34;Ôûî &#34;,&#xA;        Variable      = &#34;Ôö¶ &#34;,&#xA;        Constant      = &#34;Ô£æ &#34;,&#xA;        String        = &#34;Ôî´ &#34;,&#xA;        Number        = &#34;Ô¢ü &#34;,&#xA;        Boolean       = &#34;‚ó© &#34;,&#xA;        Array         = &#34;Ôô© &#34;,&#xA;        Object        = &#34;Ôô® &#34;,&#xA;        Key           = &#34;Ô†ä &#34;,&#xA;        Null          = &#34;Ô≥† &#34;,&#xA;        EnumMember    = &#34;ÔÖù &#34;,&#xA;        Struct        = &#34;Ô†ñ &#34;,&#xA;        Event         = &#34;ÔÉß &#34;,&#xA;        Operator      = &#34;Ôöî &#34;,&#xA;        TypeParameter = &#34;ÔûÉ &#34;,&#xA;    },&#xA;    highlight = false,&#xA;    separator = &#34; &amp;gt; &#34;,&#xA;    depth_limit = 0,&#xA;    depth_limit_indicator = &#34;..&#34;,&#xA;    safe_output = true&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For highlights to work, highlight groups must be defined. These may be defined in your colourscheme, if not you can define them yourself too as shown in below code snippet.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example highlight definitions&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_hl(0, &#34;NavicIconsFile&#34;,          {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsModule&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsNamespace&#34;,     {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsPackage&#34;,       {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsClass&#34;,         {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsMethod&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsProperty&#34;,      {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsField&#34;,         {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsConstructor&#34;,   {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsEnum&#34;,          {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsInterface&#34;,     {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsFunction&#34;,      {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsVariable&#34;,      {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsConstant&#34;,      {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsString&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsNumber&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsBoolean&#34;,       {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsArray&#34;,         {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsObject&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsKey&#34;,           {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsNull&#34;,          {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsEnumMember&#34;,    {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsStruct&#34;,        {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsEvent&#34;,         {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsOperator&#34;,      {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicIconsTypeParameter&#34;, {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicText&#34;,               {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;vim.api.nvim_set_hl(0, &#34;NavicSeparator&#34;,          {default = true, bg = &#34;#000000&#34;, fg = &#34;#ffffff&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;If you have a font patched with &lt;a href=&#34;https://github.com/microsoft/vscode-codicons/raw/main/dist/codicon.ttf&#34;&gt;codicon.ttf&lt;/a&gt;, you can replicate the look of VSCode breadcrumbs using the following icons&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;VSCode like icons&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;navic.setup {&#xA;  icons = {&#xA;    File = &#39;Ó©ª &#39;,&#xA;    Module = &#39;Ó™ã &#39;,&#xA;    Namespace = &#39;Ó™ã &#39;,&#xA;    Package = &#39;Ó¨© &#39;,&#xA;    Class = &#39;Ó≠õ &#39;,&#xA;    Method = &#39;Ó™å &#39;,&#xA;    Property = &#39;Ó≠• &#39;,&#xA;    Field = &#39;Ó≠ü &#39;,&#xA;    Constructor = &#39;Ó™å &#39;,&#xA;    Enum = &#39;Ó™ï &#39;,&#xA;    Interface = &#39;Ó≠° &#39;,&#xA;    Function = &#39;Ó™å &#39;,&#xA;    Variable = &#39;Ó™à &#39;,&#xA;    Constant = &#39;Ó≠ù &#39;,&#xA;    String = &#39;ÓÆç &#39;,&#xA;    Number = &#39;Ó™ê &#39;,&#xA;    Boolean = &#39;Ó™è &#39;,&#xA;    Array = &#39;Ó™ä &#39;,&#xA;    Object = &#39;Ó™ã &#39;,&#xA;    Key = &#39;Ó™ì &#39;,&#xA;    Null = &#39;Ó™è &#39;,&#xA;    EnumMember = &#39;Ó≠û &#39;,&#xA;    Struct = &#39;Ó™ë &#39;,&#xA;    Event = &#39;Ó™Ü &#39;,&#xA;    Operator = &#39;Ó≠§ &#39;,&#xA;    TypeParameter = &#39;Ó™í &#39;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;p&gt;nvim-navic does not alter your statusline or winbar on its own. Instead, you are provided with these two functions and its left up to you how you want to incorporate this into your setup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;is_available(bufnr)&lt;/code&gt; : Returns boolean value indicating whether output can be provided. &lt;code&gt;bufnr&lt;/code&gt; is optional, default is current.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_location(opts, bufnr)&lt;/code&gt; : Returns a pretty string with context information. Using &lt;code&gt;opts&lt;/code&gt; table you can override any of the options, format same as the table for &lt;code&gt;setup&lt;/code&gt; function. You can also provide a &lt;code&gt;bufnr&lt;/code&gt; value to determine which buffer is used to get the code context information, if not provided the current buffer will be used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Examples&lt;/summary&gt; &#xA; &lt;h3&gt;Native method&lt;/h3&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;Lua&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.o.statusline = &#34;%{%v:lua.require&#39;nvim-navic&#39;.get_location()%}&#34;&#xA;--  OR&#xA;vim.o.winbar = &#34;%{%v:lua.require&#39;nvim-navic&#39;.get_location()%}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;Vimscript&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;set statusline+=%{%v:lua.require&#39;nvim-navic&#39;.get_location()%}&#xA;&#34;   OR&#xA;set winbar+=%{%v:lua.require&#39;nvim-navic&#39;.get_location()%}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;h3&gt;&lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;feline&lt;/a&gt;&lt;/h3&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;An example feline setup &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local navic = require(&#34;nvim-navic&#34;)&#xA;&#xA;table.insert(components.active[1], {&#xA;    provider = function()&#xA;        return navic.get_location()&#xA;    end,&#xA;    enabled = function()&#xA;        return navic.is_available()&#xA;    end&#xA;})&#xA;&#xA;require(&#34;feline&#34;).setup({components = components})&#xA;--  OR&#xA;require(&#34;feline&#34;).winbar.setup({components = components})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;h3&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine&lt;/a&gt;&lt;/h3&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;An example lualine setup &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local navic = require(&#34;nvim-navic&#34;)&#xA;&#xA;require(&#34;lualine&#34;).setup({&#xA;    sections = {&#xA;        lualine_c = {&#xA;            { &#xA;              function()&#xA;                  return navic.get_location()&#xA;              end, &#xA;              cond = function() &#xA;                  return navic.is_available()&#xA;              end&#xA;            },&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;h3&gt;&lt;a href=&#34;https://github.com/glepnir/galaxyline.nvim&#34;&gt;galaxyline&lt;/a&gt;&lt;/h3&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;An example galaxyline setup &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local navic = require(&#34;nvim-navic&#34;)&#xA;local gl = require(&#34;galaxyline&#34;)&#xA;&#xA;gl.section.right[1]= {&#xA;    nvimNavic = {&#xA;        provider = function()&#xA;            return navic.get_location()&#xA;        end,&#xA;        condition = function()&#xA;            return navic.is_available()&#xA;        end&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;If you have a creative use case and want the raw context data to work with, you can use the following function&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_data(bufnr)&lt;/code&gt; : Returns a table of intermediate representation of data. Table of tables that contain &#39;kind&#39;, &#39;name&#39; and &#39;icon&#39; for each context. &lt;code&gt;bufnr&lt;/code&gt; is optional argument, defaults to current buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;An example output of &lt;code&gt;get_data&lt;/code&gt; function: &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt; {&#xA;    {&#xA;        name  = &#34;myclass&#34;,&#xA;        type  = &#34;Class&#34;,&#xA;        icon  = &#34;Ô†ñ &#34;,&#xA;        kind  = 5,&#xA;        scope = {&#xA;            start = { line = 1, character = 0 },&#xA;            end = { line = 10, character = 0 }&#xA;        }&#xA;    },&#xA;    {&#xA;        name  = &#34;mymethod&#34;,&#xA;        type  = &#34;Method&#34;,&#xA;        icon  = &#34;Ôö¶ &#34;,&#xA;        kind  = 6,&#xA;        scope = {&#xA;            start = { line = 2, character = 4 },&#xA;            end = { line = 5, character = 4 }&#xA;        }&#xA;    }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>bfeber/HLA-NOVR-Script</title>
    <updated>2023-04-02T01:58:44Z</updated>
    <id>tag:github.com,2023-04-02:/bfeber/HLA-NOVR-Script</id>
    <link href="https://github.com/bfeber/HLA-NOVR-Script" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NO VR Script for Half-Life: Alyx&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HLA-NOVR-Script&lt;/h1&gt; &#xA;&lt;p&gt;NO VR Script for Half-Life: Alyx&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Copy the &lt;code&gt;game&lt;/code&gt; folder into your main Half-Life: Alyx installation folder (e.g. &lt;code&gt;C:\Program Files (x86)\Steam\steamapps\common\Half-Life Alyx&lt;/code&gt;), replacing existing files.&lt;/p&gt; &#xA;&lt;h2&gt;Playing&lt;/h2&gt; &#xA;&lt;p&gt;Simply add &lt;code&gt;-novr -vsync&lt;/code&gt; to the launch options on Steam and start the game.&lt;/p&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;h3&gt;Keyboard and Mouse&lt;/h3&gt; &#xA;&lt;p&gt;Left Click: Select in Main Menu/Throw Held Object/Primary Attack&lt;/p&gt; &#xA;&lt;p&gt;Middle Click: Zoom&lt;/p&gt; &#xA;&lt;p&gt;W, A, S, D: Move&lt;/p&gt; &#xA;&lt;p&gt;Space: Jump&lt;/p&gt; &#xA;&lt;p&gt;Ctrl: Crouch&lt;/p&gt; &#xA;&lt;p&gt;Shift: Sprint&lt;/p&gt; &#xA;&lt;p&gt;E: Interact/Pick Up Object&lt;/p&gt; &#xA;&lt;p&gt;F: Flashlight (if you have it)&lt;/p&gt; &#xA;&lt;p&gt;H: Cover your mouth&lt;/p&gt; &#xA;&lt;p&gt;F5: Quick Save&lt;/p&gt; &#xA;&lt;p&gt;F9: Quick Load&lt;/p&gt; &#xA;&lt;p&gt;M: Main Menu&lt;/p&gt; &#xA;&lt;p&gt;P: Pause&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iLLeniumStudios/illenium-appearance</title>
    <updated>2023-04-02T01:58:44Z</updated>
    <id>tag:github.com,2023-04-02:/iLLeniumStudios/illenium-appearance</id>
    <link href="https://github.com/iLLeniumStudios/illenium-appearance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;fivem-appearance for qb-core and ESX framework, packed with a lot of features&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;illenium-appearance&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iLLeniumStudios/illenium-appearance/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/iLLeniumStudios/illenium-appearance/actions/workflows/lint.yml/badge.svg?branch=main&#34; alt=&#34;Lint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A replacement for clothing resources for various frameworks&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;h1&gt;&lt;a href=&#34;https://docs.illenium.dev/free-resources/illenium-appearance/installation/&#34;&gt;Documentation&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://i.imgur.com/ltLSMmh.png&#34; alt=&#34;illenium-appearance with Tattoos&#34;&gt; &#xA;&lt;p&gt;Discord: &lt;a href=&#34;https://discord.illenium.dev&#34;&gt;https://discord.illenium.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Do &lt;strong&gt;NOT&lt;/strong&gt; use the &lt;code&gt;main&lt;/code&gt; branch as it will most likely be broken for you. NO SUPPORT WILL BE PROVIDED IF YOU USE IT. Only use the &lt;a href=&#34;https://github.com/iLLeniumStudios/illenium-appearance/releases/latest&#34;&gt;latest release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Frameworks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;qb-core&lt;/li&gt; &#xA; &lt;li&gt;ESX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-core&#34;&gt;qb-core&lt;/a&gt; (Latest) (Only for qb-core based servers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esx-framework/esx-legacy&#34;&gt;es_extended&lt;/a&gt; (Latest) (Only for ESX based servers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/overextended/ox_lib&#34;&gt;ox_lib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BerkieBb/qb-target&#34;&gt;qb-target&lt;/a&gt; (Optional) (Only for qb-core based servers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Everything from standalone fivem-appearance&lt;/li&gt; &#xA; &lt;li&gt;UI from OX Lib&lt;/li&gt; &#xA; &lt;li&gt;Player outfits&lt;/li&gt; &#xA; &lt;li&gt;Rank based Clothing Rooms for Jobs / Gangs&lt;/li&gt; &#xA; &lt;li&gt;Job / Gang locked Stores&lt;/li&gt; &#xA; &lt;li&gt;Tattoo&#39;s Support&lt;/li&gt; &#xA; &lt;li&gt;Hair Textures&lt;/li&gt; &#xA; &lt;li&gt;Polyzone Support&lt;/li&gt; &#xA; &lt;li&gt;Ped Menu command (/pedmenu) (Configurable)&lt;/li&gt; &#xA; &lt;li&gt;Reload Skin command (/reloadskin)&lt;/li&gt; &#xA; &lt;li&gt;Improved code quality&lt;/li&gt; &#xA; &lt;li&gt;Plastic Surgeons&lt;/li&gt; &#xA; &lt;li&gt;qb-target Support&lt;/li&gt; &#xA; &lt;li&gt;Skin migration support (qb-clothing / old fivem-appearance / esx_skin)&lt;/li&gt; &#xA; &lt;li&gt;Player specific outfit locations (Restricted via CitizenID)&lt;/li&gt; &#xA; &lt;li&gt;Makeup Secondary Color&lt;/li&gt; &#xA; &lt;li&gt;Blacklist / Limit Components &amp;amp; Props to certain Jobs / Gangs / CitizenIDs / ACEs (Allows you to have VIP clothing on your Server)&lt;/li&gt; &#xA; &lt;li&gt;Blacklist / Limit Peds to certain Jobs / Gangs / CitizenIDs / ACEs&lt;/li&gt; &#xA; &lt;li&gt;Persist Job / Gang Clothes on reconnects / logout&lt;/li&gt; &#xA; &lt;li&gt;Themes Support (Default &amp;amp; QBCore provided out of the box)&lt;/li&gt; &#xA; &lt;li&gt;Disable Components / Props Entirely (Clothing as items support)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;New Preview (with Tattoos)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://streamable.com/qev2h7&#34;&gt;https://streamable.com/qev2h7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read the docs here: &lt;a href=&#34;https://docs.illenium.dev&#34;&gt;https://docs.illenium.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Original Script: &lt;a href=&#34;https://github.com/pedr0fontoura/fivem-appearance&#34;&gt;https://github.com/pedr0fontoura/fivem-appearance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tattoo&#39;s Support: &lt;a href=&#34;https://github.com/franfdezmorales/fivem-appearance&#34;&gt;https://github.com/franfdezmorales/fivem-appearance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Last Maintained Fork for QB: &lt;a href=&#34;https://github.com/mirrox1337/aj-fivem-appearance&#34;&gt;https://github.com/mirrox1337/aj-fivem-appearance&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>