<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-03T01:52:49Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvimtools/none-ls.nvim</title>
    <updated>2023-12-03T01:52:49Z</updated>
    <id>tag:github.com,2023-12-03:/nvimtools/none-ls.nvim</id>
    <link href="https://github.com/nvimtools/none-ls.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;null-ls.nvim reloaded / Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;none-ls.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;null-ls.nvim&lt;/code&gt; Reloaded, maintained by the community.&lt;/p&gt; &#xA;&lt;p&gt;Only the repo name is changed for compatibility concerns. All the API and future changes will keep in place as-is.&lt;/p&gt; &#xA;&lt;h2&gt;Migration&lt;/h2&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;jose-elias-alvarez/null-ls.nvim&lt;/code&gt; with &lt;code&gt;nvimtools/none-ls.nvim&lt;/code&gt; in your choice of package manager.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Open a pull request to become a collaborator. If you have contributed to &lt;code&gt;null-ls.nvim&lt;/code&gt; before, simply open an issue or comment on that commit.&lt;/p&gt; &#xA;&lt;p&gt;If you want to make changes, open a new a pull request. Find another collaborator to review your changes, as a review is required for the PR to be merged by yourself (subject to change if there are more collaborators in the future).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;null-ls.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Neovim&#39;s LSP ecosystem is growing, and plugins like &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt; make it a joy to work with LSP features like code actions and diagnostics.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the VS Code and coc.nvim ecosystems, Neovim doesn&#39;t provide a way for non-LSP sources to hook into its LSP client. null-ls is an attempt to bridge that gap and simplify the process of creating, sharing, and setting up LSP sources using pure Lua.&lt;/p&gt; &#xA;&lt;p&gt;null-ls is also an attempt to reduce the boilerplate required to set up general-purpose language servers and improve performance by removing the need for external processes.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;null-ls is in &lt;strong&gt;beta status&lt;/strong&gt;. Please see below for steps to follow if something doesn&#39;t work the way you expect (or doesn&#39;t work at all).&lt;/p&gt; &#xA;&lt;p&gt;null-ls is developed on and tested against the latest stable version of Neovim. Support for versions built from &lt;code&gt;HEAD&lt;/code&gt; is provided on a best-effort basis, and users are encouraged to contribute fixes to any issues exclusive to these versions.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;null-ls sources are able to hook into the following LSP features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Code actions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Diagnostics (file- and project-level)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Formatting (including range formatting)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hover&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Completion&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;null-ls includes built-in sources for each of these features to provide out-of-the-box functionality. See &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTINS.md&#34;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTIN_CONFIG.md&#34;&gt;BUILTIN_CONFIG&lt;/a&gt; for instructions on how to set up and configure these sources.&lt;/p&gt; &#xA;&lt;p&gt;null-ls also provides helpers to streamline the process of spawning and transforming the output of command-line processes into an LSP-friendly format. If you want to create your own source, either for personal use or for a plugin, see &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/HELPERS.md&#34;&gt;HELPERS&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install null-ls using your favorite package manager. The plugin depends on &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;, which you are (probably) already using.&lt;/p&gt; &#xA;&lt;p&gt;To get started, you must set up null-ls and register at least one source. See &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTINS.md&#34;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/CONFIG.md&#34;&gt;CONFIG&lt;/a&gt; for information about setting up and configuring null-ls.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;&#xA;null_ls.setup({&#xA;    sources = {&#xA;        null_ls.builtins.formatting.stylua,&#xA;        null_ls.builtins.diagnostics.eslint,&#xA;        null_ls.builtins.completion.spell,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The definitive source for information about null-ls is its &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/MAIN.md&#34;&gt;documentation&lt;/a&gt;, which contains information about how null-ls works, how to set it up, and how to create sources.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to add new features and built-ins for any language are always welcome. See &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Parsing buffer content&lt;/h3&gt; &#xA;&lt;p&gt;The following example demonstrates a diagnostic source that will parse the current buffer&#39;s content and show instances of the word &lt;code&gt;really&lt;/code&gt; as LSP warnings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;&#xA;local no_really = {&#xA;    method = null_ls.methods.DIAGNOSTICS,&#xA;    filetypes = { &#34;markdown&#34;, &#34;text&#34; },&#xA;    generator = {&#xA;        fn = function(params)&#xA;            local diagnostics = {}&#xA;            -- sources have access to a params object&#xA;            -- containing info about the current file and editor state&#xA;            for i, line in ipairs(params.content) do&#xA;                local col, end_col = line:find(&#34;really&#34;)&#xA;                if col and end_col then&#xA;                    -- null-ls fills in undefined positions&#xA;                    -- and converts source diagnostics into the required format&#xA;                    table.insert(diagnostics, {&#xA;                        row = i,&#xA;                        col = col,&#xA;                        end_col = end_col + 1,&#xA;                        source = &#34;no-really&#34;,&#xA;                        message = &#34;Don&#39;t use &#39;really!&#39;&#34;,&#xA;                        severity = vim.diagnostic.severity.WARN,&#xA;                    })&#xA;                end&#xA;            end&#xA;            return diagnostics&#xA;        end,&#xA;    },&#xA;}&#xA;&#xA;null_ls.register(no_really)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parsing CLI program output&lt;/h3&gt; &#xA;&lt;p&gt;null-ls includes helpers to simplify the process of spawning and capturing the output of CLI programs. This example shows how to pass the content of the current buffer to &lt;code&gt;markdownlint&lt;/code&gt; via &lt;code&gt;stdin&lt;/code&gt; and convert its output (which it sends to &lt;code&gt;stderr&lt;/code&gt;) into LSP diagnostics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;local helpers = require(&#34;null-ls.helpers&#34;)&#xA;&#xA;local markdownlint = {&#xA;    method = null_ls.methods.DIAGNOSTICS,&#xA;    filetypes = { &#34;markdown&#34; },&#xA;    -- null_ls.generator creates an async source&#xA;    -- that spawns the command with the given arguments and options&#xA;    generator = null_ls.generator({&#xA;        command = &#34;markdownlint&#34;,&#xA;        args = { &#34;--stdin&#34; },&#xA;        to_stdin = true,&#xA;        from_stderr = true,&#xA;        -- choose an output format (raw, json, or line)&#xA;        format = &#34;line&#34;,&#xA;        check_exit_code = function(code, stderr)&#xA;            local success = code &amp;lt;= 1&#xA;&#xA;            if not success then&#xA;                -- can be noisy for things that run often (e.g. diagnostics), but can&#xA;                -- be useful for things that run on demand (e.g. formatting)&#xA;                print(stderr)&#xA;            end&#xA;&#xA;            return success&#xA;        end,&#xA;        -- use helpers to parse the output from string matchers,&#xA;        -- or parse it manually with a function&#xA;        on_output = helpers.diagnostics.from_patterns({&#xA;            {&#xA;                pattern = [[:(%d+):(%d+) [%w-/]+ (.*)]],&#xA;                groups = { &#34;row&#34;, &#34;col&#34;, &#34;message&#34; },&#xA;            },&#xA;            {&#xA;                pattern = [[:(%d+) [%w-/]+ (.*)]],&#xA;                groups = { &#34;row&#34;, &#34;message&#34; },&#xA;            },&#xA;        }),&#xA;    }),&#xA;}&#xA;&#xA;null_ls.register(markdownlint)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Something isn&#39;t working! What do I do?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you run into issues when using null-ls, please follow the steps below and &lt;strong&gt;do not&lt;/strong&gt; open an issue on the Neovim repository. null-ls is not an actual LSP server, so we need to determine whether issues are specific to this plugin before sending anything upstream.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure your configuration is in line with the latest version of this document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/#how-do-i-enable-debug-mode-and-get-debug-output&#34;&gt;Enable debug mode&lt;/a&gt; and check the output of your source(s). If the CLI program is not properly configured or is otherwise not running as expected, that&#39;s an issue with the program, not null-ls.&lt;/li&gt; &#xA; &lt;li&gt;Check the documentation for available configuration options that might solve your issue.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re having trouble configuring null-ls or want to know how to achieve a specific result, open a discussion.&lt;/li&gt; &#xA; &lt;li&gt;If you believe the issue is with null-ls itself or you want to request a new feature, open an issue and provide the information requested in the issue template.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;My &lt;code&gt;:checkhealth&lt;/code&gt; output is wrong! What do I do?&lt;/h3&gt; &#xA;&lt;p&gt;Checking whether a given command is executable is tricky, and null-ls&#39; health check doesn&#39;t handle all cases. null-ls&#39; internal command resolution is independent of its health check output, which is for informational purposes.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re not sure whether a given command is running as expected, &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/#how-do-i-enable-debug-mode-and-get-debug-output&#34;&gt;enable debug mode&lt;/a&gt; and check your log.&lt;/p&gt; &#xA;&lt;h3&gt;How do I format files?&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;vim.lsp.buf.format()&lt;/code&gt;. See &lt;code&gt;:help vim.lsp.buf.format()&lt;/code&gt; for usage instructions.&lt;/p&gt; &#xA;&lt;h3&gt;How do I format files on save?&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/nvimtools/none-ls.nvim/wiki/Formatting-on-save&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I stop Neovim from asking me which server I want to use for formatting?&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/nvimtools/none-ls.nvim/wiki/Avoiding-LSP-formatting-conflicts&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I view project-level diagnostics?&lt;/h3&gt; &#xA;&lt;p&gt;For a built-in solution, use &lt;code&gt;:lua vim.diagnostic.setqflist()&lt;/code&gt;. You can also use a plugin like &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I enable debug mode and get debug output?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;debug&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; in your config:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;null-ls&#34;).setup({&#xA;    debug = true,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;:NullLsLog&lt;/code&gt; to open your debug log in the current Neovim instance or &lt;code&gt;:NullLsInfo&lt;/code&gt; to get the path to your debug log.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As with LSP logging, debug mode will slow down Neovim. Make sure to disable the option after you&#39;ve collected the information you&#39;re looking for.&lt;/p&gt; &#xA;&lt;h3&gt;Does it work with (other plugin)?&lt;/h3&gt; &#xA;&lt;p&gt;In most cases, yes. null-ls tries to act like an actual LSP server as much as possible, so it should work seamlessly with most LSP-related plugins. If you run into problems, please try to determine which plugin is causing them and open an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvimtools/none-ls.nvim/wiki/Compatibility-with-other-plugins&#34;&gt;This wiki page&lt;/a&gt; mentions plugins that require specific configuration options / tweaks to work with null-ls.&lt;/p&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to hard work by @folke, the plugin wraps the mechanism Neovim uses to spawn language servers to start a client entirely in-memory. The client attaches to buffers that match defined sources and receives and responds to requests, document changes, and other events from Neovim.&lt;/p&gt; &#xA;&lt;h3&gt;Will it affect my performance?&lt;/h3&gt; &#xA;&lt;p&gt;More testing is necessary, but since null-ls uses pure Lua and runs entirely in memory without any external processes, in most cases it should run faster than similar solutions. If you notice that performance is worse with null-ls than with an alternative, please open an issue!&lt;/p&gt; &#xA;&lt;h3&gt;I am seeing a formatting &lt;code&gt;timeout&lt;/code&gt; error message&lt;/h3&gt; &#xA;&lt;p&gt;This issue occurs when a formatter takes longer than the default timeout value. This is an automatic mechanism and controlled by Neovim. You might want to increase the timeout in your call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.buf.format({ timeout_ms = 2000 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;The test suite includes unit and integration tests and depends on plenary.nvim. Run &lt;code&gt;make test&lt;/code&gt; in the root of the project to run the suite or &lt;code&gt;FILE=filename_spec.lua make test-file&lt;/code&gt; to test an individual file.&lt;/p&gt; &#xA;&lt;p&gt;To avoid a dependency on any plugin managers, the test suite will set up its plugin runtime under the &lt;code&gt;./tests&lt;/code&gt; directory to always have a plenary version available.&lt;/p&gt; &#xA;&lt;p&gt;If you run into plenary-related issues while running the tests, make sure you have an up-to-date version of the plugin by clearing that cache with: &lt;code&gt;make clean&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All tests expect to run on the latest release version of Neovim and are not guaranteed to work on versions built from &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt; and &lt;a href=&#34;https://github.com/iamcco/diagnostic-languageserver&#34;&gt;diagnostic-languageserver&lt;/a&gt;: general-purpose language servers that can provide formatting and diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;nvim-lint&lt;/a&gt;: a Lua plugin that focuses on providing diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mhartington/formatter.nvim&#34;&gt;formatter.nvim&lt;/a&gt;: a Lua plugin that (surprise) focuses on formatting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/lewis6991/hover.nvim&#34;&gt;hover.nvim&lt;/a&gt;: Hover plugin framework for Neovim.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sourcegraph/sg.nvim</title>
    <updated>2023-12-03T01:52:49Z</updated>
    <id>tag:github.com,2023-12-03:/sourcegraph/sg.nvim</id>
    <link href="https://github.com/sourcegraph/sg.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Sourcegraph/Cody plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sg.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Beta&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sourcegraph/sg.nvim/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sourcegraph/sg.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sourcegraph/sg.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;sg.nvim is a plugin focused on bringing many of the features of sourcegraph.com into Neovim.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To configure logging in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Log in on your Sourcegraph instance.&lt;/li&gt; &#xA; &lt;li&gt;Click your user menu in the top right, then select Settings &amp;gt; Access tokens.&lt;/li&gt; &#xA; &lt;li&gt;Create your access token, and then run &lt;code&gt;:SourcegraphLogin&lt;/code&gt; in your neovim editor after installation.&lt;/li&gt; &#xA; &lt;li&gt;Type in the link to your Sourcegraph instance (for example: &lt;code&gt;https://sourcegraph.com&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;And then paste in your access token.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An alternative to this is to use the environment variables specified for &lt;a href=&#34;https://github.com/sourcegraph/src-cli#log-into-your-sourcegraph-instance&#34;&gt;src-cli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can check that you&#39;re logged in by then running &lt;code&gt;:checkhealth sg&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nvim 0.9 or nvim nightly&lt;/li&gt; &#xA; &lt;li&gt;Node.js &amp;gt;= 18.17.0 (LTS) at runtime for &lt;a href=&#34;https://github.com/sourcegraph/cody&#34;&gt;&lt;code&gt;cody-agent.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(By default, sg.nvim downloads released binaries from Github. If you prefer to build the plugin yourself, you&#39;ll need &lt;code&gt;cargo&lt;/code&gt; to build)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Currently uses plenary.nvim and telescope.nvim for some features. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you would like to use something else for search functionality, please make an issue and I can look into adding support.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Use your favorite package manager to install, for example in lazy.nvim&#xA;--  Optionally, you can also install nvim-telescope/telescope.nvim to use some search functionality.&#xA;return {&#xA;  {&#xA;    &#34;sourcegraph/sg.nvim&#34;,&#xA;    dependencies = { &#34;nvim-lua/plenary.nvim&#34;, --[[ &#34;nvim-telescope/telescope.nvim ]] },&#xA;&#xA;    -- If you have a recent version of lazy.nvim, you don&#39;t need to add this!&#xA;    build = &#34;nvim -l build/init.lua&#34;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;packer.nvim&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Packer.nvim, also make sure to install nvim-lua/plenary.nvim&#xA;use { &#39;sourcegraph/sg.nvim&#39;, run = &#39;nvim -l build/init.lua&#39; }&#xA;&#xA;-- You&#39;ll also need plenary.nvim&#xA;use { &#39;nvim-lua/plenary.nvim&#39; }&#xA;&#xA;-- And optionally, you can install telescope for some search functionality&#xA;--  &#34;nvim-lua/plenary.nvim&#34;, --[[ &#34;nvim-telescope/telescope.nvim ]] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;vim-plug&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimrc&#34;&gt;&#34; Using vim-plug&#xA;Plug &#39;sourcegraph/sg.nvim&#39;, { &#39;do&#39;: &#39;nvim -l build/init.lua&#39; }&#xA;&#xA;&#34; Required for various utilities&#xA;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;&#xA;&#34; Required if you want to use some of the search functionality&#xA;Plug &#39;nvim-telescope/telescope.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;After installation, run &lt;code&gt;:checkhealth sg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(Nix instructions at the end of the readme)&lt;/p&gt; &#xA;&lt;h2&gt;Configuration:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Sourcegraph configuration. All keys are optional&#xA;require(&#34;sg&#34;).setup {&#xA;  -- Pass your own custom attach function&#xA;  --    If you do not pass your own attach function, then the following maps are provide:&#xA;  --        - gd -&amp;gt; goto definition&#xA;  --        - gr -&amp;gt; goto references&#xA;  on_attach = your_custom_lsp_attach_function&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Example mapping for doing searches from within neovim (may change) using telescope.&#xA;&#34; (requires telescope.nvim to be installed)&#xA;nnoremap &amp;lt;space&amp;gt;ss &amp;lt;cmd&amp;gt;lua require(&#39;sg.extensions.telescope&#39;).fuzzy_search_results()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demos:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Latest Demo: &lt;a href=&#34;https://youtu.be/j5sfHG3z3ao&#34;&gt;Alpha Release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Short clip of cross repository jump to definition: &lt;a href=&#34;https://clips.twitch.tv/AmazonianSullenSwordBloodTrail-l8H5WKEd8sNpEdIT&#34;&gt;Clip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Demo v2: &lt;a href=&#34;https://www.youtube.com/watch?v=RCyBnAx-4Q4&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Demo v1: &lt;a href=&#34;https://youtu.be/iCdsD6MiLQs&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;p&gt;Cody:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat interface and associated commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Autocompletions, prompted&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Autocompletions, suggested&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sourcegraph Browsing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Read files: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Directly from sourcegraph links: &lt;code&gt;:edit &amp;lt;sourcegraph url&amp;gt;&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;sg.nvim&lt;/code&gt; will automatically add protocols for handling &lt;code&gt;https://sourcegraph.com/*&lt;/code&gt; links.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Directly from buffer names: &lt;code&gt;:edit sg://github.com/tjdevries/sam.py/-/src/sam.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;:SourcegraphLink&lt;/code&gt; to get a link for the location under your cursor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reading non-files: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Repository roots&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Folders &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Expand Folders&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Unexpand Folders&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Open file from folder&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use builtin LSP client to connect to SG &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Goto Definition&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Goto References &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &amp;lt;20 references&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; kind of broken right now for lots of references&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic Search &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; literal, regexp and structural search support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;type:symbol&lt;/code&gt; support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; repo support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Advanced Search Features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Autocompletion&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Memory of last searches&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;More? Make an issue with something you&#39;re missing :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Nix(OS)&lt;/h3&gt; &#xA;&lt;p&gt;The project is packaged as a &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;Nix Flake&lt;/a&gt;. Consume it as you normally would. For reference, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nixos.wiki/wiki/Neovim&#34;&gt;Neovim guide on NixOS wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/willruggiano/neovim.drv&#34;&gt;gh:willruggiano/neovim.drv&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;sg = let&#xA;  system = &#34;x86_64-linux&#34;;&#xA;  package = inputs.sg-nvim.packages.${system}.default;&#xA;in {&#xA;  inherit package;&#xA;  init = pkgs.writeTextFile {&#xA;    name = &#34;sg.lua&#34;;&#xA;    text = &#39;&#39;&#xA;      return function()&#xA;        package.cpath = package.cpath .. &#34;;&#34; .. &#34;${package}/lib/?.so&#34;&#xA;      end&#xA;    &#39;&#39;;&#xA;  };&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Nix contributors and maintainers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feel free to &lt;code&gt;nix flake update&lt;/code&gt; every once in a while to make sure &lt;code&gt;flake.lock&lt;/code&gt; is up-to-date&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Minimal &lt;code&gt;sg.nvim&lt;/code&gt;-integrated neovim package for testing and example&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Integrate &lt;code&gt;sg.nvim&lt;/code&gt; + Cody onto &lt;a href=&#34;https://github.com/NixOS/nixpkgs/tree/fe2fb24a00ec510d29ccd4e36af72a0c55d81ec0/pkgs/applications/editors/vim/plugins&#34;&gt;nixpkgs:vimPlugins&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>3rd/image.nvim</title>
    <updated>2023-12-03T01:52:49Z</updated>
    <id>tag:github.com,2023-12-03:/3rd/image.nvim</id>
    <link href="https://github.com/3rd/image.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🖼️ Bringing images to Neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🖼️ image.nvim&lt;/h1&gt; &#xA;&lt;p&gt;This plugin attempts to add image support to Neovim.&lt;/p&gt; &#xA;&lt;p&gt;It works wonderfully with Kitty + Tmux, and it handles painful things like rendering an image at a given position in a buffer, scrolling, windows, etc.&lt;/p&gt; &#xA;&lt;p&gt;It has built-in Markdown and Neorg integrations that you can use right now. &lt;br&gt; It can also render image files as images when opened.&lt;/p&gt; &#xA;&lt;p&gt;Join on Discord: &lt;a href=&#34;https://discord.gg/tQVKuZCZ&#34;&gt;https://discord.gg/tQVKuZCZ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/3rd/image.nvim/assets/59587503/9a9a1792-6476-4d96-8b8e-d3cdd7f5759e&#34;&gt;https://github.com/3rd/image.nvim/assets/59587503/9a9a1792-6476-4d96-8b8e-d3cdd7f5759e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;These are things you have to setup on your own:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ImageMagick/ImageMagick&#34;&gt;ImageMagick&lt;/a&gt; - mandatory&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leafo/magick&#34;&gt;magick LuaRock&lt;/a&gt; - mandatory (&lt;code&gt;luarocks --local install magick&lt;/code&gt; or through your &lt;a href=&#34;https://github.com/vhyrro/hologram.nvim#install&#34;&gt;package manager&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;Kitty&lt;/a&gt; &amp;gt;= 28.0 - for the &lt;code&gt;kitty&lt;/code&gt; backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jstkdng/ueberzugpp&#34;&gt;ueberzugpp&lt;/a&gt; - for the &lt;code&gt;ueberzug&lt;/code&gt; backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/curl/curl&#34;&gt;curl&lt;/a&gt; - for remote images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After installing the &lt;code&gt;magick&lt;/code&gt; LuaRock, you need to change your config to load it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example for configuring Neovim to load user-installed installed Lua rocks:&#xA;package.path = package.path .. &#34;;&#34; .. vim.fn.expand(&#34;$HOME&#34;) .. &#34;/.luarocks/share/lua/5.1/?/init.lua;&#34;&#xA;package.path = package.path .. &#34;;&#34; .. vim.fn.expand(&#34;$HOME&#34;) .. &#34;/.luarocks/share/lua/5.1/?.lua;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NixOS&lt;/strong&gt; users need to install &lt;code&gt;imageMagick&lt;/code&gt; and &lt;code&gt;luajitPackages.magick&lt;/code&gt; (&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/243687&#34;&gt;thanks&lt;/a&gt; to &lt;a href=&#34;https://github.com/donovanglover&#34;&gt;@donovanglover&lt;/a&gt;). &lt;br&gt; If you don&#39;t want to deal with setting up LuaRocks, you can build your Neovim with the rock installed:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With home-manager (thanks @wuliuqii https://github.com/3rd/image.nvim/issues/13)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{ pkgs, ... }:&#xA;&#xA;{&#xA;  nixpkgs.overlays = [&#xA;    (import (builtins.fetchTarball {&#xA;      url =&#xA;        &#34;https://github.com/nix-community/neovim-nightly-overlay/archive/master.tar.gz&#34;;&#xA;    }))&#xA;  ];&#xA;  programs.neovim = {&#xA;    enable = true;&#xA;    package = pkgs.neovim-nightly;&#xA;    extraLuaPackages = ps: [ ps.magick ];&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Without home-manager&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;# https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/editors/neovim/utils.nix#L27&#xA;{ pkgs, neovimUtils, wrapNeovimUnstable, ... }:&#xA;&#xA;let&#xA;  config = pkgs.neovimUtils.makeNeovimConfig {&#xA;    extraLuaPackages = p: [ p.luarocks p.magick ];&#xA;    withNodeJs = false;&#xA;    withRuby = false;&#xA;    withPython3 = false;&#xA;    # https://github.com/NixOS/nixpkgs/issues/211998&#xA;    customRC = &#34;luafile ~/.config/nvim/init.lua&#34;;&#xA;  };&#xA;in {&#xA;  nixpkgs.overlays = [&#xA;    (_: super: {&#xA;      neovim-custom = pkgs.wrapNeovimUnstable&#xA;        (super.neovim-unwrapped.overrideAttrs (oldAttrs: {&#xA;          version = &#34;master&#34;;&#xA;          buildInputs = oldAttrs.buildInputs ++ [ super.tree-sitter ];&#xA;        })) config;&#xA;    })&#xA;  ];&#xA;  environment.systemPackages = with pkgs; [ neovim-custom ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default config&#xA;require(&#34;image&#34;).setup({&#xA;  backend = &#34;kitty&#34;,&#xA;  integrations = {&#xA;    markdown = {&#xA;      enabled = true,&#xA;      clear_in_insert_mode = false,&#xA;      download_remote_images = true,&#xA;      only_render_image_at_cursor = false,&#xA;      filetypes = { &#34;markdown&#34;, &#34;vimwiki&#34; }, -- markdown extensions (ie. quarto) can go here&#xA;    },&#xA;    neorg = {&#xA;      enabled = true,&#xA;      clear_in_insert_mode = false,&#xA;      download_remote_images = true,&#xA;      only_render_image_at_cursor = false,&#xA;      filetypes = { &#34;norg&#34; },&#xA;    },&#xA;  },&#xA;  max_width = nil,&#xA;  max_height = nil,&#xA;  max_width_window_percentage = nil,&#xA;  max_height_window_percentage = 50,&#xA;  window_overlap_clear_enabled = false, -- toggles images when windows are overlapped&#xA;  window_overlap_clear_ft_ignore = { &#34;cmp_menu&#34;, &#34;cmp_docs&#34;, &#34;&#34; },&#xA;  editor_only_render_when_focused = false, -- auto show/hide images when the editor gains/looses focus&#xA;  tmux_show_only_in_active_window = false, -- auto show/hide images in the correct Tmux window (needs visual-activity off)&#xA;  hijack_file_patterns = { &#34;*.png&#34;, &#34;*.jpg&#34;, &#34;*.jpeg&#34;, &#34;*.gif&#34;, &#34;*.webp&#34; }, -- render image files as images when opened&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tmux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You must set: &lt;code&gt;set -gq allow-passthrough on&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you want the images to be automatically hidden/shown when you switch windows (&lt;code&gt;tmux_show_only_in_active_window = true&lt;/code&gt;), set: &lt;code&gt;set -g visual-activity off&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Try it out with a minimal setup&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/3rd/image.nvim/master/minimal-setup.lua&#34;&gt;minimal-setup.lua&lt;/a&gt; from the root of this repository and run the demo with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvim --clean -c &#34;:luafile minimal-setup.lua&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Backends&lt;/h3&gt; &#xA;&lt;p&gt;All the backends support rendering inside Tmux.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;kitty&lt;/code&gt; - best in class, works great and is very snappy&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ueberzug&lt;/code&gt; - backed by &lt;a href=&#34;https://github.com/jstkdng/ueberzugpp&#34;&gt;ueberzugpp&lt;/a&gt;, supports any terminal, but has lower performance &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports multiple images thanks to &lt;a href=&#34;https://github.com/jstkdng/ueberzugpp/issues/74&#34;&gt;@jstkdng&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integrations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; - uses &lt;a href=&#34;https://github.com/MDeiml/tree-sitter-markdown&#34;&gt;tree-sitter-markdown&lt;/a&gt; and supports any Markdown-based grammars (Quarto, VimWiki Markdown)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;neorg&lt;/code&gt; - uses &lt;a href=&#34;https://github.com/nvim-neorg/tree-sitter-norg&#34;&gt;tree-sitter-norg&lt;/a&gt; (also check &lt;a href=&#34;https://github.com/nvim-neorg/neorg/issues/971&#34;&gt;https://github.com/nvim-neorg/neorg/issues/971&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/3rd/image.nvim/master/lua/types.lua&#34;&gt;types.lua&lt;/a&gt; for a better overview of how everything is modeled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local api = require(&#34;image&#34;)&#xA;&#xA;-- from a file (absolute path)&#xA;local image = api.from_file(&#34;/path/to/image.png&#34;, {&#xA;  id = &#34;my_image_id&#34;, -- optional, defaults to a random string&#xA;  window = 1000, -- optional, binds image to a window and its bounds&#xA;  buffer = 1000, -- optional, binds image to a buffer (paired with window binding)&#xA;  with_virtual_padding = true, -- optional, pads vertically with extmarks&#xA;  ...geometry, -- optional, { x, y, width, height }&#xA;})&#xA;&#xA;-- from a URL&#xA;local image = api.from_file(&#34;https://gist.ro/s/remote.png&#34;, {&#xA;  id = &#34;my_image_id&#34;, -- optional, defaults to a random string&#xA;  window = 1000, -- optional, binds image to a window and its bounds&#xA;  buffer = 1000, -- optional, binds image to a buffer (paired with window binding)&#xA;  with_virtual_padding = true, -- optional, pads vertically with extmarks&#xA;  ...geometry, -- optional, { x, y, width, height }&#xA;})&#xA;&#xA;image:render() -- render image&#xA;image:render(geometry) -- update image geometry and render it&#xA;image:clear()&#xA;&#xA;image:move(x, y) -- move image&#xA;image:brightness(value) -- change brightness&#xA;image:saturation(value) -- change saturation&#xA;image:hue(value) -- change hue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benlubas&#34;&gt;@benlubas&lt;/a&gt; for their countless amazing contributions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edluffy&#34;&gt;@edluffy&lt;/a&gt; for &lt;a href=&#34;https://github.com/edluffy/hologram.nvim&#34;&gt;hologram.nvim&lt;/a&gt; - of which I borrowed a lot of code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vhyrro&#34;&gt;@vhyrro&lt;/a&gt; for their great ideas and &lt;a href=&#34;https://github.com/vhyrro/hologram.nvim&#34;&gt;hologram.nvim fork&lt;/a&gt; changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kovidgoyal&#34;&gt;@kovidgoyal&lt;/a&gt; for &lt;a href=&#34;https://github.com/kovidgoyal/kitty&#34;&gt;Kitty&lt;/a&gt; - the program I spend most of my time in&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jstkdng&#34;&gt;@jstkdng&lt;/a&gt; for &lt;a href=&#34;https://github.com/jstkdng/ueberzugpp&#34;&gt;ueberzugpp&lt;/a&gt; - the revived version of ueberzug&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The story behind&lt;/h3&gt; &#xA;&lt;p&gt;Some years ago, I took a trip to Emacs land for a few months to learn Elisp and also research what Org-mode is, how it works, and look for features of interest for my workflow. I already had my own document syntax, albeit a very simple one, hacked together with Vimscript and a lot of Regex, and I was looking for ideas to improve it and build features on top of it.&lt;/p&gt; &#xA;&lt;p&gt;I kept working on my &lt;a href=&#34;https://github.com/3rd/syslang&#34;&gt;syntax&lt;/a&gt; over the years, rewrote it many times, and today it&#39;s a proper Tree-sitter grammar, that I use for all my needs, from second braining to managing my tasks and time. It&#39;s helped me control my ADHD and be productive long before I was diagnosed, and it&#39;s still helping me be so much better than I&#39;d be without it today.&lt;/p&gt; &#xA;&lt;p&gt;One thing Emacs and Org-mode had that I liked was the ability to embed images in the document. Of course, we don&#39;t &lt;em&gt;&#34;need&#34;&lt;/em&gt; it, but... I really wanted to have images in my documents.&lt;/p&gt; &#xA;&lt;p&gt;About 3 years ago, I made my &lt;a href=&#34;https://www.reddit.com/r/neovim/comments/ieh7l4/im_building_an_image_plugin_and_need_some_help/&#34;&gt;first attempt&lt;/a&gt; at solving this problem but didn&#39;t get far. If you have similar interests, you might have seen the &lt;a href=&#34;https://www.youtube.com/watch?v=cnt9mPOjrLg&#34;&gt;vimage.nvim demo video&lt;/a&gt; on YouTube.&lt;/p&gt; &#xA;&lt;p&gt;It was using &lt;a href=&#34;https://github.com/seebye/ueberzug&#34;&gt;ueberzug&lt;/a&gt;, which is now dead. It was buggy and didn&#39;t handle things like window-relative positioning, attaching images to windows and buffers, folds, etc.&lt;/p&gt; &#xA;&lt;p&gt;Kitty&#39;s graphics protocol was a thing, but it didn&#39;t work with Tmux, which I&#39;ll probably use forever or replace it with something of my own.&lt;/p&gt; &#xA;&lt;p&gt;Now, things have changed, and I&#39;m happy to announce that rendering images using &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/graphics-protocol.html&#34;&gt;Kitty&#39;s graphics protocol&lt;/a&gt; from Neovim inside Tmux is working, and it&#39;s working pretty well!&lt;/p&gt; &#xA;&lt;p&gt;My plan for this plugin is to support multiple backends, provide a few core integrations, and an easy-to-use API for other plugin authors to build on top of. There is a lot of logic that deals with positioning, cropping, bounds, folds, extmarks, etc. that is painful and unrealistic to write from scratch for every plugin that wants to use images.&lt;/p&gt;</summary>
  </entry>
</feed>