<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-24T01:48:56Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Mintimate/oh-my-rime</title>
    <updated>2024-03-24T01:48:56Z</updated>
    <id>tag:github.com,2024-03-24:/Mintimate/oh-my-rime</id>
    <link href="https://github.com/Mintimate/oh-my-rime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Simple Config Template Of Rime By Mintimate. QQ Chat-Group: 703260572&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/demo.webp&#34; alt=&#34;样式&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/README.md&#34;&gt;中文 - 简体简介&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/README_zh-CHT.md&#34;&gt;中文 - 繁體簡介&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/README_en.md&#34;&gt;English - Brief&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;一套快速初始化rime的模板方案，因为平时我使用&lt;code&gt;oh-my-zsh&lt;/code&gt;，希望大家在用这个模板的时候，有种用&lt;code&gt;omz&lt;/code&gt;的感觉；所以我给它取名叫&lt;code&gt;oh-my-rime&lt;/code&gt;，你也可以叫它&lt;code&gt;薄荷输入法&lt;/code&gt;，亦或者&lt;code&gt;Mint Input&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;如果你下载遇到困难，使用GitHub Action推送的镜像仓库：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.mintimate.cn/Mintimate/oh-my-rime&#34;&gt;oh-my-rime: https://gitlab.mintimate.cn/Mintimate/oh-my-rime&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Oh-my-rime指南&lt;/h2&gt; &#xA;&lt;p&gt;rime配置教程：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mintimate.cn/2023/03/18/rimeQuickInit&#34;&gt;跨平台的开源输入法Rime定制指南，打造强大的个性化输入法&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV12M411T7gf&#34;&gt;Bilibili視頻: https://www.bilibili.com/video/BV12M411T7gf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yc4AivDDpMM&#34;&gt;Youtube視頻: https://www.youtube.com/watch?v=yc4AivDDpMM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果你有QQ帐号，可以加入群聊（禁止广告）: 703260572&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;强烈建议&lt;a href=&#34;https://www.mintimate.cc&#34;&gt;配合文档: https://www.mintimate.cc&lt;/a&gt;进行操作!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;本输入方案内包含：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;薄荷拼音-全拼输入: 全拼输入，适合的人群最多，所以也是默认的输入；&lt;/li&gt; &#xA; &lt;li&gt;小鹤双拼-薄荷定制: 基于小鹤双拼，添加定制内容。支持输入音形(形码)；&lt;/li&gt; &#xA; &lt;li&gt;薄荷拼音-小鹤混输: 全拼输入的同时，支持小鹤双拼；&lt;/li&gt; &#xA; &lt;li&gt;地球拼音-薄荷定制: 基于地球拼音，添加定制内容，扩展海量词库；&lt;/li&gt; &#xA; &lt;li&gt;五笔九八-薄荷简版: 基于五笔98的精简版本，期待大家的PR。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;你可以在安装后，使用『Ctrl』+『~』进行切换。（默认激活的是『薄荷拼音-全拼输入』）。&lt;/p&gt; &#xA;&lt;h3&gt;安装&lt;/h3&gt; &#xA;&lt;p&gt;以下教程，适用于Linux、macOS和Windows（Xp~）&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装&lt;a href=&#34;https://rime.im/&#34;&gt;Rime输入法&lt;/a&gt;并注销或重启电脑；&lt;/li&gt; &#xA; &lt;li&gt;下载本仓库所有配置文件到本地rime配置文件；&lt;/li&gt; &#xA; &lt;li&gt;重新部署Rime&lt;/li&gt; &#xA; &lt;li&gt;开始使用&lt;/li&gt; &#xA; &lt;li&gt;根据自己习惯，进行二次修改&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;需要注意: Windows 7 和 Windows Xp只能使用 0.14.3 版本的Weasel，无法使用本输入方案的全部功能，需要手动更新librime支援库：&lt;a href=&#34;https://www.mintimate.cc/zh/guide/faQ.html#winxp%E5%92%8Cwin7%E4%BD%BF%E7%94%A8%E8%96%84%E8%8D%B7%E8%BE%93%E5%85%A5%E6%B3%95&#34;&gt;WinXP和Win7使用薄荷输入法&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;p&gt;本地rime配置文件默认地址，如下&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Weasel: &lt;code&gt;%APPDATA%\Rime&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mac OS X &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Squirrel: &lt;code&gt;~/Library/Rime&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iBus:&lt;code&gt; ~/.config/ibus/rime&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;本地rime日志文件默认地址如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Weasel: &lt;code&gt;%TEMP%&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mac OS X &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Squirrel: &lt;code&gt;$TMPDIR&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iBus:&lt;code&gt; /tmp&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;配置文件说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default.custom.yaml&lt;/code&gt; 设置输入法、如何切换输入法、翻页等&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;squirrel.yaml&lt;/code&gt; 鼠须管( Mac 版本 )设置哪些软件默认英文输入，输入法皮肤等；如需自定义，建议自行创建&lt;code&gt;squirrel.custom.yaml&lt;/code&gt;来覆写。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;weasel.yaml&lt;/code&gt; 小狼毫( Win 版本 )设置哪些软件默认英文输入，输入法皮肤等；如需自定义，建议自行创建&lt;code&gt;weasel.custom.yaml&lt;/code&gt;来覆写。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;配置文件中大部分都有注释，配合教程：&lt;a href=&#34;https://www.mintimate.cc/zh/guide/configurationOverride.html&#34;&gt;配置覆写&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;词库定制以及更新&lt;/h2&gt; &#xA;&lt;p&gt;本仓库的词库目录&lt;a href=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/dicts&#34;&gt;dicts&lt;/a&gt;，主要有：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iDvel/rime-ice&#34;&gt;雾凇拼音词库&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yanhuacuo/98wubi-tables&#34;&gt;98五笔词库&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;详细说明：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;dicts&#xA;├── custom_simple.dict.yaml    # 自定义词库（建议自己添加的词库可以放这里）&#xA;├── other_emoji.dict.yaml      # emoji 词库&#xA;├── other_kaomoji.dict.yaml    # 颜文字词库（按vv进行激活）&#xA;├── rime_ice.41448.dict.yaml   # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.8105.dict.yaml    # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.base.dict.yaml    # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.ext.dict.yaml     # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.cn_en.txt         # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.en.dict.yaml      # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.en_ext.dict.yaml  # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.others.dict.yaml  # 雾凇词库（GitHub action自动更新）&#xA;├── terra_pinyin_base.dict.yaml     # 地球拼音自带词库&#xA;├── terra_pinyin_ext.dict.yaml      # 地球拼音自带词库&#xA;├── terra_rime_ice.base.dict.yaml   # 基于Python脚本自动转换雾凇并Action自动更新&#xA;└── wubi98_base.dict.yaml           # 五笔基础词库&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;后续更新词库；可以下载本仓库&lt;code&gt;dicts&lt;/code&gt;内的文件，除了&lt;code&gt;custom_simple.dict.yaml&lt;/code&gt;的文件，其他都进行覆盖替换即可。&lt;/p&gt; &#xA;&lt;p&gt;如果想自己扩展词库，可以在输入法的字典配置文件内进行导入，比如薄荷拼音字典配置文件&lt;a href=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/rime_mint.dict.yaml&#34;&gt;rime_mint.dict.yaml&lt;/a&gt;内：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;name: rime_mint                  # 注意name和文件名一致&#xA;version: &#34;2024.02.11&#34;&#xA;sort: by_weight&#xA;# 此处为 输入法所用到的词库，既补充拓展词库的地方&#xA;# 雾凇拼音词库，由Github Robot自动更新&#xA;import_tables:&#xA;  - dicts/custom_simple          # 自定义&#xA;  - dicts/rime_ice.8105          # 霧凇拼音 常用字集合&#xA;  - dicts/rime_ice.41448         # 霧凇拼音 完整字集合&#xA;  - dicts/rime_ice.base          # 雾凇拼音 https://github.com/iDvel/rime-ice&#xA;  - dicts/rime_ice.ext           # 雾凇拼音 https://github.com/iDvel/rime-ice&#xA;  - dicts/other_kaomoji          # 颜文字表情（按`vv`呼出)&#xA;  - dicts/other_emoji            # Emoji(仅仅作为补充，实际使用一般是OpenCC生效)&#xA;  - dicts/rime_ice.others        # 雾凇拼音 others词库（用于自动纠错）&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;支持&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mintimate.cn&#34;&gt;Mintimate&#39;s Blog: https://www.mintimate.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://afdian.net/a/mintimate&#34;&gt;Mintimate的爱发电: 加入电圈，支持创造!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/355567627&#34;&gt;Bilibili：@Mintimate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCI7LLdUGNzkcKOE7grAqCoA&#34;&gt;Youtube：@Mintimate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;参考/致谢&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rime/home/wiki/RimeWithSchemata&#34;&gt;Rime-RimeWithSchemata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chenhe.me/post/oh-my-rime&#34;&gt;Rime/小狼豪/鼠须管 输入法配置记&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Iorest/rime-setting&#34;&gt;rime-setting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iDvel/rime-ice&#34;&gt;雾凇拼音 | 长期维护的简体词库&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mirtlecn/rime-radical-pinyin&#34;&gt;rime-radical-pinyin | Rime 部件拆字输入方案（全拼双拼）&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;推荐项目&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.98wubi.com/&#34;&gt;98五笔，十分好用的五笔输入方案&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iDvel/rime-ice&#34;&gt;雾凇拼音，很优秀的中文词库&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;尤其是雾凇拼音，本方案配置中，大量参考参考了雾凇拼音。词库部分，使用Python同步雾凇拼音的基础词库并启用雾凇拼音默认没有启用的ext扩展词库。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;⭐⭐⭐&lt;/h2&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=Mintimate/oh-my-rime&amp;amp;type=Timeline&amp;amp;theme=dark&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=Mintimate/oh-my-rime&amp;amp;type=Timeline&#34;&gt; &#xA; &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=Mintimate/oh-my-rime&amp;amp;type=Timeline&#34;&gt; &#xA;&lt;/picture&gt;</summary>
  </entry>
  <entry>
    <title>rest-nvim/rest.nvim</title>
    <updated>2024-03-24T01:48:56Z</updated>
    <id>tag:github.com,2024-03-24:/rest-nvim/rest.nvim</id>
    <link href="https://github.com/rest-nvim/rest.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast Neovim http client written in Lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;rest.nvim&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/NTBBloodbath/rest.nvim?style=for-the-badge&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Neovim-0.9.2-5ba246?style=for-the-badge&amp;amp;logo=neovim&#34; alt=&#34;Neovim version&#34;&gt; &lt;a href=&#34;https://luarocks.org/modules/teto/rest.nvim&#34;&gt;&lt;img src=&#34;https://img.shields.io/luarocks/v/teto/rest.nvim?style=for-the-badge&amp;amp;logo=lua&amp;amp;color=blue&#34; alt=&#34;LuaRocks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/AcXkuXKj7C&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-join-7289da?style=for-the-badge&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#rest.nvim:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/rest.nvim%3Amatrix.org?server_fqdn=matrix.org&amp;amp;style=for-the-badge&amp;amp;logo=element&amp;amp;label=Matrix&amp;amp;color=55b394&amp;amp;link=https%3A%2F%2Fmatrix.to%2F%23%2F%23rest.nvim%3Amatrix.org&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/#install&#34;&gt;Install&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/rest-nvim/rest.nvim/assets/36456999/e9b536a5-f7b2-4cd8-88fb-fdc5409dd2a4&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A very fast, powerful, extensible and asynchronous Neovim HTTP client written in Lua.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rest.nvim&lt;/code&gt; by default makes use of native &lt;a href=&#34;https://curl.se/&#34;&gt;cURL&lt;/a&gt; bindings. In this way, you get absolutely all the power that cURL provides from the comfort of our editor just by using a keybind and without wasting the precious resources of your machine.&lt;/p&gt; &#xA;&lt;p&gt;In addition to this, you can also write integrations with external HTTP clients, such as the postman CLI. For more information on this, please see this &lt;a href=&#34;https://amartin.codeberg.page/posts/first-look-at-thunder-rest/#third-party-clients&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;If you are facing issues, please &lt;a href=&#34;https://github.com/rest-nvim/rest.nvim/issues/new&#34;&gt;report them&lt;/a&gt; so we can work in a fix together :)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;Friendly and organized request results window&lt;/li&gt; &#xA; &lt;li&gt;Fast runtime with statistics about your request&lt;/li&gt; &#xA; &lt;li&gt;Set custom pre-request and post-request hooks to dynamically interact with the data&lt;/li&gt; &#xA; &lt;li&gt;Easily set environment variables based on the response to re-use the data later&lt;/li&gt; &#xA; &lt;li&gt;Tree-sitter based parsing and syntax highlighting for speed and perfect accuracy&lt;/li&gt; &#xA; &lt;li&gt;Possibility of using dynamic/environment variables and Lua scripting in HTTP files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;rest.nvim requires Neovim &amp;gt;= 0.9.2 to work.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;System-wide &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Python&lt;/code&gt; (only if you are using &lt;code&gt;packer.nvim&lt;/code&gt; or &lt;code&gt;lazy.nvim&lt;/code&gt; plus &lt;code&gt;luarocks.nvim&lt;/code&gt; for the installation)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cURL&lt;/code&gt; development headers (usually called &lt;code&gt;libcurl-dev&lt;/code&gt; or &lt;code&gt;libcurl-devel&lt;/code&gt; depending on your Linux distribution)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optional &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/#default-configuration&#34;&gt;can be changed, see config below&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;jq&lt;/code&gt; (to format JSON output)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;tidy&lt;/code&gt; (to format HTML output)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Python will be unnecessary once &lt;code&gt;luarocks.nvim&lt;/code&gt; gets rid of it as a dependency in the &lt;code&gt;go-away-python&lt;/code&gt; branch.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;I will be working on making a binary rock of &lt;code&gt;Lua-cURL&lt;/code&gt; so that the &lt;code&gt;cURL&lt;/code&gt; development headers are not necessary for the installation process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/nvim-neorocks/rocks.nvim&#34;&gt;rocks.nvim&lt;/a&gt; (recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Rocks install rest.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;vhyrro/luarocks.nvim&#34;,&#xA;  priority = 1000,&#xA;  config = true,&#xA;},&#xA;{&#xA;  &#34;rest-nvim/rest.nvim&#34;,&#xA;  ft = &#34;http&#34;,&#xA;  dependencies = { &#34;luarocks.nvim&#34; },&#xA;  config = function()&#xA;    require(&#34;rest-nvim&#34;).setup()&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;There&#39;s a &lt;code&gt;build.lua&lt;/code&gt; file in the repository that &lt;code&gt;lazy.nvim&lt;/code&gt; will find and source to install the luarocks dependencies for you by using &lt;code&gt;luarocks.nvim&lt;/code&gt;. You don&#39;t need to specify a rock list by yourself.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;rest-nvim/rest.nvim&#34;,&#xA;  rocks = { &#34;lua-curl&#34;, &#34;nvim-nio&#34;, &#34;mimetypes&#34;, &#34;xml2lua&#34; },&#xA;  config = function()&#xA;    require(&#34;rest-nvim&#34;).setup()&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default configuration&lt;/h3&gt; &#xA;&lt;p&gt;This is the default configuration of &lt;code&gt;rest.nvim&lt;/code&gt;, it is fully documented and typed internally so you get a good experience during autocompletion :)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;You can also check out &lt;code&gt;:h rest-nvim.config&lt;/code&gt; for documentation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local default_config = {&#xA;  client = &#34;curl&#34;,&#xA;  env_file = &#34;.env&#34;,&#xA;  env_pattern = &#34;\\.env$&#34;,&#xA;  env_edit_command = &#34;tabedit&#34;,&#xA;  encode_url = true,&#xA;  skip_ssl_verification = false,&#xA;  custom_dynamic_variables = {},&#xA;  logs = {&#xA;    level = &#34;info&#34;,&#xA;    save = true,&#xA;  },&#xA;  result = {&#xA;    split = {&#xA;      horizontal = false,&#xA;      in_place = false,&#xA;      stay_in_current_window_after_split = true,&#xA;    },&#xA;    behavior = {&#xA;      decode_url = true,&#xA;      show_info = {&#xA;        url = true,&#xA;        headers = true,&#xA;        http_info = true,&#xA;        curl_command = true,&#xA;      },&#xA;      statistics = {&#xA;        enable = true,&#xA;        ---@see https://curl.se/libcurl/c/curl_easy_getinfo.html&#xA;        stats = {&#xA;          { &#34;total_time&#34;, title = &#34;Time taken:&#34; },&#xA;          { &#34;size_download_t&#34;, title = &#34;Download size:&#34; },&#xA;        },&#xA;      },&#xA;      formatters = {&#xA;        json = &#34;jq&#34;,&#xA;        html = function(body)&#xA;          if vim.fn.executable(&#34;tidy&#34;) == 0 then&#xA;            return body, { found = false, name = &#34;tidy&#34; }&#xA;          end&#xA;          local fmt_body = vim.fn.system({&#xA;            &#34;tidy&#34;,&#xA;            &#34;-i&#34;,&#xA;            &#34;-q&#34;,&#xA;            &#34;--tidy-mark&#34;,      &#34;no&#34;,&#xA;            &#34;--show-body-only&#34;, &#34;auto&#34;,&#xA;            &#34;--show-errors&#34;,    &#34;0&#34;,&#xA;            &#34;--show-warnings&#34;,  &#34;0&#34;,&#xA;            &#34;-&#34;,&#xA;          }, body):gsub(&#34;\n$&#34;, &#34;&#34;)&#xA;&#xA;          return fmt_body, { found = true, name = &#34;tidy&#34; }&#xA;        end,&#xA;      },&#xA;    },&#xA;  },&#xA;  highlight = {&#xA;    enable = true,&#xA;    timeout = 750,&#xA;  },&#xA;  ---Example:&#xA;  ---&#xA;  ---```lua&#xA;  ---keybinds = {&#xA;  ---  {&#xA;  ---    &#34;&amp;lt;localleader&amp;gt;rr&#34;, &#34;&amp;lt;cmd&amp;gt;Rest run&amp;lt;cr&amp;gt;&#34;, &#34;Run request under the cursor&#34;,&#xA;  ---  },&#xA;  ---  {&#xA;  ---    &#34;&amp;lt;localleader&amp;gt;rl&#34;, &#34;&amp;lt;cmd&amp;gt;Rest run last&amp;lt;cr&amp;gt;&#34;, &#34;Re-run latest request&#34;,&#xA;  ---  },&#xA;  ---}&#xA;  ---&#xA;  ---```&#xA;  ---@see vim.keymap.set&#xA;  keybinds = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tree-Sitter parsing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rest.nvim&lt;/code&gt; uses tree-sitter as a first-class citizen, so it will not work if the required parsers are not installed. These parsers are as follows and you can add them to your &lt;code&gt;ensure_installed&lt;/code&gt; table in your &lt;code&gt;nvim-treesitter&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;ensure_installed = { &#34;lua&#34;, &#34;xml&#34;, &#34;http&#34;, &#34;json&#34;, &#34;graphql&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or manually run &lt;code&gt;:TSInstall lua xml http json graphql&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;By default &lt;code&gt;rest.nvim&lt;/code&gt; does not have any key mappings so you will not have conflicts with any of your existing ones.&lt;/p&gt; &#xA;&lt;p&gt;However, &lt;code&gt;rest.nvim&lt;/code&gt; exposes a &lt;code&gt;:Rest&lt;/code&gt; command in HTTP files that you can use to create your keybinds easily. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;keybinds = {&#xA;  {&#xA;    &#34;&amp;lt;localleader&amp;gt;rr&#34;, &#34;&amp;lt;cmd&amp;gt;Rest run&amp;lt;cr&amp;gt;&#34;, &#34;Run request under the cursor&#34;,&#xA;  },&#xA;  {&#xA;    &#34;&amp;lt;localleader&amp;gt;rl&#34;, &#34;&amp;lt;cmd&amp;gt;Rest run last&amp;lt;cr&amp;gt;&#34;, &#34;Re-run latest request&#34;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can still also use the legacy &lt;code&gt;&amp;lt;Plug&amp;gt;RestNvim&lt;/code&gt; commands for mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;RestNvim&lt;/code&gt;, run the request under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;RestNvimLast&lt;/code&gt;, re-run the last request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;RestNvimPreview&lt;/code&gt; has been removed, as we can no longer implement it with the current cURL implementation.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;The legacy &lt;code&gt;&amp;lt;Plug&amp;gt;&lt;/code&gt; mappings will raise a deprecation warning suggesting you to switch to the &lt;code&gt;:Rest&lt;/code&gt; command, as they are going to be completely removed in the next version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Create a new http file or open an existing one and place the cursor over the request and run the &lt;kbd&gt;:Rest run&lt;/kbd&gt; command.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;You can find examples of use in the &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/tests&#34;&gt;tests&lt;/a&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;rest.nvim&lt;/code&gt; supports multiple HTTP requests in one file. It selects the request in the current cursor line, no matters the position as long as the cursor is on a request tree-sitter node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Telescope Extension&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rest.nvim&lt;/code&gt; provides a [telescope.nvim] extension to select the environment variables file, you can load and use it with the following snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- first load extension&#xA;require(&#34;telescope&#34;).load_extension(&#34;rest&#34;)&#xA;-- then use it, you can also use the `:Telescope rest select_env` command&#xA;require(&#34;telescope&#34;).extensions.rest.select_env()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If running Ubuntu or Debian based systems you might need to run &lt;code&gt;ln -s $(which fdfind) ~/.local/bin/fd&lt;/code&gt; to get extension to work. This is becuase extension runs the &lt;a href=&#34;https://github.com/sharkdp/fd?tab=readme-ov-file#installation&#34;&gt;fd&lt;/a&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Here is a preview of the extension working :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/rest-nvim/rest.nvim/assets/36456999/a810954f-b45c-44ee-854d-94039de8e2fc&#34; alt=&#34;telescope rest extension demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Mappings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt;: Select Env file&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Ctrl + O&lt;/kbd&gt;: Edit Env file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Config&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;env_pattern&lt;/code&gt;: For env file pattern&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;env_edit_command&lt;/code&gt;: For env file edit command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lualine&lt;/h2&gt; &#xA;&lt;p&gt;We also have lualine component to get what env file you select!&lt;/p&gt; &#xA;&lt;p&gt;And dont&#39;t worry, it will only show up under HTTP files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Just add a component in your lualine config&#xA;{&#xA;  sections = {&#xA;    lualine_x = {&#xA;      &#34;rest&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;-- To use a custom icon and color&#xA;{&#xA;  sections = {&#xA;    lualine_x = {&#xA;      {&#xA;        &#34;rest&#34;,&#xA;        icon = &#34;&#34;,&#xA;        fg = &#34;#428890&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a preview of the component working :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/rest-nvim/rest.nvim/assets/81607010/cf4bb327-61aa-494c-84a5-82f5ee21004f&#34; alt=&#34;lualine component demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it (&lt;a href=&#34;https://github.com/rest-nvim/rest.nvim/fork&#34;&gt;https://github.com/rest-nvim/rest.nvim/fork&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;kbd&gt;git checkout -b my-new-feature&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;kbd&gt;git commit -am &#39;feat: add some feature&#39;&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;kbd&gt;git push -u origin my-new-feature&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create a new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;rest.nvim uses &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/&#34;&gt;semantic commits&lt;/a&gt; that adhere to semantic versioning and these help with automatic releases, please use this type of convention when submitting changes to the project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Tests can be ran via &lt;code&gt;make test&lt;/code&gt;. You must have &lt;code&gt;luarocks&lt;/code&gt; installed and &lt;code&gt;lua5.1&lt;/code&gt; or &lt;code&gt;luajit&lt;/code&gt; to install dependencies. The test runner through &lt;code&gt;make test&lt;/code&gt; will automatically install all required dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Related software&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/diepm/vim-rest-console&#34;&gt;vim-rest-console&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hurl.dev/&#34;&gt;Hurl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://httpie.io/&#34;&gt;HTTPie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://httpyac.github.io/&#34;&gt;httpYac&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;rest.nvim is &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/LICENSE&#34;&gt;GPLv3 Licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NvChad/starter</title>
    <updated>2024-03-24T01:48:56Z</updated>
    <id>tag:github.com,2024-03-24:/NvChad/starter</id>
    <link href="https://github.com/NvChad/starter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starter config for NvChad&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;starter&lt;/h1&gt; &#xA;&lt;p&gt;Starter config for NvChad&lt;/p&gt;</summary>
  </entry>
</feed>