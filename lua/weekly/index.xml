<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-15T01:59:39Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>folke/neodev.nvim</title>
    <updated>2023-01-15T01:59:39Z</updated>
    <id>tag:github.com,2023-01-15:/folke/neodev.nvim</id>
    <link href="https://github.com/folke/neodev.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üíª Neovim setup for init.lua and plugin development with full signature help, docs and completion for the nvim lua API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üíª neodev.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Neovim setup for init.lua and plugin development with full signature help, docs and completion for the nvim lua API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/201495543-ff532160-c8bd-4651-a16f-4fb682c9b945.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically configures &lt;strong&gt;lua-language-server&lt;/strong&gt; for your &lt;strong&gt;Neovim&lt;/strong&gt; config, &lt;strong&gt;Neovim&lt;/strong&gt; runtime and plugin directories&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Annotations&#34;&gt;Annotations&lt;/a&gt; for completion, hover and signatures of: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Vim functions&lt;/li&gt; &#xA;   &lt;li&gt;Neovim api functions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vim.opt&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/luvit/luv&#34;&gt;vim.loop&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;properly configures the &lt;code&gt;require&lt;/code&gt; path.&lt;/li&gt; &#xA; &lt;li&gt;adds all plugins in &lt;code&gt;opt&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; to the workspace so you get completion for all installed plugins&lt;/li&gt; &#xA; &lt;li&gt;properly configure the vim runtime&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.7.0&lt;/li&gt; &#xA; &lt;li&gt;completion plugin like &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#34;folke/neodev.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;folke/neodev.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;neodev&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  library = {&#xA;    enabled = true, -- when not enabled, neodev will not change any settings to the LSP server&#xA;    -- these settings will be used for your Neovim config directory&#xA;    runtime = true, -- runtime path&#xA;    types = true, -- full signature, docs and completion of vim.api, vim.treesitter, vim.lsp and others&#xA;    plugins = true, -- installed opt or start plugins in packpath&#xA;    -- you can also specify the list of plugins to make available as a workspace library&#xA;    -- plugins = { &#34;nvim-treesitter&#34;, &#34;plenary.nvim&#34;, &#34;telescope.nvim&#34; },&#xA;  },&#xA;  setup_jsonls = true, -- configures jsonls to provide completion for project specific .luarc.json files&#xA;  -- for your Neovim config directory, the config.library settings will be used as is&#xA;  -- for plugin directories (root_dirs having a /lua directory), config.library.plugins will be disabled&#xA;  -- for any other directory, config.library.enabled will be set to false&#xA;  override = function(root_dir, options) end,&#xA;  -- With lspconfig, Neodev will automatically setup your lua-language-server&#xA;  -- If you disable this, then you have to set {before_init=require(&#34;neodev.lsp&#34;).before_init}&#xA;  -- in your lsp start options&#xA;  lspconfig = true,&#xA;  -- much faster, but needs a recent built of lua-language-server&#xA;  -- needs lua-language-server &amp;gt;= 3.6.0&#xA;  pathStrict = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;neodev&lt;/strong&gt; will &lt;strong&gt;ONLY&lt;/strong&gt; change the &lt;strong&gt;sumneko_lua&lt;/strong&gt; settings for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;your Neovim config directory&lt;/li&gt; &#xA; &lt;li&gt;your Neovim runtime directory&lt;/li&gt; &#xA; &lt;li&gt;any plugin directory (this is an lsp root_dir that contains a &lt;code&gt;/lua&lt;/code&gt; directory)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For any other &lt;code&gt;root_dir&lt;/code&gt;, &lt;strong&gt;neodev&lt;/strong&gt; will &lt;strong&gt;NOT&lt;/strong&gt; change any settings.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; with &lt;a href=&#34;https://github.com/folke/neoconf.nvim&#34;&gt;neoconf.nvim&lt;/a&gt;, you can easily set project local &lt;strong&gt;Neodev&lt;/strong&gt; settings. See the example &lt;a href=&#34;https://github.com/folke/neodev.nvim/raw/main/.neoconf.json&#34;&gt;.neoconf.json&lt;/a&gt; file in this repository&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- IMPORTANT: make sure to setup neodev BEFORE lspconfig&#xA;require(&#34;neodev&#34;).setup({&#xA;  -- add any options here, or leave empty to use the default settings&#xA;})&#xA;&#xA;-- then setup your lsp server as usual&#xA;local lspconfig = require(&#39;lspconfig&#39;)&#xA;&#xA;-- example to setup sumneko and enable call snippets&#xA;lspconfig.sumneko_lua.setup({&#xA;  settings = {&#xA;    Lua = {&#xA;      completion = {&#xA;        callSnippet = &#34;Replace&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example for setting up **neodev** that overrides the settings for `/etc/nixos`&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- You can override the default detection using the override function&#xA;-- EXAMPLE: If you want a certain directory to be configured differently, you can override its settings&#xA;require(&#34;neodev&#34;).setup({&#xA;  override = function(root_dir, library)&#xA;    if require(&#34;neodev.util&#34;).has_file(root_dir, &#34;/etc/nixos&#34;) then&#xA;      library.enabled = true&#xA;      library.plugins = true&#xA;    end&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;It&#39;s possible to setup Neodev without lspconfig, by configuring the &lt;code&gt;before_init&lt;/code&gt; of the options passed to &lt;code&gt;vim.lsp.start&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example without lspconfig&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neodev&#34;).setup()&#xA;vim.lsp.start({&#xA;  name = &#34;lua-language-server&#34;,&#xA;  cmd = { &#34;lua-language-server&#34; },&#xA;  before_init = require(&#34;neodev.lsp&#34;).before_init,&#xA;  root_dir = vim.fn.getcwd(),&#xA;  settings = { Lua = {} },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>folke/which-key.nvim</title>
    <updated>2023-01-15T01:59:39Z</updated>
    <id>tag:github.com,2023-01-15:/folke/which-key.nvim</id>
    <link href="https://github.com/folke/which-key.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üí• Create key bindings that stick. WhichKey is a lua plugin for Neovim 0.5 that displays a popup with possible keybindings of the command you started typing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üí• Which Key&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; is a lua plugin for Neovim 0.5 that displays a popup with possible key bindings of the command you started typing. Heavily inspired by the original &lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;emacs-which-key&lt;/a&gt; and &lt;a href=&#34;https://github.com/liuchengxu/vim-which-key&#34;&gt;vim-which-key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439438-669f8d00-a804-11eb-9b5b-c7122bd9acac.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for Neovim 0.7 and higher, it uses the &lt;code&gt;desc&lt;/code&gt; attributes of your mappings as the default label&lt;/li&gt; &#xA; &lt;li&gt;for Neovim 0.7 and higher, new mappings will be created with a &lt;code&gt;desc&lt;/code&gt; attribute&lt;/li&gt; &#xA; &lt;li&gt;opens a popup with suggestions to complete a key binding&lt;/li&gt; &#xA; &lt;li&gt;works with any setting for &lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;timeoutlen&#39;&#34;&gt;timeoutlen&lt;/a&gt;, including instantly (&lt;code&gt;timeoutlen=0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;works correctly with built-in key bindings&lt;/li&gt; &#xA; &lt;li&gt;works correctly with buffer-local mappings&lt;/li&gt; &#xA; &lt;li&gt;extensible plugin architecture&lt;/li&gt; &#xA; &lt;li&gt;built-in plugins: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;marks:&lt;/strong&gt; shows your marks when you hit one of the jump keys.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;registers:&lt;/strong&gt; shows the contents of your registers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;presets:&lt;/strong&gt; built-in key binding help for &lt;code&gt;motions&lt;/code&gt;, &lt;code&gt;text-objects&lt;/code&gt;, &lt;code&gt;operators&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;spelling:&lt;/strong&gt; spelling suggestions inside the which-key popup&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup({&#xA;  {&#xA;    &#34;folke/which-key.nvim&#34;,&#xA;    config = function()&#xA;      vim.o.timeout = true&#xA;      vim.o.timeoutlen = 300&#xA;      require(&#34;which-key&#34;).setup({&#xA;        -- your configuration comes here&#xA;        -- or leave it empty to use the default settings&#xA;        -- refer to the configuration section below&#xA;      })&#xA;    end,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;use {&#xA;  &#34;folke/which-key.nvim&#34;,&#xA;  config = function()&#xA;    vim.o.timeout = true&#xA;    vim.o.timeoutlen = 300&#xA;    require(&#34;which-key&#34;).setup {&#xA;      -- your configuration comes here&#xA;      -- or leave it empty to use the default settings&#xA;      -- refer to the configuration section below&#xA;    }&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ùóÔ∏è IMPORTANT: the &lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;timeout&#39;&#34;&gt;timeout&lt;/a&gt; when &lt;strong&gt;WhichKey&lt;/strong&gt; opens is controlled by the vim setting &lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;timeoutlen&#39;&#34;&gt;timeoutlen&lt;/a&gt;. Please refer to the documentation to properly set it up. Setting it to &lt;code&gt;0&lt;/code&gt;, will effectively always show &lt;strong&gt;WhichKey&lt;/strong&gt; immediately, but a setting of &lt;code&gt;500&lt;/code&gt; (500ms) is probably more appropriate.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ùóÔ∏è don&#39;t create any keymappings yourself to trigger WhichKey. Unlike with &lt;em&gt;vim-which-key&lt;/em&gt;, we do this fully automatically. Please remove any left-over triggers you might have from using &lt;em&gt;vim-which-key&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üöë You can run &lt;code&gt;:checkhealth which_key&lt;/code&gt; to see if there&#39;s any conflicting keymaps that will prevent triggering &lt;strong&gt;WhichKey&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;WhichKey comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  plugins = {&#xA;    marks = true, -- shows a list of your marks on &#39; and `&#xA;    registers = true, -- shows your registers on &#34; in NORMAL or &amp;lt;C-r&amp;gt; in INSERT mode&#xA;    spelling = {&#xA;      enabled = false, -- enabling this will show WhichKey when pressing z= to select spelling suggestions&#xA;      suggestions = 20, -- how many suggestions should be shown in the list?&#xA;    },&#xA;    -- the presets plugin, adds help for a bunch of default keybindings in Neovim&#xA;    -- No actual key bindings are created&#xA;    presets = {&#xA;      operators = true, -- adds help for operators like d, y, ... and registers them for motion / text object completion&#xA;      motions = true, -- adds help for motions&#xA;      text_objects = true, -- help for text objects triggered after entering an operator&#xA;      windows = true, -- default bindings on &amp;lt;c-w&amp;gt;&#xA;      nav = true, -- misc bindings to work with windows&#xA;      z = true, -- bindings for folds, spelling and others prefixed with z&#xA;      g = true, -- bindings for prefixed with g&#xA;    },&#xA;  },&#xA;  -- add operators that will trigger motion and text object completion&#xA;  -- to enable all native operators, set the preset / operators plugin above&#xA;  operators = { gc = &#34;Comments&#34; },&#xA;  key_labels = {&#xA;    -- override the label used to display some keys. It doesn&#39;t effect WK in any other way.&#xA;    -- For example:&#xA;    -- [&#34;&amp;lt;space&amp;gt;&#34;] = &#34;SPC&#34;,&#xA;    -- [&#34;&amp;lt;cr&amp;gt;&#34;] = &#34;RET&#34;,&#xA;    -- [&#34;&amp;lt;tab&amp;gt;&#34;] = &#34;TAB&#34;,&#xA;  },&#xA;  icons = {&#xA;    breadcrumb = &#34;¬ª&#34;, -- symbol used in the command line area that shows your active key combo&#xA;    separator = &#34;‚ûú&#34;, -- symbol used between a key and it&#39;s label&#xA;    group = &#34;+&#34;, -- symbol prepended to a group&#xA;  },&#xA;  popup_mappings = {&#xA;    scroll_down = &#39;&amp;lt;c-d&amp;gt;&#39;, -- binding to scroll down inside the popup&#xA;    scroll_up = &#39;&amp;lt;c-u&amp;gt;&#39;, -- binding to scroll up inside the popup&#xA;  },&#xA;  window = {&#xA;    border = &#34;none&#34;, -- none, single, double, shadow&#xA;    position = &#34;bottom&#34;, -- bottom, top&#xA;    margin = { 1, 0, 1, 0 }, -- extra window margin [top, right, bottom, left]&#xA;    padding = { 2, 2, 2, 2 }, -- extra window padding [top, right, bottom, left]&#xA;    winblend = 0&#xA;  },&#xA;  layout = {&#xA;    height = { min = 4, max = 25 }, -- min and max height of the columns&#xA;    width = { min = 20, max = 50 }, -- min and max width of the columns&#xA;    spacing = 3, -- spacing between columns&#xA;    align = &#34;left&#34;, -- align columns left, center or right&#xA;  },&#xA;  ignore_missing = false, -- enable this to hide mappings for which you didn&#39;t specify a label&#xA;  hidden = { &#34;&amp;lt;silent&amp;gt;&#34;, &#34;&amp;lt;cmd&amp;gt;&#34;, &#34;&amp;lt;Cmd&amp;gt;&#34;, &#34;&amp;lt;CR&amp;gt;&#34;, &#34;call&#34;, &#34;lua&#34;, &#34;^:&#34;, &#34;^ &#34;}, -- hide mapping boilerplate&#xA;  show_help = true, -- show help message on the command line when the popup is visible&#xA;  show_keys = true, -- show the currently pressed key and its label as a message in the command line&#xA;  triggers = &#34;auto&#34;, -- automatically setup triggers&#xA;  -- triggers = {&#34;&amp;lt;leader&amp;gt;&#34;} -- or specify a list manually&#xA;  triggers_blacklist = {&#xA;    -- list of mode / prefixes that should never be hooked by WhichKey&#xA;    -- this is mostly relevant for key maps that start with a native binding&#xA;    -- most people should not need to change this&#xA;    i = { &#34;j&#34;, &#34;k&#34; },&#xA;    v = { &#34;j&#34;, &#34;k&#34; },&#xA;  },&#xA;  -- disable the WhichKey popup for certain buf types and file types.&#xA;  -- Disabled by deafult for Telescope&#xA;  disable = {&#xA;    buftypes = {},&#xA;    filetypes = { &#34;TelescopePrompt&#34; },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ü™Ñ Setup&lt;/h2&gt; &#xA;&lt;p&gt;With the default settings, &lt;strong&gt;WhichKey&lt;/strong&gt; will work out of the box for most builtin keybindings, but the real power comes from documenting and organizing your own keybindings.&lt;/p&gt; &#xA;&lt;p&gt;To document and/or setup your own mappings, you need to call the &lt;code&gt;register&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local wk = require(&#34;which-key&#34;)&#xA;wk.register(mappings, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default options for &lt;code&gt;opts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  mode = &#34;n&#34;, -- NORMAL mode&#xA;  -- prefix: use &#34;&amp;lt;leader&amp;gt;f&#34; for example for mapping everything related to finding files&#xA;  -- the prefix is prepended to every mapping part of `mappings`&#xA;  prefix = &#34;&#34;,&#xA;  buffer = nil, -- Global mappings. Specify a buffer number for buffer local mappings&#xA;  silent = true, -- use `silent` when creating keymaps&#xA;  noremap = true, -- use `noremap` when creating keymaps&#xA;  nowait = false, -- use `nowait` when creating keymaps&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ùï When you specify a command in your mapping that starts with &lt;code&gt;&amp;lt;Plug&amp;gt;&lt;/code&gt;, then we automatically set &lt;code&gt;noremap=false&lt;/code&gt;, since you always want recursive keybindings in this case&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;‚å®Ô∏è Mappings&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚å® for &lt;strong&gt;Neovim 0.7&lt;/strong&gt; and higher, which key will use the &lt;code&gt;desc&lt;/code&gt; attribute of existing mappings as the default label&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Group names use the special &lt;code&gt;name&lt;/code&gt; key in the tables. There&#39;s multiple ways to define the mappings. &lt;code&gt;wk.register&lt;/code&gt; can be called multiple times from anywhere in your config files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local wk = require(&#34;which-key&#34;)&#xA;-- As an example, we will create the following mappings:&#xA;--  * &amp;lt;leader&amp;gt;ff find files&#xA;--  * &amp;lt;leader&amp;gt;fr show recent files&#xA;--  * &amp;lt;leader&amp;gt;fb Foobar&#xA;-- we&#39;ll document:&#xA;--  * &amp;lt;leader&amp;gt;fn new file&#xA;--  * &amp;lt;leader&amp;gt;fe edit file&#xA;-- and hide &amp;lt;leader&amp;gt;1&#xA;&#xA;wk.register({&#xA;  f = {&#xA;    name = &#34;file&#34;, -- optional group name&#xA;    f = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; }, -- create a binding with label&#xA;    r = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34;, noremap=false, buffer = 123 }, -- additional options for creating the keymap&#xA;    n = { &#34;New File&#34; }, -- just a label. don&#39;t create any mapping&#xA;    e = &#34;Edit File&#34;, -- same as above&#xA;    [&#34;1&#34;] = &#34;which_key_ignore&#34;,  -- special label to hide it in the popup&#xA;    b = { function() print(&#34;bar&#34;) end, &#34;Foobar&#34; } -- you can also pass functions!&#xA;  },&#xA;}, { prefix = &#34;&amp;lt;leader&amp;gt;&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see more examples&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- all of the mappings below are equivalent&#xA;&#xA;-- method 2&#xA;wk.register({&#xA;  [&#34;&amp;lt;leader&amp;gt;&#34;] = {&#xA;    f = {&#xA;      name = &#34;+file&#34;,&#xA;      f = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; },&#xA;      r = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34; },&#xA;      n = { &#34;&amp;lt;cmd&amp;gt;enew&amp;lt;cr&amp;gt;&#34;, &#34;New File&#34; },&#xA;    },&#xA;  },&#xA;})&#xA;&#xA;-- method 3&#xA;wk.register({&#xA;  [&#34;&amp;lt;leader&amp;gt;f&#34;] = {&#xA;    name = &#34;+file&#34;,&#xA;    f = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; },&#xA;    r = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34; },&#xA;    n = { &#34;&amp;lt;cmd&amp;gt;enew&amp;lt;cr&amp;gt;&#34;, &#34;New File&#34; },&#xA;  },&#xA;})&#xA;&#xA;-- method 4&#xA;wk.register({&#xA;  [&#34;&amp;lt;leader&amp;gt;f&#34;] = { name = &#34;+file&#34; },&#xA;  [&#34;&amp;lt;leader&amp;gt;ff&#34;] = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; },&#xA;  [&#34;&amp;lt;leader&amp;gt;fr&#34;] = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34; },&#xA;  [&#34;&amp;lt;leader&amp;gt;fn&#34;] = { &#34;&amp;lt;cmd&amp;gt;enew&amp;lt;cr&amp;gt;&#34;, &#34;New File&#34; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt; The default label is &lt;code&gt;keymap.desc&lt;/code&gt; or &lt;code&gt;keymap.rhs&lt;/code&gt; or &lt;code&gt;&#34;&#34;&lt;/code&gt;, &lt;code&gt;:h nvim_set_keymap()&lt;/code&gt; to get more details about &lt;code&gt;desc&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üöô Operators, Motions and Text Objects&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; provides help to work with operators, motions and text objects.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;[count]operator[count][text-object]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;operators can be configured with the &lt;code&gt;operators&lt;/code&gt; option &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;set &lt;code&gt;plugins.presets.operators&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to automatically configure vim built-in operators&lt;/li&gt; &#xA;   &lt;li&gt;set this to &lt;code&gt;false&lt;/code&gt;, to only include the list you configured in the &lt;code&gt;operators&lt;/code&gt; option.&lt;/li&gt; &#xA;   &lt;li&gt;see &lt;a href=&#34;https://github.com/folke/which-key.nvim/raw/main/lua/which-key/plugins/presets/init.lua#L5&#34;&gt;here&lt;/a&gt; for the full list part of the preset&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;text objects are automatically retrieved from &lt;strong&gt;operator pending&lt;/strong&gt; key maps (&lt;code&gt;omap&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;set &lt;code&gt;plugins.presets.text_objects&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to configure built-in text objects&lt;/li&gt; &#xA;   &lt;li&gt;see &lt;a href=&#34;https://github.com/folke/which-key.nvim/raw/main/lua/which-key/plugins/presets/init.lua#L43&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;motions are part of the preset &lt;code&gt;plugins.presets.motions&lt;/code&gt; setting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;see &lt;a href=&#34;https://github.com/folke/which-key.nvim/raw/main/lua/which-key/plugins/presets/init.lua#L20&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to disable some operators? (like v)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- make sure to run this code before calling setup()&#xA;-- refer to the full lists at https://github.com/folke/which-key.nvim/blob/main/lua/which-key/plugins/presets/init.lua&#xA;local presets = require(&#34;which-key.plugins.presets&#34;)&#xA;presets.operators[&#34;v&#34;] = nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;p&gt;When the &lt;strong&gt;WhichKey&lt;/strong&gt; popup is open, you can use the following key bindings (they are also displayed at the bottom of the screen):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hit one of the keys to open a group or execute a key binding&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; to cancel and close the popup&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;bs&amp;gt;&lt;/code&gt; go up one level&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;c-d&amp;gt;&lt;/code&gt; scroll down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;c-u&amp;gt;&lt;/code&gt; scroll up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Apart from the automatic opening, you can also manually open &lt;strong&gt;WhichKey&lt;/strong&gt; for a certain &lt;code&gt;prefix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ùóÔ∏è don&#39;t create any keymappings yourself to trigger WhichKey. Unlike with &lt;em&gt;vim-which-key&lt;/em&gt;, we do this fully automatically. Please remove any left-over triggers you might have from using &lt;em&gt;vim-which-key&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:WhichKey &#34; show all mappings&#xA;:WhichKey &amp;lt;leader&amp;gt; &#34; show all &amp;lt;leader&amp;gt; mappings&#xA;:WhichKey &amp;lt;leader&amp;gt; v &#34; show all &amp;lt;leader&amp;gt; mappings for VISUAL mode&#xA;:WhichKey &#39;&#39; v &#34; show ALL mappings for VISUAL mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üî• Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Four built-in plugins are included with &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Marks&lt;/h3&gt; &#xA;&lt;p&gt;Shows a list of your buffer local and global marks when you hit ` or &#39;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439573-8f278700-a804-11eb-80ca-bb9263e6d937.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Registers&lt;/h3&gt; &#xA;&lt;p&gt;Shows a list of your buffer local and global registers when you hit &#34; in &lt;em&gt;NORMAL&lt;/em&gt; mode, or &lt;code&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt; in &lt;em&gt;INSERT&lt;/em&gt; mode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439609-98b0ef00-a804-11eb-9385-97c7d5ff4113.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Presets&lt;/h3&gt; &#xA;&lt;p&gt;Built-in key binding help for &lt;code&gt;motions&lt;/code&gt;, &lt;code&gt;text-objects&lt;/code&gt;, &lt;code&gt;operators&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439871-df9ee480-a804-11eb-9529-800e167db65c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Spelling&lt;/h3&gt; &#xA;&lt;p&gt;When enabled, this plugin hooks into &lt;code&gt;z=&lt;/code&gt; and replaces the full-screen spelling suggestions window by a list of suggestions within &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/118102022-1c361880-b38d-11eb-8e82-79ad266d9bb8.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üé® Colors&lt;/h2&gt; &#xA;&lt;p&gt;The table below shows all the highlight groups defined for &lt;strong&gt;WhichKey&lt;/strong&gt; with their default link.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;   &lt;th&gt;Defaults to&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKey&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Function&lt;/td&gt; &#xA;   &lt;td&gt;the key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyGroup&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Keyword&lt;/td&gt; &#xA;   &lt;td&gt;a group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeySeparator&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DiffAdd&lt;/td&gt; &#xA;   &lt;td&gt;the separator between the key and its label&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyDesc&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Identifier&lt;/td&gt; &#xA;   &lt;td&gt;the label of the key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyFloat&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NormalFloat&lt;/td&gt; &#xA;   &lt;td&gt;Normal in the popup window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyBorder&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;FloatBorder&lt;/td&gt; &#xA;   &lt;td&gt;Normal in the popup window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyValue&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comment&lt;/td&gt; &#xA;   &lt;td&gt;used by plugins that provide values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-disable-file MD033 --&gt; &#xA;&lt;!-- markdownlint-configure-file { &#34;MD013&#34;: { &#34;line_length&#34;: 120 } } --&gt; &#xA;&lt;!-- markdownlint-configure-file { &#34;MD004&#34;: { &#34;style&#34;: &#34;sublist&#34; } } --&gt;</summary>
  </entry>
  <entry>
    <title>folke/neoconf.nvim</title>
    <updated>2023-01-15T01:59:39Z</updated>
    <id>tag:github.com,2023-01-15:/folke/neoconf.nvim</id>
    <link href="https://github.com/folke/neoconf.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üíº Neovim plugin to manage global and project-local settings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üíº neoconf.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;neoconf.nvim&lt;/strong&gt; is a Neovim plugin to manage global and project-local settings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/202160538-3711693c-14fd-4e8b-a9d1-ceda88bae00c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;configure Neovim using &lt;strong&gt;JSON&lt;/strong&gt; files (can have comments) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;global settings: &lt;code&gt;~/.config/nvim/neoconf.json&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;local settings: &lt;code&gt;~/projects/foobar/.neoconf.json&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;live reload of your lsp settings&lt;/li&gt; &#xA; &lt;li&gt;import existing settings from &lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;vscode&lt;/a&gt;, &lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;coc.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/tamago324/nlsp-settings.nvim&#34;&gt;nlsp-settings.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;auto-completion of all the settings in the &lt;strong&gt;Json config files&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;auto-completion of all LSP settings in your &lt;strong&gt;Neovim Lua config files&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;integrates with &lt;a href=&#34;https://github.com/folke/neodev.nvim&#34;&gt;neodev.nvim&lt;/a&gt;. See &lt;a href=&#34;https://github.com/folke/neoconf.nvim/raw/main/.neoconf.json&#34;&gt;.neoconf.json&lt;/a&gt; in this repo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.7.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;use({&#xA;  &#34;folke/neoconf.nvim&#34;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Setup&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s important that you set up &lt;code&gt;neoconf.nvim&lt;/code&gt; &lt;strong&gt;BEFORE&lt;/strong&gt; &lt;code&gt;nvim-lspconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neoconf&#34;).setup({&#xA;  -- override any of the default settings here&#xA;})&#xA;&#xA;-- setup your lsp servers as usual&#xA;require(&#34;lspconfig&#34;).sumneko_lua.setup(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;neoconf.nvim&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;&#xA;  -- name of the local settings files&#xA;  local_settings = &#34;.neoconf.json&#34;,&#xA;  -- name of the global settings file in your Neovim config directory&#xA;  global_settings = &#34;neoconf.json&#34;,&#xA;  -- import existing settinsg from other plugins&#xA;  import = {&#xA;    vscode = true, -- local .vscode/settings.json&#xA;    coc = true, -- global/local coc-settings.json&#xA;    nlsp = true, -- global/local nlsp-settings.nvim json settings&#xA;  },&#xA;  -- send new configuration to lsp clients when changing json settings&#xA;  live_reload = true,&#xA;  -- set the filetype to jsonc for settings files, so you can use comments&#xA;  -- make sure you have the jsonc treesitter parser installed!&#xA;  filetype_jsonc = true,&#xA;  plugins = {&#xA;    -- configures lsp clients with settings in the following order:&#xA;    -- - lua settings passed in lspconfig setup&#xA;    -- - global json settings&#xA;    -- - local json settings&#xA;    lspconfig = {&#xA;      enabled = true,&#xA;    },&#xA;    -- configures jsonls to get completion in .nvim.settings.json files&#xA;    jsonls = {&#xA;      enabled = true,&#xA;      -- only show completion in json settings for configured lsp servers&#xA;      configured_servers_only = true,&#xA;    },&#xA;    -- configures sumneko_lua to get completion of lspconfig server settings&#xA;    sumneko_lua = {&#xA;      -- by default, sumneko_lua annotations are only enabled in your neovim config directory&#xA;      enabled_for_neovim_config = true,&#xA;      -- explicitely enable adding annotations. Mostly relevant to put in your local .nvim.settings.json file&#xA;      enabled = false,&#xA;    },&#xA;  },&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;h3&gt;The &lt;code&gt;:Neoconf&lt;/code&gt; Command&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Neoconf&lt;/code&gt;: will show a ui to select one of the local/global json config files to edit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Neoconf local&lt;/code&gt;: will show a ui to select one of the local json config files to edit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Neoconf global&lt;/code&gt;: will show a ui to select one of the global json config files to edit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Neoconf show&lt;/code&gt;: opens a floating window with the merged config&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Neoconf lsp&lt;/code&gt;: opens a floating window with your merged lsp config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/202161064-16789740-f094-4729-97c2-b6509148a7fd.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Completion and Validation for your &lt;code&gt;Json&lt;/code&gt; Settings Files&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/202160792-f956e3af-535f-4ad6-8de4-d89854072f91.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Completion and Validation for your &lt;code&gt;Lua&lt;/code&gt; Settings Files&lt;/h3&gt; &#xA;&lt;p&gt;Completion of your lua settings should work out of the box.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/202160675-ea9a62b4-7084-40a3-966e-e9d5f0fb70ec.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can additionally use the exported types in other places.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example with a table containing LSP server settings&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  ---@type lspconfig.options&#xA;  local servers = {&#xA;    ansiblels = {},&#xA;    bashls = {},&#xA;    clangd = {},&#xA;    cssls = {},&#xA;    dockerls = {},&#xA;    tsserver = {},&#xA;    svelte = {},&#xA;    eslint = {},&#xA;    html = {},&#xA;    jsonls = {&#xA;      settings = {&#xA;        json = {&#xA;          format = {&#xA;            enable = true,&#xA;          },&#xA;          schemas = require(&#34;schemastore&#34;).json.schemas(),&#xA;          validate = { enable = true },&#xA;        },&#xA;      },&#xA;    },&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üì¶ API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Neodev&lt;/strong&gt; comes with an API that can be used by plugin developers to load global/local settings for their plugin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---@class SettingsPlugin&#xA;---@field name string&#xA;---@field setup fun()|nil&#xA;---@field on_update fun(event)|nil&#xA;---@field on_schema fun(schema: Schema)&#xA;&#xA;-- Registers a plugin. Biggest use-case is to get auto-completion for your plugin in the json settings files&#xA;---@param plugin SettingsPlugin&#xA;function Neodev.register(plugin) end&#xA;&#xA;---@class WorkspaceOptions&#xA;---@field file? string File will be used to determine the root_dir&#xA;---@field buffer? buffer Buffer will be used to find the root_dir&#xA;---@field lsp? boolean LSP root_dir will be used to determine the root_dir&#xA;---@field local? boolean defaults to true. Merge local settings&#xA;---@field global? boolean defaults to true. Merge global settings&#xA;&#xA;-- Returns the requested settings&#xA;---@generic T : table&#xA;---@param key? string Optional key to get settings for&#xA;---@param defaults? T Optional table of defaults that will be merged in the result&#xA;---@param opts? WorkspaceOptions options to determine the root_dir and what settings to merge&#xA;---@return T&#xA;function Neoconf.get(key, defaults, opts) end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;API Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default config for your plugin&#xA;local defaults = {&#xA;  doit = true,&#xA;  count = 1,&#xA;  array = {},&#xA;}&#xA;&#xA;-- register your settings schema with Neodev, so auto-completion will work in the json files&#xA;require(&#34;neoconf.plugins&#34;).register({&#xA;    on_schema = function(schema)&#xA;    -- this call will create a json schema based on the lua types of your default settings&#xA;    schema:import(&#34;myplugin&#34;, defaults)&#xA;    -- Optionally update some of the json schema&#xA;    schema:set(&#34;myplugin.array&#34;, {&#xA;        description = &#34;Special array containg booleans or numbers&#34;,&#xA;        anyOf = {&#xA;        { type = &#34;boolean&#34; },&#xA;        { type = &#34;integer&#34; },&#xA;        },&#xA;        })&#xA;    end,&#xA;    })&#xA;&#xA;local my_settings = Neoconf.get(&#34;neodev&#34;, defaults)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;‚≠ê Acknowledgment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/actboy168/json.lua&#34;&gt;json.lua&lt;/a&gt; a pure-lua JSON library for parsing &lt;code&gt;jsonc&lt;/code&gt; files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíª Supported Language Servers&lt;/h2&gt; &#xA;&lt;!-- GENERATED --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/AdaCore/ada_language_server/tree/master/integration/vscode/ada/package.json&#34;&gt;als&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/withastro/language-tools/tree/main/packages/vscode/package.json&#34;&gt;astro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/Beaglefoot/awk-language-server/tree/master/client/package.json&#34;&gt;awkls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/bash-lsp/bash-language-server/tree/master/vscode-client/package.json&#34;&gt;bashls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/clangd/vscode-clangd/tree/master/package.json&#34;&gt;clangd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/microsoft/vscode/tree/main/extensions/css-language-features/package.json&#34;&gt;cssls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/Dart-Code/Dart-Code/tree/master/package.json&#34;&gt;dartls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/denoland/vscode_deno/tree/main/package.json&#34;&gt;denols&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/elixir-lsp/vscode-elixir-ls/tree/master/package.json&#34;&gt;elixirls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/elm-tooling/elm-language-client-vscode/tree/master/package.json&#34;&gt;elmls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/microsoft/vscode-eslint/tree/main/package.json&#34;&gt;eslint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/flowtype/flow-for-vscode/tree/master/package.json&#34;&gt;flow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/ionide/ionide-vscode-fsharp/tree/main/release/package.json&#34;&gt;fsautocomplete&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/znck/grammarly/tree/main/extension/package.json&#34;&gt;grammarly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/vshaxe/vshaxe/tree/master/package.json&#34;&gt;haxe_language_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/slackhq/vscode-hack/tree/master/package.json&#34;&gt;hhvm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/alanz/vscode-hie-server/tree/master/package.json&#34;&gt;hie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/microsoft/vscode/tree/main/extensions/html-language-features/package.json&#34;&gt;html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/bmewburn/vscode-intelephense/tree/master/package.json&#34;&gt;intelephense&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/georgewfraser/java-language-server/tree/master/package.json&#34;&gt;java_language_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/redhat-developer/vscode-java/tree/master/package.json&#34;&gt;jdtls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/microsoft/vscode/tree/master/extensions/json-language-features/package.json&#34;&gt;jsonls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/julia-vscode/julia-vscode/tree/master/package.json&#34;&gt;julials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/fwcd/vscode-kotlin/tree/master/package.json&#34;&gt;kotlin_language_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/valentjn/vscode-ltex/tree/develop/package.json&#34;&gt;ltex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/JohnnyMorganz/luau-lsp/tree/main/editors/code/package.json&#34;&gt;luau_lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/tweag/nickel/tree/master/lsp/client-extension/package.json&#34;&gt;nickel_ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/tree/master/package.json&#34;&gt;omnisharp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/richterger/Perl-LanguageServer/tree/master/clients/vscode/perl/package.json&#34;&gt;perlls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/bscan/PerlNavigator/tree/main/package.json&#34;&gt;perlnavigator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/FractalBoy/perl-language-server/tree/master/client/package.json&#34;&gt;perlpls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/PowerShell/vscode-powershell/tree/main/package.json&#34;&gt;powershell_es&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/psalm/psalm-vscode-plugin/tree/master/package.json&#34;&gt;psalm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/puppetlabs/puppet-vscode/tree/main/package.json&#34;&gt;puppet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/nwolverson/vscode-ide-purescript/tree/master/package.json&#34;&gt;purescriptls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/python-lsp/python-lsp-server/tree/develop/pylsp/config/schema.json&#34;&gt;pylsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/microsoft/pyright/tree/master/packages/vscode-pyright/package.json&#34;&gt;pyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/REditorSupport/vscode-r-lsp/tree/master/package.json&#34;&gt;r_language_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/rescript-lang/rescript-vscode/tree/master/package.json&#34;&gt;rescriptls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/rust-lang/vscode-rust/tree/master/package.json&#34;&gt;rls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/rome/tools/tree/main/editors/vscode/package.json&#34;&gt;rome&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/rust-analyzer/rust-analyzer/tree/master/editors/code/package.json&#34;&gt;rust_analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/castwide/vscode-solargraph/tree/master/package.json&#34;&gt;solargraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/juanfranblanco/vscode-solidity/tree/master/package.json&#34;&gt;solidity_ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/sorbet/sorbet/tree/master/vscode_extension/package.json&#34;&gt;sorbet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/swift-server/vscode-swift/tree/main/package.json&#34;&gt;sourcekit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/stoplightio/vscode-spectral/tree/master/package.json&#34;&gt;spectral&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/bmatcuk/coc-stylelintplus/tree/master/package.json&#34;&gt;stylelint_lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/sumneko/vscode-lua/tree/master/package.json&#34;&gt;sumneko_lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/sveltejs/language-tools/tree/master/packages/svelte-vscode/package.json&#34;&gt;svelte&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/eirikpre/VSCode-SystemVerilog/tree/master/package.json&#34;&gt;svlangserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/tailwindlabs/tailwindcss-intellisense/tree/master/packages/vscode-tailwindcss/package.json&#34;&gt;tailwindcss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/hashicorp/vscode-terraform/tree/master/package.json&#34;&gt;terraformls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/microsoft/vscode/tree/main/extensions/typescript-language-features/package.json&#34;&gt;tsserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/johnsoncodehk/volar/tree/master/vue-language-tools/vscode-vue/package.json&#34;&gt;volar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/vuejs/vetur/tree/master/package.json&#34;&gt;vuels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/wgsl-analyzer/wgsl-analyzer/tree/main/editors/code/package.json&#34;&gt;wgls_analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/redhat-developer/vscode-yaml/tree/master/package.json&#34;&gt;yamlls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/artempyanykh/zeta-note-vscode/tree/main/package.json&#34;&gt;zeta_note&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/zigtools/zls-vscode/tree/master/package.json&#34;&gt;zls&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>