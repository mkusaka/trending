<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-21T01:42:15Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stevearc/aerial.nvim</title>
    <updated>2024-07-21T01:42:15Z</updated>
    <id>tag:github.com,2024-07-21:/stevearc/aerial.nvim</id>
    <link href="https://github.com/stevearc/aerial.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin for a code outline window&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aerial.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A code outline window for skimming and quick navigation&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#third-party-integrations&#34;&gt;Third-party integrations&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#telescope&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#fzf&#34;&gt;fzf&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#lualine&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#highlight&#34;&gt;Highlight&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#treesitter-queries&#34;&gt;TreeSitter queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/506791/122652728-18688500-d0f5-11eb-80aa-910f7e6a5f46.mp4&#34;&gt;https://user-images.githubusercontent.com/506791/122652728-18688500-d0f5-11eb-80aa-910f7e6a5f46.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.9+ (for older versions, use a &lt;a href=&#34;https://github.com/stevearc/conform.nvim/branches&#34;&gt;nvim-0.x branch&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;One or more of the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A working LSP setup (see &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Tree-sitter parsers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;aerial supports all the usual plugin managers&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lazy.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;stevearc/aerial.nvim&#39;,&#xA;  opts = {},&#xA;  -- Optional dependencies&#xA;  dependencies = {&#xA;     &#34;nvim-treesitter/nvim-treesitter&#34;,&#xA;     &#34;nvim-tree/nvim-web-devicons&#34;&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;packer&#34;).startup(function()&#xA;  use({&#xA;    &#34;stevearc/aerial.nvim&#34;,&#xA;    config = function()&#xA;      require(&#34;aerial&#34;).setup()&#xA;    end,&#xA;  })&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Paq&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;paq&#34;)({&#xA;  { &#34;stevearc/aerial.nvim&#34; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;stevearc/aerial.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dein&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;stevearc/aerial.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pathogen&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/aerial.nvim.git ~/.vim/bundle/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/aerial.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/aerial/start/aerial.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Somewhere in your init.lua you will need to call &lt;code&gt;aerial.setup()&lt;/code&gt;. See below for &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#options&#34;&gt;a full list of options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;aerial&#34;).setup({&#xA;  -- optionally use on_attach to set keymaps when aerial has attached to a buffer&#xA;  on_attach = function(bufnr)&#xA;    -- Jump forwards/backwards with &#39;{&#39; and &#39;}&#39;&#xA;    vim.keymap.set(&#34;n&#34;, &#34;{&#34;, &#34;&amp;lt;cmd&amp;gt;AerialPrev&amp;lt;CR&amp;gt;&#34;, { buffer = bufnr })&#xA;    vim.keymap.set(&#34;n&#34;, &#34;}&#34;, &#34;&amp;lt;cmd&amp;gt;AerialNext&amp;lt;CR&amp;gt;&#34;, { buffer = bufnr })&#xA;  end,&#xA;})&#xA;-- You probably also want to set a keymap to toggle aerial&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;a&#34;, &#34;&amp;lt;cmd&amp;gt;AerialToggle!&amp;lt;CR&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, you will need to have either Treesitter or a working LSP client. You can configure your preferred source(s) with the &lt;code&gt;backends&lt;/code&gt; option (see &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#options&#34;&gt;Options&lt;/a&gt;). The default is to prefer Treesitter when it&#39;s available and fall back to LSP.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Supported treesitter languages&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;bash&lt;/li&gt; &#xA;  &lt;li&gt;c&lt;/li&gt; &#xA;  &lt;li&gt;c_sharp&lt;/li&gt; &#xA;  &lt;li&gt;cpp&lt;/li&gt; &#xA;  &lt;li&gt;dart&lt;/li&gt; &#xA;  &lt;li&gt;elixir&lt;/li&gt; &#xA;  &lt;li&gt;go&lt;/li&gt; &#xA;  &lt;li&gt;groovy&lt;/li&gt; &#xA;  &lt;li&gt;help&lt;/li&gt; &#xA;  &lt;li&gt;html&lt;/li&gt; &#xA;  &lt;li&gt;java&lt;/li&gt; &#xA;  &lt;li&gt;javascript&lt;/li&gt; &#xA;  &lt;li&gt;json&lt;/li&gt; &#xA;  &lt;li&gt;julia&lt;/li&gt; &#xA;  &lt;li&gt;latex&lt;/li&gt; &#xA;  &lt;li&gt;lua&lt;/li&gt; &#xA;  &lt;li&gt;make&lt;/li&gt; &#xA;  &lt;li&gt;markdown&lt;/li&gt; &#xA;  &lt;li&gt;norg&lt;/li&gt; &#xA;  &lt;li&gt;objdump&lt;/li&gt; &#xA;  &lt;li&gt;org&lt;/li&gt; &#xA;  &lt;li&gt;php&lt;/li&gt; &#xA;  &lt;li&gt;proto&lt;/li&gt; &#xA;  &lt;li&gt;python&lt;/li&gt; &#xA;  &lt;li&gt;rst&lt;/li&gt; &#xA;  &lt;li&gt;ruby&lt;/li&gt; &#xA;  &lt;li&gt;rust&lt;/li&gt; &#xA;  &lt;li&gt;scala&lt;/li&gt; &#xA;  &lt;li&gt;snakemake&lt;/li&gt; &#xA;  &lt;li&gt;solidity&lt;/li&gt; &#xA;  &lt;li&gt;teal&lt;/li&gt; &#xA;  &lt;li&gt;tsx&lt;/li&gt; &#xA;  &lt;li&gt;typescript&lt;/li&gt; &#xA;  &lt;li&gt;usd&lt;/li&gt; &#xA;  &lt;li&gt;vim&lt;/li&gt; &#xA;  &lt;li&gt;vimdoc&lt;/li&gt; &#xA;  &lt;li&gt;yaml&lt;/li&gt; &#xA;  &lt;li&gt;zig&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Don&#39;t see your language here? &lt;a href=&#34;https://github.com/stevearc/aerial.nvim/issues/new?assignees=stevearc&amp;amp;labels=enhancement&amp;amp;template=feature-request--treesitter-language-.md&amp;amp;title=&#34;&gt;Request support for it&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Args&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialToggle[!]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;left/right/float&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open or close the aerial window. With &lt;code&gt;!&lt;/code&gt; cursor stays in current window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialOpen[!]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;left/right/float&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open the aerial window. With &lt;code&gt;!&lt;/code&gt; cursor stays in current window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialOpenAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open an aerial window for each visible window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialClose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close the aerial window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialCloseAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close all visible aerial windows.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[count]AerialNext&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump forwards {count} symbols (default 1).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[count]AerialPrev&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump backwards [count] symbols (default 1).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[count]AerialGo[!]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the [count] symbol (default 1).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialInfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print out debug info related to aerial.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialNavToggle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open or close the aerial nav window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialNavOpen&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open the aerial nav window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialNavClose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close the aerial nav window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Call the setup function to change the default behavior&#xA;require(&#34;aerial&#34;).setup({&#xA;  -- Priority list of preferred backends for aerial.&#xA;  -- This can be a filetype map (see :help aerial-filetype-map)&#xA;  backends = { &#34;treesitter&#34;, &#34;lsp&#34;, &#34;markdown&#34;, &#34;asciidoc&#34;, &#34;man&#34; },&#xA;&#xA;  layout = {&#xA;    -- These control the width of the aerial window.&#xA;    -- They can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;    -- min_width and max_width can be a list of mixed types.&#xA;    -- max_width = {40, 0.2} means &#34;the lesser of 40 columns or 20% of total&#34;&#xA;    max_width = { 40, 0.2 },&#xA;    width = nil,&#xA;    min_width = 10,&#xA;&#xA;    -- key-value pairs of window-local options for aerial window (e.g. winhl)&#xA;    win_opts = {},&#xA;&#xA;    -- Determines the default direction to open the aerial window. The &#39;prefer&#39;&#xA;    -- options will open the window in the other direction *if* there is a&#xA;    -- different buffer in the way of the preferred direction&#xA;    -- Enum: prefer_right, prefer_left, right, left, float&#xA;    default_direction = &#34;prefer_right&#34;,&#xA;&#xA;    -- Determines where the aerial window will be opened&#xA;    --   edge   - open aerial at the far right/left of the editor&#xA;    --   window - open aerial to the right/left of the current window&#xA;    placement = &#34;window&#34;,&#xA;&#xA;    -- When the symbols change, resize the aerial window (within min/max constraints) to fit&#xA;    resize_to_content = true,&#xA;&#xA;    -- Preserve window size equality with (:help CTRL-W_=)&#xA;    preserve_equality = false,&#xA;  },&#xA;&#xA;  -- Determines how the aerial window decides which buffer to display symbols for&#xA;  --   window - aerial window will display symbols for the buffer in the window from which it was opened&#xA;  --   global - aerial window will display symbols for the current window&#xA;  attach_mode = &#34;window&#34;,&#xA;&#xA;  -- List of enum values that configure when to auto-close the aerial window&#xA;  --   unfocus       - close aerial when you leave the original source window&#xA;  --   switch_buffer - close aerial when you change buffers in the source window&#xA;  --   unsupported   - close aerial when attaching to a buffer that has no symbol source&#xA;  close_automatic_events = {},&#xA;&#xA;  -- Keymaps in aerial window. Can be any value that `vim.keymap.set` accepts OR a table of keymap&#xA;  -- options with a `callback` (e.g. { callback = function() ... end, desc = &#34;&#34;, nowait = true })&#xA;  -- Additionally, if it is a string that matches &#34;actions.&amp;lt;name&amp;gt;&#34;,&#xA;  -- it will use the mapping at require(&#34;aerial.actions&#34;).&amp;lt;name&amp;gt;&#xA;  -- Set to `false` to remove a keymap&#xA;  keymaps = {&#xA;    [&#34;?&#34;] = &#34;actions.show_help&#34;,&#xA;    [&#34;g?&#34;] = &#34;actions.show_help&#34;,&#xA;    [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;actions.jump&#34;,&#xA;    [&#34;&amp;lt;2-LeftMouse&amp;gt;&#34;] = &#34;actions.jump&#34;,&#xA;    [&#34;&amp;lt;C-v&amp;gt;&#34;] = &#34;actions.jump_vsplit&#34;,&#xA;    [&#34;&amp;lt;C-s&amp;gt;&#34;] = &#34;actions.jump_split&#34;,&#xA;    [&#34;p&#34;] = &#34;actions.scroll&#34;,&#xA;    [&#34;&amp;lt;C-j&amp;gt;&#34;] = &#34;actions.down_and_scroll&#34;,&#xA;    [&#34;&amp;lt;C-k&amp;gt;&#34;] = &#34;actions.up_and_scroll&#34;,&#xA;    [&#34;{&#34;] = &#34;actions.prev&#34;,&#xA;    [&#34;}&#34;] = &#34;actions.next&#34;,&#xA;    [&#34;[[&#34;] = &#34;actions.prev_up&#34;,&#xA;    [&#34;]]&#34;] = &#34;actions.next_up&#34;,&#xA;    [&#34;q&#34;] = &#34;actions.close&#34;,&#xA;    [&#34;o&#34;] = &#34;actions.tree_toggle&#34;,&#xA;    [&#34;za&#34;] = &#34;actions.tree_toggle&#34;,&#xA;    [&#34;O&#34;] = &#34;actions.tree_toggle_recursive&#34;,&#xA;    [&#34;zA&#34;] = &#34;actions.tree_toggle_recursive&#34;,&#xA;    [&#34;l&#34;] = &#34;actions.tree_open&#34;,&#xA;    [&#34;zo&#34;] = &#34;actions.tree_open&#34;,&#xA;    [&#34;L&#34;] = &#34;actions.tree_open_recursive&#34;,&#xA;    [&#34;zO&#34;] = &#34;actions.tree_open_recursive&#34;,&#xA;    [&#34;h&#34;] = &#34;actions.tree_close&#34;,&#xA;    [&#34;zc&#34;] = &#34;actions.tree_close&#34;,&#xA;    [&#34;H&#34;] = &#34;actions.tree_close_recursive&#34;,&#xA;    [&#34;zC&#34;] = &#34;actions.tree_close_recursive&#34;,&#xA;    [&#34;zr&#34;] = &#34;actions.tree_increase_fold_level&#34;,&#xA;    [&#34;zR&#34;] = &#34;actions.tree_open_all&#34;,&#xA;    [&#34;zm&#34;] = &#34;actions.tree_decrease_fold_level&#34;,&#xA;    [&#34;zM&#34;] = &#34;actions.tree_close_all&#34;,&#xA;    [&#34;zx&#34;] = &#34;actions.tree_sync_folds&#34;,&#xA;    [&#34;zX&#34;] = &#34;actions.tree_sync_folds&#34;,&#xA;  },&#xA;&#xA;  -- When true, don&#39;t load aerial until a command or function is called&#xA;  -- Defaults to true, unless `on_attach` is provided, then it defaults to false&#xA;  lazy_load = true,&#xA;&#xA;  -- Disable aerial on files with this many lines&#xA;  disable_max_lines = 10000,&#xA;&#xA;  -- Disable aerial on files this size or larger (in bytes)&#xA;  disable_max_size = 2000000, -- Default 2MB&#xA;&#xA;  -- A list of all symbols to display. Set to false to display all symbols.&#xA;  -- This can be a filetype map (see :help aerial-filetype-map)&#xA;  -- To see all available values, see :help SymbolKind&#xA;  filter_kind = {&#xA;    &#34;Class&#34;,&#xA;    &#34;Constructor&#34;,&#xA;    &#34;Enum&#34;,&#xA;    &#34;Function&#34;,&#xA;    &#34;Interface&#34;,&#xA;    &#34;Module&#34;,&#xA;    &#34;Method&#34;,&#xA;    &#34;Struct&#34;,&#xA;  },&#xA;&#xA;  -- Determines line highlighting mode when multiple splits are visible.&#xA;  -- split_width   Each open window will have its cursor location marked in the&#xA;  --               aerial buffer. Each line will only be partially highlighted&#xA;  --               to indicate which window is at that location.&#xA;  -- full_width    Each open window will have its cursor location marked as a&#xA;  --               full-width highlight in the aerial buffer.&#xA;  -- last          Only the most-recently focused window will have its location&#xA;  --               marked in the aerial buffer.&#xA;  -- none          Do not show the cursor locations in the aerial window.&#xA;  highlight_mode = &#34;split_width&#34;,&#xA;&#xA;  -- Highlight the closest symbol if the cursor is not exactly on one.&#xA;  highlight_closest = true,&#xA;&#xA;  -- Highlight the symbol in the source buffer when cursor is in the aerial win&#xA;  highlight_on_hover = false,&#xA;&#xA;  -- When jumping to a symbol, highlight the line for this many ms.&#xA;  -- Set to false to disable&#xA;  highlight_on_jump = 300,&#xA;&#xA;  -- Jump to symbol in source window when the cursor moves&#xA;  autojump = false,&#xA;&#xA;  -- Define symbol icons. You can also specify &#34;&amp;lt;Symbol&amp;gt;Collapsed&#34; to change the&#xA;  -- icon when the tree is collapsed at that symbol, or &#34;Collapsed&#34; to specify a&#xA;  -- default collapsed icon. The default icon set is determined by the&#xA;  -- &#34;nerd_font&#34; option below.&#xA;  -- If you have lspkind-nvim installed, it will be the default icon set.&#xA;  -- This can be a filetype map (see :help aerial-filetype-map)&#xA;  icons = {},&#xA;&#xA;  -- Control which windows and buffers aerial should ignore.&#xA;  -- Aerial will not open when these are focused, and existing aerial windows will not be updated&#xA;  ignore = {&#xA;    -- Ignore unlisted buffers. See :help buflisted&#xA;    unlisted_buffers = false,&#xA;&#xA;    -- Ignore diff windows (setting to false will allow aerial in diff windows)&#xA;    diff_windows = true,&#xA;&#xA;    -- List of filetypes to ignore.&#xA;    filetypes = {},&#xA;&#xA;    -- Ignored buftypes.&#xA;    -- Can be one of the following:&#xA;    -- false or nil - No buftypes are ignored.&#xA;    -- &#34;special&#34;    - All buffers other than normal, help and man page buffers are ignored.&#xA;    -- table        - A list of buftypes to ignore. See :help buftype for the&#xA;    --                possible values.&#xA;    -- function     - A function that returns true if the buffer should be&#xA;    --                ignored or false if it should not be ignored.&#xA;    --                Takes two arguments, `bufnr` and `buftype`.&#xA;    buftypes = &#34;special&#34;,&#xA;&#xA;    -- Ignored wintypes.&#xA;    -- Can be one of the following:&#xA;    -- false or nil - No wintypes are ignored.&#xA;    -- &#34;special&#34;    - All windows other than normal windows are ignored.&#xA;    -- table        - A list of wintypes to ignore. See :help win_gettype() for the&#xA;    --                possible values.&#xA;    -- function     - A function that returns true if the window should be&#xA;    --                ignored or false if it should not be ignored.&#xA;    --                Takes two arguments, `winid` and `wintype`.&#xA;    wintypes = &#34;special&#34;,&#xA;  },&#xA;&#xA;  -- Use symbol tree for folding. Set to true or false to enable/disable&#xA;  -- Set to &#34;auto&#34; to manage folds if your previous foldmethod was &#39;manual&#39;&#xA;  -- This can be a filetype map (see :help aerial-filetype-map)&#xA;  manage_folds = false,&#xA;&#xA;  -- When you fold code with za, zo, or zc, update the aerial tree as well.&#xA;  -- Only works when manage_folds = true&#xA;  link_folds_to_tree = false,&#xA;&#xA;  -- Fold code when you open/collapse symbols in the tree.&#xA;  -- Only works when manage_folds = true&#xA;  link_tree_to_folds = true,&#xA;&#xA;  -- Set default symbol icons to use patched font icons (see https://www.nerdfonts.com/)&#xA;  -- &#34;auto&#34; will set it to true if nvim-web-devicons or lspkind-nvim is installed.&#xA;  nerd_font = &#34;auto&#34;,&#xA;&#xA;  -- Call this function when aerial attaches to a buffer.&#xA;  on_attach = function(bufnr) end,&#xA;&#xA;  -- Call this function when aerial first sets symbols on a buffer.&#xA;  on_first_symbols = function(bufnr) end,&#xA;&#xA;  -- Automatically open aerial when entering supported buffers.&#xA;  -- This can be a function (see :help aerial-open-automatic)&#xA;  open_automatic = false,&#xA;&#xA;  -- Run this command after jumping to a symbol (false will disable)&#xA;  post_jump_cmd = &#34;normal! zz&#34;,&#xA;&#xA;  -- Invoked after each symbol is parsed, can be used to modify the parsed item,&#xA;  -- or to filter it by returning false.&#xA;  --&#xA;  -- bufnr: a neovim buffer number&#xA;  -- item: of type aerial.Symbol&#xA;  -- ctx: a record containing the following fields:&#xA;  --   * backend_name: treesitter, lsp, man...&#xA;  --   * lang: info about the language&#xA;  --   * symbols?: specific to the lsp backend&#xA;  --   * symbol?: specific to the lsp backend&#xA;  --   * syntax_tree?: specific to the treesitter backend&#xA;  --   * match?: specific to the treesitter backend, TS query match&#xA;  post_parse_symbol = function(bufnr, item, ctx)&#xA;    return true&#xA;  end,&#xA;&#xA;  -- Invoked after all symbols have been parsed and post-processed,&#xA;  -- allows to modify the symbol structure before final display&#xA;  --&#xA;  -- bufnr: a neovim buffer number&#xA;  -- items: a collection of aerial.Symbol items, organized in a tree,&#xA;  --        with &#39;parent&#39; and &#39;children&#39; fields&#xA;  -- ctx: a record containing the following fields:&#xA;  --   * backend_name: treesitter, lsp, man...&#xA;  --   * lang: info about the language&#xA;  --   * symbols?: specific to the lsp backend&#xA;  --   * syntax_tree?: specific to the treesitter backend&#xA;  post_add_all_symbols = function(bufnr, items, ctx)&#xA;    return items&#xA;  end,&#xA;&#xA;  -- When true, aerial will automatically close after jumping to a symbol&#xA;  close_on_select = false,&#xA;&#xA;  -- The autocmds that trigger symbols update (not used for LSP backend)&#xA;  update_events = &#34;TextChanged,InsertLeave&#34;,&#xA;&#xA;  -- Show box drawing characters for the tree hierarchy&#xA;  show_guides = false,&#xA;&#xA;  -- Customize the characters used when show_guides = true&#xA;  guides = {&#xA;    -- When the child item has a sibling below it&#xA;    mid_item = &#34;├─&#34;,&#xA;    -- When the child item is the last in the list&#xA;    last_item = &#34;└─&#34;,&#xA;    -- When there are nested child guides to the right&#xA;    nested_top = &#34;│ &#34;,&#xA;    -- Raw indentation&#xA;    whitespace = &#34;  &#34;,&#xA;  },&#xA;&#xA;  -- Set this function to override the highlight groups for certain symbols&#xA;  get_highlight = function(symbol, is_icon, is_collapsed)&#xA;    -- return &#34;MyHighlight&#34; .. symbol.kind&#xA;  end,&#xA;&#xA;  -- Options for opening aerial in a floating win&#xA;  float = {&#xA;    -- Controls border appearance. Passed to nvim_open_win&#xA;    border = &#34;rounded&#34;,&#xA;&#xA;    -- Determines location of floating window&#xA;    --   cursor - Opens float on top of the cursor&#xA;    --   editor - Opens float centered in the editor&#xA;    --   win    - Opens float centered in the window&#xA;    relative = &#34;cursor&#34;,&#xA;&#xA;    -- These control the height of the floating window.&#xA;    -- They can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;    -- min_height and max_height can be a list of mixed types.&#xA;    -- min_height = {8, 0.1} means &#34;the greater of 8 rows or 10% of total&#34;&#xA;    max_height = 0.9,&#xA;    height = nil,&#xA;    min_height = { 8, 0.1 },&#xA;&#xA;    override = function(conf, source_winid)&#xA;      -- This is the config that will be passed to nvim_open_win.&#xA;      -- Change values here to customize the layout&#xA;      return conf&#xA;    end,&#xA;  },&#xA;&#xA;  -- Options for the floating nav windows&#xA;  nav = {&#xA;    border = &#34;rounded&#34;,&#xA;    max_height = 0.9,&#xA;    min_height = { 10, 0.1 },&#xA;    max_width = 0.5,&#xA;    min_width = { 0.2, 20 },&#xA;    win_opts = {&#xA;      cursorline = true,&#xA;      winblend = 10,&#xA;    },&#xA;    -- Jump to symbol in source window when the cursor moves&#xA;    autojump = false,&#xA;    -- Show a preview of the code in the right column, when there are no child symbols&#xA;    preview = false,&#xA;    -- Keymaps in the nav window&#xA;    keymaps = {&#xA;      [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;actions.jump&#34;,&#xA;      [&#34;&amp;lt;2-LeftMouse&amp;gt;&#34;] = &#34;actions.jump&#34;,&#xA;      [&#34;&amp;lt;C-v&amp;gt;&#34;] = &#34;actions.jump_vsplit&#34;,&#xA;      [&#34;&amp;lt;C-s&amp;gt;&#34;] = &#34;actions.jump_split&#34;,&#xA;      [&#34;h&#34;] = &#34;actions.left&#34;,&#xA;      [&#34;l&#34;] = &#34;actions.right&#34;,&#xA;      [&#34;&amp;lt;C-c&amp;gt;&#34;] = &#34;actions.close&#34;,&#xA;    },&#xA;  },&#xA;&#xA;  lsp = {&#xA;    -- If true, fetch document symbols when LSP diagnostics update.&#xA;    diagnostics_trigger_update = false,&#xA;&#xA;    -- Set to false to not update the symbols when there are LSP errors&#xA;    update_when_errors = true,&#xA;&#xA;    -- How long to wait (in ms) after a buffer change before updating&#xA;    -- Only used when diagnostics_trigger_update = false&#xA;    update_delay = 300,&#xA;&#xA;    -- Map of LSP client name to priority. Default value is 10.&#xA;    -- Clients with higher (larger) priority will be used before those with lower priority.&#xA;    -- Set to -1 to never use the client.&#xA;    priority = {&#xA;      -- pyright = 10,&#xA;    },&#xA;  },&#xA;&#xA;  treesitter = {&#xA;    -- How long to wait (in ms) after a buffer change before updating&#xA;    update_delay = 300,&#xA;  },&#xA;&#xA;  markdown = {&#xA;    -- How long to wait (in ms) after a buffer change before updating&#xA;    update_delay = 300,&#xA;  },&#xA;&#xA;  asciidoc = {&#xA;    -- How long to wait (in ms) after a buffer change before updating&#xA;    update_delay = 300,&#xA;  },&#xA;&#xA;  man = {&#xA;    -- How long to wait (in ms) after a buffer change before updating&#xA;    update_delay = 300,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All possible SymbolKind values can be found &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolKind&#34;&gt;in the LSP spec&lt;/a&gt;. These are the values used for configuring icons, highlight groups, and filtering.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;aerial.Symbol&lt;/code&gt; type used in some optional callbacks is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;{&#xA;kind: SymbolKind,&#xA;name: string,&#xA;level: number,&#xA;parent: aerial.Symbol,&#xA;lnum: number,&#xA;end_lnum: number,&#xA;col: number,&#xA;end_col: number&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Third-party integrations&lt;/h2&gt; &#xA;&lt;h3&gt;Telescope&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope&lt;/a&gt; installed, there is an extension for fuzzy finding and jumping to symbols. It functions similarly to the builtin &lt;code&gt;lsp_document_symbols&lt;/code&gt; picker, the main difference being that it uses the aerial backend for the source (e.g. LSP, treesitter, etc) and that it filters out some symbols (see the &lt;code&gt;filter_kind&lt;/code&gt; option).&lt;/p&gt; &#xA;&lt;p&gt;You can activate the picker with &lt;code&gt;:Telescope aerial&lt;/code&gt; or &lt;code&gt;:lua require(&#34;telescope&#34;).extensions.aerial.aerial()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want the command to autocomplete, you can load the extension first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;telescope&#34;).load_extension(&#34;aerial&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The extension can be customized with the following options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;telescope&#34;).setup({&#xA;  extensions = {&#xA;    aerial = {&#xA;      -- Display symbols as &amp;lt;root&amp;gt;.&amp;lt;parent&amp;gt;.&amp;lt;symbol&amp;gt;&#xA;      show_nesting = {&#xA;        [&#34;_&#34;] = false, -- This key will be the default&#xA;        json = true, -- You can set the option for specific filetypes&#xA;        yaml = true,&#xA;      },&#xA;      -- Available modes: symbols, lines, both&#xA;      show_columns = &#34;both&#34;,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;fzf&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;fzf&lt;/a&gt; installed you can trigger fuzzy finding with &lt;code&gt;:call aerial#fzf()&lt;/code&gt;. To create a mapping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nmap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;ds &amp;lt;cmd&amp;gt;call aerial#fzf()&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lualine&lt;/h3&gt; &#xA;&lt;p&gt;There is a lualine component to display the symbols for your current cursor position&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lualine&#34;).setup({&#xA;  sections = {&#xA;    lualine_x = { &#34;aerial&#34; },&#xA;&#xA;    -- Or you can customize it&#xA;    lualine_y = {&#xA;      {&#xA;        &#34;aerial&#34;,&#xA;        -- The separator to be used to separate symbols in status line.&#xA;        sep = &#34; ) &#34;,&#xA;&#xA;        -- The number of symbols to render top-down. In order to render only &#39;N&#39; last&#xA;        -- symbols, negative numbers may be supplied. For instance, &#39;depth = -1&#39; can&#xA;        -- be used in order to render only current symbol.&#xA;        depth = nil,&#xA;&#xA;        -- When &#39;dense&#39; mode is on, icons are not rendered near their symbols. Only&#xA;        -- a single icon that represents the kind of current symbol is rendered at&#xA;        -- the beginning of status line.&#xA;        dense = false,&#xA;&#xA;        -- The separator to be used to separate symbols in dense mode.&#xA;        dense_sep = &#34;.&#34;,&#xA;&#xA;        -- Color the symbol icons.&#xA;        colored = true,&#xA;      },&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Highlight&lt;/h2&gt; &#xA;&lt;p&gt;There are highlight groups created for each &lt;code&gt;SymbolKind&lt;/code&gt;. There will be one for the name of the symbol (&lt;code&gt;Aerial&amp;lt;SymbolKind&amp;gt;&lt;/code&gt;, and one for the icon (&lt;code&gt;Aerial&amp;lt;SymbolKind&amp;gt;Icon&lt;/code&gt;). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi link AerialClass Type&#xA;hi link AerialClassIcon Special&#xA;hi link AerialFunction Special&#xA;hi AerialFunctionIcon guifg=#cb4b16 guibg=NONE guisp=NONE gui=NONE cterm=NONE&#xA;&#xA;&#34; There&#39;s also this group for the fallback of the text if a specific&#xA;&#34; class highlight isn&#39;t defined&#xA;hi link AerialNormal Normal&#xA;&#34; There&#39;s also this group for the cursor position&#xA;hi link AerialLine QuickFixLine&#xA;&#34; If highlight_mode=&#34;split_width&#34;, you can set a separate color for the&#xA;&#34; non-current location highlight&#xA;hi AerialLineNC guibg=Gray&#xA;&#xA;&#34; You can customize the guides (if show_guide=true)&#xA;hi link AerialGuide Comment&#xA;&#34; You can set a different guide color for each level&#xA;hi AerialGuide1 guifg=Red&#xA;hi AerialGuide2 guifg=Blue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;!-- API --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#setupopts&#34;&gt;setup(opts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#sync_load&#34;&gt;sync_load()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#is_openopts&#34;&gt;is_open(opts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#close&#34;&gt;close()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#close_all&#34;&gt;close_all()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#close_all_but_current&#34;&gt;close_all_but_current()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#openopts&#34;&gt;open(opts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#open_in_wintarget_win-source_win&#34;&gt;open_in_win(target_win, source_win)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#open_all&#34;&gt;open_all()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#focus&#34;&gt;focus()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#toggleopts&#34;&gt;toggle(opts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#refetch_symbolsbufnr&#34;&gt;refetch_symbols(bufnr)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#selectopts&#34;&gt;select(opts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#nextstep&#34;&gt;next(step)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#prevstep&#34;&gt;prev(step)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#next_upcount&#34;&gt;next_up(count)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#prev_upcount&#34;&gt;prev_up(count)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#get_locationexact&#34;&gt;get_location(exact)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#tree_close_allbufnr&#34;&gt;tree_close_all(bufnr)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#tree_open_allbufnr&#34;&gt;tree_open_all(bufnr)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#tree_set_collapse_levelbufnr-level&#34;&gt;tree_set_collapse_level(bufnr, level)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#tree_increase_fold_levelbufnr-count&#34;&gt;tree_increase_fold_level(bufnr, count)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#tree_decrease_fold_levelbufnr-count&#34;&gt;tree_decrease_fold_level(bufnr, count)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#tree_openopts&#34;&gt;tree_open(opts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#tree_closeopts&#34;&gt;tree_close(opts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#tree_toggleopts&#34;&gt;tree_toggle(opts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#nav_is_open&#34;&gt;nav_is_open()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#nav_open&#34;&gt;nav_open()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#nav_close&#34;&gt;nav_close()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#nav_toggle&#34;&gt;nav_toggle()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#treesitter_clear_query_cache&#34;&gt;treesitter_clear_query_cache()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#sync_foldsbufnr&#34;&gt;sync_folds(bufnr)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#info&#34;&gt;info()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#num_symbolsbufnr&#34;&gt;num_symbols(bufnr)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/doc/api.md#was_closeddefault&#34;&gt;was_closed(default)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /API --&gt; &#xA;&lt;h2&gt;TreeSitter queries&lt;/h2&gt; &#xA;&lt;p&gt;When writing queries, the following captures and metadata are used by Aerial:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;@symbol&lt;/code&gt; - &lt;strong&gt;required&lt;/strong&gt; capture for the logical region being captured&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;kind&lt;/code&gt; - &lt;strong&gt;required&lt;/strong&gt; metadata, a string value matching one of &lt;code&gt;vim.lsp.protocol.SymbolKind&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;@name&lt;/code&gt; - capture to extract a name from its text&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;@start&lt;/code&gt; - a start of the match, influences matching of cursor position to aerial tree, defaults to &lt;code&gt;@symbol&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;@end&lt;/code&gt; - an end of the match, influences matching of cursor position to aerial tree, defaults to &lt;code&gt;@start&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;@selection&lt;/code&gt; - position to jump to when using Aerial for navigation, falls back to &lt;code&gt;@name&lt;/code&gt; and &lt;code&gt;@symbol&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;@scope&lt;/code&gt; - a node naming a scope for the match, its text is used to generate a custom &#34;Comment&#34; linked highlight for the entry, with exception of &#34;public&#34;&lt;/p&gt; &lt;p&gt;A &lt;code&gt;@scope&lt;/code&gt; node with text &#34;developers&#34; will result in its entry in the tree having an &#34;AerialDevelopers&#34; highlight applied to it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;scope&lt;/code&gt; - a metadata value serving the same role as &lt;code&gt;@scope&lt;/code&gt; capture, overriding aforementioned capture&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: a capture&#39;s text can be set or modified with &lt;code&gt;#set!&lt;/code&gt; and &lt;code&gt;#gsub!&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: I accidentally opened a file into the aerial window and it looks bad. How can I prevent this from happening?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Try installing &lt;a href=&#34;https://github.com/stevearc/stickybuf.nvim&#34;&gt;stickybuf&lt;/a&gt;. It was designed to prevent exactly this problem.&lt;/p&gt;</summary>
  </entry>
</feed>