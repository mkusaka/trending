<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:47:49Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alpha2phi/neovim-for-beginner</title>
    <updated>2022-08-28T01:47:49Z</updated>
    <id>tag:github.com,2022-08-28:/alpha2phi/neovim-for-beginner</id>
    <link href="https://github.com/alpha2phi/neovim-for-beginner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A configuration for Neovim beginners.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;neovim-for-beginner&lt;/h1&gt; &#xA;&lt;p&gt;Companion code for the &lt;a href=&#34;https://alpha2phi.medium.com/learn-neovim-the-practical-way-8818fcf4830f#545a&#34;&gt;Medium Neovim for Beginners series.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-smallresources</title>
    <updated>2022-08-28T01:47:49Z</updated>
    <id>tag:github.com,2022-08-28:/qbcore-framework/qb-smallresources</id>
    <link href="https://github.com/qbcore-framework/qb-smallresources" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A compilation of small resources combined into one&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-smallresources&lt;/h1&gt; &#xA;&lt;p&gt;Base scripts for QB-Core Framework &lt;span&gt;üèó&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-core&#34;&gt;qb-core&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consumeable foods/beverages/drinks/drugs (sandwich, water_bottle, tosti, beer, vodka etc.)&lt;/li&gt; &#xA; &lt;li&gt;Removal of GTA&#39;s default weapons drops&lt;/li&gt; &#xA; &lt;li&gt;Drug effects&lt;/li&gt; &#xA; &lt;li&gt;Removal of GTA&#39;s default vehicle spawns (planes, helicopters, emergency vehicles etc.)&lt;/li&gt; &#xA; &lt;li&gt;Removal of GTA&#39;s default emergency service npcs&lt;/li&gt; &#xA; &lt;li&gt;Removal of GTA&#39;s default wanted system&lt;/li&gt; &#xA; &lt;li&gt;Useable binoculars&lt;/li&gt; &#xA; &lt;li&gt;Weapon draw animations (normal/holster)&lt;/li&gt; &#xA; &lt;li&gt;Ability to add teleport markers (from a place to another place)&lt;/li&gt; &#xA; &lt;li&gt;Taking hostage&lt;/li&gt; &#xA; &lt;li&gt;Pointing animation with finger (by pressing &#34;B&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Seatbelt and cruise control&lt;/li&gt; &#xA; &lt;li&gt;Useable parachute&lt;/li&gt; &#xA; &lt;li&gt;Useable armor&lt;/li&gt; &#xA; &lt;li&gt;Weapon recoil (specific to each weapon)&lt;/li&gt; &#xA; &lt;li&gt;Tackle&lt;/li&gt; &#xA; &lt;li&gt;Calm AI (adjusting npc/gang npc aggresiveness)&lt;/li&gt; &#xA; &lt;li&gt;Race Harness&lt;/li&gt; &#xA; &lt;li&gt;/id to see the id&lt;/li&gt; &#xA; &lt;li&gt;Adjusting npc/vehicle/parked vehicle spawn rates&lt;/li&gt; &#xA; &lt;li&gt;Infinite ammo for fire extinguisher and petrol can&lt;/li&gt; &#xA; &lt;li&gt;Removal of GTA&#39;s default huds (weapon wheel, cash etc.)&lt;/li&gt; &#xA; &lt;li&gt;Fireworks&lt;/li&gt; &#xA; &lt;li&gt;Automatically engine on after entering vehicle&lt;/li&gt; &#xA; &lt;li&gt;Discord rich presence&lt;/li&gt; &#xA; &lt;li&gt;Crouch and prone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the script and put it in the &lt;code&gt;[qb]&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Add the following code to your server.cfg/resouces.cfg&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;ensure qb-core&#xA;ensure qb-smallresources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Each feature has a different file name correlative with its function. You can configure each one by its own.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mfussenegger/nvim-dap</title>
    <updated>2022-08-28T01:47:49Z</updated>
    <id>tag:github.com,2022-08-28:/mfussenegger/nvim-dap</id>
    <link href="https://github.com/mfussenegger/nvim-dap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Debug Adapter Protocol client implementation for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DAP (Debug Adapter Protocol)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-dap&lt;/code&gt; is a Debug Adapter Protocol client implementation for &lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt;. &lt;code&gt;nvim-dap&lt;/code&gt; allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launch an application to debug&lt;/li&gt; &#xA; &lt;li&gt;Attach to running applications and debug them&lt;/li&gt; &#xA; &lt;li&gt;Set breakpoints and step through code&lt;/li&gt; &#xA; &lt;li&gt;Inspect the state of the application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38700/124292938-669a7100-db56-11eb-93b8-77b66994fc8a.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install nvim-dap like any other Neovim plugin: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone https://github.com/mfussenegger/nvim-dap.git ~/.config/nvim/pack/plugins/start/nvim-dap&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Or with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Or with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generate the documentation for nvim-dap using &lt;code&gt;:helptags ALL&lt;/code&gt; or &lt;code&gt;:helptags &amp;lt;PATH-TO-PLUGIN/doc/&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported Neovim versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Latest nightly&lt;/li&gt; &#xA; &lt;li&gt;0.7.2 (Recommended)&lt;/li&gt; &#xA; &lt;li&gt;0.6.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You&#39;ll need to install and configure a debug adapter per language. See&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&#34;&gt;:help dap.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&#34;&gt;Debug-Adapter Installation&lt;/a&gt; wiki&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:help dap-adapter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:help dap-configuration&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A typical debug flow consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setting breakpoints via &lt;code&gt;:lua require&#39;dap&#39;.toggle_breakpoint()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Launching debug sessions and resuming execution via &lt;code&gt;:lua require&#39;dap&#39;.continue()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Stepping through code via &lt;code&gt;:lua require&#39;dap&#39;.step_over()&lt;/code&gt; and &lt;code&gt;:lua require&#39;dap&#39;.step_into()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Inspecting the state via the built-in REPL: &lt;code&gt;:lua require&#39;dap&#39;.repl.open()&lt;/code&gt; or using the widget UI (&lt;code&gt;:help dap-widgets&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&#34;&gt;:help dap.txt&lt;/a&gt;, &lt;code&gt;:help dap-mapping&lt;/code&gt; and &lt;code&gt;:help dap-api&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;p&gt;In theory all of the languages for which a debug adapter exists should be supported.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/&#34;&gt;Available debug adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&#34;&gt;nvim-dap Debug-Adapter Installation &amp;amp; Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Wiki is community maintained. If you got an adapter working that isn&#39;t listed yet, please extend the Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Some debug adapters have &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Extensions#language-specific-extensions&#34;&gt;language specific extensions&lt;/a&gt;. Using them over a manual configuration is recommended, as they&#39;re usually better maintained.&lt;/p&gt; &#xA;&lt;p&gt;If the instructions in the wiki for a debug adapter are not working, consider that debug adapters may have made changes since the instructions were written. You may want to read the release notes of the debug adapters or try with an older version. Please update the wiki if you discover outdated examples.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Have a basic debugger in Neovim.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extensibility and double as a DAP client library. This allows other plugins to extend the debugging experience. Either by improving the UI or by making it easier to debug parts of an application.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Examples of UI/UX extensions are &lt;a href=&#34;https://github.com/theHamsta/nvim-dap-virtual-text&#34;&gt;nvim-dap-virtual-text&lt;/a&gt; and &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Examples for language specific extensions include &lt;a href=&#34;https://github.com/mfussenegger/nvim-jdtls&#34;&gt;nvim-jdtls&lt;/a&gt; and &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap-python&#34;&gt;nvim-dap-python&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;All known extensions are listed in the &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Extensions&#34;&gt;Wiki&lt;/a&gt;. The wiki is community maintained. Please add new extensions if you built one or if you discovered one that&#39;s not listed.&lt;/p&gt; &#xA;&lt;h2&gt;Non-Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Debug adapter installations are out of scope. It&#39;s not the business of an editor plugin to re-invent a package manager. Use your system package manager. Use Nix. Use Ansible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/nvim-lua/wishlist/issues/37#issuecomment-1023363686&#34;&gt;nvim-dapconfig&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Vim support. It&#39;s not going to happen. Use &lt;a href=&#34;https://github.com/puremourning/vimspector&#34;&gt;vimspector&lt;/a&gt; instead.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/puremourning/vimspector&#34;&gt;vimspector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Give concrete feedback about usability.&lt;/li&gt; &#xA; &lt;li&gt;Triage issues. Many of the problems people encounter are debug adapter specific.&lt;/li&gt; &#xA; &lt;li&gt;Improve upstream debug adapter documentation to make them more editor agnostic.&lt;/li&gt; &#xA; &lt;li&gt;Improve the Wiki. But please refrain from turning it into comprehensive debug adapter documentation that should go upstream.&lt;/li&gt; &#xA; &lt;li&gt;Write extensions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before making direct code contributions, please create a discussion or issue to clarify whether the change is in scope of the nvim-dap core.&lt;/p&gt; &#xA;&lt;p&gt;Please keep pull requests focused and don&#39;t change multiple things at the same time.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; launch debug adapter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; attach to debug adapter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; toggle breakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; breakpoints with conditions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; logpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; set exception breakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; step over, step into, step out&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; step back, reverse continue&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Goto&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; restart&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; stop&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; pause&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; evaluate expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; REPL (incl. commands to show threads, frames and scopes)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>