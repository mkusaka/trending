<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-20T01:44:40Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sindrets/diffview.nvim</title>
    <updated>2022-11-20T01:44:40Z</updated>
    <id>tag:github.com,2022-11-20:/sindrets/diffview.nvim</id>
    <link href="https://github.com/sindrets/diffview.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Single tabpage interface for easily cycling through diffs for all modified files for any git rev.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Diffview.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Single tabpage interface for easily cycling through diffs for all modified files for any git rev.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2786478/131269942-e34100dd-cbb9-48fe-af31-6e518ce06e9e.png&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Vim&#39;s diff mode is pretty good, but there is no convenient way to quickly bring up all modified files in a diffsplit. This plugin aims to provide a simple, unified, single tabpage interface that lets you easily review all changed files for any git rev.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git ≥ 2.31.0&lt;/li&gt; &#xA; &lt;li&gt;Neovim ≥ 0.7.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; (optional) For file icons&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your package manager of choice.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Plug&#xA;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;sindrets/diffview.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Packer&#xA;use { &#39;sindrets/diffview.nvim&#39;, requires = &#39;nvim-lua/plenary.nvim&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Merge Tool&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2786478/188286293-13bbf0ab-3595-425d-ba4a-12f514c17eb6.png&#34; alt=&#34;merge tool showcase&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Opening a diff view during a merge or a rebase will list the conflicted files in their own section. When opening a conflicted file, it will open in a 3-way diff allowing you to resolve the merge conflicts with the context of the target branch&#39;s version, as well as the version from the branch which is being merged.&lt;/p&gt; &#xA;&lt;p&gt;The 3-way diff is only the default layout for merge conflicts. There are multiple variations on this layout, a 4-way diff layout, and a single window layout available.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the normal &lt;code&gt;:h copy-diffs&lt;/code&gt; mappings, there are default mappings provided for jumping between conflict markers, obtaining a hunk directly from any of the diff buffers, and accepting any one, all, or none of the versions of a file given by a conflict region.&lt;/p&gt; &#xA;&lt;p&gt;For more information on the merge tool, mappings, layouts and how to configure them, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:h diffview-merge-tool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:h diffview-config-view.x.layout&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;File History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2786478/188331057-f9ec9a0d-8cda-4ff8-ac98-febcc7aa4010.png&#34; alt=&#34;file history showcase&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The file history view allows you to list all the commits that affected a given set of paths, and view the changes made in a diff split. This is a porcelain interface for git-log, and supports a good number of its options. Things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filtering commits by grepping commit messages and commit authors.&lt;/li&gt; &#xA; &lt;li&gt;Tracing the line evolution of a given set of line ranges for multiple files.&lt;/li&gt; &#xA; &lt;li&gt;Only listing changes for a specific commit range, branch, or tag.&lt;/li&gt; &#xA; &lt;li&gt;Following file changes through renames.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Get started by opening file history for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The current branch: &lt;code&gt;:DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The current file: &lt;code&gt;:DiffviewFileHistory %&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more info, see &lt;code&gt;:h :DiffviewFileHistory&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;:DiffviewOpen [git rev] [options] [ -- {paths...}]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;:DiffviewOpen&lt;/code&gt; with no args opens a new Diffview that compares against the current index. You can also provide any valid git rev to view only changes for that rev.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewOpen&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~4..HEAD~2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d^!&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d..519b30e&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewOpen origin/main...HEAD&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also provide additional paths to narrow down what files are shown:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~2 -- lua/diffview plugin&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For information about additional &lt;code&gt;[options]&lt;/code&gt;, visit the &lt;a href=&#34;https://github.com/sindrets/diffview.nvim/raw/main/doc/diffview.txt&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additional commands for convenience:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewClose&lt;/code&gt;: Close the current diffview. You can also use &lt;code&gt;:tabclose&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewToggleFiles&lt;/code&gt;: Toggle the file panel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewFocusFiles&lt;/code&gt;: Bring focus to the file panel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewRefresh&lt;/code&gt;: Update stats and entries in the file list of the current Diffview.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With a Diffview open and the default key bindings, you can cycle through changed files with &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;s-tab&amp;gt;&lt;/code&gt; (see configuration to change the key bindings).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;:[range]DiffviewFileHistory [paths] [options]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Opens a new file history view that lists all commits that affected the given paths. This is a porcelain interface for git-log. Both &lt;code&gt;[paths]&lt;/code&gt; and &lt;code&gt;[options]&lt;/code&gt; may be specified in any order, even interchangeably.&lt;/p&gt; &#xA;&lt;p&gt;If no &lt;code&gt;[paths]&lt;/code&gt; are given, defaults to the top-level of the working tree. The top-level will be inferred from the current buffer when possible, otherwise the cwd is used. Multiple &lt;code&gt;[paths]&lt;/code&gt; may be provided and git pathspec is supported.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;[range]&lt;/code&gt; is given, the file history view will trace the line evolution of the given range in the current file (for more info, see the &lt;code&gt;-L&lt;/code&gt; flag in the docs).&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewFileHistory %&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewFileHistory path/to/some/file.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewFileHistory path/to/some/directory&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewFileHistory include/this and/this :!but/not/this&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewFileHistory --range=origin..HEAD&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:DiffviewFileHistory --range=feat/example-branch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:&#39;&amp;lt;,&#39;&amp;gt;DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;details&gt; &#xA; &lt;summary style=&#34;cursor: pointer&#34;&gt;&lt;b&gt;Example config with default values&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;local actions = require(&#34;diffview.actions&#34;)&#xA;&#xA;require(&#34;diffview&#34;).setup({&#xA;  diff_binaries = false,    -- Show diffs for binaries&#xA;  enhanced_diff_hl = false, -- See &#39;:h diffview-config-enhanced_diff_hl&#39;&#xA;  git_cmd = { &#34;git&#34; },      -- The git executable followed by default args.&#xA;  use_icons = true,         -- Requires nvim-web-devicons&#xA;  watch_index = true,       -- Update views and index buffers when the git index changes.&#xA;  icons = {                 -- Only applies when use_icons is true.&#xA;    folder_closed = &#34;&#34;,&#xA;    folder_open = &#34;&#34;,&#xA;  },&#xA;  signs = {&#xA;    fold_closed = &#34;&#34;,&#xA;    fold_open = &#34;&#34;,&#xA;    done = &#34;✓&#34;,&#xA;  },&#xA;  view = {&#xA;    -- Configure the layout and behavior of different types of views.&#xA;    -- Available layouts: &#xA;    --  &#39;diff1_plain&#39;&#xA;    --    |&#39;diff2_horizontal&#39;&#xA;    --    |&#39;diff2_vertical&#39;&#xA;    --    |&#39;diff3_horizontal&#39;&#xA;    --    |&#39;diff3_vertical&#39;&#xA;    --    |&#39;diff3_mixed&#39;&#xA;    --    |&#39;diff4_mixed&#39;&#xA;    -- For more info, see &#39;:h diffview-config-view.x.layout&#39;.&#xA;    default = {&#xA;      -- Config for changed files, and staged files in diff views.&#xA;      layout = &#34;diff2_horizontal&#34;,&#xA;    },&#xA;    merge_tool = {&#xA;      -- Config for conflicted files in diff views during a merge or rebase.&#xA;      layout = &#34;diff3_horizontal&#34;,&#xA;      disable_diagnostics = true,   -- Temporarily disable diagnostics for conflict buffers while in the view.&#xA;    },&#xA;    file_history = {&#xA;      -- Config for changed files in file history views.&#xA;      layout = &#34;diff2_horizontal&#34;,&#xA;    },&#xA;  },&#xA;  file_panel = {&#xA;    listing_style = &#34;tree&#34;,             -- One of &#39;list&#39; or &#39;tree&#39;&#xA;    tree_options = {                    -- Only applies when listing_style is &#39;tree&#39;&#xA;      flatten_dirs = true,              -- Flatten dirs that only contain one single dir&#xA;      folder_statuses = &#34;only_folded&#34;,  -- One of &#39;never&#39;, &#39;only_folded&#39; or &#39;always&#39;.&#xA;    },&#xA;    win_config = {                      -- See &#39;:h diffview-config-win_config&#39;&#xA;      position = &#34;left&#34;,&#xA;      width = 35,&#xA;      win_opts = {}&#xA;    },&#xA;  },&#xA;  file_history_panel = {&#xA;    log_options = {   -- See &#39;:h diffview-config-log_options&#39;&#xA;      single_file = {&#xA;        diff_merges = &#34;combined&#34;,&#xA;      },&#xA;      multi_file = {&#xA;        diff_merges = &#34;first-parent&#34;,&#xA;      },&#xA;    },&#xA;    win_config = {    -- See &#39;:h diffview-config-win_config&#39;&#xA;      position = &#34;bottom&#34;,&#xA;      height = 16,&#xA;      win_opts = {}&#xA;    },&#xA;  },&#xA;  commit_log_panel = {&#xA;    win_config = {   -- See &#39;:h diffview-config-win_config&#39;&#xA;      win_opts = {},&#xA;    }&#xA;  },&#xA;  default_args = {    -- Default args prepended to the arg-list for the listed commands&#xA;    DiffviewOpen = {},&#xA;    DiffviewFileHistory = {},&#xA;  },&#xA;  hooks = {},         -- See &#39;:h diffview-config-hooks&#39;&#xA;  keymaps = {&#xA;    disable_defaults = false, -- Disable the default keymaps&#xA;    view = {&#xA;      -- The `view` bindings are active in the diff buffers, only when the current&#xA;      -- tabpage is a Diffview.&#xA;      [&#34;&amp;lt;tab&amp;gt;&#34;]      = actions.select_next_entry,         -- Open the diff for the next file&#xA;      [&#34;&amp;lt;s-tab&amp;gt;&#34;]    = actions.select_prev_entry,         -- Open the diff for the previous file&#xA;      [&#34;gf&#34;]         = actions.goto_file,                 -- Open the file in a new split in the previous tabpage&#xA;      [&#34;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&#34;] = actions.goto_file_split,           -- Open the file in a new split&#xA;      [&#34;&amp;lt;C-w&amp;gt;gf&#34;]    = actions.goto_file_tab,             -- Open the file in a new tabpage&#xA;      [&#34;&amp;lt;leader&amp;gt;e&#34;]  = actions.focus_files,               -- Bring focus to the file panel&#xA;      [&#34;&amp;lt;leader&amp;gt;b&#34;]  = actions.toggle_files,              -- Toggle the file panel.&#xA;      [&#34;g&amp;lt;C-x&amp;gt;&#34;]     = actions.cycle_layout,              -- Cycle through available layouts.&#xA;      [&#34;[x&#34;]         = actions.prev_conflict,             -- In the merge_tool: jump to the previous conflict&#xA;      [&#34;]x&#34;]         = actions.next_conflict,             -- In the merge_tool: jump to the next conflict&#xA;      [&#34;&amp;lt;leader&amp;gt;co&#34;] = actions.conflict_choose(&#34;ours&#34;),   -- Choose the OURS version of a conflict&#xA;      [&#34;&amp;lt;leader&amp;gt;ct&#34;] = actions.conflict_choose(&#34;theirs&#34;), -- Choose the THEIRS version of a conflict&#xA;      [&#34;&amp;lt;leader&amp;gt;cb&#34;] = actions.conflict_choose(&#34;base&#34;),   -- Choose the BASE version of a conflict&#xA;      [&#34;&amp;lt;leader&amp;gt;ca&#34;] = actions.conflict_choose(&#34;all&#34;),    -- Choose all the versions of a conflict&#xA;      [&#34;dx&#34;]         = actions.conflict_choose(&#34;none&#34;),   -- Delete the conflict region&#xA;    },&#xA;    diff1 = { --[[ Mappings in single window diff layouts ]] },&#xA;    diff2 = { --[[ Mappings in 2-way diff layouts ]] },&#xA;    diff3 = {&#xA;      -- Mappings in 3-way diff layouts&#xA;      { { &#34;n&#34;, &#34;x&#34; }, &#34;2do&#34;, actions.diffget(&#34;ours&#34;) },   -- Obtain the diff hunk from the OURS version of the file&#xA;      { { &#34;n&#34;, &#34;x&#34; }, &#34;3do&#34;, actions.diffget(&#34;theirs&#34;) }, -- Obtain the diff hunk from the THEIRS version of the file&#xA;    },&#xA;    diff4 = {&#xA;      -- Mappings in 4-way diff layouts&#xA;      { { &#34;n&#34;, &#34;x&#34; }, &#34;1do&#34;, actions.diffget(&#34;base&#34;) },   -- Obtain the diff hunk from the BASE version of the file&#xA;      { { &#34;n&#34;, &#34;x&#34; }, &#34;2do&#34;, actions.diffget(&#34;ours&#34;) },   -- Obtain the diff hunk from the OURS version of the file&#xA;      { { &#34;n&#34;, &#34;x&#34; }, &#34;3do&#34;, actions.diffget(&#34;theirs&#34;) }, -- Obtain the diff hunk from the THEIRS version of the file&#xA;    },&#xA;    file_panel = {&#xA;      [&#34;j&#34;]             = actions.next_entry,         -- Bring the cursor to the next file entry&#xA;      [&#34;&amp;lt;down&amp;gt;&#34;]        = actions.next_entry,&#xA;      [&#34;k&#34;]             = actions.prev_entry,         -- Bring the cursor to the previous file entry.&#xA;      [&#34;&amp;lt;up&amp;gt;&#34;]          = actions.prev_entry,&#xA;      [&#34;&amp;lt;cr&amp;gt;&#34;]          = actions.select_entry,       -- Open the diff for the selected entry.&#xA;      [&#34;o&#34;]             = actions.select_entry,&#xA;      [&#34;&amp;lt;2-LeftMouse&amp;gt;&#34;] = actions.select_entry,&#xA;      [&#34;-&#34;]             = actions.toggle_stage_entry, -- Stage / unstage the selected entry.&#xA;      [&#34;S&#34;]             = actions.stage_all,          -- Stage all entries.&#xA;      [&#34;U&#34;]             = actions.unstage_all,        -- Unstage all entries.&#xA;      [&#34;X&#34;]             = actions.restore_entry,      -- Restore entry to the state on the left side.&#xA;      [&#34;L&#34;]             = actions.open_commit_log,    -- Open the commit log panel.&#xA;      [&#34;&amp;lt;c-b&amp;gt;&#34;]         = actions.scroll_view(-0.25), -- Scroll the view up&#xA;      [&#34;&amp;lt;c-f&amp;gt;&#34;]         = actions.scroll_view(0.25),  -- Scroll the view down&#xA;      [&#34;&amp;lt;tab&amp;gt;&#34;]         = actions.select_next_entry,&#xA;      [&#34;&amp;lt;s-tab&amp;gt;&#34;]       = actions.select_prev_entry,&#xA;      [&#34;gf&#34;]            = actions.goto_file,&#xA;      [&#34;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&#34;]    = actions.goto_file_split,&#xA;      [&#34;&amp;lt;C-w&amp;gt;gf&#34;]       = actions.goto_file_tab,&#xA;      [&#34;i&#34;]             = actions.listing_style,        -- Toggle between &#39;list&#39; and &#39;tree&#39; views&#xA;      [&#34;f&#34;]             = actions.toggle_flatten_dirs,  -- Flatten empty subdirectories in tree listing style.&#xA;      [&#34;R&#34;]             = actions.refresh_files,        -- Update stats and entries in the file list.&#xA;      [&#34;&amp;lt;leader&amp;gt;e&#34;]     = actions.focus_files,&#xA;      [&#34;&amp;lt;leader&amp;gt;b&#34;]     = actions.toggle_files,&#xA;      [&#34;g&amp;lt;C-x&amp;gt;&#34;]        = actions.cycle_layout,&#xA;      [&#34;[x&#34;]            = actions.prev_conflict,&#xA;      [&#34;]x&#34;]            = actions.next_conflict,&#xA;    },&#xA;    file_history_panel = {&#xA;      [&#34;g!&#34;]            = actions.options,          -- Open the option panel&#xA;      [&#34;&amp;lt;C-A-d&amp;gt;&#34;]       = actions.open_in_diffview, -- Open the entry under the cursor in a diffview&#xA;      [&#34;y&#34;]             = actions.copy_hash,        -- Copy the commit hash of the entry under the cursor&#xA;      [&#34;L&#34;]             = actions.open_commit_log,&#xA;      [&#34;zR&#34;]            = actions.open_all_folds,&#xA;      [&#34;zM&#34;]            = actions.close_all_folds,&#xA;      [&#34;j&#34;]             = actions.next_entry,&#xA;      [&#34;&amp;lt;down&amp;gt;&#34;]        = actions.next_entry,&#xA;      [&#34;k&#34;]             = actions.prev_entry,&#xA;      [&#34;&amp;lt;up&amp;gt;&#34;]          = actions.prev_entry,&#xA;      [&#34;&amp;lt;cr&amp;gt;&#34;]          = actions.select_entry,&#xA;      [&#34;o&#34;]             = actions.select_entry,&#xA;      [&#34;&amp;lt;2-LeftMouse&amp;gt;&#34;] = actions.select_entry,&#xA;      [&#34;&amp;lt;c-b&amp;gt;&#34;]         = actions.scroll_view(-0.25),&#xA;      [&#34;&amp;lt;c-f&amp;gt;&#34;]         = actions.scroll_view(0.25),&#xA;      [&#34;&amp;lt;tab&amp;gt;&#34;]         = actions.select_next_entry,&#xA;      [&#34;&amp;lt;s-tab&amp;gt;&#34;]       = actions.select_prev_entry,&#xA;      [&#34;gf&#34;]            = actions.goto_file,&#xA;      [&#34;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&#34;]    = actions.goto_file_split,&#xA;      [&#34;&amp;lt;C-w&amp;gt;gf&#34;]       = actions.goto_file_tab,&#xA;      [&#34;&amp;lt;leader&amp;gt;e&#34;]     = actions.focus_files,&#xA;      [&#34;&amp;lt;leader&amp;gt;b&#34;]     = actions.toggle_files,&#xA;      [&#34;g&amp;lt;C-x&amp;gt;&#34;]        = actions.cycle_layout,&#xA;    },&#xA;    option_panel = {&#xA;      [&#34;&amp;lt;tab&amp;gt;&#34;] = actions.select_entry,&#xA;      [&#34;q&#34;]     = actions.close,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Hooks&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;hooks&lt;/code&gt; table allows you to define callbacks for various events emitted from Diffview. The available hooks are documented in detail in &lt;code&gt;:h diffview-config-hooks&lt;/code&gt;. The hook events are also available as User autocommands. See &lt;code&gt;:h diffview-user-autocmds&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;hooks = {&#xA;  diff_buf_read = function(bufnr)&#xA;    -- Change local options in diff buffers&#xA;    vim.opt_local.wrap = false&#xA;    vim.opt_local.list = false&#xA;    vim.opt_local.colorcolumn = { 80 }&#xA;  end,&#xA;  view_opened = function(view)&#xA;    print(&#xA;      (&#34;A new %s was opened on tab page %d!&#34;)&#xA;      :format(view:class():name(), view.tabpage)&#xA;    )&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Keymaps&lt;/h3&gt; &#xA;&lt;p&gt;The keymaps config is structured as a table with sub-tables for various different contexts where mappings can be declared. In these sub-tables key-value pairs are treated as the &lt;code&gt;{lhs}&lt;/code&gt; and &lt;code&gt;{rhs}&lt;/code&gt; of a normal mode mapping. These mappings all use the &lt;code&gt;:map-arguments&lt;/code&gt; &lt;code&gt;silent&lt;/code&gt;, &lt;code&gt;nowait&lt;/code&gt;, and &lt;code&gt;noremap&lt;/code&gt;. The implementation uses &lt;code&gt;vim.keymap.set()&lt;/code&gt;, so the &lt;code&gt;{rhs}&lt;/code&gt; can be either a vim command in the form of a string, or it can be a lua function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  view = {&#xA;    -- Vim command:&#xA;    [&#34;a&#34;] = &#34;&amp;lt;Cmd&amp;gt;echom &#39;foo&#39;&amp;lt;CR&amp;gt;&#34;,&#xA;    -- Lua function:&#xA;    [&#34;b&#34;] = function() print(&#34;bar&#34;) end,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable any single mapping without disabling them all, set its value to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  view = {&#xA;    -- Disable the default mapping for &amp;lt;tab&amp;gt;:&#xA;    [&#34;&amp;lt;tab&amp;gt;&#34;] = false,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of the mapped file panel actions also work from the view if they are added to the view maps (and vice versa). The exception is for actions that only really make sense specifically in the file panel, such as &lt;code&gt;next_entry&lt;/code&gt;, &lt;code&gt;prev_entry&lt;/code&gt;. Actions such as &lt;code&gt;toggle_stage_entry&lt;/code&gt; and &lt;code&gt;restore_entry&lt;/code&gt; work just fine from the view. When invoked from the view, these will target the file currently open in the view rather than the file under the cursor in the file panel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For more details on how to set mappings for other modes, actions, and more see:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:h diffview-config-keymaps&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:h diffview-actions&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Restoring Files&lt;/h2&gt; &#xA;&lt;p&gt;If the right side of the diff is showing the local state of a file, you can restore the file to the state from the left side of the diff (key binding &lt;code&gt;X&lt;/code&gt; from the file panel by default). The current state of the file is stored in the git object database, and a command is echoed that shows how to undo the change.&lt;/p&gt; &#xA;&lt;h2&gt;Tips and FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hide untracked files:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;DiffviewOpen -uno&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exclude certain paths:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;DiffviewOpen -- :!exclude/this :!and/this&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run as if git was started in a specific directory:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;DiffviewOpen -C/foo/bar/baz&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Diff the index against a git rev:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;DiffviewOpen HEAD~2 --cached&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Defaults to &lt;code&gt;HEAD&lt;/code&gt; if no rev is given.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Q: How do I get the diagonal lines in place of deleted lines in diff-mode?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: Change your &lt;code&gt;:h &#39;fillchars&#39;&lt;/code&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;(vimscript): &lt;code&gt;set fillchars+=diff:╱&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Note: whether or not the diagonal lines will line up nicely will depend on your terminal emulator. The terminal used in the screenshots is Kitty.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ac-custom-shaders-patch/acc-lua-internal</title>
    <updated>2022-11-20T01:44:40Z</updated>
    <id>tag:github.com,2022-11-20:/ac-custom-shaders-patch/acc-lua-internal</id>
    <link href="https://github.com/ac-custom-shaders-patch/acc-lua-internal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Some Lua internals and more built-in scripts for reference&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CSP Lua Internals&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gfycat.com/NimbleCheeryAntbear&#34;&gt;&lt;img src=&#34;https://thumbs.gfycat.com/NimbleCheeryAntbear-size_restricted.gif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some Lua internals for reference.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;included-cars&lt;/code&gt;: shared car scripts shipped with CSP builds (look for readme for information on how to include those in your car config);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;included-tools&lt;/code&gt;: shared tools shipped with CSP builds (can be accessed with Objects Inspector);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lua-module&lt;/code&gt;: code used by Small Tweaks module adding all sorts of small things, too small to be kept in C++ code (feel free to use those modules as examples);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lua-shared&lt;/code&gt;: shared libraries available by any Lua script running with CSP. To include, use “shared/” prefix, like &lt;code&gt;require(&#39;shared/socket&#39;)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-lua/kickstart.nvim</title>
    <updated>2022-11-20T01:44:40Z</updated>
    <id>tag:github.com,2022-11-20:/nvim-lua/kickstart.nvim</id>
    <link href="https://github.com/nvim-lua/kickstart.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A launch point for your personal nvim configuration&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;A starting point for Neovim that is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Small (~325 lines)&lt;/li&gt; &#xA; &lt;li&gt;Single-file&lt;/li&gt; &#xA; &lt;li&gt;Documented&lt;/li&gt; &#xA; &lt;li&gt;Modular&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Kickstart.nvim targets &lt;em&gt;only&lt;/em&gt; the Neovim releases tagged &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/stable&#34;&gt;&#39;stable&#39;&lt;/a&gt; and &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/nightly&#34;&gt;&#39;nightly&#39;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repo is meant to be used as a starting point for a user&#39;s own configuration; remove the things you don&#39;t use and add what you miss. This configuration serves as the reference configuration for the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki&#34;&gt;lspconfig wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backup your previous configuration&lt;/li&gt; &#xA; &lt;li&gt;Copy and paste the kickstart.nvim &lt;code&gt;init.lua&lt;/code&gt; into &lt;code&gt;$HOME/.config/nvim/init.lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start Neovim (&lt;code&gt;nvim&lt;/code&gt;) and run &lt;code&gt;:PackerInstall&lt;/code&gt; - ignore any error message about missing plugins, &lt;code&gt;:PackerInstall&lt;/code&gt; will fix that shortly&lt;/li&gt; &#xA; &lt;li&gt;Restart Neovim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Pull-requests are welcome. The goal of this repo is not to create a Neovim configuration framework, but to offer a starting template that shows, by example, available features in Neovim. Some things that will not be included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom language server configuration (null-ls templates)&lt;/li&gt; &#xA; &lt;li&gt;Theming beyond a default colorscheme necessary for LSP highlight groups&lt;/li&gt; &#xA; &lt;li&gt;Lazy-loading. Kickstart.nvim should start within 40 ms on modern hardware. Please profile and contribute to upstream plugins to optimize startup time instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each PR, especially those which increase the line count, should have a description as to why the PR is necessary.&lt;/p&gt;</summary>
  </entry>
</feed>