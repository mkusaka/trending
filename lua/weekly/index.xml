<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-14T02:00:49Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iDvel/rime-ice</title>
    <updated>2024-01-14T02:00:49Z</updated>
    <id>tag:github.com,2024-01-14:/iDvel/rime-ice</id>
    <link href="https://github.com/iDvel/rime-ice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rime 配置：雾凇拼音 | 长期维护的简体词库&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;雾凇拼音&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/demo.webp&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;功能齐全，词库体验良好，长期更新修订。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rime.im/&#34;&gt;RIME(Rime Input Method Engine) / 中州韵输入法引擎&lt;/a&gt; 是一个跨平台的输入法算法框架。&lt;/p&gt; &#xA;&lt;p&gt;这里是 Rime 的一份配置仓库。雾凇拼音提供了一套开箱即用的完整配置，包含了输入方案（全拼、双拼）、长期维护的词库及各项扩展功能。用户需要下载平台对应的前端，并将此配置放到配置目录。&lt;/p&gt; &#xA;&lt;p&gt;详细介绍：&lt;a href=&#34;https://dvel.me/posts/rime-ice/&#34;&gt;Rime 配置：雾凇拼音&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iDvel/rime-ice/issues/133&#34;&gt;常见问题&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/CHANGELOG.md&#34;&gt;更新日志&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;基本套路&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;简体 | 全拼 | 双拼&lt;/li&gt; &#xA; &lt;li&gt;主要功能 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tumuyan/rime-melt&#34;&gt;melt_eng&lt;/a&gt; 英文输入&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dvel.me/posts/make-rime-en-better/&#34;&gt;优化英文输入体验&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://cheonhyeong.com/Simplified/download.html&#34;&gt;两分输入法&lt;/a&gt; 拼字&lt;/li&gt; &#xA;   &lt;li&gt;自整理的 Emoji&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BlindingDark/rime-lua-select-character&#34;&gt;以词定字&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tumuyan/rime-melt/raw/master/lua/melt.lua&#34;&gt;长词优先&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&#34;&gt;Unicode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://wb98.gitee.io/&#34;&gt;数字、人民币大写&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;日期、时间、星期、农历&lt;/li&gt; &#xA;   &lt;li&gt;常见错音错字提示&lt;/li&gt; &#xA;   &lt;li&gt;所有标点符号直接上屏，/ 模式改为 v 模式，/ 直接上屏&lt;/li&gt; &#xA;   &lt;li&gt;增加了许多拼音纠错&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;简体字表、词库 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/iDvel/The-Table-of-General-Standard-Chinese-Characters&#34;&gt;《通用规范汉字表》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://bbs.pinyin.thunisoft.com/forum.php?mod=viewthread&amp;amp;tid=30049&#34;&gt;华宇野风系统词库&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/thunlp/THUOCL&#34;&gt;清华大学开源词库&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gist.github.com/indiejoseph/eae09c673460aa0b56db&#34;&gt;《现代汉语常用词表》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://forum.freemdict.com/t/topic/12102&#34;&gt;《现代汉语词典》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://forum.freemdict.com/t/topic/1211&#34;&gt;《同义词词林》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://forum.freemdict.com/t/topic/11407&#34;&gt;《新华成语大词典》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ai.tencent.com/ailab/nlp/en/download.html&#34;&gt;腾讯词向量&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;词库修订 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;校对大量异形词、错别字、错误注音&lt;/li&gt; &#xA;   &lt;li&gt;全词库完成注音&lt;/li&gt; &#xA;   &lt;li&gt;同义多音字注音&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;长期维护词库&lt;/h2&gt; &#xA;&lt;p&gt;因为没有找到一份比较好的词库，干脆自己维护一个。综合了几个不错的词库，精心调教了很多。&lt;/p&gt; &#xA;&lt;p&gt;主要维护的词库：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;8105&lt;/code&gt; 字表。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;base&lt;/code&gt; 基础词库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext&lt;/code&gt; 扩展词库，小词库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tencent&lt;/code&gt; 扩展词库，大词库。&lt;/li&gt; &#xA; &lt;li&gt;Emoji&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;维护内容主要是异形词、错别字的校对，错误注音的修正，缺失的常用词汇的增添，词频的调整。&lt;/p&gt; &#xA;&lt;p&gt;欢迎在词库方面提 issue，我会及时更新修正。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;p&gt;⚠️ 单独使用词库注意事项：&lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 下面包含了大写字母，这和配置有些许绑定，可以直接删除，详细说明：&lt;a href=&#34;https://github.com/iDvel/rime-ice/issues/356&#34;&gt;#356&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;雾凇拼音中多个文件可能与其他方案同名冲突，如果是新手想一键安装，建议备份原先配置，清空配置目录再导入。&lt;/p&gt; &#xA;&lt;p&gt;配置目录为小狼毫的 &lt;code&gt;%APPDATA%\Rime&lt;/code&gt;，鼠须管的 &lt;code&gt;~/Library/Rime&lt;/code&gt;，可通过右键菜单栏图标打开。&lt;/p&gt; &#xA;&lt;h3&gt;手动安装&lt;/h3&gt; &#xA;&lt;p&gt;将仓库所有文件复制粘贴到配置目录，重新部署。&lt;/p&gt; &#xA;&lt;p&gt;更新词库，手动覆盖 &lt;code&gt;cn_dicts&lt;/code&gt; &lt;code&gt;en_dcits&lt;/code&gt; &lt;code&gt;opencc&lt;/code&gt; 三个文件夹。&lt;/p&gt; &#xA;&lt;h3&gt;东风破 &lt;a href=&#34;https://github.com/rime/plum&#34;&gt;plum&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;所有配方（&lt;code&gt;others/recipes/*.recipe.yaml&lt;/code&gt;）只是简单地更新覆盖文件，适合更新词库时使用。后四个配方只是更新词库文件，并不更新 &lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.dict.yaml&lt;/code&gt;，因为用户可能会挂载其他词库。如果更新后部署时报错，可能是增、删、改了文件名，需要检查上面两个文件和词库的对应关系。&lt;/p&gt; &#xA;&lt;p&gt;安装或更新：全部文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：所有词库文件（包含下面三个）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/all_dicts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：拼音词库文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/cn_dicts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：英文词库文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/en_dicts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：opencc(emoji)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/opencc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;仓输入法 &lt;a href=&#34;https://github.com/imfuxiao/Hamster&#34;&gt;Hamster&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;参考 &lt;a href=&#34;https://github.com/imfuxiao/Hamster/wiki/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%22%E9%9B%BE%E6%B7%9E%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%96%B9%E6%A1%88%22&#34;&gt;如何导入&#34;雾淞拼音输入方案&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;仓输入法目前已内置雾凇拼音，也可以通过【输入方案设置 - 右上角加号 - 方案下载 - 覆盖并部署】来更新雾凇拼音。&lt;/p&gt; &#xA;&lt;p&gt;使用九宫格，需要同时启用九宫格方案（输入方案设置）和九宫格布局（键盘设置 - 键盘布局 - 中文 9 键）。&lt;/p&gt; &#xA;&lt;h3&gt;自动部署脚本&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Mark24Code/rime-auto-deploy&#34;&gt;Mark24Code/rime-auto-deploy&lt;/a&gt; 一个自动部署脚本，集成了雾凇拼音，帮助无痛快速安装、部署 Rime 输入法（中州韵、小狼毫，鼠须管）以及部署配置。&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;使用 AUR helper 安装 &lt;a href=&#34;https://aur.archlinux.org/packages/rime-ice-git&#34;&gt;rime-ice-git&lt;/a&gt; 包即可。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# paru 默认会每次重新评估 pkgver，所以有新的提交时 paru 会自动更新，&#xA;# yay 默认未开启此功能，可以通过此命令开启&#xA;# yay -Y --devel --save&#xA;&#xA;paru -S rime-ice-git&#xA;# yay -S rime-ice-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;推荐使用&lt;a href=&#34;https://github.com/rime/home/wiki/Configuration#%E8%A3%9C%E9%9D%AA&#34;&gt;补丁&lt;/a&gt;的方式启用。&lt;/p&gt; &#xA;&lt;p&gt;参考下面的配置示例，修改对应输入法框架用户目录（见下）中的 &lt;code&gt;default.custom.yaml&lt;/code&gt; 文件&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iBus 为 &lt;code&gt;$HOME/.config/ibus/rime/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fcitx5 为 &lt;code&gt;$HOME/.local/share/fcitx5/rime/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;default.custom.yaml&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;patch:&#xA;  # 仅使用「雾凇拼音」的默认配置，配置此行即可&#xA;  __include: rime_ice_suggestion:/&#xA;  # 以下根据自己所需自行定义，仅做参考。&#xA;  # 针对对应处方的定制条目，请使用 &amp;lt;recipe&amp;gt;.custom.yaml 中配置，例如 rime_ice.custom.yaml&#xA;  __patch:&#xA;    key_binder/+:&#xA;      select_first_character: &#34;bracketleft&#34; # 即 [&#xA;      select_last_character: &#34;bracketright&#34; # 即 ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;感谢 ❤️&lt;/h2&gt; &#xA;&lt;p&gt;感谢上述提到的词库、方案及功能参考。&lt;/p&gt; &#xA;&lt;p&gt;感谢 &lt;a href=&#34;https://github.com/Huandeep&#34;&gt;@Huandeep&lt;/a&gt; 整理的多个词库。&lt;/p&gt; &#xA;&lt;p&gt;感谢 &lt;a href=&#34;https://github.com/mirtlecn&#34;&gt;@Mirtle&lt;/a&gt; 完善的多个功能。&lt;/p&gt; &#xA;&lt;p&gt;感谢所有贡献者。&lt;/p&gt; &#xA;&lt;p&gt;搜狗转 Rime：&lt;a href=&#34;https://github.com/lewangdev/scel2txt&#34;&gt;lewangdev/scel2txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;大量参考：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jiaodui.com/bbs/&#34;&gt;校对标准论坛&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zdic.net/&#34;&gt;汉典&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dict.idioms.moe.edu.tw/&#34;&gt;成语典&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to JetBrains for the OSS development license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jb.gg/OpenSourceSupport&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&#34; alt=&#34;JetBrains&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;赞助 ☕&lt;/h2&gt; &#xA;&lt;p&gt;如果觉得项目不错，可以请 Dvel 吃个煎饼馃子。&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/sponsor.webp&#34; alt=&#34;请 Dvel 吃个煎饼馃子&#34; width=&#34;600&#34;&gt;</summary>
  </entry>
  <entry>
    <title>j-hui/fidget.nvim</title>
    <updated>2024-01-14T02:00:49Z</updated>
    <id>tag:github.com,2024-01-14:/j-hui/fidget.nvim</id>
    <link href="https://github.com/j-hui/fidget.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💫 Extensible UI for Neovim notifications and LSP progress messages.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;💫 Fidget&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/j-hui/fidget.nvim/main/doc/fidget.txt&#34;&gt;&lt;img src=&#34;https://github.com/j-hui/fidget.nvim/actions/workflows/docs.yaml/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://luarocks.org/modules/j-hui/fidget.nvim&#34;&gt;&lt;img src=&#34;https://img.shields.io/luarocks/v/j-hui/fidget.nvim?logo=lua&amp;amp;color=purple&#34; alt=&#34;LuaRocks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Extensible UI for Neovim notifications and LSP progress messages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/j-hui/fidget.nvim/raw/media/gifs/fidget-demo-rust-analyzer.gif?raw=true&#34; alt=&#34;fidget.nvim demo&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Demo setup&lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;Note that this demo may not always reflect the exact behavior of the latest release.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;This screen recording was taken as I opened a Rust file I&#39;m working on, triggering &lt;code&gt;rust-analyzer&lt;/code&gt; to send me some LSP progress messages.&lt;/p&gt; &#xA; &lt;p&gt;As those messages are ongoing, I trigger some notifications with the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local fidget = require(&#34;fidget&#34;)&#xA;&#xA;vim.keymap.set(&#34;n&#34;, &#34;A&#34;, function()&#xA;  fidget.notify(&#34;This is from fidget.notify().&#34;)&#xA;end)&#xA;&#xA;vim.keymap.set(&#34;n&#34;, &#34;B&#34;, function()&#xA;  fidget.notify(&#34;This is also from fidget.notify().&#34;, vim.log.levels.WARN)&#xA;end)&#xA;&#xA;vim.keymap.set(&#34;n&#34;, &#34;C&#34;, function()&#xA;  fidget.notify(&#34;fidget.notify() supports annotations...&#34;, nil, { annote = &#34;MY NOTE&#34;, key = &#34;foobar&#34; })&#xA;end)&#xA;&#xA;vim.keymap.set(&#34;n&#34;, &#34;D&#34;, function()&#xA;  fidget.notify(nil, vim.log.levels.ERROR, { annote = &#34;bottom text&#34;, key = &#34;foobar&#34; })&#xA;  fidget.notify(&#34;... and overwriting notifications.&#34;, vim.log.levels.WARN, { annote = &#34;YOUR AD HERE&#34; })&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;(I use normal mode keymaps to avoid going into ex mode, which would pause Fidget rendering and make the demo look glitchy...)&lt;/p&gt; &#xA; &lt;p&gt;Visible elements:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Terminal + font: &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;Kitty&lt;/a&gt; + &lt;a href=&#34;https://github.com/shannpersand/comic-shanns&#34;&gt;Comic Shanns Mono&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Editor: &lt;a href=&#34;https://github.com/neovim/neovim/tree/v0.9.4&#34;&gt;Neovim v0.9.4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Theme: &lt;a href=&#34;https://github.com/catppuccin/nvim&#34;&gt;catppuccin/nvim (mocha, dark)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Status line: &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;nvim-lualine/lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Color columns: &lt;code&gt;:set colorcolumn=81,121,+1,+2&lt;/code&gt; (sorry)&lt;/li&gt; &#xA;  &lt;li&gt;Scrollbar: &lt;a href=&#34;https://github.com/petertriho/nvim-scrollbar&#34;&gt;petertriho/nvim-scrollbar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Why?&lt;/h3&gt; &#xA;&lt;p&gt;Fidget is an unintrusive window in the corner of your editor that manages its own lifetime. Its goals are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to provide a UI for Neovim&#39;s &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#progress&#34;&gt;&lt;code&gt;$/progress&lt;/code&gt;&lt;/a&gt; handler&lt;/li&gt; &#xA; &lt;li&gt;to provide a configurable &lt;a href=&#34;https://neovim.io/doc/user/lua.html#vim.notify()&#34;&gt;&lt;code&gt;vim.notify()&lt;/code&gt;&lt;/a&gt; backend&lt;/li&gt; &#xA; &lt;li&gt;to support basic ASCII animations (Fidget spinners!) to indicate signs of life&lt;/li&gt; &#xA; &lt;li&gt;to be easy to configure, sane to maintain, and fun to hack on&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s only so much information one can stash into the status line. Besides, who doesn&#39;t love a little bit of terminal eye candy, as a treat?&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Fidget requires Neovim v0.8.0+.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to see progress notifications, you must have configured Neovim with an LSP server that uses the &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#progress&#34;&gt;&lt;code&gt;$/progress&lt;/code&gt;&lt;/a&gt; handler. For an up-to-date list of LSP servers this plugin is known to work with, see &lt;a href=&#34;https://github.com/j-hui/fidget.nvim/wiki/Known-compatible-LSP-servers&#34;&gt;this Wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install this plugin using your favorite plugin manager.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/j-hui/fidget.nvim/main/#options&#34;&gt;documentation&lt;/a&gt; for &lt;code&gt;setup()&lt;/code&gt; options.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;Lazy&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;j-hui/fidget.nvim&#34;,&#xA;  opts = {&#xA;    -- options&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;j-hui/fidget.nvim&#39;&#xA;&#xA;&#34; Make sure the plugin is installed using :PlugInstall. Then, somewhere after plug#end():&#xA;lua &amp;lt;&amp;lt;EOF&#xA;require(&#34;fidget&#34;).setup {&#xA;  -- options&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/nvim-neorocks/rocks.nvim&#34;&gt;rocks.nvim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Rocks install fidget.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;p&gt;Fidget is actively developed on the &lt;code&gt;main&lt;/code&gt; branch, and may occasionally undergo breaking changes.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to ensure configuration/API stability, you can pin your tag to one of the &lt;a href=&#34;https://github.com/j-hui/fidget.nvim/releases/&#34;&gt;release tags&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For instance, using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;Lazy&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;j-hui/fidget.nvim&#34;,&#xA;  tag = &#34;v1.0.0&#34;,&#xA;  opts = {&#xA;    -- options&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;Fidget can be configured by passing a table of options to the &lt;code&gt;setup()&lt;/code&gt;. Available options are shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Options related to LSP progress subsystem&#xA;  progress = {&#xA;    poll_rate = 0,                -- How and when to poll for progress messages&#xA;    suppress_on_insert = false,   -- Suppress new messages while in insert mode&#xA;    ignore_done_already = false,  -- Ignore new tasks that are already complete&#xA;    ignore_empty_message = false, -- Ignore new tasks that don&#39;t contain a message&#xA;    clear_on_detach =             -- Clear notification group when LSP server detaches&#xA;      function(client_id)&#xA;        local client = vim.lsp.get_client_by_id(client_id)&#xA;        return client and client.name or nil&#xA;      end,&#xA;    notification_group =          -- How to get a progress message&#39;s notification group key&#xA;      function(msg) return msg.lsp_client.name end,&#xA;    ignore = {},                  -- List of LSP servers to ignore&#xA;&#xA;    -- Options related to how LSP progress messages are displayed as notifications&#xA;    display = {&#xA;      render_limit = 16,          -- How many LSP messages to show at once&#xA;      done_ttl = 3,               -- How long a message should persist after completion&#xA;      done_icon = &#34;✔&#34;,            -- Icon shown when all LSP progress tasks are complete&#xA;      done_style = &#34;Constant&#34;,    -- Highlight group for completed LSP tasks&#xA;      progress_ttl = math.huge,   -- How long a message should persist when in progress&#xA;      progress_icon =             -- Icon shown when LSP progress tasks are in progress&#xA;        { pattern = &#34;dots&#34;, period = 1 },&#xA;      progress_style =            -- Highlight group for in-progress LSP tasks&#xA;        &#34;WarningMsg&#34;,&#xA;      group_style = &#34;Title&#34;,      -- Highlight group for group name (LSP server name)&#xA;      icon_style = &#34;Question&#34;,    -- Highlight group for group icons&#xA;      priority = 30,              -- Ordering priority for LSP notification group&#xA;      skip_history = true,        -- Whether progress notifications should be omitted from history&#xA;      format_message =            -- How to format a progress message&#xA;        require(&#34;fidget.progress.display&#34;).default_format_message,&#xA;      format_annote =             -- How to format a progress annotation&#xA;        function(msg) return msg.title end,&#xA;      format_group_name =         -- How to format a progress notification group&#39;s name&#xA;        function(group) return tostring(group) end,&#xA;      overrides = {               -- Override options from the default notification config&#xA;        rust_analyzer = { name = &#34;rust-analyzer&#34; },&#xA;      },&#xA;    },&#xA;&#xA;    -- Options related to Neovim&#39;s built-in LSP client&#xA;    lsp = {&#xA;      progress_ringbuf_size = 0,  -- Configure the nvim&#39;s LSP progress ring buffer size&#xA;    },&#xA;  },&#xA;&#xA;  -- Options related to notification subsystem&#xA;  notification = {&#xA;    poll_rate = 10,               -- How frequently to update and render notifications&#xA;    filter = vim.log.levels.INFO, -- Minimum notifications level&#xA;    history_size = 128,           -- Number of removed messages to retain in history&#xA;    override_vim_notify = false,  -- Automatically override vim.notify() with Fidget&#xA;    configs =                     -- How to configure notification groups when instantiated&#xA;      { default = require(&#34;fidget.notification&#34;).default_config },&#xA;    redirect =                    -- Conditionally redirect notifications to another backend&#xA;      function(msg, level, opts)&#xA;        if opts and opts.on_open then&#xA;          return require(&#34;fidget.integration.nvim-notify&#34;).delegate(msg, level, opts)&#xA;        end&#xA;      end,&#xA;&#xA;    -- Options related to how notifications are rendered as text&#xA;    view = {&#xA;      stack_upwards = true,       -- Display notification items from bottom to top&#xA;      icon_separator = &#34; &#34;,       -- Separator between group name and icon&#xA;      group_separator = &#34;---&#34;,    -- Separator between notification groups&#xA;      group_separator_hl =        -- Highlight group used for group separator&#xA;        &#34;Comment&#34;,&#xA;      render_message =            -- How to render notification messages&#xA;        function(msg, cnt)&#xA;          return cnt == 1 and msg or string.format(&#34;(%dx) %s&#34;, cnt, msg)&#xA;        end,&#xA;    },&#xA;&#xA;    -- Options related to the notification window and buffer&#xA;    window = {&#xA;      normal_hl = &#34;Comment&#34;,      -- Base highlight group in the notification window&#xA;      winblend = 100,             -- Background color opacity in the notification window&#xA;      border = &#34;none&#34;,            -- Border around the notification window&#xA;      zindex = 45,                -- Stacking priority of the notification window&#xA;      max_width = 0,              -- Maximum width of the notification window&#xA;      max_height = 0,             -- Maximum height of the notification window&#xA;      x_padding = 1,              -- Padding from right edge of window boundary&#xA;      y_padding = 0,              -- Padding from bottom edge of window boundary&#xA;      align = &#34;bottom&#34;,           -- How to align the notification window&#xA;      relative = &#34;editor&#34;,        -- What the notification window position is relative to&#xA;    },&#xA;  },&#xA;&#xA;  -- Options related to integrating with other plugins&#xA;  integration = {&#xA;    [&#34;nvim-tree&#34;] = {&#xA;      enable = true,              -- Integrate with nvim-tree/nvim-tree.lua (if installed)&#xA;    },&#xA;  },&#xA;&#xA;  -- Options related to logging&#xA;  logger = {&#xA;    level = vim.log.levels.WARN,  -- Minimum logging level&#xA;    float_precision = 0.01,       -- Limit the number of decimals displayed for floats&#xA;    path =                        -- Where Fidget writes its logs to&#xA;      string.format(&#34;%s/fidget.nvim.log&#34;, vim.fn.stdpath(&#34;cache&#34;)),&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;For more details, see &lt;a href=&#34;https://raw.githubusercontent.com/j-hui/fidget.nvim/main/doc/fidget-option.txt&#34;&gt;fidget-option.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-include-comment For more details, see |fidget-option.txt|. --&gt; &#xA;&lt;h2&gt;Lua API&lt;/h2&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;Fidget has a Lua API, with &lt;a href=&#34;https://raw.githubusercontent.com/j-hui/fidget.nvim/main/doc/fidget-api.txt&#34;&gt;documentation&lt;/a&gt; generated from source code. You are encouraged to hack around with that.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-include-comment See |fidget-api.txt|. --&gt; &#xA;&lt;!-- To re-generate commands docs, run:&#xA;:put = execute(&#39;lua print(dofile([[lua/fidget/commands.lua]]).make_panvimdocs())&#39;)&#xA;--&gt; &#xA;&lt;!-- {{{ Generated from fidget.commands.lua --&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;!-- panvimdoc-include-comment&#xA;&#xA;```vimdoc&#xA;*fidget-:Fidget* *:Fidget*&#xA;```&#xA;&#xA;--&gt; &#xA;&lt;p&gt;Fidget exposes some of its Lua API functions through &lt;code&gt;:Fidget&lt;/code&gt; sub-commands (e.g., &lt;code&gt;:Fidget clear&lt;/code&gt;), which support shell-like arguments and completion. These sub-commands are documented below.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h3&gt;&lt;code&gt;:Fidget&lt;/code&gt; sub-commands&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;:Fidget clear&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Clear active notifications&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;i&gt;Arguments&lt;/i&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Positional arguments:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;{group_key}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(any)&lt;/code&gt;&lt;/em&gt; group to clear&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;&lt;code&gt;:Fidget clear_history&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Clear notifications history&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;i&gt;Arguments&lt;/i&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Flags:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--before {seconds}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(number)&lt;/code&gt;&lt;/em&gt; filter history for items updated at least this long ago&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--group_key {group_key}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(any)&lt;/code&gt;&lt;/em&gt; clear history by group key&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--include_active {true|false}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt; whether to clear items that have not been removed (default: true)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--include_removed {true|false}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt; whether to clear items that have have been removed (default: true)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--since {seconds}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(number)&lt;/code&gt;&lt;/em&gt; filter history for items updated at most this long ago&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Positional arguments:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;{group_key}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(any)&lt;/code&gt;&lt;/em&gt; clear history by group key&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;&lt;code&gt;:Fidget history&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Show notifications history&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;i&gt;Arguments&lt;/i&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Flags:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--before {seconds}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(number)&lt;/code&gt;&lt;/em&gt; filter history for items updated at least this long ago&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--group_key {group_key}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(any)&lt;/code&gt;&lt;/em&gt; filter history by group key&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--include_active {true|false}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt; whether to clear items that have not been removed (default: &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--include_removed {true|false}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt; whether to clear items that have have been removed (default: &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--since {seconds}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(number)&lt;/code&gt;&lt;/em&gt; filter history for items updated at most this long ago&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Positional arguments:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;{group_key}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(any)&lt;/code&gt;&lt;/em&gt; filter history by group key&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;&lt;code&gt;:Fidget lsp_suppress&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Suppress LSP progress notifications&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;i&gt;Arguments&lt;/i&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Positional arguments:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;{suppress}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt; whether to suppress (omitting this argument toggles suppression)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;&lt;code&gt;:Fidget suppress&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Suppress notification window&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;i&gt;Arguments&lt;/i&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Positional arguments:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;{suppress}&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;&lt;code&gt;(boolean)&lt;/code&gt;&lt;/em&gt; whether to suppress (omitting this argument toggles suppression)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-include-comment&#xA;&#xA;```vimdoc&#xA;:Fidget clear                                           *fidget-:Fidget-clear*&#xA;&#xA;    Clear active notifications&#xA;&#xA;    Positional arguments: ~&#xA;        {group_key}                    (any)        group to clear&#xA;&#xA;&#xA;:Fidget clear_history                           *fidget-:Fidget-clear_history*&#xA;&#xA;    Clear notifications history&#xA;&#xA;    Flags: ~&#xA;        --before {seconds}             (number)     filter history for items updated at least this long ago&#xA;        --group_key {group_key}        (any)        clear history by group key&#xA;        --include_active {true|false}  (boolean)    whether to clear items that have not been removed (default: true)&#xA;        --include_removed {true|false} (boolean)    whether to clear items that have have been removed (default: true)&#xA;        --since {seconds}              (number)     filter history for items updated at most this long ago&#xA;&#xA;    Positional arguments: ~&#xA;        {group_key}                    (any)        clear history by group key&#xA;&#xA;&#xA;:Fidget history                                       *fidget-:Fidget-history*&#xA;&#xA;    Show notifications history&#xA;&#xA;    Flags: ~&#xA;        --before {seconds}             (number)     filter history for items updated at least this long ago&#xA;        --group_key {group_key}        (any)        filter history by group key&#xA;        --include_active {true|false}  (boolean)    whether to clear items that have not been removed (default: `true`)&#xA;        --include_removed {true|false} (boolean)    whether to clear items that have have been removed (default: `true`)&#xA;        --since {seconds}              (number)     filter history for items updated at most this long ago&#xA;&#xA;    Positional arguments: ~&#xA;        {group_key}                    (any)        filter history by group key&#xA;&#xA;&#xA;:Fidget lsp_suppress                             *fidget-:Fidget-lsp_suppress*&#xA;&#xA;    Suppress LSP progress notifications&#xA;&#xA;    Positional arguments: ~&#xA;        {suppress}                     (boolean)    whether to suppress (omitting this argument toggles suppression)&#xA;&#xA;&#xA;:Fidget suppress                                     *fidget-:Fidget-suppress*&#xA;&#xA;    Suppress notification window&#xA;&#xA;    Positional arguments: ~&#xA;        {suppress}                     (boolean)    whether to suppress (omitting this argument toggles suppression)&#xA;&#xA;```&#xA;--&gt; &#xA;&lt;!-- Generated from fidget.commands.lua }}} --&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;p&gt;Rather than defining its own highlights, Fidget&#39;s default configuration uses built-in highlight groups that are typically overridden by custom Vim color schemes. With any luck, these will look reasonable when rendered, but the visual outcome will really depend on what your color scheme decided to do with those highlight groups.&lt;/p&gt; &#xA;&lt;p&gt;You can override these highlight groups (e.g., &lt;code&gt;icon_style&lt;/code&gt;) using the &lt;code&gt;:h fidget-options&lt;/code&gt; shown above.&lt;/p&gt; &#xA;&lt;h2&gt;Related Work&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;rcarriga/nvim-notify&lt;/a&gt; is first and foremost a &lt;code&gt;vim.notify()&lt;/code&gt; backend, and it also supports &lt;a href=&#34;https://github.com/rcarriga/nvim-notify/wiki/Usage-Recipes#lsp-status-updates&#34;&gt;LSP progress notifications&lt;/a&gt; (with the integration seems to have been packaged up in &lt;a href=&#34;https://github.com/mrded/nvim-lsp-notify&#34;&gt;mrded/nvim-lsp-notify&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vigoux/notifier.nvim&#34;&gt;vigoux/notifier.nvim&lt;/a&gt; is a &lt;code&gt;vim.notify()&lt;/code&gt; backend that comes with first-class LSP notification support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;neoclide/coc.nvim&lt;/a&gt; provides a nice LSP progress UI in the status line, which first inspired my desire to have this feature for nvim-lsp.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/arkav/lualine-lsp-progress&#34;&gt;arkav/lualine-lsp-progress&lt;/a&gt; was the original inspiration for Fidget, and funnels LSP progress messages into &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;nvim-lualine/lualine.nvim&lt;/a&gt;. I once borrowed some of its code (though much of that code has since been rewritten).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-lua/lsp-status.nvim&#34;&gt;nvim-lua/lsp-status.nvim&lt;/a&gt; also supports showing progress text, though it requires some configuration to integrate that into their status line.&lt;/p&gt; &#xA;&lt;h3&gt;Acknowledgements&lt;/h3&gt; &#xA;&lt;p&gt;Most of the Fidget spinner patterns were adapted from the npm package &lt;a href=&#34;https://github.com/sindresorhus/cli-spinners&#34;&gt;sindresorhus/cli-spinners&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mrcjkb/rustaceanvim</title>
    <updated>2024-01-14T02:00:49Z</updated>
    <id>tag:github.com,2024-01-14:/mrcjkb/rustaceanvim</id>
    <link href="https://github.com/mrcjkb/rustaceanvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Supercharge your Rust experience in Neovim! A heavily modified fork of rust-tools.nvim&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/rustaceanvim.svg?sanitize=true&#34; alt=&#34;rustaceanvim&#34;&gt; &lt;/a&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/doc/rustaceanvim.txt&#34;&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/issues/new?assignees=&amp;amp;labels=bug&amp;amp;projects=&amp;amp;template=bug_report.yml&#34;&gt;Report Bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;projects=&amp;amp;template=feature_request.yml&#34;&gt;Request Feature&lt;/a&gt; · &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/discussions/new?category=q-a&#34;&gt;Ask Question&lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt; &lt;strong&gt; Supercharge your Rust experience in &lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt;!&lt;br&gt; A heavily modified fork of &lt;a href=&#34;https://github.com/simrat39/rust-tools.nvim&#34;&gt;rust-tools.nvim&lt;/a&gt;&lt;br&gt; &lt;/strong&gt; &lt;/p&gt; &#xA; &lt;p&gt;🦀&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/NeoVim-%2357A143.svg?&amp;amp;style=for-the-badge&amp;amp;logo=neovim&amp;amp;logoColor=white&#34; alt=&#34;Neovim&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.lua.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lua-%232C2D72.svg?style=for-the-badge&amp;amp;logo=lua&amp;amp;logoColor=white&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Rust-000000?style=for-the-badge&amp;amp;logo=rust&amp;amp;logoColor=white&#34; alt=&#34;Rust&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nixos.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/nix-0175C2?style=for-the-badge&amp;amp;logo=NixOS&amp;amp;logoColor=white&#34; alt=&#34;Nix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mrcjkb/rustaceanvim.svg?style=for-the-badge&#34; alt=&#34;GPL2 License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/mrcjkb/rustaceanvim.svg?style=for-the-badge&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/actions/workflows/nix-build.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/mrcjkb/rustaceanvim/nix-build.yml?style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://luarocks.org/modules/MrcJkb/rustaceanvim&#34;&gt;&lt;img src=&#34;https://img.shields.io/luarocks/v/MrcJkb/rustaceanvim?logo=lua&amp;amp;color=purple&amp;amp;style=for-the-badge&#34; alt=&#34;LuaRocks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Just works. &lt;a href=&#34;https://mrcjkb.dev/posts/2023-08-22-setup.html&#34;&gt;No need to call &lt;code&gt;setup&lt;/code&gt;!&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;No dependency on &lt;code&gt;lspconfig&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Lazy initialization by design.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quick Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#quick-setup&#34;&gt;Quick setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#advanced-configuration&#34;&gt;Advanced configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/discussions/122&#34;&gt;Migrating from rust-tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Required&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;neovim &amp;gt;= 0.9&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rust-analyzer.github.io/&#34;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://graphviz.org/doc/info/lang.html&#34;&gt;&lt;code&gt;dot&lt;/code&gt; from &lt;code&gt;graphviz&lt;/code&gt;&lt;/a&gt;, for crate graphs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/a&gt;, required for Cargo projects.&lt;/li&gt; &#xA; &lt;li&gt;A debug adapter (e.g. &lt;a href=&#34;https://lldb.llvm.org/&#34;&gt;&lt;code&gt;lldb&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/vadimcn/codelldb&#34;&gt;&lt;code&gt;codelldb&lt;/code&gt;&lt;/a&gt;) and &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;, required for debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is &lt;a href=&#34;https://luarocks.org/modules/MrcJkb/rustaceanvim&#34;&gt;available on LuaRocks&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-neorocks/rocks.nvim&#34;&gt;&lt;code&gt;:Rocks install rustaceanvim&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;mrcjkb/rustaceanvim&#39;,&#xA;  version = &#39;^3&#39;, -- Recommended&#xA;  ft = { &#39;rust&#39; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;It is suggested to pin to tagged releases if you would like to avoid breaking changes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To manually generate documentation, use &lt;code&gt;:helptags ALL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;For NixOS users with flakes enabled, this project provides outputs in the form of a package and an overlay; use it as you wish in your NixOS or home-manager configuration. It is also available in &lt;code&gt;nixpkgs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Look at the configuration information below to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Setup&lt;/h2&gt; &#xA;&lt;p&gt;This plugin automatically configures the &lt;code&gt;rust-analyzer&lt;/code&gt; builtin LSP client and integrates with other Rust tools. See the &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#usage&#34;&gt;Usage&lt;/a&gt; section for more info.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;Do not call the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;nvim-lspconfig.rust_analyzer&lt;/code&gt;&lt;/a&gt; setup or set up the lsp client for &lt;code&gt;rust-analyzer&lt;/code&gt; manually, as doing so may cause conflicts.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is a filetype plugin that works out of the box, so there is no need to call a &lt;code&gt;setup&lt;/code&gt; function or configure anything to get this plugin working.&lt;/p&gt; &#xA;&lt;p&gt;You will most likely want to add some keymaps. Most keymaps are only useful in rust files, so I suggest you define them in &lt;code&gt;~/.config/nvim/after/ftplugin/rust.lua&lt;/code&gt;[^1]&lt;/p&gt; &#xA;&lt;p&gt;[^1]: See &lt;a href=&#34;https://neovim.io/doc/user/starting.html#base-directories&#34;&gt;&lt;code&gt;:help base-directories&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local bufnr = vim.api.nvim_get_current_buf()&#xA;vim.keymap.set(&#xA;  &#34;n&#34;, &#xA;  &#34;&amp;lt;leader&amp;gt;a&#34;, &#xA;  function()&#xA;    vim.cmd.RustLsp(&#39;codeAction&#39;) &#xA;  end,&#xA;  { silent = true, buffer = bufnr }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;For more LSP related keymaps, &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig#suggested-configuration&#34;&gt;see the &lt;code&gt;nvim-lspconfig&lt;/code&gt; suggestions&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#advanced-configuration&#34;&gt;Advanced configuration&lt;/a&gt; section for more configuration options.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Do &lt;strong&gt;not&lt;/strong&gt; set &lt;code&gt;vim.g.rustaceanvim&lt;/code&gt; in &lt;code&gt;after/ftplugin/rust.lua&lt;/code&gt;, as the file is sourced after the plugin is initialized.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Debugging&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp debuggables [last?]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp {&#39;debuggables&#39;, &#39;last&#39; --[[ optional ]] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/ce17d228-ae0a-416a-8159-fe095a85dcb7&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Runnables&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp runnables [last?]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp {&#39;runnables&#39;, &#39;last&#39; --[[ optional ]] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/95183192-5669-4a07-804b-83f67831be57&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Expand Macros Recursively&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp expandMacro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;expandMacro&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/477d9e58-74b0-42ff-87ca-2fef34d06db3&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Rebuild proc macros&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp rebuildProcMacros&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;rebuildProcMacros&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Move Item Up/Down&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp moveItem up&#xA;:RustLsp moveItem down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;moveItem&#39;,  &#39;up&#39; }&#xA;vim.cmd.RustLsp { &#39;moveItem&#39;,  &#39;down&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Hover Actions&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Note: To activate hover actions, run the command twice. This will move you into the window, then press enter on the selection you want. Alternatively, you can set &lt;code&gt;auto_focus&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your config and you will automatically enter the hover actions window.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp hover actions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;hover&#39;, &#39;actions&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/c7b6c730-4439-47b0-9a75-7ea4e6831f7a&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Hover Range&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp hover range&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;hover&#39;, &#39;range&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Explain errors&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Display a hover window with explanations from the &lt;a href=&#34;https://doc.rust-lang.org/error_codes/error-index.html&#34;&gt;rust error codes index&lt;/a&gt; over error diagnostics (if they have an error code).&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp explainError&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;explainError&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/bac9b31c-22ca-40c4-bfd3-b8c5ba4cc49a&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Render diagnostics&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Display a hover window with the rendered diagnostic, as displayed during &lt;code&gt;cargo build&lt;/code&gt;. Useful for solving bugs around borrowing and generics, as it consolidates the important bits (sometimes across files) together.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp renderDiagnostic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;renderDiagnostic&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/a972c6b6-c504-4c2a-8380-53451bb8c2de&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Open Cargo.toml&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp openCargo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;openCargo&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Parent Module&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp parentModule&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;parentModule&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Join Lines&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Join selected lines into one, smartly fixing up whitespace, trailing commas, and braces.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp joinLines&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;joinLines&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1711539/124515923-4504e800-dde9-11eb-8d58-d97945a1a785.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Structural Search Replace&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp ssr [query]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;ssr&#39;, &#39;&amp;lt;query&amp;gt;&#39; --[[ optional ]] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/b61fbc56-ab53-48e6-bfdd-eb8d4de28795&#34; alt=&#34;tty&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;View Crate Graph&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp crateGraph [backend [output]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;crateGraph&#39;, &#39;[backend]&#39;, &#39;[output]&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;View Syntax Tree&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp syntaxTree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;syntaxTree&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/c865a263-1568-41c7-a32b-bc4a34b198dc&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Fly check&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Run &lt;code&gt;cargo check&lt;/code&gt; or another compatible command (f.x. &lt;code&gt;clippy&lt;/code&gt;) in a background thread and provide LSP diagnostics based on the output of the command.&lt;/p&gt; &#xA; &lt;p&gt;Useful in large projects where running &lt;code&gt;cargo check&lt;/code&gt; on each save can be costly.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp flyCheck [run?|clear?|cancel?]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;flyCheck&#39;) -- defaults to &#39;run&#39;&#xA;vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;run&#39; }&#xA;vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;clear&#39; }&#xA;vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;cancel&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA;  &lt;p&gt;This is only useful if you set the option, &lt;code&gt;[&#39;rust-analzyer&#39;].checkOnSave = false&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;View HIR / MIR&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Opens a buffer with a textual representation of the HIR or MIR of the function containing the cursor. Useful for debugging or when working on rust-analyzer itself.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:RustLsp view [hir|mir]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;view&#39;, &#39;hir&#39; }&#xA;vim.cmd.RustLsp { &#39;view&#39;, &#39;mir&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;p&gt;To modify the default configuration, set &lt;code&gt;vim.g.rustaceanvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/doc/rustaceanvim.txt&#34;&gt;&lt;code&gt;:help rustaceanvim.config&lt;/code&gt;&lt;/a&gt; for a detailed documentation of all available configuration options. You may need to run &lt;code&gt;:helptags ALL&lt;/code&gt; if the documentation has not been installed.&lt;/li&gt; &#xA; &lt;li&gt;The default configuration &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/lua/rustaceanvim/config/internal.lua&#34;&gt;can be found here (see &lt;code&gt;RustaceanDefaultConfig&lt;/code&gt;)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For detailed descriptions of the language server configs, see the &lt;a href=&#34;https://rust-analyzer.github.io/manual.html#configuration&#34;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The options shown below are the defaults. You only need to pass the keys to the setup function that you want to be changed, because the defaults are applied for keys that are not provided.&lt;/p&gt; &#xA;&lt;p&gt;Example config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.rustaceanvim = {&#xA;  -- Plugin configuration&#xA;  tools = {&#xA;  },&#xA;  -- LSP configuration&#xA;  server = {&#xA;    on_attach = function(client, bufnr)&#xA;      -- you can also put keymaps in here&#xA;    end,&#xA;    settings = {&#xA;      -- rust-analyzer language server configuration&#xA;      [&#39;rust-analyzer&#39;] = {&#xA;      },&#xA;    },&#xA;  },&#xA;  -- DAP configuration&#xA;  dap = {&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;vim.g.rustaceanvim&lt;/code&gt; can also be a function that returns a table.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;codelldb&lt;/code&gt; for debugging&lt;/h3&gt; &#xA;&lt;p&gt;For Rust, &lt;code&gt;codelldb&lt;/code&gt; from the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb&#34;&gt;CodeLLDB VSCode extension&lt;/a&gt; provides a better experience than &lt;code&gt;lldb&lt;/code&gt;. If you are using a distribution that lets you install the &lt;code&gt;codelldb&lt;/code&gt; executable, this plugin will automatically detect it and configure itself to use it as a debug adapter.&lt;/p&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NixOS: &lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/nixos-unstable/pkgs/applications/editors/vscode/extensions/vadimcn.vscode-lldb/default.nix#L134&#34;&gt;&lt;code&gt;vscode-extensions.vadimcn.vscode-lldb.adapter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arch Linux: &lt;a href=&#34;https://aur.archlinux.org/packages/codelldb-bin&#34;&gt;&lt;code&gt;codelldb-bin&lt;/code&gt; (AUR)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;:MasonInstall codelldb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your distribution does not have a &lt;code&gt;codelldb&lt;/code&gt; package, you can configure it as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb&#34;&gt;CodeLLDB VSCode extension&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Find out where it is installed. On Linux, this is typically in &lt;code&gt;$HOME/.vscode/extensions/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update your configuration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.rustaceanvim = function()&#xA;  -- Update this path&#xA;  local extension_path = vim.env.HOME .. &#39;/.vscode/extensions/vadimcn.vscode-lldb-1.10.0/&#39;&#xA;  local codelldb_path = extension_path .. &#39;adapter/codelldb&#39;&#xA;  local liblldb_path = extension_path .. &#39;lldb/lib/liblldb&#39;&#xA;  local this_os = vim.uv.os_uname().sysname;&#xA;&#xA;  -- The path is different on Windows&#xA;  if this_os:find &#34;Windows&#34; then&#xA;    codelldb_path = extension_path .. &#34;adapter\\codelldb.exe&#34;&#xA;    liblldb_path = extension_path .. &#34;lldb\\bin\\liblldb.dll&#34;&#xA;  else&#xA;    -- The liblldb extension is .so for Linux and .dylib for MacOS&#xA;    liblldb_path = liblldb_path .. (this_os == &#34;Linux&#34; and &#34;.so&#34; or &#34;.dylib&#34;)&#xA;  end&#xA;&#xA;  local cfg = require(&#39;rustaceanvim.config&#39;)&#xA;  return {&#xA;    dap = {&#xA;      adapter = cfg.get_codelldb_adapter(codelldb_path, liblldb_path),&#xA;    },&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to dynamically load different &lt;code&gt;rust-analyzer&lt;/code&gt; settings per project&lt;/h3&gt; &#xA;&lt;p&gt;By default, this plugin will look for a &lt;code&gt;rust-analyzer.json&lt;/code&gt;[^2] file in the project root directory, and attempt to load it. If the file does not exist, or it can&#39;t be decoded, the default settings will be used.&lt;/p&gt; &#xA;&lt;p&gt;[^2]: See &lt;a href=&#34;https://github.com/rust-analyzer/rust-project.json-example/raw/master/.vscode/settings.json&#34;&gt;this example&lt;/a&gt; and the rust-analyzer &lt;a href=&#34;https://rust-analyzer.github.io/manual.html#configuration&#34;&gt;configuration manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can change this behaviour with the &lt;code&gt;server.settings&lt;/code&gt; config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.rustaceanvim = {&#xA;  -- ...&#xA;  server = {&#xA;    ---@param project_root string Path to the project root&#xA;    settings = function(project_root)&#xA;      local ra = require(&#39;rustaceanvim.config.server&#39;)&#xA;      return ra.load_rust_analyzer_settings(project_root, {&#xA;        settings_file_pattern = &#39;rust-analyzer.json&#39;&#xA;      })&#xA;    end,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Health checks&lt;/h3&gt; &#xA;&lt;p&gt;For a health check, run &lt;code&gt;:checkhealth rustaceanvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; log file&lt;/h3&gt; &#xA;&lt;p&gt;To open the &lt;code&gt;rust-analyzer&lt;/code&gt; log file, run &lt;code&gt;:RustLsp logFile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Minimal config&lt;/h3&gt; &#xA;&lt;p&gt;To troubleshoot this plugin with a minimal config in a temporary directory, you can try &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/troubleshooting/minimal.lua&#34;&gt;minimal.lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;mkdir -p /tmp/minimal/&#xA;NVIM_DATA_MINIMAL=&#34;/tmp/minimal&#34; NVIM_APP_NAME=&#34;nvim-minimal&#34; nvim -u minimal.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;If you use Nix, you can run &lt;code&gt;nix run &#34;github:mrcjkb/rustaceanvim#nvim-minimal-stable&#34;&lt;/code&gt;. or &lt;code&gt;nix run &#34;github:mrcjkb/rustaceanvim#nvim-minimal-nightly&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you cannot reproduce your issue with a minimal config, it may be caused by another plugin, or a setting of your plugin manager. In this case, add additional plugins and configurations to &lt;code&gt;minimal.lua&lt;/code&gt;, until you can reproduce it.&lt;/p&gt; &#xA;&lt;h3&gt;rust-analyzer troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;For issues related to rust-analyzer (e.g. LSP features not working), see also &lt;a href=&#34;https://rust-analyzer.github.io/manual.html#troubleshooting&#34;&gt;the rust-analyzer troubleshooting guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Where are inlay hints?&lt;/h3&gt; &#xA;&lt;p&gt;As Neovim &amp;gt;= 0.10 supports inlay hints natively, I have removed the code from this plugin.&lt;/p&gt; &#xA;&lt;p&gt;To enable inlay hints in Neovim &amp;lt; 0.10, see &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/discussions/46#discussioncomment-7620822&#34;&gt;this discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/rust-tools.nvim&#34;&gt;&lt;code&gt;simrat39/rust-tools.nvim&lt;/code&gt;&lt;/a&gt; This plugin is a heavily modified fork of &lt;code&gt;rust-tools.nvim&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Saecki/crates.nvim&#34;&gt;&lt;code&gt;Saecki/crates.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vxpm/ferris.nvim&#34;&gt;&lt;code&gt;vxpm/ferris.nvim&lt;/code&gt;&lt;/a&gt; Geared towards people who prefer manual LSP client configuration. Has some features that have not yet been implemented by this plugin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-tools.nvim&lt;/code&gt; draws inspiration from &lt;a href=&#34;https://github.com/akinsho/flutter-tools.nvim&#34;&gt;&lt;code&gt;akinsho/flutter-tools.nvim&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;</summary>
  </entry>
</feed>