<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T02:16:54Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TimUntersberger/neogit</title>
    <updated>2022-06-04T02:16:54Z</updated>
    <id>tag:github.com,2022-06-04:/TimUntersberger/neogit</id>
    <link href="https://github.com/TimUntersberger/neogit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;magit for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neogit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/32014449/109874516-8042af00-7c6f-11eb-8afc-65ef52448c7a.png&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;work-in-progress&lt;/strong&gt; &lt;a href=&#34;https://magit.vc&#34;&gt;Magit&lt;/a&gt; clone for &lt;a href=&#34;https://neovim.io&#34;&gt;Neovim&lt;/a&gt; that is geared toward the Vim philosophy.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: We depend on &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;, so to use this plugin, you will additionally need to require &lt;code&gt;nvim-lua/plenary.nvim&lt;/code&gt; using your plugin manager of choice, before requiring this plugin.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Plugin Manager&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;use { &#39;TimUntersberger/neogit&#39;, requires = &#39;nvim-lua/plenary.nvim&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;Vim-plug&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Plug &#39;TimUntersberger/neogit&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;NeoBundle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NeoBundle &#39;TimUntersberger/neogit&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Bundle &#39;TimUntersberger/neogit&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tpope/vim-pathogen&#34;&gt;Pathogen&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;git clone https://github.com/TimUntersberger/neogit.git ~/.vim/bundle/neogit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;Dein&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;call dein#add(&#39;TimUntersberger/neogit&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You also use in the built-in package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone --depth 1 https://github.com/TimUntersberger/neogit $XDG_CONFIG_HOME/nvim/pack/plugins/start/neogit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you have to add the following lines to your &lt;code&gt;init.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local neogit = require(&#39;neogit&#39;)&#xA;&#xA;neogit.setup {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can either open neogit by using the &lt;code&gt;Neogit&lt;/code&gt; command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Neogit &#34; uses tab&#xA;:Neogit kind=&amp;lt;kind&amp;gt; &#34; override kind&#xA;:Neogit cwd=&amp;lt;cwd&amp;gt; &#34; override cwd&#xA;:Neogit commit&#34; open commit popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using the lua api:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local neogit = require(&#39;neogit&#39;)&#xA;&#xA;-- open using defaults&#xA;neogit.open()&#xA;&#xA;-- open commit popup&#xA;neogit.open({ &#34;commit&#34; })&#xA;&#xA;-- open with split kind&#xA;neogit.open({ kind = &#34;split&#34; })&#xA;&#xA;-- open home directory&#xA;neogit.open({ cwd = &#34;~&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The create function takes 1 optional argument that can be one of the following values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tab (default)&lt;/li&gt; &#xA; &lt;li&gt;replace&lt;/li&gt; &#xA; &lt;li&gt;floating (This currently doesn&#39;t work with popups. Very unstable)&lt;/li&gt; &#xA; &lt;li&gt;split&lt;/li&gt; &#xA; &lt;li&gt;split_above&lt;/li&gt; &#xA; &lt;li&gt;vsplit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status Keybindings&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tab&lt;/td&gt; &#xA;   &lt;td&gt;Toggle diff&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1, 2, 3, 4&lt;/td&gt; &#xA;   &lt;td&gt;Set a foldlevel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$&lt;/td&gt; &#xA;   &lt;td&gt;Command history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;b&lt;/td&gt; &#xA;   &lt;td&gt;Branch popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s&lt;/td&gt; &#xA;   &lt;td&gt;Stage (also supports staging selection/hunk)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;Stage unstaged changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-s&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stage Everything&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;u&lt;/td&gt; &#xA;   &lt;td&gt;Unstage (also supports staging selection/hunk)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;U&lt;/td&gt; &#xA;   &lt;td&gt;Unstage staged changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c&lt;/td&gt; &#xA;   &lt;td&gt;Open commit popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;r&lt;/td&gt; &#xA;   &lt;td&gt;Open rebase popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L&lt;/td&gt; &#xA;   &lt;td&gt;Open log popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;p&lt;/td&gt; &#xA;   &lt;td&gt;Open pull popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;P&lt;/td&gt; &#xA;   &lt;td&gt;Open push popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Z&lt;/td&gt; &#xA;   &lt;td&gt;Open stash popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;?&lt;/td&gt; &#xA;   &lt;td&gt;Open help popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;Discard changes (also supports discarding hunks)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;enter&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-r&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Refresh Buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;With &lt;code&gt;diffview&lt;/code&gt; integration enabled&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;d&lt;/td&gt; &#xA;   &lt;td&gt;Open &lt;code&gt;diffview.nvim&lt;/code&gt; at hovered file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;D (TODO)&lt;/td&gt; &#xA;   &lt;td&gt;Open diff popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can configure neogit by running the &lt;code&gt;neogit.setup&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local neogit = require(&#34;neogit&#34;)&#xA;&#xA;neogit.setup {&#xA;  disable_signs = false,&#xA;  disable_hint = false,&#xA;  disable_context_highlighting = false,&#xA;  disable_commit_confirmation = false,&#xA;  -- Neogit refreshes its internal state after specific events, which can be expensive depending on the repository size. &#xA;  -- Disabling `auto_refresh` will make it so you have to manually refresh the status after you open it.&#xA;  auto_refresh = true,&#xA;  disable_builtin_notifications = false,&#xA;  use_magit_keybindings = false,&#xA;  commit_popup = {&#xA;      kind = &#34;split&#34;,&#xA;  },&#xA;  -- Change the default way of opening neogit&#xA;  kind = &#34;tab&#34;,&#xA;  -- customize displayed signs&#xA;  signs = {&#xA;    -- { CLOSED, OPENED }&#xA;    section = { &#34;&amp;gt;&#34;, &#34;v&#34; },&#xA;    item = { &#34;&amp;gt;&#34;, &#34;v&#34; },&#xA;    hunk = { &#34;&#34;, &#34;&#34; },&#xA;  },&#xA;  integrations = {&#xA;    -- Neogit only provides inline diffs. If you want a more traditional way to look at diffs, you can use `sindrets/diffview.nvim`.&#xA;    -- The diffview integration enables the diff popup, which is a wrapper around `sindrets/diffview.nvim`.&#xA;    --&#xA;    -- Requires you to have `sindrets/diffview.nvim` installed.&#xA;    -- use { &#xA;    --   &#39;TimUntersberger/neogit&#39;, &#xA;    --   requires = { &#xA;    --     &#39;nvim-lua/plenary.nvim&#39;,&#xA;    --     &#39;sindrets/diffview.nvim&#39; &#xA;    --   }&#xA;    -- }&#xA;    --&#xA;    diffview = false  &#xA;  },&#xA;  -- Setting any section to `false` will make the section not render at all&#xA;  sections = {&#xA;    untracked = {&#xA;      folded = false&#xA;    },&#xA;    unstaged = {&#xA;      folded = false&#xA;    },&#xA;    staged = {&#xA;      folded = false&#xA;    },&#xA;    stashes = {&#xA;      folded = true&#xA;    },&#xA;    unpulled = {&#xA;      folded = true&#xA;    },&#xA;    unmerged = {&#xA;      folded = false&#xA;    },&#xA;    recent = {&#xA;      folded = true&#xA;    },&#xA;  },&#xA;  -- override/add mappings&#xA;  mappings = {&#xA;    -- modify status buffer mappings&#xA;    status = {&#xA;      -- Adds a mapping with &#34;B&#34; as key that does the &#34;BranchPopup&#34; command&#xA;      [&#34;B&#34;] = &#34;BranchPopup&#34;,&#xA;      -- Removes the default mapping of &#34;s&#34;&#xA;      [&#34;s&#34;] = &#34;&#34;,&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Right now, only the status buffer supports custom mappings.&lt;/p&gt; &#xA;&lt;p&gt;List of status commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Close&lt;/li&gt; &#xA; &lt;li&gt;Depth1 (Set foldlevel to 1)&lt;/li&gt; &#xA; &lt;li&gt;Depth2 (Set foldlevel to 2)&lt;/li&gt; &#xA; &lt;li&gt;Depth3 (Set foldlevel to 3)&lt;/li&gt; &#xA; &lt;li&gt;Depth4 (Set foldlevel to 4)&lt;/li&gt; &#xA; &lt;li&gt;Toggle&lt;/li&gt; &#xA; &lt;li&gt;Discard (Normal and visual mode)&lt;/li&gt; &#xA; &lt;li&gt;Stage (Normal and visual mode)&lt;/li&gt; &#xA; &lt;li&gt;StageUnstaged&lt;/li&gt; &#xA; &lt;li&gt;StageAll&lt;/li&gt; &#xA; &lt;li&gt;GoToFile&lt;/li&gt; &#xA; &lt;li&gt;Unstage (Normal and visual mode)&lt;/li&gt; &#xA; &lt;li&gt;UnstageStaged&lt;/li&gt; &#xA; &lt;li&gt;CommandHistory&lt;/li&gt; &#xA; &lt;li&gt;RefreshBuffer&lt;/li&gt; &#xA; &lt;li&gt;HelpPopup&lt;/li&gt; &#xA; &lt;li&gt;PullPopup&lt;/li&gt; &#xA; &lt;li&gt;PushPopup&lt;/li&gt; &#xA; &lt;li&gt;CommitPopup&lt;/li&gt; &#xA; &lt;li&gt;LogPopup&lt;/li&gt; &#xA; &lt;li&gt;StashPopup&lt;/li&gt; &#xA; &lt;li&gt;BranchPopup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notification Highlighting&lt;/h2&gt; &#xA;&lt;p&gt;Neogit defines three highlight groups for the notifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi NeogitNotificationInfo guifg=#80ff95&#xA;hi NeogitNotificationWarning guifg=#fff454&#xA;hi NeogitNotificationError guifg=#c44323&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override them to fit your colorscheme in your vim configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Contextual Highlighting&lt;/h2&gt; &#xA;&lt;p&gt;The colors for contextual highlighting are defined with these highlight groups:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi def NeogitDiffAddHighlight guibg=#404040 guifg=#859900&#xA;hi def NeogitDiffDeleteHighlight guibg=#404040 guifg=#dc322f&#xA;hi def NeogitDiffContextHighlight guibg=#333333 guifg=#b2b2b2&#xA;hi def NeogitHunkHeader guifg=#cccccc guibg=#404040&#xA;hi def NeogitHunkHeaderHighlight guifg=#cccccc guibg=#4d4d4d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override them to fit your colorscheme by creating a &lt;code&gt;syntax/NeogitStatus.vim&lt;/code&gt; in your vim configuration and adding your custom highlights there.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling Contextual Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;disable_context_highlighting = true&lt;/code&gt; in your call to &lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/#configuration&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; to disable context highlighting altogether.&lt;/p&gt; &#xA;&lt;h2&gt;Disabling Hint&lt;/h2&gt; &#xA;&lt;p&gt;Set &lt;code&gt;disable_hint = true&lt;/code&gt; in your call to &lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/#configuration&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; to hide hints on top of the panel.&lt;/p&gt; &#xA;&lt;h2&gt;Disabling Commit Confirmation&lt;/h2&gt; &#xA;&lt;p&gt;Set &lt;code&gt;disable_commit_confirmation = true&lt;/code&gt; in your call to &lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/#configuration&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; to disable the &#34;Are you sure you want to commit?&#34; prompt after saving the commit message buffer.&lt;/p&gt; &#xA;&lt;h2&gt;Disabling Insert On Commit&lt;/h2&gt; &#xA;&lt;p&gt;Set &lt;code&gt;disable_insert_on_commit = true&lt;/code&gt; in your call to &lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/#configuration&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; to disable automatically changing to insert mode when opening the commit message buffer. (Disabled is the default)&lt;/p&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;p&gt;Neogit emits the following events:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Event&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NeogitStatusRefreshed&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Status has been reloaded&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NeogitCommitComplete&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Commit has been created&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NeogitPushComplete&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Push has completed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can listen to the events using the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;autocmd User NeogitStatusRefreshed echom &#34;Hello World!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you prefer to configure autocommands via Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local group = vim.api.nvim_create_augroup(&#39;MyCustomNeogitEvents&#39;, { clear = true })&#xA;vim.api.nvim_create_autocmd(&#39;User&#39;, {&#xA;  pattern = &#39;NeogitPushComplete&#39;,&#xA;  group = group,&#xA;  callback = require(&#39;neogit&#39;).close,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Magit-style Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;Neogit uses &#39;p&#39; for pulling instead of &#39;F&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;use_magit_keybindings = true&lt;/code&gt; in your call to &lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/#configuration&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; to use magit-style keybindings.&lt;/p&gt; &#xA;&lt;h2&gt;Refreshing Neogit&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to refresh Neogit manually, you can use &lt;code&gt;neogit#refresh_manually&lt;/code&gt; in Vimscript or &lt;code&gt;require(&#39;neogit&#39;).refresh_manually&lt;/code&gt; in lua. They both require a single file parameter.&lt;/p&gt; &#xA;&lt;p&gt;This allows you to refresh Neogit on your own custom events&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;augroup DefaultRefreshEvents&#xA;  au!&#xA;  au BufWritePost,BufEnter,FocusGained,ShellCmdPost,VimResume * call &amp;lt;SID&amp;gt;neogit#refresh_manually(expand(&#39;&amp;lt;afile&amp;gt;&#39;))&#xA;augroup END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: This file is no longer being updated.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The todo file does not represent ALL of the missing features. This file just shows the features which I noticed were missing and I have to implement.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/todo.md&#34;&gt;TODO&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Assure that you have &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt; installed as a plugin for your neovim instance. Afterwards, run &lt;code&gt;make test&lt;/code&gt; to run the unit test suite.&lt;/p&gt; &#xA;&lt;p&gt;Plenary uses it&#39;s own port of busted and a bundled luassert, so consult their code and the respective &lt;a href=&#34;http://olivinelabs.com/busted/&#34;&gt;busted&lt;/a&gt; and &lt;a href=&#34;http://olivinelabs.com/busted/#asserts&#34;&gt;luassert&lt;/a&gt; docs for what methods are available.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LunarVim/Neovim-from-scratch</title>
    <updated>2022-06-04T02:16:54Z</updated>
    <id>tag:github.com,2022-06-04:/LunarVim/Neovim-from-scratch</id>
    <link href="https://github.com/LunarVim/Neovim-from-scratch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Neovim config designed from scratch to be understandable&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neovim from scratch&lt;/h1&gt; &#xA;&lt;p&gt;Each video will be associated with a branch so checkout the one you are interested in, you can follow along with this &lt;a href=&#34;https://www.youtube.com/watch?v=ctH-a-1eUME&amp;amp;list=PLhoH5vyxr6Qq41NFL4GvhFp-WLd5xzIzZ&#34;&gt;playlist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Try out this config&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to remove or move your current &lt;code&gt;nvim&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; Requires [Neovim v0.8.0]](&lt;a href=&#34;https://github.com/neovim/neovim/releases&#34;&gt;https://github.com/neovim/neovim/releases&lt;/a&gt;). &lt;a href=&#34;https://raw.githubusercontent.com/LunarVim/Neovim-from-scratch/master/#upgrade-to-latest-release&#34;&gt;Upgrade&lt;/a&gt; if you&#39;re on an earlier version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/LunarVim/Neovim-from-scratch.git ~/.config/nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;nvim&lt;/code&gt; and wait for the plugins to be installed&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; (You will notice treesitter pulling in a bunch of parsers the next time you open Neovim)&lt;/p&gt; &#xA;&lt;h2&gt;Get healthy&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;code&gt;nvim&lt;/code&gt; and enter the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:checkhealth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll probably notice you don&#39;t have support for copy/paste also that python and node haven&#39;t been setup&lt;/p&gt; &#xA;&lt;p&gt;So let&#39;s fix that&lt;/p&gt; &#xA;&lt;p&gt;First we&#39;ll fix copy/paste&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On mac &lt;code&gt;pbcopy&lt;/code&gt; should be builtin&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Ubuntu&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt install xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Arch Linux&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo pacman -S xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next we need to install python support (node is optional)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim python support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip install pynvim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim node support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm i -g neovim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; make sure you have &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node&lt;/a&gt; installed, I recommend a node manager like &lt;a href=&#34;https://github.com/Schniz/fnm&#34;&gt;fnm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrade to latest release&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you &lt;a href=&#34;https://github.com/neovim/neovim/wiki/Building-Neovim#quick-start&#34;&gt;built from source&lt;/a&gt;, &lt;code&gt;cd&lt;/code&gt; into the folder where you cloned &lt;code&gt;neovim&lt;/code&gt; and run the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git pull&#xA;make distclean &amp;amp;&amp;amp; make CMAKE_BUILD_TYPE=Release&#xA;sudo make install&#xA;nvim -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The computing scientist&#39;s main challenge is not to get confused by the complexities of his own making.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;- Edsger W. Dijkstra&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>neovim/nvim-lspconfig</title>
    <updated>2022-06-04T02:16:54Z</updated>
    <id>tag:github.com,2022-06-04:/neovim/nvim-lspconfig</id>
    <link href="https://github.com/neovim/nvim-lspconfig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickstart configurations for the Nvim LSP client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lspconfig&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;collection of common configurations&lt;/a&gt; for Neovim&#39;s built-in &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;language server client&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This plugin allows for declaratively configuring, launching, and initializing language servers you have installed on your system. &lt;strong&gt;Disclaimer: Language server configurations are provided on a best-effort basis and are community-maintained. See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&#34;&gt;contributions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lspconfig&lt;/code&gt; has extensive help documentation, see &lt;code&gt;:help lspconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;LSP overview&lt;/h1&gt; &#xA;&lt;p&gt;Neovim supports the Language Server Protocol (LSP), which means it acts as a client to language servers and includes a Lua framework &lt;code&gt;vim.lsp&lt;/code&gt; for building enhanced LSP tools. LSP facilitates features like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;go-to-definition&lt;/li&gt; &#xA; &lt;li&gt;find-references&lt;/li&gt; &#xA; &lt;li&gt;hover&lt;/li&gt; &#xA; &lt;li&gt;completion&lt;/li&gt; &#xA; &lt;li&gt;rename&lt;/li&gt; &#xA; &lt;li&gt;format&lt;/li&gt; &#xA; &lt;li&gt;refactor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Neovim provides an interface for all of these features, and the language server client is designed to be highly extensible to allow plugins to integrate language server features which are not yet present in Neovim core such as &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&#34;&gt;&lt;strong&gt;auto&lt;/strong&gt;-completion&lt;/a&gt; (as opposed to manual completion with omnifunc) and &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Snippets&#34;&gt;snippet integration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;These features are not implemented in this repo&lt;/strong&gt;, but in Neovim core. See &lt;code&gt;:help lsp&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Requires &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.6.1&#34;&gt;Neovim v0.6.1&lt;/a&gt; or &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/nightly&#34;&gt;Nightly&lt;/a&gt;. Update Neovim and &#39;lspconfig&#39; before reporting an issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &#39;lspconfig&#39; like any other Vim plugin, e.g. with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local use = require(&#39;packer&#39;).use&#xA;require(&#39;packer&#39;).startup(function()&#xA;  use &#39;wbthomason/packer.nvim&#39; -- Package manager&#xA;  use &#39;neovim/nvim-lspconfig&#39; -- Collection of configurations for the built-in LSP client&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install a language server, e.g. &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md#pyright&#34;&gt;pyright&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g pyright&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the language server setup to your init.lua.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;lspconfig&#39;.pyright.setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch neovim, the language server will now be attached and providing diagnostics (see &lt;code&gt;:LspInfo&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;nvim main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#Keybindings-and-completion&#34;&gt;Keybindings and completion&lt;/a&gt; for mapping useful functions and enabling omnifunc completion&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For a full list of servers, see &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt; or &lt;code&gt;:help lspconfig-server-configurations&lt;/code&gt;. This document contains installation instructions and additional, optional, customization suggestions for each language server. For some servers that are not on your system path (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you will be required to manually add &lt;code&gt;cmd&lt;/code&gt; as an entry in the table passed to &lt;code&gt;setup&lt;/code&gt;. Most language servers can be installed in less than a minute.&lt;/p&gt; &#xA;&lt;h2&gt;Suggested configuration&lt;/h2&gt; &#xA;&lt;p&gt;&#39;lspconfig&#39; does not map keybindings or enable completion by default. The following example configuration provides suggested keymaps for the most commonly used language server functions, and manually triggered completion with omnifunc (&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;strong&gt;you must pass the defined &lt;code&gt;on_attach&lt;/code&gt; as an argument to every &lt;code&gt;setup {}&lt;/code&gt; call&lt;/strong&gt; and &lt;strong&gt;the keybindings in &lt;code&gt;on_attach&lt;/code&gt; only take effect on buffers with an active language server&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Mappings.&#xA;-- See `:help vim.diagnostic.*` for documentation on any of the below functions&#xA;local opts = { noremap=true, silent=true }&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;e&#39;, vim.diagnostic.open_float, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;[d&#39;, vim.diagnostic.goto_prev, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;]d&#39;, vim.diagnostic.goto_next, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;q&#39;, vim.diagnostic.setloclist, opts)&#xA;&#xA;-- Use an on_attach function to only map the following keys&#xA;-- after the language server attaches to the current buffer&#xA;local on_attach = function(client, bufnr)&#xA;  -- Enable completion triggered by &amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&#xA;  vim.api.nvim_buf_set_option(bufnr, &#39;omnifunc&#39;, &#39;v:lua.vim.lsp.omnifunc&#39;)&#xA;&#xA;  -- Mappings.&#xA;  -- See `:help vim.lsp.*` for documentation on any of the below functions&#xA;  local bufopts = { noremap=true, silent=true, buffer=bufnr }&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gD&#39;, vim.lsp.buf.declaration, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gd&#39;, vim.lsp.buf.definition, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;K&#39;, vim.lsp.buf.hover, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gi&#39;, vim.lsp.buf.implementation, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-k&amp;gt;&#39;, vim.lsp.buf.signature_help, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;wa&#39;, vim.lsp.buf.add_workspace_folder, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;wr&#39;, vim.lsp.buf.remove_workspace_folder, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;wl&#39;, function()&#xA;    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&#xA;  end, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;D&#39;, vim.lsp.buf.type_definition, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;rn&#39;, vim.lsp.buf.rename, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;ca&#39;, vim.lsp.buf.code_action, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gr&#39;, vim.lsp.buf.references, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;f&#39;, vim.lsp.buf.formatting, bufopts)&#xA;end&#xA;&#xA;-- Use a loop to conveniently call &#39;setup&#39; on multiple servers and&#xA;-- map buffer local keybindings when the language server attaches&#xA;local servers = { &#39;pyright&#39;, &#39;rust_analyzer&#39;, &#39;tsserver&#39; }&#xA;for _, lsp in pairs(servers) do&#xA;  require(&#39;lspconfig&#39;)[lsp].setup {&#xA;    on_attach = on_attach,&#xA;    flags = {&#xA;      -- This will be the default in neovim 0.7+&#xA;      debounce_text_changes = 150,&#xA;    }&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Manual, triggered completion is provided by neovim&#39;s built-in omnifunc. For &lt;strong&gt;auto&lt;/strong&gt;completion, a general purpose &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&#34;&gt;autocompletion plugin&lt;/a&gt; is required.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;If you have an issue with &#39;lspconfig&#39;, the first step is to reproduce with a &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/test/minimal_init.lua&#34;&gt;minimal configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The most common reasons a language server does not start or attach are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The language server is not installed. &#39;lspconfig&#39; does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in each server&#39;s lua module from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is an executable name instead of an absolute path to the executable, ensure it is on your path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Missing filetype plugins. Certain languages are not detecting by vim/neovim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set ft?&lt;/code&gt; shows the filetype and not an empty value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Not triggering root detection. &lt;strong&gt;Some&lt;/strong&gt; language servers will only start if it is opened in a directory, or child directory, containing a file which signals the &lt;em&gt;root&lt;/em&gt; of the project. Most of the time, this is a &lt;code&gt;.git&lt;/code&gt; folder, but each server defines the root config in the lua file. See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt; or the source for the list of root directories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You must pass &lt;code&gt;on_attach&lt;/code&gt; and &lt;code&gt;capabilities&lt;/code&gt; for &lt;strong&gt;each&lt;/strong&gt; &lt;code&gt;setup {}&lt;/code&gt; if you want these to take effect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Do not call &lt;code&gt;setup {}&lt;/code&gt; twice for the same server&lt;/strong&gt;. The second call to &lt;code&gt;setup {}&lt;/code&gt; will overwrite the first.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:LspInfo&lt;/code&gt;. Add the following to your init.vim to enable logging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.set_log_level(&#34;debug&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attempt to run the language server, and open the log with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:LspLog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of the time, the reason for failure is present in the logs.&lt;/p&gt; &#xA;&lt;h2&gt;Built-in commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; shows the status of active and configured language servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following support tab-completion for all arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass &lt;code&gt;autostart = false&lt;/code&gt; to your &lt;code&gt;.setup{}&lt;/code&gt; call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStop &amp;lt;client_id&amp;gt;&lt;/code&gt; Defaults to stopping all buffer clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspRestart &amp;lt;client_id&amp;gt;&lt;/code&gt; Defaults to restarting all buffer clients.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The wiki&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki&#34;&gt;wiki&lt;/a&gt; for additional topics, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Installing-language-servers#automatically&#34;&gt;Automatic server installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Snippets&#34;&gt;Snippets support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Project-local-settings&#34;&gt;Project local settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Language-specific-plugins&#34;&gt;Recommended plugins for enhanced language server features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If you are missing a language server on the list in &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt;, contributing a new configuration for it would be appreciated. You can follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new file at &lt;code&gt;lua/lspconfig/server_configurations/SERVER_NAME.lua&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy an &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/server_configurations/&#34;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/server_configurations/texlab.lua&#34;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ask questions on our &lt;a href=&#34;https://neovim.discourse.group/c/7-category/7&#34;&gt;Discourse&lt;/a&gt; or in the &lt;a href=&#34;https://app.element.io/#/room/#neovim:matrix.org&#34;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also help out by testing &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/issues?q=is%3Apr+is%3Aopen+label%3Aneeds-testing&#34;&gt;PRs with the &lt;code&gt;needs-testing&lt;/code&gt;&lt;/a&gt; label that affect language servers you use regularly.&lt;/p&gt;</summary>
  </entry>
</feed>