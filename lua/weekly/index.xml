<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T02:14:16Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rxyhn/dotfiles</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/rxyhn/dotfiles</id>
    <link href="https://github.com/rxyhn/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My awesomewm dotfiles for awesome people! ‚ú®&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/rxhyn-dotfile-header.png&#34; alt=&#34;Home Preview&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#wrench--setup&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-setup.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rxyhn/dotfiles/wiki&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-wiki.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#ocean--gallery&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-gallery.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#money_with_wings--tip-jar&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-tipjar.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- RICE PREVIEW --&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/aesthetic.png&#34; alt=&#34;Rice Preview&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- BADGES --&gt; &#xA;&lt;h1&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img alt=&#34;&#34; align=&#34;left&#34; src=&#34;https://img.shields.io/github/stars/rxyhn/dotfiles?color=162026&amp;amp;labelColor=162026&amp;amp;style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img alt=&#34;&#34; align=&#34;right&#34; src=&#34;https://badges.pufler.dev/visits/rxyhn/dotfiles?style=for-the-badge&amp;amp;color=162026&amp;amp;logoColor=white&amp;amp;labelColor=162026&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Hi there! Thanks for dropping by! &lt;span&gt;üíô&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://awesomewm.org/&#34;&gt;&lt;img alt=&#34;AwesomeWM Logo&#34; height=&#34;150&#34; align=&#34;left&#34; src=&#34;https://awesomewm.org/doc/api/images/AUTOGEN_wibox_logo_logo_and_name.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt; Rxyhn&#39;s Aesthetic AwesomeWM Configuration Files! &lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to my AwesomeWM configuration files!&lt;/p&gt; &#xA;&lt;p&gt;This is my personal collection of configuration files.&lt;/p&gt; &#xA;&lt;p&gt;You might be here for looking my AwesomeWM configuration files? or looking for &lt;strong&gt;Linux Rice&lt;/strong&gt; reference?&lt;/p&gt; &#xA;&lt;p&gt;feel free to steal anything from here but don&#39;t forget to give me &lt;strong&gt;credits&lt;/strong&gt; :)&lt;/p&gt; &#xA;&lt;p&gt;AwesomeWM is the most powerful and highly configurable, next generation framework window manager for X, Although it takes time and effort to configure it, but I&#39;m very satisfied with the result.&lt;/p&gt; &#xA;&lt;p&gt;This is a beautiful user interface isn&#39;t it?&lt;/p&gt; &#xA;&lt;p&gt;These dotfiles are made with love, for sure.&lt;/p&gt; &#xA;&lt;!-- INFORMATION --&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ùÑ&lt;/span&gt; ‚Äé &lt;samp&gt;Information&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Here are some details about my setup:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OS:&lt;/strong&gt; &lt;a href=&#34;https://archlinux.org&#34;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WM:&lt;/strong&gt; &lt;a href=&#34;https://github.com/awesomeWM/awesome&#34;&gt;awesome&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Terminal:&lt;/strong&gt; &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;alacritty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shell:&lt;/strong&gt; &lt;a href=&#34;https://www.zsh.org/&#34;&gt;zsh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Editor:&lt;/strong&gt; &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim&lt;/a&gt; / &lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;vscode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compositor:&lt;/strong&gt; &lt;a href=&#34;https://github.com/yshui/picom&#34;&gt;picom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Application Launcher:&lt;/strong&gt; &lt;a href=&#34;https://github.com/davatorium/rofi&#34;&gt;rofi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Music Player&lt;/strong&gt; &lt;a href=&#34;https://github.com/ncmpcpp/ncmpcpp&#34;&gt;ncmpcpp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AwesomeWM Modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/blingcorp/bling&#34;&gt;bling&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adds new layouts, modules, and widgets that try to primarily focus on window management&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/andOrlando/rubato&#34;&gt;rubato&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Creates smooth animations with a slope curve for awesomeWM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/xinhaoyuan/layout-machi&#34;&gt;layout-machi&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Manual layout for Awesome with an interactive editor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/andOrlando/color&#34;&gt;color&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clean and efficient api for color conversion in lua&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Aire-One/awesome-battery_widget&#34;&gt;UPower Battery Widget&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A UPowerGlib based battery widget for the Awesome WM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Main Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dashboard&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Animated Dock&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Info Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Notification Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Word Clock Lockscreen&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exit Screen&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Music Player&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;App Launcher&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Github Activity Previews&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brightness / Volume OSD&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battery Indicator&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wifi Indicator&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This repo has a wiki! You can check it by clicking &lt;del&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UIp6_0kct_U&#34;&gt;here&lt;/a&gt;&lt;/del&gt; &lt;a href=&#34;https://github.com/rxyhn/dotfiles/wiki&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- SETUP --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üîß&lt;/span&gt; ‚Äé &lt;samp&gt;Setup&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is step-by-step how to install these dotfiles. Just &lt;a href=&#34;https://en.wikipedia.org/wiki/RTFM&#34;&gt;R.T.F.M&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;1. Install Required Dependencies and Enable Services&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; ‚Äé &lt;strong&gt;This setup instructions only provided for Arch Linux (and other Arch-based distributions)&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Assuming your &lt;em&gt;AUR Helper&lt;/em&gt; is &lt;a href=&#34;https://github.com/Morganamilo/paru&#34;&gt;paru&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;First of all you should install the &lt;a href=&#34;https://github.com/awesomeWM/awesome/&#34;&gt;git version of AwesomeWM&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -S awesome-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Install necessary dependencies&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -Sy picom-git alacritty rofi todo-bin acpi acpid acpi_call upower \&#xA;jq inotify-tools polkit-gnome xdotool xclip gpick ffmpeg blueman \&#xA;pipewire pipewire-alsa pipewire-pulse pamixer brightnessctl scrot redshift \&#xA;feh mpv mpd mpc mpdris2 ncmpcpp playerctl --needed &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Enable Services&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl --user enable mpd.service&#xA;systemctl --user start mpd.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;2. Install My AwesomeWM Dotfiles&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Clone this repository&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recurse-submodules https://github.com/rxyhn/dotfiles.git&#xA;cd dotfiles &amp;amp;&amp;amp; git submodule update --remote --merge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Copy config files&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp -r config/* ~/.config/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Install a few fonts (mainly icon fonts) in order for text and icons to be rendered properly.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp -r misc/fonts/* ~/.fonts/&#xA;# or to ~/.local/share/fonts&#xA;cp -r misc/fonts/* ~/.local/share/fonts/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And run this command for your system to detect the newly installed fonts.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fc-cache -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Finally, now you can login with AwesomeWM&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;Congratulations, at this point you have installed this aesthetic dotfiles! &lt;span&gt;üéâ&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;Log out from your current desktop session and log in into AwesomeWM&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- MISCELLANEOUS --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üçÄ&lt;/span&gt; ‚Äé &lt;samp&gt;Miscellaneous&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;VSCode Themes&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/93292023/170319552-a42b920d-9f59-44d9-a9ad-b3aeed55bf6a.png&#34; alt=&#34;VSCode Preview&#34; width=&#34;500px&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;span&gt;üåå&lt;/span&gt; ‚Äé &lt;samp&gt;Aesthetic VSCode&lt;/samp&gt;&lt;/p&gt; &#xA; &lt;p&gt;Setup:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Install required extension&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=iocave.customize-ui&#34;&gt;Customize UI&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=antfu.icons-carbon&#34;&gt;Carbon Product Icons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;p&gt;note: You can use any themes, but some of the colors will be overwritten by mine&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;copy config file&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp misc/vscode/User/settings.json ~/.config/Code/User&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Touchpad tap-to-click &amp;amp; natural (reverse) scrolling (&lt;a href=&#34;https://wiki.archlinux.org/title/Libinput#Tapping_button_re-mapping&#34;&gt;libinput&lt;/a&gt;)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;/etc/X11/xorg.conf.d/30-touchpad.conf&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cfg&#34;&gt;Section &#34;InputClass&#34;&#xA;    Identifier &#34;touchpad&#34;&#xA;    Driver &#34;libinput&#34;&#xA;    MatchIsTouchpad &#34;on&#34;&#xA;    Option &#34;Tapping&#34; &#34;on&#34;&#xA;    Option &#34;TappingButtonMap&#34; &#34;lmr&#34;&#xA;    Option &#34;NaturalScrolling&#34; &#34;true&#34;&#xA;EndSection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- GALLERY --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üåä&lt;/span&gt; ‚Äé &lt;samp&gt;Gallery&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Simple, Minimalist and Modern Bar&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/wibar.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Aesthetic Dashboard with neat grid layout and Notification Center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/dashboard.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Complete information, Info Center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/info-center.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;MacOS like control center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/control-center.png&#34; width=&#34;500px&#34; alt=&#34;control center preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Custom mouse-friendly ncmpcpp UI&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/ncmpcpp.png&#34; width=&#34;500px&#34; alt=&#34;ncmpcpp preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Lockscreen with &lt;a href=&#34;https://github.com/RMTT/lua-pam&#34;&gt;PAM Integration&lt;/a&gt;&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/lockscreen.png&#34; width=&#34;500px&#34; alt=&#34;word clock lockscreen preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Minimalist Exitscreen&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/exitscreen.png&#34; width=&#34;500px&#34; alt=&#34;exitscreen preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- HISTORY --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üóæ&lt;/span&gt; ‚Äé &lt;samp&gt;History&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Ngl this is started when im feel bored lol and decided to start using Linux, more precisely in January 2022. Fyi im a &lt;strong&gt;new Linux user,&lt;/strong&gt; when it&#39;s in &lt;a href=&#34;https://facebook.com/groups/linuxart&#34;&gt;Linuxer Desktop Art&lt;/a&gt; i saw a linux setup that caught my eye, then I&#39;m interested in and trying something similar, So yeaaaaaah this is my current setup, my purpose of doing this is to hone my skills to make an attractive UI and also as a hobby. I wanna say thank you to those of you who like and love my setup &amp;lt;3&lt;/p&gt; &#xA;&lt;pre align=&#34;center&#34;&gt;&#xA;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#japan--history&#34;&gt;&#xA;&lt;img alt=&#34;&#34; align=&#34;center&#34; width=&#34;96%&#34; src=&#34;https://api.star-history.com/svg?repos=rxyhn/dotfiles&amp;amp;type=Date&#34;&gt;&#xA;&lt;/a&gt;&#xA;&lt;/pre&gt; &#xA;&lt;!-- TIP JAR --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üí∏&lt;/span&gt; ‚Äé &lt;samp&gt;TIP JAR&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you enjoyed it and would like to show your appreciation, you may want to tip me here.&lt;/p&gt; &#xA;&lt;p&gt;It is never required but always appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Thanks from the bottom of my heart! ‚Äé &lt;span&gt;üíó&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/rxyhn&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ACKNOWLEDGEMENTS --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üí°&lt;/span&gt; ‚Äé &lt;samp&gt;Acknowledgements&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Special thanks to&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Contributors&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/rxyhn&#34;&gt;&lt;code&gt;rxyhn&lt;/code&gt;&lt;/a&gt; &lt;em&gt;there&#39;s nothing wrong with thanking yourself right?&lt;/em&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ner0z&#34;&gt;&lt;code&gt;ner0z&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/paulhersch&#34;&gt;&lt;code&gt;paulhersch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ChocolateBread799&#34;&gt;&lt;code&gt;ChocolateBread799&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/janleigh&#34;&gt;&lt;code&gt;janleigh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/rototrash&#34;&gt;&lt;code&gt;rototrash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;And for them, ofc.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/elenapan&#34;&gt;&lt;code&gt;elenapan&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/manilarome&#34;&gt;&lt;code&gt;manilarome&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/JavaCafe01&#34;&gt;&lt;code&gt;JavaCafe01&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/andOrlando&#34;&gt;&lt;code&gt;andOrlando&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rxyhn/AwesomeWM-Dotfiles/raw/main/.github/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?style=flat-square&amp;amp;label=License&amp;amp;message=GPL-3.0&amp;amp;logoColor=eceff4&amp;amp;logo=github&amp;amp;colorA=162026&amp;amp;colorB=162026&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>j-hui/fidget.nvim</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/j-hui/fidget.nvim</id>
    <link href="https://github.com/j-hui/fidget.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standalone UI for nvim-lsp progress&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fidget.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Standalone UI for nvim-lsp progress. Eye candy for the impatient.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/j-hui/fidget.nvim/raw/media/gifs/fidget-demo-rust-analyzer.gif?raw=true&#34; alt=&#34;fidget.nvim demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;The goals of this plugin are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to provide a UI for nvim-lsp&#39;s &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/specification-3-17/#progress&#34;&gt;progress&lt;/a&gt; handler.&lt;/li&gt; &#xA; &lt;li&gt;to be easy to configure&lt;/li&gt; &#xA; &lt;li&gt;to stay out of the way of other plugins (in particular status lines)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The language server protocol (LSP) defines an &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/specification-3-17/#progress&#34;&gt;endpoint&lt;/a&gt; for servers to report their progress while performing work. This endpoint is supported by Neovim&#39;s builtin LSP client, but only a handful of plugins (that I&#39;m aware of) make use of this feature. Those that do typically report progress in the status line, where space is at a premium and the layout is not well-suited to display the progress of concurrent tasks coming from multiple LSP servers. This approach also made status line configuration more complicated.&lt;/p&gt; &#xA;&lt;p&gt;I wanted be able to see the progress reported by LSP servers without involving the status line. Who doesn&#39;t love a little bit of eye candy?&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim v0.7.0+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;An LSP server that implements LSP&#39;s &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/specification-3-17/#progress&#34;&gt;progress&lt;/a&gt; endpoint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Having a working nvim-lsp setup is not technically necessary to &lt;em&gt;setup&lt;/em&gt; the plugin, but it won&#39;t do anything without a source of progress notifications.&lt;/p&gt; &#xA;&lt;p&gt;For an up-to-date list of LSP servers this plugin is known to work with, see &lt;a href=&#34;https://github.com/j-hui/fidget.nvim/issues/17&#34;&gt;this pinned issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Install this plugin using your favorite plugin manager. For example, using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;j-hui/fidget.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure the plugin installed (e.g., run &lt;code&gt;:PlugInstall&lt;/code&gt; if using vim-plug). After the plugin is loaded (e.g., after &lt;code&gt;plug#end()&lt;/code&gt; for vim-plug), call its &lt;code&gt;setup&lt;/code&gt; function (in Lua):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#34;fidget&#34;.setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/j-hui/fidget.nvim/main/doc/fidget.md&#34;&gt;documentation&lt;/a&gt; for configuration options.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements and Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;This plugin takes inspiration and borrows code from &lt;a href=&#34;https://github.com/arkav/lualine-lsp-progress&#34;&gt;arkav/lualine-lsp-progress&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Fidget spinner designs were adapted from the npm package &lt;a href=&#34;https://github.com/sindresorhus/cli-spinners&#34;&gt;sindresorhus/cli-spinners&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-lua/lsp-status.nvim&#34;&gt;nvim-lua/lsp-status.nvim&lt;/a&gt; also supports showing progress text, though it requires some configuration to integrate that into their status line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;neoclide/coc.nvim&lt;/a&gt; provides a nice LSP progress UI in the status line, which first inspired my desire to have this feature for nvim-lsp.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-core</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/qbcore-framework/qb-core</id>
    <link href="https://github.com/qbcore-framework/qb-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FiveM RP Framework Core üí™&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-core&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://docs.qbcore.org&#34;&gt;Official QBCore Documentation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>L3MON4D3/LuaSnip</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/L3MON4D3/LuaSnip</id>
    <link href="https://github.com/L3MON4D3/LuaSnip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snippet Engine for Neovim written in Lua.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/%23luasnip:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/luasnip:matrix.org?label=Matrix&amp;amp;logo=matrix&#34; alt=&#34;LuaSnip&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LuaSnip&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/41961280/122515860-5179fa00-d00e-11eb-91f7-331893f61fbf.mp4&#34;&gt;https://user-images.githubusercontent.com/41961280/122515860-5179fa00-d00e-11eb-91f7-331893f61fbf.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tabstops&lt;/li&gt; &#xA; &lt;li&gt;Text-Transformations using Lua functions&lt;/li&gt; &#xA; &lt;li&gt;Conditional Expansion&lt;/li&gt; &#xA; &lt;li&gt;Defining nested Snippets&lt;/li&gt; &#xA; &lt;li&gt;Filetype-specific Snippets&lt;/li&gt; &#xA; &lt;li&gt;Choices&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Snippet creation&lt;/li&gt; &#xA; &lt;li&gt;Regex-Trigger&lt;/li&gt; &#xA; &lt;li&gt;Autotriggered Snippets&lt;/li&gt; &#xA; &lt;li&gt;Fast&lt;/li&gt; &#xA; &lt;li&gt;Parse &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specification#snippet_syntax&#34;&gt;LSP-Style&lt;/a&gt; Snippets either directly in lua, as a vscode package or a snipmate snippet collection.&lt;/li&gt; &#xA; &lt;li&gt;Expand LSP-Snippets with &lt;a href=&#34;https://github.com/hrsh7th/nvim-compe&#34;&gt;nvim-compe&lt;/a&gt; (or its&#39; successor, &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; (requires &lt;a href=&#34;https://github.com/saadparwaiz1/cmp_luasnip&#34;&gt;cmp_luasnip&lt;/a&gt;))&lt;/li&gt; &#xA; &lt;li&gt;Snippet history (jump back into older snippets)&lt;/li&gt; &#xA; &lt;li&gt;Resolve filetype at the cursor using Treesitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Drawbacks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Snippets that make use of the entire functionality of this plugin have to be defined in Lua (but 95% of snippets can be written in lsp-syntax).&lt;/li&gt; &#xA; &lt;li&gt;The LSP-parser does not support Regex-Transformations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Neovim &amp;gt;= 0.5 (extmarks)&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Ie. With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Keymaps&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; press &amp;lt;Tab&amp;gt; to expand or jump in a snippet. These can also be mapped separately&#xA;&#34; via &amp;lt;Plug&amp;gt;luasnip-expand-snippet and &amp;lt;Plug&amp;gt;luasnip-jump-next.&#xA;imap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;Tab&amp;gt; luasnip#expand_or_jumpable() ? &#39;&amp;lt;Plug&amp;gt;luasnip-expand-or-jump&#39; : &#39;&amp;lt;Tab&amp;gt;&#39; &#xA;&#34; -1 for jumping backwards.&#xA;inoremap &amp;lt;silent&amp;gt; &amp;lt;S-Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require&#39;luasnip&#39;.jump(-1)&amp;lt;Cr&amp;gt;&#xA;&#xA;snoremap &amp;lt;silent&amp;gt; &amp;lt;Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;luasnip&#39;).jump(1)&amp;lt;Cr&amp;gt;&#xA;snoremap &amp;lt;silent&amp;gt; &amp;lt;S-Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;luasnip&#39;).jump(-1)&amp;lt;Cr&amp;gt;&#xA;&#xA;&#34; For changing choices in choiceNodes (not strictly necessary for a basic setup).&#xA;imap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;C-E&amp;gt; luasnip#choice_active() ? &#39;&amp;lt;Plug&amp;gt;luasnip-next-choice&#39; : &#39;&amp;lt;C-E&amp;gt;&#39;&#xA;smap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;C-E&amp;gt; luasnip#choice_active() ? &#39;&amp;lt;Plug&amp;gt;luasnip-next-choice&#39; : &#39;&amp;lt;C-E&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-cmp&lt;/code&gt;&#39;s wiki also contains &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki/Example-mappings#luasnip&#34;&gt;an example&lt;/a&gt; for setting up a super-tab-like mapping.&lt;/p&gt; &#xA;&lt;h2&gt;Add Snippets&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#loaders&#34;&gt;the doc&lt;/a&gt; for a general explanation of the loaders and their benefits. The following list serves only as a short overview.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vscode-like&lt;/strong&gt;: To use existing vs-code style snippets from a plugin (eg. &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets&#34;&gt;rafamadriz/friendly-snippets&lt;/a&gt;) simply install the plugin and then add&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;luasnip.loaders.from_vscode&#34;).lazy_load()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;somewhere in your nvim-config. LuaSnip will then load the snippets contained in the plugin on startup. You can also easily &lt;strong&gt;load your own custom vscode style snippets&lt;/strong&gt; by passing the path to the custom snippet-directory to the load function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- load snippets from path/of/your/nvim/config/my-cool-snippets&#xA;require(&#34;luasnip.loaders.from_vscode&#34;).lazy_load({ paths = { &#34;./my-cool-snippets&#34; } })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more info on the vscode-loader, check the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/b5a72f1fbde545be101fcd10b70bcd51ea4367de/Examples/snippets.lua#L501&#34;&gt;examples&lt;/a&gt; or &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#loaders&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Snipmate-like&lt;/strong&gt;: Very similar to Vscode-packages: install a plugin that provides snippets and call the &lt;code&gt;load&lt;/code&gt;-function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;luasnip.loaders.from_snipmate&#34;).lazy_load()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The snipmate format is very simple, so adding &lt;strong&gt;custom snippets&lt;/strong&gt; only requires a few steps:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;add a directory beside your &lt;code&gt;init.vim&lt;/code&gt; (or any other place that is in your &lt;code&gt;runtimepath&lt;/code&gt;) named &lt;code&gt;snippets&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;inside that directory, create files named &lt;code&gt;&amp;lt;filetype&amp;gt;.snippets&lt;/code&gt; and add snippets for the given filetype in it (for inspiration, check &lt;a href=&#34;https://github.com/honza/vim-snippets/tree/master/snippets&#34;&gt;honza/vim-snippets&lt;/a&gt;). &lt;pre&gt;&lt;code class=&#34;language-snipmate&#34;&gt;# comment&#xA;snippet &amp;lt;trigger&amp;gt; &amp;lt;description&amp;gt;&#xA;&amp;lt;snippet-body&amp;gt;&#xA;snippet if C-style if&#xA;if ($1)&#xA;&#x9;$0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Again, there are some &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/b5a72f1fbde545be101fcd10b70bcd51ea4367de/Examples/snippets.lua#L517&#34;&gt;examples&lt;/a&gt; and &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#snipmate&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;: Add the snippets by calling &lt;code&gt;require(&#34;luasnip&#34;).add_snippets(filetype, snippets)&lt;/code&gt;. An example for this can be found &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/Examples/snippets.lua#L190&#34;&gt;here&lt;/a&gt;.&lt;br&gt; This can also be done much cleaner, with all the benefits that come with using a loader, by using the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#lua&#34;&gt;loader for lua&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s also a repository collecting snippets for various languages, &lt;a href=&#34;https://github.com/molleweide/LuaSnip-snippets.nvim&#34;&gt;molleweide/LuaSnip-snippets.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docs and Examples&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md&#34;&gt;&lt;code&gt;DOC.md&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;:help luasnip&lt;/code&gt;) for a short overview and in-depth explanations of the different nodes and available API.&lt;br&gt; I highly recommend looking into (or better yet, &lt;code&gt;:luafile&lt;/code&gt;ing) &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/Examples/snippets.lua&#34;&gt;&lt;code&gt;Examples/snippets.lua&lt;/code&gt;&lt;/a&gt; before writing snippets in lua.&lt;br&gt; The &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/wiki&#34;&gt;Wiki&lt;/a&gt; contains some pretty useful extensions to Luasnip.&lt;/p&gt; &#xA;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;history&lt;/code&gt;: If true, Snippets that were exited can still be jumped back into. As Snippets are not removed when their text is deleted, they have to be removed manually via &lt;code&gt;LuasnipUnlinkCurrent&lt;/code&gt; if &lt;code&gt;delete_check_events&lt;/code&gt; is not enabled (set to eg. &lt;code&gt;&#39;TextChanged&#39;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;update_events&lt;/code&gt;: Choose which events trigger an update of the active nodes&#39; dependents. Default is just &lt;code&gt;&#39;InsertLeave&#39;&lt;/code&gt;, &lt;code&gt;&#39;TextChanged,TextChangedI&#39;&lt;/code&gt; would update on every change.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;region_check_events&lt;/code&gt;: Events on which to leave the current snippet if the cursor is outside its&#39; &#39;region&#39;. Disabled by default, &lt;code&gt;&#39;CursorMoved&#39;&lt;/code&gt;, &lt;code&gt;&#39;CursorHold&#39;&lt;/code&gt; or &lt;code&gt;&#39;InsertEnter&#39;&lt;/code&gt; seem reasonable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delete_check_events&lt;/code&gt;: When to check if the current snippet was deleted, and if so, remove it from the history. Off by default, &lt;code&gt;&#39;TextChanged&#39;&lt;/code&gt; (perhaps &lt;code&gt;&#39;InsertLeave&#39;&lt;/code&gt;, to react to changes done in Insert mode) should work just fine (alternatively, this can also be mapped using &lt;code&gt;&amp;lt;Plug&amp;gt;luasnip-delete-check&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;store_selection_keys&lt;/code&gt;: Mapping for populating &lt;code&gt;TM_SELECTED_TEXT&lt;/code&gt; and related variables (not set by default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enable_autosnippets&lt;/code&gt;: Autosnippets are disabled by default to minimize performance penalty if unused. Set to &lt;code&gt;true&lt;/code&gt; to enable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext_opts&lt;/code&gt;: Additional options passed to extmarks. Can be used to add passive/active highlight on a per-node-basis (more info in DOC.md)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parser_nested_assembler&lt;/code&gt;: Override the default behaviour of inserting a &lt;code&gt;choiceNode&lt;/code&gt; containing the nested snippet and an empty &lt;code&gt;insertNode&lt;/code&gt; for nested placeholders (&lt;code&gt;&#34;${1: ${2: this is nested}}&#34;&lt;/code&gt;). For an example (behaviour more similar to vscode), check &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/wiki/Nice-Configs#imitate-vscodes-behaviour-for-nested-placeholders&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ft_func&lt;/code&gt;: Source of possible filetypes for snippets. Defaults to a function, which returns &lt;code&gt;vim.split(vim.bo.filetype, &#34;.&#34;, true)&lt;/code&gt;, but check &lt;a href=&#34;https://raw.githubusercontent.com/L3MON4D3/LuaSnip/master/lua/luasnip/extras/filetype_functions.lua&#34;&gt;filetype_functions&lt;/a&gt; or &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#filetype_functions&#34;&gt;the docs&lt;/a&gt; for more options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;load_ft_func&lt;/code&gt;: Function to determine which filetypes belong to a given buffer (used for &lt;code&gt;lazy_loading&lt;/code&gt;). &lt;code&gt;fn(bufnr) -&amp;gt; filetypes (string[])&lt;/code&gt;. Again, there are some examples in &lt;a href=&#34;https://raw.githubusercontent.com/L3MON4D3/LuaSnip/master/lua/luasnip/extras/filetype_functions.lua&#34;&gt;filetype_functions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;snip_env&lt;/code&gt;: The global environment will be extended with this table in some places, eg. in files loaded by the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#lua-snippets-loader&#34;&gt;lua-loader&lt;/a&gt;.&lt;br&gt; Setting &lt;code&gt;snip_env&lt;/code&gt; to &lt;code&gt;{ some_global = &#34;a value&#34; }&lt;/code&gt; will add the global variable &lt;code&gt;some_global&lt;/code&gt; while evaluating these files. If you mind the (probably) large number of generated warnings, consider adding the keys set here to the globals recognized by lua-language-server or add &lt;code&gt;---@diagnostic disable: undefined-global&lt;/code&gt; somewhere in the affected files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/hrsh7th/vim-vsnip/&#34;&gt;vsnip.vim&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>catppuccin/nvim</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/catppuccin/nvim</id>
    <link href="https://github.com/catppuccin/nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üç® Soothing pastel theme for NeoVim&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/logos/exports/1544x1544_circle.png&#34; width=&#34;100&#34; alt=&#34;Logo&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&#34; height=&#34;30&#34; width=&#34;0px&#34;&gt; Catppuccin for NeoVim &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&#34; height=&#34;30&#34; width=&#34;0px&#34;&gt; &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/catppuccin/nvim/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/catppuccin/nvim?colorA=1e1e28&amp;amp;colorB=c9cbff&amp;amp;style=for-the-badge&amp;amp;logo=starship style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/catppuccin/nvim/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/catppuccin/nvim?colorA=1e1e28&amp;amp;colorB=f7be95&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/catppuccin/nvim/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/catppuccin/nvim?colorA=1e1e28&amp;amp;colorB=b1e1a6&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/nvim/main/assets/demo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;This port of Catppuccin is special because it was the first one and the one that originated the project itself. Given this, it&#39;s important to acknowledge that it all didn&#39;t come to be what it is now out of nowhere. So, if you are interested in knowing more about the initial stages of the theme, you can find it under the &lt;a href=&#34;https://github.com/catppuccin/nvim/tree/old-catppuccino&#34;&gt;&lt;code&gt;old-catppuccino&lt;/code&gt;&lt;/a&gt; branch.&lt;/p&gt; &#xA;&lt;h1&gt;üéÅ Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handy CLI.&lt;/li&gt; &#xA; &lt;li&gt;Extensible for many use cases.&lt;/li&gt; &#xA; &lt;li&gt;Integrations with a bunch of plugins: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;Native LSP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;Feline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hoob3rt/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;Nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tami5/lspsaga.nvim&#34;&gt;LSP Saga&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Git signs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;Indent Blankline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;Trouble&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;WhichKey&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim&#34;&gt;BarBar&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;NvimTree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;Neo-tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;Git Gutter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lambdalisue/fern.vim&#34;&gt;Fern&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;Lightline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.markdownguide.org/&#34;&gt;Markdown&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggandor/lightspeed.nvim&#34;&gt;Lightspeed&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/p00f/nvim-ts-rainbow&#34;&gt;Nvim-ts-Rainbow&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;Sneak&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;Hop&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;Neogit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/renerocksai/telekasten.nvim&#34;&gt;Telekasten&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;Notify&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/symbols-outline.nvim&#34;&gt;Symbols-Outline&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can use your favorite plugin manager for this. Here are some examples with the most popular ones:&lt;/p&gt; &#xA;&lt;h4&gt;Vim-plug&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Plug &#39;catppuccin/nvim&#39;, {&#39;as&#39;: &#39;catppuccin&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Packer.nvim&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;&#x9;&#34;catppuccin/nvim&#34;,&#xA;&#x9;as = &#34;catppuccin&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Vundle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Plugin &#39;catppuccin/nvim&#39;, {&#39;name&#39;: &#39;catppuccin&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;There are already some sane defaults that you may like, however you can change them to match your taste. These are the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;transparent_background = false,&#xA;term_colors = false,&#xA;styles = {&#xA;&#x9;comments = &#34;italic&#34;,&#xA;&#x9;conditionals = &#34;italic&#34;,&#xA;&#x9;loops = &#34;NONE&#34;,&#xA;&#x9;functions = &#34;NONE&#34;,&#xA;&#x9;keywords = &#34;NONE&#34;,&#xA;&#x9;strings = &#34;NONE&#34;,&#xA;&#x9;variables = &#34;NONE&#34;,&#xA;&#x9;numbers = &#34;NONE&#34;,&#xA;&#x9;booleans = &#34;NONE&#34;,&#xA;&#x9;properties = &#34;NONE&#34;,&#xA;&#x9;types = &#34;NONE&#34;,&#xA;&#x9;operators = &#34;NONE&#34;,&#xA;},&#xA;integrations = {&#xA;&#x9;treesitter = true,&#xA;&#x9;native_lsp = {&#xA;&#x9;&#x9;enabled = true,&#xA;&#x9;&#x9;virtual_text = {&#xA;&#x9;&#x9;&#x9;errors = &#34;italic&#34;,&#xA;&#x9;&#x9;&#x9;hints = &#34;italic&#34;,&#xA;&#x9;&#x9;&#x9;warnings = &#34;italic&#34;,&#xA;&#x9;&#x9;&#x9;information = &#34;italic&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;underlines = {&#xA;&#x9;&#x9;&#x9;errors = &#34;underline&#34;,&#xA;&#x9;&#x9;&#x9;hints = &#34;underline&#34;,&#xA;&#x9;&#x9;&#x9;warnings = &#34;underline&#34;,&#xA;&#x9;&#x9;&#x9;information = &#34;underline&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;&#x9;lsp_trouble = false,&#xA;&#x9;cmp = true,&#xA;&#x9;lsp_saga = false,&#xA;&#x9;gitgutter = false,&#xA;&#x9;gitsigns = true,&#xA;&#x9;telescope = true,&#xA;&#x9;nvimtree = {&#xA;&#x9;&#x9;enabled = true,&#xA;&#x9;&#x9;show_root = false,&#xA;&#x9;&#x9;transparent_panel = false,&#xA;&#x9;},&#xA;&#x9;neotree = {&#xA;&#x9;&#x9;enabled = false,&#xA;&#x9;&#x9;show_root = false,&#xA;&#x9;&#x9;transparent_panel = false,&#xA;&#x9;},&#xA;&#x9;which_key = false,&#xA;&#x9;indent_blankline = {&#xA;&#x9;&#x9;enabled = true,&#xA;&#x9;&#x9;colored_indent_levels = false,&#xA;&#x9;},&#xA;&#x9;dashboard = true,&#xA;&#x9;neogit = false,&#xA;&#x9;vim_sneak = false,&#xA;&#x9;fern = false,&#xA;&#x9;barbar = false,&#xA;&#x9;bufferline = true,&#xA;&#x9;markdown = true,&#xA;&#x9;lightspeed = false,&#xA;&#x9;ts_rainbow = false,&#xA;&#x9;hop = false,&#xA;&#x9;notify = true,&#xA;&#x9;telekasten = true,&#xA;&#x9;symbols_outline = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The way you setup the settings on your configuration varies based on whether you are using vimL for this or Lua.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;For init.lua&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local catppuccin = require(&#34;catppuccin&#34;)&#xA;&#xA;-- configure it&#xA;catppuccin.setup(&amp;lt;settings&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;For init.vim&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;local catppuccin = require(&#34;catppuccin&#34;)&#xA;&#xA;-- configure it&#xA;catppuccin.setup(&amp;lt;settings&amp;gt;)&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;After setting things up, you can load catppuccin like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;let g:catppuccin_flavour = &#34;dusk&#34; &#34; latte, frappe, macchiato, mocha&#xA;colorscheme catppuccin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;vim.g.catppuccin_flavour = &#34;frappe&#34; -- latte, frappe, macchiato, mocha&#xA;vim.cmd[[colorscheme catppuccin]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember that if you want to switch your Catppuccin flavour &#34;on the fly&#34; you may use the &lt;code&gt;:Catppuccin &amp;lt;flavour&amp;gt;&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: the command has autocompletion enabled, so you can just press tab to cycle through the flavours&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Although settings already have self-explanatory names, here is where you can find info about each one of them and their classifications!&lt;/p&gt; &#xA;&lt;h4&gt;General&lt;/h4&gt; &#xA;&lt;p&gt;This settings are unrelated to any group and are independent.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;transparent_background&lt;/code&gt;: (Boolean) if true, disables setting the background color.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;term_colors&lt;/code&gt;: (Boolean) if true, sets terminal colors (e.g. &lt;code&gt;g:terminal_color_0&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Styles&lt;/h4&gt; &#xA;&lt;p&gt;Handles the style of general hi groups (see &lt;code&gt;:h highlight-args&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;comments&lt;/code&gt;: (String) changed the style of the comments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;functions&lt;/code&gt;: (String) changed the style of the functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: (String) changed the style of the keywords.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strings&lt;/code&gt;: (String) changed the style of the strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;variables&lt;/code&gt;: (String) changed the style of the variables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Integrations&lt;/h4&gt; &#xA;&lt;p&gt;These integrations allow catppuccin to set the theme of various plugins/stuff. To enable an integration you just need to set it to &lt;code&gt;true&lt;/code&gt;, however, there are some special integrations...&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to know which highlight groups are being affected by catppuccin, checkout this directory: &lt;a href=&#34;https://github.com/catppuccin/nvim/tree/main/lua/catppuccin/core/integrations&#34;&gt;&lt;code&gt;lua/catppuccin/core/integrations/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Special Integrations&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feline.nvim&lt;/strong&gt;: First make sure that the &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons/&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt; plugin is installed. Then update your Feline config to use the Catppuccin components:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;feline&#34;).setup({&#xA;&#x9;components = require(&#39;catppuccin.core.integrations.feline&#39;),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Indent-blankline.nvim&lt;/strong&gt;: setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration. &lt;code&gt;colored_indent_levels&lt;/code&gt; enables char highlights per indent level. Follow the instructions &lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim#with-custom-gindent_blankline_char_highlight_list&#34;&gt;here&lt;/a&gt; to set the latter up.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lightline:&lt;/strong&gt; use this to set it up (Note: &lt;code&gt;catppuccin&lt;/code&gt; is the only valid colorscheme name. It will pick the one set in your config):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;let g:lightline = {&#39;colorscheme&#39;: &#39;catppuccin&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lualine:&lt;/strong&gt; use this to set it up (Note: &lt;code&gt;catppuccin&lt;/code&gt; is the only valid theme name. It will pick the one set in your config):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    theme = &#34;catppuccin&#34;&#xA;&#x9;-- ... the rest of your lualine config&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native Nvim LSP:&lt;/strong&gt; setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration. In the inners tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NvimTree:&lt;/strong&gt; setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;integration = {&#xA;  nvimtree = {&#xA;    enabled = true,&#xA;    show_root = true, -- makes the root folder not transparent&#xA;&#x9;transparent_panel = false, -- make the panel transparent&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neo-tree:&lt;/strong&gt; setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;integration = {&#xA;  neotree = {&#xA;    enabled = true,&#xA;    show_root = true, -- makes the root folder not transparent&#xA;&#x9;transparent_panel = false, -- make the panel transparent&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extra&lt;/h3&gt; &#xA;&lt;h4&gt;API&lt;/h4&gt; &#xA;&lt;p&gt;The API allows you fetch data from Catppuccin. It can be required as a Lua module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cp_api = require(&#34;catppuccin.api.&amp;lt;module&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Modules&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;colors&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;cp_api.get_colors()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Returns a table where the key is the name of the color and the value is its hex value.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Overwriting highlight groups&lt;/h4&gt; &#xA;&lt;p&gt;Highlight groups can be overwritten like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;catppuccin.remap({ &amp;lt;hi_group&amp;gt; = { &amp;lt;fields&amp;gt; }, })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local colors = require&#39;catppuccin.api.colors&#39;.get_colors() -- fetch colors with API&#xA;catppuccin.remap({ Comment = { fg = colors.flamingo }, })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hooks&lt;/h4&gt; &#xA;&lt;p&gt;Use them to execute code at certain events. These are the ones available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;before_loading()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Before loading a colorscheme&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;after_loading()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;After loading a colorscheme&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;They can be used like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local catppuccin = require(&#34;catppuccin&#34;)&#xA;&#xA;catppuccin.before_loading = function ()&#xA;&#x9;print(&#34;I ran before loading Catppuccin!&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üíù Thanks to&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Pocco81&#34;&gt;Pocco81&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/dev/assets/footers/gray0_ctp_on_line.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Copyright ¬© 2020-present &lt;a href=&#34;https://github.com/catppuccin&#34; target=&#34;_blank&#34;&gt;Catppuccin Org&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/catppuccin/catppuccin/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?style=for-the-badge&amp;amp;label=License&amp;amp;message=MIT&amp;amp;logoColor=d9e0ee&amp;amp;colorA=302d41&amp;amp;colorB=c9cbff&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>7GrandDadPGN/VapeV4ForRoblox</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/7GrandDadPGN/VapeV4ForRoblox</id>
    <link href="https://github.com/7GrandDadPGN/VapeV4ForRoblox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vape V4 for Roblox, because bored.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vape V4&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you make a script for 2 years lol.&lt;/strong&gt; &lt;em&gt;Project I made for some reason idk&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ChristianChiarulli/nvim</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/ChristianChiarulli/nvim</id>
    <link href="https://github.com/ChristianChiarulli/nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My neovim config&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neovim from scratch&lt;/h1&gt; &#xA;&lt;h2&gt;Try out this config&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to remove or move your current &lt;code&gt;nvim&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:ChristianChiarulli/nvim.git ~/.config/nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;nvim&lt;/code&gt; and wait for the plugins to be installed&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; (You will notice treesitter pulling in a bunch of parsers the next time you open Neovim)&lt;/p&gt; &#xA;&lt;p&gt;each video will be associated with a branch so checkout the one you are interested in&lt;/p&gt; &#xA;&lt;h2&gt;Get healthy&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;code&gt;nvim&lt;/code&gt; and enter the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:checkhealth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll probably notice you don&#39;t have support for copy/paste also that python and node haven&#39;t been setup&lt;/p&gt; &#xA;&lt;p&gt;So let&#39;s fix that&lt;/p&gt; &#xA;&lt;p&gt;First we&#39;ll fix copy/paste&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On mac &lt;code&gt;pbcopy&lt;/code&gt; should be builtin&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Ubuntu&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt install xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Arch Linux&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo pacman -S xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next we need to install python support (node is optional)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim python support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip install pynvim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim node support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm i -g neovim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fonts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;A nerd font&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-codicons/raw/main/dist/codicon.ttf&#34;&gt;codicon&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf&#34;&gt;An emoji font&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After moving fonts to &lt;code&gt;~/.local/share/fonts/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run: &lt;code&gt;$ fc-cache -f -v&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; (If you are seeing boxes without icons, try changing this line from &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;: &lt;a href=&#34;https://github.com/ChristianChiarulli/nvim/raw/ac41efa237caf3a498077df19a3f31ca4b35caf3/lua/user/icons.lua#L5&#34;&gt;link&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Java Debugging and Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:microsoft/java-debug.git&#xA;cd java-debug/&#xA;./mvnw clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:microsoft/vscode-java-test.git&#xA;cd vscode-java-test&#xA;npm install&#xA;npm run build-plugin&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-doorlock</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/qbcore-framework/qb-doorlock</id>
    <link href="https://github.com/qbcore-framework/qb-doorlock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Doorlock Script For QB-Core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-doorlock&lt;/h1&gt; &#xA;&lt;p&gt;Doorlock System For QBCore&lt;/p&gt; &#xA;&lt;p&gt;This doorlock system is based on &lt;a href=&#34;https://github.com/thelindat/nui_doorlock&#34;&gt;nui_doorlock by thelindat&lt;/a&gt; and contains compatibility with it&#39;s format.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-core&#34;&gt;qb-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-input&#34;&gt;qb-input&lt;/a&gt; - For Making New Doors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-lockpick&#34;&gt;qb-lockpick&lt;/a&gt; - For Lockpicking Doors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick in-game door creation with /newdoor&lt;/li&gt; &#xA; &lt;li&gt;Multiple door types to support all possible doors&lt;/li&gt; &#xA; &lt;li&gt;Support for item checking, multiple or single items&lt;/li&gt; &#xA; &lt;li&gt;Support for citizenid, gang and job checking&lt;/li&gt; &#xA; &lt;li&gt;Support for qb-lockpick&lt;/li&gt; &#xA; &lt;li&gt;NUI Text as interaction text&lt;/li&gt; &#xA; &lt;li&gt;Great performance&lt;/li&gt; &#xA; &lt;li&gt;Uses the native door system&lt;/li&gt; &#xA; &lt;li&gt;Support for object names and hashes&lt;/li&gt; &#xA; &lt;li&gt;Play any sound you want when unlocking/locking a door&lt;/li&gt; &#xA; &lt;li&gt;Highly customisable&lt;/li&gt; &#xA; &lt;li&gt;Auto lock, to automatically lock a door after it has been opened&lt;/li&gt; &#xA; &lt;li&gt;Admin access option&lt;/li&gt; &#xA; &lt;li&gt;Change color based on locked state&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Single Door Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;  [&#39;somesingledoor&#39;] = { -- The index of the table, this is used as the doorID&#xA;        objName = &#39;hei_v_ilev_bk_gate2_pris&#39;, -- Door object name can be a string or a number. Alias: objHash = &#39;hei_v_ilev_bk_gate2_pris&#39;,&#xA;        objCoords  = vec3(261.83, 221.39, 106.41), -- Object coords&#xA;        textCoords = vec3(261.83, 221.39, 106.41), -- Coords for the interaction text&#xA;        authorizedJobs = { [&#39;police&#39;] = 0 }, -- Job access (checks for a minimum grade of 0)&#xA;        authorizedGangs = { [&#39;vagos&#39;] = 0 }, -- Gang access (checks for a minimum grade of 0)&#xA;        authorizedCitizenIDs = { [&#39;BUI05180&#39;] = true }, -- Citizen ID access&#xA;        items = { [&#39;keycard&#39;] = 1, [&#39;banana&#39;] = 3 }, -- Item access, can be a string or table | the value of the item is the amount of items needed when using a table, if it is a string it will always check if this person has one or more of the item&#xA;        needsAllItems = false, -- true or false | Whether to check if the person has all items to unlock the door or just one of the items&#xA;        allAuthorized = false, -- true or false | Will give access to everyone if it is true&#xA;        objYaw = -110.0, -- Heading of the door. Alias: objHeading = -110.0,&#xA;        locked = true, -- true or false | Is the door locked by default&#xA;        pickable = false, -- true or false | Can the door be lockpicked. Alias: lockpick = false,&#xA;        distance = 1.5, -- At what range the interaction text will show. Alis: maxDistance = 1.5,&#xA;        doorType = &#39;door&#39;, -- The type of door, can be door, double, sliding, doublesliding or garage&#xA;        fixText = true, -- true or false | fix the text to the center of the door&#xA;        doorLabel = &#39;Cloakroom&#39;, -- Label of the door that shows up when nearby&#xA;        audioRemote = true, -- true or false | Play sound from the player instead of the door&#xA;        audioLock = {[&#39;file&#39;] = &#39;metal-locker.ogg&#39;, [&#39;volume&#39;] = 0.6}, -- Play sound on door lock&#xA;        audioUnlock = {[&#39;file&#39;] = &#39;metallic-creak.ogg&#39;, [&#39;volume&#39;] = 0.7}, -- Play sound on door unlock&#xA;        autoLock = 1000, -- Auto lock after this many miliseconds&#xA;        doorRate = 1.0,  -- The rate of the animation to lock/unlock the door&#xA;        cantUnlock = true -- true or false | Set to true to not allow the player to unlock the door, only lock it. This means a script will have to trigger the unlock&#xA;        hideLabel = true, -- Set to true to hide the popup label, for hiding doors&#xA;        remoteTrigger = true, -- true or false | If you want to be able to remote trigger a door with H, put this here&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Double Door Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;  [&#39;somedoubledoor&#39;] = { -- The index of the table, this is used as the doorID, can be a number or a string&#xA;        doors = { -- Table of doors which holds both doors&#39; data&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;objName = &#39;v_ilev_rc_door2&#39;, -- Door object name can be a string or a number. Alias: objHash = &#39;v_ilev_rc_door2&#39;,&#xA;&#x9;&#x9;&#x9;objYaw = 135.0, -- Heading of the door. Alias: objHeading = 135.0,&#xA;&#x9;&#x9;&#x9;objCoords = vec3(-447.7283, 6006.702, 31.86523), -- Object coords&#xA;&#x9;&#x9;},&#xA;&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;objName = &#39;v_ilev_rc_door2&#39;, -- Door object name can be a string or a number. Alias: objHash = &#39;v_ilev_rc_door2&#39;,&#xA;&#x9;&#x9;&#x9;objYaw = -45.0,  -- Heading of the door. Alias: objHeading = -45.0,&#xA;&#x9;&#x9;&#x9;objCoords = vec3(-449.5656, 6008.538, 31.86523), -- Object coords&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;        textCoords = vec3(-448.67, 6007.52, 31.86523), -- Coords for the interaction text&#xA;        authorizedJobs = { [&#39;police&#39;] = 0 }, -- Job access (checks for a minimum grade of 0)&#xA;        authorizedGangs = { [&#39;vagos&#39;] = 0 }, -- Gang access (checks for a minimum grade of 0)&#xA;        authorizedCitizenIDs = { [&#39;BUI05180&#39;] = true }, -- Citizen ID access&#xA;        items = { [&#39;keycard&#39;] = 1, [&#39;banana&#39;] = 3 }, -- Item access, can be a string or table | the value of the item is the amount of items needed when using a table, if it is a string it will always check if this person has one or more of the item&#xA;        needsAllItems = false, -- true or false | Whether to check if the person has all items to unlock the door or just one of the items&#xA;        allAuthorized = false, -- true or false | Will give access to everyone if it is true&#xA;        locked = true, -- true or false | Is the door locked by default&#xA;        pickable = false, -- true or false | Can the door be lockpicked. Alias: lockpick = false,&#xA;        distance = 2.5, -- At what range the interaction text will show. Alis: maxDistance = 2.5,&#xA;        doorType = &#39;double&#39;, -- The type of door, can be door, double, sliding, doublesliding or garage&#xA;                    fixText = true, -- true or false | fix the text to the center of the door&#xA;        doorLabel = &#39;Cloakroom&#39;, -- Label of the door that shows up when nearby&#xA;        audioRemote = true, -- true or false | Play sound from the player instead of the door&#xA;        audioLock = {[&#39;file&#39;] = &#39;metal-locker.ogg&#39;, [&#39;volume&#39;] = 0.6}, -- Play sound on door lock&#xA;        audioUnlock = {[&#39;file&#39;] = &#39;metallic-creak.ogg&#39;, [&#39;volume&#39;] = 0.7}, -- Play sound on door unlock&#xA;        autoLock = 1000, -- Auto lock after this many miliseconds&#xA;        doorRate = 1.0,  -- The rate of the animation to lock/unlock the door&#xA;        cantUnlock = true -- true or false | Set to true to not allow the player to unlock the door, only lock it. This means a script will have to trigger the unlock&#xA;        hideLabel = true, -- Set to true to hide the popup label, for hiding doors&#xA;        remoteTrigger = true, -- true or false | If you want to be able to remote trigger a door with H, put this here&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Courseplay/Courseplay_FS22</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/Courseplay/Courseplay_FS22</id>
    <link href="https://github.com/Courseplay/Courseplay_FS22" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Courseplay for Farming Simulator 2022&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Courseplay Beta for Farming Simulator 2022&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Courseplay/Courseplay_FS22/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Courseplay/Courseplay_FS22?include_prereleases&amp;amp;style=flat-square&#34; alt=&#34;GitHub release (latest by date including pre-releases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Courseplay/Courseplay_FS22/releases/latest/download/FS22_Courseplay.zip&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads-pre/Courseplay/Courseplay_FS22/latest/FS22_Courseplay.zip?style=flat-square&#34; alt=&#34;GitHub Pre-Releases (by Asset)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Courseplay/Courseplay_FS22/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/Courseplay/Courseplay_FS22?style=flat-square&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Courseplay/Courseplay_FS22/releases/latest&#34;&gt;Download the latest developer version&lt;/a&gt;&lt;/strong&gt; (the file FS22_Courseplay.zip).&lt;/p&gt; &#xA;&lt;h2&gt;Multiplayer support with Version 7.0.1.0 or higher!&lt;/h2&gt; &#xA;&lt;h2&gt;What Works&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Course generation&lt;/li&gt; &#xA; &lt;li&gt;Field work with generated courses&lt;/li&gt; &#xA; &lt;li&gt;Vine fields with generated courses&lt;/li&gt; &#xA; &lt;li&gt;Refill or unload with &lt;a href=&#34;https://github.com/Stephan-S/FS22_AutoDrive&#34;&gt;AutoDrive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Combine self unload&lt;/li&gt; &#xA; &lt;li&gt;Wrap and collect bales with or without a course&lt;/li&gt; &#xA; &lt;li&gt;Save/load/rename/move courses&lt;/li&gt; &#xA; &lt;li&gt;Create custom fields with recording or drawing on the AI Map&lt;/li&gt; &#xA; &lt;li&gt;Vehicle Convoy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;There is now a CP Fieldwork job available on the AI helper screen. Just with the built in helper, you can select a target position. When you start the job, the helper will drive to this position before starting the fieldwork. Use the Field position to tell the helper which field you want them to work on. Once you selected a valid Field position, you can click on the CP Open/Close Course Generator button on the bottom of the screen to open the course generator and generate a course. If your vehicle is already near or on the field, you can use the HUD or a keyboard shortcut to start the CP helper at the first, nearest or last waypoint of the fieldwork course.&lt;/p&gt; &#xA;&lt;h2&gt;Turning on Debug Channels&lt;/h2&gt; &#xA;&lt;p&gt;When there&#39;s an issue, you can turn on debug logging on the Courseplay vehicle settings page for each vehicle. This will enable loggin debug information for that vehicle only. Devs need those logs when troubleshooting and fixing bugs.&lt;/p&gt; &#xA;&lt;p&gt;What information is logged when you activated the debug logging for the vehicle depends on the active debug channels. This are similar to those we had in CP 19, but the way to turn them on/off is different: you can bring up the debug channel menu by pressing Shift+4, then use Shift+1 and Shift+3 to select a channel, and then Shift+2 to toggle the selected debug channel (green is on).&lt;/p&gt; &#xA;&lt;p&gt;Remember, you have to activate debug mode for the vehicle in the vehicle settings page, otherwise nothing is logged, even if the channel is active.&lt;/p&gt; &#xA;&lt;h2&gt;Developer version&lt;/h2&gt; &#xA;&lt;p&gt;Please be aware you&#39;re using a developer version, which may and will contain errors, bugs, mistakes and unfinished code. Chances are you computer will explode when using it. Twice. If you have no idea what &#34;beta&#34;, &#34;alpha&#34;, or &#34;developer&#34; means and entails, steer clear. The Courseplay team will not take any responsibility for crop destroyed, savegames deleted or baby pandas killed.&lt;/p&gt; &#xA;&lt;p&gt;You have been warned.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re still ok with this, please remember to post possible issues that you find in the developer version. That&#39;s the only way we can find sources of error and fix them. Be as specific as possible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tell us the version number&lt;/li&gt; &#xA; &lt;li&gt;only use the vehicles necessary, not 10 other ones at a time&lt;/li&gt; &#xA; &lt;li&gt;which vehicles are involved, what is the intended action?&lt;/li&gt; &#xA; &lt;li&gt;Post! The! Log! to &lt;a href=&#34;https://gist.github.com/&#34;&gt;Gist&lt;/a&gt; or &lt;a href=&#34;http://pastebin.com/&#34;&gt;PasteBin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For more details on how to post a proper bug report, visit our &lt;a href=&#34;https://github.com/Courseplay/Courseplay_FS22/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Help Us Out&lt;/h2&gt; &#xA;&lt;p&gt;We work long, hard, in our own free time at developing and improving Courseplay. If you like the project, show us your undying love:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=7PDM2P6HQ5D56&amp;amp;item_name=Promote+the+development+of+Courseplay&amp;amp;currency_code=EUR&amp;amp;source=url&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34; alt=&#34;paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Courseplay/Courseplay_FS22/main/Contributors.md&#34;&gt;Contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Supporters&lt;/h2&gt; &#xA;&lt;p&gt;People and teams who support us&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ameyer1233 &lt;a href=&#34;https://www.modhoster.de/community/user/meyer123&#34;&gt;ModHoster Profile&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Burning Gamers &lt;a href=&#34;https://www.youtube.com/c/BurningGamersde/featured&#34;&gt;YouTube Channel&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mario Hirschfeld &lt;a href=&#34;https://www.youtube.com/c/MarioHirschfeld/featured&#34;&gt;YouTube Channel&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>esx-framework/esx-legacy</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/esx-framework/esx-legacy</id>
    <link href="https://github.com/esx-framework/esx-legacy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Repo For ESX-Legacy&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;ESX Legacy&lt;/h1&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;&lt;a href=&#34;https://discord.esx-framework.org/&#34;&gt;Discord&lt;/a&gt; - &lt;a href=&#34;https://esx-framework.org/&#34;&gt;Website&lt;/a&gt; - &lt;a href=&#34;https://docs.esx-framework.org/legacy/installation&#34;&gt;Documentation&lt;/a&gt;&lt;/b&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: ESX Legacy now supports ox Inventory. &lt;strong&gt;HOWEVER, THIS SHOULD ONLY BE USED IF YOU ARE EXPERIENCED AND KNOW WHAT YOU ARE DOING&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;ESX is the leading framework for creating roleplay servers on FiveM, with many official and community resources designed to utilise the tools provided here. For a taste of what&#39;s available&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;esx_identity: Enables character registration defining a players name, sex, height, and date of birth esx_society: Allows job resources to register a society, gaining employee management, society funds, and more esx_billing: Allows members of some societies to send fines or bills to other players esx_vehicleshop: Allow players to purchase vehicles from a dealership, or setup society support for a player-managed dealership esx_ambulancejob: Adds a death and respawn system while allowing players to work as EMS to heal and revive others&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Many more resources are included in this repository, or you can browse the &lt;a href=&#34;https://github.com/esx-community/&#34;&gt;ESX Community Github&lt;/a&gt; or &lt;a href=&#34;https://forum.cfx.re/tag/esx&#34;&gt;Cfx.re Releases board&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;es_extended - ESX framework for FiveM&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2015-2022 J√©r√©mie N&#39;gadi&lt;/p&gt; &#xA;&lt;p&gt;This program Is free software: you can redistribute it And/Or modify it under the terms Of the GNU General Public License As published by the Free Software Foundation, either version 3 Of the License, Or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program Is distributed In the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty Of MERCHANTABILITY Or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License For more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy Of the GNU General Public License along with this program. If Not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>AstroNvim/AstroNvim</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/AstroNvim/AstroNvim</id>
    <link href="https://github.com/AstroNvim/AstroNvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AstroNvim is an aesthetic and feature-rich neovim config that is extensible and easy to use with a great set of plugins&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; id=&#34;madewithlua&#34;&gt; &#xA; &lt;img src=&#34;https://astronvim.github.io/img/logo/astronvim.svg?sanitize=true&#34; width=&#34;110&#34; , height=&#34;100&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;AstroNvim&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/AstroNvim/AstroNvim/pulse&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/AstroNvim/AstroNvim?color=%4dc71f&amp;amp;label=Last%20Commit&amp;amp;logo=github&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/AstroNvim/AstroNvim/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/AstroNvim/AstroNvim?label=License&amp;amp;logo=GNU&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://neovim.io/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Neovim-0.7+-blueviolet.svg?style=flat-square&amp;amp;logo=Neovim&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/UcZutyeaFW&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/discord-Join-7289da?color=%235865F2%20&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=%23ffffff&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; AstroNvim is an aesthetic and feature-rich neovim config that is extensible and easy to use with a great set of plugins &lt;/p&gt; &#xA;&lt;h2&gt;üåü Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/dashboard.png&#34; alt=&#34;Preview1&#34;&gt; &lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/overview.png&#34; alt=&#34;Preview2&#34;&gt; &lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/lsp_hover.png&#34; alt=&#34;Preview33&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File explorer with &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;Neo-tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Autocompletion with &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;Cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git integration with &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Gitsigns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Statusline with &lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;Feline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terminal with &lt;a href=&#34;https://github.com/akinsho/toggleterm.nvim&#34;&gt;Toggleterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fuzzy finding with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting with &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Formatting and linting with &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;Null-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Language Server Protocol with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;Native LSP&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö° Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Fonts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.7.0&#34;&gt;Neovim 0.7+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terminal with true color support (for the default theme, otherwise it is dependent on the theme you are using)&lt;/li&gt; &#xA; &lt;li&gt;Optional Requirements: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; - live grep telescope search (&lt;code&gt;&amp;lt;leader&amp;gt;fw&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;lazygit&lt;/a&gt; - git ui toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tl&lt;/code&gt; or &lt;code&gt;&amp;lt;leader&amp;gt;gg&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dev.yorhel.nl/ncdu&#34;&gt;NCDU&lt;/a&gt; - disk usage toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tu&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://htop.dev/&#34;&gt;Htop&lt;/a&gt; - process viewer toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tt&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; - python repl toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tp&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node&lt;/a&gt; - node repl toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tn&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note when using default theme: For MacOS, the default terminal does not have true color support. You wil need to use &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; or another &lt;a href=&#34;https://gist.github.com/XVilka/8346728#terminal-emulators&#34;&gt;terminal emulator&lt;/a&gt; that has true color support.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note if you are still on Neovim v0.6: You can still install the previous version of AstroNvim that supported. After cloning the repository run &lt;code&gt;git checkout nvim-0.6&lt;/code&gt; to check out this version. This will no longer be receiving updates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Make a backup of your current nvim folder&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;mv ~/.config/nvim ~/.config/nvimbackup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Clone the repository&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/AstroNvim/AstroNvim ~/.config/nvim&#xA;nvim +PackerSync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üì¶ Basic Setup&lt;/h2&gt; &#xA;&lt;h4&gt;Install LSP&lt;/h4&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;:LspInstall&lt;/code&gt; followed by the name of the server you want to install&lt;br&gt; Example: &lt;code&gt;:LspInstall pyright&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Install language parser&lt;/h4&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;:TSInstall&lt;/code&gt; followed by the name of the language you want to install&lt;br&gt; Example: &lt;code&gt;:TSInstall python&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Manage plugins&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;:PackerClean&lt;/code&gt; to remove any disabled or unused plugins&lt;br&gt; Run &lt;code&gt;:PackerSync&lt;/code&gt; to update and clean plugins&lt;br&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Update AstroNvim&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;:AstroUpdate&lt;/code&gt; to get the latest updates from the repository&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üóíÔ∏è Links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://astronvim.github.io/&#34;&gt;AstroNvim Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/usage/walkthrough&#34;&gt;Basic Usage&lt;/a&gt; is given for basic usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/usage/mappings&#34;&gt;Default Mappings&lt;/a&gt; more about the default key bindings&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/configuration/plugin_defaults&#34;&gt;Default Plugin Configuration&lt;/a&gt; more about the provided plugin defaults&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/configuration/config_options&#34;&gt;Advanced Configuration&lt;/a&gt; more about advanced configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JQLZ7NJRTEo&amp;amp;t=4s&amp;amp;ab_channel=JohnCodes&#34;&gt;Watch&lt;/a&gt; a review video to know about the out of the box experience&lt;/p&gt; &#xA;&lt;h2&gt;‚≠ê Credits&lt;/h2&gt; &#xA;&lt;p&gt;Sincere appreciation to the following repositories, plugin authors and the entire neovim community out there that made the development of AstroNvim possible.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/acknowledgements#plugins-used-in-astronvim&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NvChad/NvChad&#34;&gt;NvChad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LunarVim&#34;&gt;LunarVim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CosmicNvim/CosmicNvim&#34;&gt;CosmicVim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34; id=&#34;madewithlua&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://lua.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-vehicleshop</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/qbcore-framework/qb-vehicleshop</id>
    <link href="https://github.com/qbcore-framework/qb-vehicleshop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Script For Buying Vehicles Used With QB-Core üöó&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-vehicleshop&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Test Drives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configurable time&lt;/li&gt; &#xA; &lt;li&gt;Returns player once time is up&lt;/li&gt; &#xA; &lt;li&gt;Can&#39;t take out more than one vehicle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Financing:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configurable down payment&lt;/li&gt; &#xA; &lt;li&gt;Configurable maximum payments&lt;/li&gt; &#xA; &lt;li&gt;Configurable commission amount for private dealerships&lt;/li&gt; &#xA; &lt;li&gt;Checks for payments due on player join and updates times on player logout or quit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shops:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lock to a specific job&lt;/li&gt; &#xA; &lt;li&gt;Commission paid to sales person for private dealer&lt;/li&gt; &#xA; &lt;li&gt;Create as many as desired with easy polyzone creation&lt;/li&gt; &#xA; &lt;li&gt;Vehicle sale amount gets deposited into the cardealer society fund for private dealer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Planned Updates&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QB-Phone support to make payments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preview header when near a vehicle at the public dealership:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/57848836/138773379-836be2a6-a800-47a4-8037-84d9052a964c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;After pressing the focus key and selecting the preview header (default: LEFT ALT)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/57848836/138770886-15e056db-3e57-43ea-b855-3ef4fd107acf.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configurable test drive times that automatically return the player&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/57848836/138771162-00ee2607-0b56-418b-848c-5d8a009f4acd.jpg&#34; alt=&#34;20211025160757_1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vehicle purchasing&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/57848836/138772385-ce16c0e6-baea-4b54-8eff-dbf44c54f568.jpg&#34; alt=&#34;20211025160853_1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Private job-based dealership menu (works off closest player)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/57848836/138772120-9513fa09-a22f-4a5f-8afe-6dc7756999f4.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Financing a vehicle with configurable max payment amount and minimum downpayment percentage&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/57848836/138771328-0b88078c-9f3d-4754-a4c7-bd5b68dd5129.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Financing preview header&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/57848836/138773600-d6f510f8-a476-436d-8211-21e8c920eb6b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Finance vehicle list&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/57848836/138771582-727e7fd4-4837-4320-b79a-479a6268b7ac.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Make a payment or pay off vehicle in full&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/57848836/138771627-faed7fcb-73c8-4b77-a33f-fffbb738ab03.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/qbcore-framework/PolyZone&#34;&gt;PolyZone&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You need to create new PolyZones if you want to create a new dealership or move default locations to another area. After you create the new PolyZones, add them to the Config.Shops &amp;gt; [Shape]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Here&#39;s a Wiki on how to create new PolyZone: &lt;a href=&#34;https://github.com/mkafrin/PolyZone/wiki/Using-the-creation-script&#34;&gt;https://github.com/mkafrin/PolyZone/wiki/Using-the-creation-script&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-menu&#34;&gt;qb-menu&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-input&#34;&gt;qb-input&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Config = {}&#xA;Config.UsingTarget = false -- If you are using qb-target (uses entity zones to target vehicles)&#xA;Config.Commission = 0.10 -- Percent that goes to sales person from a full car sale - default 10%&#xA;Config.FinanceCommission = 0.05 -- Percent that goes to sales person from a finance sale - default 5%&#xA;Config.FinanceZone = vector3(-29.53, -1103.67, 26.42) -- Where the finance menu is located&#xA;Config.PaymentWarning = 10 -- time in minutes that player has to make payment before repo - default 10&#xA;Config.PaymentInterval = 24 -- time in hours between payment being due - default 24&#xA;Config.MinimumDown = 10 -- minimum percentage allowed down - default 10&#xA;Config.MaximumPayments = 24 -- maximum payments allowed - default 24&#xA;Config.Shops = {&#xA;    [&#39;pdm&#39;] = {&#xA;        [&#39;Type&#39;] = &#39;free-use&#39;,  -- no player interaction is required to purchase a car&#xA;        [&#39;Zone&#39;] = {&#xA;            [&#39;Shape&#39;] = { --polygon that surrounds the shop&#xA;                vector2(-56.727394104004, -1086.2325439453),&#xA;                vector2(-60.612808227539, -1096.7795410156),&#xA;                vector2(-58.26834487915, -1100.572265625),&#xA;                vector2(-35.927803039551, -1109.0034179688),&#xA;                vector2(-34.427627563477, -1108.5111083984),&#xA;                vector2(-32.02657699585, -1101.5877685547),&#xA;                vector2(-33.342102050781, -1101.0377197266),&#xA;                vector2(-31.292987823486, -1095.3717041016)&#xA;            },&#xA;            [&#39;minZ&#39;] = 25.0,  -- min height of the shop zone&#xA;            [&#39;maxZ&#39;] = 28.0  -- max height of the shop zone&#xA;        },&#xA;        [&#39;Job&#39;] = &#39;none&#39;, -- Name of job or none&#xA;        [&#39;ShopLabel&#39;] = &#39;Premium Deluxe Motorsport&#39;, -- Blip name&#xA;        [&#39;Categories&#39;] = { -- Categories available to browse&#xA;            [&#39;sportsclassics&#39;] = &#39;Sports Classics&#39;,&#xA;            [&#39;sedans&#39;] = &#39;Sedans&#39;,&#xA;            [&#39;coupes&#39;] = &#39;Coupes&#39;,&#xA;            [&#39;suvs&#39;] = &#39;SUVs&#39;,&#xA;            [&#39;offroad&#39;] = &#39;Offroad&#39;,&#xA;            [&#39;muscle&#39;] = &#39;Muscle&#39;,&#xA;            [&#39;compacts&#39;] = &#39;Compacts&#39;,&#xA;            [&#39;motorcycles&#39;] = &#39;Motorcycles&#39;,&#xA;            [&#39;vans&#39;] = &#39;Vans&#39;&#xA;        },&#xA;        [&#39;TestDriveTimeLimit&#39;] = 0.5, -- Time in minutes until the vehicle gets deleted - default 0.5 (30 seconds)&#xA;        [&#39;Location&#39;] = vector3(-45.67, -1098.34, 26.42), -- Blip Location&#xA;        [&#39;ReturnLocation&#39;] = vector3(-44.74, -1082.58, 26.68), -- Location to return vehicle, only enables if the vehicleshop has a job owned&#xA;        [&#39;VehicleSpawn&#39;] = vector4(-56.79, -1109.85, 26.43, 71.5), -- Spawn location when vehicle is bought&#xA;        [&#39;ShowroomVehicles&#39;] = {&#xA;            [1] = {&#xA;                coords = vector4(-45.65, -1093.66, 25.44, 69.5), -- where the vehicle will spawn on display&#xA;                defaultVehicle = &#39;adder&#39;, -- Default display vehicle&#xA;                chosenVehicle = &#39;adder&#39;, -- Same as default but is dynamically changed when swapping vehicles&#xA;            },&#xA;            [2] = {&#xA;                coords = vector4(-48.27, -1101.86, 25.44, 294.5),&#xA;                defaultVehicle = &#39;schafter2&#39;,&#xA;                chosenVehicle = &#39;schafter2&#39;,&#xA;            },&#xA;            [3] = {&#xA;                coords = vector4(-39.6, -1096.01, 25.44, 66.5),&#xA;                defaultVehicle = &#39;comet2&#39;,&#xA;                chosenVehicle = &#39;comet2&#39;,&#xA;            },&#xA;            [4] = {&#xA;                coords = vector4(-51.21, -1096.77, 25.44, 254.5),&#xA;                defaultVehicle = &#39;vigero&#39;,&#xA;                chosenVehicle = &#39;vigero&#39;,&#xA;            },&#xA;            [5] = {&#xA;                coords = vector4(-40.18, -1104.13, 25.44, 338.5),&#xA;                defaultVehicle = &#39;t20&#39;,&#xA;                chosenVehicle = &#39;t20&#39;,&#xA;            },&#xA;            [6] = {&#xA;                coords = vector4(-43.31, -1099.02, 25.44, 52.5),&#xA;                defaultVehicle = &#39;bati&#39;,&#xA;                chosenVehicle = &#39;bati&#39;,&#xA;            },&#xA;            [7] = {&#xA;                coords = vector4(-50.66, -1093.05, 25.44, 222.5),&#xA;                defaultVehicle = &#39;bati&#39;,&#xA;                chosenVehicle = &#39;bati&#39;,&#xA;            },&#xA;            [8] = {&#xA;                coords = vector4(-44.28, -1102.47, 25.44, 298.5),&#xA;                defaultVehicle = &#39;bati&#39;,&#xA;                chosenVehicle = &#39;bati&#39;,&#xA;            }&#xA;        },&#xA;    },&#xA;    [&#39;luxury&#39;] = {&#xA;        [&#39;Type&#39;] = &#39;managed&#39;,  -- meaning a real player has to sell the car&#xA;        [&#39;Zone&#39;] = {&#xA;            [&#39;Shape&#39;] = {&#xA;                vector2(-81.724754333496, 72.436462402344),&#xA;                vector2(-60.159938812256, 60.576206207275),&#xA;                vector2(-55.763122558594, 61.749210357666),&#xA;                vector2(-52.965869903564, 69.869110107422),&#xA;                vector2(-50.352680206299, 75.886123657227),&#xA;                vector2(-61.261016845703, 81.564918518066),&#xA;                vector2(-63.812171936035, 75.633102416992),&#xA;                vector2(-76.546226501465, 81.189826965332)&#xA;            },&#xA;            [&#39;minZ&#39;] = 69.0,&#xA;            [&#39;maxZ&#39;] = 76.0&#xA;        },&#xA;        [&#39;Job&#39;] = &#39;cardealer&#39;, -- Name of job or none&#xA;        [&#39;ShopLabel&#39;] = &#39;Luxury Vehicle Shop&#39;,&#xA;        [&#39;Categories&#39;] = {&#xA;            [&#39;super&#39;] = &#39;Super&#39;,&#xA;            [&#39;sports&#39;] = &#39;Sports&#39;&#xA;        },&#xA;        [&#39;TestDriveTimeLimit&#39;] = 0.5,&#xA;        [&#39;Location&#39;] = vector3(-63.59, 68.25, 73.06),&#xA;        [&#39;ReturnLocation&#39;] = vector3(-65.05, 81.23, 71.16),&#xA;        [&#39;VehicleSpawn&#39;] = vector4(-71.13, 84.04, 71.09, 65.23),&#xA;        [&#39;ShowroomVehicles&#39;] = {&#xA;            [1] = {&#xA;                coords = vector4(-75.96, 74.78, 70.90, 221.69),&#xA;                defaultVehicle = &#39;italirsx&#39;,&#xA;                chosenVehicle = &#39;italirsx&#39;,&#xA;            },&#xA;            [2] = {&#xA;                coords = vector4(-66.52, 74.33, 70.65, 188.03),&#xA;                defaultVehicle = &#39;italigtb&#39;,&#xA;                chosenVehicle = &#39;italigtb&#39;,&#xA;            },&#xA;            [3] = {&#xA;                coords = vector4(-71.83, 68.60, 70.75, 276.57),&#xA;                defaultVehicle = &#39;nero&#39;,&#xA;                chosenVehicle = &#39;nero&#39;,&#xA;            },&#xA;            [4] = {&#xA;                coords = vector4(-59.95, 68.61, 70.85, 181.44),&#xA;                defaultVehicle = &#39;comet2&#39;,&#xA;                chosenVehicle = &#39;comet2&#39;,&#xA;            }&#xA;        }&#xA;    } -- Add your next table under this comma&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>awesomeWM/awesome</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/awesomeWM/awesome</id>
    <link href="https://github.com/awesomeWM/awesome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;awesome window manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Readme&lt;/h1&gt; &#xA;&lt;h2&gt;About Awesome&lt;/h2&gt; &#xA;&lt;p&gt;Awesome is a highly configurable, next generation framework window manager for X.&lt;/p&gt; &#xA;&lt;h2&gt;Building and installation&lt;/h2&gt; &#xA;&lt;p&gt;After extracting the dist tarball or cloning the repository, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;create a build directory at &lt;code&gt;./build&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;cmake&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;build Awesome and&lt;/li&gt; &#xA; &lt;li&gt;install it to the default prefix path &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Alternatively to the above, you can generate a &lt;code&gt;.deb&lt;/code&gt; or &lt;code&gt;.rpm&lt;/code&gt; package, for easy installation management:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make package&#xA;&#xA;sudo dpkg -i awesome-x.y.z.deb&#xA;# or&#xA;sudo rpm -Uvh awesome-x.y.z.rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced options and testing&lt;/h3&gt; &#xA;&lt;p&gt;A full list of dependencies, more advanced build options, as well as instructions on how to use the test suite can be found &lt;a href=&#34;https://awesomewm.org/apidoc/documentation/10-building-and-testing.md.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing current git master as a package receipts&lt;/h3&gt; &#xA;&lt;h4&gt;Arch Linux AUR&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S --needed base-devel git&#xA;git clone https://aur.archlinux.org/awesome-git.git&#xA;cd awesome-git&#xA;makepkg -fsri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debian-based&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt build-dep awesome&#xA;git clone https://github.com/awesomewm/awesome&#xA;cd awesome&#xA;make package&#xA;sudo apt install *.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Awesome&lt;/h2&gt; &#xA;&lt;p&gt;You can directly select Awesome from your display manager. If not, you can add the following line to your &lt;code&gt;.xinitrc&lt;/code&gt; to start Awesome using &lt;code&gt;startx&lt;/code&gt; or to &lt;code&gt;.xsession&lt;/code&gt; to start Awesome using your display manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;exec awesome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to connect Awesome to a specific display, make sure that the &lt;code&gt;DISPLAY&lt;/code&gt; environment variable is set correctly, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DISPLAY=foo.bar:1 exec awesome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(This will start Awesome on display &lt;code&gt;:1&lt;/code&gt; of the host foo.bar.)&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration of Awesome is done by creating a &lt;code&gt;$XDG_CONFIG_HOME/awesome/rc.lua&lt;/code&gt; file, typically &lt;code&gt;~/.config/awesome/rc.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example configuration named &lt;code&gt;awesomerc.lua&lt;/code&gt; is provided in the source.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;On most systems any message printed by Awesome (including warnings and errors) is written to &lt;code&gt;~/.xsession-errors&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If Awesome does not start or the configuration file is not producing the desired results the user should examine this file to gain insight into the problem.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging tips&lt;/h3&gt; &#xA;&lt;p&gt;You can call &lt;code&gt;awesome&lt;/code&gt; with &lt;code&gt;gdb&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DISPLAY=:2 gdb awesome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in &lt;code&gt;gdb&lt;/code&gt; set any arguments and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(gdb) set args --replace&#xA;(gdb) run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Asking questions&lt;/h2&gt; &#xA;&lt;h4&gt;IRC&lt;/h4&gt; &#xA;&lt;p&gt;You can join us in the &lt;code&gt;#awesome&lt;/code&gt; channel on the &lt;a href=&#34;http://www.oftc.net/&#34;&gt;OFTC&lt;/a&gt; IRC network.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webchat.oftc.net/?channels=awesome&#34;&gt;IRC Webchat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Stack Overflow&lt;/h4&gt; &#xA;&lt;p&gt;You can ask questions on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/awesome-wm&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Reddit&lt;/h4&gt; &#xA;&lt;p&gt;We also have a &lt;a href=&#34;https://www.reddit.com/r/awesomewm/&#34;&gt;awesome subreddit&lt;/a&gt; where you can share your work and ask questions.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting issues&lt;/h2&gt; &#xA;&lt;p&gt;Please report any issues you may find on &lt;a href=&#34;https://github.com/awesomeWM/awesome/issues&#34;&gt;our bugtracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing code&lt;/h2&gt; &#xA;&lt;p&gt;You can submit pull requests on the &lt;a href=&#34;https://github.com/awesomeWM/awesome&#34;&gt;github repository&lt;/a&gt;. Please read the &lt;a href=&#34;https://github.com/awesomeWM/awesome/raw/master/docs/02-contributing.md&#34;&gt;contributing guide&lt;/a&gt; for any coding, documentation or patch guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/awesomeWM/awesome&#34;&gt;&lt;img src=&#34;https://travis-ci.com/awesomeWM/awesome.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Online documentation is available &lt;a href=&#34;https://awesomewm.org/apidoc/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is licensed under GNU General Public License v2 or later. You can read it online at (&lt;a href=&#34;http://www.gnu.org/licenses/gpl-2.0.html&#34;&gt;v2&lt;/a&gt; or &lt;a href=&#34;http://www.gnu.org/licenses/gpl.html&#34;&gt;v3&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-radialmenu</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/qbcore-framework/qb-radialmenu</id>
    <link href="https://github.com/qbcore-framework/qb-radialmenu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Radial Menu Used With QB-Core üîÑ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-radialmenu&lt;/h1&gt; &#xA;&lt;p&gt;Radial Menu Used With QB-Core &lt;span&gt;üîÑ&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Now using FontAwesome Icons!&lt;/strong&gt; To change icons get the name from &lt;a href=&#34;https://fontawesome.com/v5.0/icons?d=gallery&amp;amp;p=2&amp;amp;s=brands,light,regular,solid&amp;amp;m=free&#34;&gt;FontAwesome&lt;/a&gt; (v5) and use the icon&#39;s name in the config.lua for the icon (no &lt;code&gt;fa-&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt; just the name like &lt;code&gt;arrow-right&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>overextended/ox_inventory</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/overextended/ox_inventory</id>
    <link href="https://github.com/overextended/ox_inventory" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Overextended Inventory for ESX Legacy&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/65407488/147992899-93998c0a-75fb-4055-8c06-8da8c49342d6.png&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;h3&gt;&lt;a href=&#34;https://overextended.github.io/docs/ox_inventory/&#34;&gt;Read the documentation for setup, installation, and integration&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Framework&lt;/h1&gt; &#xA;&lt;p&gt;The inventory was designed with the intention to move towards a more generic / standalone structure so it can be integrated into any framework without too much hassle. I will be writing a guide for manually setting up support &lt;em&gt;sometime soon‚Ñ¢&lt;/em&gt;. In the mean-time, it will work without any alterations if using the latest updates to &lt;strong&gt;&lt;a href=&#34;https://github.com/esx-framework/esx-legacy&#34;&gt;ESX Legacy&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://overextended.github.io/docs/ox_inventory/&#34;&gt;documentation&lt;/a&gt; setting your config.&lt;br&gt; When set, you can add the following to your &#39;server.cfg&#39;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;exec @ox_inventory/config.cfg&#xA;ensure ox_inventory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Logging&lt;/h1&gt; &#xA;&lt;p&gt;The included logging module utilises datadog to store logging data, which can be expanded for improved analytics and metrics. Register an account at &lt;a href=&#34;https://www.datadoghq.com/&#34;&gt;datadoghq&lt;/a&gt;.&lt;br&gt; The &lt;em&gt;free plan&lt;/em&gt; is enough for most user&#39;s purposes and provides far more utility than the typical weird discord logs utilised in other resources.&lt;/p&gt; &#xA;&lt;p&gt;Once you have registered, generate an API key and add &lt;code&gt;set datadog:key &#39;apikey&#39;&lt;/code&gt; to your server config.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h3&gt;Shops&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creates different shops for 24/7, Ammunation, Liquor Stores, Vending Machines, etc.&lt;/li&gt; &#xA; &lt;li&gt;Job restricted shops, such as a Police Armoury.&lt;/li&gt; &#xA; &lt;li&gt;Items can be restricted to specific job grades and licenses.&lt;/li&gt; &#xA; &lt;li&gt;Define the price for each item, and even allow different currency (black money, poker chips, etc).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Items&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generic item data shared between objects.&lt;/li&gt; &#xA; &lt;li&gt;Specific data stored per-slot, with metadata to hold custom information.&lt;/li&gt; &#xA; &lt;li&gt;Weapons, attachments, and durability.&lt;/li&gt; &#xA; &lt;li&gt;Flexible item use allows for progress bars, server callbacks, and cancellation with simple functions and exports.&lt;/li&gt; &#xA; &lt;li&gt;Support for items registered with ESX.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stashes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Server-side security prevents arbitrary access to any stash.&lt;/li&gt; &#xA; &lt;li&gt;Support personal stashes, able to be opened with different identifiers.&lt;/li&gt; &#xA; &lt;li&gt;Job-restricted stashes as well as a police evidence locker.&lt;/li&gt; &#xA; &lt;li&gt;Server exports allow for registration of stashes from any resource (see &lt;a href=&#34;https://github.com/overextended/ox_inventory_examples/raw/main/server.lua&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Access small stashes via containers, such as paperbags, from using an item.&lt;/li&gt; &#xA; &lt;li&gt;Vehicle gloveboxes and trunks, for both owned and unowned.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Temporary stashes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dumpsters, drops, and non-player vehicles.&lt;/li&gt; &#xA; &lt;li&gt;Loot tables allow users to find random items in dumpsters and unowned vehicles.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;div&gt;&#xA; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://discord.gg/overextended&#34;&gt;Discord Server&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;table&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;&lt;h3 align=&#34;center&#34;&gt;Legal Notices&lt;/h3&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; Ox Inventory for ESX Legacy &lt;p&gt;Copyright ¬© 2022 &lt;a href=&#34;https://github.com/thelindat&#34;&gt;Linden&lt;/a&gt;, &lt;a href=&#34;https://github.com/dunak-debug&#34;&gt;Dunak&lt;/a&gt;, &lt;a href=&#34;https://github.com/LukeWasTakenn&#34;&gt;Luke&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &lt;p&gt;You should have received a copy of the GNU General Public License along with this program.&lt;br&gt; If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-drugs</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/qbcore-framework/qb-drugs</id>
    <link href="https://github.com/qbcore-framework/qb-drugs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Drugs Script For QB-Core üåø&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-drugs&lt;/h1&gt; &#xA;&lt;p&gt;Drugs Script For QB-Core&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Kong/kong</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/Kong/kong</id>
    <link href="https://github.com/Kong/kong" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü¶ç The Cloud-Native API Gateway&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://konghq.com/&#34;&gt;&lt;img src=&#34;https://konghq.com/wp-content/uploads/2018/05/kong-logo-github-readme.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Kong/kong?style=flat-square&#34; alt=&#34;Stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/Kong/kong?style=flat-square&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/_/kong?style=flat-square&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;a href=&#34;https://github.com/Kong/kong/actions&#34;&gt;&lt;img src=&#34;https://github.com/Kong/kong/workflows/Build%20&amp;amp;%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/Kong/kong?color=green&amp;amp;label=Version&amp;amp;style=flat-square&#34; alt=&#34;Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue?style=flat-square&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/thekonginc?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kong&lt;/strong&gt; or &lt;strong&gt;Kong API Gateway&lt;/strong&gt; is a cloud-native, platform-agnostic, scalable API Gateway distinguished for its high performance and extensibility via plugins.&lt;/p&gt; &#xA;&lt;p&gt;By providing functionality for proxying, routing, load balancing, health checking, authentication (and &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/#features&#34;&gt;more&lt;/a&gt;), Kong serves as the central layer for orchestrating microservices or conventional API traffic with ease.&lt;/p&gt; &#xA;&lt;p&gt;Kong runs natively on Kubernetes thanks to its official &lt;a href=&#34;https://github.com/Kong/kubernetes-ingress-controller&#34;&gt;Kubernetes Ingress Controller&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://konghq.com/install/#kong-community&#34;&gt;Installation&lt;/a&gt; | &lt;a href=&#34;https://docs.konghq.com&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://github.com/Kong/kong/discussions&#34;&gt;Discussions&lt;/a&gt; | &lt;a href=&#34;https://discuss.konghq.com&#34;&gt;Forum&lt;/a&gt; | &lt;a href=&#34;https://konghq.com/blog&#34;&gt;Blog&lt;/a&gt; | &lt;a href=&#34;https://hub.docker.com/r/kong/kong/tags&#34;&gt;Builds&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Let‚Äôs test drive Kong by adding authentication to an API in under 5 minutes.&lt;/p&gt; &#xA;&lt;p&gt;We suggest using the docker-compose distribution via the instructions below, but there is also a &lt;a href=&#34;https://docs.konghq.com/install/docker/&#34;&gt;docker installation&lt;/a&gt; procedure if you‚Äôd prefer to run the Kong API Gateway in DB-less mode.&lt;/p&gt; &#xA;&lt;p&gt;Whether you‚Äôre running in the cloud, on bare metal, or using containers, you can find every supported distribution on our &lt;a href=&#34;https://konghq.com/install/#kong-community&#34;&gt;official installation&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To start, clone the Docker repository and navigate to the compose folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;  $ git clone https://github.com/Kong/docker-kong&#xA;  $ cd compose/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the Gateway stack using:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;  $ docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Gateway will be available on the following ports on localhost:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:8000&lt;/code&gt; on which Kong listens for incoming HTTP traffic from your clients, and forwards it to your upstream services. &lt;code&gt;:8001&lt;/code&gt; on which the Admin API used to configure Kong listens.&lt;/p&gt; &#xA;&lt;p&gt;Next, follow the &lt;a href=&#34;https://docs.konghq.com/gateway-oss/latest/getting-started/configuring-a-service/&#34;&gt;quick start guide&lt;/a&gt; to tour the Gateway features.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;By centralizing common API functionality across all your organization&#39;s services, the Kong API Gateway creates more freedom for engineering teams to focus on the challenges that matter most.&lt;/p&gt; &#xA;&lt;p&gt;The top Kong features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Advanced routing, load balancing, health checking - all configurable via a RESTful admin API or declarative configuration.&lt;/li&gt; &#xA; &lt;li&gt;Authentication and authorization for APIs using methods like JWT, basic auth, OAuth, ACLs and more.&lt;/li&gt; &#xA; &lt;li&gt;Proxy, SSL/TLS termination, and connectivity support for L4 or L7 traffic.&lt;/li&gt; &#xA; &lt;li&gt;Plugins for enforcing traffic controls, rate limiting, req/res transformations, logging, monitoring and including a plugin developer hub.&lt;/li&gt; &#xA; &lt;li&gt;Sophisticated deployment models like Declarative Databaseless Deployment and Hybrid Deployment (control plane/data plane separation) without any vendor lock-in.&lt;/li&gt; &#xA; &lt;li&gt;Native &lt;a href=&#34;https://github.com/Kong/kubernetes-ingress-controller&#34;&gt;ingress controller&lt;/a&gt; support for serving Kubernetes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://konghq.com/&#34;&gt;&lt;img src=&#34;https://konghq.com/wp-content/uploads/2018/05/kong-benefits-github-readme.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Plugin Hub&lt;/h3&gt; &#xA;&lt;p&gt;Plugins provide advanced functionality that extends the use of the Gateway. Many of the Kong Inc. and community-developed plugins like AWS Lambda, Correlation ID, and Response Transformer are showcased at the &lt;a href=&#34;https://docs.konghq.com/hub/&#34;&gt;Plugin Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Contribute to the Plugin Hub and ensure your next innovative idea is published and available to the broader community!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We ‚ù§Ô∏è pull requests, and we‚Äôre continually working hard to make it as easy as possible for developers to contribute. Before beginning development with the Kong API Gateway, please familiarize yourself with the following developer resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributor Guide (&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;) to learn about how to contribute to Kong.&lt;/li&gt; &#xA; &lt;li&gt;Development Guide (&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/DEVELOPER.md&#34;&gt;DEVELOPER.md&lt;/a&gt;): Setting up your development environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/COPYRIGHT&#34;&gt;COPYRIGHT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://docs.konghq.com/latest/plugin-development/&#34;&gt;Plugin Development Guide&lt;/a&gt; for building new and creative plugins, or browse the online version of Kong&#39;s source code documentation in the &lt;a href=&#34;https://docs.konghq.com/latest/pdk/&#34;&gt;Plugin Development Kit (PDK) Reference&lt;/a&gt;. Developers can build plugins in &lt;a href=&#34;https://docs.konghq.com/gateway-oss/latest/plugin-development/&#34;&gt;Lua&lt;/a&gt;, &lt;a href=&#34;https://docs.konghq.com/gateway-oss/latest/external-plugins/#developing-go-plugins&#34;&gt;Go&lt;/a&gt; or &lt;a href=&#34;https://docs.konghq.com/gateway-oss/latest/external-plugins/#developing-javascript-plugins&#34;&gt;JavaScript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; for more details about a given release. The &lt;a href=&#34;https://semver.org&#34;&gt;SemVer Specification&lt;/a&gt; is followed when versioning Gateway releases.&lt;/p&gt; &#xA;&lt;h2&gt;Join the Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the Kong discussions at the Kong Nation forum: &lt;a href=&#34;https://discuss.konghq.com/&#34;&gt;https://discuss.konghq.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow us on Twitter: &lt;a href=&#34;https://twitter.com/thekonginc&#34;&gt;https://twitter.com/thekonginc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out the docs: &lt;a href=&#34;https://docs.konghq.com/&#34;&gt;https://docs.konghq.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Keep updated on YouTube by subscribing: &lt;a href=&#34;https://www.youtube.com/c/KongInc/videos&#34;&gt;https://www.youtube.com/c/KongInc/videos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read up on the latest happenings at our blog: &lt;a href=&#34;https://konghq.com/blog/&#34;&gt;https://konghq.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visit our homepage to learn more: &lt;a href=&#34;https://konghq.com/&#34;&gt;https://konghq.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Konnect Cloud&lt;/h2&gt; &#xA;&lt;p&gt;Kong Inc. offers commercial subscriptions that enhance the Kong API Gateway in a variety of ways. Customers of Kong&#39;s &lt;a href=&#34;https://konghq.com/kong-konnect/&#34;&gt;Konnect Cloud&lt;/a&gt; subscription take advantage of additional gateway functionality, commercial support, and access to Kong&#39;s managed (SaaS) control plane platform. The Konnect Cloud platform features include real-time analytics, a service catalog, developer portals, and so much more! &lt;a href=&#34;https://konnect.konghq.com/register/?utm_medium=Referral&amp;amp;utm_source=Github&amp;amp;utm_campaign=kong-gateway&amp;amp;utm_content=konnect-promo-in-gateway&amp;amp;utm_term=get-started&#34;&gt;Get started&lt;/a&gt; with Konnect Cloud.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2016-2022 Kong Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-houses</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/qbcore-framework/qb-houses</id>
    <link href="https://github.com/qbcore-framework/qb-houses" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Housing and Furniture Script Used With QB-Core üè† ü™ë&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-houses&lt;/h1&gt; &#xA;&lt;p&gt;Real Estate for QB-Core Framework &lt;span&gt;üè°&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-core&#34;&gt;qb-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-radialmenu&#34;&gt;qb-radialmenu&lt;/a&gt; - For the menu in screenshots&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-anticheat&#34;&gt;qb-anticheat&lt;/a&gt; - Anti Cheat&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-phone&#34;&gt;qb-phone&lt;/a&gt; - Houses app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-multicharacter&#34;&gt;qb-multicharacter&lt;/a&gt; - Checking if player is inside after character chosen (You need to edit the lines if you don&#39;t use this)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-garages&#34;&gt;qb-garages&lt;/a&gt; - House Garage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-interior&#34;&gt;qb-interior&lt;/a&gt; - Necessary for house interiors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-clothing&#34;&gt;qb-clothing&lt;/a&gt; - Outfits&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-weathersync&#34;&gt;qb-weathersync&lt;/a&gt; - Desync weather inside house&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-weed&#34;&gt;qb-weed&lt;/a&gt; - Weed plant&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-skillbar&#34;&gt;qb-skillbar&lt;/a&gt; - Skills&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imgur.com/4eQnRqA.png&#34; alt=&#34;Buy House&#34;&gt; &lt;img src=&#34;https://imgur.com/UQzvdzn.png&#34; alt=&#34;House Door&#34;&gt; &lt;img src=&#34;https://imgur.com/XRbkzsP.png&#34; alt=&#34;Garage&#34;&gt; &lt;img src=&#34;https://imgur.com/GTpalYW.png&#34; alt=&#34;Radial Menu&#34;&gt; &lt;img src=&#34;https://imgur.com/Bbp6rvI.png&#34; alt=&#34;Decorate&#34;&gt; &lt;img src=&#34;https://imgur.com/fmV0gPM.png&#34; alt=&#34;Object Placing&#34;&gt; &lt;img src=&#34;https://imgur.com/HarcCIU.png&#34; alt=&#34;Stash&#34;&gt; &lt;img src=&#34;https://imgur.com/Y0rzBuy.png&#34; alt=&#34;Inside Door&#34;&gt; &lt;img src=&#34;https://imgur.com/a0qPwsL.png&#34; alt=&#34;Security Camera&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;House Tiers&lt;/h1&gt; &#xA;&lt;h2&gt;T1&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/pLVzo6G.jpg&#34; alt=&#34;Tier 1&#34;&gt; &lt;img src=&#34;https://i.imgur.com/YqZHjra.jpg&#34; alt=&#34;Tier 1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;T2&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mp3XL4Y.jpg&#34; alt=&#34;Tier 2&#34;&gt; &lt;img src=&#34;https://i.imgur.com/3DH9RFw.jpg&#34; alt=&#34;Tier 2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;T3&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/1XF60jD.jpg&#34; alt=&#34;Tier 3&#34;&gt; &lt;img src=&#34;https://i.imgur.com/iVYajrY.jpg&#34; alt=&#34;Tier 3&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;T4&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ubt165o.jpg&#34; alt=&#34;Tier 4&#34;&gt; &lt;img src=&#34;https://i.imgur.com/x5nXid5.jpg&#34; alt=&#34;Tier 4&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;T5&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CbqPcq0.jpg&#34; alt=&#34;Tier 5&#34;&gt; &lt;img src=&#34;https://i.imgur.com/RxKlteo.jpg&#34; alt=&#34;Tier 5&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;T6&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/pRS6XdN.jpg&#34; alt=&#34;Tier 6&#34;&gt; &lt;img src=&#34;https://i.imgur.com/sNFavws.jpg&#34; alt=&#34;Tier 6&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stormram for police&lt;/li&gt; &#xA; &lt;li&gt;House garage&lt;/li&gt; &#xA; &lt;li&gt;Adding houses in-game with command (See commands section below)&lt;/li&gt; &#xA; &lt;li&gt;House decoration&lt;/li&gt; &#xA; &lt;li&gt;Key system&lt;/li&gt; &#xA; &lt;li&gt;Outfits&lt;/li&gt; &#xA; &lt;li&gt;Stash&lt;/li&gt; &#xA; &lt;li&gt;Real Estate Job&lt;/li&gt; &#xA; &lt;li&gt;Different interiors based on house tier&lt;/li&gt; &#xA; &lt;li&gt;Doorbell&lt;/li&gt; &#xA; &lt;li&gt;Automatically adds blip for owned house&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;/decorate - Allows the player decorate the house&lt;/li&gt; &#xA; &lt;li&gt;/createhouse [price] [tier] - Creates a house and saves it to database (Only people with &#34;realestate&#34; job)&lt;/li&gt; &#xA; &lt;li&gt;/addgarage - Adds a garage to nearby house (Only people with &#34;realestate&#34; job)&lt;/li&gt; &#xA; &lt;li&gt;/enter - Enters the nearby house (keys needed)&lt;/li&gt; &#xA; &lt;li&gt;/ring - Rings the bell of nearby house&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the script and put it in the &lt;code&gt;[qb]&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Import &lt;code&gt;qb-houses.sql&lt;/code&gt; in your database&lt;/li&gt; &#xA; &lt;li&gt;Add the following code to your server.cfg/resouces.cfg&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;ensure qb-core&#xA;ensure qb-radialmenu&#xA;ensure qb-anticheat&#xA;ensure qb-phone&#xA;ensure qb-multicharacter&#xA;ensure qb-garages&#xA;ensure qb-interior&#xA;ensure qb-clothing&#xA;ensure qb-weathersync&#xA;ensure qb-weed&#xA;ensure qb-skillbar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Config = Config or {} -- Don&#39;t touch&#xA;&#xA;Config.MinZOffset = 30 -- Minimum Z Offset houses will be (You don&#39;t need to change it:)&#xA;&#xA;Config.RamsNeeded = 2 -- How many times stormram needs to be used to break the door.&#xA;&#xA;Config.Houses = {} -- Don&#39;t touch&#xA;&#xA;Config.Furniture = {&#xA;&#x9;[&#34;sofas&#34;] = { -- Category id (don&#39;t change unless you know what you&#39;re doing)&#xA;&#x9;&#x9;label = &#34;Sofas&#34;, -- Category label displayed on decorate section&#xA;&#x9;&#x9;items = {&#xA;&#x9;&#x9;&#x9;[1] = { [&#34;object&#34;] = &#34;miss_rub_couch_01&#34;, [&#34;price&#34;] = 300, [&#34;label&#34;] = &#34;Old couch&#34; }, -- You can add or edit objects here&#xA;&#x9;&#x9;&#x9;[2] = { [&#34;object&#34;] = &#34;prop_fib_3b_bench&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;Threesits couch&#34; },&#xA;&#x9;&#x9;&#x9;[3] = { [&#34;object&#34;] = &#34;prop_ld_farm_chair01&#34;, [&#34;price&#34;] = 250, [&#34;label&#34;] = &#34;Old chair&#34; },&#xA;&#x9;&#x9;&#x9;[4] = { [&#34;object&#34;] = &#34;prop_ld_farm_couch01&#34;, [&#34;price&#34;] = 300, [&#34;label&#34;] = &#34;Old treesits couch&#34; },&#xA;&#x9;&#x9;&#x9;[5] = { [&#34;object&#34;] = &#34;prop_ld_farm_couch02&#34;, [&#34;price&#34;] = 300, [&#34;label&#34;] = &#34;Old striped couch&#34; },&#xA;&#x9;&#x9;&#x9;[6] = { [&#34;object&#34;] = &#34;v_res_d_armchair&#34;, [&#34;price&#34;] = 300, [&#34;label&#34;] = &#34;Old 1 Seat Couch Yellow&#34; },&#xA;&#x9;&#x9;&#x9;[7] = { [&#34;object&#34;] = &#34;v_res_fh_sofa&#34;, [&#34;price&#34;] = 3700, [&#34;label&#34;] = &#34;corner sofa&#34; },&#xA;&#x9;&#x9;&#x9;[8] = { [&#34;object&#34;] = &#34;v_res_mp_sofa&#34;, [&#34;price&#34;] = 3700, [&#34;label&#34;] = &#34;corner sofa 2&#34; },&#xA;&#x9;&#x9;&#x9;[9] = { [&#34;object&#34;] = &#34;v_res_d_sofa&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;couch 1&#34; },&#xA;&#x9;&#x9;&#x9;[10] = { [&#34;object&#34;] = &#34;v_res_j_sofa&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;Couch 2&#34; },&#xA;&#x9;&#x9;&#x9;[11] = { [&#34;object&#34;] = &#34;v_res_mp_stripchair&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;Couch 3&#34; },&#xA;&#x9;&#x9;&#x9;[12] = { [&#34;object&#34;] = &#34;v_res_m_h_sofa_sml&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;Couch 4&#34; },&#xA;&#x9;&#x9;&#x9;[13] = { [&#34;object&#34;] = &#34;v_res_r_sofa&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;Couch 5&#34; },&#xA;&#x9;&#x9;&#x9;[14] = { [&#34;object&#34;] = &#34;v_res_tre_sofa&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;Couch 6&#34; },&#xA;&#x9;&#x9;&#x9;[15] = { [&#34;object&#34;] = &#34;v_res_tre_sofa_mess_a&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;Couch 7&#34; },&#xA;&#x9;&#x9;&#x9;[16] = { [&#34;object&#34;] = &#34;v_res_tre_sofa_mess_b&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;Couch 8&#34; },&#xA;&#x9;&#x9;&#x9;[17] = { [&#34;object&#34;] = &#34;v_res_tre_sofa_mess_c&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;Couch 9&#34; },&#xA;&#x9;&#x9;&#x9;[18] = { [&#34;object&#34;] = &#34;v_res_tt_sofa&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;Couch 10&#34; },&#xA;&#x9;&#x9;&#x9;[19] = { [&#34;object&#34;] = &#34;prop_rub_couch02&#34;, [&#34;price&#34;] = 700, [&#34;label&#34;] = &#34;Couch 11&#34; },&#xA;&#x9;&#x9;&#x9;[20] = { [&#34;object&#34;] = &#34;v_ilev_m_sofa&#34;, [&#34;price&#34;] = 2000, [&#34;label&#34;] = &#34;White Couch&#34; },&#xA;&#x9;&#x9;&#x9;[21] = { [&#34;object&#34;] = &#34;v_med_p_sofa&#34;, [&#34;price&#34;] = 1000, [&#34;label&#34;] = &#34;Lether Couch Brown&#34; },&#xA;&#x9;&#x9;&#x9;[22] = { [&#34;object&#34;] = &#34;v_club_officesofa&#34;, [&#34;price&#34;] = 500, [&#34;label&#34;] = &#34;pauper Couch rood&#34; },&#xA;&#x9;&#x9;&#x9;[23] = { [&#34;object&#34;] = &#34;bkr_prop_clubhouse_sofa_01a&#34;, [&#34;price&#34;] = 1000, [&#34;label&#34;] = &#34;Black Couch&#34; },&#xA;&#x9;&#x9;&#x9;[24] = { [&#34;object&#34;] = &#34;apa_mp_h_stn_sofacorn_01&#34;, [&#34;price&#34;] = 5000, [&#34;label&#34;] = &#34;corner sofa 3&#34; },&#xA;&#x9;&#x9;&#x9;[25] = { [&#34;object&#34;] = &#34;prop_couch_lg_02&#34;, [&#34;price&#34;] = 1000, [&#34;label&#34;] = &#34;Couch hout&#34; },&#xA;&#x9;&#x9;&#x9;[26] = { [&#34;object&#34;] = &#34;apa_mp_h_stn_sofacorn_10&#34;, [&#34;price&#34;] = 5000, [&#34;label&#34;] = &#34;corner sofa 4&#34; },&#xA;&#x9;&#x9;&#x9;[27] = { [&#34;object&#34;] = &#34;apa_mp_h_yacht_sofa_02&#34;, [&#34;price&#34;] = 1000, [&#34;label&#34;] = &#34;Brown Couch&#34; },&#xA;&#x9;&#x9;&#x9;[28] = { [&#34;object&#34;] = &#34;apa_mp_h_yacht_sofa_01&#34;, [&#34;price&#34;] = 5000, [&#34;label&#34;] = &#34;White long Couch&#34; }&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;&#xA;........&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>olimorris/onedarkpro.nvim</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/olimorris/onedarkpro.nvim</id>
    <link href="https://github.com/olimorris/onedarkpro.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üé® OneDarkPro theme for Neovim. Completely customisable colors, styles and highlights. Supports custom highlights by filetype!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OneDarkPro.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/olimorris/onedarkpro.nvim&#34; alt=&#34;MIT License&#34;&gt; &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/olimorris/onedarkpro.nvim/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9512444/170370341-8c07e0e6-3284-45d3-b73c-f0bdd487a634.png&#34; alt=&#34;OneDarkPro.nvim&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;i&gt; Dark and light themes for Neovim 0.5 and above, written in Lua&lt;br&gt; &lt;b&gt;Treesitter enabled / Fully customisable / Many popular plugins supported&lt;/b&gt;&lt;br&gt; Inspired by VS Code&#39;s &lt;a href=&#34;https://binaryify.github.io/OneDark-Pro&#34;&gt;One Dark Pro&lt;/a&gt; &lt;/i&gt; &lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üìñ&lt;/span&gt; Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#sparkles-features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#camera-screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#zap-requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#package-installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#wrench-configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#default-configuration&#34;&gt;Default configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#configuring-themes&#34;&gt;Configuring themes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#configuring-plugins&#34;&gt;Configuring plugins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#configuring-styles&#34;&gt;Configuring styles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#configuring-colors&#34;&gt;Configuring colors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#configuring-highlight-groups&#34;&gt;Configuring highlight groups&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#configuring-filetype-highlight-groups&#34;&gt;Configuring filetype highlight groups&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#configuring-options&#34;&gt;Configuring options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#gift-extras&#34;&gt;Extras&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#terminal-themes&#34;&gt;Terminal themes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#helpers&#34;&gt;Helpers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#clap-credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#page_with_curl-license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ú®&lt;/span&gt; Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dark&lt;/strong&gt; and &lt;strong&gt;light&lt;/strong&gt; versions - &lt;em&gt;onedark&lt;/em&gt; and &lt;em&gt;onelight&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;strong&gt;custom highlighting across filetypes&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;Treesitter&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Options to specify styles for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Comments&lt;/li&gt; &#xA;   &lt;li&gt;Functions&lt;/li&gt; &#xA;   &lt;li&gt;Keywords&lt;/li&gt; &#xA;   &lt;li&gt;Strings&lt;/li&gt; &#xA;   &lt;li&gt;Variables&lt;/li&gt; &#xA;   &lt;li&gt;Virtual text&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Override default styles, colors, highlight groups and filetype highlight groups&lt;/li&gt; &#xA; &lt;li&gt;Create custom highlight groups&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;LSP&lt;/a&gt; diagnostics support&lt;/li&gt; &#xA; &lt;li&gt;Support for a large array of &lt;a href=&#34;https://github.com/sheerun/vim-polyglot&#34;&gt;vim-polygot&lt;/a&gt; packs (pull requests welcome)&lt;/li&gt; &#xA; &lt;li&gt;Support for popular plugins: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/stevearc/aerial.nvim&#34;&gt;aerial.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim&#34;&gt;barbar.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;Hop.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim/tree/lua&#34;&gt;Indent Blankline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;lspsaga.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/chentau/marks.nvim&#34;&gt;marks.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;neo-tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kevinhwang91/nvim-hlslens&#34;&gt;nvim-hlslens&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/p00f/nvim-ts-rainbow&#34;&gt;nvim-ts-rainbow&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-startify&#34;&gt;Startify&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/toggleterm.nvim&#34;&gt;toggleterm.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;Trouble&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/vim-ultest&#34;&gt;Ultest&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;Which Key&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üì∑&lt;/span&gt; Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;Onedark&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/165271794-a18af19e-6fe6-4f8b-b35d-5d1d920a88ed.png&#34; alt=&#34;Onedark&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Telescope&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/170368257-c38c7d8e-a9da-49c9-bde7-aba412de3451.png&#34; alt=&#34;Onedark Telescope&#34;&gt; &#xA;&lt;h3&gt;Onelight&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/165271845-1c34e332-de19-49ad-b75d-218acc3296bf.png&#34; alt=&#34;Onelight&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Telescope&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/170541160-aaf8c8a4-d7f5-4bab-9f9d-777b869daffd.png&#34; alt=&#34;Onelight Telescope&#34;&gt; &#xA;&lt;h3&gt;Onedark Vivid&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/165271863-e3aa6e8f-3e31-428b-9e3f-c6527b7d4244.png&#34; alt=&#34;Onedark Vivid&#34;&gt; &#xA;&lt;h3&gt;Onedark Dark&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/168618323-65168896-471e-4da3-ba41-9af0e35a48d2.png&#34; alt=&#34;Onedark Dark&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All screenshots have Treesitter highlighting enabled&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Comparison to VS Code&#39;s One Dark Pro&lt;/h3&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/165272951-cc0bb91d-d599-46a8-bbe3-b4fcb5c4116c.png&#34; alt=&#34;Comparison to VS Code - Python&#34;&gt; &#xA;&lt;h4&gt;React&lt;/h4&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/153010048-8ccae711-7695-48e9-ab4b-e2664f24d9e7.png&#34; alt=&#34;Comparison to VS Code - React&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A greater likeness to &lt;code&gt;VS Code&lt;/code&gt; can be achieved by using the theme&#39;s ability to &lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#configuring-filetype-highlight-groups&#34;&gt;customise highlight groups by filetype&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Lualine&lt;/h3&gt; &#xA;&lt;h4&gt;Dark&lt;/h4&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/153061323-19fd0bd2-5838-470f-9273-ea85a5813319.png&#34; alt=&#34;Lualine Dark&#34;&gt; &#xA;&lt;h4&gt;Light&lt;/h4&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/149409208-712c1a96-a439-4929-b7a7-ecb8d8b1c6f5.png&#34; alt=&#34;Lualine Light&#34;&gt; &#xA;&lt;h3&gt;Color guide&lt;/h3&gt; &#xA;&lt;h4&gt;Dark&lt;/h4&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/149406202-f3e3335f-0f3a-46c5-8df1-55c7c1a8eac4.png&#34; alt=&#34;Dark colors&#34;&gt; &#xA;&lt;h4&gt;Light&lt;/h4&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9512444/149406241-2f091619-879a-498c-a106-d86b1d8dfcd7.png&#34; alt=&#34;Light colors&#34;&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ö°&lt;/span&gt; Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.5 or greater&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;termguicolors&lt;/code&gt; enabled for true color support&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;treesitter&lt;/code&gt; for full syntax highlighting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üì¶&lt;/span&gt; Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;olimorris/onedarkpro.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, if using Vimscript and &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;call plug#begin(&#39;~/.config/nvim/plugged&#39;)&#xA;  Plug &#39;olimorris/onedarkpro.nvim&#39;&#xA;call plug#end()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;üîß&lt;/span&gt; Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to an &lt;code&gt;init.lua&lt;/code&gt; file to start using the theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;onedarkpro&#39;).load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, if using Vimscript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;colorscheme onedarkpro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;vim.o.background&lt;/code&gt; option may be used to set the theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.o.background = &#34;dark&#34; -- to load onedark&#xA;vim.o.background = &#34;light&#34; -- to load onelight&#xA;require(&#34;onedarkpro&#34;).load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default configuration&lt;/h3&gt; &#xA;&lt;p&gt;The theme&#39;s default configuration as per the &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim/raw/main/lua/onedarkpro/config.lua&#34;&gt;config.lua&lt;/a&gt; file is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local onedarkpro = require(&#34;onedarkpro&#34;)&#xA;onedarkpro.setup({&#xA;  dark_theme = &#34;onedark&#34;, -- The default dark theme&#xA;  light_theme = &#34;onelight&#34;, -- The default light theme&#xA;  -- Theme can be overwritten with &#39;onedark&#39; or &#39;onelight&#39; as a string&#xA;  theme = function()&#xA;      if vim.o.background == &#34;dark&#34; then&#xA;          return config.dark_theme&#xA;      else&#xA;          return config.light_theme&#xA;      end&#xA;  end,&#xA;  colors = {}, -- Override default colors by specifying colors for &#39;onelight&#39; or &#39;onedark&#39; themes&#xA;  hlgroups = {}, -- Override default highlight groups&#xA;  filetype_hlgroups = {}, -- Override default highlight groups for specific filetypes&#xA;  plugins = { -- Override which plugins highlight groups are loaded&#xA;      native_lsp = true,&#xA;      polygot = true,&#xA;      treesitter = true,&#xA;      -- NOTE: Other plugins have been omitted for brevity&#xA;  },&#xA;  styles = {&#xA;      strings = &#34;NONE&#34;, -- Style that is applied to strings&#xA;      comments = &#34;NONE&#34;, -- Style that is applied to comments&#xA;      keywords = &#34;NONE&#34;, -- Style that is applied to keywords&#xA;      functions = &#34;NONE&#34;, -- Style that is applied to functions&#xA;      variables = &#34;NONE&#34;, -- Style that is applied to variables&#xA;      virtual_text = &#34;NONE&#34;, -- Style that is applied to virtual text&#xA;  },&#xA;  options = {&#xA;      bold = false, -- Use the themes opinionated bold styles?&#xA;      italic = false, -- Use the themes opinionated italic styles?&#xA;      underline = false, -- Use the themes opinionated underline styles?&#xA;      undercurl = false, -- Use the themes opinionated undercurl styles?&#xA;      cursorline = false, -- Use cursorline highlighting?&#xA;      transparency = false, -- Use a transparent background?&#xA;      terminal_colors = false, -- Use the theme&#39;s colors for Neovim&#39;s :terminal?&#xA;      window_unfocussed_color = false, -- When the window is out of focus, change the normal background?&#xA;  }&#xA;})&#xA;onedarkpro.load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you wish to use the default config there is no need to copy the above into the setup function.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuring themes&lt;/h3&gt; &#xA;&lt;p&gt;Currently there are three themes available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;onedark&lt;/li&gt; &#xA; &lt;li&gt;onelight&lt;/li&gt; &#xA; &lt;li&gt;onedark_vivid&lt;/li&gt; &#xA; &lt;li&gt;onedark_dark&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The theme can be set as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;theme = &#34;onedark&#34;, -- Or &#34;onelight&#34;, &#34;onedark_vivid&#34;, &#34;onedark_dark&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no value is specified, the value of &lt;code&gt;vim.o.background&lt;/code&gt; will be used to set the theme with dark setting &lt;code&gt;onedark&lt;/code&gt; and light setting &lt;code&gt;onelight&lt;/code&gt;. For greater customisation with the &lt;code&gt;vim.o.background&lt;/code&gt; option, default dark and light themes can be set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;dark_theme = &#34;onedark_vivid&#34;,&#xA;light_theme = &#34;onelight&#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring plugins&lt;/h3&gt; &#xA;&lt;p&gt;By default, all of the plugins supported by the theme are loaded at runtime. Specific plugins can be disabled as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;plugins = {&#xA;  native_lsp = false,&#xA;  polygot = false,&#xA;  treesitter = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, all of the plugins can be disabled at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;plugins = {&#xA;  all = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, all of the plugins can be disabled with only a select few enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;plugins = {&#xA;  all = false&#xA;  native_lsp = true,&#xA;  treesitter = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For a full list of plugins supported in the theme, see the plugins &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim/tree/main/lua/onedarkpro/plugins&#34;&gt;folder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuring styles&lt;/h3&gt; &#xA;&lt;p&gt;Styles can be set by specifying the highlight group from the &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim/raw/main/lua/onedarkpro/theme.lua&#34;&gt;theme.lua&lt;/a&gt; file (and any plugin files) alongside the desired style(s):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;styles = {&#xA;  comments = &#34;italic&#34;,&#xA;  functions = &#34;NONE&#34;,&#xA;  keywords = &#34;bold,italic&#34;,&#xA;  strings = &#34;NONE&#34;,&#xA;  variables = &#34;NONE&#34;,&#xA;  virtual_text = &#34;NONE&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;strong&gt;italic&lt;/strong&gt;, &lt;strong&gt;bold&lt;/strong&gt;, &lt;strong&gt;underline&lt;/strong&gt; and &lt;strong&gt;NONE&lt;/strong&gt; are possible values for styles.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Multiple styles can be passed using a comma. For example &lt;code&gt;bold,italic&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuring colors&lt;/h3&gt; &#xA;&lt;p&gt;The theme has a palette of 13 core colors alongside many additional ones used for menus and git diffs. These colors can be found in the &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim/tree/main/lua/onedarkpro/colors&#34;&gt;color files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default colors can be changed by specifying the name of the color and the new hex code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;colors = {&#xA;  red = &#34;#FF0000&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Specifying new colors&lt;/h4&gt; &#xA;&lt;p&gt;New colors may be specified in the configuration which will then be merged into the theme&#39;s color palette:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;colors = {&#xA;  my_new_red = &#34;#f44336&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Custom colors can also be referenced when creating custom highlight group overrides in &lt;code&gt;hlgroups&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Specifying colors by theme&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s possible to override default colors within the theme such as the &lt;code&gt;bg&lt;/code&gt; color. This is a common question for those who wish to have a darker background than the default. Of course it would make sense to have different &lt;code&gt;bg&lt;/code&gt; colors for the &lt;code&gt;onedark&lt;/code&gt; and &lt;code&gt;onelight&lt;/code&gt; themes. This can be achieved by specifying the theme name as a table, followed by the color:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;colors = {&#xA;  onedark = {&#xA;    bg = &#34;#FFFF00&#34; -- yellow&#xA;  },&#xA;  onelight = {&#xA;    bg = &#34;#00FF00&#34; -- green&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring highlight groups&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim/tree/main/lua/onedarkpro/theme.lua&#34;&gt;theme.lua&lt;/a&gt; file and &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim/tree/main/lua/onedarkpro/plugins&#34;&gt;plugins&lt;/a&gt; use a large array of highlight groups. There are three ways to customize them:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using specific hex colors&lt;/li&gt; &#xA; &lt;li&gt;Referencing the name of color variables&lt;/li&gt; &#xA; &lt;li&gt;Linking to other highlight groups in the theme&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;hlgroups = { -- Overriding the Comment highlight group&#xA;  Comment = { fg = &#34;#FF0000&#34;, bg = &#34;#FFFF00&#34;, style = &#34;italic&#34; }, -- 1&#xA;  Comment = { fg = &#34;${my_new_red}&#34; bg = &#34;${yellow}&#34;, style = &#34;bold,italic&#34; }, -- 2&#xA;  Comment = { link = &#34;Substitute&#34; } -- 3&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring filetype highlight groups&lt;/h3&gt; &#xA;&lt;p&gt;The original &lt;a href=&#34;https://binaryify.github.io/OneDark-Pro&#34;&gt;One Dark Pro&lt;/a&gt; utilises custom highlights based on filetype to achieve its distinctive look. This can also be achieved within the theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;filetype_hlgroups = {&#xA;  yaml = { -- Use the filetype as per the `set filetype?` command&#xA;    TSField = { fg = &#34;${red}&#34; }&#xA;  },&#xA;  python = {&#xA;    TSConstructor = { fg = &#34;${bg}&#34;, bg = &#34;${red}&#34; }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently support for highlighting in Telescope&#39;s previewer is unavailable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please see &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim/issues/24&#34;&gt;this issue&lt;/a&gt; for how other users are configuring their theme by filetype&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The excellent &lt;a href=&#34;https://github.com/m-demare/hlargs.nvim&#34;&gt;hlargs.nvim&lt;/a&gt; plugin allows for greater customisation over arguments definitions and usages&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Ignoring filetypes and buffer types&lt;/h4&gt; &#xA;&lt;p&gt;Filetype highlight groups work by detecting the filetype of the current buffer and checking the user&#39;s config to determine if any should be applied. As the user moves between buffers, the theme checks for a filetype change and applies any new highlights as neccessary.&lt;/p&gt; &#xA;&lt;p&gt;When using common plugins such as &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt; or &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;Trouble&lt;/a&gt;, additional windows with distinct filetypes are opened. This can cause the theme to reapply the default highlight groups as it detects a buffer filetype change. When closing the windows, the user&#39;s custom filetype highlight groups are then lost. To prevent this from happening, the theme has a table of filetypes and buffer types to ignore:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;filetype_hlgroups_ignore = {&#xA;  filetypes = {&#xA;    &#34;^aerial$&#34;,&#xA;    &#34;^alpha$&#34;,&#xA;    &#34;^fugitive$&#34;,&#xA;    &#34;^fugitiveblame$&#34;,&#xA;    &#34;^help$&#34;,&#xA;    &#34;^NvimTree$&#34;,&#xA;    &#34;^packer$&#34;,&#xA;    &#34;^qf$&#34;,&#xA;    &#34;^startify$&#34;,&#xA;    &#34;^startuptime$&#34;,&#xA;    &#34;^TelescopePrompt$&#34;,&#xA;    &#34;^TelescopeResults$&#34;,&#xA;    &#34;^terminal$&#34;,&#xA;    &#34;^toggleterm$&#34;,&#xA;    &#34;^undotree$&#34;&#xA;  },&#xA;  buftypes = {&#xA;    &#34;^terminal$&#34;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional filetypes and buffer types can be added in the config.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring options&lt;/h3&gt; &#xA;&lt;h4&gt;Formatting&lt;/h4&gt; &#xA;&lt;p&gt;Alongside styles, the theme applies some opinionated formatting. These can be found in the &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim/tree/main/lua/onedarkpro/theme.lua&#34;&gt;theme.lua&lt;/a&gt; file with &lt;code&gt;style&lt;/code&gt; options containing &lt;code&gt;theme.*&lt;/code&gt; values.&lt;/p&gt; &#xA;&lt;p&gt;These can be configured with the following options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  bold = true, -- Use the themes opinionated bold styles?&#xA;  italic = true, -- Use the themes opinionated italic styles?&#xA;  underline = true, -- Use the themes opinionated underline styles?&#xA;  undercurl = true -- Use the themes opinionated undercurl styles?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Transparency&lt;/h4&gt; &#xA;&lt;p&gt;The theme supports transparent backgrounds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  transparency = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By setting the transparency option to true, the &lt;code&gt;Normal&lt;/code&gt;, &lt;code&gt;Folded&lt;/code&gt;, &lt;code&gt;SignColumn&lt;/code&gt;, &lt;code&gt;Statusline&lt;/code&gt; and &lt;code&gt;Tabline&lt;/code&gt; groups will have a &lt;code&gt;NONE&lt;/code&gt; background color. Additional transparency may be achieved by overriding more highlight groups.&lt;/p&gt; &#xA;&lt;h4&gt;Terminal Colors&lt;/h4&gt; &#xA;&lt;p&gt;The theme supports changing the colors for Neovim&#39;s &lt;code&gt;:terminal&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  terminal_colors = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Window Focus Color&lt;/h4&gt; &#xA;&lt;p&gt;The theme supports changing the color of the main window in Neovim when focussed is lost. For example, when a &lt;code&gt;telescope&lt;/code&gt; or &lt;code&gt;packer&lt;/code&gt; pop up appears:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  window_unfocussed_color = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This can be seen in the &lt;a href=&#34;https://raw.githubusercontent.com/olimorris/onedarkpro.nvim/main/#python&#34;&gt;Python screenshots&lt;/a&gt; above where &lt;code&gt;nvim-tree&lt;/code&gt; is opened and out of focus&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Cursorline&lt;/h4&gt; &#xA;&lt;p&gt;Cursorline highlighting is supported in the theme using a &lt;code&gt;cursorline&lt;/code&gt; color (which may of course be overriden). This can be enabled with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;colors = {&#xA;  cursorline = &#34;#FF0000&#34; -- This is optional. The default cursorline color is based on the background&#xA;},&#xA;options = {&#xA;  cursorline = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;üéÅ&lt;/span&gt; Extras&lt;/h2&gt; &#xA;&lt;h3&gt;Terminal themes&lt;/h3&gt; &#xA;&lt;p&gt;The theme comes with &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;Alacritty&lt;/a&gt; and &lt;a href=&#34;https://github.com/kovidgoyal/kitty&#34;&gt;Kitty&lt;/a&gt; themes. These can be found in the &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim/tree/main/extras&#34;&gt;extras&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;Helpers&lt;/h3&gt; &#xA;&lt;h4&gt;Theme color tables&lt;/h4&gt; &#xA;&lt;p&gt;To enable the theme&#39;s colors to be extracted and used elsewhere in the Neovim config, a helper function, &lt;code&gt;get_colors()&lt;/code&gt;, has been included. This returns a table of the theme&#39;s current colors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local colors = require(&#34;onedarkpro&#34;).get_colors(vim.g.onedarkpro_style)&#xA;print(colors.purple) -- #9a77cf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The global variable &lt;code&gt;vim.g.onedarkpro_style&lt;/code&gt; automatically detects whether to use the &lt;code&gt;onedark&lt;/code&gt; or &lt;code&gt;onelight&lt;/code&gt; theme.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Toggling between Onedark and Onelight&lt;/h4&gt; &#xA;&lt;p&gt;To enable the easy switching between themes, the following helper function could be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function ToggleTheme()&#xA;  if vim.o.background == &#34;dark&#34; then&#xA;    vim.o.background = &#34;light&#34;&#xA;  else&#xA;    vim.o.background = &#34;dark&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring styles/colors/highlight groups based on the theme&lt;/h4&gt; &#xA;&lt;p&gt;When configuring the theme, it may be useful to apply different colors or styles depending on whether &lt;code&gt;onedark&lt;/code&gt; or &lt;code&gt;onelight&lt;/code&gt; is active. This can be achieved by applying a conditional in the configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;hlgroups = {&#xA;  TSField = {&#xA;    fg = (vim.o.background == &#34;dark&#34; and &#34;${red}&#34; or &#34;${green}&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;üëè&lt;/span&gt; Credits&lt;/h2&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to the following contributors for their work on the theme:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mmirus&#34;&gt;mmirus&lt;/a&gt; - &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim/commits?author=mmirus&#34;&gt;contributions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inspiration&lt;/h3&gt; &#xA;&lt;p&gt;The following themes were used as an inspiration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Binaryify/OneDark-Pro&#34;&gt;One Dark Pro&lt;/a&gt; - The inspiration for this theme&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme&#34;&gt;GitHub nvim theme&lt;/a&gt; - For the logo inspiration &lt;span&gt;üòâ&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üìÉ&lt;/span&gt; License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/olimorris/onedark.nvim/raw/main/LICENSE.md&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>junyanz/CycleGAN</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/junyanz/CycleGAN</id>
    <link href="https://github.com/junyanz/CycleGAN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Software that can generate photos from paintings, turn horses into zebras, perform style transfer, and more.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/junyanz/CycleGAN/master/imgs/horse2zebra.gif&#34; align=&#34;right&#34; width=&#34;384&#34;&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CycleGAN&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix&#34;&gt;PyTorch&lt;/a&gt; | &lt;a href=&#34;https://junyanz.github.io/CycleGAN/&#34;&gt;project page&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/pdf/1703.10593.pdf&#34;&gt;paper&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Torch implementation for learning an image-to-image translation (i.e. &lt;a href=&#34;https://github.com/phillipi/pix2pix&#34;&gt;pix2pix&lt;/a&gt;) &lt;strong&gt;without&lt;/strong&gt; input-output pairs, for example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;New&lt;/strong&gt;: Please check out &lt;a href=&#34;https://github.com/taesungp/contrastive-unpaired-translation&#34;&gt;contrastive-unpaired-translation&lt;/a&gt; (CUT), our new unpaired image-to-image translation model that enables fast and memory-efficient training.&lt;/p&gt; &#xA;&lt;img src=&#34;https://junyanz.github.io/CycleGAN/images/teaser_high_res.jpg&#34; width=&#34;1000px&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://junyanz.github.io/CycleGAN/&#34;&gt;Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://people.eecs.berkeley.edu/~junyanz/&#34;&gt;Jun-Yan Zhu&lt;/a&gt;*, &lt;a href=&#34;https://taesung.me/&#34;&gt;Taesung Park&lt;/a&gt;*, &lt;a href=&#34;http://web.mit.edu/phillipi/&#34;&gt;Phillip Isola&lt;/a&gt;, &lt;a href=&#34;https://people.eecs.berkeley.edu/~efros/&#34;&gt;Alexei A. Efros&lt;/a&gt;&lt;br&gt; Berkeley AI Research Lab, UC Berkeley&lt;br&gt; In ICCV 2017. (* equal contributions)&lt;/p&gt; &#xA;&lt;p&gt;This package includes CycleGAN, &lt;a href=&#34;https://github.com/phillipi/pix2pix&#34;&gt;pix2pix&lt;/a&gt;, as well as other methods like &lt;a href=&#34;https://arxiv.org/abs/1605.09782&#34;&gt;BiGAN&lt;/a&gt;/&lt;a href=&#34;https://ishmaelbelghazi.github.io/ALI/&#34;&gt;ALI&lt;/a&gt; and Apple&#39;s paper &lt;a href=&#34;https://arxiv.org/pdf/1612.07828.pdf&#34;&gt;S+U learning&lt;/a&gt;.&lt;br&gt; The code was written by &lt;a href=&#34;https://github.com/junyanz&#34;&gt;Jun-Yan Zhu&lt;/a&gt; and &lt;a href=&#34;https://github.com/taesung&#34;&gt;Taesung Park&lt;/a&gt;.&lt;br&gt; &lt;strong&gt;Update&lt;/strong&gt;: Please check out &lt;a href=&#34;https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix&#34;&gt;PyTorch&lt;/a&gt; implementation for CycleGAN and pix2pix. The PyTorch version is under active development and can produce results comparable or better than this Torch version.&lt;/p&gt; &#xA;&lt;h2&gt;Other implementations:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/leehomyc/cyclegan-1&#34;&gt; [Tensorflow]&lt;/a&gt; (by Harry Yang), &lt;a href=&#34;https://github.com/architrathore/CycleGAN/&#34;&gt;[Tensorflow]&lt;/a&gt; (by Archit Rathore), &lt;a href=&#34;https://github.com/vanhuyz/CycleGAN-TensorFlow&#34;&gt;[Tensorflow]&lt;/a&gt; (by Van Huy), &lt;a href=&#34;https://github.com/XHUJOY/CycleGAN-tensorflow&#34;&gt;[Tensorflow]&lt;/a&gt; (by Xiaowei Hu), &lt;a href=&#34;https://github.com/LynnHo/CycleGAN-Tensorflow-Simple&#34;&gt; [Tensorflow-simple]&lt;/a&gt; (by Zhenliang He), &lt;a href=&#34;https://github.com/luoxier/CycleGAN_Tensorlayer&#34;&gt; [TensorLayer]&lt;/a&gt; (by luoxier), &lt;a href=&#34;https://github.com/Aixile/chainer-cyclegan&#34;&gt;[Chainer]&lt;/a&gt; (by Yanghua Jin), &lt;a href=&#34;https://github.com/yunjey/mnist-svhn-transfer&#34;&gt;[Minimal PyTorch]&lt;/a&gt; (by yunjey), &lt;a href=&#34;https://github.com/Ldpe2G/DeepLearningForFun/tree/master/Mxnet-Scala/CycleGAN&#34;&gt;[Mxnet]&lt;/a&gt; (by Ldpe2G), &lt;a href=&#34;https://github.com/tjwei/GANotebooks&#34;&gt;[lasagne/Keras]&lt;/a&gt; (by tjwei), &lt;a href=&#34;https://github.com/simontomaskarlsson/CycleGAN-Keras&#34;&gt;[Keras]&lt;/a&gt; (by Simon Karlsson)&lt;/p&gt;  &#xA;&lt;h2&gt;Applications&lt;/h2&gt; &#xA;&lt;h3&gt;Monet Paintings to Photos&lt;/h3&gt; &#xA;&lt;img src=&#34;https://junyanz.github.io/CycleGAN/images/painting2photo.jpg&#34; width=&#34;1000px&#34;&gt; &#xA;&lt;h3&gt;Collection Style Transfer&lt;/h3&gt; &#xA;&lt;img src=&#34;https://junyanz.github.io/CycleGAN/images/photo2painting.jpg&#34; width=&#34;1000px&#34;&gt; &#xA;&lt;h3&gt;Object Transfiguration&lt;/h3&gt; &#xA;&lt;img src=&#34;https://junyanz.github.io/CycleGAN/images/objects.jpg&#34; width=&#34;1000px&#34;&gt; &#xA;&lt;h3&gt;Season Transfer&lt;/h3&gt; &#xA;&lt;img src=&#34;https://junyanz.github.io/CycleGAN/images/season.jpg&#34; width=&#34;1000px&#34;&gt; &#xA;&lt;h3&gt;Photo Enhancement: Narrow depth of field&lt;/h3&gt; &#xA;&lt;img src=&#34;https://junyanz.github.io/CycleGAN/images/photo_enhancement.jpg&#34; width=&#34;1000px&#34;&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux or OSX&lt;/li&gt; &#xA; &lt;li&gt;NVIDIA GPU + CUDA CuDNN (CPU mode and CUDA without CuDNN may work with minimal modification, but untested)&lt;/li&gt; &#xA; &lt;li&gt;For MAC users, you need the Linux/GNU commands &lt;code&gt;gfind&lt;/code&gt; and &lt;code&gt;gwc&lt;/code&gt;, which can be installed with &lt;code&gt;brew install findutils coreutils&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install torch and dependencies from &lt;a href=&#34;https://github.com/torch/distro&#34;&gt;https://github.com/torch/distro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install torch packages &lt;code&gt;nngraph&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;display&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;luarocks install nngraph&#xA;luarocks install class&#xA;luarocks install https://raw.githubusercontent.com/szym/display/master/display-scm-0.rockspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repo:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/junyanz/CycleGAN&#xA;cd CycleGAN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Apply a Pre-trained Model&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the test photos (taken by &lt;a href=&#34;https://www.flickr.com/photos/aaefros&#34;&gt;Alexei Efros&lt;/a&gt;):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash ./datasets/download_dataset.sh ae_photos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the pre-trained model &lt;code&gt;style_cezanne&lt;/code&gt; (For CPU model, use &lt;code&gt;style_cezanne_cpu&lt;/code&gt;):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash ./pretrained_models/download_model.sh style_cezanne&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Now, let&#39;s generate Paul C√©zanne style images:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;DATA_ROOT=./datasets/ae_photos name=style_cezanne_pretrained model=one_direction_test phase=test loadSize=256 fineSize=256 resize_or_crop=&#34;scale_width&#34; th test.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test results will be saved to &lt;code&gt;./results/style_cezanne_pretrained/latest_test/index.html&lt;/code&gt;.&lt;br&gt; Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/junyanz/CycleGAN/master/#model-zoo&#34;&gt;Model Zoo&lt;/a&gt; for more pre-trained models. &lt;code&gt;./examples/test_vangogh_style_on_ae_photos.sh&lt;/code&gt; is an example script that downloads the pretrained Van Gogh style network and runs it on Efros&#39;s photos.&lt;/p&gt; &#xA;&lt;h3&gt;Train&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download a dataset (e.g. zebra and horse images from ImageNet):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash ./datasets/download_dataset.sh horse2zebra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Train a model:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DATA_ROOT=./datasets/horse2zebra name=horse2zebra_model th train.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(CPU only) The same training command without using a GPU or CUDNN. Setting the environment variables &lt;code&gt;gpu=0 cudnn=0&lt;/code&gt; forces CPU only&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DATA_ROOT=./datasets/horse2zebra name=horse2zebra_model gpu=0 cudnn=0 th train.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Optionally) start the display server to view results as the model trains. (See &lt;a href=&#34;https://raw.githubusercontent.com/junyanz/CycleGAN/master/#display-ui&#34;&gt;Display UI&lt;/a&gt; for more details):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;th -ldisplay.start 8000 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finally, test the model:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DATA_ROOT=./datasets/horse2zebra name=horse2zebra_model phase=test th test.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test results will be saved to an HTML file here: &lt;code&gt;./results/horse2zebra_model/latest_test/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Model Zoo&lt;/h2&gt; &#xA;&lt;p&gt;Download the pre-trained models with the following script. The model will be saved to &lt;code&gt;./checkpoints/model_name/latest_net_G.t7&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash ./pretrained_models/download_model.sh model_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;orange2apple&lt;/code&gt; (orange -&amp;gt; apple) and &lt;code&gt;apple2orange&lt;/code&gt;: trained on ImageNet categories &lt;code&gt;apple&lt;/code&gt; and &lt;code&gt;orange&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;horse2zebra&lt;/code&gt; (horse -&amp;gt; zebra) and &lt;code&gt;zebra2horse&lt;/code&gt; (zebra -&amp;gt; horse): trained on ImageNet categories &lt;code&gt;horse&lt;/code&gt; and &lt;code&gt;zebra&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;style_monet&lt;/code&gt; (landscape photo -&amp;gt; Monet painting style), &lt;code&gt;style_vangogh&lt;/code&gt; (landscape photo -&amp;gt; Van Gogh painting style), &lt;code&gt;style_ukiyoe&lt;/code&gt; (landscape photo -&amp;gt; Ukiyo-e painting style), &lt;code&gt;style_cezanne&lt;/code&gt; (landscape photo -&amp;gt; Cezanne painting style): trained on paintings and Flickr landscape photos.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;monet2photo&lt;/code&gt; (Monet paintings -&amp;gt; real landscape): trained on paintings and Flickr landscape photographs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cityscapes_photo2label&lt;/code&gt; (street scene -&amp;gt; label) and &lt;code&gt;cityscapes_label2photo&lt;/code&gt; (label -&amp;gt; street scene): trained on the Cityscapes dataset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;map2sat&lt;/code&gt; (map -&amp;gt; aerial photo) and &lt;code&gt;sat2map&lt;/code&gt; (aerial photo -&amp;gt; map): trained on Google maps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iphone2dslr_flower&lt;/code&gt; (iPhone photos of flowers -&amp;gt; DSLR photos of flowers): trained on Flickr photos.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CPU models can be downloaded using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash pretrained_models/download_model.sh &amp;lt;name&amp;gt;_cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;, where &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; can be &lt;code&gt;horse2zebra&lt;/code&gt;, &lt;code&gt;style_monet&lt;/code&gt;, etc. You just need to append &lt;code&gt;_cpu&lt;/code&gt; to the target model.&lt;/p&gt; &#xA;&lt;h2&gt;Training and Test Details&lt;/h2&gt; &#xA;&lt;p&gt;To train a model,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DATA_ROOT=/path/to/data/ name=expt_name th train.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Models are saved to &lt;code&gt;./checkpoints/expt_name&lt;/code&gt; (can be changed by passing &lt;code&gt;checkpoint_dir=your_dir&lt;/code&gt; in train.lua).&lt;br&gt; See &lt;code&gt;opt_train&lt;/code&gt; in &lt;code&gt;options.lua&lt;/code&gt; for additional training options.&lt;/p&gt; &#xA;&lt;p&gt;To test the model,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DATA_ROOT=/path/to/data/ name=expt_name phase=test th test.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run the model named &lt;code&gt;expt_name&lt;/code&gt; in both directions on all images in &lt;code&gt;/path/to/data/testA&lt;/code&gt; and &lt;code&gt;/path/to/data/testB&lt;/code&gt;.&lt;br&gt; A webpage with result images will be saved to &lt;code&gt;./results/expt_name&lt;/code&gt; (can be changed by passing &lt;code&gt;results_dir=your_dir&lt;/code&gt; in test.lua).&lt;br&gt; See &lt;code&gt;opt_test&lt;/code&gt; in &lt;code&gt;options.lua&lt;/code&gt; for additional test options. Please use &lt;code&gt;model=one_direction_test&lt;/code&gt; if you only would like to generate outputs of the trained network in only one direction, and specify &lt;code&gt;which_direction=AtoB&lt;/code&gt; or &lt;code&gt;which_direction=BtoA&lt;/code&gt; to set the direction.&lt;/p&gt; &#xA;&lt;p&gt;There are other options that can be used. For example, you can specify &lt;code&gt;resize_or_crop=crop&lt;/code&gt; option to avoid resizing the image to squares. This is indeed how we trained GTA2Cityscapes model in the projet &lt;a href=&#34;https://junyanz.github.io/CycleGAN/&#34;&gt;webpage&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/pdf/1711.03213.pdf&#34;&gt;Cycada&lt;/a&gt; model. We prepared the images at 1024px resolution, and used &lt;code&gt;resize_or_crop=crop fineSize=360&lt;/code&gt; to work with the cropped images of size 360x360. We also used &lt;code&gt;lambda_identity=1.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Datasets&lt;/h2&gt; &#xA;&lt;p&gt;Download the datasets using the following script. Many of the datasets were collected by other researchers. Please cite their papers if you use the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash ./datasets/download_dataset.sh dataset_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;facades&lt;/code&gt;: 400 images from the &lt;a href=&#34;http://cmp.felk.cvut.cz/~tylecr1/facade/&#34;&gt;CMP Facades dataset&lt;/a&gt;. [&lt;a href=&#34;https://raw.githubusercontent.com/junyanz/CycleGAN/master/datasets/bibtex/facades.tex&#34;&gt;Citation&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cityscapes&lt;/code&gt;: 2975 images from the &lt;a href=&#34;https://www.cityscapes-dataset.com/&#34;&gt;Cityscapes training set&lt;/a&gt;. [&lt;a href=&#34;https://raw.githubusercontent.com/junyanz/CycleGAN/master/datasets/bibtex/cityscapes.tex&#34;&gt;Citation&lt;/a&gt;]. Note: Due to license issue, we do not host the dataset on our repo. Please download the dataset directly from the Cityscapes webpage. Please refer to &lt;code&gt;./datasets/prepare_cityscapes_dataset.py&lt;/code&gt; for more detail.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maps&lt;/code&gt;: 1096 training images scraped from Google Maps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;horse2zebra&lt;/code&gt;: 939 horse images and 1177 zebra images downloaded from &lt;a href=&#34;http://www.image-net.org/&#34;&gt;ImageNet&lt;/a&gt; using the keywords &lt;code&gt;wild horse&lt;/code&gt; and &lt;code&gt;zebra&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;apple2orange&lt;/code&gt;: 996 apple images and 1020 orange images downloaded from &lt;a href=&#34;http://www.image-net.org/&#34;&gt;ImageNet&lt;/a&gt; using the keywords &lt;code&gt;apple&lt;/code&gt; and &lt;code&gt;navel orange&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;summer2winter_yosemite&lt;/code&gt;: 1273 summer Yosemite images and 854 winter Yosemite images were downloaded using Flickr API. See more details in our paper.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;monet2photo&lt;/code&gt;, &lt;code&gt;vangogh2photo&lt;/code&gt;, &lt;code&gt;ukiyoe2photo&lt;/code&gt;, &lt;code&gt;cezanne2photo&lt;/code&gt;: The art images were downloaded from &lt;a href=&#34;https://www.wikiart.org/&#34;&gt;Wikiart&lt;/a&gt;. The real photos are downloaded from Flickr using the combination of the tags &lt;em&gt;landscape&lt;/em&gt; and &lt;em&gt;landscapephotography&lt;/em&gt;. The training set size of each class is Monet:1074, Cezanne:584, Van Gogh:401, Ukiyo-e:1433, Photographs:6853.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iphone2dslr_flower&lt;/code&gt;: both classes of images were downloaded from Flickr. The training set size of each class is iPhone:1813, DSLR:3316. See more details in our paper.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Display UI&lt;/h2&gt; &#xA;&lt;p&gt;Optionally, for displaying images during training and test, use the &lt;a href=&#34;https://github.com/szym/display&#34;&gt;display package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install it with: &lt;code&gt;luarocks install https://raw.githubusercontent.com/szym/display/master/display-scm-0.rockspec&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Then start the server with: &lt;code&gt;th -ldisplay.start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open this URL in your browser: &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, the server listens on localhost. Pass &lt;code&gt;0.0.0.0&lt;/code&gt; to allow external connections on any interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;th -ldisplay.start 8000 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open &lt;code&gt;http://(hostname):(port)/&lt;/code&gt; in your browser to load the remote desktop.&lt;/p&gt; &#xA;&lt;h2&gt;Setup Training and Test data&lt;/h2&gt; &#xA;&lt;p&gt;To train CycleGAN model on your own datasets, you need to create a data folder with two subdirectories &lt;code&gt;trainA&lt;/code&gt; and &lt;code&gt;trainB&lt;/code&gt; that contain images from domain A and B. You can test your model on your training set by setting &lt;code&gt;phase=&#39;train&#39;&lt;/code&gt; in &lt;code&gt;test.lua&lt;/code&gt;. You can also create subdirectories &lt;code&gt;testA&lt;/code&gt; and &lt;code&gt;testB&lt;/code&gt; if you have test data.&lt;/p&gt; &#xA;&lt;p&gt;You should &lt;strong&gt;not&lt;/strong&gt; expect our method to work on just any random combination of input and output datasets (e.g. &lt;code&gt;cats&amp;lt;-&amp;gt;keyboards&lt;/code&gt;). From our experiments, we find it works better if two datasets share similar visual content. For example, &lt;code&gt;landscape painting&amp;lt;-&amp;gt;landscape photographs&lt;/code&gt; works much better than &lt;code&gt;portrait painting &amp;lt;-&amp;gt; landscape photographs&lt;/code&gt;. &lt;code&gt;zebras&amp;lt;-&amp;gt;horses&lt;/code&gt; achieves compelling results while &lt;code&gt;cats&amp;lt;-&amp;gt;dogs&lt;/code&gt; completely fails. See the following section for more discussion.&lt;/p&gt; &#xA;&lt;h2&gt;Failure cases&lt;/h2&gt; &#xA;&lt;img align=&#34;left&#34; style=&#34;padding:10px&#34; src=&#34;https://junyanz.github.io/CycleGAN/images/failure_putin.jpg&#34; width=&#34;320&#34;&gt; &#xA;&lt;p&gt;Our model does not work well when the test image is rather different from the images on which the model is trained, as is the case in the figure to the left (we trained on horses and zebras without riders, but test here one a horse with a rider). See additional typical failure cases &lt;a href=&#34;https://junyanz.github.io/CycleGAN/images/failures.jpg&#34;&gt;here&lt;/a&gt;. On translation tasks that involve color and texture changes, like many of those reported above, the method often succeeds. We have also explored tasks that require geometric changes, with little success. For example, on the task of &lt;code&gt;dog&amp;lt;-&amp;gt;cat&lt;/code&gt; transfiguration, the learned translation degenerates into making minimal changes to the input. We also observe a lingering gap between the results achievable with paired training data and those achieved by our unpaired method. In some cases, this gap may be very hard -- or even impossible,-- to close: for example, our method sometimes permutes the labels for tree and building in the output of the cityscapes photos-&amp;gt;labels task.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use this code for your research, please cite our &lt;a href=&#34;https://junyanz.github.io/CycleGAN/&#34;&gt;paper&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{CycleGAN2017,&#xA;  title={Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networkss},&#xA;  author={Zhu, Jun-Yan and Park, Taesung and Isola, Phillip and Efros, Alexei A},&#xA;  booktitle={Computer Vision (ICCV), 2017 IEEE International Conference on},&#xA;  year={2017}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related Projects:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/taesungp/contrastive-unpaired-translation&#34;&gt;contrastive-unpaired-translation&lt;/a&gt; (CUT)&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/phillipi/pix2pix&#34;&gt;pix2pix-Torch&lt;/a&gt; | &lt;a href=&#34;https://github.com/NVIDIA/pix2pixHD&#34;&gt;pix2pixHD&lt;/a&gt; | &lt;a href=&#34;https://github.com/junyanz/BicycleGAN&#34;&gt;BicycleGAN&lt;/a&gt; | &lt;a href=&#34;https://tcwang0509.github.io/vid2vid/&#34;&gt;vid2vid&lt;/a&gt; | &lt;a href=&#34;https://github.com/NVlabs/SPADE&#34;&gt;SPADE/GauGAN&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/junyanz/iGAN&#34;&gt;iGAN&lt;/a&gt; | &lt;a href=&#34;https://github.com/CSAILVision/GANDissect&#34;&gt;GAN Dissection&lt;/a&gt; | &lt;a href=&#34;http://ganpaint.io/&#34;&gt;GAN Paint&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cat Paper Collection&lt;/h2&gt; &#xA;&lt;p&gt;If you love cats, and love reading cool graphics, vision, and ML papers, please check out the Cat Paper &lt;a href=&#34;https://github.com/junyanz/CatPapers&#34;&gt;Collection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Code borrows from &lt;a href=&#34;https://github.com/phillipi/pix2pix&#34;&gt;pix2pix&lt;/a&gt; and &lt;a href=&#34;https://github.com/soumith/dcgan.torch&#34;&gt;DCGAN&lt;/a&gt;. The data loader is modified from &lt;a href=&#34;https://github.com/soumith/dcgan.torch&#34;&gt;DCGAN&lt;/a&gt; and &lt;a href=&#34;https://github.com/pathak22/context-encoder&#34;&gt;Context-Encoder&lt;/a&gt;. The generative network is adopted from &lt;a href=&#34;https://github.com/jcjohnson/neural-style&#34;&gt;neural-style&lt;/a&gt; with &lt;a href=&#34;https://github.com/DmitryUlyanov/texture_nets/raw/master/InstanceNormalization.lua&#34;&gt;Instance Normalization&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-policejob</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/qbcore-framework/qb-policejob</id>
    <link href="https://github.com/qbcore-framework/qb-policejob" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Police Job &amp; Evidence System For QB-Core üëÆ üëÆ‚Äç‚ôÄÔ∏è&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-policejob&lt;/h1&gt; &#xA;&lt;p&gt;Police Job for QB-Core Framework &lt;span&gt;üëÆ&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-core&#34;&gt;qb-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-bossmenu&#34;&gt;qb-bossmenu&lt;/a&gt; - For the boss menu&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-garages&#34;&gt;qb-garages&lt;/a&gt; - For the vehicle spawner&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-clothing&#34;&gt;qb-clothing&lt;/a&gt; - For the locker room&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-phone&#34;&gt;qb-phone&lt;/a&gt; - For the MEOS app and notifications etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-logs&#34;&gt;qb-log&lt;/a&gt; - For logging certain events&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-menu&#34;&gt;qb-menu&lt;/a&gt; - For the vehicle menus&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-input&#34;&gt;qb-input&lt;/a&gt; - For accessing evidence stashes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imgur.com/KO2ydlt.png&#34; alt=&#34;On Duty / Off Duty&#34;&gt; &lt;img src=&#34;https://imgur.com/TQVIYFb.png&#34; alt=&#34;Whitelisted Police Armory&#34;&gt; &lt;img src=&#34;https://imgur.com/Hh2fbs4.png&#34; alt=&#34;Whitelisted Police Stash&#34;&gt; &lt;img src=&#34;https://imgur.com/plgZ9oD.png&#34; alt=&#34;Vehicle Spawner&#34;&gt; &lt;img src=&#34;https://imgur.com/jE2IoqK.png&#34; alt=&#34;Helicopter Spawner&#34;&gt; &lt;img src=&#34;https://imgur.com/btmurxh.png&#34; alt=&#34;Fingerprint Scan&#34;&gt; &lt;img src=&#34;https://imgur.com/KBOoUy5.png&#34; alt=&#34;Evidence Stash&#34;&gt; &lt;img src=&#34;https://imgur.com/mTN6c0h.png&#34; alt=&#34;Spike Placing&#34;&gt; &lt;img src=&#34;https://imgur.com/7Jate4f.png&#34; alt=&#34;Object Placing&#34;&gt; &lt;img src=&#34;https://imgur.com/rAIiWYH.png&#34; alt=&#34;Police Alert&#34;&gt; &lt;img src=&#34;https://imgur.com/vFr8nWf.png&#34; alt=&#34;Securty Cam&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Classical requirements like on duty/off duty, clothing, vehicle, stash etc.&lt;/li&gt; &#xA; &lt;li&gt;Citizen ID based armory (Whitelisted)&lt;/li&gt; &#xA; &lt;li&gt;Fingerprint test&lt;/li&gt; &#xA; &lt;li&gt;Evidence locker (stash)&lt;/li&gt; &#xA; &lt;li&gt;Whitelisted vehicles&lt;/li&gt; &#xA; &lt;li&gt;Speed radars across the map&lt;/li&gt; &#xA; &lt;li&gt;Stormram&lt;/li&gt; &#xA; &lt;li&gt;Impounding player vehicle (permanent / for an amount of money)&lt;/li&gt; &#xA; &lt;li&gt;Integrated jail system&lt;/li&gt; &#xA; &lt;li&gt;Bullet casings&lt;/li&gt; &#xA; &lt;li&gt;GSR&lt;/li&gt; &#xA; &lt;li&gt;Blood drop&lt;/li&gt; &#xA; &lt;li&gt;Evidence bag &amp;amp; Money bag&lt;/li&gt; &#xA; &lt;li&gt;Police radar&lt;/li&gt; &#xA; &lt;li&gt;Handcuff as an item (Can used via command too. Check Commands section.)&lt;/li&gt; &#xA; &lt;li&gt;Emergency services can see each other on map&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;/spikestrip - Places spike strip on ground.&lt;/li&gt; &#xA; &lt;li&gt;/pobject [pion/barier/schotten/tent/light/delete] - Places or deletes an object on/from ground.&lt;/li&gt; &#xA; &lt;li&gt;/cuff - Cuffs/Uncuffs nearby player&lt;/li&gt; &#xA; &lt;li&gt;/escort - Escorts nearby plyer.&lt;/li&gt; &#xA; &lt;li&gt;/callsign [text] - Sets the player a callsign on database.&lt;/li&gt; &#xA; &lt;li&gt;/clearcasings - Clears nearby bullet casings.&lt;/li&gt; &#xA; &lt;li&gt;/jail [id] [time] - Sends a player to the jail.&lt;/li&gt; &#xA; &lt;li&gt;/unjail [id] - Takes the player out of jail.&lt;/li&gt; &#xA; &lt;li&gt;/clearblood - Clears nearby blood drops.&lt;/li&gt; &#xA; &lt;li&gt;/seizecash - Seizes nearby player&#39;s cash. (Puts in money bag)&lt;/li&gt; &#xA; &lt;li&gt;/sc - Puts soft cuff on nearby player.&lt;/li&gt; &#xA; &lt;li&gt;/cam [cam] - Shows the selected security cam display.&lt;/li&gt; &#xA; &lt;li&gt;/flagplate [plate] [reason] - Flags the vehicle.&lt;/li&gt; &#xA; &lt;li&gt;/unflagplate [plate] - Removes the flag of a vehicle.&lt;/li&gt; &#xA; &lt;li&gt;/plateinfo [plate] - Displays if a vehicle is marked or not.&lt;/li&gt; &#xA; &lt;li&gt;/depot [price] - Depots nearby vehicle. Player can take it after paying the cost.&lt;/li&gt; &#xA; &lt;li&gt;/impound - Impounds nearby vehicle permanently.&lt;/li&gt; &#xA; &lt;li&gt;/paytow [id] - Makes payment to the tow driver.&lt;/li&gt; &#xA; &lt;li&gt;/paylawyer [id] - Makes payment to the lawyer.&lt;/li&gt; &#xA; &lt;li&gt;/radar - Toggles the police radar.&lt;/li&gt; &#xA; &lt;li&gt;/911 [message] - Sends a report to emergency services.&lt;/li&gt; &#xA; &lt;li&gt;/911r [id] - Used to respond the emergency alerts.&lt;/li&gt; &#xA; &lt;li&gt;/911a [message] - Sends an anonymous report to emergency services (gives no location).&lt;/li&gt; &#xA; &lt;li&gt;/anklet - Places anklet (tracking device) on nearby player.&lt;/li&gt; &#xA; &lt;li&gt;/removeanklet [citizenid] - Removes the anklet from player.&lt;/li&gt; &#xA; &lt;li&gt;/ebutton - Used to respond an emergency alert.&lt;/li&gt; &#xA; &lt;li&gt;/takedrivinglicense - Takes the driving license from nearby player.&lt;/li&gt; &#xA; &lt;li&gt;/takedna [id] - Takes a DNA sample from the player.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the script and put it in the &lt;code&gt;[qb]&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Add the following code to your server.cfg/resouces.cfg&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;ensure qb-core&#xA;ensure qb-policejob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Config = {}&#xA;&#xA;Config.Objects = { -- Objects to be placed with /pobject [object]&#xA;    [&#34;cone&#34;] = {model = `prop_roadcone02a`, freeze = false},&#xA;    [&#34;barier&#34;] = {model = `prop_barrier_work06a`, freeze = true},&#xA;    [&#34;schotten&#34;] = {model = `prop_snow_sign_road_06g`, freeze = true},&#xA;    [&#34;tent&#34;] = {model = `prop_gazebo_03`, freeze = true},&#xA;    [&#34;light&#34;] = {model = `prop_worklight_03b`, freeze = true},&#xA;}&#xA;&#xA;Config.Locations = {&#xA;   [&#34;duty&#34;] = { -- On Duty/Off Duty Marker&#xA;       [1] = vector4(440.085, -974.924, 30.689, 90.654),&#xA;       [2] = vector4(-449.811, 6012.909, 31.815, 90.654),&#xA;   },&#xA;   [&#34;vehicle&#34;] = { -- Vehicle Spawner Marker&#xA;       [1] = vector4(448.159, -1017.41, 28.562, 90.654),&#xA;       [2] = vector4(471.13, -1024.05, 28.17, 274.5),&#xA;       [3] = vector4(-455.39, 6002.02, 31.34, 87.93),&#xA;   },&#xA;   [&#34;stash&#34;] = { -- Stash Marker&#xA;       [1] = vector4(453.075, -980.124, 30.889, 90.654),&#xA;   },&#xA;   [&#34;impound&#34;] = { -- Impounded Vehicles Marker&#xA;       [1] = vector4(436.68, -1007.42, 27.32, 180.0),&#xA;       [2] = vector4(-436.14, 5982.63, 31.34, 136.0),&#xA;   },&#xA;   [&#34;helicopter&#34;] = { -- Helicopter Spawner Marker&#xA;       [1] = vector4(449.168, -981.325, 43.691, 87.234),&#xA;       [2] = vector4(-475.43, 5988.353, 31.716, 31.34),&#xA;   },&#xA;   [&#34;armory&#34;] = { -- Armory Marker&#xA;       [1] = vector4(462.23, -981.12, 30.68, 90.654),&#xA;   },&#xA;   [&#34;trash&#34;] = { -- Trash Marker&#xA;       [1] = vector4(439.0907, -976.746, 30.776, 93.03),&#xA;   },&#xA;   [&#34;fingerprint&#34;] = { -- Fingerprint Scan Marker&#xA;       [1] = vector4(460.9667, -989.180, 24.92, 358.5),&#xA;   },&#xA;   [&#34;evidence&#34;] = { -- Evidence Closet 1 Marker&#xA;       [1] = vector4(442.1722, -996.067, 30.689, 187.5),&#xA;   },&#xA;   [&#34;evidence2&#34;] = { -- Evidence Closet 2 Marker&#xA;       [1] = vector4(451.7031, -973.232, 30.689, 1.741),&#xA;   },&#xA;   [&#34;evidence3&#34;] = { -- Evidence Closet 3 Marker&#xA;       [1] = vector4(455.1456, -985.462, 30.689, 2.854),&#xA;   },&#xA;   [&#34;stations&#34;] = { -- Police Stations Blips&#xA;       [1] = {label = &#34;Police Station&#34;, coords = vector4(428.23, -984.28, 29.76, 3.5)},&#xA;       [2] = {label = &#34;Prison&#34;, coords = vector4(1845.903, 2585.873, 45.672, 272.249)},&#xA;       [3] = {label = &#34;Police Station Paleto&#34;, coords = vector4(-451.55, 6014.25, 31.716, 223.81)},&#xA;   },&#xA;}&#xA;&#xA;Config.ArmoryWhitelist = {} -- Citizen ID Based Armory Whitelist (With Export for Other Scripts)&#xA;&#xA;&#xA;Config.Helicopter = &#34;POLMAV&#34; -- Model of the Helicopter for Helicopter Spawner&#xA;&#xA;Config.SecurityCameras = { -- Security Cam Locations&#xA;    hideradar = false, -- Don&#39;t change&#xA;    cameras = {&#xA;        [1] = {label = &#34;Pacific Bank CAM#1&#34;, coords = vector3(257.45, 210.07, 109.08), r = {x = -25.0, y = 0.0, z = 28.05}, canRotate = false, isOnline = true},&#xA;        [2] = {label = &#34;Pacific Bank CAM#2&#34;, coords = vector3(232.86, 221.46, 107.83), r = {x = -25.0, y = 0.0, z = -140.91}, canRotate = false, isOnline = true},&#xA;        [3] = {label = &#34;Pacific Bank CAM#3&#34;, coords = vector3(252.27, 225.52, 103.99), r = {x = -35.0, y = 0.0, z = -74.87}, canRotate = false, isOnline = true},&#xA;        [4] = {label = &#34;Limited Ltd Grove St. CAM#1&#34;, coords = vector3(-53.1433, -1746.714, 31.546), r = {x = -35.0, y = 0.0, z = -168.9182}, canRotate = false, isOnline = true},&#xA;        [5] = {label = &#34;Rob&#39;s Liqour Prosperity St. CAM#1&#34;, coords = vector3(-1482.9, -380.463, 42.363), r = {x = -35.0, y = 0.0, z = 79.53281}, canRotate = false, isOnline = true},&#xA;        [6] = {label = &#34;Rob&#39;s Liqour San Andreas Ave. CAM#1&#34;, coords = vector3(-1224.874, -911.094, 14.401), r = {x = -35.0, y = 0.0, z = -6.778894}, canRotate = false, isOnline = true},&#xA;        [7] = {label = &#34;Limited Ltd Ginger St. CAM#1&#34;, coords = vector3(-718.153, -909.211, 21.49), r = {x = -35.0, y = 0.0, z = -137.1431}, canRotate = false, isOnline = true},&#xA;        [8] = {label = &#34;24/7 Supermarkt Innocence Blvd. CAM#1&#34;, coords = vector3(23.885, -1342.441, 31.672), r = {x = -35.0, y = 0.0, z = -142.9191}, canRotate = false, isOnline = true},&#xA;        [9] = {label = &#34;Rob&#39;s Liqour El Rancho Blvd. CAM#1&#34;, coords = vector3(1133.024, -978.712, 48.515), r = {x = -35.0, y = 0.0, z = -137.302}, canRotate = false, isOnline = true},&#xA;        [10] = {label = &#34;Limited Ltd West Mirror Drive CAM#1&#34;, coords = vector3(1151.93, -320.389, 71.33), r = {x = -35.0, y = 0.0, z = -119.4468}, canRotate = false, isOnline = true},&#xA;        [11] = {label = &#34;24/7 Supermarkt Clinton Ave CAM#1&#34;, coords = vector3(383.402, 328.915, 105.541), r = {x = -35.0, y = 0.0, z = 118.585}, canRotate = false, isOnline = true},&#xA;        [12] = {label = &#34;Limited Ltd Banham Canyon Dr CAM#1&#34;, coords = vector3(-1832.057, 789.389, 140.436), r = {x = -35.0, y = 0.0, z = -91.481}, canRotate = false, isOnline = true},&#xA;        [13] = {label = &#34;Rob&#39;s Liqour Great Ocean Hwy CAM#1&#34;, coords = vector3(-2966.15, 387.067, 17.393), r = {x = -35.0, y = 0.0, z = 32.92229}, canRotate = false, isOnline = true},&#xA;        [14] = {label = &#34;24/7 Supermarkt Ineseno Road CAM#1&#34;, coords = vector3(-3046.749, 592.491, 9.808), r = {x = -35.0, y = 0.0, z = -116.673}, canRotate = false, isOnline = true},&#xA;        [15] = {label = &#34;24/7 Supermarkt Barbareno Rd. CAM#1&#34;, coords = vector3(-3246.489, 1010.408, 14.705), r = {x = -35.0, y = 0.0, z = -135.2151}, canRotate = false, isOnline = true},&#xA;        [16] = {label = &#34;24/7 Supermarkt Route 68 CAM#1&#34;, coords = vector3(539.773, 2664.904, 44.056), r = {x = -35.0, y = 0.0, z = -42.947}, canRotate = false, isOnline = true},&#xA;        [17] = {label = &#34;Rob&#39;s Liqour Route 68 CAM#1&#34;, coords = vector3(1169.855, 2711.493, 40.432), r = {x = -35.0, y = 0.0, z = 127.17}, canRotate = false, isOnline = true},&#xA;        [18] = {label = &#34;24/7 Supermarkt Senora Fwy CAM#1&#34;, coords = vector3(2673.579, 3281.265, 57.541), r = {x = -35.0, y = 0.0, z = -80.242}, canRotate = false, isOnline = true},&#xA;        [19] = {label = &#34;24/7 Supermarkt Alhambra Dr. CAM#1&#34;, coords = vector3(1966.24, 3749.545, 34.143), r = {x = -35.0, y = 0.0, z = 163.065}, canRotate = false, isOnline = true},&#xA;        [20] = {label = &#34;24/7 Supermarkt Senora Fwy CAM#2&#34;, coords = vector3(1729.522, 6419.87, 37.262), r = {x = -35.0, y = 0.0, z = -160.089}, canRotate = false, isOnline = true},&#xA;        [21] = {label = &#34;Fleeca Bank Hawick Ave CAM#1&#34;, coords = vector3(309.341, -281.439, 55.88), r = {x = -35.0, y = 0.0, z = -146.1595}, canRotate = false, isOnline = true},&#xA;        [22] = {label = &#34;Fleeca Bank Legion Square CAM#1&#34;, coords = vector3(144.871, -1043.044, 31.017), r = {x = -35.0, y = 0.0, z = -143.9796}, canRotate = false, isOnline = true},&#xA;        [23] = {label = &#34;Fleeca Bank Hawick Ave CAM#2&#34;, coords = vector3(-355.7643, -52.506, 50.746), r = {x = -35.0, y = 0.0, z = -143.8711}, canRotate = false, isOnline = true},&#xA;        [24] = {label = &#34;Fleeca Bank Del Perro Blvd CAM#1&#34;, coords = vector3(-1214.226, -335.86, 39.515), r = {x = -35.0, y = 0.0, z = -97.862}, canRotate = false, isOnline = true},&#xA;        [25] = {label = &#34;Fleeca Bank Great Ocean Hwy CAM#1&#34;, coords = vector3(-2958.885, 478.983, 17.406), r = {x = -35.0, y = 0.0, z = -34.69595}, canRotate = false, isOnline = true},&#xA;        [26] = {label = &#34;Paleto Bank CAM#1&#34;, coords = vector3(-102.939, 6467.668, 33.424), r = {x = -35.0, y = 0.0, z = 24.66}, canRotate = false, isOnline = true},&#xA;        [27] = {label = &#34;Del Vecchio Liquor Paleto Bay&#34;, coords = vector3(-163.75, 6323.45, 33.424), r = {x = -35.0, y = 0.0, z = 260.00}, canRotate = false, isOnline = true},&#xA;        [28] = {label = &#34;Don&#39;s Country Store Paleto Bay CAM#1&#34;, coords = vector3(166.42, 6634.4, 33.69), r = {x = -35.0, y = 0.0, z = 32.00}, canRotate = false, isOnline = true},&#xA;        [29] = {label = &#34;Don&#39;s Country Store Paleto Bay CAM#2&#34;, coords = vector3(163.74, 6644.34, 33.69), r = {x = -35.0, y = 0.0, z = 168.00}, canRotate = false, isOnline = true},&#xA;        [30] = {label = &#34;Don&#39;s Country Store Paleto Bay CAM#3&#34;, coords = vector3(169.54, 6640.89, 33.69), r = {x = -35.0, y = 0.0, z = 5.78}, canRotate = false, isOnline = true},&#xA;        [31] = {label = &#34;Vangelico Jewelery CAM#1&#34;, coords = vector3(-627.54, -239.74, 40.33), r = {x = -35.0, y = 0.0, z = 5.78}, canRotate = true, isOnline = true},&#xA;        [32] = {label = &#34;Vangelico Jewelery CAM#2&#34;, coords = vector3(-627.51, -229.51, 40.24), r = {x = -35.0, y = 0.0, z = -95.78}, canRotate = true, isOnline = true},&#xA;        [33] = {label = &#34;Vangelico Jewelery CAM#3&#34;, coords = vector3(-620.3, -224.31, 40.23), r = {x = -35.0, y = 0.0, z = 165.78}, canRotate = true, isOnline = true},&#xA;        [34] = {label = &#34;Vangelico Jewelery CAM#4&#34;, coords = vector3(-622.57, -236.3, 40.31), r = {x = -35.0, y = 0.0, z = 5.78}, canRotate = true, isOnline = true},&#xA;    },&#xA;}&#xA;&#xA;Config.AuthorizedVehicles = { -- Police Vehicles and required grade&#xA;&#x9;-- Grade 0&#xA;&#x9;[0] = {&#xA;&#x9;&#x9;[&#34;police&#34;] = &#34;Police Car 1&#34;,&#xA;&#x9;&#x9;[&#34;police2&#34;] = &#34;Police Car 2&#34;,&#xA;&#x9;&#x9;[&#34;police3&#34;] = &#34;Police Car 3&#34;,&#xA;&#x9;&#x9;[&#34;police4&#34;] = &#34;Police Car 4&#34;,&#xA;&#x9;&#x9;[&#34;policeb&#34;] = &#34;Police Car 5&#34;,&#xA;&#x9;&#x9;[&#34;policet&#34;] = &#34;Police Car 6&#34;,&#xA;&#x9;&#x9;[&#34;sheriff&#34;] = &#34;Sheriff Car 1&#34;,&#xA;&#x9;&#x9;[&#34;sheriff2&#34;] = &#34;Sheriff Car 2&#34;,&#xA;&#x9;},&#xA;&#x9;-- Grade 1&#xA;&#x9;[1] = {&#xA;&#x9;&#x9;[&#34;police&#34;] = &#34;Police Car 1&#34;,&#xA;&#x9;&#x9;[&#34;police2&#34;] = &#34;Police Car 2&#34;,&#xA;&#x9;&#x9;[&#34;police3&#34;] = &#34;Police Car 3&#34;,&#xA;&#x9;&#x9;[&#34;police4&#34;] = &#34;Police Car 4&#34;,&#xA;&#x9;&#x9;[&#34;policeb&#34;] = &#34;Police Car 5&#34;,&#xA;&#x9;&#x9;[&#34;policet&#34;] = &#34;Police Car 6&#34;,&#xA;&#x9;&#x9;[&#34;sheriff&#34;] = &#34;Sheriff Car 1&#34;,&#xA;&#x9;&#x9;[&#34;sheriff2&#34;] = &#34;Sheriff Car 2&#34;,&#xA;&#xA;&#x9;},&#xA;&#x9;-- Grade 2&#xA;&#x9;[2] = {&#xA;&#x9;&#x9;[&#34;police&#34;] = &#34;Police Car 1&#34;,&#xA;&#x9;&#x9;[&#34;police2&#34;] = &#34;Police Car 2&#34;,&#xA;&#x9;&#x9;[&#34;police3&#34;] = &#34;Police Car 3&#34;,&#xA;&#x9;&#x9;[&#34;police4&#34;] = &#34;Police Car 4&#34;,&#xA;&#x9;&#x9;[&#34;policeb&#34;] = &#34;Police Car 5&#34;,&#xA;&#x9;&#x9;[&#34;policet&#34;] = &#34;Police Car 6&#34;,&#xA;&#x9;&#x9;[&#34;sheriff&#34;] = &#34;Sheriff Car 1&#34;,&#xA;&#x9;&#x9;[&#34;sheriff2&#34;] = &#34;Sheriff Car 2&#34;,&#xA;&#x9;},&#xA;&#x9;-- Grade 3&#xA;&#x9;[3] = {&#xA;&#x9;&#x9;[&#34;police&#34;] = &#34;Police Car 1&#34;,&#xA;&#x9;&#x9;[&#34;police2&#34;] = &#34;Police Car 2&#34;,&#xA;&#x9;&#x9;[&#34;police3&#34;] = &#34;Police Car 3&#34;,&#xA;&#x9;&#x9;[&#34;police4&#34;] = &#34;Police Car 4&#34;,&#xA;&#x9;&#x9;[&#34;policeb&#34;] = &#34;Police Car 5&#34;,&#xA;&#x9;&#x9;[&#34;policet&#34;] = &#34;Police Car 6&#34;,&#xA;&#x9;&#x9;[&#34;sheriff&#34;] = &#34;Sheriff Car 1&#34;,&#xA;&#x9;&#x9;[&#34;sheriff2&#34;] = &#34;Sheriff Car 2&#34;,&#xA;&#x9;},&#xA;&#x9;-- Grade 4&#xA;&#x9;[4] = {&#xA;&#x9;&#x9;[&#34;police&#34;] = &#34;Police Car 1&#34;,&#xA;&#x9;&#x9;[&#34;police2&#34;] = &#34;Police Car 2&#34;,&#xA;&#x9;&#x9;[&#34;police3&#34;] = &#34;Police Car 3&#34;,&#xA;&#x9;&#x9;[&#34;police4&#34;] = &#34;Police Car 4&#34;,&#xA;&#x9;&#x9;[&#34;policeb&#34;] = &#34;Police Car 5&#34;,&#xA;&#x9;&#x9;[&#34;policet&#34;] = &#34;Police Car 6&#34;,&#xA;&#x9;&#x9;[&#34;sheriff&#34;] = &#34;Sheriff Car 1&#34;,&#xA;&#x9;&#x9;[&#34;sheriff2&#34;] = &#34;Sheriff Car 2&#34;,&#xA;&#x9;}&#xA;}&#xA;&#xA;Config.WhitelistedVehicles = {}&#xA;&#xA;Config.AmmoLabels = { -- Labels for Weapon Ammo&#xA;    [&#34;AMMO_PISTOL&#34;] = &#34;9x19mm parabellum bullet&#34;,&#xA;    [&#34;AMMO_SMG&#34;] = &#34;9x19mm parabellum bullet&#34;,&#xA;    [&#34;AMMO_RIFLE&#34;] = &#34;7.62x39mm bullet&#34;,&#xA;    [&#34;AMMO_MG&#34;] = &#34;7.92x57mm mauser bullet&#34;,&#xA;    [&#34;AMMO_SHOTGUN&#34;] = &#34;12-gauge bullet&#34;,&#xA;    [&#34;AMMO_SNIPER&#34;] = &#34;Large caliber bullet&#34;,&#xA;}&#xA;&#xA;Config.Radars = { -- Radar Locations&#xA;&#x9;vector4(-623.44421386719, -823.08361816406, 25.25704574585, 145.0),&#xA;&#x9;vector4(-652.44421386719, -854.08361816406, 24.55704574585, 325.0),&#xA;&#x9;vector4(1623.0114746094, 1068.9924316406, 80.903594970703, 84.0),&#xA;&#x9;vector4(-2604.8994140625, 2996.3391113281, 27.528566360474, 175.0),&#xA;&#x9;vector4(2136.65234375, -591.81469726563, 94.272926330566, 318.0),&#xA;&#x9;vector4(2117.5764160156, -558.51013183594, 95.683128356934, 158.0),&#xA;&#x9;vector4(406.89505004883, -969.06286621094, 29.436267852783, 33.0),&#xA;&#x9;vector4(657.315, -218.819, 44.06, 320.0),&#xA;&#x9;vector4(2118.287, 6040.027, 50.928, 172.0),&#xA;&#x9;vector4(-106.304, -1127.5530, 30.778, 230.0),&#xA;&#x9;vector4(-823.3688, -1146.980, 8.0, 300.0),&#xA;}&#xA;&#xA;Config.CarItems = { -- Default Trunk Items for Police Vehicles&#xA;    [1] = {&#xA;        name = &#34;heavyarmor&#34;,&#xA;        amount = 2,&#xA;        info = {},&#xA;        type = &#34;item&#34;,&#xA;        slot = 1,&#xA;    },&#xA;    [2] = {&#xA;        name = &#34;empty_evidence_bag&#34;,&#xA;        amount = 10,&#xA;        info = {},&#xA;        type = &#34;item&#34;,&#xA;        slot = 2,&#xA;    },&#xA;    [3] = {&#xA;        name = &#34;police_stormram&#34;,&#xA;        amount = 1,&#xA;        info = {},&#xA;        type = &#34;item&#34;,&#xA;        slot = 3,&#xA;    },&#xA;}&#xA;&#xA;Config.Items = { -- Items to be displayed on Armory&#xA;    label = &#34;Police Armory&#34;,&#xA;    slots = 30,&#xA;    items = {&#xA;        [1] = {&#xA;            name = &#34;weapon_pistol&#34;,&#xA;            price = 0,&#xA;            amount = 1,&#xA;            info = {&#xA;                serie = &#34;&#34;,&#xA;                attachments = {&#xA;                    {component = &#34;COMPONENT_AT_PI_FLSH&#34;, label = &#34;Flashlight&#34;},&#xA;                }&#xA;            },&#xA;            type = &#34;weapon&#34;,&#xA;            slot = 1,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [2] = {&#xA;            name = &#34;weapon_stungun&#34;,&#xA;            price = 0,&#xA;            amount = 1,&#xA;            info = {&#xA;                serie = &#34;&#34;,&#xA;            },&#xA;            type = &#34;weapon&#34;,&#xA;            slot = 2,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [3] = {&#xA;            name = &#34;weapon_pumpshotgun&#34;,&#xA;            price = 0,&#xA;            amount = 1,&#xA;            info = {&#xA;                serie = &#34;&#34;,&#xA;                attachments = {&#xA;                    {component = &#34;COMPONENT_AT_AR_FLSH&#34;, label = &#34;Flashlight&#34;},&#xA;                }&#xA;            },&#xA;            type = &#34;weapon&#34;,&#xA;            slot = 3,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [4] = {&#xA;            name = &#34;weapon_smg&#34;,&#xA;            price = 0,&#xA;            amount = 1,&#xA;            info = {&#xA;                serie = &#34;&#34;,&#xA;                attachments = {&#xA;                    {component = &#34;COMPONENT_AT_SCOPE_MACRO_02&#34;, label = &#34;1x Scope&#34;},&#xA;                    {component = &#34;COMPONENT_AT_AR_FLSH&#34;, label = &#34;Flashlight&#34;},&#xA;                }&#xA;            },&#xA;            type = &#34;weapon&#34;,&#xA;            slot = 4,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [5] = {&#xA;            name = &#34;weapon_carbinerifle&#34;,&#xA;            price = 0,&#xA;            amount = 1,&#xA;            info = {&#xA;                serie = &#34;&#34;,&#xA;                attachments = {&#xA;                    {component = &#34;COMPONENT_AT_AR_FLSH&#34;, label = &#34;Flashlight&#34;},&#xA;                    {component = &#34;COMPONENT_AT_SCOPE_MEDIUM&#34;, label = &#34;3x Scope&#34;},&#xA;                }&#xA;            },&#xA;            type = &#34;weapon&#34;,&#xA;            slot = 5,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [6] = {&#xA;            name = &#34;weapon_nightstick&#34;,&#xA;            price = 0,&#xA;            amount = 1,&#xA;            info = {},&#xA;            type = &#34;weapon&#34;,&#xA;            slot = 6,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [7] = {&#xA;            name = &#34;pistol_ammo&#34;,&#xA;            price = 0,&#xA;            amount = 5,&#xA;            info = {},&#xA;            type = &#34;item&#34;,&#xA;            slot = 7,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [8] = {&#xA;            name = &#34;smg_ammo&#34;,&#xA;            price = 0,&#xA;            amount = 5,&#xA;            info = {},&#xA;            type = &#34;item&#34;,&#xA;            slot = 8,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [9] = {&#xA;            name = &#34;shotgun_ammo&#34;,&#xA;            price = 0,&#xA;            amount = 5,&#xA;            info = {},&#xA;            type = &#34;item&#34;,&#xA;            slot = 9,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [10] = {&#xA;            name = &#34;rifle_ammo&#34;,&#xA;            price = 0,&#xA;            amount = 5,&#xA;            info = {},&#xA;            type = &#34;item&#34;,&#xA;            slot = 10,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [11] = {&#xA;            name = &#34;handcuffs&#34;,&#xA;            price = 0,&#xA;            amount = 1,&#xA;            info = {},&#xA;            type = &#34;item&#34;,&#xA;            slot = 11,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [12] = {&#xA;            name = &#34;weapon_flashlight&#34;,&#xA;            price = 0,&#xA;            amount = 1,&#xA;            info = {},&#xA;            type = &#34;weapon&#34;,&#xA;            slot = 12,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [13] = {&#xA;            name = &#34;empty_evidence_bag&#34;,&#xA;            price = 0,&#xA;            amount = 50,&#xA;            info = {},&#xA;            type = &#34;item&#34;,&#xA;            slot = 13,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [14] = {&#xA;            name = &#34;police_stormram&#34;,&#xA;            price = 0,&#xA;            amount = 50,&#xA;            info = {},&#xA;            type = &#34;item&#34;,&#xA;            slot = 14,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [15] = {&#xA;            name = &#34;armor&#34;,&#xA;            price = 0,&#xA;            amount = 50,&#xA;            info = {},&#xA;            type = &#34;item&#34;,&#xA;            slot = 15,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [16] = {&#xA;            name = &#34;radio&#34;,&#xA;            price = 0,&#xA;            amount = 50,&#xA;            info = {},&#xA;            type = &#34;item&#34;,&#xA;            slot = 16,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        },&#xA;        [17] = {&#xA;            name = &#34;heavyarmor&#34;,&#xA;            price = 0,&#xA;            amount = 50,&#xA;            info = {},&#xA;            type = &#34;item&#34;,&#xA;            slot = 17,&#xA;            authorizedJobGrades = {0, 1, 2, 3, 4}&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>apache/apisix</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/apache/apisix</id>
    <link href="https://github.com/apache/apisix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Cloud-Native API Gateway&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache APISIX&lt;/h1&gt; &#xA;&lt;img src=&#34;https://svn.apache.org/repos/asf/comdev/project-logos/originals/apisix.svg?sanitize=true&#34; alt=&#34;APISIX logo&#34; height=&#34;150px&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/apisix/actions&#34;&gt;&lt;img src=&#34;https://github.com/apache/apisix/workflows/build/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/apisix/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/apisix/graphs/commit-activity&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/apache/apisix&#34; alt=&#34;Commit activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/apache/apisix&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/apache/apisix.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/apache/apisix&#34; title=&#34;Percentage of issues still open&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/open/apache/apisix.svg?sanitize=true&#34; alt=&#34;Percentage of issues still open&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Apache APISIX&lt;/strong&gt; is a dynamic, real-time, high-performance API gateway.&lt;/p&gt; &#xA;&lt;p&gt;APISIX provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; &#xA;&lt;p&gt;You can use Apache APISIX to handle traditional north-south traffic, as well as east-west traffic between services. It can also be used as a &lt;a href=&#34;https://github.com/apache/apisix-ingress-controller&#34;&gt;k8s ingress controller&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The technical architecture of Apache APISIX:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/apisix.png&#34; alt=&#34;Technical architecture of Apache APISIX&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mailing List: Mail to &lt;a href=&#34;mailto:dev-subscribe@apisix.apache.org&#34;&gt;dev-subscribe@apisix.apache.org&lt;/a&gt;, follow the reply to subscribe to the mailing list.&lt;/li&gt; &#xA; &lt;li&gt;QQ Group - 552030619, 781365357&lt;/li&gt; &#xA; &lt;li&gt;Slack Workspace - join &lt;a href=&#34;https://apisix.apache.org/docs/general/join/#join-the-slack-channel&#34;&gt;&lt;code&gt;#apisix&lt;/code&gt; channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ApacheAPISIX?style=social&#34; alt=&#34;Twitter Follow&#34;&gt; - follow and interact with us using hashtag &lt;code&gt;#ApacheAPISIX&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Good first issues&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;Apache APISIX¬Æ&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix-ingress-controller/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;Apache APISIX¬Æ Ingress Controller&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix-dashboard/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;Apache APISIX¬Æ dashboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix-helm-chart/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;Apache APISIX¬Æ Helm Chart&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix-docker/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;Docker distribution for Apache APISIX¬Æ&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix-website/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;Apache APISIX¬Æ Website&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix-java-plugin-runner/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;Apache APISIX¬Æ Java Plugin Runner&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix-go-plugin-runner/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;Apache APISIX¬Æ Go Plugin Runner&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix-python-plugin-runner/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;Apache APISIX¬Æ Python Plugin Runner&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;You can use Apache APISIX as a traffic entrance to process all business data, including dynamic routing, dynamic upstream, dynamic certificates, A/B testing, canary release, blue-green deployment, limit rate, defense against malicious attacks, metrics, monitoring alarms, service observability, service governance, etc.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;All platforms&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cloud-Native: Platform agnostic, No vendor lock-in, APISIX can run from bare-metal to Kubernetes.&lt;/li&gt; &#xA;   &lt;li&gt;Supports ARM64: Don&#39;t worry about the lock-in of the infra technology.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi protocols&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/stream-proxy.md&#34;&gt;TCP/UDP Proxy&lt;/a&gt;: Dynamic TCP/UDP proxy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/dubbo-proxy.md&#34;&gt;Dubbo Proxy&lt;/a&gt;: Dynamic HTTP to Dubbo proxy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/mqtt-proxy.md&#34;&gt;Dynamic MQTT Proxy&lt;/a&gt;: Supports to load balance MQTT by &lt;code&gt;client_id&lt;/code&gt;, both support MQTT &lt;a href=&#34;http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&#34;&gt;3.1.*&lt;/a&gt;, &lt;a href=&#34;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&#34;&gt;5.0&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/grpc-proxy.md&#34;&gt;gRPC proxy&lt;/a&gt;: Proxying gRPC traffic.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-web.md&#34;&gt;gRPC Web Proxy&lt;/a&gt;: Proxying gRPC Web traffic to gRPC Service.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-transcode.md&#34;&gt;gRPC transcoding&lt;/a&gt;: Supports protocol transcoding so that clients can access your gRPC API by using HTTP/JSON.&lt;/li&gt; &#xA;   &lt;li&gt;Proxy Websocket&lt;/li&gt; &#xA;   &lt;li&gt;Proxy Protocol&lt;/li&gt; &#xA;   &lt;li&gt;HTTP(S) Forward Proxy&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/certificate.md&#34;&gt;SSL&lt;/a&gt;: Dynamically load an SSL certificate.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full Dynamic&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&#34;&gt;Hot Updates And Hot Plugins&lt;/a&gt;: Continuously updates its configurations and plugins without restarts!&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-rewrite.md&#34;&gt;Proxy Rewrite&lt;/a&gt;: Support rewrite the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt;, &lt;code&gt;enable_websocket&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; of the request before send to upstream.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/response-rewrite.md&#34;&gt;Response Rewrite&lt;/a&gt;: Set customized response status code, body and header to the client.&lt;/li&gt; &#xA;   &lt;li&gt;Dynamic Load Balancing: Round-robin load balancing with weight.&lt;/li&gt; &#xA;   &lt;li&gt;Hash-based Load Balancing: Load balance with consistent hashing sessions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/health-check.md&#34;&gt;Health Checks&lt;/a&gt;: Enable health check on the upstream node and will automatically filter unhealthy nodes during load balancing to ensure system stability.&lt;/li&gt; &#xA;   &lt;li&gt;Circuit-Breaker: Intelligent tracking of unhealthy upstream services.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-mirror.md&#34;&gt;Proxy Mirror&lt;/a&gt;: Provides the ability to mirror client requests.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/traffic-split.md&#34;&gt;Traffic Split&lt;/a&gt;: Allows users to incrementally direct percentages of traffic between various upstreams.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fine-grained routing&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-use-libradixtree-in-apisix&#34;&gt;Supports full path matching and prefix matching&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-nginx-builtin-variable&#34;&gt;Support all Nginx built-in variables as conditions for routing&lt;/a&gt;, so you can use &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, etc. as routing conditions to implement canary release, A/B testing, etc.&lt;/li&gt; &#xA;   &lt;li&gt;Support &lt;a href=&#34;https://github.com/iresty/lua-resty-radixtree#operator-list&#34;&gt;various operators as judgment conditions for routing&lt;/a&gt;, for example &lt;code&gt;{&#34;arg_age&#34;, &#34;&amp;gt;&#34;, 24}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Support &lt;a href=&#34;https://github.com/iresty/lua-resty-radixtree/raw/master/t/filter-fun.t#L10&#34;&gt;custom route matching function&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;IPv6: Use IPv6 to match the route.&lt;/li&gt; &#xA;   &lt;li&gt;Support &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md#route&#34;&gt;TTL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#3-match-priority&#34;&gt;Support priority&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/batch-requests.md&#34;&gt;Support Batch Http Requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-graphql-attributes&#34;&gt;Support filtering route by GraphQL attributes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rich authentication &amp;amp; authorization support: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/key-auth.md&#34;&gt;key-auth&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/jwt-auth.md&#34;&gt;JWT&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/basic-auth.md&#34;&gt;basic-auth&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/wolf-rbac.md&#34;&gt;wolf-rbac&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casbin.md&#34;&gt;casbin&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-keycloak.md&#34;&gt;keycloak&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casdoor.md&#34;&gt;casdoor&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/ip-restriction.md&#34;&gt;IP Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/referer-restriction.md&#34;&gt;Referer Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openid-connect.md&#34;&gt;IdP&lt;/a&gt;: Support external Identity platforms, such as Auth0, okta, etc..&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-req.md&#34;&gt;Limit-req&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-count.md&#34;&gt;Limit-count&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-conn.md&#34;&gt;Limit-concurrency&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Anti-ReDoS(Regular expression Denial of Service): Built-in policies to Anti ReDoS without configuration.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/cors.md&#34;&gt;CORS&lt;/a&gt; Enable CORS(Cross-origin resource sharing) for your API.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/uri-blocker.md&#34;&gt;URI Blocker&lt;/a&gt;: Block client request by URI.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/request-validation.md&#34;&gt;Request Validator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/csrf.md&#34;&gt;CSRF&lt;/a&gt; Based on the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_request_forgery#Double_Submit_Cookie&#34;&gt;&lt;code&gt;Double Submit Cookie&lt;/code&gt;&lt;/a&gt; way, protect your API from CSRF attacks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;OPS friendly&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Zipkin tracing: &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/zipkin.md&#34;&gt;Zipkin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Open source APM: support &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking.md&#34;&gt;Apache SkyWalking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Works with external service discovery: In addition to the built-in etcd, it also supports &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul_kv.md&#34;&gt;Consul&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/nacos.md&#34;&gt;Nacos&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/eureka.md&#34;&gt;Eureka&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/zookeeper.md&#34;&gt;Zookeeper (CP)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Monitoring And Metrics: &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/prometheus.md&#34;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Clustering: APISIX nodes are stateless, creates clustering of the configuration center, please refer to &lt;a href=&#34;https://etcd.io/docs/v3.5/op-guide/clustering/&#34;&gt;etcd Clustering Guide&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;High availability: Support to configure multiple etcd addresses in the same cluster.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix-dashboard&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Version Control: Supports rollbacks of operations.&lt;/li&gt; &#xA;   &lt;li&gt;CLI: start\stop\reload APISIX through the command line.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/stand-alone.md&#34;&gt;Stand-Alone&lt;/a&gt;: Supports to load route rules from local YAML file, it is more friendly such as under the kubernetes(k8s).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/global-rule.md&#34;&gt;Global Rule&lt;/a&gt;: Allows to run any plugin for all request, eg: limit rate, IP filter etc.&lt;/li&gt; &#xA;   &lt;li&gt;High performance: The single-core QPS reaches 18k with an average delay of fewer than 0.2 milliseconds.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/fault-injection.md&#34;&gt;Fault Injection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&#34;&gt;REST Admin API&lt;/a&gt;: Using the REST Admin API to control Apache APISIX, which only allows 127.0.0.1 access by default, you can modify the &lt;code&gt;allow_admin&lt;/code&gt; field in &lt;code&gt;conf/config.yaml&lt;/code&gt; to specify a list of IPs that are allowed to call the Admin API. Also, note that the Admin API uses key auth to verify the identity of the caller. &lt;strong&gt;The &lt;code&gt;admin_key&lt;/code&gt; field in &lt;code&gt;conf/config.yaml&lt;/code&gt; needs to be modified before deployment to ensure security&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;External Loggers: Export access logs to external log management tools. (&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/http-logger.md&#34;&gt;HTTP Logger&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tcp-logger.md&#34;&gt;TCP Logger&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/kafka-logger.md&#34;&gt;Kafka Logger&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/udp-logger.md&#34;&gt;UDP Logger&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/rocketmq-logger.md&#34;&gt;RocketMQ Logger&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking-logger.md&#34;&gt;SkyWalking Logger&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/sls-logger.md&#34;&gt;Alibaba Cloud Logging(SLS)&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/google-cloud-logging.md&#34;&gt;Google Cloud Logging&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/splunk-hec-logging.md&#34;&gt;Splunk HEC Logging&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/file-logger.md&#34;&gt;File Logger&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/loggly.md&#34;&gt;SolarWinds Loggly Logging&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/datadog.md&#34;&gt;Datadog&lt;/a&gt;: push custom metrics to the DogStatsD server, comes bundled with &lt;a href=&#34;https://docs.datadoghq.com/agent/&#34;&gt;Datadog agent&lt;/a&gt;, over the UDP protocol. DogStatsD basically is an implementation of StatsD protocol which collects the custom metrics for Apache APISIX agent, aggregates it into a single data point and sends it to the configured Datadog server.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix-helm-chart&#34;&gt;Helm charts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.vaultproject.io/&#34;&gt;HashiCorp Vault&lt;/a&gt;: Support secret management solution for accessing secrets from Vault secure storage backed in a low trust environment. Currently, RS256 keys (public-private key pairs) or secret keys can be linked from vault in &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/jwt-auth.md#enable-jwt-auth-with-vault-compatibility&#34;&gt;jwt-auth&lt;/a&gt; authentication plugin.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly scalable&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&#34;&gt;Custom plugins&lt;/a&gt;: Allows hooking of common phases, such as &lt;code&gt;rewrite&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;, &lt;code&gt;header filter&lt;/code&gt;, &lt;code&gt;body filter&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt;, also allows to hook the &lt;code&gt;balancer&lt;/code&gt; stage.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/external-plugin.md&#34;&gt;Plugin can be written in Java/Go/Python&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/wasm.md&#34;&gt;Plugin can be written with Proxy Wasm SDK&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Custom load balancing algorithms: You can use custom load balancing algorithms during the &lt;code&gt;balancer&lt;/code&gt; phase.&lt;/li&gt; &#xA;   &lt;li&gt;Custom routing: Support users to implement routing algorithms themselves.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Language support&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Apache APISIX is a multi-language gateway for plugin development and provides support via &lt;code&gt;RPC&lt;/code&gt; and &lt;code&gt;Wasm&lt;/code&gt;. &lt;img src=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/apisix-multi-lang-support.png&#34; alt=&#34;Multi Language Support into Apache APISIX&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The RPC way, is the current way. Developers can choose the language according to their needs and after starting an independent process with the RPC, it exchanges data with APISIX through local RPC communication. Till this moment, APISIX has support for &lt;a href=&#34;https://github.com/apache/apisix-java-plugin-runner&#34;&gt;Java&lt;/a&gt;, &lt;a href=&#34;https://github.com/apache/apisix-go-plugin-runner&#34;&gt;Golang&lt;/a&gt;, &lt;a href=&#34;https://github.com/apache/apisix-python-plugin-runner&#34;&gt;Python&lt;/a&gt; and Node.js.&lt;/li&gt; &#xA;   &lt;li&gt;The Wasm or WebAssembly, is an experimental way. APISIX can load and run Wasm bytecode via APISIX &lt;a href=&#34;https://github.com/apache/apisix/raw/master/docs/en/latest/wasm.md&#34;&gt;wasm plugin&lt;/a&gt; written with the &lt;a href=&#34;https://github.com/proxy-wasm/spec#sdks&#34;&gt;Proxy Wasm SDK&lt;/a&gt;. Developers only need to write the code according to the SDK and then compile it into a Wasm bytecode that runs on Wasm VM with APISIX.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/serverless.md&#34;&gt;Lua functions&lt;/a&gt;: Invoke functions in each phase in APISIX.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/aws-lambda.md&#34;&gt;AWS Lambda&lt;/a&gt;: Integration with AWS Lambda function as a dynamic upstream to proxy all requests for a particular URI to the AWS API gateway endpoint. Supports authorization via api key and AWS IAM access secret.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/azure-functions.md&#34;&gt;Azure Functions&lt;/a&gt;: Seamless integration with Azure Serverless Function as a dynamic upstream to proxy all requests for a particular URI to the Microsoft Azure cloud.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openwhisk.md&#34;&gt;Apache OpenWhisk&lt;/a&gt;: Seamless integration with Apache OpenWhisk as a dynamic upstream to proxy all requests for a particular URI to your own OpenWhisk cluster.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Installation&lt;/p&gt; &lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/installation-guide.md&#34;&gt;install documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Getting started&lt;/p&gt; &lt;p&gt;The getting started guide is a great way to learn the basics of APISIX. Just follow the steps in &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/getting-started.md&#34;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Further, you can follow the documentation to try more &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins&#34;&gt;plugins&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Admin API&lt;/p&gt; &lt;p&gt;Apache APISIX provides &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&#34;&gt;REST Admin API&lt;/a&gt; to dynamically control the Apache APISIX cluster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plugin development&lt;/p&gt; &lt;p&gt;You can refer to &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&#34;&gt;plugin development guide&lt;/a&gt;, and sample plugin &lt;code&gt;example-plugin&lt;/code&gt;&#39;s code implementation. Reading &lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&#34;&gt;plugin concept&lt;/a&gt; would help you learn more about the plugin.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more documents, please refer to &lt;a href=&#34;https://apisix.apache.org/docs/apisix/getting-started/&#34;&gt;Apache APISIX Documentation site&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;Using AWS&#39;s eight-core server, APISIX&#39;s QPS reaches 140,000 with a latency of only 0.2 ms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/apisix/master/benchmark/run.sh&#34;&gt;Benchmark script&lt;/a&gt; has been open sourced, welcome to try and contribute.&lt;/p&gt; &#xA;&lt;h2&gt;Contributor Over Time&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.apiseven.com/contributor-graph&#34;&gt;visit here&lt;/a&gt; to generate Contributor Over Time.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apiseven.com/en/contributor-graph?repo=apache/apisix&#34;&gt;&lt;img src=&#34;https://contributor-graph-api.apiseven.com/contributors-svg?repo=apache/apisix&#34; alt=&#34;Contributor over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;User Stories&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.efactory-project.eu/post/api-security-gateway-using-apisix-in-the-efactory-platform&#34;&gt;European eFactory Platform: API Security Gateway ‚Äì Using APISIX in the eFactory Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/COPRS/infrastructure/wiki/Networking-trade-off&#34;&gt;Copernicus Reference System Software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apisix.apache.org/blog/tags/user-case&#34;&gt;More Stories&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who Uses APISIX?&lt;/h2&gt; &#xA;&lt;p&gt;A wide variety of companies and organizations use APISIX for research, production and commercial product, below are some of them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Airwallex&lt;/li&gt; &#xA; &lt;li&gt;Bilibili&lt;/li&gt; &#xA; &lt;li&gt;European eFactory Platform&lt;/li&gt; &#xA; &lt;li&gt;European Copernicus Reference System&lt;/li&gt; &#xA; &lt;li&gt;HONOR&lt;/li&gt; &#xA; &lt;li&gt;iQIYI&lt;/li&gt; &#xA; &lt;li&gt;NASA JPL&lt;/li&gt; &#xA; &lt;li&gt;Nayuki&lt;/li&gt; &#xA; &lt;li&gt;OPPO&lt;/li&gt; &#xA; &lt;li&gt;QingCloud&lt;/li&gt; &#xA; &lt;li&gt;Swisscom&lt;/li&gt; &#xA; &lt;li&gt;Tencent Game&lt;/li&gt; &#xA; &lt;li&gt;Travelsky&lt;/li&gt; &#xA; &lt;li&gt;VIVO&lt;/li&gt; &#xA; &lt;li&gt;weibo&lt;/li&gt; &#xA; &lt;li&gt;WPS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Landscape&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://landscape.cncf.io/images/left-logo.svg?sanitize=true&#34; width=&#34;150&#34;&gt;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://landscape.cncf.io/images/right-logo.svg?sanitize=true&#34; width=&#34;200&#34;&gt; &lt;br&gt;&lt;br&gt; APISIX enriches the &lt;a href=&#34;https://landscape.cncf.io/card-mode?category=api-gateway&amp;amp;grouping=category&#34;&gt; CNCF API Gateway Landscape.&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Logos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix/tree/master/logos/apache-apisix.png&#34;&gt;Apache APISIX logo(PNG)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apache.org/logos/#apisix&#34;&gt;Apache APISIX logo source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Inspired by Kong and Orange.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/apisix/tree/master/LICENSE&#34;&gt;Apache 2.0 License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>overextended/ox_lib</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/overextended/ox_lib</id>
    <link href="https://github.com/overextended/ox_lib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of Lua functions to utilise in other resources.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;h1&gt;&lt;a href=&#34;https://overextended.github.io/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Lua Library for FiveM&lt;/h2&gt; &#xA;&lt;p&gt;FXServer provides its own system for including files, which we use to load this resource in the fxmanifest via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;shared_script &#39;@ox_lib/init.lua&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;server.cfg&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;add_ace resource.ox_lib command.add_principal allow&#xA;add_ace resource.ox_lib command.remove_principal allow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to use this resource, but want to reuse code you are permitted to do so under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;license terms&lt;/a&gt;.&lt;br&gt; Any resources distributed with this code is subject to the same license restrictions and must be made available under the same license (&lt;a href=&#34;https://raw.githubusercontent.com/overextended/ox_lib/master/#license&#34;&gt;more below&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;h2&gt;License&lt;/h2&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;table&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; ox_lib &lt;p&gt;Copyright (C) 2021 Linden &lt;a href=&#34;https://www.github.com/thelindat&#34;&gt;https://www.github.com/thelindat&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &lt;p&gt;You should have received a copy of the GNU General Public License along with this program.&lt;br&gt; If not, see &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;https://www.gnu.org/licenses/gpl-3.0.html&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; &lt;font align=&#34;center&#34;&gt;https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)&lt;/font&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>wbthomason/packer.nvim</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/wbthomason/packer.nvim</id>
    <link href="https://github.com/wbthomason/packer.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A use-package inspired plugin manager for Neovim. Uses native packages, supports Luarocks dependencies, written in Lua, allows for expressive config&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;packer.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/packer-nvim/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/packer-nvim/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; inspired plugin/package management for Neovim.&lt;/p&gt; &#xA;&lt;p&gt;Have questions? Start a &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Have a problem or idea? Make an &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues&#34;&gt;issue&lt;/a&gt; or a &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/pulls&#34;&gt;PR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Packer is built on native packages. You may wish to read &lt;code&gt;:h packages&lt;/code&gt; before continuing&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#notices&#34;&gt;Notices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#bootstrapping&#34;&gt;Bootstrapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#the-startup-function&#34;&gt;The startup function&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#custom-initialization&#34;&gt;Custom Initialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#specifying-plugins&#34;&gt;Specifying Plugins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#performing-plugin-management-operations&#34;&gt;Performing plugin management operations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#extending-packer&#34;&gt;Extending packer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#compiling-lazy-loaders&#34;&gt;Compiling Lazy-Loaders&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#user-autocommands&#34;&gt;User autocommands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#using-a-floating-window&#34;&gt;Using a floating window&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#profiling&#34;&gt;Profiling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Notices&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-07-31:&lt;/strong&gt; If you&#39;re on macOS, note that building Neovim with the version of &lt;code&gt;luv&lt;/code&gt; from &lt;code&gt;homebrew&lt;/code&gt; &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues/496#issuecomment-890371022&#34;&gt;will cause any &lt;code&gt;packer&lt;/code&gt; command to crash&lt;/a&gt;. More about this issue at &lt;a href=&#34;https://github.com/neovim/neovim/issues/15054&#34;&gt;neovim/neovim#15054&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-07-28:&lt;/strong&gt; &lt;code&gt;packer&lt;/code&gt; will now highlight commits/plugin names with potentially breaking changes (determined by looking for &lt;code&gt;breaking change&lt;/code&gt; or &lt;code&gt;breaking_change&lt;/code&gt;, case insensitive, in the update commit bodies and headers) as &lt;code&gt;WarningMsg&lt;/code&gt; in the status window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-06-06&lt;/strong&gt;: Your Neovim must include &lt;a href=&#34;https://github.com/neovim/neovim/pull/14659&#34;&gt;https://github.com/neovim/neovim/pull/14659&lt;/a&gt;; &lt;code&gt;packer&lt;/code&gt; uses the &lt;code&gt;noautocmd&lt;/code&gt; key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-04-19&lt;/strong&gt;: &lt;code&gt;packer&lt;/code&gt; now provides built-in profiling for your config via the &lt;code&gt;packer_compiled&lt;/code&gt; file. Take a look at &lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#profiling&#34;&gt;the docs&lt;/a&gt; for more information!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-02-18&lt;/strong&gt;: Having trouble with Luarocks on macOS? See &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues/180&#34;&gt;this issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-01-19&lt;/strong&gt;: Basic Luarocks support has landed! Use the &lt;code&gt;rocks&lt;/code&gt; key with a string or table to specify packages to install.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-12-10&lt;/strong&gt;: The &lt;code&gt;disable_commands&lt;/code&gt; configuration flag now affects non-&lt;code&gt;startup&lt;/code&gt; use as well. This means that, by default, &lt;code&gt;packer&lt;/code&gt; will create commands for basic operations for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-11-13&lt;/strong&gt;: There is now a default implementation for a floating window &lt;code&gt;open_fn&lt;/code&gt; in &lt;code&gt;packer.util&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-09-04:&lt;/strong&gt; Due to changes to the Neovim &lt;code&gt;extmark&lt;/code&gt; api (see: &lt;a href=&#34;https://github.com/neovim/neovim/commit/3853276d9cacc99a2698117e904475dbf7033383&#34;&gt;https://github.com/neovim/neovim/commit/3853276d9cacc99a2698117e904475dbf7033383&lt;/a&gt;), users will need to update to a version of Neovim &lt;strong&gt;after&lt;/strong&gt; the aforementioned PR was merged. There are currently shims around the changed functions which should maintain support for earlier versions of Neovim, but these are intended to be temporary and will be removed by &lt;strong&gt;2020-10-04&lt;/strong&gt;. Therefore Packer will not work with Neovim v0.4.4, which was released before the &lt;code&gt;extmark&lt;/code&gt; change.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Declarative plugin specification&lt;/li&gt; &#xA; &lt;li&gt;Support for dependencies&lt;/li&gt; &#xA; &lt;li&gt;Support for Luarocks dependencies&lt;/li&gt; &#xA; &lt;li&gt;Expressive configuration and lazy-loading options&lt;/li&gt; &#xA; &lt;li&gt;Automatically compiles efficient lazy-loading code to improve startup time&lt;/li&gt; &#xA; &lt;li&gt;Uses native packages&lt;/li&gt; &#xA; &lt;li&gt;Extensible&lt;/li&gt; &#xA; &lt;li&gt;Written in Lua, configured in Lua&lt;/li&gt; &#xA; &lt;li&gt;Post-install/update hooks&lt;/li&gt; &#xA; &lt;li&gt;Uses jobs for async installation&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;git&lt;/code&gt; tags, branches, revisions, submodules&lt;/li&gt; &#xA; &lt;li&gt;Support for local plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;You need to be running Neovim v0.5.0+&lt;/strong&gt;; &lt;code&gt;packer&lt;/code&gt; makes use of extmarks and other newly-added Neovim features.&lt;/li&gt; &#xA; &lt;li&gt;If you are on Windows 10, you need developer mode enabled in order to use local plugins (creating symbolic links requires admin privileges on Windows - credit to @TimUntersberger for this note)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To get started, first clone this repository to somewhere on your &lt;code&gt;packpath&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Unix, Linux Installation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --depth 1 https://github.com/wbthomason/packer.nvim\&#xA; ~/.local/share/nvim/site/pack/packer/start/packer.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use Arch Linux, there is also &lt;a href=&#34;https://aur.archlinux.org/packages/nvim-packer-git/&#34;&gt;an AUR package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Windows Powershell Installation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/wbthomason/packer.nvim &#34;$env:LOCALAPPDATA\nvim-data\site\pack\packer\start\packer.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can write your plugin specification in Lua, e.g. (in &lt;code&gt;~/.config/nvim/lua/plugins.lua&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- This file can be loaded by calling `lua require(&#39;plugins&#39;)` from your init.vim&#xA;&#xA;-- Only required if you have packer configured as `opt`&#xA;vim.cmd [[packadd packer.nvim]]&#xA;&#xA;return require(&#39;packer&#39;).startup(function()&#xA;  -- Packer can manage itself&#xA;  use &#39;wbthomason/packer.nvim&#39;&#xA;&#xA;  -- Simple plugins can be specified as strings&#xA;  use &#39;9mm/vim-closer&#39;&#xA;&#xA;  -- Lazy loading:&#xA;  -- Load on specific commands&#xA;  use {&#39;tpope/vim-dispatch&#39;, opt = true, cmd = {&#39;Dispatch&#39;, &#39;Make&#39;, &#39;Focus&#39;, &#39;Start&#39;}}&#xA;&#xA;  -- Load on an autocommand event&#xA;  use {&#39;andymass/vim-matchup&#39;, event = &#39;VimEnter&#39;}&#xA;&#xA;  -- Load on a combination of conditions: specific filetypes or commands&#xA;  -- Also run code after load (see the &#34;config&#34; key)&#xA;  use {&#xA;    &#39;w0rp/ale&#39;,&#xA;    ft = {&#39;sh&#39;, &#39;zsh&#39;, &#39;bash&#39;, &#39;c&#39;, &#39;cpp&#39;, &#39;cmake&#39;, &#39;html&#39;, &#39;markdown&#39;, &#39;racket&#39;, &#39;vim&#39;, &#39;tex&#39;},&#xA;    cmd = &#39;ALEEnable&#39;,&#xA;    config = &#39;vim.cmd[[ALEEnable]]&#39;&#xA;  }&#xA;&#xA;  -- Plugins can have dependencies on other plugins&#xA;  use {&#xA;    &#39;haorenW1025/completion-nvim&#39;,&#xA;    opt = true,&#xA;    requires = {{&#39;hrsh7th/vim-vsnip&#39;, opt = true}, {&#39;hrsh7th/vim-vsnip-integ&#39;, opt = true}}&#xA;  }&#xA;&#xA;  -- Plugins can also depend on rocks from luarocks.org:&#xA;  use {&#xA;    &#39;my/supercoolplugin&#39;,&#xA;    rocks = {&#39;lpeg&#39;, {&#39;lua-cjson&#39;, version = &#39;2.1.0&#39;}}&#xA;  }&#xA;&#xA;  -- You can specify rocks in isolation&#xA;  use_rocks &#39;penlight&#39;&#xA;  use_rocks {&#39;lua-resty-http&#39;, &#39;lpeg&#39;}&#xA;&#xA;  -- Local plugins can be included&#xA;  use &#39;~/projects/personal/hover.nvim&#39;&#xA;&#xA;  -- Plugins can have post-install/update hooks&#xA;  use {&#39;iamcco/markdown-preview.nvim&#39;, run = &#39;cd app &amp;amp;&amp;amp; yarn install&#39;, cmd = &#39;MarkdownPreview&#39;}&#xA;&#xA;  -- Post-install/update hook with neovim command&#xA;  use { &#39;nvim-treesitter/nvim-treesitter&#39;, run = &#39;:TSUpdate&#39; }&#xA;&#xA;  -- Post-install/update hook with call of vimscript function with argument&#xA;  use { &#39;glacambre/firenvim&#39;, run = function() vim.fn[&#39;firenvim#install&#39;](0) end }&#xA;&#xA;  -- Use specific branch, dependency and run lua file after load&#xA;  use {&#xA;    &#39;glepnir/galaxyline.nvim&#39;, branch = &#39;main&#39;, config = function() require&#39;statusline&#39; end,&#xA;    requires = {&#39;kyazdani42/nvim-web-devicons&#39;}&#xA;  }&#xA;&#xA;  -- Use dependency and run lua function after load&#xA;  use {&#xA;    &#39;lewis6991/gitsigns.nvim&#39;, requires = { &#39;nvim-lua/plenary.nvim&#39; },&#xA;    config = function() require(&#39;gitsigns&#39;).setup() end&#xA;  }&#xA;&#xA;  -- You can specify multiple plugins in a single call&#xA;  use {&#39;tjdevries/colorbuddy.vim&#39;, {&#39;nvim-treesitter/nvim-treesitter&#39;, opt = true}}&#xA;&#xA;  -- You can alias plugin names&#xA;  use {&#39;dracula/vim&#39;, as = &#39;dracula&#39;}&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you get linter complaints about &lt;code&gt;use&lt;/code&gt; being an undefined global, these errors are spurious - &lt;code&gt;packer&lt;/code&gt; injects &lt;code&gt;use&lt;/code&gt; into the scope of the function passed to &lt;code&gt;startup&lt;/code&gt;. If these errors bother you, the easiest fix is to simply specify &lt;code&gt;use&lt;/code&gt; as an argument to the function you pass to &lt;code&gt;startup&lt;/code&gt;, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup(function(use)&#xA;...your config...&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; provides the following commands after you&#39;ve run and configured &lt;code&gt;packer&lt;/code&gt; with &lt;code&gt;require(&#39;packer&#39;).startup(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- You must run this or `PackerSync` whenever you make changes to your plugin configuration&#xA;-- Regenerate compiled loader file&#xA;:PackerCompile&#xA;&#xA;-- Remove any disabled or unused plugins&#xA;:PackerClean&#xA;&#xA;-- Clean, then install missing plugins&#xA;:PackerInstall&#xA;&#xA;-- Clean, then update and install plugins&#xA;:PackerUpdate&#xA;&#xA;-- Perform `PackerUpdate` and then `PackerCompile`&#xA;:PackerSync&#xA;&#xA;-- Loads opt plugin immediately&#xA;:PackerLoad completion-nvim ale&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can configure Neovim to automatically run &lt;code&gt;:PackerCompile&lt;/code&gt; whenever &lt;code&gt;plugins.lua&lt;/code&gt; is updated with &lt;a href=&#34;https://neovim.io/doc/user/autocmd.html#:autocmd&#34;&gt;an autocommand&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;augroup packer_user_config&#xA;  autocmd!&#xA;  autocmd BufWritePost plugins.lua source &amp;lt;afile&amp;gt; | PackerCompile&#xA;augroup end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This autocommand can be placed in your &lt;code&gt;init.vim&lt;/code&gt;, or any other startup file as per your setup. Placing this in &lt;code&gt;plugins.lua&lt;/code&gt; could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd([[&#xA;  augroup packer_user_config&#xA;    autocmd!&#xA;    autocmd BufWritePost plugins.lua source &amp;lt;afile&amp;gt; | PackerCompile&#xA;  augroup end&#xA;]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bootstrapping&lt;/h2&gt; &#xA;&lt;p&gt;If you want to automatically install and set up &lt;code&gt;packer.nvim&lt;/code&gt; on any machine you clone your configuration to, add the following snippet (which is due to @Iron-E and @khuedoan) somewhere in your config &lt;strong&gt;before&lt;/strong&gt; your first usage of &lt;code&gt;packer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local fn = vim.fn&#xA;local install_path = fn.stdpath(&#39;data&#39;)..&#39;/site/pack/packer/start/packer.nvim&#39;&#xA;if fn.empty(fn.glob(install_path)) &amp;gt; 0 then&#xA;  packer_bootstrap = fn.system({&#39;git&#39;, &#39;clone&#39;, &#39;--depth&#39;, &#39;1&#39;, &#39;https://github.com/wbthomason/packer.nvim&#39;, install_path})&#xA;end&#xA;&#xA;return require(&#39;packer&#39;).startup(function(use)&#xA;  -- My plugins here&#xA;  -- use &#39;foo1/bar1.nvim&#39;&#xA;  -- use &#39;foo2/bar2.nvim&#39;&#xA;&#xA;  -- Automatically set up your configuration after cloning packer.nvim&#xA;  -- Put this at the end after all plugins&#xA;  if packer_bootstrap then&#xA;    require(&#39;packer&#39;).sync()&#xA;  end&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the following command (with &lt;code&gt;packer&lt;/code&gt; bootstrapped) to have &lt;code&gt;packer&lt;/code&gt; setup your configuration (or simply run updates) and close once all operations are completed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nvim --headless -c &#39;autocmd User PackerComplete quitall&#39; -c &#39;PackerSync&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The above snippets give some examples of &lt;code&gt;packer&lt;/code&gt; features and use. Examples include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;My dotfiles: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/lua/plugins.lua&#34;&gt;Specification file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/lua/plugins.lua&#34;&gt;Loading file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/plugin/packer_compiled.lua&#34;&gt;Generated lazy-loader file&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;An example using the &lt;code&gt;startup&lt;/code&gt; method: &lt;a href=&#34;https://github.com/tjdevries/config_manager/raw/master/xdg_config/nvim/lua/tj/plugins.lua&#34;&gt;tjdevries&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using this method, you do not require a &#34;loading&#34; file. You can simply &lt;code&gt;lua require(&#39;plugins&#39;)&lt;/code&gt; from your &lt;code&gt;init.vim&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following is a more in-depth explanation of &lt;code&gt;packer&lt;/code&gt;&#39;s features and use.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;startup&lt;/code&gt; function&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; provides &lt;code&gt;packer.startup(spec)&lt;/code&gt;, which is used in the above examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;startup&lt;/code&gt; is a convenience function for simple setup and can be invoked as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a function: &lt;code&gt;packer.startup(function() use &#39;tjdevries/colorbuddy.vim&#39; end)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a table with a function as its first element and config overrides as another element: &lt;code&gt;packer.startup({function() use &#39;tjdevries/colorbuddy.vim&#39; end, config = { ... }})&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a table with a table of plugin specifications as its first element, config overrides as another element, and optional rock specifications as another element: &lt;code&gt;packer.startup({{&#39;tjdevries/colorbuddy.vim&#39;}, config = { ... }, rocks = { ... }})&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom Initialization&lt;/h3&gt; &#xA;&lt;p&gt;You are not required to use &lt;code&gt;packer.startup&lt;/code&gt; if you prefer a more manual setup with finer control over configuration and loading.&lt;/p&gt; &#xA;&lt;p&gt;To take this approach, load &lt;code&gt;packer&lt;/code&gt; like any other Lua module. You must call &lt;code&gt;packer.init()&lt;/code&gt; before performing any operations; it is recommended to call &lt;code&gt;packer.reset()&lt;/code&gt; if you may be re-running your specification code (e.g. by sourcing your plugin specification file with &lt;code&gt;luafile&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You may pass a table of configuration values to &lt;code&gt;packer.init()&lt;/code&gt; to customize its operation. The default configuration values (and structure of the configuration table) are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ensure_dependencies   = true, -- Should packer install plugin dependencies?&#xA;  snapshot = nil, -- Name of the snapshot you would like to load at startup&#xA;  snapshot_path = join_paths(stdpath &#39;cache&#39;, &#39;packer.nvim&#39;), -- Default save directory for snapshots&#xA;  package_root   = util.join_paths(vim.fn.stdpath(&#39;data&#39;), &#39;site&#39;, &#39;pack&#39;),&#xA;  compile_path = util.join_paths(vim.fn.stdpath(&#39;config&#39;), &#39;plugin&#39;, &#39;packer_compiled.lua&#39;),&#xA;  plugin_package = &#39;packer&#39;, -- The default package for plugins&#xA;  max_jobs = nil, -- Limit the number of simultaneous jobs. nil means no limit&#xA;  auto_clean = true, -- During sync(), remove unused plugins&#xA;  compile_on_sync = true, -- During sync(), run packer.compile()&#xA;  disable_commands = false, -- Disable creating commands&#xA;  opt_default = false, -- Default to using opt (as opposed to start) plugins&#xA;  transitive_opt = true, -- Make dependencies of opt plugins also opt by default&#xA;  transitive_disable = true, -- Automatically disable dependencies of disabled plugins&#xA;  auto_reload_compiled = true, -- Automatically reload the compiled file after creating it.&#xA;  git = {&#xA;    cmd = &#39;git&#39;, -- The base command for git operations&#xA;    subcommands = { -- Format strings for git subcommands&#xA;      update         = &#39;pull --ff-only --progress --rebase=false&#39;,&#xA;      install        = &#39;clone --depth %i --no-single-branch --progress&#39;,&#xA;      fetch          = &#39;fetch --depth 999999 --progress&#39;,&#xA;      checkout       = &#39;checkout %s --&#39;,&#xA;      update_branch  = &#39;merge --ff-only @{u}&#39;,&#xA;      current_branch = &#39;branch --show-current&#39;,&#xA;      diff           = &#39;log --color=never --pretty=format:FMT --no-show-signature HEAD@{1}...HEAD&#39;,&#xA;      diff_fmt       = &#39;%%h %%s (%%cr)&#39;,&#xA;      get_rev        = &#39;rev-parse --short HEAD&#39;,&#xA;      get_msg        = &#39;log --color=never --pretty=format:FMT --no-show-signature HEAD -n 1&#39;,&#xA;      submodules     = &#39;submodule update --init --recursive --progress&#39;&#xA;    },&#xA;    depth = 1, -- Git clone depth&#xA;    clone_timeout = 60, -- Timeout, in seconds, for git clones&#xA;    default_url_format = &#39;https://github.com/%s&#39; -- Lua format string used for &#34;aaa/bbb&#34; style plugins&#xA;  },&#xA;  display = {&#xA;    non_interactive = false, -- If true, disable display windows for all operations&#xA;    open_fn  = nil, -- An optional function to open a window for packer&#39;s display&#xA;    open_cmd = &#39;65vnew \\[packer\\]&#39;, -- An optional command to open a window for packer&#39;s display&#xA;    working_sym = &#39;‚ü≥&#39;, -- The symbol for a plugin being installed/updated&#xA;    error_sym = &#39;‚úó&#39;, -- The symbol for a plugin with an error in installation/updating&#xA;    done_sym = &#39;‚úì&#39;, -- The symbol for a plugin which has completed installation/updating&#xA;    removed_sym = &#39;-&#39;, -- The symbol for an unused plugin which was removed&#xA;    moved_sym = &#39;‚Üí&#39;, -- The symbol for a plugin which was moved (e.g. from opt to start)&#xA;    header_sym = &#39;‚îÅ&#39;, -- The symbol for the header line in packer&#39;s display&#xA;    show_all_info = true, -- Should packer show all update details automatically?&#xA;    prompt_border = &#39;double&#39;, -- Border style of prompt popups.&#xA;    keybindings = { -- Keybindings for the display window&#xA;      quit = &#39;q&#39;,&#xA;      toggle_info = &#39;&amp;lt;CR&amp;gt;&#39;,&#xA;      diff = &#39;d&#39;,&#xA;      prompt_revert = &#39;r&#39;,&#xA;    }&#xA;  },&#xA;  luarocks = {&#xA;    python_cmd = &#39;python&#39; -- Set the python command to use for running hererocks&#xA;  },&#xA;  log = { level = &#39;warn&#39; }, -- The default print log level. One of: &#34;trace&#34;, &#34;debug&#34;, &#34;info&#34;, &#34;warn&#34;, &#34;error&#34;, &#34;fatal&#34;.&#xA;  profile = {&#xA;    enable = false,&#xA;    threshold = 1, -- integer in milliseconds, plugins which load faster than this won&#39;t be shown in profile output&#xA;  },&#xA;  autoremove = false, -- Remove disabled or unused plugins without prompting the user&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying plugins&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; is based around declarative specification of plugins. You can declare a plugin using the function &lt;code&gt;packer.use&lt;/code&gt;, which I highly recommend locally binding to &lt;code&gt;use&lt;/code&gt; for conciseness.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;use&lt;/code&gt; takes either a string or a table. If a string is provided, it is treated as a plugin location for a non-optional plugin with no additional configuration. Plugin locations may be specified as&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Absolute paths to a local plugin&lt;/li&gt; &#xA; &lt;li&gt;Full URLs (treated as plugins managed with &lt;code&gt;git&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;username/repo&lt;/code&gt; paths (treated as Github &lt;code&gt;git&lt;/code&gt; plugins)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A table given to &lt;code&gt;use&lt;/code&gt; can take two forms:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A list of plugin specifications (strings or tables)&lt;/li&gt; &#xA; &lt;li&gt;A table specifying a single plugin. It must have a plugin location string as its first element, and may additionally have a number of optional keyword elements, shown below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;myusername/example&#39;,        -- The plugin location string&#xA;  -- The following keys are all optional&#xA;  disable = boolean,           -- Mark a plugin as inactive&#xA;  as = string,                 -- Specifies an alias under which to install the plugin&#xA;  installer = function,        -- Specifies custom installer. See &#34;custom installers&#34; below.&#xA;  updater = function,          -- Specifies custom updater. See &#34;custom installers&#34; below.&#xA;  after = string or list,      -- Specifies plugins to load before this plugin. See &#34;sequencing&#34; below&#xA;  rtp = string,                -- Specifies a subdirectory of the plugin to add to runtimepath.&#xA;  opt = boolean,               -- Manually marks a plugin as optional.&#xA;  branch = string,             -- Specifies a git branch to use&#xA;  tag = string,                -- Specifies a git tag to use. Supports &#39;*&#39; for &#34;latest tag&#34;&#xA;  commit = string,             -- Specifies a git commit to use&#xA;  lock = boolean,              -- Skip updating this plugin in updates/syncs. Still cleans.&#xA;  run = string, function, or table, -- Post-update/install hook. See &#34;update/install hooks&#34;.&#xA;  requires = string or list,   -- Specifies plugin dependencies. See &#34;dependencies&#34;.&#xA;  rocks = string or list,      -- Specifies Luarocks dependencies for the plugin&#xA;  config = string or function, -- Specifies code to run after this plugin is loaded.&#xA;  -- The setup key implies opt = true&#xA;  setup = string or function,  -- Specifies code to run before this plugin is loaded.&#xA;  -- The following keys all imply lazy-loading and imply opt = true&#xA;  cmd = string or list,        -- Specifies commands which load this plugin. Can be an autocmd pattern.&#xA;  ft = string or list,         -- Specifies filetypes which load this plugin.&#xA;  keys = string or list,       -- Specifies maps which load this plugin. See &#34;Keybindings&#34;.&#xA;  event = string or list,      -- Specifies autocommand events which load this plugin.&#xA;  fn = string or list          -- Specifies functions which load this plugin.&#xA;  cond = string, function, or list of strings/functions,   -- Specifies a conditional test to load this plugin&#xA;  module = string or list      -- Specifies Lua module names for require. When requiring a string which starts&#xA;                               -- with one of these module names, the plugin will be loaded.&#xA;  module_pattern = string/list -- Specifies Lua pattern of Lua module names for require. When&#xA;  requiring a string which matches one of these patterns, the plugin will be loaded.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the &lt;code&gt;cmd&lt;/code&gt; option, the command may be a full command, or an autocommand pattern. If the command contains any non-alphanumeric characters, it is assumed to be a pattern, and instead of creating a stub command, it creates a CmdUndefined autocmd to load the plugin when a command that matches the pattern is invoked.&lt;/p&gt; &#xA;&lt;h4&gt;Checking plugin statuses&lt;/h4&gt; &#xA;&lt;p&gt;You can check whether or not a particular plugin is installed with &lt;code&gt;packer&lt;/code&gt; as well as if that plugin is loaded. To do this you can check for the plugin&#39;s name in the &lt;code&gt;packer_plugins&lt;/code&gt; global table. Plugins in this table are saved using only the last section of their names e.g. &lt;code&gt;tpope/vim-fugitive&lt;/code&gt; if installed will be under the key &lt;code&gt;vim-fugitive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;if packer_plugins[&#34;vim-fugitive&#34;] and packer_plugins[&#34;vim-fugitive&#34;].loaded then&#xA;print(&#34;Vim fugitive is loaded&#34;)&#xA;-- other custom logic&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; this table is only available &lt;em&gt;after&lt;/em&gt; &lt;code&gt;packer_compiled.vim&lt;/code&gt; is loaded so cannot be used till &lt;em&gt;after&lt;/em&gt; plugins have been loaded.&lt;/p&gt; &#xA;&lt;h4&gt;Luarocks support&lt;/h4&gt; &#xA;&lt;p&gt;You may specify that a plugin requires one or more Luarocks packages using the &lt;code&gt;rocks&lt;/code&gt; key. This key takes either a string specifying the name of a package (e.g. &lt;code&gt;rocks=lpeg&lt;/code&gt;), or a list specifying one or more packages. Entries in the list may either be strings, a list of strings or a table --- the latter case is used to specify arguments such as the particular version of a package. all supported luarocks keys are allowed except: &lt;code&gt;tree&lt;/code&gt; and &lt;code&gt;local&lt;/code&gt;. Environment variables for the luarocks command can also be specified using the &lt;code&gt;env&lt;/code&gt; key which takes a table as the value as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;rocks = {&#39;lpeg&#39;, {&#39;lua-cjson&#39;, version = &#39;2.1.0&#39;}}&#xA;use_rocks {&#39;lua-cjson&#39;, &#39;lua-resty-http&#39;}&#xA;use_rocks {&#39;luaformatter&#39;, server = &#39;https://luarocks.org/dev&#39;}&#xA;use_rocks {&#39;openssl&#39; env = {OPENSSL_DIR = &#34;/path/to/dir&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, &lt;code&gt;packer&lt;/code&gt; only supports equality constraints on package versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; also provides the function &lt;code&gt;packer.luarocks.install_commands()&lt;/code&gt;, which creates the &lt;code&gt;PackerRocks &amp;lt;cmd&amp;gt; &amp;lt;packages...&amp;gt;&lt;/code&gt; command. &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt; must be one of &#34;install&#34; or &#34;remove&#34;; &lt;code&gt;&amp;lt;packages...&amp;gt;&lt;/code&gt; is one or more package names (currently, version restrictions are not supported with this command). Running &lt;code&gt;PackerRocks&lt;/code&gt; will install or remove the given packages. You can use this command even if you don&#39;t use &lt;code&gt;packer&lt;/code&gt; to manage your plugins. However, please note that (1) packages installed through &lt;code&gt;PackerRocks&lt;/code&gt; &lt;strong&gt;will&lt;/strong&gt; be removed by calls to &lt;code&gt;packer.luarocks.clean()&lt;/code&gt; (unless they are also part of a &lt;code&gt;packer&lt;/code&gt; plugin specification), and (2) you will need to manually invoke &lt;code&gt;packer.luarocks.setup_paths&lt;/code&gt; (or otherwise modify your &lt;code&gt;package.path&lt;/code&gt;) to ensure that Neovim can find the installed packages.&lt;/p&gt; &#xA;&lt;p&gt;Finally, &lt;code&gt;packer&lt;/code&gt; provides the function &lt;code&gt;packer.use_rocks&lt;/code&gt;, which takes a string or table specifying one or more Luarocks packages as in the &lt;code&gt;rocks&lt;/code&gt; key. You can use this to ensure that &lt;code&gt;packer&lt;/code&gt; downloads and manages some rocks which you want to use, but which are not associated with any particular plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Custom installers&lt;/h4&gt; &#xA;&lt;p&gt;You may specify a custom installer &amp;amp; updater for a plugin using the &lt;code&gt;installer&lt;/code&gt; and &lt;code&gt;updater&lt;/code&gt; keys. Note that either both or none of these keys are required. These keys should be functions which take as an argument a &lt;code&gt;display&lt;/code&gt; object (from &lt;code&gt;lua/packer/display.lua&lt;/code&gt;) and return an async function (per &lt;code&gt;lua/packer/async.lua&lt;/code&gt;) which (respectively) installs/updates the given plugin.&lt;/p&gt; &#xA;&lt;p&gt;Providing the &lt;code&gt;installer&lt;/code&gt;/&lt;code&gt;updater&lt;/code&gt; keys overrides plugin type detection, but you still need to provide a location string for the name of the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Update/install hooks&lt;/h4&gt; &#xA;&lt;p&gt;You may specify operations to be run after successful installs/updates of a plugin with the &lt;code&gt;run&lt;/code&gt; key. This key may either be a Lua function, which will be called with the &lt;code&gt;plugin&lt;/code&gt; table for this plugin (containing the information passed to &lt;code&gt;use&lt;/code&gt; as well as output from the installation/update commands, the installation path of the plugin, etc.), a string, or a table of functions and strings.&lt;/p&gt; &#xA;&lt;p&gt;If an element of &lt;code&gt;run&lt;/code&gt; is a string, then either:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If the first character of &lt;code&gt;run&lt;/code&gt; is &#34;:&#34;, it is treated as a Neovim command and executed.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, &lt;code&gt;run&lt;/code&gt; is treated as a shell command and run in the installation directory of the plugin via &lt;code&gt;$SHELL -c &#39;&amp;lt;run&amp;gt;&#39;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Plugins may specify dependencies via the &lt;code&gt;requires&lt;/code&gt; key. This key can be a string or a list (table).&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;requires&lt;/code&gt; is a string, it is treated as specifying a single plugin. If a plugin with the name given in &lt;code&gt;requires&lt;/code&gt; is already known in the managed set, nothing happens. Otherwise, the string is treated as a plugin location string and the corresponding plugin is added to the managed set.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;requires&lt;/code&gt; is a list, it is treated as a list of plugin specifications following the format given above.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ensure_dependencies&lt;/code&gt; is true, the plugins specified in &lt;code&gt;requires&lt;/code&gt; will be installed.&lt;/p&gt; &#xA;&lt;p&gt;Plugins specified in &lt;code&gt;requires&lt;/code&gt; are removed when no active plugins require them.&lt;/p&gt; &#xA;&lt;h4&gt;Sequencing&lt;/h4&gt; &#xA;&lt;p&gt;You may specify a loading order for plugins using the &lt;code&gt;after&lt;/code&gt; key. This key can be a string or a list (table).&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;after&lt;/code&gt; is a string, it must be the name of another plugin managed by &lt;code&gt;packer&lt;/code&gt; (e.g. the final segment of a plugin&#39;s path - for a Github plugin &lt;code&gt;FooBar/Baz&lt;/code&gt;, the name would be just &lt;code&gt;Baz&lt;/code&gt;). If &lt;code&gt;after&lt;/code&gt; is a table, it must be a list of plugin names. If a plugin has an alias (i.e. uses the &lt;code&gt;as&lt;/code&gt; key), this alias is its name.&lt;/p&gt; &#xA;&lt;p&gt;The set of plugins specified in a plugin&#39;s &lt;code&gt;after&lt;/code&gt; key must &lt;strong&gt;all&lt;/strong&gt; be loaded before the plugin using &lt;code&gt;after&lt;/code&gt; will be loaded. For example, in the specification&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  use {&#39;FooBar/Baz&#39;, ft = &#39;bax&#39;}&#xA;  use {&#39;Something/Else&#39;, after = &#39;Baz&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the plugin &lt;code&gt;Else&lt;/code&gt; will only be loaded after the plugin &lt;code&gt;Baz&lt;/code&gt;, which itself is only loaded for files with &lt;code&gt;bax&lt;/code&gt; filetype.&lt;/p&gt; &#xA;&lt;h4&gt;Keybindings&lt;/h4&gt; &#xA;&lt;p&gt;Plugins may be lazy-loaded on the use of keybindings/maps. Individual keybindings are specified either as a string (in which case they are treated as normal mode maps) or a table in the format &lt;code&gt;{mode, map}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Performing plugin management operations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; exposes the following functions for common plugin management operations. In all of the below, &lt;code&gt;plugins&lt;/code&gt; is an optional table of plugin names; if not provided, the default is &#34;all managed plugins&#34;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.install(plugins)&lt;/code&gt;: Install the specified plugins if they are not already installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.update(plugins)&lt;/code&gt;: Update the specified plugins, installing any that are missing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.clean()&lt;/code&gt;: Remove any disabled or no longer managed plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.sync(plugins)&lt;/code&gt;: Perform a &lt;code&gt;clean&lt;/code&gt; followed by an &lt;code&gt;update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.compile(path)&lt;/code&gt;: Compile lazy-loader code and save to &lt;code&gt;path&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.snapshot(snapshot_name, ...)&lt;/code&gt;: Creates a snapshot file that will live under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be taken. Optionally, a list of plugins name can be provided to selectively choose the plugins to snapshot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.rollback(snapshot_name, ...)&lt;/code&gt;: Rollback plugins status a snapshot file that will live under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be taken. Optionally, a list of plugins name can be provided to selectively choose which plugins to revert.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.delete(snapshot_name)&lt;/code&gt;: Deletes a snapshot file under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be deleted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extending &lt;code&gt;packer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can add custom key handlers to &lt;code&gt;packer&lt;/code&gt; by calling &lt;code&gt;packer.set_handler(name, func)&lt;/code&gt; where &lt;code&gt;name&lt;/code&gt; is the key you wish to handle and &lt;code&gt;func&lt;/code&gt; is a function with the signature &lt;code&gt;func(plugins, plugin, value)&lt;/code&gt; where &lt;code&gt;plugins&lt;/code&gt; is the global table of managed plugins, &lt;code&gt;plugin&lt;/code&gt; is the table for a specific plugin, and &lt;code&gt;value&lt;/code&gt; is the value associated with key &lt;code&gt;name&lt;/code&gt; in &lt;code&gt;plugin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling Lazy-Loaders&lt;/h3&gt; &#xA;&lt;p&gt;To optimize startup time, &lt;code&gt;packer.nvim&lt;/code&gt; compiles code to perform the lazy-loading operations you specify. This means that you do not need to load &lt;code&gt;packer.nvim&lt;/code&gt; unless you want to perform some plugin management operations.&lt;/p&gt; &#xA;&lt;p&gt;To generate the compiled code, call &lt;code&gt;packer.compile(path)&lt;/code&gt;, where &lt;code&gt;path&lt;/code&gt; is some file path on your &lt;code&gt;runtimepath&lt;/code&gt;, with a &lt;code&gt;.vim&lt;/code&gt; extension. This will generate a blend of Lua and Vimscript to load and configure all your lazy-loaded plugins (e.g. generating commands, autocommands, etc.) and save it to &lt;code&gt;path&lt;/code&gt;. Then, when you start vim, the file at &lt;code&gt;path&lt;/code&gt; is loaded (because &lt;code&gt;path&lt;/code&gt; must be on your &lt;code&gt;runtimepath&lt;/code&gt;), and lazy-loading works.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;path&lt;/code&gt; is not provided to &lt;code&gt;packer.compile&lt;/code&gt;, the output file will default to the value of &lt;code&gt;config.compile_path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The option &lt;code&gt;compile_on_sync&lt;/code&gt;, which defaults to &lt;code&gt;true&lt;/code&gt;, will run &lt;code&gt;packer.compile()&lt;/code&gt; during &lt;code&gt;packer.sync()&lt;/code&gt;, if set to &lt;code&gt;true&lt;/code&gt;. Note that otherwise, you &lt;strong&gt;must&lt;/strong&gt; run &lt;code&gt;packer.compile&lt;/code&gt; yourself to generate the lazy-loader file!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you use a function value for &lt;code&gt;config&lt;/code&gt; or &lt;code&gt;setup&lt;/code&gt; keys in any plugin specifications, it &lt;strong&gt;must not&lt;/strong&gt; have any upvalues (i.e. captures). We currently use Lua&#39;s &lt;code&gt;string.dump&lt;/code&gt; to compile config/setup functions to bytecode, which has this limitation. Additionally, if functions are given for these keys, the functions will be passed the plugin name and information table as arguments.&lt;/p&gt; &#xA;&lt;h3&gt;User autocommands&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; runs most of its operations asyncronously. If you would like to implement automations that require knowing when the operations are complete, you can use the following &lt;code&gt;User&lt;/code&gt; autocmds (see &lt;code&gt;:help User&lt;/code&gt; for more info on how to use):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PackerComplete&lt;/code&gt;: Fires after install, update, clean, and sync asynchronous operations finish.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PackerCompileDone&lt;/code&gt;: Fires after compiling (see &lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#compiling-lazy-loaders&#34;&gt;the section on compilation&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using a floating window&lt;/h3&gt; &#xA;&lt;p&gt;You can configure Packer to use a floating window for command outputs by passing a utility function to &lt;code&gt;packer&lt;/code&gt;&#39;s config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup({function()&#xA;  -- Your plugins here&#xA;end,&#xA;config = {&#xA;  display = {&#xA;    open_fn = require(&#39;packer.util&#39;).float,&#xA;  }&#xA;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this floating window will show doubled borders. If you want to customize the window appearance, you can pass a configuration to &lt;code&gt;float&lt;/code&gt;, which is the same configuration that would be passed to &lt;code&gt;nvim_open_win&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup({function()&#xA;  -- Your plugins here&#xA;end,&#xA;config = {&#xA;  display = {&#xA;    open_fn = function()&#xA;      return require(&#39;packer.util&#39;).float({ border = &#39;single&#39; })&#xA;    end&#xA;  }&#xA;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profiling&lt;/h2&gt; &#xA;&lt;p&gt;Packer has built in functionality that can allow you to profile the time taken loading your plugins. In order to use this functionality you must either enable profiling in your config, or pass in an argument when running packer compile.&lt;/p&gt; &#xA;&lt;h4&gt;Setup via config&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;  profile = {&#xA;    enable = true,&#xA;    threshold = 1 -- the amount in ms that a plugins load time must be over for it to be included in the profile&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using the packer compile command&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:PackerCompile profile=true&#xA;&#34; or&#xA;:PackerCompile profile=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Profiling usage&lt;/h4&gt; &#xA;&lt;p&gt;This will rebuild your &lt;code&gt;packer_compiled.vim&lt;/code&gt; with profiling code included. In order to visualise the output of the profile restart your neovim and run &lt;code&gt;PackerProfile&lt;/code&gt;. This will open a window with the output of your profiling.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;packer.nvim&lt;/code&gt; logs to &lt;code&gt;stdpath(cache)/packer.nvim.log&lt;/code&gt;. Looking at this file is usually a good start if something isn&#39;t working as expected.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: Beta. Things seem to work and most features are complete, but certainly not every edge case has been tested. People willing to give it a try and report bugs/errors are very welcome!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic package management works (i.e. installation, updating, cleaning, start/opt plugins, displaying results)&lt;/li&gt; &#xA; &lt;li&gt;Automatic generation of lazy-loading code works&lt;/li&gt; &#xA; &lt;li&gt;More testing is needed&lt;/li&gt; &#xA; &lt;li&gt;The code is messy and needs more cleanup and refactoring&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current work-in-progress&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Playing with ideas to make manual compilation less necessary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to those who have contributed to the project! PRs and issues are always welcome. This list is infrequently updated; please feel free to bug me if you&#39;re not listed here and you would like to be.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@akinsho&lt;/li&gt; &#xA; &lt;li&gt;@nanotee&lt;/li&gt; &#xA; &lt;li&gt;@weilbith&lt;/li&gt; &#xA; &lt;li&gt;@Iron-E&lt;/li&gt; &#xA; &lt;li&gt;@tjdevries&lt;/li&gt; &#xA; &lt;li&gt;@numToStr&lt;/li&gt; &#xA; &lt;li&gt;@fsouza&lt;/li&gt; &#xA; &lt;li&gt;@gbrlsnchs&lt;/li&gt; &#xA; &lt;li&gt;@lewis6991&lt;/li&gt; &#xA; &lt;li&gt;@TimUntersberger&lt;/li&gt; &#xA; &lt;li&gt;@bfredl&lt;/li&gt; &#xA; &lt;li&gt;@sunjon&lt;/li&gt; &#xA; &lt;li&gt;@gwerbin&lt;/li&gt; &#xA; &lt;li&gt;@shadmansaleh&lt;/li&gt; &#xA; &lt;li&gt;@ur4ltz&lt;/li&gt; &#xA; &lt;li&gt;@EdenEast&lt;/li&gt; &#xA; &lt;li&gt;@khuedoan&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tarantool/tarantool</title>
    <updated>2022-06-01T02:14:16Z</updated>
    <id>tag:github.com,2022-06-01:/tarantool/tarantool</id>
    <link href="https://github.com/tarantool/tarantool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get your data in RAM. Get compute close to data. Enjoy the performance.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tarantool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tarantool/tarantool/actions&#34;&gt;&lt;img src=&#34;https://github.com/tarantool/tarantool/workflows/release/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/tarantool/tarantool?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/tarantool/tarantool/badge.svg?branch=master&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://telegram.me/tarantool&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-join%20chat-blue.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tarantool/tarantool/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/tarantool/tarantool&#34; alt=&#34;GitHub Discussions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/tarantool&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-tarantool-orange.svg?sanitize=true&#34; alt=&#34;Stack Overflow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tarantool.io/en/&#34;&gt;Tarantool&lt;/a&gt; is an in-memory computing platform consisting of a database and an application server.&lt;/p&gt; &#xA;&lt;p&gt;It is distributed under &lt;a href=&#34;https://raw.githubusercontent.com/tarantool/tarantool/master/LICENSE&#34;&gt;BSD 2-Clause&lt;/a&gt; terms.&lt;/p&gt; &#xA;&lt;p&gt;Key features of the application server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Heavily optimized Lua interpreter with incredibly fast tracing JIT compiler, based on LuaJIT 2.1.&lt;/li&gt; &#xA; &lt;li&gt;Cooperative multitasking, non-blocking IO.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tarantool/queue&#34;&gt;Persistent queues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tarantool/vshard&#34;&gt;Sharding&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tarantool/cartridge&#34;&gt;Cluster and application management framework&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Access to external databases such as &lt;a href=&#34;https://github.com/tarantool/mysql&#34;&gt;MySQL&lt;/a&gt; and &lt;a href=&#34;https://github.com/tarantool/pg&#34;&gt;PostgreSQL&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A rich set of built-in and standalone &lt;a href=&#34;https://www.tarantool.io/en/download/rocks&#34;&gt;modules&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Key features of the database:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MessagePack data format and MessagePack based client-server protocol.&lt;/li&gt; &#xA; &lt;li&gt;Two data engines: 100% in-memory with complete WAL-based persistence and an own implementation of LSM-tree, to use with large data sets.&lt;/li&gt; &#xA; &lt;li&gt;Multiple index types: HASH, TREE, RTREE, BITSET.&lt;/li&gt; &#xA; &lt;li&gt;Document oriented JSON path indexes.&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous master-master replication.&lt;/li&gt; &#xA; &lt;li&gt;Synchronous quorum-based replication.&lt;/li&gt; &#xA; &lt;li&gt;RAFT-based automatic leader election for the single-leader configuration.&lt;/li&gt; &#xA; &lt;li&gt;Authentication and access control.&lt;/li&gt; &#xA; &lt;li&gt;ANSI SQL, including views, joins, referential and check constraints.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tarantool.io/en/download/connectors&#34;&gt;Connectors&lt;/a&gt; for many programming languages.&lt;/li&gt; &#xA; &lt;li&gt;The database is a C extension of the application server and can be turned off.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported platforms are Linux (x86_64, aarch64), Mac OS X (x86_64, M1), FreeBSD (x86_64).&lt;/p&gt; &#xA;&lt;p&gt;Tarantool is ideal for data-enriched components of scalable Web architecture: queue servers, caches, stateful Web applications.&lt;/p&gt; &#xA;&lt;p&gt;To download and install Tarantool as a binary package for your OS or using Docker, please see the &lt;a href=&#34;https://www.tarantool.io/en/download/&#34;&gt;download instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build Tarantool from source, see detailed &lt;a href=&#34;https://www.tarantool.io/en/doc/latest/dev_guide/building_from_source/&#34;&gt;instructions&lt;/a&gt; in the Tarantool documentation.&lt;/p&gt; &#xA;&lt;p&gt;To find modules, connectors and tools for Tarantool, check out our &lt;a href=&#34;https://github.com/tarantool/awesome-tarantool/&#34;&gt;Awesome Tarantool&lt;/a&gt; list.&lt;/p&gt; &#xA;&lt;p&gt;Please report bugs to our &lt;a href=&#34;https://github.com/tarantool/tarantool/issues&#34;&gt;issue tracker&lt;/a&gt;. We also warmly welcome your feedback on the &lt;a href=&#34;https://github.com/tarantool/tarantool/discussions&#34;&gt;discussions&lt;/a&gt; page and questions on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/tarantool&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We accept contributions via pull requests. Check out our &lt;a href=&#34;https://www.tarantool.io/en/doc/latest/contributing/contributing/&#34;&gt;How to get involved&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for your interest in Tarantool!&lt;/p&gt;</summary>
  </entry>
</feed>