<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-02T01:59:43Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ibhagwan/fzf-lua</title>
    <updated>2023-07-02T01:59:43Z</updated>
    <id>tag:github.com,2023-07-02:/ibhagwan/fzf-lua</id>
    <link href="https://github.com/ibhagwan/fzf-lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Improved fzf.vim written in lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;fzf &lt;span&gt;❤️&lt;/span&gt; lua&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim-0.5-57A143?style=flat-square&amp;amp;logo=neovim&#34; alt=&#34;Neovim version&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt; •&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#commands&#34;&gt;Commands&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#customization&#34;&gt;Customization&lt;/a&gt; • &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/ibhagwan/fzf-lua/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; changed my command life, it can change yours too, if you allow it.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#rationale&#34;&gt;Rationale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#why-fzf-lua&#34;&gt;Why Fzf-lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#dependencies&#34;&gt;Dependencies&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#optional-dependencies&#34;&gt;Optional Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#commands&#34;&gt;Commands&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#buffers-and-files&#34;&gt;Buffers and Files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#search&#34;&gt;Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#tags&#34;&gt;Tags&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#git&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#lspdiagnostics&#34;&gt;LSP | Diagnostics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#misc&#34;&gt;Misc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#neovim-api&#34;&gt;Neovim API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#nvim-dap&#34;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#tmux&#34;&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#completion-functions&#34;&gt;Completion Functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#customization&#34;&gt;Customization&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#profiles&#34;&gt;Profiles&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#insert-mode-completion&#34;&gt;Insert-mode Completion&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#custom-completion&#34;&gt;Custom Completion&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#default-options&#34;&gt;Default Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#highlights&#34;&gt;Highlights&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To quickly test this plugin without changing your configuration run (will run in it&#39;s own sandbox with the default keybinds below):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh -c &#34;$(curl -s https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/scripts/mini.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; it&#39;s good practice to first &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua/raw/main/scripts/mini.sh&#34;&gt;read the script&lt;/a&gt; before running &lt;code&gt;sh -c&lt;/code&gt; directly from the web&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-\&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;buffers&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-p&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-g&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;grep&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;live_grep&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;builtin commands&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;F1&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;neovim help&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;p&gt;What more can be said about &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt;? It is the single most impactful tool for my command line workflow, once I started using fzf I couldn’t see myself living without it.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;To understand fzf properly I highly recommended &lt;a href=&#34;https://www.youtube.com/watch?v=qgG5Jhi_Els&#34;&gt;fzf screencast&lt;/a&gt; by &lt;a href=&#34;https://github.com/samoshkin&#34;&gt;@samoshkin&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is my take on the original &lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;fzf.vim&lt;/a&gt;, written in lua for neovim 0.5, it builds on the elegant &lt;a href=&#34;https://github.com/vijaymarupudi/nvim-fzf&#34;&gt;nvim-fzf&lt;/a&gt; as an async interface to create a performant and lightweight fzf client for neovim that rivals any of the new shiny fuzzy finders for neovim.&lt;/p&gt; &#xA;&lt;h2&gt;Why Fzf-Lua&lt;/h2&gt; &#xA;&lt;p&gt;... and not &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope&lt;/a&gt; or any other vim/neovim household name?&lt;/p&gt; &#xA;&lt;p&gt;As &lt;a href=&#34;https://github.com/junegunn&#34;&gt;@junegunn&lt;/a&gt; himself put it, “because you can and you love &lt;code&gt;fzf&lt;/code&gt;”.&lt;/p&gt; &#xA;&lt;p&gt;If you’re happy with your current setup there is absolutely no reason to switch.&lt;/p&gt; &#xA;&lt;p&gt;That said, without taking anything away from the greatness of other plugins I found it more efficient having a uniform experience between my shell and my nvim. In addition &lt;code&gt;fzf&lt;/code&gt; has been a rock for me since I started using it and hadn’t failed me once, it never hangs and can handle almost anything you throw at it. That, &lt;strong&gt;and colorful file icons and git indicators!&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Linux&lt;/code&gt; or &lt;code&gt;MacOS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases&#34;&gt;&lt;code&gt;neovim&lt;/code&gt;&lt;/a&gt; version &amp;gt; &lt;code&gt;0.5.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; version &amp;gt; &lt;code&gt;0.25&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; &lt;a href=&#34;https://github.com/lotabout/skim&#34;&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/a&gt; binary installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; - better &lt;code&gt;find&lt;/code&gt; utility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;rg&lt;/a&gt; - better &lt;code&gt;grep&lt;/code&gt; utility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/bat&#34;&gt;bat&lt;/a&gt; - syntax highlighted previews when using fzf&#39;s native previewer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dandavison/delta&#34;&gt;delta&lt;/a&gt; - syntax highlighted git pager for git status previews&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; - for Debug Adapter Protocol (DAP) support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Below are a few optional dependencies for viewing media files (which you need to configure in &lt;code&gt;previewer.builtin.extensions&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hpjansson/chafa&#34;&gt;chafa&lt;/a&gt; - terminal image previewer (recommended, supports most file formats)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atanunq/viu&#34;&gt;viu&lt;/a&gt; - terminal image previewer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seebye/ueberzug&#34;&gt;ueberzug&lt;/a&gt; - X11 image previewer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://luarocks.org/modules/ibhagwan/fzf-lua&#34;&gt;&lt;img src=&#34;https://img.shields.io/luarocks/v/ibhagwan/fzf-lua?logo=lua&amp;amp;color=purple&#34; alt=&#34;LuaRocks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;ibhagwan/fzf-lua&#34;, {&#34;branch&#34;: &#34;main&#34;}&#xA;&#34; optional for icon support&#xA;Plug &#34;nvim-tree/nvim-web-devicons&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;ibhagwan/fzf-lua&#34;,&#xA;  -- optional for icon support&#xA;  requires = { &#34;nvim-tree/nvim-web-devicons&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;ibhagwan/fzf-lua&#34;,&#xA;  -- optional for icon support&#xA;  dependencies = { &#34;nvim-tree/nvim-web-devicons&#34; },&#xA;  config = function()&#xA;    -- calling `setup` is optional for customization&#xA;    require(&#34;fzf-lua&#34;).setup({})&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you already have fzf installed you do not need to install &lt;code&gt;fzf&lt;/code&gt; or &lt;code&gt;fzf.vim&lt;/code&gt;, however if you do not have it installed, &lt;strong&gt;you only need&lt;/strong&gt; fzf which can be installed with (fzf.vim is not a requirement nor conflict):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;junegunn/fzf&#34;, { &#34;do&#34;: { -&amp;gt; fzf#install() } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;or with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use = { &#34;junegunn/fzf&#34;, run = &#34;./install --bin&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;or with &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;junegunn/fzf&#34;, build = &#34;./install --bin&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Fzf-lua aims to be as plug and play as possible with sane defaults, you can run any fzf-lua command like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#39;fzf-lua&#39;).files()&#xA;-- or using the `FzfLua` vim command:&#xA;:FzfLua files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#39;fzf-lua&#39;).files({ cwd = &#39;~/.config&#39; })&#xA;-- or using the `FzfLua` vim command:&#xA;:FzfLua files cwd=~/.config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which can be easily mapped to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;c-P&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;fzf-lua&#39;).files()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if using &lt;code&gt;init.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;c-P&amp;gt;&#34;,&#xA;  &#34;&amp;lt;cmd&amp;gt;lua require(&#39;fzf-lua&#39;).files()&amp;lt;CR&amp;gt;&#34;, { silent = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Buffers and Files&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt; on a path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;oldfiles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;opened files history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;quickfix list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;quickfix_stack&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;quickfix stack&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;loclist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;location list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;loclist_stack&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;location stack&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open buffers lines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;blines&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;current buffer lines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tabs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open tabs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;args&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;argument list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search for a pattern with &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;rg&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_last&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;run search again with the last pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_cword&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search word under cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_cWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search WORD under cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_visual&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search visual selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_project&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search all project lines (fzf.vim&#39;s &lt;code&gt;:Rg&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;grep_curbuf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search current buffer lines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lgrep_curbuf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;live grep current buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;live grep current project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;live_grep_resume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;live grep continue last search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;live_grep_glob&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;live_grep with &lt;code&gt;rg --glob&lt;/code&gt; support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;live_grep_native&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;performant version of &lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Tags&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search project tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;btags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search buffer tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;grep project tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep_cword&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; word under cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep_cWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; WORD under cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep_visual&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; visual selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags_live_grep&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;live grep project tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Git&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;git ls-files&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_status&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_commits&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;git commit log (project)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_bcommits&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;git commit log (buffer)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_branches&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;git branches&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git_stash&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;git stash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;LSP/Diagnostics&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_references&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;References&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_definitions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Definitions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_declarations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Declarations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_typedefs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Type Definitions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_implementations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Implementations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_document_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Document Symbols&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_workspace_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Workspace Symbols&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_live_workspace_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Workspace Symbols (live query)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_code_actions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Code Actions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_incoming_calls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Incoming Calls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_outgoing_calls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Outgoing Calls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_finder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All LSP locations, combined view&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;diagnostics_document&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Document Diagnostics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;diagnostics_workspace&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Workspace Diagnostics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_document_diagnostics&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alias to &lt;code&gt;diagnostics_document&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp_workspace_diagnostics&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alias to &lt;code&gt;diagnostics_workspace&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Misc&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;resume last command/query&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fzf-lua builtin commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;profiles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fzf-lua configuration profiles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;help_tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;help tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;man_pages&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;man pages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;colorschemes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;color schemes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlights&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;highlight groups&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;commands&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;neovim commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;command_history&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;command history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;search_history&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;search history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;marks&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:marks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;jumps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:jumps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;changes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;registers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:registers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tagstack&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;autocmds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:autocmd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;keymaps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;key mappings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;filetypes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;filetypes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;menus&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;menus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;spell_suggest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;spelling suggestions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;packadd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;:packadd &#xA;    &lt;package&gt;&lt;/package&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Neovim API&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:help vim.ui.select&lt;/code&gt; for more info&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;register_ui_select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;register fzf-lua as the UI interface for &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;deregister_ui_select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;de-register fzf-lua with &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;nvim-dap&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Requires &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap_commands&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;list,run &lt;code&gt;nvim-dap&lt;/code&gt; builtin commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap_configurations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;list,run debug configurations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap_breakpoints&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;list,delete breakpoints&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap_variables&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;active session variables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap_frames&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;active session jump to frame&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;tmux&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tmux_buffers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;list tmux paste buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Completion Functions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fzf_complete&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;custom completion (see below)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;complete_path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;complete path under cursor (incl dirs)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;complete_file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;complete file under cursor (excl dirs)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;complete_line&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;complete line (all open buffers)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;complete_bline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;complete line (current buffer only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ibhagwan/fzf-lua/wiki/Advanced&#34;&gt;ADVANCED CUSTOMIZATION&lt;/a&gt; : to create your own fzf-lua commands see &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua/wiki/Advanced&#34;&gt;Wiki/ADVANCED&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Customization can be achieved by calling the &lt;code&gt;setup()&lt;/code&gt; function (optional) or individually sending parameters to a builtin command, A few examples below:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Different &lt;code&gt;fzf&lt;/code&gt; layout:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#39;fzf-lua&#39;).files({ fzf_opts = {[&#39;--layout&#39;] = &#39;reverse-list&#39;} })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Using &lt;code&gt;files&lt;/code&gt; with a different command and working directory:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require&#39;fzf-lua&#39;.files({ prompt=&#34;LS&amp;gt; &#34;, cmd = &#34;ls&#34;, cwd=&#34;~/&amp;lt;folder&amp;gt;&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Using &lt;code&gt;live_grep&lt;/code&gt; with &lt;code&gt;git grep&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require&#39;fzf-lua&#39;.live_grep({ cmd = &#34;git grep --line-number --column --color=always&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;colorschemes&lt;/code&gt; with non-default window size:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require&#39;fzf-lua&#39;.colorschemes({ winopts = { height=0.33, width=0.33 } })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;setup()&lt;/code&gt; If you wish for a setting to persist and not have to send it using the call arguments, e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;fzf-lua&#39;).setup{&#xA;  winopts = {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Can also be called from a &lt;code&gt;.vim&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;fzf-lua&#39;).setup{&#xA;  ...&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Profiles&lt;/h3&gt; &#xA;&lt;p&gt;Conviniently, fzf-lua comes with a set of preconfigured profiles, notably:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Profile&lt;/th&gt; &#xA;   &lt;th&gt;Details&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;default&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fzf-lua defaults, uses neovim &#34;builtin&#34; previewer and devicons (if available) for git/files/buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fzf-native&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;utilizes fzf&#39;s native previewing ability in the terminal where possible using &lt;code&gt;bat&lt;/code&gt; for previews&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fzf-tmux&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;similar to &lt;code&gt;fzf-native&lt;/code&gt; and opens in a tmux popup (requires tmux &amp;gt; 3.2)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;max-perf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;similar to &lt;code&gt;fzf-native&lt;/code&gt; and disables icons globally for max performance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;closest match to telescope defaults in look and feel and keybinds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;uses &lt;a href=&#34;https://github.com/lotabout/skim&#34;&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/a&gt; as an fzf alternative, (requires the &lt;code&gt;sk&lt;/code&gt; binary)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Use &lt;code&gt;:FzfLua profiles&lt;/code&gt; to experiment with the different profiles, once you&#39;ve found what you like and wish to make the profile persist, send a &lt;code&gt;string&lt;/code&gt; argument at the first index of the table sent to the &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;fzf-lua&#39;).setup({&#39;fzf-native&#39;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;setup&lt;/code&gt; can be called multiple times for profile &#34;live&#34; switching&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can also start with a profile as &#34;baseline&#34; and customize it, for example, telescope defaults with &lt;code&gt;bat&lt;/code&gt; previewer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require&#34;fzf-lua&#34;.setup({&#34;telescope&#34;,winopts={preview={default=&#34;bat&#34;}}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua/tree/main/lua/fzf-lua/profiles&#34;&gt;profiles&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Insert-mode Completion&lt;/h3&gt; &#xA;&lt;p&gt;Fzf-lua comes with a set of completion functions for paths/files and lines from open buffers as well as custom completion, for example, set path/completion using &lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;inoremap &amp;lt;c-x&amp;gt;&amp;lt;c-f&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#34;fzf-lua&#34;).complete_path()&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in all modes using lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set({ &#34;n&#34;, &#34;v&#34;, &#34;i&#34; }, &#34;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&#34;,&#xA;  function() require(&#34;fzf-lua&#34;).complete_path() end,&#xA;  { silent = true, desc = &#34;Fuzzy complete path&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with a custom command and preview:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set({ &#34;i&#34; }, &#34;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&#34;,&#xA;  function()&#xA;    require(&#34;fzf-lua&#34;).complete_file({&#xA;      cmd = &#34;rg --files&#34;,&#xA;      winopts = { preview = { hidden = &#34;nohidden&#34; } }&#xA;    })&#xA;  end, { silent = true, desc = &#34;Fuzzy complete file&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; only &lt;code&gt;complete_file&lt;/code&gt; supports a previewer&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Custom Completion&lt;/h4&gt; &#xA;&lt;p&gt;Custom completion is also possible using &lt;code&gt;fzf_complete&lt;/code&gt;, the signature for &lt;code&gt;fzf_complete&lt;/code&gt; is equivalent to &lt;code&gt;fzf_exec = function(contents, [opts])&lt;/code&gt;, for more info how to use the API, please refer to &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua/wiki/Advanced&#34;&gt;Wiki/ADVANCED&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Default Options&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Below is a list of most (still, not all default settings), please also consult the issues if there&#39;s something you need and you can&#39;t find as there have been many obscure requests which have been fulfilled and are yet to be documented. If you&#39;re still having issues and/or questions do not hesitate to open an issue and I&#39;ll be more than happy to help.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;CLICK HERE TO EXPLORE THE DEFAULT OPTIONS&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local actions = require &#34;fzf-lua.actions&#34;&#xA;require&#39;fzf-lua&#39;.setup {&#xA;  -- fzf_bin         = &#39;sk&#39;,            -- use skim instead of fzf?&#xA;                                        -- https://github.com/lotabout/skim&#xA;                                        -- can also be set to &#39;fzf-tmux&#39;&#xA;  winopts = {&#xA;    -- split         = &#34;belowright new&#34;,-- open in a split instead?&#xA;                                        -- &#34;belowright new&#34;  : split below&#xA;                                        -- &#34;aboveleft new&#34;   : split above&#xA;                                        -- &#34;belowright vnew&#34; : split right&#xA;                                        -- &#34;aboveleft vnew   : split left&#xA;    -- Only valid when using a float window&#xA;    -- (i.e. when &#39;split&#39; is not defined, default)&#xA;    height           = 0.85,            -- window height&#xA;    width            = 0.80,            -- window width&#xA;    row              = 0.35,            -- window row position (0=top, 1=bottom)&#xA;    col              = 0.50,            -- window col position (0=left, 1=right)&#xA;    -- border argument passthrough to nvim_open_win(), also used&#xA;    -- to manually draw the border characters around the preview&#xA;    -- window, can be set to &#39;false&#39; to remove all borders or to&#xA;    -- &#39;none&#39;, &#39;single&#39;, &#39;double&#39;, &#39;thicc&#39; (+cc) or &#39;rounded&#39; (default)&#xA;    border           = { &#39;╭&#39;, &#39;─&#39;, &#39;╮&#39;, &#39;│&#39;, &#39;╯&#39;, &#39;─&#39;, &#39;╰&#39;, &#39;│&#39; },&#xA;    -- requires neovim &amp;gt; v0.9.0, passed as is to `nvim_open_win`&#xA;    -- can be sent individually to any provider to set the win title&#xA;    -- title         = &#34;Title&#34;,&#xA;    -- title_pos     = &#34;center&#34;,    -- &#39;left&#39;, &#39;center&#39; or &#39;right&#39;&#xA;    fullscreen       = false,           -- start fullscreen?&#xA;    -- highlights should optimally be set by the colorscheme using&#xA;    -- FzfLuaXXX highlights. If your colorscheme doesn&#39;t set these&#xA;    -- or you wish to override its defaults use these:&#xA;    --[[ hl = {&#xA;      normal         = &#39;Normal&#39;,        -- window normal color (fg+bg)&#xA;      border         = &#39;FloatBorder&#39;,   -- border color&#xA;      help_normal    = &#39;Normal&#39;,        -- &amp;lt;F1&amp;gt; window normal&#xA;      help_border    = &#39;FloatBorder&#39;,   -- &amp;lt;F1&amp;gt; window border&#xA;      -- Only used with the builtin previewer:&#xA;      cursor         = &#39;Cursor&#39;,        -- cursor highlight (grep/LSP matches)&#xA;      cursorline     = &#39;CursorLine&#39;,    -- cursor line&#xA;      cursorlinenr   = &#39;CursorLineNr&#39;,  -- cursor line number&#xA;      search         = &#39;IncSearch&#39;,     -- search matches (ctags|help)&#xA;      title          = &#39;Normal&#39;,        -- preview border title (file/buffer)&#xA;      -- Only used with &#39;winopts.preview.scrollbar = &#39;float&#39;&#xA;      scrollfloat_e  = &#39;PmenuSbar&#39;,     -- scrollbar &#34;empty&#34; section highlight&#xA;      scrollfloat_f  = &#39;PmenuThumb&#39;,    -- scrollbar &#34;full&#34; section highlight&#xA;      -- Only used with &#39;winopts.preview.scrollbar = &#39;border&#39;&#xA;      scrollborder_e = &#39;FloatBorder&#39;,   -- scrollbar &#34;empty&#34; section highlight&#xA;      scrollborder_f = &#39;FloatBorder&#39;,   -- scrollbar &#34;full&#34; section highlight&#xA;    }, ]]&#xA;    preview = {&#xA;      -- default     = &#39;bat&#39;,           -- override the default previewer?&#xA;                                        -- default uses the &#39;builtin&#39; previewer&#xA;      border         = &#39;border&#39;,        -- border|noborder, applies only to&#xA;                                        -- native fzf previewers (bat/cat/git/etc)&#xA;      wrap           = &#39;nowrap&#39;,        -- wrap|nowrap&#xA;      hidden         = &#39;nohidden&#39;,      -- hidden|nohidden&#xA;      vertical       = &#39;down:45%&#39;,      -- up|down:size&#xA;      horizontal     = &#39;right:60%&#39;,     -- right|left:size&#xA;      layout         = &#39;flex&#39;,          -- horizontal|vertical|flex&#xA;      flip_columns   = 120,             -- #cols to switch to horizontal on flex&#xA;      -- Only used with the builtin previewer:&#xA;      title          = true,            -- preview border title (file/buf)?&#xA;      title_pos      = &#34;center&#34;,        -- left|center|right, title alignment&#xA;      scrollbar      = &#39;float&#39;,         -- `false` or string:&#39;float|border&#39;&#xA;                                        -- float:  in-window floating border&#xA;                                        -- border: in-border chars (see below)&#xA;      scrolloff      = &#39;-2&#39;,            -- float scrollbar offset from right&#xA;                                        -- applies only when scrollbar = &#39;float&#39;&#xA;      scrollchars    = {&#39;█&#39;, &#39;&#39; },      -- scrollbar chars ({ &amp;lt;full&amp;gt;, &amp;lt;empty&amp;gt; }&#xA;                                        -- applies only when scrollbar = &#39;border&#39;&#xA;      delay          = 100,             -- delay(ms) displaying the preview&#xA;                                        -- prevents lag on fast scrolling&#xA;      winopts = {                       -- builtin previewer window options&#xA;        number            = true,&#xA;        relativenumber    = false,&#xA;        cursorline        = true,&#xA;        cursorlineopt     = &#39;both&#39;,&#xA;        cursorcolumn      = false,&#xA;        signcolumn        = &#39;no&#39;,&#xA;        list              = false,&#xA;        foldenable        = false,&#xA;        foldmethod        = &#39;manual&#39;,&#xA;      },&#xA;    },&#xA;    on_create = function()&#xA;      -- called once upon creation of the fzf main window&#xA;      -- can be used to add custom fzf-lua mappings, e.g:&#xA;      --   vim.keymap.set(&#34;t&#34;, &#34;&amp;lt;C-j&amp;gt;&#34;, &#34;&amp;lt;Down&amp;gt;&#34;, { silent = true, buffer = true })&#xA;    end,&#xA;  },&#xA;  keymap = {&#xA;    -- These override the default tables completely&#xA;    -- no need to set to `false` to disable a bind&#xA;    -- delete or modify is sufficient&#xA;    builtin = {&#xA;      -- neovim `:tmap` mappings for the fzf win&#xA;      [&#34;&amp;lt;F1&amp;gt;&#34;]        = &#34;toggle-help&#34;,&#xA;      [&#34;&amp;lt;F2&amp;gt;&#34;]        = &#34;toggle-fullscreen&#34;,&#xA;      -- Only valid with the &#39;builtin&#39; previewer&#xA;      [&#34;&amp;lt;F3&amp;gt;&#34;]        = &#34;toggle-preview-wrap&#34;,&#xA;      [&#34;&amp;lt;F4&amp;gt;&#34;]        = &#34;toggle-preview&#34;,&#xA;      -- Rotate preview clockwise/counter-clockwise&#xA;      [&#34;&amp;lt;F5&amp;gt;&#34;]        = &#34;toggle-preview-ccw&#34;,&#xA;      [&#34;&amp;lt;F6&amp;gt;&#34;]        = &#34;toggle-preview-cw&#34;,&#xA;      [&#34;&amp;lt;S-down&amp;gt;&#34;]    = &#34;preview-page-down&#34;,&#xA;      [&#34;&amp;lt;S-up&amp;gt;&#34;]      = &#34;preview-page-up&#34;,&#xA;      [&#34;&amp;lt;S-left&amp;gt;&#34;]    = &#34;preview-page-reset&#34;,&#xA;    },&#xA;    fzf = {&#xA;      -- fzf &#39;--bind=&#39; options&#xA;      [&#34;ctrl-z&#34;]      = &#34;abort&#34;,&#xA;      [&#34;ctrl-u&#34;]      = &#34;unix-line-discard&#34;,&#xA;      [&#34;ctrl-f&#34;]      = &#34;half-page-down&#34;,&#xA;      [&#34;ctrl-b&#34;]      = &#34;half-page-up&#34;,&#xA;      [&#34;ctrl-a&#34;]      = &#34;beginning-of-line&#34;,&#xA;      [&#34;ctrl-e&#34;]      = &#34;end-of-line&#34;,&#xA;      [&#34;alt-a&#34;]       = &#34;toggle-all&#34;,&#xA;      -- Only valid with fzf previewers (bat/cat/git/etc)&#xA;      [&#34;f3&#34;]          = &#34;toggle-preview-wrap&#34;,&#xA;      [&#34;f4&#34;]          = &#34;toggle-preview&#34;,&#xA;      [&#34;shift-down&#34;]  = &#34;preview-page-down&#34;,&#xA;      [&#34;shift-up&#34;]    = &#34;preview-page-up&#34;,&#xA;    },&#xA;  },&#xA;  actions = {&#xA;    -- These override the default tables completely&#xA;    -- no need to set to `false` to disable an action&#xA;    -- delete or modify is sufficient&#xA;    files = {&#xA;      -- providers that inherit these actions:&#xA;      --   files, git_files, git_status, grep, lsp&#xA;      --   oldfiles, quickfix, loclist, tags, btags&#xA;      --   args&#xA;      -- default action opens a single selection&#xA;      -- or sends multiple selection to quickfix&#xA;      -- replace the default action with the below&#xA;      -- to open all files whether single or multiple&#xA;      -- [&#34;default&#34;]     = actions.file_edit,&#xA;      [&#34;default&#34;]     = actions.file_edit_or_qf,&#xA;      [&#34;ctrl-s&#34;]      = actions.file_split,&#xA;      [&#34;ctrl-v&#34;]      = actions.file_vsplit,&#xA;      [&#34;ctrl-t&#34;]      = actions.file_tabedit,&#xA;      [&#34;alt-q&#34;]       = actions.file_sel_to_qf,&#xA;      [&#34;alt-l&#34;]       = actions.file_sel_to_ll,&#xA;    },&#xA;    buffers = {&#xA;      -- providers that inherit these actions:&#xA;      --   buffers, tabs, lines, blines&#xA;      [&#34;default&#34;]     = actions.buf_edit,&#xA;      [&#34;ctrl-s&#34;]      = actions.buf_split,&#xA;      [&#34;ctrl-v&#34;]      = actions.buf_vsplit,&#xA;      [&#34;ctrl-t&#34;]      = actions.buf_tabedit,&#xA;    }&#xA;  },&#xA;  fzf_opts = {&#xA;    -- options are sent as `&amp;lt;left&amp;gt;=&amp;lt;right&amp;gt;`&#xA;    -- set to `false` to remove a flag&#xA;    -- set to &#39;&#39; for a non-value flag&#xA;    -- for raw args use `fzf_args` instead&#xA;    [&#39;--ansi&#39;]        = &#39;&#39;,&#xA;    [&#39;--info&#39;]        = &#39;inline&#39;,&#xA;    [&#39;--height&#39;]      = &#39;100%&#39;,&#xA;    [&#39;--layout&#39;]      = &#39;reverse&#39;,&#xA;    [&#39;--border&#39;]      = &#39;none&#39;,&#xA;  },&#xA;  -- Only used when fzf_bin = &#34;fzf-tmux&#34;, by default opens as a&#xA;  -- popup 80% width, 80% height (note `-p` requires tmux &amp;gt; 3.2)&#xA;  -- and removes the sides margin added by `fzf-tmux` (fzf#3162)&#xA;  -- for more options run `fzf-tmux --help`&#xA;  fzf_tmux_opts       = { [&#34;-p&#34;] = &#34;80%,80%&#34;, [&#34;--margin&#34;] = &#34;0,0&#34; },&#xA;  -- fzf &#39;--color=&#39; options (optional)&#xA;  --[[ fzf_colors = {&#xA;      [&#34;fg&#34;]          = { &#34;fg&#34;, &#34;CursorLine&#34; },&#xA;      [&#34;bg&#34;]          = { &#34;bg&#34;, &#34;Normal&#34; },&#xA;      [&#34;hl&#34;]          = { &#34;fg&#34;, &#34;Comment&#34; },&#xA;      [&#34;fg+&#34;]         = { &#34;fg&#34;, &#34;Normal&#34; },&#xA;      [&#34;bg+&#34;]         = { &#34;bg&#34;, &#34;CursorLine&#34; },&#xA;      [&#34;hl+&#34;]         = { &#34;fg&#34;, &#34;Statement&#34; },&#xA;      [&#34;info&#34;]        = { &#34;fg&#34;, &#34;PreProc&#34; },&#xA;      [&#34;prompt&#34;]      = { &#34;fg&#34;, &#34;Conditional&#34; },&#xA;      [&#34;pointer&#34;]     = { &#34;fg&#34;, &#34;Exception&#34; },&#xA;      [&#34;marker&#34;]      = { &#34;fg&#34;, &#34;Keyword&#34; },&#xA;      [&#34;spinner&#34;]     = { &#34;fg&#34;, &#34;Label&#34; },&#xA;      [&#34;header&#34;]      = { &#34;fg&#34;, &#34;Comment&#34; },&#xA;      [&#34;gutter&#34;]      = { &#34;bg&#34;, &#34;Normal&#34; },&#xA;  }, ]]&#xA;  previewers = {&#xA;    cat = {&#xA;      cmd             = &#34;cat&#34;,&#xA;      args            = &#34;--number&#34;,&#xA;    },&#xA;    bat = {&#xA;      cmd             = &#34;bat&#34;,&#xA;      args            = &#34;--style=numbers,changes --color always&#34;,&#xA;      theme           = &#39;Coldark-Dark&#39;, -- bat preview theme (bat --list-themes)&#xA;      config          = nil,            -- nil uses $BAT_CONFIG_PATH&#xA;    },&#xA;    head = {&#xA;      cmd             = &#34;head&#34;,&#xA;      args            = nil,&#xA;    },&#xA;    git_diff = {&#xA;      cmd_deleted     = &#34;git diff --color HEAD --&#34;,&#xA;      cmd_modified    = &#34;git diff --color HEAD&#34;,&#xA;      cmd_untracked   = &#34;git diff --color --no-index /dev/null&#34;,&#xA;      -- uncomment if you wish to use git-delta as pager&#xA;      -- can also be set under &#39;git.status.preview_pager&#39;&#xA;      -- pager        = &#34;delta --width=$FZF_PREVIEW_COLUMNS&#34;,&#xA;    },&#xA;    man = {&#xA;      -- NOTE: remove the `-c` flag when using man-db&#xA;      -- replace with `man -P cat %s | col -bx` on OSX&#xA;      cmd             = &#34;man -c %s | col -bx&#34;,&#xA;    },&#xA;    builtin = {&#xA;      syntax          = true,         -- preview syntax highlight?&#xA;      syntax_limit_l  = 0,            -- syntax limit (lines), 0=nolimit&#xA;      syntax_limit_b  = 1024*1024,    -- syntax limit (bytes), 0=nolimit&#xA;      limit_b         = 1024*1024*10, -- preview limit (bytes), 0=nolimit&#xA;      -- previewer treesitter options:&#xA;      -- enable specific filetypes with: `{ enable = { &#34;lua&#34; } }&#xA;      -- exclude specific filetypes with: `{ disable = { &#34;lua&#34; } }&#xA;      -- disable fully with: `{ enable = false }`&#xA;      treesitter      = { enable = true, disable = {} },&#xA;      -- By default, the main window dimensions are calculted as if the&#xA;      -- preview is visible, when hidden the main window will extend to&#xA;      -- full size. Set the below to &#34;extend&#34; to prevent the main window&#xA;      -- from being modified when toggling the preview.&#xA;      toggle_behavior = &#34;default&#34;,&#xA;      -- Title transform function, by default only displays the tail&#xA;      -- title_fnamemodify = function(s) vim.fn.fnamemodify(s, &#34;:t&#34;) end,&#xA;      -- preview extensions using a custom shell command:&#xA;      -- for example, use `viu` for image previews&#xA;      -- will do nothing if `viu` isn&#39;t executable&#xA;      extensions      = {&#xA;        -- neovim terminal only supports `viu` block output&#xA;        [&#34;png&#34;]       = { &#34;viu&#34;, &#34;-b&#34; },&#xA;        [&#34;svg&#34;]       = { &#34;chafa&#34; },&#xA;        [&#34;jpg&#34;]       = { &#34;ueberzug&#34; },&#xA;      },&#xA;      -- if using `ueberzug` in the above extensions map&#xA;      -- set the default image scaler, possible scalers:&#xA;      --   false (none), &#34;crop&#34;, &#34;distort&#34;, &#34;fit_contain&#34;,&#xA;      --   &#34;contain&#34;, &#34;forced_cover&#34;, &#34;cover&#34;&#xA;      -- https://github.com/seebye/ueberzug&#xA;      ueberzug_scaler = &#34;cover&#34;,&#xA;      -- Custom filetype autocmds aren&#39;t triggered on&#xA;      -- the preview buffer, define them here instead&#xA;      -- ext_ft_override = { [&#34;ksql&#34;] = &#34;sql&#34;, ... },&#xA;    },&#xA;  },&#xA;  -- provider setup&#xA;  files = {&#xA;    -- previewer      = &#34;bat&#34;,          -- uncomment to override previewer&#xA;                                        -- (name from &#39;previewers&#39; table)&#xA;                                        -- set to &#39;false&#39; to disable&#xA;    prompt            = &#39;Files❯ &#39;,&#xA;    multiprocess      = true,           -- run command in a separate process&#xA;    git_icons         = true,           -- show git icons?&#xA;    file_icons        = true,           -- show file icons?&#xA;    color_icons       = true,           -- colorize file|git icons&#xA;    -- path_shorten   = 1,              -- &#39;true&#39; or number, shorten path?&#xA;    -- executed command priority is &#39;cmd&#39; (if exists)&#xA;    -- otherwise auto-detect prioritizes `fd`:`rg`:`find`&#xA;    -- default options are controlled by &#39;fd|rg|find|_opts&#39;&#xA;    -- NOTE: &#39;find -printf&#39; requires GNU find&#xA;    -- cmd            = &#34;find . -type f -printf &#39;%P\n&#39;&#34;,&#xA;    find_opts         = [[-type f -not -path &#39;*/\.git/*&#39; -printf &#39;%P\n&#39;]],&#xA;    rg_opts           = &#34;--color=never --files --hidden --follow -g &#39;!.git&#39;&#34;,&#xA;    fd_opts           = &#34;--color=never --type f --hidden --follow --exclude .git&#34;,&#xA;    -- by default, cwd appears in the header only if {opts} contain a cwd&#xA;    -- parameter to a different folder than the current working directory&#xA;    -- uncomment if you wish to force display of the cwd as part of the&#xA;    -- query prompt string (fzf.vim style), header line or both&#xA;    -- cwd_header = true,&#xA;    cwd_prompt             = true,&#xA;    cwd_prompt_shorten_len = 32,      -- shorten prompt beyond this length&#xA;    cwd_prompt_shorten_val = 1,       -- shortened path parts length&#xA;    actions = {&#xA;      -- inherits from &#39;actions.files&#39;, here we can override&#xA;      -- or set bind to &#39;false&#39; to disable a default action&#xA;      [&#34;default&#34;]     = actions.file_edit,&#xA;      -- custom actions are available too&#xA;      [&#34;ctrl-y&#34;]      = function(selected) print(selected[1]) end,&#xA;    }&#xA;  },&#xA;  git = {&#xA;    files = {&#xA;      prompt        = &#39;GitFiles❯ &#39;,&#xA;      cmd           = &#39;git ls-files --exclude-standard&#39;,&#xA;      multiprocess  = true,           -- run command in a separate process&#xA;      git_icons     = true,           -- show git icons?&#xA;      file_icons    = true,           -- show file icons?&#xA;      color_icons   = true,           -- colorize file|git icons&#xA;      -- force display the cwd header line regardles of your current working&#xA;      -- directory can also be used to hide the header when not wanted&#xA;      -- cwd_header = true&#xA;    },&#xA;    status = {&#xA;      prompt        = &#39;GitStatus❯ &#39;,&#xA;      -- consider using `git status -su` if you wish to see&#xA;      -- untracked files individually under their subfolders&#xA;      cmd           = &#34;git -c color.status=false status -s&#34;,&#xA;      file_icons    = true,&#xA;      git_icons     = true,&#xA;      color_icons   = true,&#xA;      previewer     = &#34;git_diff&#34;,&#xA;      -- uncomment if you wish to use git-delta as pager&#xA;      --preview_pager = &#34;delta --width=$FZF_PREVIEW_COLUMNS&#34;,&#xA;      actions = {&#xA;        -- actions inherit from &#39;actions.files&#39; and merge&#xA;        [&#34;right&#34;]  = { fn = actions.git_unstage, reload = true },&#xA;        [&#34;left&#34;]   = { fn = actions.git_stage, reload = true },&#xA;        [&#34;ctrl-x&#34;] = { fn = actions.git_reset, reload = true },&#xA;      },&#xA;      -- If you wish to use a single stage|unstage toggle instead&#xA;      -- using &#39;ctrl-s&#39; modify the &#39;actions&#39; table as shown below&#xA;      -- actions = {&#xA;      --   [&#34;right&#34;]   = false,&#xA;      --   [&#34;left&#34;]    = false,&#xA;      --   [&#34;ctrl-x&#34;]  = { fn = actions.git_reset, reload = true },&#xA;      --   [&#34;ctrl-s&#34;]  = { fn = actions.git_stage_unstage, reload = true },&#xA;      -- },&#xA;    },&#xA;    commits = {&#xA;      prompt        = &#39;Commits❯ &#39;,&#xA;      cmd           = &#34;git log --color --pretty=format:&#39;%C(yellow)%h%Creset %Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&#39;&#34;,&#xA;      preview       = &#34;git show --pretty=&#39;%Cred%H%n%Cblue%an &amp;lt;%ae&amp;gt;%n%C(yellow)%cD%n%Cgreen%s&#39; --color {1}&#34;,&#xA;      -- uncomment if you wish to use git-delta as pager&#xA;      --preview_pager = &#34;delta --width=$FZF_PREVIEW_COLUMNS&#34;,&#xA;      actions = {&#xA;        [&#34;default&#34;] = actions.git_checkout,&#xA;        -- remove `exec_silent` or set to `false` to exit after yank&#xA;        [&#34;ctrl-y&#34;]  = { fn = actions.git_yank_commit, exec_silent = true },&#xA;      },&#xA;    },&#xA;    bcommits = {&#xA;      prompt        = &#39;BCommits❯ &#39;,&#xA;      -- default preview shows a git diff vs the previous commit&#xA;      -- if you prefer to see the entire commit you can use:&#xA;      --   git show --color {1} --rotate-to=&amp;lt;file&amp;gt;&#xA;      --   {1}    : commit SHA (fzf field index expression)&#xA;      --   &amp;lt;file&amp;gt; : filepath placement within the commands&#xA;      cmd           = &#34;git log --color --pretty=format:&#39;%C(yellow)%h%Creset %Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&#39; &amp;lt;file&amp;gt;&#34;,&#xA;      preview       = &#34;git diff --color {1}~1 {1} -- &amp;lt;file&amp;gt;&#34;,&#xA;      -- uncomment if you wish to use git-delta as pager&#xA;      --preview_pager = &#34;delta --width=$FZF_PREVIEW_COLUMNS&#34;,&#xA;      actions = {&#xA;        [&#34;default&#34;] = actions.git_buf_edit,&#xA;        [&#34;ctrl-s&#34;]  = actions.git_buf_split,&#xA;        [&#34;ctrl-v&#34;]  = actions.git_buf_vsplit,&#xA;        [&#34;ctrl-t&#34;]  = actions.git_buf_tabedit,&#xA;        [&#34;ctrl-y&#34;]  = { fn = actions.git_yank_commit, exec_silent = true },&#xA;      },&#xA;    },&#xA;    branches = {&#xA;      prompt          = &#39;Branches❯ &#39;,&#xA;      cmd             = &#34;git branch --all --color&#34;,&#xA;      preview         = &#34;git log --graph --pretty=oneline --abbrev-commit --color {1}&#34;,&#xA;      actions = {&#xA;        [&#34;default&#34;] = actions.git_switch,&#xA;      },&#xA;    },&#xA;    stash = {&#xA;      prompt          = &#39;Stash&amp;gt; &#39;,&#xA;      cmd             = &#34;git --no-pager stash list&#34;,&#xA;      preview         = &#34;git --no-pager stash show --patch --color {1}&#34;,&#xA;      actions = {&#xA;        [&#34;default&#34;]   = actions.git_stash_apply,&#xA;        [&#34;ctrl-x&#34;]    = { fn = actions.git_stash_drop, reload = true },&#xA;      },&#xA;      fzf_opts = {&#xA;        [&#34;--no-multi&#34;]  = &#39;&#39;,&#xA;        [&#39;--delimiter&#39;] = &#34;&#39;[:]&#39;&#34;,&#xA;      },&#xA;    },&#xA;    icons = {&#xA;      [&#34;M&#34;]           = { icon = &#34;M&#34;, color = &#34;yellow&#34; },&#xA;      [&#34;D&#34;]           = { icon = &#34;D&#34;, color = &#34;red&#34; },&#xA;      [&#34;A&#34;]           = { icon = &#34;A&#34;, color = &#34;green&#34; },&#xA;      [&#34;R&#34;]           = { icon = &#34;R&#34;, color = &#34;yellow&#34; },&#xA;      [&#34;C&#34;]           = { icon = &#34;C&#34;, color = &#34;yellow&#34; },&#xA;      [&#34;T&#34;]           = { icon = &#34;T&#34;, color = &#34;magenta&#34; },&#xA;      [&#34;?&#34;]           = { icon = &#34;?&#34;, color = &#34;magenta&#34; },&#xA;      -- override git icons?&#xA;      -- [&#34;M&#34;]        = { icon = &#34;★&#34;, color = &#34;red&#34; },&#xA;      -- [&#34;D&#34;]        = { icon = &#34;✗&#34;, color = &#34;red&#34; },&#xA;      -- [&#34;A&#34;]        = { icon = &#34;+&#34;, color = &#34;green&#34; },&#xA;    },&#xA;  },&#xA;  grep = {&#xA;    prompt            = &#39;Rg❯ &#39;,&#xA;    input_prompt      = &#39;Grep For❯ &#39;,&#xA;    multiprocess      = true,           -- run command in a separate process&#xA;    git_icons         = true,           -- show git icons?&#xA;    file_icons        = true,           -- show file icons?&#xA;    color_icons       = true,           -- colorize file|git icons&#xA;    -- executed command priority is &#39;cmd&#39; (if exists)&#xA;    -- otherwise auto-detect prioritizes `rg` over `grep`&#xA;    -- default options are controlled by &#39;rg|grep_opts&#39;&#xA;    -- cmd            = &#34;rg --vimgrep&#34;,&#xA;    grep_opts         = &#34;--binary-files=without-match --line-number --recursive --color=auto --perl-regexp -e&#34;,&#xA;    rg_opts           = &#34;--column --line-number --no-heading --color=always --smart-case --max-columns=4096 -e&#34;,&#xA;    -- set to &#39;true&#39; to always parse globs in both &#39;grep&#39; and &#39;live_grep&#39;&#xA;    -- search strings will be split using the &#39;glob_separator&#39; and translated&#xA;    -- to &#39;--iglob=&#39; arguments, requires &#39;rg&#39;&#xA;    -- can still be used when &#39;false&#39; by calling &#39;live_grep_glob&#39; directly&#xA;    rg_glob           = false,        -- default to glob parsing?&#xA;    glob_flag         = &#34;--iglob&#34;,    -- for case sensitive globs use &#39;--glob&#39;&#xA;    glob_separator    = &#34;%s%-%-&#34;,     -- query separator pattern (lua): &#39; --&#39;&#xA;    -- advanced usage: for custom argument parsing define&#xA;    -- &#39;rg_glob_fn&#39; to return a pair:&#xA;    --   first returned argument is the new search query&#xA;    --   second returned argument are addtional rg flags&#xA;    -- rg_glob_fn = function(query, opts)&#xA;    --   ...&#xA;    --   return new_query, flags&#xA;    -- end,&#xA;    actions = {&#xA;      -- actions inherit from &#39;actions.files&#39; and merge&#xA;      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;&#xA;      [&#34;ctrl-g&#34;]      = { actions.grep_lgrep }&#xA;    },&#xA;    no_header             = false,    -- hide grep|cwd header?&#xA;    no_header_i           = false,    -- hide interactive header?&#xA;  },&#xA;  args = {&#xA;    prompt            = &#39;Args❯ &#39;,&#xA;    files_only        = true,&#xA;    -- actions inherit from &#39;actions.files&#39; and merge&#xA;    actions           = { [&#34;ctrl-x&#34;] = { fn = actions.arg_del, reload = true } },&#xA;  },&#xA;  oldfiles = {&#xA;    prompt            = &#39;History❯ &#39;,&#xA;    cwd_only          = false,&#xA;    stat_file         = true,         -- verify files exist on disk&#xA;    include_current_session = false,  -- include bufs from current session&#xA;  },&#xA;  buffers = {&#xA;    prompt            = &#39;Buffers❯ &#39;,&#xA;    file_icons        = true,         -- show file icons?&#xA;    color_icons       = true,         -- colorize file|git icons&#xA;    sort_lastused     = true,         -- sort buffers() by last used&#xA;    show_unloaded     = true,         -- show unloaded buffers&#xA;    cwd_only          = false,        -- buffers for the cwd only&#xA;    cwd               = nil,          -- buffers list for a given dir&#xA;    actions = {&#xA;      -- actions inherit from &#39;actions.buffers&#39; and merge&#xA;      -- by supplying a table of functions we&#39;re telling&#xA;      -- fzf-lua to not close the fzf window, this way we&#xA;      -- can resume the buffers picker on the same window&#xA;      -- eliminating an otherwise unaesthetic win &#34;flash&#34;&#xA;      [&#34;ctrl-x&#34;]      = { fn = actions.buf_del, reload = true },&#xA;    }&#xA;  },&#xA;  tabs = {&#xA;    prompt            = &#39;Tabs❯ &#39;,&#xA;    tab_title         = &#34;Tab&#34;,&#xA;    tab_marker        = &#34;&amp;lt;&amp;lt;&#34;,&#xA;    file_icons        = true,         -- show file icons?&#xA;    color_icons       = true,         -- colorize file|git icons&#xA;    actions = {&#xA;      -- actions inherit from &#39;actions.buffers&#39; and merge&#xA;      [&#34;default&#34;]     = actions.buf_switch,&#xA;      [&#34;ctrl-x&#34;]      = { fn = actions.buf_del, reload = true },&#xA;    },&#xA;    fzf_opts = {&#xA;      -- hide tabnr&#xA;      [&#39;--delimiter&#39;] = &#34;&#39;[\\):]&#39;&#34;,&#xA;      [&#34;--with-nth&#34;]  = &#39;2..&#39;,&#xA;    },&#xA;  },&#xA;  lines = {&#xA;    previewer         = &#34;builtin&#34;,    -- set to &#39;false&#39; to disable&#xA;    prompt            = &#39;Lines❯ &#39;,&#xA;    show_unloaded     = true,         -- show unloaded buffers&#xA;    show_unlisted     = false,        -- exclude &#39;help&#39; buffers&#xA;    no_term_buffers   = true,         -- exclude &#39;term&#39; buffers&#xA;    fzf_opts = {&#xA;      -- do not include bufnr in fuzzy matching&#xA;      -- tiebreak by line no.&#xA;      [&#39;--delimiter&#39;] = &#34;&#39;[\\]:]&#39;&#34;,&#xA;      [&#34;--nth&#34;]       = &#39;2..&#39;,&#xA;      [&#34;--tiebreak&#34;]  = &#39;index&#39;,&#xA;      [&#34;--tabstop&#34;]   = &#34;1&#34;,&#xA;    },&#xA;    -- actions inherit from &#39;actions.buffers&#39; and merge&#xA;    actions = {&#xA;      [&#34;default&#34;]     = actions.buf_edit_or_qf,&#xA;      [&#34;alt-q&#34;]       = actions.buf_sel_to_qf,&#xA;      [&#34;alt-l&#34;]       = actions.buf_sel_to_ll&#xA;    },&#xA;  },&#xA;  blines = {&#xA;    previewer         = &#34;builtin&#34;,    -- set to &#39;false&#39; to disable&#xA;    prompt            = &#39;BLines❯ &#39;,&#xA;    show_unlisted     = true,         -- include &#39;help&#39; buffers&#xA;    no_term_buffers   = false,        -- include &#39;term&#39; buffers&#xA;    fzf_opts = {&#xA;      -- hide filename, tiebreak by line no.&#xA;      [&#39;--delimiter&#39;] = &#34;&#39;[\\]:]&#39;&#34;,&#xA;      [&#34;--with-nth&#34;]  = &#39;2..&#39;,&#xA;      [&#34;--tiebreak&#34;]  = &#39;index&#39;,&#xA;      [&#34;--tabstop&#34;]   = &#34;1&#34;,&#xA;    },&#xA;    -- actions inherit from &#39;actions.buffers&#39; and merge&#xA;    actions = {&#xA;      [&#34;default&#34;]     = actions.buf_edit_or_qf,&#xA;      [&#34;alt-q&#34;]       = actions.buf_sel_to_qf,&#xA;      [&#34;alt-l&#34;]       = actions.buf_sel_to_ll&#xA;    },&#xA;  },&#xA;  tags = {&#xA;    prompt                = &#39;Tags❯ &#39;,&#xA;    ctags_file            = nil,      -- auto-detect from tags-option&#xA;    multiprocess          = true,&#xA;    file_icons            = true,&#xA;    git_icons             = true,&#xA;    color_icons           = true,&#xA;    -- &#39;tags_live_grep&#39; options, `rg` prioritizes over `grep`&#xA;    rg_opts               = &#34;--no-heading --color=always --smart-case&#34;,&#xA;    grep_opts             = &#34;--color=auto --perl-regexp&#34;,&#xA;    actions = {&#xA;      -- actions inherit from &#39;actions.files&#39; and merge&#xA;      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;&#xA;      [&#34;ctrl-g&#34;]          = { actions.grep_lgrep }&#xA;    },&#xA;    no_header             = false,    -- hide grep|cwd header?&#xA;    no_header_i           = false,    -- hide interactive header?&#xA;  },&#xA;  btags = {&#xA;    prompt                = &#39;BTags❯ &#39;,&#xA;    ctags_file            = nil,      -- auto-detect from tags-option&#xA;    ctags_autogen         = false,    -- dynamically generate ctags each call&#xA;    multiprocess          = true,&#xA;    file_icons            = true,&#xA;    git_icons             = true,&#xA;    color_icons           = true,&#xA;    rg_opts               = &#34;--no-heading --color=always&#34;,&#xA;    grep_opts             = &#34;--color=auto --perl-regexp&#34;,&#xA;    fzf_opts = {&#xA;      [&#39;--delimiter&#39;]     = &#34;&#39;[\\]:]&#39;&#34;,&#xA;      [&#34;--with-nth&#34;]      = &#39;2..&#39;,&#xA;      [&#34;--tiebreak&#34;]      = &#39;index&#39;,&#xA;    },&#xA;    -- actions inherit from &#39;actions.files&#39;&#xA;  },&#xA;  colorschemes = {&#xA;    prompt            = &#39;Colorschemes❯ &#39;,&#xA;    live_preview      = true,       -- apply the colorscheme on preview?&#xA;    actions           = { [&#34;default&#34;] = actions.colorscheme, },&#xA;    winopts           = { height = 0.55, width = 0.30, },&#xA;    post_reset_cb     = function()&#xA;      -- reset statusline highlights after&#xA;      -- a live_preview of the colorscheme&#xA;      -- require(&#39;feline&#39;).reset_highlights()&#xA;    end,&#xA;  },&#xA;  quickfix = {&#xA;    file_icons        = true,&#xA;    git_icons         = true,&#xA;  },&#xA;  quickfix_stack = {&#xA;    prompt = &#34;Quickfix Stack&amp;gt; &#34;,&#xA;    marker = &#34;&amp;gt;&#34;,                   -- current list marker&#xA;  },&#xA;  lsp = {&#xA;    prompt_postfix    = &#39;❯ &#39;,       -- will be appended to the LSP label&#xA;                                    -- to override use &#39;prompt&#39; instead&#xA;    cwd_only          = false,      -- LSP/diagnostics for cwd only?&#xA;    async_or_timeout  = 5000,       -- timeout(ms) or &#39;true&#39; for async calls&#xA;    file_icons        = true,&#xA;    git_icons         = false,&#xA;    -- The equivalent of using `includeDeclaration` in lsp buf calls, e.g:&#xA;    -- :lua vim.lsp.buf.references({includeDeclaration = false})&#xA;    includeDeclaration = true,      -- include current declaration in LSP context&#xA;    -- settings for &#39;lsp_{document|workspace|lsp_live_workspace}_symbols&#39;&#xA;    symbols = {&#xA;        async_or_timeout  = true,       -- symbols are async by default&#xA;        symbol_style      = 1,          -- style for document/workspace symbols&#xA;                                        -- false: disable,    1: icon+kind&#xA;                                        --     2: icon only,  3: kind only&#xA;                                        -- NOTE: icons are extracted from&#xA;                                        -- vim.lsp.protocol.CompletionItemKind&#xA;        -- icons for symbol kind&#xA;        -- see https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolKind&#xA;        -- see https://github.com/neovim/neovim/blob/829d92eca3d72a701adc6e6aa17ccd9fe2082479/runtime/lua/vim/lsp/protocol.lua#L117&#xA;        symbol_icons     = {&#xA;          File          = &#34;󰈙&#34;,&#xA;          Module        = &#34;&#34;,&#xA;          Namespace     = &#34;󰦮&#34;,&#xA;          Package       = &#34;&#34;,&#xA;          Class         = &#34;󰆧&#34;,&#xA;          Method        = &#34;󰊕&#34;,&#xA;          Property      = &#34;&#34;,&#xA;          Field         = &#34;&#34;,&#xA;          Constructor   = &#34;&#34;,&#xA;          Enum          = &#34;&#34;,&#xA;          Interface     = &#34;&#34;,&#xA;          Function      = &#34;󰊕&#34;,&#xA;          Variable      = &#34;󰀫&#34;,&#xA;          Constant      = &#34;󰏿&#34;,&#xA;          String        = &#34;&#34;,&#xA;          Number        = &#34;󰎠&#34;,&#xA;          Boolean       = &#34;󰨙&#34;,&#xA;          Array         = &#34;󱡠&#34;,&#xA;          Object        = &#34;&#34;,&#xA;          Key           = &#34;󰌋&#34;,&#xA;          Null          = &#34;󰟢&#34;,&#xA;          EnumMember    = &#34;&#34;,&#xA;          Struct        = &#34;󰆼&#34;,&#xA;          Event         = &#34;&#34;,&#xA;          Operator      = &#34;󰆕&#34;,&#xA;          TypeParameter = &#34;󰗴&#34;,&#xA;        },&#xA;        -- colorize using Treesitter &#39;@&#39; highlight groups (&#34;@function&#34;, etc).&#xA;        -- or &#39;false&#39; to disable highlighting&#xA;        symbol_hl         = function(s) return &#34;@&#34; .. s:lower() end,&#xA;        -- additional symbol formatting, works with or without style&#xA;        symbol_fmt        = function(s, opts) return &#34;[&#34; .. s .. &#34;]&#34; end,&#xA;        -- prefix child symbols. set to any string or `false` to disable&#xA;        child_prefix      = true,&#xA;    },&#xA;    code_actions = {&#xA;        prompt            = &#39;Code Actions&amp;gt; &#39;,&#xA;        async_or_timeout  = 5000,&#xA;        winopts = {&#xA;            row           = 0.40,&#xA;            height        = 0.35,&#xA;            width         = 0.60,&#xA;        },&#xA;    },&#xA;    finder = {&#xA;        prompt      = &#34;LSP Finder&amp;gt; &#34;,&#xA;        fzf_opts    = { [&#34;--info&#34;] = &#34;default&#34; },&#xA;        file_icons  = true,&#xA;        color_icons = true,&#xA;        git_icons   = false,&#xA;        async       = true,         -- async by default&#xA;        silent      = true,         -- suppress &#34;not found&#34; &#xA;        separator   = &#34;| &#34;,         -- separator after provider prefix, `false` to disable&#xA;        includeDeclaration = true,  -- include current declaration in LSP context&#xA;        -- by default display all LSP locations&#xA;        -- to customize, duplicate table and delete unwanted providers&#xA;        providers   = {&#xA;            { &#34;references&#34;,      prefix = require(&#34;fzf-lua&#34;).utils.ansi_codes.blue(&#34;ref &#34;) },&#xA;            { &#34;definitions&#34;,     prefix = require(&#34;fzf-lua&#34;).utils.ansi_codes.green(&#34;def &#34;) },&#xA;            { &#34;declarations&#34;,    prefix = require(&#34;fzf-lua&#34;).utils.ansi_codes.magenta(&#34;decl&#34;) },&#xA;            { &#34;typedefs&#34;,        prefix = require(&#34;fzf-lua&#34;).utils.ansi_codes.red(&#34;tdef&#34;) },&#xA;            { &#34;implementations&#34;, prefix = require(&#34;fzf-lua&#34;).utils.ansi_codes.green(&#34;impl&#34;) },&#xA;            { &#34;incoming_calls&#34;,  prefix = require(&#34;fzf-lua&#34;).utils.ansi_codes.cyan(&#34;in  &#34;) },&#xA;            { &#34;outgoing_calls&#34;,  prefix = require(&#34;fzf-lua&#34;).utils.ansi_codes.yellow(&#34;out &#34;) },&#xA;        },&#xA;    }&#xA;  },&#xA;  diagnostics ={&#xA;    prompt            = &#39;Diagnostics❯ &#39;,&#xA;    cwd_only          = false,&#xA;    file_icons        = true,&#xA;    git_icons         = false,&#xA;    diag_icons        = true,&#xA;    icon_padding      = &#39;&#39;,     -- add padding for wide diagnostics signs&#xA;    -- by default icons and highlights are extracted from &#39;DiagnosticSignXXX&#39;&#xA;    -- and highlighted by a highlight group of the same name (which is usually&#xA;    -- set by your colorscheme, for more info see:&#xA;    --   :help DiagnosticSignHint&#39;&#xA;    --   :help hl-DiagnosticSignHint&#39;&#xA;    -- only uncomment below if you wish to override the signs/highlights&#xA;    -- define only text, texthl or both (&#39;:help sign_define()&#39; for more info)&#xA;    -- signs = {&#xA;    --   [&#34;Error&#34;] = { text = &#34;&#34;, texthl = &#34;DiagnosticError&#34; },&#xA;    --   [&#34;Warn&#34;]  = { text = &#34;&#34;, texthl = &#34;DiagnosticWarn&#34; },&#xA;    --   [&#34;Info&#34;]  = { text = &#34;&#34;, texthl = &#34;DiagnosticInfo&#34; },&#xA;    --   [&#34;Hint&#34;]  = { text = &#34;󰌵&#34;, texthl = &#34;DiagnosticHint&#34; },&#xA;    -- },&#xA;    -- limit to specific severity, use either a string or num:&#xA;    --   1 or &#34;hint&#34;&#xA;    --   2 or &#34;information&#34;&#xA;    --   3 or &#34;warning&#34;&#xA;    --   4 or &#34;error&#34;&#xA;    -- severity_only:   keep any matching exact severity&#xA;    -- severity_limit:  keep any equal or more severe (lower)&#xA;    -- severity_bound:  keep any equal or less severe (higher)&#xA;  },&#xA;  complete_path = {&#xA;    cmd          = nil, -- default: auto detect fd|rg|find&#xA;    actions      = { [&#34;default&#34;] = actions.complete_insert },&#xA;  },&#xA;  complete_file = {&#xA;    cmd          = nil, -- default: auto detect rg|fd|find&#xA;    file_icons   = true,&#xA;    color_icons  = true,&#xA;    git_icons    = false,&#xA;    -- actions inherit from &#39;actions.files&#39; and merge&#xA;    actions      = { [&#34;default&#34;] = actions.complete_insert },&#xA;    -- previewer hidden by default&#xA;    winopts      = { preview = { hidden = &#34;hidden&#34; } },&#xA;  },&#xA;  -- uncomment to use fzf native previewers&#xA;  -- (instead of using a neovim floating window)&#xA;  -- manpages = { previewer = &#34;man_native&#34; },&#xA;  -- helptags = { previewer = &#34;help_native&#34; },&#xA;  -- &#xA;  -- optional override of file extension icon colors&#xA;  -- available colors (terminal):&#xA;  --    clear, bold, black, red, green, yellow&#xA;  --    blue, magenta, cyan, grey, dark_grey, white&#xA;  file_icon_colors = {&#xA;    [&#34;sh&#34;] = &#34;green&#34;,&#xA;  },&#xA;  -- padding can help kitty term users with&#xA;  -- double-width icon rendering&#xA;  file_icon_padding = &#39;&#39;,&#xA;  -- uncomment if your terminal/font does not support unicode character&#xA;  -- &#39;EN SPACE&#39; (U+2002), the below sets it to &#39;NBSP&#39; (U+00A0) instead&#xA;  -- nbsp = &#39;\xc2\xa0&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Highlights&lt;/h3&gt; &#xA;&lt;p&gt;FzfLua conviniently creates the below highlights, each hlgroup can be temporarily overridden by its corresponding &lt;code&gt;winopts&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Override Via&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaNormal&lt;/td&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.normal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main win &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaBorder&lt;/td&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.border&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main win border&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaTitle&lt;/td&gt; &#xA;   &lt;td&gt;FzfLuaNormal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main win title&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaPreviewNormal&lt;/td&gt; &#xA;   &lt;td&gt;FzfLuaNormal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.preview_normal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin preview &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaPreviewBorder&lt;/td&gt; &#xA;   &lt;td&gt;FzfLuaBorder&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.preview_border&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin preview border&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaPreviewTitle&lt;/td&gt; &#xA;   &lt;td&gt;FzfLuaTitle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.preview_title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin preview title&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaCursor&lt;/td&gt; &#xA;   &lt;td&gt;Cursor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.cursor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin preview &lt;code&gt;Cursor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaCursorLine&lt;/td&gt; &#xA;   &lt;td&gt;CursorLine&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.cursorline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin preview &lt;code&gt;Cursorline&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaCursorLineNr&lt;/td&gt; &#xA;   &lt;td&gt;CursorLineNr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.cursorlinenr&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin preview &lt;code&gt;CursorLineNr&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaSearch&lt;/td&gt; &#xA;   &lt;td&gt;IncSearch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.search&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin preview search matches&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaScrollBorderEmpty&lt;/td&gt; &#xA;   &lt;td&gt;FzfLuaBorder&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.scrollborder_e&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin preview &lt;code&gt;border&lt;/code&gt; scroll empty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaScrollBorderFull&lt;/td&gt; &#xA;   &lt;td&gt;FzfLuaBorder&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.scrollborder_f&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin preview &lt;code&gt;border&lt;/code&gt; scroll full&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaScrollFloatEmpty&lt;/td&gt; &#xA;   &lt;td&gt;PmenuSbar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.scrollfloat_e&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin preview &lt;code&gt;float&lt;/code&gt; scroll empty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaScrollFloatFull&lt;/td&gt; &#xA;   &lt;td&gt;PmenuThumb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.scrollfloat_f&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin preview &lt;code&gt;float&lt;/code&gt; scroll full&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaHelpNormal&lt;/td&gt; &#xA;   &lt;td&gt;FzfLuaNormal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.help_normal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Help win &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FzfLuaHelpBorder&lt;/td&gt; &#xA;   &lt;td&gt;FzfLuaBorder&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winopts.hl.help_border&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Help win border&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These can be easily customized either via the lua API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua vim.api.nvim_set_hl(0, &#34;FzfLuaBorder&#34;, { link = &#34;FloatBorder&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or vimscript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:hi! link FzfLuaBorder FloatBorder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to override a highlight without having to modify your colorscheme highlights, set the corresponding &lt;code&gt;winopts.hl&lt;/code&gt; override or specify it directly via a call argument.&lt;/p&gt; &#xA;&lt;p&gt;Temporary highlight override:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require&#39;fzf-lua&#39;.files({ winopts={hl={preview_title=&#34;IncSearch&#34;}} })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Permanent global override via &lt;code&gt;setup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;fzf-lua&#39;).setup{&#xA;  winopts = {&#xA;    hl = { border = &#34;FloatBorder&#34;, }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Big thank you to all those I borrowed code/ideas from, I read so many configs and plugin codes that I probably forgot where I found some samples from so if I missed your name feel free to contact me and I&#39;ll add it below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vijaymarupudi/&#34;&gt;@vijaymarupudi&lt;/a&gt; for his wonderful &lt;a href=&#34;https://github.com/vijaymarupudi/nvim-fzf&#34;&gt;nvim-fzf&lt;/a&gt; plugin which is at the core of this plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tjdevries/&#34;&gt;@tjdevries&lt;/a&gt; for too many great things to list here and for borrowing some of his &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope&lt;/a&gt; provider code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke&#34;&gt;@lukas-reineke&lt;/a&gt; for inspiring the solution after browsing his &lt;a href=&#34;https://github.com/lukas-reineke/dotfiles&#34;&gt;dotfiles&lt;/a&gt; and coming across his &lt;a href=&#34;https://github.com/lukas-reineke/dotfiles/raw/master/vim/lua/fuzzy.lua&#34;&gt;fuzzy.lua&lt;/a&gt; , and while we&#39;re, also here for his great lua plugin &lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;indent-blankline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindrets&#34;&gt;@sindrets&lt;/a&gt; for borrowing utilities from his fantastic lua plugin &lt;a href=&#34;https://github.com/sindrets/diffview.nvim&#34;&gt;diffview.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevinhwang91&#34;&gt;@kevinhwang91&lt;/a&gt; for using his previewer code as baseline for the builtin previewer and his must have plugin &lt;a href=&#34;https://github.com/kevinhwang91/nvim-bqf&#34;&gt;nvim-bqf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pmizio/typescript-tools.nvim</title>
    <updated>2023-07-02T01:59:43Z</updated>
    <id>tag:github.com,2023-07-02:/pmizio/typescript-tools.nvim</id>
    <link href="https://github.com/pmizio/typescript-tools.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡ TypeScript integration NeoVim deserves ⚡&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;typescript-tools.nvim&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;sup&gt;⚡ TypeScript integration NeoVim deserves ⚡&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🚧 Warning 🚧&lt;/h3&gt; &#xA;&lt;p&gt;Please note that the plugin is currently in the early beta version, which means you may encounter bugs.&lt;/p&gt; &#xA;&lt;h3&gt;⁉️ Why?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drop in, pure lua replacement for &lt;code&gt;typescript-language-server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you work on a large TS/JS project, you probably understand why this plugin came into existence. The &lt;code&gt;typescript-language-server&lt;/code&gt; can be extremely slow in such projects, and it often fails to provide accurate completions or just crash.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;✨ Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚡ Blazingly fast, thanks to the utilization of the native Tsserver communication protocol, similar to Visual Studio Code&lt;/li&gt; &#xA; &lt;li&gt;🪭 Supports a wide range of TypeScript versions 4.0 and above&lt;/li&gt; &#xA; &lt;li&gt;🌍 Supports the nvim LSP plugin ecosystem&lt;/li&gt; &#xA; &lt;li&gt;🔀 Supports multiple instances of Tsserver&lt;/li&gt; &#xA; &lt;li&gt;💻 Supports both local and global installations of TypeScript&lt;/li&gt; &#xA; &lt;li&gt;💅 Provides out-of-the-box support for styled-components, which is not enabled by default (see Installation and &lt;a href=&#34;https://raw.githubusercontent.com/pmizio/typescript-tools.nvim/master/#-styled-components-support&#34;&gt;Configuration&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;✨ Improved code refactor capabilities e.g. extracting to variable or function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pmizio/typescript-tools.nvim/assets/4346598/50f87c54-c286-473d-ba3d-886ac97ca072&#34; alt=&#34;code_action&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🚀 How it works?&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; If you&#39;re interested in learning more about the technical details of the plugin, you can click here. &lt;/summary&gt; &#xA; &lt;p&gt; &lt;br&gt; This plugin functions exactly like the bundled TypeScript support extension in Visual Studio Code. Thanks to the new (0.8.0) NeoVim API, it is now possible to pass a Lua function as the LSP start command. As a result, the plugin spawns a custom version of the I/O loop to communicate directly with Tsserver using its native protocol, without the need for any additional proxy. The Tsserver protocol, which is a JSON-based communication protocol, likely served as inspiration for the LSP. However, it is incompatible with the LSP. To address this, the I/O loop provided by this plugin features a translation layer that converts all messages to and from the Tsserver format. &lt;/p&gt; &#xA; &lt;p&gt;In summary, the architecture of this plugin can be visualized as shown in the diagram below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt; NeoVim                                                    Tsserver Instance&#xA;┌────────────────────────────────────────────┐            ┌────────────────┐&#xA;│                                            │            │                │&#xA;│  LSP Handlers          Tsserver LSP Loop   │            │                │&#xA;│ ┌─────────┐           ┌──────────────────┐ │            │                │&#xA;│ │         │           │                  │ │            │                │&#xA;│ │         │ Request   │ ┌──────────────┐ │ │            │                │&#xA;│ │         ├───────────┤►│ Translation  │ │ │            │                │&#xA;│ │         │ Response  │ │    Layer     │ │ │            │                │&#xA;│ │         ◄───────────┼─┤              │ │ │            │                │&#xA;│ │         │           │ └───┬─────▲────┘ │ │            │                │&#xA;│ │         │           │     │     │      │ │            │                │&#xA;│ │         │           │ ┌───▼─────┴────┐ │ │ Request    │                │&#xA;│ │         │           │ │   I/O Loop   ├─┼─┼────────────►                │&#xA;│ │         │           │ │              │ │ │ Response   │                │&#xA;│ │         │           │ │              ◄─┼─┼────────────┤                │&#xA;│ │         │           │ └──────────────┘ │ │            │                │&#xA;│ │         │           │                  │ │            │                │&#xA;│ └─────────┘           └──────────────────┘ │            │                │&#xA;│                                            │            │                │&#xA;└────────────────────────────────────────────┘            └────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;📦 Installation&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❗️ IMPORTANT: As mentioned earlier, this plugin serves as a replacement for &lt;code&gt;typescript-language-server&lt;/code&gt;, so you should remove the &lt;code&gt;nvim-lspconfig&lt;/code&gt; setup for it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;⚡️ Requirements&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NeoVim &amp;gt;= 0.8.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TypeScript &amp;gt;= 4.0&lt;/li&gt; &#xA; &lt;li&gt;Node supported suitable for TypeScript version you use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;pmizio/typescript-tools.nvim&#34;,&#xA;  dependencies = { &#34;nvim-lua/plenary.nvim&#34;, &#34;neovim/nvim-lspconfig&#34; },&#xA;  opts = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;pmizio/typescript-tools.nvim&#34;&#xA;  requires = { &#34;nvim-lua/plenary.nvim&#34;, &#34;neovim/nvim-lspconfig&#34; },&#xA;  config = function()&#xA;    require(&#34;typescript-tools&#34;).setup {}&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;⚙️ Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The parameters passed into the &lt;code&gt;setup&lt;/code&gt; function are also passed to the standard &lt;code&gt;nvim-lspconfig&lt;/code&gt; server &lt;code&gt;setup&lt;/code&gt;, allowing you to use the same settings here. But you can pass plugin-specific options through the &lt;code&gt;settings&lt;/code&gt; parameter, which defaults to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;typescript-tools&#34;).setup {&#xA;  on_attach = function() ... end,&#xA;  ...&#xA;  settings = {&#xA;    -- spawn additional tsserver instance to calculate diagnostics on it&#xA;    separate_diagnostic_server = true,&#xA;    -- &#34;change&#34;|&#34;insert_leave&#34; determine when the client asks the server about diagnostic&#xA;    publish_diagnostic_on = &#34;insert_leave&#34;,&#xA;    -- specify a list of plugins to load by tsserver, e.g., for support `styled-components`&#xA;    -- (see 💅 `styled-components` support section)&#xA;    tsserver_plugins = {},&#xA;    -- this value is passed to: https://nodejs.org/api/cli.html#--max-old-space-sizesize-in-megabytes&#xA;    -- memory limit in megabytes or &#34;auto&#34;(basically no limit)&#xA;    tsserver_max_memory = &#34;auto&#34;,&#xA;    -- described below&#xA;    tsserver_format_options = {},&#xA;    tsserver_file_preferences = {},&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass custom configuration options that will be passed to &lt;code&gt;tsserver&lt;/code&gt; instance. You can find available options in &lt;code&gt;typescript&lt;/code&gt; repository (e.g. for version 5.0.4 of typescript):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript/raw/v5.0.4/src/server/protocol.ts#L3439&#34;&gt;tsserver_file_preferences&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript/raw/v5.0.4/src/server/protocol.ts#L3418&#34;&gt;tsserver_format_options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To pass those options to plugin pass them to the plugin &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;typescript-tools&#34;).setup {&#xA;  settings = {&#xA;    ...&#xA;    tsserver_file_preferences = {&#xA;      includeInlayParameterNameHints = &#34;all&#34;,&#xA;      includeCompletionsForModuleExports = true,&#xA;      quotePreference = &#34;auto&#34;,&#xA;      ...&#xA;    },&#xA;    tsserver_format_options = {&#xA;      allowIncompleteCompletions = false,&#xA;      allowRenameOfImportPath = false,&#xA;      ...&#xA;    }&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default values for &lt;code&gt;preferences&lt;/code&gt; and &lt;code&gt;format_options&lt;/code&gt; are in &lt;a href=&#34;https://github.com/pmizio/typescript-tools.nvim/raw/master/lua/typescript-tools/protocol/text_document/did_open.lua#L8&#34;&gt;this file&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;💅 &lt;code&gt;styled-components&lt;/code&gt; support&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show more&lt;/summary&gt; &#xA; &lt;p&gt; &lt;br&gt; To get IntelliSense for &lt;code&gt;styled-components&lt;/code&gt;, you need to install the tsserver plugin globally, which enables support for it: &lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;npm i -g @styled/typescript-styled-plugin typescript-styled-plugin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now, you need to load the plugin by modifying the &lt;code&gt;settings&lt;/code&gt; object as follows:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;typescript-tools&#34;).setup {&#xA;  settings = {&#xA;    ...&#xA;    tsserver_plugins = {&#xA;      -- for TypeScript v4.9+&#xA;      &#34;@styled/typescript-styled-plugin&#34;,&#xA;      -- or for older TypeScript versions&#xA;      -- &#34;typescript-styled-plugin&#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Supported LSP methods&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Request&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/completion&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/hover&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/rename&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/publishDiagnostics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/signatureHelp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/references&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/definition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/typeDefinition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/documentSymbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/documentHighlight&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/codeAction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/formatting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/rangeFormatting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/foldingRange&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/semanticTokens/full (supported from TS v4.1)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/inlayHint (supported from TS v4.4)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;callHierarchy/incomingCalls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;callHierarchy/outgoingCalls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🚧&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/codeLens(&lt;a href=&#34;https://github.com/pmizio/typescript-tools.nvim/pull/39&#34;&gt;#39&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🚧&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/linkedEditingRange (planned)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;workspace/symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;workspace/willRenameFiles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;workspace/applyEdit - N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;textDocument/declaration - N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;window/logMessage - N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;window/showMessage - N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;window/showMessageRequest - N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🚦 Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;textDocument/codeLens&lt;/code&gt; - &lt;a href=&#34;https://github.com/pmizio/typescript-tools.nvim/pull/39&#34;&gt;#39&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;textDocument/linkedEditingRange&lt;/code&gt; - &lt;a href=&#34;https://github.com/pmizio/typescript-tools.nvim/pull/32&#34;&gt;#32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Embedded language support(JS inside of HTML) - &lt;a href=&#34;https://github.com/pmizio/typescript-tools.nvim/pull/43&#34;&gt;#43&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔨 Development&lt;/h2&gt; &#xA;&lt;p&gt;Useful links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide&#34;&gt;nvim-lua-guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🐛 Run tests&lt;/h3&gt; &#xA;&lt;p&gt;The unit testing environment is automatically bootstrapped, just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to run a single test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make file=test_spec.lua test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💐 Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;null-ls.nvim&lt;/a&gt; - for the idea to monkeypatch nvim API to start a custom LSP I/O loop&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typescript-language-server/typescript-language-server&#34;&gt;typescript-language-server&lt;/a&gt; - for ideas on how to translate certain Tsserver responses&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vscode/tree/main/extensions/typescript-language-features&#34;&gt;Visual Studio Code(TypeScript extension)&lt;/a&gt; - for insights on using the Tsserver protocol and performance optimizations&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-telescope/telescope-file-browser.nvim</title>
    <updated>2023-07-02T01:59:43Z</updated>
    <id>tag:github.com,2023-07-02:/nvim-telescope/telescope-file-browser.nvim</id>
    <link href="https://github.com/nvim-telescope/telescope-file-browser.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;File Browser extension for telescope.nvim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;telescope-file-browser.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;telescope-file-browser.nvim&lt;/code&gt; is a file browser extension for telescope.nvim. It supports synchronized creation, deletion, renaming, and moving of files and folders powered by &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/39233597/149016073-6fcc9383-a761-422b-be40-17d4b854cd3c.gif&#34; alt=&#34;Demo&#34;&gt; More demo examples can be found in the &lt;a href=&#34;https://github.com/nvim-telescope/telescope-file-browser.nvim/issues/53&#34;&gt;showcase issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#setup-and-configuration&#34;&gt;Setup and Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#mappings&#34;&gt;Mappings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#workflow&#34;&gt;Workflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#multi-selections&#34;&gt;Multi-Selections&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#file-system-operations&#34;&gt;File System Operations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#exports&#34;&gt;Exports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#roadmap--contributing&#34;&gt;Roadmap &amp;amp; Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- packer&#xA;use {&#xA;    &#34;nvim-telescope/telescope-file-browser.nvim&#34;,&#xA;    requires = { &#34;nvim-telescope/telescope.nvim&#34;, &#34;nvim-lua/plenary.nvim&#34; }&#xA;}&#xA;&#xA;--lazy&#xA;{&#xA;    &#34;nvim-telescope/telescope-file-browser.nvim&#34;,&#xA;    dependencies = { &#34;nvim-telescope/telescope.nvim&#34;, &#34;nvim-lua/plenary.nvim&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;nvim-telescope/telescope.nvim&#39;&#xA;Plug &#39;nvim-telescope/telescope-file-browser.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Optional Dependencies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;telescope-file-browser&lt;/code&gt; optionally leverages &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; if installed for faster, more async browsing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;&lt;code&gt;nvim-web-devicons&lt;/code&gt;&lt;/a&gt; for file icons&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git&lt;/code&gt; to show the status of files directly in the file browser.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup and Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can configure the &lt;code&gt;telescope-file-browser&lt;/code&gt; like any other &lt;code&gt;telescope.nvim&lt;/code&gt; picker. Please see &lt;code&gt;:h telescope-file-browser.picker&lt;/code&gt; for the full set of options dedicated to the picker. Unless otherwise stated, you can pass these options either to your configuration at extension setup or picker startup. For instance, you can map &lt;code&gt;theme&lt;/code&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#remappings&#34;&gt;mappings&lt;/a&gt; as you are used to from &lt;code&gt;telescope.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- You don&#39;t need to set any of these options.&#xA;-- IMPORTANT!: this is only a showcase of how you can set default options!&#xA;require(&#34;telescope&#34;).setup {&#xA;  extensions = {&#xA;    file_browser = {&#xA;      theme = &#34;ivy&#34;,&#xA;      -- disables netrw and use telescope-file-browser in its place&#xA;      hijack_netrw = true,&#xA;      mappings = {&#xA;        [&#34;i&#34;] = {&#xA;          -- your custom insert mode mappings&#xA;        },&#xA;        [&#34;n&#34;] = {&#xA;          -- your custom normal mode mappings&#xA;        },&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;-- To get telescope-file-browser loaded and working with telescope,&#xA;-- you need to call load_extension, somewhere after setup function:&#xA;require(&#34;telescope&#34;).load_extension &#34;file_browser&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Defaults&lt;/summary&gt; &#xA; &lt;p&gt;Non-primative options are commented out. See &lt;code&gt;:h telescope-file-browser.picker.file_browser()&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local fb_actions = require &#34;telescope._extensions.file_browser.actions&#34;&#xA;&#xA;require(&#34;telescope&#34;).setup {&#xA;  extensions = {&#xA;    file_browser = {&#xA;      -- path&#xA;      -- cwd&#xA;      cwd_to_path = false,&#xA;      grouped = false,&#xA;      files = true,&#xA;      add_dirs = true,&#xA;      depth = 1,&#xA;      auto_depth = false,&#xA;      select_buffer = false,&#xA;      hidden = { file_browser = false, folder_browser = false },&#xA;      -- respect_gitignore&#xA;      -- browse_files&#xA;      -- browse_folders&#xA;      hide_parent_dir = false,&#xA;      collapse_dirs = false,&#xA;      prompt_path = false,&#xA;      quiet = false,&#xA;      dir_icon = &#34;&#34;,&#xA;      dir_icon_hl = &#34;Default&#34;,&#xA;      display_stat = { date = true, size = true, mode = true },&#xA;      hijack_netrw = false,&#xA;      use_fd = true,&#xA;      git_status = true,&#xA;      mappings = {&#xA;        [&#34;i&#34;] = {&#xA;          [&#34;&amp;lt;A-c&amp;gt;&#34;] = fb_actions.create,&#xA;          [&#34;&amp;lt;S-CR&amp;gt;&#34;] = fb_actions.create_from_prompt,&#xA;          [&#34;&amp;lt;A-r&amp;gt;&#34;] = fb_actions.rename,&#xA;          [&#34;&amp;lt;A-m&amp;gt;&#34;] = fb_actions.move,&#xA;          [&#34;&amp;lt;A-y&amp;gt;&#34;] = fb_actions.copy,&#xA;          [&#34;&amp;lt;A-d&amp;gt;&#34;] = fb_actions.remove,&#xA;          [&#34;&amp;lt;C-o&amp;gt;&#34;] = fb_actions.open,&#xA;          [&#34;&amp;lt;C-g&amp;gt;&#34;] = fb_actions.goto_parent_dir,&#xA;          [&#34;&amp;lt;C-e&amp;gt;&#34;] = fb_actions.goto_home_dir,&#xA;          [&#34;&amp;lt;C-w&amp;gt;&#34;] = fb_actions.goto_cwd,&#xA;          [&#34;&amp;lt;C-t&amp;gt;&#34;] = fb_actions.change_cwd,&#xA;          [&#34;&amp;lt;C-f&amp;gt;&#34;] = fb_actions.toggle_browser,&#xA;          [&#34;&amp;lt;C-h&amp;gt;&#34;] = fb_actions.toggle_hidden,&#xA;          [&#34;&amp;lt;C-s&amp;gt;&#34;] = fb_actions.toggle_all,&#xA;          [&#34;&amp;lt;bs&amp;gt;&#34;] = fb_actions.backspace,&#xA;        },&#xA;        [&#34;n&#34;] = {&#xA;          [&#34;c&#34;] = fb_actions.create,&#xA;          [&#34;r&#34;] = fb_actions.rename,&#xA;          [&#34;m&#34;] = fb_actions.move,&#xA;          [&#34;y&#34;] = fb_actions.copy,&#xA;          [&#34;d&#34;] = fb_actions.remove,&#xA;          [&#34;o&#34;] = fb_actions.open,&#xA;          [&#34;g&#34;] = fb_actions.goto_parent_dir,&#xA;          [&#34;e&#34;] = fb_actions.goto_home_dir,&#xA;          [&#34;w&#34;] = fb_actions.goto_cwd,&#xA;          [&#34;t&#34;] = fb_actions.change_cwd,&#xA;          [&#34;f&#34;] = fb_actions.toggle_browser,&#xA;          [&#34;h&#34;] = fb_actions.toggle_hidden,&#xA;          [&#34;s&#34;] = fb_actions.toggle_all,&#xA;        },&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;telescope-file-browser&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_keymap(&#xA;  &#34;n&#34;,&#xA;  &#34;&amp;lt;space&amp;gt;fb&#34;,&#xA;  &#34;:Telescope file_browser&amp;lt;CR&amp;gt;&#34;,&#xA;  { noremap = true }&#xA;)&#xA;&#xA;-- open file_browser with the path of the current buffer&#xA;vim.api.nvim_set_keymap(&#xA;  &#34;n&#34;,&#xA;  &#34;&amp;lt;space&amp;gt;fb&#34;,&#xA;  &#34;:Telescope file_browser path=%:p:h select_buffer=true&amp;lt;CR&amp;gt;&#34;,&#xA;  { noremap = true }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can also access the picker as a function via &lt;code&gt;require &#34;telescope&#34;.extensions.file_browser.file_browser&lt;/code&gt; natively in lua.&lt;/p&gt; &#xA;&lt;h2&gt;Mappings&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;telescope-file-browser.nvim&lt;/code&gt; comes with a lot of default mappings for discoverability. You can use &lt;code&gt;telescope&lt;/code&gt;&#39;s &lt;code&gt;which_key&lt;/code&gt; (insert mode: &lt;code&gt;&amp;lt;C-/&amp;gt;&lt;/code&gt;, normal mode: &lt;code&gt;?&lt;/code&gt;) to list mappings attached to your picker.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;path&lt;/code&gt; denotes the folder the &lt;code&gt;file_browser&lt;/code&gt; is currently in&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fb_actions&lt;/code&gt; refers to the table of provided &lt;code&gt;telescope-file-browser.actions&lt;/code&gt; accessible via &lt;code&gt;require &#34;telescope&#34;.extensions.file_browser.actions&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Insert / Normal&lt;/th&gt; &#xA;   &lt;th&gt;fb_actions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;A-c&amp;gt;/c&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;create&lt;/td&gt; &#xA;   &lt;td&gt;Create file/folder at current &lt;code&gt;path&lt;/code&gt; (trailing path separator creates folder)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-CR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;create_from_prompt&lt;/td&gt; &#xA;   &lt;td&gt;Create and open file/folder from prompt (trailing path separator creates folder)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;A-r&amp;gt;/r&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;rename&lt;/td&gt; &#xA;   &lt;td&gt;Rename multi-selected files/folders&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;A-m&amp;gt;/m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;move&lt;/td&gt; &#xA;   &lt;td&gt;Move multi-selected files/folders to current &lt;code&gt;path&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;A-y&amp;gt;/y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;copy&lt;/td&gt; &#xA;   &lt;td&gt;Copy (multi-)selected files/folders to current &lt;code&gt;path&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;A-d&amp;gt;/d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;remove&lt;/td&gt; &#xA;   &lt;td&gt;Delete (multi-)selected files/folders&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-o&amp;gt;/o&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open&lt;/td&gt; &#xA;   &lt;td&gt;Open file/folder with default system application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-g&amp;gt;/g&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;goto_parent_dir&lt;/td&gt; &#xA;   &lt;td&gt;Go to parent directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-e&amp;gt;/e&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;goto_home_dir&lt;/td&gt; &#xA;   &lt;td&gt;Go to home directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-w&amp;gt;/w&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;goto_cwd&lt;/td&gt; &#xA;   &lt;td&gt;Go to current working directory (cwd)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-t&amp;gt;/t&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change_cwd&lt;/td&gt; &#xA;   &lt;td&gt;Change nvim&#39;s cwd to selected folder/file(parent)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-f&amp;gt;/f&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;toggle_browser&lt;/td&gt; &#xA;   &lt;td&gt;Toggle between file and folder browser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-h&amp;gt;/h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;toggle_hidden&lt;/td&gt; &#xA;   &lt;td&gt;Toggle hidden files/folders&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-s&amp;gt;/s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;toggle_all&lt;/td&gt; &#xA;   &lt;td&gt;Toggle all entries ignoring &lt;code&gt;./&lt;/code&gt; and &lt;code&gt;../&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;see &lt;code&gt;telescope.nvim&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle selection and move to next selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;see &lt;code&gt;telescope.nvim&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle selection and move to prev selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;bs&amp;gt;/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;backspace&lt;/td&gt; &#xA;   &lt;td&gt;With an empty prompt, goes to parent dir. Otherwise acts normally&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;fb_actions.create_from_prompt&lt;/code&gt; requires that your terminal recognizes these keycodes (e.g. kitty). See &lt;code&gt;:h tui-input&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h4&gt;Remappings&lt;/h4&gt; &#xA;&lt;p&gt;As part of the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope-file-browser.nvim/master/#setup-and-configuration&#34;&gt;setup&lt;/a&gt;, you can remap actions as you like. The default mappings can also be found in this &lt;a href=&#34;https://github.com/nvim-telescope/telescope-file-browser.nvim/raw/master/lua/telescope/_extensions/file_browser.lua&#34;&gt;file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local fb_actions = require &#34;telescope&#34;.extensions.file_browser.actions&#xA;-- mappings in file_browser extension of telescope.setup&#xA;...&#xA;      mappings = {&#xA;        [&#34;i&#34;] = {&#xA;          -- remap to going to home directory&#xA;          [&#34;&amp;lt;C-h&amp;gt;&#34;] = fb_actions.goto_home_dir&#xA;          [&#34;&amp;lt;C-x&amp;gt;&#34;] = function(prompt_bufnr)&#xA;            -- your custom function&#xA;          end&#xA;        },&#xA;        [&#34;n&#34;] = {&#xA;          -- unmap toggling `fb_actions.toggle_browser`&#xA;          f = false,&#xA;        },&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation of &lt;code&gt;telescope-file-browser&lt;/code&gt; can be be accessed from within Neovim via:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Topic&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Vimdoc&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Comment&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Introduction&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:h telescope-file-browser.nvim&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Picker options&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:h telescope-file-browser.picker.file_browser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;For &lt;code&gt;extension&lt;/code&gt; setup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Actions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:h telescope-file-browser.actions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Explore mappable actions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Finders&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:h telescope-file-browser.finders&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lower level for customization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The documentation can be easily explored via &lt;code&gt;:Telescope help_tags&lt;/code&gt;. Search for &lt;code&gt;fb_actions&lt;/code&gt;, for instance, nicely lists available actions from within vimdocs. Very much recommended!&lt;/p&gt; &#xA;&lt;p&gt;Please make sure to consult the docs prior to raising issues for asking questions.&lt;/p&gt; &#xA;&lt;h2&gt;Workflow&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;telescope-file-browser.nvim&lt;/code&gt; unifies a &lt;code&gt;file_browser&lt;/code&gt; and a &lt;code&gt;folder_browser&lt;/code&gt; into a single &lt;a href=&#34;https://github.com/nvim-telescope/telescope-file-browser.nvim/raw/master/lua/telescope/_extensions/file_browser/finders.lua&#34;&gt;finder&lt;/a&gt; that can be toggled between:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;file_browser&lt;/code&gt;: finds files and folders in the (currently) selected folder (denoted as &lt;code&gt;path&lt;/code&gt;, default: &lt;code&gt;cwd&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;folder_browser&lt;/code&gt;: swiftly fuzzy find folders from &lt;code&gt;cwd&lt;/code&gt; downwards to switch folders for the &lt;code&gt;file_browser&lt;/code&gt; (i.e. set &lt;code&gt;path&lt;/code&gt; to selected folder)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Within a single session, &lt;code&gt;path&lt;/code&gt; always refers to the folder the &lt;code&gt;file_browser&lt;/code&gt; is currently in and changes by selecting folders from within the &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;folder_browser&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to open the &lt;code&gt;file_browser&lt;/code&gt; from within the folder of your current buffer, you should pass &lt;code&gt;path = &#34;%:p:h&#34;&lt;/code&gt; to the &lt;code&gt;opts&lt;/code&gt; table of the picker (Vimscript: &lt;code&gt;:Telescope file_browser path=%:p:h&lt;/code&gt;) or to the extension setup configuration. Strings passed to &lt;code&gt;path&lt;/code&gt; or &lt;code&gt;cwd&lt;/code&gt; are expanded automatically.&lt;/p&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;folder_browser&lt;/code&gt; always launches from &lt;code&gt;cwd&lt;/code&gt;, but it can be configured to launch from &lt;code&gt;path&lt;/code&gt; via passing the &lt;code&gt;cwd_to_path = true&lt;/code&gt; to picker &lt;code&gt;opts&lt;/code&gt; table or at extension setup. The former corresponds to a more project-centric file browser workflow, whereas the latter typically facilitates file and folder browsing across the entire file system.&lt;/p&gt; &#xA;&lt;p&gt;In practice, it mostly affects how you navigate the file system in multi-hop scenarios, for instance, when moving files from varying folders into a separate folder. The default works well in projects from which the &lt;code&gt;folder_browser&lt;/code&gt; can easily reach any folder. &lt;code&gt;cwd_to_path = true&lt;/code&gt; would possibly require returning to parent directories or &lt;code&gt;cwd&lt;/code&gt; intermittently. However, if you move deeply through the file system, launching the &lt;code&gt;folder_browser&lt;/code&gt; from &lt;code&gt;cwd&lt;/code&gt; every time is tedious. Hence, it can be configured to follow &lt;code&gt;path&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;In general, &lt;code&gt;telescope-file-browser.nvim&lt;/code&gt; intends to enable any workflow without comprise via opting in as virtually any component can be overriden.&lt;/p&gt; &#xA;&lt;h2&gt;Multi-Selections&lt;/h2&gt; &#xA;&lt;p&gt;Multiple files and directories can be selected at the same time using default bindings (&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt;) from &lt;code&gt;telescope.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;One distinct difference to &lt;code&gt;telescope.nvim&lt;/code&gt; is that multi-selections are preserved between browsers.&lt;/p&gt; &#xA;&lt;p&gt;Hence, whenever you (de-)select a file or folder within &lt;code&gt;{file, folder}_browser&lt;/code&gt;, respectively, this change persists across browsers (in a single session).&lt;/p&gt; &#xA;&lt;h2&gt;File System Operations&lt;/h2&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;path&lt;/code&gt; corresponds to the folder the &lt;code&gt;file_browser&lt;/code&gt; is currently in.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Batch renaming or moving files with path inter-dependencies are not resolved! For instance, moving a folder somewhere while moving another file into the original folder in later order within same action will fail.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Action (incl. GIF)&lt;/th&gt; &#xA;   &lt;th&gt;Docs&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-file-browser.nvim/issues/53#issuecomment-1010221098&#34;&gt;creation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:h telescope-file-browser.actions.create&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create file or folder (with trailing OS separator) at &lt;code&gt;path&lt;/code&gt; (&lt;code&gt;file_browser&lt;/code&gt;) or at selected directory (&lt;code&gt;folder_browser&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-file-browser.nvim/issues/53#issuecomment-1010298556&#34;&gt;copying&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:h telescope-file-browser.actions.copy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supports copying current selection &amp;amp; multi-selections to &lt;code&gt;path&lt;/code&gt; (&lt;code&gt;file_browser&lt;/code&gt;) or selected directory (&lt;code&gt;folder_browser&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-file-browser.nvim/issues/53#issuecomment-1010301465&#34;&gt;moving&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:h telescope-file-browser.actions.move&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move multi-selected files to &lt;code&gt;path&lt;/code&gt; (&lt;code&gt;file_browser&lt;/code&gt;) or selected directory (&lt;code&gt;folder_browser&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-file-browser.nvim/issues/53#issuecomment-1010315578&#34;&gt;removing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:h telescope-file-browser.actions.remove&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove (multi-)selected files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-file-browser.nvim/issues/53#issuecomment-1010323053&#34;&gt;renaming&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:h telescope-file-browser.actions.rename&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rename (multi-)selected files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/nvim-telescope/telescope-file-browser.nvim/raw/master/lua/telescope/_extensions/file_browser/actions.lua&#34;&gt;fb_actions&lt;/a&gt; for a list of native actions and inspiration on how to write your own custom action. As additional reference, &lt;code&gt;plenary&lt;/code&gt;&#39;s &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim/raw/master/lua/plenary/path.lua&#34;&gt;Path&lt;/a&gt; library powers a lot of the built-in actions.&lt;/p&gt; &#xA;&lt;p&gt;For more information on &lt;code&gt;telescope&lt;/code&gt; actions and remappings, see also the &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim#default-mappings&#34;&gt;upstream documentation&lt;/a&gt; and associated vimdocs at &lt;code&gt;:h telescope.defaults.mappings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additional information can also be found in &lt;code&gt;telescope&lt;/code&gt;&#39;s &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/raw/master/developers.md&#34;&gt;developer documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Exports&lt;/h2&gt; &#xA;&lt;p&gt;The extension exports the following attributes via &lt;code&gt;:lua require &#34;telescope&#34;.extensions.file_browser&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Export&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file_browser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;main picker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;actions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;file browser actions for e.g. remapping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;finder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;file, folder, and unified finder for user customization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;_picker&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unconfigured equivalent of &lt;code&gt;file_browser&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Roadmap &amp;amp; Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please see the associated &lt;a href=&#34;https://github.com/nvim-telescope/telescope-file-browser.nvim/issues/3&#34;&gt;issue&lt;/a&gt; on more immediate open &lt;code&gt;TODOs&lt;/code&gt; for &lt;code&gt;telescope-file-browser.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;That said, the primary work surrounds on enabling users to tailor the extension to their individual workflow, primarily through opting in and possibly overriding specific components.&lt;/p&gt;</summary>
  </entry>
</feed>