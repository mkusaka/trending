<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-28T01:39:54Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-pack/nvim-spectre</title>
    <updated>2024-04-28T01:39:54Z</updated>
    <id>tag:github.com,2024-04-28:/nvim-pack/nvim-spectre</id>
    <link href="https://github.com/nvim-pack/nvim-spectre" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find the enemy and replace them with dark power.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-spectre&lt;/h1&gt; &#xA;&lt;p&gt;A search panel for neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spectre&lt;/strong&gt; &lt;strong&gt;find the enemy and replace them with dark power.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/windwp/nvim-spectre/wiki/assets/demospectre.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Use Spectre?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use regex in search&lt;/li&gt; &#xA; &lt;li&gt;It can filter search by path glob (filetype)&lt;/li&gt; &#xA; &lt;li&gt;It only searches when you leave &lt;strong&gt;Insert Mode&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use one buffer and you can edit or move&lt;/li&gt; &#xA; &lt;li&gt;A tool to replace text on project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;nvim-pack/nvim-spectre&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also need to install the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;BurntSushi/ripgrep&lt;/a&gt; (finder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;devicons&lt;/a&gt; (icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/sed/&#34;&gt;sed&lt;/a&gt; (replace tool)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MacOs&lt;/h3&gt; &#xA;&lt;p&gt;You may need run &lt;code&gt;brew install gnu-sed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;S&#39;, &#39;&amp;lt;cmd&amp;gt;lua require(&#34;spectre&#34;).toggle()&amp;lt;CR&amp;gt;&#39;, {&#xA;    desc = &#34;Toggle Spectre&#34;&#xA;})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;sw&#39;, &#39;&amp;lt;cmd&amp;gt;lua require(&#34;spectre&#34;).open_visual({select_word=true})&amp;lt;CR&amp;gt;&#39;, {&#xA;    desc = &#34;Search current word&#34;&#xA;})&#xA;vim.keymap.set(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;sw&#39;, &#39;&amp;lt;esc&amp;gt;&amp;lt;cmd&amp;gt;lua require(&#34;spectre&#34;).open_visual()&amp;lt;CR&amp;gt;&#39;, {&#xA;    desc = &#34;Search current word&#34;&#xA;})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;sp&#39;, &#39;&amp;lt;cmd&amp;gt;lua require(&#34;spectre&#34;).open_file_search({select_word=true})&amp;lt;CR&amp;gt;&#39;, {&#xA;    desc = &#34;Search on current file&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use command: &lt;code&gt;:Spectre&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Warnings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Always commit your files before you replace text. &lt;code&gt;nvim-spectre&lt;/code&gt; does not support undo directly.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t use your crazy vim skills to edit result text or UI or you may encounter strange behaviour.&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;dd&lt;/code&gt; to toggle result items.&lt;/li&gt; &#xA; &lt;li&gt;You need to use &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; not &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; to leave insert mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Regex Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default regex uses vim&#39;s &lt;strong&gt;magic mode&lt;/strong&gt; &lt;code&gt;\v&lt;/code&gt; and &lt;strong&gt;no-ignore-case&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It has different regex syntax compared to the &lt;code&gt;rg&lt;/code&gt; command and replace command &lt;code&gt;sed&lt;/code&gt; so be careful when replacing text.&lt;/li&gt; &#xA; &lt;li&gt;It has a different highlighting result because I use vim regex to highlight text so be careful but you can try to replace.&lt;/li&gt; &#xA; &lt;li&gt;If possible, we recommend building and using rust oxi engine to replace.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Replace&lt;/h2&gt; &#xA;&lt;p&gt;You can replace groups with &lt;code&gt;\0-9&lt;/code&gt; similar to vim and sed, if you run a replace command and don&#39;t see the change you may need to reload file with &lt;code&gt;:e&lt;/code&gt; because &lt;code&gt;sed&lt;/code&gt; is replace outside vim.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;spectre&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; Change any settings if you don&#39;t like them. **Don&#39;t just copy all** as settings may change as the plugin is updated so it may be better use the default settings. &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;spectre&#39;).setup({&#xA;&#xA;  color_devicons = true,&#xA;  open_cmd = &#39;vnew&#39;,&#xA;  live_update = false, -- auto execute search again when you write to any file in vim&#xA;  lnum_for_results = true, -- show line number for search/replace results&#xA;  line_sep_start = &#39;┌-----------------------------------------&#39;,&#xA;  result_padding = &#39;¦  &#39;,&#xA;  line_sep       = &#39;└-----------------------------------------&#39;,&#xA;  highlight = {&#xA;      ui = &#34;String&#34;,&#xA;      search = &#34;DiffChange&#34;,&#xA;      replace = &#34;DiffDelete&#34;&#xA;  },&#xA;  mapping={&#xA;    [&#39;tab&#39;] = {&#xA;        map = &#39;&amp;lt;Tab&amp;gt;&#39;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).tab()&amp;lt;cr&amp;gt;&#34;,&#xA;        desc = &#39;next query&#39;&#xA;    },&#xA;    [&#39;shift-tab&#39;] = {&#xA;        map = &#39;&amp;lt;S-Tab&amp;gt;&#39;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).tab_shift()&amp;lt;cr&amp;gt;&#34;,&#xA;        desc = &#39;previous query&#39;&#xA;    },&#xA;    [&#39;toggle_line&#39;] = {&#xA;        map = &#34;dd&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).toggle_line()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;toggle item&#34;&#xA;    },&#xA;    [&#39;enter_file&#39;] = {&#xA;        map = &#34;&amp;lt;cr&amp;gt;&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).select_entry()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;open file&#34;&#xA;    },&#xA;    [&#39;send_to_qf&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;q&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).send_to_qf()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;send all items to quickfix&#34;&#xA;    },&#xA;    [&#39;replace_cmd&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;c&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).replace_cmd()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;input replace command&#34;&#xA;    },&#xA;    [&#39;show_option_menu&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;o&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).show_options()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;show options&#34;&#xA;    },&#xA;    [&#39;run_current_replace&#39;] = {&#xA;      map = &#34;&amp;lt;leader&amp;gt;rc&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).run_current_replace()&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;replace current line&#34;&#xA;    },&#xA;    [&#39;run_replace&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;R&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).run_replace()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;replace all&#34;&#xA;    },&#xA;    [&#39;change_view_mode&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;v&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_view()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;change result view mode&#34;&#xA;    },&#xA;    [&#39;change_replace_sed&#39;] = {&#xA;      map = &#34;trs&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_engine_replace(&#39;sed&#39;)&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;use sed to replace&#34;&#xA;    },&#xA;    [&#39;change_replace_oxi&#39;] = {&#xA;      map = &#34;tro&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_engine_replace(&#39;oxi&#39;)&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;use oxi to replace&#34;&#xA;    },&#xA;    [&#39;toggle_live_update&#39;]={&#xA;      map = &#34;tu&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).toggle_live_update()&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;update when vim writes to file&#34;&#xA;    },&#xA;    [&#39;toggle_ignore_case&#39;] = {&#xA;      map = &#34;ti&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_options(&#39;ignore-case&#39;)&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;toggle ignore case&#34;&#xA;    },&#xA;    [&#39;toggle_ignore_hidden&#39;] = {&#xA;      map = &#34;th&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_options(&#39;hidden&#39;)&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;toggle search hidden&#34;&#xA;    },&#xA;    [&#39;resume_last_search&#39;] = {&#xA;      map = &#34;&amp;lt;leader&amp;gt;l&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).resume_last_search()&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;repeat last search&#34;&#xA;    },&#xA;    -- you can put your mapping here it only use normal mode&#xA;  },&#xA;  find_engine = {&#xA;    -- rg is map with finder_cmd&#xA;    [&#39;rg&#39;] = {&#xA;      cmd = &#34;rg&#34;,&#xA;      -- default args&#xA;      args = {&#xA;        &#39;--pcre2&#39;&#xA;        &#39;--color=never&#39;,&#xA;        &#39;--no-heading&#39;,&#xA;        &#39;--with-filename&#39;,&#xA;        &#39;--line-number&#39;,&#xA;        &#39;--column&#39;,&#xA;      } ,&#xA;      options = {&#xA;        [&#39;ignore-case&#39;] = {&#xA;          value= &#34;--ignore-case&#34;,&#xA;          icon=&#34;[I]&#34;,&#xA;          desc=&#34;ignore case&#34;&#xA;        },&#xA;        [&#39;hidden&#39;] = {&#xA;          value=&#34;--hidden&#34;,&#xA;          desc=&#34;hidden file&#34;,&#xA;          icon=&#34;[H]&#34;&#xA;        },&#xA;        -- you can put any rg search option you want here it can toggle with&#xA;        -- show_option function&#xA;      }&#xA;    },&#xA;    [&#39;ag&#39;] = {&#xA;      cmd = &#34;ag&#34;,&#xA;      args = {&#xA;        &#39;--vimgrep&#39;,&#xA;        &#39;-s&#39;&#xA;      } ,&#xA;      options = {&#xA;        [&#39;ignore-case&#39;] = {&#xA;          value= &#34;-i&#34;,&#xA;          icon=&#34;[I]&#34;,&#xA;          desc=&#34;ignore case&#34;&#xA;        },&#xA;        [&#39;hidden&#39;] = {&#xA;          value=&#34;--hidden&#34;,&#xA;          desc=&#34;hidden file&#34;,&#xA;          icon=&#34;[H]&#34;&#xA;        },&#xA;      },&#xA;    },&#xA;  },&#xA;  replace_engine={&#xA;      [&#39;sed&#39;]={&#xA;          cmd = &#34;sed&#34;,&#xA;          args = nil,&#xA;          options = {&#xA;            [&#39;ignore-case&#39;] = {&#xA;              value= &#34;--ignore-case&#34;,&#xA;              icon=&#34;[I]&#34;,&#xA;              desc=&#34;ignore case&#34;&#xA;            },&#xA;          }&#xA;      },&#xA;      -- call rust code by nvim-oxi to replace&#xA;      [&#39;oxi&#39;] = {&#xA;        cmd = &#39;oxi&#39;,&#xA;        args = {},&#xA;        options = {&#xA;          [&#39;ignore-case&#39;] = {&#xA;            value = &#34;i&#34;,&#xA;            icon = &#34;[I]&#34;,&#xA;            desc = &#34;ignore case&#34;&#xA;          },&#xA;        }&#xA;      },&#xA;      [&#39;sd&#39;] = {&#xA;        cmd = &#34;sd&#34;,&#xA;        options = { },&#xA;      },&#xA;  },&#xA;  default = {&#xA;      find = {&#xA;          --pick one of item in find_engine&#xA;          cmd = &#34;rg&#34;,&#xA;          options = {&#34;ignore-case&#34;}&#xA;      },&#xA;      replace={&#xA;          --pick one of item in replace_engine&#xA;          cmd = &#34;sed&#34;&#xA;      }&#xA;  },&#xA;  replace_vim_cmd = &#34;cdo&#34;,&#xA;  is_open_target_win = true, --open file on opener window&#xA;  is_insert_mode = false,  -- start open panel on is_insert_mode&#xA;  is_block_ui_break = false -- mapping backspace and enter key to avoid ui break&#xA;  open_template      = {&#xA;    -- an template to use on open function&#xA;    -- see the &#39;custom function&#39; section below to learn how to configure the template&#xA;    -- { search_text = &#39;text1&#39;, replace_text = &#39;&#39;, path = &#34;&#34; }&#xA;  }&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Custom Functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- if you want to get items from spectre panel you can use some of the&#xA;-- following functions to get data from spectre.&#xA;require(&#39;spectre.actions&#39;).get_current_entry()&#xA;require(&#39;spectre.actions&#39;).get_all_entries()&#xA;require(&#39;spectre.actions&#39;).get_state()&#xA;&#xA;-- write your custom open function&#xA;require(&#39;spectre&#39;).open({&#xA;  is_insert_mode = true,&#xA;  -- the directory where the search tool will be started in&#xA;  cwd = &#34;~/.config/nvim&#34;,&#xA;  search_text=&#34;test&#34;,&#xA;  replace_text=&#34;test&#34;,&#xA;  -- the pattern of files to consider for searching&#xA;  path=&#34;lua/**/*.lua&#34;,&#xA;  -- the directories or files to search in&#xA;  search_paths = {&#34;lua/&#34;, &#34;plugin/&#34;},&#xA;  is_close = false, -- close an exists instance of spectre and open new&#xA;})&#xA;-- you can use all variables above on command line&#xA;-- for example: Spectre % is_insert_mode=true cwd=~/.config/nvim&#xA;-- in this example `%` will expand to current file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Search paths&lt;/h3&gt; &#xA;&lt;p&gt;By default, searching is performed in the current working directory, which can also be customized using the &lt;code&gt;cwd&lt;/code&gt; option in the example above.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; option limits the search only to the files matching the provided pattern. Note, however, that even if you provide the &lt;code&gt;path&lt;/code&gt;, all files in the &lt;code&gt;cwd&lt;/code&gt; still need to be listed, and this could be quite slow if &lt;code&gt;cwd&lt;/code&gt; is a large directory.&lt;/p&gt; &#xA;&lt;p&gt;To limit the search paths further, you can also provide the &lt;code&gt;search_paths&lt;/code&gt; option. This is the list of directories or files to search in, regardless of the &lt;code&gt;cwd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Replace Method&lt;/h2&gt; &#xA;&lt;p&gt;There are three replace methods &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;oxi&lt;/code&gt; and &lt;code&gt;sd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sed&lt;/th&gt; &#xA;   &lt;th&gt;oxi&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;group number by &#39;\0&#39;&lt;/td&gt; &#xA;   &lt;td&gt;group number by &#39;${0}&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;use vim to highlight on UI&lt;/td&gt; &#xA;   &lt;td&gt;use rust to highlight on UI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;use sed to replace&lt;/td&gt; &#xA;   &lt;td&gt;use rust to replace&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;run sed command&lt;/td&gt; &#xA;   &lt;td&gt;call rust code directly by nvim-oxi&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Install &lt;code&gt;oxi&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;you will need to install &lt;code&gt;cargo&lt;/code&gt; and run the command: &lt;a href=&#34;https://raw.githubusercontent.com/nvim-pack/nvim-spectre/master/build.sh&#34;&gt;build.sh&lt;/a&gt; &lt;a href=&#34;https://github.com/noib3/nvim-oxi&#34;&gt;nvim-oxi&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;set default replace command to &lt;code&gt;&#34;oxi&#34;&lt;/code&gt; on &lt;code&gt;setup()&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;spectre&#39;).setup({&#xA;    default = {&#xA;        replace = {&#xA;            cmd = &#34;oxi&#34;&#xA;       }&#xA;    }&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to everyone who sponsors my projects and makes continued development and maintenance possible!&lt;/p&gt; &#xA;&lt;!-- patreon --&gt;&#xA;&lt;a href=&#34;https://github.com/t4t5&#34;&gt;&lt;img src=&#34;https://github.com/t4t5.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;!-- patreon--&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How can I add a custom status line? &lt;a href=&#34;https://github.com/windwp/windline.nvim&#34;&gt;windline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#39;windline&#39;).add_status(&#xA;        require(&#39;spectre.state_utils&#39;).status_line()&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to avoid ui break?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;spectre&#39;).setup({ is_block_ui_break = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/nvim-pack/nvim-spectre/raw/1abe23ec9b7bc3082164f4cb842d521ef70e080e/lua/spectre/init.lua#L175&#34;&gt;Spectre hardcodes some mappings in order to work correctly&lt;/a&gt;. You can remap them as described above. You are allowed to create as many mappings as you want. For name and description choose any value. &#39;map&#39; and &#39;cmd&#39; are the only important fields.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is spectre compatible with the plugin mini.animate?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Yes, but only if you set &lt;code&gt;opts = { open = { enable = false } }&lt;/code&gt; on &lt;code&gt;mini.animate&lt;/code&gt;, otherwise it will cause serious issues preventing spectre from opening/closing.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why is it called Spectre?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I wanted to call it &lt;code&gt;Search Panel&lt;/code&gt; but this name is not cool. I got the name of a hero on a game. Spectre has a skill to find enemy on global map so I use it:)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FabijanZulj/blame.nvim</title>
    <updated>2024-04-28T01:39:54Z</updated>
    <id>tag:github.com,2024-04-28:/FabijanZulj/blame.nvim</id>
    <link href="https://github.com/FabijanZulj/blame.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim fugitive style git blame plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🫵 blame.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;blame.nvim&lt;/strong&gt; is a &lt;a href=&#34;https://github.com/tpope/vim-fugitive&#34;&gt;fugitive.vim&lt;/a&gt; style git blame visualizer for Neovim.&lt;/p&gt; &#xA;&lt;p&gt;Window: &lt;img width=&#34;1499&#34; alt=&#34;window_blame_cut&#34; src=&#34;https://github.com/FabijanZulj/blame.nvim/assets/38249221/68669b29-923e-48ee-9c75-39b096e98ede&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Virtual: &lt;img width=&#34;1489&#34; alt=&#34;virtual_blame_cut&#34; src=&#34;https://github.com/FabijanZulj/blame.nvim/assets/38249221/ea70061c-09a4-45d9-9eec-41881646ae25&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Same commits are highlighted in the same color&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;FabijanZulj/blame.nvim&#34;,&#xA;  config = function()&#xA;    require(&#34;blame&#34;).setup()&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;setup() must be called&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following commands are used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BlameToggle [view]&lt;/code&gt; - Toggle the blame with provided view. If no view is provided it opens the &lt;code&gt;default&lt;/code&gt; (window) view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are two built-in views:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;window&lt;/code&gt; - fugitive style window to the left of the current window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;virtual&lt;/code&gt; - blame shown in a virtual text floated to the right&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Default config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    date_format = &#34;%d.%m.%Y&#34;,&#xA;    virtual_style = &#34;right&#34;,&#xA;    views = {&#xA;        window = window_view,&#xA;        virtual = virtual_view,&#xA;        default = window_view,&#xA;    },&#xA;    merge_consecutive = false,&#xA;    max_summary_width = 30,&#xA;    colors = nil,&#xA;    commit_detail_view = &#34;vsplit&#34;,&#xA;    format_fn = formats.commit_date_author_fn,&#xA;    mappings = {&#xA;        commit_info = &#34;i&#34;,&#xA;        stack_push = &#34;&amp;lt;TAB&amp;gt;&#34;,&#xA;        stack_pop = &#34;&amp;lt;BS&amp;gt;&#34;,&#xA;        show_commit = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;        close = { &#34;&amp;lt;esc&amp;gt;&#34;, &#34;q&#34; },&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are the fields you can configure by passing them to the &lt;code&gt;require(&#39;blame&#39;).setup({})&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;date_format&lt;/code&gt; - string - Pattern for the date&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;virtual_style&lt;/code&gt; - &#34;right_align&#34; or &#34;float&#34; - Float moves the virtual text close to the content of the file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;views&lt;/code&gt; - views that can be used when toggling blame&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge_consecutive&lt;/code&gt; - boolean - Merge consecutive blames that are from the same commit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_summary_width&lt;/code&gt; - If date_message is used, cut the summary if it excedes this number of characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;colors&lt;/code&gt; - list of RGB strings to use instead of randomly generated RGBs for highlights&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;commit_detail_view&lt;/code&gt; - string - &#34;tab&#34;|&#34;split&#34;|&#34;vsplit&#34;|&#34;current&#34; - Open commit details in a new tab, split, vsplit or current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;format_fn&lt;/code&gt; - format function that is used for processing of porcelain lines. See below for details ( built-in: &lt;code&gt;(&#34;blame.formats.default_formats&#34;).date_message&lt;/code&gt; and &lt;code&gt;(&#34;blame.formats.default_formats&#34;).commit_date_author_fn&lt;/code&gt; )&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mappings&lt;/code&gt; - custom mappings for various actions, you can pass in single or multiple mappings for an action.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;h4&gt;Blame stack&lt;/h4&gt; &#xA;&lt;p&gt;You can see the state of the file prior to selected commit using &lt;code&gt;stack_push&lt;/code&gt;(default: &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt;) and &lt;code&gt;stack_pop&lt;/code&gt; (default: &lt;code&gt;&amp;lt;BS&amp;gt;&lt;/code&gt;) mappings. In the pop-up on the right the stack is shown and you can go back and forward through the history of the file.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Details&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/FabijanZulj/blame.nvim/assets/38249221/f91bf22b-7bbe-4cdb-acac-f1c7fc993aab&#34;&gt;https://github.com/FabijanZulj/blame.nvim/assets/38249221/f91bf22b-7bbe-4cdb-acac-f1c7fc993aab&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Commit info&lt;/h4&gt; &#xA;&lt;p&gt;To see the full commit info pop-up press the &lt;code&gt;commit_info&lt;/code&gt;(default: &#39;i&#39;) mapping on the specific commit line. (press &lt;code&gt;i&lt;/code&gt; again to move into the popup window, or move cursor to close the popup)&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Details&lt;/summary&gt; &#xA; &lt;img width=&#34;1495&#34; alt=&#34;commit_info_popup&#34; src=&#34;https://github.com/FabijanZulj/blame.nvim/assets/38249221/3ece577d-3e40-457c-9457-5ccce58f94ff&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Full commit info&lt;/h4&gt; &#xA;&lt;p&gt;To see the full commit data press the &lt;code&gt;show_commit&lt;/code&gt;(default &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;) mapping on the commit line&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Details&lt;/summary&gt; &#xA; &lt;img width=&#34;1495&#34; alt=&#34;commit_info_full&#34; src=&#34;https://github.com/FabijanZulj/blame.nvim/assets/38249221/84aad831-0c0d-44fe-a38f-6a4d027070c3&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;h3&gt;Custom format function&lt;/h3&gt; &#xA;&lt;p&gt;You can provide custom format functions that get executed for every blame line and are shown in a view. By default highlight is created for each commit hash so it can be used in hl field.&lt;/p&gt; &#xA;&lt;p&gt;Signature of the function:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FormatFn fun(line_porcelain: Porcelain, config:Config, idx:integer):LineWithHl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;where LineWithHl is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---@class LineWithHl&#xA;---@field idx integer&#xA;---@field values {textValue: string, hl: string}[]&#xA;---@field format string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And Porcelain being:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---@class Porcelain&#xA;---@field author string&#xA;---@field author_email string&#xA;---@field author_time number&#xA;---@field author_tz string&#xA;---@field committer string&#xA;---@field committer_mail string&#xA;---@field committer_time number&#xA;---@field committer_tz string&#xA;---@field filename string&#xA;---@field hash string&#xA;---@field previous string&#xA;---@field summary string&#xA;---@field content string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Built in format functions are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(&#34;blame.formats.default_formats&#34;).date_message&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{commit date} {summary}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;(&#34;blame.formats.default_formats&#34;).commit_date_author_fn&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{commit hash} {commit date} {author}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Your function must return a list of values ({textValue: string, hl: string}). Those text fragments will be formatted with provided &lt;code&gt;format&lt;/code&gt; field and highlighted with the HiglightGroup given in &lt;code&gt;hl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;for more info check the implementations for &#39;date_message&#39; or &#39;commit_date_author_fn&#39;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom views&lt;/h3&gt; &#xA;&lt;p&gt;It is also possible to implement your custom view. To implement a custom view you need to implement this interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---@class BlameView&#xA;---@field new fun(self, config: Config) : BlameView&#xA;---@field open fun(self, lines: Porcelain[])&#xA;---@field is_open fun(): boolean&#xA;---@field close fun(cleanup: boolean)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add it to the config field table &lt;code&gt;views&lt;/code&gt; See &#39;blame.views.window_view&#39; and &#39;blame.views.virtual_view&#39; for examples&lt;/p&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;These user events are emitted&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BlameViewOpened&lt;/li&gt; &#xA; &lt;li&gt;BlameViewClosed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So you can do something like this: &lt;em&gt;there are some conflicts with some winbar plugins, in this case barbecue is toggled&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#34;User&#34;, {&#xA;    pattern = &#34;BlameViewOpened&#34;,&#xA;    callback = function(event)&#xA;        local blame_type = event.data&#xA;        if blame_type == &#34;window&#34; then&#xA;            require(&#34;barbecue.ui&#34;).toggle(false)&#xA;        end&#xA;    end,&#xA;})&#xA;&#xA;vim.api.nvim_create_autocmd(&#34;User&#34;, {&#xA;    pattern = &#34;BlameViewClosed&#34;,&#xA;    callback = function(event)&#xA;        local blame_type = event.data&#xA;        if blame_type == &#34;window&#34; then&#xA;            require(&#34;barbecue.ui&#34;).toggle(true)&#xA;        end&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>