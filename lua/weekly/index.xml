<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-28T02:03:32Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>projekt0n/github-nvim-theme</title>
    <updated>2023-05-28T02:03:32Z</updated>
    <id>tag:github.com,2023-05-28:/projekt0n/github-nvim-theme</id>
    <link href="https://github.com/projekt0n/github-nvim-theme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Github&#39;s Neovim themes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/assets/24286590/50a918ce-fff0-4d98-8327-e5052fc8d84f&#34; alt=&#34;github-nvim-theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/actions/workflows/neovim.yml&#34;&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/actions/workflows/neovim.yml/badge.svg?sanitize=true&#34; alt=&#34;Neovim&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notices&lt;/h2&gt; &#xA;&lt;!-- If you&#39;re interested, you can learn more about &#39;sponsor-spotlight&#39; on&#xA; https://dev.to/ful1e5/lets-give-recognition-to-those-supporting-our-work-on-github-sponsors-b00 --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://sponsor-spotlight.vercel.app/sponsor?login=ful1e5&#34; alt=&#34;shoutout-sponsors&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Subscribe to this &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/discussions/198&#34;&gt;discussion&lt;/a&gt; or &lt;code&gt;:h github-theme-changelog&lt;/code&gt; to receive updates on breaking changes and deprecations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2023-05-14&lt;/strong&gt;: This theme was major refactored with changes to Neovim support and codebase, heavily inspired by &lt;a href=&#34;https://github.com/EdenEast/nightfox.nvim&#34;&gt;nightfox.nvim&lt;/a&gt;. Credit goes to &lt;a href=&#34;https://github.com/EdenEast&#34;&gt;EdenEast&lt;/a&gt;. For older Neovim versions, use the &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/0.0.x&#34;&gt;0.0.x&lt;/a&gt; branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022-08-03&lt;/strong&gt;: Terminal and other themes have been moved to &lt;strong&gt;&lt;a href=&#34;https://github.com/projekt0n/github-theme-contrib&#34;&gt;github-theme-contrib&lt;/a&gt;&lt;/strong&gt; git repository and related code have been removed from this repository.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports the latest Neovim&amp;gt;=0.5 features like Treesitter and LSP&lt;/li&gt; &#xA; &lt;li&gt;Resembles GitHub&#39;s VSCode themes and follows &lt;a href=&#34;https://primer.style/primitives/storybook&#34;&gt;primer design guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Has Github&#39;s colorblind themes&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/#supported-plugins&#34;&gt;plugins&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/#status-lines&#34;&gt;status lines&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;And many others should &#39;just work&#39;!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Minimal inactive Vim&#39;s Default statusline&lt;/li&gt; &#xA; &lt;li&gt;Vim terminal colors&lt;/li&gt; &#xA; &lt;li&gt;Darker background for sidebar-like windows&lt;/li&gt; &#xA; &lt;li&gt;Highly configurable with template overriding&lt;/li&gt; &#xA; &lt;li&gt;Most elegant lualine theme&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/#compile&#34;&gt;Compile&lt;/a&gt; user&#39;s configuration for fast startup times&lt;/li&gt; &#xA; &lt;li&gt;Export &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/#color-lib&#34;&gt;Color&lt;/a&gt; library utility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/#interactive&#34;&gt;Interactive&lt;/a&gt; live config re-loading&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8.0 (for older version use &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/0.0.x&#34;&gt;0.0.x&lt;/a&gt; branch)&lt;/li&gt; &#xA; &lt;li&gt;True color support&lt;/li&gt; &#xA; &lt;li&gt;Undercurl terminal support (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; for MacOS: The default &lt;code&gt;terminal&lt;/code&gt; does not support &lt;code&gt;true color&lt;/code&gt;. Use either &lt;code&gt;Iterm2&lt;/code&gt; or [another] terminal that supports true color.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the theme with your preferred package manager:&lt;/p&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;projekt0n/github-nvim-theme&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with &lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;dein&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;projekt0n/github-nvim-theme&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with &lt;a href=&#34;https://github.com/k-takata/minpac&#34;&gt;minpac&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call minpac#add(&#39;projekt0n/github-nvim-theme&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Add this in your &lt;code&gt;init.lua&lt;/code&gt; or &lt;code&gt;plugins.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Install without configuration&#xA;use ({ &#39;projekt0n/github-nvim-theme&#39; })&#xA;&#xA;-- Or with configuration&#xA;use({&#xA;  &#39;projekt0n/github-nvim-theme&#39;,&#xA;  config = function()&#xA;    require(&#39;github-theme&#39;).setup({&#xA;      -- ...&#xA;    })&#xA;&#xA;    vim.cmd(&#39;colorscheme github_dark&#39;)&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Add this in your &lt;code&gt;init.lua&lt;/code&gt; or &lt;code&gt;plugins.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Install without configuration&#xA;{ &#39;projekt0n/github-nvim-theme&#39; }&#xA;&#xA;-- Or with configuration&#xA;{&#xA;  &#39;projekt0n/github-nvim-theme&#39;,&#xA;  lazy = false, -- make sure we load this during startup if it is your main colorscheme&#xA;  priority = 1000, -- make sure to load this before all the other start plugins&#xA;  config = function()&#xA;    require(&#39;github-theme&#39;).setup({&#xA;      -- ...&#xA;    })&#xA;&#xA;    vim.cmd(&#39;colorscheme github_dark&#39;)&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply set the colorscheme with the builtin command &lt;code&gt;:colorscheme&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;colorscheme github_dark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;colorscheme github_dark&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Font: &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Iosevka&#34;&gt;Iosevka Nerd Font Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terminal: &lt;a href=&#34;https://sw.kovidgoyal.net/kitty&#34;&gt;kitty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Icon: &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;StatusLine: Default (&lt;a href=&#34;https://github.com/ful1e5/dotfiles/raw/main/nvim/.config/nvim/lua/ful1e5/statusline.lua&#34;&gt;.vimrc&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;dotfiles: &lt;a href=&#34;https://github.com/ful1e5/dotfiles/tree/main/nvim/.config/nvim&#34;&gt;ful1e5/dotfiles/nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Github Dark&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;colorscheme github_dark&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/assets/24286590/3b6eda22-3406-413e-bf79-b1f5d865bf71&#34; alt=&#34;github_dark&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Github Dark Dimmed&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;colorscheme github_dark_dimmed&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/assets/24286590/3589c7d8-b35d-46d0-83e8-b3129fdcf7c4&#34; alt=&#34;github_dark_dimmed&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Github Dark High Contrast&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;colorscheme github_dark_high_contrast&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/assets/24286590/35aae15f-1acd-49dc-9a42-083ba1ec62e9&#34; alt=&#34;github_dark_high_contrast&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Github Dark Colorblind (Beta)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;colorscheme github_dark_colorblind&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/assets/24286590/6e1bb148-d69c-4372-94ae-46c7a46761fe&#34; alt=&#34;github_dark_colorblind&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Github Dark Tritanopia (Beta)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;colorscheme github_dark_tritanopia&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/assets/24286590/5d20a5b3-a5a7-4045-834f-e6f4e9ecec27&#34; alt=&#34;github_dark_tritanopia&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Github Light&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;colorscheme github_light&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/assets/24286590/9029c5a6-fa40-40ca-9138-1cef7f3a1fcd&#34; alt=&#34;github_light&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Github Light High Contrast&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;colorscheme github_light_default&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/assets/24286590/8b5a3156-d314-4f63-9bec-0824f96cafe3&#34; alt=&#34;github_light_high_contrast&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Github Light Colorblind (Beta)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;colorscheme github_light_colorblind&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/assets/24286590/49da64a9-a9ea-4e3a-834c-09466edf4165&#34; alt=&#34;github_light_colorblind&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Github Light Tritanopia (Beta)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;colorscheme github_light_tritanopia&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/assets/24286590/79a22dae-77a7-4c02-88de-0caf579ab95e&#34; alt=&#34;github_light_tritanopia&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;There is no need to call &lt;code&gt;setup&lt;/code&gt; if you don&#39;t want to change the default options and settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Default options&#xA;require(&#39;github-theme&#39;).setup({&#xA;  options = {&#xA;    -- Compiled file&#39;s destination location&#xA;    compile_path = vim.fn.stdpath(&#39;cache&#39;) .. &#39;/github-theme&#39;,&#xA;    compile_file_suffix = &#39;_compiled&#39;, -- Compiled file suffix&#xA;    hide_end_of_buffer = true, -- Hide the &#39;~&#39; character at the end of the buffer for a cleaner look&#xA;    hide_nc_statusline = true, -- Override the underline style for non-active statuslines&#xA;    transparent = false,       -- Disable setting background&#xA;    terminal_colors = true,    -- Set terminal colors (vim.g.terminal_color_*) used in `:terminal`&#xA;    dim_inactive = false,      -- Non focused panes set to alternative background&#xA;    module_default = true,     -- Default enable value for modules&#xA;    styles = {                 -- Style to be applied to different syntax groups&#xA;      comments = &#39;italic&#39;,     -- Value is any valid attr-list value `:help attr-list`&#xA;      functions = &#39;NONE&#39;,&#xA;      keywords = &#39;italic&#39;,&#xA;      variables = &#39;NONE&#39;,&#xA;      conditionals = &#39;NONE&#39;,&#xA;      constants = &#39;NONE&#39;,&#xA;      numbers = &#39;NONE&#39;,&#xA;      operators = &#39;NONE&#39;,&#xA;      strings = &#39;NONE&#39;,&#xA;      types = &#39;NONE&#39;,&#xA;    },&#xA;    inverse = {                -- Inverse highlight for different types&#xA;      match_paren = false,&#xA;      visual = false,&#xA;      search = false,&#xA;    },&#xA;    darken = {                 -- Darken floating windows and sidebar-like windows&#xA;      floats = false,&#xA;      sidebars = {&#xA;        enable = true,&#xA;        list = {},             -- Apply dark background to specific windows&#xA;      },&#xA;    },&#xA;    modules = {                -- List of various plugins and additional options&#xA;      -- ...&#xA;    },&#xA;  },&#xA;  palettes = {},&#xA;  specs = {},&#xA;  groups = {},&#xA;})&#xA;&#xA;-- setup must be called before loading&#xA;vim.cmd(&#39;colorscheme github_dark&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to change any of the default options above you only have to define the options that change. If an option is not present in your options table the default option will be used. For example if changing the styles of certain syntax is the only desired change then your options table would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;github-theme&#39;).setup({&#xA;  options = {&#xA;    styles = {&#xA;      comments = &#39;NONE&#39;,&#xA;      keywords = &#39;bold&#39;,&#xA;      types = &#39;italic,bold&#39;,&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see a detailed explanation of Github Theme&#39;s config settings consult either the builtin help &lt;code&gt;:help github-nvim-theme&lt;/code&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/Usage.md&#34;&gt;Usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;p&gt;Github Theme&#39;s modules store configuration information for various plugins and other neovim modules. To enable a module either set the module to &lt;code&gt;true&lt;/code&gt; or if the module has additional configuration information set &lt;code&gt;enable&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default modules will be enabled. To change this behaviour change &lt;code&gt;options.module_default&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To see a list of modules check, see &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/Usage.md#module&#34;&gt;Usage&lt;/a&gt; or &lt;code&gt;:help&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Customize palettes and groups&lt;/h3&gt; &#xA;&lt;p&gt;You can change the color &lt;code&gt;palette&lt;/code&gt; and the highlight &lt;code&gt;group&lt;/code&gt; of github-theme. Here is a brief example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Palettes are the base color defines of a colorscheme.&#xA;-- You can override these palettes for each colorscheme defined by github-theme.&#xA;local palettes = {&#xA;  -- Everything defined under `all` will be applied to each style.&#xA;  all = {&#xA;    -- Each palette defines these colors:&#xA;    --   black, gray, blue, green, magenta, pink, red, white, yellow, cyan&#xA;&#xA;    --&#xA;    -- These colors have 2 shades: base, and bright&#xA;    --&#xA;    -- Defining just a color defines it&#39;s base color&#xA;    red = {&#xA;      base = &#39;#ff0000&#39;&#xA;    },&#xA;  },&#xA;  github_dark = {&#xA;    -- Defining multiple shades is done by passing a table&#xA;    red = {&#xA;      base = &#39;#8e1519&#39;&#xA;      bright = &#39;#ee0000&#39;&#xA;    },&#xA;  },&#xA;  github_dark_dimmed = {&#xA;    -- A palette also defines the following:&#xA;    --   bg0, bg1, bg2, bg3, bg4, fg0, fg1, fg2, fg3, sel0, sel1, comment&#xA;    --&#xA;    -- These are the different foreground and background shades used by the theme.&#xA;    -- The base bg and fg is 1, 0 is normally the dark alternative. The others are&#xA;    -- incrementally lighter versions.&#xA;    bg1 = &#39;#444c56&#39;,&#xA;&#xA;    -- sel is different types of selection colors.&#xA;    sel0 = &#39;#adbac7&#39;, -- Popup bg, visual selection bg&#xA;    sel1 = &#39;#22272e&#39;, -- Popup sel bg, search bg&#xA;&#xA;    -- comment is the definition of the comment color.&#xA;    comment = &#39;#636e7b&#39;,&#xA;  },&#xA;}&#xA;&#xA;-- Spec&#39;s (specifications) are a mapping of palettes to logical groups that will be&#xA;-- used by the groups. Some examples of the groups that specs map would be:&#xA;--   - syntax groups (functions, types, keywords, ...)&#xA;--   - diagnostic groups (error, warning, info, hints)&#xA;--   - git groups (add, removed, changed)&#xA;--&#xA;-- You can override these just like palettes&#xA;local specs = {&#xA;  -- As with palettes, the values defined under `all` will be applied to every style.&#xA;  all = {&#xA;    syntax = {&#xA;      -- Specs allow you to define a value using either a color or template. If the string does&#xA;      -- start with `#` the string will be used as the path of the palette table. Defining just&#xA;      -- a color uses the base version of that color.&#xA;      keyword = &#39;magenta&#39;,&#xA;&#xA;      -- Adding either `.bright` will change the value&#xA;      conditional = &#39;magenta.bright&#39;,&#xA;      number = &#39;orange&#39;,&#xA;    },&#xA;    git = {&#xA;      -- A color define can also be used&#xA;      changed = &#39;#ffa261&#39;,&#xA;    },&#xA;  },&#xA;  github_dark = {&#xA;    syntax = {&#xA;      -- As with palettes, a specific style&#39;s value will be used over the `all`&#39;s value.&#xA;      operator = &#39;orange&#39;,&#xA;    },&#xA;  },&#xA;}&#xA;&#xA;-- Groups are the highlight group definitions. The keys of this table are the name of the highlight&#xA;-- groups that will be overridden. The value is a table with the following values:&#xA;--   - fg, bg, style, sp, link,&#xA;--&#xA;-- Just like `spec` groups support templates. This time the template is based on a spec object.&#xA;local groups = {&#xA;  -- As with specs and palettes, the values defined under `all` will be applied to every style.&#xA;  all = {&#xA;    -- If `link` is defined it will be applied over any other values defined&#xA;    Whitespace = { link = &#39;Comment&#39; },&#xA;&#xA;    -- Specs are used for the template. Specs have their palette&#39;s as a field that can be accessed&#xA;    IncSearch = { bg = &#39;palette.cyan&#39; },&#xA;  },&#xA;  github_dark = {&#xA;    -- As with specs and palettes, a specific style&#39;s value will be used over the `all`&#39;s value.&#xA;    PmenuSel = { bg = &#39;#73daca&#39;, fg = &#39;bg0&#39; },&#xA;  },&#xA;}&#xA;&#xA;require(&#39;github-theme&#39;).setup({ palettes = palettes, specs = specs, groups = groups })&#xA;&#xA;-- setup must be called before loading&#xA;vim.cmd(&#39;colorscheme github_dark&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To find the list of syntax highlight groups defined for vim use the help &lt;code&gt;:help group-name&lt;/code&gt; and &lt;code&gt;:help nvim-treesitter-highlights&lt;/code&gt; for treesitter. If you would also like to see how Github Theme defines these highlight groups you can see &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/raw/main/lua/github-theme/group/syntax.lua&#34;&gt;syntax.lua&lt;/a&gt; for vim&#39;s syntax and &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/raw/main/lua/github-theme/group/modules/treesitter.lua&#34;&gt;treesitter.lua&lt;/a&gt; for treesitter. These files list out all all highlight groups and have a comment describing them. Another file to note is &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/raw/main/lua/github-theme/group/editor.lua&#34;&gt;editor.lua&lt;/a&gt; which is the highlight groups responsible for how vim looks (background, cursorline, tabline, etc...).&lt;/p&gt; &#xA;&lt;p&gt;To get more information check out &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/Usage.md#configuration&#34;&gt;Usage&lt;/a&gt; or the help file &lt;code&gt;:help github-nvim-theme&lt;/code&gt; for more detailed information.&lt;/p&gt; &#xA;&lt;h3&gt;Custom template values&lt;/h3&gt; &#xA;&lt;p&gt;GitHub Theme&#39;s &lt;code&gt;palettes&lt;/code&gt; and &lt;code&gt;specs&lt;/code&gt; can be extended with your own values. This is useful for users that want to distinguish a spec value being used for multiple group definitions. This is best understood with an example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bg0&lt;/code&gt; is used as the dark alternative background color. This is used in multiple areas (non-current file, status line, normal float, etc...). If you would like to have the inactive color different then the float / statusline color you can define your own value in the &lt;code&gt;specs&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;github-theme&#39;).setup({&#xA;  palettes = {&#xA;    -- Custom duskfox with black background&#xA;    github_dark = {&#xA;      bg1 = &#39;#000000&#39;, -- Black background&#xA;      bg0 = &#39;#1d1d2b&#39;, -- Alt backgrounds (floats, statusline, ...)&#xA;      bg3 = &#39;#121820&#39;, -- 55% darkened from stock&#xA;      sel0 = &#39;#131b24&#39;, -- 55% darkened from stock&#xA;    },&#xA;  },&#xA;  specs = {&#xA;    all = {&#xA;      inactive = &#39;bg0&#39;, -- Default value for other styles&#xA;    },&#xA;    github_dark_dimmed = {&#xA;      inactive = &#39;#090909&#39;, -- Slightly lighter then black background&#xA;    },&#xA;  },&#xA;  groups = {&#xA;    all = {&#xA;      NormalNC = { fg = &#39;fg1&#39;, bg = &#39;inactive&#39; }, -- Non-current windows&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Api&lt;/h2&gt; &#xA;&lt;p&gt;Github Theme exposes some Api&#39;s and utility classes that let you fetch data from Github Theme.&lt;/p&gt; &#xA;&lt;h3&gt;Palettes&lt;/h3&gt; &#xA;&lt;p&gt;You can get the palettes used by each colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Returns a table with each colorscheme and the palette associated with it&#xA;local palettes = require(&#39;github-theme.palette&#39;).load()&#xA;&#xA;-- Returns the palette of the specified colorscheme&#xA;local palette = require(&#39;github-theme.palette&#39;).load(&#39;github_dark_dimmed&#39;)&#xA;&#xA;print(vim.inspect(palette.red))&#xA;-- {&#xA;--   base = &#39;#f47067&#39;,&#xA;--   bright = &#39;#ff938a&#39;&#xA;-- }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/Usage.md#palette&#34;&gt;Usage&lt;/a&gt; for more information on palettes.&lt;/p&gt; &#xA;&lt;h3&gt;Specs&lt;/h3&gt; &#xA;&lt;p&gt;You can get the spec used by each colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Returns a table with each colorscheme and the spec associated with it&#xA;local specs = require(&#39;github-theme.spec&#39;).load()&#xA;&#xA;-- Returns the spec of the specified colorscheme&#xA;local spec = require(&#39;github-theme.spec&#39;).load(&#39;github_light&#39;)&#xA;&#xA;print(vim.inspect(spec.git))&#xA;-- {&#xA;--   add = &#39;#1a7f37&#39;,&#xA;--   changed = &#39;#9a6700&#39;,&#xA;--   conflict = &#39;#bc4c00&#39;,&#xA;--   ignored = &#39;#6e7781&#39;,&#xA;--   removed = &#39;#d1242f&#39;&#xA;-- }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/Usage.md#spec&#34;&gt;Usage&lt;/a&gt; for more information on specs.&lt;/p&gt; &#xA;&lt;h3&gt;Color lib&lt;/h3&gt; &#xA;&lt;p&gt;Github Theme uses a color library internally to manipulate colors. You can use this library as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local palette = require(&#39;github-theme.palette&#39;).load(&#39;github_dark&#39;)&#xA;local Color = require(&#39;github-theme.lib.color&#39;)&#xA;&#xA;local bg = Color.from_hex(palette.canvas.default)&#xA;local red = Color.from_hex(&#39;#ff0000&#39;)&#xA;&#xA;-- Blend the bg with red. The blend factor is from 0 to 1&#xA;-- with 0 being full bg and 1 being full red&#xA;local red_bg = bg:blend(red, 0.2)&#xA;&#xA;print(red_bg:to_css())&#xA;-- &#39;#592b31&#39;&#xA;&#xA;-- Brighten bg by adding 10 to the value of the color as a hsv&#xA;local alt_bg = bg:brighten(10)&#xA;print(vim.inspect(alt_bg:to_hsv()))&#xA;-- {&#xA;--   hue = 212.30769230769,&#xA;--   saturation = 21.311475409836,&#xA;--   value = 33.921568627451&#xA;-- }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a lot of useful functions to manipulate and work with colors in different color spaces.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/Usage.md#color&#34;&gt;Usage&lt;/a&gt; for more information on &lt;code&gt;Color&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;p&gt;Github Theme is a highly customizable and configurable colorscheme. This does however come at the cost of complexity and execution time.&lt;/p&gt; &#xA;&lt;p&gt;Github Theme pre-computes the result of your configuration and saves the lua bytecode in a cache to be used on next load. This significantly speeds up Github theme&#39;s execution time. Changes to your configuration will be re-computed and cached automatically.&lt;/p&gt; &#xA;&lt;p&gt;By default Github theme writes the compiled results into the system&#39;s &lt;code&gt;cache&lt;/code&gt; directory. On unix this is &lt;code&gt;$XDG_CACHE_HOME/nvim/github-theme&lt;/code&gt; and on windows this is &lt;code&gt;%localappdata%\\Temp\\nvim\\github-theme&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Github Theme provides functions to work with the github-theme compiler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:GithubThemeCompile &#34; Manually call github-theme compiler to create/update compiled files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;github-theme&#39;).compile() -- lua api version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactive&lt;/h2&gt; &#xA;&lt;p&gt;Github Theme makes it easy to make changes to its config and see the results. For this Github Theme exposes the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GithubThemeInteractive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will attach an autocmd to the current buffer that executes on &lt;code&gt;BufferWritePost&lt;/code&gt;. The autocmd will clear Github Theme&#39;s internal state and re-source it&#39;s config from the newly saved file. It will then reset the colorscheme.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;Builtin lsp diagnostics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;ale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projekt0n/circles.nvim&#34;&gt;circles.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;coc.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;dap-ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;dashboard-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rickhowe/diffchar.vim&#34;&gt;diffchar.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindrets/diffview.nvim&#34;&gt;diffview.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/j-hui/fidget.nvim&#34;&gt;fidget.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nullchilly/fsread.nvim&#34;&gt;fsread.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ibhagwan/fzf-lua&#34;&gt;fzf-lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;indent-blankline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lsp-trouble.nvim&#34;&gt;lsp-trouble.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;lspsaga.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;mini.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;neo-tree.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;neogit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;nvim-bufferline.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-compe&#34;&gt;nvim-compe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-context&#34;&gt;nvim-treesitter-context&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vim-airline/vim-airline&#34;&gt;vim-airline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;vim-gitgutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;which-key.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status lines&lt;/h2&gt; &#xA;&lt;h3&gt;Lualine&lt;/h3&gt; &#xA;&lt;p&gt;Lualine checks the value of &lt;code&gt;vim.g.colors_name&lt;/code&gt; (set when using &lt;code&gt;:colorscheme&lt;/code&gt; command) to determine the theme to load. Set your colorscheme before calling setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;colorscheme github_dark&#39;)&#xA;require(&#39;lualine&#39;).setup({ ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Airline&lt;/h3&gt; &#xA;&lt;p&gt;Set your airline colorscheme with &lt;code&gt;:AirlineThemes&lt;/code&gt; vim command.&lt;/p&gt; &#xA;&lt;h2&gt;Syntax highlight groups&lt;/h2&gt; &#xA;&lt;p&gt;This section will help you determine what highlight group is being applied to a piece of syntax. These sections will output the highlight group for the value under the cursor.&lt;/p&gt; &#xA;&lt;h4&gt;Treesitter highlighting&lt;/h4&gt; &#xA;&lt;p&gt;If treesitter is the highlighting method for the language in question you can use the command: &lt;code&gt;:TSHighlightCapturesUnderCursor&lt;/code&gt;. This command comes from the treesitter &lt;a href=&#34;https://github.com/nvim-treesitter/playground#show-treesitter-and-syntax-highlight-groups-under-the-cursor&#34;&gt;playground&lt;/a&gt; plugin. Make sure you have this installed as well as &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Making &lt;code&gt;undercurls&lt;/code&gt; work properly in &lt;strong&gt;Tmux&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;To have undercurls show up and in color, add the following to your &lt;strong&gt;Tmux&lt;/strong&gt; config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Undercurl&#xA;set -g default-terminal &#39;${TERM}&#39;&#xA;set -as terminal-overrides &#39;,*:Smulx=\E[4::%p1%dm&#39;  # undercurl support&#xA;set -as terminal-overrides &#39;,*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&amp;amp;%d::%p1%{255}%&amp;amp;%d%;m&#39;  # underscore colours - needs tmux-3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Copying&lt;/h2&gt; &#xA;&lt;p&gt;This project is released under the terms of the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/LICENSE&#34;&gt;LICENCE&lt;/a&gt; for more information or see &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;opensource.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stevearc/overseer.nvim</title>
    <updated>2023-05-28T02:03:32Z</updated>
    <id>tag:github.com,2023-05-28:/stevearc/overseer.nvim</id>
    <link href="https://github.com/stevearc/overseer.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A task runner and job management plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;overseer.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A task runner and job management plugin for Neovim&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/#tutorials&#34;&gt;Tutorials&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/tutorials.md#build-a-c-file&#34;&gt;Build a C++ file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/tutorials.md#run-a-file-on-save&#34;&gt;Run a file on save&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/#guides&#34;&gt;Guides&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#custom-tasks&#34;&gt;Custom tasks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#actions&#34;&gt;Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#custom-components&#34;&gt;Custom components&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#customizing-built-in-tasks&#34;&gt;Customizing built-in tasks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#parsing-output&#34;&gt;Parsing output&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#running-tasks-sequentially&#34;&gt;Running tasks sequentially&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#vs-code-tasks&#34;&gt;VS Code tasks&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/#explanation&#34;&gt;Explanation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#task-list&#34;&gt;Task list&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#task-editor&#34;&gt;Task editor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#alternatives&#34;&gt;Alternatives&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/#third-party-integrations&#34;&gt;Third-party integrations&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#lualine&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#heirline&#34;&gt;Heirline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#neotest&#34;&gt;Neotest&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#dap&#34;&gt;DAP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#toggleterm&#34;&gt;ToggleTerm&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#session-managers&#34;&gt;Session managers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/#recipes&#34;&gt;Recipes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/recipes.md#restart-last-task&#34;&gt;Restart last task&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/recipes.md#run-shell-scripts-in-the-current-directory&#34;&gt;Run shell scripts in the current directory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/recipes.md#directory-local-tasks-with-exrc&#34;&gt;Directory-local tasks with exrc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/recipes.md#make-similar-to-vim-dispatch&#34;&gt;:Make similar to vim-dispatch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/recipes.md#asynchronous-grep-command&#34;&gt;Asynchronous :Grep command&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/#reference&#34;&gt;Reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#setup-options&#34;&gt;Setup options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#highlight-groups&#34;&gt;Highlight groups&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#lua-api&#34;&gt;Lua API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#components&#34;&gt;Components&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#strategies&#34;&gt;Strategies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#parsers&#34;&gt;Parsers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#parameters&#34;&gt;Parameters&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in support for many task frameworks (make, npm, cargo, &lt;code&gt;.vscode/tasks.json&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;Simple integration with vim.diagnostics and quickfix&lt;/li&gt; &#xA; &lt;li&gt;UI for viewing and managing tasks&lt;/li&gt; &#xA; &lt;li&gt;Quick controls for common actions (restart task, rerun on save, or user-defined functions)&lt;/li&gt; &#xA; &lt;li&gt;Extreme customizability. Very easy to attach custom logic to tasks&lt;/li&gt; &#xA; &lt;li&gt;Define and run complex multi-stage workflows&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;preLaunchTask&lt;/code&gt; when used with &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.8+ (for older versions, use the &lt;a href=&#34;https://github.com/stevearc/overseer.nvim/tree/nvim-0.7&#34;&gt;nvim-0.7 branch&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;(optional) patches for &lt;code&gt;vim.ui&lt;/code&gt; (e.g. &lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;dressing.nvim&lt;/a&gt;). Provides nicer UI for input and selection.&lt;/li&gt; &#xA; &lt;li&gt;(optional) &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;. When used with &lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;dressing.nvim&lt;/a&gt; provides best selection UI.&lt;/li&gt; &#xA; &lt;li&gt;(optional) &lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt; a nice UI for &lt;code&gt;vim.notify&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;overseer supports all the usual plugin managers&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lazy.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;stevearc/overseer.nvim&#39;,&#xA;  opts = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;packer&#39;).startup(function()&#xA;    use {&#xA;      &#39;stevearc/overseer.nvim&#39;,&#xA;      config = function() require(&#39;overseer&#39;).setup() end&#xA;    }&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Paq&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    {&#39;stevearc/overseer.nvim&#39;};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;stevearc/overseer.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dein&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;stevearc/overseer.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pathogen&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/overseer.nvim.git ~/.vim/bundle/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/overseer.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/overseer/start/overseer.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your init.lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;overseer&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get started, all you need to know is &lt;code&gt;:OverseerRun&lt;/code&gt; to select and start a task, and &lt;code&gt;:OverseerToggle&lt;/code&gt; to open the task list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/506791/189036898-05edcd62-42e7-4bbb-ace2-746b7c8c567b.mp4&#34;&gt;https://user-images.githubusercontent.com/506791/189036898-05edcd62-42e7-4bbb-ace2-746b7c8c567b.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t see any tasks from &lt;code&gt;:OverseerRun&lt;/code&gt;, it might mean that your task runner is not yet supported. There is currently support for VS Code tasks, make, npm, cargo, and some others. If yours is not supported, (&lt;a href=&#34;https://github.com/stevearc/overseer.nvim/issues/new/choose&#34;&gt;request support here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you want to define custom tasks for your project, I&#39;d recommend starting with &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/tutorials.md&#34;&gt;the tutorials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/tutorials.md#build-a-c-file&#34;&gt;Build a C++ file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/tutorials.md#run-a-file-on-save&#34;&gt;Run a file on save&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#custom-tasks&#34;&gt;Custom tasks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#template-definition&#34;&gt;Template definition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#template-providers&#34;&gt;Template providers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#actions&#34;&gt;Actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#custom-components&#34;&gt;Custom components&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#component-aliases&#34;&gt;Component aliases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#task-result&#34;&gt;Task result&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#customizing-built-in-tasks&#34;&gt;Customizing built-in tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#parsing-output&#34;&gt;Parsing output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#running-tasks-sequentially&#34;&gt;Running tasks sequentially&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/guides.md#vs-code-tasks&#34;&gt;VS Code tasks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Explanation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#architecture&#34;&gt;Architecture&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#tasks&#34;&gt;Tasks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#components&#34;&gt;Components&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#templates&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#task-list&#34;&gt;Task list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#task-editor&#34;&gt;Task editor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#alternatives&#34;&gt;Alternatives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/explanation.md#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Third-party integrations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#lualine&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#heirline&#34;&gt;Heirline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#neotest&#34;&gt;Neotest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#dap&#34;&gt;DAP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#toggleterm&#34;&gt;ToggleTerm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#session-managers&#34;&gt;Session managers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#resessionnvim&#34;&gt;resession.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/third_party.md#other-session-managers&#34;&gt;Other session managers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recipes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/recipes.md#restart-last-task&#34;&gt;Restart last task&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/recipes.md#run-shell-scripts-in-the-current-directory&#34;&gt;Run shell scripts in the current directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/recipes.md#directory-local-tasks-with-exrc&#34;&gt;Directory-local tasks with exrc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/recipes.md#make-similar-to-vim-dispatch&#34;&gt;:Make similar to vim-dispatch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/recipes.md#asynchronous-grep-command&#34;&gt;Asynchronous :Grep command&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#setup-options&#34;&gt;Setup options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#highlight-groups&#34;&gt;Highlight groups&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#lua-api&#34;&gt;Lua API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#setupopts&#34;&gt;setup(opts)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#on_setupcallback&#34;&gt;on_setup(callback)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#new_taskopts&#34;&gt;new_task(opts)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#toggleopts&#34;&gt;toggle(opts)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#openopts&#34;&gt;open(opts)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#close&#34;&gt;close()&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#list_task_bundles&#34;&gt;list_task_bundles()&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#load_task_bundlename-opts&#34;&gt;load_task_bundle(name, opts)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#save_task_bundlename-tasks-opts&#34;&gt;save_task_bundle(name, tasks, opts)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#delete_task_bundlename&#34;&gt;delete_task_bundle(name)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#list_tasksopts&#34;&gt;list_tasks(opts)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#run_templateopts-callback&#34;&gt;run_template(opts, callback)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#preload_task_cacheopts-cb&#34;&gt;preload_task_cache(opts, cb)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#clear_task_cacheopts&#34;&gt;clear_task_cache(opts)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#run_actiontask-name&#34;&gt;run_action(task, name)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#wrap_templatebase-override-default_params&#34;&gt;wrap_template(base, override, default_params)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#add_template_hookopts-hook&#34;&gt;add_template_hook(opts, hook)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#remove_template_hookopts-hook&#34;&gt;remove_template_hook(opts, hook)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#register_templatedefn&#34;&gt;register_template(defn)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#load_templatename&#34;&gt;load_template(name)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#debug_parser&#34;&gt;debug_parser()&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#components&#34;&gt;Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#strategies&#34;&gt;Strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#parsers&#34;&gt;Parsers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/overseer.nvim/master/doc/reference.md#parameters&#34;&gt;Parameters&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/506791/180620617-2b1bb0a8-5f39-4936-97c2-04c92f1e2974.mp4&#34;&gt;https://user-images.githubusercontent.com/506791/180620617-2b1bb0a8-5f39-4936-97c2-04c92f1e2974.mp4&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stevearc/oil.nvim</title>
    <updated>2023-05-28T02:03:32Z</updated>
    <id>tag:github.com,2023-05-28:/stevearc/oil.nvim</id>
    <link href="https://github.com/stevearc/oil.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim file explorer: edit your filesystem like a buffer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;oil.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/tpope/vim-vinegar&#34;&gt;vim-vinegar&lt;/a&gt; like file explorer that lets you edit your filesystem like a normal Neovim buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/506791/209727111-6b4a11f4-634a-4efa-9461-80e9717cea94.mp4&#34;&gt;https://user-images.githubusercontent.com/506791/209727111-6b4a11f4-634a-4efa-9461-80e9717cea94.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#adapters&#34;&gt;Adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.8+&lt;/li&gt; &#xA; &lt;li&gt;(optional) &lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; for file icons&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;oil.nvim supports all the usual plugin managers&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lazy.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;stevearc/oil.nvim&#39;,&#xA;  opts = {},&#xA;  -- Optional dependencies&#xA;  dependencies = { &#34;nvim-tree/nvim-web-devicons&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;packer&#39;).startup(function()&#xA;    use {&#xA;      &#39;stevearc/oil.nvim&#39;,&#xA;      config = function() require(&#39;oil&#39;).setup() end&#xA;    }&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Paq&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    {&#39;stevearc/oil.nvim&#39;};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;stevearc/oil.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dein&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;stevearc/oil.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pathogen&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/oil.nvim.git ~/.vim/bundle/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/oil.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/oil/start/oil.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your init.lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;oil&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open a directory with &lt;code&gt;nvim .&lt;/code&gt;. Use &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to open a file/directory, and &lt;code&gt;-&lt;/code&gt; to go up a directory. Otherwise, just treat it like a normal buffer and make changes as you like. Remember to &lt;code&gt;:w&lt;/code&gt; when you&#39;re done to actually perform the actions.&lt;/p&gt; &#xA;&lt;p&gt;If you want to mimic the &lt;code&gt;vim-vinegar&lt;/code&gt; method of navigating to the parent directory of a file, add this keymap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;-&#34;, require(&#34;oil&#34;).open, { desc = &#34;Open parent directory&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can open a directory with &lt;code&gt;:edit &amp;lt;path&amp;gt;&lt;/code&gt; or &lt;code&gt;:Oil &amp;lt;path&amp;gt;&lt;/code&gt;. To open oil in a floating window, do &lt;code&gt;:Oil --float &amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;oil&#34;).setup({&#xA;  -- Id is automatically added at the beginning, and name at the end&#xA;  -- See :help oil-columns&#xA;  columns = {&#xA;    &#34;icon&#34;,&#xA;    -- &#34;permissions&#34;,&#xA;    -- &#34;size&#34;,&#xA;    -- &#34;mtime&#34;,&#xA;  },&#xA;  -- Buffer-local options to use for oil buffers&#xA;  buf_options = {&#xA;    buflisted = false,&#xA;    bufhidden = &#34;hide&#34;,&#xA;  },&#xA;  -- Window-local options to use for oil buffers&#xA;  win_options = {&#xA;    wrap = false,&#xA;    signcolumn = &#34;no&#34;,&#xA;    cursorcolumn = false,&#xA;    foldcolumn = &#34;0&#34;,&#xA;    spell = false,&#xA;    list = false,&#xA;    conceallevel = 3,&#xA;    concealcursor = &#34;n&#34;,&#xA;  },&#xA;  -- Oil will take over directory buffers (e.g. `vim .` or `:e src/`&#xA;  default_file_explorer = true,&#xA;  -- Restore window options to previous values when leaving an oil buffer&#xA;  restore_win_options = true,&#xA;  -- Skip the confirmation popup for simple operations&#xA;  skip_confirm_for_simple_edits = false,&#xA;  -- Deleted files will be removed with the trash_command (below).&#xA;  delete_to_trash = false,&#xA;  -- Change this to customize the command used when deleting to trash&#xA;  trash_command = &#34;trash-put&#34;,&#xA;  -- Selecting a new/moved/renamed file or directory will prompt you to save changes first&#xA;  prompt_save_on_select_new_entry = true,&#xA;  -- Keymaps in oil buffer. Can be any value that `vim.keymap.set` accepts OR a table of keymap&#xA;  -- options with a `callback` (e.g. { callback = function() ... end, desc = &#34;&#34;, nowait = true })&#xA;  -- Additionally, if it is a string that matches &#34;actions.&amp;lt;name&amp;gt;&#34;,&#xA;  -- it will use the mapping at require(&#34;oil.actions&#34;).&amp;lt;name&amp;gt;&#xA;  -- Set to `false` to remove a keymap&#xA;  -- See :help oil-actions for a list of all available actions&#xA;  keymaps = {&#xA;    [&#34;g?&#34;] = &#34;actions.show_help&#34;,&#xA;    [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;actions.select&#34;,&#xA;    [&#34;&amp;lt;C-s&amp;gt;&#34;] = &#34;actions.select_vsplit&#34;,&#xA;    [&#34;&amp;lt;C-h&amp;gt;&#34;] = &#34;actions.select_split&#34;,&#xA;    [&#34;&amp;lt;C-t&amp;gt;&#34;] = &#34;actions.select_tab&#34;,&#xA;    [&#34;&amp;lt;C-p&amp;gt;&#34;] = &#34;actions.preview&#34;,&#xA;    [&#34;&amp;lt;C-c&amp;gt;&#34;] = &#34;actions.close&#34;,&#xA;    [&#34;&amp;lt;C-l&amp;gt;&#34;] = &#34;actions.refresh&#34;,&#xA;    [&#34;-&#34;] = &#34;actions.parent&#34;,&#xA;    [&#34;_&#34;] = &#34;actions.open_cwd&#34;,&#xA;    [&#34;`&#34;] = &#34;actions.cd&#34;,&#xA;    [&#34;~&#34;] = &#34;actions.tcd&#34;,&#xA;    [&#34;g.&#34;] = &#34;actions.toggle_hidden&#34;,&#xA;  },&#xA;  -- Set to false to disable all of the above keymaps&#xA;  use_default_keymaps = true,&#xA;  view_options = {&#xA;    -- Show files and directories that start with &#34;.&#34;&#xA;    show_hidden = false,&#xA;    -- This function defines what is considered a &#34;hidden&#34; file&#xA;    is_hidden_file = function(name, bufnr)&#xA;      return vim.startswith(name, &#34;.&#34;)&#xA;    end,&#xA;    -- This function defines what will never be shown, even when `show_hidden` is set&#xA;    is_always_hidden = function(name, bufnr)&#xA;      return false&#xA;    end,&#xA;  },&#xA;  -- Configuration for the floating window in oil.open_float&#xA;  float = {&#xA;    -- Padding around the floating window&#xA;    padding = 2,&#xA;    max_width = 0,&#xA;    max_height = 0,&#xA;    border = &#34;rounded&#34;,&#xA;    win_options = {&#xA;      winblend = 10,&#xA;    },&#xA;  },&#xA;  -- Configuration for the actions floating preview window&#xA;  preview = {&#xA;    -- Width dimensions can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;    -- min_width and max_width can be a single value or a list of mixed integer/float types.&#xA;    -- max_width = {100, 0.8} means &#34;the lesser of 100 columns or 80% of total&#34;&#xA;    max_width = 0.9,&#xA;    -- min_width = {40, 0.4} means &#34;the greater of 40 columns or 40% of total&#34;&#xA;    min_width = { 40, 0.4 },&#xA;    -- optionally define an integer/float for the exact width of the preview window&#xA;    width = nil,&#xA;    -- Height dimensions can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;    -- min_height and max_height can be a single value or a list of mixed integer/float types.&#xA;    -- max_height = {80, 0.9} means &#34;the lesser of 80 columns or 90% of total&#34;&#xA;    max_height = 0.9,&#xA;    -- min_height = {5, 0.1} means &#34;the greater of 5 columns or 10% of total&#34;&#xA;    min_height = { 5, 0.1 },&#xA;    -- optionally define an integer/float for the exact height of the preview window&#xA;    height = nil,&#xA;    border = &#34;rounded&#34;,&#xA;    win_options = {&#xA;      winblend = 0,&#xA;    },&#xA;  },&#xA;  -- Configuration for the floating progress window&#xA;  progress = {&#xA;    max_width = 0.9,&#xA;    min_width = { 40, 0.4 },&#xA;    width = nil,&#xA;    max_height = { 10, 0.9 },&#xA;    min_height = { 5, 0.1 },&#xA;    height = nil,&#xA;    border = &#34;rounded&#34;,&#xA;    minimized_border = &#34;none&#34;,&#xA;    win_options = {&#xA;      winblend = 0,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adapters&lt;/h2&gt; &#xA;&lt;p&gt;Oil does all of its filesystem interaction through an &lt;em&gt;adapter&lt;/em&gt; abstraction. In practice, this means that oil can be used to view and modify files in more places than just the local filesystem, so long as the destination has an adapter implementation.&lt;/p&gt; &#xA;&lt;p&gt;Note that file operations work &lt;em&gt;across adapters&lt;/em&gt;. This means that you can use oil to copy files to/from a remote server using the ssh adapter just as easily as you can copy files from one directory to another on your local machine.&lt;/p&gt; &#xA;&lt;h3&gt;SSH&lt;/h3&gt; &#xA;&lt;p&gt;This adapter allows you to browse files over ssh, much like netrw. To use it, simply open a buffer using the following name template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvim oil-ssh://[username@]hostname[:port]/[path]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This may look familiar. In fact, this is the same url format that netrw uses.&lt;/p&gt; &#xA;&lt;p&gt;Note that at the moment the ssh adapter does not support Windows machines, and it requires the server to have a &lt;code&gt;/bin/bash&lt;/code&gt; binary as well as standard unix commands (&lt;code&gt;rm&lt;/code&gt;, &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt;, &lt;code&gt;cp&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt;, &lt;code&gt;ln&lt;/code&gt;, &lt;code&gt;echo&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;!-- API --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#get_entry_on_linebufnr-lnum&#34;&gt;get_entry_on_line(bufnr, lnum)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#get_cursor_entry&#34;&gt;get_cursor_entry()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#discard_all_changes&#34;&gt;discard_all_changes()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#set_columnscols&#34;&gt;set_columns(cols)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#set_is_hidden_fileis_hidden_file&#34;&gt;set_is_hidden_file(is_hidden_file)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#toggle_hidden&#34;&gt;toggle_hidden()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#get_current_dir&#34;&gt;get_current_dir()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#open_floatdir&#34;&gt;open_float(dir)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#toggle_floatdir&#34;&gt;toggle_float(dir)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#opendir&#34;&gt;open(dir)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#close&#34;&gt;close()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#selectopts&#34;&gt;select(opts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#saveopts&#34;&gt;save(opts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#setupopts&#34;&gt;setup(opts)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /API --&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why &#34;oil&#34;&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; From the &lt;a href=&#34;https://github.com/tpope/vim-vinegar&#34;&gt;vim-vinegar&lt;/a&gt; README, a quote by Drew Neil:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Split windows and the project drawer go together like oil and vinegar&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Vinegar was taken. Let&#39;s be oil. Plus, I think it&#39;s pretty slick ;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why would I want to use oil vs any other plugin?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You like to use a netrw-like view to browse directories (as opposed to a file tree)&lt;/li&gt; &#xA; &lt;li&gt;AND you want to be able to edit your filesystem like a buffer&lt;/li&gt; &#xA; &lt;li&gt;AND you want to perform cross-directory actions. AFAIK there is no other plugin that does this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t need those features specifically, check out the alternatives listed below&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why write another plugin yourself instead of adding functionality to one that already exists&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Because I am a &lt;em&gt;maniac control freak&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Can oil display files as a tree view&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; No. A tree view would require a completely different methodology, necessitating a complete rewrite. I don&#39;t use tree views, so I will leave this as a plugin for someone else to write.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: What are some alternatives?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-vinegar&#34;&gt;vim-vinegar&lt;/a&gt;: The granddaddy. This made me fall in love with single-directory file browsing. I stopped using it when I encountered netrw bugs and performance issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shougo/defx.nvim&#34;&gt;defx.nvim&lt;/a&gt;: What I switched to after vim-vinegar. Much more flexible and performant, but requires python and the API is a little hard to work with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elihunter173/dirbuf.nvim&#34;&gt;dirbuf.nvim&lt;/a&gt;: The first plugin I encountered that let you edit the filesystem like a buffer. Never used it because it &lt;a href=&#34;https://github.com/elihunter173/dirbuf.nvim/issues/7&#34;&gt;can&#39;t do cross-directory edits&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tamago324/lir.nvim&#34;&gt;lir.nvim&lt;/a&gt;: What I used prior to writing this plugin. Similar to vim-vinegar, but with better Neovim integration (floating windows, lua API).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-dirvish&#34;&gt;vim-dirvish&lt;/a&gt;: Never personally used, but well-established, stable, simple directory browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trapd00r/vidir&#34;&gt;vidir&lt;/a&gt;: Never personally used, but might be the first plugin to come up with the idea of editing a directory like a buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s also file trees like &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;neo-tree&lt;/a&gt; and &lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua&#34;&gt;nvim-tree&lt;/a&gt;, but they&#39;re really a different category entirely.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: I don&#39;t need netrw anymore. How can I disable it?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Oil can fully replace netrw for local and ssh file browsing/editing, but keep in mind that netrw also supports rsync, http, ftp, and dav. If you don&#39;t need these other features, you can disable netrw with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.loaded_netrw = 1&#xA;vim.g.loaded_netrwPlugin = 1&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>