<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-08T01:43:59Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>loki79uk/FS25_UniversalAutoload</title>
    <updated>2025-06-08T01:43:59Z</updated>
    <id>tag:github.com,2025-06-08:/loki79uk/FS25_UniversalAutoload</id>
    <link href="https://github.com/loki79uk/FS25_UniversalAutoload" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mod for FS25. Please download latest release below.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FS25_UniversalAutoload&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Please get the latest release from &lt;a href=&#34;https://github.com/loki79uk/FS25_UniversalAutoload/releases&#34;&gt;https://github.com/loki79uk/FS25_UniversalAutoload/releases&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;READ THIS FIRST&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you already have a vehicle on a savegame before adding UAL, then you either need to save the settings from the shop UAL menu OR you can purchase another copy of the same vehicle to create the setting. In either case, you must then restart the save game you want to use. Note that you can do this in any savegame, the act of buying it will create a global default for the vehicle.&lt;/li&gt; &#xA; &lt;li&gt;The configuration file is updated/saved (in mod settings) when you BUY a vehicle &lt;strong&gt;OR&lt;/strong&gt; when you apply changes to a vehicle in the workshop. Changes applied from the workshop will apply only to the edited vehicle for that session, but will become the default for all vehicles of the same type after the next restart.&lt;/li&gt; &#xA; &lt;li&gt;In multiplayer games all clients can edit vehicles when they buy one, but the configuration is saved ON THE SERVER only. So the server default will be set by the last player to adjust it. As with single player, individual vehicle settings will persist for the rest of that game until the server is restarted, after that the default is applied to all vehicles of the same type.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are having issues with a vehicle not loading pallets at all then there are a few things to check&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you cant load LOGS then check that the logs are too long for you trailer. Make the zone longer or cut the logs shorter.&lt;/li&gt; &#xA; &lt;li&gt;If you do not see a loading zone with the debug display (shift-ctrl-F12) then the most likely thing is that the entry for that vehicle is corrupted in your mod settings file. Try deleting the file completely (a new one will be created), or manually delete the entry for the vehicle you are having trouble with in a text editor.&lt;/li&gt; &#xA; &lt;li&gt;It is also possible you simply don&#39;t have the trailer selected/active in game. Press &#34;G&#34; to cycle the selected implement from your tractor/truck.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;NEW FEATURES:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All pallets, big-bags and bales supported by default&lt;/li&gt; &#xA; &lt;li&gt;Automatic detection of trailer loading zones (in shop)&lt;/li&gt; &#xA; &lt;li&gt;UI to adjust size of loading zone in shop before purchase&lt;/li&gt; &#xA; &lt;li&gt;No external configuration files required!!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;TO CONFIGURE LOADING ZONES:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use middle mouse click in the shop to activate editing&lt;/li&gt; &#xA; &lt;li&gt;Right click drag to move individual faces&lt;/li&gt; &#xA; &lt;li&gt;ALT-right click drag to move opposing faces (&lt;strong&gt;use this for width&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SHIFT-right click drag to move the whole zone&lt;/li&gt; &#xA; &lt;li&gt;CTRL with any of the above for fine control&lt;/li&gt; &#xA; &lt;li&gt;SHIFT-CTRL middle mouse click to auto-calculate the zone from scratch (if you mess up)&lt;/li&gt; &#xA; &lt;li&gt;Configuration can be edited in mod settings XML (if you know what you are doing)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;KNOWN ISSUES:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Existing trailers on a savegame will not get autoload added (until restart with valid settings)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>luarocks/luarocks</title>
    <updated>2025-06-08T01:43:59Z</updated>
    <id>tag:github.com,2025-06-08:/luarocks/luarocks</id>
    <link href="https://github.com/luarocks/luarocks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LuaRocks is the package manager for the Lua programming language.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://luarocks.org&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://luarocks.github.io/luarocks/luarocks.png&#34; alt=&#34;LuaRocks&#34; width=&#34;500px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A package manager for Lua modules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/luarocks/luarocks/actions&#34;&gt;&lt;img src=&#34;https://github.com/luarocks/luarocks/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/luarocks/luarocks/tree/main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/luarocks/luarocks/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/luarocks/luarocks&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/luarocks/luarocks.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/luarocks/luarocks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Main website: &lt;a href=&#34;https://luarocks.org&#34;&gt;luarocks.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It allows you to install Lua modules as self-contained packages called &lt;em&gt;rocks&lt;/em&gt;. LuaRocks supports both local and remote repositories, and multiple local rocks trees.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;LuaRocks is free software and uses the &lt;a href=&#34;http://luarocks.org/en/License&#34;&gt;MIT license&lt;/a&gt;, the same as Lua 5.x.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GeorgesAlkhouri/nvim-aider</title>
    <updated>2025-06-08T01:43:59Z</updated>
    <id>tag:github.com,2025-06-08:/GeorgesAlkhouri/nvim-aider</id>
    <link href="https://github.com/GeorgesAlkhouri/nvim-aider" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü§ñ Seamlessly integrate Aider with Neovim for an enhanced AI-assisted coding experience!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://aider.chat&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/172139148?s=20&amp;amp;v=4&#34; alt=&#34;aider&#34;&gt;&lt;/a&gt; nvim-aider&lt;/h1&gt; &#xA;&lt;p&gt;ü§ñ Seamlessly integrate Aider with Neovim for an enhanced AI-assisted coding experience!&lt;/p&gt; &#xA;&lt;img width=&#34;1280&#34; alt=&#34;screenshot_1&#34; src=&#34;https://github.com/user-attachments/assets/5d779f73-5441-4d24-8cce-e6dfdc5bf787&#34;&gt; &#xA;&lt;img width=&#34;1280&#34; alt=&#34;screenshot_2&#34; src=&#34;https://github.com/user-attachments/assets/3c122846-ca27-42d3-8cbf-f6e5f9b10f69&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üöß This plugin is in initial development. Expect breaking changes and rough edges. &lt;em&gt;October 17, 2024&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üåü Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üñ•Ô∏è Aider terminal integration within Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üé® Color theme configuration support with auto Catppuccin flavor synchronization if available&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üì§ Quick commands to add/drop current buffer files&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üì§ Send buffers or selections to Aider&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ‚ôªÔ∏è Reset command to clear session&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üí¨ Optional user prompt for buffer and selection sends&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ü©∫ Send current buffer diagnostics to Aider&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üîç Aider command selection UI with fuzzy search and input prompt&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üîå Fully documented &lt;a href=&#34;https://raw.githubusercontent.com/GeorgesAlkhouri/nvim-aider/main/lua/nvim_aider/api.lua&#34;&gt;Lua API&lt;/a&gt; for programmatic interaction and custom integrations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üîÑ Auto-reload buffers on external changes (requires &#39;autoread&#39;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üß© Integrations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üå≤‚ûï &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;Neo-tree&lt;/a&gt; offers rich context management for Aider, including files, directories, and multi-selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üîñ &lt;a href=&#34;https://github.com/LintaoAmons/bookmarks.nvim&#34;&gt;bookmarks.nvim&lt;/a&gt; enables adding (optionally as read-only) or dropping files from Aider using saved bookmarks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üå≥ &lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt; enables adding or dropping individual files to Aider directly from its tree interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üéÆ Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:Aider&lt;/code&gt; - Open interactive command menu&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Commands:&#xA;health         ü©∫ Check plugin health status&#xA;toggle         üéõÔ∏è Toggle Aider terminal window&#xA;send           üì§ Send text to Aider (prompt if empty)&#xA;command        ‚å®Ô∏è Show slash commands&#xA;buffer         üìÑ Send current buffer&#xA; &amp;gt; diagnostics ü©∫ Send current buffer diagnostics&#xA;add            ‚ûï Add file to session&#xA; &amp;gt; readonly    üëÄ Add as read-only reference&#xA;drop           üóëÔ∏è Remove file from session&#xA;reset          ‚ôªÔ∏è Drop all files and clear chat history&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;‚ö° Direct command execution examples:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Aider health&#xA;:Aider add readonly&#xA;:Aider send &#34;Fix login validation&#34;&#xA;:Aider reset&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üîó Requirements&lt;/h2&gt; &#xA;&lt;p&gt;üêç Python: Install &lt;code&gt;aider-chat&lt;/code&gt; üìã System: &lt;strong&gt;Neovim&lt;/strong&gt; &amp;gt;= 0.9.4, &lt;del&gt;Working clipboard&lt;/del&gt; thanks to @milanglacier üåô Lua: &lt;code&gt;folke/snacks.nvim&lt;/code&gt;, &lt;em&gt;optionals&lt;/em&gt; &lt;code&gt;catppuccin/nvim&lt;/code&gt;, &lt;code&gt;nvim-neo-tree/neo-tree.nvim&lt;/code&gt;, &lt;code&gt;nvim-tree.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using lazy.nvim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;GeorgesAlkhouri/nvim-aider&#34;,&#xA;    cmd = &#34;Aider&#34;,&#xA;    -- Example key mappings for common actions:&#xA;    keys = {&#xA;      { &#34;&amp;lt;leader&amp;gt;a/&#34;, &#34;&amp;lt;cmd&amp;gt;Aider toggle&amp;lt;cr&amp;gt;&#34;, desc = &#34;Toggle Aider&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;as&#34;, &#34;&amp;lt;cmd&amp;gt;Aider send&amp;lt;cr&amp;gt;&#34;, desc = &#34;Send to Aider&#34;, mode = { &#34;n&#34;, &#34;v&#34; } },&#xA;      { &#34;&amp;lt;leader&amp;gt;ac&#34;, &#34;&amp;lt;cmd&amp;gt;Aider command&amp;lt;cr&amp;gt;&#34;, desc = &#34;Aider Commands&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;ab&#34;, &#34;&amp;lt;cmd&amp;gt;Aider buffer&amp;lt;cr&amp;gt;&#34;, desc = &#34;Send Buffer&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;a+&#34;, &#34;&amp;lt;cmd&amp;gt;Aider add&amp;lt;cr&amp;gt;&#34;, desc = &#34;Add File&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;a-&#34;, &#34;&amp;lt;cmd&amp;gt;Aider drop&amp;lt;cr&amp;gt;&#34;, desc = &#34;Drop File&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;ar&#34;, &#34;&amp;lt;cmd&amp;gt;Aider add readonly&amp;lt;cr&amp;gt;&#34;, desc = &#34;Add Read-Only&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;aR&#34;, &#34;&amp;lt;cmd&amp;gt;Aider reset&amp;lt;cr&amp;gt;&#34;, desc = &#34;Reset Session&#34; },&#xA;      -- Example nvim-tree.lua integration if needed&#xA;      { &#34;&amp;lt;leader&amp;gt;a+&#34;, &#34;&amp;lt;cmd&amp;gt;AiderTreeAddFile&amp;lt;cr&amp;gt;&#34;, desc = &#34;Add File from Tree to Aider&#34;, ft = &#34;NvimTree&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;a-&#34;, &#34;&amp;lt;cmd&amp;gt;AiderTreeDropFile&amp;lt;cr&amp;gt;&#34;, desc = &#34;Drop File from Tree from Aider&#34;, ft = &#34;NvimTree&#34; },&#xA;    },&#xA;    dependencies = {&#xA;      &#34;folke/snacks.nvim&#34;,&#xA;      --- The below dependencies are optional&#xA;      &#34;catppuccin/nvim&#34;,&#xA;      &#34;nvim-tree/nvim-tree.lua&#34;,&#xA;      --- Neo-tree integration&#xA;      {&#xA;        &#34;nvim-neo-tree/neo-tree.nvim&#34;,&#xA;        opts = function(_, opts)&#xA;          -- Example mapping configuration (already set by default)&#xA;          -- opts.window = {&#xA;          --   mappings = {&#xA;          --     [&#34;+&#34;] = { &#34;nvim_aider_add&#34;, desc = &#34;add to aider&#34; },&#xA;          --     [&#34;-&#34;] = { &#34;nvim_aider_drop&#34;, desc = &#34;drop from aider&#34; }&#xA;          --     [&#34;=&#34;] = { &#34;nvim_aider_add_read_only&#34;, desc = &#34;add read-only to aider&#34; }&#xA;          --   }&#xA;          -- }&#xA;          require(&#34;nvim_aider.neo_tree&#34;).setup(opts)&#xA;        end,&#xA;      },&#xA;    },&#xA;    config = true,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing, run &lt;code&gt;:Aider health&lt;/code&gt; to check if everything is set up correctly.&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;There is no need to call setup if you don&#39;t want to change the default options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim_aider&#34;).setup({&#xA;  -- Command that executes Aider&#xA;  aider_cmd = &#34;aider&#34;,&#xA;  -- Command line arguments passed to aider&#xA;  args = {&#xA;    &#34;--no-auto-commits&#34;,&#xA;    &#34;--pretty&#34;,&#xA;    &#34;--stream&#34;,&#xA;  },&#xA;  -- Automatically reload buffers changed by Aider (requires vim.o.autoread = true)&#xA;  auto_reload = false,&#xA;  -- Theme colors (automatically uses Catppuccin flavor if available)&#xA;  theme = {&#xA;    user_input_color = &#34;#a6da95&#34;,&#xA;    tool_output_color = &#34;#8aadf4&#34;,&#xA;    tool_error_color = &#34;#ed8796&#34;,&#xA;    tool_warning_color = &#34;#eed49f&#34;,&#xA;    assistant_output_color = &#34;#c6a0f6&#34;,&#xA;    completion_menu_color = &#34;#cad3f5&#34;,&#xA;    completion_menu_bg_color = &#34;#24273a&#34;,&#xA;    completion_menu_current_color = &#34;#181926&#34;,&#xA;    completion_menu_current_bg_color = &#34;#f4dbd6&#34;,&#xA;  },&#xA;  -- snacks.picker.layout.Config configuration&#xA;  picker_cfg = {&#xA;    preset = &#34;vscode&#34;,&#xA;  },&#xA;  -- Other snacks.terminal.Opts options&#xA;  config = {&#xA;    os = { editPreset = &#34;nvim-remote&#34; },&#xA;    gui = { nerdFontsVersion = &#34;3&#34; },&#xA;  },&#xA;  win = {&#xA;    wo = { winbar = &#34;Aider&#34; },&#xA;    style = &#34;nvim_aider&#34;,&#xA;    position = &#34;right&#34;,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìö API Reference&lt;/h2&gt; &#xA;&lt;p&gt;The plugin provides a structured API for programmatic integration. Access via &lt;code&gt;require(&#34;nvim_aider&#34;).api&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Core Functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local api = require(&#34;nvim_aider&#34;).api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;health_check()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Verify plugin health status&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.health_check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;toggle_terminal(opts?)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Toggle Aider terminal window&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.toggle_terminal()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Terminal Operations&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;send_to_terminal(text, opts?)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Send raw text directly to Aider&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.send_to_terminal(&#34;Fix the login validation&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;send_command(command, input?, opts?)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Execute specific Aider command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.send_command(&#34;/commit&#34;, &#34;Add error handling&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;reset_session(opts?)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Drop all files and clear chat history&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.reset_session()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;File Management&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;add_file(filepath)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add specific file to session&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.add_file(&#34;/src/utils.lua&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;drop_file(filepath)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Remove file from session&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.drop_file(&#34;/outdated/legacy.py&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;add_current_file()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add current buffer&#39;s file (uses &lt;code&gt;add_file&lt;/code&gt; internally)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#34;BufWritePost&#34;, {&#xA;  callback = function()&#xA;    api.add_current_file()&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;drop_current_file()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Remove current buffer&#39;s file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.drop_current_file()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;add_read_only_file()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add current buffer as read-only reference&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.add_read_only_file()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Buffer Operations&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;send_buffer_with_prompt(opts?)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Send entire buffer content with optional prompt&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.send_buffer_with_prompt()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;send_diagnostics_with_prompt(opts?)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Send current buffer&#39;s diagnostics with an optional prompt&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.send_diagnostics_with_prompt()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;UI Components&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;open_command_picker(opts?, callback?)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Interactive command selector with custom handling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;api.open_command_picker(nil, function(picker, item)&#xA;  if item.text == &#34;/custom&#34; then&#xA;    -- Implement custom command handling&#xA;  else&#xA;    -- Default behavior&#xA;    picker:close()&#xA;    api.send_command(item.text)&#xA;  end&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üß© Other Aider Neovim plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joshuavial/aider.nvim&#34;&gt;aider.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nekowasabi/aider.vim&#34;&gt;aider.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Made with ü§ñ using &#xA; &lt;a href=&#34;https://github.com/paul-gauthier/aider&#34;&gt;Aider&lt;/a&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>