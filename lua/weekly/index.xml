<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:55:12Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rcarriga/nvim-notify</title>
    <updated>2023-03-05T01:55:12Z</updated>
    <id>tag:github.com,2023-03-05:/rcarriga/nvim-notify</id>
    <link href="https://github.com/rcarriga/nvim-notify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fancy, configurable, notification manager for NeoVim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-notify&lt;/h1&gt; &#xA;&lt;p&gt;A fancy, configurable, notification manager for NeoVim&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130856848-e8289850-028f-4f49-82f1-5ea1b8912f5e.gif&#34; alt=&#34;notify&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Credit to &lt;a href=&#34;https://github.com/sunjon&#34;&gt;sunjon&lt;/a&gt; for &lt;a href=&#34;https://neovim.discourse.group/t/wip-animated-notifications-plugin/448&#34;&gt;the design&lt;/a&gt; that inspired the appearance of this plugin.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#Installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#viewing-history&#34;&gt;Viewing History&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#highlights&#34;&gt;Highlights&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#render-style&#34;&gt;Render Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#animation-style&#34;&gt;Animation Style&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#opening-the-window&#34;&gt;Opening the window&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#changing-the-window&#34;&gt;Changing the window&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Make sure to use a font which supported glyphs (icons), font can be found &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;24-bit colour is required, which can be enabled by adding this to your init.lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.termguicolors = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can install nvim-notify with the package manager of your choice.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;&lt;strong&gt;dein&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#34;rcarriga/nvim-notify&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;strong&gt;vim-plug&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;rcarriga/nvim-notify&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply call the module with a message!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;notify&#34;)(&#34;My super important message&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other plugins can use the notification windows by setting it as your default notify function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify = require(&#34;notify&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can supply a level to change the border highlighting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify(&#34;This is an error message&#34;, &#34;error&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Updating an existing notification is also possible!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/152641078-92f3da72-f49f-4705-aec8-86512693445f.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use treesitter highlighting inside notifications with opacity changing&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/165042795-565878a3-9c6d-4c0b-ab0d-6858515835c5.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are a number of custom options that can be supplied in a table as the third argument. See &lt;code&gt;:h NotifyOptions&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Sample code for the first GIF above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local plugin = &#34;My Awesome Plugin&#34;&#xA;&#xA;vim.notify(&#34;This is an error message.\nSomething went wrong!&#34;, &#34;error&#34;, {&#xA;  title = plugin,&#xA;  on_open = function()&#xA;    vim.notify(&#34;Attempting recovery.&#34;, vim.log.levels.WARN, {&#xA;      title = plugin,&#xA;    })&#xA;    local timer = vim.loop.new_timer()&#xA;    timer:start(2000, 0, function()&#xA;      vim.notify({ &#34;Fixing problem.&#34;, &#34;Please wait...&#34; }, &#34;info&#34;, {&#xA;        title = plugin,&#xA;        timeout = 3000,&#xA;        on_close = function()&#xA;          vim.notify(&#34;Problem solved&#34;, nil, { title = plugin })&#xA;          vim.notify(&#34;Error code 0x0395AF&#34;, 1, { title = plugin })&#xA;        end,&#xA;      })&#xA;    end)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use plenary&#39;s async library to avoid using callbacks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local async = require(&#34;plenary.async&#34;)&#xA;local notify = require(&#34;notify&#34;).async&#xA;&#xA;async.run(function()&#xA;  notify(&#34;Let&#39;s wait for this to close&#34;).events.close()&#xA;  notify(&#34;It closed!&#34;)&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set a custom filetype to take advantage of treesitter highlighting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify(text, &#34;info&#34;, {&#xA;  title = &#34;My Awesome Plugin&#34;,&#xA;  on_open = function(win)&#xA;    local buf = vim.api.nvim_win_get_buf(win)&#xA;    vim.api.nvim_buf_set_option(buf, &#34;filetype&#34;, &#34;markdown&#34;)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the wiki for more examples!&lt;/p&gt; &#xA;&lt;h3&gt;Viewing History&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; installed then you can use the &lt;code&gt;notify&lt;/code&gt; extension to search the history:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope notify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).extensions.notify.notify(&amp;lt;opts&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you lazy load &lt;code&gt;telescope&lt;/code&gt; you should manually call &lt;code&gt;require(&#34;telescope&#34;).load_extension(&#34;notify&#34;)&lt;/code&gt; before using the above commands. If you don&#39;t lazy load &lt;code&gt;telescope&lt;/code&gt; then &lt;code&gt;notify&lt;/code&gt; does this for you.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/136264308-2fcdfe57-a8f6-4b34-8ea1-e3a8349bc581.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;There is a command to display a log of the history.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Notifications&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/136264653-83038119-634b-48e7-8e8a-0edf4546efe2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;You can get a list of past notifications with the history function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;notify&#34;).history()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;You can optionally call the &lt;code&gt;setup&lt;/code&gt; function to provide configuration options&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h notify.Config&lt;/code&gt; for options and &lt;code&gt;:h notify.setup()&lt;/code&gt; for default values.&lt;/p&gt; &#xA;&lt;h3&gt;Highlights&lt;/h3&gt; &#xA;&lt;p&gt;You can define custom highlights by supplying highlight groups for each of the levels. The naming scheme follows a simple structure: &lt;code&gt;Notify&amp;lt;upper case level name&amp;gt;&amp;lt;section&amp;gt;&lt;/code&gt;. If you want to use custom levels, you can define the highlights for them or they will follow the &lt;code&gt;INFO&lt;/code&gt; highlights by default.&lt;/p&gt; &#xA;&lt;p&gt;Here are the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;highlight NotifyERRORBorder guifg=#8A1F1F&#xA;highlight NotifyWARNBorder guifg=#79491D&#xA;highlight NotifyINFOBorder guifg=#4F6752&#xA;highlight NotifyDEBUGBorder guifg=#8B8B8B&#xA;highlight NotifyTRACEBorder guifg=#4F3552&#xA;highlight NotifyERRORIcon guifg=#F70067&#xA;highlight NotifyWARNIcon guifg=#F79000&#xA;highlight NotifyINFOIcon guifg=#A9FF68&#xA;highlight NotifyDEBUGIcon guifg=#8B8B8B&#xA;highlight NotifyTRACEIcon guifg=#D484FF&#xA;highlight NotifyERRORTitle  guifg=#F70067&#xA;highlight NotifyWARNTitle guifg=#F79000&#xA;highlight NotifyINFOTitle guifg=#A9FF68&#xA;highlight NotifyDEBUGTitle  guifg=#8B8B8B&#xA;highlight NotifyTRACETitle  guifg=#D484FF&#xA;highlight link NotifyERRORBody Normal&#xA;highlight link NotifyWARNBody Normal&#xA;highlight link NotifyINFOBody Normal&#xA;highlight link NotifyDEBUGBody Normal&#xA;highlight link NotifyTRACEBody Normal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Render Style&lt;/h3&gt; &#xA;&lt;p&gt;The appearance of the notifications can be configured, using either built-in methods or custom functions. See &lt;code&gt;:help notify-render()&lt;/code&gt; for details&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&#34;default&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/141534868-fdcc9d03-9f7b-47fd-acfc-5a20b98e4e0a.png&#34; alt=&#34;default&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&#34;minimal&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/141534952-bb0cf491-5bb4-473c-9a67-8adb5b23b232.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&#34;simple&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/191683325-220208a0-90bf-4daa-b375-01b573ca524c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&#34;compact&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/212632432-86621888-f885-4074-aed4-d12b5e291ab2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to submit custom rendering functions to share with others!&lt;/p&gt; &#xA;&lt;h3&gt;Animation Style&lt;/h3&gt; &#xA;&lt;p&gt;The animation is designed to work in stages. The first stage is the opening of the window, and all subsequent stages can changes the position or opacity of the window. You can use one of the built-in styles or provide your own in the setup.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&#34;fade_in_slide_out&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924913-f3a61f2c-2330-4426-a787-3cd7494fccc0.gif&#34; alt=&#34;fade_slide&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&#34;fade&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924911-a89bef9b-e815-4aa5-a255-84bc23dd8c8e.gif&#34; alt=&#34;fade&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&#34;slide&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924905-656cabfc-9eb7-4e22-b6da-8a2a1f508fa5.gif&#34; alt=&#34;slide&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&#34;static&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924902-8c77b5a1-6d13-48f4-98a9-866e58cb76e4.gif&#34; alt=&#34;static&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Custom styles can be provided by setting the config &lt;code&gt;stages&lt;/code&gt; value to a list of functions.&lt;/p&gt; &#xA;&lt;p&gt;If you create a custom style, feel free to open a PR to submit it as a built-in style!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB.&lt;/strong&gt; This is a prototype API that is open to change. I am looking for feedback on both issues or extra data that could be useful in creating animation styles.&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/lua/notify/stages/&#34;&gt;built-in styles&lt;/a&gt; to see examples&lt;/p&gt; &#xA;&lt;h4&gt;Opening the window&lt;/h4&gt; &#xA;&lt;p&gt;The first function in the list should return a table to be provided to &lt;code&gt;nvim_open_win&lt;/code&gt;, optionally including an extra &lt;code&gt;opacity&lt;/code&gt; key which can be between 0-100.&lt;/p&gt; &#xA;&lt;p&gt;The function is given a state table that contains the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;message: table&lt;/code&gt; State of the message to be shown &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;width&lt;/code&gt; Width of the message buffer&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;height&lt;/code&gt; Height of the message buffer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;open_windows: integer[]&lt;/code&gt; List of all window IDs currently showing messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buffer: integer&lt;/code&gt; The buffer containing the rendered notification message.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a notification can&#39;t be shown at the moment the function should return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Changing the window&lt;/h4&gt; &#xA;&lt;p&gt;All following functions should return the goal values for the window to reach from it&#39;s current point. They will receive the same state object as the initial function and a second argument of the window ID.&lt;/p&gt; &#xA;&lt;p&gt;The following fields can be returned in a table:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;row&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;height&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;width&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These can be provided as either numbers or as a table. If they are provided as numbers then they will change instantly the value given.&lt;/p&gt; &#xA;&lt;p&gt;If they are provided as a table, they will be treated as a value to animate towards. This uses a dampened spring algorithm to provide a natural feel to the movement.&lt;/p&gt; &#xA;&lt;p&gt;The table must contain the goal value as the 1st index (e.g. &lt;code&gt;{10}&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;All other values are provided with keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;damping: number&lt;/code&gt; How motion decays over time. Values less than 1 mean the spring can overshoot. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bounds: &amp;gt;= 0&lt;/li&gt; &#xA;   &lt;li&gt;Default: 1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;frequency: number&lt;/code&gt; How fast the spring oscillates &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bounds: &amp;gt;= 0&lt;/li&gt; &#xA;   &lt;li&gt;Default: 1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;complete: fun(value: number): bool&lt;/code&gt; Function to determine if value has reached its goal. If not provided it will complete when the value rounded to 2 decimal places is equal to the goal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once the last function has reached its goals, the window is removed.&lt;/p&gt; &#xA;&lt;p&gt;One of the stages should also return the key &lt;code&gt;time&lt;/code&gt; set to true. This is treated as the stage which the notification is on a timer. The goals of this stage are not used to check if it is complete. The next stage will start once the notification reaches its timeout.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nvim-neo-tree/neo-tree.nvim</title>
    <updated>2023-03-05T01:55:12Z</updated>
    <id>tag:github.com,2023-03-05:/nvim-neo-tree/neo-tree.nvim</id>
    <link href="https://github.com/nvim-neo-tree/neo-tree.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin to manage the file system and other tree like structures.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neo-tree.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Neo-tree is a Neovim plugin to browse the file system and other tree like structures in whatever style suits you, including sidebars, floating windows, netrw split style, or all of them at once!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-with-right-aligned-symbols.png&#34; alt=&#34;Neo-tree file system&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Breaking Changes BAD &lt;span&gt;💣&lt;/span&gt; &lt;span&gt;👿&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The biggest and most important feature of Neo-tree is that we will never knowingly push a breaking change and interrupt your day. Bugs happen, but breaking changes can always be avoided. When breaking changes are needed, there will be a new branch that you can opt into, when it is a good time for you.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/#what-is-a-breaking-change&#34;&gt;What is a Breaking Change?&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Changelog#20&#34;&gt;Changelog 2.0&lt;/a&gt; for breaking changes and deprecations in 2.0.&lt;/p&gt; &#xA;&lt;h3&gt;User Experience GOOD &lt;span&gt;🙂&lt;/span&gt; &lt;span&gt;👍&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Aside from being polite about breaking changes, Neo-tree is also focused on the little details of user experience. Everything should work exactly as you would expect a sidebar to work without all of the glitchy behavior that is normally accepted in (neo)vim sidebars. I can&#39;t stand glitchy behavior, and neither should you!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neo-tree won&#39;t let other buffers take over its window.&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree won&#39;t leave its window scrolled to the last line when there is plenty of room to display the whole tree.&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree does not need to be manually refreshed (set &lt;code&gt;use_libuv_file_watcher=true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree can intelligently follow the current file (set &lt;code&gt;follow_current_file=true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree is thoughtful about maintaining or setting focus on the right node&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree windows in different tabs are completely separate&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;respect_gitignore&lt;/code&gt; actually works!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Neo-tree is smooth, efficient, stable, and pays attention to the little details. If you find anything janky, wanky, broken, or unintuitive, please open an issue so we can fix it.&lt;/p&gt; &#xA;&lt;h2&gt;Minimal Quickstart&lt;/h2&gt; &#xA;&lt;h4&gt;Minimal Example for Packer:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Unless you are still migrating, remove the deprecated commands from v1.x&#xA;vim.cmd([[ let g:neo_tree_remove_legacy_commands = 1 ]])&#xA;&#xA;use {&#xA;  &#34;nvim-neo-tree/neo-tree.nvim&#34;,&#xA;    branch = &#34;v2.x&#34;,&#xA;    requires = { &#xA;      &#34;nvim-lua/plenary.nvim&#34;,&#xA;      &#34;nvim-tree/nvim-web-devicons&#34;, -- not strictly required, but recommended&#xA;      &#34;MunifTanjim/nui.nvim&#34;,&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Press &lt;code&gt;?&lt;/code&gt; in the Neo-tree window to view the list of mappings.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h4&gt;Longer Example for Packer:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;nvim-neo-tree/neo-tree.nvim&#34;,&#xA;    branch = &#34;v2.x&#34;,&#xA;    requires = { &#xA;      &#34;nvim-lua/plenary.nvim&#34;,&#xA;      &#34;nvim-tree/nvim-web-devicons&#34;, -- not strictly required, but recommended&#xA;      &#34;MunifTanjim/nui.nvim&#34;,&#xA;      {&#xA;        -- only needed if you want to use the commands with &#34;_with_window_picker&#34; suffix&#xA;        &#39;s1n7ax/nvim-window-picker&#39;,&#xA;        tag = &#34;v1.*&#34;,&#xA;        config = function()&#xA;          require&#39;window-picker&#39;.setup({&#xA;            autoselect_one = true,&#xA;            include_current = false,&#xA;            filter_rules = {&#xA;              -- filter using buffer options&#xA;              bo = {&#xA;                -- if the file type is one of following, the window will be ignored&#xA;                filetype = { &#39;neo-tree&#39;, &#34;neo-tree-popup&#34;, &#34;notify&#34; },&#xA;&#xA;                -- if the buffer type is one of following, the window will be ignored&#xA;                buftype = { &#39;terminal&#39;, &#34;quickfix&#34; },&#xA;              },&#xA;            },&#xA;            other_win_hl_color = &#39;#e35e4f&#39;,&#xA;          })&#xA;        end,&#xA;      }&#xA;    },&#xA;    config = function ()&#xA;      -- Unless you are still migrating, remove the deprecated commands from v1.x&#xA;      vim.cmd([[ let g:neo_tree_remove_legacy_commands = 1 ]])&#xA;&#xA;      -- If you want icons for diagnostic errors, you&#39;ll need to define them somewhere:&#xA;      vim.fn.sign_define(&#34;DiagnosticSignError&#34;,&#xA;        {text = &#34; &#34;, texthl = &#34;DiagnosticSignError&#34;})&#xA;      vim.fn.sign_define(&#34;DiagnosticSignWarn&#34;,&#xA;        {text = &#34; &#34;, texthl = &#34;DiagnosticSignWarn&#34;})&#xA;      vim.fn.sign_define(&#34;DiagnosticSignInfo&#34;,&#xA;        {text = &#34; &#34;, texthl = &#34;DiagnosticSignInfo&#34;})&#xA;      vim.fn.sign_define(&#34;DiagnosticSignHint&#34;,&#xA;        {text = &#34;&#34;, texthl = &#34;DiagnosticSignHint&#34;})&#xA;      -- NOTE: this is changed from v1.x, which used the old style of highlight groups&#xA;      -- in the form &#34;LspDiagnosticsSignWarning&#34;&#xA;&#xA;      require(&#34;neo-tree&#34;).setup({&#xA;        close_if_last_window = false, -- Close Neo-tree if it is the last window left in the tab&#xA;        popup_border_style = &#34;rounded&#34;,&#xA;        enable_git_status = true,&#xA;        enable_diagnostics = true,&#xA;        sort_case_insensitive = false, -- used when sorting files and directories in the tree&#xA;        sort_function = nil , -- use a custom function for sorting files and directories in the tree &#xA;        -- sort_function = function (a,b)&#xA;        --       if a.type == b.type then&#xA;        --           return a.path &amp;gt; b.path&#xA;        --       else&#xA;        --           return a.type &amp;gt; b.type&#xA;        --       end&#xA;        --   end , -- this sorts files and directories descendantly&#xA;        default_component_configs = {&#xA;          container = {&#xA;            enable_character_fade = true&#xA;          },&#xA;          indent = {&#xA;            indent_size = 2,&#xA;            padding = 1, -- extra padding on left hand side&#xA;            -- indent guides&#xA;            with_markers = true,&#xA;            indent_marker = &#34;│&#34;,&#xA;            last_indent_marker = &#34;└&#34;,&#xA;            highlight = &#34;NeoTreeIndentMarker&#34;,&#xA;            -- expander config, needed for nesting files&#xA;            with_expanders = nil, -- if nil and file nesting is enabled, will enable expanders&#xA;            expander_collapsed = &#34;&#34;,&#xA;            expander_expanded = &#34;&#34;,&#xA;            expander_highlight = &#34;NeoTreeExpander&#34;,&#xA;          },&#xA;          icon = {&#xA;            folder_closed = &#34;&#34;,&#xA;            folder_open = &#34;&#34;,&#xA;            folder_empty = &#34;ﰊ&#34;,&#xA;            -- The next two settings are only a fallback, if you use nvim-web-devicons and configure default icons there&#xA;            -- then these will never be used.&#xA;            default = &#34;*&#34;,&#xA;            highlight = &#34;NeoTreeFileIcon&#34;&#xA;          },&#xA;          modified = {&#xA;            symbol = &#34;[+]&#34;,&#xA;            highlight = &#34;NeoTreeModified&#34;,&#xA;          },&#xA;          name = {&#xA;            trailing_slash = false,&#xA;            use_git_status_colors = true,&#xA;            highlight = &#34;NeoTreeFileName&#34;,&#xA;          },&#xA;          git_status = {&#xA;            symbols = {&#xA;              -- Change type&#xA;              added     = &#34;&#34;, -- or &#34;✚&#34;, but this is redundant info if you use git_status_colors on the name&#xA;              modified  = &#34;&#34;, -- or &#34;&#34;, but this is redundant info if you use git_status_colors on the name&#xA;              deleted   = &#34;✖&#34;,-- this can only be used in the git_status source&#xA;              renamed   = &#34;&#34;,-- this can only be used in the git_status source&#xA;              -- Status type&#xA;              untracked = &#34;&#34;,&#xA;              ignored   = &#34;&#34;,&#xA;              unstaged  = &#34;&#34;,&#xA;              staged    = &#34;&#34;,&#xA;              conflict  = &#34;&#34;,&#xA;            }&#xA;          },&#xA;        },&#xA;        window = {&#xA;          position = &#34;left&#34;,&#xA;          width = 40,&#xA;          mapping_options = {&#xA;            noremap = true,&#xA;            nowait = true,&#xA;          },&#xA;          mappings = {&#xA;            [&#34;&amp;lt;space&amp;gt;&#34;] = { &#xA;                &#34;toggle_node&#34;, &#xA;                nowait = false, -- disable `nowait` if you have existing combos starting with this char that you want to use &#xA;            },&#xA;            [&#34;&amp;lt;2-LeftMouse&amp;gt;&#34;] = &#34;open&#34;,&#xA;            [&#34;&amp;lt;cr&amp;gt;&#34;] = &#34;open&#34;,&#xA;            [&#34;&amp;lt;esc&amp;gt;&#34;] = &#34;revert_preview&#34;,&#xA;            [&#34;P&#34;] = { &#34;toggle_preview&#34;, config = { use_float = true } },&#xA;            [&#34;l&#34;] = &#34;focus_preview&#34;,&#xA;            [&#34;S&#34;] = &#34;open_split&#34;,&#xA;            [&#34;s&#34;] = &#34;open_vsplit&#34;,&#xA;            -- [&#34;S&#34;] = &#34;split_with_window_picker&#34;,&#xA;            -- [&#34;s&#34;] = &#34;vsplit_with_window_picker&#34;,&#xA;            [&#34;t&#34;] = &#34;open_tabnew&#34;,&#xA;            -- [&#34;&amp;lt;cr&amp;gt;&#34;] = &#34;open_drop&#34;,&#xA;            -- [&#34;t&#34;] = &#34;open_tab_drop&#34;,&#xA;            [&#34;w&#34;] = &#34;open_with_window_picker&#34;,&#xA;            --[&#34;P&#34;] = &#34;toggle_preview&#34;, -- enter preview mode, which shows the current node without focusing&#xA;            [&#34;C&#34;] = &#34;close_node&#34;,&#xA;            -- [&#39;C&#39;] = &#39;close_all_subnodes&#39;,&#xA;            [&#34;z&#34;] = &#34;close_all_nodes&#34;,&#xA;            --[&#34;Z&#34;] = &#34;expand_all_nodes&#34;,&#xA;            [&#34;a&#34;] = { &#xA;              &#34;add&#34;,&#xA;              -- this command supports BASH style brace expansion (&#34;x{a,b,c}&#34; -&amp;gt; xa,xb,xc). see `:h neo-tree-file-actions` for details&#xA;              -- some commands may take optional config options, see `:h neo-tree-mappings` for details&#xA;              config = {&#xA;                show_path = &#34;none&#34; -- &#34;none&#34;, &#34;relative&#34;, &#34;absolute&#34;&#xA;              }&#xA;            },&#xA;            [&#34;A&#34;] = &#34;add_directory&#34;, -- also accepts the optional config.show_path option like &#34;add&#34;. this also supports BASH style brace expansion.&#xA;            [&#34;d&#34;] = &#34;delete&#34;,&#xA;            [&#34;r&#34;] = &#34;rename&#34;,&#xA;            [&#34;y&#34;] = &#34;copy_to_clipboard&#34;,&#xA;            [&#34;x&#34;] = &#34;cut_to_clipboard&#34;,&#xA;            [&#34;p&#34;] = &#34;paste_from_clipboard&#34;,&#xA;            [&#34;c&#34;] = &#34;copy&#34;, -- takes text input for destination, also accepts the optional config.show_path option like &#34;add&#34;:&#xA;            -- [&#34;c&#34;] = {&#xA;            --  &#34;copy&#34;,&#xA;            --  config = {&#xA;            --    show_path = &#34;none&#34; -- &#34;none&#34;, &#34;relative&#34;, &#34;absolute&#34;&#xA;            --  }&#xA;            --}&#xA;            [&#34;m&#34;] = &#34;move&#34;, -- takes text input for destination, also accepts the optional config.show_path option like &#34;add&#34;.&#xA;            [&#34;q&#34;] = &#34;close_window&#34;,&#xA;            [&#34;R&#34;] = &#34;refresh&#34;,&#xA;            [&#34;?&#34;] = &#34;show_help&#34;,&#xA;            [&#34;&amp;lt;&#34;] = &#34;prev_source&#34;,&#xA;            [&#34;&amp;gt;&#34;] = &#34;next_source&#34;,&#xA;          }&#xA;        },&#xA;        nesting_rules = {},&#xA;        filesystem = {&#xA;          filtered_items = {&#xA;            visible = false, -- when true, they will just be displayed differently than normal items&#xA;            hide_dotfiles = true,&#xA;            hide_gitignored = true,&#xA;            hide_hidden = true, -- only works on Windows for hidden files/directories&#xA;            hide_by_name = {&#xA;              --&#34;node_modules&#34;&#xA;            },&#xA;            hide_by_pattern = { -- uses glob style patterns&#xA;              --&#34;*.meta&#34;,&#xA;              --&#34;*/src/*/tsconfig.json&#34;,&#xA;            },&#xA;            always_show = { -- remains visible even if other settings would normally hide it&#xA;              --&#34;.gitignored&#34;,&#xA;            },&#xA;            never_show = { -- remains hidden even if visible is toggled to true, this overrides always_show&#xA;              --&#34;.DS_Store&#34;,&#xA;              --&#34;thumbs.db&#34;&#xA;            },&#xA;            never_show_by_pattern = { -- uses glob style patterns&#xA;              --&#34;.null-ls_*&#34;,&#xA;            },&#xA;          },&#xA;          follow_current_file = false, -- This will find and focus the file in the active buffer every&#xA;                                       -- time the current file is changed while the tree is open.&#xA;          group_empty_dirs = false, -- when true, empty folders will be grouped together&#xA;          hijack_netrw_behavior = &#34;open_default&#34;, -- netrw disabled, opening a directory opens neo-tree&#xA;                                                  -- in whatever position is specified in window.position&#xA;                                -- &#34;open_current&#34;,  -- netrw disabled, opening a directory opens within the&#xA;                                                  -- window like netrw would, regardless of window.position&#xA;                                -- &#34;disabled&#34;,    -- netrw left alone, neo-tree does not handle opening dirs&#xA;          use_libuv_file_watcher = false, -- This will use the OS level file watchers to detect changes&#xA;                                          -- instead of relying on nvim autocmd events.&#xA;          window = {&#xA;            mappings = {&#xA;              [&#34;&amp;lt;bs&amp;gt;&#34;] = &#34;navigate_up&#34;,&#xA;              [&#34;.&#34;] = &#34;set_root&#34;,&#xA;              [&#34;H&#34;] = &#34;toggle_hidden&#34;,&#xA;              [&#34;/&#34;] = &#34;fuzzy_finder&#34;,&#xA;              [&#34;D&#34;] = &#34;fuzzy_finder_directory&#34;,&#xA;              [&#34;#&#34;] = &#34;fuzzy_sorter&#34;, -- fuzzy sorting using the fzy algorithm&#xA;              -- [&#34;D&#34;] = &#34;fuzzy_sorter_directory&#34;,&#xA;              [&#34;f&#34;] = &#34;filter_on_submit&#34;,&#xA;              [&#34;&amp;lt;c-x&amp;gt;&#34;] = &#34;clear_filter&#34;,&#xA;              [&#34;[g&#34;] = &#34;prev_git_modified&#34;,&#xA;              [&#34;]g&#34;] = &#34;next_git_modified&#34;,&#xA;            }&#xA;          }&#xA;        },&#xA;        buffers = {&#xA;          follow_current_file = true, -- This will find and focus the file in the active buffer every&#xA;                                       -- time the current file is changed while the tree is open.&#xA;          group_empty_dirs = true, -- when true, empty folders will be grouped together&#xA;          show_unloaded = true,&#xA;          window = {&#xA;            mappings = {&#xA;              [&#34;bd&#34;] = &#34;buffer_delete&#34;,&#xA;              [&#34;&amp;lt;bs&amp;gt;&#34;] = &#34;navigate_up&#34;,&#xA;              [&#34;.&#34;] = &#34;set_root&#34;,&#xA;            }&#xA;          },&#xA;        },&#xA;        git_status = {&#xA;          window = {&#xA;            position = &#34;float&#34;,&#xA;            mappings = {&#xA;              [&#34;A&#34;]  = &#34;git_add_all&#34;,&#xA;              [&#34;gu&#34;] = &#34;git_unstage_file&#34;,&#xA;              [&#34;ga&#34;] = &#34;git_add_file&#34;,&#xA;              [&#34;gr&#34;] = &#34;git_revert_file&#34;,&#xA;              [&#34;gc&#34;] = &#34;git_commit&#34;,&#xA;              [&#34;gp&#34;] = &#34;git_push&#34;,&#xA;              [&#34;gg&#34;] = &#34;git_commit_and_push&#34;,&#xA;            }&#xA;          }&#xA;        }&#xA;      })&#xA;&#xA;      vim.cmd([[nnoremap \ :Neotree reveal&amp;lt;cr&amp;gt;]])&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;The above configuration is not everything that can be changed, it&#39;s just the parts you might want to change first.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neo-tree&lt;/code&gt; for full documentation. You can also preview that online at &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/doc/neo-tree.txt&#34;&gt;doc/neo-tree.txt&lt;/a&gt;, although it&#39;s best viewed within vim.&lt;/p&gt; &#xA;&lt;p&gt;To see all of the default config options with commentary, you can view it online at &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/lua/neo-tree/defaults.lua&#34;&gt;lua/neo-tree/defaults.lua&lt;/a&gt;. You can also paste it into a buffer after installing Neo-tree by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:lua require(&#34;neo-tree&#34;).paste_default_config()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The &lt;code&gt;:Neotree&lt;/code&gt; Command&lt;/h2&gt; &#xA;&lt;p&gt;The single &lt;code&gt;:Neotree&lt;/code&gt; command accepts a range of arguments that give you full control over the details of what and where it will show. For example, the following command will open a file browser on the right hand side, &#34;revealing&#34; the currently active file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree filesystem reveal right&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments can be specified as either a key=value pair or just as the value. The key=value form is more verbose but may help with clarity. For example, the command above can also be specified as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree source=filesystem reveal=true position=right&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All arguments are optional and can be specified in any order. If you issue the command without any arguments, it will use default values for everything. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will open the filesystem source on the left hand side and focus it, if you are using the default config.&lt;/p&gt; &#xA;&lt;h3&gt;Tab Completion&lt;/h3&gt; &#xA;&lt;p&gt;Neotree supports tab completion for all arguments. Once a given argument has a value, it will stop suggesting those completions. It will also offer completions for paths. The simplest way to disambiguate a path from another type of argument is to start them with &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;./&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Arguments&lt;/h3&gt; &#xA;&lt;p&gt;Here is the full list of arguments you can use:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;action&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;What to do. Can be one of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;focus&lt;/td&gt; &#xA;   &lt;td&gt;Show and/or switch focus to the specified Neotree window. DEFAULT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;show&lt;/td&gt; &#xA;   &lt;td&gt;Show the window, but keep focus on your current window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;close&lt;/td&gt; &#xA;   &lt;td&gt;Close the window(s) specified. Can be combined with &#34;position&#34; and/or &#34;source&#34; to specify which window(s) to close.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;source&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;What to show. Can be one of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;filesystem&lt;/td&gt; &#xA;   &lt;td&gt;Show a file browser. DEFAULT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;buffers&lt;/td&gt; &#xA;   &lt;td&gt;Show a list of currently open buffers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;git_status&lt;/td&gt; &#xA;   &lt;td&gt;Show the output of &lt;code&gt;git status&lt;/code&gt; in a tree layout.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;position&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Where to show it, can be one of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left&lt;/td&gt; &#xA;   &lt;td&gt;Open as left hand sidebar. DEFAULT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right&lt;/td&gt; &#xA;   &lt;td&gt;Open as right hand sidebar.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;top&lt;/td&gt; &#xA;   &lt;td&gt;Open as top window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bottom&lt;/td&gt; &#xA;   &lt;td&gt;Open as bottom window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;Open as floating window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;current&lt;/td&gt; &#xA;   &lt;td&gt;Open within the current window, like netrw or vinegar would.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;toggle&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a boolean flag. Adding this means that the window will be closed if it is already open.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The directory to set as the root/cwd of the specified window. If you include a directory as one of the arguments, it will be assumed to be this option, you don&#39;t need the full dir=/path. You may use any value that can be passed to the &#39;expand&#39; function, such as &lt;code&gt;%:p:h:h&lt;/code&gt; to specify two directories up from the current file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree ./relative/path&#xA;:Neotree /home/user/relative/path&#xA;:Neotree dir=/home/user/relative/path&#xA;:Neotree position=current dir=relative/path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;git_base&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The base that is used to calculate the git status for each dir/file. By default it uses &lt;code&gt;HEAD&lt;/code&gt;, so it shows all changes that are not yet committed. You can for example work on a feature branch, and set it to &lt;code&gt;main&lt;/code&gt;. It will show all changes that happened on the feature branch and main since you branched off.&lt;/p&gt; &#xA;&lt;p&gt;Any git ref, commit, tag, or sha will work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree main&#xA;:Neotree v1.0&#xA;:Neotree git_base=8fe34be&#xA;:Neotree git_base=HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;reveal&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a boolean flag. Adding this will make Neotree automatically find and focus the current file when it opens.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;reveal_file&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A path to a file to reveal. This supersedes the &#34;reveal&#34; flag so there is no need to specify both. Use this if you want to reveal something other than the current file. If you include a path to a file as one of the arguments, it will be assumed to be this option. Like &#34;dir&#34;, you can pass any value that can be passed to the &#39;expand&#39; function. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree reveal_file=/home/user/my/file.text&#xA;:Neotree position=current dir=%:p:h:h reveal_file=%:p&#xA;:Neotree current %:p:h:h %:p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One neat trick you can do with this is to open a Neotree window which is focused on the file under the cursor using the &lt;code&gt;&amp;lt;cfile&amp;gt;&lt;/code&gt; keyword:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nnoremap gd :Neotree float reveal_file=&amp;lt;cfile&amp;gt; reveal_force_cwd&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;reveal_force_cwd&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a boolean flag. Normally, if you use one of the reveal options and the given file is not within the current working directory, you will be asked if you want to change the current working directory. If you include this flag, it will automatically change the directory without prompting. This option implies &#34;reveal&#34;, so you do not need to specify both.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neo-tree-commands&lt;/code&gt; for details and a full listing of available arguments.&lt;/p&gt; &#xA;&lt;h3&gt;File Nesting&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neo-tree-file-nesting&lt;/code&gt; for more details about file nesting.&lt;/p&gt; &#xA;&lt;h3&gt;Netrw Hijack&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;:edit .&#xA;:[v]split .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;&#34;filesystem.window.position&#34;&lt;/code&gt; is set to &lt;code&gt;&#34;current&#34;&lt;/code&gt;, or if you have specified &lt;code&gt;filesystem.hijack_netrw_behavior = &#34;open_current&#34;&lt;/code&gt;, then any command that would open a directory will open neo-tree in the specified window.&lt;/p&gt; &#xA;&lt;h2&gt;Sources&lt;/h2&gt; &#xA;&lt;p&gt;Neo-tree is built on the idea of supporting various sources. Sources are basically interface implementations whose job it is to provide a list of hierarchical items to be rendered, along with commands that are appropriate to those items.&lt;/p&gt; &#xA;&lt;h3&gt;filesystem&lt;/h3&gt; &#xA;&lt;p&gt;The default source is &lt;code&gt;filesystem&lt;/code&gt;, which displays your files and folders. This is the default source in commands when none is specified.&lt;/p&gt; &#xA;&lt;p&gt;This source can be used to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Browse the filesystem&lt;/li&gt; &#xA; &lt;li&gt;Control the current working directory of nvim&lt;/li&gt; &#xA; &lt;li&gt;Add/Copy/Delete/Move/Rename files and directories&lt;/li&gt; &#xA; &lt;li&gt;Search the filesystem&lt;/li&gt; &#xA; &lt;li&gt;Monitor git status and lsp diagnostics for the current working directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;buffers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-buffers.png&#34; alt=&#34;Neo-tree buffers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another available source is &lt;code&gt;buffers&lt;/code&gt;, which displays your open buffers. This is the same list you would see from &lt;code&gt;:ls&lt;/code&gt;. To show with the &lt;code&gt;buffers&lt;/code&gt; list, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree buffers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;git_status&lt;/h3&gt; &#xA;&lt;p&gt;This view take the results of the &lt;code&gt;git status&lt;/code&gt; command and display them in a tree. It includes commands for adding, unstaging, reverting, and committing.&lt;/p&gt; &#xA;&lt;p&gt;The screenshot below shows the result of &lt;code&gt;:Neotree float git_status&lt;/code&gt; while the filesystem is open in a sidebar:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-git_status.png&#34; alt=&#34;Neo-tree git_status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can specify a different git base here as well. But be aware that it is not possible to unstage / revert a file that is already committed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree float git_status git_base=main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Source Selector&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-source-selector.png&#34; alt=&#34;Neo-tree source selector&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can enable a clickable source selector in either the winbar (requires neovim 0.8+) or the statusline. To do so, set one of these options to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#34;neo-tree&#34;).setup({&#xA;        source_selector = {&#xA;            winbar = false,&#xA;            statusline = false&#xA;        }&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many configuration options to change the style of these tabs. See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/lua/neo-tree/defaults.lua&#34;&gt;lua/neo-tree/defaults.lua&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration and Customization&lt;/h2&gt; &#xA;&lt;p&gt;This is designed to be flexible. The way that is achieved is by making everything a function, or a string that identifies a built-in function. All of the built-in functions can be replaced with your own implementation, or you can add new ones.&lt;/p&gt; &#xA;&lt;p&gt;Each node in the tree is created from the renderer specified for the given node type, and each renderer is a list of component configs to be rendered in order. Each component is a function, either built-in or specified in your config. Those functions simply return the text and highlight group for the component.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, there is an events system that you can hook into. If you want to show some new data point related to your files, gather it in the &lt;code&gt;before_render&lt;/code&gt; event, create a component to display it, and reference that component in the renderer for the &lt;code&gt;file&lt;/code&gt; and/or &lt;code&gt;directory&lt;/code&gt; type.&lt;/p&gt; &#xA;&lt;p&gt;Details on how to configure everything is in the help file at &lt;code&gt;:h neo-tree-configuration&lt;/code&gt; or online at &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim/raw/main/doc/neo-tree.txt&#34;&gt;neo-tree.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Recipes for customizations can be found on the &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Recipes&#34;&gt;wiki&lt;/a&gt;. Recipes include things like adding a component to show the &lt;a href=&#34;https://github.com/ThePrimeagen/harpoon&#34;&gt;Harpoon&lt;/a&gt; index for files, or responding to the &lt;code&gt;&#34;file_opened&#34;&lt;/code&gt; event to auto clear the search when you open a file.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;There are many tree plugins for (neo)vim, so why make another one? Well, I wanted something that was:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Easy to maintain and enhance.&lt;/li&gt; &#xA; &lt;li&gt;Stable.&lt;/li&gt; &#xA; &lt;li&gt;Easy to customize.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Easy to maintain and enhance&lt;/h3&gt; &#xA;&lt;p&gt;This plugin is designed to grow and be flexible. This is accomplished by making the code as decoupled and functional as possible. Hopefully new contributors will find it easy to work with.&lt;/p&gt; &#xA;&lt;p&gt;One big difference between this plugin and the ones that came before it, which is also what finally pushed me over the edge into making a new plugin, is that we now have libraries to build upon that did not exist when other tree plugins were created. Most notably, &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvm&lt;/a&gt;. Building upon shared libraries will go a long way in making neo-tree easy to maintain.&lt;/p&gt; &#xA;&lt;h3&gt;Stable&lt;/h3&gt; &#xA;&lt;p&gt;This project will have releases and release tags that follow a simplified Semantic Versioning scheme. The quickstart instructions will always refer to the latest stable major version. Following the &lt;strong&gt;main&lt;/strong&gt; branch is for contributors and those that always want bleeding edge. There will be branches for &lt;strong&gt;v1.x&lt;/strong&gt;, &lt;strong&gt;v2.x&lt;/strong&gt;, etc which will receive updates after a short testing period in &lt;strong&gt;main&lt;/strong&gt;. You should be safe to follow those branches and be sure your tree won&#39;t break in an update. There will also be tags for each release pushed to those branches named &lt;strong&gt;v1.1&lt;/strong&gt;, &lt;strong&gt;v1.2&lt;/strong&gt;, etc. If stability is critical to you, or a bug accidentally make it into &lt;strong&gt;v1.x&lt;/strong&gt;, you can use those tags instead. It&#39;s possible we may backport bug fixes to those tags, but no garauntees on that.&lt;/p&gt; &#xA;&lt;p&gt;There will never be a breaking change within a major version (1.x, 2.x, etc.) If a breaking change is needed, there will be depracation warnings in the prior major version, and the breaking change will happen in the next major version.&lt;/p&gt; &#xA;&lt;h3&gt;Easy to Customize&lt;/h3&gt; &#xA;&lt;p&gt;Neo-tree follows in the spirit of plugins like &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/noib3/nvim-cokeline&#34;&gt;nvim-cokeline&lt;/a&gt;. Everything will be configurable and take either strings, tables, or functions. You can take sane defaults or build your tree items from scratch. There should be the ability to add any features you can think of through existing hooks in the setup function.&lt;/p&gt; &#xA;&lt;h2&gt;What is a Breaking Change?&lt;/h2&gt; &#xA;&lt;p&gt;As of v1.30, a breaking change is defined as anything that &lt;em&gt;changes&lt;/em&gt; existing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vim commands (&lt;code&gt;:NeoTreeShow&lt;/code&gt;, &lt;code&gt;:NeoTreeReveal&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;configuration options that are passed into the &lt;code&gt;setup()&lt;/code&gt; function&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NeoTree*&lt;/code&gt; highlight groups&lt;/li&gt; &#xA; &lt;li&gt;lua functions exported in the following modules that are not prefixed with &lt;code&gt;_&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.events&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.sources.manager&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.sources.*&lt;/code&gt; (init.lua files)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.sources.*.commands&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.ui.renderer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.utils&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If there are other functions you would like to use that are not yet considered part of the public API, please open an issue so we can discuss it.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are encouraged. Please see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project relies upon these two excellent libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt; for all UI components, including the tree!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt; for backend utilities, such as scanning the filesystem.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The design is heavily inspired by these excellent plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/noib3/nvim-cokeline&#34;&gt;nvim-cokeline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Everything I know about writing a tree control in lua, I learned from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-tree/nvim-web-devicons</title>
    <updated>2023-03-05T01:55:12Z</updated>
    <id>tag:github.com,2023-03-05:/nvim-tree/nvim-web-devicons</id>
    <link href="https://github.com/nvim-tree/nvim-web-devicons" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lua `fork` of vim-web-devicons for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nvim-web-devicons&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;code&gt;lua&lt;/code&gt; fork of &lt;a href=&#34;https://github.com/ryanoasis/vim-devicons&#34;&gt;vim-devicons&lt;/a&gt;. This plugin provides the same icons &lt;em&gt;as well as&lt;/em&gt; colors for each icon.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/wiki/Installing-Neovim&#34;&gt;neovim &amp;gt;=0.7.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;A patched font&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-tree/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use &#39;nvim-tree/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;This adds all the highlight groups for the devicons i.e. it calls &lt;code&gt;vim.api.nvim_set_hl&lt;/code&gt; for all icons this might need to be re-called in a &lt;code&gt;Colorscheme&lt;/code&gt; to re-apply cleared highlights if the color scheme changes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.setup {&#xA; -- your personnal icons can go here (to override)&#xA; -- you can specify color or cterm_color instead of specifying both of them&#xA; -- DevIcon will be appended to `name`&#xA; override = {&#xA;  zsh = {&#xA;    icon = &#34;&#34;,&#xA;    color = &#34;#428850&#34;,&#xA;    cterm_color = &#34;65&#34;,&#xA;    name = &#34;Zsh&#34;&#xA;  }&#xA; };&#xA; -- globally enable different highlight colors per icon (default to true)&#xA; -- if set to false all icons will have the default icon&#39;s color&#xA; color_icons = true;&#xA; -- globally enable default icons (default to false)&#xA; -- will get overriden by `get_icons` option&#xA; default = true;&#xA; -- globally enable &#34;strict&#34; selection of icons - icon will be looked up in&#xA; -- different tables, first by filename, and if not found by extension; this&#xA; -- prevents cases when file doesn&#39;t have any extension but still gets some icon&#xA; -- because its name happened to match some extension (default to false)&#xA; strict = true;&#xA; -- same as `override` but specifically for overrides by filename&#xA; -- takes effect when `strict` is true&#xA; override_by_filename = {&#xA;  [&#34;.gitignore&#34;] = {&#xA;    icon = &#34;&#34;,&#xA;    color = &#34;#f1502f&#34;,&#xA;    name = &#34;Gitignore&#34;&#xA;  }&#xA; };&#xA; -- same as `override` but specifically for overrides by extension&#xA; -- takes effect when `strict` is true&#xA; override_by_extension = {&#xA;  [&#34;log&#34;] = {&#xA;    icon = &#34;&#34;,&#xA;    color = &#34;#81e043&#34;,&#xA;    name = &#34;Log&#34;&#xA;  }&#xA; };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Icon&lt;/h3&gt; &#xA;&lt;p&gt;Get the icon for a given file by passing in the &lt;code&gt;name&lt;/code&gt;, the &lt;code&gt;extension&lt;/code&gt; and an &lt;em&gt;optional&lt;/em&gt; options &lt;code&gt;table&lt;/code&gt;. The name is passed in to check for an exact match e.g. &lt;code&gt;.bashrc&lt;/code&gt; if there is no exact name match the extension is used. Calls &lt;code&gt;.setup()&lt;/code&gt; if it hasn&#39;t already ran.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icon(filename, extension, options)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can used to change how the plugin works the keys include &lt;code&gt;default = &amp;lt;boolean&amp;gt;&lt;/code&gt; and &lt;code&gt;strict = &amp;lt;boolean&amp;gt;&lt;/code&gt;. If the default key is set to true this function will return a default if there is no matching icon. If the strict key is set to true this function will lookup icon specifically by filename, and if not found then specifically by extension, and fallback to default icon if default key is set to true. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icon(filename, extension, { default = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check if the setup function was already called with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.has_loaded()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get icon and color code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;get_icon_color&lt;/code&gt; differs from &lt;code&gt;get_icon&lt;/code&gt; only in the second return value. &lt;code&gt;get_icon_cterm_color&lt;/code&gt; returns cterm color instead of gui color &lt;code&gt;get_icon&lt;/code&gt; returns icon and highlight name. If you want to get color code, you can use this function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local icon, color = require&#39;nvim-web-devicons&#39;.get_icon_color(&#34;init.lua&#34;, &#34;lua&#34;)&#xA;assert(icon == &#34;&#34;)&#xA;assert(color == &#34;#51a0cf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get all icons&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to get all of the registered icons with the &lt;code&gt;get_icons()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icons()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be useful for debugging purposes or for creating custom highlights for each icon.&lt;/p&gt; &#xA;&lt;h3&gt;Set an icon&lt;/h3&gt; &#xA;&lt;p&gt;You can override individual icons with the &lt;code&gt;set_icon({...})&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).set_icon {&#xA;  zsh = {&#xA;    icon = &#34;&#34;,&#xA;    color = &#34;#428850&#34;,&#xA;    cterm_color = &#34;65&#34;,&#xA;    name = &#34;Zsh&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override the default icon with the &lt;code&gt;set_default_icon(icon, color)&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).set_default_icon(&#39;&#39;, &#39;#6d8086&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting icons by filetype&lt;/h3&gt; &#xA;&lt;p&gt;You can get the icon and colors associated with a filetype using the &lt;code&gt;by_filetype&lt;/code&gt; functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).get_icon_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_colors_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_color_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_cterm_color_by_filetype(filetype, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These functions are the same as their counterparts without the &lt;code&gt;_by_filetype&lt;/code&gt; suffix, but they take a filetype instead of a name/extension.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;get_icon_name_by_filetype(filetype)&lt;/code&gt; to get the icon name associated with the filetype.&lt;/p&gt;</summary>
  </entry>
</feed>