<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T02:01:41Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>windwp/nvim-autopairs</title>
    <updated>2022-08-21T02:01:41Z</updated>
    <id>tag:github.com,2022-08-21:/windwp/nvim-autopairs</id>
    <link href="https://github.com/windwp/nvim-autopairs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;autopairs for neovim written by lua&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;nvim-autopairs&lt;/h2&gt; &#xA;&lt;p&gt;A super powerful autopair plugin for Neovim that supports multiple characters.&lt;/p&gt; &#xA;&lt;p&gt;Requires neovim 0.7&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;windwp/nvim-autopairs&#39;&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#34;nvim-autopairs&#34;).setup {}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;&#x9;&#34;windwp/nvim-autopairs&#34;,&#xA;    config = function() require(&#34;nvim-autopairs&#34;).setup {} end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default values&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local disable_filetype = { &#34;TelescopePrompt&#34; }&#xA;local disable_in_macro = false  -- disable when recording or executing a macro&#xA;local disable_in_visualblock = false -- disable when insert after visual block mode&#xA;local ignored_next_char = [=[[%w%%%&#39;%[%&#34;%.]]=]&#xA;local enable_moveright = true&#xA;local enable_afterquote = true  -- add bracket pairs after quote&#xA;local enable_check_bracket_line = true  --- check bracket in same line&#xA;local enable_bracket_in_quote = true --&#xA;local enable_abbr = false -- trigger abbreviation&#xA;local break_undo = true -- switch for basic rule break undo sequence&#xA;local check_ts = false&#xA;local map_cr = true&#xA;local map_bs = true  -- map the &amp;lt;BS&amp;gt; key&#xA;local map_c_h = false  -- Map the &amp;lt;C-h&amp;gt; key to delete a pair&#xA;local map_c_w = false -- map &amp;lt;c-w&amp;gt; to delete a pair if possible&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Override default values&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  disable_filetype = { &#34;TelescopePrompt&#34; , &#34;vim&#34; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mapping &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Before        Input         After&#xA;------------------------------------&#xA;{|}           &amp;lt;CR&amp;gt;          {&#xA;                                |&#xA;                            }&#xA;------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;nvim-cmp&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;h3&gt; You need to add mapping `CR` on nvim-cmp setup. Check readme.md on nvim-cmp repo. &lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- If you want insert `(` after select function or method item&#xA;local cmp_autopairs = require(&#39;nvim-autopairs.completion.cmp&#39;)&#xA;local cmp = require(&#39;cmp&#39;)&#xA;cmp.event:on(&#xA;  &#39;confirm_done&#39;,&#xA;  cmp_autopairs.on_confirm_done()&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can customize the kind of completion to add &lt;code&gt;(&lt;/code&gt; or any character.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local handlers = require(&#39;nvim-autopairs.completion.handlers&#39;)&#xA;&#xA;cmp.event:on(&#xA;  &#39;confirm_done&#39;,&#xA;  cmp_autopairs.on_confirm_done({&#xA;    filetypes = {&#xA;      -- &#34;*&#34; is a alias to all filetypes&#xA;      [&#34;*&#34;] = {&#xA;        [&#34;(&#34;] = {&#xA;          kind = {&#xA;            cmp.lsp.CompletionItemKind.Function,&#xA;            cmp.lsp.CompletionItemKind.Method,&#xA;          },&#xA;          handler = handlers[&#34;*&#34;]&#xA;        }&#xA;      },&#xA;      lua = {&#xA;        [&#34;(&#34;] = {&#xA;          kind = {&#xA;            cmp.lsp.CompletionItemKind.Function,&#xA;            cmp.lsp.CompletionItemKind.Method&#xA;          },&#xA;          ---@param char string&#xA;          ---@param item item completion&#xA;          ---@param bufnr buffer number&#xA;          handler = function(char, item, bufnr)&#xA;            -- Your handler function. Inpect with print(vim.inspect{char, item, bufnr})&#xA;          end&#xA;        }&#xA;      },&#xA;      -- Disable for tex&#xA;      tex = false&#xA;    }&#xA;  })&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Don&#39;t use &lt;code&gt;nil&lt;/code&gt; to disable a filetype. If a filetype is &lt;code&gt;nil&lt;/code&gt; then &lt;code&gt;*&lt;/code&gt; is used as fallback.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;coq_nvim&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local remap = vim.api.nvim_set_keymap&#xA;local npairs = require(&#39;nvim-autopairs&#39;)&#xA;&#xA;npairs.setup({ map_bs = false, map_cr = false })&#xA;&#xA;vim.g.coq_settings = { keymap = { recommended = false } }&#xA;&#xA;-- these mappings are coq recommended mappings unrelated to nvim-autopairs&#xA;remap(&#39;i&#39;, &#39;&amp;lt;esc&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-e&amp;gt;&amp;lt;esc&amp;gt;&#34; : &#34;&amp;lt;esc&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;c-c&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-e&amp;gt;&amp;lt;c-c&amp;gt;&#34; : &#34;&amp;lt;c-c&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;tab&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-n&amp;gt;&#34; : &#34;&amp;lt;tab&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;s-tab&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-p&amp;gt;&#34; : &#34;&amp;lt;bs&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;&#xA;-- skip it, if you use another global object&#xA;_G.MUtils= {}&#xA;&#xA;MUtils.CR = function()&#xA;  if vim.fn.pumvisible() ~= 0 then&#xA;    if vim.fn.complete_info({ &#39;selected&#39; }).selected ~= -1 then&#xA;      return npairs.esc(&#39;&amp;lt;c-y&amp;gt;&#39;)&#xA;    else&#xA;      return npairs.esc(&#39;&amp;lt;c-e&amp;gt;&#39;) .. npairs.autopairs_cr()&#xA;    end&#xA;  else&#xA;    return npairs.autopairs_cr()&#xA;  end&#xA;end&#xA;remap(&#39;i&#39;, &#39;&amp;lt;cr&amp;gt;&#39;, &#39;v:lua.MUtils.CR()&#39;, { expr = true, noremap = true })&#xA;&#xA;MUtils.BS = function()&#xA;  if vim.fn.pumvisible() ~= 0 and vim.fn.complete_info({ &#39;mode&#39; }).mode == &#39;eval&#39; then&#xA;    return npairs.esc(&#39;&amp;lt;c-e&amp;gt;&#39;) .. npairs.autopairs_bs()&#xA;  else&#xA;    return npairs.autopairs_bs()&#xA;  end&#xA;end&#xA;remap(&#39;i&#39;, &#39;&amp;lt;bs&amp;gt;&#39;, &#39;v:lua.MUtils.BS()&#39;, { expr = true, noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;without completion plugin&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- add option map_cr&#xA;npairs.setup({ map_cr = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Completion-plugin&#34;&gt;another completion plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have a problem with indent after you press &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; please check the settings of treesitter indent or install a plugin that has indent support for your filetype.&lt;/p&gt; &#xA;&lt;h3&gt;Rule&lt;/h3&gt; &#xA;&lt;p&gt;nvim-autopairs uses rules with conditions to check pairs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Rule = require(&#39;nvim-autopairs.rule&#39;)&#xA;local npairs = require(&#39;nvim-autopairs&#39;)&#xA;&#xA;npairs.add_rule(Rule(&#34;$$&#34;,&#34;$$&#34;,&#34;tex&#34;))&#xA;&#xA;-- you can use some built-in conditions&#xA;&#xA;local cond = require(&#39;nvim-autopairs.conds&#39;)&#xA;print(vim.inspect(cond))&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;$&#34;, &#34;$&#34;,{&#34;tex&#34;, &#34;latex&#34;})&#xA;    -- don&#39;t add a pair if the next character is %&#xA;    :with_pair(cond.not_after_regex(&#34;%%&#34;))&#xA;    -- don&#39;t add a pair if  the previous character is xxx&#xA;    :with_pair(cond.not_before_regex(&#34;xxx&#34;, 3))&#xA;    -- don&#39;t move right when repeat character&#xA;    :with_move(cond.none())&#xA;    -- don&#39;t delete if the next character is xx&#xA;    :with_del(cond.not_after_regex(&#34;xx&#34;))&#xA;    -- disable adding a newline when you press &amp;lt;cr&amp;gt;&#xA;    :with_cr(cond.none())&#xA;  },&#xA;  -- disable for .vim files, but it work for another filetypes&#xA;  Rule(&#34;a&#34;,&#34;a&#34;,&#34;-vim&#34;)&#xA;)&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;$$&#34;,&#34;$$&#34;,&#34;tex&#34;)&#xA;    :with_pair(function(opts)&#xA;        print(vim.inspect(opts))&#xA;        if opts.line==&#34;aa $$&#34; then&#xA;        -- don&#39;t add pair on that line&#xA;          return false&#xA;        end&#xA;    end)&#xA;   }&#xA;)&#xA;&#xA;-- you can use regex&#xA;-- press u1234 =&amp;gt; u1234number&#xA;npairs.add_rules({&#xA;    Rule(&#34;u%d%d%d%d$&#34;, &#34;number&#34;, &#34;lua&#34;)&#xA;      :use_regex(true)&#xA;})&#xA;&#xA;&#xA;&#xA;-- press x1234 =&amp;gt; x12341234&#xA;npairs.add_rules({&#xA;    Rule(&#34;x%d%d%d%d$&#34;, &#34;number&#34;, &#34;lua&#34;)&#xA;      :use_regex(true)&#xA;      :replace_endpair(function(opts)&#xA;          -- print(vim.inspect(opts))&#xA;          return opts.prev_char:sub(#opts.prev_char - 3,#opts.prev_char)&#xA;      end)&#xA;})&#xA;&#xA;&#xA;-- you can do anything with regex +special key&#xA;-- example press tab to uppercase text:&#xA;-- press b1234s&amp;lt;tab&amp;gt; =&amp;gt; B1234S1234S&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;b%d%d%d%d%w$&#34;, &#34;&#34;, &#34;vim&#34;)&#xA;    :use_regex(true,&#34;&amp;lt;tab&amp;gt;&#34;)&#xA;    :replace_endpair(function(opts)&#xA;          return&#xA;              opts.prev_char:sub(#opts.prev_char - 4,#opts.prev_char)&#xA;              ..&#34;&amp;lt;esc&amp;gt;viwU&#34;&#xA;    end)&#xA;})&#xA;&#xA;-- you can exclude filetypes&#xA;npairs.add_rule(&#xA;  Rule(&#34;$$&#34;,&#34;$$&#34;)&#xA;    :with_pair(cond.not_filetypes({&#34;lua&#34;}))&#xA;)&#xA;--- check ./lua/nvim-autopairs/rules/basic.lua&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Rules-API&#34;&gt;Rules API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Treesitter&lt;/h3&gt; &#xA;&lt;p&gt;You can use treesitter to check for a pair.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local npairs = require(&#34;nvim-autopairs&#34;)&#xA;local Rule = require(&#39;nvim-autopairs.rule&#39;)&#xA;&#xA;npairs.setup({&#xA;    check_ts = true,&#xA;    ts_config = {&#xA;        lua = {&#39;string&#39;},-- it will not add a pair on that treesitter node&#xA;        javascript = {&#39;template_string&#39;},&#xA;        java = false,-- don&#39;t check treesitter on java&#xA;    }&#xA;})&#xA;&#xA;local ts_conds = require(&#39;nvim-autopairs.ts-conds&#39;)&#xA;&#xA;&#xA;-- press % =&amp;gt; %% only while inside a comment or string&#xA;npairs.add_rules({&#xA;  Rule(&#34;%&#34;, &#34;%&#34;, &#34;lua&#34;)&#xA;    :with_pair(ts_conds.is_ts_node({&#39;string&#39;,&#39;comment&#39;})),&#xA;  Rule(&#34;$&#34;, &#34;$&#34;, &#34;lua&#34;)&#xA;    :with_pair(ts_conds.is_not_ts_node({&#39;function&#39;}))&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t add pairs if it already has a close pair in the same line&lt;/h3&gt; &#xA;&lt;p&gt;if &lt;strong&gt;next character&lt;/strong&gt; is a close pair and it doesn&#39;t have an open pair in same line, then it will not add a close pair&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input         After&#xA;------------------------------------&#xA;(  |))         (            (  (|))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  enable_check_bracket_line = false&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t add pairs if the next char is alphanumeric&lt;/h3&gt; &#xA;&lt;p&gt;You can customize how nvim-autopairs will behave if it encounters a specific character&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  ignored_next_char = &#34;[%w%.]&#34; -- will ignore alphanumeric and `.` symbol&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input         After&#xA;------------------------------------&#xA;|foobar        (            (|foobar&#xA;|.foobar       (            (|.foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugin Integration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  require(&#39;nvim-autopairs&#39;).disable()&#xA;  require(&#39;nvim-autopairs&#39;).enable()&#xA;  require(&#39;nvim-autopairs&#39;).remove_rule(&#39;(&#39;) -- remove rule (&#xA;  require(&#39;nvim-autopairs&#39;).clear_rules() -- clear all rules&#xA;  require(&#39;nvim-autopairs&#39;).get_rule(&#39;&#34;&#39;) -- get rule &#34; then modify it&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FastWrap&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input                    After&#xA;--------------------------------------------------&#xA;(|foobar      &amp;lt;M-e&amp;gt; then press $        (|foobar)&#xA;(|)(foobar)   &amp;lt;M-e&amp;gt; then press q       (|(foobar))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- put this to setup function and press &amp;lt;a-e&amp;gt; to use fast_wrap&#xA;npairs.setup({&#xA;    fast_wrap = {},&#xA;})&#xA;&#xA;-- change default fast_wrap&#xA;npairs.setup({&#xA;    fast_wrap = {&#xA;      map = &#39;&amp;lt;M-e&amp;gt;&#39;,&#xA;      chars = { &#39;{&#39;, &#39;[&#39;, &#39;(&#39;, &#39;&#34;&#39;, &#34;&#39;&#34; },&#xA;      pattern = [=[[%&#39;%&#34;%)%&amp;gt;%]%)%}%,]]=],&#xA;      end_key = &#39;$&#39;,&#xA;      keys = &#39;qwertyuiopzxcvbnmasdfghjkl&#39;,&#xA;      check_comma = true,&#xA;      highlight = &#39;Search&#39;,&#xA;      highlight_grey=&#39;Comment&#39;&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;autotag html and tsx&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-ts-autotag&#34;&gt;autotag&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Endwise&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Endwise&#34;&gt;endwise&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom rules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Custom-rules&#34;&gt;rules&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lewis6991/gitsigns.nvim</title>
    <updated>2022-08-21T02:01:41Z</updated>
    <id>tag:github.com,2022-08-21:/lewis6991/gitsigns.nvim</id>
    <link href="https://github.com/lewis6991/gitsigns.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Git integration for buffers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gitsigns.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/lewis6991/gitsigns.nvim/workflows/CI/badge.svg?branch=main&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/lewis6991/gitsigns.nvim&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/gitsigns-nvim/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitsigns-nvim/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Super fast git decorations implemented purely in lua/teal.&lt;/p&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hunk Actions&lt;/th&gt; &#xA;   &lt;th&gt;Line Blame&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_actions.gif&#34; width=&#34;450em&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_blame.gif&#34; width=&#34;450em&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Signs for added, removed, and changed lines&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous using &lt;a href=&#34;https://github.com/luvit/luv/raw/master/docs.md&#34;&gt;luv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigation between hunks&lt;/li&gt; &#xA; &lt;li&gt;Stage hunks (with undo)&lt;/li&gt; &#xA; &lt;li&gt;Preview diffs of hunks (with word diff)&lt;/li&gt; &#xA; &lt;li&gt;Customisable (signs, highlights, mappings, etc)&lt;/li&gt; &#xA; &lt;li&gt;Status bar integration&lt;/li&gt; &#xA; &lt;li&gt;Git blame a specific line using virtual text.&lt;/li&gt; &#xA; &lt;li&gt;Hunk text object&lt;/li&gt; &#xA; &lt;li&gt;Automatically follow files moved in the index.&lt;/li&gt; &#xA; &lt;li&gt;Live intra-line word diff&lt;/li&gt; &#xA; &lt;li&gt;Ability to display deleted/changed lines via virtual lines.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://yadm.io/&#34;&gt;yadm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for detached working trees.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim &amp;gt;= 0.5.0&lt;/p&gt; &lt;p&gt;Note: If you are running a development version of Neovim (aka &lt;code&gt;master&lt;/code&gt;), then breakage may occur if your build is behind latest.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Newish version of git. Older versions may not work with some features.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;lewis6991/gitsigns.nvim&#39;,&#xA;  -- tag = &#39;release&#39; -- To use the latest release&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;lewis6991/gitsigns.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For basic setup with all batteries included:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gitsigns&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt; gitsigns can be setup directly in the plugin spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;lewis6991/gitsigns.nvim&#39;,&#xA;  config = function()&#xA;    require(&#39;gitsigns&#39;).setup()&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configuration can be passed to the setup function. Here is an example with most of the default settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gitsigns&#39;).setup {&#xA;  signs = {&#xA;    add          = {hl = &#39;GitSignsAdd&#39;   , text = &#39;│&#39;, numhl=&#39;GitSignsAddNr&#39;   , linehl=&#39;GitSignsAddLn&#39;},&#xA;    change       = {hl = &#39;GitSignsChange&#39;, text = &#39;│&#39;, numhl=&#39;GitSignsChangeNr&#39;, linehl=&#39;GitSignsChangeLn&#39;},&#xA;    delete       = {hl = &#39;GitSignsDelete&#39;, text = &#39;_&#39;, numhl=&#39;GitSignsDeleteNr&#39;, linehl=&#39;GitSignsDeleteLn&#39;},&#xA;    topdelete    = {hl = &#39;GitSignsDelete&#39;, text = &#39;‾&#39;, numhl=&#39;GitSignsDeleteNr&#39;, linehl=&#39;GitSignsDeleteLn&#39;},&#xA;    changedelete = {hl = &#39;GitSignsChange&#39;, text = &#39;~&#39;, numhl=&#39;GitSignsChangeNr&#39;, linehl=&#39;GitSignsChangeLn&#39;},&#xA;  },&#xA;  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`&#xA;  numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`&#xA;  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`&#xA;  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`&#xA;  watch_gitdir = {&#xA;    interval = 1000,&#xA;    follow_files = true&#xA;  },&#xA;  attach_to_untracked = true,&#xA;  current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`&#xA;  current_line_blame_opts = {&#xA;    virt_text = true,&#xA;    virt_text_pos = &#39;eol&#39;, -- &#39;eol&#39; | &#39;overlay&#39; | &#39;right_align&#39;&#xA;    delay = 1000,&#xA;    ignore_whitespace = false,&#xA;  },&#xA;  current_line_blame_formatter = &#39;&amp;lt;author&amp;gt;, &amp;lt;author_time:%Y-%m-%d&amp;gt; - &amp;lt;summary&amp;gt;&#39;,&#xA;  sign_priority = 6,&#xA;  update_debounce = 100,&#xA;  status_formatter = nil, -- Use default&#xA;  max_file_length = 40000, -- Disable if file is longer than this (in lines)&#xA;  preview_config = {&#xA;    -- Options passed to nvim_open_win&#xA;    border = &#39;single&#39;,&#xA;    style = &#39;minimal&#39;,&#xA;    relative = &#39;cursor&#39;,&#xA;    row = 0,&#xA;    col = 1&#xA;  },&#xA;  yadm = {&#xA;    enable = false&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For information on configuring neovim via lua please see &lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide&#34;&gt;nvim-lua-guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Keymaps&lt;/h3&gt; &#xA;&lt;p&gt;Gitsigns provides an &lt;code&gt;on_attach&lt;/code&gt; callback which can be used to setup buffer mappings.&lt;/p&gt; &#xA;&lt;p&gt;Here is a suggested example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gitsigns&#39;).setup{&#xA;  ...&#xA;  on_attach = function(bufnr)&#xA;    local gs = package.loaded.gitsigns&#xA;&#xA;    local function map(mode, l, r, opts)&#xA;      opts = opts or {}&#xA;      opts.buffer = bufnr&#xA;      vim.keymap.set(mode, l, r, opts)&#xA;    end&#xA;&#xA;    -- Navigation&#xA;    map(&#39;n&#39;, &#39;]c&#39;, function()&#xA;      if vim.wo.diff then return &#39;]c&#39; end&#xA;      vim.schedule(function() gs.next_hunk() end)&#xA;      return &#39;&amp;lt;Ignore&amp;gt;&#39;&#xA;    end, {expr=true})&#xA;&#xA;    map(&#39;n&#39;, &#39;[c&#39;, function()&#xA;      if vim.wo.diff then return &#39;[c&#39; end&#xA;      vim.schedule(function() gs.prev_hunk() end)&#xA;      return &#39;&amp;lt;Ignore&amp;gt;&#39;&#xA;    end, {expr=true})&#xA;&#xA;    -- Actions&#xA;    map({&#39;n&#39;, &#39;v&#39;}, &#39;&amp;lt;leader&amp;gt;hs&#39;, &#39;:Gitsigns stage_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map({&#39;n&#39;, &#39;v&#39;}, &#39;&amp;lt;leader&amp;gt;hr&#39;, &#39;:Gitsigns reset_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hS&#39;, gs.stage_buffer)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hu&#39;, gs.undo_stage_hunk)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hR&#39;, gs.reset_buffer)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hp&#39;, gs.preview_hunk)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hb&#39;, function() gs.blame_line{full=true} end)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tb&#39;, gs.toggle_current_line_blame)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hd&#39;, gs.diffthis)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hD&#39;, function() gs.diffthis(&#39;~&#39;) end)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;td&#39;, gs.toggle_deleted)&#xA;&#xA;    -- Text object&#xA;    map({&#39;o&#39;, &#39;x&#39;}, &#39;ih&#39;, &#39;:&amp;lt;C-U&amp;gt;Gitsigns select_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note this requires Neovim v0.7 which introduces &lt;code&gt;vim.keymap.set&lt;/code&gt;. If you are using Neovim with version prior to v0.7 then use the following:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gitsigns&#39;).setup {&#xA;  ...&#xA;  on_attach = function(bufnr)&#xA;    local function map(mode, lhs, rhs, opts)&#xA;        opts = vim.tbl_extend(&#39;force&#39;, {noremap = true, silent = true}, opts or {})&#xA;        vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, opts)&#xA;    end&#xA;&#xA;    -- Navigation&#xA;    map(&#39;n&#39;, &#39;]c&#39;, &#34;&amp;amp;diff ? &#39;]c&#39; : &#39;&amp;lt;cmd&amp;gt;Gitsigns next_hunk&amp;lt;CR&amp;gt;&#39;&#34;, {expr=true})&#xA;    map(&#39;n&#39;, &#39;[c&#39;, &#34;&amp;amp;diff ? &#39;[c&#39; : &#39;&amp;lt;cmd&amp;gt;Gitsigns prev_hunk&amp;lt;CR&amp;gt;&#39;&#34;, {expr=true})&#xA;&#xA;    -- Actions&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, &#39;:Gitsigns stage_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, &#39;:Gitsigns stage_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, &#39;:Gitsigns reset_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, &#39;:Gitsigns reset_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hS&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns stage_buffer&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hu&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns undo_stage_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hR&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns reset_buffer&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hp&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns preview_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hb&#39;, &#39;&amp;lt;cmd&amp;gt;lua require&#34;gitsigns&#34;.blame_line{full=true}&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tb&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns toggle_current_line_blame&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hd&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns diffthis&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hD&#39;, &#39;&amp;lt;cmd&amp;gt;lua require&#34;gitsigns&#34;.diffthis(&#34;~&#34;)&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;td&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns toggle_deleted&amp;lt;CR&amp;gt;&#39;)&#xA;&#xA;    -- Text object&#xA;    map(&#39;o&#39;, &#39;ih&#39;, &#39;:&amp;lt;C-U&amp;gt;Gitsigns select_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;x&#39;, &#39;ih&#39;, &#39;:&amp;lt;C-U&amp;gt;Gitsigns select_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Non-Goals&lt;/h2&gt; &#xA;&lt;h3&gt;Implement every feature in &lt;a href=&#34;https://github.com/tpope/vim-fugitive&#34;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This plugin is actively developed and by one of the most well regarded vim plugin developers. Gitsigns will only implement features of this plugin if: it is simple, or, the technologies leveraged by Gitsigns (LuaJIT, Libuv, Neovim&#39;s API, etc) can provide a better experience.&lt;/p&gt; &#xA;&lt;h3&gt;Support for other VCS&lt;/h3&gt; &#xA;&lt;p&gt;There aren&#39;t any active developers of this plugin who use other kinds of VCS, so adding support for them isn&#39;t feasible. However a well written PR with a commitment of future support could change this.&lt;/p&gt; &#xA;&lt;h2&gt;Status Line&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;b:gitsigns_status&lt;/code&gt; or &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt;. &lt;code&gt;b:gitsigns_status&lt;/code&gt; is formatted using &lt;code&gt;config.status_formatter&lt;/code&gt;. &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt; is a dictionary with the keys &lt;code&gt;added&lt;/code&gt;, &lt;code&gt;removed&lt;/code&gt;, &lt;code&gt;changed&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;set statusline+=%{get(b:,&#39;gitsigns_status&#39;,&#39;&#39;)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the current branch use the variable &lt;code&gt;b:gitsigns_head&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison with &lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;vim-gitgutter&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;gitsigns&lt;/th&gt; &#xA;   &lt;th&gt;gitgutter&lt;/th&gt; &#xA;   &lt;th&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shows signs for added, modified, and removed lines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Asynchronous&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Runs diffs in-process (no IO or pipes)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;* Via &lt;a href=&#34;https://github.com/neovim/neovim/pull/14536&#34;&gt;lua&lt;/a&gt; or FFI.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Only adds signs for drawn lines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;* Via Neovims decoration API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Updates immediately&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;* Triggered on CursorHold&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ensures signs are always up to date&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;* Watches the git dir to do so&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Never saves the buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;span&gt;❗&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;* Writes &lt;a href=&#34;https://github.com/airblade/vim-gitgutter/raw/0f98634b92da9a35580b618c11a6d2adc42d9f90/autoload/gitgutter/diff.vim#L106&#34;&gt;buffer&lt;/a&gt; (and index) to short lived temp files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Quick jumping between hunks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stage/reset/preview individual hunks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stage/reset hunks in range/selection&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;span&gt;❗&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;* Only stage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stage/reset all hunks in buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Undo staged hunks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Word diff in buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Word diff in hunk preview&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Show deleted/changes lines directly in buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;* Via &lt;a href=&#34;https://github.com/neovim/neovim/pull/15351&#34;&gt;virtual lines&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stage partial hunks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hunk text object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Diff against index or any commit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Folding of unchanged text&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fold text showing whether folded lines have been changed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Load hunk locations into the quickfix or location list&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Optional line highlighting&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Optional line number highlighting&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Optional counts on signs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Customizable signs and mappings&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Customizable extra diff arguments&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Can be toggled globally or per buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;* Through the detach/attach functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Statusline integration&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Works with &lt;a href=&#34;https://yadm.io/&#34;&gt;yadm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Live blame in buffer (using virtual text)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Blame preview&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Automatically follows open files moved with &lt;code&gt;git mv&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CLI with completion&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;* Provides individual commands for some actions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Open diffview with any revision/commit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;As of 2021-07-05&lt;/p&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/tpope/vim-repeat&#34;&gt;vim-repeat&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If installed, &lt;code&gt;stage_hunk()&lt;/code&gt; and &lt;code&gt;reset_hunk()&lt;/code&gt; are repeatable with the &lt;code&gt;.&lt;/code&gt; (dot) operator.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/tpope/vim-fugitive&#34;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When viewing revisions of a file (via &lt;code&gt;:0Gclog&lt;/code&gt; for example), Gitsigns will attach to the fugitive buffer with the base set to the commit immediately before the commit of that revision. This means the signs placed in the buffer reflect the changes introduced by that revision of the file.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;null-ls&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Null-ls can provide code actions from Gitsigns. To setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;&#xA;null_ls.setup {&#xA;  sources = {&#xA;    null_ls.builtins.code_actions.gitsigns,&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will enable &lt;code&gt;:lua vim.lsp.buf.code_action()&lt;/code&gt; to retrieve code actions from Gitsigns.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If installed and enabled (via &lt;code&gt;config.trouble&lt;/code&gt;; defaults to true if installed), &lt;code&gt;:Gitsigns setqflist&lt;/code&gt; or &lt;code&gt;:Gitsigns seqloclist&lt;/code&gt; will open Trouble instead of Neovim&#39;s built-in quickfix or location list windows.&lt;/p&gt; &#xA;&lt;h2&gt;Similar plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neoclide/coc-git&#34;&gt;coc-git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;vim-gitgutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-signify&#34;&gt;vim-signify&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ThePrimeagen/refactoring.nvim</title>
    <updated>2022-08-21T02:01:41Z</updated>
    <id>tag:github.com,2022-08-21:/ThePrimeagen/refactoring.nvim</id>
    <link href="https://github.com/ThePrimeagen/refactoring.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Refactoring library based off the Refactoring book by Martin Fowler&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;refactoring.nvim&lt;/h1&gt; &#xA; &lt;h5&gt;The Refactoring library based off the Refactoring book by Martin Fowler&lt;/h5&gt; &#xA; &lt;h6&gt;&#39;If I use an environment that has good automated refactorings, I can trust those refactorings&#39; - Martin Fowler&lt;/h6&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://www.lua.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://neovim.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim%20Nightly-green.svg?style=for-the-badge&amp;amp;logo=neovim&#34; alt=&#34;Neovim Nightly&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Work%20In%20Progress-orange?style=for-the-badge&#34; alt=&#34;Work In Progress&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#packer&#34;&gt;Setup Using Packer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#supported-languages&#34;&gt;Supported Languages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#refactoring-features&#34;&gt;Refactoring Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#debug-features&#34;&gt;Debug Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring&#34;&gt;Configuration for Refactoring Operations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring-direct&#34;&gt;Using Direct Remaps&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring-builtin&#34;&gt;Using Built-In Neovim Selection&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring-telescope&#34;&gt;Using Telescope&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug&#34;&gt;Configuration for Debug Operations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug-stringification&#34;&gt;Customizing Printf and Print Var Statements&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug-stringification-printf&#34;&gt;Customizing Printf Statements&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug-stringification-print-var&#34;&gt;Customizing Print Var Statements&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-prompt&#34;&gt;Configuration for Type Prompt Operations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;a name=&#34;installation&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;a name=&#34;requirements&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neovim Nightly&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Treesitter&lt;/li&gt; &#xA; &lt;li&gt;Plenary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup Using Packer&lt;a name=&#34;packer&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;ThePrimeagen/refactoring.nvim&#34;,&#xA;    requires = {&#xA;        {&#34;nvim-lua/plenary.nvim&#34;},&#xA;        {&#34;nvim-treesitter/nvim-treesitter&#34;}&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;a name=&#34;features&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Supported Languages&lt;a name=&#34;supported-languages&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Given that this is a work in progress, the languages supported for the operations listed below is &lt;strong&gt;constantly changing&lt;/strong&gt;. As of now, these languages are supported (with individual support for each function may vary):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TypeScript&lt;/li&gt; &#xA; &lt;li&gt;JavaScript&lt;/li&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA; &lt;li&gt;C/C++&lt;/li&gt; &#xA; &lt;li&gt;Golang&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Ruby&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Refactoring Features&lt;a name=&#34;refactoring-features&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for various common refactoring operations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;106: Extract Function&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Extracts the last highlighted code from visual mode to a separate function&lt;/li&gt; &#xA;     &lt;li&gt;Optionally prompts for function param types and return types (see &lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-prompt&#34;&gt;configuration for type prompt operations&lt;/a&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;Also possible to Extract Block.&lt;/li&gt; &#xA;     &lt;li&gt;Both Extract Function and Extract Block have the capability to extract to a separate file.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;119: Extract Variable&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;In visual mode, extracts occurences of a selected expression to its own variable, replacing occurences of that expression with the variable&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;123: Inline Variable&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Inverse of extract variable&lt;/li&gt; &#xA;     &lt;li&gt;Replaces all occurences of a variable with its value&lt;/li&gt; &#xA;     &lt;li&gt;Can be used in normal mode or visual mode &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Using this function in normal mode will automatically find the variable under the cursor and inline it&lt;/li&gt; &#xA;       &lt;li&gt;Using this function in visual mode will find the variable(s) in the visual selection. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;If there is more than one variable in the selection, the plugin will prompt for which variable to inline,&lt;/li&gt; &#xA;         &lt;li&gt;If there is only one variable in the visual selection, it will automatically inline that variable&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debug Features&lt;a name=&#34;debug-features&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Also comes with various useful features for debugging &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Printf:&lt;/strong&gt; Automated insertion of print statement to mark the calling of a function&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Print var:&lt;/strong&gt; Automated insertion of print statement to print a variable at a given point in the code. This map can be made with either visual or normal mode: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Using this function in visual mode will print out whatever is in the visual selection.&lt;/li&gt; &#xA;     &lt;li&gt;Passing &lt;code&gt;{ normal = true }&lt;/code&gt; to the function will automatically find the variable under the cursor and print it from normal mode without needing visual mode at all&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Cleanup:&lt;/strong&gt; Automated cleanup of all print statements generated by the plugin&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;a name=&#34;configuration&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways to configure this plugin. Below are some example configurations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Setup Function&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;No matter which configuration option you use, you must first call the setup function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;refactoring&#39;).setup({})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are all the available options for the setup function and their defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;refactoring&#39;).setup({&#xA;    prompt_func_return_type = {&#xA;        go = false,&#xA;        java = false,&#xA;&#xA;        cpp = false,&#xA;        c = false,&#xA;        h = false,&#xA;        hpp = false,&#xA;        cxx = false,&#xA;    },&#xA;    prompt_func_param_type = {&#xA;        go = false,&#xA;        java = false,&#xA;&#xA;        cpp = false,&#xA;        c = false,&#xA;        h = false,&#xA;        hpp = false,&#xA;        cxx = false,&#xA;    },&#xA;    printf_statements = {},&#xA;    print_var_statements = {},&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See each of the sections below for details on each configuration option.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration for Refactoring Operations&lt;a name=&#34;config-refactoring&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Using Direct Remaps&lt;a name=&#34;config-refactoring-direct&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you want to make remaps for a specific refactoring operation, you can do so by configuring the plugin like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Remaps for the refactoring operations currently offered by the plugin&#xA;vim.api.nvim_set_keymap(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;re&#34;, [[ &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Extract Function&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;vim.api.nvim_set_keymap(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;rf&#34;, [[ &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Extract Function To File&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;vim.api.nvim_set_keymap(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;rv&#34;, [[ &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Extract Variable&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;vim.api.nvim_set_keymap(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;ri&#34;, [[ &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Inline Variable&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;&#xA;-- Extract block doesn&#39;t need visual mode&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;rb&#34;, [[ &amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Extract Block&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;rbf&#34;, [[ &amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Extract Block To File&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;&#xA;-- Inline variable can also pick up the identifier currently under the cursor without visual mode&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;ri&#34;, [[ &amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Inline Variable&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that these maps (except the last two) are &lt;strong&gt;visual mode&lt;/strong&gt; remaps, and that ESC is pressed before executing the command. As of now, these are both necessary for the plugin to work.&lt;/p&gt; &#xA;&lt;h4&gt;Using Built-In Neovim Selection&lt;a name=&#34;config-refactoring-builtin&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can also set up the plugin to prompt for a refactoring operation to apply using Neovim&#39;s built in selection API. Here is an example remap to demonstrate this functionality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- prompt for a refactor to apply when the remap is triggered&#xA;vim.api.nvim_set_keymap(&#xA;    &#34;v&#34;,&#xA;    &#34;&amp;lt;leader&amp;gt;rr&#34;,&#xA;    &#34;:lua require(&#39;refactoring&#39;).select_refactor()&amp;lt;CR&amp;gt;&#34;,&#xA;    { noremap = true, silent = true, expr = false }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This remap should also be made in &lt;strong&gt;visual mode&lt;/strong&gt;, or functionality for some refactors will not work properly.&lt;/p&gt; &#xA;&lt;h4&gt;Using Telescope&lt;a name=&#34;config-refactoring-telescope&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you would prefer to use Telescope to choose a refactor when you&#39;re in visual mode, you can do so use using the &lt;strong&gt;Telescope extension.&lt;/strong&gt; Here is an example config for this setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- load refactoring Telescope extension&#xA;require(&#34;telescope&#34;).load_extension(&#34;refactoring&#34;)&#xA;&#xA;-- remap to open the Telescope refactoring menu in visual mode&#xA;vim.api.nvim_set_keymap(&#xA;&#x9;&#34;v&#34;,&#xA;&#x9;&#34;&amp;lt;leader&amp;gt;rr&#34;,&#xA;&#x9;&#34;&amp;lt;Esc&amp;gt;&amp;lt;cmd&amp;gt;lua require(&#39;telescope&#39;).extensions.refactoring.refactors()&amp;lt;CR&amp;gt;&#34;,&#xA;&#x9;{ noremap = true }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration for Debug Operations&lt;a name=&#34;config-debug&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Finally, you can configure remaps for the debug operations of this plugin like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- You can also use below = true here to to change the position of the printf&#xA;-- statement (or set two remaps for either one). This remap must be made in normal mode.&#xA;vim.api.nvim_set_keymap(&#xA;&#x9;&#34;n&#34;,&#xA;&#x9;&#34;&amp;lt;leader&amp;gt;rp&#34;,&#xA;&#x9;&#34;:lua require(&#39;refactoring&#39;).debug.printf({below = false})&amp;lt;CR&amp;gt;&#34;,&#xA;&#x9;{ noremap = true }&#xA;)&#xA;&#xA;-- Print var&#xA;&#xA;-- Remap in normal mode and passing { normal = true } will automatically find the variable under the cursor and print it&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;rv&#34;, &#34;:lua require(&#39;refactoring&#39;).debug.print_var({ normal = true })&amp;lt;CR&amp;gt;&#34;, { noremap = true })&#xA;-- Remap in visual mode will print whatever is in the visual selection&#xA;vim.api.nvim_set_keymap(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;rv&#34;, &#34;:lua require(&#39;refactoring&#39;).debug.print_var({})&amp;lt;CR&amp;gt;&#34;, { noremap = true })&#xA;&#xA;-- Cleanup function: this remap should be made in normal mode&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;rc&#34;, &#34;:lua require(&#39;refactoring&#39;).debug.cleanup({})&amp;lt;CR&amp;gt;&#34;, { noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customizing Printf and Print Var Statements&lt;a name=&#34;config-debug-stringification&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to override the statements used in the printf and print var functionalities.&lt;/p&gt; &#xA;&lt;h5&gt;Customizing Printf Statements&lt;a name=&#34;config-debug-stringification-printf&#34;&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;You can add to the printf statements for any language by adding something like the below to your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;refactoring&#39;).setup({&#xA;  -- overriding printf statement for cpp&#xA;  printf_statements = {&#xA;      -- add a custom printf statement for cpp&#xA;      cpp = {&#xA;          &#39;std::cout &amp;lt;&amp;lt; &#34;%s&#34; &amp;lt;&amp;lt; std::endl;&#39;&#xA;      }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In any custom printf statement, it is possible to optionally add a max of &lt;strong&gt;one %s&lt;/strong&gt; pattern, which is where the debug path will go. For an example custom printf statement, go to &lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/lua/refactoring/tests/debug/printf&#34;&gt;this folder&lt;/a&gt;, select your language, and click on &lt;code&gt;multiple-statements/printf.config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Customizing Print Var Statements&lt;a name=&#34;config-debug-stringification-print-var&#34;&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The print var functionality can also be extended for any given language, as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;refactoring&#39;).setup({&#xA;  -- overriding printf statement for cpp&#xA;  print_var_statements = {&#xA;      -- add a custom print var statement for cpp&#xA;      cpp = {&#xA;          &#39;printf(&#34;a custom statement %%s %s&#34;, %s)&#39;&#xA;      }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In any custom print var statement, it is possible to optionally add a max of &lt;strong&gt;two %s&lt;/strong&gt; patterns, which is where the debug path and the actual variable reference will go, respectively. To add a literal &#34;%s&#34; to the string, escape the sequence like this: &lt;code&gt;%%s&lt;/code&gt;. For an example custom print var statement, go to &lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/lua/refactoring/tests/debug/print_var&#34;&gt;this folder&lt;/a&gt;, select your language, and view &lt;code&gt;multiple-statements/print_var.config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; for either of these functions, if you have multiple custom statements, the plugin will prompt for which one should be inserted. If you just have one custom statement in your config, it will override the default automatically.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration for Type Prompt Operations&lt;a name=&#34;config-prompt&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For certain languages like Golang, types are required for functions that return an object(s) and parameters of functions. Unfortunately, for some parameters and functions there is no way to automatically find their type. In those instances, we want to provide a way to input a type instead of inserting a placeholder value.&lt;/p&gt; &#xA;&lt;p&gt;By default all prompts are turned off. The configuration below shows how to enable prompts for all the languages currently supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;refactoring&#39;).setup({&#xA;    -- prompt for return type&#xA;    prompt_func_return_type = {&#xA;        go = true,&#xA;        cpp = true,&#xA;        c = true,&#xA;        java = true,&#xA;    },&#xA;    -- prompt for function parameters&#xA;    prompt_func_param_type = {&#xA;        go = true,&#xA;        cpp = true,&#xA;        c = true,&#xA;        java = true,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>