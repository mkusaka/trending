<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-24T01:55:20Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stevearc/conform.nvim</title>
    <updated>2023-09-24T01:55:20Z</updated>
    <id>tag:github.com,2023-09-24:/stevearc/conform.nvim</id>
    <link href="https://github.com/stevearc/conform.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight yet powerful formatter plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;conform.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Lightweight yet powerful formatter plugin for Neovim&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatters&#34;&gt;Formatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#recipes&#34;&gt;Recipes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatopts-callback&#34;&gt;format(opts, callback)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#list_formattersbufnr&#34;&gt;list_formatters(bufnr)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#list_all_formatters&#34;&gt;list_all_formatters()&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#get_formatter_infoformatter-bufnr&#34;&gt;get_formatter_info(formatter, bufnr)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#will_fallback_lspoptions&#34;&gt;will_fallback_lsp(options)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.8+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preserves extmarks and folds&lt;/strong&gt; - Most formatters replace the entire buffer, which clobbers extmarks and folds, and can cause the viewport and cursor to jump unexpectedly. Conform calculates minimal diffs and applies them using the built-in LSP format utilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fixes bad-behaving LSP formatters&lt;/strong&gt; - Some LSP servers are lazy and simply replace the entire buffer, leading to the problems mentioned above. Conform hooks into the LSP handler and turns these responses into proper piecewise changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enables range formatting for all formatters&lt;/strong&gt; - Since conform calculates minimal diffs, it can perform range formatting even if the underlying formatter doesn&#39;t support it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple API&lt;/strong&gt; - Conform exposes a simple, imperative API modeled after &lt;code&gt;vim.lsp.buf.format()&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;conform.nvim supports all the usual plugin managers&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lazy.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;stevearc/conform.nvim&#39;,&#xA;  opts = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;packer&#39;).startup(function()&#xA;    use {&#xA;      &#39;stevearc/conform.nvim&#39;,&#xA;      config = function() require(&#39;conform&#39;).setup() end&#xA;    }&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Paq&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    {&#39;stevearc/conform.nvim&#39;};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;stevearc/conform.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dein&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;stevearc/conform.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pathogen&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/conform.nvim.git ~/.vim/bundle/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/conform.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/conform/start/conform.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;At a minimum, you will need to set up some formatters by filetype&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).setup({&#xA;    formatters_by_ft = {&#xA;        lua = { &#34;stylua&#34; },&#xA;        -- Conform will run multiple formatters sequentially&#xA;        python = { &#34;isort&#34;, &#34;black&#34; },&#xA;        -- Use a sub-list to run only the first available formatter&#xA;        javascript = { { &#34;prettierd&#34;, &#34;prettier&#34; } },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use &lt;code&gt;conform.format()&lt;/code&gt; just like you would &lt;code&gt;vim.lsp.buf.format()&lt;/code&gt;. For example, to format on save:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#34;BufWritePre&#34;, {&#xA;    pattern = &#34;*&#34;,&#xA;    callback = function(args)&#xA;        require(&#34;conform&#34;).format({ bufnr = args.buf })&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a shortcut, conform will optionally set up this format-on-save autocmd for you&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).setup({&#xA;    format_on_save = {&#xA;        -- These options will be passed to conform.format()&#xA;        timeout_ms = 500,&#xA;        lsp_fallback = true,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatopts-callback&#34;&gt;conform.format()&lt;/a&gt; for more details about the parameters.&lt;/p&gt; &#xA;&lt;p&gt;Conform also provides a formatexpr, same as the LSP client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.o.formatexpr = &#34;v:lua.require&#39;conform&#39;.formatexpr()&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view configured and available formatters, as well as to see the log file, run &lt;code&gt;:ConformInfo&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Formatters&lt;/h2&gt; &#xA;&lt;!-- FORMATTERS --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kamadorueda.com/alejandra/&#34;&gt;alejandra&lt;/a&gt; - The Uncompromising Nix Code Formatter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyCQA/autoflake&#34;&gt;autoflake&lt;/a&gt; - Removes unused imports and unused variables as reported by pyflakes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hhatto/autopep8&#34;&gt;autopep8&lt;/a&gt; - A tool that automatically formats Python code to conform to the PEP 8 style guide.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lovesegfault/beautysh&#34;&gt;beautysh&lt;/a&gt; - A Bash beautifier for the masses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FlamingTempura/bibtex-tidy&#34;&gt;bibtex-tidy&lt;/a&gt; - Cleaner and Formatter for BibTeX files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/biomejs/biome&#34;&gt;biome&lt;/a&gt; - A toolchain for web projects, aimed to provide functionalities to maintain them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/psf/black&#34;&gt;black&lt;/a&gt; - The uncompromising Python code formatter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://buf.build/docs/reference/cli/buf/format&#34;&gt;buf&lt;/a&gt; - A new way of working with Protocol Buffers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/process/clang-format.html&#34;&gt;clang_format&lt;/a&gt; - Tool to format C/C++/… code according to a set of rules and heuristics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greglook/cljstyle&#34;&gt;cljstyle&lt;/a&gt; - Formatter for Clojure code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cheshirekow/cmake_format&#34;&gt;cmake_format&lt;/a&gt; - Parse cmake listfiles and format them nicely.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codespell-project/codespell&#34;&gt;codespell&lt;/a&gt; - Check code for common misspellings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/dart-format&#34;&gt;dart_format&lt;/a&gt; - Replace the whitespace in your program with formatting that follows Dart guidelines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deno.land/manual/tools/formatter&#34;&gt;deno_fmt&lt;/a&gt; - Use &lt;a href=&#34;https://deno.land/&#34;&gt;Deno&lt;/a&gt; to format TypeScript, JavaScript/JSON and markdown.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dlang-community/dfmt&#34;&gt;dfmt&lt;/a&gt; - Formatter for D source code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Riverside-Healthcare/djLint&#34;&gt;djlint&lt;/a&gt; - ✨ HTML Template Linter and Formatter. Django - Jinja - Nunjucks - Handlebars - GoLang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dprint/dprint&#34;&gt;dprint&lt;/a&gt; - Pluggable and configurable code formatting platform written in Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/avh4/elm-format&#34;&gt;elm_format&lt;/a&gt; - elm-format formats Elm source code according to a standard set of rules based on the official &lt;a href=&#34;https://elm-lang.org/docs/style-guide&#34;&gt;Elm Style Guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nebulab/erb-formatter&#34;&gt;erb_format&lt;/a&gt; - Format ERB files with speed and precision.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mantoni/eslint_d.js/&#34;&gt;eslint_d&lt;/a&gt; - Like ESLint, but faster.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fishshell.com/docs/current/cmds/fish_indent.html&#34;&gt;fish_indent&lt;/a&gt; - Indent or otherwise prettify a piece of fish code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Scony/godot-gdscript-toolkit&#34;&gt;gdformat&lt;/a&gt; - A formatter for Godot&#39;s gdscript.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/cmd/gofmt&#34;&gt;gofmt&lt;/a&gt; - Formats go programs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mvdan/gofumpt&#34;&gt;gofumpt&lt;/a&gt; - Enforce a stricter format than gofmt, while being backwards compatible. That is, gofumpt is happy with a subset of the formats that gofmt is happy with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/cmd/goimports&#34;&gt;goimports&lt;/a&gt; - Updates your Go import lines, adding missing ones and removing unreferenced ones.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/segmentio/golines&#34;&gt;golines&lt;/a&gt; - A golang formatter that fixes long lines&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/threedaymonk/htmlbeautifier&#34;&gt;htmlbeautifier&lt;/a&gt; - A normaliser/beautifier for HTML that also understands embedded Ruby. Ideal for tidying up Rails templates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/indent/&#34;&gt;indent&lt;/a&gt; - GNU Indent&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyCQA/isort&#34;&gt;isort&lt;/a&gt; - Python utility / library to sort imports alphabetically and automatically separate them into sections and by type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stedolan/jq&#34;&gt;jq&lt;/a&gt; - Command-line JSON processor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cmhughes/latexindent.pl&#34;&gt;latexindent&lt;/a&gt; - A perl script for formatting LaTeX files that is generally included in major TeX distributions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DavidAnson/markdownlint&#34;&gt;markdownlint&lt;/a&gt; - A Node.js style checker and lint tool for Markdown/CommonMark files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/executablebooks/mdformat&#34;&gt;mdformat&lt;/a&gt; - An opinionated Markdown formatter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/serokell/nixfmt&#34;&gt;nixfmt&lt;/a&gt; - nixfmt is a formatter for Nix code, intended to apply a uniform style.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nix-community/nixpkgs-fmt&#34;&gt;nixpkgs_fmt&lt;/a&gt; - nixpkgs-fmt is a Nix code formatter for nixpkgs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ocaml-ppx/ocamlformat&#34;&gt;ocamlformat&lt;/a&gt; - Auto-formatter for OCaml code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/perl-ide/App-perlimports&#34;&gt;perlimports&lt;/a&gt; - Make implicit Perl imports explicit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/perltidy/perltidy&#34;&gt;perltidy&lt;/a&gt; - Perl::Tidy, a source code formatter for Perl&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/darold/pgFormatter&#34;&gt;pg_format&lt;/a&gt; - PostgreSQL SQL syntax beautifier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;prettier&lt;/a&gt; - Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fsouza/prettierd&#34;&gt;prettierd&lt;/a&gt; - prettier, as a daemon, for ludicrous formatting speed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;rubocop&lt;/a&gt; - Ruby static code analyzer and formatter, based on the community Ruby style guide.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.ruff.rs/docs/&#34;&gt;ruff_fix&lt;/a&gt; - An extremely fast Python linter, written in Rust. Fix lint errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.ruff.rs/docs/&#34;&gt;ruff_format&lt;/a&gt; - An extremely fast Python linter, written in Rust. Formatter subcommand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rustfmt&#34;&gt;rustfmt&lt;/a&gt; - A tool for formatting rust code according to style guidelines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/avencera/rustywind&#34;&gt;rustywind&lt;/a&gt; - A tool for formatting Tailwind CSS classes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scalameta/scalafmt&#34;&gt;scalafmt&lt;/a&gt; - Code formatter for Scala.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;shellcheck&lt;/a&gt; - A static analysis tool for shell scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anordal/shellharden&#34;&gt;shellharden&lt;/a&gt; - The corrective bash syntax highlighter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt; - A shell parser, formatter, and interpreter with &lt;code&gt;bash&lt;/code&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sql-formatter-org/sql-formatter&#34;&gt;sql_formatter&lt;/a&gt; - A whitespace formatter for different query languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/coreutils/manual/html_node/cat-invocation.html#cat-invocation&#34;&gt;squeeze_blanks&lt;/a&gt; - Squeeze repeated blank lines into a single blank line via &lt;code&gt;cat -s&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stylelint/stylelint&#34;&gt;stylelint&lt;/a&gt; - A mighty CSS linter that helps you avoid errors and enforce conventions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JohnnyMorganz/StyLua&#34;&gt;stylua&lt;/a&gt; - An opinionated code formatter for Lua.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-format&#34;&gt;swift_format&lt;/a&gt; - Swift formatter from apple. Requires building from source with &lt;code&gt;swift build&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;swiftformat&lt;/a&gt; - SwiftFormat is a code library and command-line tool for reformatting &lt;code&gt;swift&lt;/code&gt; code on macOS or Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tamasfe/taplo&#34;&gt;taplo&lt;/a&gt; - A TOML toolkit written in Rust&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.terraform.io/docs/cli/commands/fmt.html&#34;&gt;terraform_fmt&lt;/a&gt; - The terraform-fmt command rewrites &lt;code&gt;terraform&lt;/code&gt; configuration files to a canonical format and style.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/gawk/manual/gawk.html&#34;&gt;trim_newlines&lt;/a&gt; - Trim new lines with awk&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/gawk/manual/gawk.html&#34;&gt;trim_whitespace&lt;/a&gt; - Trim whitespaces with awk&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uncrustify/uncrustify&#34;&gt;uncrustify&lt;/a&gt; - A source code beautifier for C, C++, C#, ObjectiveC, D, Java, Pawn and Vala.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pamoller/xmlformatter&#34;&gt;xmlformat&lt;/a&gt; - xmlformatter is an Open Source Python package, which provides formatting of XML documents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lyz-code/yamlfix&#34;&gt;yamlfix&lt;/a&gt; - A configurable YAML formatter that keeps comments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/yamlfmt&#34;&gt;yamlfmt&lt;/a&gt; - yamlfmt is an extensible command line tool or library to format yaml files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/yapf&#34;&gt;yapf&lt;/a&gt; - Yet Another Python Formatter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ziglang/zig&#34;&gt;zigfmt&lt;/a&gt; - Reformat Zig source into canonical form.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /FORMATTERS --&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;A complete list of all configuration options&lt;/p&gt; &#xA;&lt;!-- OPTIONS --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).setup({&#xA;  -- Map of filetype to formatters&#xA;  formatters_by_ft = {&#xA;    lua = { &#34;stylua&#34; },&#xA;    -- Conform will run multiple formatters sequentially&#xA;    python = { &#34;isort&#34;, &#34;black&#34; },&#xA;    -- Use a sub-list to run only the first available formatter&#xA;    javascript = { { &#34;prettierd&#34;, &#34;prettier&#34; } },&#xA;    -- Use the &#34;*&#34; filetype to run formatters on all filetypes.&#xA;    [&#34;*&#34;] = { &#34;codespell&#34; },&#xA;    -- Use the &#34;_&#34; filetype to run formatters on filetypes that don&#39;t&#xA;    -- have other formatters configured.&#xA;    [&#34;_&#34;] = { &#34;trim_whitespace&#34; },&#xA;  },&#xA;  -- If this is set, Conform will run the formatter on save.&#xA;  -- It will pass the table to conform.format().&#xA;  -- This can also be a function that returns the table.&#xA;  format_on_save = {&#xA;    -- I recommend these options. See :help conform.format for details.&#xA;    lsp_fallback = true,&#xA;    timeout_ms = 500,&#xA;  },&#xA;  -- If this is set, Conform will run the formatter asynchronously after save.&#xA;  -- It will pass the table to conform.format().&#xA;  -- This can also be a function that returns the table.&#xA;  format_after_save = {&#xA;    lsp_fallback = true,&#xA;  },&#xA;  -- Set the log level. Use `:ConformInfo` to see the location of the log file.&#xA;  log_level = vim.log.levels.ERROR,&#xA;  -- Conform will notify you when a formatter errors&#xA;  notify_on_error = true,&#xA;  -- Define custom formatters here&#xA;  formatters = {&#xA;    my_formatter = {&#xA;      -- This can be a string or a function that returns a string&#xA;      command = &#34;my_cmd&#34;,&#xA;      -- OPTIONAL - all fields below this are optional&#xA;      -- A list of strings, or a function that returns a list of strings&#xA;      -- Return a single string instead to run the command in a shell&#xA;      args = { &#34;--stdin-from-filename&#34;, &#34;$FILENAME&#34; },&#xA;      -- If the formatter supports range formatting, create the range arguments here&#xA;      range_args = function(ctx)&#xA;        return { &#34;--line-start&#34;, ctx.range.start[1], &#34;--line-end&#34;, ctx.range[&#34;end&#34;][1] }&#xA;      end,&#xA;      -- Send file contents to stdin, read new contents from stdout (default true)&#xA;      -- When false, will create a temp file (will appear in &#34;$FILENAME&#34; args). The temp&#xA;      -- file is assumed to be modified in-place by the format command.&#xA;      stdin = true,&#xA;      -- A function that calculates the directory to run the command in&#xA;      cwd = require(&#34;conform.util&#34;).root_file({ &#34;.editorconfig&#34;, &#34;package.json&#34; }),&#xA;      -- When cwd is not found, don&#39;t run the formatter (default false)&#xA;      require_cwd = true,&#xA;      -- When returns false, the formatter will not be used&#xA;      condition = function(ctx)&#xA;        return vim.fs.basename(ctx.filename) ~= &#34;README.md&#34;&#xA;      end,&#xA;      -- Exit codes that indicate success (default {0})&#xA;      exit_codes = { 0, 1 },&#xA;      -- Environment variables. This can also be a function that returns a table.&#xA;      env = {&#xA;        VAR = &#34;value&#34;,&#xA;      },&#xA;    },&#xA;    -- These can also be a function that returns the formatter&#xA;    other_formatter = function()&#xA;      return {&#xA;        command = &#34;my_cmd&#34;,&#xA;      }&#xA;    end,&#xA;  },&#xA;})&#xA;&#xA;-- You can set formatters_by_ft and formatters directly&#xA;require(&#34;conform&#34;).formatters_by_ft.lua = { &#34;stylua&#34; }&#xA;require(&#34;conform&#34;).formatters.my_formatter = {&#xA;  command = &#34;my_cmd&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- /OPTIONS --&gt; &#xA;&lt;h2&gt;Recipes&lt;/h2&gt; &#xA;&lt;!-- RECIPES --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#format-command&#34;&gt;Format command&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#customizing-formatters&#34;&gt;Customizing formatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#autoformat-with-extra-features&#34;&gt;Autoformat with extra features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#command-to-toggle-format-on-save&#34;&gt;Command to toggle format-on-save&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#automatically-run-slow-formatters-async&#34;&gt;Automatically run slow formatters async&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#add-extra-arguments-to-a-formatter-command&#34;&gt;Add extra arguments to a formatter command&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /RECIPES --&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;!-- API --&gt; &#xA;&lt;h3&gt;format(opts, callback)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;format(opts, callback): boolean&lt;/code&gt; &lt;br&gt; Format a buffer&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;timeout_ms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Time in milliseconds to block for formatting. Defaults to 1000. No effect if async = true.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bufnr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Format this buffer (default 0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;async&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If true the method won&#39;t block. Defaults to false. If the buffer is modified before the formatter completes, the formatting will be discarded.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;formatters&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List of formatters to run. Defaults to all formatters for the buffer filetype.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lsp_fallback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|boolean|&#34;always&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Attempt LSP formatting if no formatters are available. Defaults to false. If &#34;always&#34;, will attempt LSP formatting even if formatters are available.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;quiet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Don&#39;t show any notifications for warnings or failures. Defaults to false.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;range&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Range to format. Table must contain &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; keys with {row, col} tuples using (1,0) indexing. Defaults to current selection in visual mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Passed to vim.lsp.buf.format when lsp_fallback = true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Passed to vim.lsp.buf.format when lsp_fallback = true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;filter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|fun(client: table): boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Passed to vim.lsp.buf.format when lsp_fallback = true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;callback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|fun(err: nil|string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called once formatting has completed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Returns:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;True if any formatters were attempted&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;list_formatters(bufnr)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;list_formatters(bufnr): conform.FormatterInfo[]&lt;/code&gt; &lt;br&gt; Retrieve the available formatters for a buffer&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bufnr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;list_all_formatters()&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;list_all_formatters(): conform.FormatterInfo[]&lt;/code&gt; &lt;br&gt; List information about all filetype-configured formatters&lt;/p&gt; &#xA;&lt;h3&gt;get_formatter_info(formatter, bufnr)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;get_formatter_info(formatter, bufnr): conform.FormatterInfo&lt;/code&gt; &lt;br&gt; Get information about a formatter (including availability)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;formatter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The name of the formatter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bufnr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;will_fallback_lsp(options)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;will_fallback_lsp(options): boolean&lt;/code&gt; &lt;br&gt; Check if the buffer will use LSP formatting when lsp_fallback = true&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;options&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Options passed to vim.lsp.buf.format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- /API --&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;nvim-lint&lt;/a&gt; for providing inspiration for the config and API. It&#39;s an excellent plugin that balances power and simplicity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;null-ls&lt;/a&gt; for formatter configurations and being my formatter/linter of choice for a long time.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-orgmode/orgmode</title>
    <updated>2023-09-24T01:55:20Z</updated>
    <id>tag:github.com,2023-09-24:/nvim-orgmode/orgmode</id>
    <link href="https://github.com/nvim-orgmode/orgmode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Orgmode clone written in Lua for Neovim 0.8+.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;A blend of the Neovim (shape) and Org-mode (colours) logos&#34; src=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/assets/nvim-orgmode.svg?sanitize=true&#34; width=&#34;250px&#34;&gt; &#xA; &lt;h1&gt;nvim-orgmode&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://ko-fi.com/kristijanhusak&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/support-kofi-00b9fe?style=flat-square&amp;amp;logo=kofi&#34; alt=&#34;Kofi&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://matrix.to/#/#neovim-orgmode:matrix.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/matrix/neovim-orgmode:matrix.org?logo=matrix&amp;amp;server_fqdn=matrix.org&amp;amp;style=flat-square&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Orgmode clone written in Lua for Neovim 0.8+&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/#setup&#34;&gt;Setup&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/DOCS.md&#34;&gt;Docs&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/#showcase&#34;&gt;Showcase&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/#treesitter-info&#34;&gt;Treesitter&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/#troubleshoot&#34;&gt;Troubleshoot&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/#plugins&#34;&gt;Plugins&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/#thanks-to&#34;&gt;Kudos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.8.0 or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Use your favourite package manager:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt; (recommended)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;nvim-orgmode/orgmode&#39;,&#xA;  dependencies = {&#xA;    { &#39;nvim-treesitter/nvim-treesitter&#39;, lazy = true },&#xA;  },&#xA;  event = &#39;VeryLazy&#39;,&#xA;  config = function()&#xA;    -- Load treesitter grammar for org&#xA;    require(&#39;orgmode&#39;).setup_ts_grammar()&#xA;&#xA;    -- Setup treesitter&#xA;    require(&#39;nvim-treesitter.configs&#39;).setup({&#xA;      highlight = {&#xA;        enable = true,&#xA;        additional_vim_regex_highlighting = { &#39;org&#39; },&#xA;      },&#xA;      ensure_installed = { &#39;org&#39; },&#xA;    })&#xA;&#xA;    -- Setup orgmode&#xA;    require(&#39;orgmode&#39;).setup({&#xA;      org_agenda_files = &#39;~/orgfiles/**/*&#39;,&#xA;      org_default_notes_file = &#39;~/orgfiles/refile.org&#39;,&#xA;    })&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#39;nvim-treesitter/nvim-treesitter&#39;}&#xA;use {&#39;nvim-orgmode/orgmode&#39;, config = function()&#xA;  require(&#39;orgmode&#39;).setup{}&#xA;end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;b&gt;vim-plug&lt;/b&gt;&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;Plug &#39;nvim-orgmode/orgmode&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;&lt;b&gt;dein.vim&lt;/b&gt;&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;nvim-treesitter/nvim-treesitter&#39;)&#xA;call dein#add(&#39;nvim-orgmode/orgmode&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; ### Setup &#xA;&lt;p&gt;Note that this setup is not needed for &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt; since instructions above covers full setup&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;&#xA;-- Load custom treesitter grammar for org filetype&#xA;require(&#39;orgmode&#39;).setup_ts_grammar()&#xA;&#xA;-- Treesitter configuration&#xA;require(&#39;nvim-treesitter.configs&#39;).setup {&#xA;  -- If TS highlights are not enabled at all, or disabled via `disable` prop,&#xA;  -- highlighting will fallback to default Vim syntax highlighting&#xA;  highlight = {&#xA;    enable = true,&#xA;    -- Required for spellcheck, some LaTex highlights and&#xA;    -- code block highlights that do not have ts grammar&#xA;    additional_vim_regex_highlighting = {&#39;org&#39;},&#xA;  },&#xA;  ensure_installed = {&#39;org&#39;}, -- Or run :TSUpdate org&#xA;}&#xA;&#xA;require(&#39;orgmode&#39;).setup({&#xA;  org_agenda_files = {&#39;~/Dropbox/org/*&#39;, &#39;~/my-orgs/**/*&#39;},&#xA;  org_default_notes_file = &#39;~/Dropbox/org/refile.org&#39;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you are using &lt;code&gt;init.vim&lt;/code&gt;, wrap the above snippet like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; init.vim&#xA;lua &amp;lt;&amp;lt; EOF&#xA;&#xA;require(&#39;orgmode&#39;).setup_ts_grammar() ...&#xA;&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Completion&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-compe&#34;&gt;&lt;b&gt;nvim-compe&lt;/b&gt;&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;compe&#39;).setup({&#xA;  source = {&#xA;    orgmode = true&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;&lt;b&gt;nvim-cmp&lt;/b&gt;&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;cmp&#39;).setup({&#xA;  sources = {&#xA;    { name = &#39;orgmode&#39; }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/nvim-lua/completion-nvim&#34;&gt;&lt;b&gt;completion-nvim&lt;/b&gt;&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.completion_chain_complete_list = {&#xA;  org = {&#xA;    { mode = &#39;omni&#39;},&#xA;  },&#xA;}&#xA;-- add additional keyword chars&#xA;vim.cmd[[autocmd FileType org setlocal iskeyword+=:,#,+]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Or just use &lt;code&gt;omnifunc&lt;/code&gt; via &lt;kbd&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-o&amp;gt;&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open agenda prompt&lt;/strong&gt;: &lt;kbd&gt;&amp;lt;Leader&amp;gt;oa&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open capture prompt&lt;/strong&gt;: &lt;kbd&gt;&amp;lt;Leader&amp;gt;oc&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;In any orgmode buffer press &lt;kbd&gt;g?&lt;/kbd&gt; for help&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are new to Orgmode, see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/DOCS.md#getting-started-with-orgmode&#34;&gt;Getting started&lt;/a&gt; section in the Docs or a hands-on &lt;a href=&#34;https://github.com/nvim-orgmode/orgmode/wiki/Getting-Started&#34;&gt;tutorial&lt;/a&gt; in our wiki.&lt;/p&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;h3&gt;Agenda&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1782860/123549968-8521f600-d76b-11eb-9a93-02bad08b37ce.gif&#34; alt=&#34;agenda&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Org file&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1782860/123549982-90752180-d76b-11eb-8828-9edf9f76af08.gif&#34; alt=&#34;orgfile&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Capturing and refiling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1782860/123549993-9a972000-d76b-11eb-814b-b348a93df08a.gif&#34; alt=&#34;capture&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Autocompletion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1782860/123550227-e8605800-d76c-11eb-96f6-c0a677d562d4.gif&#34; alt=&#34;autocomplete&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Treesitter Info&lt;/h2&gt; &#xA;&lt;p&gt;The built-in treesitter parser is used for parsing the org files. Highlights are experimental and partially supported.&lt;/p&gt; &#xA;&lt;h3&gt;Advantages of treesitter over built in parsing/syntax:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More reliable, since parsing is done with a proper parsing tool&lt;/li&gt; &#xA; &lt;li&gt;Better highlighting (Experimental, still requires improvements)&lt;/li&gt; &#xA; &lt;li&gt;Future features will be easier to implement because the grammar already parses some things that were not parsed before (tables, latex, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Allows for easier hacking (custom motions that can work with TS nodes, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Known highlighting issues and limitations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Performance issues. This is generally an issue in Neovim that should be resolved before 0.6 release (&lt;a href=&#34;https://github.com/neovim/neovim/issues/14762&#34;&gt;https://github.com/neovim/neovim/issues/14762&lt;/a&gt;, &lt;a href=&#34;https://github.com/neovim/neovim/issues/14762&#34;&gt;https://github.com/neovim/neovim/issues/14762&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Anything that requires concealing (&lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/DOCS.md#org_hide_emphasis_markers&#34;&gt;org_hide_emphasis_markers&lt;/a&gt;, links concealing) is not (yet) supported in TS highlighter&lt;/li&gt; &#xA; &lt;li&gt;LaTex is still highlighted through syntax file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Improvements over Vim&#39;s syntax highlighting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Better highlighting of certain parts (tags, deadline/schedule/closed dates)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter/raw/4f2265632becabcd2c5b1791fa31ef278f1e496c/CONTRIBUTING.md#injections&#34;&gt;Treesitter highlight injections&lt;/a&gt; through &lt;code&gt;#BEGIN_SRC filetype&lt;/code&gt; blocks&lt;/li&gt; &#xA; &lt;li&gt;Headline markup highlighting (&lt;a href=&#34;https://github.com/nvim-orgmode/orgmode/issues/67&#34;&gt;https://github.com/nvim-orgmode/orgmode/issues/67&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshoot&lt;/h2&gt; &#xA;&lt;h3&gt;Indentation is not working&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you are not overriding indentexpr in Org buffers with &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter#indentation&#34;&gt;nvim-treesitter indentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;I get &lt;code&gt;treesitter/query.lua&lt;/code&gt; errors when opening agenda/capture prompt or org files&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you are using latest changes from &lt;a href=&#34;https://github.com/milisims/tree-sitter-org&#34;&gt;tree-sitter-org&lt;/a&gt; grammar.&lt;br&gt; by running &lt;code&gt;:TSUpdate org&lt;/code&gt; and restarting the editor.&lt;/p&gt; &#xA;&lt;h3&gt;Dates are not in English&lt;/h3&gt; &#xA;&lt;p&gt;Dates are generated with Lua native date support, and it reads your current locale when creating them.&lt;br&gt; To use different locale you can add this to your &lt;code&gt;init.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;language en_US.utf8&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or &lt;code&gt;init.vim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;language en_US.utf8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just make sure you have &lt;code&gt;en_US&lt;/code&gt; locale installed on your system. To see what you have available on the system you can start the command &lt;code&gt;:language &lt;/code&gt; and press &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; to autocomplete possible options.&lt;/p&gt; &#xA;&lt;h3&gt;Links are not concealed&lt;/h3&gt; &#xA;&lt;p&gt;Links are concealed with Vim&#39;s conceal feature (see &lt;code&gt;:help conceal&lt;/code&gt;). To enable concealing, add this to your &lt;code&gt;init.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.conceallevel = 2&#xA;vim.opt.concealcursor = &#39;nc&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you are using &lt;code&gt;init.vim&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;set conceallevel=2&#xA;set concealcursor=nc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Jumping to file path is not working for paths with forward slash&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Windows, paths are by default written with backslashes. To use forward slashes, you must enable &lt;code&gt;shellslash&lt;/code&gt; option (see &lt;code&gt;:help &#39;shellslash&#39;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.shellslash = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you are using &lt;code&gt;init.vim&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;set shellslash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More info on issue &lt;a href=&#34;https://github.com/nvim-orgmode/orgmode/issues/281#issuecomment-1120200775&#34;&gt;#281&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;TL;DR&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agenda view&lt;/li&gt; &#xA; &lt;li&gt;Search by tags/keyword&lt;/li&gt; &#xA; &lt;li&gt;Clocking time&lt;/li&gt; &#xA; &lt;li&gt;Repeatable dates, date and time ranges&lt;/li&gt; &#xA; &lt;li&gt;Capturing to default notes file/destination&lt;/li&gt; &#xA; &lt;li&gt;Archiving (archive file or ARCHIVE tag)&lt;/li&gt; &#xA; &lt;li&gt;Exporting (via &lt;code&gt;emacs&lt;/code&gt;, &lt;code&gt;pandoc&lt;/code&gt; and custom export options)&lt;/li&gt; &#xA; &lt;li&gt;Notifications (experimental, see &lt;a href=&#34;https://github.com/nvim-orgmode/orgmode/issues/49&#34;&gt;Issue #49&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Calendar popup for easier navigation and date updates&lt;/li&gt; &#xA; &lt;li&gt;Various org file mappings: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Promote/Demote&lt;/li&gt; &#xA;   &lt;li&gt;Change TODO state&lt;/li&gt; &#xA;   &lt;li&gt;Change dates&lt;/li&gt; &#xA;   &lt;li&gt;Insert/Move/Refile headlines&lt;/li&gt; &#xA;   &lt;li&gt;Change tags&lt;/li&gt; &#xA;   &lt;li&gt;Toggle checkbox state&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clocking time&lt;/li&gt; &#xA; &lt;li&gt;Remote editing from agenda view&lt;/li&gt; &#xA; &lt;li&gt;Repeatable mapping via &lt;a href=&#34;https://github.com/tpope/vim-repeat&#34;&gt;vim-repeat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Detailed breakdown&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agenda prompt: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Agenda view (&lt;kbd&gt;a&lt;/kbd&gt;): &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Ability to show daily(&lt;kbd&gt;vd&lt;/kbd&gt;)/weekly(&lt;kbd&gt;vw&lt;/kbd&gt;)/monthly(&lt;kbd&gt;vm&lt;/kbd&gt;)/yearly(&lt;kbd&gt;vy&lt;/kbd&gt;) agenda&lt;/li&gt; &#xA;     &lt;li&gt;Support for various date settings: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;DEADLINE: Warning settings - example: &lt;code&gt;&amp;lt;2021-06-11 Fri 11:00 -1d&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;SCHEDULED: Delay setting - example: &lt;code&gt;&amp;lt;2021-06-11 Fri 11:00 -2d&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;All dates - Repeater settings: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;Cumulate type: &lt;code&gt;&amp;lt;2021-06-11 Fri 11:00 +1w&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;Catch-up type: &lt;code&gt;&amp;lt;2021-06-11 Fri 11:00 ++1w&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;Restart type: &lt;code&gt;&amp;lt;2021-06-11 Fri 11:00 .+1w&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;Time ranges - example: &lt;code&gt;&amp;lt;2021-06-11 Fri 11:00-12:30&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;Date ranges - example: &lt;code&gt;&amp;lt;2021-06-11 Fri 11:00-12:30&amp;gt;--&amp;lt;2021-06-13 Sun 22:00&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Properly lists tasks according to defined dates (DEADLINE,SCHEDULED,Plain date)&lt;/li&gt; &#xA;     &lt;li&gt;Navigate forward (&lt;kbd&gt;f&lt;/kbd&gt;)/backward(&lt;kbd&gt;b&lt;/kbd&gt;) or jump to specific date (&lt;kbd&gt;J&lt;/kbd&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;Go to task under cursor in current window(&lt;kbd&gt;&amp;lt;CR&amp;gt;&lt;/kbd&gt;) or other window(&lt;kbd&gt;&amp;lt;TAB&amp;gt;&lt;/kbd&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;Print category from &#34;:CATEGORY:&#34; property if defined&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;List tasks that have &#34;TODO&#34; state (&lt;kbd&gt;t&lt;/kbd&gt;):&lt;/li&gt; &#xA;   &lt;li&gt;Find headlines matching tag(s) (&lt;kbd&gt;m&lt;/kbd&gt;):&lt;/li&gt; &#xA;   &lt;li&gt;Search for headlines (and it&#39;s content) for a query (&lt;kbd&gt;s&lt;/kbd&gt;):&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/DOCS.md#advanced-search&#34;&gt;Advanced search&lt;/a&gt; for tags/todo kewords/properties&lt;/li&gt; &#xA;   &lt;li&gt;Notifications (experimental, see &lt;a href=&#34;https://github.com/nvim-orgmode/orgmode/issues/49&#34;&gt;Issue #49&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Clocking time&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Capture: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Define custom templates&lt;/li&gt; &#xA;   &lt;li&gt;Fast capturing to default notes file via &lt;kbd&gt;&amp;lt;C-c&amp;gt;&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Capturing to specific destination &lt;kbd&gt;&amp;lt;Leader&amp;gt;or&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Abort capture with &lt;kbd&gt;&amp;lt;Leader&amp;gt;ok&lt;/kbd&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Org files &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clocking time&lt;/li&gt; &#xA;   &lt;li&gt;Refile to destination/headline: &lt;kbd&gt;&amp;lt;Leader&amp;gt;or&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Increase/Decrease date under cursor: &lt;kbd&gt;&amp;lt;C-a&amp;gt;&lt;/kbd&gt;/&lt;kbd&gt;&amp;lt;C-x&amp;gt;&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Change date under cursor via calendar popup: &lt;kbd&gt;cid&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Change headline TODO state: forward&lt;kbd&gt;cit&lt;/kbd&gt; or backward&lt;kbd&gt;ciT&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Open hyperlink or date under cursor: &lt;kbd&gt;&amp;lt;Leader&amp;gt;oo&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Toggle checkbox: &lt;kbd&gt;&amp;lt;C-space&amp;gt;&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Toggle current line to headline and vice versa: &lt;kbd&gt;&amp;lt;Leader&amp;gt;o*&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Toggle folding of current headline: &lt;kbd&gt;&amp;lt;TAB&amp;gt;&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Toggle folding in whole file: &lt;kbd&gt;&amp;lt;S-TAB&amp;gt;&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Archive headline: &lt;kbd&gt;&amp;lt;Leader&amp;gt;o$&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add archive tag: &lt;kbd&gt;&amp;lt;Leader&amp;gt;oA&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Change tags: &lt;kbd&gt;&amp;lt;Leader&amp;gt;ot&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Promote headline: &lt;kbd&gt;&amp;lt;&amp;lt;&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Demote headline: &lt;kbd&gt;&amp;gt;&amp;gt;&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Promote subtree: &lt;kbd&gt;&amp;lt;s&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Demote subtree: &lt;kbd&gt;&amp;gt;s&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add headline/list item/checkbox: &lt;kbd&gt;&amp;lt;Leader&amp;gt;&amp;lt;CR&amp;gt;&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert heading after current heading and it&#39;s content: &lt;kbd&gt;&amp;lt;Leader&amp;gt;oih&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert TODO heading after current line: &lt;kbd&gt;&amp;lt;Leader&amp;gt;oiT&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Insert TODO heading after current heading and it&#39;s content: &lt;kbd&gt;&amp;lt;Leader&amp;gt;oit&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Move headline up: &lt;kbd&gt;&amp;lt;Leader&amp;gt;oK&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Move headline down: &lt;kbd&gt;&amp;lt;Leader&amp;gt;oJ&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Highlighted code blocks (&lt;code&gt;#+BEGIN_SRC filetype&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Exporting (via &lt;code&gt;emacs&lt;/code&gt;, &lt;code&gt;pandoc&lt;/code&gt; and custom export options)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Link to detailed documentation: &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/DOCS.md&#34;&gt;DOCS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/org-bullets.nvim&#34;&gt;org-bullets.nvim&lt;/a&gt; - Show org mode bullets as UTF-8 characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/headlines.nvim&#34;&gt;headlines.nvim&lt;/a&gt; - Add few highlight options for code blocks and headlines&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michaelb/sniprun&#34;&gt;sniprun&lt;/a&gt; - For code evaluation in blocks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dhruvasagar/vim-table-mode&#34;&gt;vim-table-mode&lt;/a&gt; - For table support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See all available plugins on &lt;a href=&#34;https://github.com/topics/orgmode-nvim&#34;&gt;orgmode-nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you built a plugin please add &#34;orgmode-nvim&#34; topic to it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: None of the Emacs Orgmode plugins will be built into nvim-orgmode. Anything that&#39;s a separate plugin in Emacs Orgmode should be a separate plugin in here. The point of this plugin is to provide functionality that&#39;s built into Emacs Orgmode core, and a good foundation for external plugins.&lt;br&gt; If you want to build a plugin, post suggestions and improvements on &lt;a href=&#34;https://github.com/nvim-orgmode/orgmode/issues/26&#34;&gt;Plugins infrastructure&lt;/a&gt; issue.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔧&lt;/span&gt; API&lt;/h3&gt; &#xA;&lt;p&gt;Documentation for our work-in-progress API can be found &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/doc/orgmode_api.txt&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;If you are just starting out with orgmode, have a look at the &lt;a href=&#34;https://github.com/nvim-orgmode/orgmode/wiki/Getting-Started&#34;&gt;Getting Started&lt;/a&gt; section in our wiki.&lt;/p&gt; &#xA;&lt;p&gt;Vim documentation is auto generated from &lt;a href=&#34;https://raw.githubusercontent.com/nvim-orgmode/orgmode/master/DOCS.md&#34;&gt;DOCS.md&lt;/a&gt; file with &lt;a href=&#34;https://github.com/FooSoft/md2vim&#34;&gt;md2vim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Hosted documentation is on: &lt;a href=&#34;https://nvim-orgmode.github.io/&#34;&gt;https://nvim-orgmode.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support searching by properties&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve checkbox hierarchy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support todo keyword faces&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support clocking work time&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Improve folding&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support exporting (via existing emacs tools)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support archiving to specific headline&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support tables&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support diary format dates&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support evaluating code blocks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks to&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dhruvasagar&#34;&gt;@dhruvasagar&lt;/a&gt; and his &lt;a href=&#34;https://github.com/dhruvasagar/vim-dotoo&#34;&gt;vim-dotoo&lt;/a&gt; plugin that got me started using orgmode. Without him this plugin would not happen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/milisims&#34;&gt;@milisims&lt;/a&gt; for writing a treesitter parser for org&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jceb/vim-orgmode&#34;&gt;vim-orgmode&lt;/a&gt; for some parts of the code (mostly syntax)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mfussenegger/nvim-jdtls</title>
    <updated>2023-09-24T01:55:20Z</updated>
    <id>tag:github.com,2023-09-24:/mfussenegger/nvim-jdtls</id>
    <link href="https://github.com/mfussenegger/nvim-jdtls" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extensions for the built-in LSP support in Neovim for eclipse.jdt.ls&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-jdtls&lt;/h1&gt; &#xA;&lt;p&gt;Extensions for the built-in &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;Language Server Protocol&lt;/a&gt; support in &lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt; (&amp;gt;= 0.6.0) for &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Audience&lt;/h2&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;KISS principle&lt;/a&gt; and targets users with some experience with Neovim, Java and its build tools Maven or Gradle who prefer configuration as code over GUI configuration. Ease of use is not the main priority.&lt;/p&gt; &#xA;&lt;p&gt;If you prioritize ease of use over simplicity, you may want to use an alternative:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neoclide/coc-java&#34;&gt;coc-java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;vscode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.eclipse.org/ide/&#34;&gt;Eclipse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;organize_imports&lt;/code&gt; function to organize imports&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;extract_variable&lt;/code&gt; function to introduce a local variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;extract_variable_all&lt;/code&gt; function to introduce a local variable and replace all occurrences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;extract_constant&lt;/code&gt; function to extract a constant&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;extract_method&lt;/code&gt; function to extract a block of code into a method&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Open class file contents&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Code action extensions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate constructors&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate &lt;code&gt;toString&lt;/code&gt; function&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;hashCode&lt;/code&gt; and &lt;code&gt;equals&lt;/code&gt; generation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract variables or methods&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate delegate methods&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Move package, instance method, static method or type&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Signature refactoring&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;javap&lt;/code&gt; command to show bytecode of current file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;jol&lt;/code&gt; command to show memory usage of current file (&lt;code&gt;jol_path&lt;/code&gt; must be set)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;jshell&lt;/code&gt; command to open up &lt;code&gt;jshell&lt;/code&gt; with &lt;code&gt;classpath&lt;/code&gt; from project set&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Debugger support via &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Optional vscode-java-test extensions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate tests via &lt;code&gt;require(&#34;jdtls.tests&#34;).generate()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jump to tests or subjects via &lt;code&gt;require(&#34;jdtls.tests&#34;).goto_subjects()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Take a look at &lt;a href=&#34;https://github.com/mfussenegger/nvim-jdtls/issues/3&#34;&gt;a demo&lt;/a&gt; to see some of the functionality in action.&lt;/p&gt; &#xA;&lt;h2&gt;Plugin Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Neovim (Latest stable (recommended) or nightly)&lt;/li&gt; &#xA; &lt;li&gt;nvim-jdtls is a plugin. Install it like any other Vim plugin: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone https://github.com/mfussenegger/nvim-jdtls.git ~/.config/nvim/pack/plugins/start/nvim-jdtls&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Or with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-jdtls&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Or with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-jdtls&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Language Server Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt; by following their &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls#installation&#34;&gt;Installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration (quickstart)&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to &lt;code&gt;~/.config/nvim/ftplugin/java.lua&lt;/code&gt; (See &lt;code&gt;:help base-directory&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local config = {&#xA;    cmd = {&#39;/path/to/jdt-language-server/bin/jdtls&#39;},&#xA;    root_dir = vim.fs.dirname(vim.fs.find({&#39;gradlew&#39;, &#39;.git&#39;, &#39;mvnw&#39;}, { upward = true })[1]),&#xA;}&#xA;require(&#39;jdtls&#39;).start_or_attach(config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;eclipse.jdt.ls requires Java 17&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;jdtls&lt;/code&gt; script requires Python 3.9&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ll have to teach eclipse.jdt.ls about your JDK installations by setting up &lt;code&gt;runtimes&lt;/code&gt; if your projects use a different Java version than the one you&#39;re using for eclipse.jdt.ls itself. See &lt;code&gt;Java XY language features are not available&lt;/code&gt; in the troubleshooting section further below to learn how to do that.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This should get you started, but will create temporary eclipse data folders when you open a project. Please read the &lt;code&gt;Configuration (verbose)&lt;/code&gt; section if you want more control over the configuration or want to understand how things work.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration (verbose)&lt;/h2&gt; &#xA;&lt;p&gt;To configure &lt;code&gt;nvim-jdtls&lt;/code&gt;, add the following in &lt;code&gt;ftplugin/java.lua&lt;/code&gt; within the Neovim configuration base directory (e.g. &lt;code&gt;~/.config/nvim/ftplugin/java.lua&lt;/code&gt;, see &lt;code&gt;:help base-directory&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Watch out for the 💀, it indicates that you must adjust something.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- See `:help vim.lsp.start_client` for an overview of the supported `config` options.&#xA;local config = {&#xA;  -- The command that starts the language server&#xA;  -- See: https://github.com/eclipse/eclipse.jdt.ls#running-from-the-command-line&#xA;  cmd = {&#xA;&#xA;    -- 💀&#xA;    &#39;java&#39;, -- or &#39;/path/to/java17_or_newer/bin/java&#39;&#xA;            -- depends on if `java` is in your $PATH env variable and if it points to the right version.&#xA;&#xA;    &#39;-Declipse.application=org.eclipse.jdt.ls.core.id1&#39;,&#xA;    &#39;-Dosgi.bundles.defaultStartLevel=4&#39;,&#xA;    &#39;-Declipse.product=org.eclipse.jdt.ls.core.product&#39;,&#xA;    &#39;-Dlog.protocol=true&#39;,&#xA;    &#39;-Dlog.level=ALL&#39;,&#xA;    &#39;-Xmx1g&#39;,&#xA;    &#39;--add-modules=ALL-SYSTEM&#39;,&#xA;    &#39;--add-opens&#39;, &#39;java.base/java.util=ALL-UNNAMED&#39;,&#xA;    &#39;--add-opens&#39;, &#39;java.base/java.lang=ALL-UNNAMED&#39;,&#xA;&#xA;    -- 💀&#xA;    &#39;-jar&#39;, &#39;/path/to/jdtls_install_location/plugins/org.eclipse.equinox.launcher_VERSION_NUMBER.jar&#39;,&#xA;         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^&#xA;         -- Must point to the                                                     Change this to&#xA;         -- eclipse.jdt.ls installation                                           the actual version&#xA;&#xA;&#xA;    -- 💀&#xA;    &#39;-configuration&#39;, &#39;/path/to/jdtls_install_location/config_SYSTEM&#39;,&#xA;                    -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^^^^^&#xA;                    -- Must point to the                      Change to one of `linux`, `win` or `mac`&#xA;                    -- eclipse.jdt.ls installation            Depending on your system.&#xA;&#xA;&#xA;    -- 💀&#xA;    -- See `data directory configuration` section in the README&#xA;    &#39;-data&#39;, &#39;/path/to/unique/per/project/workspace/folder&#39;&#xA;  },&#xA;&#xA;  -- 💀&#xA;  -- This is the default if not provided, you can remove it. Or adjust as needed.&#xA;  -- One dedicated LSP server &amp;amp; client will be started per unique root_dir&#xA;  root_dir = require(&#39;jdtls.setup&#39;).find_root({&#39;.git&#39;, &#39;mvnw&#39;, &#39;gradlew&#39;}),&#xA;&#xA;  -- Here you can configure eclipse.jdt.ls specific settings&#xA;  -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request&#xA;  -- for a list of options&#xA;  settings = {&#xA;    java = {&#xA;    }&#xA;  },&#xA;&#xA;  -- Language server `initializationOptions`&#xA;  -- You need to extend the `bundles` with paths to jar files&#xA;  -- if you want to use additional eclipse.jdt.ls plugins.&#xA;  --&#xA;  -- See https://github.com/mfussenegger/nvim-jdtls#java-debug-installation&#xA;  --&#xA;  -- If you don&#39;t plan on using the debugger or other eclipse.jdt.ls plugins you can remove this&#xA;  init_options = {&#xA;    bundles = {}&#xA;  },&#xA;}&#xA;-- This starts a new client &amp;amp; server,&#xA;-- or attaches to an existing client &amp;amp; server depending on the `root_dir`.&#xA;require(&#39;jdtls&#39;).start_or_attach(config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;ftplugin/java.lua&lt;/code&gt; logic is executed each time a &lt;code&gt;FileType&lt;/code&gt; event triggers. This happens every time you open a &lt;code&gt;.java&lt;/code&gt; file or when you invoke &lt;code&gt;:set ft=java&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;You can also find more &lt;a href=&#34;https://github.com/mfussenegger/nvim-jdtls/wiki/Sample-Configurations&#34;&gt;complete configuration examples in the Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have trouble getting jdtls to work, please read the &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h3&gt;data directory configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;eclipse.jdt.ls&lt;/code&gt; stores project specific data within the folder set via the &lt;code&gt;-data&lt;/code&gt; flag. If you&#39;re using &lt;code&gt;eclipse.jdt.ls&lt;/code&gt; with multiple different projects you must use a dedicated data directory per project.&lt;/p&gt; &#xA;&lt;p&gt;An example how you could accomplish that is to infer the workspace directory name from the current working directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- If you started neovim within `~/dev/xy/project-1` this would resolve to `project-1`&#xA;local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), &#39;:p:h:t&#39;)&#xA;&#xA;local workspace_dir = &#39;/path/to/workspace-root/&#39; .. project_name&#xA;--                                               ^^&#xA;--                                               string concattenation in Lua&#xA;&#xA;local config = {&#xA;  cmd = {&#xA;    ...,&#xA;&#xA;    &#39;-data&#39;, workspace_dir,&#xA;&#xA;    ...,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;...&lt;/code&gt; is not valid Lua in this context. It is meant as placeholder for the other options from the &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#configuration&#34;&gt;Configuration&lt;/a&gt; section above.)&lt;/p&gt; &#xA;&lt;h3&gt;nvim-lspconfig and nvim-jdtls differences&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt; and nvim-jdtls use the client built into neovim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;  ┌────────────┐           ┌────────────────┐&#xA;  │ nvim-jdtls │           │ nvim-lspconfig │&#xA;  └────────────┘           └────────────────┘&#xA;       |                         |&#xA;      start_or_attach           nvim_lsp.jdtls.setup&#xA;       │                              |&#xA;       │                             setup java filetype hook&#xA;       │    ┌─────────┐                  │&#xA;       └───►│ vim.lsp │◄─────────────────┘&#xA;            └─────────┘&#xA;                .start_client&#xA;                .buf_attach_client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some differences between the two:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;setup&lt;/code&gt; of lspconfig creates a &lt;code&gt;java&lt;/code&gt; &lt;code&gt;filetype&lt;/code&gt; hook itself and provides some defaults for the &lt;code&gt;cmd&lt;/code&gt; of the &lt;code&gt;config&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; delegates the choice when to call &lt;code&gt;start_or_attach&lt;/code&gt; to the user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; adds some logic to handle &lt;code&gt;jdt://&lt;/code&gt; URIs. These are necessary to load source code from third party libraries or the JDK.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; adds some additional handlers and sets same extra capabilities to enable all the extensions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You could use either to start the &lt;code&gt;eclipse.jdt.ls&lt;/code&gt; client, but it is recommended to use the &lt;code&gt;start_or_attach&lt;/code&gt; method from &lt;code&gt;nvim-jdtls&lt;/code&gt; because of the additional capabilities it configures and because of the &lt;code&gt;jdt://&lt;/code&gt; URI handling.&lt;/p&gt; &#xA;&lt;p&gt;You &lt;strong&gt;must not&lt;/strong&gt; use both at the same time for java. You&#39;d end up with two clients and two language server instances.&lt;/p&gt; &#xA;&lt;h3&gt;UI picker customization&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: You can get a better UI for code-actions and other functions by overriding the &lt;code&gt;jdtls.ui&lt;/code&gt; picker. See &lt;a href=&#34;https://github.com/mfussenegger/nvim-jdtls/wiki/UI-Extensions&#34;&gt;UI Extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; extends the capabilities of the built-in LSP support in Neovim, so all the functions mentioned in &lt;code&gt;:help lsp&lt;/code&gt; will work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; provides some extras, for those you&#39;ll want to create additional mappings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;nnoremap &amp;lt;A-o&amp;gt; &amp;lt;Cmd&amp;gt;lua require&#39;jdtls&#39;.organize_imports()&amp;lt;CR&amp;gt;&#xA;nnoremap crv &amp;lt;Cmd&amp;gt;lua require(&#39;jdtls&#39;).extract_variable()&amp;lt;CR&amp;gt;&#xA;vnoremap crv &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;jdtls&#39;).extract_variable(true)&amp;lt;CR&amp;gt;&#xA;nnoremap crc &amp;lt;Cmd&amp;gt;lua require(&#39;jdtls&#39;).extract_constant()&amp;lt;CR&amp;gt;&#xA;vnoremap crc &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;jdtls&#39;).extract_constant(true)&amp;lt;CR&amp;gt;&#xA;vnoremap crm &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;jdtls&#39;).extract_method(true)&amp;lt;CR&amp;gt;&#xA;&#xA;&#xA;&#34; If using nvim-dap&#xA;&#34; This requires java-debug and vscode-java-test bundles, see install steps in this README further below.&#xA;nnoremap &amp;lt;leader&amp;gt;df &amp;lt;Cmd&amp;gt;lua require&#39;jdtls&#39;.test_class()&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;dn &amp;lt;Cmd&amp;gt;lua require&#39;jdtls&#39;.test_nearest_method()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; also adds several commands if the server starts up correctly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;JdtCompile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JdtSetRuntime&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JdtUpdateConfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JdtUpdateDebugConfig&lt;/code&gt; (if &lt;code&gt;dap&lt;/code&gt; and java-debug bundles are available)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JdtUpdateHotcode&lt;/code&gt; (if &lt;code&gt;dap&lt;/code&gt; and java-debug bundles are available)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JdtBytecode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JdtJol&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JdtJshell&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JdtRestart&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;code&gt;:help jdtls&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debugger (via nvim-dap)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; provides integration with &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once setup correctly, it enables the following additional functionality:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Debug applications via explicit configurations&lt;/li&gt; &#xA; &lt;li&gt;Debug automatically discovered main classes&lt;/li&gt; &#xA; &lt;li&gt;Debug junit tests. Either whole classes or individual test methods&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For 1 &amp;amp; 2 to work, &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt; needs to load the &lt;a href=&#34;https://github.com/microsoft/java-debug&#34;&gt;java-debug&lt;/a&gt; extension. For 3 to work, it also needs to load the &lt;a href=&#34;https://github.com/microsoft/vscode-java-test&#34;&gt;vscode-java-test&lt;/a&gt; extension.&lt;/p&gt; &#xA;&lt;p&gt;For usage instructions once installed, read the &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; help. Debugging junit test classes or methods will be possible via these two functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;jdtls&#39;.test_class()&#xA;require&#39;jdtls&#39;.test_nearest_method()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;java-debug installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone &lt;a href=&#34;https://github.com/microsoft/java-debug&#34;&gt;java-debug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigate into the cloned repository (&lt;code&gt;cd java-debug&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./mvnw clean install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set or extend the &lt;code&gt;initializationOptions&lt;/code&gt; (= &lt;code&gt;init_options&lt;/code&gt; of the &lt;code&gt;config&lt;/code&gt; from &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#Configuration-verbose&#34;&gt;configuration&lt;/a&gt;) as follows:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config[&#39;init_options&#39;] = {&#xA;  bundles = {&#xA;    vim.fn.glob(&#34;path/to/java-debug/com.microsoft.java.debug.plugin/target/com.microsoft.java.debug.plugin-*.jar&#34;, 1)&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nvim-dap setup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; will automatically register a &lt;code&gt;java&lt;/code&gt; debug adapter with nvim-dap, if nvim-dap is available.&lt;/p&gt; &#xA;&lt;h3&gt;nvim-dap configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; includes functionality to discover main classes and create &lt;code&gt;nvim-dap&lt;/code&gt; configuration entries for them.&lt;/p&gt; &#xA;&lt;p&gt;To discover the main classes you have to call &lt;code&gt;require(&#39;jdtls.dap&#39;).setup_dap_main_class_configs()&lt;/code&gt; or use the &lt;code&gt;JdtUpdateDebugConfigs&lt;/code&gt; command. It will only discover classes once eclipse.jdt.ls fully loaded the project. Depending on the project that may take a while. Because of that, calling &lt;code&gt;require(&#39;jdtls.dap&#39;).setup_dap_main_class_configs()&lt;/code&gt; as part of an &lt;code&gt;on_attach&lt;/code&gt; handler may not work well.&lt;/p&gt; &#xA;&lt;p&gt;For manual configuration see &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Java&#34;&gt;nvim-dap Adapter Installation Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get an overview of all available &lt;code&gt;attach&lt;/code&gt; and &lt;code&gt;launch&lt;/code&gt; options, take a look at &lt;a href=&#34;https://github.com/microsoft/vscode-java-debug#options&#34;&gt;java-debug options&lt;/a&gt;. Keep in mind that any &lt;code&gt;java.debug&lt;/code&gt; options are settings of the vscode-java client extension and not understood by the debug-adapter itself.&lt;/p&gt; &#xA;&lt;h3&gt;vscode-java-test installation&lt;/h3&gt; &#xA;&lt;p&gt;To be able to debug junit tests, it is necessary to install the bundles from &lt;a href=&#34;https://github.com/microsoft/vscode-java-test&#34;&gt;vscode-java-test&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Navigate into the folder (&lt;code&gt;cd vscode-java-test&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run build-plugin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extend the bundles in the nvim-jdtls config:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;-- This bundles definition is the same as in the previous section (java-debug installation)&#xA;local bundles = {&#xA;  vim.fn.glob(&#34;path/to/java-debug/com.microsoft.java.debug.plugin/target/com.microsoft.java.debug.plugin-*.jar&#34;, 1),&#xA;};&#xA;&#xA;-- This is the new part&#xA;vim.list_extend(bundles, vim.split(vim.fn.glob(&#34;/path/to/microsoft/vscode-java-test/server/*.jar&#34;, 1), &#34;\n&#34;))&#xA;config[&#39;init_options&#39;] = {&#xA;  bundles = bundles;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;The client exits with an error / eclipse.jdt.ls stopped working&lt;/h3&gt; &#xA;&lt;p&gt;This can have two reasons:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your &lt;code&gt;cmd&lt;/code&gt; definition in the &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#configuration&#34;&gt;Configuration&lt;/a&gt; is wrong.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Check the log files. Use &lt;code&gt;:JdtShowLogs&lt;/code&gt; or open the log file manually. &lt;code&gt;:lua print(vim.fn.stdpath(&#39;cache&#39;))&lt;/code&gt; lists the path, there should be a &lt;code&gt;lsp.log&lt;/code&gt;. You may have to increase the log level. See &lt;code&gt;:help vim.lsp.set_log_level()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure you can start the language server standalone by invoking the &lt;code&gt;cmd&lt;/code&gt; defined in the configuration manually within a terminal.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;The data folder got corrupted.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Wipe the folder and ensure that it is in a dedicated directory and not within your project repository. See &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#data-directory-configuration&#34;&gt;data directory configuration&lt;/a&gt;. You can use &lt;code&gt;:JdtWipeDataAndRestart&lt;/code&gt; to do this.&lt;/p&gt; &#xA;&lt;h3&gt;Nothing happens when opening a Java file and I can&#39;t use any &lt;code&gt;vim.lsp.buf&lt;/code&gt; functions&lt;/h3&gt; &#xA;&lt;p&gt;This can have several reasons:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You didn&#39;t follow &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#configuration&#34;&gt;Configuration&lt;/a&gt; closely and aren&#39;t invoking &lt;code&gt;require(&#39;jdtls&#39;).start_or_attach(config)&lt;/code&gt; as part of a &lt;code&gt;java&lt;/code&gt; &lt;code&gt;filetype&lt;/code&gt; event. Go back to the configuration section and follow it closely.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You made a mistake in your configuration and there is a failure happening when you open the file. Try &lt;code&gt;:set ft=java&lt;/code&gt; and look at the &lt;code&gt;:messages&lt;/code&gt; output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;eclipse.jdt.ls is starting but it cannot recognize your project, or it cannot import it properly. Try running &lt;code&gt;:JdtCompile full&lt;/code&gt; or &lt;code&gt;:lua require(&#39;jdtls&#39;).compile(&#39;full&#39;)&lt;/code&gt;. It should open the &lt;code&gt;quickfix&lt;/code&gt; list with errors if eclipse.jdt.ls started but cannot handle your project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Check the log files. Use &lt;code&gt;:JdtShowLogs&lt;/code&gt; or open the log file manually. &lt;code&gt;:lua print(vim.fn.stdpath(&#39;cache&#39;))&lt;/code&gt; lists the path, there should be a &lt;code&gt;lsp.log&lt;/code&gt;. You may have to increase the log level. See &lt;code&gt;:help vim.lsp.set_log_level()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Error: Unable to access jarfile&lt;/h3&gt; &#xA;&lt;p&gt;Either the file doesn&#39;t exist or you&#39;re using &lt;code&gt;~&lt;/code&gt; characters in your path. Neovim doesn&#39;t automatically expand &lt;code&gt;~&lt;/code&gt; characters in the &lt;code&gt;cmd&lt;/code&gt; definition. You either need to write them out or wrap the fragments in &lt;code&gt;vim.fn.expand&lt;/code&gt; calls.&lt;/p&gt; &#xA;&lt;h3&gt;Unrecognized option: --add-modules=ALL-SYSTEM&lt;/h3&gt; &#xA;&lt;p&gt;Eclipse.jdt.ls requires at least Java 17. You&#39;re using a lower version.&lt;/p&gt; &#xA;&lt;h3&gt;is a non-project file, only syntax errors are reported&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;re opening a single file without having a Gradle or Maven project. You need to use Gradle or Maven for the full functionality.&lt;/p&gt; &#xA;&lt;h3&gt;Java XY language features are not available&lt;/h3&gt; &#xA;&lt;p&gt;You need to set the language level via the Gradle or Maven configuration.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re starting eclipse.jdt.ls with a Java version that&#39;s different from the one the project uses, you need to configure the available Java runtimes. Add them to the &lt;code&gt;config&lt;/code&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#configuration&#34;&gt;configuration section&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local config = {&#xA;  ..., -- not valid Lua, this is a placeholder for your other properties.&#xA;  settings = {&#xA;    java = {&#xA;      configuration = {&#xA;        -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request&#xA;        -- And search for `interface RuntimeOption`&#xA;        -- The `name` is NOT arbitrary, but must match one of the elements from `enum ExecutionEnvironment` in the link above&#xA;        runtimes = {&#xA;          {&#xA;            name = &#34;JavaSE-11&#34;,&#xA;            path = &#34;/usr/lib/jvm/java-11-openjdk/&#34;,&#xA;          },&#xA;          {&#xA;            name = &#34;JavaSE-17&#34;,&#xA;            path = &#34;/usr/lib/jvm/java-17-openjdk/&#34;,&#xA;          },&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the language level at runtime using the &lt;code&gt;:JdtSetRuntime&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Diagnostics and completion suggestions are slow&lt;/h3&gt; &#xA;&lt;p&gt;Completion requests can be quite expensive on big projects. If you&#39;re using some kind of auto-completion plugin that triggers completion requests automatically, consider deactivating it or tuning it so it is less aggressive. Triggering a completion request on each typed character is likely overloading &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Newly added dependencies are not found&lt;/h3&gt; &#xA;&lt;p&gt;You can try running &lt;code&gt;:JdtUpdateConfig&lt;/code&gt; to refresh the configuration. If that doesn&#39;t work you&#39;ll need to restart the language server.&lt;/p&gt; &#xA;&lt;h3&gt;Language server doesn&#39;t find classes that should be there&lt;/h3&gt; &#xA;&lt;p&gt;The language server supports &lt;a href=&#34;https://gradle.org/&#34;&gt;gradle&lt;/a&gt; and &lt;a href=&#34;https://maven.apache.org/ref/3.8.4/&#34;&gt;maven&lt;/a&gt; as build tools. Your project should either have a &lt;code&gt;pom.xml&lt;/code&gt; or &lt;code&gt;settings.gradle&lt;/code&gt; and &lt;code&gt;build.gradle&lt;/code&gt; file to declare the dependencies.&lt;/p&gt; &#xA;&lt;p&gt;As an alternative you could manually specify the dependencies within your nvim-jdtls configuration like the following, but this is not recommended.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config.settings = {&#xA;    java = {&#xA;      project = {&#xA;        referencedLibraries = {&#xA;          &#39;/path/to/dependencyA.jar&#39;,&#xA;          &#39;/path/to/dependencyB.jar&#39;,&#xA;        },&#xA;      }&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you modify files outside of Neovim (for example with a git checkout), the language client and language server may not detect these changes and the state of the file on disk diverges with the mental model of the language server. If that happens, you need to open all changed files within Neovim and reload them with &lt;code&gt;:e!&lt;/code&gt; to synchronize the state.&lt;/p&gt; &#xA;&lt;h3&gt;Indentation settings from eclipse formatting configuration are not recognized&lt;/h3&gt; &#xA;&lt;p&gt;This is expected. The Neovim &lt;code&gt;shiftwidth&lt;/code&gt; and &lt;code&gt;tabstop&lt;/code&gt; settings have a higher priority.&lt;/p&gt;</summary>
  </entry>
</feed>