<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-13T02:01:54Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PathOfBuildingCommunity/PathOfBuilding-PoE2</title>
    <updated>2025-04-13T02:01:54Z</updated>
    <id>tag:github.com,2025-04-13:/PathOfBuildingCommunity/PathOfBuilding-PoE2</id>
    <link href="https://github.com/PathOfBuildingCommunity/PathOfBuilding-PoE2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Path of Building 2 Community&lt;/h1&gt; &#xA;&lt;h2&gt;Welcome to Path of Building 2, an offline build planner for Path of Exile 2!&lt;/h2&gt; &#xA;&lt;p float=&#34;middle&#34;&gt; &lt;img alt=&#34;Tree tab&#34; src=&#34;https://github.com/user-attachments/assets/225bf25f-1ac4-4639-b280-565a24d2a2fc&#34; width=&#34;48%&#34;&gt; &lt;img alt=&#34;Items tab&#34; src=&#34;https://github.com/user-attachments/assets/de8e6dc0-1e1a-46c5-b8a4-18877e67d48d&#34; width=&#34;48%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Head over to the &lt;a href=&#34;https://github.com/PathOfBuildingCommunity/PathOfBuilding-PoE2/releases&#34;&gt;Releases&lt;/a&gt; page to download the install wizard or portable zip.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comprehensive offence + defence calculations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Calculate your skill DPS, damage over time, life/mana/ES totals and much more!&lt;/li&gt; &#xA;   &lt;li&gt;Can factor in auras, buffs, charges, curses, monster resistances and more, to estimate your effective DPS&lt;/li&gt; &#xA;   &lt;li&gt;Also calculates life/mana reservations&lt;/li&gt; &#xA;   &lt;li&gt;Shows a summary of character stats in the side bar, as well as a detailed calculations breakdown tab which can show you how the stats were derived&lt;/li&gt; &#xA;   &lt;li&gt;Supports all skills and support gems, and most passives and item modifiers &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Throughout the program, supported modifiers will show in blue and unsupported ones in red&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Full support for minions&lt;/li&gt; &#xA;   &lt;li&gt;Support for party play and support builds&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Passive skill tree planner: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for jewels including most radius/conversion and timeless jewels&lt;/li&gt; &#xA;   &lt;li&gt;Features alternate path tracing (mouse over a sequence of nodes while holding shift, then click to allocate them all)&lt;/li&gt; &#xA;   &lt;li&gt;Fully integrated with the offence/defence calculations; see exactly how each node will affect your character!&lt;/li&gt; &#xA;   &lt;li&gt;Can import PathOfExile.com and PoEPlanner.com passive tree links; links shortened with PoEURL.com also work&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Skill planner: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add any number of main or supporting skills to your build&lt;/li&gt; &#xA;   &lt;li&gt;Supporting skills (auras, curses, buffs) can be toggled on and off&lt;/li&gt; &#xA;   &lt;li&gt;Automatically applies Socketed Gem modifiers from the item a skill is socketed into&lt;/li&gt; &#xA;   &lt;li&gt;Automatically applies support gems granted by items&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Item planner: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add items from in game by copying and pasting them straight into the program!&lt;/li&gt; &#xA;   &lt;li&gt;Automatically adds quality to non-corrupted items&lt;/li&gt; &#xA;   &lt;li&gt;Search the trade site for the most impactful items&lt;/li&gt; &#xA;   &lt;li&gt;Fully integrated with the offence/defence calculations; see exactly how much of an upgrade a given item is!&lt;/li&gt; &#xA;   &lt;li&gt;Contains a searchable database of all uniques that are currently in game (and some that aren&#39;t yet!) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;You can choose the modifier rolls when you add a unique to your build&lt;/li&gt; &#xA;     &lt;li&gt;Includes all league-specific items and legacy variants&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Features an item crafting system: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;You can select from any of the game&#39;s base item types&lt;/li&gt; &#xA;     &lt;li&gt;You can select prefix/suffix modifiers from lists&lt;/li&gt; &#xA;     &lt;li&gt;Custom modifiers can be added, with Master and Essence modifiers available&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Also contains a database of rare item templates: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Allows you to create rare items for your build to approximate the gear you will be using&lt;/li&gt; &#xA;     &lt;li&gt;Choose which modifiers appear on each item, and the rolls for each modifier, to suit your needs&lt;/li&gt; &#xA;     &lt;li&gt;Has templates that should cover the majority of builds&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other features: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can import passive tree, items, and skills from existing characters&lt;/li&gt; &#xA;   &lt;li&gt;Share builds with other users by generating a share code&lt;/li&gt; &#xA;   &lt;li&gt;Automatic updating; most updates will only take a couple of seconds to apply&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;You can find the full version history &lt;a href=&#34;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding-PoE2/dev/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;You can find instructions on how to contribute code and bug reports &lt;a href=&#34;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding-PoE2/dev/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For 3rd-party licences, see &lt;a href=&#34;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding-PoE2/dev/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt;. The licencing information is considered to be part of the documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>folke/snacks.nvim</title>
    <updated>2025-04-13T02:01:54Z</updated>
    <id>tag:github.com,2025-04-13:/folke/snacks.nvim</id>
    <link href="https://github.com/folke/snacks.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üçø A collection of QoL plugins for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üçø &lt;code&gt;snacks.nvim&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A collection of small QoL plugins for Neovim.&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;!-- toc:start --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Snack&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Setup&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/animate.md&#34;&gt;animate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Efficient animations including over 45 easing functions &lt;em&gt;(library)&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/bigfile.md&#34;&gt;bigfile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deal with big files&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/bufdelete.md&#34;&gt;bufdelete&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete buffers without disrupting window layout&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/dashboard.md&#34;&gt;dashboard&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Beautiful declarative dashboards&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/debug.md&#34;&gt;debug&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pretty inspect &amp;amp; backtraces for debugging&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/dim.md&#34;&gt;dim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Focus on the active scope by dimming the rest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/explorer.md&#34;&gt;explorer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A file explorer (picker in disguise)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/git.md&#34;&gt;git&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Git utilities&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/gitbrowse.md&#34;&gt;gitbrowse&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open the current file, branch, commit, or repo in a browser (e.g. GitHub, GitLab, Bitbucket)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/image.md&#34;&gt;image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Image viewer using Kitty Graphics Protocol, supported by &lt;code&gt;kitty&lt;/code&gt;, &lt;code&gt;wezterm&lt;/code&gt; and &lt;code&gt;ghostty&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/indent.md&#34;&gt;indent&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Indent guides and scopes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/input.md&#34;&gt;input&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Better &lt;code&gt;vim.ui.input&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/layout.md&#34;&gt;layout&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Window layouts&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/lazygit.md&#34;&gt;lazygit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open LazyGit in a float, auto-configure colorscheme and integration with Neovim&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/notifier.md&#34;&gt;notifier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pretty &lt;code&gt;vim.notify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/notify.md&#34;&gt;notify&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Utility functions to work with Neovim&#39;s &lt;code&gt;vim.notify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/picker.md&#34;&gt;picker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Picker for selecting items&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/profiler.md&#34;&gt;profiler&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Neovim lua profiler&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/quickfile.md&#34;&gt;quickfile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When doing &lt;code&gt;nvim somefile.txt&lt;/code&gt;, it will render the file as quickly as possible, before loading your plugins.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/rename.md&#34;&gt;rename&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LSP-integrated file renaming with support for plugins like &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;neo-tree.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/echasnovski/mini.files&#34;&gt;mini.files&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/scope.md&#34;&gt;scope&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scope detection, text objects and jumping based on treesitter or indent&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/scratch.md&#34;&gt;scratch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scratch buffers with a persistent file&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/scroll.md&#34;&gt;scroll&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Smooth scrolling&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/statuscolumn.md&#34;&gt;statuscolumn&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pretty status column&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/terminal.md&#34;&gt;terminal&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create and toggle floating/split terminals&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/toggle.md&#34;&gt;toggle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle keymaps integrated with which-key icons / colors&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/util.md&#34;&gt;util&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Utility functions for Snacks &lt;em&gt;(library)&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/win.md&#34;&gt;win&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create and manage floating windows or splits&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/words.md&#34;&gt;words&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Auto-show LSP references and quickly navigate between them&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ÄºÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/docs/zen.md&#34;&gt;zen&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Zen mode ‚Ä¢ distraction-free coding&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- toc:end --&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neovim&lt;/strong&gt; &amp;gt;= 0.9.4&lt;/li&gt; &#xA; &lt;li&gt;for proper icons support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.icons&#34;&gt;mini.icons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!important] A couple of plugins &lt;strong&gt;require&lt;/strong&gt; &lt;code&gt;snacks.nvim&lt;/code&gt; to be set-up early. Setup creates some autocmds and does not load any plugins. Check the &lt;a href=&#34;https://github.com/folke/snacks.nvim/raw/main/lua/snacks/init.lua&#34;&gt;code&lt;/a&gt; to see what it does.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!caution] You need to explicitly pass options for a plugin or set &lt;code&gt;enabled = true&lt;/code&gt; to enable it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!tip] It&#39;s a good idea to run &lt;code&gt;:checkhealth snacks&lt;/code&gt; to see if everything is set up correctly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;folke/snacks.nvim&#34;,&#xA;  priority = 1000,&#xA;  lazy = false,&#xA;  ---@type snacks.Config&#xA;  opts = {&#xA;    -- your configuration comes here&#xA;    -- or leave it empty to use the default settings&#xA;    -- refer to the configuration section below&#xA;    bigfile = { enabled = true },&#xA;    dashboard = { enabled = true },&#xA;    explorer = { enabled = true },&#xA;    indent = { enabled = true },&#xA;    input = { enabled = true },&#xA;    picker = { enabled = true },&#xA;    notifier = { enabled = true },&#xA;    quickfile = { enabled = true },&#xA;    scope = { enabled = true },&#xA;    scroll = { enabled = true },&#xA;    statuscolumn = { enabled = true },&#xA;    words = { enabled = true },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an in-depth setup of &lt;code&gt;snacks.nvim&lt;/code&gt; with &lt;code&gt;lazy.nvim&lt;/code&gt;, check the &lt;a href=&#34;https://github.com/folke/snacks.nvim?tab=readme-ov-file#-usage&#34;&gt;example&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the readme of each plugin for their specific configuration.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Default Options&lt;/summary&gt; &#xA; &lt;!-- config:start --&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---@class snacks.Config&#xA;---@field animate? snacks.animate.Config&#xA;---@field bigfile? snacks.bigfile.Config&#xA;---@field dashboard? snacks.dashboard.Config&#xA;---@field dim? snacks.dim.Config&#xA;---@field explorer? snacks.explorer.Config&#xA;---@field gitbrowse? snacks.gitbrowse.Config&#xA;---@field image? snacks.image.Config&#xA;---@field indent? snacks.indent.Config&#xA;---@field input? snacks.input.Config&#xA;---@field layout? snacks.layout.Config&#xA;---@field lazygit? snacks.lazygit.Config&#xA;---@field notifier? snacks.notifier.Config&#xA;---@field picker? snacks.picker.Config&#xA;---@field profiler? snacks.profiler.Config&#xA;---@field quickfile? snacks.quickfile.Config&#xA;---@field scope? snacks.scope.Config&#xA;---@field scratch? snacks.scratch.Config&#xA;---@field scroll? snacks.scroll.Config&#xA;---@field statuscolumn? snacks.statuscolumn.Config&#xA;---@field terminal? snacks.terminal.Config&#xA;---@field toggle? snacks.toggle.Config&#xA;---@field win? snacks.win.Config&#xA;---@field words? snacks.words.Config&#xA;---@field zen? snacks.zen.Config&#xA;---@field styles? table&amp;lt;string, snacks.win.Config&amp;gt;&#xA;---@field image? snacks.image.Config|{}&#xA;{&#xA;  image = {&#xA;    -- define these here, so that we don&#39;t need to load the image module&#xA;    formats = {&#xA;      &#34;png&#34;,&#xA;      &#34;jpg&#34;,&#xA;      &#34;jpeg&#34;,&#xA;      &#34;gif&#34;,&#xA;      &#34;bmp&#34;,&#xA;      &#34;webp&#34;,&#xA;      &#34;tiff&#34;,&#xA;      &#34;heic&#34;,&#xA;      &#34;avif&#34;,&#xA;      &#34;mp4&#34;,&#xA;      &#34;mov&#34;,&#xA;      &#34;avi&#34;,&#xA;      &#34;mkv&#34;,&#xA;      &#34;webm&#34;,&#xA;      &#34;pdf&#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!-- config:end --&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Some plugins have examples in their documentation. You can include them in your config like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  dashboard = { example = &#34;github&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to customize options for a plugin after they have been resolved, you can use the &lt;code&gt;config&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  gitbrowse = {&#xA;    config = function(opts, defaults)&#xA;      table.insert(opts.remote_patterns, { &#34;my&#34;, &#34;custom pattern&#34; })&#xA;    end&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the example below for how to configure &lt;code&gt;snacks.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!-- example:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;folke/snacks.nvim&#34;,&#xA;  priority = 1000,&#xA;  lazy = false,&#xA;  ---@type snacks.Config&#xA;  opts = {&#xA;    bigfile = { enabled = true },&#xA;    dashboard = { enabled = true },&#xA;    explorer = { enabled = true },&#xA;    indent = { enabled = true },&#xA;    input = { enabled = true },&#xA;    notifier = {&#xA;      enabled = true,&#xA;      timeout = 3000,&#xA;    },&#xA;    picker = { enabled = true },&#xA;    quickfile = { enabled = true },&#xA;    scope = { enabled = true },&#xA;    scroll = { enabled = true },&#xA;    statuscolumn = { enabled = true },&#xA;    words = { enabled = true },&#xA;    styles = {&#xA;      notification = {&#xA;        -- wo = { wrap = true } -- Wrap notifications&#xA;      }&#xA;    }&#xA;  },&#xA;  keys = {&#xA;    -- Top Pickers &amp;amp; Explorer&#xA;    { &#34;&amp;lt;leader&amp;gt;&amp;lt;space&amp;gt;&#34;, function() Snacks.picker.smart() end, desc = &#34;Smart Find Files&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;,&#34;, function() Snacks.picker.buffers() end, desc = &#34;Buffers&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;/&#34;, function() Snacks.picker.grep() end, desc = &#34;Grep&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;:&#34;, function() Snacks.picker.command_history() end, desc = &#34;Command History&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;n&#34;, function() Snacks.picker.notifications() end, desc = &#34;Notification History&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;e&#34;, function() Snacks.explorer() end, desc = &#34;File Explorer&#34; },&#xA;    -- find&#xA;    { &#34;&amp;lt;leader&amp;gt;fb&#34;, function() Snacks.picker.buffers() end, desc = &#34;Buffers&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;fc&#34;, function() Snacks.picker.files({ cwd = vim.fn.stdpath(&#34;config&#34;) }) end, desc = &#34;Find Config File&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;ff&#34;, function() Snacks.picker.files() end, desc = &#34;Find Files&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;fg&#34;, function() Snacks.picker.git_files() end, desc = &#34;Find Git Files&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;fp&#34;, function() Snacks.picker.projects() end, desc = &#34;Projects&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;fr&#34;, function() Snacks.picker.recent() end, desc = &#34;Recent&#34; },&#xA;    -- git&#xA;    { &#34;&amp;lt;leader&amp;gt;gb&#34;, function() Snacks.picker.git_branches() end, desc = &#34;Git Branches&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;gl&#34;, function() Snacks.picker.git_log() end, desc = &#34;Git Log&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;gL&#34;, function() Snacks.picker.git_log_line() end, desc = &#34;Git Log Line&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;gs&#34;, function() Snacks.picker.git_status() end, desc = &#34;Git Status&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;gS&#34;, function() Snacks.picker.git_stash() end, desc = &#34;Git Stash&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;gd&#34;, function() Snacks.picker.git_diff() end, desc = &#34;Git Diff (Hunks)&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;gf&#34;, function() Snacks.picker.git_log_file() end, desc = &#34;Git Log File&#34; },&#xA;    -- Grep&#xA;    { &#34;&amp;lt;leader&amp;gt;sb&#34;, function() Snacks.picker.lines() end, desc = &#34;Buffer Lines&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sB&#34;, function() Snacks.picker.grep_buffers() end, desc = &#34;Grep Open Buffers&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sg&#34;, function() Snacks.picker.grep() end, desc = &#34;Grep&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sw&#34;, function() Snacks.picker.grep_word() end, desc = &#34;Visual selection or word&#34;, mode = { &#34;n&#34;, &#34;x&#34; } },&#xA;    -- search&#xA;    { &#39;&amp;lt;leader&amp;gt;s&#34;&#39;, function() Snacks.picker.registers() end, desc = &#34;Registers&#34; },&#xA;    { &#39;&amp;lt;leader&amp;gt;s/&#39;, function() Snacks.picker.search_history() end, desc = &#34;Search History&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sa&#34;, function() Snacks.picker.autocmds() end, desc = &#34;Autocmds&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sb&#34;, function() Snacks.picker.lines() end, desc = &#34;Buffer Lines&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sc&#34;, function() Snacks.picker.command_history() end, desc = &#34;Command History&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sC&#34;, function() Snacks.picker.commands() end, desc = &#34;Commands&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sd&#34;, function() Snacks.picker.diagnostics() end, desc = &#34;Diagnostics&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sD&#34;, function() Snacks.picker.diagnostics_buffer() end, desc = &#34;Buffer Diagnostics&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sh&#34;, function() Snacks.picker.help() end, desc = &#34;Help Pages&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sH&#34;, function() Snacks.picker.highlights() end, desc = &#34;Highlights&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;si&#34;, function() Snacks.picker.icons() end, desc = &#34;Icons&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sj&#34;, function() Snacks.picker.jumps() end, desc = &#34;Jumps&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sk&#34;, function() Snacks.picker.keymaps() end, desc = &#34;Keymaps&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sl&#34;, function() Snacks.picker.loclist() end, desc = &#34;Location List&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sm&#34;, function() Snacks.picker.marks() end, desc = &#34;Marks&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sM&#34;, function() Snacks.picker.man() end, desc = &#34;Man Pages&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sp&#34;, function() Snacks.picker.lazy() end, desc = &#34;Search for Plugin Spec&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sq&#34;, function() Snacks.picker.qflist() end, desc = &#34;Quickfix List&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sR&#34;, function() Snacks.picker.resume() end, desc = &#34;Resume&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;su&#34;, function() Snacks.picker.undo() end, desc = &#34;Undo History&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;uC&#34;, function() Snacks.picker.colorschemes() end, desc = &#34;Colorschemes&#34; },&#xA;    -- LSP&#xA;    { &#34;gd&#34;, function() Snacks.picker.lsp_definitions() end, desc = &#34;Goto Definition&#34; },&#xA;    { &#34;gD&#34;, function() Snacks.picker.lsp_declarations() end, desc = &#34;Goto Declaration&#34; },&#xA;    { &#34;gr&#34;, function() Snacks.picker.lsp_references() end, nowait = true, desc = &#34;References&#34; },&#xA;    { &#34;gI&#34;, function() Snacks.picker.lsp_implementations() end, desc = &#34;Goto Implementation&#34; },&#xA;    { &#34;gy&#34;, function() Snacks.picker.lsp_type_definitions() end, desc = &#34;Goto T[y]pe Definition&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;ss&#34;, function() Snacks.picker.lsp_symbols() end, desc = &#34;LSP Symbols&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;sS&#34;, function() Snacks.picker.lsp_workspace_symbols() end, desc = &#34;LSP Workspace Symbols&#34; },&#xA;    -- Other&#xA;    { &#34;&amp;lt;leader&amp;gt;z&#34;,  function() Snacks.zen() end, desc = &#34;Toggle Zen Mode&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;Z&#34;,  function() Snacks.zen.zoom() end, desc = &#34;Toggle Zoom&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;.&#34;,  function() Snacks.scratch() end, desc = &#34;Toggle Scratch Buffer&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;S&#34;,  function() Snacks.scratch.select() end, desc = &#34;Select Scratch Buffer&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;n&#34;,  function() Snacks.notifier.show_history() end, desc = &#34;Notification History&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;bd&#34;, function() Snacks.bufdelete() end, desc = &#34;Delete Buffer&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;cR&#34;, function() Snacks.rename.rename_file() end, desc = &#34;Rename File&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;gB&#34;, function() Snacks.gitbrowse() end, desc = &#34;Git Browse&#34;, mode = { &#34;n&#34;, &#34;v&#34; } },&#xA;    { &#34;&amp;lt;leader&amp;gt;gg&#34;, function() Snacks.lazygit() end, desc = &#34;Lazygit&#34; },&#xA;    { &#34;&amp;lt;leader&amp;gt;un&#34;, function() Snacks.notifier.hide() end, desc = &#34;Dismiss All Notifications&#34; },&#xA;    { &#34;&amp;lt;c-/&amp;gt;&#34;,      function() Snacks.terminal() end, desc = &#34;Toggle Terminal&#34; },&#xA;    { &#34;&amp;lt;c-_&amp;gt;&#34;,      function() Snacks.terminal() end, desc = &#34;which_key_ignore&#34; },&#xA;    { &#34;]]&#34;,         function() Snacks.words.jump(vim.v.count1) end, desc = &#34;Next Reference&#34;, mode = { &#34;n&#34;, &#34;t&#34; } },&#xA;    { &#34;[[&#34;,         function() Snacks.words.jump(-vim.v.count1) end, desc = &#34;Prev Reference&#34;, mode = { &#34;n&#34;, &#34;t&#34; } },&#xA;    {&#xA;      &#34;&amp;lt;leader&amp;gt;N&#34;,&#xA;      desc = &#34;Neovim News&#34;,&#xA;      function()&#xA;        Snacks.win({&#xA;          file = vim.api.nvim_get_runtime_file(&#34;doc/news.txt&#34;, false)[1],&#xA;          width = 0.6,&#xA;          height = 0.6,&#xA;          wo = {&#xA;            spell = false,&#xA;            wrap = false,&#xA;            signcolumn = &#34;yes&#34;,&#xA;            statuscolumn = &#34; &#34;,&#xA;            conceallevel = 3,&#xA;          },&#xA;        })&#xA;      end,&#xA;    }&#xA;  },&#xA;  init = function()&#xA;    vim.api.nvim_create_autocmd(&#34;User&#34;, {&#xA;      pattern = &#34;VeryLazy&#34;,&#xA;      callback = function()&#xA;        -- Setup some globals for debugging (lazy-loaded)&#xA;        _G.dd = function(...)&#xA;          Snacks.debug.inspect(...)&#xA;        end&#xA;        _G.bt = function()&#xA;          Snacks.debug.backtrace()&#xA;        end&#xA;        vim.print = _G.dd -- Override print to use snacks for `:=` command&#xA;&#xA;        -- Create some toggle mappings&#xA;        Snacks.toggle.option(&#34;spell&#34;, { name = &#34;Spelling&#34; }):map(&#34;&amp;lt;leader&amp;gt;us&#34;)&#xA;        Snacks.toggle.option(&#34;wrap&#34;, { name = &#34;Wrap&#34; }):map(&#34;&amp;lt;leader&amp;gt;uw&#34;)&#xA;        Snacks.toggle.option(&#34;relativenumber&#34;, { name = &#34;Relative Number&#34; }):map(&#34;&amp;lt;leader&amp;gt;uL&#34;)&#xA;        Snacks.toggle.diagnostics():map(&#34;&amp;lt;leader&amp;gt;ud&#34;)&#xA;        Snacks.toggle.line_number():map(&#34;&amp;lt;leader&amp;gt;ul&#34;)&#xA;        Snacks.toggle.option(&#34;conceallevel&#34;, { off = 0, on = vim.o.conceallevel &amp;gt; 0 and vim.o.conceallevel or 2 }):map(&#34;&amp;lt;leader&amp;gt;uc&#34;)&#xA;        Snacks.toggle.treesitter():map(&#34;&amp;lt;leader&amp;gt;uT&#34;)&#xA;        Snacks.toggle.option(&#34;background&#34;, { off = &#34;light&#34;, on = &#34;dark&#34;, name = &#34;Dark Background&#34; }):map(&#34;&amp;lt;leader&amp;gt;ub&#34;)&#xA;        Snacks.toggle.inlay_hints():map(&#34;&amp;lt;leader&amp;gt;uh&#34;)&#xA;        Snacks.toggle.indent():map(&#34;&amp;lt;leader&amp;gt;ug&#34;)&#xA;        Snacks.toggle.dim():map(&#34;&amp;lt;leader&amp;gt;uD&#34;)&#xA;      end,&#xA;    })&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- example:end --&gt; &#xA;&lt;h2&gt;üåà Highlight Groups&lt;/h2&gt; &#xA;&lt;p&gt;Snacks defines &lt;strong&gt;a lot&lt;/strong&gt; of highlight groups and it&#39;s impossible to document them all.&lt;/p&gt; &#xA;&lt;p&gt;Instead, you can use the picker to see all the highlight groups.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Snacks.picker.highlights({pattern = &#34;hl_group:^Snacks&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>