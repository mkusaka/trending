<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-06T01:55:39Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scipag/vulscan</title>
    <updated>2023-08-06T01:55:39Z</updated>
    <id>tag:github.com,2023-08-06:/scipag/vulscan</id>
    <link href="https://github.com/scipag/vulscan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Advanced vulnerability scanning with Nmap NSE&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vulscan - Vulnerability Scanning with Nmap&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/scipag/vulscan/master/logo.png&#34; width=&#34;300px&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Vulscan is a module which enhances nmap to a vulnerability scanner. The nmap option -sV enables version detection per service which is used to determine potential flaws according to the identified product. The data is looked up in an offline version of VulDB.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.computec.ch/projekte/vulscan/introduction/screenshot.png&#34; alt=&#34;Nmap NSE Vulscan&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Please install the files into the following folder of your Nmap installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Nmap\scripts\vulscan\*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone the GitHub repository like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/scipag/vulscan scipag_vulscan&#xA;ln -s `pwd`/scipag_vulscan /usr/share/nmap/scripts/vulscan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You have to run the following minimal command to initiate a simple vulnerability scan:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nmap -sV --script=vulscan/vulscan.nse www.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Vulnerability Database&lt;/h2&gt; &#xA;&lt;p&gt;There are the following pre-installed databases available at the moment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;scipvuldb.csv - &lt;a href=&#34;https://vuldb.com&#34;&gt;https://vuldb.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cve.csv - &lt;a href=&#34;https://cve.mitre.org&#34;&gt;https://cve.mitre.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;securityfocus.csv - &lt;a href=&#34;https://www.securityfocus.com/bid/&#34;&gt;https://www.securityfocus.com/bid/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;xforce.csv - &lt;a href=&#34;https://exchange.xforce.ibmcloud.com/&#34;&gt;https://exchange.xforce.ibmcloud.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;expliotdb.csv - &lt;a href=&#34;https://www.exploit-db.com&#34;&gt;https://www.exploit-db.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;openvas.csv - &lt;a href=&#34;http://www.openvas.org&#34;&gt;http://www.openvas.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;securitytracker.csv - &lt;a href=&#34;https://www.securitytracker.com&#34;&gt;https://www.securitytracker.com&lt;/a&gt; (end-of-life)&lt;/li&gt; &#xA; &lt;li&gt;osvdb.csv - &lt;a href=&#34;http://www.osvdb.org&#34;&gt;http://www.osvdb.org&lt;/a&gt; (end-of-life)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Single Database Mode&lt;/h2&gt; &#xA;&lt;p&gt;You may execute vulscan with the following argument to use a single database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscandb=your_own_database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to create and reference your own databases. This requires to create a database file, which has the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;id&amp;gt;;&amp;lt;title&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just execute vulscan like you would by refering to one of the pre-delivered databases. Feel free to share your own database and vulnerability connection with me, to add it to the official repository.&lt;/p&gt; &#xA;&lt;h2&gt;Update Database&lt;/h2&gt; &#xA;&lt;p&gt;The vulnerability databases are updated and assembled on a regularly basis. To support the latest disclosed vulnerabilities, keep your local vulnerability databases up-to-date.&lt;/p&gt; &#xA;&lt;p&gt;To automatically update the databases, simply set execution permissions to the &lt;code&gt;update.sh&lt;/code&gt; file and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod 744 update.sh&#xA;./update.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to manually update your databases, go to the following web site and download these files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/cve.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/cve.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/exploitdb.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/exploitdb.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/openvas.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/openvas.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/osvdb.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/osvdb.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/scipvuldb.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/scipvuldb.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/securityfocus.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/securityfocus.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/securitytracker.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/securitytracker.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/xforce.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/xforce.csv&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Copy the files into your vulscan folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/vulscan/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Version Detection&lt;/h2&gt; &#xA;&lt;p&gt;If the version detection was able to identify the software version and the vulnerability database is providing such details, also this data is matched.&lt;/p&gt; &#xA;&lt;p&gt;Disabling this feature might introduce false-positive but might also eliminate false-negatives and increase performance slighty. If you want to disable additional version matching, use the following argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscanversiondetection=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Version detection of vulscan is only as good as Nmap version detection and the vulnerability database entries are. Some databases do not provide conclusive version information, which may lead to a lot of false-positives (as can be seen for Apache servers).&lt;/p&gt; &#xA;&lt;h2&gt;Match Priority&lt;/h2&gt; &#xA;&lt;p&gt;The script is trying to identify the best matches only. If no positive match could been found, the best possible match (with might be a false-positive) is put on display.&lt;/p&gt; &#xA;&lt;p&gt;If you want to show all matches, which might introduce a lot of false-positives but might be useful for further investigation, use the following argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscanshowall=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactive Mode&lt;/h2&gt; &#xA;&lt;p&gt;The interactive mode helps you to override version detection results for every port. Use the following argument to enable the interactive mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscaninteractive=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reporting&lt;/h2&gt; &#xA;&lt;p&gt;All matching results are printed one by line. The default layout for this is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[{id}] {title}\n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to use another pre-defined report structure with the following argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscanoutput=details&#xA;--script-args vulscanoutput=listid&#xA;--script-args vulscanoutput=listlink&#xA;--script-args vulscanoutput=listtitle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may enforce your own report structure by using the following argument (some examples):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscanoutput=&#39;{link}\n{title}\n\n&#39;&#xA;--script-args vulscanoutput=&#39;ID: {id} - Title: {title} ({matches})\n&#39;&#xA;--script-args vulscanoutput=&#39;{id} | {product} | {version}\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported are the following elements for a dynamic report template:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{id} - ID of the vulnerability&lt;/li&gt; &#xA; &lt;li&gt;{title} - Title of the vulnerability&lt;/li&gt; &#xA; &lt;li&gt;{matches} - Count of matches&lt;/li&gt; &#xA; &lt;li&gt;{product} - Matched product string(s)&lt;/li&gt; &#xA; &lt;li&gt;{version} - Matched version string(s)&lt;/li&gt; &#xA; &lt;li&gt;{link} - Link to the vulnerability database entry&lt;/li&gt; &#xA; &lt;li&gt;\n - Newline&lt;/li&gt; &#xA; &lt;li&gt;\t - Tab&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every default database comes with an url and a link, which is used during the scanning and might be accessed as {link} within the customized report template. To use custom database links, use the following argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args &#34;vulscandblink=http://example.org/{id}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Keep in mind that this kind of derivative vulnerability scanning heavily relies on the confidence of the version detection of nmap, the amount of documented vulnerabilities and the accuracy of pattern matching. The existence of potential flaws is not verified with additional scanning nor exploiting techniques.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ellisonleao/glow.nvim</title>
    <updated>2023-08-06T01:55:39Z</updated>
    <id>tag:github.com,2023-08-06:/ellisonleao/glow.nvim</id>
    <link href="https://github.com/ellisonleao/glow.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A markdown preview directly in your neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.postimg.cc/Y9Z030zC/glow-nvim.jpg&#34;&gt; &lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;strong&gt;Preview markdown code directly in your neovim terminal&lt;/strong&gt;&lt;br&gt; &lt;small&gt;Powered by charm&#39;s &lt;a href=&#34;https://github.com/charmbracelet/glow&#34;&gt;glow&lt;/a&gt;&lt;/small&gt; &lt;/p&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blueviolet.svg?style=for-the-badge&amp;amp;logo=lua&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/ellisonleao/glow.nvim/default.yml?style=for-the-badge&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/178641/215353259-eb8688fb-5600-4b95-89a2-0f286e3b6441.mp4&#34;&gt;https://user-images.githubusercontent.com/178641/215353259-eb8688fb-5600-4b95-89a2-0f286e3b6441.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Breaking changes are now moved to a fixed topic in Discussions. &lt;a href=&#34;https://github.com/ellisonleao/glow.nvim/discussions/77&#34;&gt;Click here&lt;/a&gt; to see them&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.8+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://luarocks.org/modules/ellisonleao/glow.nvim&#34;&gt;&lt;img src=&#34;https://img.shields.io/luarocks/v/ellisonleao/glow.nvim?logo=lua&amp;amp;color=purple&#34; alt=&#34;LuaRocks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plug &#39;ellisonleao/glow.nvim&#39;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;glow&#39;).setup()&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#34;ellisonleao/glow.nvim&#34;, config = function() require(&#34;glow&#34;).setup() end}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#34;ellisonleao/glow.nvim&#34;, config = true, cmd = &#34;Glow&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;The script comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  glow_path = &#34;&#34;, -- will be filled automatically with your glow bin in $PATH, if any&#xA;  install_path = &#34;~/.local/bin&#34;, -- default path for installing glow binary&#xA;  border = &#34;shadow&#34;, -- floating window border config&#xA;  style = &#34;dark|light&#34;, -- filled automatically with your current editor background, you can override using glow json style&#xA;  pager = false,&#xA;  width = 80,&#xA;  height = 100,&#xA;  width_ratio = 0.7, -- maximum width of the Glow window compared to the nvim window size (overrides `width`)&#xA;  height_ratio = 0.7,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To override the custom configuration, call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;glow&#39;).setup({&#xA;  -- your override config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;glow&#39;).setup({&#xA;  style = &#34;dark&#34;,&#xA;  width = 120,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Preview file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Glow [path-to-md-file]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Preview current buffer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Glow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Close window&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Glow!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also close the floating window using &lt;code&gt;q&lt;/code&gt; or &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; keys&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kevinhwang91/nvim-bqf</title>
    <updated>2023-08-06T01:55:39Z</updated>
    <id>tag:github.com,2023-08-06:/kevinhwang91/nvim-bqf</id>
    <link href="https://github.com/kevinhwang91/nvim-bqf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Better quickfix window in Neovim, polish old quickfix window.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-bqf&lt;/h1&gt; &#xA;&lt;p&gt;The goal of nvim-bqf is to make Neovim&#39;s quickfix window better.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/17562139/137736502-91d32251-96a2-4c3f-ba74-65cfd336473e.mp4&#34;&gt;https://user-images.githubusercontent.com/17562139/137736502-91d32251-96a2-4c3f-ba74-65cfd336473e.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;In today&#39;s era of floating windows, are you afraid to toggle quickfix window to make your eyes uncomfortable? Are you constantly jumping between the edit window and the quickfix window when you use quickfix window to refactor because of lacking a sustainable preview window? Do you think quickfix window lacks a fuzzy search function? At present, nvim-bqf can solve the above problems.&lt;/p&gt; &#xA;&lt;p&gt;You really don&#39;t need any search replace plugins, because nvim-bqf with the built-in function of the quickfix window allows you to easily search and replace targets.&lt;/p&gt; &#xA;&lt;p&gt;So why not nvim-bqf?&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#table-of-contents&#34;&gt;Table of contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#todo&#34;&gt;TODO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#minimal-configuration&#34;&gt;Minimal configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#filter-with-signs&#34;&gt;Filter with signs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#fzf-mode&#34;&gt;Fzf mode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#filter-items-with-signs-demo&#34;&gt;Filter items with signs demo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#search-and-replace-demo&#34;&gt;Search and replace demo&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#setup-and-description&#34;&gt;Setup and description&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#function-table&#34;&gt;Function table&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#buffer-commands&#34;&gt;Buffer Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#quickfix-context&#34;&gt;Quickfix context&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#why-use-an-additional-context&#34;&gt;Why use an additional context?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#supported-keys&#34;&gt;Supported keys&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#simple-lua-tests-for-understanding&#34;&gt;Simple lua tests for understanding&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#highlight-groups&#34;&gt;Highlight groups&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#advanced-configuration&#34;&gt;Advanced configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#customize-configuration&#34;&gt;Customize configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#integrate-with-other-plugins&#34;&gt;Integrate with other plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#customize-quickfix-window-easter-egg&#34;&gt;Customize quickfix window (Easter egg)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#format-new-quickfix&#34;&gt;Format new quickfix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#rebuild-syntax-for-quickfix&#34;&gt;Rebuild syntax for quickfix&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#feedback&#34;&gt;Feedback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Toggle quickfix window with magic window keep your eyes comfortable&lt;/li&gt; &#xA; &lt;li&gt;Extend built-in context of quickfix to build an eye friendly highlighting at preview&lt;/li&gt; &#xA; &lt;li&gt;Support convenient actions inside quickfix window, see &lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#function-table&#34;&gt;Function table&lt;/a&gt; below&lt;/li&gt; &#xA; &lt;li&gt;Optimize the buffer preview under treesitter to get extreme performance&lt;/li&gt; &#xA; &lt;li&gt;Using signs to filter the items of quickfix window&lt;/li&gt; &#xA; &lt;li&gt;Integrate &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; as a picker/filter in quickfix window&lt;/li&gt; &#xA; &lt;li&gt;Mouse supported for preview window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Find a better way to list history and switch to one&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Use context field to override the existed configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; 0.6.1 or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; (optional, 0.25.0 later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#39;kevinhwang91/nvim-bqf&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Minimal configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#39;kevinhwang91/nvim-bqf&#39;, ft = &#39;qf&#39;}&#xA;&#xA;-- optional&#xA;use {&#39;junegunn/fzf&#39;, run = function()&#xA;    vim.fn[&#39;fzf#install&#39;]()&#xA;end&#xA;}&#xA;&#xA;-- optional, highly recommended&#xA;use {&#39;nvim-treesitter/nvim-treesitter&#39;, run = &#39;:TSUpdate&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The nvim-bqf&#39;s preview builds upon the buffers. I highly recommended to use &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; to do syntax for the buffer, because vim&#39;s syntax is very lagging and is extremely bad for the user experience in large files.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;nvim-bqf has optimized the preview performance for treesitter&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you are familiar with quickfix, use quickfix as usual.&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t know quickfix well, you can run &lt;code&gt;:vimgrep /\w\+/j % | copen&lt;/code&gt; under a buffer inside nvim to get started quickly.&lt;/li&gt; &#xA; &lt;li&gt;If you want to taste quickfix like demo, check out &lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#integrate-with-other-plugins&#34;&gt;Integrate with other plugins&lt;/a&gt;, and pick up the configuration you like.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Filter with signs&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Press &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt; to toggle the sign of item&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;zn&lt;/code&gt; or &lt;code&gt;zN&lt;/code&gt; will create new quickfix list&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Fzf mode&lt;/h4&gt; &#xA;&lt;p&gt;Press &lt;code&gt;zf&lt;/code&gt; in quickfix window will enter fzf mode.&lt;/p&gt; &#xA;&lt;p&gt;fzf in nvim-bqf supports &lt;code&gt;ctrl-t&lt;/code&gt;/&lt;code&gt;ctrl-x&lt;/code&gt;/&lt;code&gt;ctrl-v&lt;/code&gt; key bindings that allow you to open up an item in a new tab, a new horizontal split, or in a new vertical split.&lt;/p&gt; &#xA;&lt;p&gt;fzf becomes a quickfix filter and create a new quickfix list when multiple items are selected and accepted.&lt;/p&gt; &#xA;&lt;p&gt;nvim-bqf also supports &lt;code&gt;ctrl-q&lt;/code&gt; to toggle items&#39; sign and adapts &lt;code&gt;preview-half-page-up&lt;/code&gt;, &lt;code&gt;preview-half-page-down&lt;/code&gt; and &lt;code&gt;toggle-preview&lt;/code&gt; fzf&#39;s actions for preview.&lt;/p&gt; &#xA;&lt;p&gt;Please run &lt;code&gt;man fzf&lt;/code&gt; and check out &lt;code&gt;KEY/EVENT BINDINGS&lt;/code&gt; section for details.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;re two ways to adapt fzf&#39;s actions for preview function, use &lt;code&gt;ctrl-f&lt;/code&gt;and &lt;code&gt;ctrl-b&lt;/code&gt; keys as example.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt; contains &lt;code&gt;--bind=ctrl-f:preview-half-page-down,ctrl-b:preview-half-page-up&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Inject &lt;code&gt;extra_opts = {&#39;--bind&#39;, &#39;ctrl-f:preview-half-page-down,ctrl-b:preview-half-page-up&#39;}&lt;/code&gt; to &lt;code&gt;setup&lt;/code&gt; function;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Filter items with signs demo&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/17562139/137736623-e436cb3e-af40-4a00-b08a-b7120d41821e.mp4&#34;&gt;https://user-images.githubusercontent.com/17562139/137736623-e436cb3e-af40-4a00-b08a-b7120d41821e.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;input &lt;code&gt;^^&lt;/code&gt; in fzf prompt will find all signed items, &lt;code&gt;ctrl-o&lt;/code&gt; in fzf mode has bind &lt;code&gt;toggle-all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Search and replace demo&lt;/h4&gt; &#xA;&lt;p&gt;Using external grep-like program to search &lt;code&gt;display&lt;/code&gt; and replace it to &lt;code&gt;show&lt;/code&gt;, but exclude &lt;code&gt;session.lua&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/17562139/137747257-ff8fb5cf-e437-42e3-b4e4-76c72a0273aa.mp4&#34;&gt;https://user-images.githubusercontent.com/17562139/137747257-ff8fb5cf-e437-42e3-b4e4-76c72a0273aa.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Demonstrating batch undo just show that quickfix has this feature&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Setup and description&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    auto_enable = {&#xA;        description = [[Enable nvim-bqf in quickfix window automatically]],&#xA;        default = true&#xA;    },&#xA;    magic_window = {&#xA;        description = [[Give the window magic, when the window is splited horizontally, keep&#xA;            the distance between the current line and the top/bottom border of neovim unchanged.&#xA;            It&#39;s a bit like a floating window, but the window is indeed a normal window, without&#xA;            any floating attributes.]],&#xA;        default = true&#xA;    },&#xA;    auto_resize_height = {&#xA;        description = [[Resize quickfix window height automatically.&#xA;            Shrink higher height to size of list in quickfix window, otherwise extend height&#xA;            to size of list or to default height (10)]],&#xA;        default = false&#xA;    },&#xA;    preview = {&#xA;        auto_preview = {&#xA;            description = [[Enable preview in quickfix window automatically]],&#xA;            default = true&#xA;        },&#xA;        border = {&#xA;            description = [[The border for preview window,&#xA;                `:h nvim_open_win() | call search(&#39;border:&#39;)`]],&#xA;            default = &#39;rounded&#39;,&#xA;        },&#xA;        show_title = {&#xA;            description = [[Show the window title]],&#xA;            default = true&#xA;        },&#xA;        show_scroll_bar = {&#xA;            description = [[Show the scroll bar]],&#xA;            default = true&#xA;        },&#xA;        delay_syntax = {&#xA;            description = [[Delay time, to do syntax for previewed buffer, unit is millisecond]],&#xA;            default = 50&#xA;        },&#xA;        win_height = {&#xA;            description = [[The height of preview window for horizontal layout,&#xA;                large value (like 999) perform preview window as a &#34;full&#34; mode]],&#xA;            default = 15&#xA;        },&#xA;        win_vheight = {&#xA;            description = [[The height of preview window for vertical layout]],&#xA;            default = 15&#xA;        },&#xA;        winblend = {&#xA;            description = [[The winblend for preview window, `:h winblend`]],&#xA;            default = 12&#xA;        }&#xA;        wrap = {&#xA;            description = [[Wrap the line, `:h wrap` for detail]],&#xA;            default = false&#xA;        },&#xA;        buf_label = {&#xA;            description = [[Add label of current item buffer at the end of the item line]],&#xA;            default = true&#xA;        },&#xA;        should_preview_cb = {&#xA;            description = [[A callback function to decide whether to preview while switching buffer,&#xA;                with (bufnr: number, qwinid: number) parameters]],&#xA;            default = nil&#xA;        }&#xA;    },&#xA;    func_map = {&#xA;        description = [[The table for {function = key}]],&#xA;        default = [[see ###Function table for detail]],&#xA;    },&#xA;    filter = {&#xA;        fzf = {&#xA;            action_for = {&#xA;                [&#39;ctrl-t&#39;] = {&#xA;                    description = [[Press ctrl-t to open up the item in a new tab]],&#xA;                    default = &#39;tabedit&#39;&#xA;                },&#xA;                [&#39;ctrl-v&#39;] = {&#xA;                    description = [[Press ctrl-v to open up the item in a new vertical split]],&#xA;                    default = &#39;vsplit&#39;&#xA;                },&#xA;                [&#39;ctrl-x&#39;] = {&#xA;                    description = [[Press ctrl-x to open up the item in a new horizontal split]],&#xA;                    default = &#39;split&#39;&#xA;                },&#xA;                [&#39;ctrl-q&#39;] = {&#xA;                    description = [[Press ctrl-q to toggle sign for the selected items]],&#xA;                    default = &#39;signtoggle&#39;&#xA;                },&#xA;                [&#39;ctrl-c&#39;] = {&#xA;                    description = [[Press ctrl-c to close quickfix window and abort fzf]],&#xA;                    default = &#39;closeall&#39;&#xA;                }&#xA;            },&#xA;            extra_opts = {&#xA;                description = &#39;Extra options for fzf&#39;,&#xA;                default = {&#39;--bind&#39;, &#39;ctrl-o:toggle-all&#39;}&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before loading any modules, &lt;code&gt;:lua =require(&#39;bqf.config&#39;)&lt;/code&gt; will show you everything about current configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Function table&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Function&lt;/code&gt; only works in the quickfix window, keys can be customized by &lt;code&gt;lua require(&#39;bqf&#39;).setup({func_map = {}})&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can reference &lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#customize-configuration&#34;&gt;Customize configuration&lt;/a&gt; to configure &lt;code&gt;func_map&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;   &lt;th&gt;Def Key&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;open&lt;/td&gt; &#xA;   &lt;td&gt;open the item under the cursor in quickfix window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;openc&lt;/td&gt; &#xA;   &lt;td&gt;open the item, and close quickfix window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;o&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;drop&lt;/td&gt; &#xA;   &lt;td&gt;use &lt;code&gt;drop&lt;/code&gt; to open the item, and close quickfix window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;O&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tabdrop&lt;/td&gt; &#xA;   &lt;td&gt;use &lt;code&gt;tab drop&lt;/code&gt; to open the item, and close quickfix window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tab&lt;/td&gt; &#xA;   &lt;td&gt;open the item in a new tab&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;t&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tabb&lt;/td&gt; &#xA;   &lt;td&gt;open the item in a new tab, but stay at quickfix window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tabc&lt;/td&gt; &#xA;   &lt;td&gt;open the item in a new tab, and close quickfix window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;split&lt;/td&gt; &#xA;   &lt;td&gt;open the item in vertical split&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-x&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vsplit&lt;/td&gt; &#xA;   &lt;td&gt;open the item in horizontal split&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-v&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;prevfile&lt;/td&gt; &#xA;   &lt;td&gt;go to previous file under the cursor in quickfix window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-p&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nextfile&lt;/td&gt; &#xA;   &lt;td&gt;go to next file under the cursor in quickfix window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;prevhist&lt;/td&gt; &#xA;   &lt;td&gt;go to previous quickfix list in quickfix window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nexthist&lt;/td&gt; &#xA;   &lt;td&gt;go to next quickfix list in quickfix window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lastleave&lt;/td&gt; &#xA;   &lt;td&gt;go to last leaving position in quickfix window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stoggleup&lt;/td&gt; &#xA;   &lt;td&gt;toggle sign and move cursor up&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stoggledown&lt;/td&gt; &#xA;   &lt;td&gt;toggle sign and move cursor down&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stogglevm&lt;/td&gt; &#xA;   &lt;td&gt;toggle multiple signs in visual mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stogglebuf&lt;/td&gt; &#xA;   &lt;td&gt;toggle signs for same buffers under the cursor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sclear&lt;/td&gt; &#xA;   &lt;td&gt;clear the signs in current quickfix list&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;z&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pscrollup&lt;/td&gt; &#xA;   &lt;td&gt;scroll up half-page in preview window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pscrolldown&lt;/td&gt; &#xA;   &lt;td&gt;scroll down half-page in preview window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pscrollorig&lt;/td&gt; &#xA;   &lt;td&gt;scroll back to original position in preview window&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ptogglemode&lt;/td&gt; &#xA;   &lt;td&gt;toggle preview window between normal and max size&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ptoggleitem&lt;/td&gt; &#xA;   &lt;td&gt;toggle preview for an item of quickfix list&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ptoggleauto&lt;/td&gt; &#xA;   &lt;td&gt;toggle auto preview when cursor moved&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;filter&lt;/td&gt; &#xA;   &lt;td&gt;create new list for signed items&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zn&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;filterr&lt;/td&gt; &#xA;   &lt;td&gt;create new list for non-signed items&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zN&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fzffilter&lt;/td&gt; &#xA;   &lt;td&gt;enter fzf mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Additional mouse supported:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;ScrollWheelUp&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ScrollWheelDown&amp;gt;&lt;/code&gt;: Scroll preview window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;2-LeftMouse&amp;gt;&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In quickfix window: Type &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;;&lt;/li&gt; &#xA;   &lt;li&gt;In preview window: Jump to the location even it has scrolled;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Buffer Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfEnable&lt;/code&gt;: Enable nvim-bqf in quickfix window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfDisable&lt;/code&gt;: Disable nvim-bqf in quickfix window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfToggle&lt;/code&gt;: Toggle nvim-bqf in quickfix window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfAutoToggle&lt;/code&gt;: Toggle nvim-bqf enable automatically&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/lua/bqf.lua&#34;&gt;bqf.lua&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quickfix context&lt;/h3&gt; &#xA;&lt;p&gt;Vim grant users an ability to stuff a context to quickfix, please run &lt;code&gt;:help quickfix-context&lt;/code&gt; for detail.&lt;/p&gt; &#xA;&lt;h4&gt;Why use an additional context?&lt;/h4&gt; &#xA;&lt;p&gt;nvim-bqf will use the context to implement missing features of quickfix. To get better highlighting experience, nvim-bqf processeds the vim regrex pattern and &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specification#range&#34;&gt;lsp range&lt;/a&gt; from the context additionally.&lt;/p&gt; &#xA;&lt;p&gt;The context&#39;s format that can be processed by nvim-bqf is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local context = {context = {bqf = {}}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;nvim-bqf only occupies a key of &lt;code&gt;context&lt;/code&gt;, which makes nvim-bqf get along well with other plugins in context of the quickfix window.&lt;/p&gt; &#xA;&lt;h4&gt;Supported keys&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;context = {&#xA;    bqf = {&#xA;        pattern_hl = {&#xA;            description = [[search pattern from current position]],&#xA;            type = &#39;string&#39;&#xA;        },&#xA;        lsp_ranges_hl = {&#xA;            description = [[a list of lsp range. The length of list is equal to the items&#39;,&#xA;            pairwise correspondence each other]],&#xA;            type = &#39;table&#39;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Simple lua tests for understanding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cmd = vim.cmd&#xA;local api = vim.api&#xA;local fn = vim.fn&#xA;&#xA;local function createQf()&#xA;    cmd(&#39;enew&#39;)&#xA;    local bufnr = api.nvim_get_current_buf()&#xA;    local lines = {}&#xA;    for i = 1, 3 do&#xA;        table.insert(lines, (&#39;%d | %s&#39;):format(i, fn.strftime(&#39;%F&#39;)))&#xA;    end&#xA;    api.nvim_buf_set_lines(bufnr, 0, -1, false, lines)&#xA;    fn.setqflist({&#xA;        {bufnr = bufnr, lnum = 1, col = 5}, {bufnr = bufnr, lnum = 2, col = 10},&#xA;        {bufnr = bufnr, lnum = 3, col = 13}&#xA;    })&#xA;end&#xA;&#xA;function _G.bqfPattern()&#xA;    createQf()&#xA;    fn.setqflist({}, &#39;r&#39;, {context = {bqf = {pattern_hl = [[\d\+]]}}, title = &#39;patternHl&#39;})&#xA;    cmd(&#39;cw&#39;)&#xA;end&#xA;&#xA;function _G.bqfLspRanges()&#xA;    createQf()&#xA;    local lspRanges = {}&#xA;    table.insert(lspRanges,&#xA;        {start = {line = 0, character = 4}, [&#39;end&#39;] = {line = 0, character = 8}})&#xA;    table.insert(lspRanges,&#xA;        {start = {line = 1, character = 9}, [&#39;end&#39;] = {line = 1, character = 11}})&#xA;    table.insert(lspRanges,&#xA;        {start = {line = 2, character = 12}, [&#39;end&#39;] = {line = 2, character = 14}})&#xA;    fn.setqflist({}, &#39;r&#39;, {context = {bqf = {lsp_ranges_hl = lspRanges}}, title = &#39;lspRangesHl&#39;})&#xA;    cmd(&#39;cw&#39;)&#xA;end&#xA;&#xA;function _G.qfRanges()&#xA;    createQf()&#xA;    local items = fn.getqflist()&#xA;    local it1, it2, it3 = items[1], items[2], items[3]&#xA;    it1.end_lnum, it1.end_col = it1.lnum, it1.col + 4&#xA;    it2.end_lnum, it2.end_col = it2.lnum, it2.col + 2&#xA;    it3.end_lnum, it3.end_col = it3.lnum, it3.col + 2&#xA;    fn.setqflist({}, &#39;r&#39;, {items = items, title = &#39;qfRangesHl&#39;})&#xA;    cmd(&#39;cw&#39;)&#xA;end&#xA;&#xA;-- Save and source me(`so %`). Run `:lua bqfPattern()`, `:lua bqfLspRanges()` and `:lua qfRanges()`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;nvim-bqf actually works with context in &lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/#integrate-with-other-plugins&#34;&gt;Integrate with other plugins&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Highlight groups&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi default link BqfPreviewFloat Normal&#xA;hi default link BqfPreviewBorder FloatBorder&#xA;hi default link BqfPreviewTitle Title&#xA;hi default link BqfPreviewThumb PmenuThumb&#xA;hi default link BqfPreviewSbar PmenuSbar&#xA;hi default link BqfPreviewCursor Cursor&#xA;hi default link BqfPreviewCursorLine CursorLine&#xA;hi default link BqfPreviewRange IncSearch&#xA;hi default link BqfPreviewBufLabel BqfPreviewRange&#xA;hi default BqfSign ctermfg=14 guifg=Cyan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfPreviewFloat&lt;/code&gt;: Floating window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfPreviewBorder&lt;/code&gt;: Border of floating window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfPreviewTitle&lt;/code&gt;: Title of preview window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfPreviewThumb&lt;/code&gt;: Thumb of preview window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfPreviewSbar&lt;/code&gt;: Scroll bar of preview window, only take effect if the border is missing right.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfPreviewCursor&lt;/code&gt;: The cursor format &lt;code&gt;[lnum, col]&lt;/code&gt; in preview window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfPreviewCursorLine&lt;/code&gt;: The text line of the cursor in preview window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfPreviewRange&lt;/code&gt;: The range format &lt;code&gt;[lnum, col, range]&lt;/code&gt;, which is produced by &lt;code&gt;pattern_hl&lt;/code&gt;, &lt;code&gt;lsp_ranges_hl&lt;/code&gt; and quickfix range.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfPreviewBufLabel&lt;/code&gt;: The index and count of the buffer under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BqfSign&lt;/code&gt;: The sign in quickfix window.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Customize configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd([[&#xA;    hi BqfPreviewBorder guifg=#3e8e2d ctermfg=71&#xA;    hi BqfPreviewTitle guifg=#3e8e2d ctermfg=71&#xA;    hi BqfPreviewThumb guibg=#3e8e2d ctermbg=71&#xA;    hi link BqfPreviewRange Search&#xA;]])&#xA;&#xA;require(&#39;bqf&#39;).setup({&#xA;    auto_enable = true,&#xA;    auto_resize_height = true, -- highly recommended enable&#xA;    preview = {&#xA;        win_height = 12,&#xA;        win_vheight = 12,&#xA;        delay_syntax = 80,&#xA;        border = {&#39;┏&#39;, &#39;━&#39;, &#39;┓&#39;, &#39;┃&#39;, &#39;┛&#39;, &#39;━&#39;, &#39;┗&#39;, &#39;┃&#39;},&#xA;        show_title = false,&#xA;        should_preview_cb = function(bufnr, qwinid)&#xA;            local ret = true&#xA;            local bufname = vim.api.nvim_buf_get_name(bufnr)&#xA;            local fsize = vim.fn.getfsize(bufname)&#xA;            if fsize &amp;gt; 100 * 1024 then&#xA;                -- skip file size greater than 100k&#xA;                ret = false&#xA;            elseif bufname:match(&#39;^fugitive://&#39;) then&#xA;                -- skip fugitive buffer&#xA;                ret = false&#xA;            end&#xA;            return ret&#xA;        end&#xA;    },&#xA;    -- make `drop` and `tab drop` to become preferred&#xA;    func_map = {&#xA;        drop = &#39;o&#39;,&#xA;        openc = &#39;O&#39;,&#xA;        split = &#39;&amp;lt;C-s&amp;gt;&#39;,&#xA;        tabdrop = &#39;&amp;lt;C-t&amp;gt;&#39;,&#xA;        -- set to empty string to disable&#xA;        tabc = &#39;&#39;,&#xA;        ptogglemode = &#39;z,&#39;,&#xA;    },&#xA;    filter = {&#xA;        fzf = {&#xA;            action_for = {[&#39;ctrl-s&#39;] = &#39;split&#39;, [&#39;ctrl-t&#39;] = &#39;tab drop&#39;},&#xA;            extra_opts = {&#39;--bind&#39;, &#39;ctrl-o:toggle-all&#39;, &#39;--prompt&#39;, &#39;&amp;gt; &#39;}&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integrate with other plugins&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local fn = vim.fn&#xA;local cmd = vim.cmd&#xA;local api = vim.api&#xA;&#xA;cmd([[&#xA;    packadd nvim-bqf&#xA;    packadd fzf&#xA;    packadd nvim-treesitter&#xA;    packadd vim-grepper&#xA;    packadd coc.nvim&#xA;]])&#xA;&#xA;-- https://github.com/mhinz/vim-grepper&#xA;vim.g.grepper = {tools = {&#39;rg&#39;, &#39;grep&#39;}, searchreg = 1}&#xA;cmd(([[&#xA;    aug Grepper&#xA;        au!&#xA;        au User Grepper ++nested %s&#xA;    aug END&#xA;]]):format([[call setqflist([], &#39;r&#39;, {&#39;context&#39;: {&#39;bqf&#39;: {&#39;pattern_hl&#39;: &#39;\%#&#39; . getreg(&#39;/&#39;)}}})]]))&#xA;&#xA;-- try `gsiw` under word&#xA;cmd([[&#xA;    nmap gs  &amp;lt;plug&amp;gt;(GrepperOperator)&#xA;    xmap gs  &amp;lt;plug&amp;gt;(GrepperOperator)&#xA;]])&#xA;&#xA;-- https://github.com/neoclide/coc.nvim&#xA;-- if you use coc-fzf, you should disable its CocLocationsChange event&#xA;-- to make bqf work for &amp;lt;Plug&amp;gt;(coc-references)&#xA;&#xA;-- vim.schedule(function()&#xA;--     cmd(&#39;au! CocFzfLocation User CocLocationsChange&#39;)&#xA;-- end)&#xA;vim.g.coc_enable_locationlist = 0&#xA;cmd([[&#xA;    aug Coc&#xA;        au!&#xA;        au User CocLocationsChange lua _G.jumpToLoc()&#xA;    aug END&#xA;]])&#xA;&#xA;cmd([[&#xA;    nmap &amp;lt;silent&amp;gt; gr &amp;lt;Plug&amp;gt;(coc-references)&#xA;    nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;qd &amp;lt;Cmd&amp;gt;lua _G.diagnostic()&amp;lt;CR&amp;gt;&#xA;]])&#xA;&#xA;-- just use `_G` prefix as a global function for a demo&#xA;-- please use module instead in reality&#xA;function _G.jumpToLoc(locs)&#xA;    locs = locs or vim.g.coc_jump_locations&#xA;    fn.setloclist(0, {}, &#39; &#39;, {title = &#39;CocLocationList&#39;, items = locs})&#xA;    local winid = fn.getloclist(0, {winid = 0}).winid&#xA;    if winid == 0 then&#xA;        cmd(&#39;abo lw&#39;)&#xA;    else&#xA;        api.nvim_set_current_win(winid)&#xA;    end&#xA;end&#xA;&#xA;function _G.diagnostic()&#xA;    fn.CocActionAsync(&#39;diagnosticList&#39;, &#39;&#39;, function(err, res)&#xA;        if err == vim.NIL then&#xA;            local items = {}&#xA;            for _, d in ipairs(res) do&#xA;                local text = (&#39;[%s%s] %s&#39;):format((d.source == &#39;&#39; and &#39;coc.nvim&#39; or d.source),&#xA;                    (d.code == vim.NIL and &#39;&#39; or &#39; &#39; .. d.code), d.message:match(&#39;([^\n]+)\n*&#39;))&#xA;                local item = {&#xA;                    filename = d.file,&#xA;                    lnum = d.lnum,&#xA;                    end_lnum = d.end_lnum,&#xA;                    col = d.col,&#xA;                    end_col = d.end_col,&#xA;                    text = text,&#xA;                    type = d.severity&#xA;                }&#xA;                table.insert(items, item)&#xA;            end&#xA;            fn.setqflist({}, &#39; &#39;, {title = &#39;CocDiagnosticList&#39;, items = items})&#xA;&#xA;            cmd(&#39;bo cope&#39;)&#xA;        end&#xA;    end)&#xA;end&#xA;-- you can also subscribe User `CocDiagnosticChange` event to reload your diagnostic in quickfix&#xA;-- dynamically, enjoy yourself :)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customize quickfix window (Easter egg)&lt;/h2&gt; &#xA;&lt;p&gt;Quickfix window default UI is extremely outdated and low level aesthetics. However, you can dress up your personal quickfix window:) Here is the configuration for demo:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This section is not &lt;code&gt;nvim-bqf&lt;/code&gt; exclusive, you can use the configuration without &lt;code&gt;nvim-bqf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Format new quickfix&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;quickfixtextfunc&lt;/code&gt; option and write down corresponding function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local fn = vim.fn&#xA;&#xA;function _G.qftf(info)&#xA;    local items&#xA;    local ret = {}&#xA;    -- The name of item in list is based on the directory of quickfix window.&#xA;    -- Change the directory for quickfix window make the name of item shorter.&#xA;    -- It&#39;s a good opportunity to change current directory in quickfixtextfunc :)&#xA;    --&#xA;    -- local alterBufnr = fn.bufname(&#39;#&#39;) -- alternative buffer is the buffer before enter qf window&#xA;    -- local root = getRootByAlterBufnr(alterBufnr)&#xA;    -- vim.cmd((&#39;noa lcd %s&#39;):format(fn.fnameescape(root)))&#xA;    --&#xA;    if info.quickfix == 1 then&#xA;        items = fn.getqflist({id = info.id, items = 0}).items&#xA;    else&#xA;        items = fn.getloclist(info.winid, {id = info.id, items = 0}).items&#xA;    end&#xA;    local limit = 31&#xA;    local fnameFmt1, fnameFmt2 = &#39;%-&#39; .. limit .. &#39;s&#39;, &#39;…%.&#39; .. (limit - 1) .. &#39;s&#39;&#xA;    local validFmt = &#39;%s │%5d:%-3d│%s %s&#39;&#xA;    for i = info.start_idx, info.end_idx do&#xA;        local e = items[i]&#xA;        local fname = &#39;&#39;&#xA;        local str&#xA;        if e.valid == 1 then&#xA;            if e.bufnr &amp;gt; 0 then&#xA;                fname = fn.bufname(e.bufnr)&#xA;                if fname == &#39;&#39; then&#xA;                    fname = &#39;[No Name]&#39;&#xA;                else&#xA;                    fname = fname:gsub(&#39;^&#39; .. vim.env.HOME, &#39;~&#39;)&#xA;                end&#xA;                -- char in fname may occur more than 1 width, ignore this issue in order to keep performance&#xA;                if #fname &amp;lt;= limit then&#xA;                    fname = fnameFmt1:format(fname)&#xA;                else&#xA;                    fname = fnameFmt2:format(fname:sub(1 - limit))&#xA;                end&#xA;            end&#xA;            local lnum = e.lnum &amp;gt; 99999 and -1 or e.lnum&#xA;            local col = e.col &amp;gt; 999 and -1 or e.col&#xA;            local qtype = e.type == &#39;&#39; and &#39;&#39; or &#39; &#39; .. e.type:sub(1, 1):upper()&#xA;            str = validFmt:format(fname, lnum, col, qtype, e.text)&#xA;        else&#xA;            str = e.text&#xA;        end&#xA;        table.insert(ret, str)&#xA;    end&#xA;    return ret&#xA;end&#xA;&#xA;vim.o.qftf = &#39;{info -&amp;gt; v:lua._G.qftf(info)}&#39;&#xA;&#xA;-- Adapt fzf&#39;s delimiter in nvim-bqf&#xA;require(&#39;bqf&#39;).setup({&#xA;    filter = {&#xA;        fzf = {&#xA;            extra_opts = {&#39;--bind&#39;, &#39;ctrl-o:toggle-all&#39;, &#39;--delimiter&#39;, &#39;│&#39;}&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rebuild syntax for quickfix&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;qf.vim&lt;/code&gt; under your syntax path, for instance: &lt;code&gt;~/.config/nvim/syntax/qf.vim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;if exists(&#39;b:current_syntax&#39;)&#xA;    finish&#xA;endif&#xA;&#xA;syn match qfFileName /^[^│]*/ nextgroup=qfSeparatorLeft&#xA;syn match qfSeparatorLeft /│/ contained nextgroup=qfLineNr&#xA;syn match qfLineNr /[^│]*/ contained nextgroup=qfSeparatorRight&#xA;syn match qfSeparatorRight &#39;│&#39; contained nextgroup=qfError,qfWarning,qfInfo,qfNote&#xA;syn match qfError / E .*$/ contained&#xA;syn match qfWarning / W .*$/ contained&#xA;syn match qfInfo / I .*$/ contained&#xA;syn match qfNote / [NH] .*$/ contained&#xA;&#xA;hi def link qfFileName Directory&#xA;hi def link qfSeparatorLeft Delimiter&#xA;hi def link qfSeparatorRight Delimiter&#xA;hi def link qfLineNr LineNr&#xA;hi def link qfError DiagnosticError&#xA;hi def link qfWarning DiagnosticWarn&#xA;hi def link qfInfo DiagnosticInfo&#xA;hi def link qfNote DiagnosticHint&#xA;&#xA;let b:current_syntax = &#39;qf&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you get an issue or come up with an awesome idea, don&#39;t hesitate to open an issue in github.&lt;/li&gt; &#xA; &lt;li&gt;If you think this plugin is useful or cool, consider rewarding it a star.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is licensed under a BSD-3-clause license. See &lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-bqf/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>