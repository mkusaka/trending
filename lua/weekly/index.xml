<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-18T01:47:25Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>VonHeikemen/lsp-zero.nvim</title>
    <updated>2022-12-18T01:47:25Z</updated>
    <id>tag:github.com,2022-12-18:/VonHeikemen/lsp-zero.nvim</id>
    <link href="https://github.com/VonHeikemen/lsp-zero.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A starting point to setup some lsp related features in neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LSP Zero&lt;/h1&gt; &#xA;&lt;p&gt;The purpose of this plugin is to bundle all the &#34;boilerplate code&#34; necessary to have &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; (a popular completion engine) and the LSP client working together nicely. Additionally, with the help of &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;mason.nvim&lt;/a&gt;, it can let you install language servers from inside neovim.&lt;/p&gt; &#xA;&lt;p&gt;Provided that you meet all the requirements for the installation of this plugin and the language servers, the following piece of code should be enough to get started.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsp = require(&#39;lsp-zero&#39;)&#xA;&#xA;lsp.preset(&#39;recommended&#39;)&#xA;lsp.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;.preset()&lt;/code&gt; will indicate what set of options and features you want enabled. And &lt;code&gt;.setup()&lt;/code&gt; will be the one doing the heavy lifting. Other forms of customization are available, of course, they are detailed in the &lt;a href=&#34;https://github.com/VonHeikemen/lsp-zero.nvim#lua-api&#34;&gt;Lua api&lt;/a&gt; section and the &lt;a href=&#34;https://github.com/VonHeikemen/lsp-zero.nvim/raw/main/advance-usage.md&#34;&gt;Advance usage&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;If you want to know all the things this preset does for you check out the &lt;a href=&#34;https://github.com/VonHeikemen/lsp-zero.nvim/wiki/Under-the-hood&#34;&gt;Under the hood&lt;/a&gt; section in the wiki.&lt;/p&gt; &#xA;&lt;p&gt;If you have any question about configuration, usage or a feature, feel free to ask in the &lt;a href=&#34;https://github.com/VonHeikemen/lsp-zero.nvim/discussions/&#34;&gt;discussion page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/20980671/155446244-14ac3b82-44fd-4011-b25a-e4934db954dc.mp4&#34;&gt;https://user-images.githubusercontent.com/20980671/155446244-14ac3b82-44fd-4011-b25a-e4934db954dc.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Featured in the video:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully functional completion engine (&lt;code&gt;nvim-cmp&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Completions provided by the language server (&lt;code&gt;sumneko_lua&lt;/code&gt;), as well as other sources.&lt;/li&gt; &#xA; &lt;li&gt;Snippet expansion and navigation between placeholders.&lt;/li&gt; &#xA; &lt;li&gt;Diagnostic icon showing in the gutter.&lt;/li&gt; &#xA; &lt;li&gt;Showing diagnostic message in a floating window.&lt;/li&gt; &#xA; &lt;li&gt;Code actions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart (for the impatient)&lt;/h2&gt; &#xA;&lt;p&gt;This section assumes you have chosen the &lt;code&gt;recommended&lt;/code&gt; preset. It also assumes you don&#39;t have any other completion engine installed in your current neovim config.&lt;/p&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;Use your favorite plugin manager to install this plugin and all its lua dependencies.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;packer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;VonHeikemen/lsp-zero.nvim&#39;,&#xA;  requires = {&#xA;    -- LSP Support&#xA;    {&#39;neovim/nvim-lspconfig&#39;},&#xA;    {&#39;williamboman/mason.nvim&#39;},&#xA;    {&#39;williamboman/mason-lspconfig.nvim&#39;},&#xA;&#xA;    -- Autocompletion&#xA;    {&#39;hrsh7th/nvim-cmp&#39;},&#xA;    {&#39;hrsh7th/cmp-buffer&#39;},&#xA;    {&#39;hrsh7th/cmp-path&#39;},&#xA;    {&#39;saadparwaiz1/cmp_luasnip&#39;},&#xA;    {&#39;hrsh7th/cmp-nvim-lsp&#39;},&#xA;    {&#39;hrsh7th/cmp-nvim-lua&#39;},&#xA;&#xA;    -- Snippets&#xA;    {&#39;L3MON4D3/LuaSnip&#39;},&#xA;    {&#39;rafamadriz/friendly-snippets&#39;},&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;paq&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#39;VonHeikemen/lsp-zero.nvim&#39;};&#xA;&#xA;-- LSP Support&#xA;{&#39;neovim/nvim-lspconfig&#39;};&#xA;{&#39;williamboman/mason.nvim&#39;};&#xA;{&#39;williamboman/mason-lspconfig.nvim&#39;};&#xA;&#xA;-- Autocompletion&#xA;{&#39;hrsh7th/nvim-cmp&#39;};&#xA;{&#39;hrsh7th/cmp-buffer&#39;};&#xA;{&#39;hrsh7th/cmp-path&#39;};&#xA;{&#39;saadparwaiz1/cmp_luasnip&#39;};&#xA;{&#39;hrsh7th/cmp-nvim-lsp&#39;};&#xA;{&#39;hrsh7th/cmp-nvim-lua&#39;};&#xA;&#xA;-- Snippets&#xA;{&#39;L3MON4D3/LuaSnip&#39;};&#xA;{&#39;rafamadriz/friendly-snippets&#39;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;vim-plug&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; LSP Support&#xA;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;williamboman/mason.nvim&#39;&#xA;Plug &#39;williamboman/mason-lspconfig.nvim&#39;&#xA;&#xA;&#34; Autocompletion&#xA;Plug &#39;hrsh7th/nvim-cmp&#39;&#xA;Plug &#39;hrsh7th/cmp-buffer&#39;&#xA;Plug &#39;hrsh7th/cmp-path&#39;&#xA;Plug &#39;saadparwaiz1/cmp_luasnip&#39;&#xA;Plug &#39;hrsh7th/cmp-nvim-lsp&#39;&#xA;Plug &#39;hrsh7th/cmp-nvim-lua&#39;&#xA;&#xA;&#34;  Snippets&#xA;Plug &#39;L3MON4D3/LuaSnip&#39;&#xA;Plug &#39;rafamadriz/friendly-snippets&#39;&#xA;&#xA;Plug &#39;VonHeikemen/lsp-zero.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Requirements for language servers&lt;/h3&gt; &#xA;&lt;p&gt;I would suggest you make a quick read in to the &lt;a href=&#34;https://github.com/williamboman/mason.nvim#requirements&#34;&gt;requirements section of mason.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have at least the minimum requirements listed in &lt;code&gt;unix systems&lt;/code&gt; or &lt;code&gt;windows&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Inside your configuration file add this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsp = require(&#39;lsp-zero&#39;)&#xA;&#xA;lsp.preset(&#39;recommended&#39;)&#xA;lsp.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to add support for your config written in lua, add this line above &lt;code&gt;lsp.setup()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lsp.nvim_workspace()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note. If you are using &lt;code&gt;init.vim&lt;/code&gt; you can wrap the code in &lt;code&gt;lua-heredoc&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt;EOF&#xA;local lsp = require(&#39;lsp-zero&#39;)&#xA;&#xA;lsp.preset(&#39;recommended&#39;)&#xA;lsp.setup()&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;recommended&lt;/code&gt; preset will enable automatic suggestions of language servers. So any time you open a filetype for the first time it&#39;ll try to ask if you want to install a language server that supports it.&lt;/p&gt; &#xA;&lt;p&gt;If you already know what language servers you want, you can use the function &lt;code&gt;.ensure_installed&lt;/code&gt; to install them automatically. Here is an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.signcolumn = &#39;yes&#39; -- Reserve space for diagnostic icons&#xA;&#xA;local lsp = require(&#39;lsp-zero&#39;)&#xA;lsp.preset(&#39;recommended&#39;)&#xA;&#xA;lsp.ensure_installed({&#xA;  &#39;tsserver&#39;,&#xA;  &#39;eslint&#39;,&#xA;  &#39;sumneko_lua&#39;,&#xA;})&#xA;&#xA;lsp.nvim_workspace()&#xA;&#xA;lsp.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available presets&lt;/h2&gt; &#xA;&lt;p&gt;Presets are a combinations of options that determine how &lt;code&gt;.setup()&lt;/code&gt; will behave, they can enable or disable features.&lt;/p&gt; &#xA;&lt;h3&gt;recommended&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setup every language server installed with &lt;code&gt;mason.nvim&lt;/code&gt; at startup.&lt;/li&gt; &#xA; &lt;li&gt;Suggest to install a language server when you encounter a new filetype.&lt;/li&gt; &#xA; &lt;li&gt;Setup &lt;code&gt;nvim-cmp&lt;/code&gt; with some default completion sources, this includes support for LSP based completion.&lt;/li&gt; &#xA; &lt;li&gt;Setup some default keybindings for &lt;code&gt;nvim-cmp&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Show diagnostic info with &#34;nice&#34; icons.&lt;/li&gt; &#xA; &lt;li&gt;Diagnostic messages are shown in a floating window.&lt;/li&gt; &#xA; &lt;li&gt;Setup some keybindings related to LSP actions, things like go to definition or rename variable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;lsp-compe&lt;/h3&gt; &#xA;&lt;p&gt;Is the same as the &lt;code&gt;recommended&lt;/code&gt; except that it assumes you want full control over the configuration for &lt;code&gt;nvim-cmp&lt;/code&gt;. It&#39;ll provide the &lt;code&gt;capabilities&lt;/code&gt; config to the languages server but the rest of the config is controlled by the user.&lt;/p&gt; &#xA;&lt;h3&gt;lsp-only&lt;/h3&gt; &#xA;&lt;p&gt;Is the same as the &lt;code&gt;recommended&lt;/code&gt; without any support for &lt;code&gt;nvim-cmp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;manual-setup&lt;/h3&gt; &#xA;&lt;p&gt;Is the same as &lt;code&gt;recommended&lt;/code&gt;, but without automatic setup for language servers. Suggestions for language server will be disabled. The user will need to call the functions &lt;code&gt;.setup_servers()&lt;/code&gt; or &lt;code&gt;.configure()&lt;/code&gt; in order to initialize the language servers (See &lt;a href=&#34;https://github.com/VonHeikemen/lsp-zero.nvim#lua-api&#34;&gt;Lua api&lt;/a&gt; section for more details in these functions).&lt;/p&gt; &#xA;&lt;h3&gt;per-project&lt;/h3&gt; &#xA;&lt;p&gt;Very similar to &lt;code&gt;manual-setup&lt;/code&gt;. Automatic setup for language servers and suggestions are disabled. The user can setup default options for each server using &lt;code&gt;.setup_servers()&lt;/code&gt; or &lt;code&gt;.configure()&lt;/code&gt;. In order to initialize the server the user will need to call the &lt;code&gt;.use()&lt;/code&gt; function. (See &lt;a href=&#34;https://github.com/VonHeikemen/lsp-zero.nvim#lua-api&#34;&gt;Lua api&lt;/a&gt; section for more details in these functions).&lt;/p&gt; &#xA;&lt;h3&gt;system-lsp&lt;/h3&gt; &#xA;&lt;p&gt;Is the same as &lt;code&gt;manual-setup&lt;/code&gt;, automatic setup for language servers and suggestions are going to be disabled. It is designed to call language servers installed &#34;globally&#34; on the system. The user will need to call &lt;code&gt;.configure()&lt;/code&gt; or &lt;code&gt;.setup_servers()&lt;/code&gt; in order to initialize the language servers. (See &lt;a href=&#34;https://github.com/VonHeikemen/lsp-zero.nvim#lua-api&#34;&gt;Lua api&lt;/a&gt; section for more details in these functions).&lt;/p&gt; &#xA;&lt;h2&gt;Choose your features&lt;/h2&gt; &#xA;&lt;p&gt;For this I would recommend deleting the &lt;code&gt;.preset()&lt;/code&gt; call, use &lt;code&gt;.set_preferences()&lt;/code&gt; instead. This function takes a &#34;table&#34; of options, they describe the features this plugin offers.&lt;/p&gt; &#xA;&lt;p&gt;These are the options the &lt;code&gt;recommended&lt;/code&gt; preset uses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lsp.set_preferences({&#xA;  suggest_lsp_servers = true,&#xA;  setup_servers_on_start = true,&#xA;  set_lsp_keymaps = true,&#xA;  configure_diagnostics = true,&#xA;  cmp_capabilities = true,&#xA;  manage_nvim_cmp = true,&#xA;  call_servers = &#39;local&#39;,&#xA;  sign_icons = {&#xA;    error = &#39;✘&#39;,&#xA;    warn = &#39;▲&#39;,&#xA;    hint = &#39;⚑&#39;,&#xA;    info = &#39;&#39;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to disable a feature replace &lt;code&gt;true&lt;/code&gt; with &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;suggest_lsp_servers&lt;/code&gt; enables the suggestions of lsp servers when you enter a filetype for the first time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;setup_servers_on_start&lt;/code&gt; when set to &lt;code&gt;true&lt;/code&gt; all installed servers will be initialized on startup. When is set to the string &lt;code&gt;&#34;per-project&#34;&lt;/code&gt; only the servers listed with the function &lt;code&gt;.use()&lt;/code&gt; will be initialized. If the value is &lt;code&gt;false&lt;/code&gt; servers will be initialized when you call &lt;code&gt;.configure()&lt;/code&gt; or &lt;code&gt;.setup_servers()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set_lsp_keymaps&lt;/code&gt; add keybindings to a buffer with a language server attached. This bindings will trigger actions like go to definition, go to reference, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;configure_diagnostics&lt;/code&gt; uses the built-in function &lt;code&gt;vim.diagnostic.config&lt;/code&gt; to setup the way error messages are shown in the buffer. It also creates keymaps to navigate between the location of these errors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cmp_capabilities&lt;/code&gt; tell the language servers what capabilities &lt;code&gt;nvim-cmp&lt;/code&gt; supports.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;manage_nvim_cmp&lt;/code&gt; use the default setup for &lt;code&gt;nvim-cmp&lt;/code&gt;. It configures keybindings and completion sources for &lt;code&gt;nvim-cmp&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;call_servers&lt;/code&gt; if set to &lt;code&gt;&#39;local&#39;&lt;/code&gt; it&#39;ll try to setup one of the supported installers. If set to &lt;code&gt;&#39;global&#39;&lt;/code&gt; it will only try to use language servers available globally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sign_icons&lt;/code&gt; they are shown in the &#34;gutter&#34; on the line diagnostics messages are located.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Autocompletion&lt;/h2&gt; &#xA;&lt;h3&gt;About nvim-cmp&lt;/h3&gt; &#xA;&lt;p&gt;Some details that you should know. The plugin responsable for autocompletion is &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;. &lt;code&gt;nvim-cmp&lt;/code&gt; has a concept of &#34;sources&#34;, these provide the actual data displayed in neovim. &lt;code&gt;lsp-zero&lt;/code&gt; depends on the following sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-buffer&#34;&gt;cmp-buffer&lt;/a&gt;: provides suggestions based on the current file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-path&#34;&gt;cmp-path&lt;/a&gt;: gives completions based on the filesystem.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/saadparwaiz1/cmp_luasnip&#34;&gt;cmp_luasnip&lt;/a&gt;: it shows snippets in the suggestions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-nvim-lsp&#34;&gt;cmp-nvim-lsp&lt;/a&gt;: show data send by the language server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-nvim-lua&#34;&gt;cmp-nvim-lua&lt;/a&gt;: provides completions based on neovim&#39;s lua api.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Default keybindings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;: Confirms selection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Ctrl-y&amp;gt;&lt;/code&gt;: Confirms selection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Up&amp;gt;&lt;/code&gt;: Navigate to previous item on the list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Down&amp;gt;&lt;/code&gt;: Navigate to the next item on the list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Ctrl-p&amp;gt;&lt;/code&gt;: Navigate to previous item on the list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Ctrl-n&amp;gt;&lt;/code&gt;: Navigate to the next item on the list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Ctrl-u&amp;gt;&lt;/code&gt;: Scroll up in the item&#39;s documentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Ctrl-f&amp;gt;&lt;/code&gt;: Scroll down in the item&#39;s documentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Ctrl-e&amp;gt;&lt;/code&gt;: Toggles the completion.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Ctrl-d&amp;gt;&lt;/code&gt;: Go to the next placeholder in the snippet.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Ctrl-b&amp;gt;&lt;/code&gt;: Go to the previous placeholder in the snippet.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;: Enables completion when the cursor is inside a word. If the completion menu is visible it will navigate to the next item in the list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt;: When the completion menu is visible navigate to the previous item in the list.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Snippets&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets&#34;&gt;friendly-snippets&lt;/a&gt; is the plugin that provides the snippets. And &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/&#34;&gt;luasnip&lt;/a&gt; is the &#34;snippet engine&#34;, the thing that expands the snippet and allows you to navigate between snippet placeholders.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to disable snippets?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you already have it all setup then uninstall &lt;code&gt;friendly-snippets&lt;/code&gt;. That should be enough to make it disappear from the completion suggestions.&lt;/p&gt; &#xA;&lt;p&gt;If you really want them gone, exclude the snippet &#34;source&#34; from nvim-cmp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsp = require(&#39;lsp-zero&#39;)&#xA;lsp.preset(&#39;recommended&#39;)&#xA;&#xA;lsp.setup_nvim_cmp({&#xA;  sources = {&#xA;    {name = &#39;path&#39;},&#xA;    {name = &#39;nvim_lsp&#39;, keyword_length = 3},&#xA;    {name = &#39;buffer&#39;, keyword_length = 3},&#xA;  }&#xA;})&#xA;&#xA;lsp.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change to snippets with snipmate syntax&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Uninstall &lt;code&gt;friendly-snippets&lt;/code&gt; if you have it. Use &lt;a href=&#34;https://github.com/honza/vim-snippets&#34;&gt;onza/vim-snippets&lt;/a&gt;. Then add the luasnip loader somewhere in your config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;luasnip.loaders.from_snipmate&#39;).lazy_load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LSP&lt;/h2&gt; &#xA;&lt;p&gt;When a language server gets attached to a buffer you gain access to some keybindings and commands. All of these are bound to built-in functions, so you can get more details using the &lt;code&gt;:help&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Default keybindings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;K&lt;/code&gt;: Displays hover information about the symbol under the cursor in a floating window. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.hover()&#34;&gt;:help vim.lsp.buf.hover()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;gd&lt;/code&gt;: Jumps to the definition of the symbol under the cursor. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.definition()&#34;&gt;:help vim.lsp.buf.definition()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;gD&lt;/code&gt;: Jumps to the declaration of the symbol under the cursor. Some servers don&#39;t implement this feature. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.declaration()&#34;&gt;:help vim.lsp.buf.declaration()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;gi&lt;/code&gt;: Lists all the implementations for the symbol under the cursor in the quickfix window. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.implementation()&#34;&gt;:help vim.lsp.buf.implementation()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;go&lt;/code&gt;: Jumps to the definition of the type of the symbol under the cursor. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.type_definition()&#34;&gt;:help vim.lsp.buf.type_definition()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;gr&lt;/code&gt;: Lists all the references to the symbol under the cursor in the quickfix window. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.references()&#34;&gt;:help vim.lsp.buf.references()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;Ctrl-k&amp;gt;&lt;/code&gt;: Displays signature information about the symbol under the cursor in a floating window. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.signature_help()&#34;&gt;:help vim.lsp.buf.signature_help()&lt;/a&gt;. If a mapping already exists for this key this function is not bound.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;F2&amp;gt;&lt;/code&gt;: Renames all references to the symbol under the cursor. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.rename()&#34;&gt;:help vim.lsp.buf.rename()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;F4&amp;gt;&lt;/code&gt;: Selects a code action available at the current cursor position. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.code_action()&#34;&gt;:help vim.lsp.buf.code_action()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LspZeroFormat&lt;/code&gt;: Formats the current buffer or range. If the &#34;bang&#34; is provided formatting will be synchronous (ex: &lt;code&gt;LspZeroFormat!&lt;/code&gt;). See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.formatting()&#34;&gt;:help vim.lsp.buf.formatting()&lt;/a&gt;, &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.range_formatting()&#34;&gt;:help vim.lsp.buf.range_formatting()&lt;/a&gt;, &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.formatting_sync()&#34;&gt;:help vim.lsp.buf.formatting_sync()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LspZeroWorkspaceRemove&lt;/code&gt;: Remove the folder at path from the workspace folders. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.remove_workspace_folder()&#34;&gt;:help vim.lsp.buf.remove_workspace_folder()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LspZeroWorkspaceAdd&lt;/code&gt;: Add the folder at path to the workspace folders. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.add_workspace_folder()&#34;&gt;:help vim.lsp.buf.add_workspace_folder()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LspZeroWorkspaceList&lt;/code&gt;: List workspace folders. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.list_workspace_folders()&#34;&gt;:help vim.lsp.buf.list_workspace_folders()&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Diagnostics&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the lsp keymap you also have access to these keybindings when a server is attached to a buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gl&lt;/code&gt;: Show diagnostics in a floating window. See &lt;a href=&#34;https://neovim.io/doc/user/diagnostic.html#vim.diagnostic.open_float()&#34;&gt;:help vim.diagnostic.open_float()&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[d&lt;/code&gt;: Move to the previous diagnostic in the current buffer. See &lt;a href=&#34;https://neovim.io/doc/user/diagnostic.html#vim.diagnostic.goto_prev()&#34;&gt;:help vim.diagnostic.goto_prev()&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;]d&lt;/code&gt;: Move to the next diagnostic. See &lt;a href=&#34;https://neovim.io/doc/user/diagnostic.html#vim.diagnostic.goto_next()&#34;&gt;:help vim.diagnostic.goto_next()&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you notice the sign_icons &#34;pop up&#34; and moving your screen is because you have &lt;code&gt;signcolumn&lt;/code&gt; set to &lt;code&gt;auto&lt;/code&gt;. I recommend setting to &#34;yes&#34; to preserve the space in the gutter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;set signcolumn=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use lua.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.signcolumn = &#39;yes&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Diagnostics can be configured using the function &lt;a href=&#34;https://neovim.io/doc/user/diagnostic.html#vim.diagnostic.config()&#34;&gt;vim.diagnostic.config&lt;/a&gt;. If you only want to override some settings lsp-zero provides, make sure you call &lt;code&gt;vim.diagnostic.config&lt;/code&gt; after lsp-zero&#39;s setup.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example that restores the built-in configuration for diagnostics.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsp = require(&#39;lsp-zero&#39;)&#xA;lsp.preset(&#39;recommended&#39;)&#xA;&#xA;lsp.setup()&#xA;&#xA;vim.diagnostic.config({&#xA;  virtual_text = true,&#xA;  signs = true,&#xA;  update_in_insert = false,&#xA;  underline = true,&#xA;  severity_sort = false,&#xA;  float = true,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Language servers and mason.nvim&lt;/h2&gt; &#xA;&lt;p&gt;Install and updates of language servers is done with &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;mason.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;With mason.nvim you can also install formatters and debuggers, but &lt;code&gt;lsp-zero&lt;/code&gt; will only configure LSP servers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To install a server manually use the command &lt;code&gt;LspInstall&lt;/code&gt; with the name of the server you want to install. If you don&#39;t provide a name &lt;code&gt;mason-lspconfig.nvim&lt;/code&gt; will try to suggest a language server based on the filetype of the current buffer.&lt;/p&gt; &#xA;&lt;p&gt;To check for updates on the language servers use the command &lt;code&gt;Mason&lt;/code&gt;. A floating window will open showing you all the tools mason.nvim can install. You can filter the packages by categories for example, language servers are in the second category, so if you press the number &lt;code&gt;2&lt;/code&gt; it&#39;ll show only the language servers. The packages you have installed will appear at the top. If there is any update available the item will display a message. Navigate to that item and press &lt;code&gt;u&lt;/code&gt; to install the update.&lt;/p&gt; &#xA;&lt;p&gt;To uninstall a package use the command &lt;code&gt;Mason&lt;/code&gt;. Navigate to the item you want to delete and press &lt;code&gt;X&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To know more about the available bindings inside the floating window of &lt;code&gt;Mason&lt;/code&gt; press &lt;code&gt;g?&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need to customize &lt;code&gt;mason.nvim&lt;/code&gt; make sure you do it before calling the &lt;code&gt;lsp-zero&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;mason.settings&#39;).set({&#xA;  ui = {&#xA;    border = &#39;rounded&#39;&#xA;  }&#xA;})&#xA;&#xA;local lsp = require(&#39;lsp-zero&#39;)&#xA;lsp.preset(&#39;recommended&#39;)&#xA;&#xA;lsp.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Migrate from nvim-lsp-installer to mason.nvim&lt;/h3&gt; &#xA;&lt;p&gt;On July 24 (2022) the author of nvim-lsp-installer &lt;a href=&#34;https://github.com/williamboman/nvim-lsp-installer/discussions/876&#34;&gt;announced&lt;/a&gt; the development of that project would stop. He will focus on &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;mason.nvim&lt;/a&gt; instead. This new installer has a bigger scope, it can install LSP servers, formatters, linters, etc.&lt;/p&gt; &#xA;&lt;p&gt;At the moment lsp-zero supports both nvim-lsp-installer and mason.nvim. But you should migrate to mason.nvim as soon as possible. nvim-lsp-installer no longer receives any updates.&lt;/p&gt; &#xA;&lt;p&gt;To migrate away from nvim-lsp-installer first remove all servers installed. Execute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:LspUninstallAll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can reset the state of the server suggestions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:lua require(&#39;lsp-zero.state&#39;).reset()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, remove nvim-lsp-installer from neovim. Use whatever method your plugin manager has.&lt;/p&gt; &#xA;&lt;p&gt;Last step is to install &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;mason.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/williamboman/mason-lspconfig.nvim&#34;&gt;mason-lspconfig&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Global command&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;LspZeroSetupServers&lt;/code&gt;: It takes a space separated list of servers and configures them. It calls the function &lt;code&gt;.use()&lt;/code&gt; under the hood. If the &lt;code&gt;bang&lt;/code&gt; is provided the root dir of the language server will be the same as neovim. It is recommended that you use only if you decide to handle server setup manually.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lua api&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;.preset({name})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;It creates a combination of settings safe to use for specific cases.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;.set_preferences({opts})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;It gives the user control over the options available in the plugin.&lt;/p&gt; &#xA;&lt;p&gt;You can use it to override options from a preset. For example, you could disable the automatic suggestions for language servers even if you are using the &lt;code&gt;recommended&lt;/code&gt; preset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsp = require(&#39;lsp-zero&#39;)&#xA;lsp.preset(&#39;recommended&#39;)&#xA;&#xA;lsp.set_preferences({&#xA;  suggest_lsp_servers = false&#xA;})&#xA;&#xA;lsp.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;.setup()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The one that coordinates the call to other setup functions. Handles the configuration for &lt;code&gt;nvim-cmp&lt;/code&gt; and the language servers during startup. It is meant to be the last function you call.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;.configure({name}, {opts})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Useful when you need to pass some custom options to a specific language server. Takes the same options as &lt;code&gt;nvim-lspconfig&lt;/code&gt;&#39;s setup function. You can find more details in the help page &lt;code&gt;:help lspconfig-setup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lsp.configure(&#39;tsserver&#39;, {&#xA;  flags = {&#xA;    debounce_text_changes = 150,&#xA;  },&#xA;  on_attach = function(client, bufnr)&#xA;    print(&#39;hello tsserver&#39;)&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a server installed globally you can use the option &lt;code&gt;force_setup&lt;/code&gt; to skip any internal check.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lsp.configure(&#39;dartls&#39;, {force_setup = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;.setup_servers({list})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Used to configure the servers specified in &lt;code&gt;{list}&lt;/code&gt;. If you provide the &lt;code&gt;opts&lt;/code&gt; property it will send those options to all language servers. Under the hood it calls &lt;code&gt;.configure()&lt;/code&gt; for each server on &lt;code&gt;{list}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsp_opts = {&#xA;  flags = {&#xA;    debounce_text_changes = 150,&#xA;  }&#xA;}&#xA;&#xA;lsp.setup_servers({&#39;html&#39;, &#39;cssls&#39;, opts = lsp_opts})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the servers you want to call are installed globally use the option &lt;code&gt;force&lt;/code&gt; to skip any internal check.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lsp.setup_servers({&#39;dartls&#39;, &#39;vls&#39;, force = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;.on_attach({callback})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Execute &lt;code&gt;{callback}&lt;/code&gt; function every time a server is attached to a buffer.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say you want to disable all the default keybindings for lsp actions and diagnostics, and then declare your own.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsp = require(&#39;lsp-zero&#39;)&#xA;lsp.preset(&#39;recommended&#39;)&#xA;&#xA;lsp.set_preferences({&#xA;  set_lsp_keymaps = false&#xA;})&#xA;&#xA;lsp.on_attach(function(client, bufnr)&#xA;  local opts = {buffer = bufnr, remap = false}&#xA;  local bind = vim.keymap.set&#xA;&#xA;  bind(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;r&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.rename()&amp;lt;cr&amp;gt;&#39;, opts)&#xA;  -- more code  ...&#xA;end)&#xA;&#xA;lsp.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;.ensure_installed({list})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Installs all the servers in &lt;code&gt;{list}&lt;/code&gt; if they are missing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lsp.ensure_installed({&#xA;  &#39;html&#39;,&#xA;  &#39;cssls&#39;,&#xA;  &#39;tsserver&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;.nvim_workspace({opts})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Configures the language server for lua with all the options needed to provide completions specific to neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;{opts}&lt;/code&gt; supports two properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;root_dir&lt;/code&gt;: a function that determines the working directory of the language server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;library&lt;/code&gt;: a list of paths that the server should analyze.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default only the runtime files of neovim and &lt;code&gt;vim.fn.stdpath(&#39;config&#39;)&lt;/code&gt; will be included. To add the path to every plugin you&#39;ll need to do this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lsp.nvim_workspace({&#xA;  library = vim.api.nvim_get_runtime_file(&#39;&#39;, true)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;.setup_nvim_cmp({opts})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;{opts}&lt;/code&gt; is table that will allow you to override some of &lt;code&gt;nvim-cmp&lt;/code&gt; defaults:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;completion&lt;/code&gt;: Configures the behavior of the completion menu. You can find more details about its properities if you start typing the command &lt;code&gt;:help cmp-config.completion&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sources&lt;/code&gt;: List of configurations for &#34;data sources&#34;. See &lt;code&gt;:help cmp-config.sources&lt;/code&gt; to know more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;documentation&lt;/code&gt;: Modifies the look of the documentation window. You can find more details about its properities if you start typing the command &lt;code&gt;:help cmp-config.window&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;preselect&lt;/code&gt;: By default, the first item in the completion menu is preselected. Disable this behaviour by setting this to &lt;code&gt;cmp.PreselectMode.None&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;formatting&lt;/code&gt;: Modifies the look of the completion menu. You can find more details about its properities if you start typing the command &lt;code&gt;:help cmp-config.formatting&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mapping&lt;/code&gt;: Sets the keybindings. See &lt;code&gt;:help cmp-mapping&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some example config of these options are featured in &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&#39;s readme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;.use({server}, {opts})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For when you want full control of the servers you want to use in particular project. It is meant to be called in project local config.&lt;/p&gt; &#xA;&lt;p&gt;Ideally, you would setup some default values for your servers in your neovim config using &lt;code&gt;.setup_servers()&lt;/code&gt; or &lt;code&gt;.configure()&lt;/code&gt;. Example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;&#xA;local lsp = require(&#39;lsp-zero&#39;)&#xA;lsp.preset(&#39;per-project&#39;)&#xA;&#xA;lsp.configure(&#39;pyright&#39;, {&#xA;  flags = {&#xA;    debounce_text_changes = 150,&#xA;  }&#xA;})&#xA;&#xA;lsp.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then in your local config you can tweak the server options even more.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- local config&#xA;&#xA;local lsp = require(&#39;lsp-zero&#39;)&#xA;&#xA;lsp.use(&#39;pyright&#39;, {&#xA;  settings = {&#xA;    python = {&#xA;      analysis = {&#xA;        extraPaths = {&#39;/path/to/my/dependencies&#39;},&#xA;      }&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options from &lt;code&gt;.configure()&lt;/code&gt; will be merged with the ones on &lt;code&gt;.use()&lt;/code&gt; and the server will be initialized.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.use()&lt;/code&gt; can also take a list of servers. All the servers on the list will share the same options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- local config&#xA;&#xA;local lsp = require(&#39;lsp-zero&#39;)&#xA;&#xA;local lsp_opts = {&#xA;  flags = {&#xA;    debounce_text_changes = 150,&#xA;  }&#xA;}&#xA;&#xA;lsp.use({&#39;html&#39;, &#39;cssls&#39;}, lsp_opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;.build_options({server}, {opts})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns all the parameters necessary to start a language using &lt;code&gt;nvim-lspconfig&lt;/code&gt;&#39;s setup function. After calling this function you&#39;ll need to initialize the language server by other means.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;{opts}&lt;/code&gt; table will be merged with the rest of the default options for &lt;code&gt;{server}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function was designed as an escape hatch, so you can call a language server using other tools.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to use &lt;code&gt;rust-tools&lt;/code&gt;, this is how you&#39;ll do it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsp = require(&#39;lsp-zero&#39;)&#xA;lsp.preset(&#39;recommended&#39;)&#xA;&#xA;local rust_lsp = lsp.build_options(&#39;rust_analyzer&#39;, {})&#xA;&#xA;lsp.setup()&#xA;&#xA;-- Initialize rust_analyzer with rust-tools&#xA;require(&#39;rust-tools&#39;).setup({server = rust_lsp})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you are using the &lt;code&gt;recommended&lt;/code&gt; preset (or any preset that sets &lt;code&gt;setup_servers_on_start&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;) you need to call &lt;code&gt;.build_options&lt;/code&gt; before calling &lt;code&gt;.setup()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;.defaults.cmp_sources()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns the list of &#34;sources&#34; used in &lt;code&gt;nvim-cmp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;.defaults.cmp_mappings({opts})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns a table with the default keybindings for &lt;code&gt;nvim-cmp&lt;/code&gt;. If you provide the &lt;code&gt;{opts}&lt;/code&gt; table it&#39;ll merge it with the defaults, this way you can extend or change the values easily.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example that disables completion with tab and replace it with &lt;code&gt;Ctrl + space&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsp = require(&#39;lsp-zero&#39;)&#xA;lsp.preset(&#39;recommended&#39;)&#xA;&#xA;local cmp = require(&#39;cmp&#39;)&#xA;local cmp_mappings = lsp.defaults.cmp_mappings({&#xA;  [&#39;&amp;lt;C-Space&amp;gt;&#39;] = cmp.mapping.complete(),&#xA;  [&#39;&amp;lt;C-e&amp;gt;&#39;] = cmp.mapping.abort(),&#xA;})&#xA;&#xA;-- disable completion with tab&#xA;cmp_mappings[&#39;&amp;lt;Tab&amp;gt;&#39;] = nil&#xA;cmp_mappings[&#39;&amp;lt;S-Tab&amp;gt;&#39;] = nil&#xA;&#xA;lsp.setup_nvim_cmp({&#xA;  mapping = cmp_mappings&#xA;})&#xA;&#xA;lsp.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;.defaults.cmp_config({opts})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns the entire configuration table for &lt;code&gt;nvim-cmp&lt;/code&gt;. If you provide the &lt;code&gt;{opts}&lt;/code&gt; table it&#39;ll merge it with the defaults, this way you can extend or change the values easily.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsp = require(&#39;lsp-zero&#39;)&#xA;lsp.preset(&#39;lsp-compe&#39;)&#xA;&#xA;lsp.setup()&#xA;&#xA;vim.opt.completeopt = {&#39;menu&#39;, &#39;menuone&#39;, &#39;noselect&#39;}&#xA;&#xA;local cmp = require(&#39;cmp&#39;)&#xA;local cmp_config = lsp.defaults.cmp_config({&#xA;  window = {&#xA;    completion = cmp.config.window.bordered()&#xA;  }&#xA;})&#xA;&#xA;cmp.setup(cmp_config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;.defaults.nvim_workspace()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns the neovim specific settings for &lt;code&gt;sumneko_lua&lt;/code&gt; language server.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you find this tool useful and want to support my efforts, &lt;a href=&#34;https://www.buymeacoffee.com/vonheikemen&#34;&gt;buy me a coffee ☕&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/vonheikemen&#34;&gt;&lt;img src=&#34;https://res.cloudinary.com/vonheikemen/image/upload/v1618466522/buy-me-coffee_ah0uzh.png&#34; alt=&#34;buy me a coffee&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bashbunni/dotfiles</title>
    <updated>2022-12-18T01:47:25Z</updated>
    <id>tag:github.com,2022-12-18:/bashbunni/dotfiles</id>
    <link href="https://github.com/bashbunni/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My config/dotfiles for tmux, nvim, i3, bla bla bla, nerd things.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>williamboman/mason-lspconfig.nvim</title>
    <updated>2022-12-18T01:47:25Z</updated>
    <id>tag:github.com,2022-12-18:/williamboman/mason-lspconfig.nvim</id>
    <link href="https://github.com/williamboman/mason-lspconfig.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extension to mason.nvim that makes it easier to use lspconfig with mason.nvim. Strongly recommended for Windows users.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/williamboman/mason-lspconfig.nvim/actions?query=workflow%3ATests+branch%3Amain+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/williamboman/mason-lspconfig.nvim/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-linux%20macOS%20windows-blue&#34; alt=&#34;Platforms&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/williamboman/mason-lspconfig.nvim&#34; alt=&#34;Repository size&#34;&gt; &lt;a href=&#34;https://github.com/sponsors/williamboman&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/williamboman?style=flat-square&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;mason-lspconfig.nvim&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;code&gt;mason-lspconfig&lt;/code&gt; bridges &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/a&gt; with the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;lspconfig&lt;/code&gt;&lt;/a&gt; plugin - making it easier to use both plugins together.&lt;br&gt; &lt;code&gt;:help mason-lspconfig.nvim&lt;/code&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#automatic-server-setup-advanced-feature&#34;&gt;Automatic server setup (advanced feature)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#default-configuration&#34;&gt;Default configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#available-lsp-servers&#34;&gt;Available LSP servers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-lspconfig-introduction&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;mason-lspconfig.nvim&lt;/code&gt; closes some gaps that exist between &lt;code&gt;mason.nvim&lt;/code&gt; and &lt;code&gt;lspconfig&lt;/code&gt;. Its main responsibilities are to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;register a setup hook with &lt;code&gt;lspconfig&lt;/code&gt; that ensures servers installed with &lt;code&gt;mason.nvim&lt;/code&gt; are set up with the necessary configuration&lt;/li&gt; &#xA; &lt;li&gt;provide extra convenience APIs such as the &lt;code&gt;:LspInstall&lt;/code&gt; command&lt;/li&gt; &#xA; &lt;li&gt;allow you to (i) automatically install, and (ii) automatically set up a predefined list of servers&lt;/li&gt; &#xA; &lt;li&gt;translate between &lt;code&gt;lspconfig&lt;/code&gt; server names and &lt;code&gt;mason.nvim&lt;/code&gt; package names (e.g. &lt;code&gt;sumneko_lua &amp;lt;-&amp;gt; lua-language-server&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to use this extension if you use &lt;code&gt;mason.nvim&lt;/code&gt; and &lt;code&gt;lspconfig&lt;/code&gt; (it&#39;s strongly recommended for Windows users).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: this plugin uses the &lt;code&gt;lspconfig&lt;/code&gt; server names in the APIs it exposes - not &lt;code&gt;mason.nvim&lt;/code&gt; package names. &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/doc/server-mapping.md&#34;&gt;See this table for a complete mapping.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-lspconfig-requirements&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lspconfig&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;williamboman/mason.nvim&#34;,&#xA;    &#34;williamboman/mason-lspconfig.nvim&#34;,&#xA;    &#34;neovim/nvim-lspconfig&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;vim-plug&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;williamboman/mason.nvim&#39;&#xA;Plug &#39;williamboman/mason-lspconfig.nvim&#39;&#xA;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-lspconfig-quickstart&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;It&#39;s important that you set up the plugins in the following order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mason-lspconfig.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Setup servers via &lt;code&gt;lspconfig&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Pay extra attention to this if you lazy-load plugins, or somehow &#34;chain&#34; the loading of plugins via your plugin manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup()&#xA;require(&#34;mason-lspconfig&#34;).setup()&#xA;&#xA;-- After setting up mason-lspconfig you may set up servers via lspconfig&#xA;-- require(&#34;lspconfig&#34;).sumneko_lua.setup {}&#xA;-- require(&#34;lspconfig&#34;).rust_analyzer.setup {}&#xA;-- ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; &#xA;&lt;h2&gt;Automatic server setup (advanced feature)&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-lspconfig-automatic-server-setup&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;mason-lspconfig&lt;/code&gt; provides extra, opt-in, functionality that allows you to automatically set up LSP servers installed via &lt;code&gt;mason.nvim&lt;/code&gt; without having to manually add each server setup to your Neovim configuration. Refer to &lt;code&gt;:h mason-lspconfig-automatic-server-setup&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-lspconfig-commands&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstall [&amp;lt;server&amp;gt;...]&lt;/code&gt; - installs the provided servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspUninstall &amp;lt;server&amp;gt; ...&lt;/code&gt; - uninstalls the provided servers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-lspconfig-settings&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You may optionally configure certain behavior of &lt;code&gt;mason-lspconfig.nvim&lt;/code&gt; when calling the &lt;code&gt;.setup()&lt;/code&gt; function. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#default-configuration&#34;&gt;default configuration&lt;/a&gt; for a list of all available settings.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason-lspconfig&#34;).setup({&#xA;    ensure_installed = { &#34;sumneko_lua&#34;, &#34;rust_analyzer&#34; }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local DEFAULT_SETTINGS = {&#xA;    -- A list of servers to automatically install if they&#39;re not already installed. Example: { &#34;rust_analyzer@nightly&#34;, &#34;sumneko_lua&#34; }&#xA;    -- This setting has no relation with the `automatic_installation` setting.&#xA;    ensure_installed = {},&#xA;&#xA;    -- Whether servers that are set up (via lspconfig) should be automatically installed if they&#39;re not already installed.&#xA;    -- This setting has no relation with the `ensure_installed` setting.&#xA;    -- Can either be:&#xA;    --   - false: Servers are not automatically installed.&#xA;    --   - true: All servers set up via lspconfig are automatically installed.&#xA;    --   - { exclude: string[] }: All servers set up via lspconfig, except the ones provided in the list, are automatically installed.&#xA;    --       Example: automatic_installation = { exclude = { &#34;rust_analyzer&#34;, &#34;solargraph&#34; } }&#xA;    automatic_installation = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Available LSP servers&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Server name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWK&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;awk_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ada&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;als&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Angular&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;angularls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ansible&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ansiblels&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apex&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apex_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arduino&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;arduino_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Assembly (GAS/NASM, GO)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;asm_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Astro&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;astro&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bash&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bashls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Beancount&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;beancount&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bicep&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bicep&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Buf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bufls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;csharp_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C# &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/lua/mason-lspconfig/server_configurations/omnisharp/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;omnisharp_mono&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C# &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/lua/mason-lspconfig/server_configurations/omnisharp/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;omnisharp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CMake&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CMake&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;neocmake&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cssls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cssmodules_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clarity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clarity_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clojure&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clojure_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;codeqlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;crystalline&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cucumber&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cucumber_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dagger&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deno&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;denols&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dhall&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dhall_lsp_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Diagnostic (general purpose server)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;diagnosticls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dlang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;serve_d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dockerls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dot&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EFM (general purpose server)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;efm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESLint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixirls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elmls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ember&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ember&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Emmet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;emmet_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Erg&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;erg_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Erlang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;erlangls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fsautocomplete&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flux_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Foam (OpenFOAM)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;foam_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fortran&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fortls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Glint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;glint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;golangci_lint_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gopls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gradle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gradle_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Grammarly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;grammarly&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GraphQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;graphql&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Groovy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;groovyls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;html&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haskell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haxe&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;haxe_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hoon&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hoon_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jdtls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;quick_lint_js&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jsonnet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonnet_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Julia &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/lua/mason-lspconfig/server_configurations/julials/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;julials&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;kotlin_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ltex&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;texlab&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lelwel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lelwel_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sumneko_lua&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Luau&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;luau_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;marksman&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;prosemd_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;remark_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zk&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metamath Zero&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mm0_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nickel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nickel_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nimls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nix&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rnix&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCaml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ocamllsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OneScript, 1C:Enterprise&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bsl_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenAPI&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;spectral&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenCL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;opencl_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;intelephense&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpactor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;psalm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Perl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;perlnavigator&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Powershell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;powershell_es&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prisma&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;prismals&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Puppet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;puppet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PureScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;purescriptls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jedi_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pyright&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sourcery&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/lua/mason-lspconfig/server_configurations/pylsp/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pylsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;r_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rescriptls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reason&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reason_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Robot Framework&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;robotframework_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rome&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rome&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ruby_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solargraph&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rust_analyzer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Salt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;salt_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shopify Theme Check&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;theme_check&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;slint_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solang&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solidity&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sorbet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorbet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sphinx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;esbonio&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stylelint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;stylelint_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Svelte&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svelte&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svlangserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;verible&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TOML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;taplo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tailwind CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tailwindcss&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Teal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;teal_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terraform&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;terraformls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terraform &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/lua/mason-lspconfig/server_configurations/tflint/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tflint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TypeScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;V&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vala&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vala_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VimL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vimls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visualforce&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;visualforce&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;volar&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuels&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WGSL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;wgsl_analyzer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lemminx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yamlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>