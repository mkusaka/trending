<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-06T01:47:14Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>josean-dev/dev-environment-files</title>
    <updated>2022-11-06T01:47:14Z</updated>
    <id>tag:github.com,2022-11-06:/josean-dev/dev-environment-files</id>
    <link href="https://github.com/josean-dev/dev-environment-files" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;My Dev Environment Files üöÄ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; These are primarily meant for inspiration. I wouldn&#39;t just blindly use them. Proceed at your own risk!&lt;/p&gt; &#xA;&lt;p&gt;üìπ Youtube Playlist With Detailed Walkthroughs on My Setup: &lt;a href=&#34;https://youtube.com/playlist?list=PLnu5gT9QrFg36OehOdECFvxFFeMHhb_07&#34;&gt;üíª My Dev Environment &amp;amp; Workflow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Terminal Setup&lt;/h1&gt; &#xA;&lt;p&gt;‚úçüèº Blog Post Step-by-Step Guide: &lt;a href=&#34;https://josean.com/posts/terminal-setup&#34;&gt;How To Setup Your Mac Terminal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üìπ Youtube Guide: &lt;a href=&#34;https://www.youtube.com/watch?v=CF1tMjvHDRA&amp;amp;list=PLnu5gT9QrFg36OehOdECFvxFFeMHhb_07&amp;amp;index=2&amp;amp;t=479s&#34;&gt;How To Make Your Boring Mac Terminal So Much Better&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Relevant Files&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.zshrc&#34;&gt;.zshrc&lt;/a&gt; - Zsh Shell Configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/coolnight.itermcolors&#34;&gt;coolnight.itermcolors&lt;/a&gt; - iTerm2 Color Scheme&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Tmux Setup&lt;/h1&gt; &#xA;&lt;p&gt;‚úçüèº Blog Post: &lt;a href=&#34;https://josean.com/posts/tmux-setup&#34;&gt;How To Use and Configure Tmux Alongside Neovim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üìπ Youtube Guide: &lt;a href=&#34;https://youtu.be/U-omALWIBos&#34;&gt;How I Setup And Use Tmux Alongside Neovim for an Awesome Dev Workflow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Relevant Files&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.tmux.conf&#34;&gt;.tmux.conf&lt;/a&gt; - Tmux Configuration File&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Neovim Setup&lt;/h1&gt; &#xA;&lt;p&gt;üí° &lt;strong&gt;Tip:&lt;/strong&gt; I highly recommend following along with me on youtube and use the repo as reference to set up the config. You&#39;ll understand everything a lot better and be able to change things and evolve the setup into your own!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you clone the repo into your machine and use the config by copying .config/nvim to your home folder, you&#39;ll have to restart neovim after the plugins install. After restart, if you are opening a lua file or another file I have language servers configured for, like html, css or javascript/typescript, you might also get an error saying that the server failed to start. This is because Mason hasn&#39;t installed it yet. Press enter to continue, Mason will automatically install it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;üìπ Youtube Step-by-Step Guide: &lt;a href=&#34;https://youtu.be/vdn_pKJUda8&#34;&gt;How I Setup Neovim On My Mac To Make It Amazing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Relevant Files&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/nvim&#34;&gt;.config/nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup Requires&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;True Color Terminal Like: &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt; (Version 0.8 or Later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Font&lt;/a&gt; - I use Meslo Nerd Font&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;Ripgrep&lt;/a&gt; - For Telescope Fuzzy Finder&lt;/li&gt; &#xA; &lt;li&gt;XCode Command Line Tools&lt;/li&gt; &#xA; &lt;li&gt;If working with typescript/javascript and the typescript language server like me. You might need to install node.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re on mac, like me, you can install iTerm2, Neovim, Ripgrep and Node with homebrew.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask iterm2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install neovim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For XCode Command Line Tools do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xcode-select --install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Issue with Nvim-Treesitter Update and Lua Parser&lt;/h3&gt; &#xA;&lt;p&gt;The homebrew install of neovim 0.8 includes a built-in lua parser that is no longer compatible with the latest version of &#34;nvim-treesitter&#34;.&lt;/p&gt; &#xA;&lt;p&gt;To fix it, after opening Neovim do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;:TSInstall lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will ask if you would like to reinstall the parser. Answer &#34;y&#34; for yes. After that is finished, restart neovim and the problem should be fixed.&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;h4&gt;Plugin Manager&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer&lt;/a&gt; - Popular plugin manager&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Dependency For Other Plugins&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;nvim-lua/plenary&lt;/a&gt; - Useful lua functions other plugins use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Preferred Colorscheme&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bluz71/vim-nightfly-guicolors&#34;&gt;bluz71/vim-nightfly-guicolors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Navigating Between Neovim Windows and Tmux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/christoomey/vim-tmux-navigator&#34;&gt;christoomey/vim-tmux-navigator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Essentials&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;tpope/vim-surround&lt;/a&gt; - manipulate surroundings with &#34;ys&#34;, &#34;ds&#34;, and &#34;cs&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vim-scripts/ReplaceWithRegister&#34;&gt;vim-scripts/ReplaceWithRegister&lt;/a&gt; - replace things with register with &#34;gr&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/numToStr/Comment.nvim&#34;&gt;numToStr/Comment.nvim&lt;/a&gt; - toggle comments with &#34;gc&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;File Explorer&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua&#34;&gt;nvim-tree/nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;VS Code Like Icons&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Status Line&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;nvim-lualine/lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Fuzzy Finder&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-fzf-native.nvim&#34;&gt;nvim-telescope/telescope-fzf-native.nvim&lt;/a&gt; - Dependency for better performance&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope/telescope.nvim&lt;/a&gt; - Fuzzy Finder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Autocompletion&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;hrsh7th/nvim-cmp&lt;/a&gt; - Completion plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-buffer&#34;&gt;hrsh7th/cmp-buffer&lt;/a&gt; - Completion source for text in current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-path&#34;&gt;hrsh7th/cmp-path&lt;/a&gt; - Completion source for file system paths&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Snippets&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;L3MON4D3/LuaSnip&lt;/a&gt; - Snippet engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets&#34;&gt;rafamadriz/friendly-snippets&lt;/a&gt; - Useful snippets for different languages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saadparwaiz1/cmp_luasnip&#34;&gt;saadparwaiz1/cmp_luasnip&lt;/a&gt; - Completion source for snippet autocomplete&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Managing &amp;amp; Installing Language Servers, Linters &amp;amp; Formatters&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;williamboman/mason.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;LSP Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/mason-lspconfig.nvim&#34;&gt;williamboman/mason-lspconfig.nvim&lt;/a&gt; - Bridges gap b/w mason &amp;amp; lspconfig&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;neovim/nvim-lspconfig&lt;/a&gt; - Easy way to configure lsp servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-nvim-lsp&#34;&gt;hrsh7th/cmp-nvim-lsp&lt;/a&gt; - Smart code autocompletion with lsp&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;glepnir/lspsaga.nvim&lt;/a&gt; - Enhanced uis for lsp&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/typescript.nvim&#34;&gt;jose-elias-alvarez/typescript.nvim&lt;/a&gt; - Additional functionality for typescript server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onsails/lspkind.nvim&#34;&gt;onsails/lspkind.nvim&lt;/a&gt; - Vs Code Like Icons for autocompletion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Formatting &amp;amp; Linting&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;jose-elias-alvarez/null-ls.nvim&lt;/a&gt; - Easy way to configure formatters &amp;amp; linters&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jayp0521/mason-null-ls.nvim&#34;&gt;jayp0521/mason-null-ls.nvim&lt;/a&gt; - Bridges gap b/w mason &amp;amp; null-ls&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Syntax Highlighting &amp;amp; Autoclosing Things&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter/nvim-treesitter&lt;/a&gt; - Treesitter configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs&#34;&gt;windwp/nvim-autopairs&lt;/a&gt; - Autoclose brackets, parens, quotes, etc...&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/windwp/nvim-ts-autotag&#34;&gt;windwp/nvim-ts-autotag&lt;/a&gt; - Autoclose tags&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Git&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;lewis6991/gitsigns.nvim&lt;/a&gt; - Show line modifications on left hand side&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>folke/noice.nvim</title>
    <updated>2022-11-06T01:47:14Z</updated>
    <id>tag:github.com,2022-11-06:/folke/noice.nvim</id>
    <link href="https://github.com/folke/noice.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üí• Highly experimental plugin that completely replaces the UI for messages, cmdline and the popupmenu.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üí• Noice &lt;em&gt;(Nice, Noise, Notice)&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Highly experimental plugin that completely replaces the UI for &lt;code&gt;messages&lt;/code&gt;, &lt;code&gt;cmdline&lt;/code&gt; and the &lt;code&gt;popupmenu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/193263220-791847b2-516c-4f23-9802-31dd6bec5f6a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üåÖ fully &lt;strong&gt;configurable views&lt;/strong&gt; like &lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;, splits, popups, virtual text, ..&lt;/li&gt; &#xA; &lt;li&gt;üîç use &lt;strong&gt;filters&lt;/strong&gt; to &lt;strong&gt;route messages&lt;/strong&gt; to different views&lt;/li&gt; &#xA; &lt;li&gt;üåà message &lt;strong&gt;highlights&lt;/strong&gt; are preserved in the views (like the colors of &lt;code&gt;:hi&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;üìù command output like &lt;a href=&#34;https://neovim.io/doc/user/message.html#:messages&#34;&gt;:messages&lt;/a&gt; is shown in normal buffers, which makes it much easier to work with&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;code&gt;:Noice&lt;/code&gt; command to show a full message history&lt;/li&gt; &#xA; &lt;li&gt;‚å®Ô∏è no more &lt;a href=&#34;https://neovim.io/doc/user/message.html#more-prompt&#34;&gt;:h more-prompt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üíª fully customizable &lt;strong&gt;cmdline&lt;/strong&gt; with icons&lt;/li&gt; &#xA; &lt;li&gt;üíÖ &lt;strong&gt;syntax highlighting&lt;/strong&gt; for &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;lua&lt;/code&gt; on the &lt;strong&gt;cmdline&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;üö• &lt;strong&gt;statusline&lt;/strong&gt; components&lt;/li&gt; &#xA; &lt;li&gt;üî≠ open message history in &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üî• Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Noice&lt;/strong&gt; is using the new experimental &lt;code&gt;vim.ui_attach&lt;/code&gt; API, so issues are to be expected. It is highly recommended to use Neovim nightly, since a bunch of issues have already been fixed upstream. Check this &lt;a href=&#34;https://github.com/folke/noice.nvim/issues/6&#34;&gt;tracking issue&lt;/a&gt; for a list of known issues.&lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8.0 &lt;strong&gt;&lt;em&gt;(nightly highly recommended)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt;: used for proper rendering and multiple views&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;: notification view &lt;em&gt;&lt;strong&gt;(optional)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;(optional)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Packer&#xA;use({&#xA;  &#34;folke/noice.nvim&#34;,&#xA;  config = function()&#xA;    require(&#34;noice&#34;).setup()&#xA;  end,&#xA;  requires = {&#xA;    -- if you lazy-load any plugin below, make sure to add proper `module=&#34;...&#34;` entries&#xA;    &#34;MunifTanjim/nui.nvim&#34;,&#xA;    -- OPTIONAL:&#xA;    --   `nvim-notify` is only needed, if you want to use the notification view.&#xA;    --   If not available, we use `mini` as the fallback&#xA;    &#34;rcarriga/nvim-notify&#34;,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; vim-plug&#xA;call plug#begin()&#xA;  Plug &#39;folke/noice.nvim&#39;&#xA;  Plug &#39;MunifTanjim/nui.nvim&#39;&#xA;call plug#end()&#xA;&#xA;lua require(&#34;noice&#34;).setup()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;noice.nvim&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/folke/noice.nvim/wiki/Configuration-Recipes&#34;&gt;wiki&lt;/a&gt; for configuration recipes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  cmdline = {&#xA;    enabled = true, -- enables the Noice cmdline UI&#xA;    view = &#34;cmdline_popup&#34;, -- view for rendering the cmdline. Change to `cmdline` to get a classic cmdline at the bottom&#xA;    opts = {}, -- global options for the cmdline. See section on views&#xA;    ---@type table&amp;lt;string, CmdlineFormat&amp;gt;&#xA;    format = {&#xA;      -- conceal: (default=true) This will hide the text in the cmdline that matches the pattern.&#xA;      -- view: (default is cmdline view)&#xA;      -- opts: any options passed to the view&#xA;      -- icon_hl_group: optional hl_group for the icon&#xA;      -- title: set to anything or empty string to hide&#xA;      cmdline = { pattern = &#34;^:&#34;, icon = &#34;ÔÅî&#34;, lang = &#34;vim&#34; },&#xA;      search_down = { kind = &#34;search&#34;, pattern = &#34;^/&#34;, icon = &#34;ÔÄÇ ÔÑÉ&#34;, lang = &#34;regex&#34; },&#xA;      search_up = { kind = &#34;search&#34;, pattern = &#34;^%?&#34;, icon = &#34;ÔÄÇ ÔÑÇ&#34;, lang = &#34;regex&#34; },&#xA;      filter = { pattern = &#34;^:%s*!&#34;, icon = &#34;$&#34;, lang = &#34;bash&#34; },&#xA;      lua = { pattern = &#34;^:%s*lua%s+&#34;, icon = &#34;Óò†&#34;, lang = &#34;lua&#34; },&#xA;      help = { pattern = &#34;^:%s*he?l?p?%s+&#34;, icon = &#34;Ôüï&#34; },&#xA;      input = {}, -- Used by input()&#xA;      -- lua = false, -- to disable a format, set to `false`&#xA;    },&#xA;  },&#xA;  messages = {&#xA;    -- NOTE: If you enable messages, then the cmdline is enabled automatically.&#xA;    -- This is a current Neovim limitation.&#xA;    enabled = true, -- enables the Noice messages UI&#xA;    view = &#34;notify&#34;, -- default view for messages&#xA;    view_error = &#34;notify&#34;, -- view for errors&#xA;    view_warn = &#34;notify&#34;, -- view for warnings&#xA;    view_history = &#34;messages&#34;, -- view for :messages&#xA;    view_search = &#34;virtualtext&#34;, -- view for search count messages. Set to `false` to disable&#xA;  },&#xA;  popupmenu = {&#xA;    enabled = true, -- enables the Noice popupmenu UI&#xA;    ---@type &#39;nui&#39;|&#39;cmp&#39;&#xA;    backend = &#34;nui&#34;, -- backend to use to show regular cmdline completions&#xA;    ---@type NoicePopupmenuItemKind|false&#xA;    -- Icons for completion item kinds (see defaults at noice.config.icons.kinds)&#xA;    kind_icons = {}, -- set to `false` to disable icons&#xA;  },&#xA;  -- You can add any custom commands below that will be available with `:Noice command`&#xA;  ---@type table&amp;lt;string, NoiceCommand&amp;gt;&#xA;  commands = {&#xA;    history = {&#xA;      -- options for the message history that you get with `:Noice`&#xA;      view = &#34;split&#34;,&#xA;      opts = { enter = true, format = &#34;details&#34; },&#xA;      filter = {&#xA;        any = {&#xA;          { event = &#34;notify&#34; },&#xA;          { error = true },&#xA;          { warning = true },&#xA;          { event = &#34;msg_show&#34;, kind = { &#34;&#34; } },&#xA;          { event = &#34;lsp&#34;, kind = &#34;message&#34; },&#xA;        },&#xA;      },&#xA;    },&#xA;    -- :Noice last&#xA;    last = {&#xA;      view = &#34;popup&#34;,&#xA;      opts = { enter = true, format = &#34;details&#34; },&#xA;      filter = {&#xA;        any = {&#xA;          { event = &#34;notify&#34; },&#xA;          { error = true },&#xA;          { warning = true },&#xA;          { event = &#34;msg_show&#34;, kind = { &#34;&#34; } },&#xA;          { event = &#34;lsp&#34;, kind = &#34;message&#34; },&#xA;        },&#xA;      },&#xA;      filter_opts = { count = 1 },&#xA;    },&#xA;    -- :Noice errors&#xA;    errors = {&#xA;      -- options for the message history that you get with `:Noice`&#xA;      view = &#34;popup&#34;,&#xA;      opts = { enter = true, format = &#34;details&#34; },&#xA;      filter = { error = true },&#xA;      filter_opts = { reverse = true },&#xA;    },&#xA;  },&#xA;  notify = {&#xA;    -- Noice can be used as `vim.notify` so you can route any notification like other messages&#xA;    -- Notification messages have their level and other properties set.&#xA;    -- event is always &#34;notify&#34; and kind can be any log level as a string&#xA;    -- The default routes will forward notifications to nvim-notify&#xA;    -- Benefit of using Noice for this is the routing and consistent history view&#xA;    enabled = true,&#xA;    view = &#34;notify&#34;,&#xA;  },&#xA;  lsp = {&#xA;    progress = {&#xA;      enabled = true,&#xA;      -- Lsp Progress is formatted using the builtins for lsp_progress. See config.format.builtin&#xA;      -- See the section on formatting for more details on how to customize.&#xA;      --- @type NoiceFormat|string&#xA;      format = &#34;lsp_progress&#34;,&#xA;      --- @type NoiceFormat|string&#xA;      format_done = &#34;lsp_progress_done&#34;,&#xA;      throttle = 1000 / 30, -- frequency to update lsp progress message&#xA;      view = &#34;mini&#34;,&#xA;    },&#xA;    override = {&#xA;      -- override the default lsp markdown formatter with Noice&#xA;      [&#34;vim.lsp.util.convert_input_to_markdown_lines&#34;] = false,&#xA;      -- override the lsp markdown formatter with Noice&#xA;      [&#34;vim.lsp.util.stylize_markdown&#34;] = false,&#xA;      -- override cmp documentation with Noice (needs the other options to work)&#xA;      [&#34;cmp.entry.get_documentation&#34;] = false,&#xA;    },&#xA;    hover = {&#xA;      enabled = true,&#xA;      view = nil, -- when nil, use defaults from documentation&#xA;      ---@type NoiceViewOptions&#xA;      opts = {}, -- merged with defaults from documentation&#xA;    },&#xA;    signature = {&#xA;      enabled = true,&#xA;      auto_open = {&#xA;        enabled = true,&#xA;        trigger = true, -- Automatically show signature help when typing a trigger character from the LSP&#xA;        luasnip = true, -- Will open signature help when jumping to Luasnip insert nodes&#xA;        throttle = 50, -- Debounce lsp signature help request by 50ms&#xA;      },&#xA;      view = nil, -- when nil, use defaults from documentation&#xA;      ---@type NoiceViewOptions&#xA;      opts = {}, -- merged with defaults from documentation&#xA;    },&#xA;    message = {&#xA;      -- Messages shown by lsp servers&#xA;      enabled = true,&#xA;      view = &#34;notify&#34;,&#xA;      opts = {},&#xA;    },&#xA;    -- defaults for hover and signature help&#xA;    documentation = {&#xA;      view = &#34;hover&#34;,&#xA;      ---@type NoiceViewOptions&#xA;      opts = {&#xA;        lang = &#34;markdown&#34;,&#xA;        replace = true,&#xA;        render = &#34;plain&#34;,&#xA;        format = { &#34;{message}&#34; },&#xA;        win_options = { concealcursor = &#34;n&#34;, conceallevel = 3 },&#xA;      },&#xA;    },&#xA;  },&#xA;  markdown = {&#xA;    hover = {&#xA;      [&#34;|(%S-)|&#34;] = vim.cmd.help, -- vim help links&#xA;      [&#34;%[.-%]%((%S-)%)&#34;] = require(&#34;noice.util&#34;).open, -- markdown links&#xA;    },&#xA;    highlights = {&#xA;      [&#34;|%S-|&#34;] = &#34;@text.reference&#34;,&#xA;      [&#34;@%S+&#34;] = &#34;@parameter&#34;,&#xA;      [&#34;^%s*(Parameters:)&#34;] = &#34;@text.title&#34;,&#xA;      [&#34;^%s*(Return:)&#34;] = &#34;@text.title&#34;,&#xA;      [&#34;^%s*(See also:)&#34;] = &#34;@text.title&#34;,&#xA;      [&#34;{%S-}&#34;] = &#34;@parameter&#34;,&#xA;    },&#xA;  },&#xA;  health = {&#xA;    checker = true, -- Disable if you don&#39;t want health checks to run&#xA;  },&#xA;  smart_move = {&#xA;    -- noice tries to move out of the way of existing floating windows.&#xA;    enabled = true, -- you can disable this behaviour here&#xA;    -- add any filetypes here, that shouldn&#39;t trigger smart move.&#xA;    excluded_filetypes = { &#34;cmp_menu&#34;, &#34;cmp_docs&#34;, &#34;notify&#34; },&#xA;  },&#xA;  ---@type NoicePresets&#xA;  presets = {&#xA;    -- you can enable a preset by setting it to true, or a table that will override the preset config&#xA;    -- you can also add custom presets that you can enable/disable with enabled=true&#xA;    bottom_search = false, -- use a classic bottom cmdline for search&#xA;    command_palette = false, -- position the cmdline and popupmenu together&#xA;    long_message_to_split = false, -- long messages will be sent to a split&#xA;    inc_rename = false, -- enables an input dialog for inc-rename.nvim&#xA;    lsp_doc_border = false, -- add a border to hover docs and signature help&#xA;  },&#xA;  throttle = 1000 / 30, -- how frequently does Noice need to check for ui updates? This has no effect when in blocking mode.&#xA;  ---@type NoiceConfigViews&#xA;  views = {}, ---@see section on views&#xA;  ---@type NoiceRouteConfig[]&#xA;  routes = {}, --- @see section on routes&#xA;  ---@type table&amp;lt;string, NoiceFilter&amp;gt;&#xA;  status = {}, --- @see section on statusline components&#xA;  ---@type NoiceFormatOptions&#xA;  format = {}, --- @see section on formatting&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;If you don&#39;t want to use a Nerd Font, you can replace the icons with Unicode symbols.&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  require(&#34;noice&#34;).setup({&#xA;    cmdline = {&#xA;      format = {&#xA;        cmdline = { icon = &#34;&amp;gt;&#34; },&#xA;        search_down = { icon = &#34;üîç‚åÑ&#34; },&#xA;        search_up = { icon = &#34;üîç‚åÉ&#34; },&#xA;        filter = { icon = &#34;$&#34; },&#xA;        lua = { icon = &#34;‚òæ&#34; },&#xA;        help = { icon = &#34;?&#34; },&#xA;      },&#xA;    },&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üîç Filters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Noice&lt;/strong&gt; uses filters to route messages to specific views.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;cleared&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;checks if the message is cleared, meaning it&#39;s in the history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;mode&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;checks if &lt;code&gt;vim.api.nvim_get_mode()&lt;/code&gt; contains the given mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;blocking&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;are we in blocking mode?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;event&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;any of the events from &lt;code&gt;ext_messages&lt;/code&gt; or &lt;code&gt;cmdline&lt;/code&gt;. See &lt;a href=&#34;https://neovim.io/doc/user/ui.html#ui-messages&#34;&gt;:h ui-messages&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;kind&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;any of the kinds from &lt;code&gt;ext_messages&lt;/code&gt;. See &lt;a href=&#34;https://neovim.io/doc/user/ui.html#ui-messages&#34;&gt;:h ui-messages&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;error&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all error-like kinds from &lt;code&gt;ext_messages&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;warning&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all warning-like kinds from &lt;code&gt;ext_messages&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;find&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;uses lua &lt;code&gt;string.find&lt;/code&gt; to match the pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;min_height&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;minimum height of the message&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;max_height&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;maximum height of the message&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;min_width&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;minimum width of the message&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;max_width&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;maximum width of the message&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;min_length&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;minimum length of the message (total width of all the lines)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;max_length&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;maximum length of the message (total width of all the lines)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;checks wether the filter matches or not&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;any&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filter[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;checks that at least one of the filters matches&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example:&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- all messages over 10 lines, excluding echo and search_count&#xA;local filter = {&#xA;  event = &#34;msg_show&#34;,&#xA;  min_height = 10,&#xA;  [&#34;not&#34;] = { kind = { &#34;search_count&#34;, &#34;echo&#34; } },&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üåÖ Views&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Noice&lt;/strong&gt; comes with the following built-in backends:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;popup&lt;/strong&gt;: powered by &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;split&lt;/strong&gt;: powered by &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;notify&lt;/strong&gt;: powered by &lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;virtualtext&lt;/strong&gt;: shows the message as virtualtext (for example for &lt;code&gt;search_count&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mini&lt;/strong&gt;: similar to &lt;a href=&#34;https://github.com/vigoux/notifier.nvim&#34;&gt;notifier.nvim&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/j-hui/fidget.nvim&#34;&gt;fidget.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &lt;strong&gt;View&lt;/strong&gt; (&lt;code&gt;config.views&lt;/code&gt;) is a combination of a &lt;code&gt;backend&lt;/code&gt; and options. &lt;strong&gt;Noice&lt;/strong&gt; comes with the following built-in views with sane defaults:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;View&lt;/th&gt; &#xA;   &lt;th&gt;Backend&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;notify&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;nvim-notify&lt;/em&gt; with &lt;code&gt;level=true&lt;/code&gt;, &lt;code&gt;replace=true&lt;/code&gt;, &lt;code&gt;merge=true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;split&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;split&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;horizontal split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;vsplit&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;split&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;vertical split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;popup&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;popup&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;simple popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;mini&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mini&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;minimal view, by default bottom right, right-aligned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;cmdline&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;popup&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bottom line, similar to the classic cmdline&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;cmdline_popup&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;popup&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fancy cmdline popup, with different styles according to the cmdline mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;popupmenu&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nui.menu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;special view with the options used to render the popupmenu when backend is &lt;strong&gt;nui&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/folke/noice.nvim/raw/main/lua/noice/config/views.lua&#34;&gt;noice.config.views&lt;/a&gt; to see the options. Any options passed to existing views in &lt;code&gt;config.views&lt;/code&gt;, will override those options only. You can configure completely new views and use them in custom routes.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example:&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- override the default split view to always enter the split when it opens&#xA;require(&#34;noice&#34;).setup({&#xA;    views = {&#xA;        split = {&#xA;            enter = true&#xA;          }&#xA;      }&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;All built-in Noice views have the filetype &lt;code&gt;noice&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Nui Options&lt;/h3&gt; &#xA;&lt;p&gt;See the Nui documentation for &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/popup&#34;&gt;Popup&lt;/a&gt; and &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/split&#34;&gt;Split&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Option&lt;/td&gt;&#xA;   &lt;td&gt;Description&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;size, position&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt;Size, position and their constituents can additionally be specified as &lt;b&gt;&#34;auto&#34;&lt;/b&gt;, to use the message height and width.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;win_options.winhighlight&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt; String or can also be a table like: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  win_options = {&#xA;    winhighlight = {&#xA;      Normal = &#34;NormalFloat&#34;,&#xA;      FloatBorder = &#34;FloatBorder&#34;&#xA;    },&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Notify Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;title&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;title to be used for the notification. Uses &lt;code&gt;Message.title&lt;/code&gt; if available.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;replace&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;when true, messages routing to the same notify instance will replace existing messages instead of pushing a new notification every time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;merge&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Merge messages into one Notification or create separate notifications&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;level&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number|string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;info&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;notification level. Uses &lt;code&gt;Message.level&lt;/code&gt; if available.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Virtual Text Options&lt;/h3&gt; &#xA;&lt;p&gt;Right now there&#39;s only an option to set the &lt;code&gt;hl_group&lt;/code&gt; used to render the virtual text.&lt;/p&gt; &#xA;&lt;h2&gt;üé® Formatting&lt;/h2&gt; &#xA;&lt;p&gt;Formatting options can be specified with &lt;code&gt;config.format&lt;/code&gt;. For a list of the defaults, please refer to &lt;a href=&#34;https://github.com/folke/noice.nvim/raw/main/lua/noice/config/format.lua&#34;&gt;config.format&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Noice&lt;/strong&gt; includes the following formatters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;level&lt;/strong&gt;: message level with optional &lt;code&gt;icon&lt;/code&gt; and &lt;code&gt;hl_group&lt;/code&gt; per level&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;text&lt;/strong&gt;: any text with optional &lt;code&gt;hl_group&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;title&lt;/strong&gt;: message title with optional &lt;code&gt;hl_group&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;event&lt;/strong&gt;: message event with optional &lt;code&gt;hl_group&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;kind&lt;/strong&gt;: message kind with optional &lt;code&gt;hl_group&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: formatted date with optional date format string&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: message content itself with optional &lt;code&gt;hl_group&lt;/code&gt; to override message highlights&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;confirm&lt;/strong&gt;: only useful for &lt;code&gt;confirm&lt;/code&gt; messages. Will format the choices as buttons.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Formatters are used in &lt;code&gt;format&lt;/code&gt; definitions. &lt;strong&gt;Noice&lt;/strong&gt; includes the following built-in formats:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- default format&#xA;  default = { &#34;{level} &#34;, &#34;{title} &#34;, &#34;{message}&#34; },&#xA;  -- default format for vim.notify views&#xA;  notify = { &#34;{message}&#34; },&#xA;  -- default format for the history&#xA;  details = {&#xA;    &#34;{level} &#34;,&#xA;    &#34;{date} &#34;,&#xA;    &#34;{event}&#34;,&#xA;    { &#34;{kind}&#34;, before = { &#34;.&#34;, hl_group = &#34;Comment&#34; } },&#xA;    &#34; &#34;,&#xA;    &#34;{title} &#34;,&#xA;    &#34;{message}&#34;,&#xA;  },&#xA;  telescope = ..., -- formatter used to display telescope results&#xA;  telescope_preview = ..., -- formatter used to preview telescope results&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Text before/after the formatter or in the before/after options, will only be rendered if the formatter itself rendered something.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;format&lt;/code&gt; view option, can be either a &lt;code&gt;string&lt;/code&gt; (one of the built-in formats), or a table with a custom format definition.&lt;/p&gt; &#xA;&lt;p&gt;To align text, you can use the &lt;code&gt;align&lt;/code&gt; option for a view. Can be &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üöó Routes&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;strong&gt;route&lt;/strong&gt; has a &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;view&lt;/code&gt; and optional &lt;code&gt;opts&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;view&lt;/strong&gt;: one of the views (built-in or custom)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;filter&lt;/strong&gt; a filter for messages matching this route&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;opts&lt;/strong&gt;: options for the view and the route&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Route options can be any of the view options above, or one of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;skip&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;messages matching this filter will be skipped and not shown in any views&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;stop&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;false&lt;/code&gt; and a route matches the filter, then other routes can still process the message too. Useful if you want certain messages to be shown in multiple views.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/folke/noice.nvim/raw/main/lua/noice/config/routes.lua&#34;&gt;noice.config.routes&lt;/a&gt; for an overview of the default routes. &lt;strong&gt;Routes&lt;/strong&gt; passed to &lt;code&gt;setup()&lt;/code&gt; will be prepended to the default routes.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- skip search_count messages instead of showing them as virtual text&#xA;require(&#34;noice&#34;).setup({&#xA;  routes = {&#xA;    {&#xA;      filter = { event = &#34;msg_show&#34;, kind = &#34;search_count&#34; },&#xA;      opts = { skip = true },&#xA;    },&#xA;  },&#xA;})&#xA;&#xA;-- always route any messages with more than 20 lines to the split view&#xA;require(&#34;noice&#34;).setup({&#xA;  routes = {&#xA;    {&#xA;      view = &#34;split&#34;,&#xA;      filter = { event = &#34;msg_show&#34;, min_height = 20 },&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üö• Statusline Components&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Noice&lt;/strong&gt; comes with the following statusline components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ruler&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: last line of the last message (&lt;code&gt;event=show_msg&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;command&lt;/strong&gt;: &lt;code&gt;showcmd&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;: &lt;code&gt;showmode&lt;/code&gt; (@recording messages)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;search&lt;/strong&gt;: search count messages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/folke/noice.nvim/raw/main/lua/noice/config/status.lua&#34;&gt;noice.config.status&lt;/a&gt; for the default config.&lt;/p&gt; &#xA;&lt;p&gt;You can add custom statusline components in setup under the &lt;code&gt;status&lt;/code&gt; key.&lt;/p&gt; &#xA;&lt;p&gt;Statusline components have the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;get&lt;/strong&gt;: gets the content of the message &lt;strong&gt;without&lt;/strong&gt; highlights&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;get_hl&lt;/strong&gt;: gets the content of the message &lt;strong&gt;with&lt;/strong&gt; highlights&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;has&lt;/strong&gt;: checks if the component is available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of configuring &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lualine&#34;).setup({&#xA;  sections = {&#xA;    lualine_x = {&#xA;      {&#xA;        require(&#34;noice&#34;).api.status.message.get_hl,&#xA;        cond = require(&#34;noice&#34;).api.status.message.has,&#xA;      },&#xA;      {&#xA;        require(&#34;noice&#34;).api.status.command.get,&#xA;        cond = require(&#34;noice&#34;).api.status.command.has,&#xA;        color = { fg = &#34;#ff9e64&#34; },&#xA;      },&#xA;      {&#xA;        require(&#34;noice&#34;).api.status.mode.get,&#xA;        cond = require(&#34;noice&#34;).api.status.mode.has,&#xA;        color = { fg = &#34;#ff9e64&#34; },&#xA;      },&#xA;      {&#xA;        require(&#34;noice&#34;).api.status.search.get,&#xA;        cond = require(&#34;noice&#34;).api.status.search.has,&#xA;        color = { fg = &#34;#ff9e64&#34; },&#xA;      },&#xA;    },&#xA;  },&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üî≠ Telescope&lt;/h2&gt; &#xA;&lt;p&gt;In order to use &lt;strong&gt;Noice&lt;/strong&gt; in &lt;strong&gt;Telescope&lt;/strong&gt;, you can either do &lt;code&gt;:Noice telescope&lt;/code&gt;, or register the extension and use &lt;code&gt;:Telescope noice&lt;/code&gt;. The results panel is formatted using &lt;code&gt;config.format.formatters.telescope&lt;/code&gt;. The preview is formatted with &lt;code&gt;config.format.formatters.telescope_preview&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;telescope&#34;).load_extension(&#34;noice&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Noice&lt;/code&gt; or &lt;code&gt;:Noice history&lt;/code&gt; shows the message history&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Noice last&lt;/code&gt; shows the last message in a popup&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Noice errors&lt;/code&gt; shows the error messages in a split. Last errors on top&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Noice disable&lt;/code&gt; disables &lt;strong&gt;Noice&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Noice enable&lt;/code&gt; enables &lt;strong&gt;Noice&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Noice stats&lt;/code&gt; shows debugging stats&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Noice telescope&lt;/code&gt; opens message history in Telescope&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, all commands also exist as a full name like &lt;code&gt;:NoiceLast&lt;/code&gt;, &lt;code&gt;:NoiceDisable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;Lua&lt;/code&gt; equivalents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;nl&#34;, function()&#xA;  require(&#34;noice&#34;).cmd(&#34;last&#34;)&#xA;end)&#xA;&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;nh&#34;, function()&#xA;  require(&#34;noice&#34;).cmd(&#34;history&#34;)&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can add custom commands with &lt;code&gt;config.commands&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Lsp Hover Doc Scrolling&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;c-f&amp;gt;&#34;, function()&#xA;    if not require(&#34;noice.lsp&#34;).scroll(4) then&#xA;      return &#34;&amp;lt;c-f&amp;gt;&#34;&#xA;    end&#xA;  end, { silent = true, expr = true })&#xA;&#xA;  vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;c-b&amp;gt;&#34;, function()&#xA;    if not require(&#34;noice.lsp&#34;).scroll(-4) then&#xA;      return &#34;&amp;lt;c-b&amp;gt;&#34;&#xA;    end&#xA;  end, { silent = true, expr = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üåà Highlight Groups&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see all highlight groups&lt;/summary&gt; &#xA; &lt;!-- hl_start --&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;    &lt;th&gt;Default Group&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdline&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;MsgArea&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Normal for the classic cmdline area at the bottom&#34;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlineIcon&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticSignInfo&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Cmdline icon&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlineIconCmdline&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlineIcon&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlineIconFilter&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlineIcon&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlineIconHelp&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlineIcon&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlineIconIncRename&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlineIcon&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlineIconInput&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlineIcon&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlineIconLua&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlineIcon&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlineIconSearch&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticSignWarn&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Cmdline search icon (&lt;code&gt;/&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlinePopup&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Normal&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Normal for the cmdline popup&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlinePopupBorder&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticSignInfo&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Cmdline popup border&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlinePopupBorderCmdline&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlinePopupBorder&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlinePopupBorderFilter&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlinePopupBorder&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlinePopupBorderHelp&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlinePopupBorder&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlinePopupBorderIncRename&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlinePopupBorder&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlinePopupBorderInput&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlinePopupBorder&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlinePopupBorderLua&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCmdlinePopupBorder&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlinePopupBorderSearch&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticSignWarn&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Cmdline popup border for search&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCmdlinePrompt&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Title&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;prompt for input()&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindClass&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindColor&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindConstant&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindConstructor&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindDefault&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Special&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindEnum&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindEnumMember&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindField&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindFile&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindFolder&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindFunction&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindInterface&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindKeyword&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindMethod&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindModule&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindProperty&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindSnippet&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindStruct&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindText&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindUnit&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindValue&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemKindVariable&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NoiceCompletionItemKindDefault&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemMenu&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;none&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Normal for the popupmenu&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCompletionItemWord&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;none&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Normal for the popupmenu&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceConfirm&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Normal&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Normal for the confirm view&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceConfirmBorder&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticSignInfo&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Border for the confirm view&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceCursor&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Cursor&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Fake Cursor&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatConfirm&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;CursorLine&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatConfirmDefault&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Visual&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatDate&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Special&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatEvent&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NonText&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatKind&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NonText&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatLevelDebug&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NonText&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatLevelError&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticVirtualTextError&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatLevelInfo&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticVirtualTextInfo&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatLevelOff&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NonText&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatLevelTrace&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NonText&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatLevelWarn&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticVirtualTextWarn&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatProgressDone&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Search&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Progress bar done&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatProgressTodo&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;CursorLine&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;progress bar todo&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceFormatTitle&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Title&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceLspProgressClient&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Title&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Lsp progress client name&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceLspProgressSpinner&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Constant&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Lsp progress spinner&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceLspProgressTitle&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NonText&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Lsp progress title&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceMini&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;MsgArea&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Normal for mini view&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoicePopup&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NormalFloat&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Normal for popup views&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoicePopupBorder&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;FloatBorder&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Border for popup views&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoicePopupmenu&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Pmenu&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Normal for the popupmenu&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoicePopupmenuBorder&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;FloatBorder&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Popupmenu border&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoicePopupmenuMatch&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Special&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Part of the item that matches the input&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoicePopupmenuSelected&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;PmenuSel&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Selected item in the popupmenu&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceScrollbar&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;PmenuSbar&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Normal for scrollbar&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceScrollbarThumb&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;PmenuThumb&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Scrollbar thumb&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceSplit&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;NormalFloat&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Normal for split views&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceSplitBorder&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;FloatBorder&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Border for split views&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;NoiceVirtualText&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticVirtualTextInfo&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Default hl group for virtualtext views&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;!-- hl_end --&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>nvim-tree/nvim-tree.lua</title>
    <updated>2022-11-06T01:47:14Z</updated>
    <id>tag:github.com,2022-11-06:/nvim-tree/nvim-tree.lua</id>
    <link href="https://github.com/nvim-tree/nvim-tree.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A file explorer tree for neovim written in lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A File Explorer For Neovim Written In Lua&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/nvim-tree/nvim-tree.lua/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;149&#34; height=&#34;484&#34; src=&#34;https://user-images.githubusercontent.com/17254073/195207026-f3434ba1-dc86-4c48-8ab3-b2efc3b85227.png&#34;&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;149&#34; height=&#34;484&#34; src=&#34;https://user-images.githubusercontent.com/17254073/195207023-7b709e35-7f10-416b-aafb-5bb61268c7d3.png&#34;&gt; &#xA;&lt;p&gt;Automatic updates&lt;/p&gt; &#xA;&lt;p&gt;File type icons&lt;/p&gt; &#xA;&lt;p&gt;Git integration&lt;/p&gt; &#xA;&lt;p&gt;Diagnostics integration: LSP and COC&lt;/p&gt; &#xA;&lt;p&gt;(Live) filtering&lt;/p&gt; &#xA;&lt;p&gt;Cut, copy, paste, rename, delete, create&lt;/p&gt; &#xA;&lt;p&gt;Highly customisable&lt;/p&gt; &#xA;&lt;br clear=&#34;left&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#nvim-tree:matrix.org&#34;&gt;Join us on matrix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neovim/neovim/wiki/Installing-Neovim&#34;&gt;neovim &amp;gt;=0.7.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; is optional and used to display file icons. It requires a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;patched font&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-tree/nvim-web-devicons&#39; &#34; optional, for file icons&#xA;Plug &#39;nvim-tree/nvim-tree.lua&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;nvim-tree/nvim-tree.lua&#39;,&#xA;  requires = {&#xA;    &#39;nvim-tree/nvim-web-devicons&#39;, -- optional, for file icons&#xA;  },&#xA;  tag = &#39;nightly&#39; -- optional, updated every week. (see issue #1193)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Setup should be run in a lua file or in a lua heredoc &lt;a href=&#34;https://neovim.io/doc/user/lua.html&#34;&gt;:help lua-heredoc&lt;/a&gt; if using in a vim file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- examples for your init.lua&#xA;&#xA;-- disable netrw at the very start of your init.lua (strongly advised)&#xA;vim.g.loaded_netrw = 1&#xA;vim.g.loaded_netrwPlugin = 1&#xA;&#xA;-- set termguicolors to enable highlight groups&#xA;vim.opt.termguicolors = true&#xA;&#xA;-- empty setup using defaults&#xA;require(&#34;nvim-tree&#34;).setup()&#xA;&#xA;-- OR setup with some options&#xA;require(&#34;nvim-tree&#34;).setup({&#xA;  sort_by = &#34;case_sensitive&#34;,&#xA;  view = {&#xA;    adaptive_size = true,&#xA;    mappings = {&#xA;      list = {&#xA;        { key = &#34;u&#34;, action = &#34;dir_up&#34; },&#xA;      },&#xA;    },&#xA;  },&#xA;  renderer = {&#xA;    group_empty = true,&#xA;  },&#xA;  filters = {&#xA;    dotfiles = true,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For complete list of available configuration options see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each option is documented in &lt;code&gt;:help nvim-tree.OPTION_NAME&lt;/code&gt;. Nested options can be accessed by appending &lt;code&gt;.&lt;/code&gt;, for example &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.view.mappings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-commands&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Basic commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeToggle&lt;/code&gt; Open or close the tree. Takes an optional path argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeFocus&lt;/code&gt; Open the tree if it is closed, and then focus on the tree.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeFindFile&lt;/code&gt; Move the cursor in the tree for the current buffer, opening folders if needed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeCollapse&lt;/code&gt; Collapses the nvim-tree recursively.&lt;/p&gt; &#xA;&lt;h2&gt;Mappings&lt;/h2&gt; &#xA;&lt;p&gt;nvim-tree comes with number of mappings; for default mappings please see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-default-mappings&lt;/a&gt;, for way of configuring mappings see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-mappings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;g?&lt;/code&gt; toggles help, showing all the mappings and their actions.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;nvim-tree is stable and new major features will not be added. The focus is on existing user experience.&lt;/p&gt; &#xA;&lt;p&gt;Users are encouraged to add their own custom features via the public &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/#api&#34;&gt;API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Development is focused on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug fixes&lt;/li&gt; &#xA; &lt;li&gt;Performance&lt;/li&gt; &#xA; &lt;li&gt;Quality of Life improvements&lt;/li&gt; &#xA; &lt;li&gt;API / Events&lt;/li&gt; &#xA; &lt;li&gt;Enhancements to existing features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;nvim-tree exposes a public API. This is non breaking, with additions made as necessary.&lt;/p&gt; &#xA;&lt;p&gt;Please raise a &lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua/issues/new?assignees=&amp;amp;labels=feature+request&amp;amp;template=feature_request.md&amp;amp;title=&#34;&gt;feature request&lt;/a&gt; if the API is insufficent for your needs. &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/#contributing&#34;&gt;Pull requests&lt;/a&gt; are always welcome.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-api&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;Users may subscribe to events that nvim-tree will dispatch in a variety of situations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-events&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;p&gt;Custom actions may be mapped which can invoke API or perform your own actions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-mappings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tips &amp;amp; tricks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can add a directory by adding a &lt;code&gt;/&lt;/code&gt; at the end of the paths, entering multiple directories &lt;code&gt;BASE/foo/bar/baz&lt;/code&gt; will add directory foo, then bar and add a file baz to it.&lt;/li&gt; &#xA; &lt;li&gt;You can update window options for the tree by setting &lt;code&gt;require&#34;nvim-tree.view&#34;.View.winopts.MY_OPTION = MY_OPTION_VALUE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle&lt;/code&gt; has a second parameter which allows to toggle without focusing the explorer (&lt;code&gt;require&#34;nvim-tree&#34;.toggle(false, true)&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;You can allow nvim-tree to behave like vinegar, see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-vinegar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;code&gt;:set nosplitright&lt;/code&gt;, the files will open on the left side of the tree, placing the tree window in the right side of the file you opened.&lt;/li&gt; &#xA; &lt;li&gt;You can automatically close the tab/vim when nvim-tree is the last window in the tab: &lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua/discussions/1115&#34;&gt;https://github.com/nvim-tree/nvim-tree.lua/discussions/1115&lt;/a&gt;. WARNING: this can catastrophically fail: &lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua/issues/1368&#34;&gt;https://github.com/nvim-tree/nvim-tree.lua/issues/1368&lt;/a&gt;. This will not be added to nvim-tree and the team will not provide support / assistance with this, due to complexities in vim event timings and side-effects.&lt;/li&gt; &#xA; &lt;li&gt;Hide the &lt;code&gt;.git&lt;/code&gt; folder: &lt;code&gt;filters = { custom = { &#34;^.git$&#34; } }&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.filters.custom&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To disable the display of icons see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.renderer.icons.show&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h2&gt;Diagnostic Logging&lt;/h2&gt; &#xA;&lt;p&gt;You may enable diagnostic logging to &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.log&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;netrw Keeps Popping Up&lt;/h2&gt; &#xA;&lt;p&gt;Eagerly disable netrw. See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.disable_netrw&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Performance Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are experiencing performance issues with nvim-tree.lua, you can enable profiling in the logs. It is advisable to enable git logging at the same time, as that can be a source of performance problems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;log = {&#xA;  enable = true,&#xA;  truncate = true,&#xA;  types = {&#xA;    diagnostics = true,&#xA;    git = true,&#xA;    profile = true,&#xA;    watcher = true,&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please attach &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt; if you raise an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Performance Tips:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using fish as an editor shell (which might be fixed in the future), try set &lt;code&gt;shell=/bin/bash&lt;/code&gt; in your vim config. Alternatively, you can &lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua/issues/549#issuecomment-1127394585&#34;&gt;prevent fish from loading interactive configuration in a non-interactive shell&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try manually running the git command (see the logs) in your shell e.g. &lt;code&gt;git --no-optional-locks status --porcelain=v1 --ignored=matching -u&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Huge git repositories may timeout after the default &lt;code&gt;git.timeout&lt;/code&gt; of 400ms. Try increasing that in your setup if you see &lt;code&gt;[git] job timed out&lt;/code&gt; in the logs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try temporarily disabling git integration by setting &lt;code&gt;git.enable = false&lt;/code&gt; in your setup.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PRs are always welcome. See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-tree.lua/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Help Wanted&lt;/h3&gt; &#xA;&lt;p&gt;Developers with the following environments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple macOS&lt;/li&gt; &#xA; &lt;li&gt;Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WSL&lt;/li&gt; &#xA;   &lt;li&gt;msys&lt;/li&gt; &#xA;   &lt;li&gt;powershell&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Help triaging, diagnosing and fixing issues specific to those environments is needed, as the nvim-tree developers do not have access to or expertise in these environments.&lt;/p&gt; &#xA;&lt;p&gt;Let us know you&#39;re interested by commenting on issues and raising PRs.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua/wiki/Showcases&#34;&gt;Showcases&lt;/a&gt; wiki page for examples of user&#39;s configurations with sources.&lt;/p&gt; &#xA;&lt;p&gt;Please add your own!&lt;/p&gt;</summary>
  </entry>
</feed>