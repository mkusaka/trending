<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T02:17:49Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Koko-boya/Grasscutter_Resources</title>
    <updated>2022-06-05T02:17:49Z</updated>
    <id>tag:github.com,2022-06-05:/Koko-boya/Grasscutter_Resources</id>
    <link href="https://github.com/Koko-boya/Grasscutter_Resources" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Combined Resource Folder from Multiple Sources of certain anime game&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Grasscutter_Resources&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Resource Version - &#34;Certain Anime Game&#34; 2.7.0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ExcelBinOutput&lt;/li&gt; &#xA; &lt;li&gt;BinOutput&lt;/li&gt; &#xA; &lt;li&gt;Scripts [Lua From &lt;a href=&#34;https://github.com/lilmayofuksu/animepython&#34;&gt;lilmayofuksu/animepython&lt;/a&gt; - 2.6.51)&lt;/li&gt; &#xA; &lt;li&gt;Readable&lt;/li&gt; &#xA; &lt;li&gt;Subtitle&lt;/li&gt; &#xA; &lt;li&gt;TextMap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Grasscutters/Grasscutter&#34;&gt;Grasscutter&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dimbreath&#34;&gt;Dimbreath&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radioegor146&#34;&gt;radioegor146&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheLostTree&#34;&gt;TheLostTree&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lilmayofuksu/animepython&#34;&gt;lilmayofuksu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ChristianChiarulli/nvim</title>
    <updated>2022-06-05T02:17:49Z</updated>
    <id>tag:github.com,2022-06-05:/ChristianChiarulli/nvim</id>
    <link href="https://github.com/ChristianChiarulli/nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My neovim config&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neovim from scratch&lt;/h1&gt; &#xA;&lt;h2&gt;Try out this config&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to remove or move your current &lt;code&gt;nvim&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:ChristianChiarulli/nvim.git ~/.config/nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;nvim&lt;/code&gt; and wait for the plugins to be installed&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; (You will notice treesitter pulling in a bunch of parsers the next time you open Neovim)&lt;/p&gt; &#xA;&lt;p&gt;each video will be associated with a branch so checkout the one you are interested in&lt;/p&gt; &#xA;&lt;h2&gt;Get healthy&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;code&gt;nvim&lt;/code&gt; and enter the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:checkhealth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll probably notice you don&#39;t have support for copy/paste also that python and node haven&#39;t been setup&lt;/p&gt; &#xA;&lt;p&gt;So let&#39;s fix that&lt;/p&gt; &#xA;&lt;p&gt;First we&#39;ll fix copy/paste&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On mac &lt;code&gt;pbcopy&lt;/code&gt; should be builtin&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Ubuntu&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt install xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Arch Linux&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo pacman -S xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next we need to install python support (node is optional)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim python support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip install pynvim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim node support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm i -g neovim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fonts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;A nerd font&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-codicons/raw/main/dist/codicon.ttf&#34;&gt;codicon&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf&#34;&gt;An emoji font&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After moving fonts to &lt;code&gt;~/.local/share/fonts/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run: &lt;code&gt;$ fc-cache -f -v&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; (If you are seeing boxes without icons, try changing this line from &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;: &lt;a href=&#34;https://github.com/ChristianChiarulli/nvim/raw/ac41efa237caf3a498077df19a3f31ca4b35caf3/lua/user/icons.lua#L5&#34;&gt;link&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Java Debugging and Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:microsoft/java-debug.git&#xA;cd java-debug/&#xA;./mvnw clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:microsoft/vscode-java-test.git&#xA;cd vscode-java-test&#xA;npm install&#xA;npm run build-plugin&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>TimUntersberger/neogit</title>
    <updated>2022-06-05T02:17:49Z</updated>
    <id>tag:github.com,2022-06-05:/TimUntersberger/neogit</id>
    <link href="https://github.com/TimUntersberger/neogit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;magit for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neogit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/32014449/109874516-8042af00-7c6f-11eb-8afc-65ef52448c7a.png&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;work-in-progress&lt;/strong&gt; &lt;a href=&#34;https://magit.vc&#34;&gt;Magit&lt;/a&gt; clone for &lt;a href=&#34;https://neovim.io&#34;&gt;Neovim&lt;/a&gt; that is geared toward the Vim philosophy.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: We depend on &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;, so to use this plugin, you will additionally need to require &lt;code&gt;nvim-lua/plenary.nvim&lt;/code&gt; using your plugin manager of choice, before requiring this plugin.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Plugin Manager&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;use { &#39;TimUntersberger/neogit&#39;, requires = &#39;nvim-lua/plenary.nvim&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;Vim-plug&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Plug &#39;TimUntersberger/neogit&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;NeoBundle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NeoBundle &#39;TimUntersberger/neogit&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Bundle &#39;TimUntersberger/neogit&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tpope/vim-pathogen&#34;&gt;Pathogen&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;git clone https://github.com/TimUntersberger/neogit.git ~/.vim/bundle/neogit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;Dein&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;call dein#add(&#39;TimUntersberger/neogit&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You also use in the built-in package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone --depth 1 https://github.com/TimUntersberger/neogit $XDG_CONFIG_HOME/nvim/pack/plugins/start/neogit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you have to add the following lines to your &lt;code&gt;init.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local neogit = require(&#39;neogit&#39;)&#xA;&#xA;neogit.setup {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can either open neogit by using the &lt;code&gt;Neogit&lt;/code&gt; command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Neogit &#34; uses tab&#xA;:Neogit kind=&amp;lt;kind&amp;gt; &#34; override kind&#xA;:Neogit cwd=&amp;lt;cwd&amp;gt; &#34; override cwd&#xA;:Neogit commit&#34; open commit popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using the lua api:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local neogit = require(&#39;neogit&#39;)&#xA;&#xA;-- open using defaults&#xA;neogit.open()&#xA;&#xA;-- open commit popup&#xA;neogit.open({ &#34;commit&#34; })&#xA;&#xA;-- open with split kind&#xA;neogit.open({ kind = &#34;split&#34; })&#xA;&#xA;-- open home directory&#xA;neogit.open({ cwd = &#34;~&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The create function takes 1 optional argument that can be one of the following values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tab (default)&lt;/li&gt; &#xA; &lt;li&gt;replace&lt;/li&gt; &#xA; &lt;li&gt;floating (This currently doesn&#39;t work with popups. Very unstable)&lt;/li&gt; &#xA; &lt;li&gt;split&lt;/li&gt; &#xA; &lt;li&gt;split_above&lt;/li&gt; &#xA; &lt;li&gt;vsplit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status Keybindings&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tab&lt;/td&gt; &#xA;   &lt;td&gt;Toggle diff&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1, 2, 3, 4&lt;/td&gt; &#xA;   &lt;td&gt;Set a foldlevel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$&lt;/td&gt; &#xA;   &lt;td&gt;Command history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;b&lt;/td&gt; &#xA;   &lt;td&gt;Branch popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s&lt;/td&gt; &#xA;   &lt;td&gt;Stage (also supports staging selection/hunk)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;Stage unstaged changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-s&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stage Everything&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;u&lt;/td&gt; &#xA;   &lt;td&gt;Unstage (also supports staging selection/hunk)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;U&lt;/td&gt; &#xA;   &lt;td&gt;Unstage staged changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c&lt;/td&gt; &#xA;   &lt;td&gt;Open commit popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;r&lt;/td&gt; &#xA;   &lt;td&gt;Open rebase popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L&lt;/td&gt; &#xA;   &lt;td&gt;Open log popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;p&lt;/td&gt; &#xA;   &lt;td&gt;Open pull popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;P&lt;/td&gt; &#xA;   &lt;td&gt;Open push popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Z&lt;/td&gt; &#xA;   &lt;td&gt;Open stash popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;?&lt;/td&gt; &#xA;   &lt;td&gt;Open help popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;Discard changes (also supports discarding hunks)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;enter&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-r&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Refresh Buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;With &lt;code&gt;diffview&lt;/code&gt; integration enabled&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;d&lt;/td&gt; &#xA;   &lt;td&gt;Open &lt;code&gt;diffview.nvim&lt;/code&gt; at hovered file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;D (TODO)&lt;/td&gt; &#xA;   &lt;td&gt;Open diff popup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can configure neogit by running the &lt;code&gt;neogit.setup&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local neogit = require(&#34;neogit&#34;)&#xA;&#xA;neogit.setup {&#xA;  disable_signs = false,&#xA;  disable_hint = false,&#xA;  disable_context_highlighting = false,&#xA;  disable_commit_confirmation = false,&#xA;  -- Neogit refreshes its internal state after specific events, which can be expensive depending on the repository size. &#xA;  -- Disabling `auto_refresh` will make it so you have to manually refresh the status after you open it.&#xA;  auto_refresh = true,&#xA;  disable_builtin_notifications = false,&#xA;  use_magit_keybindings = false,&#xA;  commit_popup = {&#xA;      kind = &#34;split&#34;,&#xA;  },&#xA;  -- Change the default way of opening neogit&#xA;  kind = &#34;tab&#34;,&#xA;  -- customize displayed signs&#xA;  signs = {&#xA;    -- { CLOSED, OPENED }&#xA;    section = { &#34;&amp;gt;&#34;, &#34;v&#34; },&#xA;    item = { &#34;&amp;gt;&#34;, &#34;v&#34; },&#xA;    hunk = { &#34;&#34;, &#34;&#34; },&#xA;  },&#xA;  integrations = {&#xA;    -- Neogit only provides inline diffs. If you want a more traditional way to look at diffs, you can use `sindrets/diffview.nvim`.&#xA;    -- The diffview integration enables the diff popup, which is a wrapper around `sindrets/diffview.nvim`.&#xA;    --&#xA;    -- Requires you to have `sindrets/diffview.nvim` installed.&#xA;    -- use { &#xA;    --   &#39;TimUntersberger/neogit&#39;, &#xA;    --   requires = { &#xA;    --     &#39;nvim-lua/plenary.nvim&#39;,&#xA;    --     &#39;sindrets/diffview.nvim&#39; &#xA;    --   }&#xA;    -- }&#xA;    --&#xA;    diffview = false  &#xA;  },&#xA;  -- Setting any section to `false` will make the section not render at all&#xA;  sections = {&#xA;    untracked = {&#xA;      folded = false&#xA;    },&#xA;    unstaged = {&#xA;      folded = false&#xA;    },&#xA;    staged = {&#xA;      folded = false&#xA;    },&#xA;    stashes = {&#xA;      folded = true&#xA;    },&#xA;    unpulled = {&#xA;      folded = true&#xA;    },&#xA;    unmerged = {&#xA;      folded = false&#xA;    },&#xA;    recent = {&#xA;      folded = true&#xA;    },&#xA;  },&#xA;  -- override/add mappings&#xA;  mappings = {&#xA;    -- modify status buffer mappings&#xA;    status = {&#xA;      -- Adds a mapping with &#34;B&#34; as key that does the &#34;BranchPopup&#34; command&#xA;      [&#34;B&#34;] = &#34;BranchPopup&#34;,&#xA;      -- Removes the default mapping of &#34;s&#34;&#xA;      [&#34;s&#34;] = &#34;&#34;,&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Right now, only the status buffer supports custom mappings.&lt;/p&gt; &#xA;&lt;p&gt;List of status commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Close&lt;/li&gt; &#xA; &lt;li&gt;Depth1 (Set foldlevel to 1)&lt;/li&gt; &#xA; &lt;li&gt;Depth2 (Set foldlevel to 2)&lt;/li&gt; &#xA; &lt;li&gt;Depth3 (Set foldlevel to 3)&lt;/li&gt; &#xA; &lt;li&gt;Depth4 (Set foldlevel to 4)&lt;/li&gt; &#xA; &lt;li&gt;Toggle&lt;/li&gt; &#xA; &lt;li&gt;Discard (Normal and visual mode)&lt;/li&gt; &#xA; &lt;li&gt;Stage (Normal and visual mode)&lt;/li&gt; &#xA; &lt;li&gt;StageUnstaged&lt;/li&gt; &#xA; &lt;li&gt;StageAll&lt;/li&gt; &#xA; &lt;li&gt;GoToFile&lt;/li&gt; &#xA; &lt;li&gt;Unstage (Normal and visual mode)&lt;/li&gt; &#xA; &lt;li&gt;UnstageStaged&lt;/li&gt; &#xA; &lt;li&gt;CommandHistory&lt;/li&gt; &#xA; &lt;li&gt;RefreshBuffer&lt;/li&gt; &#xA; &lt;li&gt;HelpPopup&lt;/li&gt; &#xA; &lt;li&gt;PullPopup&lt;/li&gt; &#xA; &lt;li&gt;PushPopup&lt;/li&gt; &#xA; &lt;li&gt;CommitPopup&lt;/li&gt; &#xA; &lt;li&gt;LogPopup&lt;/li&gt; &#xA; &lt;li&gt;StashPopup&lt;/li&gt; &#xA; &lt;li&gt;BranchPopup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notification Highlighting&lt;/h2&gt; &#xA;&lt;p&gt;Neogit defines three highlight groups for the notifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi NeogitNotificationInfo guifg=#80ff95&#xA;hi NeogitNotificationWarning guifg=#fff454&#xA;hi NeogitNotificationError guifg=#c44323&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override them to fit your colorscheme in your vim configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Contextual Highlighting&lt;/h2&gt; &#xA;&lt;p&gt;The colors for contextual highlighting are defined with these highlight groups:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi def NeogitDiffAddHighlight guibg=#404040 guifg=#859900&#xA;hi def NeogitDiffDeleteHighlight guibg=#404040 guifg=#dc322f&#xA;hi def NeogitDiffContextHighlight guibg=#333333 guifg=#b2b2b2&#xA;hi def NeogitHunkHeader guifg=#cccccc guibg=#404040&#xA;hi def NeogitHunkHeaderHighlight guifg=#cccccc guibg=#4d4d4d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override them to fit your colorscheme by creating a &lt;code&gt;syntax/NeogitStatus.vim&lt;/code&gt; in your vim configuration and adding your custom highlights there.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling Contextual Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;disable_context_highlighting = true&lt;/code&gt; in your call to &lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/#configuration&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; to disable context highlighting altogether.&lt;/p&gt; &#xA;&lt;h2&gt;Disabling Hint&lt;/h2&gt; &#xA;&lt;p&gt;Set &lt;code&gt;disable_hint = true&lt;/code&gt; in your call to &lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/#configuration&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; to hide hints on top of the panel.&lt;/p&gt; &#xA;&lt;h2&gt;Disabling Commit Confirmation&lt;/h2&gt; &#xA;&lt;p&gt;Set &lt;code&gt;disable_commit_confirmation = true&lt;/code&gt; in your call to &lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/#configuration&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; to disable the &#34;Are you sure you want to commit?&#34; prompt after saving the commit message buffer.&lt;/p&gt; &#xA;&lt;h2&gt;Disabling Insert On Commit&lt;/h2&gt; &#xA;&lt;p&gt;Set &lt;code&gt;disable_insert_on_commit = true&lt;/code&gt; in your call to &lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/#configuration&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; to disable automatically changing to insert mode when opening the commit message buffer. (Disabled is the default)&lt;/p&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;p&gt;Neogit emits the following events:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Event&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NeogitStatusRefreshed&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Status has been reloaded&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NeogitCommitComplete&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Commit has been created&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NeogitPushComplete&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Push has completed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can listen to the events using the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;autocmd User NeogitStatusRefreshed echom &#34;Hello World!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you prefer to configure autocommands via Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local group = vim.api.nvim_create_augroup(&#39;MyCustomNeogitEvents&#39;, { clear = true })&#xA;vim.api.nvim_create_autocmd(&#39;User&#39;, {&#xA;  pattern = &#39;NeogitPushComplete&#39;,&#xA;  group = group,&#xA;  callback = require(&#39;neogit&#39;).close,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Magit-style Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;Neogit uses &#39;p&#39; for pulling instead of &#39;F&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;use_magit_keybindings = true&lt;/code&gt; in your call to &lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/#configuration&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; to use magit-style keybindings.&lt;/p&gt; &#xA;&lt;h2&gt;Refreshing Neogit&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to refresh Neogit manually, you can use &lt;code&gt;neogit#refresh_manually&lt;/code&gt; in Vimscript or &lt;code&gt;require(&#39;neogit&#39;).refresh_manually&lt;/code&gt; in lua. They both require a single file parameter.&lt;/p&gt; &#xA;&lt;p&gt;This allows you to refresh Neogit on your own custom events&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;augroup DefaultRefreshEvents&#xA;  au!&#xA;  au BufWritePost,BufEnter,FocusGained,ShellCmdPost,VimResume * call &amp;lt;SID&amp;gt;neogit#refresh_manually(expand(&#39;&amp;lt;afile&amp;gt;&#39;))&#xA;augroup END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: This file is no longer being updated.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The todo file does not represent ALL of the missing features. This file just shows the features which I noticed were missing and I have to implement.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TimUntersberger/neogit/master/todo.md&#34;&gt;TODO&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Assure that you have &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt; installed as a plugin for your neovim instance. Afterwards, run &lt;code&gt;make test&lt;/code&gt; to run the unit test suite.&lt;/p&gt; &#xA;&lt;p&gt;Plenary uses it&#39;s own port of busted and a bundled luassert, so consult their code and the respective &lt;a href=&#34;http://olivinelabs.com/busted/&#34;&gt;busted&lt;/a&gt; and &lt;a href=&#34;http://olivinelabs.com/busted/#asserts&#34;&gt;luassert&lt;/a&gt; docs for what methods are available.&lt;/p&gt;</summary>
  </entry>
</feed>