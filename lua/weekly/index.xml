<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-09T01:56:54Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PathOfBuildingCommunity/PathOfBuilding</title>
    <updated>2023-04-09T01:56:54Z</updated>
    <id>tag:github.com,2023-04-09:/PathOfBuildingCommunity/PathOfBuilding</id>
    <link href="https://github.com/PathOfBuildingCommunity/PathOfBuilding" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Offline build planner for Path of Exile.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Path of Building Community Fork&lt;/h1&gt; &#xA;&lt;h2&gt;Formerly known as LocalIdentity Fork&lt;/h2&gt; &#xA;&lt;p&gt;This is a fork of Openarl&#39;s Path Of Building that includes many extra features not in the base version of PoB&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adds support for new and updated uniques from league 3.8 onwards&lt;/li&gt; &#xA; &lt;li&gt;Pantheon support&lt;/li&gt; &#xA; &lt;li&gt;Impale DPS support&lt;/li&gt; &#xA; &lt;li&gt;Enemy armour and physical damage reduction calculations&lt;/li&gt; &#xA; &lt;li&gt;Catalysts&lt;/li&gt; &#xA; &lt;li&gt;Dual influence crafting&lt;/li&gt; &#xA; &lt;li&gt;Search for all dropdown boxes&lt;/li&gt; &#xA; &lt;li&gt;Barrage Support skill gem&lt;/li&gt; &#xA; &lt;li&gt;Ensnaring Arrow support&lt;/li&gt; &#xA; &lt;li&gt;Thread of Hope support&lt;/li&gt; &#xA; &lt;li&gt;Crimson Dance support&lt;/li&gt; &#xA; &lt;li&gt;Void Shot support&lt;/li&gt; &#xA; &lt;li&gt;Delve helmet mod support&lt;/li&gt; &#xA; &lt;li&gt;Breakdown for aura and curse effect&lt;/li&gt; &#xA; &lt;li&gt;List of recently imported accounts to the Import/Export Build tab&lt;/li&gt; &#xA; &lt;li&gt;More tree highlighting options for node power&lt;/li&gt; &#xA; &lt;li&gt;Support for fossil mods in the crafting window. Including correct parsing for some mods that previously didn&#39;t work (e.g., 60% chance to deal 100% more poison/bleed damage)&lt;/li&gt; &#xA; &lt;li&gt;Add parsing for more nodes on the tree (i.e., Slayer, Champion, Berserker, Chieftain, Hierophant, Trickster, Assassin, Necromancer and Elementalist ascendancy nodes)&lt;/li&gt; &#xA; &lt;li&gt;Add oil combinations to notables on the passive tree&lt;/li&gt; &#xA; &lt;li&gt;Support for Elusive and Nightblade support gem&lt;/li&gt; &#xA; &lt;li&gt;Incremental shock values (not a locked 50%)&lt;/li&gt; &#xA; &lt;li&gt;Fixed Close Combat and Multistrike to have their correct damage values&lt;/li&gt; &#xA; &lt;li&gt;Logic for melee distance scaling attack multipliers (Close Combat and Slayer&#39;s Impact node)&lt;/li&gt; &#xA; &lt;li&gt;Withered now shows on the configuration screen&lt;/li&gt; &#xA; &lt;li&gt;Support for Ryslatha&#39;s Coil, Vaal Arc Lucky Buff, Perquil&#39;s Toe and more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Head over to the &lt;a href=&#34;https://github.com/PathOfBuildingCommunity/PathOfBuilding/releases&#34;&gt;Releases&lt;/a&gt; page to download the install wizard or portable zip.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;You can find instructions on how to contribute code and bug reports &lt;a href=&#34;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding/dev/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;You can find the full version history &lt;a href=&#34;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding/dev/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Welcome to Path of Building, an offline build planner for Path of Exile!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comprehensive offence + defence calculations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Calculate your skill DPS, damage over time, life/mana/ES totals and much more!&lt;/li&gt; &#xA;   &lt;li&gt;Can factor in auras, buffs, charges, curses, monster resistances and more, to estimate your effective DPS&lt;/li&gt; &#xA;   &lt;li&gt;Also calculates life/mana reservations&lt;/li&gt; &#xA;   &lt;li&gt;Shows a summary of character stats in the side bar, as well as a detailed calculations breakdown tab which can show you how the stats were derived&lt;/li&gt; &#xA;   &lt;li&gt;Supports all skills and support gems, and most passives and item modifiers &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Throughout the program, supported modifiers will show in blue and unsupported ones in red&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Full support for minions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Passive skill tree planner: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for jewels including most radius/conversion jewels&lt;/li&gt; &#xA;   &lt;li&gt;Features alternate path tracing (mouse over a sequence of nodes while holding shift, then click to allocate them all)&lt;/li&gt; &#xA;   &lt;li&gt;Fully integrated with the offence/defence calculations; see exactly how each node will affect your character!&lt;/li&gt; &#xA;   &lt;li&gt;Can import PathOfExile.com and PoEPlanner.com passive tree links; links shortened with PoEURL.com also work&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Skill planner: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add any number of main or supporting skills to your build&lt;/li&gt; &#xA;   &lt;li&gt;Supporting skills (auras, curses, buffs) can be toggled on and off&lt;/li&gt; &#xA;   &lt;li&gt;Automatically applies Socketed Gem modifiers from the item a skill is socketed into&lt;/li&gt; &#xA;   &lt;li&gt;Automatically applies support gems granted by items&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Item planner: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add items from in game by copying and pasting them straight into the program!&lt;/li&gt; &#xA;   &lt;li&gt;Automatically adds quality to non-corrupted items&lt;/li&gt; &#xA;   &lt;li&gt;Fully integrated with the offence/defence calculations; see exactly how much of an upgrade a given item is!&lt;/li&gt; &#xA;   &lt;li&gt;Contains a searchable database of all uniques that are currently in game (and some that aren&#39;t yet!) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;You can choose the modifier rolls when you add a unique to your build&lt;/li&gt; &#xA;     &lt;li&gt;Includes all league-specific items and legacy variants&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Features an item crafting system: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;You can select from any of the game&#39;s base item types&lt;/li&gt; &#xA;     &lt;li&gt;You can select prefix/suffix modifiers from lists&lt;/li&gt; &#xA;     &lt;li&gt;Custom modifiers can be added, with Master and Essence modifiers available&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Also contains a database of rare item templates: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Allows you to create rare items for your build to approximate the gear you will be using&lt;/li&gt; &#xA;     &lt;li&gt;Choose which modifiers appear on each item, and the rolls for each modifier, to suit your needs&lt;/li&gt; &#xA;     &lt;li&gt;Has templates that should cover the majority of builds (inb4 &#39;why is there no coral amulet?&#39;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other features: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can import passive tree, items, and skills from existing characters&lt;/li&gt; &#xA;   &lt;li&gt;Share builds with other users by generating a share code&lt;/li&gt; &#xA;   &lt;li&gt;Automatic updating; most updates will only take a couple of seconds to apply&lt;/li&gt; &#xA;   &lt;li&gt;Somewhat more open source than usual (look in &#34;%ProgramData%\Path of Building&#34; if you&#39;re interested)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/23911/153694681-cbc7b83a-970c-4020-b9e3-2a09f0808e38.png&#34; alt=&#34;ss1&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/23911/153694692-0309bab1-6776-43ac-bb5a-6cc40265c7c7.png&#34; alt=&#34;ss2&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/23911/153694693-2471e491-6ed9-47ae-abcc-a3bff81cdc7c.png&#34; alt=&#34;ss3&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For 3rd-party licences, see &lt;a href=&#34;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding/dev/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt;. The licencing information is considered to be part of the documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rebelot/heirline.nvim</title>
    <updated>2023-04-09T01:56:54Z</updated>
    <id>tag:github.com,2023-04-09:/rebelot/heirline.nvim</id>
    <link href="https://github.com/rebelot/heirline.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Heirline.nvim is a no-nonsense Neovim Statusline plugin designed around recursive inheritance to be exceptionally fast and versatile.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;heirline.nvim&lt;/h2&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rebelot/heirline.nvim/master/heirline.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;The ultimate Neovim Statusline for tinkerers&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Heirline.nvim is a no-nonsense Neovim plugin made for rendering statusline/winbar/tabline/statuscolumn format strings. It is designed around recursive inheritance to be exceptionally &lt;strong&gt;fast&lt;/strong&gt; and &lt;strong&gt;versatile&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Heirline &lt;strong&gt;does not&lt;/strong&gt; provide any defaults, in fact, heirline can be thought of as an API to generate Vim status format strings.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Why another statusline plugin?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Heirline picks up from other popular customizable statusline plugins like &lt;a href=&#34;https://github.com/NTBBloodbath/galaxyline.nvim&#34;&gt;galaxyline&lt;/a&gt; and &lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;feline&lt;/a&gt; but removes all the hard-coded guides and offers you thousands times more freedom. But freedom has a price: responsibility. I don&#39;t get to tell you what your statusline should do. You&#39;re in charge! With Heirline, you have a framework to easily implement whatever you can imagine, from simple to complex rules!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;1578&#34; alt=&#34;heirline_prev&#34; src=&#34;https://user-images.githubusercontent.com/36300441/187208978-3054fea6-0e3a-432c-a1fc-b4a29da36a7c.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conditionals&lt;/strong&gt;: Build custom active/inactive and buftype/filetype/bufname statuslines or single components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highlight propagation&lt;/strong&gt;: Seamlessly surround components within separators and/or set the (dynamic) coloring of a bunch of components at once.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Statusline components can be reutilized/rearranged and will behave according to their position in the genealogical tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Update triggers&lt;/strong&gt;: Re-evaluate components only when some condition is met or specific autocommand events are fired.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clickable&lt;/strong&gt;: Write pure lua callbacks to be executed when clicking a component.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic resizing&lt;/strong&gt;: Specify how components should resize depending on available space.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full control&lt;/strong&gt;: You have hooks to fully control the statusline evaluation cycle.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Heirline is &lt;em&gt;not&lt;/em&gt; for everyone, heirline is for people who like tailoring their own tools (and also like lua):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No&lt;/strong&gt; default statusline is provided&lt;/li&gt; &#xA; &lt;li&gt;You &lt;strong&gt;must&lt;/strong&gt; write your own statusline&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But don&#39;t you worry! Along with the inheritance comes &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/heirline.nvim/master/cookbook.md&#34;&gt;THE FEATUREFUL COOKBOOK&lt;/a&gt; 📖 of a distant relative. Your dream 🪄 statusline is a copypaste away!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use your favorite plugin manager&lt;/p&gt; &#xA;&lt;h3&gt;Packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;    &#34;rebelot/heirline.nvim&#34;,&#xA;    -- You can optionally lazy-load heirline on UiEnter&#xA;    -- to make sure all required plugins and colorschemes are loaded before setup&#xA;    -- event = &#34;UiEnter&#34;,&#xA;    config = function()&#xA;        require(&#34;heirline&#34;).setup({...})&#xA;    end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;heirline&#34;).setup({&#xA;    statusline = {...},&#xA;    winbar = {...},&#xA;    tabline = {...},&#xA;    statuscolumn = {...},&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;setup&lt;/code&gt; will load your statusline(s). To learn how to write a StatusLine, see the &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/heirline.nvim/master/cookbook.md&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Donate&lt;/h3&gt; &#xA;&lt;p&gt;Buy me coffee and support my work ;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate/?business=VNQPHGW4JEM3S&amp;amp;no_recurring=0&amp;amp;item_name=Buy+me+coffee+and+support+my+work+%3B%29&amp;amp;currency_code=EUR&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>romgrk/barbar.nvim</title>
    <updated>2023-04-09T01:56:54Z</updated>
    <id>tag:github.com,2023-04-09:/romgrk/barbar.nvim</id>
    <link href="https://github.com/romgrk/barbar.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The neovim tabline plugin.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; barbar.nvim &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Tabs, as understood by any other editor.&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;barbar.nvim&lt;/code&gt; is a tabline plugin with re-orderable, auto-sizing, clickable tabs, icons, nice highlighting, sort-by commands and a magic jump-to-buffer mode. Plus the tab names are made unique when two filenames match.&lt;/p&gt; &#xA;&lt;p&gt;In jump-to-buffer mode, tabs display a target letter instead of their icon. Jump to any buffer by simply typing their target letter. Even better, the target letter stays constant for the lifetime of the buffer, so if you&#39;re working with a set of files you can even type the letter ahead from memory.&lt;/p&gt; &#xA;&lt;h5&gt;Table of content&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#highlighting&#34;&gt;Highlighting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#known-issues&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#about&#34;&gt;About Barbar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lazy&#39;).setup {&#xA;  {&#39;romgrk/barbar.nvim&#39;,&#xA;    dependencies = &#39;nvim-tree/nvim-web-devicons&#39;,&#xA;    init = function() vim.g.barbar_auto_setup = false end,&#xA;    opts = {&#xA;      -- lazy.nvim will automatically call setup for you. put your options here, anything missing will use the default:&#xA;      -- animation = true,&#xA;      -- insert_at_start = true,&#xA;      -- …etc.&#xA;    },&#xA;    version = &#39;^1.0.0&#39;, -- optional: only update when a new 1.x version is released&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;nvim-tree/nvim-web-devicons&#39;&#xA;use {&#39;romgrk/barbar.nvim&#39;, requires = &#39;nvim-web-devicons&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-tree/nvim-web-devicons&#39;&#xA;Plug &#39;romgrk/barbar.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can skip the dependency on &lt;code&gt;&#39;nvim-tree/nvim-web-devicons&#39;&lt;/code&gt; if you &lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#options&#34;&gt;disable icons&lt;/a&gt;. If you want the icons, don&#39;t forget to install &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;nerd fonts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Requirements&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &lt;code&gt;0.7&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h5&gt;Re-order tabs&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/reorder.gif&#34; alt=&#34;reorder&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Auto-sizing tabs, fill the space when available&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/resize.gif&#34; alt=&#34;resize&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Jump-to-buffer mode&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/jump.gif&#34; alt=&#34;jump&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Type a letter to jump to a buffer. Letters stay constant for the lifetime of the buffer. By default, letters are assigned based on buffer name, eg &lt;code&gt;README.md&lt;/code&gt; will get letter &lt;code&gt;r&lt;/code&gt;. You can change this so that letters are assigned based on usability: home row (&lt;code&gt;asdfjkl;gh&lt;/code&gt;) first, then other rows.&lt;/p&gt; &#xA;&lt;h5&gt;Sort tabs automatically&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/sort.gif&#34; alt=&#34;jump&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:BufferOrderByDirectory&lt;/code&gt;, &lt;code&gt;:BufferOrderByLanguage&lt;/code&gt;, &lt;code&gt;:BufferOrderByWindowNumber&lt;/code&gt;, &lt;code&gt;:BufferOrderByBufferNumber&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Clickable &amp;amp; closable tabs&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/click.gif&#34; alt=&#34;click&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Left-click to go, middle-click or close button to close. Don&#39;t forget to &lt;code&gt;set mouse+=a&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Unique names when filenames match&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/unique-name.png&#34; alt=&#34;unique-name&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Pinned buffers&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/pinned.png&#34; alt=&#34;pinned&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;bbye.vim for closing buffers&lt;/h5&gt; &#xA;&lt;p&gt;A modified version of &lt;a href=&#34;https://github.com/moll/vim-bbye&#34;&gt;bbye.vim&lt;/a&gt; is included in this plugin to close buffers without messing with your window layout and more. Available as &lt;code&gt;BufferClose&lt;/code&gt; and &lt;code&gt;bufferline#bbye#delete(buf)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Scrollable tabs, to always show the current buffer&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/scroll.gif&#34; alt=&#34;scroll&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Offset bufferline when showing sidebars&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/filetree-with-offset.png&#34; alt=&#34;filetree-with-offset&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Mappings &amp;amp; commands&lt;/h3&gt; &#xA;&lt;h4&gt;Vim script&lt;/h4&gt; &#xA;&lt;p&gt;No default mappings are provided, here is an example. It is recommended to use the &lt;code&gt;BufferClose&lt;/code&gt; command to close buffers instead of &lt;code&gt;bdelete&lt;/code&gt; because it will not mess your window layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Move to previous/next&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-,&amp;gt; &amp;lt;Cmd&amp;gt;BufferPrevious&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-.&amp;gt; &amp;lt;Cmd&amp;gt;BufferNext&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; Re-order to previous/next&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-&amp;lt;&amp;gt; &amp;lt;Cmd&amp;gt;BufferMovePrevious&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-&amp;gt;&amp;gt; &amp;lt;Cmd&amp;gt;BufferMoveNext&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; Goto buffer in position...&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-1&amp;gt; &amp;lt;Cmd&amp;gt;BufferGoto 1&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-2&amp;gt; &amp;lt;Cmd&amp;gt;BufferGoto 2&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-3&amp;gt; &amp;lt;Cmd&amp;gt;BufferGoto 3&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-4&amp;gt; &amp;lt;Cmd&amp;gt;BufferGoto 4&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-5&amp;gt; &amp;lt;Cmd&amp;gt;BufferGoto 5&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-6&amp;gt; &amp;lt;Cmd&amp;gt;BufferGoto 6&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-7&amp;gt; &amp;lt;Cmd&amp;gt;BufferGoto 7&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-8&amp;gt; &amp;lt;Cmd&amp;gt;BufferGoto 8&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-9&amp;gt; &amp;lt;Cmd&amp;gt;BufferGoto 9&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-0&amp;gt; &amp;lt;Cmd&amp;gt;BufferLast&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; Pin/unpin buffer&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-p&amp;gt; &amp;lt;Cmd&amp;gt;BufferPin&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; Close buffer&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-c&amp;gt; &amp;lt;Cmd&amp;gt;BufferClose&amp;lt;CR&amp;gt;&#xA;&#34; Restore buffer&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-s-c&amp;gt; &amp;lt;Cmd&amp;gt;BufferRestore&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; Wipeout buffer&#xA;&#34;                          :BufferWipeout&#xA;&#34; Close commands&#xA;&#34;                          :BufferCloseAllButCurrent&#xA;&#34;                          :BufferCloseAllButVisible&#xA;&#34;                          :BufferCloseAllButPinned&#xA;&#34;                          :BufferCloseAllButCurrentOrPinned&#xA;&#34;                          :BufferCloseBuffersLeft&#xA;&#34;                          :BufferCloseBuffersRight&#xA;&#xA;&#34; Magic buffer-picking mode&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-p&amp;gt;    &amp;lt;Cmd&amp;gt;BufferPick&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-p&amp;gt;    &amp;lt;Cmd&amp;gt;BufferPickDelete&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; Sort automatically by...&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;bb &amp;lt;Cmd&amp;gt;BufferOrderByBufferNumber&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;bd &amp;lt;Cmd&amp;gt;BufferOrderByDirectory&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;bl &amp;lt;Cmd&amp;gt;BufferOrderByLanguage&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;bw &amp;lt;Cmd&amp;gt;BufferOrderByWindowNumber&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; Other:&#xA;&#34; :BarbarEnable - enables barbar (enabled by default)&#xA;&#34; :BarbarDisable - very bad command, should never be used&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Lua&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local map = vim.api.nvim_set_keymap&#xA;local opts = { noremap = true, silent = true }&#xA;&#xA;-- Move to previous/next&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-,&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferPrevious&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-.&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferNext&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Re-order to previous/next&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-&amp;lt;&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferMovePrevious&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-&amp;gt;&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferMoveNext&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Goto buffer in position...&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-1&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferGoto 1&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-2&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferGoto 2&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-3&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferGoto 3&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-4&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferGoto 4&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-5&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferGoto 5&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-6&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferGoto 6&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-7&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferGoto 7&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-8&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferGoto 8&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-9&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferGoto 9&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-0&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferLast&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Pin/unpin buffer&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-p&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferPin&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Close buffer&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-c&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferClose&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Wipeout buffer&#xA;--                 :BufferWipeout&#xA;-- Close commands&#xA;--                 :BufferCloseAllButCurrent&#xA;--                 :BufferCloseAllButPinned&#xA;--                 :BufferCloseAllButCurrentOrPinned&#xA;--                 :BufferCloseBuffersLeft&#xA;--                 :BufferCloseBuffersRight&#xA;-- Magic buffer-picking mode&#xA;map(&#39;n&#39;, &#39;&amp;lt;C-p&amp;gt;&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferPick&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Sort automatically by...&#xA;map(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;bb&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferOrderByBufferNumber&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;bd&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferOrderByDirectory&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;bl&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferOrderByLanguage&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;bw&#39;, &#39;&amp;lt;Cmd&amp;gt;BufferOrderByWindowNumber&amp;lt;CR&amp;gt;&#39;, opts)&#xA;&#xA;-- Other:&#xA;-- :BarbarEnable - enables barbar (enabled by default)&#xA;-- :BarbarDisable - very bad command, should never be used&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you&#39;re using Vim Script, just wrap &lt;code&gt;setup&lt;/code&gt; like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:barbar_auto_setup = v:false &#34; disable auto-setup&#xA;lua &amp;lt;&amp;lt; EOF&#xA;  require&#39;barbar&#39;.setup {…}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.barbar_auto_setup = false -- disable auto-setup&#xA;require&#39;barbar&#39;.setup {&#xA;  -- WARN: do not copy everything below into your config!&#xA;  --       It is just an example of what configuration options there are.&#xA;  --       The defaults are suitable for most people.&#xA;&#xA;  -- Enable/disable animations&#xA;  animation = true,&#xA;&#xA;  -- Enable/disable auto-hiding the tab bar when there is a single buffer&#xA;  auto_hide = false,&#xA;&#xA;  -- Enable/disable current/total tabpages indicator (top right corner)&#xA;  tabpages = true,&#xA;&#xA;  -- Enables/disable clickable tabs&#xA;  --  - left-click: go to buffer&#xA;  --  - middle-click: delete buffer&#xA;  clickable = true,&#xA;&#xA;  -- Excludes buffers from the tabline&#xA;  exclude_ft = {&#39;javascript&#39;},&#xA;  exclude_name = {&#39;package.json&#39;},&#xA;&#xA;  -- A buffer to this direction will be focused (if it exists) when closing the current buffer.&#xA;  -- Valid options are &#39;left&#39; (the default) and &#39;right&#39;&#xA;  focus_on_close = &#39;left&#39;,&#xA;&#xA;  -- Hide inactive buffers and file extensions. Other options are `alternate`, `current`, and `visible`.&#xA;  hide = {extensions = true, inactive = true},&#xA;&#xA;  -- Disable highlighting alternate buffers&#xA;  highlight_alternate = false,&#xA;&#xA;  -- Disable highlighting file icons in inactive buffers&#xA;  highlight_inactive_file_icons = false,&#xA;&#xA;  -- Enable highlighting visible buffers&#xA;  highlight_visible = true,&#xA;&#xA;  icons = {&#xA;    -- Configure the base icons on the bufferline.&#xA;    buffer_index = false,&#xA;    buffer_number = false,&#xA;    button = &#39;&#39;,&#xA;    -- Enables / disables diagnostic symbols&#xA;    diagnostics = {&#xA;      [vim.diagnostic.severity.ERROR] = {enabled = true, icon = &#39;ﬀ&#39;},&#xA;      [vim.diagnostic.severity.WARN] = {enabled = false},&#xA;      [vim.diagnostic.severity.INFO] = {enabled = false},&#xA;      [vim.diagnostic.severity.HINT] = {enabled = true},&#xA;    },&#xA;    filetype = {&#xA;      -- Sets the icon&#39;s highlight group.&#xA;      -- If false, will use nvim-web-devicons colors&#xA;      custom_colors = false,&#xA;&#xA;      -- Requires `nvim-web-devicons` if `true`&#xA;      enabled = true,&#xA;    },&#xA;    separator = {left = &#39;▎&#39;, right = &#39;&#39;},&#xA;&#xA;    -- Configure the icons on the bufferline when modified or pinned.&#xA;    -- Supports all the base icon options.&#xA;    modified = {button = &#39;●&#39;},&#xA;    pinned = {button = &#39;車&#39;, filename = true, separator = {right = &#39;&#39;}},&#xA;&#xA;    -- Configure the icons on the bufferline based on the visibility of a buffer.&#xA;    -- Supports all the base icon options, plus `modified` and `pinned`.&#xA;    alternate = {filetype = {enabled = false}},&#xA;    current = {buffer_index = true},&#xA;    inactive = {button = &#39;×&#39;},&#xA;    visible = {modified = {buffer_number = false}},&#xA;  },&#xA;&#xA;  -- If true, new buffers will be inserted at the start/end of the list.&#xA;  -- Default is to insert after current buffer.&#xA;  insert_at_end = false,&#xA;  insert_at_start = false,&#xA;&#xA;  -- Sets the maximum padding width with which to surround each tab&#xA;  maximum_padding = 1,&#xA;&#xA;  -- Sets the minimum padding width with which to surround each tab&#xA;  minimum_padding = 1,&#xA;&#xA;  -- Sets the maximum buffer name length.&#xA;  maximum_length = 30,&#xA;&#xA;  -- If set, the letters for each buffer in buffer-pick mode will be&#xA;  -- assigned based on their name. Otherwise or in case all letters are&#xA;  -- already assigned, the behavior is to assign letters in order of&#xA;  -- usability (see order below)&#xA;  semantic_letters = true,&#xA;&#xA;  -- Set the filetypes which barbar will offset itself for&#xA;  sidebar_filetypes = {&#xA;    -- Use the default values: {event = &#39;BufWinLeave&#39;, text = nil}&#xA;    NvimTree = true,&#xA;    -- Or, specify the text used for the offset:&#xA;    undotree = {text = &#39;undotree&#39;},&#xA;    -- Or, specify the event which the sidebar executes when leaving:&#xA;    [&#39;neo-tree&#39;] = {event = &#39;BufWipeout&#39;},&#xA;    -- Or, specify both&#xA;    Outline = {event = &#39;BufWinLeave&#39;, text = &#39;symbols-outline&#39;},&#xA;  },&#xA;&#xA;  -- New buffer letters are assigned in this order. This order is&#xA;  -- optimal for the qwerty keyboard layout but might need adjustment&#xA;  -- for other layouts.&#xA;  letters = &#39;asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERUTYQP&#39;,&#xA;&#xA;  -- Sets the name of unnamed buffers. By default format is &#34;[Buffer X]&#34;&#xA;  -- where X is the buffer number. But only a static string is accepted here.&#xA;  no_name_title = nil,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;Highlight groups are created in this way: &lt;code&gt;Buffer&amp;lt;STATUS&amp;gt;&amp;lt;PART&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;STATUS&amp;gt;&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Alternate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The &lt;code&gt;:h alternate-file&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Current&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The current buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Inactive&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;:h hidden-buffer&lt;/code&gt;s and &lt;code&gt;:h inactive-buffer&lt;/code&gt;s.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Visible&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;:h active-buffer&lt;/code&gt;s which are not alternate or current.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;PART&amp;gt;&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Diagnostic errors.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HINT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Diagnostic hints.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Icon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The filetype icon (when &lt;code&gt;icons.filetype == {custom_colors = true, enabled = true}&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Index&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The buffer&#39;s position in the tabline.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The &lt;code&gt;:h bufnr()&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;INFO&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Diagnostic info.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Mod&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When the buffer is modified.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Sign&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The separator between buffers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Target&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The letter in buffer-pick mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;WARN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Diagnostic warnings.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;e.g. the current buffer&#39;s highlight when modified is &lt;code&gt;BufferCurrentMod&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use the &lt;a href=&#34;https://github.com/romgrk/doom-one.vim&#34;&gt;doom-one.vim&lt;/a&gt; colorscheme that defines those groups and is also very pleasant as you could see in the demos above.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h4&gt;Lightline&lt;/h4&gt; &#xA;&lt;p&gt;Barbar doesn&#39;t show up because lightline changes the tabline setting. Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:lightline={ &#39;enable&#39;: {&#39;statusline&#39;: 1, &#39;tabline&#39;: 0} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Netrw&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;netrw&lt;/code&gt; has a lot of bugs which make it hard to support. It may work partially, but we will not make changes to barbar.nvim to work-around &lt;code&gt;netrw&lt;/code&gt;-specific bugs (e.g. #82).&lt;/p&gt; &#xA;&lt;p&gt;You can use any other &lt;a href=&#34;https://github.com/rockerBOO/awesome-neovim#file-explorer&#34;&gt;file explorer&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Barbar is called barbar because it&#39;s a bar, but it&#39;s also more than a bar: a &#34;barbar&#34;.&lt;/p&gt; &#xA;&lt;p&gt;It is pronounced like &#34;Jar Jar&#34; in &#34;Jar Jar Binks&#34;, but with Bs.&lt;/p&gt; &#xA;&lt;p&gt;No, barbar has nothing to do with barbarians.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;barbar.nvim: Distributed under the terms of the JSON license.&amp;nbsp;&amp;nbsp; bbye.vim: Distributed under the terms of the GNU Affero license.&lt;/p&gt;</summary>
  </entry>
</feed>