<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-13T01:47:50Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nshen/learn-neovim-lua</title>
    <updated>2022-11-13T01:47:50Z</updated>
    <id>tag:github.com,2022-11-13:/nshen/learn-neovim-lua</id>
    <link href="https://github.com/nshen/learn-neovim-lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim 配置实战：从 0 到 1 打造自己的 IDE&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;📜 Neovim 配置实战：从 0 到 1 打造自己的 IDE&lt;/h2&gt; &#xA;&lt;p&gt;《学习 Neovim 全 lua 配置》已经在稀土掘金专业编辑的指点下完全重写。&lt;/p&gt; &#xA;&lt;p&gt;新名字是：&lt;a href=&#34;https://juejin.cn/book/7051157342770954277&#34;&gt;《Neovim 配置实战：从 0 到 1 打造自己的 IDE》&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;好消息是新版本由掘金专业把关，目录经过了优化，解释也更加详细，所有动图都重新截取了。&lt;/p&gt; &#xA;&lt;p&gt;内容翻新的同时代码也进行了比较大幅的改动，文章质量肯定更高了。&lt;/p&gt; &#xA;&lt;p&gt;坏消息是变成了收费小册了，但价格不高，现在预售中，前 7 天是限时最低折扣可直接无脑付款，后来的朋友可以找我索取最低 7 折的折扣码。&lt;/p&gt; &#xA;&lt;p&gt;第一次写收费小册，希望大家能够少喝一杯咖啡，十几块钱支持一下。&lt;/p&gt; &#xA;&lt;p&gt;但如果你跟我一样手头很紧的话也仍然可以查看 &lt;a href=&#34;https://github.com/nshen/learn-neovim-lua/tree/bak&#34;&gt;旧版备份&lt;/a&gt;，但旧版不会再更新了。&lt;/p&gt; &#xA;&lt;h2&gt;新版购买链接&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://juejin.cn/book/7051157342770954277&#34;&gt;Neovim 配置实战：从 0 到 1 打造自己的 IDE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;下边是掘金小册介绍：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/181506/158575190-4cc79ee3-1485-45d6-a82c-6449242cbfc7.jpg&#34; alt=&#34;0a0f17793e35487d939955ce1ddc1ba5_tplv-k3u1fbpfcp-watermark&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;由于近来 VSCode 越来越臃肿，已经逐渐脱离了其高性能、轻量级的定位。而随着 Neovim 0.5+ 版本的发布，内置 LSP 的支持，让 Lua&amp;nbsp; 成了编辑器的一等语言，使得古老的 VIM 编辑器变得更加现代化了。&lt;/p&gt; &#xA;&lt;p&gt;加上这些年 Windows 系统的快速发展 ，WSL2 、Windows Terminal 的推出，Windows 命令行也有了 UTF8、GPU 加速文本渲染引擎的支持，使我们有能力，也有理由转到更加轻便高效、面向未来的 Neovim 编辑器上做程序开发，提升开发效率。&lt;/p&gt; &#xA;&lt;p&gt;如果你在 Google 上搜索 &#34;Years of Vim&#34; ，会看到很多高手都已经用 VIM 编辑器 10 年以上了，他们都会一直维护一个属于自己独一无二的配置，彼此各不相同，通过不断地调教，使之越来越适合自己，达到了“人剑合一”的境界。&lt;/p&gt; &#xA;&lt;p&gt;学会调教 &amp;nbsp;Neovim&amp;nbsp; 在程序开发生涯中是非常有意义的一件事，&lt;strong&gt;让编辑器适配你的习惯，而不是无限地追赶编辑器的更新，也是成为“10 倍速程序员”必经之路。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;这里展示一下学完本小册后，大致的配置效果：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/181506/158575466-2d3be027-a4a3-482f-b884-02b20f66fba3.gif&#34; alt=&#34;features2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;从 VSCode 转移到 Neovim 时 ，我也看了很多文档，参考了很多配置资料，尝试了很多插件，走了很多弯路，最终我对 Neovim 的配置已经完全可以满足我对代码编辑器的需求了。我把配置方法写成小册，通过对这个小册的学习，你也可以把 Neovim&amp;nbsp; 配置成你希望的样子，也许跟我的完全不同。&lt;/p&gt; &#xA;&lt;p&gt;小册分为 &lt;strong&gt;基建篇&lt;/strong&gt; 和 &lt;strong&gt;代码篇&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;在 &lt;strong&gt;基建篇&lt;/strong&gt; 中，我们会先从安装 Neovim 开始，介绍配置文件位置，以及我们应该如何组织配置文件、快捷键如何设置、插件如何安装和管理。然后通过逐个介绍目前流行的插件安装方式和使用方法来补全文本编辑器所需的所有功能。&lt;/p&gt; &#xA;&lt;p&gt;基建篇完成后，你将会得到一个现代化的文本编辑器。&lt;/p&gt; &#xA;&lt;p&gt;在 &lt;strong&gt;代码篇&lt;/strong&gt; 中，我们会补全程序开发相关的功能，包括如何实现代码高亮、什么是内置 LSP、如何配置内置 LSP、代码如何补全 代码格式化、UI 可否美化等。之后还会专门针对前端开发和 rust 开发所必备的插件配置介绍，一步一步帮助你将手中的 Neovim 装配成 VSCode 般的开发环境。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0540cdcdd8314d198eb79cead70442c7~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;xmind.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;你会学到什么？&lt;/h2&gt; &#xA;&lt;p&gt;本小册包含大量&lt;strong&gt;动图演示&lt;/strong&gt;，章节相对独立，参照配置每完成一章，即可立刻看到反馈效果。总的来说，你将收获：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基于最新版本的 Neovim ，从零开始基于 Lua 搭建现代化 Neovim 开发环境。&lt;/li&gt; &#xA; &lt;li&gt;了解 Neovim 的配置原理与思路，以及完整的配套源码。&lt;/li&gt; &#xA; &lt;li&gt;最重要的是你会得到属于你的专属 Neovim 版本。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/645c93365927495aa51f7951b5437d8c~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;0-2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;适宜人群&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;适合有一点 VIM 基础的使用者（至少知道怎么编辑文件和退出 VIM 😁）。&lt;/li&gt; &#xA; &lt;li&gt;有程序开发基础，有可以访问 Github 的网络环境，想要提升开发效率与开发体验的程序开发人员。&lt;/li&gt; &#xA; &lt;li&gt;想要系统学习 Neovim 配置，却被网上零散过时的 VIM 配置教程困扰的同学们。&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sumneko/lua-language-server</title>
    <updated>2022-11-13T01:47:50Z</updated>
    <id>tag:github.com,2022-11-13:/sumneko/lua-language-server</id>
    <link href="https://github.com/sumneko/lua-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A language server that offers Lua language support - programmed in Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lua-language-server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/sumneko/lua-language-server/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sumneko.lua&#34;&gt;&lt;img src=&#34;https://vsmarketplacebadge.apphb.com/version-short/sumneko.lua.svg?sanitize=true&#34; alt=&#34;version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://vsmarketplacebadge.apphb.com/installs-short/sumneko.lua.svg?sanitize=true&#34; alt=&#34;installs&#34;&gt; &lt;img src=&#34;https://vsmarketplacebadge.apphb.com/downloads-short/sumneko.lua.svg?sanitize=true&#34; alt=&#34;downloads&#34;&gt; &lt;a href=&#34;https://github.com/sumneko/lua-language-server/issues&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;https://isitmaintained.com/badge/resolution/sumneko/lua-language-server.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Lua development just got a whole lot better&lt;/strong&gt;&lt;/em&gt; 🧠&lt;/p&gt; &#xA;&lt;p&gt;The Lua language server provides various language features for Lua to make development easier and faster. With around half a million installs on Visual Studio Code, it is the most popular extension for Lua language support.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📄 Over 20 supported &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Annotations&#34;&gt;annotations&lt;/a&gt; for documenting your code&lt;/li&gt; &#xA; &lt;li&gt;↪ Go to definition&lt;/li&gt; &#xA; &lt;li&gt;🦺 Dynamic &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Type-Checking&#34;&gt;type checking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔍 Find references&lt;/li&gt; &#xA; &lt;li&gt;⚠️ &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Diagnostics&#34;&gt;Diagnostics/Warnings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🕵️ &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Syntax-Errors&#34;&gt;Syntax checking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📝 Element renaming&lt;/li&gt; &#xA; &lt;li&gt;🗨️ Hover to view details on variables, functions, and more&lt;/li&gt; &#xA; &lt;li&gt;🖊️ Autocompletion&lt;/li&gt; &#xA; &lt;li&gt;📚 Support for &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Libraries&#34;&gt;libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💅 &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Formatter&#34;&gt;Code formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💬 &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Formatter&#34;&gt;Spell checking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🛠️ Custom &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Plugins&#34;&gt;plugins&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;The language server can easily be installed for use in VS Code, but it can also be used by other clients using the command line.&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sumneko.lua&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Install%20For-VS%20Code-blue?style=for-the-badge&amp;amp;logo=visualstudiocode&#34; alt=&#34;Install in VS Code&#34; title=&#34;Install in VS Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The language server and Visual Studio Code client can be installed from &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sumneko.lua&#34;&gt;the VS Code Marketplace&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/sumneko/vscode-lua/raw/master/images//Install%20In%20VSCode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Getting-Started#command-line&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Install%20For-Command%20Line-blue?style=for-the-badge&amp;amp;logo=windowsterminal&#34; alt=&#34;Install for command line&#34; title=&#34;Install for command line&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Getting-Started#command-line&#34;&gt;wiki for a guide&lt;/a&gt; to install the language server for use on the command line. This allows the language server to be used for NeoVim and other clients that follow the language server protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Lua Versions&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Supported&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Lua 5.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/61925890/183228083-d3aa4eca-30c7-4b9f-aaab-26ce3d8a14fb.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Lua 5.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/61925890/183228083-d3aa4eca-30c7-4b9f-aaab-26ce3d8a14fb.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Lua 5.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/61925890/183228083-d3aa4eca-30c7-4b9f-aaab-26ce3d8a14fb.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Lua 5.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/61925890/183228083-d3aa4eca-30c7-4b9f-aaab-26ce3d8a14fb.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;LuaJIT&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/61925890/183228083-d3aa4eca-30c7-4b9f-aaab-26ce3d8a14fb.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server/raw/master/changelog.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server/issues&#34;&gt;Report an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server/issues&#34;&gt;Suggest a feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server/discussions&#34;&gt;Discuss&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you find any mistakes, please &lt;a href=&#34;https://github.com/sumneko/lua-language-server/issues&#34;&gt;report it&lt;/a&gt; or open a &lt;a href=&#34;https://github.com/sumneko/lua-language-server/pulls&#34;&gt;pull request&lt;/a&gt; if you have a fix of your own ❤️&lt;/p&gt; &#xA; &lt;p&gt;如果你发现了任何错误，请&lt;a href=&#34;https://github.com/sumneko/lua-language-server/issues&#34;&gt;告诉我&lt;/a&gt;或使用&lt;a href=&#34;https://github.com/sumneko/lua-language-server/pulls&#34;&gt;Pull Requests&lt;/a&gt;来直接修复。❤️&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Available Languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;en-us&lt;/code&gt; 🇺🇸&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zh-cn&lt;/code&gt; 🇨🇳&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zh-tw&lt;/code&gt; 🇹🇼&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pt-br&lt;/code&gt; 🇧🇷&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ Note: All translations are provided and collaborated on by the community. If you find an inappropriate or harmful translation, &lt;a href=&#34;https://github.com/sumneko/lua-language-server/issues&#34;&gt;please report it immediately&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Are you able to &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Translations&#34;&gt;provide a translation&lt;/a&gt;? It would be greatly appreciated!&lt;/p&gt; &#xA;&lt;p&gt;Thank you to &lt;a href=&#34;https://github.com/sumneko/lua-language-server/commits/master/locale&#34;&gt;all contributors of translations&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Configuration of the server can be done in a number of ways, which are explained more in-depth in the &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Configuration-File&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/settings#_settings-editor&#34;&gt;settings editor&lt;/a&gt; or edit the &lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/settings#_settingsjson&#34;&gt;raw JSON file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Configuration-File&#34;&gt;configuration file wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Privacy&lt;/h2&gt; &#xA;&lt;p&gt;This language server has &lt;strong&gt;opt-in&lt;/strong&gt; telemetry that collects usage data and sends it to the development team to help improve the extension. Read our &lt;a href=&#34;https://github.com/sumneko/lua-language-server/wiki/Home#privacy&#34;&gt;privacy policy&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=sumneko/lua-language-server&#34; alt=&#34;GitHub Contributors Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;Software that the language server (or the development of it) uses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/actboy168/bee.lua&#34;&gt;bee.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/actboy168/luamake&#34;&gt;luamake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sqmedeiros/lpeglabel&#34;&gt;LPegLabel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sumneko/LuaParser&#34;&gt;LuaParser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NickeManarin/ScreenToGif&#34;&gt;ScreenToGif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-languageserver-node&#34;&gt;vscode-languageclient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/textmate/lua.tmbundle&#34;&gt;lua.tmbundle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emmylua.github.io&#34;&gt;EmmyLua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sumneko/lua-glob&#34;&gt;lua-glob&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sumneko/utility&#34;&gt;utility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/actboy168/vscode-lua-doc&#34;&gt;vscode-lua-doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/actboy168/json.lua&#34;&gt;json.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CppCXY/EmmyLuaCodeStyle&#34;&gt;EmmyLuaCodeStyle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kikito/inspect.lua&#34;&gt;inspect.lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>simrat39/rust-tools.nvim</title>
    <updated>2022-11-13T01:47:50Z</updated>
    <id>tag:github.com,2022-11-13:/simrat39/rust-tools.nvim</id>
    <link href="https://github.com/simrat39/rust-tools.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for better development in rust using neovim&#39;s builtin lsp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rust-tools.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A plugin to improve your rust experience in neovim.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/rust-tools.nvim/wiki&#34;&gt;Wiki&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/rust-tools.nvim/wiki/Debugging&#34;&gt;CodeLLDB Debugging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/rust-tools.nvim/wiki/Standalone-File-Support&#34;&gt;Standalone File&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simrat39/rust-tools.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simrat39/rust-tools.nvim/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simrat39/rust-tools.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;neovim 0.7&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-lspconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-analyzer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dot&lt;/code&gt; from &lt;code&gt;graphviz&lt;/code&gt; (only for crate graph)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;using &lt;code&gt;packer.nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;neovim/nvim-lspconfig&#39;&#xA;use &#39;simrat39/rust-tools.nvim&#39;&#xA;&#xA;-- Debugging&#xA;use &#39;nvim-lua/plenary.nvim&#39;&#xA;use &#39;mfussenegger/nvim-dap&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;Look at the configuration information below to get started.&lt;/b&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;This plugin automatically sets up nvim-lspconfig for rust_analyzer for you, so don&#39;t do that manually, as it causes conflicts.&lt;/p&gt; &#xA;&lt;p&gt;Put this in your init.lua or any lua file that is sourced.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;For most people, the defaults are fine, but for advanced configuration, see &lt;a href=&#34;https://raw.githubusercontent.com/simrat39/rust-tools.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local rt = require(&#34;rust-tools&#34;)&#xA;&#xA;rt.setup({&#xA;  server = {&#xA;    on_attach = function(_, bufnr)&#xA;      -- Hover actions&#xA;      vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;C-space&amp;gt;&#34;, rt.hover_actions.hover_actions, { buffer = bufnr })&#xA;      -- Code action groups&#xA;      vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;Leader&amp;gt;a&#34;, rt.code_action_group.code_action_group, { buffer = bufnr })&#xA;    end,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Debugging&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/rust-tools-debug.gif&#34; alt=&#34;debugging&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Inlay Hints&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/inlay_hints.png&#34; alt=&#34;inlay hints&#34;&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Commands:&#xA;-- RustEnableInlayHints&#xA;-- RustDisableInlayHints&#xA;-- RustSetInlayHints&#xA;-- RustUnsetInlayHints&#xA;&#xA;-- Set inlay hints for the current buffer&#xA;require(&#39;rust-tools&#39;).inlay_hints.set()&#xA;-- Unset inlay hints for the current buffer&#xA;require(&#39;rust-tools&#39;).inlay_hints.unset()&#xA;&#xA;-- Enable inlay hints auto update and set them for all the buffers&#xA;require(&#39;rust-tools&#39;).inlay_hints.enable()&#xA;-- Disable inlay hints auto update and unset them for all buffers&#xA;require(&#39;rust-tools&#39;).inlay_hints.disable()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Runnables&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/runnables.gif&#34; alt=&#34;runnables&#34;&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustRunnables&#xA;require(&#39;rust-tools&#39;).runnables.runnables()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Expand Macros Recursively&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/expand_macros_recursively.gif&#34; alt=&#34;expand macros&#34;&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustExpandMacro  &#xA;require&#39;rust-tools&#39;.expand_macro.expand_macro()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Move Item Up/Down&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/move_item.gif&#34; alt=&#34;move items&#34;&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustMoveItemUp    &#xA;-- RustMoveItemDown    &#xA;local up = true -- true = move up, false = move down&#xA;require&#39;rust-tools&#39;.move_item.move_item(up)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Hover Actions&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/hover_actions.gif&#34; alt=&#34;hover actions&#34;&gt; Note: To activate hover actions, run the command twice (or your hover keymap if you have &lt;code&gt;hover_with_actions&lt;/code&gt; set to true AND are using &lt;code&gt;vim.lsp.buf.hover()&lt;/code&gt;). This will move you into the window, then press enter on the selection you want. Alternatively, you can set &lt;code&gt;auto_focus&lt;/code&gt; to true in your config and you will automatically enter the hover actions window.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustHoverActions &#xA;require&#39;rust-tools&#39;.hover_actions.hover_actions()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Hover Range&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Note: Requires rust-analyzer version after 2021-08-02. Shows the type in visual mode when hovering.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustHoverRange &#xA;require&#39;rust-tools&#39;.hover_range.hover_range()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Open Cargo.toml&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/open_cargo_toml.gif&#34; alt=&#34;open cargo&#34;&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustOpenCargo&#xA;require&#39;rust-tools&#39;.open_cargo_toml.open_cargo_toml()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Parent Module&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/parent_module.gif&#34; alt=&#34;parent module&#34;&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustParentModule &#xA;require&#39;rust-tools&#39;.parent_module.parent_module()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Join Lines&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/simrat39/rust-tools-demos/raw/master/join_lines.gif&#34; alt=&#34;join lines&#34;&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustJoinLines  &#xA;require&#39;rust-tools&#39;.join_lines.join_lines()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Structural Search Replace&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustSSR [query]&#xA;require&#39;rust-tools&#39;.ssr.ssr(query)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;View Crate Graph&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Command:&#xA;-- RustViewCrateGraph [backend [output]]&#xA;require&#39;rust-tools&#39;.crate_graph.view_crate_graph(backend, output)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The options shown below are the defaults. You only need to pass the keys to the setup function that you want to be changed, because the defaults are applied for keys that are not provided.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local opts = {&#xA;  tools = { -- rust-tools options&#xA;&#xA;    -- how to execute terminal commands&#xA;    -- options right now: termopen / quickfix&#xA;    executor = require(&#34;rust-tools.executors&#34;).termopen,&#xA;&#xA;    -- callback to execute once rust-analyzer is done initializing the workspace&#xA;    -- The callback receives one parameter indicating the `health` of the server: &#34;ok&#34; | &#34;warning&#34; | &#34;error&#34;&#xA;    on_initialized = nil,&#xA;&#xA;    -- automatically call RustReloadWorkspace when writing to a Cargo.toml file.&#xA;    reload_workspace_from_cargo_toml = true,&#xA;&#xA;    -- These apply to the default RustSetInlayHints command&#xA;    inlay_hints = {&#xA;      -- automatically set inlay hints (type hints)&#xA;      -- default: true&#xA;      auto = true,&#xA;&#xA;      -- Only show inlay hints for the current line&#xA;      only_current_line = false,&#xA;&#xA;      -- whether to show parameter hints with the inlay hints or not&#xA;      -- default: true&#xA;      show_parameter_hints = true,&#xA;&#xA;      -- prefix for parameter hints&#xA;      -- default: &#34;&amp;lt;-&#34;&#xA;      parameter_hints_prefix = &#34;&amp;lt;- &#34;,&#xA;&#xA;      -- prefix for all the other hints (type, chaining)&#xA;      -- default: &#34;=&amp;gt;&#34;&#xA;      other_hints_prefix = &#34;=&amp;gt; &#34;,&#xA;&#xA;      -- whether to align to the length of the longest line in the file&#xA;      max_len_align = false,&#xA;&#xA;      -- padding from the left if max_len_align is true&#xA;      max_len_align_padding = 1,&#xA;&#xA;      -- whether to align to the extreme right or not&#xA;      right_align = false,&#xA;&#xA;      -- padding from the right if right_align is true&#xA;      right_align_padding = 7,&#xA;&#xA;      -- The color of the hints&#xA;      highlight = &#34;Comment&#34;,&#xA;    },&#xA;&#xA;    -- options same as lsp hover / vim.lsp.util.open_floating_preview()&#xA;    hover_actions = {&#xA;&#xA;      -- the border that is used for the hover window&#xA;      -- see vim.api.nvim_open_win()&#xA;      border = {&#xA;        { &#34;╭&#34;, &#34;FloatBorder&#34; },&#xA;        { &#34;─&#34;, &#34;FloatBorder&#34; },&#xA;        { &#34;╮&#34;, &#34;FloatBorder&#34; },&#xA;        { &#34;│&#34;, &#34;FloatBorder&#34; },&#xA;        { &#34;╯&#34;, &#34;FloatBorder&#34; },&#xA;        { &#34;─&#34;, &#34;FloatBorder&#34; },&#xA;        { &#34;╰&#34;, &#34;FloatBorder&#34; },&#xA;        { &#34;│&#34;, &#34;FloatBorder&#34; },&#xA;      },&#xA;&#xA;      -- Maximal width of the hover window. Nil means no max.&#xA;      max_width = nil,&#xA;&#xA;      -- Maximal height of the hover window. Nil means no max.&#xA;      max_height = nil,&#xA;&#xA;      -- whether the hover action window gets automatically focused&#xA;      -- default: false&#xA;      auto_focus = false,&#xA;    },&#xA;&#xA;    -- settings for showing the crate graph based on graphviz and the dot&#xA;    -- command&#xA;    crate_graph = {&#xA;      -- Backend used for displaying the graph&#xA;      -- see: https://graphviz.org/docs/outputs/&#xA;      -- default: x11&#xA;      backend = &#34;x11&#34;,&#xA;      -- where to store the output, nil for no output stored (relative&#xA;      -- path from pwd)&#xA;      -- default: nil&#xA;      output = nil,&#xA;      -- true for all crates.io and external crates, false only the local&#xA;      -- crates&#xA;      -- default: true&#xA;      full = true,&#xA;&#xA;      -- List of backends found on: https://graphviz.org/docs/outputs/&#xA;      -- Is used for input validation and autocompletion&#xA;      -- Last updated: 2021-08-26&#xA;      enabled_graphviz_backends = {&#xA;        &#34;bmp&#34;,&#xA;        &#34;cgimage&#34;,&#xA;        &#34;canon&#34;,&#xA;        &#34;dot&#34;,&#xA;        &#34;gv&#34;,&#xA;        &#34;xdot&#34;,&#xA;        &#34;xdot1.2&#34;,&#xA;        &#34;xdot1.4&#34;,&#xA;        &#34;eps&#34;,&#xA;        &#34;exr&#34;,&#xA;        &#34;fig&#34;,&#xA;        &#34;gd&#34;,&#xA;        &#34;gd2&#34;,&#xA;        &#34;gif&#34;,&#xA;        &#34;gtk&#34;,&#xA;        &#34;ico&#34;,&#xA;        &#34;cmap&#34;,&#xA;        &#34;ismap&#34;,&#xA;        &#34;imap&#34;,&#xA;        &#34;cmapx&#34;,&#xA;        &#34;imap_np&#34;,&#xA;        &#34;cmapx_np&#34;,&#xA;        &#34;jpg&#34;,&#xA;        &#34;jpeg&#34;,&#xA;        &#34;jpe&#34;,&#xA;        &#34;jp2&#34;,&#xA;        &#34;json&#34;,&#xA;        &#34;json0&#34;,&#xA;        &#34;dot_json&#34;,&#xA;        &#34;xdot_json&#34;,&#xA;        &#34;pdf&#34;,&#xA;        &#34;pic&#34;,&#xA;        &#34;pct&#34;,&#xA;        &#34;pict&#34;,&#xA;        &#34;plain&#34;,&#xA;        &#34;plain-ext&#34;,&#xA;        &#34;png&#34;,&#xA;        &#34;pov&#34;,&#xA;        &#34;ps&#34;,&#xA;        &#34;ps2&#34;,&#xA;        &#34;psd&#34;,&#xA;        &#34;sgi&#34;,&#xA;        &#34;svg&#34;,&#xA;        &#34;svgz&#34;,&#xA;        &#34;tga&#34;,&#xA;        &#34;tiff&#34;,&#xA;        &#34;tif&#34;,&#xA;        &#34;tk&#34;,&#xA;        &#34;vml&#34;,&#xA;        &#34;vmlz&#34;,&#xA;        &#34;wbmp&#34;,&#xA;        &#34;webp&#34;,&#xA;        &#34;xlib&#34;,&#xA;        &#34;x11&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;&#xA;  -- all the opts to send to nvim-lspconfig&#xA;  -- these override the defaults set by rust-tools.nvim&#xA;  -- see https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer&#xA;  server = {&#xA;    -- standalone file support&#xA;    -- setting it to false may improve startup time&#xA;    standalone = true,&#xA;  }, -- rust-analyzer options&#xA;&#xA;  -- debugging stuff&#xA;  dap = {&#xA;    adapter = {&#xA;      type = &#34;executable&#34;,&#xA;      command = &#34;lldb-vscode&#34;,&#xA;      name = &#34;rt_lldb&#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&#xA;require(&#39;rust-tools&#39;).setup(opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Saecki/crates.nvim&#34;&gt;&lt;code&gt;Saecki/crates.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;This plugin draws inspiration from &lt;a href=&#34;https://github.com/akinsho/flutter-tools.nvim&#34;&gt;&lt;code&gt;akinsho/flutter-tools.nvim&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>