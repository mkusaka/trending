<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-17T02:04:36Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>amzxyz/rime_wanxiang</title>
    <updated>2025-08-17T02:04:36Z</updated>
    <id>tag:github.com,2025-08-17:/amzxyz/rime_wanxiang</id>
    <link href="https://github.com/amzxyz/rime_wanxiang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rime万象拼音输入方案：标准版与增强版可选，词库基于AI筛选和语料辅助筛选精干高效，配合全新语法模型，输入不再纠结。PRO版本支持10种双拼，6种辅助码，并且可以扩展更多，支持中英混输，内置超级注释、带调全拼输入码显示、快符与重复上屏、手动排序、tips等功能扩展，大大增强使用体验。　　Q群：11033572&lt;/p&gt;&lt;hr&gt;&lt;hr /&gt; &#xA;&lt;h1&gt;万象系列方案 &lt;a href=&#34;https://deepwiki.com/amzxyz/rime_wanxiang&#34;&gt;&lt;img src=&#34;https://deepwiki.com/badge.svg?sanitize=true&#34; alt=&#34;Ask DeepWiki&#34; /&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;万象拼音——基于深度优化的词库和语言模型&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/amzxyz/RIME-LMDG&#34;&gt;万象词库与万象语言模型&lt;/a&gt; 是一种带声调的词库，经过AI和大基数语料筛选、加频，结合语言模型获得更准确的整句输出。还结合了中英文混输，一套词库，多种用法，具体可以点击链接了解优势&lt;/p&gt; &#xA;&lt;h3&gt;优势&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;词库词语全部加音调&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;设计6种辅助码，头部使用全拼编码，可以转化为任何双拼编码&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;词库解码顺序为：全拼拼音；墨奇码；鹤形；自然码；虎码首末；五笔前2；汉心码&lt;/li&gt; &#xA;   &lt;li&gt;因此，万象拼音支持拼音和辅助码任意两两组合&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;其他类型辅助码用户可以通过LMDG工具包进行词库辅助码刷新，使用zrm-fuzhu方案包，替换为刷新后的词库即可使用。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;万象词库中的带声调拼音标注+词组构成+词频是整个万象项目的核心，是使用体验的基石，方案的其它功能皆可自定义，我希望使用者可以基于词库+转写的方式获得输入体验&lt;/strong&gt; &lt;a href=&#34;https://docs.qq.com/smartsheet/DWHZsdnZZaGh5bWJI?viewId=vUQPXH&amp;amp;tab=BB08J2&#34;&gt;万象词库问题收集反馈表&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;p&gt;&lt;strong&gt;效果大赏&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.deepin.org/thread/202502200358104987_%E6%95%88%E6%9E%9C.png&#34; alt=&#34;效果.png&#34; /&gt;&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;版本差异&lt;/th&gt; &#xA;   &lt;th&gt;标准版&lt;/th&gt; &#xA;   &lt;th&gt;增强版&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;方案文件&lt;/td&gt; &#xA;   &lt;td&gt;wanxiang.schema.yaml&lt;/td&gt; &#xA;   &lt;td&gt;wanxiang_pro.schema.yaml&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;是否调频&lt;/td&gt; &#xA;   &lt;td&gt;默认开启&lt;/td&gt; &#xA;   &lt;td&gt;默认关闭&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;用户词记录&lt;/td&gt; &#xA;   &lt;td&gt;无差别自动记录，词库混乱&lt;/td&gt; &#xA;   &lt;td&gt;需手动造词``引导，词库可控&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;用户词位置&lt;/td&gt; &#xA;   &lt;td&gt;wanxiang.userdb&lt;/td&gt; &#xA;   &lt;td&gt;zc.userdb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;辅助码&lt;/td&gt; &#xA;   &lt;td&gt;有基于声调的辅助&lt;/td&gt; &#xA;   &lt;td&gt;有7种辅助码可选，同时兼容声调辅助&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;简码&lt;/td&gt; &#xA;   &lt;td&gt;全拼开启基于转写的简码，双拼未开启&lt;/td&gt; &#xA;   &lt;td&gt;有携带部分数据但未配置(自己设置的才是自己的)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;词库格式&lt;/td&gt; &#xA;   &lt;td&gt;你➩nǐ➩1000&lt;/td&gt; &#xA;   &lt;td&gt;你➩nǐ;re➩1000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;新手快速入门&lt;/h3&gt; &#xA;&lt;p&gt;不了解rime基础的可以参考友情链接，初步了解rime运行的些许特性：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mintimate.cc/zh/guide/installRime.html&#34;&gt;oh my rime&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xishansnow.github.io/posts/41ac964d.html&#34;&gt;rime参数配置&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;整个rime配置生态都是通的，里面有非常完整的使用方法，(诸如放到哪里、换个皮肤、什么是用户目录。。。)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;友情提示：&lt;/strong&gt; &lt;em&gt;如果你是第一次使用万象，可以不要用你过往经验来定义万象，按如下的步骤将万象跑起来后,体验一下万象的功能，然后学习一下万象的各项内容之后再考虑。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;①快速运行：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;将方案文件置于用户目录中，直接部署，等待部署完成后，&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;输入以下指令(斜杠引导)切换为对应的双拼/全拼，切换后按照提示重新部署，完成。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;这样的指令能帮你一次性完成4个补丁文件的输入类型修改，运行逻辑：根目录无自定义文件则复制custom文件夹相关文件出来并修改为对应的输入方案，如果根目录存在则只修改输入方案，不进行复制，因此不会被覆盖。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ios仓输入法，平台特殊，需要额外去：方案文件管理-使用键盘文件覆盖应用文件，才能完成文件变更&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;/flypy    → 小鹤双拼&#xA;/mspy     → 微软双拼&#xA;/zrm      → 自然码&#xA;/sogou    → 搜狗双拼&#xA;/abc      → 智能ABC&#xA;/ziguang  → 紫光双拼&#xA;/pyjj     → 拼音加加&#xA;/gbpy     → 国标双拼&#xA;/lxsq     → 乱序17&#xA;/pinyin   → 全拼&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;②进阶custom patch法（已经尽量为你简化）强烈推荐，适用于长期稳定使用：&lt;/h4&gt; &#xA;&lt;p&gt;其实快速运行中我们已经完成了custom patch的部署，里面还预设了一些示例，这些例子只是例子，请务必详细阅读每一行，保留有用的删除无用的，千万不要改完双拼就万事大吉了，每一行详细查阅、理解、修改。custom是对对应方案文件的最后一道补丁，是真正属于你自己的配置文件，他不会被升级所覆盖。&lt;/p&gt; &#xA;&lt;p&gt;方案提供了custom文件夹，预设了一些文件与教程，请不要删除相关文件，根据文件夹中内容进行相关修改变更：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wanxiang.custom.yaml是对wanxiang.schema.yaml的补丁以此类推&#xA;可以打补丁的类型：&#xA;schema,default,weasel,squirrel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;注意不要删除和变更每一个custom的表头。&lt;/p&gt; &#xA;&lt;p&gt;更详细参照：&lt;a href=&#34;https://docs.qq.com/doc/DQ0FqSXBmYVpWVFpy?rtkey=&#34;&gt;🚀 Rime 万象拼音输入方案 新手安装配置指南&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;③脚本更新：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;脚本的下载地址 &lt;a href=&#34;https://github.com/expoli/rime-wanxiang-update-tools&#34;&gt;万象方案更新脚本&lt;/a&gt;。这里以win版本的小狼毫为例，如果你是&lt;strong&gt;中文系统&lt;/strong&gt;请下载更新脚本的 powershell &lt;strong&gt;非utf-8版本&lt;/strong&gt;，具体文件名：&lt;code&gt;rime-wanxiang-update-windows.ps1&lt;/code&gt; 。在使用万象之前，请安装小狼毫，安装小狼毫的过程中，请一切保持默认即可，等你熟悉之后可以自定义。本入门最终会带你一步步设置使用&lt;strong&gt;小鹤双拼+墨奇辅助码&lt;/strong&gt;的方案。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;下载更新脚本：直接点击上面地址首页右边最新 release 链接，然后下载对应的 &lt;code&gt;rime-wanxiang-update-windows.ps1&lt;/code&gt; 文件即可。下载完成后，直接双击运行刚刚下载的ps1脚本。如果杀毒报错，请将你下载的文件恢复后，添加到信任文件。如果执行一闪而过、或者遇到乱码再尝试下载 utf-8 版本，具体文件名：&lt;code&gt;rime-wanxiang-update-windows-utf-8.ps1&lt;/code&gt;。如果提示权限不足，可以在 powershell 终端中执行 &lt;code&gt;Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser&lt;/code&gt; 再尝试运行下载的 ps1 脚本。&lt;/li&gt; &#xA; &lt;li&gt;脚本执行后，需要你确认你使用的是全拼还是双拼用户，如果你是全拼用户，请根据提示输入 0 后回车。如果你双拼用户，需要你确认你使用的辅助码类型，默认的万象方案支持汉心、简单鹤、墨奇、虎码、五笔、自然码共计6种辅助码类型。如果没有你想要的辅助码类型，也不要着急，可在熟悉万象之后自定义。根据提示输入你使用的辅助码类型的数字后回车即可。这里我按墨奇辅助码输入。更不要着急怎么选择双拼方案，后面会告诉你的。&lt;/li&gt; &#xA; &lt;li&gt;脚本继续执行，提示选择是否全部更新，不要管，你是新手，直接选全部更新，输入 0 回车。然后就默默的等待脚本执行完后，按任意键退出即可。默认情况下，万象的双拼方案为自然码。&lt;/li&gt; &#xA; &lt;li&gt;在使用脚本更新之前，务必使用进阶custom patch法维护好你的配置，更新不会覆盖custom.yaml类文件&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;答疑&lt;/h3&gt; &#xA;&lt;h4&gt;为什么词库这么大，我见过只有单字携带辅助码的方案，词库可以缩小吗？&lt;/h4&gt; &#xA;&lt;p&gt;在这里我借助wiki深入阐述一下这个问题并解答这些问题：&lt;a href=&#34;https://github.com/amzxyz/RIME-LMDG/wiki/%E4%B8%87%E8%B1%A1%E8%AF%8D%E5%BA%93PRO%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5&#34;&gt;万象词库PRO的设计理念&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/amzxyz/RIME-LMDG/wiki/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%85%B3%E9%97%AD%E8%B0%83%E9%A2%91%E4%BB%A5%E5%8F%8A%E4%B8%8E%E4%B9%8B%E5%85%B3%E8%81%94%E7%9A%84%E6%8E%AA%E6%96%BD%E6%9C%89%E5%93%AA%E4%BA%9B&#34;&gt;为什么PRO版本默认关闭调频的说明&lt;/a&gt; &lt;code&gt;enable_user_dict: false # 是否开启自动调频，true为开启&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;功能一览&lt;/h3&gt; &#xA;&lt;h4&gt;辅助码&lt;/h4&gt; &#xA;&lt;p&gt;辅助码可以在输入一个确定得拼音后面继续输入一个部首的读音，使得这个字出现在靠前甚至第一位。这种方式易于理解，无须记忆字根，一切基于拼音得基础上。例如：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.deepin.org/thread/202407041144502563_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121653.png&#34; alt=&#34;截图_选择区域_20240704121653.png&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;功能1&lt;/strong&gt; &lt;strong&gt;（仅PRO）&lt;/strong&gt; 直接辅助--如果想要 &lt;code&gt;镇&lt;/code&gt; 字显示在前面 那么在本方案下提供两种方式，第一种就是辅助码声母，&lt;code&gt;vf&lt;/code&gt;继续输入&lt;code&gt;j&lt;/code&gt; 也就是金字旁得声母即可出现结果，如果还是出现不了你要的结果，可以输入另外主体字的声母来继续缩小范围。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.deepin.org/thread/202407041147131421_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121809.png&#34; alt=&#34;截图_选择区域_20240704121809.png&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;句子中间或者单字输入时需要输入全位辅助码时由于与双拼词语重码，因为我们设计的基本辅助码是2位，加上双拼共4位，由于在整句中我们为了整句输入的顺畅，不会将4码聚拢作为优先级较高的选择，这样会在很多时候造成你想打的句子缩成一团变成全辅助码的词汇。此时可以通过追加/的方式使其聚拢，这种方式是由于我们是直接辅助码导致的，如果我们通过一个符号引导辅助码，那么在输入时要每一个都用到符号，而采用这种方式我们只需要在必要的时候使用/节省了输入的按键开支，下面由两个图片说明问题：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.deepin.org/thread/202408210142513354_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240821093644.png&#34; alt=&#34;截图_选择区域_20240821093644.png&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.deepin.org/thread/202408210143144721_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240821093701.png&#34; alt=&#34;截图_选择区域_20240821093701.png&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;功能2&lt;/strong&gt; &lt;strong&gt;（仅PRO）&lt;/strong&gt; 间接辅助--除以上直接使用辅助外,我们还支持中间加入/来引导辅助码的输入,即:功能1是&#34;nire/&#34; 在有需求的时候末尾增加斜杠能让系统侧重于单字,平时则永远在动态切分,这个模式也是比较吃词库的,当你的词组完整,遇到的异常就少,当词组不完整,你想输入三个字2+2=2编码结构,恰好辅助码与双拼编码重合就会出现3+3的聚拢,此时将你想输入的三个字放入词库中,这个问题就得到了解决,还有得项目通过Lua重新切分来解决,看似巧妙,实际上比较吃操作,影响节奏,无疑万象在很多选择上面选择了更加难的路线,用词库的全面性来托举. 而在功能2中是&#34;ni/re&#34;,也就是说辅助码必须经过/来引导,如果你不输入/它将与普通双拼无异,优点是类似vsg能够派生出&#34;中国&#34;,更适用于新手辅助码或者叫辅助码轻量使用者.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;功能3&lt;/strong&gt; 第二种方式是通过反查字库来定位，只是通过不同的方案实现，在输入主要拼音后，通过符号&lt;code&gt;`&lt;/code&gt; 来引导进入反查状态，引导后继续输入&lt;code&gt;jn&lt;/code&gt;金 则包含金的字就会被选出来；&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.deepin.org/thread/202407041149125588_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121635.png&#34; alt=&#34;截图_选择区域_20240704121635.png&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;引导后继续输入&lt;code&gt;mu 木&lt;/code&gt;则带&lt;code&gt;木&lt;/code&gt;的字就会被选出来&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.deepin.org/thread/202407041149524870_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121611.png&#34; alt=&#34;截图_选择区域_20240704121611.png&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;功能4&lt;/strong&gt; 通过 拼音状态下&lt;code&gt; ``〔反查：部件|笔画〕&lt;/code&gt; 来引导拆字模式 举例 &lt;code&gt;震&lt;/code&gt; 假设你不认识，你可以通过&lt;code&gt;雨和辰&lt;/code&gt; 来合并输入，拼音状态输入后，继续输入其它字符字母az会消失如下图，输入 &lt;code&gt;yu if&lt;/code&gt; 即雨 辰，结果出现了我们要的震字，且给出了辅助码 &lt;code&gt;y&lt;/code&gt; 和 &lt;code&gt;i&lt;/code&gt; ，&lt;code&gt;y&lt;/code&gt;是雨的声母&lt;code&gt;y&lt;/code&gt;，&lt;code&gt;i&lt;/code&gt;是辰的声母&lt;code&gt;ch&lt;/code&gt;，同时兼容通过hspnz代表横竖撇捺折五笔画。功能3是功能4的另一种表现形式,或者叫用法。这个功能依赖wanxiang_reverse.schema.yaml方案,可以通过custom配置成任意全拼双拼以匹配主方案一致的输入方式,因此是不是输入jn=jin需要看你具体的双拼类型。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.deepin.org/thread/202409280324599355_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240928112256.png&#34; alt=&#34;截图_选择区域_20240928112256.png&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;功能5&lt;/strong&gt; 句子中间或者单字输入时需要可以使用更精确的聚拢方式&#34;声调辅助&#34;，7890数字按键代表1234声，轻声归并到4声，在功能4中我们可以在双拼两码后面3个编码的位置任意插入声调与两位辅助码混合使用，就是除了不用斜杠了，我们还顺序自由了，下面由两个图片说明问题,其实在键盘上想要安排四个按键是很难得,不是占用这个按键就是占用另外的,还有得朋友觉得离得远,还有得更是不需要声调,要把候选做成9个。这些都是存在的情况,现在的处理也是妥协后的结果,要想完全不占用按键类似的办法可以改成大写字母来代表,像地球拼音则是使用大于小于号这一片的符号来表示,我们的词库有声调这个基础,一定程度上还是要利用起来：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.deepin.org/thread/202505120222182012_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20250512101814.png&#34; alt=&#34;截图_选择区域_20250512101814.png&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.deepin.org/thread/20250512022217432_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20250512101752.png&#34; alt=&#34;截图_选择区域_20250512101752.png&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.deepin.org/thread/202505120222163619_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20250512101713.png&#34; alt=&#34;截图_选择区域_20250512101713.png&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;功能6&lt;/strong&gt; 混合输入:字母、汉字、数字、用于连接的特殊符号等组合，以及英文混输，我们统一放在了wanxiang_mixedcode.schema.yaml混合编码方案里，此功能无需引导，直接输入，不参与组句，类似：1000wclips、AD钙奶、PN结、Type-C以及纯英文，同样可以通过custom来定义你所使用的双拼。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;整合说明&lt;/strong&gt; 万象方案整合度很高，我们不希望使用户文件夹变得复杂，功能5中我们将两类习惯的五笔画和多分拆字和两分拆字整合到了一起，可以认为是4个挂接方案；在功能6中，我们将 英文输入、中英混合编码、以及一些其他混合编码整合到了一起，共享方案转写，两个功能都保证了可配置性，都能与你所使用的双拼契合， 对于词库也都整合到了dicts里面，为了能更好的统一更新和分发，仓库中我们支持基础版本词库、携带pro的辅助码版本词库、英文词库、混合词库4个类别，在release中各自归类，最终做到了根目录15个文件、4个文件夹示人，其中的custom目录还携带了用户自定义的法宝秘籍，能称得上简约而不简单。&lt;/p&gt; &#xA;&lt;h4&gt;其他亮点功能&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;日期、时间、节日、节气、问候模板：&lt;/strong&gt; 可以在按键配置的地方定制引导前缀&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;key_binder/shijian_keys: [&#34;/&#34;, &#34;o&#34;]&lt;/code&gt; 这样的配置以为你你可以/sj也可以osj，某些方案o有别的作用时候可以去掉o,灵活处理。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;#时间：osj 或者 /sj&#xA;#日期：orq 或者 /rq&#xA;#农历：onl 或者 /nl&#xA;#星期：oxq 或者 /xq&#xA;#今年第几周：oww 或者 /ww&#xA;#节气：ojq 或者 /jq&#xA;#日期+时间：ors 或者 /rs&#xA;#时间戳：ott 或者 /tt&#xA;#大写N日期：N20250315 或者 N0302 即不添加年&#xA;#节日：ojr 或者 /jr&#xA;#问候模板：/day 或者 oday&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unicode：&lt;/strong&gt; 大写 U 开头，如 U62fc 得到「拼」。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;数字、金额大写：&lt;/strong&gt; 大写 R 开头，如 R1234 得到「一千二百三十四、壹仟贰佰叁拾肆元整」。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;/引导模式：&lt;/strong&gt; 通过输入 /sx 快捷输入关于“数学”的特殊符号，具体能输入什么可以打开 symbols.yaml学习。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;计算器：&lt;/strong&gt; 通过输入大写V引导继续输入如：V3+5 候选框就会有8和3+5=8，基础功能 &lt;code&gt;+ - * / % ^&lt;/code&gt; 还支持 &lt;code&gt;sin(x) cos(x)&lt;/code&gt; 等众多运算方式 &lt;a href=&#34;https://github.com/gaboolic/rime-shuangpin-fuzhuma/raw/main/md/calc.md&#34;&gt;点击全面学习&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;自动上屏：&lt;/strong&gt; 例如：三位、四位简码唯一时，自动上屏如&lt;code&gt;jjkw岌岌可危&lt;/code&gt; &lt;code&gt;zmhu怎么回事&lt;/code&gt; 。默认未开启，方案文件中&lt;code&gt;speller:&lt;/code&gt;字段下取消注释这两句开启 &lt;code&gt;# auto_select: true # auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;错音错字提示：&lt;/strong&gt; 例如：输入&lt;code&gt;gei yu给予&lt;/code&gt;，获得&lt;code&gt;jǐ yǔ&lt;/code&gt;提示，此功能与全拼、双拼类型无关全部支持；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;快符Lua：&lt;/strong&gt; 例如 &lt;code&gt;;q&lt;/code&gt; 通过分号键引导的26字母+10个数字，快速符号自动上屏，双击分号上屏中文状态下分号本身，分号+单引号;&#39;重复上屏候选词，此功能会占用分号不能直接上屏而变成双击，但带来的收益也是显而易见的；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;超级tips：&lt;/strong&gt; 支持将表情、化学式、翻译、简码 提示等等你能想到得数据获得提示显示并将通过一个自定义按键直接上屏，默认为“.” 避免了占用候选框，通过Control+t 进行开关。⚠️仓输入法、超越输入法设置按键交由rime去处理，没有特殊需求应该一律交给rime；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;辅助码提示（仅PRO）：&lt;/strong&gt; 任意长度候选词的辅助码提示能力，默认开启1个字的辅助码，可以在方案文件中定义更长的长度。Ctrl+a可以实时在开启辅助码提示、开启声调全拼提示、关闭注释 三个状态循环，Ctrl+c开启拆分辅助提示，优先级高于普通辅助提示；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;输入码音调显示：&lt;/strong&gt; 通过Ctrl+s可以使得输入码实时动态显示全拼并加音调，这是万象特色功能；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;用户按需造词（仅PRO）：&lt;/strong&gt; 默认通过&lt;code&gt;``&lt;/code&gt;引导的方式进入用户词自造词模式，继续输入则&lt;code&gt;``&lt;/code&gt;前缀消失，后面打出来的字上屏后完成造词。 pro版本讲究自主可控，由于辅助码的使用在很多时候不熟悉的时候可能会上屏更加异常的词汇或者生僻字，有的用户还不会使用Esc退出输入，而是选择直接敲下空格。按需造词可以有效把控造出的词是有意义的，而且默认靠后，原因简单基本上有意义的高频词万象已经提供，你应该使用辅助码将其前置。&lt;strong&gt;重点&lt;/strong&gt;：在此基础上我们还支持“后触发”当你输入编码后发现没有你要的行业词汇，此时在后面双击&lt;code&gt;``&lt;/code&gt; 就可以在不删除编码的情况下完成造词。还有一个是次选造词，如果次选是你想要的，并且是词库组合成的，上屏就会记录下来。&lt;/p&gt; &#xA;&lt;p&gt;总结一下，造词功能由：①&lt;code&gt;``&lt;/code&gt;起始的主动造词，②&lt;code&gt;``&lt;/code&gt;在编码后面的主动造词，③次选造词。三个特性构成&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;用户词删除：&lt;/strong&gt; 不管什么删除都不能直接作用于固定词典，使用Ctrl+del是rime系统删除用户词,就可以将用户词标记为c&amp;lt;=0，这在rime系统中就表现为不使用，假性删除，如何能真的删除这些词汇，可以通过/del输入编码来触发删除，这是一个危险操作，操作之前需要点击同步触发导出用户词的txt文件，此后我们就能放心使用，整个步骤：①先同步，②输入/del触发清理③重新部署④同步，就可以将清理后的词库恢复到db数据库中。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;手动排序（Lua）：&lt;/strong&gt; ①词典候选类型：对选中的候选词操作，使用Ctrl+j向左一步，Ctrl+k向右一步，Ctrl+l(零)移除选中排序信息，Ctrl+p 置顶选中候选。其作用于当时编码与候选词；②动态生成的Lua候选，很多时候我们对日期、时间等输出格式首选有着自己的追求，复杂的配置又往往提升了使用难度，于是我们基于排序Lua实现了动态内容的按序号索引的排序，也就是说该序号下原本生成的格式整个发生了位置变化，使用方法一致。信息储存于Lua文件夹下排序数据库中sequence.userdb，支持导出导入数据便于多设备共用。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;排序信息同步：&#xA;&#xA;1. A 设备导出&#xA;    1. 首选确保 rime 用户目录下的 lua 目录下没有 `sequence.txt` 文件&#xA;    2. 按「部署」，会自动导出数据到 `sequence.txt` 文件&#xA;    3. 将生成的 `sequence.txt` 这个复制到 B 的相同位置&#xA;&#xA;2. B 设置按「部署」导入成功。如想查看同步的结果，可以再次按下部署，查看生成的「sequence.txt」 文件&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;声调辅助回退（Lua）：&lt;/strong&gt; 万象是将7890用于代表1234声，轻声归并到了4，我们支持在例如输入ni9后发现我可能要4声，ni0，此时我们无需删除数字9而是直接输入对的0，类似手动在7890之间轮巡，能有效快速提升声调辅助的效率，减少使用负担，也是万象独创功能。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;删除键限制（Lua）：&lt;/strong&gt; 可以在输入中当持续按下删除编码为0时会卡住，抬起重新按下才能继续删除已经上屏内容，避免误删除上屏内容。目前仅PC可用，也是万象独创功能。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;输入长度限制（Lua）：&lt;/strong&gt; 对两类场景进行限制，避免数据并发卡顿：1、重复输入8个连续相同的字母，aaaaaaaa会提示:已超最大重复声母。因为连续多个的重复字母会造成严重的卡顿；2、分词片段限制在30个，也就是30个字，过长的语句价值不大还会造成卡顿。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tab循环切换音节：&lt;/strong&gt; 当输入多个字词时想要给前面补充辅助码，可以多次按下tab循环切换，这种可能比那些复杂的快捷键好用一些；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;翻译模式：&lt;/strong&gt; 输入状态按下Ctrl+E快捷键进入翻译模式，原理是opencc查表进行中英文互译，能否翻译取决于词表的丰富度；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;字符集过滤：&lt;/strong&gt; 默认开启过滤，写在charset.dict.yaml的就是可以通过的字表，默认为8105+𰻞𰻞，如果你想什么字在小字集模式可以通过可以写在这里，配套开关【小字集、大字集】，快捷键Ctrl+g&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;自定义词库：&lt;/strong&gt; 自定义词库首先要利用&lt;a href=&#34;https://github.com/amzxyz/RIME-LMDG&#34;&gt;LMDG&lt;/a&gt;中的脚本将你自己的词库刷成与万象同类型的声调、或者声调+辅助码的形态，因为主词库要参与转写。对于custom_phrase则需要手动编辑编码为实际输入的编码&lt;/p&gt; &#xA;&lt;img alt=&#34;pay&#34; src=&#34;./custom/万象输入方案.png&#34; height=&#34;2800&#34; width=&#34;1000&#34; /&gt; &#xA;&lt;h2&gt;鸣谢&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;感谢网友的热情提报问题，使得模型和词库体验进一步提升。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;赞赏&lt;/h2&gt; &#xA;&lt;p&gt;如果觉得项目好用，可以请AMZ喝咖啡&lt;/p&gt; &#xA;&lt;img alt=&#34;pay&#34; src=&#34;./custom/赞赏.jpg&#34; height=&#34;312&#34; width=&#34;446&#34; /&gt;</summary>
  </entry>
  <entry>
    <title>vague2k/vague.nvim</title>
    <updated>2025-08-17T02:04:36Z</updated>
    <id>tag:github.com,2025-08-17:/vague2k/vague.nvim</id>
    <link href="https://github.com/vague2k/vague.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cool, dark, low contrast colorscheme for Neovim. Pastel yet vivid, like a fleeting memory...&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;1582&#34; alt=&#34;Screenshot 2025-05-24 at 1 44 17 PM&#34; src=&#34;https://github.com/user-attachments/assets/8145d76e-3040-4bee-b6bf-3c65140f4786&#34; /&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;vague2k/vague.nvim&#34;,&#xA;  lazy = false, -- make sure we load this during startup if it is your main colorscheme&#xA;  priority = 1000, -- make sure to load this before all the other plugins&#xA;  config = function()&#xA;    -- NOTE: you do not need to call setup if you don&#39;t want to.&#xA;    require(&#34;vague&#34;).setup({&#xA;      -- optional configuration here&#xA;    })&#xA;    vim.cmd(&#34;colorscheme vague&#34;)&#xA;  end&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Neovim 0.12 built-in plugin manager &lt;code&gt;vim.pack&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.pack.add({&#xA;  &#34;https://github.com/vague2k/vague.nvim&#34;,&#xA;})&#xA;&#xA;require(&#34;vague&#34;).setup({&#xA;    -- optional configuration here&#xA;})&#xA;&#xA;vim.cmd(&#34;colorscheme vague&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;vague&#34;).setup({&#xA;  transparent = false, -- don&#39;t set background&#xA;  -- disable bold/italic globally in `style`&#xA;  bold = true,&#xA;  italic = true,&#xA;  style = {&#xA;    -- &#34;none&#34; is the same thing as default. But &#34;italic&#34; and &#34;bold&#34; are also valid options&#xA;    boolean = &#34;bold&#34;,&#xA;    number = &#34;none&#34;,&#xA;    float = &#34;none&#34;,&#xA;    error = &#34;bold&#34;,&#xA;    comments = &#34;italic&#34;,&#xA;    conditionals = &#34;none&#34;,&#xA;    functions = &#34;none&#34;,&#xA;    headings = &#34;bold&#34;,&#xA;    operators = &#34;none&#34;,&#xA;    strings = &#34;italic&#34;,&#xA;    variables = &#34;none&#34;,&#xA;&#xA;    -- keywords&#xA;    keywords = &#34;none&#34;,&#xA;    keyword_return = &#34;italic&#34;,&#xA;    keywords_loop = &#34;none&#34;,&#xA;    keywords_label = &#34;none&#34;,&#xA;    keywords_exception = &#34;none&#34;,&#xA;&#xA;    -- builtin&#xA;    builtin_constants = &#34;bold&#34;,&#xA;    builtin_functions = &#34;none&#34;,&#xA;    builtin_types = &#34;bold&#34;,&#xA;    builtin_variables = &#34;none&#34;,&#xA;  },&#xA;  -- plugin styles where applicable&#xA;  -- make an issue/pr if you&#39;d like to see more styling options!&#xA;  plugins = {&#xA;    cmp = {&#xA;      match = &#34;bold&#34;,&#xA;      match_fuzzy = &#34;bold&#34;,&#xA;    },&#xA;    dashboard = {&#xA;      footer = &#34;italic&#34;,&#xA;    },&#xA;    lsp = {&#xA;      diagnostic_error = &#34;bold&#34;,&#xA;      diagnostic_hint = &#34;none&#34;,&#xA;      diagnostic_info = &#34;italic&#34;,&#xA;      diagnostic_ok = &#34;none&#34;,&#xA;      diagnostic_warn = &#34;bold&#34;,&#xA;    },&#xA;    neotest = {&#xA;      focused = &#34;bold&#34;,&#xA;      adapter_name = &#34;bold&#34;,&#xA;    },&#xA;    telescope = {&#xA;      match = &#34;bold&#34;,&#xA;    },&#xA;  },&#xA;&#xA;  -- Override highlights or add new highlights&#xA;  on_highlights = function(highlights, colors) end,&#xA;&#xA;  -- Override colors&#xA;  colors = {&#xA;    bg = &#34;#141415&#34;,&#xA;    inactiveBg = &#34;#1c1c24&#34;,&#xA;    fg = &#34;#cdcdcd&#34;,&#xA;    floatBorder = &#34;#878787&#34;,&#xA;    line = &#34;#252530&#34;,&#xA;    comment = &#34;#606079&#34;,&#xA;    builtin = &#34;#b4d4cf&#34;,&#xA;    func = &#34;#c48282&#34;,&#xA;    string = &#34;#e8b589&#34;,&#xA;    number = &#34;#e0a363&#34;,&#xA;    property = &#34;#c3c3d5&#34;,&#xA;    constant = &#34;#aeaed1&#34;,&#xA;    parameter = &#34;#bb9dbd&#34;,&#xA;    visual = &#34;#333738&#34;,&#xA;    error = &#34;#d8647e&#34;,&#xA;    warning = &#34;#f3be7c&#34;,&#xA;    hint = &#34;#7e98e8&#34;,&#xA;    operator = &#34;#90a0b5&#34;,&#xA;    keyword = &#34;#6e94b2&#34;,&#xA;    type = &#34;#9bb4bc&#34;,&#xA;    search = &#34;#405065&#34;,&#xA;    plus = &#34;#7fa563&#34;,&#xA;    delta = &#34;#f3be7c&#34;,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Explicitly Supported plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Saghen/blink.cmp&#34;&gt;Blink-cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;Cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvimdev/dashboard-nvim&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindrets/diffview.nvim&#34;&gt;Diffview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Gitsigns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;Neo-tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest&#34;&gt;Neotest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-context&#34;&gt;Treesitter-context&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/snacks.nvim&#34;&gt;Snacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hiphish/rainbow-delimiters.nvim&#34;&gt;Rainbow delimiters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;Mini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ntpeters/vim-better-whitespace&#34;&gt;Vim-better-whitespace&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;p&gt;Extra color configs for other tools can be found in &lt;a href=&#34;https://raw.githubusercontent.com/vague2k/vague.nvim/main/extras/&#34;&gt;extras&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PR&#39;s are welcome and encouraged.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to propose support for a specific plugin, you can make a PR with your modifications to the &lt;code&gt;lua/vague/groups&lt;/code&gt; directory&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EasyTier/luci-app-easytier</title>
    <updated>2025-08-17T02:04:36Z</updated>
    <id>tag:github.com,2025-08-17:/EasyTier/luci-app-easytier</id>
    <link href="https://github.com/EasyTier/luci-app-easytier" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenWrt里的EasyTier安装包（IPK和APK）&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;luci-app-easytier&lt;/h1&gt; &#xA;&lt;p&gt;依赖&lt;code&gt;kmod-tun&lt;/code&gt;需要先在系统软件包里安装好&lt;/p&gt; &#xA;&lt;h3&gt;快速开始&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;右上角Fork克隆本项目，去actions手动触发自动编译流程，2分钟后就能获取最新ipk压缩包`luci-app-easytier.zip`解压上传到Openwrt软路由安装即可&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;其中&lt;code&gt;SNAPSHOT&lt;/code&gt;后缀的是apk安装包，&lt;code&gt;openwrt-22.03&lt;/code&gt;的是ipk安装包&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/7e5e843b-eb01-48f1-81ab-226a1418ca0f&#34; alt=&#34;actions界面&#34; /&gt;&lt;/p&gt; &#xA;&lt;h3&gt;安装方法&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#先上传到openwrt的/tmp/tmp目录里安装&#xA;opkg install /tmp/tmp/luci-app-easytier_all.ipk&#xA;&#xA;#卸载&#xA;opkg remove luci-app-easytier&#xA;&#xA;#更新版本需要先卸载再安装新的ipk然后去管理界面关闭插件 修改参数后重新点击应用并保存&#xA;#安装后openwrt管理界面里不显示easytier 请注销登录或关闭窗口重新打开  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#如果是新版openwrt使用的是apk包管理器 出现无法安装apk的可以尝试使用忽略证书验证&#xA;apk add --allow-untrusted /tmp/tmp/luci-app-easytier.apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此luci-app-easytier不包含二进制程序，需要自行在openwrt管理界面里的easytier插件界面里上传二进制程序&lt;/p&gt; &#xA;&lt;h3&gt;编译方法&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#下载openwrt编译sdk到opt目录（不区分架构）&#xA;wget -qO /opt/sdk.tar.xz https://downloads.openwrt.org/releases/22.03.5/targets/rockchip/armv8/openwrt-sdk-22.03.5-rockchip-armv8_gcc-11.2.0_musl.Linux-x86_64.tar.xz&#xA;tar -xJf /opt/sdk.tar.xz -C /opt&#xA;&#xA;cd /opt/openwrt-sdk*/package&#xA;#克隆luci-app-easytier到sdk的package目录里&#xA;git clone https://github.com/EasyTier/luci-app-easytier.git /opt/luci-app-easytier&#xA;cp -R /opt/luci-app-easytier/luci-app-easytier .&#xA;&#xA;cd /opt/openwrt-sdk*&#xA;#升级脚本创建模板&#xA;./scripts/feeds update -a&#xA;make defconfig&#xA;&#xA;#开始编译&#xA;make package/luci-app-easytier/compile V=s -j1&#xA;&#xA;#编译完成后在/opt/openwrt-sdk*/bin/packages/aarch64_generic/base目录里&#xA;cd /opt/openwrt-sdk*/bin/packages/aarch64_generic/base&#xA;#移动到/opt目录里&#xA;mv *.ipk /opt/luci-app-easytier_all.ipk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果在 状态-系统日志里 出现下图日志内容可以使用以下命令解决&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;Fri Feb  7 11:13:30 2025 daemon.err uhttpd[3381]: luci.util.pcdata() has been replaced by luci.xml.pcdata() - Please update your code.&#xA;Fri Feb  7 11:13:30 2025 daemon.err uhttpd[3381]: luci.util.pcdata() has been replaced by luci.xml.pcdata() - Please update your code.&#xA;Fri Feb  7 11:13:30 2025 daemon.err uhttpd[3381]: luci.util.pcdata() has been replaced by luci.xml.pcdata() - Please update your code.&#xA;Fri Feb  7 11:13:30 2025 daemon.err uhttpd[3381]: luci.util.pcdata() has been replaced by luci.xml.pcdata() - Please update your code.&#xA;Fri Feb  7 11:13:30 2025 daemon.err uhttpd[3381]: luci.util.pcdata() has been replaced by luci.xml.pcdata() - Please update your code.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;sed -i &#39;s/util/xml/g&#39; /usr/lib/lua/luci/model/cbi/easytier.lua&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>