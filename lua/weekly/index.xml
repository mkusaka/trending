<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-03T01:54:52Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>creativenull/efmls-configs-nvim</title>
    <updated>2023-09-03T01:54:52Z</updated>
    <id>tag:github.com,2023-09-03:/creativenull/efmls-configs-nvim</id>
    <link href="https://github.com/creativenull/efmls-configs-nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial collection of linters and formatters configured for efm-langserver for neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;efmls-configs-nvim&lt;/h1&gt; &#xA;&lt;a href=&#34;https://dotfyle.com/plugins/creativenull/efmls-configs-nvim&#34;&gt; &lt;img src=&#34;https://dotfyle.com/plugins/creativenull/efmls-configs-nvim/shield&#34; alt=&#34;Configs on dotfyle&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;An unofficial collection of linters and formatters configured for &lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt; for neovim.&lt;/p&gt; &#xA;&lt;h2&gt;Supported linters and formatters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/creativenull/efmls-configs-nvim/main/doc/SUPPORTED_LIST.md&#34;&gt;doc/SUPPORTED_LIST.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Out-of-box configurations for 90+ tools (linters and formatters)&lt;/li&gt; &#xA; &lt;li&gt;Intelligently detect tools installed project-wide or system-wide - works only for node/npm, php/composer and ruby/bundler (additional support for other build tools coming soon, welcome any contributions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:checkhealth&lt;/code&gt; integration for status check&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be accessed via &lt;a href=&#34;https://raw.githubusercontent.com/creativenull/efmls-configs-nvim/main/doc/efmls-configs.txt&#34;&gt;&lt;code&gt;:help efmls-configs&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/creativenull/efmls-configs-nvim/main/#setup&#34;&gt;further below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim &amp;gt;= 0.7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt; installed globally. If using &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;mason.nvim&lt;/a&gt; then install with &lt;code&gt;:MasonInstall efm&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install with your favorite plugin manager or just use builtin packages.&lt;/p&gt; &#xA;&lt;h3&gt;lazy.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;creativenull/efmls-configs-nvim&#39;,&#xA;  version = &#39;v1.x.x&#39;, -- version is optional, but recommended&#xA;  dependencies = { &#39;neovim/nvim-lspconfig&#39; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;packer.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;creativenull/efmls-configs-nvim&#39;,&#xA;  tag = &#39;v1.*&#39;, -- tag is optional, but recommended&#xA;  requires = { &#39;neovim/nvim-lspconfig&#39; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;creativenull/efmls-configs-nvim&#39;, { &#39;tag&#39;: &#39;v1.*&#39; } &#34; tag is optional, but recommended&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;See also &lt;code&gt;:help efmls-configs-setup&lt;/code&gt; to view docs inside neovim.&lt;/p&gt; &#xA;&lt;p&gt;To get started, make a &lt;code&gt;languages&lt;/code&gt; table that will define configurations for the language of your choice. Or use the defaults provided by this plugin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Register linters and formatters per language&#xA;local eslint = require(&#39;efmls-configs.linters.eslint&#39;)&#xA;local prettier = require(&#39;efmls-configs.formatters.prettier&#39;)&#xA;local stylua = require(&#39;efmls-configs.formatters.stylua&#39;)&#xA;local languages = {&#xA;  typescript = { eslint, prettier },&#xA;  lua = { stylua },&#xA;}&#xA;&#xA;-- Or use the defaults provided by this plugin&#xA;-- check doc/SUPPORTED_LIST.md for the supported languages&#xA;--&#xA;-- local languages = require(&#39;efmls-configs.defaults&#39;).languages()&#xA;&#xA;local efmls_config = {&#xA;  filetypes = vim.tbl_keys(languages),&#xA;  settings = {&#xA;    rootMarkers = { &#39;.git/&#39; },&#xA;    languages = languages,&#xA;  },&#xA;  init_options = {&#xA;    documentFormatting = true,&#xA;    documentRangeFormatting = true,&#xA;  },&#xA;}&#xA;&#xA;require(&#39;lspconfig&#39;).efm.setup(vim.tbl_extend(&#39;force&#39;, efmls_config, {&#xA;  -- Pass your custom lsp config below like on_attach and capabilities&#xA;  --&#xA;  -- on_attach = on_attach,&#xA;  -- capabilities = capabilities,&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Configurations&lt;/h3&gt; &#xA;&lt;p&gt;See also &lt;code&gt;:help efmls-configs-defaults&lt;/code&gt; to view docs inside neovim.&lt;/p&gt; &#xA;&lt;p&gt;Default configurations are an opt-in feature. To see all the configurations provided by default go to &lt;a href=&#34;https://raw.githubusercontent.com/creativenull/efmls-configs-nvim/main/doc/SUPPORTED_LIST.md&#34;&gt;&lt;code&gt;doc/SUPPORTED_LIST.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use a list of defaults provided by this plugin, in-case you don&#39;t want to specify configuration for each language.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local languages = require(&#39;efmls-configs.defaults&#39;).languages()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add additional tools which are not provided by default you can extend via &lt;code&gt;vim.tbl_extend()&lt;/code&gt;. This can also be used as a way to override defaults.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local languages = require(&#39;efmls-configs.defaults&#39;).languages()&#xA;languages = vim.tbl_extend(&#39;force&#39;, languages, {&#xA;  -- Custom languages, or override existing ones&#xA;  html = {&#xA;    require(&#39;efmls-configs.formatters.prettier&#39;),&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;See also &lt;code&gt;:help efmls-configs-issues&lt;/code&gt; to view docs inside neovim.&lt;/p&gt; &#xA;&lt;p&gt;Always run &lt;code&gt;:checkhealth&lt;/code&gt; to see if there are any issue, when you get no response from the linter or formatter as you expected.&lt;/p&gt; &#xA;&lt;p&gt;If you get &#34;no executable found&#34; issues in &lt;code&gt;:checkhealth&lt;/code&gt;, this means that the linter or formatter was not found in the provided filepath. Ensure that it is installed globally or in a valid filepath.&lt;/p&gt; &#xA;&lt;p&gt;For nodejs/npm, php/composer, ruby/bundler: check if the linter or formatter is installed in your node_modules (npm), vendor (composer/bundler) project folder, or installed globally.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ALE - &lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;https://github.com/dense-analysis/ale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;diagnostic-languageserver - &lt;a href=&#34;https://github.com/iamcco/diagnostic-languageserver&#34;&gt;https://github.com/iamcco/diagnostic-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;guard.nvim - &lt;a href=&#34;https://github.com/nvimdev/guard.nvim&#34;&gt;https://github.com/nvimdev/guard.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;nvim-lint - &lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;https://github.com/mfussenegger/nvim-lint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;formatter.nvim - &lt;a href=&#34;https://github.com/mhartington/formatter.nvim&#34;&gt;https://github.com/mhartington/formatter.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Credits goes to the following projects for inspiration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt; for this awesome language server to provide an interface to run linters/formatters through a LSP protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;ALE&lt;/a&gt; for a huge list of linters/formatters to look through and add them in here&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>m4xshen/hardtime.nvim</title>
    <updated>2023-09-03T01:54:52Z</updated>
    <id>tag:github.com,2023-09-03:/m4xshen/hardtime.nvim</id>
    <link href="https://github.com/m4xshen/hardtime.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Neovim plugin helping you establish good command workflow and habit&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; hardtime.nvim &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/m4xshen/hardtime.nvim/stargazers&#34;&gt; &lt;img alt=&#34;Stargazers&#34; src=&#34;https://img.shields.io/github/stars/m4xshen/hardtime.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=fae3b0&amp;amp;logoColor=d9e0ee&amp;amp;labelColor=282a36&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/m4xshen/hardtime.nvim/issues&#34;&gt; &lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/m4xshen/hardtime.nvim?style=for-the-badge&amp;amp;logo=gitbook&amp;amp;color=ddb6f2&amp;amp;logoColor=d9e0ee&amp;amp;labelColor=282a36&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/m4xshen/hardtime.nvim/contributors&#34;&gt; &lt;img alt=&#34;Contributors&#34; src=&#34;https://img.shields.io/github/contributors/m4xshen/hardtime.nvim?style=for-the-badge&amp;amp;logo=opensourceinitiative&amp;amp;color=abe9b3&amp;amp;logoColor=d9e0ee&amp;amp;labelColor=282a36&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/m4xshen/hardtime.nvim/assets/74842863/117a8d30-64ba-4ca9-8414-5c493cbe8a70&#34; width=&#34;700&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;📃 Introduction&lt;/h2&gt; &#xA;&lt;p&gt;A Neovim plugin helping you establish good command workflow and habit&lt;/p&gt; &#xA;&lt;h2&gt;⚙️ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Block repeated keys within a period of time&lt;/li&gt; &#xA; &lt;li&gt;Print hints about better commands eg: Use &lt;code&gt;ci&#34;&lt;/code&gt; instead of &lt;code&gt;di&#34;i&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customizable options for restricted keys, disabled keys, etc.&lt;/li&gt; &#xA; &lt;li&gt;Get report for your most common bad habits for improvement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Recommended workflow:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Avoid using the mouse and arrow keys if they are not at the home row of your keyboard.&lt;/li&gt; &#xA; &lt;li&gt;Use relative jump (eg: &lt;code&gt;5j&lt;/code&gt; &lt;code&gt;12-&lt;/code&gt;) for vertical movement within the screen.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;CTRL-U&lt;/code&gt; &lt;code&gt;CTRL-D&lt;/code&gt; &lt;code&gt;CTRL-B&lt;/code&gt; &lt;code&gt;CTRL-F&lt;/code&gt; &lt;code&gt;gg&lt;/code&gt; &lt;code&gt;G&lt;/code&gt; for vertical movement outside the screen.&lt;/li&gt; &#xA; &lt;li&gt;Use word-motion (&lt;code&gt;w&lt;/code&gt; &lt;code&gt;W&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;B&lt;/code&gt; &lt;code&gt;e&lt;/code&gt; &lt;code&gt;E&lt;/code&gt; &lt;code&gt;ge&lt;/code&gt; &lt;code&gt;gE&lt;/code&gt;) for short-distance horizontal movement.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;f&lt;/code&gt; &lt;code&gt;F&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; &lt;code&gt;;&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; &lt;code&gt;$&lt;/code&gt; for medium to long-distance horizontal movement.&lt;/li&gt; &#xA; &lt;li&gt;Use operator + motion/text-object (eg: &lt;code&gt;ci{&lt;/code&gt; &lt;code&gt;y5j&lt;/code&gt; &lt;code&gt;dap&lt;/code&gt;) whenever possible.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;%&lt;/code&gt; and square bracket commands (see &lt;code&gt;:h [&lt;/code&gt;) to jump between brackets.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Learn more in this &lt;a href=&#34;https://m4xshen.dev/posts/vim-command-workflow/&#34;&gt;blog post&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⚡ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.7.0&#34;&gt;v0.7.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install via your favorite package manager.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lua&#34;&gt;{&#xA;   &#34;m4xshen/hardtime.nvim&#34;,&#xA;   dependencies = { &#34;MunifTanjim/nui.nvim&#34;, &#34;nvim-lua/plenary.nvim&#34; },&#xA;   opts = {}&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lua&#34;&gt;use {&#xA;   &#34;m4xshen/hardtime.nvim&#34;,&#xA;   requires = { &#39;MunifTanjim/nui.nvim&#39;, &#34;nvim-lua/plenary.nvim&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Setup the plugin in your &lt;code&gt;init.lua&lt;/code&gt;. This step is not needed with lazy.nvim if &lt;code&gt;opts&lt;/code&gt; is set as above.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lua&#34;&gt;require(&#34;hardtime&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see the hint messages in insert and visual mode, set the &lt;code&gt;&#39;showmode&#39;&lt;/code&gt; to false.&lt;/p&gt; &#xA;&lt;p&gt;But if you want to see both the hint message and current mode you can setup with one of the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Display the mode on status line and set &lt;code&gt;&#39;showmode&#39;&lt;/code&gt; to false. You can do this with some statusline plugin such as lualine.nvim.&lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;&#39;cmdheight&#39;&lt;/code&gt; to 2 so that the hint message won&#39;t be replaced by mode message.&lt;/li&gt; &#xA; &lt;li&gt;Use nvim-notify to display hint messages on the right top corner instead of commandline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;p&gt;hardtime.nvim is enable by default. You can change its state through commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Hardtime enable&lt;/code&gt; enable hardtime.nvim&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Hardtime disable&lt;/code&gt; disable hardtime.nvim&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Hardtime toggle&lt;/code&gt; toggle hardtime.nvim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can view the most frequently seen hints with &lt;code&gt;:Hardtime report&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Your log file is at &lt;code&gt;~/.cache/nvim/hardtime.nvim.log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🔧 Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can pass your config table into the &lt;code&gt;setup()&lt;/code&gt; function or &lt;code&gt;opts&lt;/code&gt; if you use lazy.nvim.&lt;/p&gt; &#xA;&lt;p&gt;If the option is a boolean, number, or array, your value will overwrite the default configuration.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Add &#34;oil&#34; to the disabled_filetypes&#xA;disabled_filetypes = { &#34;qf&#34;, &#34;netrw&#34;, &#34;NvimTree&#34;, &#34;lazy&#34;, &#34;mason&#34;, &#34;oil&#34; },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the option is a table with a &lt;code&gt;key = value&lt;/code&gt; pair, your value will overwrite the default if the key exists, and the pair will be appended to the default configuration if the key doesn&#39;t exist. You can set &lt;code&gt;key = {}&lt;/code&gt; to remove the default key-value pair.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Remove &amp;lt;Up&amp;gt; keys and append &amp;lt;Space&amp;gt; to the disabled_keys&#xA;disabled_keys = {&#xA;   [&#34;&amp;lt;Up&amp;gt;&#34;] = {},&#xA;   [&#34;&amp;lt;Space&amp;gt;&#34;] = { &#34;n&#34;, &#34;x&#34; },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default Valuae&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;max_time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximum time (in milliseconds) to consider key presses as repeated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;max_count&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximum count of repeated key presses allowed within the &lt;code&gt;max_time&lt;/code&gt; period.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;disable_mouse&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable mouse support.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable hint messages for better commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notification&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable notification messages for restricted and disabled keys.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;allow_different_key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allow different keys to reset the count.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether the plugin is enabled by default or not.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resetting_keys&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;table of strings/table pair&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&#34;&gt;See Config&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Keys in what modes that reset the count.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;restricted_keys&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;table of strings/table pair&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&#34;&gt;See Config&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Keys in what modes triggering the count mechanism.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;restriction_mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string (&lt;code&gt;&#34;block&#34; or &#34;hint&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;block&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The behavior when &lt;code&gt;restricted_keys&lt;/code&gt; trigger count mechanism.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;disabled_keys&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;table of strings/table pair&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&#34;&gt;See Config&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Keys in what modes are disabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;disabled_filetypes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;table of strings&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&#34;&gt;See Config&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hardtime.nvim&lt;/code&gt; is disabled under these filetypes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hints&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;table&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&#34;&gt;See Config&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;key&lt;/code&gt; is a string pattern you want to match, &lt;code&gt;value&lt;/code&gt; is a table of hint message and pattern length. Learn more about &lt;a href=&#34;https://www.lua.org/pil/20.2.html&#34;&gt;Lua string pattern&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;hints&lt;/code&gt; example (these two are default hints):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;hints = {&#xA;   [&#34;k%^&#34;] = {&#xA;      message = function()&#xA;         return &#34;Use - instead of k^&#34; -- return the hint message you want to display&#xA;      end,&#xA;      length = 2, -- the length of actual key strokes that matches this pattern&#xA;   },&#xA;   [&#34;d[tTfF].i&#34;] = { -- this matches d + {t/T/f/F} + {any character} + i&#xA;      message = function(keys) -- keys is a string of key strokes that matches the pattern&#xA;         return &#34;Use &#34; .. &#34;c&#34; .. keys:sub(2, 3) .. &#34; instead of &#34; .. keys&#xA;         -- example: Use ct( instead of dt(i&#xA;      end,&#xA;      length = 4,&#xA;   },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Share your custom hints in &lt;a href=&#34;https://github.com/m4xshen/hardtime.nvim/discussions/categories/custom-hints&#34;&gt;discussion&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ll consider adding them to the default config if they&#39;re useful and general enough.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/m4xshen/hardtime.nvim/raw/main/lua/hardtime/config.lua&#34;&gt;Default config&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;🦾 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/m4xshen/hardtime.nvim/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>goolord/alpha-nvim</title>
    <updated>2023-09-03T01:54:52Z</updated>
    <id>tag:github.com,2023-09-03:/goolord/alpha-nvim</id>
    <link href="https://github.com/goolord/alpha-nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a lua powered greeter like vim-startify / dashboard-nvim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;α alpha-nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;alpha&lt;/code&gt; is a fast and fully programmable greeter for neovim.&lt;/p&gt; &#xA;&lt;p&gt;share or snipe some custom themes @ &lt;a href=&#34;https://github.com/goolord/alpha-nvim/discussions/16&#34;&gt;https://github.com/goolord/alpha-nvim/discussions/16&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h4&gt;vim-startify theme&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24906808/133367667-0f73e9e1-ea75-46d1-8e1b-ff0ecfeafeb1.png&#34; alt=&#34;glamor shot&#34;&gt; With &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;goolord/alpha-nvim&#39;,&#xA;    dependencies = { &#39;nvim-tree/nvim-web-devicons&#39; },&#xA;    config = function ()&#xA;        require&#39;alpha&#39;.setup(require&#39;alpha.themes.startify&#39;.config)&#xA;    end&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;goolord/alpha-nvim&#39;,&#xA;    requires = { &#39;nvim-tree/nvim-web-devicons&#39; },&#xA;    config = function ()&#xA;        require&#39;alpha&#39;.setup(require&#39;alpha.themes.startify&#39;.config)&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;..or using paq:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    &#34;goolord/alpha-nvim&#34;;&#xA;    &#34;nvim-tree/nvim-web-devicons&#34;;&#xA;}&#xA;require&#39;alpha&#39;.setup(require&#39;alpha.themes.startify&#39;.config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;dashboard-nvim theme&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24906808/132604236-4f20adc4-706c-49b4-b473-ebfd6a7f0784.png&#34; alt=&#34;glamor shot&#34;&gt; With &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;goolord/alpha-nvim&#39;,&#xA;    config = function ()&#xA;        require&#39;alpha&#39;.setup(require&#39;alpha.themes.dashboard&#39;.config)&#xA;    end&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;goolord/alpha-nvim&#39;,&#xA;    config = function ()&#xA;        require&#39;alpha&#39;.setup(require&#39;alpha.themes.dashboard&#39;.config)&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;..or using paq:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    &#34;goolord/alpha-nvim&#34;;&#xA;    &#34;nvim-tree/nvim-web-devicons&#34;;&#xA;}&#xA;require&#39;alpha&#39;.setup(require&#39;alpha.themes.dashboard&#39;.config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you want sessions, see&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shatur/neovim-session-manager&#34;&gt;https://github.com/Shatur/neovim-session-manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;:h :mks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;this theme makes some assumptions about your default keybindings to customize the buttons, see :h alpha-example&lt;/p&gt; &#xA;&lt;h2&gt;Elevator pitch&lt;/h2&gt; &#xA;&lt;p&gt;alpha is really a general purpose neovim ui library with some conveniences for writing a greeter ui. it has a functional, data-oriented api design. themes are expressed entirely as data, which is what makes alpha &#34;fully programmable&#34;. alpha is also the fastest greeter I&#39;ve benchmarked (which is why I daily drive it myself!).&lt;/p&gt; &#xA;&lt;h2&gt;Profiling Results&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24906808/131830001-31523c86-fee2-4f90-b23d-4bd1e152a385.png&#34; alt=&#34;benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;using &lt;a href=&#34;https://github.com/lewis6991/impatient.nvim&#34;&gt;https://github.com/lewis6991/impatient.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;only config! doesn&#39;t measure drawing, some startup plugins won&#39;t measure drawing either&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;https://github.com/glepnir/dashboard-nvim&lt;/a&gt; - inspiration, code reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-startify&#34;&gt;https://github.com/mhinz/vim-startify&lt;/a&gt; - inspiration&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>