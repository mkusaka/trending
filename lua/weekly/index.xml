<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-21T01:57:07Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rcarriga/nvim-dap-ui</title>
    <updated>2023-05-21T01:57:07Z</updated>
    <id>tag:github.com,2023-05-21:/rcarriga/nvim-dap-ui</id>
    <link href="https://github.com/rcarriga/nvim-dap-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A UI for nvim-dap&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-dap-ui&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;A UI for &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; which provides a good out of the box configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/191198389-a1321363-c0f1-4ff1-b663-ab1350d2b393.png&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install with your favourite package manager alongside nvim-dap&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;&lt;strong&gt;dein&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#34;mfussenegger/nvim-dap&#34;)&#xA;call dein#add(&#34;rcarriga/nvim-dap-ui&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;strong&gt;vim-plug&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;mfussenegger/nvim-dap&#39;&#xA;Plug &#39;rcarriga/nvim-dap-ui&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;strong&gt;packer.nvim&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;rcarriga/nvim-dap-ui&#34;, requires = {&#34;mfussenegger/nvim-dap&#34;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is highly recommended to use &lt;a href=&#34;https://github.com/folke/neodev.nvim&#34;&gt;neodev.nvim&lt;/a&gt; to enable type checking for nvim-dap-ui to get type checking, documentation and autocompletion for all API functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neodev&#34;).setup({&#xA;  library = { plugins = { &#34;nvim-dap-ui&#34; }, types = true },&#xA;  ...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default icons use &lt;a href=&#34;https://github.com/microsoft/vscode-codicons&#34;&gt;codicons&lt;/a&gt;. It&#39;s recommended to use this &lt;a href=&#34;https://github.com/ChristianChiarulli/neovim-codicons&#34;&gt;fork&lt;/a&gt; which fixes alignment issues for the terminal. If your terminal doesn&#39;t support font fallback and you need to have icons included in your font, you can patch it via &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts#option-8-patch-your-own-font&#34;&gt;Font Patcher&lt;/a&gt;. There is a simple step by step guide &lt;a href=&#34;https://github.com/mortepau/codicons.nvim#how-to-patch-fonts&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;nvim-dap-ui is built on the idea of &#34;elements&#34;. These elements are windows which provide different features.&lt;/p&gt; &#xA;&lt;p&gt;Elements are grouped into layouts which can be placed on any side of the screen. There can be any number of layouts, containing whichever elements desired.&lt;/p&gt; &#xA;&lt;p&gt;Elements can also be displayed temporarily in a floating window.&lt;/p&gt; &#xA;&lt;p&gt;Each element has a set of &lt;em&gt;mappings&lt;/em&gt; for element-specific possible actions, detailed below for each element. The total set of actions/mappings and their default shortcuts are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;edit&lt;/code&gt;: &lt;code&gt;e&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;expand&lt;/code&gt;: &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; or left click&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;open&lt;/code&gt;: &lt;code&gt;o&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;remove&lt;/code&gt;: &lt;code&gt;d&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;repl&lt;/code&gt;: &lt;code&gt;r&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle&lt;/code&gt;: &lt;code&gt;t&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h dapui.setup()&lt;/code&gt; for configuration options and defaults.&lt;/p&gt; &#xA;&lt;h3&gt;Variable Scopes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126842891-c5175f13-5eb7-4d0a-9dae-620c4d31448a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;scopes&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays the available scopes and variables within them.&lt;/p&gt; &#xA;&lt;p&gt;Mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;edit&lt;/code&gt;: Edit the value of a variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;expand&lt;/code&gt;: Toggle showing any children of variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;repl&lt;/code&gt;: Send variable to REPL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Threads and Stack Frames&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126843106-5dce09dc-49d0-4aaa-ba98-fd8f17b31414.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;stacks&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays the running threads and their stack frames.&lt;/p&gt; &#xA;&lt;p&gt;Mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;open&lt;/code&gt;: Jump to a place within the stack frame.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle&lt;/code&gt;: Toggle displaying &lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/specification#Types_StackFrame&#34;&gt;subtle&lt;/a&gt; frames&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Watch Expressions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126843390-4e1575d8-9d7d-4f43-8680-094cfe9eae63.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;watches&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Allows creation of expressions to watch the value of in the context of the current frame. This uses a prompt buffer for input. To enter a new expression, just enter insert mode and you will see a prompt appear. Press enter to submit&lt;/p&gt; &#xA;&lt;p&gt;Mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;expand&lt;/code&gt;: Toggle showing the children of an expression.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;remove&lt;/code&gt;: Remove the watched expression.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;edit&lt;/code&gt;: Edit an expression or set the value of a child variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;repl&lt;/code&gt;: Send expression to REPL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Breakpoints&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126843577-361645e4-6265-40eb-86dc-d6607512a15e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;breakpoints&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;List all breakpoints currently set.&lt;/p&gt; &#xA;&lt;p&gt;Mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;open&lt;/code&gt;: Jump to the location the breakpoint is set&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle&lt;/code&gt;: Enable/disable the selected breakpoint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;REPL&lt;/h3&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;repl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The REPL provided by nvim-dap.&lt;/p&gt; &#xA;&lt;h3&gt;Console&lt;/h3&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;console&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The console window used by nvim-dap for the integrated terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To get started simply call the setup method on startup, optionally providing custom settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dapui&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can open, close and toggle the windows with corresponding functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dapui&#34;).open()&#xA;require(&#34;dapui&#34;).close()&#xA;require(&#34;dapui&#34;).toggle()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each of the functions optionally takes either &lt;code&gt;&#34;sidebar&#34;&lt;/code&gt; or &lt;code&gt;&#34;tray&#34;&lt;/code&gt; as an argument to only change the specified component.&lt;/p&gt; &#xA;&lt;p&gt;You can use nvim-dap events to open and close the windows automatically (&lt;code&gt;:help dap-extensions&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local dap, dapui = require(&#34;dap&#34;), require(&#34;dapui&#34;)&#xA;dap.listeners.after.event_initialized[&#34;dapui_config&#34;] = function()&#xA;  dapui.open()&#xA;end&#xA;dap.listeners.before.event_terminated[&#34;dapui_config&#34;] = function()&#xA;  dapui.close()&#xA;end&#xA;dap.listeners.before.event_exited[&#34;dapui_config&#34;] = function()&#xA;  dapui.close()&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Floating Elements&lt;/h3&gt; &#xA;&lt;p&gt;For elements that are not opened in the tray or sidebar, you can open them in a floating window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126844102-8789effb-4276-4599-afe6-a074b019c38d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dapui&#34;).float_element(&amp;lt;element ID&amp;gt;, &amp;lt;optional settings&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not provide an element ID, you will be queried to select one.&lt;/p&gt; &#xA;&lt;p&gt;The optional settings can included the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;width: number&lt;/code&gt; Width of the window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;height: number&lt;/code&gt; Height of the window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enter: boolean&lt;/code&gt; Enter the floating window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;position: string&lt;/code&gt; Position of floating window. &lt;code&gt;center&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Call the same function again while the window is open and the cursor will jump to the floating window. The REPL will automatically jump to the floating window on open.&lt;/p&gt; &#xA;&lt;h3&gt;Evaluate Expression&lt;/h3&gt; &#xA;&lt;p&gt;For a one time expression evaluation, you can call a hover window to show a value&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126844454-691d691c-4550-46fe-89dc-25e1e9681545.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dapui&#34;).eval(&amp;lt;expression&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an expression is not provided it will use the word under the cursor, or if in visual mode, the currently highlighted text. You can define a visual mapping like so&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;vnoremap &amp;lt;M-k&amp;gt; &amp;lt;Cmd&amp;gt;lua require(&#34;dapui&#34;).eval()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call the same function again while the window is open to jump to the eval window.&lt;/p&gt; &#xA;&lt;p&gt;The same mappings as the variables element apply within the hover window.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>esx-framework/esx_core</title>
    <updated>2023-05-21T01:57:07Z</updated>
    <id>tag:github.com,2023-05-21:/esx-framework/esx_core</id>
    <link href="https://github.com/esx-framework/esx_core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Repo For core resources for esx-legacy&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;ESX Legacy&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://discord.esx-framework.org/&#34;&gt;Discord&lt;/a&gt; - &lt;a href=&#34;https://esx-framework.org/&#34;&gt;Website&lt;/a&gt; - &lt;a href=&#34;https://documentation.esx-framework.org/legacy/installation&#34;&gt;Documentation&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;Want more resources? You can browse the &lt;a href=&#34;https://github.com/esx-community/&#34;&gt;ESX Community Github&lt;/a&gt; or &lt;a href=&#34;https://forum.cfx.re/tag/esx&#34;&gt;Cfx.re Releases board&lt;/a&gt; for more! &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;ESX is the leading framework, trusted By thousands of commmunitys for the heighest quality roleplay servers on FiveM&lt;/b&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;💗 Supporters&lt;/h3&gt; &#xA;&lt;p&gt;Interested in helping us? &lt;a href=&#34;https://www.patreon.com/esx&#34; title=&#34;Take a look at our patreon&#34;&gt;Take a look at our patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;We would like to sincerely thank the following donors who helped fund the development of ESX.&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mohamad Buhamad - Michael Hein - RoadToSix - Montree Narathong&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Saydoon - Muhannad alyamani - iSentrie - Wecity - Samuel Nicol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kyle McShea - Artin - Mathias Christoffersen - Jaylan Yilmaz - Callum&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CONGRESS KW - Michael Hein - Smery sitbon - daZepelin - CMF Community&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;📌 License&lt;/h3&gt; &#xA;&lt;p&gt;ESX-legacy - ESX framework for FiveM&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (C) 2015-2023 ESX-Framework&#xA;&#xA;This program Is free software: you can redistribute it And/Or modify it under the terms Of the GNU General Public License As published by the Free Software Foundation, either version 3 Of the License, Or (at your option) any later version.&#xA;&#xA;This program Is distributed In the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty Of MERCHANTABILITY Or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License For more details.&#xA;&#xA;You should have received a copy Of the GNU General Public License along with this program. If Not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Powered by &lt;a href=&#34;https://www.oxygenserv.com/en/&#34;&gt;Oxygenserv&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ThePrimeagen/harpoon</title>
    <updated>2023-05-21T01:57:07Z</updated>
    <id>tag:github.com,2023-05-21:/ThePrimeagen/harpoon</id>
    <link href="https://github.com/ThePrimeagen/harpoon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Harpoon&lt;/h1&gt; &#xA; &lt;h5&gt;Getting you where you want with the fewest keystrokes.&lt;/h5&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://www.lua.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://neovim.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim%200.5+-green.svg?style=for-the-badge&amp;amp;logo=neovim&#34; alt=&#34;Neovim&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ThePrimeagen/harpoon/master/harpoon.png&#34; alt=&#34;Harpoon&#34;&gt; -- image provided by &lt;strong&gt;Bob Rust&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⇁ WIP&lt;/h2&gt; &#xA;&lt;p&gt;This is not fully baked, though used by several people. If you experience any issues, see some improvement you think would be amazing, or just have some feedback for harpoon (or me), make an issue!&lt;/p&gt; &#xA;&lt;h2&gt;⇁ The Problems:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You&#39;re working on a codebase. medium, large, tiny, whatever. You find yourself frequenting a small set of files and you are tired of using a fuzzy finder, &lt;code&gt;:bnext&lt;/code&gt; &amp;amp; &lt;code&gt;:bprev&lt;/code&gt; are getting too repetitive, alternate file doesn&#39;t quite cut it, etc etc.&lt;/li&gt; &#xA; &lt;li&gt;You want to execute some project specific commands or have any number of persistent terminals that can be easily navigated to.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;⇁ The Solutions:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The ability to specify, or on the fly, mark and create persisting key strokes to go to the files you want.&lt;/li&gt; &#xA; &lt;li&gt;Unlimited terminals and navigation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;⇁ Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim 0.5.0+ required&lt;/li&gt; &#xA; &lt;li&gt;install using your favorite plugin manager (&lt;code&gt;vim-plug&lt;/code&gt; in this example)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39; &#34; don&#39;t forget to add this one if you don&#39;t have it yet!&#xA;Plug &#39;ThePrimeagen/harpoon&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⇁ Harpooning&lt;/h2&gt; &#xA;&lt;p&gt;here we&#39;ll explain how to wield the power of the harpoon:&lt;/p&gt; &#xA;&lt;h3&gt;Marks&lt;/h3&gt; &#xA;&lt;p&gt;you mark files you want to revisit later on&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.mark&#34;).add_file()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File Navigation&lt;/h3&gt; &#xA;&lt;p&gt;view all project marks with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.ui&#34;).toggle_quick_menu()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can go up and down the list, enter, delete or reorder. &lt;code&gt;q&lt;/code&gt; and &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; exit and save the menu&lt;/p&gt; &#xA;&lt;p&gt;you also can switch to any mark without bringing up the menu, use the below with the desired mark index&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.ui&#34;).nav_file(3)                  -- navigates to file 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can also cycle the list in both directions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.ui&#34;).nav_next()                   -- navigates to next mark&#xA;:lua require(&#34;harpoon.ui&#34;).nav_prev()                   -- navigates to previous mark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from the quickmenu, open a file in: a vertical split with control+v, a horizontal split with control+x, a new tab with control+t&lt;/p&gt; &#xA;&lt;h3&gt;Terminal Navigation&lt;/h3&gt; &#xA;&lt;p&gt;this works like file navigation except that if there is no terminal at the specified index a new terminal is created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.term&#34;).gotoTerminal(1)             -- navigates to term 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands to Terminals&lt;/h3&gt; &#xA;&lt;p&gt;commands can be sent to any terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.term&#34;).sendCommand(1, &#34;ls -La&#34;)    -- sends ls -La to tmux window 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;further more commands can be stored for later quick&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#39;harpoon.cmd-ui&#39;).toggle_quick_menu()       -- shows the commands menu&#xA;lua require(&#34;harpoon.term&#34;).sendCommand(1, 1)           -- sends command 1 to term 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tmux Support&lt;/h3&gt; &#xA;&lt;p&gt;tmux is supported out of the box and can be used as a drop-in replacement to normal terminals by simply switching &lt;code&gt;&#39;term&#39; with &#39;tmux&#39;&lt;/code&gt; like so&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.tmux&#34;).gotoTerminal(1)             -- goes to the first tmux window&#xA;lua require(&#34;harpoon.tmux&#34;).sendCommand(1, &#34;ls -La&#34;)    -- sends ls -La to tmux window 1&#xA;lua require(&#34;harpoon.tmux&#34;).sendCommand(1, 1)           -- sends command 1 to tmux window 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sendCommand&lt;/code&gt; and &lt;code&gt;goToTerminal&lt;/code&gt; also accept any valid &lt;a href=&#34;https://man7.org/linux/man-pages/man1/tmux.1.html#COMMANDS&#34;&gt;tmux pane identifier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.tmux&#34;).gotoTerminal(&#34;{down-of}&#34;)   -- focus the pane directly below&#xA;lua require(&#34;harpoon.tmux&#34;).sendCommand(&#34;%3&#34;, &#34;ls&#34;)     -- send a command to the pane with id &#39;%3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you switch to a tmux window you can always switch back to neovim, this is a little bash script that will switch to the window which is running neovim.&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;code&gt;tmux.conf&lt;/code&gt; (or anywhere you have keybinds), add this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bind-key -r G run-shell &#34;path-to-harpoon/harpoon/scripts/tmux/switch-back-to-nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Telescope Support&lt;/h3&gt; &#xA;&lt;p&gt;1st register harpoon as a telescope extension&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;telescope&#34;).load_extension(&#39;harpoon&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;currently only marks are supported in telescope&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Telescope harpoon marks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⇁ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;if configuring harpoon is desired it must be done through harpoons setup function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;harpoon&#34;).setup({ ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Global Settings&lt;/h3&gt; &#xA;&lt;p&gt;here are all the available global settings with their default values&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;global_settings = {&#xA;    -- sets the marks upon calling `toggle` on the ui, instead of require `:w`.&#xA;    save_on_toggle = false,&#xA;&#xA;    -- saves the harpoon file upon every change. disabling is unrecommended.&#xA;    save_on_change = true,&#xA;&#xA;    -- sets harpoon to run the command immediately as it&#39;s passed to the terminal when calling `sendCommand`.&#xA;    enter_on_sendcmd = false,&#xA;&#xA;    -- closes any tmux windows harpoon that harpoon creates when you close Neovim.&#xA;    tmux_autoclose_windows = false,&#xA;&#xA;    -- filetypes that you want to prevent from adding to the harpoon list menu.&#xA;    excluded_filetypes = { &#34;harpoon&#34; },&#xA;&#xA;    -- set marks specific to each git branch inside git repository&#xA;    mark_branch = false,&#xA;&#xA;    -- enable tabline with harpoon marks&#xA;    tabline = false,&#xA;    tabline_prefix = &#34;   &#34;,&#xA;    tabline_suffix = &#34;   &#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Preconfigured Terminal Commands&lt;/h3&gt; &#xA;&lt;p&gt;to preconfigure terminal commands for later use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;projects = {&#xA;    -- Yes $HOME works&#xA;    [&#34;$HOME/personal/vim-with-me/server&#34;] = {&#xA;        term = {&#xA;            cmds = {&#xA;                &#34;./env &amp;amp;&amp;amp; npx ts-node src/index.ts&#34;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⇁ Logging&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;logs are written to &lt;code&gt;harpoon.log&lt;/code&gt; within the nvim cache path (&lt;code&gt;:echo stdpath(&#34;cache&#34;)&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;available log levels are &lt;code&gt;trace&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, or &lt;code&gt;fatal&lt;/code&gt;. &lt;code&gt;warn&lt;/code&gt; is default&lt;/li&gt; &#xA; &lt;li&gt;log level can be set with &lt;code&gt;vim.g.harpoon_log_level&lt;/code&gt; (must be &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;setup()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;launching nvim with &lt;code&gt;HARPOON_LOG=debug nvim&lt;/code&gt; takes precedence over &lt;code&gt;vim.g.harpoon_log_level&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;invalid values default back to &lt;code&gt;warn&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⇁ Others&lt;/h2&gt; &#xA;&lt;h4&gt;How do Harpoon marks differ from vim global marks&lt;/h4&gt; &#xA;&lt;p&gt;they serve a similar purpose however harpoon marks differ in a few key ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;They auto update their position within the file&lt;/li&gt; &#xA; &lt;li&gt;They are saved &lt;em&gt;per project&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;They can be hand edited vs replaced (swapping is easier)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;The Motivation behind Harpoon terminals&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;I want to use the terminal since I can gF and &#xA;  &lt;c-w&gt;&#xA;   gF to any errors arising from execution that are within the terminal that are not appropriate for something like dispatch. (not just running tests but perhaps a server that runs for X amount of time before crashing).&#xA;  &lt;/c-w&gt;&lt;/li&gt; &#xA; &lt;li&gt;I want the terminal to be persistent and I can return to one of many terminals with some finger wizardry and reparse any of the execution information that was not necessarily error related.&lt;/li&gt; &#xA; &lt;li&gt;I would like to have commands that can be tied to terminals and sent them without much thinking. Some sort of middle ground between vim-test and just typing them into a terminal (configuring netflix&#39;s television project isn&#39;t quite building and there are tons of ways to configure).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Use a dynamic width for the Harpoon popup menu&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes the default width of &lt;code&gt;60&lt;/code&gt; is not wide enough. The following example demonstrates how to configure a custom width by setting the menu&#39;s width relative to the current window&#39;s width.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;harpoon&#34;).setup({&#xA;    menu = {&#xA;        width = vim.api.nvim_win_get_width(0) - 4,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tabline&lt;/h4&gt; &#xA;&lt;p&gt;By default, the tabline will use the default theme of your theme. You can customize by editing the following highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HarpoonInactive&lt;/li&gt; &#xA; &lt;li&gt;HarpoonActive&lt;/li&gt; &#xA; &lt;li&gt;HarpoonNumberActive&lt;/li&gt; &#xA; &lt;li&gt;HarpoonNumberInactive&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example to make it cleaner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#39;highlight! HarpoonInactive guibg=NONE guifg=#63698c&#39;)&#xA;vim.cmd(&#39;highlight! HarpoonActive guibg=NONE guifg=white&#39;)&#xA;vim.cmd(&#39;highlight! HarpoonNumberActive guibg=NONE guifg=#7aa2f7&#39;)&#xA;vim.cmd(&#39;highlight! HarpoonNumberInactive guibg=NONE guifg=#7aa2f7&#39;)&#xA;vim.cmd(&#39;highlight! TabLineFill guibg=NONE guifg=white&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result: &lt;img src=&#34;https://i.imgur.com/8i8mKJD.png&#34; alt=&#34;tabline&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⇁ Social&lt;/h2&gt; &#xA;&lt;p&gt;For questions about Harpoon, there&#39;s a #harpoon channel on &lt;a href=&#34;https://discord.gg/theprimeagen&#34;&gt;the Primagen&#39;s Discord&lt;/a&gt; server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/theprimeagen&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/theprimeagen&#34;&gt;Twitch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ThePrimeagen&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>