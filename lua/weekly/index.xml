<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-05T08:42:39Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ayamir/nvimdots</title>
    <updated>2023-02-05T08:42:39Z</updated>
    <id>tag:github.com,2023-02-05:/ayamir/nvimdots</id>
    <link href="https://github.com/ayamir/nvimdots" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A well configured and structured Neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; nvimdots &lt;br&gt; &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/stable&#34;&gt; &lt;img alt=&#34;NeoVim Version Capability&#34; src=&#34;https://img.shields.io/badge/Supports%20Nvim-v0.8-A6D895?style=for-the-badge&amp;amp;colorA=363A4F&amp;amp;logo=neovim&amp;amp;logoColor=D9E0EE&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/ayamir/nvimdots/releases&#34;&gt; &lt;img alt=&#34;Release&#34; src=&#34;https://img.shields.io/github/v/release/ayamir/nvimdots.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;color=F2CDCD&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=363A4F&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ayamir/nvimdots/stargazers&#34;&gt; &lt;img alt=&#34;Stars&#34; src=&#34;https://img.shields.io/github/stars/ayamir/nvimdots?colorA=363A4F&amp;amp;colorB=B7BDF8&amp;amp;logo=adafruit&amp;amp;logoColor=D9E0EE&amp;amp;style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/ayamir/nvimdots/issues&#34;&gt; &lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues-raw/ayamir/nvimdots?colorA=363A4f&amp;amp;colorB=F5A97F&amp;amp;logo=github&amp;amp;logoColor=D9E0EE&amp;amp;style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/ayamir/nvimdots/contributors&#34;&gt; &lt;img alt=&#34;Contributors&#34; src=&#34;https://img.shields.io/github/contributors/ayamir/nvimdots?colorA=363A4F&amp;amp;colorB=B5E8E0&amp;amp;logo=git&amp;amp;logoColor=D9E0EE&amp;amp;style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;img alt=&#34;Code Size&#34; src=&#34;https://img.shields.io/github/languages/code-size/ayamir/nvimdots?colorA=363A4F&amp;amp;colorB=DDB6F2&amp;amp;logo=gitlfs&amp;amp;logoColor=D9E0EE&amp;amp;style=for-the-badge&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;ü™∑ Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This repo hosts my &lt;a href=&#34;https://neovim.io/&#34;&gt;NeoVim&lt;/a&gt; configuration for Linux, macOS, and Windows. &lt;code&gt;init.lua&lt;/code&gt; is the config entry point.&lt;/p&gt; &#xA;&lt;p&gt;It contains two branches:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Branch&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Completion Solution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;main&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;config for nvim 0.8 stable&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0.7&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;config for nvim 0.7 stable&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;I use &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt; to manage plugins.&lt;/p&gt; &#xA;&lt;p&gt;Chinese introduction is &lt;a href=&#34;https://zhuanlan.zhihu.com/p/382092667&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üéê Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast.&lt;/strong&gt; Less than &lt;strong&gt;30ms&lt;/strong&gt; to start (Depends on SSD and CPU, tested on Zephyrus G14 2022 version).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple.&lt;/strong&gt; Run out of the box.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modern.&lt;/strong&gt; Pure &lt;code&gt;lua&lt;/code&gt; config.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modular.&lt;/strong&gt; Easy to customize.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful.&lt;/strong&gt; Full functionality to code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üèó How to Install&lt;/h2&gt; &#xA;&lt;p&gt;Just run the following interactive bootstrap command, and you&#39;re good to go üëç&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt; &lt;em&gt;(Note: This script REQUIRES &lt;code&gt;pwsh&lt;/code&gt; &amp;gt; &lt;code&gt;v7.1&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/ayamir/nvimdots/HEAD/install/install.ps1&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;*nix&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;if command -v curl &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then&#xA;    bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/ayamir/nvimdots/HEAD/install/install.sh)&#34;&#xA;else&#xA;    bash -c &#34;$(wget -O- https://raw.githubusercontent.com/ayamir/nvimdots/HEAD/install/install.sh)&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s strongly recommended to read &lt;a href=&#34;https://github.com/ayamir/nvimdots/wiki/Prerequisites&#34;&gt;Wiki: Prerequisites&lt;/a&gt; before starting, especially for *nix users.&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; üó∫Ô∏è Keybindings &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Refer to &lt;a href=&#34;https://github.com/ayamir/nvimdots/wiki/Keybindings&#34; rel=&#34;nofollow&#34;&gt;Wiki: Keybindings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; üîå Plugins &amp;amp; Deps &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Refer to &lt;a href=&#34;https://github.com/ayamir/nvimdots/wiki/Plugins&#34; rel=&#34;nofollow&#34;&gt;Wiki: Plugins&lt;/a&gt; &lt;br&gt;&lt;em&gt;(You can also find a deps diagram there!)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; üîß Usage &amp;amp; Customization &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Refer to &lt;a href=&#34;https://github.com/ayamir/nvimdots/wiki/Usage&#34; rel=&#34;nofollow&#34;&gt;Wiki: Usage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; ü§î FAQ &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Refer to &lt;a href=&#34;https://github.com/ayamir/nvimdots/wiki/Issues&#34; rel=&#34;nofollow&#34;&gt;Wiki: FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; ‚è±Ô∏è Startup Time &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/startuptime.png&#34; width=&#34;80%&#34; alt=&#34;StartupTime&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/vimstartup.png&#34; width=&#34;60%&#34; alt=&#34;Vim-StartupTime&#34;&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tested with &lt;a href=&#34;https://github.com/rhysd/vim-startuptime&#34;&gt;rhysd/vim-startuptime&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; üì∏ Screenshots &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/dashboard.png&#34; alt=&#34;Dashboard&#34;&gt; &lt;em&gt;Dashboard&lt;/em&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/telescope.png&#34; alt=&#34;Telescope&#34;&gt; &lt;em&gt;Telescope&lt;/em&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/coding.png&#34; alt=&#34;Coding&#34;&gt; &lt;em&gt;Coding&lt;/em&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/dap.png&#34; alt=&#34;Debugging&#34;&gt; &lt;em&gt;Debugging&lt;/em&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/gitui.png&#34; alt=&#34;Lazygit&#34;&gt; &lt;em&gt;Lazygit with built-in Terminal&lt;/em&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/legendary.png&#34; alt=&#34;Legendary&#34;&gt; &lt;em&gt;Command quickref&lt;/em&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üëê Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you find anything that needs improving, do not hesitate to point it out or create a PR.&lt;/li&gt; &#xA; &lt;li&gt;If you come across an issue, you can first use &lt;code&gt;:checkhealth&lt;/code&gt; command provided by nvim to trouble-shoot yourself. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you still have such problems, feel free to open a new issue!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ù§Ô∏è Thanks to&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ayamir&#34;&gt;ayamir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Jint-lzxy&#34;&gt;Jint-lzxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CharlesChiuGit&#34;&gt;CharlesChiuGit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üéâ Acknowledgement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/nvim&#34;&gt;glepnir/nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìú License&lt;/h2&gt; &#xA;&lt;p&gt;This NeoVim configuration is released under the MIT license, which grants the following permissions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Commercial use&lt;/li&gt; &#xA; &lt;li&gt;Distribution&lt;/li&gt; &#xA; &lt;li&gt;Modification&lt;/li&gt; &#xA; &lt;li&gt;Private use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more convoluted language, see the &lt;a href=&#34;https://github.com/ayamir/nvimdots/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>neovim/nvim-lspconfig</title>
    <updated>2023-02-05T08:42:39Z</updated>
    <id>tag:github.com,2023-02-05:/neovim/nvim-lspconfig</id>
    <link href="https://github.com/neovim/nvim-lspconfig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickstart configs for Nvim LSP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lspconfig&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;Configs&lt;/a&gt; for the &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;Nvim LSP client&lt;/a&gt; (&lt;code&gt;:help lsp&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Do not file Nvim LSP client issues here.&lt;/strong&gt; The Nvim LSP client does not live here. This is only a collection of LSP configs.&lt;/li&gt; &#xA; &lt;li&gt;If you found a bug in the Nvim LSP client, &lt;a href=&#34;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&#34;&gt;report it at the Nvim core repo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;These configs are &lt;strong&gt;best-effort and unsupported.&lt;/strong&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&#34;&gt;contributions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also &lt;code&gt;:help lsp-config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires neovim version 0.7 above. Update Nvim and nvim-lspconfig before reporting an issue.&lt;/li&gt; &#xA; &lt;li&gt;Install nvim-lspconfig like any other Vim plugin, e.g. with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local use = require(&#39;packer&#39;).use&#xA;require(&#39;packer&#39;).startup(function()&#xA;  use &#39;wbthomason/packer.nvim&#39; -- Package manager&#xA;  use &#39;neovim/nvim-lspconfig&#39; -- Configurations for Nvim LSP&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install a language server, e.g. &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md#pyright&#34;&gt;pyright&lt;/a&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g pyright&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the language server setup to your init.lua. &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;lspconfig&#39;.pyright.setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Launch Nvim, the language server will attach and provide diagnostics. &lt;pre&gt;&lt;code&gt;nvim main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;:LspInfo&lt;/code&gt; to see the status or to troubleshoot.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#Suggested-configuration&#34;&gt;Suggested configuration&lt;/a&gt; to setup common mappings and omnifunc completion.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt; (&lt;code&gt;:help lspconfig-all&lt;/code&gt; from Nvim) for the full list of configs, including installation instructions and additional, optional, customization suggestions for each language server. For servers that are not on your system path (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you must manually add &lt;code&gt;cmd&lt;/code&gt; to the &lt;code&gt;setup&lt;/code&gt; parameter. Most language servers can be installed in less than a minute.&lt;/p&gt; &#xA;&lt;h2&gt;Suggested configuration&lt;/h2&gt; &#xA;&lt;p&gt;nvim-lspconfig does not set keybindings or enable completion by default. The following example configuration provides suggested keymaps for the most commonly used language server functions, and manually triggered completion with omnifunc (&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note: you must pass the defined &lt;code&gt;on_attach&lt;/code&gt; as an argument to &lt;strong&gt;every &lt;code&gt;setup {}&lt;/code&gt; call&lt;/strong&gt; and the keybindings in &lt;code&gt;on_attach&lt;/code&gt; &lt;strong&gt;only take effect on buffers with an active language server&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Mappings.&#xA;-- See `:help vim.diagnostic.*` for documentation on any of the below functions&#xA;local opts = { noremap=true, silent=true }&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;e&#39;, vim.diagnostic.open_float, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;[d&#39;, vim.diagnostic.goto_prev, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;]d&#39;, vim.diagnostic.goto_next, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;q&#39;, vim.diagnostic.setloclist, opts)&#xA;&#xA;-- Use an on_attach function to only map the following keys&#xA;-- after the language server attaches to the current buffer&#xA;local on_attach = function(client, bufnr)&#xA;  -- Enable completion triggered by &amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&#xA;  vim.api.nvim_buf_set_option(bufnr, &#39;omnifunc&#39;, &#39;v:lua.vim.lsp.omnifunc&#39;)&#xA;&#xA;  -- Mappings.&#xA;  -- See `:help vim.lsp.*` for documentation on any of the below functions&#xA;  local bufopts = { noremap=true, silent=true, buffer=bufnr }&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gD&#39;, vim.lsp.buf.declaration, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gd&#39;, vim.lsp.buf.definition, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;K&#39;, vim.lsp.buf.hover, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gi&#39;, vim.lsp.buf.implementation, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-k&amp;gt;&#39;, vim.lsp.buf.signature_help, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;wa&#39;, vim.lsp.buf.add_workspace_folder, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;wr&#39;, vim.lsp.buf.remove_workspace_folder, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;wl&#39;, function()&#xA;    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&#xA;  end, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;D&#39;, vim.lsp.buf.type_definition, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;rn&#39;, vim.lsp.buf.rename, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;ca&#39;, vim.lsp.buf.code_action, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;gr&#39;, vim.lsp.buf.references, bufopts)&#xA;  vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;f&#39;, function() vim.lsp.buf.format { async = true } end, bufopts)&#xA;end&#xA;&#xA;local lsp_flags = {&#xA;  -- This is the default in Nvim 0.7+&#xA;  debounce_text_changes = 150,&#xA;}&#xA;require(&#39;lspconfig&#39;)[&#39;pyright&#39;].setup{&#xA;    on_attach = on_attach,&#xA;    flags = lsp_flags,&#xA;}&#xA;require(&#39;lspconfig&#39;)[&#39;tsserver&#39;].setup{&#xA;    on_attach = on_attach,&#xA;    flags = lsp_flags,&#xA;}&#xA;require(&#39;lspconfig&#39;)[&#39;rust_analyzer&#39;].setup{&#xA;    on_attach = on_attach,&#xA;    flags = lsp_flags,&#xA;    -- Server-specific settings...&#xA;    settings = {&#xA;      [&#34;rust-analyzer&#34;] = {}&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Manual, triggered completion is provided by Nvim&#39;s builtin omnifunc. For &lt;em&gt;auto&lt;/em&gt;completion, a general purpose &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&#34;&gt;autocompletion plugin&lt;/a&gt; is required.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you have an issue, the first step is to reproduce with a &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/test/minimal_init.lua&#34;&gt;minimal configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The most common reasons a language server does not start or attach are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in each server&#39;s Lua module from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is an executable name instead of an absolute path to the executable, ensure it is on your path.&lt;/li&gt; &#xA; &lt;li&gt;Missing filetype plugins. Certain languages are not detecting by vim/neovim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set ft?&lt;/code&gt; shows the filetype and not an empty value.&lt;/li&gt; &#xA; &lt;li&gt;Not triggering root detection. &lt;strong&gt;Some&lt;/strong&gt; language servers will only start if it is opened in a directory, or child directory, containing a file which signals the &lt;em&gt;root&lt;/em&gt; of the project. Most of the time, this is a &lt;code&gt;.git&lt;/code&gt; folder, but each server defines the root config in the lua file. See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt; or the source for the list of root directories.&lt;/li&gt; &#xA; &lt;li&gt;You must pass &lt;code&gt;on_attach&lt;/code&gt; and &lt;code&gt;capabilities&lt;/code&gt; for &lt;strong&gt;each&lt;/strong&gt; &lt;code&gt;setup {}&lt;/code&gt; if you want these to take effect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Do not call &lt;code&gt;setup {}&lt;/code&gt; twice for the same server&lt;/strong&gt;. The second call to &lt;code&gt;setup {}&lt;/code&gt; will overwrite the first.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:LspInfo&lt;/code&gt;. Add the following to your init.vim to enable logging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.set_log_level(&#34;debug&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attempt to run the language server, and open the log with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:LspLog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of the time, the reason for failure is present in the logs.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; shows the status of active and configured language servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass &lt;code&gt;autostart = false&lt;/code&gt; to your &lt;code&gt;.setup{}&lt;/code&gt; call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStop &amp;lt;client_id&amp;gt;&lt;/code&gt; Defaults to stopping all buffer clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspRestart &amp;lt;client_id&amp;gt;&lt;/code&gt; Defaults to restarting all buffer clients.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki&#34;&gt;wiki&lt;/a&gt; for additional topics, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Installing-language-servers#automatically&#34;&gt;Automatic server installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Snippets&#34;&gt;Snippets support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Project-local-settings&#34;&gt;Project local settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Language-specific-plugins&#34;&gt;Recommended plugins for enhanced language server features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If you are missing a language server on the list in &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt;, contributing a new configuration for it helps others, especially if the server requires special setup. Follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a new file at &lt;code&gt;lua/lspconfig/server_configurations/SERVER_NAME.lua&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy an &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/server_configurations/&#34;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/server_configurations/texlab.lua&#34;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ask questions on our &lt;a href=&#34;https://neovim.discourse.group/c/7-category/7&#34;&gt;Discourse&lt;/a&gt; or in the &lt;a href=&#34;https://app.element.io/#/room/#neovim:matrix.org&#34;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>nagadomi/waifu2x</title>
    <updated>2023-02-05T08:42:39Z</updated>
    <id>tag:github.com,2023-02-05:/nagadomi/waifu2x</id>
    <link href="https://github.com/nagadomi/waifu2x" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Image Super-Resolution for Anime-Style Art&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;waifu2x&lt;/h1&gt; &#xA;&lt;p&gt;Image Super-Resolution for Anime-style art using Deep Convolutional Neural Networks. And it supports photo.&lt;/p&gt; &#xA;&lt;p&gt;The demo application can be found at &lt;a href=&#34;https://waifu2x.udp.jp/&#34;&gt;https://waifu2x.udp.jp/&lt;/a&gt; (Cloud version), &lt;a href=&#34;https://unlimited.waifu2x.net/&#34;&gt;https://unlimited.waifu2x.net/&lt;/a&gt; (In-Browser version).&lt;/p&gt; &#xA;&lt;h2&gt;2023/02 PyTorch version&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nagadomi/nunif&#34;&gt;nunif&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;waifu2x development has already been moved to the repository above.&lt;/p&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;Click to see the slide show.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nagadomi/waifu2x/master/images/slide.png&#34; alt=&#34;slide&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;waifu2x is inspired by SRCNN [1]. 2D character picture (HatsuneMiku) is licensed under CC BY-NC by piapro [2].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[1] Chao Dong, Chen Change Loy, Kaiming He, Xiaoou Tang, &#34;Image Super-Resolution Using Deep Convolutional Networks&#34;, &lt;a href=&#34;http://arxiv.org/abs/1501.00092&#34;&gt;http://arxiv.org/abs/1501.00092&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2] &#34;For Creators&#34;, &lt;a href=&#34;http://piapro.net/en_for_creators.html&#34;&gt;http://piapro.net/en_for_creators.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Public AMI&lt;/h2&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Software&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nagadomi/waifu2x/wiki/Third-Party&#34;&gt;Third-Party&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are a windows user, I recommend you to use &lt;a href=&#34;https://github.com/lltcggie/waifu2x-caffe&#34;&gt;waifu2x-caffe&lt;/a&gt;(Just download from &lt;code&gt;releases&lt;/code&gt; tab), &lt;a href=&#34;https://github.com/nihui/waifu2x-ncnn-vulkan&#34;&gt;waifu2x-ncnn-vulkan&lt;/a&gt; or &lt;a href=&#34;https://github.com/DeadSix27/waifu2x-converter-cpp&#34;&gt;waifu2x-conver-cpp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;Hardware&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NVIDIA GPU&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Platform&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://torch.ch/&#34;&gt;Torch7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit&#34;&gt;NVIDIA CUDA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LuaRocks packages (excludes torch7&#39;s default packages)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lua-csnappy&lt;/li&gt; &#xA; &lt;li&gt;md5&lt;/li&gt; &#xA; &lt;li&gt;uuid&lt;/li&gt; &#xA; &lt;li&gt;csvigo&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kernelsauce/turbo&#34;&gt;turbo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Setting Up the Command Line Tool Environment&lt;/h3&gt; &#xA;&lt;p&gt;(on Ubuntu 16.04)&lt;/p&gt; &#xA;&lt;h4&gt;Install CUDA&lt;/h4&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-linux/#ubuntu-installation&#34;&gt;NVIDIA CUDA Getting Started Guide for Linux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;http://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dpkg -i cuda-repo-ubuntu1404_7.5-18_amd64.deb&#xA;sudo apt-get update&#xA;sudo apt-get install cuda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install Package&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libsnappy-dev&#xA;sudo apt-get install libgraphicsmagick1-dev&#xA;sudo apt-get install libssl1.0-dev # for web server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: waifu2x requires little-cms2 linked graphicsmagick. if you use macOS/homebrew, See &lt;a href=&#34;https://github.com/nagadomi/waifu2x/issues/174#issuecomment-384466451&#34;&gt;#174&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Install Torch7&lt;/h4&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;http://torch.ch/docs/getting-started.html&#34;&gt;Getting started with Torch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For CUDA9.x/CUDA8.x, see &lt;a href=&#34;https://github.com/nagadomi/waifu2x/issues/222&#34;&gt;#222&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For CUDA10.x, see &lt;a href=&#34;https://github.com/nagadomi/waifu2x/issues/253#issuecomment-445448928&#34;&gt;#253&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Getting waifu2x&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth 1 https://github.com/nagadomi/waifu2x.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and install lua modules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd waifu2x&#xA;./install_lua_modules.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Validation&lt;/h4&gt; &#xA;&lt;p&gt;Testing the waifu2x command line tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Web Application&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;th web.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View at: &lt;a href=&#34;http://localhost:8812/&#34;&gt;http://localhost:8812/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Command line tools&lt;/h2&gt; &#xA;&lt;p&gt;Notes: If you have cuDNN library, than you can use cuDNN with &lt;code&gt;-force_cudnn 1&lt;/code&gt; option. cuDNN is too much faster than default kernel. If you got GPU out of memory error, you can avoid it with &lt;code&gt;-crop_size&lt;/code&gt; option (e.g. &lt;code&gt;-crop_size 128&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Noise Reduction&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -m noise -noise_level 1 -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -m noise -noise_level 0 -i input_image.png -o output_image.png&#xA;th waifu2x.lua -m noise -noise_level 2 -i input_image.png -o output_image.png&#xA;th waifu2x.lua -m noise -noise_level 3 -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2x Upscaling&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -m scale -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Noise Reduction + 2x Upscaling&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -m noise_scale -noise_level 1 -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -m noise_scale -noise_level 0 -i input_image.png -o output_image.png&#xA;th waifu2x.lua -m noise_scale -noise_level 2 -i input_image.png -o output_image.png&#xA;th waifu2x.lua -m noise_scale -noise_level 3 -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Batch conversion&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;find /path/to/imagedir -name &#34;*.png&#34; -o -name &#34;*.jpg&#34; &amp;gt; image_list.txt&#xA;th waifu2x.lua -m scale -l ./image_list.txt -o /path/to/outputdir/prefix_%d.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output format supports &lt;code&gt;%s&lt;/code&gt; and &lt;code&gt;%d&lt;/code&gt;(e.g. %06d). &lt;code&gt;%s&lt;/code&gt; will be replaced the basename of the source filename. &lt;code&gt;%d&lt;/code&gt; will be replaced a sequence number. For example, when input filename is &lt;code&gt;piyo.png&lt;/code&gt;, &lt;code&gt;%s_%03d.png&lt;/code&gt; will be replaced &lt;code&gt;piyo_001.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;code&gt;th waifu2x.lua -h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using photo model&lt;/h3&gt; &#xA;&lt;p&gt;Please add &lt;code&gt;-model_dir models/photo&lt;/code&gt; to command line option, if you want to use photo model. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -model_dir models/photo -m scale -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Video Encoding&lt;/h3&gt; &#xA;&lt;p&gt;* &lt;code&gt;avconv&lt;/code&gt; is alias of &lt;code&gt;ffmpeg&lt;/code&gt; on Ubuntu 14.04.&lt;/p&gt; &#xA;&lt;p&gt;Extracting images and audio from a video. (range: 00:09:00 ~ 00:12:00)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir frames&#xA;avconv -i data/raw.avi -ss 00:09:00 -t 00:03:00 -r 24 -f image2 frames/%06d.png&#xA;avconv -i data/raw.avi -ss 00:09:00 -t 00:03:00 audio.mp3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generating a image list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find ./frames -name &#34;*.png&#34; |sort &amp;gt; data/frame.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;waifu2x (for example, noise reduction)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir new_frames&#xA;th waifu2x.lua -m noise -noise_level 1 -resume 1 -l data/frame.txt -o new_frames/%d.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generating a video from waifu2xed images and audio.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;avconv -f image2 -framerate 24 -i new_frames/%d.png -i audio.mp3 -r 24 -vcodec libx264 -crf 16 video.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Train Your Own Model&lt;/h2&gt; &#xA;&lt;p&gt;Note1: If you have cuDNN library, you can use cudnn kernel with &lt;code&gt;-backend cudnn&lt;/code&gt; option. And, you can convert trained cudnn model to cunn model with &lt;code&gt;tools/rebuild.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note2: The command that was used to train for waifu2x&#39;s pretrained models is available at &lt;code&gt;appendix/train_upconv_7_art.sh&lt;/code&gt;, &lt;code&gt;appendix/train_upconv_7_photo.sh&lt;/code&gt;. Maybe it is helpful.&lt;/p&gt; &#xA;&lt;h3&gt;Data Preparation&lt;/h3&gt; &#xA;&lt;p&gt;Genrating a file list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find /path/to/image/dir -name &#34;*.png&#34; &amp;gt; data/image_list.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should use noise free images. In my case, waifu2x is trained with 6000 high-resolution-noise-free-PNG images.&lt;/p&gt; &#xA;&lt;p&gt;Converting training data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;th convert_data.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Train a Noise Reduction(level1) model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir models/my_model&#xA;th train.lua -model_dir models/my_model -method noise -noise_level 1 -test images/miku_noisy.png&#xA;# usage&#xA;th waifu2x.lua -model_dir models/my_model -m noise -noise_level 1 -i images/miku_noisy.png -o output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the performance of model with &lt;code&gt;models/my_model/noise1_best.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Train a Noise Reduction(level2) model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th train.lua -model_dir models/my_model -method noise -noise_level 2 -test images/miku_noisy.png&#xA;# usage&#xA;th waifu2x.lua -model_dir models/my_model -m noise -noise_level 2 -i images/miku_noisy.png -o output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the performance of model with &lt;code&gt;models/my_model/noise2_best.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Train a 2x UpScaling model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th train.lua -model upconv_7 -model_dir models/my_model -method scale -scale 2 -test images/miku_small.png&#xA;# usage&#xA;th waifu2x.lua -model_dir models/my_model -m scale -scale 2 -i images/miku_small.png -o output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the performance of model with &lt;code&gt;models/my_model/scale2.0x_best.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Train a 2x and noise reduction fusion model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th train.lua -model upconv_7 -model_dir models/my_model -method noise_scale -scale 2 -noise_level 1 -test images/miku_small.png&#xA;# usage&#xA;th waifu2x.lua -model_dir models/my_model -m noise_scale -scale 2 -noise_level 1 -i images/miku_small.png -o output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the performance of model with &lt;code&gt;models/my_model/noise1_scale2.0x_best.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;( Docker image is available at &lt;a href=&#34;https://hub.docker.com/r/nagadomi/waifu2x&#34;&gt;https://hub.docker.com/r/nagadomi/waifu2x&lt;/a&gt; )&lt;/p&gt; &#xA;&lt;p&gt;Requires &lt;a href=&#34;https://github.com/NVIDIA/nvidia-docker&#34;&gt;nvidia-docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t waifu2x .&#xA;docker run --gpus all -p 8812:8812 waifu2x th web.lua&#xA;docker run --gpus all -v `pwd`/images:/images waifu2x th waifu2x.lua -force_cudnn 1 -m scale -scale 2 -i /images/miku_small.png -o /images/output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that running waifu2x in without &lt;a href=&#34;https://devblogs.nvidia.com/parallelforall/cuda-pro-tip-understand-fat-binaries-jit-caching/&#34;&gt;JIT caching&lt;/a&gt; is very slow, which is what would happen if you use docker. For a workaround, you can mount a host volume to the &lt;code&gt;CUDA_CACHE_PATH&lt;/code&gt;, for instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --gpus all -v $PWD/ComputeCache:/root/.nv/ComputeCache waifu2x th waifu2x.lua --help&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>