<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-05T01:38:59Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>EdenEast/nightfox.nvim</title>
    <updated>2024-05-05T01:38:59Z</updated>
    <id>tag:github.com,2024-05-05:/EdenEast/nightfox.nvim</id>
    <link href="https://github.com/EdenEast/nightfox.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦊A highly customizable theme for vim and neovim with support for lsp, treesitter and a variety of plugins.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;128&#34; height=&#34;128&#34; src=&#34;https://user-images.githubusercontent.com/2746374/179428323-6d6b5e7f-6459-47b3-9e03-fea7553d85af.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Nightfox&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/edeneast/nightfox.nvim/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/edeneast/nightfox.nvim?colorA=192330&amp;amp;colorB=719cd6&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/edeneast/nightfox.nvim/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/edeneast/nightfox.nvim?colorA=192330&amp;amp;colorB=dbc074&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/edeneast/nightfox.nvim/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/edeneast/nightfox.nvim?colorA=192330&amp;amp;colorB=81b29a&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/EdenEast/nightfox.nvim/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/edeneast/nightfox.nvim?colorA=192330&amp;amp;colorB=9d79d6&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A highly customizable theme for vim and neovim with support for lsp, treesitter and a variety of plugins. &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;Nightfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/158456286-9e3ee657-60e6-49d8-b85e-dcab285b31c3.png&#34; alt=&#34;nightfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Dayfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/210672782-6b8690d0-3ef5-4f32-bdea-4f0a97b9d9d5.png&#34; alt=&#34;dayfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Dawnfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/158456278-c5d656de-c445-44b8-9813-9fc91ffbce4c.png&#34; alt=&#34;dawnfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Duskfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/158456284-b6ff583f-c0bb-417c-b2d5-60b8364049a7.png&#34; alt=&#34;duskfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Nordfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/158456289-eee096df-7ea7-4161-9199-808fdba58e06.png&#34; alt=&#34;nordfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Terafox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/160268126-cd417690-3660-4a04-9040-183c35f127f7.png&#34; alt=&#34;terafox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Carbonfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/183569670-91260cab-83a9-4247-8e09-6abb46c52152.png&#34; alt=&#34;carbonfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tabline is &lt;a href=&#34;https://github.com/nanozuki/tabby.nvim&#34;&gt;tabby.nvim&lt;/a&gt; and statusline is &lt;a href=&#34;https://github.com/freddiehaddad/feline.nvim&#34;&gt;feline.nvim&lt;/a&gt;. You can find my config for &lt;a href=&#34;https://github.com/EdenEast/nyx/raw/573ff3f22da95c00ec71a094b3e1ec166c0afcdd/config/.config/nvim/lua/eden/modules/ui/tabby.lua&#34;&gt;tabby&lt;/a&gt; and &lt;a href=&#34;https://github.com/EdenEast/nyx/raw/573ff3f22da95c00ec71a094b3e1ec166c0afcdd/config/.config/nvim/lua/eden/modules/ui/feline/init.lua&#34;&gt;feline&lt;/a&gt; here as well as the auto generated &lt;a href=&#34;https://github.com/EdenEast/nyx/raw/573ff3f22da95c00ec71a094b3e1ec166c0afcdd/config/.config/nvim/lua/eden/modules/ui/colors.lua&#34;&gt;highlight&lt;/a&gt; groups here. If you would like a single consumable file that contains that can be added to your own config check out &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/misc/feline.lua&#34;&gt;misc/feline.lua&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/misc/tabby.lua&#34;&gt;misc/tabby.lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports both vim and neovim&lt;/li&gt; &#xA; &lt;li&gt;Highly configurable with template overriding&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#colorblind&#34;&gt;Colorblind&lt;/a&gt; mode (daltonization, and simulation)&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#supported-plugins&#34;&gt;plugins&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#status-lines&#34;&gt;status lines&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;And many others should &#34;just work&#34;!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#compile&#34;&gt;Compile&lt;/a&gt; user&#39;s configuration for fast startup times&lt;/li&gt; &#xA; &lt;li&gt;Export &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#color-lib&#34;&gt;Color&lt;/a&gt; library utility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#interactive&#34;&gt;Interactive&lt;/a&gt; live config re-loading&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8 &lt;strong&gt;or&lt;/strong&gt; Vim 9 with lua = &lt;strong&gt;5.1+&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;True color support&lt;/li&gt; &#xA; &lt;li&gt;Undercurl terminal support (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note for MacOS: The default &lt;code&gt;terminal&lt;/code&gt; does not support &lt;code&gt;true color&lt;/code&gt;. Use either &lt;code&gt;Iterm2&lt;/code&gt; or &lt;a href=&#34;https://gist.github.com/XVilka/8346728#terminal-emulators&#34;&gt;another&lt;/a&gt; terminal that supports true color.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download with your favorite package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;EdenEast/nightfox.nvim&#34; } -- lazy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#34;EdenEast/nightfox.nvim&#34; -- Packer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;EdenEast/nightfox.nvim&#39; &#34; Vim-Plug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply set the colorscheme with the builtin command &lt;code&gt;:colorscheme&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;colorscheme nightfox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#34;colorscheme nightfox&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;There is no need to call &lt;code&gt;setup&lt;/code&gt; if you don&#39;t want to change the default options and settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Default options&#xA;require(&#39;nightfox&#39;).setup({&#xA;  options = {&#xA;    -- Compiled file&#39;s destination location&#xA;    compile_path = vim.fn.stdpath(&#34;cache&#34;) .. &#34;/nightfox&#34;,&#xA;    compile_file_suffix = &#34;_compiled&#34;, -- Compiled file suffix&#xA;    transparent = false,     -- Disable setting background&#xA;    terminal_colors = true,  -- Set terminal colors (vim.g.terminal_color_*) used in `:terminal`&#xA;    dim_inactive = false,    -- Non focused panes set to alternative background&#xA;    module_default = true,   -- Default enable value for modules&#xA;    colorblind = {&#xA;      enable = false,        -- Enable colorblind support&#xA;      simulate_only = false, -- Only show simulated colorblind colors and not diff shifted&#xA;      severity = {&#xA;        protan = 0,          -- Severity [0,1] for protan (red)&#xA;        deutan = 0,          -- Severity [0,1] for deutan (green)&#xA;        tritan = 0,          -- Severity [0,1] for tritan (blue)&#xA;      },&#xA;    },&#xA;    styles = {               -- Style to be applied to different syntax groups&#xA;      comments = &#34;NONE&#34;,     -- Value is any valid attr-list value `:help attr-list`&#xA;      conditionals = &#34;NONE&#34;,&#xA;      constants = &#34;NONE&#34;,&#xA;      functions = &#34;NONE&#34;,&#xA;      keywords = &#34;NONE&#34;,&#xA;      numbers = &#34;NONE&#34;,&#xA;      operators = &#34;NONE&#34;,&#xA;      strings = &#34;NONE&#34;,&#xA;      types = &#34;NONE&#34;,&#xA;      variables = &#34;NONE&#34;,&#xA;    },&#xA;    inverse = {             -- Inverse highlight for different types&#xA;      match_paren = false,&#xA;      visual = false,&#xA;      search = false,&#xA;    },&#xA;    modules = {             -- List of various plugins and additional options&#xA;      -- ...&#xA;    },&#xA;  },&#xA;  palettes = {},&#xA;  specs = {},&#xA;  groups = {},&#xA;})&#xA;&#xA;-- setup must be called before loading&#xA;vim.cmd(&#34;colorscheme nightfox&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to change any of the default options above you only have to define the options that change. If an option is not present in your options table the default option will be used. For example if changing the styles of certain syntax is the only desired change then your options table would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nightfox&#39;).setup({&#xA;  options = {&#xA;    styles = {&#xA;      comments = &#34;italic&#34;,&#xA;      keywords = &#34;bold&#34;,&#xA;      types = &#34;italic,bold&#34;,&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see a detailed explanation of nightfox&#39;s config settings consult either the builtin help &lt;code&gt;:help nightfox&lt;/code&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md&#34;&gt;Usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;p&gt;Nightfox&#39;s modules store configuration information for various plugins and other neovim modules. To enable a module either set the module to &lt;code&gt;true&lt;/code&gt; or if the module has additional configuration information set &lt;code&gt;enable&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default modules will be enabled. To change this behaviour change &lt;code&gt;options.module_default&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To see a list of modules check, see &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md#module&#34;&gt;Usage&lt;/a&gt; or &lt;code&gt;:help&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Customize palettes and groups&lt;/h3&gt; &#xA;&lt;p&gt;You can change the color &lt;code&gt;palette&lt;/code&gt; and the highlight &lt;code&gt;group&lt;/code&gt; of nightfox. Here is a brief example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Palettes are the base color defines of a colorscheme.&#xA;-- You can override these palettes for each colorscheme defined by nightfox.&#xA;local palettes = {&#xA;  -- Everything defined under `all` will be applied to each style.&#xA;  all = {&#xA;    -- Each palette defines these colors:&#xA;    --   black, red, green, yellow, blue, magenta, cyan, white, orange, pink&#xA;    --&#xA;    -- These colors have 3 shades: base, bright, and dim&#xA;    --&#xA;    -- Defining just a color defines it&#39;s base color&#xA;    red = &#34;#ff0000&#34;,&#xA;  },&#xA;  nightfox = {&#xA;    -- A specific style&#39;s value will be used over the `all`&#39;s value&#xA;    red = &#34;#c94f6d&#34;,&#xA;  },&#xA;  dayfox = {&#xA;    -- Defining multiple shades is done by passing a table&#xA;    blue = { base = &#34;#4d688e&#34;, bright = &#34;#4e75aa&#34;, dim = &#34;#485e7d&#34; },&#xA;  },&#xA;  nordfox = {&#xA;    -- A palette also defines the following:&#xA;    --   bg0, bg1, bg2, bg3, bg4, fg0, fg1, fg2, fg3, sel0, sel1, comment&#xA;    --&#xA;    -- These are the different foreground and background shades used by the theme.&#xA;    -- The base bg and fg is 1, 0 is normally the dark alternative. The others are&#xA;    -- incrementally lighter versions.&#xA;    bg1 = &#34;#2e3440&#34;,&#xA;&#xA;    -- sel is different types of selection colors.&#xA;    sel0 = &#34;#3e4a5b&#34;, -- Popup bg, visual selection bg&#xA;    sel1 = &#34;#4f6074&#34;, -- Popup sel bg, search bg&#xA;&#xA;    -- comment is the definition of the comment color.&#xA;    comment = &#34;#60728a&#34;,&#xA;  },&#xA;}&#xA;&#xA;-- Spec&#39;s (specifications) are a mapping of palettes to logical groups that will be&#xA;-- used by the groups. Some examples of the groups that specs map would be:&#xA;--   - syntax groups (functions, types, keywords, ...)&#xA;--   - diagnostic groups (error, warning, info, hints)&#xA;--   - git groups (add, removed, changed)&#xA;--&#xA;-- You can override these just like palettes&#xA;local specs = {&#xA;  -- As with palettes, the values defined under `all` will be applied to every style.&#xA;  all = {&#xA;    syntax = {&#xA;      -- Specs allow you to define a value using either a color or template. If the string does&#xA;      -- start with `#` the string will be used as the path of the palette table. Defining just&#xA;      -- a color uses the base version of that color.&#xA;      keyword = &#34;magenta&#34;,&#xA;&#xA;      -- Adding either `.bright` or `.dim` will change the value&#xA;      conditional = &#34;magenta.bright&#34;,&#xA;      number = &#34;orange.dim&#34;,&#xA;    },&#xA;    git = {&#xA;      -- A color define can also be used&#xA;      changed = &#34;#f4a261&#34;,&#xA;    },&#xA;  },&#xA;  nightfox = {&#xA;    syntax = {&#xA;      -- As with palettes, a specific style&#39;s value will be used over the `all`&#39;s value.&#xA;      operator = &#34;orange&#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&#xA;-- Groups are the highlight group definitions. The keys of this table are the name of the highlight&#xA;-- groups that will be overridden. The value is a table with the following values:&#xA;--   - fg, bg, style, sp, link,&#xA;--&#xA;-- Just like `spec` groups support templates. This time the template is based on a spec object.&#xA;local groups = {&#xA;  -- As with specs and palettes, the values defined under `all` will be applied to every style.&#xA;  all = {&#xA;    -- If `link` is defined it will be applied over any other values defined&#xA;    Whitespace = { link = &#34;Comment&#34; },&#xA;&#xA;    -- Specs are used for the template. Specs have their palette&#39;s as a field that can be accessed&#xA;    IncSearch = { bg = &#34;palette.cyan&#34; },&#xA;  },&#xA;  nightfox = {&#xA;    -- As with specs and palettes, a specific style&#39;s value will be used over the `all`&#39;s value.&#xA;    PmenuSel = { bg = &#34;#73daca&#34;, fg = &#34;bg0&#34; },&#xA;  },&#xA;}&#xA;&#xA;require(&#34;nightfox&#34;).setup({ palettes = palettes, specs = specs, groups = groups })&#xA;&#xA;-- setup must be called before loading&#xA;vim.cmd(&#34;colorscheme nightfox&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To find the list of syntax highlight groups defined for vim use the help &lt;code&gt;:help group-name&lt;/code&gt; and &lt;code&gt;:help nvim-treesitter-highlights&lt;/code&gt; for treesitter. If you would also like to see how nightfox defines these highlight groups you can see &lt;a href=&#34;https://github.com/EdenEast/nightfox.nvim/raw/main/lua/nightfox/group/syntax.lua&#34;&gt;syntax.lua&lt;/a&gt; for vim&#39;s syntax and &lt;a href=&#34;https://github.com/EdenEast/nightfox.nvim/raw/main/lua/nightfox/group/modules/treesitter.lua&#34;&gt;treesitter.lua&lt;/a&gt; for treesitter. These files list out all all highlight groups and have a comment describing them. Another file to note is &lt;a href=&#34;https://github.com/EdenEast/nightfox.nvim/raw/main/lua/nightfox/group/editor.lua&#34;&gt;editor.lua&lt;/a&gt; which is the highlight groups responsible for how vim looks (background, cursorline, tabline, etc...). To get the highlight group under your cursor see &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#syntax-highlight-groups&#34;&gt;here&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;p&gt;To get more information check out &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md#configuration&#34;&gt;Usage&lt;/a&gt; or the help file &lt;code&gt;:help nightfox&lt;/code&gt; for more detailed information.&lt;/p&gt; &#xA;&lt;h3&gt;Custom template values&lt;/h3&gt; &#xA;&lt;p&gt;Nightfox&#39;s &lt;code&gt;palettes&lt;/code&gt; and &lt;code&gt;specs&lt;/code&gt; can be extended with your own values. This is useful for users that want to distinguish a spec value being used for multiple group definitions. This is best understood with an example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bg0&lt;/code&gt; is used as the dark alternative background color. This is used in multiple areas (non-current file, status line, normal float, etc...). If you would like to have the inactive color diffferent then the float / statusline color you can define your own value in the &lt;code&gt;specs&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nightfox&#34;).setup({&#xA;  palettes = {&#xA;    -- Custom duskfox with black background&#xA;    duskfox = {&#xA;      bg1 = &#34;#000000&#34;, -- Black background&#xA;      bg0 = &#34;#1d1d2b&#34;, -- Alt backgrounds (floats, statusline, ...)&#xA;      bg3 = &#34;#121820&#34;, -- 55% darkened from stock&#xA;      sel0 = &#34;#131b24&#34;, -- 55% darkened from stock&#xA;    },&#xA;  },&#xA;  specs = {&#xA;    all = {&#xA;      inactive = &#34;bg0&#34;, -- Default value for other styles&#xA;    },&#xA;    duskfox = {&#xA;      inactive = &#34;#090909&#34;, -- Slightly lighter then black background&#xA;    },&#xA;  },&#xA;  groups = {&#xA;    all = {&#xA;      NormalNC = { fg = &#34;fg1&#34;, bg = &#34;inactive&#34; }, -- Non-current windows&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Api&lt;/h2&gt; &#xA;&lt;p&gt;Nightfox exposes some Api&#39;s and utility classes that let you fetch data from nightfox.&lt;/p&gt; &#xA;&lt;h3&gt;Palettes&lt;/h3&gt; &#xA;&lt;p&gt;You can get the palettes used by each colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Returns a table with each colorscheme and the palette associated with it&#xA;local palettes = require(&#39;nightfox.palette&#39;).load()&#xA;&#xA;-- Returns the palette of the specified colorscheme&#xA;local palette = require(&#39;nightfox.palette&#39;).load(&#34;nightfox&#34;)&#xA;&#xA;print(vim.inspect(palette.red))&#xA;-- {&#xA;--   base = &#34;#c94f6d&#34;,&#xA;--   bright = &#34;#d16983&#34;,&#xA;--   dim = &#34;#ab435d&#34;,&#xA;-- }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md#palette&#34;&gt;Usage&lt;/a&gt; for more information on palettes.&lt;/p&gt; &#xA;&lt;h3&gt;Specs&lt;/h3&gt; &#xA;&lt;p&gt;You can get the spec used by each colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Returns a table with each colorscheme and the spec associated with it&#xA;local specs require(&#39;nightfox.spec&#39;).load()&#xA;&#xA;-- Returns the spec of the specified colorscheme&#xA;local spec = require(&#39;nightfox.spec&#39;).load(&#34;nightfox&#34;)&#xA;&#xA;print(vim.inspect(spec.git))&#xA;-- {&#xA;--   add = &#34;#81b29a&#34;,&#xA;--   changed = &#34;#dbc074&#34;,&#xA;--   removed = &#34;#c94f6d&#34;&#xA;-- }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md#spec&#34;&gt;Usage&lt;/a&gt; for more information on specs.&lt;/p&gt; &#xA;&lt;h3&gt;Color lib&lt;/h3&gt; &#xA;&lt;p&gt;Nightfox uses a color library internally to manipulate colors. You can use this library as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local palette = require(&#39;nightfox.palette&#39;).load(&#39;nightfox&#39;)&#xA;local Color = require(&#34;nightfox.lib.color&#34;)&#xA;&#xA;local bg = Color.from_hex(palette.bg1)&#xA;local red = Color.from_hex(&#34;#ff0000&#34;)&#xA;&#xA;-- Blend the bg with red. The blend factor is from 0 to 1&#xA;-- with 0 being full bg and 1 being full red&#xA;local red_bg = bg:blend(red, 0.2)&#xA;&#xA;print(red_bg:to_css())&#xA;-- &#34;#471c26&#34;&#xA;&#xA;-- Brighten bg by adding 10 to the value of the color as a hsv&#xA;local alt_bg = bg:brighten(10)&#xA;print(vim.inspect(alt_bg:to_hsv()))&#xA;-- {&#xA;--   hue = 213.91304347826,&#xA;--   saturation = 47.916666666667,&#xA;--   value = 28.823529411765&#xA;-- }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a lot of useful functions to manipulate and work with colors in different color spaces. See &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md#color&#34;&gt;Usage&lt;/a&gt; for more information on &lt;code&gt;Color&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Colorblind&lt;/h2&gt; &#xA;&lt;p&gt;For individuals with &lt;code&gt;color vision deficiency&lt;/code&gt; (cvd), nightfox has implemented a &lt;code&gt;colorblind&lt;/code&gt; mode to help enhance color contrast. This can be enabled with this option &lt;code&gt;colorblind.enable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Understanding cvd&lt;/summary&gt; &#xA; &lt;p&gt;There are three types of cvd:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Protan (Red / L cones)&lt;/li&gt; &#xA;  &lt;li&gt;Deutan (Green / M cones)&lt;/li&gt; &#xA;  &lt;li&gt;Tritan (Blue / S cones)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;These are referred to as &lt;code&gt;protanomaly&lt;/code&gt;, &lt;code&gt;deuteranomaly&lt;/code&gt;, and &lt;code&gt;tritanomaly&lt;/code&gt; for individuals that have all three cones (trichromats) but one is weak (anomalous trichromacy).&lt;/p&gt; &#xA; &lt;p&gt;These can also be referred to as &lt;code&gt;protanopia&lt;/code&gt;, &lt;code&gt;deuteranopia&lt;/code&gt;, and &lt;code&gt;tritanopia&lt;/code&gt;. This is for individuals that only have two cones (dichromats or dichromacy).&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Cone&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Weak (trichromacy)&lt;/th&gt; &#xA;    &lt;th&gt;Missing (Dichromacy)&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;L / Red&lt;/td&gt; &#xA;    &lt;td&gt;Protan&lt;/td&gt; &#xA;    &lt;td&gt;Protanomaly&lt;/td&gt; &#xA;    &lt;td&gt;Protanopia&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;M / Green&lt;/td&gt; &#xA;    &lt;td&gt;Deutan&lt;/td&gt; &#xA;    &lt;td&gt;Deuteranomaly&lt;/td&gt; &#xA;    &lt;td&gt;Deuteranopia&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;S / Blue&lt;/td&gt; &#xA;    &lt;td&gt;Tritan&lt;/td&gt; &#xA;    &lt;td&gt;Tritanomaly&lt;/td&gt; &#xA;    &lt;td&gt;Tritanopia&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Configuring cvd&lt;/h3&gt; &#xA;&lt;p&gt;Nightfox needs to simulate your cvd in order to shift colors correctly. This is done by setting your cvd type&#39;s severity level. Severity is a value between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; where &lt;code&gt;1&lt;/code&gt; is full dichromacy. You can also have multiple kinds of cvd configured at a time. Here is a full example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nightfox&#34;).setup({&#xA;  options = {&#xA;    colorblind = {&#xA;      enable = true,&#xA;      severity = {&#xA;        protan = 0.3,&#xA;        deutan = 0.6,&#xA;      },&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are looking for a way to self evaluate what severity factor to use, check out &lt;a href=&#34;https://daltonlens.org/evaluating-cvd-simulation/#Generating-Ishihara-like-plates-for-self-evaluation&#34;&gt;daltonlens&#39;s&lt;/a&gt; self evaluation article with interactive self evaluation Ishihasa plates.&lt;/p&gt; &#xA;&lt;p&gt;Another method would be to use the option &lt;code&gt;colorblind.simulate_only&lt;/code&gt; option along with nightfox&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#interactive&#34;&gt;interactive&lt;/a&gt; mode. While nightfox is simulating cvd set a severity to 1. Now decrease the severity incrementally until you cannot perceive a difference in the change of colors.&lt;/p&gt; &#xA;&lt;h3&gt;How does this work?&lt;/h3&gt; &#xA;&lt;p&gt;This is accomplished by applying an algorithm called &lt;code&gt;Daltonization&lt;/code&gt;. The process follows these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Simulate what a person with cvd would see&lt;/li&gt; &#xA; &lt;li&gt;Calculate the difference between original vs. simulated&lt;/li&gt; &#xA; &lt;li&gt;Shift the difference towards the visible spectrum of the cvd individual&lt;/li&gt; &#xA; &lt;li&gt;Correct original color by adding it to the corrected difference&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can see the simulated colors instead of the corrected colors by setting the option &lt;code&gt;colorblind.simulate_only&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2746374/210025850-9a84b142-e989-4efa-9b55-5f7312013da3.gif&#34; alt=&#34;cvd-example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;p&gt;Nightfox is a highly customizable and configurable colorscheme. This does however come at the cost of complexity and execution time.&lt;/p&gt; &#xA;&lt;p&gt;Nightfox pre-computes the result of your configuration and saves the lua bytecode in a cache to be used on next load. This significantly speeds up nightfox&#39;s execution time. Changes to your configuration will be re-computed and cached automatically.&lt;/p&gt; &#xA;&lt;p&gt;By default nightfox writes the compiled results into the system&#39;s &lt;code&gt;cache&lt;/code&gt; directory. On unix this is &lt;code&gt;$XDG_CACHE_HOME/nvim/nightfox&lt;/code&gt; and on windows this is &lt;code&gt;%localappdata%\\Temp\\nvim\\nightfox&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Nightfox provides functions to work with the nightfox compiler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:NightfoxCompile &#34; Manually call nightfox compiler to create/update compiled files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nightfox&#39;).compile() -- lua api version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactive&lt;/h2&gt; &#xA;&lt;p&gt;Nightfox makes it easy to make changes to its config and see the results. For this nightfox exposes the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NightfoxInteractive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will attach an autocmd to the current buffer that executes on &lt;code&gt;BufferWritePost&lt;/code&gt;. The autocmd will clear nightfox&#39;s internal state and re-source it&#39;s config from the newly saved file. It will then reset the colorscheme.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2746374/211108157-b5221ea4-9369-453d-9c27-4a71ac161a55.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are a few things to note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This requires executing &lt;code&gt;luafile&lt;/code&gt; on the current file. Any syntax errors will throw errors.&lt;/li&gt; &#xA; &lt;li&gt;If you are using packer and have nightfox&#39;s config in a &lt;code&gt;config = function() end&lt;/code&gt; block, this will not work as packer would require to be re-compiled and the compiled file sourced.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/goolord/alpha-nvim&#34;&gt;alpha-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stevearc/aerial.nvim&#34;&gt;aerial.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim&#34;&gt;barbar.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;dashboard-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lambdalisue/fern.vim&#34;&gt;fern.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/j-hui/fidget.nvim&#34;&gt;fidget.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;vim-gitgutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lambdalisue/glyph-palette.vim&#34;&gt;glyph-palette.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;hop.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RRethy/vim-illuminate&#34;&gt;vim-illuminate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggandor/lightspeed.nvim&#34;&gt;lightspeed.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;lspsaga.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/lsp-trouble.nvim&#34;&gt;lsp-trouble.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;indent-blankline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;mini.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mvllow/modes.nvim&#34;&gt;modes.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SmiteshP/nvim-navic&#34;&gt;nvim-navic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NeogitOrg/neogit&#34;&gt;neogit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest&#34;&gt;neotest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;neo-tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rlane/pounce.nvim&#34;&gt;pounce.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-signify&#34;&gt;vim-signify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/symbols-outline.nvim&#34;&gt;symbols-outline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p00f/nvim-ts-rainbow&#34;&gt;nvim-ts-rainbow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HiPhish/nvim-ts-rainbow2&#34;&gt;nvim-ts-rainbow2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;which-key.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status lines&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Lualine checks the value of &lt;code&gt;vim.g.colors_name&lt;/code&gt; (set when using &lt;code&gt;:colorscheme&lt;/code&gt; command) to determine the theme to load. Set your colorscheme before calling setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#34;colorscheme nightfox&#34;)&#xA;require(&#39;lualine&#39;).setup({ ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;Lightline&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Lightline checks the value of &lt;code&gt;vim.g.lightline.colorscheme&lt;/code&gt;. It does not depend on the value of the &lt;code&gt;:colorscheme&lt;/code&gt; command, Please set it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#34;colorscheme nightfox&#34;)&#xA;vim.g.lightline = { colorscheme = &#34;nightfox&#34; } -- Or the name of colorscheme you use&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Syntax highlight groups&lt;/h2&gt; &#xA;&lt;p&gt;This section will help you determine what highlight group is being applied to a piece of syntax. These sections will output the highlight group for the value under the cursor.&lt;/p&gt; &#xA;&lt;h4&gt;Treesitter highlighting&lt;/h4&gt; &#xA;&lt;p&gt;If treesitter is the highlighting method for the language in question you can use the command: &lt;code&gt;:Inspect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Vim highlighting&lt;/h4&gt; &#xA;&lt;p&gt;Add this vimscript function to your configuration.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vimscript highlight function&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; plugin/syntax.vim&#xA;&#xA;&#34; Output the highlight group under the cursor&#xA;&#34;&#xA;&#34; This function will output the entire stack of hightlight groups being applied. The stack is&#xA;&#34; outputted in the correct order from top to bottom. Vim will walk through the stack from top to&#xA;&#34; bottom and apply the first defined highlight group found.&#xA;function! SynStack()&#xA;  for i1 in synstack(line(&#34;.&#34;), col(&#34;.&#34;))&#xA;    let i2 = synIDtrans(i1)&#xA;    let n1 = synIDattr(i1, &#34;name&#34;)&#xA;    let n2 = synIDattr(i2, &#34;name&#34;)&#xA;    echo n1 &#34;-&amp;gt;&#34; n2&#xA;  endfor&#xA;endfunction&#xA;&#xA;&#34; You can also create a convenience mapping&#xA;map &amp;lt;F2&amp;gt; &amp;lt;cmd&amp;gt;call SynStack()&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Extra&lt;/h2&gt; &#xA;&lt;p&gt;There are &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/extra&#34;&gt;extra&lt;/a&gt; configuration files for the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;alacritty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fishshell.com/&#34;&gt;fish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iterm2.com/index.html&#34;&gt;iterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/overview/#configuring-kitty&#34;&gt;kitty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://konsole.kde.org/&#34;&gt;konsole&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;tmux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.warp.dev/&#34;&gt;warp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wezfurlong.org/wezterm/config/appearance.html#defining-a-color-scheme-in-a-separate-file&#34;&gt;wezterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/Terminal&#34;&gt;windows terminal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/X_resources&#34;&gt;xresources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zellij.dev/&#34;&gt;zellij&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/catppuccin/nvim/&#34;&gt;catppuccin&lt;/a&gt; (integration/modules)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rose-pine/nvim&#34;&gt;rose-pine&lt;/a&gt; (dawnfox/duskfox)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shaunsingh/oxocarbon.nvim&#34;&gt;oxocarbon.nvim&lt;/a&gt; (carbonfox)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coolers.co&#34;&gt;coolers&lt;/a&gt; (useful color information and palette tool)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.colorhexa.com/&#34;&gt;colorhexa&lt;/a&gt; (detailed color information)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NeogitOrg/neogit/raw/b688a2c/lua/neogit/lib/color.lua&#34;&gt;neogit&lt;/a&gt; (base for color lib)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://daltonlens.org/&#34;&gt;daltonlens&lt;/a&gt; (understanding cvd simulations and research. Thanks &lt;a href=&#34;https://github.com/nburrus&#34;&gt;@nburrus&lt;/a&gt;!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;Some themes were inspired by wallpapers.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Nordfox&lt;/summary&gt; &#xA; &lt;img src=&#34;https://i.imgur.com/LzJYkpS.jpeg&#34; alt=&#34;nordfox_reference&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Terafox&lt;/summary&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/179428810-69b440d1-7107-49f2-ab2b-aaab1c449cce.jpeg&#34; alt=&#34;terafox_reference&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;💝 Thanks to&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/keifererikson&#34;&gt;@keifererikson&lt;/a&gt; for logo&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-lua/plenary.nvim</title>
    <updated>2024-05-05T01:38:59Z</updated>
    <id>tag:github.com,2024-05-05:/nvim-lua/plenary.nvim</id>
    <link href="https://github.com/nvim-lua/plenary.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;plenary: full; complete; entire; absolute; unqualified. All the lua functions I don&#39;t want to write twice.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;plenary.nvim&lt;/h1&gt; &#xA;&lt;p&gt;All the lua functions I don&#39;t want to write twice.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;plenary:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;full; complete; entire; absolute; unqualified.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note that this library is useless outside of Neovim since it requires Neovim functions. It should be usable with any recent version of Neovim though.&lt;/p&gt; &#xA;&lt;p&gt;At the moment, it is very much in pre-alpha &lt;span&gt;😄&lt;/span&gt; Expect changes to the way some functions are structured. I&#39;m hoping to finish some document generators to provide better documentation for people to use and consume and then at some point we&#39;ll stabilize on a few more stable APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://luarocks.org/modules/Conni2461/plenary.nvim&#34;&gt;&lt;img src=&#34;https://img.shields.io/luarocks/v/Conni2461/plenary.nvim?logo=lua&amp;amp;color=purple&#34; alt=&#34;LuaRocks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use &#34;nvim-lua/plenary.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/#plenaryasync&#34;&gt;plenary.async&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/#plenaryasync_lib&#34;&gt;plenary.async_lib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/#plenaryjob&#34;&gt;plenary.job&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/#plenarypath&#34;&gt;plenary.path&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/#plenaryscandir&#34;&gt;plenary.scandir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/#plenarycontext_manager&#34;&gt;plenary.context_manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/#plenarytest_harness&#34;&gt;plenary.test_harness&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/#plenaryfiletype&#34;&gt;plenary.filetype&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/#plenarystrings&#34;&gt;plenary.strings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;plenary.async&lt;/h3&gt; &#xA;&lt;p&gt;A Lua module for asynchronous programming using coroutines. This library is built on native lua coroutines and &lt;code&gt;libuv&lt;/code&gt;. Coroutines make it easy to avoid callback hell and allow for easy cooperative concurrency and cancellation. Apart from allowing users to perform asynchronous io easily, this library also functions as an abstraction for coroutines.&lt;/p&gt; &#xA;&lt;h4&gt;Getting started&lt;/h4&gt; &#xA;&lt;p&gt;You can do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local async = require &#34;plenary.async&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All other modules are automatically required and can be accessed by indexing &lt;code&gt;async&lt;/code&gt;. You needn&#39;t worry about performance as this will require all the submodules lazily.&lt;/p&gt; &#xA;&lt;h4&gt;A quick example&lt;/h4&gt; &#xA;&lt;p&gt;Libuv luv provides this example of reading a file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local uv = vim.loop&#xA;&#xA;local read_file = function(path, callback)&#xA;  uv.fs_open(path, &#34;r&#34;, 438, function(err, fd)&#xA;    assert(not err, err)&#xA;    uv.fs_fstat(fd, function(err, stat)&#xA;      assert(not err, err)&#xA;      uv.fs_read(fd, stat.size, 0, function(err, data)&#xA;        assert(not err, err)&#xA;        uv.fs_close(fd, function(err)&#xA;          assert(not err, err)&#xA;          callback(data)&#xA;        end)&#xA;      end)&#xA;    end)&#xA;  end)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can write it using the library like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local a = require &#34;plenary.async&#34;&#xA;&#xA;local read_file = function(path)&#xA;  local err, fd = a.uv.fs_open(path, &#34;r&#34;, 438)&#xA;  assert(not err, err)&#xA;&#xA;  local err, stat = a.uv.fs_fstat(fd)&#xA;  assert(not err, err)&#xA;&#xA;  local err, data = a.uv.fs_read(fd, stat.size, 0)&#xA;  assert(not err, err)&#xA;&#xA;  local err = a.uv.fs_close(fd)&#xA;  assert(not err, err)&#xA;&#xA;  return data&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Plugins using this&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tanvirtin/vgit.nvim&#34;&gt;vgit.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;neogit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;neo-tree.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;plenary.async_lib&lt;/h3&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;plenary.async&lt;/code&gt; instead. This was version 1 and is just here for compatibility reasons.&lt;/p&gt; &#xA;&lt;h3&gt;plenary.async.control.channel.oneshot&lt;/h3&gt; &#xA;&lt;p&gt;Creates a oneshot channel. It can only send data one time.&lt;/p&gt; &#xA;&lt;p&gt;The sender is not async while the receiver is.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local a = require&#39;plenary.async&#39;&#xA;local tx, rx = a.control.channel.oneshot()&#xA;&#xA;a.run(function()&#xA;    local ret = long_running_fn()&#xA;    tx(ret)&#xA;end)&#xA;&#xA;local ret = rx()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;plenary.async.control.channel.mpsc&lt;/h3&gt; &#xA;&lt;p&gt;Creates a multiple producer single consumer channel.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local a = require&#39;plenary.async&#39;&#xA;local sender, receiver = a.control.channel.mpsc()&#xA;&#xA;a.run(function()&#xA;  sender.send(10)&#xA;  sender.send(20)&#xA;end)&#xA;&#xA;a.run(function()&#xA;  sender.send(30)&#xA;  sender.send(40)&#xA;end)&#xA;&#xA;for _ = 1, 4 do&#xA;  local value = receiver.recv()&#xA;  print(&#39;received:&#39;, value)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;plenary.job&lt;/h3&gt; &#xA;&lt;p&gt;A Lua module to interact with system processes. Pass in your &lt;code&gt;command&lt;/code&gt;, the desired &lt;code&gt;args&lt;/code&gt;, &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;cwd&lt;/code&gt;. Define optional callbacks for &lt;code&gt;on_stdout&lt;/code&gt;, &lt;code&gt;on_stderr&lt;/code&gt; and &lt;code&gt;on_exit&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; your Job.&lt;/p&gt; &#xA;&lt;p&gt;Note: Each job has an empty environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Job = require&#39;plenary.job&#39;&#xA;&#xA;Job:new({&#xA;  command = &#39;rg&#39;,&#xA;  args = { &#39;--files&#39; },&#xA;  cwd = &#39;/usr/bin&#39;,&#xA;  env = { [&#39;a&#39;] = &#39;b&#39; },&#xA;  on_exit = function(j, return_val)&#xA;    print(return_val)&#xA;    print(j:result())&#xA;  end,&#xA;}):sync() -- or start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;plenary.path&lt;/h3&gt; &#xA;&lt;p&gt;A Lua module that implements a bunch of the things from &lt;code&gt;pathlib&lt;/code&gt; from Python, so that paths are easy to work with.&lt;/p&gt; &#xA;&lt;h3&gt;plenary.scandir&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;plenary.scandir&lt;/code&gt; is fast recursive file operations. It is similar to unix &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt; in that it can do recursive scans over a given directory, or a set of directories.&lt;/p&gt; &#xA;&lt;p&gt;It offers a wide range of opts for limiting the depth, show hidden and more. &lt;code&gt;plenary.scan_dir&lt;/code&gt; can be ran synchronously and asynchronously and offers &lt;code&gt;on_insert(file, typ)&lt;/code&gt; and &lt;code&gt;on_exit(files)&lt;/code&gt; callbacks. &lt;code&gt;on_insert(file, typ)&lt;/code&gt; is available for both while &lt;code&gt;on_exit(files)&lt;/code&gt; is only available for async.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local scan = require&#39;plenary.scandir&#39;&#xA;scan.scan_dir(&#39;.&#39;, { hidden = true, depth = 2 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This module also offers &lt;code&gt;ls -la&lt;/code&gt; sync and async functions that will return a formated string for all files in the directory. Why? Just for fun&lt;/p&gt; &#xA;&lt;h3&gt;plenary.context_manager&lt;/h3&gt; &#xA;&lt;p&gt;Implements &lt;code&gt;with&lt;/code&gt; and &lt;code&gt;open&lt;/code&gt; just like in Python. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local with = context_manager.with&#xA;local open = context_manager.open&#xA;&#xA;local result = with(open(&#34;README.md&#34;), function(reader)&#xA;  return reader:read()&#xA;end)&#xA;&#xA;assert(result == &#34;# plenary.nvim&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;plenary.test_harness&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:help plenary-test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Supports (simple) busted-style testing. It implements a mock-ed busted interface, that will allow you to run simple busted style tests in separate neovim instances.&lt;/p&gt; &#xA;&lt;p&gt;To run the current spec file in a floating window, you can use the keymap &lt;code&gt;&amp;lt;Plug&amp;gt;PlenaryTestFile&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nmap &amp;lt;leader&amp;gt;t &amp;lt;Plug&amp;gt;PlenaryTestFile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, the test is run with a minimal configuration, that includes in its runtimepath only plenary.nvim and the current working directory.&lt;/p&gt; &#xA;&lt;p&gt;To run a whole directory from the command line, you could do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvim --headless -c &#34;PlenaryBustedDirectory tests/plenary/ {options}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where the first argument is the directory you&#39;d like to test. It will search for files with the pattern &lt;code&gt;*_spec.lua&lt;/code&gt; and execute them in separate neovim instances.&lt;/p&gt; &#xA;&lt;p&gt;Without second argument, &lt;code&gt;PlenaryBustedDirectory&lt;/code&gt; is also run with a minimal configuration. Otherwise it is a Lua option table with the following fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim_cmd&lt;/code&gt;: specify the command to launch this neovim instance (defaults to &lt;code&gt;vim.v.progpath&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;init&lt;/code&gt;: specify an init.vim to use for this instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;minimal_init&lt;/code&gt;: as for &lt;code&gt;init&lt;/code&gt;, but also run the neovim instance with &lt;code&gt;--noplugin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sequential&lt;/code&gt;: whether to run tests sequentially (default is to run in parallel)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keep_going&lt;/code&gt;: if &lt;code&gt;sequential&lt;/code&gt;, whether to continue on test failure (default true)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;: controls the maximum time allotted to each job in parallel or sequential operation (defaults to 50,000 milliseconds)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The exit code is 0 when success and 1 when fail, so you can use it easily in a &lt;code&gt;Makefile&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;p&gt;NOTE:&lt;/p&gt; &#xA;&lt;p&gt;So far, the only supported busted items are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;describe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;it&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pending&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;before_each&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;after_each&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assert.*&lt;/code&gt; etc. (from luassert, which is bundled)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OTHER NOTE:&lt;/p&gt; &#xA;&lt;p&gt;We used to support &lt;code&gt;luaunit&lt;/code&gt; and original &lt;code&gt;busted&lt;/code&gt; but it turns out it was way too hard and not worthwhile for the difficulty of getting them setup, particularly on other platforms or in CI. Now, we have a dep free (or at least, no other installation steps necessary) &lt;code&gt;busted&lt;/code&gt; implementation that can be used more easily.&lt;/p&gt; &#xA;&lt;p&gt;Please take a look at the new APIs and make any issues for things that aren&#39;t clear. I am happy to fix them and make it work well :)&lt;/p&gt; &#xA;&lt;p&gt;OTHER OTHER NOTE: Take a look at some test examples &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/TESTS_README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Colors&lt;/h4&gt; &#xA;&lt;p&gt;You no longer need nvim-terminal to get this to work. We use &lt;code&gt;nvim_open_term&lt;/code&gt; now.&lt;/p&gt; &#xA;&lt;h3&gt;plenary.filetype&lt;/h3&gt; &#xA;&lt;p&gt;Will detect the filetype based on &lt;code&gt;extension&lt;/code&gt;/&lt;code&gt;special filename&lt;/code&gt;/&lt;code&gt;shebang&lt;/code&gt; or &lt;code&gt;modeline&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;require&#39;plenary.filetype&#39;.detect(filepath, opts)&lt;/code&gt; is a function that does all of above and exits as soon as a filetype is found&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require&#39;plenary.filetype&#39;.detect_from_extension(filepath)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require&#39;plenary.filetype&#39;.detect_from_name(filepath)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require&#39;plenary.filetype&#39;.detect_from_modeline(filepath)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require&#39;plenary.filetype&#39;.detect_from_shebang(filepath)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add filetypes by creating a new file named &lt;code&gt;~/.config/nvim/data/plenary/filetypes/foo.lua&lt;/code&gt; and register that file with &lt;code&gt;:lua require&#39;plenary.filetype&#39;.add_file(&#39;foo&#39;)&lt;/code&gt;. Content of the file should look like that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  extension = {&#xA;    -- extension = filetype&#xA;    -- example:&#xA;    [&#39;jl&#39;] = &#39;julia&#39;,&#xA;  },&#xA;  file_name = {&#xA;    -- special filenames, likes .bashrc&#xA;    -- we provide a decent amount&#xA;    -- name = filetype&#xA;    -- example:&#xA;    [&#39;.bashrc&#39;] = &#39;bash&#39;,&#xA;  },&#xA;  shebang = {&#xA;    -- Shebangs are supported as well. Currently we provide&#xA;    -- sh, bash, zsh, python, perl with different prefixes like&#xA;    -- /usr/bin, /bin/, /usr/bin/env, /bin/env&#xA;    -- shebang = filetype&#xA;    -- example:&#xA;    [&#39;/usr/bin/node&#39;] = &#39;javascript&#39;,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;plenary.strings&lt;/h3&gt; &#xA;&lt;p&gt;Re-implement VimL funcs to use them in Lua loop.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;strings.strdisplaywidth&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strings.strcharpart&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And some other funcs are here to deal with common problems.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;strings.truncate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strings.align_str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strings.dedent&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;plenary.profile&lt;/h3&gt; &#xA;&lt;p&gt;Thin wrapper around LuaJIT&#39;s &lt;a href=&#34;https://blast.hk/moonloader/luajit/ext_profiler.html&#34;&gt;&lt;code&gt;jit.p&lt;/code&gt; profiler&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;plenary.profile&#39;.start(&#34;profile.log&#34;)&#xA;&#xA;-- code to be profiled&#xA;&#xA;require&#39;plenary.profile&#39;.stop()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;start(&#34;profile.log&#34;, {flame = true})&lt;/code&gt; to output the log in a flamegraph-compatible format. A flamegraph can be created from this using &lt;a href=&#34;https://github.com/jonhoo/inferno&#34;&gt;https://github.com/jonhoo/inferno&lt;/a&gt; via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;inferno-flamegraph profile.log &amp;gt; flame.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting interactive SVG file can be viewed in any browser.&lt;/p&gt; &#xA;&lt;p&gt;Status: WIP&lt;/p&gt; &#xA;&lt;h3&gt;plenary.popup&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/POPUP.md&#34;&gt;popup documentation&lt;/a&gt; for both progress tracking and implemented APIs.&lt;/p&gt; &#xA;&lt;h3&gt;plenary.window&lt;/h3&gt; &#xA;&lt;p&gt;Window helper functions to wrap some of the more difficult cases. Particularly for floating windows.&lt;/p&gt; &#xA;&lt;p&gt;Status: WIP&lt;/p&gt; &#xA;&lt;h3&gt;plenary.collections&lt;/h3&gt; &#xA;&lt;p&gt;Contains pure lua implementations for various standard collections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local List = require &#39;plenary.collections.py_list&#39;&#xA;&#xA;local myList = List { 9, 14, 32, 5 }&#xA;&#xA;for i, v in myList:iter() do&#xA;    print(i, v)&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Status: WIP&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re having trouble / things are hanging / other problems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export DEBUG_PLENARY=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will enable debugging for the plugin.&lt;/p&gt; &#xA;&lt;h3&gt;plenary.neorocks&lt;/h3&gt; &#xA;&lt;p&gt;DELETED: Please use packer.nvim or other lua-rocks wrapper instead. This no longer exists.&lt;/p&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Error: Too many open files&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;*nix systems have a setting to configure the maximum amount of open file handles. It can occur that the default value is pretty low and that you end up getting this error after opening a couple of files. On Linux you can see the current limit with &lt;code&gt;ulimit -n&lt;/code&gt; and set it with &lt;code&gt;ulimit -n 4096&lt;/code&gt;. If you&#39;re on macOS the command is &lt;code&gt;sudo launchctl limit maxfiles 4096 4096&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>CopilotC-Nvim/CopilotChat.nvim</title>
    <updated>2024-05-05T01:38:59Z</updated>
    <id>tag:github.com,2024-05-05:/CopilotC-Nvim/CopilotChat.nvim</id>
    <link href="https://github.com/CopilotC-Nvim/CopilotChat.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chat with GitHub Copilot in Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot Chat for Neovim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://copilotc-nvim.github.io/CopilotChat.nvim/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-yes-brightgreen.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://results.pre-commit.ci/latest/github/CopilotC-Nvim/CopilotChat.nvim/main&#34;&gt;&lt;img src=&#34;https://results.pre-commit.ci/badge/github/CopilotC-Nvim/CopilotChat.nvim/main.svg?sanitize=true&#34; alt=&#34;pre-commit.ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/vy6hJsTWaZ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1200633211236122665.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/canary/#contributors-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/all_contributors-25-orange.svg?style=flat-square&#34; alt=&#34;All Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Plugin was rewritten to Lua from Python. Please check the &lt;a href=&#34;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/canary/MIGRATION.md&#34;&gt;migration guide from version 1 to version 2&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Ensure you have the following installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neovim stable (0.9.5) or nightly&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tiktoken_core: &lt;code&gt;sudo luarocks install --lua-version 5.1 tiktoken_core&lt;/code&gt;. Alternatively, download a pre-built binary from &lt;a href=&#34;https://github.com/gptlang/lua-tiktoken/releases&#34;&gt;lua-tiktoken releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can check your Lua PATH in Neovim by doing &lt;code&gt;:lua print(package.cpath)&lt;/code&gt;. Save the binary as &lt;code&gt;tiktoken_core.so&lt;/code&gt; in any of the given paths.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Lazy.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  {&#xA;    &#34;CopilotC-Nvim/CopilotChat.nvim&#34;,&#xA;    branch = &#34;canary&#34;,&#xA;    dependencies = {&#xA;      { &#34;zbirenbaum/copilot.lua&#34; }, -- or github/copilot.vim&#xA;      { &#34;nvim-lua/plenary.nvim&#34; }, -- for curl, log wrapper&#xA;    },&#xA;    opts = {&#xA;      debug = true, -- Enable debugging&#xA;      -- See Configuration section for rest&#xA;    },&#xA;    -- See Commands section for default commands if you want to lazy load on them&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See @jellydn for &lt;a href=&#34;https://github.com/jellydn/lazy-nvim-ide/raw/main/lua/plugins/extras/copilot-chat-v2.lua&#34;&gt;configuration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Vim-Plug&lt;/h3&gt; &#xA;&lt;p&gt;Similar to the lazy setup, you can use the following configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call plug#begin()&#xA;Plug &#39;zbirenbaum/copilot.lua&#39;&#xA;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;CopilotC-Nvim/CopilotChat.nvim&#39;, { &#39;branch&#39;: &#39;canary&#39; }&#xA;call plug#end()&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#34;CopilotChat&#34;).setup {&#xA;  debug = true, -- Enable debugging&#xA;  -- See Configuration section for rest&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Put the files in the right place&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p ~/.config/nvim/pack/copilotchat/start&#xA;cd ~/.config/nvim/pack/copilotchat/start&#xA;&#xA;git clone https://github.com/zbirenbaum/copilot.lua&#xA;git clone https://github.com/nvim-lua/plenary.nvim&#xA;&#xA;git clone -b canary https://github.com/CopilotC-Nvim/CopilotChat.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add to your configuration (e.g. &lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;CopilotChat&#34;).setup {&#xA;  debug = true, -- Enable debugging&#xA;  -- See Configuration section for rest&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See @deathbeam for &lt;a href=&#34;https://github.com/deathbeam/dotfiles/raw/master/nvim/.config/nvim/lua/config/copilot.lua#L14&#34;&gt;configuration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChat &amp;lt;input&amp;gt;?&lt;/code&gt; - Open chat window with optional input&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatOpen&lt;/code&gt; - Open chat window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatClose&lt;/code&gt; - Close chat window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatToggle&lt;/code&gt; - Toggle chat window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatReset&lt;/code&gt; - Reset chat window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatSave &amp;lt;name&amp;gt;?&lt;/code&gt; - Save chat history to file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatLoad &amp;lt;name&amp;gt;?&lt;/code&gt; - Load chat history from file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatDebugInfo&lt;/code&gt; - Show debug information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Commands coming from default prompts&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatExplain&lt;/code&gt; - Write an explanation for the active selection as paragraphs of text&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatReview&lt;/code&gt; - Review the selected code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatFix&lt;/code&gt; - There is a problem in this code. Rewrite the code to show it with the bug fixed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatOptimize&lt;/code&gt; - Optimize the selected code to improve performance and readablilty&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatDocs&lt;/code&gt; - Please add documentation comment for the selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatTests&lt;/code&gt; - Please generate tests for my code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatFixDiagnostic&lt;/code&gt; - Please assist with the following diagnostic issue in file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatCommit&lt;/code&gt; - Write commit message for the change with commitizen convention&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CopilotChatCommitStaged&lt;/code&gt; - Write commit message for the change with commitizen convention&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local chat = require(&#34;CopilotChat&#34;)&#xA;&#xA;-- Open chat window&#xA;chat.open()&#xA;&#xA;-- Open chat window with custom options&#xA;chat.open({&#xA;  window = {&#xA;    layout = &#39;float&#39;,&#xA;    title = &#39;My Title&#39;,&#xA;  },&#xA;})&#xA;&#xA;-- Close chat window&#xA;chat.close()&#xA;&#xA;-- Toggle chat window&#xA;chat.toggle()&#xA;&#xA;-- Toggle chat window with custom options&#xA;chat.toggle({&#xA;  window = {&#xA;    layout = &#39;float&#39;,&#xA;    title = &#39;My Title&#39;,&#xA;  },&#xA;})&#xA;&#xA;-- Reset chat window&#xA;chat.reset()&#xA;&#xA;-- Ask a question&#xA;chat.ask(&#34;Explain how it works.&#34;)&#xA;&#xA;-- Ask a question with custom options&#xA;chat.ask(&#34;Explain how it works.&#34;, {&#xA;  selection = require(&#34;CopilotChat.select&#34;).buffer,&#xA;})&#xA;&#xA;-- Ask a question and do something with the response&#xA;chat.ask(&#34;Show me something interesting&#34;, {&#xA;  callback = function(response)&#xA;    print(&#34;Response:&#34;, response)&#xA;  end,&#xA;})&#xA;&#xA;-- Get all available prompts (can be used for integrations like fzf/telescope)&#xA;local prompts = chat.prompts()&#xA;&#xA;-- Get last copilot response (also can be used for integrations and custom keymaps)&#xA;local response = chat.response()&#xA;&#xA;-- Pick a prompt using vim.ui.select&#xA;local actions = require(&#34;CopilotChat.actions&#34;)&#xA;&#xA;-- Pick help actions&#xA;actions.pick(actions.help_actions())&#xA;&#xA;-- Pick prompt actions&#xA;actions.pick(actions.prompt_actions({&#xA;    selection = require(&#34;CopilotChat.select&#34;).visual,&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Default configuration&lt;/h3&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/canary/lua/CopilotChat/config.lua&#34;&gt;here&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  debug = false, -- Enable debug logging&#xA;  proxy = nil, -- [protocol://]host[:port] Use this proxy&#xA;  allow_insecure = false, -- Allow insecure server connections&#xA;&#xA;  system_prompt = prompts.COPILOT_INSTRUCTIONS, -- System prompt to use&#xA;  model = &#39;gpt-4&#39;, -- GPT model to use, &#39;gpt-3.5-turbo&#39; or &#39;gpt-4&#39;&#xA;  temperature = 0.1, -- GPT temperature&#xA;&#xA;  question_header = &#39;## User &#39;, -- Header to use for user questions&#xA;  answer_header = &#39;## Copilot &#39;, -- Header to use for AI answers&#xA;  error_header = &#39;## Error &#39;, -- Header to use for errors&#xA;  separator = &#39;---&#39;, -- Separator to use in chat&#xA;&#xA;  show_folds = true, -- Shows folds for sections in chat&#xA;  show_help = true, -- Shows help message as virtual lines when waiting for user input&#xA;  auto_follow_cursor = true, -- Auto-follow cursor in chat&#xA;  auto_insert_mode = false, -- Automatically enter insert mode when opening window and if auto follow cursor is enabled on new prompt&#xA;  clear_chat_on_new_prompt = false, -- Clears chat on every new prompt&#xA;&#xA;  context = nil, -- Default context to use, &#39;buffers&#39;, &#39;buffer&#39; or none (can be specified manually in prompt via @).&#xA;  history_path = vim.fn.stdpath(&#39;data&#39;) .. &#39;/copilotchat_history&#39;, -- Default path to stored history&#xA;  callback = nil, -- Callback to use when ask response is received&#xA;&#xA;  -- default selection (visual or line)&#xA;  selection = function(source)&#xA;    return select.visual(source) or select.line(source)&#xA;  end,&#xA;&#xA;  -- default prompts&#xA;  prompts = {&#xA;    Explain = {&#xA;      prompt = &#39;/COPILOT_EXPLAIN Write an explanation for the active selection as paragraphs of text.&#39;,&#xA;    },&#xA;    Review = {&#xA;      prompt = &#39;/COPILOT_REVIEW Review the selected code.&#39;,&#xA;      callback = function(response, source)&#xA;        -- see config.lua for implementation&#xA;      end,&#xA;    },&#xA;    Fix = {&#xA;      prompt = &#39;/COPILOT_GENERATE There is a problem in this code. Rewrite the code to show it with the bug fixed.&#39;,&#xA;    },&#xA;    Optimize = {&#xA;      prompt = &#39;/COPILOT_GENERATE Optimize the selected code to improve performance and readablilty.&#39;,&#xA;    },&#xA;    Docs = {&#xA;      prompt = &#39;/COPILOT_GENERATE Please add documentation comment for the selection.&#39;,&#xA;    },&#xA;    Tests = {&#xA;      prompt = &#39;/COPILOT_GENERATE Please generate tests for my code.&#39;,&#xA;    },&#xA;    FixDiagnostic = {&#xA;      prompt = &#39;Please assist with the following diagnostic issue in file:&#39;,&#xA;      selection = select.diagnostics,&#xA;    },&#xA;    Commit = {&#xA;      prompt = &#39;Write commit message for the change with commitizen convention. Make sure the title has maximum 50 characters and message is wrapped at 72 characters. Wrap the whole message in code block with language gitcommit.&#39;,&#xA;      selection = select.gitdiff,&#xA;    },&#xA;    CommitStaged = {&#xA;      prompt = &#39;Write commit message for the change with commitizen convention. Make sure the title has maximum 50 characters and message is wrapped at 72 characters. Wrap the whole message in code block with language gitcommit.&#39;,&#xA;      selection = function(source)&#xA;        return select.gitdiff(source, true)&#xA;      end,&#xA;    },&#xA;  },&#xA;&#xA;  -- default window options&#xA;  window = {&#xA;    layout = &#39;vertical&#39;, -- &#39;vertical&#39;, &#39;horizontal&#39;, &#39;float&#39;, &#39;replace&#39;&#xA;    width = 0.5, -- fractional width of parent, or absolute width in columns when &amp;gt; 1&#xA;    height = 0.5, -- fractional height of parent, or absolute height in rows when &amp;gt; 1&#xA;    -- Options below only apply to floating windows&#xA;    relative = &#39;editor&#39;, -- &#39;editor&#39;, &#39;win&#39;, &#39;cursor&#39;, &#39;mouse&#39;&#xA;    border = &#39;single&#39;, -- &#39;none&#39;, single&#39;, &#39;double&#39;, &#39;rounded&#39;, &#39;solid&#39;, &#39;shadow&#39;&#xA;    row = nil, -- row position of the window, default is centered&#xA;    col = nil, -- column position of the window, default is centered&#xA;    title = &#39;Copilot Chat&#39;, -- title of chat window&#xA;    footer = nil, -- footer of chat window&#xA;    zindex = 1, -- determines if window is on top or below other floating windows&#xA;  },&#xA;&#xA;  -- default mappings&#xA;  mappings = {&#xA;    complete = {&#xA;      detail = &#39;Use @&amp;lt;Tab&amp;gt; or /&amp;lt;Tab&amp;gt; for options.&#39;,&#xA;      insert =&#39;&amp;lt;Tab&amp;gt;&#39;,&#xA;    },&#xA;    close = {&#xA;      normal = &#39;q&#39;,&#xA;      insert = &#39;&amp;lt;C-c&amp;gt;&#39;&#xA;    },&#xA;    reset = {&#xA;      normal =&#39;&amp;lt;C-l&amp;gt;&#39;,&#xA;      insert = &#39;&amp;lt;C-l&amp;gt;&#39;&#xA;    },&#xA;    submit_prompt = {&#xA;      normal = &#39;&amp;lt;CR&amp;gt;&#39;,&#xA;      insert = &#39;&amp;lt;C-m&amp;gt;&#39;&#xA;    },&#xA;    accept_diff = {&#xA;      normal = &#39;&amp;lt;C-y&amp;gt;&#39;,&#xA;      insert = &#39;&amp;lt;C-y&amp;gt;&#39;&#xA;    },&#xA;    yank_diff = {&#xA;      normal = &#39;gy&#39;,&#xA;    },&#xA;    show_diff = {&#xA;      normal = &#39;gd&#39;&#xA;    },&#xA;    show_system_prompt = {&#xA;      normal = &#39;gp&#39;&#xA;    },&#xA;    show_user_selection = {&#xA;      normal = &#39;gs&#39;&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further reference, you can view @jellydn&#39;s &lt;a href=&#34;https://github.com/jellydn/lazy-nvim-ide/raw/main/lua/plugins/extras/copilot-chat-v2.lua&#34;&gt;configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Defining a prompt with command and keymap&lt;/h3&gt; &#xA;&lt;p&gt;This will define prompt that you can reference with &lt;code&gt;/MyCustomPrompt&lt;/code&gt; in chat, call with &lt;code&gt;:CopilotChatMyCustomPrompt&lt;/code&gt; or use the keymap &lt;code&gt;&amp;lt;leader&amp;gt;ccmc&lt;/code&gt;. It will use visual selection as default selection. If you are using &lt;code&gt;lazy.nvim&lt;/code&gt; and are already lazy loading based on &lt;code&gt;Commands&lt;/code&gt; make sure to include the prompt commands and keymaps in &lt;code&gt;cmd&lt;/code&gt; and &lt;code&gt;keys&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  prompts = {&#xA;    MyCustomPrompt = {&#xA;      prompt = &#39;Explain how it works.&#39;,&#xA;      mapping = &#39;&amp;lt;leader&amp;gt;ccmc&#39;,&#xA;      description = &#39;My custom prompt description&#39;,&#xA;      selection = require(&#39;CopilotChat.select&#39;).visual,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Referencing system or user prompts&lt;/h3&gt; &#xA;&lt;p&gt;You can reference system or user prompts in your configuration or in chat with &lt;code&gt;/PROMPT_NAME&lt;/code&gt; slash notation. For collection of default &lt;code&gt;COPILOT_&lt;/code&gt; (system) and &lt;code&gt;USER_&lt;/code&gt; (user) prompts, see &lt;a href=&#34;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/canary/lua/CopilotChat/prompts.lua&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  prompts = {&#xA;    MyCustomPrompt = {&#xA;      prompt = &#39;/COPILOT_EXPLAIN Explain how it works.&#39;,&#xA;    },&#xA;    MyCustomPrompt2 = {&#xA;      prompt = &#39;/MyCustomPrompt Include some additional context.&#39;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom system prompts&lt;/h3&gt; &#xA;&lt;p&gt;You can define custom system prompts by using &lt;code&gt;system_prompt&lt;/code&gt; property when passing config around.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  system_prompt = &#39;Your name is Github Copilot and you are a AI assistant for developers.&#39;,&#xA;  prompts = {&#xA;    MyCustomPromptWithCustomSystemPrompt = {&#xA;      system_prompt = &#39;Your name is Johny Microsoft and you are not an AI assistant for developers.&#39;,&#xA;      prompt = &#39;Explain how it works.&#39;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizing buffers&lt;/h3&gt; &#xA;&lt;p&gt;You can set local options for the buffers that are created by this plugin: &lt;code&gt;copilot-diff&lt;/code&gt;, &lt;code&gt;copilot-system-prompt&lt;/code&gt;, &lt;code&gt;copilot-user-selection&lt;/code&gt;, &lt;code&gt;copilot-chat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#39;BufEnter&#39;, {&#xA;    pattern = &#39;copilot-*&#39;,&#xA;    callback = function()&#xA;        vim.opt_local.relativenumber = true&#xA;&#xA;        -- C-p to print last response&#xA;        vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-p&amp;gt;&#39;, function()&#xA;          print(require(&#34;CopilotChat&#34;).response())&#xA;        end, { buffer = true, remap = true })&#xA;    end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Quick chat with your buffer&lt;/summary&gt; &#xA; &lt;p&gt;To chat with Copilot using the entire content of the buffer, you can add the following configuration to your keymap:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lazy.nvim keys&#xA;&#xA;  -- Quick chat with Copilot&#xA;  {&#xA;    &#34;&amp;lt;leader&amp;gt;ccq&#34;,&#xA;    function()&#xA;      local input = vim.fn.input(&#34;Quick Chat: &#34;)&#xA;      if input ~= &#34;&#34; then&#xA;        require(&#34;CopilotChat&#34;).ask(input, { selection = require(&#34;CopilotChat.select&#34;).buffer })&#xA;      end&#xA;    end,&#xA;    desc = &#34;CopilotChat - Quick chat&#34;,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://gyazo.com/9b8cbf1d78a19f326282a6520bc9aab0&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/9b8cbf1d78a19f326282a6520bc9aab0.gif&#34; alt=&#34;Chat with buffer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Inline chat&lt;/summary&gt; &#xA; &lt;p&gt;Change the window layout to &lt;code&gt;float&lt;/code&gt; and position relative to cursor to make the window look like inline chat. This will allow you to chat with Copilot without opening a new window.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lazy.nvim opts&#xA;&#xA;  {&#xA;    window = {&#xA;      layout = &#39;float&#39;,&#xA;      relative = &#39;cursor&#39;,&#xA;      width = 1,&#xA;      height = 0.4,&#xA;      row = 1&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/assets/5115805/608e3c9b-8569-408d-a5d1-2213325fc93c&#34; alt=&#34;inline-chat&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Telescope integration&lt;/summary&gt; &#xA; &lt;p&gt;Requires &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; plugin to be installed.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lazy.nvim keys&#xA;&#xA;  -- Show help actions with telescope&#xA;  {&#xA;    &#34;&amp;lt;leader&amp;gt;cch&#34;,&#xA;    function()&#xA;      local actions = require(&#34;CopilotChat.actions&#34;)&#xA;      require(&#34;CopilotChat.integrations.telescope&#34;).pick(actions.help_actions())&#xA;    end,&#xA;    desc = &#34;CopilotChat - Help actions&#34;,&#xA;  },&#xA;  -- Show prompts actions with telescope&#xA;  {&#xA;    &#34;&amp;lt;leader&amp;gt;ccp&#34;,&#xA;    function()&#xA;      local actions = require(&#34;CopilotChat.actions&#34;)&#xA;      require(&#34;CopilotChat.integrations.telescope&#34;).pick(actions.prompt_actions())&#xA;    end,&#xA;    desc = &#34;CopilotChat - Prompt actions&#34;,&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/assets/5115805/14360883-7535-4ee3-aca1-79f6c39f626b&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;fzf-lua integration&lt;/summary&gt; &#xA; &lt;p&gt;Requires &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua&#34;&gt;fzf-lua&lt;/a&gt; plugin to be installed.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lazy.nvim keys&#xA;&#xA;  -- Show help actions with fzf-lua&#xA;  {&#xA;    &#34;&amp;lt;leader&amp;gt;cch&#34;,&#xA;    function()&#xA;      local actions = require(&#34;CopilotChat.actions&#34;)&#xA;      require(&#34;CopilotChat.integrations.fzflua&#34;).pick(actions.help_actions())&#xA;    end,&#xA;    desc = &#34;CopilotChat - Help actions&#34;,&#xA;  },&#xA;  -- Show prompts actions with fzf-lua&#xA;  {&#xA;    &#34;&amp;lt;leader&amp;gt;ccp&#34;,&#xA;    function()&#xA;      local actions = require(&#34;CopilotChat.actions&#34;)&#xA;      require(&#34;CopilotChat.integrations.fzflua&#34;).pick(actions.prompt_actions())&#xA;    end,&#xA;    desc = &#34;CopilotChat - Prompt actions&#34;,&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/assets/5115805/743455bb-9517-48a8-a7a1-81215dc3b747&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Roadmap (Wishlist)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use indexed vector database with current workspace for better context selection&lt;/li&gt; &#xA; &lt;li&gt;General QOL improvements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Installing Pre-commit Tool&lt;/h3&gt; &#xA;&lt;p&gt;For development, you can use the provided Makefile command to install the pre-commit tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install-pre-commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the pre-commit tool and the pre-commit hooks.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to this project, please read the &lt;a href=&#34;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/canary/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/gptlang&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/121417512?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;gptlang&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;gptlang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://productsway.com/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/870029?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Dung Duc Huynh (Kaka)&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dung Duc Huynh (Kaka)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://qoobes.dev&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/58834655?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Ahmed Haracic&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ahmed Haracic&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=qoobes&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://youtube.com/@ziontee113&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/102876811?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Trí Thiện Nguyễn&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Trí Thiện Nguyễn&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ziontee113&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/Cassius0924&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/62874592?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;He Zhizhou&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;He Zhizhou&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Cassius0924&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://www.linkedin.com/in/guruprakashrajakkannu/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9963717?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Guruprakash Rajakkannu&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Guruprakash Rajakkannu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=rguruprakash&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/kristofka&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/140354?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;kristofka&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;kristofka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kristofka&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/PostCyberPunk&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/134976996?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;PostCyberPunk&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;PostCyberPunk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PostCyberPunk&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/ktns&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1302759?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Katsuhiko Nishimra&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Katsuhiko Nishimra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ktns&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/errnoh&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/373946?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Erno Hopearuoho&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Erno Hopearuoho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=errnoh&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/shaungarwood&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4156525?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Shaun Garwood&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Shaun Garwood&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=shaungarwood&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/neutrinoA4&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/122616073?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;neutrinoA4&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;neutrinoA4&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/banjocat&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/3247309?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Jack Muratore&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jack Muratore&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=banjocat&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/AdrielVelazquez&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/3443378?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Adriel Velazquez&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Adriel Velazquez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/deathbeam&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/5115805?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Tomas Slusny&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tomas Slusny&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://nisalvd.netlify.com/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/30633436?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Nisal&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nisal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=nisalVD&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://www.gaardhus.dk&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/46934916?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Tobias Gårdhus&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tobias Gårdhus&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gaardhus&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://www.patreon.com/PetrDlouhy&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/156755?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Petr Dlouhý&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Petr Dlouhý&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PetrDlouhy&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://www.dylanmadisetti.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2689338?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Dylan Madisetti&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dylan Madisetti&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=dmadisetti&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/aweis89&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/5186956?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Aaron Weisberg&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Aaron Weisberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/tlacuilose&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/65783495?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Jose Tlacuilo&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jose Tlacuilo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://kevintraver.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/196406?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Kevin Traver&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kevin Traver&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/D7ry&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/92609548?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;dTry&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;dTry&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=D7ry&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://blog.ornew.io&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/19766770?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Arata Furukawa&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Arata Furukawa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ornew&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/lingjie00&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/64540764?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Ling&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ling&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=lingjie00&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind are welcome!&lt;/p&gt; &#xA;&lt;h3&gt;Stargazers over time&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim&#34;&gt;&lt;img src=&#34;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>