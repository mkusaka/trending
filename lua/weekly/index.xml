<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:16:16Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lcpz/awesome-copycats</title>
    <updated>2022-06-02T02:16:16Z</updated>
    <id>tag:github.com,2022-06-02:/lcpz/awesome-copycats</id>
    <link href="https://github.com/lcpz/awesome-copycats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Awesome WM themes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome WM Copycats&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Themes for Awesome WM 4.x&lt;/h2&gt; &#xA;&lt;p&gt;:Author: Luca CPZ :Version: git :License: BY-NC-SA_ :Source: &lt;a href=&#34;https://github.com/lcpz/awesome-copycats&#34;&gt;https://github.com/lcpz/awesome-copycats&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;A set of themes for the Awesome_ window manager, version 4.x.&lt;/p&gt; &#xA;&lt;p&gt;See branches_ for previous versions.&lt;/p&gt; &#xA;&lt;h1&gt;Purpose&lt;/h1&gt; &#xA;&lt;p&gt;The main purpose of this repository is to spread ready to use configurations, which can also serve as a cookbook for customisation.&lt;/p&gt; &#xA;&lt;p&gt;A secondary aim is to add new themes only when they constitute different UI/UX designs.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modularity&lt;/li&gt; &#xA; &lt;li&gt;Autohide widgets&lt;/li&gt; &#xA; &lt;li&gt;Autostart windowless processes&lt;/li&gt; &#xA; &lt;li&gt;Fast MPD and volume shortcuts (first time this trick has been used in Awesome)&lt;/li&gt; &#xA; &lt;li&gt;Shortcuts for copying to the clipboard, toggle wiboxes, widgets popups, screenshots capture, moving and magnifying clients&lt;/li&gt; &#xA; &lt;li&gt;Quake drop-down terminal&lt;/li&gt; &#xA; &lt;li&gt;Calendar with current day highlighted and months switch with a click/scroll&lt;/li&gt; &#xA; &lt;li&gt;Notifications for new mails, current song, volume level, hdd critical state, low battery&lt;/li&gt; &#xA; &lt;li&gt;OpenWeatherMap integration&lt;/li&gt; &#xA; &lt;li&gt;Net carrier status notifier&lt;/li&gt; &#xA; &lt;li&gt;Symbolic tag names&lt;/li&gt; &#xA; &lt;li&gt;DWM-like textual layoutbox&lt;/li&gt; &#xA; &lt;li&gt;Cairo wibar&lt;/li&gt; &#xA; &lt;li&gt;Custom layouts&lt;/li&gt; &#xA; &lt;li&gt;No borders when there&#39;s only one visible client&lt;/li&gt; &#xA; &lt;li&gt;Freedesktop.org compliant menu and desktop icons&lt;/li&gt; &#xA; &lt;li&gt;Vi-like client focus&lt;/li&gt; &#xA; &lt;li&gt;Non-empty tag browsing&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly useless gaps resize&lt;/li&gt; &#xA; &lt;li&gt;Dynamic tagging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Gallery&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Multicolor&lt;/strong&gt;, inspired by lucamanni_&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;http://dotshare.it/public/images/uploads/650.png&#34;&gt;http://dotshare.it/public/images/uploads/650.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Powerarrow&lt;/strong&gt;, porting of romockee_&#39;s&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;http://dotshare.it/public/images/uploads/1453.png&#34;&gt;http://dotshare.it/public/images/uploads/1453.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Powerarrow Dark&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;http://dotshare.it/public/images/uploads/649.jpg&#34;&gt;http://dotshare.it/public/images/uploads/649.jpg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Steamburn&lt;/strong&gt;, porting of ok100_&#39;s dwm&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;http://dotshare.it/public/images/uploads/648.png&#34;&gt;http://dotshare.it/public/images/uploads/648.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Blackburn&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;http://dotshare.it/public/images/uploads/553.png&#34;&gt;http://dotshare.it/public/images/uploads/553.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dremora&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;http://dotshare.it/public/images/uploads/652.png&#34;&gt;http://dotshare.it/public/images/uploads/652.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rainbow&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;http://dotshare.it/public/images/uploads/606.png&#34;&gt;http://dotshare.it/public/images/uploads/606.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Holo&lt;/strong&gt;, requested by amouly_&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;http://dotshare.it/public/images/uploads/651.jpg&#34;&gt;http://dotshare.it/public/images/uploads/651.jpg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Copland&lt;/strong&gt;, inspired by foozer_&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;http://dotshare.it/public/images/uploads/655.png&#34;&gt;http://dotshare.it/public/images/uploads/655.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vertex&lt;/strong&gt;, requested by swordfischer_&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;http://dotshare.it/public/images/uploads/1432.jpg&#34;&gt;http://dotshare.it/public/images/uploads/1432.jpg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules --remote-submodules --depth 1 -j 2 https://github.com/lcpz/awesome-copycats.git&#xA;mv -bv awesome-copycats/{*,.[^.]*} ~/.config/awesome; rm -rf awesome-copycats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you do not want the Git files, use the following as the second command:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mv -bv awesome-copycats/* ~/.config/awesome; rm -rf awesome-copycats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;The modular structure allows to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;set variables&lt;/li&gt; &#xA; &lt;li&gt;define startup processes&lt;/li&gt; &#xA; &lt;li&gt;change keybindings and layouts&lt;/li&gt; &#xA; &lt;li&gt;set client properties&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;in &lt;code&gt;rc.lua&lt;/code&gt;, and&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;configure widgets&lt;/li&gt; &#xA; &lt;li&gt;define wiboxes and screen settings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;in &lt;code&gt;theme.lua&lt;/code&gt;, so that you just need to change &lt;code&gt;chosen_theme&lt;/code&gt; variable in &lt;code&gt;rc.lua&lt;/code&gt; to preserve your preferences &lt;em&gt;and&lt;/em&gt; switch the theme, instead of having file redundancy.&lt;/p&gt; &#xA;&lt;p&gt;Just do the following:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd ~/.config/awesome&#xA;$ cp rc.lua.template rc.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, set the variable &lt;code&gt;chosen_theme&lt;/code&gt; in &lt;code&gt;rc.lua&lt;/code&gt; to your preferred theme, do your settings, and restart Awesome (&lt;code&gt;Mod4 + ctrl + r&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To customize a theme, head over to &lt;code&gt;themes/$chosen_theme/theme.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, if you want to be synced with upstream, modify the theme path in &lt;code&gt;rc.lua&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: diff&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-beautiful.init(string.format(&#34;%s/.config/awesome/themes/%s/theme.lua&#34;, os.getenv(&#34;HOME&#34;), chosen_theme))&#xA;+beautiful.init(string.format(&#34;%s/.config/awesome/themes/%s/theme-personal.lua&#34;, os.getenv(&#34;HOME&#34;), chosen_theme))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then, copy &lt;code&gt;theme.lua&lt;/code&gt; to &lt;code&gt;theme-personal.lua&lt;/code&gt; and do your customizations there.&lt;/p&gt; &#xA;&lt;p&gt;This way, you can safely &lt;code&gt;git pull&lt;/code&gt; anytime.&lt;/p&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;p&gt;Complements are provided by lain_ and freedesktop_. &lt;strong&gt;Be sure&lt;/strong&gt; to satisfy their dependencies_. In particular, mail_ and weather_ widgets have &lt;strong&gt;mandatory&lt;/strong&gt; arguments.&lt;/p&gt; &#xA;&lt;p&gt;The fonts used in the screenshots are: Terminus_ (Multicolor, Powerarrow, Powerarrow Dark), Roboto_ (Holo, Vertex) and Tamzen_ (other ones).&lt;/p&gt; &#xA;&lt;p&gt;As taglist font, Blackburn and Dremora use Icons_, Vertex uses FontAwesome_: be sure to have bitmaps enabled if running under Debian or Ubuntu_.&lt;/p&gt; &#xA;&lt;p&gt;Every theme has a colorscheme_.&lt;/p&gt; &#xA;&lt;p&gt;Additional default software used: ::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;amixer dmenu librewolf mpc mpd scrot unclutter xbacklight xsel slock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.. _BY-NC-SA: &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0&#34;&gt;http://creativecommons.org/licenses/by-nc-sa/4.0&lt;/a&gt; .. _Awesome: &lt;a href=&#34;http://github.com/awesomeWM/awesome&#34;&gt;http://github.com/awesomeWM/awesome&lt;/a&gt; .. _branches: &lt;a href=&#34;https://github.com/lcpz/awesome-copycats/branches&#34;&gt;https://github.com/lcpz/awesome-copycats/branches&lt;/a&gt; .. _lucamanni: &lt;a href=&#34;https://github.com/lucamanni/awesome&#34;&gt;https://github.com/lucamanni/awesome&lt;/a&gt; .. _romockee: &lt;a href=&#34;https://github.com/romockee/powerarrow&#34;&gt;https://github.com/romockee/powerarrow&lt;/a&gt; .. _ok100: &lt;a href=&#34;http://ok100.deviantart.com/art/DWM-January-2013-348656846&#34;&gt;http://ok100.deviantart.com/art/DWM-January-2013-348656846&lt;/a&gt; .. _amouly: &lt;a href=&#34;https://bbs.archlinux.org/viewtopic.php?pid=1307158#p1307158&#34;&gt;https://bbs.archlinux.org/viewtopic.php?pid=1307158#p1307158&lt;/a&gt; .. _swordfischer: &lt;a href=&#34;https://github.com/lcpz/awesome-copycats/issues/53&#34;&gt;https://github.com/lcpz/awesome-copycats/issues/53&lt;/a&gt; .. _foozer: &lt;a href=&#34;http://dotshare.it/dots/499&#34;&gt;http://dotshare.it/dots/499&lt;/a&gt; .. _lain: &lt;a href=&#34;https://github.com/lcpz/lain&#34;&gt;https://github.com/lcpz/lain&lt;/a&gt; .. _freedesktop: &lt;a href=&#34;https://github.com/lcpz/awesome-freedesktop&#34;&gt;https://github.com/lcpz/awesome-freedesktop&lt;/a&gt; .. _Terminus: &lt;a href=&#34;http://terminus-font.sourceforge.net&#34;&gt;http://terminus-font.sourceforge.net&lt;/a&gt; .. _Roboto: &lt;a href=&#34;https://fonts.google.com/specimen/Roboto&#34;&gt;https://fonts.google.com/specimen/Roboto&lt;/a&gt; .. _Tamzen: &lt;a href=&#34;https://github.com/sunaku/tamzen-font&#34;&gt;https://github.com/sunaku/tamzen-font&lt;/a&gt; .. _Icons: &lt;a href=&#34;https://github.com/lcpz/dots/tree/master/.fonts&#34;&gt;https://github.com/lcpz/dots/tree/master/.fonts&lt;/a&gt; .. _FontAwesome: &lt;a href=&#34;https://github.com/FortAwesome/Font-Awesome&#34;&gt;https://github.com/FortAwesome/Font-Awesome&lt;/a&gt; .. _Ubuntu: &lt;a href=&#34;https://wiki.ubuntu.com/Fonts#Enabling_Bitmapped_Fonts&#34;&gt;https://wiki.ubuntu.com/Fonts#Enabling_Bitmapped_Fonts&lt;/a&gt; .. _colorscheme: &lt;a href=&#34;https://github.com/lcpz/dots/tree/master/.colors&#34;&gt;https://github.com/lcpz/dots/tree/master/.colors&lt;/a&gt; .. _dependencies: &lt;a href=&#34;https://github.com/lcpz/lain/wiki#dependencies&#34;&gt;https://github.com/lcpz/lain/wiki#dependencies&lt;/a&gt; .. _mail: &lt;a href=&#34;https://github.com/lcpz/lain/wiki/mail&#34;&gt;https://github.com/lcpz/lain/wiki/mail&lt;/a&gt; .. _weather: &lt;a href=&#34;https://github.com/lcpz/lain/wiki/weather&#34;&gt;https://github.com/lcpz/lain/wiki/weather&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Koko-boya/Grasscutter_Resources</title>
    <updated>2022-06-02T02:16:16Z</updated>
    <id>tag:github.com,2022-06-02:/Koko-boya/Grasscutter_Resources</id>
    <link href="https://github.com/Koko-boya/Grasscutter_Resources" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Combined Resource Folder from Multiple Sources of certain anime game&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Grasscutter_Resources&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Resource Version - &#34;Certain Anime Game&#34; 2.7.0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ExcelBinOutput&lt;/li&gt; &#xA; &lt;li&gt;BinOutput&lt;/li&gt; &#xA; &lt;li&gt;Scripts [Lua From &lt;a href=&#34;https://github.com/lilmayofuksu/animepython&#34;&gt;lilmayofuksu/animepython&lt;/a&gt; - 2.6.51)&lt;/li&gt; &#xA; &lt;li&gt;Readable&lt;/li&gt; &#xA; &lt;li&gt;Subtitle&lt;/li&gt; &#xA; &lt;li&gt;TextMap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Grasscutters/Grasscutter&#34;&gt;Grasscutter&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dimbreath&#34;&gt;Dimbreath&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radioegor146&#34;&gt;radioegor146&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheLostTree&#34;&gt;TheLostTree&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lilmayofuksu/animepython&#34;&gt;lilmayofuksu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>AvarianKnight/pma-voice</title>
    <updated>2022-06-02T02:16:16Z</updated>
    <id>tag:github.com,2022-06-02:/AvarianKnight/pma-voice</id>
    <link href="https://github.com/AvarianKnight/pma-voice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easy drag n&#39; drop resource that gives you a wrapper to use FiveM&#39;s built-in mumble voice.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pma-voice&lt;/h1&gt; &#xA;&lt;p&gt;A voice system designed around the use of FiveM/RedM internal mumble server.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please report any issues you have in the GitHub &lt;a href=&#34;https://github.com/AvarianKnight/pma-voice/issues&#34;&gt;Issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;NOTE: It is expected for servers to be on the latest recommended version, which you can find &lt;a href=&#34;https://runtime.fivem.net/artifacts/fivem/build_server_windows/master/&#34;&gt;here for Windows&lt;/a&gt; and &lt;a href=&#34;https://runtime.fivem.net/artifacts/fivem/build_proot_linux/master/&#34;&gt;here for Linux&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;h1&gt;Compatibility Notice:&lt;/h1&gt; &#xA;&lt;p&gt;This script is not compatible with other voice systems (duh), that means if you have vMenus voice chat you will &lt;strong&gt;have&lt;/strong&gt; to &lt;a href=&#34;https://docs.vespura.com/vmenu/faq/#q-how-do-i-disable-voice-chat&#34;&gt;disable&lt;/a&gt; it.&lt;/p&gt; &#xA;&lt;p&gt;Please do not override &lt;code&gt;NetworkSetTalkerProximity&lt;/code&gt;, &lt;code&gt;MumbleSetAudioInputDistance&lt;/code&gt;, &lt;code&gt;MumbleSetAudioOutputDistance&lt;/code&gt; or &lt;code&gt;NetworkSetVoiceActive&lt;/code&gt; in any of your other scripts as there have been cases where it breaks pma-voice.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@Frazzle for mumble-voip (for which the concept came from)&lt;/li&gt; &#xA; &lt;li&gt;@pichotm for pVoice (where the grid concept came from)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;FiveM/RedM Config&lt;/h1&gt; &#xA;&lt;h3&gt;NOTE: Only use one of the Audio options (don&#39;t enable 3d Audio &amp;amp; Native Audio at the same time), its also recommended to always use voice_useSendingRangeOnly.&lt;/h3&gt; &#xA;&lt;p&gt;You only need to add the convar &lt;strong&gt;if&lt;/strong&gt; you&#39;re changing the value.&lt;/p&gt; &#xA;&lt;p&gt;All of the configs here are set using &lt;code&gt;setr [voice_configOption] [boolean]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Native audio will not work on RedM, you will have to use 3d audio.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ConVar&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Parameter(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_useNativeAudio&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;This will not work for RedM&lt;/strong&gt; Uses the games native audio, will add 3d sound, echo, reverb, and more. &lt;strong&gt;Required for submixs&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_use2dAudio&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Uses 2d audio, will result in same volume sound no matter where they&#39;re at until they leave proximity.&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_use3dAudio&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Uses 3d audio&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_useSendingRangeOnly&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Only allows you to hear people within your hear/send range, prevents people from connecting to your mumble server and trolling.&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;h3&gt;PLEASE NOTE: Any keybind changes only affect new players, if you want to change your key bind go to Key Bindings -&amp;gt; FiveM -&amp;gt; Look for keybinds under &#39;pma-voice&#39;.&lt;/h3&gt; &#xA;&lt;p&gt;All of the config is done via ConVars in order to streamline the process.&lt;/p&gt; &#xA;&lt;p&gt;The ints are used like a boolean to 0 would be false, 1 true.&lt;/p&gt; &#xA;&lt;p&gt;All of the configs here are set using &lt;code&gt;setr [voice_configOption] [int]&lt;/code&gt; OR &lt;code&gt;setr [voice_configOption] &#34;[string]&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Note: If a convar defaults to 1 (true) you don&#39;t have set it again unless you want to disable it.&lt;/h4&gt; &#xA;&lt;h3&gt;General Voice Settings&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ConVar&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Parameter(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_enableUi&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Enables the built in user interface&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_enableProximityCycle&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Enables the usage of the F11 proximity key, if disabled players are stuck on the first proximity&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_defaultCycle&lt;/td&gt; &#xA;   &lt;td&gt;F11&lt;/td&gt; &#xA;   &lt;td&gt;The default key to cycle the players proximity. You can find a list of valid keys &lt;a href=&#34;https://docs.fivem.net/docs/game-references/input-mapper-parameter-ids/keyboard/&#34;&gt;in the Cfx docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_defaultRadioVolume&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;The default volume to set the radio to (has to be between 1 and 100) &lt;em&gt;NOTE: Only new joins will have the new value, players that already joined will not.&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_defaultCallVolume&lt;/td&gt; &#xA;   &lt;td&gt;60&lt;/td&gt; &#xA;   &lt;td&gt;The default volume to set the call to (has to be between 1 and 100) &lt;em&gt;NOTE: Only new joins will have the new value, players that already joined will not.&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_defaultVoiceMode&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Default proximity voice value when player joins server. (Voice Modes; 1:Whisper, 2:Normal, 3:Shouting)&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Call &amp;amp; Radio&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ConVar&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Parameter(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_enableRadios&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Enables the radio sub-modules&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_enableCalls&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Enables the call sub-modules&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_enableSubmix&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Enables the submix which adds a radio/call style submix to their voice &lt;strong&gt;NOTE: Submixs require native audio&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_enableRadioAnim&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Enables (grab shoulder mic) animation while talking on the radio.&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_defaultRadio&lt;/td&gt; &#xA;   &lt;td&gt;LMENU&lt;/td&gt; &#xA;   &lt;td&gt;The default key to use the radio. You can find a list of valid keys &lt;a href=&#34;https://docs.fivem.net/docs/game-references/input-mapper-parameter-ids/keyboard/&#34;&gt;in the FiveM docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Sync&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ConVar&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Parameter(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_refreshRate&lt;/td&gt; &#xA;   &lt;td&gt;200&lt;/td&gt; &#xA;   &lt;td&gt;How often the UI/Proximity is refreshed&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;External Server &amp;amp; Misc.&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ConVar&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Parameter(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_allowSetIntent&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Whether or not to allow players to set their audio intents (you can see more &lt;a href=&#34;https://docs.fivem.net/natives/?_0x6383526B&#34;&gt;here&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_externalAddress&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;The external address to use to connect to the mumble server&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_externalPort&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;The external port to use&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_debugMode&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;1 for basic logs, 4 for verbose logs&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_externalDisallowJoin&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Disables players being allowed to join the server, should only be used if you&#39;re using a FXServer as a external mumble server.&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;voice_hideEndpoints&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Hides the mumble address in logs &lt;em&gt;NOTE: You should only care to hide this for a external server.&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Aces&lt;/h3&gt; &#xA;&lt;p&gt;pma-voice comes with a built in /muteply (tgtPly) (duration) command, in order to allow your staff to use it you will have to grand them the ace!&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;code&gt;add_ace group.superadmin command.muteply allow;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This would only allow the superadmin group to mute players.&lt;/p&gt; &#xA;&lt;h3&gt;Exports&lt;/h3&gt; &#xA;&lt;h4&gt;Client&lt;/h4&gt; &#xA;&lt;h5&gt;Setters&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Export&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Parameter(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/setVoiceProperty.md&#34;&gt;setVoiceProperty&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set config options&lt;/td&gt; &#xA;   &lt;td&gt;string, any&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/setRadioChannel.md&#34;&gt;setRadioChannel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set radio channel&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/setCallChannel.md&#34;&gt;setCallChannel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set call channel&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/setRadioVolume.md&#34;&gt;setRadioVolume&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set radio volume for player&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/setCallVolume.md&#34;&gt;setCallVolume&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set call volume for player&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/setRadioChannel.md&#34;&gt;addPlayerToRadio&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set radio channel&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/setCallChannel.md&#34;&gt;addPlayerToCall&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set call channel&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/removePlayerFromRadio.md&#34;&gt;removePlayerFromRadio&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove player from radio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/removePlayerFromCall.md&#34;&gt;removePlayerFromCall&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove player from call&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Toggles&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Export&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Parameter(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;toggleMutePlayer&lt;/td&gt; &#xA;   &lt;td&gt;Toggles the selected player muted for the local client&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Supported from mumble-voip / toko-voip&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Export&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Parameter(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/setVoiceProperty.md&#34;&gt;SetMumbleProperty&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set config options&lt;/td&gt; &#xA;   &lt;td&gt;string, any&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/setVoiceProperty.md&#34;&gt;SetTokoProperty&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set config options&lt;/td&gt; &#xA;   &lt;td&gt;string, any&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/setRadioChannel.md&#34;&gt;SetRadioChannel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set radio channel&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-setters/setCallChannel.md&#34;&gt;SetCallChannel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set call channel&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Getters&lt;/h4&gt; &#xA;&lt;p&gt;The majority of setters are done through player states, while a small&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;State Bag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Return Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/state-getters/stateBagGetters.md&#34;&gt;proximity&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a table with the mode index, distance, and mode name&lt;/td&gt; &#xA;   &lt;td&gt;table&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/state-getters/stateBagGetters.md&#34;&gt;radioChannel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the players current radio channel, or 0 for none&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/state-getters/stateBagGetters.md&#34;&gt;callChannel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the players current call channel, or 0 for none&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Events&lt;/h4&gt; &#xA;&lt;p&gt;These are events designed for third-party resource integration. These are emitted only to the current client.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Event&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Event Params&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-getters/events.md&#34;&gt;pma-voice:settingsCallback&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When emited it will return the current pma-voice settings.&lt;/td&gt; &#xA;   &lt;td&gt;cb(voiceSettings)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-getters/events.md&#34;&gt;pma-voice:radioActive&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Triggered when the radio is activated / deactivated&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/client-getters/events.md&#34;&gt;pma-voice:setTalkingMode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Triggered on proximity mode change with the voice mode id&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Server&lt;/h4&gt; &#xA;&lt;h5&gt;Setters&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Export&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Parameter(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/server-setters/setPlayerRadio.md&#34;&gt;setPlayerRadio&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sets the players radio channel&lt;/td&gt; &#xA;   &lt;td&gt;int, int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/server-setters/setPlayerCall.md&#34;&gt;setPlayerCall&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sets the players call channel&lt;/td&gt; &#xA;   &lt;td&gt;int, int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/server-setters/addChannelCheck.md&#34;&gt;addChannelCheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adds a channel check to the players radio channel&lt;/td&gt; &#xA;   &lt;td&gt;int, function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Getters&lt;/h5&gt; &#xA;&lt;h6&gt;State Bags&lt;/h6&gt; &#xA;&lt;p&gt;You can access the state with &lt;code&gt;Player(source).state[&#39;state bag here&#39;]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;State Bag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Return Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/state-getters/stateBagGetters.md&#34;&gt;proximity&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a table with the mode index, distance, and mode name&lt;/td&gt; &#xA;   &lt;td&gt;table&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/state-getters/stateBagGetters.md&#34;&gt;radioChannel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the players current radio channel, or 0 for none&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/state-getters/stateBagGetters.md&#34;&gt;callChannel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the players current call channel, or 0 for none&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/state-getters/stateBagGetters.md&#34;&gt;voiceIntent&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the players current voice intent, either &#39;speech&#39; or &#39;music&#39;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;Exports&lt;/h6&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Export&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Parameter(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AvarianKnight/pma-voice/main/docs/server-getters/getPlayersInRadioChannel.md&#34;&gt;getPlayersInRadioChannel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Gets the current players in a radio channel&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>mfussenegger/nvim-dap</title>
    <updated>2022-06-02T02:16:16Z</updated>
    <id>tag:github.com,2022-06-02:/mfussenegger/nvim-dap</id>
    <link href="https://github.com/mfussenegger/nvim-dap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Debug Adapter Protocol client implementation for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DAP (Debug Adapter Protocol)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-dap&lt;/code&gt; is a Debug Adapter Protocol client implementation for &lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt;. &lt;code&gt;nvim-dap&lt;/code&gt; allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launch an application to debug&lt;/li&gt; &#xA; &lt;li&gt;Attach to running applications and debug them&lt;/li&gt; &#xA; &lt;li&gt;Set breakpoints and step through code&lt;/li&gt; &#xA; &lt;li&gt;Inspect the state of the application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38700/124292938-669a7100-db56-11eb-93b8-77b66994fc8a.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Neovim (&amp;gt;= 0.6)&lt;/li&gt; &#xA; &lt;li&gt;nvim-dap is a plugin. Install it like any other Neovim plugin. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generate the documentation for nvim-dap using &lt;code&gt;:helptags ALL&lt;/code&gt; or &lt;code&gt;:helptags &amp;lt;PATH-TO-PLUGIN/doc/&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You&#39;ll need to install and configure a debug adapter per language. See&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&#34;&gt;:help dap.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&#34;&gt;Debug-Adapter Installation&lt;/a&gt; wiki&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:help dap-adapter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:help dap-configuration&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A typical debug flow consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setting breakpoints via &lt;code&gt;:lua require&#39;dap&#39;.toggle_breakpoint()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Launching debug sessions and resuming execution via &lt;code&gt;:lua require&#39;dap&#39;.continue()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Stepping through code via &lt;code&gt;:lua require&#39;dap&#39;.step_over()&lt;/code&gt; and &lt;code&gt;:lua require&#39;dap&#39;.step_into()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Inspecting the state via the built-in REPL: &lt;code&gt;:lua require&#39;dap&#39;.repl.open()&lt;/code&gt; or using the widget UI (&lt;code&gt;:help dap-widgets&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&#34;&gt;:help dap.txt&lt;/a&gt;, &lt;code&gt;:help dap-mapping&lt;/code&gt; and &lt;code&gt;:help dap-api&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;p&gt;In theory all of the languages for which a debug adapter exists should be supported.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/&#34;&gt;Available debug adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&#34;&gt;nvim-dap Debug-Adapter Installation &amp;amp; Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Wiki is community maintained. If you got an adapter working that isn&#39;t listed yet, please extend the Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Some debug adapters have &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Extensions#language-specific-extensions&#34;&gt;language specific extensions&lt;/a&gt;. Using them over a manual configuration is recommended, as they&#39;re usually better maintained.&lt;/p&gt; &#xA;&lt;p&gt;If the instructions in the wiki for a debug adapter are not working, consider that debug adapters may have made changes since the instructions were written. You may want to read the release notes of the debug adapters or try with an older version. Please update the wiki if you discover outdated examples.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Have a basic debugger in Neovim.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extensibility and double as a DAP client library. This allows other plugins to extend the debugging experience. Either by improving the UI or by making it easier to debug parts of an application.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Examples of UI/UX extensions are &lt;a href=&#34;https://github.com/theHamsta/nvim-dap-virtual-text&#34;&gt;nvim-dap-virtual-text&lt;/a&gt; and &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Examples for language specific extensions include &lt;a href=&#34;https://github.com/mfussenegger/nvim-jdtls&#34;&gt;nvim-jdtls&lt;/a&gt; and &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap-python&#34;&gt;nvim-dap-python&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;All known extensions are listed in the &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Extensions&#34;&gt;Wiki&lt;/a&gt;. The wiki is community maintained. Please add new extensions if you built one or if you discovered one that&#39;s not listed.&lt;/p&gt; &#xA;&lt;h2&gt;Non-Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Debug adapter installations are out of scope. It&#39;s not the business of an editor plugin to re-invent a package manager. Use your system package manager. Use Nix. Use Ansible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/nvim-lua/wishlist/issues/37#issuecomment-1023363686&#34;&gt;nvim-dapconfig&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Vim support. It&#39;s not going to happen. Use &lt;a href=&#34;https://github.com/puremourning/vimspector&#34;&gt;vimspector&lt;/a&gt; instead.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/puremourning/vimspector&#34;&gt;vimspector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Give concrete feedback about usability.&lt;/li&gt; &#xA; &lt;li&gt;Triage issues. Many of the problems people encounter are debug adapter specific.&lt;/li&gt; &#xA; &lt;li&gt;Improve upstream debug adapter documentation to make them more editor agnostic.&lt;/li&gt; &#xA; &lt;li&gt;Improve the Wiki. But please refrain from turning it into comprehensive debug adapter documentation that should go upstream.&lt;/li&gt; &#xA; &lt;li&gt;Write extensions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before making direct code contributions, please create a discussion or issue to clarify whether the change is in scope of the nvim-dap core.&lt;/p&gt; &#xA;&lt;p&gt;Please keep pull requests focused and don&#39;t change multiple things at the same time.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; launch debug adapter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; attach to debug adapter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; toggle breakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; breakpoints with conditions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; logpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; set exception breakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; step over, step into, step out&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; step back, reverse continue&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Goto&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; restart&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; stop&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; pause&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; evaluate expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; REPL (incl. commands to show threads, frames and scopes)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-lualine/lualine.nvim</title>
    <updated>2022-06-02T02:16:16Z</updated>
    <id>tag:github.com,2022-06-02:/nvim-lualine/lualine.nvim</id>
    <link href="https://github.com/nvim-lualine/lualine.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A blazing fast and easy to configure neovim statusline plugin written in pure lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lualine.nvim&lt;/h1&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/nvim-lualine/lualine.nvim?style=flat-square&#34; alt=&#34;code size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/nvim-lualine/lualine.nvim?style=flat-square&#34; alt=&#34;license&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;p&gt;A blazing fast and easy to configure Neovim statusline written in Lua.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lualine.nvim&lt;/code&gt; requires Neovim &amp;gt;= 0.5.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to create an issue/PR if you want to see anything else implemented. If you have some question or need help with configuration, start a &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before opening a PR. You can also help with documentation in the &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Here is a preview of what lualine can look like.&lt;/p&gt; &#xA;&lt;p&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650373-bb025580-74bf-11eb-8682-2c09321dd18e.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650377-bd64af80-74bf-11eb-9c55-fbfc51b39fe8.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650378-be95dc80-74bf-11eb-9718-82b242ecdd54.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650381-bfc70980-74bf-11eb-9245-85c48f0f154a.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/103467925-32372b00-4d54-11eb-88d6-6d39c46854d8.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Screenshots of all available themes are listed in &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&#34;&gt;THEMES.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For those who want to break the norms, you can create custom looks for lualine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/evil_lualine.lua&#34;&gt;evil_lualine&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/13149513/113875129-4453ba00-97d8-11eb-8f21-94a9ef565db3.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/slanted-gaps.lua&#34;&gt;slanted-gaps&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/13149513/143395518-f6d6f748-c1ca-491b-9dab-246d0a8cf23f.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/bubbles.lua&#34;&gt;bubbles&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/20235646/131350468-fc556196-5f46-4bfe-a72e-960f6a58db2c.png&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Performance compared to other plugins&lt;/h2&gt; &#xA;&lt;p&gt;Unlike other statusline plugins, lualine loads only the components you specify, and nothing else.&lt;/p&gt; &#xA;&lt;p&gt;Startup time performance measured with an amazing plugin &lt;a href=&#34;https://github.com/dstein64/vim-startuptime&#34;&gt;dstein64/vim-startuptime&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Times are measured with a clean &lt;code&gt;init.vim&lt;/code&gt; with only &lt;code&gt;vim-startuptime&lt;/code&gt;, &lt;code&gt;vim-plug&lt;/code&gt; and given statusline plugin installed. In control just &lt;code&gt;vim-startuptime&lt;/code&gt; and&lt;code&gt;vim-plug&lt;/code&gt; is installed. And measured time is complete startuptime of vim not time spent on specific plugin. These numbers are the average of 20 runs.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;control&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;lualine&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;lightline&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;airline&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17.2 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24.8 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25.5 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;79.9 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Last Updated On: 18-04-2022&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lualine/lualine.nvim&#39;&#xA;&#34; If you want to have icons in your statusline choose one of these&#xA;Plug &#39;kyazdani42/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;nvim-lualine/lualine.nvim&#39;,&#xA;  requires = { &#39;kyazdani42/nvim-web-devicons&#39;, opt = true }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also need to have a patched font if you want icons.&lt;/p&gt; &#xA;&lt;h2&gt;Usage and customization&lt;/h2&gt; &#xA;&lt;p&gt;Lualine has sections as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-------------------------------------------------+&#xA;| A | B | C                             X | Y | Z |&#xA;+-------------------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each sections holds its components e.g. Vim&#39;s current mode.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring lualine in init.vim&lt;/h3&gt; &#xA;&lt;p&gt;All the examples below are in lua. You can use the same examples in &lt;code&gt;.vim&lt;/code&gt; files by wrapping them in lua heredoc like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; END&#xA;require(&#39;lualine&#39;).setup()&#xA;END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, check out &lt;code&gt;:help lua-heredoc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Default configuration&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    icons_enabled = true,&#xA;    theme = &#39;auto&#39;,&#xA;    component_separators = { left = &#39;&#39;, right = &#39;&#39;},&#xA;    section_separators = { left = &#39;&#39;, right = &#39;&#39;},&#xA;    disabled_filetypes = {},&#xA;    always_divide_middle = true,&#xA;    globalstatus = false,&#xA;  },&#xA;  sections = {&#xA;    lualine_a = {&#39;mode&#39;},&#xA;    lualine_b = {&#39;branch&#39;, &#39;diff&#39;, &#39;diagnostics&#39;},&#xA;    lualine_c = {&#39;filename&#39;},&#xA;    lualine_x = {&#39;encoding&#39;, &#39;fileformat&#39;, &#39;filetype&#39;},&#xA;    lualine_y = {&#39;progress&#39;},&#xA;    lualine_z = {&#39;location&#39;}&#xA;  },&#xA;  inactive_sections = {&#xA;    lualine_a = {},&#xA;    lualine_b = {},&#xA;    lualine_c = {&#39;filename&#39;},&#xA;    lualine_x = {&#39;location&#39;},&#xA;    lualine_y = {},&#xA;    lualine_z = {}&#xA;  },&#xA;  tabline = {},&#xA;  extensions = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to get your current lualine config, you can do so with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).get_config()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Starting lualine&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Setting a theme&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { theme = &#39;gruvbox&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All available themes are listed in &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&#34;&gt;THEMES.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please create a PR if you managed to port a popular theme before us, &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&#34;&gt;here is how to do it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customizing themes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local custom_gruvbox = require&#39;lualine.themes.gruvbox&#39;&#xA;&#xA;-- Change the background of lualine_c section for normal mode&#xA;custom_gruvbox.normal.c.bg = &#39;#112233&#39;&#xA;&#xA;require(&#39;lualine&#39;).setup {&#xA;  options = { theme  = custom_gruvbox },&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Theme structure is available &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Writing-a-theme&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Separators&lt;/h3&gt; &#xA;&lt;p&gt;lualine defines two kinds of separators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;section_separators&lt;/code&gt; - separators between sections&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;components_separators&lt;/code&gt; - separators between the different components in sections&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if viewing this README in a browser, chances are the characters below will not be visible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  section_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  component_separators = { left = &#39;&#39;, right = &#39;&#39; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, left refers to the left-most sections (a, b, c), and right refers to the right-most sections (x, y, z).&lt;/p&gt; &#xA;&lt;h4&gt;Disabling separators&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { section_separators = &#39;&#39;, component_separators = &#39;&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Changing components in lualine sections&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {lualine_a = {&#39;mode&#39;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available components&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;branch&lt;/code&gt; (git branch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buffers&lt;/code&gt; (shows currently available buffers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diagnostics&lt;/code&gt; (diagnostics count from your preferred source)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff&lt;/code&gt; (git diff status)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;encoding&lt;/code&gt; (file encoding)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fileformat&lt;/code&gt; (file format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filesize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filetype&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hostname&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;location&lt;/code&gt; (location in file in line:column format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode&lt;/code&gt; (vim mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;progress&lt;/code&gt; (%progress in file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tabs&lt;/code&gt; (shows currently available tabs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;windows&lt;/code&gt; (shows currently available windows)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom components&lt;/h4&gt; &#xA;&lt;h5&gt;Lua functions as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function hello()&#xA;  return [[hello world]]&#xA;end&#xA;sections = { lualine_a = { hello } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim functions as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_a = {&#39;FugitiveHead&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim&#39;s statusline items as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_c = {&#39;%=&#39;, &#39;%t%m&#39;, &#39;%3p&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim variables as lualine component&lt;/h5&gt; &#xA;&lt;p&gt;Variables from &lt;code&gt;g:&lt;/code&gt;, &lt;code&gt;v:&lt;/code&gt;, &lt;code&gt;t:&lt;/code&gt;, &lt;code&gt;w:&lt;/code&gt;, &lt;code&gt;b:&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;go:&lt;/code&gt;, &lt;code&gt;vo:&lt;/code&gt;, &lt;code&gt;to:&lt;/code&gt;, &lt;code&gt;wo:&lt;/code&gt;, &lt;code&gt;bo:&lt;/code&gt; scopes can be used.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h lua-vim-variables&lt;/code&gt; and &lt;code&gt;:h lua-vim-options&lt;/code&gt; if you are not sure what to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_a = { &#39;g:coc_status&#39;, &#39;bo:filetype&#39; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Lua expressions as lualine component&lt;/h5&gt; &#xA;&lt;p&gt;You can use any valid lua expression as a component including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;oneliners&lt;/li&gt; &#xA; &lt;li&gt;global variables&lt;/li&gt; &#xA; &lt;li&gt;require statements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_c = { &#34;os.date(&#39;%a&#39;)&#34;, &#39;data&#39;, &#34;require&#39;lsp-status&#39;.status()&#34; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is a global variable in this example.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Component options&lt;/h3&gt; &#xA;&lt;p&gt;Component options can change the way a component behave. There are two kinds of options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;global options affecting all components&lt;/li&gt; &#xA; &lt;li&gt;local options affecting specific&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Global options can be used as local options (can be applied to specific components) but you cannot use local options as global. Global option used locally overwrites the global, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#39;lualine&#39;).setup {&#xA;      options = { fmt = string.lower },&#xA;      sections = { lualine_a = {&#xA;        { &#39;mode&#39;, fmt = function(str) return str:sub(1,1) end } },&#xA;                  lualine_b = {&#39;branch&#39;} }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; will be formatted with the passed function so only first char will be shown . On the other hand branch will be formatted with global formatter &lt;code&gt;string.lower&lt;/code&gt; so it will be showed in lower case.&lt;/p&gt; &#xA;&lt;h4&gt;Available options&lt;/h4&gt; &#xA;&lt;h4&gt;Global options&lt;/h4&gt; &#xA;&lt;p&gt;These are &lt;code&gt;options&lt;/code&gt; that are used in options table. They set behavior of lualine.&lt;/p&gt; &#xA;&lt;p&gt;Values set here are treated as default for other options that work in component level.&lt;/p&gt; &#xA;&lt;p&gt;For example even though &lt;code&gt;icons_enabled&lt;/code&gt; is a general component option. you can set &lt;code&gt;icons_enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and icons will be disabled on all component. You can still overwrite defaults set in option table by specifying the option value in component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  theme = &#39;auto&#39;, -- lualine theme&#xA;  component_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  section_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  disabled_filetypes = {},     -- Filetypes to disable lualine for.&#xA;  always_divide_middle = true, -- When set to true, left sections i.e. &#39;a&#39;,&#39;b&#39; and &#39;c&#39;&#xA;                               -- can&#39;t take over the entire statusline even&#xA;                               -- if neither of &#39;x&#39;, &#39;y&#39; or &#39;z&#39; are present.&#xA;  globalstatus = false,        -- enable global statusline (have a single statusline&#xA;                               -- at bottom of neovim instead of one for  every window).&#xA;                               -- This feature is only available in neovim 0.7 and higher.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;General component options&lt;/h4&gt; &#xA;&lt;p&gt;These are options that control behavior at component level and are available for all components.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;mode&#39;,&#xA;      icons_enabled = true, -- Enables the display of icons alongside the component.&#xA;      -- Defines the icon to be displayed in front of the component.&#xA;      -- Can be string|table&#xA;      -- As table it must contain the icon as first entry and can use&#xA;      -- color option to custom color the icon. Example:&#xA;      -- {&#39;branch&#39;, icon = &#39;&#39;} / {&#39;branch&#39;, icon = {&#39;&#39;, color={fg=&#39;green&#39;}}}&#xA;&#xA;      -- icon position can also be set to the right side from table. Example:&#xA;      -- {&#39;branch&#39;, icon = {&#39;&#39;, align=&#39;right&#39;, color={fg=&#39;green&#39;}}}&#xA;      icon = nil,&#xA;&#xA;      separator = nil,      -- Determines what separator to use for the component.&#xA;                            -- Note:&#xA;                            --  When a string is provided it&#39;s treated as component_separator.&#xA;                            --  When a table is provided it&#39;s treated as section_separator.&#xA;                            --  Passing an empty string disables the separator.&#xA;                            --&#xA;                            -- These options can be used to set colored separators&#xA;                            -- around a component.&#xA;                            --&#xA;                            -- The options need to be set as such:&#xA;                            --   separator = { left = &#39;&#39;, right = &#39;&#39;}&#xA;                            --&#xA;                            -- Where left will be placed on left side of component,&#xA;                            -- and right will be placed on its right.&#xA;                            --&#xA;&#xA;      cond = nil,           -- Condition function, the component is loaded when the function returns `true`.&#xA;&#xA;      -- Defines a custom color for the component:&#xA;      --&#xA;      -- &#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; } | function&#xA;      -- Note:&#xA;      --  &#39;|&#39; is synonymous with &#39;or&#39;, meaning a different acceptable format for that placeholder.&#xA;      -- color function has to return one of other color types (&#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; })&#xA;      -- color functions can be used to have different colors based on state as shown below.&#xA;      --&#xA;      -- Examples:&#xA;      --   color = { fg = &#39;#ffaa88&#39;, bg = &#39;grey&#39;, gui=&#39;italic,bold&#39; },&#xA;      --   color = { fg = 204 }   -- When fg/bg are omitted, they default to the your theme&#39;s fg/bg.&#xA;      --   color = &#39;WarningMsg&#39;   -- Highlight groups can also be used.&#xA;      --   color = function(section)&#xA;      --      return { fg = vim.bo.modified and &#39;#aa3355&#39; or &#39;#33aa88&#39; }&#xA;      --   end,&#xA;      color = nil, -- The default is your theme&#39;s color for that section and mode.&#xA;&#xA;      -- Specify what type a component is, if omitted, lualine will guess it for you.&#xA;      --&#xA;      -- Available types are:&#xA;      --   [format: type_name(example)], mod(branch/filename),&#xA;      --   stl(%f/%m), var(g:coc_status/bo:modifiable),&#xA;      --   lua_expr(lua expressions), vim_fun(viml function name)&#xA;      --&#xA;      -- Note:&#xA;      -- lua_expr is short for lua-expression and vim_fun is short for vim-function.&#xA;      type = nil,&#xA;&#xA;      padding = 1, -- Adds padding to the left and right of components.&#xA;                   -- Padding can be specified to left or right independently, e.g.:&#xA;                   --   padding = { left = left_padding, right = right_padding }&#xA;&#xA;      fmt = nil,   -- Format function, formats the component&#39;s output.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Component specific options&lt;/h4&gt; &#xA;&lt;p&gt;These are options that are available on specific components. For example you have option on &lt;code&gt;diagnostics&lt;/code&gt; component to specify what your diagnostic sources will be.&lt;/p&gt; &#xA;&lt;h4&gt;buffers component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;buffers&#39;,&#xA;      show_filename_only = true,   -- Shows shortened relative path when set to false.&#xA;      hide_filename_extension = false,   -- Hide filename extension when set to true.&#xA;      show_modified_status = true, -- Shows indicator when the buffer is modified.&#xA;&#xA;      mode = 0, -- 0: Shows buffer name&#xA;                -- 1: Shows buffer index&#xA;                -- 2: Shows buffer name + buffer index &#xA;                -- 3: Shows buffer number&#xA;                -- 4: Shows buffer name + buffer number&#xA;&#xA;      max_length = vim.o.columns * 2 / 3, -- Maximum width of buffers component,&#xA;                                          -- it can also be a function that returns&#xA;                                          -- the value of `max_length` dynamically.&#xA;      filetype_names = {&#xA;        TelescopePrompt = &#39;Telescope&#39;,&#xA;        dashboard = &#39;Dashboard&#39;,&#xA;        packer = &#39;Packer&#39;,&#xA;        fzf = &#39;FZF&#39;,&#xA;        alpha = &#39;Alpha&#39;&#xA;      }, -- Shows specific buffer name for that filetype ( { `filetype` = `buffer_name`, ... } )&#xA;&#xA;      buffers_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active buffer.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive buffer.&#xA;      },&#xA;&#xA;      symbols = {&#xA;        modified = &#39; ●&#39;,      -- Text to show when the buffer is modified&#xA;        alternate_file = &#39;#&#39;, -- Text to show to identify the alternate file&#xA;        directory =  &#39;&#39;,     -- Text to show when the buffer is a directory&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;diagnostics component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;diagnostics&#39;,&#xA;&#xA;      -- Table of diagnostic sources, available sources are:&#xA;      --   &#39;nvim_lsp&#39;, &#39;nvim_diagnostic&#39;, &#39;coc&#39;, &#39;ale&#39;, &#39;vim_lsp&#39;.&#xA;      -- or a function that returns a table as such:&#xA;      --   { error=error_cnt, warn=warn_cnt, info=info_cnt, hint=hint_cnt }&#xA;      sources = { &#39;nvim_diagnostic&#39;, &#39;coc&#39; },&#xA;&#xA;      -- Displays diagnostics for the defined severity types&#xA;      sections = { &#39;error&#39;, &#39;warn&#39;, &#39;info&#39;, &#39;hint&#39; },&#xA;&#xA;      diagnostics_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        error = &#39;DiagnosticError&#39;, -- Changes diagnostics&#39; error color.&#xA;        warn  = &#39;DiagnosticWarn&#39;,  -- Changes diagnostics&#39; warn color.&#xA;        info  = &#39;DiagnosticInfo&#39;,  -- Changes diagnostics&#39; info color.&#xA;        hint  = &#39;DiagnosticHint&#39;,  -- Changes diagnostics&#39; hint color.&#xA;      },&#xA;      symbols = {error = &#39;E&#39;, warn = &#39;W&#39;, info = &#39;I&#39;, hint = &#39;H&#39;},&#xA;      colored = true,           -- Displays diagnostics status in color if set to true.&#xA;      update_in_insert = false, -- Update diagnostics in insert mode.&#xA;      always_visible = false,   -- Show diagnostics even if there are none.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;diff component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;diff&#39;,&#xA;      colored = true, -- Displays a colored diff status if set to true&#xA;      diff_color = {&#xA;        -- Same color values as the general color option can be used here.&#xA;        added    = &#39;DiffAdd&#39;,    -- Changes the diff&#39;s added color&#xA;        modified = &#39;DiffChange&#39;, -- Changes the diff&#39;s modified color&#xA;        removed  = &#39;DiffDelete&#39;, -- Changes the diff&#39;s removed color you&#xA;      },&#xA;      symbols = {added = &#39;+&#39;, modified = &#39;~&#39;, removed = &#39;-&#39;}, -- Changes the symbols used by the diff.&#xA;      source = nil, -- A function that works as a data source for diff.&#xA;                    -- It must return a table as such:&#xA;                    --   { added = add_count, modified = modified_count, removed = removed_count }&#xA;                    -- or nil on failure. count &amp;lt;= 0 won&#39;t be displayed.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;fileformat component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;fileformat&#39;,&#xA;      symbols = {&#xA;        unix = &#39;&#39;, -- e712&#xA;        dos = &#39;&#39;,  -- e70f&#xA;        mac = &#39;&#39;,  -- e711&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;filename component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;filename&#39;,&#xA;      file_status = true,      -- Displays file status (readonly status, modified status)&#xA;      path = 0,                -- 0: Just the filename&#xA;                               -- 1: Relative path&#xA;                               -- 2: Absolute path&#xA;                               -- 3: Absolute path, with tilde as the home directory&#xA;&#xA;      shorting_target = 40,    -- Shortens path to leave 40 spaces in the window&#xA;                               -- for other components. (terrible name, any suggestions?)&#xA;      symbols = {&#xA;        modified = &#39;[+]&#39;,      -- Text to show when the file is modified.&#xA;        readonly = &#39;[-]&#39;,      -- Text to show when the file is non-modifiable or readonly.&#xA;        unnamed = &#39;[No Name]&#39;, -- Text to show for unnamed buffers.&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;filetype component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;filetype&#39;,&#xA;      colored = true,   -- Displays filetype icon in color if set to true&#xA;      icon_only = false, -- Display only an icon for filetype&#xA;      icon = { align = &#39;right&#39; }, -- Display filetype icon on the right hand side&#xA;      -- icon =    {&#39;X&#39;, align=&#39;right&#39;}&#xA;      -- Icon string ^ in table is ignored in filetype component&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;tabs component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;tabs&#39;,&#xA;      max_length = vim.o.columns / 3, -- Maximum width of tabs component.&#xA;                                      -- Note:&#xA;                                      -- It can also be a function that returns&#xA;                                      -- the value of `max_length` dynamically.&#xA;      mode = 0, -- 0: Shows tab_nr&#xA;                -- 1: Shows tab_name&#xA;                -- 2: Shows tab_nr + tab_name&#xA;&#xA;      tabs_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active tab.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive tab.&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;windows component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;windows&#39;,&#xA;      show_filename_only = true,   -- Shows shortened relative path when set to false.&#xA;      show_modified_status = true, -- Shows indicator when the window is modified.&#xA;&#xA;      mode = 0, -- 0: Shows window name&#xA;                -- 1: Shows window index&#xA;                -- 2: Shows window name + window index&#xA;&#xA;      max_length = vim.o.columns * 2 / 3, -- Maximum width of windows component,&#xA;                                          -- it can also be a function that returns&#xA;                                          -- the value of `max_length` dynamically.&#xA;      filetype_names = {&#xA;        TelescopePrompt = &#39;Telescope&#39;,&#xA;        dashboard = &#39;Dashboard&#39;,&#xA;        packer = &#39;Packer&#39;,&#xA;        fzf = &#39;FZF&#39;,&#xA;        alpha = &#39;Alpha&#39;&#xA;      }, -- Shows specific window name for that filetype ( { `filetype` = `window_name`, ... } )&#xA;&#xA;      disabled_buftypes = { &#39;quickfix&#39;, &#39;prompt&#39; }, -- Hide a window if its buffer&#39;s type is disabled&#xA;&#xA;      windows_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active window.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive window.&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Tabline&lt;/h3&gt; &#xA;&lt;p&gt;You can use lualine to display components in tabline. The configuration for tabline sections is exactly the same as that of the statusline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;  lualine_a = {},&#xA;  lualine_b = {&#39;branch&#39;},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the branch and filename components on top of neovim inside tabline.&lt;/p&gt; &#xA;&lt;p&gt;lualine also provides 2 components, buffers and tabs, that you can use to get a more traditional tabline/bufferline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;  lualine_a = {&#39;buffers&#39;},&#xA;  lualine_b = {&#39;branch&#39;},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {&#39;tabs&#39;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Buffers&lt;/h4&gt; &#xA;&lt;p&gt;Shows currently open buffers. Like bufferline . See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#buffers-component-options&#34;&gt;buffers options&lt;/a&gt; for all builtin behaviors of buffers component. You can use &lt;code&gt;:LualineBuffersJump&lt;/code&gt; to jump to buffer based on index of buffer in buffers component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;  :LualineBuffersJump 2  &#34; Jumps to 2nd buffer in buffers component.&#xA;  :LualineBuffersJump $  &#34; Jumps to last buffer in buffers component.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tabs&lt;/h4&gt; &#xA;&lt;p&gt;Shows currently open tab. Like usual tabline. See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#tabs-component-options&#34;&gt;tabs options&lt;/a&gt; for all builtin behaviors of tabs component. You can also use &lt;code&gt;:LualineRenameTab&lt;/code&gt; to set a name for a tabpage. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:LualineRenameTab Project_K&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s useful when you&#39;re using rendering mode 2/3 in tabs. To unname a tabpage run &lt;code&gt;:LualineRenameTab&lt;/code&gt; without argument.&lt;/p&gt; &#xA;&lt;h4&gt;Tabline as statusline&lt;/h4&gt; &#xA;&lt;p&gt;You can also completely move your statusline to a tabline by configuring &lt;code&gt;lualine.tabline&lt;/code&gt; and disabling &lt;code&gt;lualine.sections&lt;/code&gt; and &lt;code&gt;lualine.inactive_sections&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;......&#xA;  },&#xA;sections = {},&#xA;inactive_sections = {},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a more sophisticated tabline you can use other tabline plugins with lualine too, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;nvim-bufferline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kdheepak/tabline.nvim&#34;&gt;tabline.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;tabline.nvim even uses lualine&#39;s theme by default 🙌 You can find a bigger list &lt;a href=&#34;https://github.com/rockerBOO/awesome-neovim#tabline&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;lualine extensions change statusline appearance for a window/buffer with specified filetypes.&lt;/p&gt; &#xA;&lt;p&gt;By default no extensions are loaded to improve performance. You can load extensions with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;extensions = {&#39;quickfix&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available extensions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;aerial&lt;/li&gt; &#xA; &lt;li&gt;chadtree&lt;/li&gt; &#xA; &lt;li&gt;fern&lt;/li&gt; &#xA; &lt;li&gt;fugitive&lt;/li&gt; &#xA; &lt;li&gt;fzf&lt;/li&gt; &#xA; &lt;li&gt;nerdtree&lt;/li&gt; &#xA; &lt;li&gt;neo-tree&lt;/li&gt; &#xA; &lt;li&gt;nvim-tree&lt;/li&gt; &#xA; &lt;li&gt;quickfix&lt;/li&gt; &#xA; &lt;li&gt;symbols-outline&lt;/li&gt; &#xA; &lt;li&gt;toggleterm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom extensions&lt;/h4&gt; &#xA;&lt;p&gt;You can define your own extensions. If you believe an extension may be useful to others, then please submit a PR.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local my_extension = { sections = { lualine_a = {&#39;mode&#39;} }, filetypes = {&#39;lua&#39;} }&#xA;require(&#39;lualine&#39;).setup { extensions = { my_extension } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Disabling lualine&lt;/h3&gt; &#xA;&lt;p&gt;You can disable lualine for specific filetypes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { disabled_filetypes = {&#39;lua&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to these wonderful people, we enjoy this awesome plugin.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=nvim-lualine/lualine.nvim&#34;&gt; &lt;/a&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Wiki&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki&#34;&gt;wiki&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;You can find some useful &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Component-snippets&#34;&gt;configuration snippets&lt;/a&gt; here. You can also share your awesome snippets with others.&lt;/p&gt; &#xA;&lt;p&gt;If you want to extend lualine with plugins or want to know which ones already do, &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Plugins&#34;&gt;wiki/plugins&lt;/a&gt; is for you.&lt;/p&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;If you appreciate my work you can buy me a coffee.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/shadmansalJ&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-black.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>