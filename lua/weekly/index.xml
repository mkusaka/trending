<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-04T02:02:57Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opentibiabr/canary</title>
    <updated>2023-06-04T02:02:57Z</updated>
    <id>tag:github.com,2023-06-04:/opentibiabr/canary</id>
    <link href="https://github.com/opentibiabr/canary" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Canary Server 13.x for OpenTibia community.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTibiaBR - Canary&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/gvTj5sh9Mp&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/528117503952551936.svg?style=flat-square&amp;amp;logo=discord&#34; alt=&#34;Discord Channel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opentibiabr/canary/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/opentibiabr/canary&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opentibiabr/canary/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/opentibiabr/canary&#34; alt=&#34;GitHub pull request&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opentibiabr/canary/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/opentibiabr/canary.svg?style=flat-square&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opentibiabr/canary/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/opentibiabr/canary&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/opentibiabr/canary&#34; alt=&#34;GitHub repo size&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sonarcloud.io/dashboard?id=opentibiabr_canary&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=opentibiabr_canary&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Builds&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opentibiabr/canary/actions/workflows/build-ubuntu.yml&#34;&gt;&lt;img src=&#34;https://github.com/opentibiabr/canary/actions/workflows/build-ubuntu.yml/badge.svg?sanitize=true&#34; alt=&#34;Build - Ubuntu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opentibiabr/canary/actions/workflows/build-windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/opentibiabr/canary/actions/workflows/build-windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Build - Windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;docker pull opentibiabr/canary:latest&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://hub.docker.com/r/opentibiabr/canary&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/automated/opentibiabr/canary&#34; alt=&#34;Automation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/opentibiabr/canary/tags?page=1&amp;amp;ordering=last_updated&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/opentibiabr/canary&#34; alt=&#34;Image Size&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/opentibiabr/canary&#34; alt=&#34;Pulls&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/opentibiabr/canary/builds&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/opentibiabr/canary&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project&lt;/h2&gt; &#xA;&lt;p&gt;OpenTibiaBR - Canary is a free and open-source MMORPG server emulator written in C++.&lt;/p&gt; &#xA;&lt;p&gt;It is a fork of the &lt;a href=&#34;https://github.com/opentibiabr/otservbr-global&#34;&gt;OTServBR-Global&lt;/a&gt; project. You can see the repository history in the &lt;a href=&#34;https://github.com/opentibiabr/otservbr-global/releases/&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project was created with the intention of being a base as clean as possible, to work as an MMORPG engine and not necessarily linked to Tibia Global, although it will also work. The OpenTibiaBR - Global was adapted to work with the source of the Canary, so that it will be the first repository to use this engine.&lt;/p&gt; &#xA;&lt;p&gt;To connect to the server and to take a stable experience, you can use &lt;a href=&#34;https://github.com/mehah/otclient&#34;&gt;mehah&#39;s otclient&lt;/a&gt; or &lt;a href=&#34;https://github.com/dudantas/tibia-client/releases/latest&#34;&gt;tibia client&lt;/a&gt; and if you want to edit something, check our &lt;a href=&#34;https://docs.opentibiabr.com/others/downloads/tools&#34;&gt;customized tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want edit the map, use the &lt;a href=&#34;https://github.com/opentibiabr/remeres-map-editor/&#34;&gt;own remere&#39;s map editor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You are subject to our code of conduct, read at &lt;a href=&#34;https://github.com/opentibiabr/canary/raw/master/CODE_OF_CONDUCT.md&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting &lt;strong&gt;Started&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.opentibiabr.com/projects/canary&#34;&gt;Gitbook&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opentibiabr/canary/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Issues&lt;/h3&gt; &#xA;&lt;p&gt;We use the &lt;a href=&#34;https://github.com/opentibiabr/canary/issues&#34;&gt;issue tracker on GitHub&lt;/a&gt;. Keep in mind that everyone who is watching the repository gets notified by e-mail when there is an activity, so be thoughtful and avoid writing comments that aren&#39;t meant for an issue (e.g. &#34;+1&#34;). If you&#39;d like for an issue to be fixed faster, you should either fix it yourself and submit a pull request, or place a bounty on the issue.&lt;/p&gt; &#xA;&lt;h3&gt;Pull requests&lt;/h3&gt; &#xA;&lt;p&gt;Before &lt;a href=&#34;https://github.com/opentibiabr/canary/pulls&#34;&gt;creating a pull request&lt;/a&gt; please keep in mind:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not send Pull Request changing the map, as we can&#39;t review the changes it&#39;s better to use our &lt;a href=&#34;https://discord.gg/gvTj5sh9Mp&#34;&gt;Discord&lt;/a&gt; to talk about or send the map changes to the responsible for updating it.&lt;/li&gt; &#xA; &lt;li&gt;Focus on fixing only one thing, mixing too much things on the same Pull Request make it harder to review, harder to test and if we need to revert the change it will remove other things together.&lt;/li&gt; &#xA; &lt;li&gt;Follow the project indentation, if your editor support you can use the &lt;a href=&#34;https://editorconfig.org/&#34;&gt;editorconfig&lt;/a&gt; to automatic configure the indentation.&lt;/li&gt; &#xA; &lt;li&gt;There are people that doesn&#39;t play the game on the official server, so explain your changes to help understand what are you changing and why.&lt;/li&gt; &#xA; &lt;li&gt;Avoid opening a Pull Request to just update one line of an xml file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Special Thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;our partners&lt;/li&gt; &#xA; &lt;li&gt;our crew (majesty, gpedro, eduardo dantas, foot)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opentibiabr/canary/graphs/contributors&#34;&gt;our contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FearLucien&#34;&gt;fear lucien&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Eternal-Scripts&#34;&gt;cjaker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/slavidodo&#34;&gt;slavidodo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ottools&#34;&gt;mignari and our awesome tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattyx14/otxserver&#34;&gt;mattyx14/otxserver&lt;/a&gt; and contributors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/otland/forgottenserver&#34;&gt;otland/forgottenserver&lt;/a&gt; and contributors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SaiyansKing/optimized_forgottenserver&#34;&gt;saiyansking/optimized_forgottenserver&lt;/a&gt; and contributors&lt;/li&gt; &#xA; &lt;li&gt;if we forget someone, we apologize by forgot you. but you know, &lt;strong&gt;forgot&lt;/strong&gt;tenserver.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Sponsors&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://docs.opentibiabr.com/home/donate&#34;&gt;donate page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Partners&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://forums.otserv.com.br&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/otbr/otserv-brasil/main/otbr.png&#34; alt=&#34;Supported by OTServ Brasil&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nvimdev/lspsaga.nvim</title>
    <updated>2023-06-04T02:02:57Z</updated>
    <id>tag:github.com,2023-06-04:/nvimdev/lspsaga.nvim</id>
    <link href="https://github.com/nvimdev/lspsaga.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;improve neovim lsp experience&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;                                 __&#xA;                                / /________  _________ _____ _____ _&#xA;                               / / ___/ __ \/ ___/ __ `/ __ `/ __ `/&#xA;                              / (__  ) /_/ (__  ) /_/ / /_/ / /_/ /&#xA;                             /_/____/ .___/____/\__,_/\__, /\__,_/&#xA;                                   /_/               /____/&#xA;&#xA;                          ⚡ Designed for convenience and efficiency ⚡&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Neovim lsp enhance plugin.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#lspsaga-nvim:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Element-0DBD8B?style=for-the-badge&amp;amp;logo=element&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvimdev/lspsaga.nvim/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvimdev/lspsaga.nvim/main/#example-configuration&#34;&gt;Example Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvimdev/lspsaga.nvim/main/#using-lspsaga&#34;&gt;Using Lspsaga&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvimdev/lspsaga.nvim/main/#customizing-lspsagas-appearance&#34;&gt;Customizing Lspsaga&#39;s Appearance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvimdev/lspsaga.nvim/main/#backers&#34;&gt;Backers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvimdev/lspsaga.nvim/main/#donate&#34;&gt;Donate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvimdev/lspsaga.nvim/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You can use plugin managers like &lt;code&gt;lazy.nvim&lt;/code&gt; and &lt;code&gt;packer.nvim&lt;/code&gt; to install &lt;code&gt;lspsaga&lt;/code&gt; and lazy load &lt;code&gt;lspsaga&lt;/code&gt; using the plugin manager&#39;s keyword for lazy loading (&lt;code&gt;lazy&lt;/code&gt; for &lt;code&gt;lazy.nvim&lt;/code&gt; and &lt;code&gt;opt&lt;/code&gt; for &lt;code&gt;packer.nvim&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cmd&lt;/code&gt; - Load &lt;code&gt;lspsaga&lt;/code&gt; only when a &lt;code&gt;lspsaga&lt;/code&gt; command is called.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ft&lt;/code&gt; - &lt;code&gt;lazy.nvim&lt;/code&gt; and &lt;code&gt;packer.nvim&lt;/code&gt; both provide lazy loading by filetype. This way, you can load &lt;code&gt;lspsaga&lt;/code&gt; according to the filetypes that you use a LSP in.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;event&lt;/code&gt; - Only load &lt;code&gt;lspsaga&lt;/code&gt; on an event like &lt;code&gt;BufRead&lt;/code&gt; or &lt;code&gt;BufReadPost&lt;/code&gt;. Do make sure that your LSP plugins, like &lt;a href=&#34;https://github.com/VonHeikemen/lsp-zero.nvim&#34;&gt;lsp-zero&lt;/a&gt; or &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;lsp-config&lt;/a&gt;, are loaded before loading &lt;code&gt;lspsaga&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dependencies&lt;/code&gt; - For &lt;code&gt;lazy.nvim&lt;/code&gt; you can set &lt;code&gt;glepnir/lspsaga.nvim&lt;/code&gt; as a dependency of &lt;code&gt;nvim-lspconfig&lt;/code&gt; using the &lt;code&gt;dependencies&lt;/code&gt; keyword and vice versa. For &lt;code&gt;packer.nvim&lt;/code&gt; you should use &lt;code&gt;requires&lt;/code&gt; as the keyword instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;after&lt;/code&gt; - For &lt;code&gt;packer.nvim&lt;/code&gt; you can use &lt;code&gt;after&lt;/code&gt; keyword to ensure &lt;code&gt;lspsaga&lt;/code&gt; only loads after your LSP plugins have loaded. This is not necessary for &lt;code&gt;lazy.nvim&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;Lazy&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup({&#xA;    &#34;glepnir/lspsaga.nvim&#34;,&#xA;    event = &#34;LspAttach&#34;,&#xA;    config = function()&#xA;        require(&#34;lspsaga&#34;).setup({})&#xA;    end,&#xA;    dependencies = {&#xA;      {&#34;nvim-tree/nvim-web-devicons&#34;},&#xA;      --Please make sure you install markdown and markdown_inline parser&#xA;      {&#34;nvim-treesitter/nvim-treesitter&#34;}&#xA;    }&#xA;}, opt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;    &#34;glepnir/lspsaga.nvim&#34;,&#xA;    opt = true,&#xA;    branch = &#34;main&#34;,&#xA;    event = &#34;LspAttach&#34;,&#xA;    config = function()&#xA;        require(&#34;lspsaga&#34;).setup({})&#xA;    end,&#xA;    requires = {&#xA;        {&#34;nvim-tree/nvim-web-devicons&#34;},&#xA;        --Please make sure you install markdown and markdown_inline parser&#xA;        {&#34;nvim-treesitter/nvim-treesitter&#34;}&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup({&#xA;    &#34;glepnir/lspsaga.nvim&#34;,&#xA;    event = &#34;LspAttach&#34;,&#xA;    config = function()&#xA;      require(&#34;lspsaga&#34;).setup({})&#xA;    end,&#xA;    dependencies = { {&#34;nvim-tree/nvim-web-devicons&#34;} }&#xA;})&#xA;&#xA;local keymap = vim.keymap.set&#xA;&#xA;-- LSP finder - Find the symbol&#39;s definition&#xA;-- If there is no definition, it will instead be hidden&#xA;-- When you use an action in finder like &#34;open vsplit&#34;,&#xA;-- you can use &amp;lt;C-t&amp;gt; to jump back&#xA;keymap(&#34;n&#34;, &#34;gh&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga lsp_finder&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Code action&#xA;keymap({&#34;n&#34;,&#34;v&#34;}, &#34;&amp;lt;leader&amp;gt;ca&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga code_action&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Rename all occurrences of the hovered word for the entire file&#xA;keymap(&#34;n&#34;, &#34;gr&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga rename&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Rename all occurrences of the hovered word for the selected files&#xA;keymap(&#34;n&#34;, &#34;gr&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga rename ++project&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Peek definition&#xA;-- You can edit the file containing the definition in the floating window&#xA;-- It also supports open/vsplit/etc operations, do refer to &#34;definition_action_keys&#34;&#xA;-- It also supports tagstack&#xA;-- Use &amp;lt;C-t&amp;gt; to jump back&#xA;keymap(&#34;n&#34;, &#34;gp&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga peek_definition&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Go to definition&#xA;keymap(&#34;n&#34;,&#34;gd&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga goto_definition&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Peek type definition&#xA;-- You can edit the file containing the type definition in the floating window&#xA;-- It also supports open/vsplit/etc operations, do refer to &#34;definition_action_keys&#34;&#xA;-- It also supports tagstack&#xA;-- Use &amp;lt;C-t&amp;gt; to jump back&#xA;keymap(&#34;n&#34;, &#34;gt&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga peek_type_definition&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Go to type definition&#xA;keymap(&#34;n&#34;,&#34;gt&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga goto_type_definition&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;&#xA;-- Show line diagnostics&#xA;-- You can pass argument ++unfocus to&#xA;-- unfocus the show_line_diagnostics floating window&#xA;keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;sl&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga show_line_diagnostics&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Show buffer diagnostics&#xA;keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;sb&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga show_buf_diagnostics&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Show workspace diagnostics&#xA;keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;sw&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga show_workspace_diagnostics&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Show cursor diagnostics&#xA;keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;sc&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga show_cursor_diagnostics&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Diagnostic jump&#xA;-- You can use &amp;lt;C-o&amp;gt; to jump back to your previous location&#xA;keymap(&#34;n&#34;, &#34;[e&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga diagnostic_jump_prev&amp;lt;CR&amp;gt;&#34;)&#xA;keymap(&#34;n&#34;, &#34;]e&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga diagnostic_jump_next&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Diagnostic jump with filters such as only jumping to an error&#xA;keymap(&#34;n&#34;, &#34;[E&#34;, function()&#xA;  require(&#34;lspsaga.diagnostic&#34;):goto_prev({ severity = vim.diagnostic.severity.ERROR })&#xA;end)&#xA;keymap(&#34;n&#34;, &#34;]E&#34;, function()&#xA;  require(&#34;lspsaga.diagnostic&#34;):goto_next({ severity = vim.diagnostic.severity.ERROR })&#xA;end)&#xA;&#xA;-- Toggle outline&#xA;keymap(&#34;n&#34;,&#34;&amp;lt;leader&amp;gt;o&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga outline&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Hover Doc&#xA;-- If there is no hover doc,&#xA;-- there will be a notification stating that&#xA;-- there is no information available.&#xA;-- To disable it just use &#34;:Lspsaga hover_doc ++quiet&#34;&#xA;-- Pressing the key twice will enter the hover window&#xA;keymap(&#34;n&#34;, &#34;K&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga hover_doc&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- If you want to keep the hover window in the top right hand corner,&#xA;-- you can pass the ++keep argument&#xA;-- Note that if you use hover with ++keep, pressing this key again will&#xA;-- close the hover window. If you want to jump to the hover window&#xA;-- you should use the wincmd command &#34;&amp;lt;C-w&amp;gt;w&#34;&#xA;keymap(&#34;n&#34;, &#34;K&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga hover_doc ++keep&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Call hierarchy&#xA;keymap(&#34;n&#34;, &#34;&amp;lt;Leader&amp;gt;ci&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga incoming_calls&amp;lt;CR&amp;gt;&#34;)&#xA;keymap(&#34;n&#34;, &#34;&amp;lt;Leader&amp;gt;co&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga outgoing_calls&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;-- Floating terminal&#xA;keymap({&#34;n&#34;, &#34;t&#34;}, &#34;&amp;lt;A-d&amp;gt;&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga term_toggle&amp;lt;CR&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Lspsaga&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that the title in the floating window requires Neovim 0.9 or greater.&lt;/strong&gt; &lt;strong&gt;If you are using Neovim 0.8 you won&#39;t see a title.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;**If you are using Neovim 0.9 and want to disable the title, see &lt;a href=&#34;https://raw.githubusercontent.com/nvimdev/lspsaga.nvim/main/#customizing-lspsagas-appearance&#34;&gt;Customizing Lspsaga&#39;s Appearance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You need not copy all of the options into the setup function. Just set the options that you&#39;ve changed in the setup function and it will be extended with the default options!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find the documentation for Lspsaga in Neovim by using &lt;code&gt;:h lspsaga&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Default options&lt;/h2&gt; &#xA;&lt;p&gt;The top-level default options (command-specific default options below):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  preview = {&#xA;    lines_above = 0,&#xA;    lines_below = 10,&#xA;  },&#xA;  scroll_preview = {&#xA;    scroll_down = &#34;&amp;lt;C-f&amp;gt;&#34;,&#xA;    scroll_up = &#34;&amp;lt;C-b&amp;gt;&#34;,&#xA;  },&#xA;  request_timeout = 2000,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example setup using default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lspsaga&#34;).setup({&#xA;  preview = {&#xA;    lines_above = 0,&#xA;    lines_below = 10,&#xA;  },&#xA;  scroll_preview = {&#xA;    scroll_down = &#34;&amp;lt;C-f&amp;gt;&#34;,&#xA;    scroll_up = &#34;&amp;lt;C-b&amp;gt;&#34;,&#xA;  },&#xA;  request_timeout = 2000,&#xA;&#xA;  -- See Customizing Lspsaga&#39;s Appearance&#xA;  ui = { ... },&#xA;&#xA;  -- For default options for each command, see below&#xA;  finder = { ... },&#xA;  code_action = { ... }&#xA;  -- etc.&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;:Lspsaga lsp_finder&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;finder&lt;/code&gt; to show the definition, reference and implementation (only shown when current hovered word is a function, a type, a class, or an interface).&lt;/p&gt; &#xA;&lt;p&gt;Default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  finder = {&#xA;    max_height = 0.5,&#xA;    min_width = 30,&#xA;    force_max_height = false,&#xA;    keys = {&#xA;      jump_to = &#39;p&#39;,&#xA;      expand_or_jump = &#39;o&#39;,&#xA;      vsplit = &#39;s&#39;,&#xA;      split = &#39;i&#39;,&#xA;      tabe = &#39;t&#39;,&#xA;      tabnew = &#39;r&#39;,&#xA;      quit = { &#39;q&#39;, &#39;&amp;lt;ESC&amp;gt;&#39; },&#xA;      close_in_preview = &#39;&amp;lt;ESC&amp;gt;&#39;,&#xA;    },&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;max_height&lt;/code&gt; of the finder window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force_max_height&lt;/code&gt; force window height to max_height&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keys.jump_to&lt;/code&gt; finder peek window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;close_in_preview&lt;/code&gt; will close all finder window in when you in preview window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;min_width&lt;/code&gt; is finder preview window min width.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lsp_finder showcase&lt;/summary&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/227929557-74ac7d69-2488-46e2-a138-3772a349bcaf.png&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspsaga peek_definition&lt;/h2&gt; &#xA;&lt;p&gt;There are two commands, &lt;code&gt;:Lspsaga peek_definition&lt;/code&gt; and &lt;code&gt;:Lspsaga goto_definition&lt;/code&gt;. The &lt;code&gt;peek_definition&lt;/code&gt; command works like the VSCode command of the same name, which shows the target file in an editable floating window.&lt;/p&gt; &#xA;&lt;p&gt;Default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  definition = {&#xA;    edit = &#34;&amp;lt;C-c&amp;gt;o&#34;,&#xA;    vsplit = &#34;&amp;lt;C-c&amp;gt;v&#34;,&#xA;    split = &#34;&amp;lt;C-c&amp;gt;i&#34;,&#xA;    tabe = &#34;&amp;lt;C-c&amp;gt;t&#34;,&#xA;    quit = &#34;q&#34;,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;peek_definition showcase&lt;/summary&gt; &#xA; &lt;p&gt;The steps demonstrated in this showcase are:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;gp&lt;/code&gt; to run &lt;code&gt;:Lspsaga peek_definition&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Editing a comment and using &lt;code&gt;:w&lt;/code&gt; to save&lt;/li&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;&amp;lt;C-c&amp;gt;o&lt;/code&gt; to jump to the file in the floating window&lt;/li&gt; &#xA;  &lt;li&gt;Lspsaga shows a beacon highlight after jumping to the file&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/215719806-0dea0248-4a2c-45df-a258-43a4ba207a43.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspsaga goto_definition&lt;/h2&gt; &#xA;&lt;p&gt;Jumps to the definition of the hovered word and shows a beacon highlight.&lt;/p&gt; &#xA;&lt;h2&gt;:Lspsaga code_action&lt;/h2&gt; &#xA;&lt;p&gt;Default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  code_action = {&#xA;    num_shortcut = true,&#xA;    show_server_name = false,&#xA;    extend_gitsigns = true,&#xA;    keys = {&#xA;      -- string | table type&#xA;      quit = &#34;q&#34;,&#xA;      exec = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;    },&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;num_shortcut&lt;/code&gt; - It is &lt;code&gt;true&lt;/code&gt; by default so you can quickly run a code action by pressing its corresponding number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;extend_gitsigns&lt;/code&gt; show gitsings in code action.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;code_action showcase&lt;/summary&gt; &#xA; &lt;p&gt;The steps demonstrated in this showcase are:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;ga&lt;/code&gt; to run &lt;code&gt;:Lspsaga code_action&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;j&lt;/code&gt; to move within the code action preview window&lt;/li&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;&amp;lt;Cr&amp;gt;&lt;/code&gt; to run the action&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/215719772-ccebdcba-4e4a-46f7-9af8-61ac8391f2f4.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspsaga Lightbulb&lt;/h2&gt; &#xA;&lt;p&gt;When there are possible code actions to be taken, a lightbulb icon will be shown.&lt;/p&gt; &#xA;&lt;p&gt;Default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  lightbulb = {&#xA;    enable = true,&#xA;    enable_in_insert = true,&#xA;    sign = true,&#xA;    sign_priority = 40,&#xA;    virtual_text = true,&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lightbulb showcase&lt;/summary&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/212009221-e0fb193e-f69d-4ed6-a4a2-d9ecb589f211.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspasga hover_doc&lt;/h2&gt; &#xA;&lt;p&gt;default options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  hover = {&#xA;    max_width = 0.6,&#xA;    open_link = &#39;gx&#39;,&#xA;    open_browser = &#39;!chrome&#39;,&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can use &lt;code&gt;open_link&lt;/code&gt; key to open a http link or a file link in hover doc window. the &lt;code&gt;open_browser&lt;/code&gt; is &lt;code&gt;chrome&lt;/code&gt; in default you need config it to your browser&lt;/p&gt; &#xA;&lt;p&gt;You need install the &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;treesitter&lt;/a&gt; markdown and markdown_inline parser. Lspsaga can use it to render the hover window. You can press the keyboard shortcut for &lt;code&gt;:Lspsaga hover_doc&lt;/code&gt; twice to enter the hover window.&lt;/p&gt; &#xA;&lt;p&gt;if you got something wrong in hover please run &lt;code&gt;:checkhealth&lt;/code&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;hover_docshow case&lt;/summary&gt; &#xA; &lt;p&gt;The steps demonstrated in this showcase are:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;K&lt;/code&gt; once to run &lt;code&gt;:Lspsaga hover_doc&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;K&lt;/code&gt; again to enter the hover window&lt;/li&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;q&lt;/code&gt; to quit&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/215719832-37d2f6ab-66ed-4500-b6de-a6c289983ab2.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspsaga diagnostic_jump_next&lt;/h2&gt; &#xA;&lt;p&gt;Jumps to next diagnostic position and show a beacon highlight. Lspsaga will then show the code actions.&lt;/p&gt; &#xA;&lt;p&gt;Default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  diagnostic = {&#xA;    on_insert = false,&#xA;    on_insert_follow = false,&#xA;    insert_winblend = 0,&#xA;    show_code_action = true,&#xA;    show_source = true,&#xA;    jump_num_shortcut = true,&#xA;    max_width = 0.7,&#xA;    max_height = 0.6,&#xA;    max_show_width = 0.9,&#xA;    max_show_height = 0.6,&#xA;    text_hl_follow = true,&#xA;    border_follow = true,&#xA;    extend_relatedInformation = false,&#xA;    keys = {&#xA;      exec_action = &#39;o&#39;,&#xA;      quit = &#39;q&#39;,&#xA;      expand_or_jump = &#39;&amp;lt;CR&amp;gt;&#39;,&#xA;      quit_in_show = { &#39;q&#39;, &#39;&amp;lt;ESC&amp;gt;&#39; },&#xA;    },&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;jump_num_shortcut&lt;/code&gt; - The default is &lt;code&gt;true&lt;/code&gt;. After jumping, Lspasga will automatically bind code actions to a number. Afterwards, you can press the number to execute the code action. After the floating window is closed, these numbers will no longer be tied to the same code actions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;show_codeaction&lt;/code&gt; default is true it will show available actions in the diagnsotic jump window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;show_source&lt;/code&gt; default is true extend &lt;code&gt;source&lt;/code&gt; into the diagnostic message&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_width&lt;/code&gt; is the max width for diagnostic jump window. percentage&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_height&lt;/code&gt; is the max height of diagnostic jump window percentage&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text_hl_follow&lt;/code&gt; is false default true that you can define &lt;code&gt;DiagnostcText&lt;/code&gt; to custom the diagnotic text color&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;border_follow&lt;/code&gt; the border highlight will follow the diagnostic type. if false it will use the highlight &lt;code&gt;DiagnosticBorder&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;on_insert&lt;/code&gt; default is true it works like the emacs helix show diagnostic in right but in line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;on_insert_follow&lt;/code&gt; true will follow current line. false will on top right&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;insert_winblend&lt;/code&gt; default is 0, when it&#39;s to 100 will completely transparent. the color will changed a little light. 0 will use the &lt;code&gt;NormalFloat&lt;/code&gt; group. it will link to &lt;code&gt;Normal&lt;/code&gt; by Lspsaga.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_show_width&lt;/code&gt; is the width of show diagnostic window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_show_height&lt;/code&gt; is the height of show diagnostic widnow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;extend_relatedInformation&lt;/code&gt; default is false when is true it will extend this message into diagnostic message&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use a filter when using diagnostic jump by using a Lspsaga function. The function takes a table as its argument. It is functionally identical to &lt;code&gt;:h vim.diagnostic.get_next&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- This will only jump to an error&#xA;-- If no error is found, it executes &#34;goto_next&#34;&#xA;require(&#34;lspsaga.diagnostic&#34;):goto_prev({ severity = vim.diagnostic.severity.ERROR })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; showcase&lt;/summary&gt; &#xA; &lt;p&gt;The steps demonstrated in this showcase are:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;[e&lt;/code&gt; to jump to the next diagnostic position, which shows the beacon highlight and the code actions in a diagnostic window&lt;/li&gt; &#xA;  &lt;li&gt;Use &lt;code&gt;scroll_in_preview&lt;/code&gt; keys to show action preview.&lt;/li&gt; &#xA;  &lt;li&gt;Pressing the number &lt;code&gt;2&lt;/code&gt; to execute the code action without needing to enter the floating window&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/227763194-ee0958cf-65f8-4c11-9ee8-956227932114.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you want to see the code action, you can use &lt;code&gt;&amp;lt;C-w&amp;gt;w&lt;/code&gt; to enter the floating window.&lt;/li&gt; &#xA;  &lt;li&gt;Press &lt;code&gt;g&lt;/code&gt; to go to the action line and see the code action preview.&lt;/li&gt; &#xA;  &lt;li&gt;Press &lt;code&gt;o&lt;/code&gt; to execute the action.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;code&gt;on_insert&lt;/code&gt; is true, &lt;code&gt;on_insert_follow&lt;/code&gt; is false&lt;/p&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/219940539-da554175-dd91-4bca-aaf8-ab39d0ba2a2c.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA; &lt;p&gt;&lt;code&gt;on_insert_follow&lt;/code&gt; is true&lt;/p&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/219909443-f5b4f796-e59d-47cf-9f9a-8a9a69d92449.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspsaga show_diagnostics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;show_line_diagnostics&lt;/code&gt;, &lt;code&gt;show_buf_diagnostics&lt;/code&gt;, &lt;code&gt;show_workspace_diagnostics&lt;/code&gt; &lt;code&gt;show_cursor_diagnsotics&lt;/code&gt;. and support an argument &lt;code&gt;++unfocus&lt;/code&gt; to make it unfocus. like &lt;code&gt;:Lspsaga show_workspace_diagnostics ++unfocus&lt;/code&gt; you can press the &lt;code&gt;expand_or_jump&lt;/code&gt; key to expand on fname line or jump into location on message line.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;show_diagnostics showcase&lt;/summary&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/227762998-a61c5df3-6a08-4d76-941c-f1cd2aa77f03.png&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspsaga rename&lt;/h2&gt; &#xA;&lt;p&gt;Uses the current LSP to rename the hovered word.&lt;/p&gt; &#xA;&lt;p&gt;Default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  rename = {&#xA;    quit = &#34;&amp;lt;C-c&amp;gt;&#34;,&#xA;    exec = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;    mark = &#34;x&#34;,&#xA;    confirm = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;    in_select = true,&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mark&lt;/code&gt; is used for the &lt;code&gt;++project&lt;/code&gt; argument. It is used to mark the files which you want to rename the hovered word in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;confirm&lt;/code&gt; - After you have marked the files, press this key to execute the rename.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;rename showcase&lt;/summary&gt; &#xA; &lt;p&gt;The steps demonstrated in this showcase are:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;gr&lt;/code&gt; to run &lt;code&gt;:Lspsaga rename&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Typing &lt;code&gt;stesdd&lt;/code&gt; and then pressing &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to execute the rename&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA; &lt;p&gt;The steps demonstrated in this showcase are:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;gR&lt;/code&gt; to run &lt;code&gt;:Lspsaga rename ++project&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;x&lt;/code&gt; to mark the file&lt;/li&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to execute rename&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/215719843-7278cc97-399f-48ee-88eb-555647eba42f.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspsaga outline&lt;/h2&gt; &#xA;&lt;p&gt;Default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  outline = {&#xA;    win_position = &#34;right&#34;,&#xA;    win_with = &#34;&#34;,&#xA;    win_width = 30,&#xA;    preview_width= 0.4,&#xA;    show_detail = true,&#xA;    auto_preview = true,&#xA;    auto_refresh = true,&#xA;    auto_close = true,&#xA;    auto_resize = false,&#xA;    custom_sort = nil,&#xA;    keys = {&#xA;      expand_or_jump = &#39;o&#39;,&#xA;      quit = &#34;q&#34;,&#xA;    },&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;outline showcase&lt;/summary&gt; &#xA; &lt;p&gt;The steps demonstrated in this showcase are:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Pressing &lt;code&gt;&amp;lt;Leader&amp;gt;o&lt;/code&gt; run &lt;code&gt;:Lspsaga outline&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/215719836-25a03774-891b-4dfd-ab2f-0b590ae1c862.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspsaga incoming_calls / outgoing_calls&lt;/h2&gt; &#xA;&lt;p&gt;Runs the LSP&#39;s callhierarchy/incoming_calls.&lt;/p&gt; &#xA;&lt;p&gt;Default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  callhierarchy = {&#xA;    show_detail = false,&#xA;    keys = {&#xA;      edit = &#34;e&#34;,&#xA;      vsplit = &#34;s&#34;,&#xA;      split = &#34;i&#34;,&#xA;      tabe = &#34;t&#34;,&#xA;      jump = &#34;o&#34;,&#xA;      quit = &#34;q&#34;,&#xA;      expand_collapse = &#34;u&#34;,&#xA;    },&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;incoming_calls showcase&lt;/summary&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/215719762-9482e84b-921e-425e-b1a9-7bd1f569a5ce.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspsaga symbols in winbar&lt;/h2&gt; &#xA;&lt;p&gt;This requires Neovim version &amp;gt;= 0.8.&lt;/p&gt; &#xA;&lt;p&gt;Default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  symbol_in_winbar = {&#xA;    enable = true,&#xA;    separator = &#34; &#34;,&#xA;    ignore_patterns={},&#xA;    hide_keyword = true,&#xA;    show_file = true,&#xA;    folder_level = 2,&#xA;    respect_root = false,&#xA;    color_mode = true,&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;hide_keyword&lt;/code&gt; - The default value is &lt;code&gt;true&lt;/code&gt;. Lspsaga will hide some keywords and temporary variables to make the symbols look cleaner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;folder_level&lt;/code&gt; only works when &lt;code&gt;show_file&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;respect_root&lt;/code&gt; will respect the LSP&#39;s root. If this is &lt;code&gt;true&lt;/code&gt;, Lspsaga will ignore the &lt;code&gt;folder_level&lt;/code&gt; option. If no LSP client is being used, Lspsaga will fall back to using folder level.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;color_mode&lt;/code&gt; - The default value is &lt;code&gt;true&lt;/code&gt;. When it is set to &lt;code&gt;false&lt;/code&gt;, only icons will have color.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore_patterns&lt;/code&gt; table type when fileanme matched the pattern will ignore render symbols. if show_file is true. the file name will still set.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Symbols in winbar&lt;/summary&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/212026278-11012b17-209c-4b55-b76c-1c3d8d9a2eb2.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspsaga symbols in a custom winbar/statusline&lt;/h2&gt; &#xA;&lt;p&gt;Lspsaga provides an API that you can use in your custom winbar or statusline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.wo.winbar / vim.wo.stl = require(&#39;lspsaga.symbolwinbar&#39;):get_winbar()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;:Lspsaga term_toggle&lt;/h2&gt; &#xA;&lt;p&gt;A simple floating terminal.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggling the floating terminal&lt;/summary&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/212027060-56d1cebc-c6a8-412e-bd01-620aac3029ed.gif&#34; height=&#34;80%&#34; width=&#34;80%/&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;:Lspsaga beacon&lt;/h2&gt; &#xA;&lt;p&gt;after jump from float window there will show beacon to remind you where the cursor is.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  beacon = {&#xA;    enable = true,&#xA;    frequency = 7,&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;frequency&lt;/code&gt; the blink frequency.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing Lspsaga&#39;s Appearance&lt;/h2&gt; &#xA;&lt;h2&gt;:Lspsaga UI&lt;/h2&gt; &#xA;&lt;p&gt;Default UI options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  ui = {&#xA;    -- This option only works in Neovim 0.9&#xA;    title = true,&#xA;    -- Border type can be single, double, rounded, solid, shadow.&#xA;    border = &#34;single&#34;,&#xA;    winblend = 0,&#xA;    expand = &#34;&#34;,&#xA;    collapse = &#34;&#34;,&#xA;    code_action = &#34;💡&#34;,&#xA;    incoming = &#34; &#34;,&#xA;    outgoing = &#34; &#34;,&#xA;    hover = &#39; &#39;,&#xA;    kind = {},&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Custom Highlighting&lt;/h1&gt; &#xA;&lt;p&gt;All highlight groups can be found in &lt;a href=&#34;https://raw.githubusercontent.com/nvimdev/lspsaga.nvim/main/lua/lspsaga/highlight.lua&#34;&gt;highlight.lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;require(&#39;lspsaga.lspkind&#39;).get_kind_group()&lt;/code&gt; will return all the SagaWinbar + kind name group . also include &lt;code&gt;SagaWinbarFileName SagaWinbarFileIcon SagaWinbarFolderName SagaWinbarSep&lt;/code&gt;. These groups are special. so if you want use this api to custom the highlight. you need dealwith these 4 groups the last item is &lt;code&gt;SagaWinbarSep&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Custom Kind&lt;/h1&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;ui.kind&lt;/code&gt; to change the icons of the kinds.&lt;/p&gt; &#xA;&lt;p&gt;All kinds used in Lspsaga are defined in &lt;a href=&#34;https://raw.githubusercontent.com/nvimdev/lspsaga.nvim/main/lua/lspsaga/lspkind.lua&#34;&gt;lspkind.lua&lt;/a&gt;. The key in &lt;code&gt;ui.kind&lt;/code&gt; is the kind name, and the value can either be a string or a table. If a string is passed, it is setting the &lt;code&gt;icon&lt;/code&gt;. If table is passed, it will be passed as &lt;code&gt;{ icon, highlight group }&lt;/code&gt;, for example, to change the a folder&#39;s icon color, you could do this: &lt;code&gt;ui = { kind = { [&#34;Folder&#34;] = { &#34; &#34;, &#34;@comment&#34; }, }, },&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Donate&lt;/h1&gt; &#xA;&lt;p&gt;Currently, I am in need of some donations. If you&#39;d like to support my work financially, please donate through Github Sponsor button or &lt;a href=&#34;https://paypal.me/bobbyhub&#34;&gt;PayPal&lt;/a&gt;. Thanks! &lt;a href=&#34;https://paypal.me/bobbyhub&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Backers&lt;/h1&gt; &#xA;&lt;p&gt;Thanks for everyone!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/youngtuotuo&#34;&gt;@Tuo Huang&lt;/a&gt; &lt;a href=&#34;https://github.com/scottming&#34;&gt;@Scott Ming&lt;/a&gt; &lt;a href=&#34;https://github.com/lmllrjr&#34;&gt;@Möller Lukas&lt;/a&gt; &lt;a href=&#34;https://github.com/HendrikPetertje&#34;&gt;@HendrikPetertje&lt;/a&gt; &lt;a href=&#34;https://github.com/bwilytsch&#34;&gt;@Bojan Wilytsch&lt;/a&gt; &lt;a href=&#34;https://github.com/zhourrr&#34;&gt;@zhourrr&lt;/a&gt; &lt;a href=&#34;https://github.com/ca-mantis-shrimp&#34;&gt;@Burgess Darrion&lt;/a&gt; &lt;a href=&#34;https://github.com/al-ce&#34;&gt;@Ceserani Alessandro&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/nvimdev/lspsaga.nvim/main/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rafamadriz/friendly-snippets</title>
    <updated>2023-06-04T02:02:57Z</updated>
    <id>tag:github.com,2023-06-04:/rafamadriz/friendly-snippets</id>
    <link href="https://github.com/rafamadriz/friendly-snippets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Set of preconfigured snippets for different languages.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Friendly Snippets&lt;/h1&gt; &#xA;&lt;p&gt;Snippets collection for a set of different programming languages.&lt;/p&gt; &#xA;&lt;p&gt;The only goal is to have one community driven repository for all kinds of snippets in all programming languages, this way you can have it all in one place.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Use your plugin manager of choice, e.g.&lt;/p&gt; &#xA;&lt;h3&gt;With Lazy.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;rafamadriz/friendly-snippets&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: If you&#39;re using LuaSnip make sure to use &lt;code&gt;require(&#34;luasnip.loaders.from_vscode&#34;).lazy_load()&lt;/code&gt;, and add &lt;code&gt;friendly-snippets&lt;/code&gt; as a dependency for LuaSnip, otherwise snippets might not be detected. If you don&#39;t use &lt;code&gt;lazy_load()&lt;/code&gt; you might notice a slower startup-time&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;L3MON4D3/LuaSnip&#34;,&#xA;  dependencies = { &#34;rafamadriz/friendly-snippets&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;With Packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#34;rafamadriz/friendly-snippets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;rafamadriz/friendly-snippets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With coc.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:CocInstall https://github.com/rafamadriz/friendly-snippets@main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This collection of snippets should work with any snippet engine that supports loading vscode snippets. Like for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/vim-vsnip&#34;&gt;vim-vsnip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;LuaSnip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neoclide/coc-snippets&#34;&gt;coc-snippets&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Add snippets from a framework to a filetype.&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is handled by your snippet engine and has nothing to do with this snippets collection&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There&#39;s extra snippets included in this repo but they are not added by default, since it would be irrelevant for people not using those frameworks. See &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets/tree/main/snippets/frameworks&#34;&gt;&lt;code&gt;snippets/frameworks&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example: if you want to add rails snippets to ruby.&lt;/p&gt; &#xA;&lt;p&gt;With LuaSnip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;luasnip&#39;.filetype_extend(&#34;ruby&#34;, {&#34;rails&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With vim-vsnip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;let g:vsnip_filetypes.ruby = [&#39;rails&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Excluding snippets&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is handled by your snippet engine and has nothing to do with this snippets collection&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;With LuaSnip, see &lt;code&gt;help luasnip-loaders&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- will exclude all javascript snippets&#xA;require(&#34;luasnip.loaders.from_vscode&#34;).load {&#xA;    exclude = { &#34;javascript&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;h3&gt;HTML&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/67771985/131255337-d53f3408-b60d-44a2-93ba-9a3240a7436e.gif&#34; alt=&#34;HTML gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;JS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/67771985/131255342-e393165a-e4b1-401e-9084-a782b9dd3fef.gif&#34; alt=&#34;JS gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add all included snippets to the &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks to all contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=rafamadriz/friendly-snippets&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;A good portion of the snippets have been forked from the following repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/capaj/vscode-standardjs-snippets&#34;&gt;vscode-standardjs-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cstrap/python-snippets&#34;&gt;python-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kitagry/vs-snippets&#34;&gt;vs-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Wscats/html-snippets&#34;&gt;Wscats/html-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Harry-Ross/vscode-c-snippets&#34;&gt;Harry-Ross/vscode-c-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edheltzel/vscode-jekyll-snippets&#34;&gt;vscode-jekyll-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krvajal/vscode-fortran-support&#34;&gt;vscode-fortran-support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spgennard/vscode_cobol&#34;&gt;vscode_cobol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JeffersonQin/VSCode-LaTeX-Snippets&#34;&gt;VSCode-LaTeX-Snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dsznajder/vscode-react-javascript-snippets&#34;&gt;vscode-react-javascript-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/honza/vim-snippets/raw/master/snippets/verilog.snippets&#34;&gt;honza/vim-snippets - Verilog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Relm4/vscode-relm4-snippets&#34;&gt;vscode-relm4-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;And more...&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>