<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-01T01:44:26Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>karb94/neoscroll.nvim</title>
    <updated>2024-12-01T01:44:26Z</updated>
    <id>tag:github.com,2024-12-01:/karb94/neoscroll.nvim</id>
    <link href="https://github.com/karb94/neoscroll.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Smooth scrolling neovim plugin written in lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neoscroll: a smooth scrolling neovim plugin written in lua&lt;/h1&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/41967813/121818668-7b36c800-cc80-11eb-8c3a-45a4767b8f05.mp4&#34;&gt;https://user-images.githubusercontent.com/41967813/121818668-7b36c800-cc80-11eb-8c3a-45a4767b8f05.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Smooth scrolling for window movement commands (mappings optional): &lt;code&gt;&amp;lt;C-u&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;C-d&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;C-e&amp;gt;&lt;/code&gt;, &lt;code&gt;zt&lt;/code&gt;, &lt;code&gt;zz&lt;/code&gt;, &lt;code&gt;zb&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Takes into account folds.&lt;/li&gt; &#xA; &lt;li&gt;A single scrolling function that accepts either the number of lines or the percentage of the window to scroll.&lt;/li&gt; &#xA; &lt;li&gt;Scroll any window.&lt;/li&gt; &#xA; &lt;li&gt;Cursor is hidden while scrolling (optional) for a more pleasing scrolling experience.&lt;/li&gt; &#xA; &lt;li&gt;Customizable scrolling behaviour.&lt;/li&gt; &#xA; &lt;li&gt;You can use predefined easing functions for the scrolling animation.&lt;/li&gt; &#xA; &lt;li&gt;Performance mode that turns off syntax highlighting while scrolling for slower machines or files with heavy regex syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;Cancel scroll by scrolling in the opposite direction.&lt;/li&gt; &#xA; &lt;li&gt;Simulated &#34;stop on key release&#34; when holding down a key to scroll.&lt;/li&gt; &#xA; &lt;li&gt;Scroll any window by window-ID&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You will need neovim 0.5 for this plugin to work. Install it using your favorite plugin manager:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;With &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;: &lt;code&gt;use &#39;karb94/neoscroll.nvim&#39;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;karb94/neoscroll.nvim&#39;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;, create the file &lt;code&gt;~/.config/nvim/lua/plugins/neoscroll.lua&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;karb94/neoscroll.nvim&#34;,&#xA;  config = function ()&#xA;    require(&#39;neoscroll&#39;).setup({})&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;code&gt;:help neoscroll-options&lt;/code&gt; for a detailed description of all the options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setup()&lt;/code&gt; with all the options and their default values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neoscroll&#39;).setup({&#xA;  mappings = {                 -- Keys to be mapped to their corresponding default scrolling animation&#xA;    &#39;&amp;lt;C-u&amp;gt;&#39;, &#39;&amp;lt;C-d&amp;gt;&#39;,&#xA;    &#39;&amp;lt;C-b&amp;gt;&#39;, &#39;&amp;lt;C-f&amp;gt;&#39;,&#xA;    &#39;&amp;lt;C-y&amp;gt;&#39;, &#39;&amp;lt;C-e&amp;gt;&#39;,&#xA;    &#39;zt&#39;, &#39;zz&#39;, &#39;zb&#39;,&#xA;  },&#xA;  hide_cursor = true,          -- Hide cursor while scrolling&#xA;  stop_eof = true,             -- Stop at &amp;lt;EOF&amp;gt; when scrolling downwards&#xA;  respect_scrolloff = false,   -- Stop scrolling when the cursor reaches the scrolloff margin of the file&#xA;  cursor_scrolls_alone = true, -- The cursor will keep on scrolling even if the window cannot scroll further&#xA;  duration_multiplier = 1.0    -- Global duration multiplier&#xA;  easing = &#39;linear&#39;,           -- Default easing function&#xA;  pre_hook = nil,              -- Function to run before the scrolling animation starts&#xA;  post_hook = nil,             -- Function to run after the scrolling animation ends&#xA;  performance_mode = false,    -- Disable &#34;Performance Mode&#34; on all buffers.&#xA;  ignored_events = {           -- Events ignored while scrolling&#xA;      &#39;WinScrolled&#39;, &#39;CursorMoved&#39;&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can map a smaller set of default mappings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neoscroll&#39;).setup({ mappings = {&#39;&amp;lt;C-u&amp;gt;&#39;, &#39;&amp;lt;C-d&amp;gt;&#39;, &#39;&amp;lt;C-b&amp;gt;&#39;, &#39;&amp;lt;C-f&amp;gt;&#39;} })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can disable all default mappings by passing an empty list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neoscroll&#39;).setup({ mappings = {} })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The section below explains how to create your own custom mappings.&lt;/p&gt; &#xA;&lt;h2&gt;Custom mappings&lt;/h2&gt; &#xA;&lt;p&gt;You can create your own scrolling mappings using the following lua functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scroll(lines, opts)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctrl_u&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctrl_d&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctrl_b&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctrl_f&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zt(opts)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zz(opts)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zb(opts)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read &lt;code&gt;:help neoscroll.scroll()&lt;/code&gt; and &lt;code&gt;:help neoscroll-helper-functions&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;You can use the following syntactic sugar in your init.lua to define lua function mappings in normal, visual and select modes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;neoscroll = require(&#39;neoscroll&#39;)&#xA;local keymap = {&#xA;  [&#34;&amp;lt;C-u&amp;gt;&#34;] = function() neoscroll.ctrl_u({ duration = 250 }) end;&#xA;  [&#34;&amp;lt;C-d&amp;gt;&#34;] = function() neoscroll.ctrl_d({ duration = 250 }) end;&#xA;  [&#34;&amp;lt;C-b&amp;gt;&#34;] = function() neoscroll.ctrl_b({ duration = 450 }) end;&#xA;  [&#34;&amp;lt;C-f&amp;gt;&#34;] = function() neoscroll.ctrl_f({ duration = 450 }) end;&#xA;  [&#34;&amp;lt;C-y&amp;gt;&#34;] = function() neoscroll.scroll(-0.1, { move_cursor=false; duration = 100 }) end;&#xA;  [&#34;&amp;lt;C-e&amp;gt;&#34;] = function() neoscroll.scroll(0.1, { move_cursor=false; duration = 100 }) end;&#xA;  [&#34;zt&#34;]    = function() neoscroll.zt({ half_win_duration = 250 }) end;&#xA;  [&#34;zz&#34;]    = function() neoscroll.zz({ half_win_duration = 250 }) end;&#xA;  [&#34;zb&#34;]    = function() neoscroll.zb({ half_win_duration = 250 }) end;&#xA;}&#xA;local modes = { &#39;n&#39;, &#39;v&#39;, &#39;x&#39; }&#xA;for key, func in pairs(keymap) do&#xA;  vim.keymap.set(modes, key, func)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Easing functions&lt;/h2&gt; &#xA;&lt;p&gt;By default the scrolling animation has a constant speed (linear), i.e. the time between each line scroll is constant. If you want to smooth the start and end of the scrolling animation you can pass the name of one of the easing functions that Neoscroll provides to the &lt;code&gt;scroll()&lt;/code&gt; function. You can use any of the following easing functions: &lt;code&gt;linear&lt;/code&gt;, &lt;code&gt;quadratic&lt;/code&gt;, &lt;code&gt;cubic&lt;/code&gt;, &lt;code&gt;quartic&lt;/code&gt;, &lt;code&gt;quintic&lt;/code&gt;, &lt;code&gt;circular&lt;/code&gt;, &lt;code&gt;sine&lt;/code&gt;. Neoscroll will then adjust the time between each line scroll using the selected easing function. This dynamic time adjustment can make animations more pleasing to the eye.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about easing functions here are some useful links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/desktop/wpf/graphics-multimedia/easing-functions?view=netframeworkdesktop-4.8&#34;&gt;Microsoft documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://easings.net/&#34;&gt;easings.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.febucci.com/2018/08/easing-functions/&#34;&gt;febucci.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Using the same syntactic sugar introduced in &lt;em&gt;Custom mappings&lt;/em&gt; we can write the following config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;neoscroll = require(&#39;neoscroll&#39;)&#xA;neoscroll.setup({&#xA;  -- Default easing function used in any animation where&#xA;  -- the `easing` argument has not been explicitly supplied&#xA;  easing = &#34;quadratic&#34;&#xA;})&#xA;local keymap = {&#xA;  -- Use the &#34;sine&#34; easing function&#xA;  [&#34;&amp;lt;C-u&amp;gt;&#34;] = function() neoscroll.ctrl_u({ duration = 250; easing = &#39;sine&#39; }) end;&#xA;  [&#34;&amp;lt;C-d&amp;gt;&#34;] = function() neoscroll.ctrl_d({ duration = 250; easing = &#39;sine&#39; }) end;&#xA;  -- Use the &#34;circular&#34; easing function&#xA;  [&#34;&amp;lt;C-b&amp;gt;&#34;] = function() neoscroll.ctrl_b({ duration = 450; easing = &#39;circular&#39; }) end;&#xA;  [&#34;&amp;lt;C-f&amp;gt;&#34;] = function() neoscroll.ctrl_f({ duration = 450; easing = &#39;circular&#39; }) end;&#xA;  -- When no value is passed the `easing` option supplied in `setup()` is used&#xA;  [&#34;&amp;lt;C-y&amp;gt;&#34;] = function() neoscroll.scroll(-0.1, { move_cursor=false; duration = 100 }) end;&#xA;  [&#34;&amp;lt;C-e&amp;gt;&#34;] = function() neoscroll.scroll(0.1, { move_cursor=false; duration = 100 }) end;&#xA;}&#xA;local modes = { &#39;n&#39;, &#39;v&#39;, &#39;x&#39; }&#xA;for key, func in pairs(keymap) do&#xA;    vim.keymap.set(modes, key, func)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;pre_hook&lt;/code&gt; and &lt;code&gt;post_hook&lt;/code&gt; functions&lt;/h2&gt; &#xA;&lt;p&gt;Set &lt;code&gt;pre_hook&lt;/code&gt; and &lt;code&gt;post_hook&lt;/code&gt; functions to run custom code before and/or after the scrolling animation. The function will be called with the &lt;code&gt;info&lt;/code&gt; parameter which can be optionally passed to &lt;code&gt;scroll()&lt;/code&gt; (or any of the provided wrappers). This can be used to conditionally run different hooks for different types of scrolling animations.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to hide the &lt;code&gt;cursorline&lt;/code&gt; only for &lt;code&gt;&amp;lt;C-d&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;C-u&amp;gt;&lt;/code&gt; scrolling animations you can do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neoscroll&#39;).setup({&#xA;  pre_hook = function(info) if info == &#34;cursorline&#34; then vim.wo.cursorline = false end end,&#xA;  post_hook = function(info) if info == &#34;cursorline&#34; then vim.wo.cursorline = true end end&#xA;})&#xA;local keymap = {&#xA;  [&#34;&amp;lt;C-u&amp;gt;&#34;] = function() neoscroll.ctrl_u({ duration = 250; info = &#39;cursorline&#39; }) end;&#xA;  [&#34;&amp;lt;C-d&amp;gt;&#34;] = function() neoscroll.ctrl_d({ duration = 250; info = &#39;cursorline&#39; }) end;&#xA;}&#xA;local modes = { &#39;n&#39;, &#39;v&#39;, &#39;x&#39; }&#xA;for key, func in pairs(keymap) do&#xA;  vim.keymap.set(modes, key, func)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that the &lt;code&gt;info&lt;/code&gt; variable is not restricted to a string. It can also be a table with multiple key-pair values.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-u&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;C-d&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt; mess up macros (&lt;a href=&#34;https://github.com/karb94/neoscroll.nvim/issues/9&#34;&gt;issue&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This plugin was inspired by &lt;a href=&#34;https://github.com/psliwka/vim-smoothie&#34;&gt;vim-smoothie&lt;/a&gt; and &lt;a href=&#34;https://github.com/cossonleo/neo-smooth-scroll.nvim&#34;&gt;neo-smooth-scroll.nvim&lt;/a&gt;. Big thank you to their authors!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yetone/avante.nvim</title>
    <updated>2024-12-01T01:44:26Z</updated>
    <id>tag:github.com,2024-12-01:/yetone/avante.nvim</id>
    <link href="https://github.com/yetone/avante.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use your Neovim like using Cursor AI IDE!&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;logo&#34; width=&#34;120&#34; src=&#34;https://github.com/user-attachments/assets/2e2f2a58-2b28-4d11-afd1-87b65612b2de&#34;&gt; &#xA; &lt;h1&gt;avante.nvim&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://neovim.io/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?style=flat-square&amp;amp;label=Neovim&amp;amp;message=v0.10%2b&amp;amp;logo=neovim&amp;amp;labelColor=282828&amp;amp;logoColor=8faa80&amp;amp;color=414b32&#34; alt=&#34;Neovim: v0.10+&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/yetone/avante.nvim/actions/workflows/ci.yaml&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/lua.yaml?style=flat-square&amp;amp;logo=lua&amp;amp;logoColor=c7c7c7&amp;amp;label=Lua+CI&amp;amp;labelColor=282828&amp;amp;color=347D39&amp;amp;event=push&#34; alt=&#34;Lua CI status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/yetone/avante.nvim/actions/workflows/ci.yaml&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/rust.yaml?style=flat-square&amp;amp;logo=rust&amp;amp;logoColor=c7c7c7&amp;amp;label=Rust+CI&amp;amp;labelColor=282828&amp;amp;color=347D39&amp;amp;event=push&#34; alt=&#34;Rust CI status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.com/invite/wUuZz7VxXD&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1302530866362323016?style=flat-square&amp;amp;logo=discord&amp;amp;label=Discord&amp;amp;logoColor=ffffff&amp;amp;labelColor=7376CF&amp;amp;color=268165&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://dotfyle.com/plugins/yetone/avante.nvim&#34;&gt; &lt;img src=&#34;https://dotfyle.com/plugins/yetone/avante.nvim/shield?style=flat-square&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;avante.nvim&lt;/strong&gt; is a Neovim plugin designed to emulate the behaviour of the &lt;a href=&#34;https://www.cursor.com&#34;&gt;Cursor&lt;/a&gt; AI IDE. It provides users with AI-driven code suggestions and the ability to apply these recommendations directly to their source files with minimal effort.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;🥰 This project is undergoing rapid iterations, and many exciting features will be added successively. Stay tuned!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&#34;&gt;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&#34;&gt;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI-Powered Code Assistance&lt;/strong&gt;: Interact with AI to ask questions about your current code file and receive intelligent suggestions for improvement or modification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One-Click Application&lt;/strong&gt;: Quickly apply the AI&#39;s suggested changes to your source code with a single command, streamlining the editing process and saving time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For building binary if you wish to build from source, then &lt;code&gt;cargo&lt;/code&gt; is required. Otherwise &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;tar&lt;/code&gt; will be used to get prebuilt binary from GitHub.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt; (recommended)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;yetone/avante.nvim&#34;,&#xA;  event = &#34;VeryLazy&#34;,&#xA;  lazy = false,&#xA;  version = false, -- set this if you want to always pull the latest change&#xA;  opts = {&#xA;    -- add any opts here&#xA;  },&#xA;  -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`&#xA;  build = &#34;make&#34;,&#xA;  -- build = &#34;powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false&#34; -- for windows&#xA;  dependencies = {&#xA;    &#34;stevearc/dressing.nvim&#34;,&#xA;    &#34;nvim-lua/plenary.nvim&#34;,&#xA;    &#34;MunifTanjim/nui.nvim&#34;,&#xA;    --- The below dependencies are optional,&#xA;    &#34;hrsh7th/nvim-cmp&#34;, -- autocompletion for avante commands and mentions&#xA;    &#34;nvim-tree/nvim-web-devicons&#34;, -- or echasnovski/mini.icons&#xA;    &#34;zbirenbaum/copilot.lua&#34;, -- for providers=&#39;copilot&#39;&#xA;    {&#xA;      -- support for image pasting&#xA;      &#34;HakonHarnes/img-clip.nvim&#34;,&#xA;      event = &#34;VeryLazy&#34;,&#xA;      opts = {&#xA;        -- recommended settings&#xA;        default = {&#xA;          embed_image_as_base64 = false,&#xA;          prompt_for_file_name = false,&#xA;          drag_and_drop = {&#xA;            insert_mode = true,&#xA;          },&#xA;          -- required for Windows users&#xA;          use_absolute_path = true,&#xA;        },&#xA;      },&#xA;    },&#xA;    {&#xA;      -- Make sure to set this up properly if you have lazy=true&#xA;      &#39;MeanderingProgrammer/render-markdown.nvim&#39;,&#xA;      opts = {&#xA;        file_types = { &#34;markdown&#34;, &#34;Avante&#34; },&#xA;      },&#xA;      ft = { &#34;markdown&#34;, &#34;Avante&#34; },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#xA;&#34; Deps&#xA;Plug &#39;stevearc/dressing.nvim&#39;&#xA;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;MunifTanjim/nui.nvim&#39;&#xA;&#xA;&#34; Optional deps&#xA;Plug &#34;hrsh7th/nvim-cmp&#34;&#xA;Plug &#39;nvim-tree/nvim-web-devicons&#39; &#34;or Plug &#39;echasnovski/mini.icons&#39;&#xA;Plug &#39;HakonHarnes/img-clip.nvim&#39;&#xA;Plug &#39;zbirenbaum/copilot.lua&#39;&#xA;&#xA;&#34; Yay, pass source=true if you want to build from source&#xA;Plug &#39;yetone/avante.nvim&#39;, { &#39;branch&#39;: &#39;main&#39;, &#39;do&#39;: &#39;make&#39; }&#xA;autocmd! User avante.nvim lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;avante_lib&#39;).load()&#xA;require(&#39;avante&#39;).setup()&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.deps&#34;&gt;mini.deps&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local add, later, now = MiniDeps.add, MiniDeps.later, MiniDeps.now&#xA;&#xA;add({&#xA;  source = &#39;yetone/avante.nvim&#39;,&#xA;  monitor = &#39;main&#39;,&#xA;  depends = {&#xA;    &#39;stevearc/dressing.nvim&#39;,&#xA;    &#39;nvim-lua/plenary.nvim&#39;,&#xA;    &#39;MunifTanjim/nui.nvim&#39;,&#xA;    &#39;echasnovski/mini.icons&#39;&#xA;  },&#xA;  hooks = { post_checkout = function() vim.cmd(&#39;make&#39;) end }&#xA;})&#xA;--- optional&#xA;add({ source = &#39;hrsh7th/nvim-cmp&#39; })&#xA;add({ source = &#39;zbirenbaum/copilot.lua&#39; })&#xA;add({ source = &#39;HakonHarnes/img-clip.nvim&#39; })&#xA;add({ source = &#39;MeanderingProgrammer/render-markdown.nvim&#39; })&#xA;&#xA;now(function() require(&#39;avante_lib&#39;).load() end)&#xA;later(function() require(&#39;render-markdown&#39;).setup({...}) end)&#xA;later(function()&#xA;  require(&#39;img-clip&#39;).setup({...}) -- config img-clip&#xA;  require(&#34;copilot&#34;).setup({...}) -- setup copilot to your liking&#xA;  require(&#34;avante&#34;).setup({...}) -- config for avante.nvim&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Lua&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- deps:&#xA;require(&#39;cmp&#39;).setup ({&#xA;  -- use recommended settings from above&#xA;})&#xA;require(&#39;img-clip&#39;).setup ({&#xA;  -- use recommended settings from above&#xA;})&#xA;require(&#39;copilot&#39;).setup ({&#xA;  -- use recommended settings from above&#xA;})&#xA;require(&#39;render-markdown&#39;).setup ({&#xA;  -- use recommended settings from above&#xA;})&#xA;require(&#39;avante_lib&#39;).load()&#xA;require(&#39;avante&#39;).setup ({&#xA;  -- Your config here!&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: For &lt;code&gt;avante.tokenizers&lt;/code&gt; and templates to work, make sure to call &lt;code&gt;require(&#39;avante_lib&#39;).load()&lt;/code&gt; somewhere when entering the editor. We will leave the users to decide where it fits to do this, as this varies among configurations. (But we do recommend running this after where you set your colorscheme)&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;avante.nvim&lt;/code&gt; is currently only compatible with Neovim 0.10.1 or later. Please ensure that your Neovim version meets these requirements before proceeding.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Recommended &lt;strong&gt;Neovim&lt;/strong&gt; options:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- views can only be fully collapsed with the global statusline&#xA;vim.opt.laststatus = 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;p&gt;Any rendering plugins that support markdown should work with Avante as long as you add the supported filetype &lt;code&gt;Avante&lt;/code&gt;. See &lt;a href=&#34;https://github.com/yetone/avante.nvim/issues/175&#34;&gt;https://github.com/yetone/avante.nvim/issues/175&lt;/a&gt; and &lt;a href=&#34;https://github.com/yetone/avante.nvim/issues/175#issuecomment-2313749363&#34;&gt;this comment&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Default setup configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/config.lua&#34;&gt;config.lua#L9&lt;/a&gt; for the full config&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ---@alias Provider &#34;claude&#34; | &#34;openai&#34; | &#34;azure&#34; | &#34;gemini&#34; | &#34;cohere&#34; | &#34;copilot&#34; | string&#xA;  provider = &#34;claude&#34;, -- Recommend using Claude&#xA;  auto_suggestions_provider = &#34;claude&#34;, -- Since auto-suggestions are a high-frequency operation and therefore expensive, it is recommended to specify an inexpensive provider or even a free provider: copilot&#xA;  claude = {&#xA;    endpoint = &#34;https://api.anthropic.com&#34;,&#xA;    model = &#34;claude-3-5-sonnet-20241022&#34;,&#xA;    temperature = 0,&#xA;    max_tokens = 4096,&#xA;  },&#xA;  ---Specify the special dual_boost mode&#xA;  ---1. enabled: Whether to enable dual_boost mode. Default to false.&#xA;  ---2. first_provider: The first provider to generate response. Default to &#34;openai&#34;.&#xA;  ---3. second_provider: The second provider to generate response. Default to &#34;claude&#34;.&#xA;  ---4. prompt: The prompt to generate response based on the two reference outputs.&#xA;  ---5. timeout: Timeout in milliseconds. Default to 60000.&#xA;  ---How it works:&#xA;  --- When dual_boost is enabled, avante will generate two responses from the first_provider and second_provider respectively. Then use the response from the first_provider as provider1_output and the response from the second_provider as provider2_output. Finally, avante will generate a response based on the prompt and the two reference outputs, with the default Provider as normal.&#xA;  ---Note: This is an experimental feature and may not work as expected.&#xA;  dual_boost = {&#xA;    enabled = false,&#xA;    first_provider = &#34;openai&#34;,&#xA;    second_provider = &#34;claude&#34;,&#xA;    prompt = &#34;Based on the two reference outputs below, generate a response that incorporates elements from both but reflects your own judgment and unique perspective. Do not provide any explanation, just give the response directly. Reference Output 1: [{{provider1_output}}], Reference Output 2: [{{provider2_output}}]&#34;,&#xA;    timeout = 60000, -- Timeout in milliseconds&#xA;  },&#xA;  behaviour = {&#xA;    auto_suggestions = false, -- Experimental stage&#xA;    auto_set_highlight_group = true,&#xA;    auto_set_keymaps = true,&#xA;    auto_apply_diff_after_generation = false,&#xA;    support_paste_from_clipboard = false,&#xA;    minimize_diff = true, -- Whether to remove unchanged lines when applying a code block&#xA;  },&#xA;  mappings = {&#xA;    --- @class AvanteConflictMappings&#xA;    diff = {&#xA;      ours = &#34;co&#34;,&#xA;      theirs = &#34;ct&#34;,&#xA;      all_theirs = &#34;ca&#34;,&#xA;      both = &#34;cb&#34;,&#xA;      cursor = &#34;cc&#34;,&#xA;      next = &#34;]x&#34;,&#xA;      prev = &#34;[x&#34;,&#xA;    },&#xA;    suggestion = {&#xA;      accept = &#34;&amp;lt;M-l&amp;gt;&#34;,&#xA;      next = &#34;&amp;lt;M-]&amp;gt;&#34;,&#xA;      prev = &#34;&amp;lt;M-[&amp;gt;&#34;,&#xA;      dismiss = &#34;&amp;lt;C-]&amp;gt;&#34;,&#xA;    },&#xA;    jump = {&#xA;      next = &#34;]]&#34;,&#xA;      prev = &#34;[[&#34;,&#xA;    },&#xA;    submit = {&#xA;      normal = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;      insert = &#34;&amp;lt;C-s&amp;gt;&#34;,&#xA;    },&#xA;    sidebar = {&#xA;      apply_all = &#34;A&#34;,&#xA;      apply_cursor = &#34;a&#34;,&#xA;      switch_windows = &#34;&amp;lt;Tab&amp;gt;&#34;,&#xA;      reverse_switch_windows = &#34;&amp;lt;S-Tab&amp;gt;&#34;,&#xA;    },&#xA;  },&#xA;  hints = { enabled = true },&#xA;  windows = {&#xA;    ---@type &#34;right&#34; | &#34;left&#34; | &#34;top&#34; | &#34;bottom&#34;&#xA;    position = &#34;right&#34;, -- the position of the sidebar&#xA;    wrap = true, -- similar to vim.o.wrap&#xA;    width = 30, -- default % based on available width&#xA;    sidebar_header = {&#xA;      enabled = true, -- true, false to enable/disable the header&#xA;      align = &#34;center&#34;, -- left, center, right for title&#xA;      rounded = true,&#xA;    },&#xA;    input = {&#xA;      prefix = &#34;&amp;gt; &#34;,&#xA;      height = 8, -- Height of the input window in vertical layout&#xA;    },&#xA;    edit = {&#xA;      border = &#34;rounded&#34;,&#xA;      start_insert = true, -- Start insert mode when opening the edit window&#xA;    },&#xA;    ask = {&#xA;      floating = false, -- Open the &#39;AvanteAsk&#39; prompt in a floating window&#xA;      start_insert = true, -- Start insert mode when opening the ask window&#xA;      border = &#34;rounded&#34;,&#xA;      ---@type &#34;ours&#34; | &#34;theirs&#34;&#xA;      focus_on_apply = &#34;ours&#34;, -- which diff to focus after applying&#xA;    },&#xA;  },&#xA;  highlights = {&#xA;    ---@type AvanteConflictHighlights&#xA;    diff = {&#xA;      current = &#34;DiffText&#34;,&#xA;      incoming = &#34;DiffAdd&#34;,&#xA;    },&#xA;  },&#xA;  --- @class AvanteConflictUserConfig&#xA;  diff = {&#xA;    autojump = true,&#xA;    ---@type string | fun(): any&#xA;    list_opener = &#34;copen&#34;,&#xA;    --- Override the &#39;timeoutlen&#39; setting while hovering over a diff (see :help timeoutlen).&#xA;    --- Helps to avoid entering operator-pending mode with diff mappings starting with `c`.&#xA;    --- Disable by setting to -1.&#xA;    override_timeoutlen = 500,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Given its early stage, &lt;code&gt;avante.nvim&lt;/code&gt; currently supports the following basic functionalities:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;Avante will only support Claude, and OpenAI (and its variants including azure)out-of-the-box due to its high code quality generation. For all OpenAI-compatible providers, see &lt;a href=&#34;https://github.com/yetone/avante.nvim/wiki&#34;&gt;wiki&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;Due to the poor performance of other models, avante.nvim only recommends using the claude-3.5-sonnet model. All features can only be guaranteed to work properly on the claude-3.5-sonnet model. We do not accept changes to the code or prompts to accommodate other models. Otherwise, it will greatly increase our maintenance costs. We hope everyone can understand. Thank you!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;For most consistency between neovim session, it is recommended to set the environment variables in your shell file. By default, &lt;code&gt;Avante&lt;/code&gt; will prompt you at startup to input the API key for the provider you have selected.&lt;/p&gt; &#xA; &lt;p&gt;For Claude:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ANTHROPIC_API_KEY=your-api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For OpenAI:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export OPENAI_API_KEY=your-api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For Azure OpenAI:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export AZURE_OPENAI_API_KEY=your-api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open a code file in Neovim.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;:AvanteAsk&lt;/code&gt; command to query the AI about the code.&lt;/li&gt; &#xA; &lt;li&gt;Review the AI&#39;s suggestions.&lt;/li&gt; &#xA; &lt;li&gt;Apply the recommended changes directly to your code with a simple command or key binding.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The plugin is still under active development, and both its functionality and interface are subject to significant changes. Expect some rough edges and instability as the project evolves.&lt;/p&gt; &#xA;&lt;h2&gt;Key Bindings&lt;/h2&gt; &#xA;&lt;p&gt;The following key bindings are available for use with &lt;code&gt;avante.nvim&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key Binding&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;show sidebar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;refresh sidebar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;switch sidebar focus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;e&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;edit selected blocks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose ours&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose theirs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose all theirs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;0&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;b&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose both&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;move to previous conflict&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;move to next conflict&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to previous codeblocks (results window)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to next codeblocks (results windows)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;If you are using &lt;code&gt;lazy.nvim&lt;/code&gt;, then all keymap here will be safely set, meaning if &lt;code&gt;&amp;lt;leader&amp;gt;aa&lt;/code&gt; is already binded, then avante.nvim won&#39;t bind this mapping. In this case, user will be responsible for setting up their own. See &lt;a href=&#34;https://github.com/yetone/avante.nvim/wiki#keymaps-and-api-i-guess&#34;&gt;notes on keymaps&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Highlight Groups&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteTitle&lt;/td&gt; &#xA;   &lt;td&gt;Title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteReversedTitle&lt;/td&gt; &#xA;   &lt;td&gt;Used for rounded border&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteSubtitle&lt;/td&gt; &#xA;   &lt;td&gt;Selected code title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteReversedSubtitle&lt;/td&gt; &#xA;   &lt;td&gt;Used for rounded border&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteThirdTitle&lt;/td&gt; &#xA;   &lt;td&gt;Prompt title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteReversedThirdTitle&lt;/td&gt; &#xA;   &lt;td&gt;Used for rounded border&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteConflictCurrent&lt;/td&gt; &#xA;   &lt;td&gt;Current conflict highlight&lt;/td&gt; &#xA;   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.current&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteConflictIncoming&lt;/td&gt; &#xA;   &lt;td&gt;Incoming conflict highlight&lt;/td&gt; &#xA;   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.incoming&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteConflictCurrentLabel&lt;/td&gt; &#xA;   &lt;td&gt;Current conflict label highlight&lt;/td&gt; &#xA;   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictCurrent&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteConflictIncomingLabel&lt;/td&gt; &#xA;   &lt;td&gt;Incoming conflict label highlight&lt;/td&gt; &#xA;   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictIncoming&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvantePopupHint&lt;/td&gt; &#xA;   &lt;td&gt;Usage hints in popup menus&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteInlineHint&lt;/td&gt; &#xA;   &lt;td&gt;The end-of-line hint displayed in visual mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/highlights.lua&#34;&gt;highlights.lua&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h2&gt;Custom prompts&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;avante.nvim&lt;/code&gt; provides three different modes to interact with: &lt;code&gt;planning&lt;/code&gt;, &lt;code&gt;editing&lt;/code&gt;, and &lt;code&gt;suggesting&lt;/code&gt;, followed with three different prompts per mode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;planning&lt;/code&gt;: Used with &lt;code&gt;require(&#34;avante&#34;).toggle()&lt;/code&gt; on sidebar&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;editing&lt;/code&gt;: Used with &lt;code&gt;require(&#34;avante&#34;).edit()&lt;/code&gt; on selection codeblock&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;suggesting&lt;/code&gt;: Used with &lt;code&gt;require(&#34;avante&#34;).get_suggestion():suggest()&lt;/code&gt; on Tab flow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Users can customize the system prompts via &lt;code&gt;Config.system_prompt&lt;/code&gt;. We recommend calling this in a custom Autocmds depending on your need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#34;User&#34;, {&#xA;  pattern = &#34;ToggleMyPrompt&#34;,&#xA;  callback = function() require(&#34;avante.config&#34;).override({system_prompt = &#34;MY CUSTOM SYSTEM PROMPT&#34;}) end,&#xA;})&#xA;&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;am&#34;, function() vim.api.nvim_exec_autocmds(&#34;User&#34;, { pattern = &#34;ToggleMyPrompt&#34; }) end, { desc = &#34;avante: toggle my prompt&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If one wish to custom prompts for each mode, &lt;code&gt;avante.nvim&lt;/code&gt; will check for project root based on the given buffer whether it contains the following patterns: &lt;code&gt;*.{mode}.avanterules&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The rules for root hierarchy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lsp workspace folders&lt;/li&gt; &#xA; &lt;li&gt;lsp root_dir&lt;/li&gt; &#xA; &lt;li&gt;root pattern of filename of the current buffer&lt;/li&gt; &#xA; &lt;li&gt;root pattern of cwd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example folder structure for custom prompt&lt;/summary&gt; &#xA; &lt;p&gt;If you have the following structure:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.&#xA;├── .git/&#xA;├── typescript.planning.avanterules&#xA;├── snippets.editing.avanterules&#xA;└── src/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;typescript.planning.avanterules&lt;/code&gt; will be used for &lt;code&gt;planning&lt;/code&gt; mode&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;snippets.editing.avanterules`` will be used for &lt;/code&gt;editing` mode&lt;/li&gt; &#xA;  &lt;li&gt;the default &lt;code&gt;suggesting&lt;/code&gt; prompt from &lt;code&gt;avante.nvim&lt;/code&gt; will be used for &lt;code&gt;suggesting&lt;/code&gt; mode.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!important]&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;*.avanterules&lt;/code&gt; is a jinja template file, in which will be rendered using &lt;a href=&#34;https://github.com/mitsuhiko/minijinja&#34;&gt;minijinja&lt;/a&gt;. See &lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates&#34;&gt;templates&lt;/a&gt; for example on how to extend current templates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;TODOs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat with current file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Apply diff patch&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat with the selected block&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Slash commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Edit the selected block&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Smart Tab (Cursor Flow)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat with project (You can use &lt;code&gt;@codebase&lt;/code&gt; to chat with the whole project)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; CoT&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Chat with selected files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enhanced AI Interactions&lt;/strong&gt;: Improve the depth of AI analysis and recommendations for more complex coding scenarios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LSP + Tree-sitter + LLM Integration&lt;/strong&gt;: Integrate with LSP and Tree-sitter and LLM to provide more accurate and powerful code suggestions and analysis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to avante.nvim are welcome! If you&#39;re interested in helping out, please feel free to submit pull requests or open issues. Before contributing, ensure that your code has been thoroughly tested.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/yetone/avante.nvim/wiki&#34;&gt;wiki&lt;/a&gt; for more recipes and tricks.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;We would like to express our heartfelt gratitude to the contributors of the following open-source projects, whose code has provided invaluable inspiration and reference for the development of avante.nvim:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Nvim Plugin&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;   &lt;th&gt;Functionality&lt;/th&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/akinsho/git-conflict.nvim&#34;&gt;git-conflict.nvim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No License&lt;/td&gt; &#xA;   &lt;td&gt;Diff comparison functionality&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/diff.lua&#34;&gt;lua/avante/diff.lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jackMort/ChatGPT.nvim&#34;&gt;ChatGPT.nvim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apache 2.0 License&lt;/td&gt; &#xA;   &lt;td&gt;Calculation of tokens count&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/utils/tokens.lua&#34;&gt;lua/avante/utils/tokens.lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/HakonHarnes/img-clip.nvim&#34;&gt;img-clip.nvim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;Clipboard image support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/clipboard.lua&#34;&gt;lua/avante/clipboard.lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zbirenbaum/copilot.lua&#34;&gt;copilot.lua&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;Copilot support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/copilot.lua&#34;&gt;lua/avante/providers/copilot.lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/HiPhish/jinja.vim&#34;&gt;jinja.vim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;Template filetype support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/syntax/jinja.vim&#34;&gt;syntax/jinja.vim&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/olimorris/codecompanion.nvim&#34;&gt;codecompanion.nvim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;Secrets logic support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/init.lua&#34;&gt;lua/avante/providers/init.lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/paul-gauthier/aider&#34;&gt;aider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apache 2.0 License&lt;/td&gt; &#xA;   &lt;td&gt;Planning mode user prompt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates/planning.avanterules&#34;&gt;lua/avante/templates/planning.avanterules&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The high quality and ingenuity of these projects&#39; source code have been immensely beneficial throughout our development process. We extend our sincere thanks and respect to the authors and contributors of these projects. It is the selfless dedication of the open-source community that drives projects like avante.nvim forward.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;avante.nvim is licensed under the Apache 2.0 License. For more details, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/yetone/avante.nvim/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h1&gt;Star History&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://star-history.com/#yetone/avante.nvim&amp;amp;Date&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;   &lt;img alt=&#34;NebulaGraph Data Intelligence Suite(ngdi)&#34; src=&#34;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
</feed>