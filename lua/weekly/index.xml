<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-01T01:40:21Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-neotest/neotest</title>
    <updated>2024-09-01T01:40:21Z</updated>
    <id>tag:github.com,2024-09-01:/nvim-neotest/neotest</id>
    <link href="https://github.com/nvim-neotest/neotest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extensible framework for interacting with tests within NeoVim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neotest&lt;/h1&gt; &#xA;&lt;p&gt;A framework for interacting with tests within NeoVim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166156510-440d9047-c76e-4967-8c17-944399222645.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is early stage software.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#supported-runners&#34;&gt;Supported Runners&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#consumers&#34;&gt;Consumers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#output-window&#34;&gt;Output Window&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#summary-window&#34;&gt;Summary Window&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#diagnostic-messages&#34;&gt;Diagnostic Messages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#status-signs&#34;&gt;Status Signs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#strategies&#34;&gt;Strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#writing-adapters&#34;&gt;Writing Adapters&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#parsing-tests&#34;&gt;Parsing tests in a directory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#collecting-results&#34;&gt;Collecting results&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neotest&lt;/code&gt; for details on neotest is designed and how to interact with it programmatically.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://luarocks.org/modules/neotest/neotest&#34;&gt;&lt;img src=&#34;https://img.shields.io/luarocks/v/neotest/neotest?logo=lua&amp;amp;color=purple&#34; alt=&#34;LuaRocks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Neotest uses &lt;a href=&#34;https://github.com/nvim-neotest/nvim-nio&#34;&gt;nvim-nio&lt;/a&gt; and &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim/&#34;&gt;plenary.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most adapters will also require &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Neotest uses the &lt;code&gt;CursorHold&lt;/code&gt; event. This uses the &lt;code&gt;updatetime&lt;/code&gt; setting which is by default very high, and lowering this can lead to excessive writes to disk. It&#39;s recommended to use &lt;a href=&#34;https://github.com/antoinemadec/FixCursorHold.nvim&#34;&gt;https://github.com/antoinemadec/FixCursorHold.nvim&lt;/a&gt; which allows detaching &lt;code&gt;updatetime&lt;/code&gt; from the frequency of the &lt;code&gt;CursorHold&lt;/code&gt; event. The repo claims it is no longer needed but it is still recommended (See &lt;a href=&#34;https://github.com/antoinemadec/FixCursorHold.nvim/issues/13&#34;&gt;this issue&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Install with your favourite package manager alongside nvim-dap&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;&lt;strong&gt;dein&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#34;nvim-lua/plenary.nvim&#34;)&#xA;call dein#add(&#34;antoinemadec/FixCursorHold.nvim&#34;)&#xA;call dein#add(&#34;nvim-treesitter/nvim-treesitter&#34;)&#xA;call dein#add(&#34;nvim-neotest/nvim-nio&#34;)&#xA;call dein#add(&#34;nvim-neotest/neotest&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;strong&gt;vim-plug&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;antoinemadec/FixCursorHold.nvim&#39;&#xA;Plug &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;Plug &#39;nvim-neotest/nvim-nio&#39;&#xA;Plug &#39;nvim-neotest/neotest&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;nvim-neotest/neotest&#34;,&#xA;  requires = {&#xA;    &#34;nvim-neotest/nvim-nio&#34;,&#xA;    &#34;nvim-lua/plenary.nvim&#34;,&#xA;    &#34;antoinemadec/FixCursorHold.nvim&#34;,&#xA;    &#34;nvim-treesitter/nvim-treesitter&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;nvim-neotest/neotest&#34;,&#xA;  dependencies = {&#xA;    &#34;nvim-neotest/nvim-nio&#34;,&#xA;    &#34;nvim-lua/plenary.nvim&#34;,&#xA;    &#34;antoinemadec/FixCursorHold.nvim&#34;,&#xA;    &#34;nvim-treesitter/nvim-treesitter&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get started you will also need to install an adapter for your test runner. See the adapter&#39;s documentation for their specific setup instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Runners&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Test Runner&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Adapter&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;pytest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest-python&#34;&gt;neotest-python&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;python-unittest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest-python&#34;&gt;neotest-python&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;plenary&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest-plenary&#34;&gt;neotest-plenary&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/akinsho/neotest-go&#34;&gt;neotest-go&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/fredrikaverpil/neotest-golang&#34;&gt;neotest-golang&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;jest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/haydenmeade/neotest-jest&#34;&gt;neotest-jest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;vitest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/marilari88/neotest-vitest&#34;&gt;neotest-vitest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;stenciljs&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/benelan/neotest-stenciljs&#34;&gt;neotest-stenciljs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;playwright&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/thenbe/neotest-playwright&#34;&gt;neotest-playwright&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rspec&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/olimorris/neotest-rspec&#34;&gt;neotest-rspec&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;minitest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/zidhuss/neotest-minitest&#34;&gt;neotest-minitest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dart, flutter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sidlatau/neotest-dart&#34;&gt;neotest-dart&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;testthat&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/shunsambongi/neotest-testthat&#34;&gt;neotest-testthat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;phpunit&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/olimorris/neotest-phpunit&#34;&gt;neotest-phpunit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;pest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/V13Axel/neotest-pest&#34;&gt;neotest-pest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rust (treesitter)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rouge8/neotest-rust&#34;&gt;neotest-rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rust (LSP)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim&#34;&gt;rustaceanvim&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elixir&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jfpedroza/neotest-elixir&#34;&gt;neotest-elixir&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dotnet&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Issafalcon/neotest-dotnet&#34;&gt;neotest-dotnet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scala&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/stevanmilic/neotest-scala&#34;&gt;neotest-scala&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;haskell&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mrcjkb/neotest-haskell&#34;&gt;neotest-haskell&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;deno&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/MarkEmmons/neotest-deno&#34;&gt;neotest-deno&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;java&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rcasia/neotest-java&#34;&gt;neotest-java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kotlin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/codymikol/neotest-kotlin.nvim&#34;&gt;neotest-kotlin&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;foundry&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/llllvvuu/neotest-foundry&#34;&gt;neotest-foundry&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;zig&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/lawrence-laz/neotest-zig&#34;&gt;neotest-zig&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;c++ (google test)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/alfaix/neotest-gtest&#34;&gt;neotest-gtest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gradle&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/weilbith/neotest-gradle&#34;&gt;neotest-gradle&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rcasia/neotest-bash&#34;&gt;neotest-bash&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;hardhat&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/TheSnakeWitcher/hardhat.nvim&#34;&gt;neotest-hardhat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For any runner without an adapter you can use &lt;a href=&#34;https://github.com/nvim-neotest/neotest-vim-test&#34;&gt;neotest-vim-test&lt;/a&gt; which supports any runner that vim-test supports. The vim-test adapter does not support some of the more advanced features such as error locations or per-test output. If you&#39;re using the vim-test adapter then install &lt;a href=&#34;https://github.com/vim-test/vim-test/&#34;&gt;vim-test&lt;/a&gt; too.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Provide your adapters and other config to the setup function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).setup({&#xA;  adapters = {&#xA;    require(&#34;neotest-python&#34;)({&#xA;      dap = { justMyCode = false },&#xA;    }),&#xA;    require(&#34;neotest-plenary&#34;),&#xA;    require(&#34;neotest-vim-test&#34;)({&#xA;      ignore_file_types = { &#34;python&#34;, &#34;vim&#34;, &#34;lua&#34; },&#xA;    }),&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neotest.Config&lt;/code&gt; for configuration options and &lt;code&gt;:h neotest.setup()&lt;/code&gt; for the default values.&lt;/p&gt; &#xA;&lt;p&gt;It is highly recommended to use &lt;a href=&#34;https://github.com/folke/lazydev.nvim&#34;&gt;lazydev.nvim&lt;/a&gt; to enable type checking for neotest to get type checking, documentation and autocompletion for all API functions.&lt;/p&gt; &#xA;&lt;p&gt;The default icons use &lt;a href=&#34;https://github.com/microsoft/vscode-codicons&#34;&gt;codicons&lt;/a&gt;. It&#39;s recommended to use this &lt;a href=&#34;https://github.com/ChristianChiarulli/neovim-codicons&#34;&gt;fork&lt;/a&gt; which fixes alignment issues for the terminal. If your terminal doesn&#39;t support font fallback and you need to have icons included in your font, you can patch it via &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts#option-8-patch-your-own-font&#34;&gt;Font Patcher&lt;/a&gt;. There is a simple step by step guide &lt;a href=&#34;https://github.com/mortepau/codicons.nvim#how-to-patch-fonts&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The interface for using neotest is very simple.&lt;/p&gt; &#xA;&lt;p&gt;Run the nearest test&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).run.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the current file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).run.run(vim.fn.expand(&#34;%&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debug the nearest test (requires nvim-dap and adapter support)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).run.run({strategy = &#34;dap&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neotest.run.run()&lt;/code&gt; for parameters.&lt;/p&gt; &#xA;&lt;p&gt;Stop the nearest test, see &lt;code&gt;:h neotest.run.stop()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).run.stop()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attach to the nearest test, see &lt;code&gt;:h neotest.run.attach()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).run.attach()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Consumers&lt;/h2&gt; &#xA;&lt;p&gt;For extra features neotest provides consumers which interact with the state of the tests and their results.&lt;/p&gt; &#xA;&lt;p&gt;Some consumers will be passive while others can be interacted with.&lt;/p&gt; &#xA;&lt;h3&gt;Watch Tests&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:h neotest.watch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Watches files related to tests for changes and re-runs tests&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/24252670/229367494-6775d7f1-a8fb-461b-bbbd-d6124031293e.mp4&#34;&gt;https://user-images.githubusercontent.com/24252670/229367494-6775d7f1-a8fb-461b-bbbd-d6124031293e.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Output Window&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:h neotest.output&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays output of tests &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166143146-e7821fe9-c11c-4e21-9cc0-73989b51e8ed.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays per-test output &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166143189-0f51b544-3aec-4cfc-93d7-74f3d209aef6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Output Panel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:h neotest.output_panel&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Records all output of tests over time in a single window &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/201535290-d726c781-a780-4318-b595-a10832b9f191.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Summary Window&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:h neotest.summary&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays test suite structure from project root. &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166143333-df8b409f-d6f3-4d3d-a676-5f8a4a4cb8bb.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provides mappings for running, attaching, stopping and showing output.&lt;/p&gt; &#xA;&lt;h3&gt;Diagnostic Messages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:h neotest.diagnostic&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use vim.diagnostic to display error messages where they occur while running.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166143466-0fdea24c-6f0a-4199-9026-66f89d7d1dbc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Status Signs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:h neotest.status&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays the status of a test/namespace beside the beginning of the definition.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166143402-b318ef91-c053-4973-b929-5ee97572f2c2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the help doc for a list of all consumers and their documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Strategies&lt;/h2&gt; &#xA;&lt;p&gt;Strategies are methods of running tests. They provide the functionality to attach to running processes and so attaching will mean different things for different strategies.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;integrated&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default strategy that will run a process in the background and allow opening a floating terminal to attach.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;dap&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Uses nvim-dap to debug tests (adapter must support providing an nvim-dap configuration)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Custom strategies can implemented by providing a function which takes a &lt;code&gt;neotest.RunSpec&lt;/code&gt; and returns an table that fits the &lt;code&gt;neotest.Process&lt;/code&gt; interface. Plenary&#39;s async library can be used to run asynchronously.&lt;/p&gt; &#xA;&lt;h2&gt;Writing Adapters&lt;/h2&gt; &#xA;&lt;p&gt;This section is for people wishing to develop their own neotest adapters. The documentation here and the underlying libraries are WIP and open to feedback/change. Please raise issues with any problems understanding or using the this doc. The best place to figure out how to create an adapter is by looking at the existing ones.&lt;/p&gt; &#xA;&lt;p&gt;Adapters must fulfill an interface to run (defined &lt;a href=&#34;https://github.com/nvim-neotest/neotest/raw/master/lua/neotest/adapters/interface.lua&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Much of the functionality is built around using a custom tree object that defines the structure of the test suite. There are helpers that adapters can use within their code (all defined under &lt;code&gt;neotest.lib&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Adapters must solve three problems:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Parse tests&lt;/li&gt; &#xA; &lt;li&gt;Construct test commands&lt;/li&gt; &#xA; &lt;li&gt;Collect results&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Parsing Tests&lt;/h3&gt; &#xA;&lt;p&gt;There are two stages to this, finding files which is often a simple file name check (it&#39;s OK if a test file has no actual tests in it) and parsing test files.&lt;/p&gt; &#xA;&lt;p&gt;For languages supported by nvim-treesitter, the easiest way to parse tests is to use the neotest treesitter wrapper to parse a query to constuct a tree structure.&lt;/p&gt; &#xA;&lt;p&gt;The query can define capture groups for tests and namespaces. Each type must have &lt;code&gt;&amp;lt;type&amp;gt;.name&lt;/code&gt; and &lt;code&gt;&amp;lt;type&amp;gt;.definition&lt;/code&gt; capture groups. They can be used multiple times in the query&lt;/p&gt; &#xA;&lt;p&gt;Example from neotest-plenary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lib = require(&#34;neotest.lib&#34;)&#xA;&#xA;function PlenaryNeotestAdapter.discover_positions(path)&#xA;  local query = [[&#xA;  ;; describe blocks&#xA;  ((function_call&#xA;      name: (identifier) @func_name (#match? @func_name &#34;^describe$&#34;)&#xA;      arguments: (arguments (_) @namespace.name (function_definition))&#xA;  )) @namespace.definition&#xA;&#xA;&#xA;  ;; it blocks&#xA;  ((function_call&#xA;      name: (identifier) @func_name&#xA;      arguments: (arguments (_) @test.name (function_definition))&#xA;  ) (#match? @func_name &#34;^it$&#34;)) @test.definition&#xA;&#xA;  ;; async it blocks (async.it)&#xA;  ((function_call&#xA;      name: (&#xA;        dot_index_expression&#xA;          field: (identifier) @func_name&#xA;      )&#xA;      arguments: (arguments (_) @test.name (function_definition))&#xA;    ) (#match? @func_name &#34;^it$&#34;)) @test.definition&#xA;    ]]&#xA;  return lib.treesitter.parse_positions(path, query, { nested_namespaces = true })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For languages unsupported by treesitter you can use regexes like neotest-vim-test or hook into the test runner.&lt;/p&gt; &#xA;&lt;h3&gt;Constructing Test Commands&lt;/h3&gt; &#xA;&lt;p&gt;This is the easiest part of writing an adapter. You need to handle the different types of positions that a user may run (directory, file, namespace and test).&lt;/p&gt; &#xA;&lt;p&gt;If you are hooking into the runner, you may not be running the test runner command directly. neotest-python and neotest-plenary both are examples of this, with a script being used to run each runner to handle parsing results and storing them for result collection later.&lt;/p&gt; &#xA;&lt;h3&gt;Collecting Results&lt;/h3&gt; &#xA;&lt;p&gt;Collecting results will be the most involved process in the adapter, with complexity depending on the test runner and desired features.&lt;/p&gt; &#xA;&lt;p&gt;For the most basic implementation an adapter can choose to only run tests individually and use the exit code as an indicator of the result (this is how neotest-vim-test works) but this impacts peformance and also loses out on more advanced features.&lt;/p&gt; &#xA;&lt;p&gt;If tests can be run together then the adapter must provide results for at least each individual test. Results for namespaces, files and directories will be inferred from their child tests.&lt;/p&gt; &#xA;&lt;p&gt;For collecting test specific error messages, error locations etc you&#39;ll need to parse output or hook into the runner. See neotest-python and neotest-plenary for examples on how this can be done.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>supermaven-inc/supermaven-nvim</title>
    <updated>2024-09-01T01:40:21Z</updated>
    <id>tag:github.com,2024-09-01:/supermaven-inc/supermaven-nvim</id>
    <link href="https://github.com/supermaven-inc/supermaven-nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Neovim plugin for Supermaven&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Supermaven Neovim Plugin&lt;/h1&gt; &#xA;&lt;p&gt;This plugin, supermaven-nvim, lets you use &lt;a href=&#34;https://supermaven.com/&#34;&gt;Supermaven&lt;/a&gt; in Neovim. If you encounter any issues while using supermaven-nvim, consider opening an issue or reaching out to us on &lt;a href=&#34;https://discord.com/invite/QQpqBmQH3w&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using a plugin manager, run the .setup({}) function in your Neovim configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup({&#xA;    {&#xA;      &#34;supermaven-inc/supermaven-nvim&#34;,&#xA;      config = function()&#xA;        require(&#34;supermaven-nvim&#34;).setup({})&#xA;      end,&#xA;    },&#xA;}, {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;supermaven-inc/supermaven-nvim&#34;,&#xA;  config = function()&#xA;    require(&#34;supermaven-nvim&#34;).setup({})&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional configuration&lt;/h3&gt; &#xA;&lt;p&gt;By default, supermaven-nvim will use the &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;C-]&amp;gt;&lt;/code&gt; keymaps to accept and clear suggestions. You can change these keymaps by passing a &lt;code&gt;keymaps&lt;/code&gt; table to the .setup({}) function. Also in this table is &lt;code&gt;accept_word&lt;/code&gt;, which allows partially accepting a completion, up to the end of the next word. By default this keymap is set to &lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;ignore_filetypes&lt;/code&gt; table is used to ignore filetypes when using supermaven-nvim. If a filetype is present as a key, and its value is &lt;code&gt;true&lt;/code&gt;, supermaven-nvim will not display suggestions for that filetype.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;suggestion_color&lt;/code&gt; and &lt;code&gt;cterm&lt;/code&gt; options can be used to set the color of the suggestion text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;supermaven-nvim&#34;).setup({&#xA;  keymaps = {&#xA;    accept_suggestion = &#34;&amp;lt;Tab&amp;gt;&#34;,&#xA;    clear_suggestion = &#34;&amp;lt;C-]&amp;gt;&#34;,&#xA;    accept_word = &#34;&amp;lt;C-j&amp;gt;&#34;,&#xA;  },&#xA;  ignore_filetypes = { cpp = true },&#xA;  color = {&#xA;    suggestion_color = &#34;#ffffff&#34;,&#xA;    cterm = 244,&#xA;  },&#xA;  log_level = &#34;info&#34;, -- set to &#34;off&#34; to disable logging completely&#xA;  disable_inline_completion = false, -- disables inline completion for use with cmp&#xA;  disable_keymaps = false -- disables built in keymaps for more manual control&#xA;  condition = function()&#xA;    return false&#xA;  end -- condition to check for stopping supermaven, `true` means to stop supermaven when the condition is true.&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disabling supermaven-nvim conditionally&lt;/h3&gt; &#xA;&lt;p&gt;By default, supermaven-nvim will always run unless &lt;code&gt;condition&lt;/code&gt; function returns true or current filetype is in &lt;code&gt;ignore_filetypes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can disable supermaven-nvim conditionally by setting &lt;code&gt;condition&lt;/code&gt; function to return true.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;supermaven-nvim&#34;).setup({&#xA;  condition = function()&#xA;    return string.match(vim.fn.expand(&#34;%:t&#34;), &#34;foo.sh&#34;)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will disable supermaven-nvim for files with the name &lt;code&gt;foo.sh&lt;/code&gt; in it, e.g. &lt;code&gt;myscriptfoo.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using with nvim-cmp&lt;/h3&gt; &#xA;&lt;p&gt;If you are using nvim-cmp, you can use the &lt;code&gt;supermaven&lt;/code&gt; source (which is registered by default) by adding the following to your &lt;code&gt;cmp.setup()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- cmp.lua&#xA;cmp.setup {&#xA;  ...&#xA;  sources = {&#xA;    { name = &#34;supermaven&#34; },&#xA;  }&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also has a builtin highlight group CmpItemKindSupermaven. To add an icon to Supermaven for lspkind, simply add Supermaven to your lspkind symbol map.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lspkind.lua&#xA;local lspkind = require(&#34;lspkind&#34;)&#xA;lspkind.init({&#xA;  symbol_map = {&#xA;    Supermaven = &#34;&#34;,&#xA;  },&#xA;})&#xA;&#xA;vim.api.nvim_set_hl(0, &#34;CmpItemKindSupermaven&#34;, {fg =&#34;#6CC644&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can add Supermaven to the lspkind symbol_map within the cmp format function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- cmp.lua&#xA;cmp.setup {&#xA;  ...&#xA;  formatting = {&#xA;    format = lspkind.cmp_format({&#xA;      mode = &#34;symbol&#34;,&#xA;      max_width = 50,&#xA;      symbol_map = { Supermaven = &#34;&#34; }&#xA;    })&#xA;  }&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Programatically checking and accepting suggestions&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can also check if there is an active suggestion and accept it programatically.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;supermaven-nvim&#34;).setup({&#xA;  disable_keymaps = true&#xA;})&#xA;&#xA;...&#xA;&#xA;M.expand = function(fallback)&#xA;  local luasnip = require(&#39;luasnip&#39;)&#xA;  local suggestion = require(&#39;supermaven-nvim.completion_preview&#39;)&#xA;&#xA;  if luasnip.expandable() then&#xA;    luasnip.expand()&#xA;  elseif suggestion.has_suggestion() then&#xA;    suggestion.on_accept_suggestion()&#xA;  else&#xA;    fallback()&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Upon starting supermaven-nvim, you will be prompted to either use the Free Tier with the command &lt;code&gt;:SupermavenUseFree&lt;/code&gt; or to activate a Supermaven Pro subscription by following a link, which will connect your Supermaven account.&lt;/p&gt; &#xA;&lt;p&gt;If Supermaven is set up, you can use &lt;code&gt;:SupermavenLogout&lt;/code&gt; to switch versions.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;:SupermavenShowLog&lt;/code&gt; to view the logged messages in &lt;code&gt;path/to/stdpath-cache/supermaven-nvim.log&lt;/code&gt; if you encounter any issues. Or &lt;code&gt;:SupermavenClearLog&lt;/code&gt; to clear the log file.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;Supermaven-nvim provides the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:SupermavenStart    start supermaven-nvim&#xA;:SupermavenStop     stop supermaven-nvim&#xA;:SupermavenRestart  restart supermaven-nvim&#xA;:SupermavenToggle   toggle supermaven-nvim&#xA;:SupermavenStatus   show status of supermaven-nvim&#xA;:SupermavenUseFree  switch to the free version&#xA;:SupermavenUsePro   switch to the pro version&#xA;:SupermavenLogout   log out of supermaven&#xA;:SupermavenShowLog  show logs for supermaven-nvim&#xA;:SupermavenClearLog clear logs for supermaven-nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lua API&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;supermaven-nvim.api&lt;/code&gt; module provides the following functions for interacting with supermaven-nvim from Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local api = require(&#34;supermaven-nvim.api&#34;)&#xA;&#xA;api.start() -- starts supermaven-nvim&#xA;api.stop() -- stops supermaven-nvim&#xA;api.restart() -- restarts supermaven-nvim if it is running, otherwise starts it&#xA;api.toggle() -- toggles supermaven-nvim&#xA;api.is_running() -- returns true if supermaven-nvim is running&#xA;api.use_free_version() -- switch to the free version&#xA;api.use_pro() -- switch to the pro version&#xA;api.logout() -- log out of supermaven&#xA;api.show_log() -- show logs for supermaven-nvim&#xA;api.clear_log() -- clear logs for supermaven-nvim&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>WeakAuras/WeakAuras2</title>
    <updated>2024-09-01T01:40:21Z</updated>
    <id>tag:github.com,2024-09-01:/WeakAuras/WeakAuras2</id>
    <link href="https://github.com/WeakAuras/WeakAuras2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;World of Warcraft addon that provides a powerful framework to display customizable graphics on your screen.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;WeakAuras&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/WeakAuras/WeakAuras2/actions?workflow=CI&#34;&gt;&lt;img src=&#34;https://github.com/WeakAuras/WeakAuras2/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/weakauras&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-weakauras-738bd7.svg?style=flat&#34; alt=&#34;WeakAuras on Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/weakauras&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-donate-orange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wwbxeCG.jpeg&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;WeakAuras is a powerful and flexible framework that allows the display of highly customizable graphics on World of Warcraft&#39;s user interface to indicate buffs, debuffs, and other relevant information. This addon was created to be a lightweight replacement for Power Auras but has since introduced more functionalities while remaining efficient and easy to use.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An intuitive and powerful configuration interface&lt;/li&gt; &#xA; &lt;li&gt;Custom textures including all textures from Power Auras and Blizzard&#39;s spell alerts&lt;/li&gt; &#xA; &lt;li&gt;Progress bars and textures that show the exact duration of auras&lt;/li&gt; &#xA; &lt;li&gt;Displays based on auras, health, power (mana, rage, soul shards, holy power, etc.), cooldowns, combat events, runes, totems, items, and many other triggers&lt;/li&gt; &#xA; &lt;li&gt;Preset and user-defined animations&lt;/li&gt; &#xA; &lt;li&gt;Custom side-effects such as chat announcements or sounds&lt;/li&gt; &#xA; &lt;li&gt;Grouping, which allows multiple displays to be positioned and configured at the same time&lt;/li&gt; &#xA; &lt;li&gt;CPU optimizations such as conditional loading/unloading of displays, modularity, and prevention of full aura scanning&lt;/li&gt; &#xA; &lt;li&gt;Powerful customization options, such as animation paths, on-show/on-hide code, and custom triggers, for Lua-savvy users&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;To open the options window, type &lt;code&gt;/wa&lt;/code&gt; or &lt;code&gt;/weakauras&lt;/code&gt; into your chat and hit enter or use the minimap icon.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weakauras.wtf&#34;&gt;WeakAuras Companion&lt;/a&gt;: This application adds the missing link between Wago.io and the World of Warcraft addon, enabling you to update your auras in a convenient fashion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.curseforge.com/wow/addons/weakauras-stop-motion&#34;&gt;WeakAuras_StopMotion&lt;/a&gt;: This addon adds a new region type to WeakAuras that allows for stop motion animations. Stop Motion textures contain each frame of the animation as a separate image. The addon ships with a number of animations and it supports custom textures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.curseforge.com/wow/addons/sharedmedia&#34;&gt;SharedMedia&lt;/a&gt; for more bar textures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.curseforge.com/wow/addons/shared-media-additional-fonts&#34;&gt;SharedMediaAdditionalFonts&lt;/a&gt; for more fonts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.curseforge.com/wow/addons/colorpickerplus&#34;&gt;ColorPickerPlus&lt;/a&gt; for a better version of the WoW color picker that includes class color templates and a copy and paste function.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For in-depth documentation, see the &lt;a href=&#34;https://github.com/WeakAuras/WeakAuras2/wiki&#34;&gt;wiki&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;For some examples of what WeakAuras can do, take a look at &lt;a href=&#34;https://wago.io/&#34;&gt;wago.io&lt;/a&gt; where tons of people upload their creations and even feature complete interfaces utilizing WeakAuras!&lt;/p&gt; &#xA;&lt;h2&gt;Problems&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please see the &lt;a href=&#34;https://github.com/WeakAuras/WeakAuras2/wiki&#34;&gt;wiki&lt;/a&gt; page.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;ve discovered something that&#39;s clearly wrong, or if you get an error, please create a &lt;a href=&#34;https://github.com/WeakAuras/WeakAuras2/issues&#34;&gt;ticket&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re a programmer yourself and want to contribute? Check out our &lt;a href=&#34;https://raw.githubusercontent.com/WeakAuras/WeakAuras2/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; to get started!&lt;/li&gt; &#xA; &lt;li&gt;Feel free to join our &lt;a href=&#34;https://discord.gg/weakauras&#34;&gt;Discord Community&lt;/a&gt; to talk, get help and discuss everything WeakAuras!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you want to help out with development without providing code yourself, you can always donate to the WeakAuras project maintainers using PayPal or become a Patreon:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paypal.me/WeakAuras&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34; alt=&#34;WeakAuras on PayPal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/bePatron?u=3216523&#34;&gt;&lt;img src=&#34;https://c5.patreon.com/external/logo/become_a_patron_button.png&#34; alt=&#34;Become a Patreon!&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>