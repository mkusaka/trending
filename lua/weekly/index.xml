<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-17T02:16:11Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-lualine/lualine.nvim</title>
    <updated>2022-07-17T02:16:11Z</updated>
    <id>tag:github.com,2022-07-17:/nvim-lualine/lualine.nvim</id>
    <link href="https://github.com/nvim-lualine/lualine.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A blazing fast and easy to configure neovim statusline plugin written in pure lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lualine.nvim&lt;/h1&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/nvim-lualine/lualine.nvim?style=flat-square&#34; alt=&#34;code size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/nvim-lualine/lualine.nvim?style=flat-square&#34; alt=&#34;license&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;p&gt;A blazing fast and easy to configure Neovim statusline written in Lua.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lualine.nvim&lt;/code&gt; requires Neovim &amp;gt;= 0.5.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to create an issue/PR if you want to see anything else implemented. If you have some question or need help with configuration, start a &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before opening a PR. You can also help with documentation in the &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Here is a preview of what lualine can look like.&lt;/p&gt; &#xA;&lt;p&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650373-bb025580-74bf-11eb-8682-2c09321dd18e.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650377-bd64af80-74bf-11eb-9c55-fbfc51b39fe8.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650378-be95dc80-74bf-11eb-9718-82b242ecdd54.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650381-bfc70980-74bf-11eb-9245-85c48f0f154a.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/103467925-32372b00-4d54-11eb-88d6-6d39c46854d8.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Screenshots of all available themes are listed in &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&#34;&gt;THEMES.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For those who want to break the norms, you can create custom looks for lualine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/evil_lualine.lua&#34;&gt;evil_lualine&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/13149513/113875129-4453ba00-97d8-11eb-8f21-94a9ef565db3.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/slanted-gaps.lua&#34;&gt;slanted-gaps&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/13149513/143395518-f6d6f748-c1ca-491b-9dab-246d0a8cf23f.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/bubbles.lua&#34;&gt;bubbles&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/20235646/131350468-fc556196-5f46-4bfe-a72e-960f6a58db2c.png&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Performance compared to other plugins&lt;/h2&gt; &#xA;&lt;p&gt;Unlike other statusline plugins, lualine loads only the components you specify, and nothing else.&lt;/p&gt; &#xA;&lt;p&gt;Startup time performance measured with an amazing plugin &lt;a href=&#34;https://github.com/dstein64/vim-startuptime&#34;&gt;dstein64/vim-startuptime&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Times are measured with a clean &lt;code&gt;init.vim&lt;/code&gt; with only &lt;code&gt;vim-startuptime&lt;/code&gt;, &lt;code&gt;vim-plug&lt;/code&gt; and given statusline plugin installed. In control just &lt;code&gt;vim-startuptime&lt;/code&gt; and&lt;code&gt;vim-plug&lt;/code&gt; is installed. And measured time is complete startuptime of vim not time spent on specific plugin. These numbers are the average of 20 runs.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;control&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;lualine&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;lightline&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;airline&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17.2 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24.8 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25.5 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;79.9 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Last Updated On: 18-04-2022&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lualine/lualine.nvim&#39;&#xA;&#34; If you want to have icons in your statusline choose one of these&#xA;Plug &#39;kyazdani42/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;nvim-lualine/lualine.nvim&#39;,&#xA;  requires = { &#39;kyazdani42/nvim-web-devicons&#39;, opt = true }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also need to have a patched font if you want icons.&lt;/p&gt; &#xA;&lt;h2&gt;Usage and customization&lt;/h2&gt; &#xA;&lt;p&gt;Lualine has sections as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-------------------------------------------------+&#xA;| A | B | C                             X | Y | Z |&#xA;+-------------------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each sections holds its components e.g. Vim&#39;s current mode.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring lualine in init.vim&lt;/h3&gt; &#xA;&lt;p&gt;All the examples below are in lua. You can use the same examples in &lt;code&gt;.vim&lt;/code&gt; files by wrapping them in lua heredoc like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; END&#xA;require(&#39;lualine&#39;).setup()&#xA;END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, check out &lt;code&gt;:help lua-heredoc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Default configuration&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    icons_enabled = true,&#xA;    theme = &#39;auto&#39;,&#xA;    component_separators = { left = &#39;&#39;, right = &#39;&#39;},&#xA;    section_separators = { left = &#39;&#39;, right = &#39;&#39;},&#xA;    disabled_filetypes = {},&#xA;    always_divide_middle = true,&#xA;    globalstatus = false,&#xA;  },&#xA;  sections = {&#xA;    lualine_a = {&#39;mode&#39;},&#xA;    lualine_b = {&#39;branch&#39;, &#39;diff&#39;, &#39;diagnostics&#39;},&#xA;    lualine_c = {&#39;filename&#39;},&#xA;    lualine_x = {&#39;encoding&#39;, &#39;fileformat&#39;, &#39;filetype&#39;},&#xA;    lualine_y = {&#39;progress&#39;},&#xA;    lualine_z = {&#39;location&#39;}&#xA;  },&#xA;  inactive_sections = {&#xA;    lualine_a = {},&#xA;    lualine_b = {},&#xA;    lualine_c = {&#39;filename&#39;},&#xA;    lualine_x = {&#39;location&#39;},&#xA;    lualine_y = {},&#xA;    lualine_z = {}&#xA;  },&#xA;  tabline = {},&#xA;  extensions = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to get your current lualine config, you can do so with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).get_config()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Starting lualine&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Setting a theme&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { theme = &#39;gruvbox&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All available themes are listed in &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&#34;&gt;THEMES.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please create a PR if you managed to port a popular theme before us, &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&#34;&gt;here is how to do it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customizing themes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local custom_gruvbox = require&#39;lualine.themes.gruvbox&#39;&#xA;&#xA;-- Change the background of lualine_c section for normal mode&#xA;custom_gruvbox.normal.c.bg = &#39;#112233&#39;&#xA;&#xA;require(&#39;lualine&#39;).setup {&#xA;  options = { theme  = custom_gruvbox },&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Theme structure is available &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Writing-a-theme&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Separators&lt;/h3&gt; &#xA;&lt;p&gt;lualine defines two kinds of separators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;section_separators&lt;/code&gt; - separators between sections&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;component_separators&lt;/code&gt; - separators between the different components in sections&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if viewing this README in a browser, chances are the characters below will not be visible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  section_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  component_separators = { left = &#39;&#39;, right = &#39;&#39; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, left refers to the left-most sections (a, b, c), and right refers to the right-most sections (x, y, z).&lt;/p&gt; &#xA;&lt;h4&gt;Disabling separators&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { section_separators = &#39;&#39;, component_separators = &#39;&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Changing components in lualine sections&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {lualine_a = {&#39;mode&#39;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available components&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;branch&lt;/code&gt; (git branch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buffers&lt;/code&gt; (shows currently available buffers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diagnostics&lt;/code&gt; (diagnostics count from your preferred source)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff&lt;/code&gt; (git diff status)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;encoding&lt;/code&gt; (file encoding)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fileformat&lt;/code&gt; (file format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filesize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filetype&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hostname&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;location&lt;/code&gt; (location in file in line:column format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode&lt;/code&gt; (vim mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;progress&lt;/code&gt; (%progress in file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tabs&lt;/code&gt; (shows currently available tabs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;windows&lt;/code&gt; (shows currently available windows)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom components&lt;/h4&gt; &#xA;&lt;h5&gt;Lua functions as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function hello()&#xA;  return [[hello world]]&#xA;end&#xA;sections = { lualine_a = { hello } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim functions as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_a = {&#39;FugitiveHead&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim&#39;s statusline items as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_c = {&#39;%=&#39;, &#39;%t%m&#39;, &#39;%3p&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim variables as lualine component&lt;/h5&gt; &#xA;&lt;p&gt;Variables from &lt;code&gt;g:&lt;/code&gt;, &lt;code&gt;v:&lt;/code&gt;, &lt;code&gt;t:&lt;/code&gt;, &lt;code&gt;w:&lt;/code&gt;, &lt;code&gt;b:&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;go:&lt;/code&gt;, &lt;code&gt;vo:&lt;/code&gt;, &lt;code&gt;to:&lt;/code&gt;, &lt;code&gt;wo:&lt;/code&gt;, &lt;code&gt;bo:&lt;/code&gt; scopes can be used.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h lua-vim-variables&lt;/code&gt; and &lt;code&gt;:h lua-vim-options&lt;/code&gt; if you are not sure what to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_a = { &#39;g:coc_status&#39;, &#39;bo:filetype&#39; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Lua expressions as lualine component&lt;/h5&gt; &#xA;&lt;p&gt;You can use any valid lua expression as a component including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;oneliners&lt;/li&gt; &#xA; &lt;li&gt;global variables&lt;/li&gt; &#xA; &lt;li&gt;require statements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_c = { &#34;os.date(&#39;%a&#39;)&#34;, &#39;data&#39;, &#34;require&#39;lsp-status&#39;.status()&#34; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is a global variable in this example.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Component options&lt;/h3&gt; &#xA;&lt;p&gt;Component options can change the way a component behave. There are two kinds of options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;global options affecting all components&lt;/li&gt; &#xA; &lt;li&gt;local options affecting specific&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Global options can be used as local options (can be applied to specific components) but you cannot use local options as global. Global option used locally overwrites the global, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#39;lualine&#39;).setup {&#xA;      options = { fmt = string.lower },&#xA;      sections = { lualine_a = {&#xA;        { &#39;mode&#39;, fmt = function(str) return str:sub(1,1) end } },&#xA;                  lualine_b = {&#39;branch&#39;} }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; will be formatted with the passed function so only first char will be shown . On the other hand branch will be formatted with global formatter &lt;code&gt;string.lower&lt;/code&gt; so it will be showed in lower case.&lt;/p&gt; &#xA;&lt;h4&gt;Available options&lt;/h4&gt; &#xA;&lt;h4&gt;Global options&lt;/h4&gt; &#xA;&lt;p&gt;These are &lt;code&gt;options&lt;/code&gt; that are used in options table. They set behavior of lualine.&lt;/p&gt; &#xA;&lt;p&gt;Values set here are treated as default for other options that work in component level.&lt;/p&gt; &#xA;&lt;p&gt;For example even though &lt;code&gt;icons_enabled&lt;/code&gt; is a general component option. you can set &lt;code&gt;icons_enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and icons will be disabled on all component. You can still overwrite defaults set in option table by specifying the option value in component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  theme = &#39;auto&#39;, -- lualine theme&#xA;  component_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  section_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  disabled_filetypes = {},     -- Filetypes to disable lualine for.&#xA;  always_divide_middle = true, -- When set to true, left sections i.e. &#39;a&#39;,&#39;b&#39; and &#39;c&#39;&#xA;                               -- can&#39;t take over the entire statusline even&#xA;                               -- if neither of &#39;x&#39;, &#39;y&#39; or &#39;z&#39; are present.&#xA;  globalstatus = false,        -- enable global statusline (have a single statusline&#xA;                               -- at bottom of neovim instead of one for  every window).&#xA;                               -- This feature is only available in neovim 0.7 and higher.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;General component options&lt;/h4&gt; &#xA;&lt;p&gt;These are options that control behavior at component level and are available for all components.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;mode&#39;,&#xA;      icons_enabled = true, -- Enables the display of icons alongside the component.&#xA;      -- Defines the icon to be displayed in front of the component.&#xA;      -- Can be string|table&#xA;      -- As table it must contain the icon as first entry and can use&#xA;      -- color option to custom color the icon. Example:&#xA;      -- {&#39;branch&#39;, icon = &#39;&#39;} / {&#39;branch&#39;, icon = {&#39;&#39;, color={fg=&#39;green&#39;}}}&#xA;&#xA;      -- icon position can also be set to the right side from table. Example:&#xA;      -- {&#39;branch&#39;, icon = {&#39;&#39;, align=&#39;right&#39;, color={fg=&#39;green&#39;}}}&#xA;      icon = nil,&#xA;&#xA;      separator = nil,      -- Determines what separator to use for the component.&#xA;                            -- Note:&#xA;                            --  When a string is provided it&#39;s treated as component_separator.&#xA;                            --  When a table is provided it&#39;s treated as section_separator.&#xA;                            --  Passing an empty string disables the separator.&#xA;                            --&#xA;                            -- These options can be used to set colored separators&#xA;                            -- around a component.&#xA;                            --&#xA;                            -- The options need to be set as such:&#xA;                            --   separator = { left = &#39;&#39;, right = &#39;&#39;}&#xA;                            --&#xA;                            -- Where left will be placed on left side of component,&#xA;                            -- and right will be placed on its right.&#xA;                            --&#xA;&#xA;      cond = nil,           -- Condition function, the component is loaded when the function returns `true`.&#xA;&#xA;      -- Defines a custom color for the component:&#xA;      --&#xA;      -- &#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; } | function&#xA;      -- Note:&#xA;      --  &#39;|&#39; is synonymous with &#39;or&#39;, meaning a different acceptable format for that placeholder.&#xA;      -- color function has to return one of other color types (&#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; })&#xA;      -- color functions can be used to have different colors based on state as shown below.&#xA;      --&#xA;      -- Examples:&#xA;      --   color = { fg = &#39;#ffaa88&#39;, bg = &#39;grey&#39;, gui=&#39;italic,bold&#39; },&#xA;      --   color = { fg = 204 }   -- When fg/bg are omitted, they default to the your theme&#39;s fg/bg.&#xA;      --   color = &#39;WarningMsg&#39;   -- Highlight groups can also be used.&#xA;      --   color = function(section)&#xA;      --      return { fg = vim.bo.modified and &#39;#aa3355&#39; or &#39;#33aa88&#39; }&#xA;      --   end,&#xA;      color = nil, -- The default is your theme&#39;s color for that section and mode.&#xA;&#xA;      -- Specify what type a component is, if omitted, lualine will guess it for you.&#xA;      --&#xA;      -- Available types are:&#xA;      --   [format: type_name(example)], mod(branch/filename),&#xA;      --   stl(%f/%m), var(g:coc_status/bo:modifiable),&#xA;      --   lua_expr(lua expressions), vim_fun(viml function name)&#xA;      --&#xA;      -- Note:&#xA;      -- lua_expr is short for lua-expression and vim_fun is short for vim-function.&#xA;      type = nil,&#xA;&#xA;      padding = 1, -- Adds padding to the left and right of components.&#xA;                   -- Padding can be specified to left or right independently, e.g.:&#xA;                   --   padding = { left = left_padding, right = right_padding }&#xA;&#xA;      fmt = nil,   -- Format function, formats the component&#39;s output.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Component specific options&lt;/h4&gt; &#xA;&lt;p&gt;These are options that are available on specific components. For example you have option on &lt;code&gt;diagnostics&lt;/code&gt; component to specify what your diagnostic sources will be.&lt;/p&gt; &#xA;&lt;h4&gt;buffers component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;buffers&#39;,&#xA;      show_filename_only = true,   -- Shows shortened relative path when set to false.&#xA;      hide_filename_extension = false,   -- Hide filename extension when set to true.&#xA;      show_modified_status = true, -- Shows indicator when the buffer is modified.&#xA;&#xA;      mode = 0, -- 0: Shows buffer name&#xA;                -- 1: Shows buffer index&#xA;                -- 2: Shows buffer name + buffer index&#xA;                -- 3: Shows buffer number&#xA;                -- 4: Shows buffer name + buffer number&#xA;&#xA;      max_length = vim.o.columns * 2 / 3, -- Maximum width of buffers component,&#xA;                                          -- it can also be a function that returns&#xA;                                          -- the value of `max_length` dynamically.&#xA;      filetype_names = {&#xA;        TelescopePrompt = &#39;Telescope&#39;,&#xA;        dashboard = &#39;Dashboard&#39;,&#xA;        packer = &#39;Packer&#39;,&#xA;        fzf = &#39;FZF&#39;,&#xA;        alpha = &#39;Alpha&#39;&#xA;      }, -- Shows specific buffer name for that filetype ( { `filetype` = `buffer_name`, ... } )&#xA;&#xA;      buffers_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active buffer.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive buffer.&#xA;      },&#xA;&#xA;      symbols = {&#xA;        modified = &#39; ●&#39;,      -- Text to show when the buffer is modified&#xA;        alternate_file = &#39;#&#39;, -- Text to show to identify the alternate file&#xA;        directory =  &#39;&#39;,     -- Text to show when the buffer is a directory&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;diagnostics component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;diagnostics&#39;,&#xA;&#xA;      -- Table of diagnostic sources, available sources are:&#xA;      --   &#39;nvim_lsp&#39;, &#39;nvim_diagnostic&#39;, &#39;coc&#39;, &#39;ale&#39;, &#39;vim_lsp&#39;.&#xA;      -- or a function that returns a table as such:&#xA;      --   { error=error_cnt, warn=warn_cnt, info=info_cnt, hint=hint_cnt }&#xA;      sources = { &#39;nvim_diagnostic&#39;, &#39;coc&#39; },&#xA;&#xA;      -- Displays diagnostics for the defined severity types&#xA;      sections = { &#39;error&#39;, &#39;warn&#39;, &#39;info&#39;, &#39;hint&#39; },&#xA;&#xA;      diagnostics_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        error = &#39;DiagnosticError&#39;, -- Changes diagnostics&#39; error color.&#xA;        warn  = &#39;DiagnosticWarn&#39;,  -- Changes diagnostics&#39; warn color.&#xA;        info  = &#39;DiagnosticInfo&#39;,  -- Changes diagnostics&#39; info color.&#xA;        hint  = &#39;DiagnosticHint&#39;,  -- Changes diagnostics&#39; hint color.&#xA;      },&#xA;      symbols = {error = &#39;E&#39;, warn = &#39;W&#39;, info = &#39;I&#39;, hint = &#39;H&#39;},&#xA;      colored = true,           -- Displays diagnostics status in color if set to true.&#xA;      update_in_insert = false, -- Update diagnostics in insert mode.&#xA;      always_visible = false,   -- Show diagnostics even if there are none.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;diff component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;diff&#39;,&#xA;      colored = true, -- Displays a colored diff status if set to true&#xA;      diff_color = {&#xA;        -- Same color values as the general color option can be used here.&#xA;        added    = &#39;DiffAdd&#39;,    -- Changes the diff&#39;s added color&#xA;        modified = &#39;DiffChange&#39;, -- Changes the diff&#39;s modified color&#xA;        removed  = &#39;DiffDelete&#39;, -- Changes the diff&#39;s removed color you&#xA;      },&#xA;      symbols = {added = &#39;+&#39;, modified = &#39;~&#39;, removed = &#39;-&#39;}, -- Changes the symbols used by the diff.&#xA;      source = nil, -- A function that works as a data source for diff.&#xA;                    -- It must return a table as such:&#xA;                    --   { added = add_count, modified = modified_count, removed = removed_count }&#xA;                    -- or nil on failure. count &amp;lt;= 0 won&#39;t be displayed.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;fileformat component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;fileformat&#39;,&#xA;      symbols = {&#xA;        unix = &#39;&#39;, -- e712&#xA;        dos = &#39;&#39;,  -- e70f&#xA;        mac = &#39;&#39;,  -- e711&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;filename component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;filename&#39;,&#xA;      file_status = true,      -- Displays file status (readonly status, modified status)&#xA;      path = 0,                -- 0: Just the filename&#xA;                               -- 1: Relative path&#xA;                               -- 2: Absolute path&#xA;                               -- 3: Absolute path, with tilde as the home directory&#xA;&#xA;      shorting_target = 40,    -- Shortens path to leave 40 spaces in the window&#xA;                               -- for other components. (terrible name, any suggestions?)&#xA;      symbols = {&#xA;        modified = &#39;[+]&#39;,      -- Text to show when the file is modified.&#xA;        readonly = &#39;[-]&#39;,      -- Text to show when the file is non-modifiable or readonly.&#xA;        unnamed = &#39;[No Name]&#39;, -- Text to show for unnamed buffers.&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;filetype component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;filetype&#39;,&#xA;      colored = true,   -- Displays filetype icon in color if set to true&#xA;      icon_only = false, -- Display only an icon for filetype&#xA;      icon = { align = &#39;right&#39; }, -- Display filetype icon on the right hand side&#xA;      -- icon =    {&#39;X&#39;, align=&#39;right&#39;}&#xA;      -- Icon string ^ in table is ignored in filetype component&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;tabs component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;tabs&#39;,&#xA;      max_length = vim.o.columns / 3, -- Maximum width of tabs component.&#xA;                                      -- Note:&#xA;                                      -- It can also be a function that returns&#xA;                                      -- the value of `max_length` dynamically.&#xA;      mode = 0, -- 0: Shows tab_nr&#xA;                -- 1: Shows tab_name&#xA;                -- 2: Shows tab_nr + tab_name&#xA;&#xA;      tabs_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active tab.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive tab.&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;windows component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;windows&#39;,&#xA;      show_filename_only = true,   -- Shows shortened relative path when set to false.&#xA;      show_modified_status = true, -- Shows indicator when the window is modified.&#xA;&#xA;      mode = 0, -- 0: Shows window name&#xA;                -- 1: Shows window index&#xA;                -- 2: Shows window name + window index&#xA;&#xA;      max_length = vim.o.columns * 2 / 3, -- Maximum width of windows component,&#xA;                                          -- it can also be a function that returns&#xA;                                          -- the value of `max_length` dynamically.&#xA;      filetype_names = {&#xA;        TelescopePrompt = &#39;Telescope&#39;,&#xA;        dashboard = &#39;Dashboard&#39;,&#xA;        packer = &#39;Packer&#39;,&#xA;        fzf = &#39;FZF&#39;,&#xA;        alpha = &#39;Alpha&#39;&#xA;      }, -- Shows specific window name for that filetype ( { `filetype` = `window_name`, ... } )&#xA;&#xA;      disabled_buftypes = { &#39;quickfix&#39;, &#39;prompt&#39; }, -- Hide a window if its buffer&#39;s type is disabled&#xA;&#xA;      windows_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active window.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive window.&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Tabline&lt;/h3&gt; &#xA;&lt;p&gt;You can use lualine to display components in tabline. The configuration for tabline sections is exactly the same as that of the statusline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;  lualine_a = {},&#xA;  lualine_b = {&#39;branch&#39;},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the branch and filename components on top of neovim inside tabline.&lt;/p&gt; &#xA;&lt;p&gt;lualine also provides 2 components, buffers and tabs, that you can use to get a more traditional tabline/bufferline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;  lualine_a = {&#39;buffers&#39;},&#xA;  lualine_b = {&#39;branch&#39;},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {&#39;tabs&#39;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Buffers&lt;/h4&gt; &#xA;&lt;p&gt;Shows currently open buffers. Like bufferline . See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#buffers-component-options&#34;&gt;buffers options&lt;/a&gt; for all builtin behaviors of buffers component. You can use &lt;code&gt;:LualineBuffersJump&lt;/code&gt; to jump to buffer based on index of buffer in buffers component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;  :LualineBuffersJump 2  &#34; Jumps to 2nd buffer in buffers component.&#xA;  :LualineBuffersJump $  &#34; Jumps to last buffer in buffers component.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tabs&lt;/h4&gt; &#xA;&lt;p&gt;Shows currently open tab. Like usual tabline. See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#tabs-component-options&#34;&gt;tabs options&lt;/a&gt; for all builtin behaviors of tabs component. You can also use &lt;code&gt;:LualineRenameTab&lt;/code&gt; to set a name for a tabpage. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:LualineRenameTab Project_K&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s useful when you&#39;re using rendering mode 2/3 in tabs. To unname a tabpage run &lt;code&gt;:LualineRenameTab&lt;/code&gt; without argument.&lt;/p&gt; &#xA;&lt;h4&gt;Tabline as statusline&lt;/h4&gt; &#xA;&lt;p&gt;You can also completely move your statusline to a tabline by configuring &lt;code&gt;lualine.tabline&lt;/code&gt; and disabling &lt;code&gt;lualine.sections&lt;/code&gt; and &lt;code&gt;lualine.inactive_sections&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;......&#xA;  },&#xA;sections = {},&#xA;inactive_sections = {},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a more sophisticated tabline you can use other tabline plugins with lualine too, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;nvim-bufferline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kdheepak/tabline.nvim&#34;&gt;tabline.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;tabline.nvim even uses lualine&#39;s theme by default 🙌 You can find a bigger list &lt;a href=&#34;https://github.com/rockerBOO/awesome-neovim#tabline&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;lualine extensions change statusline appearance for a window/buffer with specified filetypes.&lt;/p&gt; &#xA;&lt;p&gt;By default no extensions are loaded to improve performance. You can load extensions with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;extensions = {&#39;quickfix&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available extensions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;aerial&lt;/li&gt; &#xA; &lt;li&gt;chadtree&lt;/li&gt; &#xA; &lt;li&gt;fern&lt;/li&gt; &#xA; &lt;li&gt;fugitive&lt;/li&gt; &#xA; &lt;li&gt;fzf&lt;/li&gt; &#xA; &lt;li&gt;man&lt;/li&gt; &#xA; &lt;li&gt;mundo&lt;/li&gt; &#xA; &lt;li&gt;neo-tree&lt;/li&gt; &#xA; &lt;li&gt;nerdtree&lt;/li&gt; &#xA; &lt;li&gt;nvim-dap-ui&lt;/li&gt; &#xA; &lt;li&gt;nvim-tree&lt;/li&gt; &#xA; &lt;li&gt;quickfix&lt;/li&gt; &#xA; &lt;li&gt;symbols-outline&lt;/li&gt; &#xA; &lt;li&gt;toggleterm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom extensions&lt;/h4&gt; &#xA;&lt;p&gt;You can define your own extensions. If you believe an extension may be useful to others, then please submit a PR.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local my_extension = { sections = { lualine_a = {&#39;mode&#39;} }, filetypes = {&#39;lua&#39;} }&#xA;require(&#39;lualine&#39;).setup { extensions = { my_extension } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Disabling lualine&lt;/h3&gt; &#xA;&lt;p&gt;You can disable lualine for specific filetypes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { disabled_filetypes = {&#39;lua&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to these wonderful people, we enjoy this awesome plugin.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=nvim-lualine/lualine.nvim&#34;&gt; &lt;/a&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Wiki&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki&#34;&gt;wiki&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;You can find some useful &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Component-snippets&#34;&gt;configuration snippets&lt;/a&gt; here. You can also share your awesome snippets with others.&lt;/p&gt; &#xA;&lt;p&gt;If you want to extend lualine with plugins or want to know which ones already do, &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Plugins&#34;&gt;wiki/plugins&lt;/a&gt; is for you.&lt;/p&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;If you appreciate my work you can buy me a coffee.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/shadmansalJ&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-black.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brainfucksec/neovim-lua</title>
    <updated>2022-07-17T02:16:11Z</updated>
    <id>tag:github.com,2022-07-17:/brainfucksec/neovim-lua</id>
    <link href="https://github.com/brainfucksec/neovim-lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim KISS configuration with Lua&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/logo.png&#34; alt=&#34;neovim-lua_logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Neovim KISS configuration with Lua &lt;/h3&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#plugins&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#directory-tree&#34;&gt;Directory Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#files-and-settings&#34;&gt;Files and Settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#lsp-configuration&#34;&gt;LSP Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#appearance&#34;&gt;Appearance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#configuration-check&#34;&gt;Configuration Check&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt; - A use-package inspired plugin manager for Neovim&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;feline.nvim&lt;/a&gt; - A minimal, stylish and customizable statusline for Neovim written in Lua&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt; - A collection of common configurations for Neovim&#39;s built-in language server client&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; - Auto completion plugin&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;LuaSnip&lt;/a&gt; - Snippet Engine for Neovim written in Lua&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt; - A File Explorer written In Lua&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;indentBlankline&lt;/a&gt; - Adds indentation guides to all lines (including empty lines)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs&#34;&gt;nvim-autopairs&lt;/a&gt; - A super powerful autopairs for Neovim&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/preservim/tagbar&#34;&gt;Tagbar&lt;/a&gt; - A class outline viewer for Vim&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns&lt;/a&gt; - Super fast git decorations implemented purely in lua/teal&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; - Nvim Treesitter configurations and abstraction layer&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/goolord/alpha-nvim&#34;&gt;alpha-nvim&lt;/a&gt; - A fast and highly customizable greeter for neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; - A Lua fork of vim-devicons&lt;/p&gt; &#xA;&lt;h2&gt;Directory Tree&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;${HOME}/.config/nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── lua&#xA;│&amp;nbsp;&amp;nbsp; ├── core&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── autocmds.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── colors.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── keymaps.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── options.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── statusline.lua&#xA;│&amp;nbsp;&amp;nbsp; ├── plugins&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── alpha-nvim.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── indent-blankline.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── nvim-cmp.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── nvim-lspconfig.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── nvim-tree.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── nvim-treesitter.lua&#xA;│&amp;nbsp;&amp;nbsp; └── packer_init.lua&#xA;├── plugin&#xA;│&amp;nbsp;&amp;nbsp; └── packer_compiled.lua&#xA;└── init.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Files and Settings&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;/nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/init.lua&#34;&gt;init.lua&lt;/a&gt;: Main configuration file that call &lt;code&gt;lua&lt;/code&gt; modules&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua&#34;&gt;lua&lt;/a&gt;: Folder of &lt;code&gt;lua&lt;/code&gt; modules, here reside all the Lua modules that needed. These modules are called from &lt;code&gt;init.lua&lt;/code&gt; file (see below).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide#where-to-put-lua-files&#34;&gt;https://github.com/nanotee/nvim-lua-guide#where-to-put-lua-files&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/nvim/lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/packer_init.lua&#34;&gt;packer_init.lua&lt;/a&gt;: Load plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;/nvim/lua/core&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/autocmds.lua&#34;&gt;autocmds.lua&lt;/a&gt;: Define autocommands with Lua APIs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/colors.lua&#34;&gt;colors.lua&lt;/a&gt;: Define Neovim and plugins color scheme&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/keymaps.lua&#34;&gt;keymaps.lua&lt;/a&gt;: Keymaps configuration file, vim/neovim and plugins keymaps&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/options.lua&#34;&gt;options.lua&lt;/a&gt;: General Neovim settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/statusline.lua&#34;&gt;statusline.lua&lt;/a&gt;: Statusline configuration file&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;/nvim/lua/plugins&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/packer.lua&#34;&gt;packer.lua&lt;/a&gt;: Plugin manager settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/alpha-nvim.lua&#34;&gt;alpha-nvim.lua&lt;/a&gt;: Dashboard&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/indent-blankline.lua&#34;&gt;indent-blankline.lua&lt;/a&gt;: Indent line&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/nvim-cmp.lua&#34;&gt;nvim-cmp.lua&lt;/a&gt;: Autocompletion settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/nvim-lspconfig.lua&#34;&gt;nvim-lspconfig.lua&lt;/a&gt;: LSP configuration (language servers, keybinding)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt;: File manager settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;: Treesitter interface configuration&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/neovim/neovim/releases/latest&#34;&gt;Neovim v0.7.x&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Fonts&lt;/a&gt;, (for the font of the screenshots install &lt;a href=&#34;https://github.com/slavfox/Cozette&#34;&gt;Cozette Font&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/npm/cli&#34;&gt;npm&lt;/a&gt; for download packages of LSP language servers, see: &lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#lsp-configuration&#34;&gt;LSP Configuration&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make a backup of your current &lt;code&gt;nvim&lt;/code&gt; folder if necessary:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;mv ~/.config/nvim ~/.config/nvim.backup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Download neovim-lua with &lt;code&gt;git&lt;/code&gt; and copy the &lt;code&gt;nvim&lt;/code&gt; folder in the &lt;code&gt;${HOME}/.config&lt;/code&gt; directory:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;git clone https://github.com/brainfucksec/neovim-lua.git&#xA;cd neovim-lua/&#xA;cp -Rv nvim ~/.config/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt; for install and manage the plugins:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;git clone --depth 1 https://github.com/wbthomason/packer.nvim\&#xA; ~/.local/share/nvim/site/pack/packer/start/packer.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Run Neovim with &lt;code&gt;PackerSync&lt;/code&gt; command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;nvim +PackerSync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LSP Configuration&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install LSP language servers with &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;sudo npm install -g bash-language-server pyright vscode-langservers-extracted typescript typescript-language-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install additional packages for plugins support:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;C, C++:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://clangd.llvm.org/installation.html&#34;&gt;clang&lt;/a&gt; for use LSP with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#clangd&#34;&gt;clangd&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/universal-ctags/ctags&#34;&gt;ctags&lt;/a&gt; to view tags with &lt;a href=&#34;https://github.com/preservim/tagbar&#34;&gt;Tagbar&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/pynvim&#34;&gt;pynvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Open a source file of one of the supported languages with Neovim, and run command &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig#built-in-commands&#34;&gt;:LspInfo&lt;/a&gt; for testing the LSP support.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Languages Currently Supported&lt;/h3&gt; &#xA;&lt;p&gt;Lua - &lt;a href=&#34;https://neovim.io/doc/user/lua.html&#34;&gt;builtin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bash - &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#bashls&#34;&gt;bashls&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Python - &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#pyright&#34;&gt;pyright&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;C, C++ - &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#clangd&#34;&gt;clangd&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;HTML, CSS, JSON - &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#html&#34;&gt;vscode-html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;JavaScript, TypeScript - &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#tsserver&#34;&gt;tsserver&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md&#34;&gt;nvim-lspconfig #doc/server_configurations.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Appearance&lt;/h2&gt; &#xA;&lt;h3&gt;Available Colorschemes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/navarasu/onedark.nvim&#34;&gt;OneDark&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tanvirtin/monokai.nvim&#34;&gt;Neovim Monokai&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rose-pine/neovim&#34;&gt;Rose Pine&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fonts:&lt;/strong&gt; &lt;a href=&#34;https://github.com/slavfox/Cozette&#34;&gt;Cozette&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Icons:&lt;/strong&gt; &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The color scheme is defined in the following files (default: OneDark):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim UI - &lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/colors.lua&#34;&gt;nvim/lua/core/colors.lua&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Load nvim color scheme:&#xA;...color_scheme = pcall(require, &#39;onedark&#39;)&#xA;require(&#39;onedark&#39;).setup {&#xA;    style = &#39;darker&#39;&#xA;}&#xA;require(&#39;onedark&#39;).load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Statusline - &lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/statusline.lua&#34;&gt;nvim/lua/plugins/feline.lua&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Set colorscheme (from core/colors.lua/colorscheme_name)&#xA;local colors = require(&#39;core/colors&#39;).onedark_dark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration check&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open nvim and run command &lt;code&gt;checkhealth&lt;/code&gt;, you should not see any error in the output (except for the one related to the Python 2 interpreter if don&#39;t have it):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:checkhealth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/checkhealth.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can also use the &lt;code&gt;startuptime&lt;/code&gt; option to read the nvim startup logs:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;nvim --startuptime &amp;gt; /tmp/nvim-start.log&#xA;&#xA;nvim /tmp/nvim-start.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See: &lt;code&gt;:help startuptime&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/banner.png&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; &lt;b&gt;(Click to expand)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;OneDark (darker)&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/1-onedark_1.png&#34; alt=&#34;onedark_1&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/2-onedark_2.png&#34; alt=&#34;onedark_2&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Monokai&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/3-monokai_1.png&#34; alt=&#34;monokai_1&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/4-monokai_2.png&#34; alt=&#34;monokai_2&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Rosé Pine&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/5-rose-pine_1.png&#34; alt=&#34;rose-pine_1&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/6-rose-pine_2.png&#34; alt=&#34;rose-pine_2&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Guides and resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://neovim.io/doc/user/lua.html&#34;&gt;https://neovim.io/doc/user/lua.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide&#34;&gt;https://github.com/nanotee/nvim-lua-guide&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dev.to/vonheikemen/everything-you-need-to-know-to-configure-neovim-using-lua-3h58&#34;&gt;https://dev.to/vonheikemen/everything-you-need-to-know-to-configure-neovim-using-lua-3h58&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.old.reddit.com/r/neovim/&#34;&gt;https://www.old.reddit.com/r/neovim/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Neovim Lua projects and examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/LunarVim/Neovim-from-scratch&#34;&gt;https://github.com/LunarVim/Neovim-from-scratch&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/siduck76/NvChad&#34;&gt;https://github.com/siduck76/NvChad&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/artart222/CodeArt&#34;&gt;https://github.com/artart222/CodeArt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/crivotz/nv-ide&#34;&gt;https://github.com/crivotz/nv-ide&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lua resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Lua in Y minutes - &lt;a href=&#34;https://learnxinyminutes.com/docs/lua/&#34;&gt;https://learnxinyminutes.com/docs/lua/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lua Quick Guide - &lt;a href=&#34;https://github.com/medwatt/Notes/raw/main/Lua/Lua_Quick_Guide.ipynb&#34;&gt;https://github.com/medwatt/Notes/blob/main/Lua/Lua_Quick_Guide.ipynb&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lua 5.4 Reference Manual - &lt;a href=&#34;https://www.lua.org/manual/5.4/&#34;&gt;https://www.lua.org/manual/5.4/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;As all my setups I try to follow the &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;KISS&lt;/a&gt; principle, probably some concepts may not be valid for everyone. Then feel free to take what you need but &lt;strong&gt;don&#39;t install anything without checking first!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thanks to all the authors of the sources mentioned above, to all from whom I &#34;stole&#34; some configs, to the users of /r/Neovim subreddit for the support of the configuration and to &lt;a href=&#34;https://github.com/brainfucksec/neovim-lua/graphs/contributors&#34;&gt;all the people who help me&lt;/a&gt; to improve this setup with their reports and advices.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>overextended/ox_inventory</title>
    <updated>2022-07-17T02:16:11Z</updated>
    <id>tag:github.com,2022-07-17:/overextended/ox_inventory</id>
    <link href="https://github.com/overextended/ox_inventory" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Slot-based inventory with metadata.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/65407488/147992899-93998c0a-75fb-4055-8c06-8da8c49342d6.png&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;h3&gt;&lt;a href=&#34;https://overextended.github.io/docs/ox_inventory/&#34;&gt;Read the documentation for setup, installation, and integration&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Framework&lt;/h1&gt; &#xA;&lt;p&gt;The inventory was designed with the intention to move towards a more generic / standalone structure so it can be integrated into any framework without too much hassle. I will be writing a guide for manually setting up support &lt;em&gt;sometime soon™&lt;/em&gt;. In the mean-time, it will work without any alterations if using the latest updates to &lt;strong&gt;&lt;a href=&#34;https://github.com/esx-framework/esx-legacy&#34;&gt;ESX Legacy&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://overextended.github.io/docs/ox_inventory/&#34;&gt;documentation&lt;/a&gt; setting your config.&lt;br&gt; When set, you can add the following to your &#39;server.cfg&#39;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;exec @ox_inventory/config.cfg&#xA;ensure ox_inventory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Logging&lt;/h1&gt; &#xA;&lt;p&gt;The included logging module utilises datadog to store logging data, which can be expanded for improved analytics and metrics. Register an account at &lt;a href=&#34;https://www.datadoghq.com/&#34;&gt;datadoghq&lt;/a&gt;.&lt;br&gt; The &lt;em&gt;free plan&lt;/em&gt; is enough for most user&#39;s purposes and provides far more utility than the typical weird discord logs utilised in other resources.&lt;/p&gt; &#xA;&lt;p&gt;Once you have registered, generate an API key and add &lt;code&gt;set datadog:key &#39;apikey&#39;&lt;/code&gt; to your server config.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h3&gt;Shops&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creates different shops for 24/7, Ammunation, Liquor Stores, Vending Machines, etc.&lt;/li&gt; &#xA; &lt;li&gt;Job restricted shops, such as a Police Armoury.&lt;/li&gt; &#xA; &lt;li&gt;Items can be restricted to specific job grades and licenses.&lt;/li&gt; &#xA; &lt;li&gt;Define the price for each item, and even allow different currency (black money, poker chips, etc).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Items&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generic item data shared between objects.&lt;/li&gt; &#xA; &lt;li&gt;Specific data stored per-slot, with metadata to hold custom information.&lt;/li&gt; &#xA; &lt;li&gt;Weapons, attachments, and durability.&lt;/li&gt; &#xA; &lt;li&gt;Flexible item use allows for progress bars, server callbacks, and cancellation with simple functions and exports.&lt;/li&gt; &#xA; &lt;li&gt;Support for items registered with ESX.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stashes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Server-side security prevents arbitrary access to any stash.&lt;/li&gt; &#xA; &lt;li&gt;Support personal stashes, able to be opened with different identifiers.&lt;/li&gt; &#xA; &lt;li&gt;Job-restricted stashes as well as a police evidence locker.&lt;/li&gt; &#xA; &lt;li&gt;Server exports allow for registration of stashes from any resource (see &lt;a href=&#34;https://github.com/overextended/ox_inventory_examples/raw/main/server.lua&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Access small stashes via containers, such as paperbags, from using an item.&lt;/li&gt; &#xA; &lt;li&gt;Vehicle gloveboxes and trunks, for both owned and unowned.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Temporary stashes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dumpsters, drops, and non-player vehicles.&lt;/li&gt; &#xA; &lt;li&gt;Loot tables allow users to find random items in dumpsters and unowned vehicles.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;div&gt;&#xA; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://discord.gg/mEM6eYdXPm&#34;&gt;Discord Server&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;table&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;&lt;h3 align=&#34;center&#34;&gt;Legal Notices&lt;/h3&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; Ox Inventory for ESX Legacy &lt;p&gt;Copyright © 2022 &lt;a href=&#34;https://github.com/thelindat&#34;&gt;Linden&lt;/a&gt;, &lt;a href=&#34;https://github.com/dunak-debug&#34;&gt;Dunak&lt;/a&gt;, &lt;a href=&#34;https://github.com/LukeWasTakenn&#34;&gt;Luke&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &lt;p&gt;You should have received a copy of the GNU General Public License along with this program.&lt;br&gt; If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
</feed>