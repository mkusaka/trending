<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-17T01:53:43Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RRethy/vim-illuminate</title>
    <updated>2023-09-17T01:53:43Z</updated>
    <id>tag:github.com,2023-09-17:/RRethy/vim-illuminate</id>
    <link href="https://github.com/RRethy/vim-illuminate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;illuminate.vim - (Neo)Vim plugin for automatically highlighting other uses of the word under the cursor using either LSP, Tree-sitter, or regex matching.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;Vim plugin for automatically highlighting other uses of the word under the cursor using either LSP, Tree-sitter, or regex matching.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/mSG0nwAHDt3Fl7WyoL/giphy.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;Just install the plugin and things will work &lt;em&gt;just work&lt;/em&gt;, no configuration needed.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also get &lt;code&gt;&amp;lt;a-n&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;a-p&amp;gt;&lt;/code&gt; as keymaps to move between references and &lt;code&gt;&amp;lt;a-i&amp;gt;&lt;/code&gt; as a textobject for the reference illuminated under the cursor.&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default configuration&#xA;require(&#39;illuminate&#39;).configure({&#xA;    -- providers: provider used to get references in the buffer, ordered by priority&#xA;    providers = {&#xA;        &#39;lsp&#39;,&#xA;        &#39;treesitter&#39;,&#xA;        &#39;regex&#39;,&#xA;    },&#xA;    -- delay: delay in milliseconds&#xA;    delay = 100,&#xA;    -- filetype_overrides: filetype specific overrides.&#xA;    -- The keys are strings to represent the filetype while the values are tables that&#xA;    -- supports the same keys passed to .configure except for filetypes_denylist and filetypes_allowlist&#xA;    filetype_overrides = {},&#xA;    -- filetypes_denylist: filetypes to not illuminate, this overrides filetypes_allowlist&#xA;    filetypes_denylist = {&#xA;        &#39;dirvish&#39;,&#xA;        &#39;fugitive&#39;,&#xA;    },&#xA;    -- filetypes_allowlist: filetypes to illuminate, this is overridden by filetypes_denylist&#xA;    filetypes_allowlist = {},&#xA;    -- modes_denylist: modes to not illuminate, this overrides modes_allowlist&#xA;    -- See `:help mode()` for possible values&#xA;    modes_denylist = {},&#xA;    -- modes_allowlist: modes to illuminate, this is overridden by modes_denylist&#xA;    -- See `:help mode()` for possible values&#xA;    modes_allowlist = {},&#xA;    -- providers_regex_syntax_denylist: syntax to not illuminate, this overrides providers_regex_syntax_allowlist&#xA;    -- Only applies to the &#39;regex&#39; provider&#xA;    -- Use :echom synIDattr(synIDtrans(synID(line(&#39;.&#39;), col(&#39;.&#39;), 1)), &#39;name&#39;)&#xA;    providers_regex_syntax_denylist = {},&#xA;    -- providers_regex_syntax_allowlist: syntax to illuminate, this is overridden by providers_regex_syntax_denylist&#xA;    -- Only applies to the &#39;regex&#39; provider&#xA;    -- Use :echom synIDattr(synIDtrans(synID(line(&#39;.&#39;), col(&#39;.&#39;), 1)), &#39;name&#39;)&#xA;    providers_regex_syntax_allowlist = {},&#xA;    -- under_cursor: whether or not to illuminate under the cursor&#xA;    under_cursor = true,&#xA;    -- large_file_cutoff: number of lines at which to use large_file_config&#xA;    -- The `under_cursor` option is disabled when this cutoff is hit&#xA;    large_file_cutoff = nil,&#xA;    -- large_file_config: config to use for large files (based on large_file_cutoff).&#xA;    -- Supports the same keys passed to .configure&#xA;    -- If nil, vim-illuminate will be disabled for large files.&#xA;    large_file_overrides = nil,&#xA;    -- min_count_to_highlight: minimum number of matches required to perform highlighting&#xA;    min_count_to_highlight = 1,&#xA;    -- should_enable: a callback that overrides all other settings to&#xA;    -- enable/disable illumination. This will be called a lot so don&#39;t do&#xA;    -- anything expensive in it.&#xA;    should_enable = function(bufnr) return true end,&#xA;    -- case_insensitive_regex: sets regex case sensitivity&#xA;    case_insensitive_regex = false,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Highlight Groups&lt;/h1&gt; &#xA;&lt;h4&gt;IlluminatedWordText&lt;/h4&gt; &#xA;&lt;p&gt;Default highlight group used for references if no kind information is available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi def IlluminatedWordText gui=underline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;IlluminatedWordRead&lt;/h4&gt; &#xA;&lt;p&gt;Highlight group used for references of kind read.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi def IlluminatedWordRead gui=underline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;IlluminatedWordWrite&lt;/h4&gt; &#xA;&lt;p&gt;Highlight group used for references of kind write.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi def IlluminatedWordWrite gui=underline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;h4&gt;:IlluminatePause&lt;/h4&gt; &#xA;&lt;p&gt;Globally pause vim-illuminate.&lt;/p&gt; &#xA;&lt;h4&gt;:IlluminateResume&lt;/h4&gt; &#xA;&lt;p&gt;Globally resume vim-illuminate.&lt;/p&gt; &#xA;&lt;h4&gt;:IlluminateToggle&lt;/h4&gt; &#xA;&lt;p&gt;Globally toggle the pause/resume for vim-illuminate.&lt;/p&gt; &#xA;&lt;h4&gt;:IlluminatePauseBuf&lt;/h4&gt; &#xA;&lt;p&gt;Buffer-local pause of vim-illuminate.&lt;/p&gt; &#xA;&lt;h4&gt;:IlluminateResumeBuf&lt;/h4&gt; &#xA;&lt;p&gt;Buffer-local resume of vim-illuminate.&lt;/p&gt; &#xA;&lt;h4&gt;:IlluminateToggleBuf&lt;/h4&gt; &#xA;&lt;p&gt;Buffer-local toggle of the pause/resume for vim-illuminate.&lt;/p&gt; &#xA;&lt;h1&gt;Functions&lt;/h1&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).configure(config)&lt;/h4&gt; &#xA;&lt;p&gt;Override the default configuration with &lt;code&gt;config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).pause()&lt;/h4&gt; &#xA;&lt;p&gt;Globally pause vim-illuminate.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).resume()&lt;/h4&gt; &#xA;&lt;p&gt;Globally resume vim-illuminate.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).toggle()&lt;/h4&gt; &#xA;&lt;p&gt;Globally toggle the pause/resume for vim-illuminate.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).toggle_buf()&lt;/h4&gt; &#xA;&lt;p&gt;Buffer-local toggle of the pause/resume for vim-illuminate.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).pause_buf()&lt;/h4&gt; &#xA;&lt;p&gt;Buffer-local pause of vim-illuminate.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).resume_buf()&lt;/h4&gt; &#xA;&lt;p&gt;Buffer-local resume of vim-illuminate.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).freeze_buf()&lt;/h4&gt; &#xA;&lt;p&gt;Freeze the illumination on the buffer, this won&#39;t clear the highlights.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).unfreeze_buf()&lt;/h4&gt; &#xA;&lt;p&gt;Unfreeze the illumination on the buffer.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).toggle_freeze_buf()&lt;/h4&gt; &#xA;&lt;p&gt;Toggle the frozen state of the buffer.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).invisible_buf()&lt;/h4&gt; &#xA;&lt;p&gt;Turn off the highlighting for the buffer, this won&#39;t stop the engine from running so you can still use &lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).visible_buf()&lt;/h4&gt; &#xA;&lt;p&gt;Turn on the highlighting for the buffer, this is only needed if you&#39;ve previous called &lt;code&gt;require(&#39;illuminate&#39;).invisible_buf()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).toggle_visibility_buf()&lt;/h4&gt; &#xA;&lt;p&gt;Toggle the visibility of highlights in the buffer.&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).goto_next_reference(wrap)&lt;/h4&gt; &#xA;&lt;p&gt;Move the cursor to the closest references after the cursor which it is not currently on. Wraps the buffer if on the last reference.&lt;/p&gt; &#xA;&lt;p&gt;Wraps the references unless &lt;code&gt;wrap&lt;/code&gt; is false (defaults to &lt;strong&gt;&#39;wrapscan&#39;&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).goto_prev_reference(wrap)&lt;/h4&gt; &#xA;&lt;p&gt;Move the cursor to the closest references before the cursor which it is not currently on. Wraps the buffer if on the first reference.&lt;/p&gt; &#xA;&lt;p&gt;Wraps the references unless &lt;code&gt;wrap&lt;/code&gt; is false (defaults to &lt;strong&gt;&#39;wrapscan&#39;&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;require(&#39;illuminate&#39;).textobj_select()&lt;/h4&gt; &#xA;&lt;p&gt;Selects the reference the cursor is currently on for use as a text-object.&lt;/p&gt; &#xA;&lt;h1&gt;Vim Users&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This section is deprecated for Neovim users, Neovim users can use the newer version of the plugin. Neovim users can force this old version of the plugin by adding &lt;code&gt;let g:Illuminate_useDeprecated = 1&lt;/code&gt; to their &lt;code&gt;init.vim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Illuminate will delay before highlighting, this is not lag, it is to avoid the jarring experience of things illuminating too fast. This can be controlled with &lt;code&gt;g:Illuminate_delay&lt;/code&gt; (which is default to 0 milliseconds):&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Delay only works for Vim8 and Neovim.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Time in milliseconds (default 0)&#xA;let g:Illuminate_delay = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Illuminate will by default highlight the word under the cursor to match the behaviour seen in Intellij and VSCode. However, to make it not highlight the word under the cursor, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Don&#39;t highlight word under cursor (default: 1)&#xA;let g:Illuminate_highlightUnderCursor = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default illuminate will highlight all words the cursor passes over, but for many languages, you will only want to highlight certain highlight-groups. You can determine the highlight-group of a symbol under your cursor with &lt;code&gt;:echo synIDattr(synID(line(&#34;.&#34;), col(&#34;.&#34;), 1), &#34;name&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can define which highlight groups you want the illuminating to apply to. This can be done with a dict mapping a filetype to a list of highlight-groups in your vimrc such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:Illuminate_ftHighlightGroups = {&#xA;      \ &#39;vim&#39;: [&#39;vimVar&#39;, &#39;vimString&#39;, &#39;vimLineComment&#39;,&#xA;      \         &#39;vimFuncName&#39;, &#39;vimFunction&#39;, &#39;vimUserFunc&#39;, &#39;vimFunc&#39;]&#xA;      \ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A blacklist of highlight groups can also be setup by adding the suffix &lt;code&gt;:blacklist&lt;/code&gt; to the filetype. However, if the whitelist for that filetype already exists, it will override the blacklist.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:Illuminate_ftHighlightGroups = {&#xA;      \ &#39;vim:blacklist&#39;: [&#39;vimVar&#39;, &#39;vimString&#39;, &#39;vimLineComment&#39;,&#xA;      \         &#39;vimFuncName&#39;, &#39;vimFunction&#39;, &#39;vimUserFunc&#39;, &#39;vimFunc&#39;]&#xA;      \ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;illuminate can also be disabled for various filetypes using the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:Illuminate_ftblacklist = [&#39;nerdtree&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can enable it only for certain filetypes with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:Illuminate_ftwhitelist = [&#39;vim&#39;, &#39;sh&#39;, &#39;python&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the highlighting will be done with the highlight-group &lt;code&gt;CursorLine&lt;/code&gt; since that is in my opinion the nicest. It can however be overridden using the following (use standard Vim highlighting syntax): Note: It must be in an autocmd to get around a weird Neovim behaviour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;augroup illuminate_augroup&#xA;    autocmd!&#xA;    autocmd VimEnter * hi link illuminatedWord CursorLine&#xA;augroup END&#xA;&#xA;augroup illuminate_augroup&#xA;    autocmd!&#xA;    autocmd VimEnter * hi illuminatedWord cterm=underline gui=underline&#xA;augroup END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lastly, you can also specify a specific highlight for the word under the cursor so it differs from all other matches using the following higlight group:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;augroup illuminate_augroup&#xA;    autocmd!&#xA;    autocmd VimEnter * hi illuminatedCurWord cterm=italic gui=italic&#xA;augroup END&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>tarantool/tarantool</title>
    <updated>2023-09-17T01:53:43Z</updated>
    <id>tag:github.com,2023-09-17:/tarantool/tarantool</id>
    <link href="https://github.com/tarantool/tarantool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get your data in RAM. Get compute close to data. Enjoy the performance.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tarantool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tarantool/tarantool/actions&#34;&gt;&lt;img src=&#34;https://github.com/tarantool/tarantool/workflows/release/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/tarantool/tarantool?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/tarantool/tarantool/badge.svg?branch=master&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss-fuzz.com/coverage-report/job/libfuzzer_asan_tarantool/latest&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/tarantool.svg?sanitize=true&#34; alt=&#34;OSS Fuzz&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://telegram.me/tarantool&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-join%20chat-blue.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tarantool/tarantool/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/tarantool/tarantool&#34; alt=&#34;GitHub Discussions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/tarantool&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-tarantool-orange.svg?sanitize=true&#34; alt=&#34;Stack Overflow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tarantool.io/en/&#34;&gt;Tarantool&lt;/a&gt; is an in-memory computing platform consisting of a database and an application server.&lt;/p&gt; &#xA;&lt;p&gt;It is distributed under &lt;a href=&#34;https://raw.githubusercontent.com/tarantool/tarantool/master/LICENSE&#34;&gt;BSD 2-Clause&lt;/a&gt; terms.&lt;/p&gt; &#xA;&lt;p&gt;Key features of the application server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Heavily optimized Lua interpreter with incredibly fast tracing JIT compiler, based on LuaJIT 2.1.&lt;/li&gt; &#xA; &lt;li&gt;Cooperative multitasking, non-blocking IO.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tarantool/queue&#34;&gt;Persistent queues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tarantool/vshard&#34;&gt;Sharding&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tarantool/cartridge&#34;&gt;Cluster and application management framework&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Access to external databases such as &lt;a href=&#34;https://github.com/tarantool/mysql&#34;&gt;MySQL&lt;/a&gt; and &lt;a href=&#34;https://github.com/tarantool/pg&#34;&gt;PostgreSQL&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A rich set of built-in and standalone &lt;a href=&#34;https://www.tarantool.io/en/download/rocks&#34;&gt;modules&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Key features of the database:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MessagePack data format and MessagePack based client-server protocol.&lt;/li&gt; &#xA; &lt;li&gt;Two data engines: 100% in-memory with complete WAL-based persistence and an own implementation of LSM-tree, to use with large data sets.&lt;/li&gt; &#xA; &lt;li&gt;Multiple index types: HASH, TREE, RTREE, BITSET.&lt;/li&gt; &#xA; &lt;li&gt;Document oriented JSON path indexes.&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous master-master replication.&lt;/li&gt; &#xA; &lt;li&gt;Synchronous quorum-based replication.&lt;/li&gt; &#xA; &lt;li&gt;RAFT-based automatic leader election for the single-leader configuration.&lt;/li&gt; &#xA; &lt;li&gt;Authentication and access control.&lt;/li&gt; &#xA; &lt;li&gt;ANSI SQL, including views, joins, referential and check constraints.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tarantool.io/en/download/connectors&#34;&gt;Connectors&lt;/a&gt; for many programming languages.&lt;/li&gt; &#xA; &lt;li&gt;The database is a C extension of the application server and can be turned off.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported platforms are Linux (x86_64, aarch64), Mac OS X (x86_64, M1), FreeBSD (x86_64).&lt;/p&gt; &#xA;&lt;p&gt;Tarantool is ideal for data-enriched components of scalable Web architecture: queue servers, caches, stateful Web applications.&lt;/p&gt; &#xA;&lt;p&gt;To download and install Tarantool as a binary package for your OS or using Docker, please see the &lt;a href=&#34;https://www.tarantool.io/en/download/&#34;&gt;download instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build Tarantool from source, see detailed &lt;a href=&#34;https://www.tarantool.io/en/doc/latest/dev_guide/building_from_source/&#34;&gt;instructions&lt;/a&gt; in the Tarantool documentation.&lt;/p&gt; &#xA;&lt;p&gt;To find modules, connectors and tools for Tarantool, check out our &lt;a href=&#34;https://github.com/tarantool/awesome-tarantool/&#34;&gt;Awesome Tarantool&lt;/a&gt; list.&lt;/p&gt; &#xA;&lt;p&gt;Please report bugs to our &lt;a href=&#34;https://github.com/tarantool/tarantool/issues&#34;&gt;issue tracker&lt;/a&gt;. We also warmly welcome your feedback on the &lt;a href=&#34;https://github.com/tarantool/tarantool/discussions&#34;&gt;discussions&lt;/a&gt; page and questions on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/tarantool&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We accept contributions via pull requests. Check out our &lt;a href=&#34;https://raw.githubusercontent.com/tarantool/tarantool/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for your interest in Tarantool!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lite-xl/lite-xl</title>
    <updated>2023-09-17T01:53:43Z</updated>
    <id>tag:github.com,2023-09-17:/lite-xl/lite-xl</id>
    <link href="https://github.com/lite-xl/lite-xl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight text editor written in Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lite XL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lite-xl/lite-xl/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/lite-xl/lite-xl/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/RWzqC3nx7K&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/847122429742809208?label=discord&amp;amp;logo=discord&#34; alt=&#34;Discord Badge Image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/433545/111063905-66943980-84b1-11eb-9040-3876f1133b20.png&#34; alt=&#34;screenshot-dark&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A lightweight text editor written in Lua, adapted from &lt;a href=&#34;https://github.com/rxi/lite&#34;&gt;lite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/lite-xl/lite-xl/releases/latest&#34;&gt;Get Lite XL&lt;/a&gt;&lt;/strong&gt; — Download for Windows, Linux and Mac OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/lite-xl/lite-xl-plugins&#34;&gt;Get plugins&lt;/a&gt;&lt;/strong&gt; — Add additional functionality, adapted for Lite XL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/lite-xl/lite-xl-colors&#34;&gt;Get color themes&lt;/a&gt;&lt;/strong&gt; — Add additional colors themes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://lite-xl.com&#34;&gt;website&lt;/a&gt; for the user and developer documentation, including &lt;a href=&#34;https://lite-xl.com/en/documentation/build&#34;&gt;build&lt;/a&gt; instructions details. A quick build guide is described below.&lt;/p&gt; &#xA;&lt;p&gt;Lite XL has support for high DPI display on Windows and Linux and, since 1.16.7 release, it supports &lt;strong&gt;retina displays&lt;/strong&gt; on macOS.&lt;/p&gt; &#xA;&lt;p&gt;Please note that Lite XL is compatible with lite for most plugins and all color themes. We provide a separate lite-xl-plugins repository for Lite XL, because in some cases some adaptations may be needed to make them work better with Lite XL. The repository with modified plugins is &lt;a href=&#34;https://github.com/lite-xl/lite-xl-plugins&#34;&gt;https://github.com/lite-xl/lite-xl-plugins&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The changes and differences between Lite XL and rxi/lite are listed in the &lt;a href=&#34;https://github.com/lite-xl/lite-xl/raw/master/changelog.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Lite XL is derived from &lt;a href=&#34;https://github.com/rxi/lite&#34;&gt;lite&lt;/a&gt;. It is a lightweight text editor written mostly in Lua — it aims to provide something practical, pretty, &lt;em&gt;small&lt;/em&gt; and fast easy to modify and extend, or to use without doing either.&lt;/p&gt; &#xA;&lt;p&gt;The aim of Lite XL compared to lite is to be more user friendly, improve the quality of font rendering, and reduce CPU usage.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Additional functionality can be added through plugins which are available in the &lt;a href=&#34;https://github.com/rxi/lite-plugins&#34;&gt;plugins repository&lt;/a&gt; or in the &lt;a href=&#34;https://github.com/lite-xl/lite-xl-plugins&#34;&gt;Lite XL plugins repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additional color themes can be found in the &lt;a href=&#34;https://github.com/lite-xl/lite-xl-colors&#34;&gt;colors repository&lt;/a&gt;. These color themes are bundled with all releases of Lite XL by default.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Build Guide&lt;/h2&gt; &#xA;&lt;p&gt;If you compile Lite XL yourself, it is recommended to use the script &lt;code&gt;build-packages.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash build-packages.sh -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will run Meson and create a tar compressed archive with the application or, for Windows, a zip file. Lite XL can be easily installed by unpacking the archive in any directory of your choice.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise the following is an example of basic commands if you want to customize the build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;meson setup --buildtype=release --prefix &amp;lt;prefix&amp;gt; build&#xA;meson compile -C build&#xA;DESTDIR=&#34;$(pwd)/lite-xl&#34; meson install --skip-subprojects -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt; might be one of &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;/usr&lt;/code&gt; or &lt;code&gt;/opt&lt;/code&gt;, the default is &lt;code&gt;/&lt;/code&gt;. To build a bundle application on macOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;meson setup --buildtype=release --Dbundle=true --prefix / build&#xA;meson compile -C build&#xA;DESTDIR=&#34;$(pwd)/Lite XL.app&#34; meson install --skip-subprojects -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the package is relocatable to any prefix and the option prefix affects only the place where the application is actually installed.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Prebuilt&lt;/h2&gt; &#xA;&lt;p&gt;Head over to &lt;a href=&#34;https://github.com/lite-xl/lite-xl/releases&#34;&gt;releases&lt;/a&gt; and download the version for your operating system.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Unzip the file and &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;lite-xl&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tar -xzf &amp;lt;file&amp;gt;&#xA;cd lite-xl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run lite-xl without installing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./lite-xl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install lite-xl copy files over into appropriate directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf  $HOME/.local/share/lite-xl $HOME/.local/bin/lite-xl&#xA;mkdir -p $HOME/.local/bin &amp;amp;&amp;amp; cp lite-xl $HOME/.local/bin/&#xA;mkdir -p $HOME/.local/share/lite-xl &amp;amp;&amp;amp; cp -r data/* $HOME/.local/share/lite-xl/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is not in PATH:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo -e &#39;export PATH=$PATH:$HOME/.local/bin&#39; &amp;gt;&amp;gt; $HOME/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the icon to show up in app launcher:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xdg-desktop-menu forceupdate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may need to logout and login again to see icon in app launcher.&lt;/p&gt; &#xA;&lt;p&gt;To uninstall just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -f $HOME/.local/bin/lite-xl&#xA;rm -rf $HOME/.local/share/icons/hicolor/scalable/apps/lite-xl.svg \&#xA;          $HOME/.local/share/applications/com.lite_xl.LiteXL.desktop \&#xA;          $HOME/.local/share/metainfo/com.lite_xl.LiteXL.appdata.xml \&#xA;          $HOME/.local/share/lite-xl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Any additional functionality that can be added through a plugin should be done as a plugin, after which a pull request to the &lt;a href=&#34;https://github.com/lite-xl/lite-xl-plugins&#34;&gt;Lite XL plugins repository&lt;/a&gt; can be made.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests to improve or modify the editor itself are welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;This project is free software; you can redistribute it and/or modify it under the terms of the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/lite-xl/lite-xl/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/lite-xl/lite-xl/master/licenses/licenses.md&#34;&gt;licenses&lt;/a&gt; file for details on licenses used by the required dependencies.&lt;/p&gt;</summary>
  </entry>
</feed>