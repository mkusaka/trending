<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-10T02:14:57Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SpaceVim/SpaceVim</title>
    <updated>2022-07-10T02:14:57Z</updated>
    <id>tag:github.com,2022-07-10:/SpaceVim/SpaceVim</id>
    <link href="https://github.com/SpaceVim/SpaceVim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community-driven modular vim/neovim distribution - The ultimate vimrc&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://spacevim.org/&#34;&gt; &lt;img src=&#34;https://spacevim.org/logo.png&#34; width=&#34;600&#34; alt=&#34;SpaceVim&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.element.io/#/room/#spacevim:matrix.org&#34;&gt;Chat&lt;/a&gt; | &lt;a href=&#34;https://spacevim.org/quick-start-guide/&#34;&gt;Quick Start Guide&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/SpaceVim&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SpaceVim/SpaceVim/actions/workflows/check.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/SpaceVim/SpaceVim/test&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/SpaceVim/SpaceVim&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/SpaceVim/SpaceVim.svg?sanitize=true&#34; alt=&#34;Codecov coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://spacevim.org/SpaceVim-release-v2.0.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Release-2.0.0-8700FF.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SpaceVim/SpaceVim/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;GPLv3 License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/spacevim/spacevim&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/spacevim/spacevim&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13142418/176910121-8e7ca78f-8434-4ac7-9b02-08c4d15f8ad9.png&#34; alt=&#34;welcome page&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;SpaceVim is a community-driven modular Vim/Neovim distribution. It manages collections of plugins in layers, which help to collect related plugins together to provide IDE-like features.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/SpaceVim/SpaceVim/wiki/Following-HEAD&#34;&gt;following-HEAD&lt;/a&gt; page for what happened since last release.&lt;/p&gt; &#xA;&lt;h2&gt;Support SpaceVim&lt;/h2&gt; &#xA;&lt;p&gt;This project wouldn&#39;t exist without all the people who &lt;a href=&#34;https://raw.githubusercontent.com/SpaceVim/SpaceVim/master/CONTRIBUTING.md&#34;&gt;contributed&lt;/a&gt;, We are thankful for any contributions from the community.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SpaceVim/SpaceVim/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/spacevim/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you use SpaceVim in your daily work and feel that it has made your life easier, please consider checking out &lt;a href=&#34;https://spacevim.org/sponsors/&#34;&gt;sponsors page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits &amp;amp; Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gabirel/Hack-SpaceVim&#34;&gt;Hack-SpaceVim&lt;/a&gt; by &lt;a href=&#34;https://github.com/Gabirel&#34;&gt;@Gabirel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://everettjf.gitbooks.io/spacevimtutorial/content/&#34;&gt;SpaceVimTutorial&lt;/a&gt; by &lt;a href=&#34;https://github.com/everettjf&#34;&gt;@everettjf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Jackiexiao/10-minutes-to-SpaceVim&#34;&gt;10-minutes-to-SpaceVim&lt;/a&gt; by &lt;a href=&#34;https://github.com/Jackiexiao&#34;&gt;@Jackiexiao&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=iXPS_NHLj9k&#34;&gt;A First Look At SpaceVim&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCVls1GmFKf6WlTraIb_IaJg&#34;&gt;@DistroTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=3xB501CJDB8&#34;&gt;Getting Started With SpaceVim&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCfU_sitghekwveLh6yM_xuA&#34;&gt;FOSS King&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/vimdoc&#34;&gt;vimdoc&lt;/a&gt; generate doc file for SpaceVim&lt;/li&gt; &#xA; &lt;li&gt;Authors of all the plugins used in SpaceVim.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim:set nowrap: --&gt;</summary>
  </entry>
  <entry>
    <title>L3MON4D3/LuaSnip</title>
    <updated>2022-07-10T02:14:57Z</updated>
    <id>tag:github.com,2022-07-10:/L3MON4D3/LuaSnip</id>
    <link href="https://github.com/L3MON4D3/LuaSnip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snippet Engine for Neovim written in Lua.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/%23luasnip:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/luasnip:matrix.org?label=Matrix&amp;amp;logo=matrix&#34; alt=&#34;LuaSnip&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LuaSnip&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/41961280/122515860-5179fa00-d00e-11eb-91f7-331893f61fbf.mp4&#34;&gt;https://user-images.githubusercontent.com/41961280/122515860-5179fa00-d00e-11eb-91f7-331893f61fbf.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tabstops&lt;/li&gt; &#xA; &lt;li&gt;Text-Transformations using Lua functions&lt;/li&gt; &#xA; &lt;li&gt;Conditional Expansion&lt;/li&gt; &#xA; &lt;li&gt;Defining nested Snippets&lt;/li&gt; &#xA; &lt;li&gt;Filetype-specific Snippets&lt;/li&gt; &#xA; &lt;li&gt;Choices&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Snippet creation&lt;/li&gt; &#xA; &lt;li&gt;Regex-Trigger&lt;/li&gt; &#xA; &lt;li&gt;Autotriggered Snippets&lt;/li&gt; &#xA; &lt;li&gt;Easy Postfix Snippets&lt;/li&gt; &#xA; &lt;li&gt;Fast&lt;/li&gt; &#xA; &lt;li&gt;Parse &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specification#snippet_syntax&#34;&gt;LSP-Style&lt;/a&gt; Snippets either directly in lua, as a vscode package or a snipmate snippet collection.&lt;/li&gt; &#xA; &lt;li&gt;Expand LSP-Snippets with &lt;a href=&#34;https://github.com/hrsh7th/nvim-compe&#34;&gt;nvim-compe&lt;/a&gt; (or its&#39; successor, &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; (requires &lt;a href=&#34;https://github.com/saadparwaiz1/cmp_luasnip&#34;&gt;cmp_luasnip&lt;/a&gt;))&lt;/li&gt; &#xA; &lt;li&gt;Snippet history (jump back into older snippets)&lt;/li&gt; &#xA; &lt;li&gt;Resolve filetype at the cursor using Treesitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Drawbacks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Snippets that make use of the entire functionality of this plugin have to be defined in Lua (but 95% of snippets can be written in lsp-syntax).&lt;/li&gt; &#xA; &lt;li&gt;The LSP-parser does not support Regex-Transformations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Neovim &amp;gt;= 0.5 (extmarks)&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Ie. With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Keymaps&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; press &amp;lt;Tab&amp;gt; to expand or jump in a snippet. These can also be mapped separately&#xA;&#34; via &amp;lt;Plug&amp;gt;luasnip-expand-snippet and &amp;lt;Plug&amp;gt;luasnip-jump-next.&#xA;imap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;Tab&amp;gt; luasnip#expand_or_jumpable() ? &#39;&amp;lt;Plug&amp;gt;luasnip-expand-or-jump&#39; : &#39;&amp;lt;Tab&amp;gt;&#39; &#xA;&#34; -1 for jumping backwards.&#xA;inoremap &amp;lt;silent&amp;gt; &amp;lt;S-Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require&#39;luasnip&#39;.jump(-1)&amp;lt;Cr&amp;gt;&#xA;&#xA;snoremap &amp;lt;silent&amp;gt; &amp;lt;Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;luasnip&#39;).jump(1)&amp;lt;Cr&amp;gt;&#xA;snoremap &amp;lt;silent&amp;gt; &amp;lt;S-Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;luasnip&#39;).jump(-1)&amp;lt;Cr&amp;gt;&#xA;&#xA;&#34; For changing choices in choiceNodes (not strictly necessary for a basic setup).&#xA;imap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;C-E&amp;gt; luasnip#choice_active() ? &#39;&amp;lt;Plug&amp;gt;luasnip-next-choice&#39; : &#39;&amp;lt;C-E&amp;gt;&#39;&#xA;smap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;C-E&amp;gt; luasnip#choice_active() ? &#39;&amp;lt;Plug&amp;gt;luasnip-next-choice&#39; : &#39;&amp;lt;C-E&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-cmp&lt;/code&gt;&#39;s wiki also contains &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki/Example-mappings#luasnip&#34;&gt;an example&lt;/a&gt; for setting up a super-tab-like mapping.&lt;/p&gt; &#xA;&lt;h2&gt;Add Snippets&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#loaders&#34;&gt;the doc&lt;/a&gt; for a general explanation of the loaders and their benefits. The following list serves only as a short overview.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vscode-like&lt;/strong&gt;: To use existing vs-code style snippets from a plugin (eg. &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets&#34;&gt;rafamadriz/friendly-snippets&lt;/a&gt;) simply install the plugin and then add&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;luasnip.loaders.from_vscode&#34;).lazy_load()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;somewhere in your nvim-config. LuaSnip will then load the snippets contained in the plugin on startup. You can also easily &lt;strong&gt;load your own custom vscode style snippets&lt;/strong&gt; by passing the path to the custom snippet-directory to the load function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- load snippets from path/of/your/nvim/config/my-cool-snippets&#xA;require(&#34;luasnip.loaders.from_vscode&#34;).lazy_load({ paths = { &#34;./my-cool-snippets&#34; } })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more info on the vscode-loader, check the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/b5a72f1fbde545be101fcd10b70bcd51ea4367de/Examples/snippets.lua#L501&#34;&gt;examples&lt;/a&gt; or &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#loaders&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Snipmate-like&lt;/strong&gt;: Very similar to Vscode-packages: install a plugin that provides snippets and call the &lt;code&gt;load&lt;/code&gt;-function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;luasnip.loaders.from_snipmate&#34;).lazy_load()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The snipmate format is very simple, so adding &lt;strong&gt;custom snippets&lt;/strong&gt; only requires a few steps:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;add a directory beside your &lt;code&gt;init.vim&lt;/code&gt; (or any other place that is in your &lt;code&gt;runtimepath&lt;/code&gt;) named &lt;code&gt;snippets&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;inside that directory, create files named &lt;code&gt;&amp;lt;filetype&amp;gt;.snippets&lt;/code&gt; and add snippets for the given filetype in it (for inspiration, check &lt;a href=&#34;https://github.com/honza/vim-snippets/tree/master/snippets&#34;&gt;honza/vim-snippets&lt;/a&gt;). &lt;pre&gt;&lt;code class=&#34;language-snipmate&#34;&gt;# comment&#xA;snippet &amp;lt;trigger&amp;gt; &amp;lt;description&amp;gt;&#xA;&amp;lt;snippet-body&amp;gt;&#xA;snippet if C-style if&#xA;if ($1)&#xA;&#x9;$0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Again, there are some &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/b5a72f1fbde545be101fcd10b70bcd51ea4367de/Examples/snippets.lua#L517&#34;&gt;examples&lt;/a&gt; and &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#snipmate&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;: Add the snippets by calling &lt;code&gt;require(&#34;luasnip&#34;).add_snippets(filetype, snippets)&lt;/code&gt;. An example for this can be found &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/Examples/snippets.lua#L190&#34;&gt;here&lt;/a&gt;.&lt;br&gt; This can also be done much cleaner, with all the benefits that come with using a loader, by using the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#lua&#34;&gt;loader for lua&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s also a repository collecting snippets for various languages, &lt;a href=&#34;https://github.com/molleweide/LuaSnip-snippets.nvim&#34;&gt;molleweide/LuaSnip-snippets.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docs and Examples&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md&#34;&gt;&lt;code&gt;DOC.md&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;:help luasnip&lt;/code&gt;) for a short overview and in-depth explanations of the different nodes and available API.&lt;br&gt; I highly recommend looking into (or better yet, &lt;code&gt;:luafile&lt;/code&gt;ing) &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/Examples/snippets.lua&#34;&gt;&lt;code&gt;Examples/snippets.lua&lt;/code&gt;&lt;/a&gt; before writing snippets in lua.&lt;br&gt; The &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/wiki&#34;&gt;Wiki&lt;/a&gt; contains some pretty useful extensions to Luasnip.&lt;/p&gt; &#xA;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;history&lt;/code&gt;: If true, Snippets that were exited can still be jumped back into. As Snippets are not removed when their text is deleted, they have to be removed manually via &lt;code&gt;LuasnipUnlinkCurrent&lt;/code&gt; if &lt;code&gt;delete_check_events&lt;/code&gt; is not enabled (set to eg. &lt;code&gt;&#39;TextChanged&#39;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;update_events&lt;/code&gt;: Choose which events trigger an update of the active nodes&#39; dependents. Default is just &lt;code&gt;&#39;InsertLeave&#39;&lt;/code&gt;, &lt;code&gt;&#39;TextChanged,TextChangedI&#39;&lt;/code&gt; would update on every change.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;region_check_events&lt;/code&gt;: Events on which to leave the current snippet if the cursor is outside its&#39; &#39;region&#39;. Disabled by default, &lt;code&gt;&#39;CursorMoved&#39;&lt;/code&gt;, &lt;code&gt;&#39;CursorHold&#39;&lt;/code&gt; or &lt;code&gt;&#39;InsertEnter&#39;&lt;/code&gt; seem reasonable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delete_check_events&lt;/code&gt;: When to check if the current snippet was deleted, and if so, remove it from the history. Off by default, &lt;code&gt;&#39;TextChanged&#39;&lt;/code&gt; (perhaps &lt;code&gt;&#39;InsertLeave&#39;&lt;/code&gt;, to react to changes done in Insert mode) should work just fine (alternatively, this can also be mapped using &lt;code&gt;&amp;lt;Plug&amp;gt;luasnip-delete-check&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;store_selection_keys&lt;/code&gt;: Mapping for populating &lt;code&gt;TM_SELECTED_TEXT&lt;/code&gt; and related variables (not set by default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enable_autosnippets&lt;/code&gt;: Autosnippets are disabled by default to minimize performance penalty if unused. Set to &lt;code&gt;true&lt;/code&gt; to enable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext_opts&lt;/code&gt;: Additional options passed to extmarks. Can be used to add passive/active highlight on a per-node-basis (more info in DOC.md)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parser_nested_assembler&lt;/code&gt;: Override the default behaviour of inserting a &lt;code&gt;choiceNode&lt;/code&gt; containing the nested snippet and an empty &lt;code&gt;insertNode&lt;/code&gt; for nested placeholders (&lt;code&gt;&#34;${1: ${2: this is nested}}&#34;&lt;/code&gt;). For an example (behaviour more similar to vscode), check &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/wiki/Nice-Configs#imitate-vscodes-behaviour-for-nested-placeholders&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ft_func&lt;/code&gt;: Source of possible filetypes for snippets. Defaults to a function, which returns &lt;code&gt;vim.split(vim.bo.filetype, &#34;.&#34;, true)&lt;/code&gt;, but check &lt;a href=&#34;https://raw.githubusercontent.com/L3MON4D3/LuaSnip/master/lua/luasnip/extras/filetype_functions.lua&#34;&gt;filetype_functions&lt;/a&gt; or &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#filetype_functions&#34;&gt;the docs&lt;/a&gt; for more options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;load_ft_func&lt;/code&gt;: Function to determine which filetypes belong to a given buffer (used for &lt;code&gt;lazy_loading&lt;/code&gt;). &lt;code&gt;fn(bufnr) -&amp;gt; filetypes (string[])&lt;/code&gt;. Again, there are some examples in &lt;a href=&#34;https://raw.githubusercontent.com/L3MON4D3/LuaSnip/master/lua/luasnip/extras/filetype_functions.lua&#34;&gt;filetype_functions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;snip_env&lt;/code&gt;: The global environment will be extended with this table in some places, eg. in files loaded by the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#lua-snippets-loader&#34;&gt;lua-loader&lt;/a&gt;.&lt;br&gt; Setting &lt;code&gt;snip_env&lt;/code&gt; to &lt;code&gt;{ some_global = &#34;a value&#34; }&lt;/code&gt; will add the global variable &lt;code&gt;some_global&lt;/code&gt; while evaluating these files. If you mind the (probably) large number of generated warnings, consider adding the keys set here to the globals recognized by lua-language-server or add &lt;code&gt;---@diagnostic disable: undefined-global&lt;/code&gt; somewhere in the affected files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/hrsh7th/vim-vsnip/&#34;&gt;vsnip.vim&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tjdevries/config_manager</title>
    <updated>2022-07-10T02:14:57Z</updated>
    <id>tag:github.com,2022-07-10:/tjdevries/config_manager</id>
    <link href="https://github.com/tjdevries/config_manager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My configuration files and tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;config_manager&lt;/h1&gt; &#xA;&lt;p&gt;This is TJ&#39;s configuration repo. Feel free to use whatever you would like from it! It&#39;d be great if you mentioned where it came from if you think it&#39;s cool.&lt;/p&gt; &#xA;&lt;p&gt;If you like what I&#39;m doing, consider supporting me by clicking the heart button above!&lt;/p&gt; &#xA;&lt;p&gt;Major areas include:&lt;/p&gt; &#xA;&lt;h2&gt;xdg_config&lt;/h2&gt; &#xA;&lt;p&gt;This area contains configuration I want to share between machines that will go to &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; (generally, &lt;code&gt;~/.config&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Subdirectories include:&lt;/p&gt; &#xA;&lt;h3&gt;Neovim&lt;/h3&gt; &#xA;&lt;p&gt;Check the &lt;code&gt;nvim&lt;/code&gt; folder for configuration. For more instruction, see the README there.&lt;/p&gt; &#xA;&lt;p&gt;Ignore the vim folder, it&#39;s out-of-date.&lt;/p&gt;</summary>
  </entry>
</feed>