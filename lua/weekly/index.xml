<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T02:14:22Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>goolord/alpha-nvim</title>
    <updated>2022-06-03T02:14:22Z</updated>
    <id>tag:github.com,2022-06-03:/goolord/alpha-nvim</id>
    <link href="https://github.com/goolord/alpha-nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a lua powered greeter like vim-startify / dashboard-nvim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;α alpha-nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;alpha&lt;/code&gt; is a fast and fully customizable greeter for neovim.&lt;/p&gt; &#xA;&lt;p&gt;share or snipe some custom themes @ &lt;a href=&#34;https://github.com/goolord/alpha-nvim/discussions/16&#34;&gt;https://github.com/goolord/alpha-nvim/discussions/16&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h4&gt;vim-startify theme&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24906808/133367667-0f73e9e1-ea75-46d1-8e1b-ff0ecfeafeb1.png&#34; alt=&#34;glamor shot&#34;&gt; With packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;goolord/alpha-nvim&#39;,&#xA;    requires = { &#39;kyazdani42/nvim-web-devicons&#39; },&#xA;    config = function ()&#xA;        require&#39;alpha&#39;.setup(require&#39;alpha.themes.startify&#39;.config)&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;..or using paq:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    &#34;goolord/alpha-nvim&#34;;&#xA;    &#34;kyazdani42/nvim-web-devicons&#34;;&#xA;}&#xA;require&#39;alpha&#39;.setup(require&#39;alpha.themes.startify&#39;.config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;dashboard-nvim theme&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24906808/132604236-4f20adc4-706c-49b4-b473-ebfd6a7f0784.png&#34; alt=&#34;glamor shot&#34;&gt; With packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;goolord/alpha-nvim&#39;,&#xA;    config = function ()&#xA;        require&#39;alpha&#39;.setup(require&#39;alpha.themes.dashboard&#39;.config)&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;..or using paq:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    &#34;goolord/alpha-nvim&#34;;&#xA;    &#34;kyazdani42/nvim-web-devicons&#34;;&#xA;}&#xA;require&#39;alpha&#39;.setup(require&#39;alpha.themes.dashboard&#39;.config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you want sessions, see&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shatur/neovim-session-manager&#34;&gt;https://github.com/Shatur/neovim-session-manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;:h :mks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;this theme makes some assumptions about your default keybindings to customize the buttons, see :h alpha-example&lt;/p&gt; &#xA;&lt;h2&gt;Elevator pitch&lt;/h2&gt; &#xA;&lt;p&gt;alpha is really a general purpose neovim ui library with some conveniences for writing a greeter ui. it has a functional, data-oriented api design. themes are expressed entirely as data, which is what makes alpha &#34;fully customizable&#34;. alpha is also the fastest greeter I&#39;ve benchmarked (which is why I daily drive it myself!).&lt;/p&gt; &#xA;&lt;h2&gt;Profiling Results&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24906808/131830001-31523c86-fee2-4f90-b23d-4bd1e152a385.png&#34; alt=&#34;benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;using &lt;a href=&#34;https://github.com/lewis6991/impatient.nvim&#34;&gt;https://github.com/lewis6991/impatient.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;only config! doesn&#39;t measure drawing, some startup plugins won&#39;t measure drawing either&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;https://github.com/glepnir/dashboard-nvim&lt;/a&gt; - inspiration, code reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-startify&#34;&gt;https://github.com/mhinz/vim-startify&lt;/a&gt; - inspiration&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ThePrimeagen/harpoon</title>
    <updated>2022-06-03T02:14:22Z</updated>
    <id>tag:github.com,2022-06-03:/ThePrimeagen/harpoon</id>
    <link href="https://github.com/ThePrimeagen/harpoon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Harpoon&lt;/h1&gt; &#xA; &lt;h5&gt;Getting you where you want with the fewest keystrokes.&lt;/h5&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://www.lua.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://neovim.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim%200.5+-green.svg?style=for-the-badge&amp;amp;logo=neovim&#34; alt=&#34;Neovim&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ThePrimeagen/harpoon/master/harpoon.png&#34; alt=&#34;Harpoon&#34;&gt; -- image provided by &lt;strong&gt;Bob Rust&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⇁ WIP&lt;/h2&gt; &#xA;&lt;p&gt;This is not fully baked, though used by several people. If you experience any issues, see some improvement you think would be amazing, or just have some feedback for harpoon (or me), make an issue!&lt;/p&gt; &#xA;&lt;h2&gt;⇁ The Problems:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You&#39;re working on a codebase. medium, large, tiny, whatever. You find yourself frequenting a small set of files and you are tired of using a fuzzy finder, &lt;code&gt;:bnext&lt;/code&gt; &amp;amp; &lt;code&gt;:bprev&lt;/code&gt; are getting too repetitive, alternate file doesn&#39;t quite cut it, etc etc.&lt;/li&gt; &#xA; &lt;li&gt;You want to execute some project specific commands or have any number of persistent terminals that can be easily navigated to.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;⇁ The Solutions:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The ability to specify, or on the fly, mark and create persisting key strokes to go to the files you want.&lt;/li&gt; &#xA; &lt;li&gt;Unlimited terminals and navigation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;⇁ Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim 0.5.0+ required&lt;/li&gt; &#xA; &lt;li&gt;install using your favorite plugin manager (&lt;code&gt;vim-plug&lt;/code&gt; in this example)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39; &#34; don&#39;t forget to add this one if you don&#39;t have it yet!&#xA;Plug &#39;ThePrimeagen/harpoon&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⇁ Harpooning&lt;/h2&gt; &#xA;&lt;p&gt;here we&#39;ll explain how to wield the power of the harpoon:&lt;/p&gt; &#xA;&lt;h3&gt;Marks&lt;/h3&gt; &#xA;&lt;p&gt;you mark files you want to revisit later on&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.mark&#34;).add_file()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File Navigation&lt;/h3&gt; &#xA;&lt;p&gt;view all project marks with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.ui&#34;).toggle_quick_menu()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can go up and down the list, enter, delete or reorder. &lt;code&gt;q&lt;/code&gt; and &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; exit and save the menu&lt;/p&gt; &#xA;&lt;p&gt;you also can switch to any mark without bringing up the menu, use the below with the desired mark index&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.ui&#34;).nav_file(3)                  -- navigates to file 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can also cycle the list in both directions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.ui&#34;).nav_next()                   -- navigates to next mark&#xA;:lua require(&#34;harpoon.ui&#34;).nav_prev()                   -- navigates to previous mark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Terminal Navigation&lt;/h3&gt; &#xA;&lt;p&gt;this works like file navigation except that if there is no terminal at the specified index a new terminal is created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.term&#34;).gotoTerminal(1)             -- navigates to term 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands to Terminals&lt;/h3&gt; &#xA;&lt;p&gt;commands can be sent to any terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.term&#34;).sendCommand(1, &#34;ls -La&#34;)    -- sends ls -La to tmux window 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;further more commands can be stored for later quick&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#39;harpoon.cmd-ui&#39;).toggle_quick_menu()       -- shows the commands menu&#xA;lua require(&#34;harpoon.term&#34;).sendCommand(1, 1)           -- sends command 1 to term 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tmux Support&lt;/h3&gt; &#xA;&lt;p&gt;tmux is supported out of the box and can be used as a drop-in replacement to normal terminals by simply switching &lt;code&gt;&#39;term&#39; with &#39;tmux&#39;&lt;/code&gt; like so&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.tmux&#34;).gotoTerminal(1)             -- goes to the first tmux window&#xA;lua require(&#34;harpoon.tmux&#34;).sendCommand(1, &#34;ls -La&#34;)    -- sends ls -La to tmux window 1&#xA;lua require(&#34;harpoon.tmux&#34;).sendCommand(1, 1)           -- sends command 1 to tmux window 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sendCommand&lt;/code&gt; and &lt;code&gt;goToTerminal&lt;/code&gt; also accept any valid &lt;a href=&#34;https://man7.org/linux/man-pages/man1/tmux.1.html#COMMANDS&#34;&gt;tmux pane identifier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.tmux&#34;).gotoTerminal(&#34;{down-of}&#34;)   -- focus the pane directly below&#xA;lua require(&#34;harpoon.tmux&#34;).sendCommand(&#34;%3&#34;, &#34;ls&#34;)     -- send a command to the pane with id &#39;%3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you switch to a tmux window you can always switch back to neovim, this is a little bash script that will switch to the window which is running neovim.&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;code&gt;tmux.conf&lt;/code&gt; (or anywhere you have keybinds), add this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bind-key -r G run-shell &#34;path-to-harpoon/harpoon/scripts/tmux/switch-back-to-nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Telescope Support&lt;/h3&gt; &#xA;&lt;p&gt;1st register harpoon as a telescope extension&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;telescope&#34;).load_extension(&#39;harpoon&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;currently only marks are supported in telescope&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Telescope harpoon marks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⇁ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;if configuring harpoon is desired it must be done through harpoons setup function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;harpoon&#34;).setup({ ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Global Settings&lt;/h3&gt; &#xA;&lt;p&gt;here are all the available global settings with their default values&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;global_settings = {&#xA;    -- sets the marks upon calling `toggle` on the ui, instead of require `:w`.&#xA;    save_on_toggle = false,&#xA;&#xA;    -- saves the harpoon file upon every change. disabling is unrecommended.&#xA;    save_on_change = true,&#xA;&#xA;    -- sets harpoon to run the command immediately as it&#39;s passed to the terminal when calling `sendCommand`.&#xA;    enter_on_sendcmd = false,&#xA;&#xA;    -- closes any tmux windows harpoon that harpoon creates when you close Neovim.&#xA;    tmux_autoclose_windows = false,&#xA;&#xA;    -- filetypes that you want to prevent from adding to the harpoon list menu.&#xA;    excluded_filetypes = { &#34;harpoon&#34; },&#xA;&#xA;    -- set marks specific to each git branch inside git repository&#xA;    mark_branch = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Preconfigured Terminal Commands&lt;/h3&gt; &#xA;&lt;p&gt;to preconfigure terminal commands for later use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;projects = {&#xA;    -- Yes $HOME works&#xA;    [&#34;$HOME/personal/vim-with-me/server&#34;] = {&#xA;        term = {&#xA;            cmds = {&#xA;                &#34;./env &amp;amp;&amp;amp; npx ts-node src/index.ts&#34;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⇁ Logging&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;logs are written to &lt;code&gt;harpoon.log&lt;/code&gt; within the nvim cache path (&lt;code&gt;:echo stdpath(&#34;cache&#34;)&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;available log levels are &lt;code&gt;trace&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, or &lt;code&gt;fatal&lt;/code&gt;. &lt;code&gt;warn&lt;/code&gt; is default&lt;/li&gt; &#xA; &lt;li&gt;log level can be set with &lt;code&gt;vim.g.harpoon_log_level&lt;/code&gt; (must be &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;setup()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;launching nvim with &lt;code&gt;HARPOON_LOG=debug nvim&lt;/code&gt; takes precedence over &lt;code&gt;vim.g.harpoon_log_level&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;invalid values default back to &lt;code&gt;warn&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⇁ Others&lt;/h2&gt; &#xA;&lt;h4&gt;How do Harpoon marks differ from vim global marks&lt;/h4&gt; &#xA;&lt;p&gt;they serve a similar purpose however harpoon marks differ in a few key ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;They auto update their position within the file&lt;/li&gt; &#xA; &lt;li&gt;They are saved &lt;em&gt;per project&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;They can be hand edited vs replaced (swapping is easier)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;The Motivation behind Harpoon terminals&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;I want to use the terminal since I can gF and &#xA;  &lt;c-w&gt;&#xA;   gF to any errors arising from execution that are within the terminal that are not appropriate for something like dispatch. (not just running tests but perhaps a server that runs for X amount of time before crashing).&#xA;  &lt;/c-w&gt;&lt;/li&gt; &#xA; &lt;li&gt;I want the terminal to be persistent and I can return to one of many terminals with some finger wizardry and reparse any of the execution information that was not necessarily error related.&lt;/li&gt; &#xA; &lt;li&gt;I would like to have commands that can be tied to terminals and sent them without much thinking. Some sort of middle ground between vim-test and just typing them into a terminal (configuring netflix&#39;s television project isn&#39;t quite building and there are tons of ways to configure).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Use a dynamic width for the Harpoon popup menu&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes the default width of &lt;code&gt;60&lt;/code&gt; is not wide enough. The following example demonstrates how to configure a custom width by setting the menu&#39;s width relative to the current window&#39;s width.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;harpoon&#34;).setup({&#xA;    menu = {&#xA;        width = vim.api.nvim_win_get_width(0) - 4,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⇁ Social&lt;/h2&gt; &#xA;&lt;p&gt;For questions about Harpoon, there&#39;s a #harpoon channel on &lt;a href=&#34;https://discord.gg/theprimeagen&#34;&gt;the Primagen&#39;s Discord&lt;/a&gt; server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/theprimeagen&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/theprimeagen&#34;&gt;Twitch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ThePrimeagen&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>folke/tokyonight.nvim</title>
    <updated>2022-06-03T02:14:22Z</updated>
    <id>tag:github.com,2022-06-03:/folke/tokyonight.nvim</id>
    <link href="https://github.com/folke/tokyonight.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🏙 A clean, dark Neovim theme written in Lua, with support for lsp, treesitter and lots of plugins. Includes additional themes for Kitty, Alacritty, iTerm and Fish.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🏙 Tokyo Night&lt;/h1&gt; &#xA;&lt;p&gt;A dark and light Neovim theme written in Lua ported from the Visual Studio Code &lt;a href=&#34;https://github.com/enkia/tokyo-night-vscode-theme&#34;&gt;TokyoNight&lt;/a&gt; theme. Includes extra themes for Kitty, Alacritty, iTerm and Fish.&lt;/p&gt; &#xA;&lt;h2&gt;Storm&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115295095-3a9e5080-a10e-11eb-9aed-6054488c46ce.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Night&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115295327-7afdce80-a10e-11eb-89b3-2591262bf95a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Day&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115996270-78c6c480-a593-11eb-8ed0-7d1400b058f5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;supports the latest Neovim 5.0 features like TreeSitter and LSP&lt;/li&gt; &#xA; &lt;li&gt;minimal inactive statusline&lt;/li&gt; &#xA; &lt;li&gt;vim terminal colors&lt;/li&gt; &#xA; &lt;li&gt;darker background for sidebar-like windows&lt;/li&gt; &#xA; &lt;li&gt;color configs for &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf.html?highlight=include&#34;&gt;Kitty&lt;/a&gt;, &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;Alacritty&lt;/a&gt; and &lt;a href=&#34;https://fishshell.com/&#34;&gt;Fish Shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lualine&lt;/strong&gt; theme&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Plugin Support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;TreeSitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;LSP Diagnostics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lsp-trouble.nvim&#34;&gt;LSP Trouble&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;LSP Saga&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Git Signs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;Git Gutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;NvimTree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liuchengxu/vim-which-key&#34;&gt;WhichKey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;Indent Blankline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;BufferLine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hoob3rt/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;Lightline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;Neogit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lambdalisue/fern.vim&#34;&gt;Fern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim&#34;&gt;Barbar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the theme with your preferred package manager:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;folke/tokyonight.nvim&#39;, { &#39;branch&#39;: &#39;main&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;folke/tokyonight.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;p&gt;Enable the colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;colorscheme tokyonight&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;vim.cmd[[colorscheme tokyonight]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable the &lt;code&gt;TokyoNight&lt;/code&gt; theme for &lt;code&gt;Lualine&lt;/code&gt;, simply specify it in your lualine settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    -- ... your lualine config&#xA;    theme = &#39;tokyonight&#39;&#xA;    -- ... your lualine config&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable the &lt;code&gt;tokyonight&lt;/code&gt; colorscheme for &lt;code&gt;Lightline&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;let g:lightline = {&#39;colorscheme&#39;: &#39;tokyonight&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❗️ configuration needs to be set &lt;strong&gt;BEFORE&lt;/strong&gt; loading the color scheme with &lt;code&gt;colorscheme tokyonight&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The theme comes in three styles, &lt;code&gt;storm&lt;/code&gt;, a darker variant &lt;code&gt;night&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;day&lt;/strong&gt; style will be used if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vim.g.tokyonight_style == &#34;day&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;or &lt;code&gt;vim.o.background == &#34;light&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;storm&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The theme comes in three styles, &lt;code&gt;storm&lt;/code&gt;, a darker variant &lt;code&gt;night&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_terminal_colors&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configure the colors used when opening a &lt;code&gt;:terminal&lt;/code&gt; in Neovim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_comments&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make comments italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_keywords&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make keywords italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_functions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make functions italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_variables&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make variables and identifiers italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_transparent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable this to disable setting the background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_hide_inactive_statusline&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard &lt;strong&gt;StatusLine&lt;/strong&gt; and &lt;strong&gt;LuaLine&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_sidebars&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set a darker background on sidebar-like windows. For example: &lt;code&gt;[&#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34;]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_transparent_sidebar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sidebar like windows like &lt;code&gt;NvimTree&lt;/code&gt; get a transparent background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_dark_sidebar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sidebar like windows like &lt;code&gt;NvimTree&lt;/code&gt; get a darker background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_dark_float&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Float windows like the lsp diagnostics windows get a darker background.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_colors&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;You can override specific color groups to use other groups or a hex color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_day_brightness&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adjusts the brightness of the colors of the &lt;strong&gt;Day&lt;/strong&gt; style. Number between 0 and 1, from dull to vibrant colors&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_lualine_bold&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, section headers in the lualine theme will be bold&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example config in Lua&#xA;vim.g.tokyonight_style = &#34;night&#34;&#xA;vim.g.tokyonight_italic_functions = true&#xA;vim.g.tokyonight_sidebars = { &#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34; }&#xA;&#xA;-- Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;vim.g.tokyonight_colors = { hint = &#34;orange&#34;, error = &#34;#ff0000&#34; }&#xA;&#xA;-- Load the colorscheme&#xA;vim.cmd[[colorscheme tokyonight]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Example config in VimScript&#xA;let g:tokyonight_style = &#34;night&#34;&#xA;let g:tokyonight_italic_functions = 1&#xA;let g:tokyonight_sidebars = [ &#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34; ]&#xA;&#xA;&#34; Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;let g:tokyonight_colors = {&#xA;  \ &#39;hint&#39;: &#39;orange&#39;,&#xA;  \ &#39;error&#39;: &#39;#ff0000&#39;&#xA;\ }&#xA;&#xA;&#34; Load the colorscheme&#xA;colorscheme tokyonight&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making &lt;code&gt;undercurls&lt;/code&gt; work properly in &lt;strong&gt;Tmux&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To have undercurls show up and in color, add the following to your &lt;strong&gt;Tmux&lt;/strong&gt; config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Undercurl&#xA;set -g default-terminal &#34;${TERM}&#34;&#xA;set -as terminal-overrides &#39;,*:Smulx=\E[4::%p1%dm&#39;  # undercurl support&#xA;set -as terminal-overrides &#39;,*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&amp;amp;%d::%p1%{255}%&amp;amp;%d%;m&#39;  # underscore colours - needs tmux-3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍭 Extras&lt;/h2&gt; &#xA;&lt;p&gt;Extra color configs for &lt;strong&gt;Kitty&lt;/strong&gt;, &lt;strong&gt;Alacritty&lt;/strong&gt;, &lt;strong&gt;Fish&lt;/strong&gt;, &lt;strong&gt;WezTerm&lt;/strong&gt; and &lt;strong&gt;iTerm&lt;/strong&gt; can be found in &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/&#34;&gt;extras&lt;/a&gt;. To use them, refer to their respective documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115395546-d8d6f880-a198-11eb-98fb-a1194787701d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can easily use the color palette for other plugins inside your Neovim config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local colors = require(&#34;tokyonight.colors&#34;).setup({}) -- pass in any of the config options as explained above&#xA;local utils = requires(&#34;tokyonight.util&#34;)&#xA;&#xA;aplugin.background = colors.bg_dark&#xA;aplugin.my_error = util.brighten(colors.red1, 0.3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🔥 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For the &lt;code&gt;extras&lt;/code&gt;, we use a simple template system that can be used to generate themes for the different styles.&lt;/p&gt; &#xA;&lt;p&gt;How to add a new extra template:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;create a file like &lt;code&gt;lua/tokyonight/extra/cool-app.lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;add the name and output file extension to the &lt;code&gt;extras&lt;/code&gt; table in &lt;code&gt;lua/tokyonight/extra/init.lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;in the root directory, run &lt;code&gt;$ lua lua/tokyonight/extra/init.lua&lt;/code&gt; to generate / update extra themes&lt;/li&gt; &#xA; &lt;li&gt;commit the newly created themes under &lt;code&gt;extra/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>kyazdani42/nvim-tree.lua</title>
    <updated>2022-06-03T02:14:22Z</updated>
    <id>tag:github.com,2022-06-03:/kyazdani42/nvim-tree.lua</id>
    <link href="https://github.com/kyazdani42/nvim-tree.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A file explorer tree for neovim written in lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A File Explorer For Neovim Written In Lua&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/kyazdani42/nvim-tree.lua/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notice&lt;/h2&gt; &#xA;&lt;p&gt;This plugin requires &lt;a href=&#34;https://github.com/neovim/neovim/wiki/Installing-Neovim&#34;&gt;neovim &amp;gt;=0.7.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have issues since the recent setup migration, check out &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/674&#34;&gt;this guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; requires&#xA;Plug &#39;kyazdani42/nvim-web-devicons&#39; &#34; for file icons&#xA;Plug &#39;kyazdani42/nvim-tree.lua&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;kyazdani42/nvim-tree.lua&#39;,&#xA;    requires = {&#xA;      &#39;kyazdani42/nvim-web-devicons&#39;, -- optional, for file icon&#xA;    },&#xA;    tag = &#39;nightly&#39; -- optional, updated every week. (see issue #1193)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Setup should be run in a lua file or in a lua heredoc (&lt;code&gt;:help lua-heredoc&lt;/code&gt;) if using in a vim file. Legacy &lt;code&gt;g:&lt;/code&gt; options have been migrated to the setup function. See &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/674&#34;&gt;this issue&lt;/a&gt; for information on migrating your configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; vimrc&#xA;nnoremap &amp;lt;C-n&amp;gt; :NvimTreeToggle&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;r :NvimTreeRefresh&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;n :NvimTreeFindFile&amp;lt;CR&amp;gt;&#xA;&#34; More available functions:&#xA;&#34; NvimTreeOpen&#xA;&#34; NvimTreeClose&#xA;&#34; NvimTreeFocus&#xA;&#34; NvimTreeFindFileToggle&#xA;&#34; NvimTreeResize&#xA;&#34; NvimTreeCollapse&#xA;&#34; NvimTreeCollapseKeepBuffers&#xA;&#xA;set termguicolors &#34; this variable must be enabled for colors to be applied properly&#xA;&#xA;&#34; a list of groups can be found at `:help nvim_tree_highlight`&#xA;highlight NvimTreeFolderIcon guibg=blue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;&#xA;-- empty setup using defaults: add your own options&#xA;require&#39;nvim-tree&#39;.setup {&#xA;}&#xA;&#xA;-- OR&#xA;&#xA;-- setup with all defaults&#xA;-- each of these are documented in `:help nvim-tree.OPTION_NAME`&#xA;-- nested options are documented by accessing them with `.` (eg: `:help nvim-tree.view.mappings.list`).&#xA;require&#39;nvim-tree&#39;.setup { -- BEGIN_DEFAULT_OPTS&#xA;  auto_reload_on_write = true,&#xA;  create_in_closed_folder = false,&#xA;  disable_netrw = false,&#xA;  hijack_cursor = false,&#xA;  hijack_netrw = true,&#xA;  hijack_unnamed_buffer_when_opening = false,&#xA;  ignore_buffer_on_setup = false,&#xA;  open_on_setup = false,&#xA;  open_on_setup_file = false,&#xA;  open_on_tab = false,&#xA;  sort_by = &#34;name&#34;,&#xA;  update_cwd = false,&#xA;  reload_on_bufenter = false,&#xA;  respect_buf_cwd = false,&#xA;  view = {&#xA;    adaptive_size = false,&#xA;    width = 30,&#xA;    height = 30,&#xA;    hide_root_folder = false,&#xA;    side = &#34;left&#34;,&#xA;    preserve_window_proportions = false,&#xA;    number = false,&#xA;    relativenumber = false,&#xA;    signcolumn = &#34;yes&#34;,&#xA;    mappings = {&#xA;      custom_only = false,&#xA;      list = {&#xA;        -- user mappings go here&#xA;      },&#xA;    },&#xA;  },&#xA;  renderer = {&#xA;    add_trailing = false,&#xA;    group_empty = false,&#xA;    highlight_git = false,&#xA;    highlight_opened_files = &#34;none&#34;,&#xA;    root_folder_modifier = &#34;:~&#34;,&#xA;    indent_markers = {&#xA;      enable = false,&#xA;      icons = {&#xA;        corner = &#34;└ &#34;,&#xA;        edge = &#34;│ &#34;,&#xA;        none = &#34;  &#34;,&#xA;      },&#xA;    },&#xA;    icons = {&#xA;      webdev_colors = true,&#xA;      git_placement = &#34;before&#34;,&#xA;      padding = &#34; &#34;,&#xA;      symlink_arrow = &#34; ➛ &#34;,&#xA;      show = {&#xA;        file = true,&#xA;        folder = true,&#xA;        folder_arrow = true,&#xA;        git = true,&#xA;      },&#xA;      glyphs = {&#xA;        default = &#34;&#34;,&#xA;        symlink = &#34;&#34;,&#xA;        folder = {&#xA;          arrow_closed = &#34;&#34;,&#xA;          arrow_open = &#34;&#34;,&#xA;          default = &#34;&#34;,&#xA;          open = &#34;&#34;,&#xA;          empty = &#34;&#34;,&#xA;          empty_open = &#34;&#34;,&#xA;          symlink = &#34;&#34;,&#xA;          symlink_open = &#34;&#34;,&#xA;        },&#xA;        git = {&#xA;          unstaged = &#34;✗&#34;,&#xA;          staged = &#34;✓&#34;,&#xA;          unmerged = &#34;&#34;,&#xA;          renamed = &#34;➜&#34;,&#xA;          untracked = &#34;★&#34;,&#xA;          deleted = &#34;&#34;,&#xA;          ignored = &#34;◌&#34;,&#xA;        },&#xA;      },&#xA;    },&#xA;    special_files = { &#34;Cargo.toml&#34;, &#34;Makefile&#34;, &#34;README.md&#34;, &#34;readme.md&#34; },&#xA;  },&#xA;  hijack_directories = {&#xA;    enable = true,&#xA;    auto_open = true,&#xA;  },&#xA;  update_focused_file = {&#xA;    enable = false,&#xA;    update_cwd = false,&#xA;    ignore_list = {},&#xA;  },&#xA;  ignore_ft_on_setup = {},&#xA;  system_open = {&#xA;    cmd = &#34;&#34;,&#xA;    args = {},&#xA;  },&#xA;  diagnostics = {&#xA;    enable = false,&#xA;    show_on_dirs = false,&#xA;    icons = {&#xA;      hint = &#34;&#34;,&#xA;      info = &#34;&#34;,&#xA;      warning = &#34;&#34;,&#xA;      error = &#34;&#34;,&#xA;    },&#xA;  },&#xA;  filters = {&#xA;    dotfiles = false,&#xA;    custom = {},&#xA;    exclude = {},&#xA;  },&#xA;  git = {&#xA;    enable = true,&#xA;    ignore = true,&#xA;    timeout = 400,&#xA;  },&#xA;  actions = {&#xA;    use_system_clipboard = true,&#xA;    change_dir = {&#xA;      enable = true,&#xA;      global = false,&#xA;      restrict_above_cwd = false,&#xA;    },&#xA;    expand_all = {&#xA;      max_folder_discovery = 300,&#xA;    },&#xA;    open_file = {&#xA;      quit_on_open = false,&#xA;      resize_window = true,&#xA;      window_picker = {&#xA;        enable = true,&#xA;        chars = &#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#34;,&#xA;        exclude = {&#xA;          filetype = { &#34;notify&#34;, &#34;packer&#34;, &#34;qf&#34;, &#34;diff&#34;, &#34;fugitive&#34;, &#34;fugitiveblame&#34; },&#xA;          buftype = { &#34;nofile&#34;, &#34;terminal&#34;, &#34;help&#34; },&#xA;        },&#xA;      },&#xA;    },&#xA;    remove_file = {&#xA;      close_window = true,&#xA;    },&#xA;  },&#xA;  trash = {&#xA;    cmd = &#34;trash&#34;,&#xA;    require_confirm = true,&#xA;  },&#xA;  live_filter = {&#xA;    prefix = &#34;[FILTER]: &#34;,&#xA;    always_show_folders = true,&#xA;  },&#xA;  log = {&#xA;    enable = false,&#xA;    truncate = false,&#xA;    types = {&#xA;      all = false,&#xA;      config = false,&#xA;      copy_paste = false,&#xA;      diagnostics = false,&#xA;      git = false,&#xA;      profile = false,&#xA;    },&#xA;  },&#xA;} -- END_DEFAULT_OPTS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mappings&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;list&lt;/code&gt; option in &lt;code&gt;view.mappings.list&lt;/code&gt; is a table of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- key can be either a string or a table of string (lhs)&#xA;-- action is the name of the action, set to `&#34;&#34;` to remove default action&#xA;-- action_cb is the function that will be called, it receives the node as a parameter. Optional for default actions&#xA;-- mode is normal by default&#xA;&#xA;local tree_cb = require&#39;nvim-tree.config&#39;.nvim_tree_callback&#xA;&#xA;local function print_node_path(node) {&#xA;  print(node.absolute_path)&#xA;}&#xA;&#xA;local list = {&#xA;  { key = {&#34;&amp;lt;CR&amp;gt;&#34;, &#34;o&#34; }, action = &#34;edit&#34;, mode = &#34;n&#34;},&#xA;  { key = &#34;p&#34;, action = &#34;print_path&#34;, action_cb = print_node_path },&#xA;  { key = &#34;s&#34;, cb = tree_cb(&#34;vsplit&#34;) }, --tree_cb and the cb property are deprecated&#xA;  { key = &#34;&amp;lt;2-RightMouse&amp;gt;&#34;, action = &#34;&#34; }, -- will remove default cd action&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defaults&lt;/h3&gt; &#xA;&lt;!-- BEGIN_DEFAULT_MAPPINGS_TABLE --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Default Keys&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;CR&amp;gt; &lt;br&gt; o &lt;br&gt; &amp;lt;2-LeftMouse&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;edit&lt;/td&gt; &#xA;   &lt;td&gt;open a file or folder; root will cd to the above directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-e&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;edit_in_place&lt;/td&gt; &#xA;   &lt;td&gt;edit the file in place, effectively replacing the tree explorer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;O&lt;/td&gt; &#xA;   &lt;td&gt;edit_no_picker&lt;/td&gt; &#xA;   &lt;td&gt;same as (edit) with no window picker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-]&amp;gt; &lt;br&gt; &amp;lt;2-RightMouse&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;cd&lt;/td&gt; &#xA;   &lt;td&gt;cd in the directory under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-v&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;vsplit&lt;/td&gt; &#xA;   &lt;td&gt;open the file in a vertical split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-x&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;split&lt;/td&gt; &#xA;   &lt;td&gt;open the file in a horizontal split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-t&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;tabnew&lt;/td&gt; &#xA;   &lt;td&gt;open the file in a new tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;&lt;/td&gt; &#xA;   &lt;td&gt;prev_sibling&lt;/td&gt; &#xA;   &lt;td&gt;navigate to the previous sibling of current file/directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;next_sibling&lt;/td&gt; &#xA;   &lt;td&gt;navigate to the next sibling of current file/directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;P&lt;/td&gt; &#xA;   &lt;td&gt;parent_node&lt;/td&gt; &#xA;   &lt;td&gt;move cursor to the parent directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;BS&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;close_node&lt;/td&gt; &#xA;   &lt;td&gt;close current opened directory or parent&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;Tab&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;preview&lt;/td&gt; &#xA;   &lt;td&gt;open the file as a preview (keeps the cursor in the tree)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;K&lt;/td&gt; &#xA;   &lt;td&gt;first_sibling&lt;/td&gt; &#xA;   &lt;td&gt;navigate to the first sibling of current file/directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;J&lt;/td&gt; &#xA;   &lt;td&gt;last_sibling&lt;/td&gt; &#xA;   &lt;td&gt;navigate to the last sibling of current file/directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;I&lt;/td&gt; &#xA;   &lt;td&gt;toggle_git_ignored&lt;/td&gt; &#xA;   &lt;td&gt;toggle visibility of files/folders hidden via &lt;code&gt;git.ignore&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;H&lt;/td&gt; &#xA;   &lt;td&gt;toggle_dotfiles&lt;/td&gt; &#xA;   &lt;td&gt;toggle visibility of dotfiles via &lt;code&gt;filters.dotfiles&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;U&lt;/td&gt; &#xA;   &lt;td&gt;toggle_custom&lt;/td&gt; &#xA;   &lt;td&gt;toggle visibility of files/folders hidden via &lt;code&gt;filters.custom&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;refresh&lt;/td&gt; &#xA;   &lt;td&gt;refresh the tree&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;a&lt;/td&gt; &#xA;   &lt;td&gt;create&lt;/td&gt; &#xA;   &lt;td&gt;add a file; leaving a trailing &lt;code&gt;/&lt;/code&gt; will add a directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;d&lt;/td&gt; &#xA;   &lt;td&gt;remove&lt;/td&gt; &#xA;   &lt;td&gt;delete a file (will prompt for confirmation)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;D&lt;/td&gt; &#xA;   &lt;td&gt;trash&lt;/td&gt; &#xA;   &lt;td&gt;trash a file via &lt;code&gt;trash&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;r&lt;/td&gt; &#xA;   &lt;td&gt;rename&lt;/td&gt; &#xA;   &lt;td&gt;rename a file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-r&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;full_rename&lt;/td&gt; &#xA;   &lt;td&gt;rename a file and omit the filename on input&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;cut&lt;/td&gt; &#xA;   &lt;td&gt;add/remove file/directory to cut clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c&lt;/td&gt; &#xA;   &lt;td&gt;copy&lt;/td&gt; &#xA;   &lt;td&gt;add/remove file/directory to copy clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;p&lt;/td&gt; &#xA;   &lt;td&gt;paste&lt;/td&gt; &#xA;   &lt;td&gt;paste from clipboard; cut clipboard has precedence over copy; will prompt for confirmation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;y&lt;/td&gt; &#xA;   &lt;td&gt;copy_name&lt;/td&gt; &#xA;   &lt;td&gt;copy name to system clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;copy_path&lt;/td&gt; &#xA;   &lt;td&gt;copy relative path to system clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gy&lt;/td&gt; &#xA;   &lt;td&gt;copy_absolute_path&lt;/td&gt; &#xA;   &lt;td&gt;copy absolute path to system clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[c&lt;/td&gt; &#xA;   &lt;td&gt;prev_git_item&lt;/td&gt; &#xA;   &lt;td&gt;go to next git item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;]c&lt;/td&gt; &#xA;   &lt;td&gt;next_git_item&lt;/td&gt; &#xA;   &lt;td&gt;go to prev git item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;dir_up&lt;/td&gt; &#xA;   &lt;td&gt;navigate up to the parent directory of the current file/directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s&lt;/td&gt; &#xA;   &lt;td&gt;system_open&lt;/td&gt; &#xA;   &lt;td&gt;open a file with default system application or a folder with default file manager, using &lt;code&gt;system_open&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;f&lt;/td&gt; &#xA;   &lt;td&gt;live_filter&lt;/td&gt; &#xA;   &lt;td&gt;live filter nodes dynamically based on regex matching.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F&lt;/td&gt; &#xA;   &lt;td&gt;clear_live_filter&lt;/td&gt; &#xA;   &lt;td&gt;clear live filter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;q&lt;/td&gt; &#xA;   &lt;td&gt;close&lt;/td&gt; &#xA;   &lt;td&gt;close tree window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;W&lt;/td&gt; &#xA;   &lt;td&gt;collapse_all&lt;/td&gt; &#xA;   &lt;td&gt;collapse the whole tree&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;E&lt;/td&gt; &#xA;   &lt;td&gt;expand_all&lt;/td&gt; &#xA;   &lt;td&gt;expand the whole tree, stopping after expanding &lt;code&gt;actions.expand_all.max_folder_discovery&lt;/code&gt; folders; this might hang neovim for a while if running on a big folder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;search_node&lt;/td&gt; &#xA;   &lt;td&gt;prompt the user to enter a path and then expands the tree to match the path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;run_file_command&lt;/td&gt; &#xA;   &lt;td&gt;enter vim command mode with the file the cursor is on&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-k&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;toggle_file_info&lt;/td&gt; &#xA;   &lt;td&gt;toggle a popup with file infos about the file under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;g?&lt;/td&gt; &#xA;   &lt;td&gt;toggle_help&lt;/td&gt; &#xA;   &lt;td&gt;toggle help&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- END_DEFAULT_MAPPINGS_TABLE --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  view.mappings.list = { -- BEGIN_DEFAULT_MAPPINGS&#xA;    { key = { &#34;&amp;lt;CR&amp;gt;&#34;, &#34;o&#34;, &#34;&amp;lt;2-LeftMouse&amp;gt;&#34; }, action = &#34;edit&#34; }&#xA;    { key = &#34;&amp;lt;C-e&amp;gt;&#34;,                          action = &#34;edit_in_place&#34; }&#xA;    { key = &#34;O&#34;,                              action = &#34;edit_no_picker&#34; }&#xA;    { key = { &#34;&amp;lt;C-]&amp;gt;&#34;, &#34;&amp;lt;2-RightMouse&amp;gt;&#34; },    action = &#34;cd&#34; }&#xA;    { key = &#34;&amp;lt;C-v&amp;gt;&#34;,                          action = &#34;vsplit&#34; }&#xA;    { key = &#34;&amp;lt;C-x&amp;gt;&#34;,                          action = &#34;split&#34; }&#xA;    { key = &#34;&amp;lt;C-t&amp;gt;&#34;,                          action = &#34;tabnew&#34; }&#xA;    { key = &#34;&amp;lt;&#34;,                              action = &#34;prev_sibling&#34; }&#xA;    { key = &#34;&amp;gt;&#34;,                              action = &#34;next_sibling&#34; }&#xA;    { key = &#34;P&#34;,                              action = &#34;parent_node&#34; }&#xA;    { key = &#34;&amp;lt;BS&amp;gt;&#34;,                           action = &#34;close_node&#34; }&#xA;    { key = &#34;&amp;lt;Tab&amp;gt;&#34;,                          action = &#34;preview&#34; }&#xA;    { key = &#34;K&#34;,                              action = &#34;first_sibling&#34; }&#xA;    { key = &#34;J&#34;,                              action = &#34;last_sibling&#34; }&#xA;    { key = &#34;I&#34;,                              action = &#34;toggle_git_ignored&#34; }&#xA;    { key = &#34;H&#34;,                              action = &#34;toggle_dotfiles&#34; }&#xA;    { key = &#34;U&#34;,                              action = &#34;toggle_custom&#34; }&#xA;    { key = &#34;R&#34;,                              action = &#34;refresh&#34; }&#xA;    { key = &#34;a&#34;,                              action = &#34;create&#34; }&#xA;    { key = &#34;d&#34;,                              action = &#34;remove&#34; }&#xA;    { key = &#34;D&#34;,                              action = &#34;trash&#34; }&#xA;    { key = &#34;r&#34;,                              action = &#34;rename&#34; }&#xA;    { key = &#34;&amp;lt;C-r&amp;gt;&#34;,                          action = &#34;full_rename&#34; }&#xA;    { key = &#34;x&#34;,                              action = &#34;cut&#34; }&#xA;    { key = &#34;c&#34;,                              action = &#34;copy&#34; }&#xA;    { key = &#34;p&#34;,                              action = &#34;paste&#34; }&#xA;    { key = &#34;y&#34;,                              action = &#34;copy_name&#34; }&#xA;    { key = &#34;Y&#34;,                              action = &#34;copy_path&#34; }&#xA;    { key = &#34;gy&#34;,                             action = &#34;copy_absolute_path&#34; }&#xA;    { key = &#34;[c&#34;,                             action = &#34;prev_git_item&#34; }&#xA;    { key = &#34;]c&#34;,                             action = &#34;next_git_item&#34; }&#xA;    { key = &#34;-&#34;,                              action = &#34;dir_up&#34; }&#xA;    { key = &#34;s&#34;,                              action = &#34;system_open&#34; }&#xA;    { key = &#34;f&#34;,                              action = &#34;live_filter&#34; }&#xA;    { key = &#34;F&#34;,                              action = &#34;clear_live_filter&#34; }&#xA;    { key = &#34;q&#34;,                              action = &#34;close&#34; }&#xA;    { key = &#34;W&#34;,                              action = &#34;collapse_all&#34; }&#xA;    { key = &#34;E&#34;,                              action = &#34;expand_all&#34; }&#xA;    { key = &#34;S&#34;,                              action = &#34;search_node&#34; }&#xA;    { key = &#34;.&#34;,                              action = &#34;run_file_command&#34; }&#xA;    { key = &#34;&amp;lt;C-k&amp;gt;&#34;,                          action = &#34;toggle_file_info&#34; }&#xA;    { key = &#34;g?&#34;,                             action = &#34;toggle_help&#34; }&#xA;  } -- END_DEFAULT_MAPPINGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips &amp;amp; reminders&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You can add a directory by adding a &lt;code&gt;/&lt;/code&gt; at the end of the paths, entering multiple directories &lt;code&gt;BASE/foo/bar/baz&lt;/code&gt; will add directory foo, then bar and add a file baz to it.&lt;/li&gt; &#xA; &lt;li&gt;You can update window options for the tree by setting &lt;code&gt;require&#34;nvim-tree.view&#34;.View.winopts.MY_OPTION = MY_OPTION_VALUE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle&lt;/code&gt; has a second parameter which allows to toggle without focusing the explorer (&lt;code&gt;require&#34;nvim-tree&#34;.toggle(false, true)&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;You can allow nvim-tree to behave like vinegar (see &lt;code&gt;:help nvim-tree-vinegar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;code&gt;:set nosplitright&lt;/code&gt;, the files will open on the left side of the tree, placing the tree window in the right side of the file you opened.&lt;/li&gt; &#xA; &lt;li&gt;You can automatically close the tab/vim when nvim-tree is the last window in the tab: &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/discussions/1115&#34;&gt;https://github.com/kyazdani42/nvim-tree.lua/discussions/1115&lt;/a&gt;. WARNING: other plugins or automation may interfere with this.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Diagnostic Logging&lt;/h2&gt; &#xA;&lt;p&gt;You may enable diagnostic logging to &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt;. See &lt;code&gt;:help nvim-tree.log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are experiencing performance issues with nvim-tree.lua, you can enable profiling in the logs. It is advisable to enable git logging at the same time, as that can be a source of performance problems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;log = {&#xA;  enable = true,&#xA;  truncate = true,&#xA;  types = {&#xA;    git = true,&#xA;    profile = true,&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please attach &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt; if you raise an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Performance Tips:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using fish as an editor shell (which might be fixed in the future), try set &lt;code&gt;shell=/bin/bash&lt;/code&gt; in your vim config. Alternatively, you can &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/549#issuecomment-1127394585&#34;&gt;prevent fish from loading interactive configuration in a non-interactive shell&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try manually running the git command (see the logs) in your shell e.g. &lt;code&gt;git --no-optional-locks status --porcelain=v1 --ignored=matching -u&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Huge git repositories may timeout after the default &lt;code&gt;git.timeout&lt;/code&gt; of 400ms. Try increasing that in your setup if you see &lt;code&gt;[git] job timed out&lt;/code&gt; in the logs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try temporarily disabling git integration by setting &lt;code&gt;git.enable = false&lt;/code&gt; in your setup.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;kyazdani42 tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;akin909 tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot3.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;stsewd tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot4.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;reyhankaplan tree&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>streetturtle/awesome-wm-widgets</title>
    <updated>2022-06-03T02:14:22Z</updated>
    <id>tag:github.com,2022-06-03:/streetturtle/awesome-wm-widgets</id>
    <link href="https://github.com/streetturtle/awesome-wm-widgets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Widgets for Awesome Window Manager&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/streetturtle/awesome-wm-widgets/raw/master/awesome-o.png&#34; alt=&#34;logo&#34; style=&#34;max-width:100%;&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/streetturtle/awesome-wm-widgets.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/streetturtle/awesome-wm-widgets.svg?sanitize=true&#34;&gt; &lt;img alt=&#34;GitHub repo size&#34; src=&#34;https://img.shields.io/github/repo-size/streetturtle/awesome-wm-widgets&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/workflow/status/streetturtle/awesome-wm-widgets/luacheck&#34;&gt; &lt;a href=&#34;https://www.buymeacoffee.com/streetturtle&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-buy%20me%20a%20coffee-3B4252?style=flat&amp;amp;logo=Buy-Me-A-Coffee&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?text=Check%20out%20these%20awesome%20widgets%20for%20Awesome Window Manager%20&amp;amp;url=https://github.com/streetturtle/awesome-wm-widgets&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Set of widgets compatible with Awesome Window Manager v.4.3+.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Spotify, CPU, RAM, brightness-arc, volume-arc and battery-arc widgets:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/streetturtle/awesome-wm-widgets/raw/master/Screenshot%20from%202019-03-01%2014-28-18.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Brightness, volume and battery widgets:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/streetturtle/awesome-wm-widgets/raw/master/widgets-icons.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/streetturtle/awesome-wm-widgets/master/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some more screenshots in this reddit &lt;a href=&#34;https://www.reddit.com/r/unixporn/comments/8qijmx/awesomewm_dark_theme/&#34;&gt;post&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Clone the repo under &lt;strong&gt;~/.config/awesome/&lt;/strong&gt;, then follow an Installation section of widget&#39;s readme file.&lt;/p&gt; &#xA;&lt;h1&gt;Stargazers&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/streetturtle/awesome-wm-widgets&#34;&gt;&lt;img src=&#34;https://starchart.cc/streetturtle/awesome-wm-widgets.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;p&gt;In case of any doubts/questions/problems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;create an &lt;a href=&#34;https://github.com/streetturtle/awesome-wm-widgets/issues/new/choose&#34;&gt;issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;raise a question on &lt;a href=&#34;https://github.com/streetturtle/awesome-wm-widgets/discussions&#34;&gt;Discussions&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;ping me on AwesomeWM&#39;s discord, here&#39;s an &lt;a href=&#34;https://discord.gg/BPat4F87dg&#34;&gt;invite&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;If you find anything useful here, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;star a repo - this really motivates me to work on this project&lt;/li&gt; &#xA; &lt;li&gt;or &lt;a class=&#34;social-link&#34; href=&#34;https://www.buymeacoffee.com/streetturtle&#34;&gt;&lt;img style=&#34;display:inline&#34; src=&#34;https://img.shields.io/badge/-buy%20me%20a%20coffee-3B4252?style=flat&amp;amp;logo=Buy-Me-A-Coffee&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;or even become a &lt;a href=&#34;https://github.com/sponsors/streetturtle&#34;&gt;sponsor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;a href=&#34;https://github.com/streetturtle/awesome-wm-widgets/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=streetturtle/awesome-wm-widgets&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>askfiy/nvim</title>
    <updated>2022-06-03T02:14:22Z</updated>
    <id>tag:github.com,2022-06-03:/askfiy/nvim</id>
    <link href="https://github.com/askfiy/nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An excellent Neovim configuration, which is as powerful as Vcode, is lightning fast ⚡&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Directory&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Notice&#34;&gt;Notice&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#illustrate&#34;&gt;illustrate&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#How-do-use&#34;&gt;How-do-use&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Directory-Structure&#34;&gt;Directory-Structure&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Personal-customization&#34;&gt;Personal-customization&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Some-commands&#34;&gt;Some-commands&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Disabled-plugins&#34;&gt;Disabled-plugins&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Tabnine&#34;&gt;Tabnine&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Copillot&#34;&gt;Copillot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Extension&#34;&gt;Extension&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Add-New-plugin&#34;&gt;Add-New-plugin&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Add-Lsp-config&#34;&gt;Add-Lsp-config&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Add-Dap-config&#34;&gt;Add-Dap-config&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Key-bindings&#34;&gt;Key-bindings&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Diff-keymap&#34;&gt;Diff-keymap&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Manager-keymap&#34;&gt;Manager-keymap&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Buffer-keymap&#34;&gt;Buffer-keymap&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#LSP-keymap&#34;&gt;LSP-keymap&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Code-Completion&#34;&gt;Code-Completion&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Debug&#34;&gt;Debug&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Find&#34;&gt;Find&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Git&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Replace&#34;&gt;Replace&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Session&#34;&gt;Session&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Terminal&#34;&gt;Terminal&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Translate&#34;&gt;Translate&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Upload&#34;&gt;Upload&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Multiple-cursors&#34;&gt;Multiple-cursors&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Surround&#34;&gt;Surround&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Comment&#34;&gt;Comment&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Switch&#34;&gt;Switch&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Emment&#34;&gt;Emment&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Motions&#34;&gt;Motions&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Drawing&#34;&gt;Drawing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/#Copillot&#34;&gt;Copillot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Completely written in Lua language&lt;/li&gt; &#xA; &lt;li&gt;Rich functions&lt;/li&gt; &#xA; &lt;li&gt;Ultimate performance&lt;/li&gt; &#xA; &lt;li&gt;Lots of tweaks for every theme&lt;/li&gt; &#xA; &lt;li&gt;Excellent scalability&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;illustrate&lt;/h2&gt; &#xA;&lt;p&gt;This is a Neovim configuration written in pure Lua, with good extensibility and a very easy-to-understand configuration.&lt;/p&gt; &#xA;&lt;p&gt;Now it should be stable and fast, I do lazy loading for 99% of the plugins and it should start in between 20ms - 70ms depending on your PC&#39;s configuration.&lt;/p&gt; &#xA;&lt;p&gt;Really does it lightning fast ⚡️.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81478335/160888684-419daafc-bdcd-48fd-af49-74950ebc0d21.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently, it supports the following languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Golang&lt;/li&gt; &#xA; &lt;li&gt;Node&lt;/li&gt; &#xA; &lt;li&gt;HTML&lt;/li&gt; &#xA; &lt;li&gt;CSS&lt;/li&gt; &#xA; &lt;li&gt;JavaScript&lt;/li&gt; &#xA; &lt;li&gt;TypeScript&lt;/li&gt; &#xA; &lt;li&gt;Vue&lt;/li&gt; &#xA; &lt;li&gt;Json&lt;/li&gt; &#xA; &lt;li&gt;SQL&lt;/li&gt; &#xA; &lt;li&gt;Markdown&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Basic dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim &amp;gt; 0.7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;gcc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;tree-sitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//www.nerdfonts.com/&#34;&gt;nerd font&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/tar/&#34;&gt;tar&lt;/a&gt; &lt;a href=&#34;https://curl.se/&#34;&gt;curl&lt;/a&gt; &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/software/gzip/&#34;&gt;gzip&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/software/wget/&#34;&gt;wget&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/infozip.sourceforge.net/UnZip.html&#34;&gt;unzip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vergenet.net/~conrad/software/xsel/&#34;&gt;xsel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;lazygit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/soimort/translate-shell&#34;&gt;translate-shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PicGo/PicGo-Core&#34;&gt;picgo-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.percona.com/software/mysql-database/percona-server&#34;&gt;mysql-client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;sqlite3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/trash&#34;&gt;trash&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can quickly install all dependencies using the package manager (don&#39;t be afraid, many are optional):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- use the system clipboard&#xA;$ yay -S xsel&#xA;&#xA;-- parsing&#xA;$ yay -S tree-sitter&#xA;&#xA;-- Fuzzy Finder&#xA;$ yay -S fd&#xA;$ yay -S sed&#xA;$ yay -S ripgrep&#xA;&#xA;-- * neovim rely&#xA;$ npm install -g neovim&#xA;$ pip3 install neovim&#xA;&#xA;--* Python diagnostics (use Pyright by default)&#xA;$ pip3 install pylint&#xA;&#xA;-- * If you use pylint to diagnose Django code, you should install it&#xA;$ pip3 install pylint-django&#xA;&#xA;-- * If you use Pyrigth to diagnose Django code, you should install it (Disabled by default)&#xA;$ pip3 install django-stubs&#xA;&#xA;-- * Code format&#xA;$ yay -S stylua&#xA;$ npm install -g prettier&#xA;$ npm install -g gofmt&#xA;$ pip3 install autopep8&#xA;$ pip3 install sqlformat&#xA;&#xA;-- * Golang debug&#xA;$ yay -S delve&#xA;&#xA;-- * Python debug&#xA;$ python3 -m pip install debugpy&#xA;&#xA;-- * Lazygit&#xA;$ yay -S lazygit&#xA;&#xA;-- * Translate (you can also use Google or Deepl source, if you do you must install curl)&#xA;$ yay -S translate-shell&#xA;&#xA;-- * Markdown preview&#xA;$ yay -S pandoc&#xA;$ npm install -g live-server&#xA;&#xA;-- * Tabnine require&#xA;$ yay -S unzip&#xA;$ yay -S curl&#xA;&#xA;-- * Image upload to image bed function&#xA;$ npm install picgo -g&#xA;&#xA;-- * mysql client linker&#xA;$ yay -S percona-server-clients&#xA;&#xA;-- * Persistent save history yank records&#xA;$ yay -S sqlite3&#xA;&#xA;-- * Command-line tool to put files into recycle bin&#xA;$ yay -S trash-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How-do-use&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have the above dependencies installed, then execute the command below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd ~/.config/&#xA;$ mv nvim ./nvim-bak -- if you haven&#39;t configured Neovim yourself, this step can be omitted&#xA;$ git clone https://github.com/askfiy/nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you open neovim for the first time, it will automatically download all plugins and LSP servers, this process may take 1-2 minutes. please wait patiently ...&lt;/p&gt; &#xA;&lt;p&gt;When you first open it, you should look at the &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/core/options.lua&#34;&gt;nvim/lua/core/options.lua&lt;/a&gt; file and make some customizations to it.&lt;/p&gt; &#xA;&lt;h2&gt;Directory-Structure&lt;/h2&gt; &#xA;&lt;p&gt;Directory Structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── lint/&#xA;│&amp;nbsp;&amp;nbsp; └── ...&#xA;├── ftplugin/&#xA;│&amp;nbsp;&amp;nbsp; └── ...&#xA;├── snipptes/&#xA;│&amp;nbsp;&amp;nbsp; └── ...&#xA;├── lua/&#xA;│&amp;nbsp;&amp;nbsp; ├── configure/&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── dap/&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── ...&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── lsp/&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── ...&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── plugins/&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── ...&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── theme/&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── .../&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;         └── ...&#xA;│&amp;nbsp;&amp;nbsp; ├── core/&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── after/&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── init.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── vsnip-set.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── auto-command.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── mapping.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── options.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── plugins.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── setting.lua&#xA;│&amp;nbsp;&amp;nbsp; └── utils/&#xA;│&amp;nbsp;&amp;nbsp;     ├── api/&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── hi.lua&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── path.lua&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── str.lua&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── tbl.lua&#xA;│&amp;nbsp;&amp;nbsp;     └── icons.lua&#xA;└── init.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Directory Structure description:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lint/ : lint configuration for various languages&lt;/li&gt; &#xA; &lt;li&gt;ftplugin/ : load different diff options based on file type&lt;/li&gt; &#xA; &lt;li&gt;snippets/ : user-defined code snippets&lt;/li&gt; &#xA; &lt;li&gt;lua/ : main configuration directory&lt;/li&gt; &#xA; &lt;li&gt;lua/configure/ : configuration directory&lt;/li&gt; &#xA; &lt;li&gt;lua/configure/dap/ : DAP configuration in different languages&lt;/li&gt; &#xA; &lt;li&gt;lua/configure/lsp/ : LSP configuration in different languages&lt;/li&gt; &#xA; &lt;li&gt;lua/configure/plugins/ : configuration of plugins&lt;/li&gt; &#xA; &lt;li&gt;core/after/ : some autocommand scripts like autosave, cursor events, etc..&lt;/li&gt; &#xA; &lt;li&gt;utils/ : defines some auxiliary functions and non-core configuration&lt;/li&gt; &#xA; &lt;li&gt;utils/api/ : define helper functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;File Description:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;settings : neovim built-in configuration&lt;/li&gt; &#xA; &lt;li&gt;options : user-defined configuration&lt;/li&gt; &#xA; &lt;li&gt;mapping : user key configuration&lt;/li&gt; &#xA; &lt;li&gt;plugins : plugin loading configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Personal-customization&lt;/h2&gt; &#xA;&lt;p&gt;Open the &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/core/options.lua&#34;&gt;nvim/lua/core/options.lua&lt;/a&gt; file and you can do some basic customizations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;icons_style : use kind by default (need &lt;a href=&#34;https://link.zhihu.com/?target=https%3A//www.nerdfonts.com/&#34;&gt;nerd font&lt;/a&gt; support), you can also use vscode (need &lt;a href=&#34;https://github.com/microsoft/vscode-codicons/raw/main/dist/codicon.ttf&#34;&gt;codicon.ttf&lt;/a&gt;) support, use kind by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use your own icon: Use your own image of interest, defined in &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/utils/icons.lua&#34;&gt;nvim/lua/utils/icons.lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Change key bindings: change the key set description in &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/configure/plugins/nv_which-key.lua&#34;&gt;nvim/lua/configure/plugins/nv_which-key.lua&lt;/a&gt;, change the default keys in different plugin configuration files .&lt;/p&gt; &#xA;&lt;h2&gt;Some-commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;PackerStatus: View plug-in running status&#xA;PackerSync: Update plugins&#xA;VsnipOPen: define code snippets&#xA;MarkdownPreview: Preview markdown files&#xA;LspInfo: View LSP running status&#xA;LSPInstallInfo: View LSP download status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disabled-plugins&lt;/h2&gt; &#xA;&lt;h3&gt;Tabnine&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tzachar/cmp-tabnine&#34;&gt;Tabnine&lt;/a&gt; is disabled for performance reasons, you can search for Tabnine in the &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/core/plugins.lua&#34;&gt;nvim/lua/core/plugins.lua&lt;/a&gt; file and open it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[&#34;tzachar/cmp-tabnine&#34;] = { -- AI smart completion (it may affect performance)&#xA;    -- comment the line below&#xA;    disable = true,&#xA;    run = &#34;./install.sh&#34;,&#xA;    after = { &#34;nvim-cmp&#34; },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;:PackerSync&lt;/code&gt; to install the plugin. After the installation is complete, an error may occur. You need to execute the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ~/.local/share/nvim/site/pack/packer/opt/cmp-tabnine/install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Copillot&lt;/h3&gt; &#xA;&lt;p&gt;For performance reasons, the &lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;copillot&lt;/a&gt; plugin is also disabled by default, you can turn it on as well.&lt;/p&gt; &#xA;&lt;p&gt;After entering the &lt;code&gt;:PackerSync&lt;/code&gt; command, you can enter &lt;code&gt;:Copilot setup&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;p&gt;It will return you a string of verification codes, which you need to record and enter in your browser.&lt;/p&gt; &#xA;&lt;h2&gt;Extension&lt;/h2&gt; &#xA;&lt;h3&gt;Add-New-plugin&lt;/h3&gt; &#xA;&lt;p&gt;Add the new plugins you want to use in &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/core/plugins.lua&#34;&gt;nvim/lua/core/plugins&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that if your newly installed plugin requires a configuration file, and the plugin is written in viml, you must declare it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- If it is a Lua plugin, this is not required&#xA;[&#34;plugin_author/plugin_name&#34;] = {&#xA;    ptp = &#34;viml&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can create configuration files in the &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/configure/plugins/&#34;&gt;nvim/lua/configure/plugins&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The configuration file must start with &lt;code&gt;nv_&lt;/code&gt; and end with &lt;code&gt;.lua&lt;/code&gt;, such as &lt;code&gt;nv_plugin_name.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The plugin writing template of viml type is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;local M = {}&#xA;&#xA;function M.entrance()&#xA;end&#xA;&#xA;return M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it is a plugin written in Lua, you need to use the following template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;local M = {}&#xA;&#xA;function M.before() end&#xA;&#xA;function M.load()&#xA;    local ok, m = pcall(require, &#34;m&#34;)&#xA;    if not ok then&#xA;        return&#xA;    end&#xA;&#xA;    M.m = m&#xA;    M.m.setup({config})&#xA;end&#xA;&#xA;function M.after() end&#xA;&#xA;return M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The reason for this is that you can manage your plugins more easily, so I recommend it.&lt;/p&gt; &#xA;&lt;h3&gt;Add-Lsp-config&lt;/h3&gt; &#xA;&lt;p&gt;To add a new LSP configuration, please add a new configuration file in the &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/configure/lsp/&#34;&gt;nvim/lua/configure/lsp/&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The configuration file template is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;local M = {}&#xA;&#xA;M.private_attach_callbackfn = function(client, bufnr)&#xA;    -- Do your own thing&#xA;    -- It will be called after publish_attach_callbackfn&#xA;end&#xA;&#xA;M.lsp_config = {&#xA;    -- Write your LSP configuration&#xA;    ...&#xA;}&#xA;&#xA;return M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you need to add a new configuration to &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/configure/plugins/nv_nvim-lsp-installer.lua&#34;&gt;nvim/lua/configure/plugins/nv_nvim-lsp-installer.lua&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M.language_servers_config = {&#xA;    lsp_name = require(&#34;configure.lsp.your_lsp_config_file_name&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add-Dap-config&lt;/h3&gt; &#xA;&lt;p&gt;To add a new Dap configuration, please add a new configuration file in the &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/configure/dap/&#34;&gt;nvim/lua/configure/dap/&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The configuration file template is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;return {&#xA;    adapters = {&#xA;        name = {&#xA;        ...&#xA;        }&#xA;    },&#xA;    configurations = {&#xA;        name = {&#xA;        ...&#xA;        }&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you need to add a new configuration to &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/configure/plugins/nv_nvim-dap.lua&#34;&gt;nvim/lua/configure/plugins/nv_nvim-dap.lua&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M.dubug_adapter_config = {&#xA;    ...&#xA;    arbitrary_name = require(&#34;configure.dap.your_dap_config_file_name&#34;),&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Key-bindings&lt;/h2&gt; &#xA;&lt;h3&gt;Diff-keymap&lt;/h3&gt; &#xA;&lt;p&gt;The default &lt;code&gt;leader&lt;/code&gt; is &lt;code&gt;space&lt;/code&gt;, you can check the &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/core/mapping.lua&#34;&gt;nvim/lua/core/mapping.lua&lt;/a&gt; file to see the basic key bindings.&lt;/p&gt; &#xA;&lt;p&gt;Some vim or neovim default keys have been replaced, namely:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;n&#34; &amp;lt;c-u&amp;gt;&lt;/code&gt; : now it moves up 1/4 screen instead of 1/2 screen&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;n&#34; &amp;lt;c-d&amp;gt;&lt;/code&gt; : now it moves down 1/4 screen instead of 1/2 screen&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;n&#34; &amp;lt;c-e&amp;gt;&lt;/code&gt; : now it will move the current buffer to the left instead of scrolling up a line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;n&#34; &amp;lt;c-y&amp;gt;&lt;/code&gt; : now it will move the current display area to the right instead of scrolling down a line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;n&#34; &amp;lt;c-l&amp;gt;&lt;/code&gt; : now he will focus on the right buffer instead of clearing the search highlight&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following is a description of the basic keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-  &#34;i&#34; jj                 :  Escape editor insert mode&#xA;-  &#34;t&#34; &amp;lt;esc&amp;gt;              :  Escape terminal insert mode&#xA;-  &#34;n&#34; &amp;lt;esc&amp;gt;              :  Clear search highlight&#xA;-  &#34;n&#34; &amp;lt;c-u&amp;gt;              :  Move 1/4 screen up&#xA;-  &#34;n&#34; &amp;lt;c-d&amp;gt;              :  Move 1/4 screen down&#xA;-  &#34;n&#34; &amp;lt;m-k&amp;gt;              :  Reduce horizontal split screen size&#xA;-  &#34;n&#34; &amp;lt;m-j&amp;gt;              :  Increase horizontal split screen size&#xA;-  &#34;n&#34; &amp;lt;m-h&amp;gt;              :  Reduce vertical split screen size&#xA;-  &#34;n&#34; &amp;lt;m-l&amp;gt;              :  Increase vertical split screen size&#xA;-  &#34;c&#34; &amp;lt;m-p&amp;gt;              :  Look up history&#xA;-  &#34;c&#34; &amp;lt;m-n&amp;gt;              :  Look down history&#xA;-  &#34;n&#34;, &#34;v&#34; k             :  Move up one line&#xA;-  &#34;n&#34;, &#34;v&#34; j             :  Move down one line&#xA;-  &#34;n&#34;, &#34;v&#34; H             :  Move to the first character at the beginning of the line&#xA;-  &#34;n&#34;, &#34;v&#34; L             :  Move to the last character at the end of the line&#xA;-  &#34;i&#34;, &#34;c&#34;, &#34;t&#34; &amp;lt;m-w&amp;gt;    :  Jump to next word in insert mode&#xA;-  &#34;i&#34;, &#34;c&#34;, &#34;t&#34; &amp;lt;m-b&amp;gt;    :  Jump to previous word in insert mode&#xA;-  &#34;i&#34;, &#34;c&#34;, &#34;t&#34; &amp;lt;m-j&amp;gt;  :  Move cursor down in insert mode &#34;i&#34;, &#34;c&#34;, &#34;t&#34; &amp;lt;m-k&amp;gt;  :  Move cursor up in insert mode&#xA;-  &#34;i&#34;, &#34;c&#34;, &#34;t&#34; &amp;lt;m-h&amp;gt;    :  Move cursor left in insert mode&#xA;-  &#34;i&#34;, &#34;c&#34;, &#34;t&#34; &amp;lt;m-l&amp;gt;    :  Move cursor right in insert mode&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manager-keymap&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;1&lt;/code&gt;, &lt;code&gt;&amp;lt;leader&amp;gt;2&lt;/code&gt;, &lt;code&gt;&amp;lt;leader&amp;gt;3&lt;/code&gt;, &lt;code&gt;&amp;lt;leader&amp;gt;4&lt;/code&gt; Can open some specific functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- &#34;n&#34; &amp;lt;leader&amp;gt;1  : Open File Explorer&#xA;- &#34;n&#34; &amp;lt;leader&amp;gt;2  : Open Outilne Explorer&#xA;- &#34;n&#34; &amp;lt;leader&amp;gt;3  : Open Undo Explorer&#xA;- &#34;n&#34; &amp;lt;leader&amp;gt;4  : Open Database Explorer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File Exporer is &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;Nvim-tree&lt;/a&gt;, you can press &lt;code&gt;g?&lt;/code&gt; for help.&lt;/li&gt; &#xA; &lt;li&gt;Outline Explorer is &lt;a href=&#34;https://github.com/stevearc/aerial.nvim&#34;&gt;aerial&lt;/a&gt;, you can press &lt;code&gt;?&lt;/code&gt; for help.&lt;/li&gt; &#xA; &lt;li&gt;Undo Explorer is &lt;a href=&#34;https://github.com/mbbill/undotree&#34;&gt;undotree&lt;/a&gt;, you can press &lt;code&gt;?&lt;/code&gt; for help.&lt;/li&gt; &#xA; &lt;li&gt;Database Explorer is &lt;a href=&#34;https://github.com/kristijanhusak/vim-dadbod-ui&#34;&gt;vim-dadbod-ui&lt;/a&gt;, you can press &lt;code&gt;?&lt;/code&gt; for help.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Buffer-keymap&lt;/h3&gt; &#xA;&lt;p&gt;It is a very good idea to manage all buffers via the &lt;a href=&#34;https://github.com/akinsho/bufferline.nvim&#34;&gt;bufferline&lt;/a&gt; plugins , here is my keymap, usually they start with &lt;code&gt;&amp;lt;leader&amp;gt;b&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-  &#34;n&#34; &amp;lt;c-q&amp;gt;       :  Close current buffer&#xA;-  &#34;n&#34; &amp;lt;c-h&amp;gt;       :  Go to left buffer&#xA;-  &#34;n&#34; &amp;lt;c-l&amp;gt;       :  Go to right buffer&#xA;-  &#34;n&#34; &amp;lt;c-e&amp;gt;       :  Move current buffer to left&#xA;-  &#34;n&#34; &amp;lt;c-y&amp;gt;       :  Move current buffer to right&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;bn  :  Create new buffer&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;bh  :  Close all left buffers&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;bl  :  Close all right buffers&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;bo  :  Close all other buffers&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;ba  :  Close all buffers&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;bt  :  Go to buffer *&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;bs  :  Buffers sort (by extension)&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;b1  :  Go to buffer 1&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;b2  :  Go to buffer 2&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;b3  :  Go to buffer 3&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;b4  :  Go to buffer 4&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;b5  :  Go to buffer 5&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;b6  :  Go to buffer 6&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;b7  :  Go to buffer 7&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;b8  :  Go to buffer 8&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;b9  :  Go to buffer 9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LSP-keymap&lt;/h3&gt; &#xA;&lt;p&gt;LSP-related keys are usually prefixed with &lt;code&gt;g&lt;/code&gt; or &lt;code&gt;&amp;lt;leader&amp;gt;c&lt;/code&gt;, I prefer to use &lt;code&gt;&amp;lt;leader&amp;gt;c&lt;/code&gt; as &lt;code&gt;code operate&lt;/code&gt; to memorize. Here are the default keys I bind:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-  &#34;n&#34; &amp;lt;leader&amp;gt;ca  :  Show code action&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;cn  :  Variable renaming&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;cf  :  Format buffer&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;cs  :  Enable or disable spell checking&#xA;-  &#34;n&#34; gI          :  Go to implementations&#xA;-  &#34;n&#34; gD          :  Go to type definitions&#xA;-  &#34;n&#34; gd          :  Go to definitions&#xA;-  &#34;n&#34; gr          :  Go to references&#xA;-  &#34;n&#34; gh          :  Show help information&#xA;-  &#34;n&#34; go          :  Show Workspace Diagnostics&#xA;-  &#34;n&#34; [g          :  Jump to prev diagnostic&#xA;-  &#34;n&#34; ]g          :  Jump to next diagnostic&#xA;-  &#34;i&#34; &amp;lt;c-j&amp;gt;       :  Toggle signature help&#xA;- &#34;n&#34;, &#34;i&#34; &amp;lt;c-f&amp;gt;   : Scroll down floating window (only for lsp-hover and lsp-signature-help)&#xA;- &#34;n&#34;, &#34;i&#34; &amp;lt;c-d&amp;gt;   : Scroll up floating window (only for lsp-hover and lsp-signature-help)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, there is a command &lt;code&gt;&amp;lt;leader&amp;gt;cy&lt;/code&gt; that can be used to clear all cached YANK records.&lt;/p&gt; &#xA;&lt;h3&gt;Code-Completion&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s nice to use &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; with &lt;a href=&#34;https://github.com/hrsh7th/vim-vsnip&#34;&gt;vim-vsnip&lt;/a&gt; for code completion, it&#39;s very fast and stable, here are my default keybindings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- &#34;i&#34; &amp;lt;c-k&amp;gt; : Toggle completion menu&#xA;- &#34;i&#34; &amp;lt;c-p&amp;gt; : select the previous completion suggestion&#xA;- &#34;i&#34; &amp;lt;c-n&amp;gt; : select the next completion suggestion&#xA;- &#34;i&#34; &amp;lt;c-d&amp;gt; : select the fifth completion suggestion below&#xA;- &#34;i&#34; &amp;lt;c-u&amp;gt; : select the fifth completion suggestion above&#xA;- &#34;i&#34; &amp;lt;cr&amp;gt;  : confirm current suggestion&#xA;- &#34;i&#34; &amp;lt;tab&amp;gt; : similar to vscode, if you do not enter the completion menu, select the next item, if you enter the completion menu, select the current item&#xA;- &#34;i&#34; &amp;lt;c-b&amp;gt; : scroll up the floating window&#xA;- &#34;i&#34; &amp;lt;c-f&amp;gt; : scroll down the floating window&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;s-tab&amp;gt;&lt;/code&gt; can also be used in fragments, which behave the same as in vscode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- &#34;i&#34; &amp;lt;tab&amp;gt; : jump backward&#xA;- &#34;i&#34; &amp;lt;s-tab&amp;gt; : jump forward&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debug&lt;/h3&gt; &#xA;&lt;p&gt;Code debugging currently only supports Python and Golang, through &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; and &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;https://github.com/rcarriga/nvim-dap-ui&lt;/a&gt; And the combination of &lt;a href=&#34;https://github.com/theHamsta/nvim-dap-virtual-text&#34;&gt;nvim-dap-virtual-text&lt;/a&gt; gives me an IDE-like debugging experience.&lt;/p&gt; &#xA;&lt;p&gt;I use &lt;code&gt;&amp;lt;leader&amp;gt;d&lt;/code&gt; to enable code debugging, all &lt;code&gt;&amp;lt;f&amp;gt;&lt;/code&gt; keys will only take effect after you actually enable debug mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-  &#34;n&#34; &amp;lt;leader&amp;gt;db  :  Mark or delete breakpoints&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;dc  :  Clear breakpoints in the current buffer&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;du  :  Toggle debug ui&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;de  :  Execute debug expressions&#xA;-  &#34;n&#34; &amp;lt;F5&amp;gt;        :  Enable debugging or jump to the next breakpoint&#xA;-  &#34;n&#34; &amp;lt;F6&amp;gt;        :  Step into&#xA;-  &#34;n&#34; &amp;lt;F7&amp;gt;        :  Step over&#xA;-  &#34;n&#34; &amp;lt;F8&amp;gt;        :  Step out&#xA;-  &#34;n&#34; &amp;lt;F9&amp;gt;        :  Rerun debug&#xA;-  &#34;n&#34; &amp;lt;F10&amp;gt;       :  Close debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can enter expressions by pressing &lt;code&gt;i&lt;/code&gt; in the &lt;code&gt;repl&lt;/code&gt; window.&lt;/p&gt; &#xA;&lt;h3&gt;Find&lt;/h3&gt; &#xA;&lt;p&gt;All lookups are prefixed with &lt;code&gt;&amp;lt;leader&amp;gt;f&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently it supports some of the following searches, and you can define more search methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-  &#34;n&#34; &amp;lt;leader&amp;gt;ff  :  Find files in the current workspace&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;fg  :  Find string in the current workspace&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;fo  :  Find telescope history&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;fh  :  Find last lookup&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;ft  :  Find all help document tags&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;fm  :  Find marks in the current workspace&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;fi  :  Find all neovim highlights&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;fb  :  Find all buffers&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;f/  :  Find all search history&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;f:  :  Find all command history&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;fn  :  Find notices history&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;fd  :  Find todo tag in the current workspace&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;fy  :  Find Clipboard History&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;fc  :  Find the current file and open it in file explorer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They are provided by the following plugins respectively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/todo-comments.nvim&#34;&gt;todo-comments.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AckslD/nvim-neoclip.lua&#34;&gt;nvim-neoclip.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Git&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;&amp;lt;leader&amp;gt;g&lt;/code&gt; to view Git information in the current file, for Git management, I would use lazygit instead of any plugin for neovim.&lt;/p&gt; &#xA;&lt;p&gt;These functions are provided by &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-  &#34;n&#34; [c               :  Jump to the prev hunk&#xA;-  &#34;n&#34; ]c               :  Jump to the next hunk&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;gl       :  Toggle current line blame&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;gh       :  Preview current hunk&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;gH       :  Show current block blame&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;gd       :  Open deff view&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;gD       :  Show deleted lines&#xA;-  &#34;n&#34;, &#34;v&#34; &amp;lt;leader&amp;gt;gr  :  Reset current hunk&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;gR       :  Reset current buffer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Replace&lt;/h3&gt; &#xA;&lt;p&gt;The full workspace fuzzy string search and replace of vscode is very easy to use, there is also a corresponding plugin in neovim, I set its prefix key to &lt;code&gt;&amp;lt;leader&amp;gt;r&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, after entering the fuzzy search and replace interface, you can use &lt;code&gt;?&lt;/code&gt; to get more help.&lt;/p&gt; &#xA;&lt;p&gt;This functionality is provided by &lt;a href=&#34;https://github.com/nvim-pack/nvim-spectre&#34;&gt;nvim-spectre&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-  &#34;n&#34; &amp;lt;leader&amp;gt;rp  :  Replace characters in all files in the current workspace&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;rf  :  Replace all characters in the current file&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;rw  :  Replace the character under the cursor in all files under the current workspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Session&lt;/h3&gt; &#xA;&lt;p&gt;Restoring the working state after reopening the IDE is a feature that modern editors should have. You can directly use &lt;code&gt;&amp;lt;leader&amp;gt;sl&lt;/code&gt; to restore the last session record.&lt;/p&gt; &#xA;&lt;p&gt;In addition, &lt;code&gt;&amp;lt;leader&amp;gt;s&lt;/code&gt; is also bound to some other keys.&lt;/p&gt; &#xA;&lt;p&gt;This functionality is provided by &lt;a href=&#34;https://github.com/olimorris/persisted.nvim&#34;&gt;persisted.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-  &#34;n&#34; &amp;lt;leader&amp;gt;ss  :  Save session&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;sd  :  Delete session&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;sl  :  Load session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Terminal&lt;/h3&gt; &#xA;&lt;p&gt;The prefix key for the integrated terminal is &lt;code&gt;&amp;lt;leader&amp;gt;t&lt;/code&gt;, the integrated terminal experience brought by the &lt;a href=&#34;https://github.com/akinsho/toggleterm.nvim&#34;&gt;toggleterm.nvim&lt;/a&gt; plugin is very good:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- &#34;n&#34; &amp;lt;leader&amp;gt;tt : Toggle bottom or vertical terminal&#xA;- &#34;n&#34; &amp;lt;leader&amp;gt;tf : Toggle floating terminal&#xA;- &#34;n&#34; &amp;lt;leader&amp;gt;tv : Toggle vertical terminal&#xA;- &#34;n&#34; &amp;lt;leader&amp;gt;tg : Toggle lazygit terminal (requires lazygit installed)&#xA;- &#34;n&#34; &amp;lt;leader&amp;gt;ta : Toggle all terminal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The floating terminal and lazygit terminal can only open one, but the bottom terminal and side terminal can open many.&lt;/p&gt; &#xA;&lt;p&gt;The default terminal number opened by &lt;code&gt;&amp;lt;leader&amp;gt;tt&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, if you want to open a new terminal, please enter &lt;code&gt;{count}&amp;lt;leader&amp;gt;tt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Notice! floating terminal number is 120, lazygit terminal number is 130.&lt;/p&gt; &#xA;&lt;h3&gt;Translate&lt;/h3&gt; &#xA;&lt;p&gt;Well, translated commands are also prefixed with &lt;code&gt;&amp;lt;leader&amp;gt;t&lt;/code&gt;. &lt;a href=&#34;https://github.com/uga-rosa/translate.nvim&#34;&gt;translate.nvim&lt;/a&gt; is definitely the best translation plugin I&#39;ve ever seen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-  &#34;n&#34;, &#34;v&#34; &amp;lt;leader&amp;gt;tcs  :  Translate English to Chinese and open in split window&#xA;-  &#34;n&#34;, &#34;v&#34; &amp;lt;leader&amp;gt;tcr  :  Translate English to Chinese and replace English&#xA;-  &#34;n&#34;, &#34;v&#34; &amp;lt;leader&amp;gt;tcf  :  Translate English to Chinese and open in float window&#xA;-  &#34;n&#34;, &#34;v&#34; &amp;lt;leader&amp;gt;tci  :  Translate English to Chinese and insert to next line&#xA;-  &#34;n&#34;, &#34;v&#34; &amp;lt;leader&amp;gt;tcc  :  Translate English to Chinese and copy result to clipboard&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;tcb       :  Translate English comment to Chinese and open in float window&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;tcw       :  Translate English word to Chinese and open in float window&#xA;&#xA;-  &#34;n&#34;, &#34;v&#34; &amp;lt;leader&amp;gt;tes  :  Translate Chinese to English and open in split window&#xA;-  &#34;n&#34;, &#34;v&#34; &amp;lt;leader&amp;gt;ter  :  Translate Chinese to English and replace Chinese&#xA;-  &#34;n&#34;, &#34;v&#34; &amp;lt;leader&amp;gt;tef  :  Translate Chinese to English and open in float window&#xA;-  &#34;n&#34;, &#34;v&#34; &amp;lt;leader&amp;gt;tei  :  Translate Chinese to English and insert to next line&#xA;-  &#34;n&#34;, &#34;v&#34; &amp;lt;leader&amp;gt;tec  :  Translate Chinese to English and copy result to clipboard&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;teb       :  Translate Chinese comment to English and open in float window&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;tew       :  Translate Chinese word to English and open in float window&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change the language, you can open the &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/configure/plugins/nv_translate.lua&#34;&gt;nvim/lua/configure/plugins/nv_translate.lua&lt;/a&gt; file and change the mapping.&lt;/p&gt; &#xA;&lt;p&gt;Finally, don&#39;t forget to modify the key grouping description in the &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/configure/plugins/nv_which-key.lua&#34;&gt;nvim/lua/configure/plugins/nv_which-key.lua&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Upload&lt;/h3&gt; &#xA;&lt;p&gt;There are some buttons that can upload pictures to the Internet, and a makrdown picture link will be generated after the upload is complete。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/askfiy/nvim-picgo&#34;&gt;nvim-picgo&lt;/a&gt; is the first neovim plugin I wrote myself and I love it.&lt;/p&gt; &#xA;&lt;p&gt;The prefix is &lt;code&gt;&amp;lt;leader&amp;gt;u&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-  &#34;n&#34; &amp;lt;leader&amp;gt;uc  :  Upload image from clipboard&#xA;-  &#34;n&#34; &amp;lt;leader&amp;gt;uf  :  Upload image from disk file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple-cursors&lt;/h3&gt; &#xA;&lt;p&gt;It is common to quickly select a range of words and make changes. Here are the key bindings for multi-cursor mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;n&#34; &amp;lt;tab&amp;gt; : Toggle between normal and visual mode&#xA;&#34;n&#34; &amp;lt;c-n&amp;gt; : Select down&#xA;&#34;n&#34; &amp;lt;c-p&amp;gt; : Select up&#xA;&#34;n&#34; &amp;lt;c-s&amp;gt; : Skip selection&#xA;&#34;n&#34; &amp;lt;c-d&amp;gt; : Delete the current selection&#xA;&#34;n&#34; &amp;lt;m-p&amp;gt; : Create cursor down&#xA;&#34;n&#34; &amp;lt;m-n&amp;gt; : Create cursor up&#xA;&#34;n&#34; [     : Go to Prev&#xA;&#34;n&#34; ]     : Go to next&#xA;&#34;n&#34; &amp;lt;esc&amp;gt; : Exit Multiple cursors mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The plugin that provides multi-cursor mode is &lt;a href=&#34;https://github.com/mg979/vim-visual-multi&#34;&gt;vim-visual-multi&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Surround&lt;/h3&gt; &#xA;&lt;p&gt;It is very common to change &lt;code&gt;&#34;&lt;/code&gt; to &lt;code&gt;&#39;&lt;/code&gt; or &lt;code&gt;()&lt;/code&gt; to &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can make quick changes using the following keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;n&#34; ys{range}{char} : Add Surround&#xA;&#34;n&#34; cs{char}{char}  : Changne Surround&#xA;&#34;n&#34; cq              : Toggle Surround&#xA;&#34;n&#34; ds{char}        : Delete Surround&#xA;&#34;v&#34; s               : Add Surround&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature is provided by &lt;a href=&#34;https://github.com/ur4ltz/surround.nvim&#34;&gt;surround.nvim&lt;/a&gt;, in addition, you can also use the &lt;code&gt;.&lt;/code&gt; command to repeat the last modified surround work, which is provided by &lt;a href=&#34;https://github.com/tpope/vim-repeat&#34;&gt;vim-repeat &lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Comment&lt;/h3&gt; &#xA;&lt;p&gt;Good code needs to use comments, you can press the following shortcut keys to quickly add comments：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;n&#34; gcc : Toggle line comment&#xA;&#34;n&#34; gcb : Toggle block comment&#xA;&#34;n&#34; gca : Insert line comment to line end&#xA;&#34;n&#34; gcj : Insert line comment to next line&#xA;&#34;n&#34; gck : Insert line comment to previous line&#xA;&#34;n&#34; gb{range} : Switch the specified line to a block comment&#xA;&#xA;&#34;v&#34; gc  : Toggle line comment&#xA;&#34;v&#34; gb  : Toggle block comment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, in some single-file multi-language environments (such as Vue), it also supports switching annotations according to context.&lt;/p&gt; &#xA;&lt;p&gt;Well, these functions are provided by &lt;a href=&#34;https://github.com/numToStr/Comment.nvim&#34;&gt;Comment.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/JoosepAlviste/nvim-ts-context-commentstring&#34;&gt;nvim-ts-context-commentstring&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Switch&lt;/h3&gt; &#xA;&lt;p&gt;It is common to quickly change &lt;code&gt;True&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;. Switching can be done quickly with &lt;code&gt;gs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to add some words, you can edit the &lt;a href=&#34;https://raw.githubusercontent.com/askfiy/nvim/master/lua/configure/plugins/nv_switch.lua&#34;&gt;nvim/lua/configure/plugins/nv_switch.lua&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;In addition, using &lt;code&gt;gS&lt;/code&gt; can quickly switch variable naming methods, such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;variable_example =&amp;gt; variableExample&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, this feature is supported without the &lt;a href=&#34;https://github.com/AndrewRadev/switch.vim&#34;&gt;switch&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;h3&gt;Emment&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;&amp;lt;c-e&amp;gt;,&lt;/code&gt; to quickly expand emment fragments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;c-e&amp;gt;&lt;/code&gt; has some other functions, but it only works with certain types of files:&lt;/p&gt; &#xA;&lt;h3&gt;Motions&lt;/h3&gt; &#xA;&lt;p&gt;With the &lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;Hop&lt;/a&gt; plugin, you can quickly jump to any position in the buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-  &#34;n&#34;, &#34;v&#34; ss  :  Jump to word head&#xA;-  &#34;n&#34;, &#34;v&#34; sl  :  Jump to line&#xA;-  &#34;n&#34;, &#34;v&#34; sf  :  Jump to search char on buffer&#xA;-  &#34;n&#34;, &#34;v&#34; sc  :  Jump to search char on current line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Drawing&lt;/h3&gt; &#xA;&lt;p&gt;Drawing with neovim is a cool feature when writing Markdown documents.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jbyuki/venn.nvim&#34;&gt;venn&lt;/a&gt; implements this very cool feature.&lt;/p&gt; &#xA;&lt;p&gt;Press &lt;code&gt;&amp;lt;leader&amp;gt;5&lt;/code&gt; to open Venn, then try &lt;code&gt;&amp;lt;c-j/k/h/l&amp;gt;&lt;/code&gt; to draw lines.&lt;/p&gt; &#xA;&lt;p&gt;Select an area with &lt;code&gt;&amp;lt;c-v&amp;gt;&lt;/code&gt; and press &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; you will get a solid or hollow box.&lt;/p&gt; &#xA;&lt;h3&gt;Code image&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;&amp;lt;leader&amp;gt;ci&lt;/code&gt; in normal or visual mode to generate code screenshots, requires a network link.&lt;/p&gt; &#xA;&lt;h3&gt;Copillot&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;&amp;lt;c-l&amp;gt;&lt;/code&gt; to get copillot&#39;s suggestions in insert mode.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;&amp;lt;leader&amp;gt;cp&lt;/code&gt; to open the co-pilot&#39;s suggestion panel (normal mode).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PhoenixAceVFX/Roblox-Scripts</title>
    <updated>2022-06-03T02:14:22Z</updated>
    <id>tag:github.com,2022-06-03:/PhoenixAceVFX/Roblox-Scripts</id>
    <link href="https://github.com/PhoenixAceVFX/Roblox-Scripts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of every roblox script ive aquired. I DO NOT UPDATE OR MAINTAIN THESE.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Project-Sloth/ps-dispatch</title>
    <updated>2022-06-03T02:14:22Z</updated>
    <id>tag:github.com,2022-06-03:/Project-Sloth/ps-dispatch</id>
    <link href="https://github.com/Project-Sloth/ps-dispatch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;QBCore Dispatch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Beta Released&lt;/h1&gt; &#xA;&lt;p&gt;Integrated with &lt;a href=&#34;https://github.com/Project-Sloth/ps-mdt&#34;&gt;https://github.com/Project-Sloth/ps-mdt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For all support questions, ask in our Discord support chat. Do not create issues if you need help. Issues are for bug reporting and new features only.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.discord.gg/projectsloth&#34;&gt;https://www.discord.gg/projectsloth&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download ZIP&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop resource into your server files&lt;/li&gt; &#xA; &lt;li&gt;Start resource through server.cfg&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop sounds folder into interact-sound\client\html\sounds&lt;/li&gt; &#xA; &lt;li&gt;Restart your server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Alert Exports&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;- exports[&#39;ps-dispatch&#39;]:VehicleShooting(vehicle)&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:Shooting()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:OfficerDown()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:SpeedingVehicle(vehicle)&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:Fight()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:InjuriedPerson()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:StoreRobbery(camId)&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:FleecaBankRobbery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:PaletoBankRobbery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:PacificBankRobbery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:PrisonBreak()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:VangelicoRobbery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:HouseRobbery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:PrisonBreak()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:DrugSale()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:ArtGalleryRobbery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:HumaneRobery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:TrainRobbery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:VanRobbery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:UndergroundRobbery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:DrugBoatRobbery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:UnionRobbery()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:YachtHeist()&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:CarBoosting(vehicle)&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:CarJacking(vehicle)&#xA;&#xA;- exports[&#39;ps-dispatch&#39;]:VehicleTheft(vehicle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Steps to Create New Alert&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a client event that will be triggered from whatever script you want&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function FleecaBankRobbery()&#xA;    local currentPos = GetEntityCoords(PlayerPedId())&#xA;    local locationInfo = getStreetandZone(currentPos)&#xA;    local gender = GetPedGender()&#xA;    TriggerServerEvent(&#34;dispatch:server:notify&#34;,{&#xA;        dispatchcodename = &#34;bankrobbery&#34;, -- has to match the codes in sv_dispatchcodes.lua so that it generates the right blip&#xA;        dispatchCode = &#34;10-90&#34;,&#xA;        firstStreet = locationInfo,&#xA;        gender = gender,&#xA;        model = nil,&#xA;        plate = nil,&#xA;        priority = 2, -- priority&#xA;        firstColor = nil,&#xA;        automaticGunfire = false,&#xA;        origin = {&#xA;            x = currentPos.x,&#xA;            y = currentPos.y,&#xA;            z = currentPos.z&#xA;        },&#xA;        dispatchMessage = &#34;Fleeca Bank Robbery&#34;, -- message&#xA;        job = {&#34;police&#34;} -- jobs that will get the alerts&#xA;    })&#xA;end exports(&#39;FleecaBankRobbery&#39;, FleecaBankRobbery)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add Dispatch Code in sv_dispatchcodes.lua for the particular robbery to display the blip&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;[&#34;storerobbery&#34;] is the dispatchcodename you passed with the TriggerServerEvent in step 1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#x9;[&#34;bankrobbery&#34;] =  {displayCode = &#39;10-90&#39;, description = &#34;Fleeca Bank Robbery In Progress&#34;, radius = 0, recipientList = {&#39;police&#39;}, blipSprite = 500, blipColour = 2, blipScale = 1.5, blipLength = 2, sound = &#34;robberysound&#34;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Information about each parameter is in the file.&lt;/p&gt; &#xA;&lt;h1&gt;Alerts with Vehicle Information&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you want to display vehicle information with a particular alert, you need to pass the vehicle along with the exports like this&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;exports[&#39;ps-dispatch&#39;]:TestVehicleAlert(vehicle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and its function in ps-dispatch would look like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function TestVehicleAlert(vehicle)&#xA;    local vehdata = vehicleData(vehicle)&#xA;    local currentPos = GetEntityCoords(PlayerPedId())&#xA;    local locationInfo = getStreetandZone(currentPos)&#xA;    local heading = getCardinalDirectionFromHeading()&#xA;    TriggerServerEvent(&#34;dispatch:server:notify&#34;,{&#xA;        dispatchcodename = &#34;speeding&#34;, -- has to match the codes in sv_dispatchcodes.lua so that it generates the right blip&#xA;        dispatchCode = &#34;10-11&#34;,&#xA;        firstStreet = locationInfo,&#xA;        model = vehdata.name, -- vehicle name&#xA;        plate = vehdata.plate, -- vehicle plate&#xA;        priority = 2, &#xA;        firstColor = vehdata.colour, -- vehicle color&#xA;        heading = heading, &#xA;        automaticGunfire = false,&#xA;        origin = {&#xA;            x = currentPos.x,&#xA;            y = currentPos.y,&#xA;            z = currentPos.z&#xA;        },&#xA;        dispatchMessage = &#34;Speeding Vehicle&#34;,&#xA;        job = {&#34;police&#34;}&#xA;    })&#xA;end &#xA;&#xA;exports(&#39;SpeedingVehicle&#39;, SpeedingVehicle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rest steps will be similar as mentioned above in Steps to create alerts.&lt;/p&gt; &#xA;&lt;h1&gt;Work to be done&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hunting Zones&lt;/li&gt; &#xA; &lt;li&gt;Locales for alerts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;DMCA Protection Certificate&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/82112471/169714852-1c4597b8-0ed3-4b56-a439-d0462681e3ff.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.dmca.com/r/d03ek52&#34;&gt;https://www.dmca.com/r/d03ek52&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>