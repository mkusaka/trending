<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-20T01:51:11Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kylechui/nvim-surround</title>
    <updated>2023-08-20T01:51:11Z</updated>
    <id>tag:github.com,2023-08-20:/kylechui/nvim-surround</id>
    <link href="https://github.com/kylechui/nvim-surround" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add/change/delete surrounding delimiter pairs with ease. Written with ‚ù§Ô∏è in Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-surround&lt;/h1&gt; &#xA;&lt;p&gt;Surround selections, stylishly &lt;span&gt;üòé&lt;/span&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;video src=&#34;https://user-images.githubusercontent.com/48545987/178679494-c7d58bdd-d8ca-4802-a01c-a9444b8b882f.mp4&#34; type=&#34;video/mp4&#34;&gt;&lt;/video&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ú®&lt;/span&gt; Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add/delete/change surrounding pairs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Function calls and HTML tags out-of-the-box&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dot-repeat previous actions&lt;/li&gt; &#xA; &lt;li&gt;Set buffer-local mappings and surrounds&lt;/li&gt; &#xA; &lt;li&gt;Jump to the &lt;em&gt;nearest&lt;/em&gt; surrounding pair for modification&lt;/li&gt; &#xA; &lt;li&gt;Use a single character as an alias for several text-objects &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;E.g. &lt;code&gt;q&lt;/code&gt; is aliased to &lt;code&gt;`,&#39;,&#34;&lt;/code&gt;, so &lt;code&gt;csqb&lt;/code&gt; replaces the &lt;em&gt;nearest&lt;/em&gt; set of quotes with parentheses&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Surround using powerful pairs that depend on user input&lt;/li&gt; &#xA; &lt;li&gt;Modify custom surrounds &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;First-class support for Vim motions, Lua patterns, and Tree-sitter nodes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Highlight selections for visual feedback&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üîí&lt;/span&gt; Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases&#34;&gt;Neovim 0.8+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Recommended] If &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; is installed, then Tree-sitter nodes may be surrounded and modified, in addition to just Vim motions and Lua patterns&lt;/li&gt; &#xA; &lt;li&gt;[Recommended] If &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-textobjects&#34;&gt;nvim-treesitter-textobjects&lt;/a&gt; is installed, then Tree-sitter text-objects can be used to define surrounds, simplifying configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üì¶&lt;/span&gt; Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install this plugin using your favorite plugin manager, and then call &lt;code&gt;require(&#34;nvim-surround&#34;).setup()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;kylechui/nvim-surround&#34;,&#xA;    version = &#34;*&#34;, -- Use for stability; omit to use `main` branch for the latest features&#xA;    event = &#34;VeryLazy&#34;,&#xA;    config = function()&#xA;        require(&#34;nvim-surround&#34;).setup({&#xA;            -- Configuration here, or leave empty to use defaults&#xA;        })&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;    &#34;kylechui/nvim-surround&#34;,&#xA;    tag = &#34;*&#34;, -- Use for stability; omit to use `main` branch for the latest features&#xA;    config = function()&#xA;        require(&#34;nvim-surround&#34;).setup({&#xA;            -- Configuration here, or leave empty to use defaults&#xA;        })&#xA;    end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;üöÄ&lt;/span&gt; Usage&lt;/h2&gt; &#xA;&lt;p&gt;The three &#34;core&#34; operations of &lt;code&gt;add&lt;/code&gt;/&lt;code&gt;delete&lt;/code&gt;/&lt;code&gt;change&lt;/code&gt; can be done with the keymaps &lt;code&gt;ys{motion}{char}&lt;/code&gt;, &lt;code&gt;ds{char}&lt;/code&gt;, and &lt;code&gt;cs{target}{replacement}&lt;/code&gt;, respectively. For the following examples, &lt;code&gt;*&lt;/code&gt; will denote the cursor position:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;    Old text                    Command         New text&#xA;--------------------------------------------------------------------------------&#xA;    surr*ound_words             ysiw)           (surround_words)&#xA;    *make strings               ys$&#34;            &#34;make strings&#34;&#xA;    [delete ar*ound me!]        ds]             delete around me!&#xA;    remove &amp;lt;b&amp;gt;HTML t*ags&amp;lt;/b&amp;gt;    dst             remove HTML tags&#xA;    &#39;change quot*es&#39;            cs&#39;&#34;            &#34;change quotes&#34;&#xA;    &amp;lt;b&amp;gt;or tag* types&amp;lt;/b&amp;gt;        csth1&amp;lt;CR&amp;gt;       &amp;lt;h1&amp;gt;or tag types&amp;lt;/h1&amp;gt;&#xA;    delete(functi*on calls)     dsf             function calls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detailed information on how to use this plugin can be found in &lt;a href=&#34;https://github.com/kylechui/nvim-surround/raw/main/doc/nvim-surround.txt&#34;&gt;&lt;code&gt;:h nvim-surround.usage&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚öô&lt;/span&gt; Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The default configuration is found &lt;a href=&#34;https://github.com/kylechui/nvim-surround/raw/main/lua/nvim-surround/config.lua&#34;&gt;here&lt;/a&gt;. Simply call &lt;code&gt;require(&#34;nvim-surround&#34;).setup&lt;/code&gt; or &lt;code&gt;require(&#34;nvim-surround&#34;).buffer_setup&lt;/code&gt; with the desired options.&lt;/p&gt; &#xA;&lt;p&gt;More information on how to configure this plugin can be found in &lt;a href=&#34;https://github.com/kylechui/nvim-surround/raw/main/doc/nvim-surround.txt&#34;&gt;&lt;code&gt;:h nvim-surround.configuration&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/kylechui/nvim-surround/raw/main/CONTRIBUTING.md&#34;&gt;the contributing file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shoutouts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;vim-surround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.surround&#34;&gt;mini.surround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/machakann/vim-sandwich&#34;&gt;vim-sandwich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Like this project? Give it a &lt;span&gt;‚≠ê&lt;/span&gt; to show your support!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mfussenegger/nvim-lint</title>
    <updated>2023-08-20T01:51:11Z</updated>
    <id>tag:github.com,2023-08-20:/mfussenegger/nvim-lint</id>
    <link href="https://github.com/mfussenegger/nvim-lint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An asynchronous linter plugin for Neovim complementary to the built-in Language Server Protocol support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lint&lt;/h1&gt; &#xA;&lt;p&gt;An asynchronous linter plugin for Neovim (&amp;gt;= 0.6.0) complementary to the built-in Language Server Protocol support.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation &amp;amp; Goals&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;ale&lt;/a&gt; we already got an asynchronous linter, why write yet another one?&lt;/p&gt; &#xA;&lt;p&gt;Because &lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;ale&lt;/a&gt; reports diagnostics with its own home grown solution and even includes its own language server client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-lint&lt;/code&gt; instead uses the &lt;code&gt;vim.diagnostic&lt;/code&gt; module to present diagnostics in the same way the language client built into neovim does. &lt;code&gt;nvim-lint&lt;/code&gt; is meant to fill the gaps for languages where either no language server exists, or where standalone linters provide better results than the available language server do.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Neovim &amp;gt;= 0.6.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-lint&lt;/code&gt; is a plugin. Install it like any other Neovim plugin. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-lint&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-lint&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Configure the linters you want to run per file type. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lint&#39;).linters_by_ft = {&#xA;  markdown = {&#39;vale&#39;,}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then setup a autocmd to trigger linting. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;au BufWritePost * lua require(&#39;lint&#39;).try_lint()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with Lua autocmds (requires 0.7):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd({ &#34;BufWritePost&#34; }, {&#xA;  callback = function()&#xA;    require(&#34;lint&#34;).try_lint()&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some linters require a file to be saved to disk, others support linting &lt;code&gt;stdin&lt;/code&gt; input. For such linters you could also define a more aggressive autocmd, for example on the &lt;code&gt;InsertLeave&lt;/code&gt; or &lt;code&gt;TextChanged&lt;/code&gt; events.&lt;/p&gt; &#xA;&lt;p&gt;If you want to customize how the diagnostics are displayed, read &lt;code&gt;:help vim.diagnostic.config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Available Linters&lt;/h2&gt; &#xA;&lt;p&gt;There is a generic linter called &lt;code&gt;compiler&lt;/code&gt; that uses the &lt;code&gt;makeprg&lt;/code&gt; and &lt;code&gt;errorformat&lt;/code&gt; options of the current buffer.&lt;/p&gt; &#xA;&lt;p&gt;Other dedicated linters that are built-in are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Linter name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Set via &lt;code&gt;makeprg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compiler&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rhysd/actionlint&#34;&gt;actionlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;actionlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.ansible.com/lint.html&#34;&gt;ansible-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ansible_lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://bandit.readthedocs.io/en/latest/&#34;&gt;bandit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bandit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://beancount.github.io/docs/running_beancount_and_generating_reports.html#bean-check&#34;&gt;bean-check&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bean_check&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bufbuild/buf&#34;&gt;buf_lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;buf_lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bazelbuild/buildtools/tree/master/buildifier&#34;&gt;buildifier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;buildifier&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aws-cloudformation/cfn-lint&#34;&gt;cfn-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cfn_lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stelligent/cfn_nag&#34;&gt;cfn_nag&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cfn_nag&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.kernel.org/dev-tools/checkpatch.html&#34;&gt;checkpatch.pl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;checkpatch&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://checkstyle.sourceforge.io/&#34;&gt;checkstyle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;checkstyle&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nongnu.org/chktex&#34;&gt;chktex&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chktex&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://clang.llvm.org/extra/clang-tidy/&#34;&gt;clang-tidy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangtidy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/KDE/clazy&#34;&gt;clazy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/clj-kondo/clj-kondo&#34;&gt;clj-kondo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clj-kondo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cmake-lint/cmake-lint&#34;&gt;cmakelint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cmakelint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/codespell-project/codespell&#34;&gt;codespell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;codespell&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/danmar/cppcheck/&#34;&gt;cppcheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cppcheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cpplint/cpplint&#34;&gt;cpplint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpplint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rrrene/credo&#34;&gt;credo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;credo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/streetsidesoftware/cspell/tree/main/packages/cspell&#34;&gt;cspell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cspell&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.curlylint.org/&#34;&gt;curlylint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;curlylint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://djlint.com/&#34;&gt;djlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;djlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shopify/erb-lint&#34;&gt;erb-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;erb_lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;ESLint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mantoni/eslint_d.js&#34;&gt;eslint_d&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eslint_d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bakpakin/Fennel&#34;&gt;fennel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fennel&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flake8.pycqa.org/&#34;&gt;Flake8&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flake8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/david-a-wheeler/flawfinder&#34;&gt;flawfinder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flawfinder&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://golangci-lint.run/&#34;&gt;Golangci-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;golangcilint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/google/shaderc&#34;&gt;glslc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;glslc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/DirectXShaderCompiler&#34;&gt;DirectX Shader Compiler&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dxc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint&#34;&gt;hadolint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hadolint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ndmitchell/hlint&#34;&gt;hlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.html-tidy.org/&#34;&gt;HTML Tidy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tidy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://inko-lang.org/&#34;&gt;Inko&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;inko&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/janet-lang/janet&#34;&gt;janet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;janet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jshint.com/&#34;&gt;jshint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jshint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zaach/jsonlint&#34;&gt;jsonlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pinterest/ktlint&#34;&gt;ktlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ktlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ctan.org/tex-archive/support/lacheck&#34;&gt;lacheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lacheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://languagetool.org/&#34;&gt;Languagetool&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;languagetool&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mpeterv/luacheck&#34;&gt;luacheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;luacheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DavidAnson/markdownlint&#34;&gt;markdownlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;markdownlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.mathworks.com/help/matlab/ref/mlint.html&#34;&gt;mlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://mypy-lang.org/&#34;&gt;Mypy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mypy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NixOS/nix&#34;&gt;Nix&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvuillam/npm-groovy-lint&#34;&gt;npm-groovy-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm-groovy-lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/priv-kweihmann/oelint-adv&#34;&gt;oelint-adv&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;oelint-adv&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.php.net/&#34;&gt;php&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;phpcs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpcs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://phpmd.org/&#34;&gt;phpmd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpmd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://phpstan.org/&#34;&gt;phpstan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpstan&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/amperser/proselint&#34;&gt;proselint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;proselint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://psalm.dev/&#34;&gt;psalm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;psalm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pycodestyle.pycqa.org/en/latest/&#34;&gt;pycodestyle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pycodestyle&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pydocstyle.org/en/stable/&#34;&gt;pydocstyle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pydocstyle&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pylint.org/&#34;&gt;Pylint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pylint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mgechev/revive&#34;&gt;Revive&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;revive&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/boakley/robotframework-lint&#34;&gt;rflint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rflint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MarketSquare/robotframework-robocop&#34;&gt;robocop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;robocop&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/myint/rstcheck&#34;&gt;rstcheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rstcheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/twolfson/restructuredtext-lint&#34;&gt;rstlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rstlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ruby/ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ruby&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;RuboCop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rubocop&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;Ruff&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ruff&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Kampfkarren/selene&#34;&gt;Selene&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;selene&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.shellcheck.net/&#34;&gt;ShellCheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;shellcheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sqlfluff/sqlfluff&#34;&gt;sqlfluff&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlfluff&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;StandardRB&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;standardrb&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NerdyPepper/statix&#34;&gt;statix check&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;statix&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stylelint/stylelint&#34;&gt;stylelint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;stylelint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://protofire.github.io/solhint/&#34;&gt;Solhint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solhint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nagelfar.sourceforge.net/&#34;&gt;Nagelfar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nagelfar&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/errata-ai/vale&#34;&gt;Vale&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vale&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://verilator.org/guide/latest/&#34;&gt;Verilator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;verilator&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Vimjas/vint&#34;&gt;vint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jendrikseipp/vulture&#34;&gt;vulture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vulture&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/adrienverge/yamllint&#34;&gt;yamllint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yamllint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aquasecurity/tfsec&#34;&gt;tfsec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tfsec&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Custom Linters&lt;/h2&gt; &#xA;&lt;p&gt;You can register custom linters by adding them to the &lt;code&gt;linters&lt;/code&gt; table, but please consider contributing a linter if it is missing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lint&#39;).linters.your_linter_name = {&#xA;  cmd = &#39;linter_cmd&#39;,&#xA;  stdin = true, -- or false if it doesn&#39;t support content input via stdin. In that case the filename is automatically added to the arguments.&#xA;  append_fname = true, -- Automatically append the file name to `args` if `stdin = false` (default: true)&#xA;  args = {}, -- list of arguments. Can contain functions with zero arguments that will be evaluated once the linter is used.&#xA;  stream = nil, -- (&#39;stdout&#39; | &#39;stderr&#39; | &#39;both&#39;) configure the stream to which the linter outputs the linting result.&#xA;  ignore_exitcode = false, -- set this to true if the linter exits with a code != 0 and that&#39;s considered normal.&#xA;  env = nil, -- custom environment table to use with the external process. Note that this replaces the *entire* environment, it is not additive.&#xA;  parser = your_parse_function&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of declaring the linter as a table, you can also declare it as a function which returns the linter table in case you want to dynamically generate some of the properties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;your_parse_function&lt;/code&gt; can be a function which takes two arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;output&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bufnr&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;output&lt;/code&gt; is the output generated by the linter command. The function must return a list of diagnostics as specified in &lt;code&gt;:help diagnostic-structure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can override the environment that the linting process runs in by setting the &lt;code&gt;env&lt;/code&gt; key, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;env = { [&#34;FOO&#34;] = &#34;bar&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this completely overrides the environment, it does not add new environment variables. The one exception is that the &lt;code&gt;PATH&lt;/code&gt; variable will be preserved if it is not explicitly set.&lt;/p&gt; &#xA;&lt;p&gt;You can generate a parse function from a Lua pattern or from an &lt;code&gt;errorformat&lt;/code&gt; using the function in the &lt;code&gt;lint.parser&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;h3&gt;from_errorformat&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;parser = require(&#39;lint.parser&#39;).from_errorformat(errorformat)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function takes a single argument which is the &lt;code&gt;errorformat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;from_pattern&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;parser = require(&#39;lint.parser&#39;).from_pattern(pattern, groups, severity_map, defaults, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function allows to parse the linter&#39;s output using a Lua regular expression pattern.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pattern: The regular expression pattern applied on each line of the output&lt;/li&gt; &#xA; &lt;li&gt;groups: The groups specified by the pattern&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Available groups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lnum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;end_lnum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;end_col&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;message&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;code&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The order of the groups must match the order of the captures within the pattern. An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local pattern = &#39;[^:]+:(%d+):(%d+):(%w+):(.+)&#39;&#xA;local groups = { &#39;lnum&#39;, &#39;col&#39;, &#39;code&#39;, &#39;message&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;severity: A mapping from severity codes to diagnostic codes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;default_severity = {&#xA;[&#39;error&#39;] = vim.diagnostic.severity.ERROR,&#xA;[&#39;warning&#39;] = vim.diagnostic.severity.WARN,&#xA;[&#39;information&#39;] = vim.diagnostic.severity.INFO,&#xA;[&#39;hint&#39;] = vim.diagnostic.severity.HINT,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;defaults: The defaults diagnostic values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;defaults = {[&#34;source&#34;] = &#34;mylint-name&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;opts: Additional options&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;end_col_offset&lt;/code&gt;: offset added to &lt;code&gt;end_col&lt;/code&gt;. Defaults to &lt;code&gt;-1&lt;/code&gt;, assuming that the end-column position is exclusive.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize built-in linter parameters&lt;/h2&gt; &#xA;&lt;p&gt;You can import a linter and modify its properties. An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local phpcs = require(&#39;lint&#39;).linters.phpcs&#xA;phpcs.args = {&#xA;  &#39;-q&#39;,&#xA;  -- &amp;lt;- Add a new parameter here&#xA;  &#39;--report=json&#39;,&#xA;  &#39;-&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;Ale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iamcco/diagnostic-languageserver&#34;&gt;diagnostic-languageserver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development ‚ò¢Ô∏è&lt;/h2&gt; &#xA;&lt;h3&gt;Run tests&lt;/h3&gt; &#xA;&lt;p&gt;Running tests requires &lt;a href=&#34;https://lunarmodules.github.io/busted/&#34;&gt;busted&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/nvim-neorocks/neorocks&#34;&gt;neorocks&lt;/a&gt; or &lt;a href=&#34;https://zignar.net/2023/01/21/using-luarocks-as-lua-interpreter-with-luarocks/&#34;&gt;Using Neovim as Lua interpreter with Luarocks&lt;/a&gt; for installation instructions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;busted tests/&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>yinyue123/DK8sDDosFirewall</title>
    <updated>2023-08-20T01:51:11Z</updated>
    <id>tag:github.com,2023-08-20:/yinyue123/DK8sDDosFirewall</id>
    <link href="https://github.com/yinyue123/DK8sDDosFirewall" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Protect your service from CC attacks, UDP attacks, and traffic flooding attacks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DK8sDDosFirewall&lt;/h1&gt; &#xA;&lt;p&gt;Protect your service from CC attacks, UDP attacks, and traffic flooding attacks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yinyue123/DK8sDDosFirewall&#34;&gt;DK8s DDos Firewall Code Repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/yinyue123/ddos-firewal&#34;&gt;DK8s DDos Firewall Docker Image&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;For more information, please visit &lt;/code&gt;&lt;a href=&#34;https://www.dk8s.com&#34;&gt;https://www.dk8s.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yinyue123/DK8sDDosFirewall/main/wechat.jpg&#34; alt=&#34;WeChat&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>