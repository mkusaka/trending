<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-10T01:55:15Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Steamopollys/Steamodded</title>
    <updated>2024-03-10T01:55:15Z</updated>
    <id>tag:github.com,2024-03-10:/Steamopollys/Steamodded</id>
    <link href="https://github.com/Steamopollys/Steamodded" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Balatro ModLoader&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Steamodded - A Balatro ModLoader&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Steamodded is a mod loader and injector for the game Balatro. It is developed using Lua for the injected code and Python for additional tools. Currently, Steamodded focuses on basic mod loading and injection functionalities and does not include a modding API.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mod Loader:&lt;/strong&gt; Loads mods into the game.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It will load every mods located at the path &lt;code&gt;C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Balatro&lt;/code&gt; (or &lt;code&gt;%appdata%\Balatro\Mods&lt;/code&gt;) into the game. If it&#39;s for now very simple, it will seach for an header at the top of the file that looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;--- STEAMODDED HEADER&#xA;--- MOD_NAME: Your Mod Name&#xA;--- MOD_ID: YourModID&#xA;--- MOD_AUTHOR: [You, AnotherDev, AnotherOtherDev]&#xA;--- MOD_DESCRIPTION: The Description of your Mod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This header is mandatory and the mod loader will not load the mod without it.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;MOD_ID&lt;/code&gt; must be unique and without spaces. The &lt;code&gt;MOD_AUTHOR&lt;/code&gt; mus be an array. Every part of the Header must be present.&lt;/p&gt; &#xA;&lt;p&gt;After the Header validation, the lua code of your mod will be loaded.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Core Management:&lt;/strong&gt; Handles the overall management of mods.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is the hearth of the project, every parts depend on it.&lt;/p&gt; &#xA;&lt;p&gt;For now it&#39;s not doing much outside of displaying basic informations and offering a basic GUI for Steamodded. In the future it will be the most important part of the project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debug Socket:&lt;/strong&gt; Provides a way to output debug data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The debug Socket is used to send debug informtions from the Game and the Mods outside of the Game. Since we can&#39;t launch Balatro linked with a console interface, it&#39;s the most efficient way to provide debug data.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Injector:&lt;/strong&gt; Injects Steamodded into Balatro.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The injector is coded in Python. It&#39;s used to inject every other parts of Steamodded into the base game.&lt;/p&gt; &#xA;&lt;p&gt;It use 2 external tools: &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; for is extreme capability in term of SFX ZIP, permiting Steamodded to modify the executable without breaking it, and &lt;a href=&#34;https://github.com/marsinator358/luajit-decompiler-v2&#34;&gt;luajit-decompiler-v2&lt;/a&gt; that is used for decompiling the code before reinjection. Big thanks to them, they made this project way easier to do.&lt;/p&gt; &#xA;&lt;p&gt;The code is NOT recompiled after injection. It might change in the future but it will stay like that for now.&lt;/p&gt; &#xA;&lt;p&gt;Another Injector is provided using Powershell. It can be used compiled or not compiled. This one also rely on 7zip but will let you handle in someway the installation.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;How to Install Steamodded&lt;/h3&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Classic Injector&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CLOSE THE GAME !&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to the &lt;a href=&#34;https://github.com/Steamopollys/steamodded/releases&#34;&gt;release page&lt;/a&gt; and download the latest release (Your aiming for the &#34;steamodded_injector.exe&#34; download)&lt;/li&gt; &#xA; &lt;li&gt;Drag and Drop your &#34;Balatro.exe&#34; to the executable&lt;/li&gt; &#xA; &lt;li&gt;Wait for it to finish&lt;/li&gt; &#xA; &lt;li&gt;And that&#39;s it! Balatro is now ready to be Modded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use it uncompiled if you know what you are doing ! (This is the Python Version)&lt;/p&gt; &#xA;&lt;h4&gt;PowerShell Injector&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CLOSE THE GAME !&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to the &lt;a href=&#34;https://github.com/Steamopollys/steamodded/releases&#34;&gt;release page&lt;/a&gt; and download the latest release (Your aiming for the &#34;steamodded_PS_injector.exe&#34; download)&lt;/li&gt; &#xA; &lt;li&gt;Launch the injector&lt;/li&gt; &#xA; &lt;li&gt;Install 7zip when asked if necessary&lt;/li&gt; &#xA; &lt;li&gt;Provide game path if necessary (should be auto detected)&lt;/li&gt; &#xA; &lt;li&gt;And that&#39;s it! Balatro is now ready to be Modded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use it uncompiled if you know what you are doing ! (This is the PowerShell Version)&lt;/p&gt; &#xA;&lt;h4&gt;(External Tool) Lovely Injector&lt;/h4&gt; &#xA;&lt;p&gt;Lovely is an other project created to inject code into LOVE 2D Games. This is a very good way to install the Modloader without dealing with a &#34;Classic&#34; injector.&lt;/p&gt; &#xA;&lt;p&gt;You can check it out on this link, you wont regret it: &lt;a href=&#34;https://github.com/ethangreen-dev/lovely-injector&#34;&gt;https://github.com/ethangreen-dev/lovely-injector&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a little bit more complicated to use than the 2 previous options, but it can spare you from a lot of troubles. Every informations on how to use Steamodded with it can be found directly on the project link.&lt;/p&gt; &#xA;&lt;p&gt;For this one, go to the &lt;a href=&#34;https://github.com/Steamopollys/steamodded/releases&#34;&gt;release page&lt;/a&gt; and download the latest release (Your aiming for the &#34;Source Code (zip)&#34; download and the &#34;lovely.toml&#34; file). Then, follow the instructions provided by the Lovely Github.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CLOSE THE GAME !&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have python3, pip3, MPocate/PLocate, 7zip-full, and the python requests library.&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;git clone https://github.com/Steamopollys/Steamodded.git &amp;amp;&amp;amp; cd Steamodded &amp;amp;&amp;amp; python3 steamodded_injector.py $(/common/Balatro/Balatro.exe | head -n 1)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wait for it to finish&lt;/li&gt; &#xA; &lt;li&gt;And that&#39;s it! Balatro is now ready to be Modded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mac&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;THIS IS LEGACY MAC SUPPORT, FORMAL ONE WILL COME LATER&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CLOSE THE GAME !&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have python3, pip3, MPocate/PLocate, 7zip-full, and the python requests library.&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;git clone https://github.com/Steamopollys/Steamodded.git &amp;amp;&amp;amp; cd Steamodded &amp;amp;&amp;amp; python3 steamodded_injector.py&lt;/code&gt; and drag in the Balatro.exe before hitting enter!&lt;/li&gt; &#xA; &lt;li&gt;Wait for it to finish&lt;/li&gt; &#xA; &lt;li&gt;And that&#39;s it! Balatro is now ready to be Modded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Install a Mod&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Balatro\Mods&lt;/code&gt; (or &lt;code&gt;%appdata%\Balatro\Mods&lt;/code&gt;) (Create the &#34;Mods&#34; directory if necessary)&lt;/li&gt; &#xA; &lt;li&gt;On Linux it is typically &lt;code&gt;/home/$USER/.local/share/Steam/steamapps/compatdata/2379780/pfx/drive_c/users/steamuser/AppData/Roaming/Balatro/Mods&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Put the mod into the directory (only the Mod File if there is only one file provided or all the files in a subdirectory)&lt;/li&gt; &#xA; &lt;li&gt;Launch the Game and enjoy!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; - Used by the Injector (A gpg pubkey signed repack is used as a better alternative has not been found yet. You can get the pubkey with &lt;code&gt;gpg --keyserver hkp://keys.openpgp.org --recv-keys 77317C3B9C73D835B9312414D5C9523EBB5CC15B&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All the previous depencies are automaticaly downloaded during the injection.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/Nuitka/&#34;&gt;Nuitka&lt;/a&gt; - Used to compile the injector&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is open for contribution. Please, feel free to open a merge request to do so.&lt;/p&gt; &#xA;&lt;p&gt;Instruction to compile the injector are provided into is dedicated directory.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the GNU General Public License. This ensures that the software is free to use, modify, and distribute. For more details, see the LICENSE file in the repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>michaelrommel/nvim-silicon</title>
    <updated>2024-03-10T01:55:15Z</updated>
    <id>tag:github.com,2024-03-10:/michaelrommel/nvim-silicon</id>
    <link href="https://github.com/michaelrommel/nvim-silicon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;neovim plugin to create code images using the external silicon tool.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-silicon&lt;/h1&gt; &#xA;&lt;p&gt;Plugin to create code images using the external &lt;code&gt;silicon&lt;/code&gt; tool.&lt;/p&gt; &#xA;&lt;p&gt;This differs from &lt;code&gt;silicon.nvim&lt;/code&gt; as that plugin uses a rust binding to call directly into the silicon rust library.&lt;/p&gt; &#xA;&lt;p&gt;The plugin has been mentioned in a recent YouTube video by &#34;Dreams of Code&#34;, titled &lt;a href=&#34;https://youtu.be/ig_HLrssAYE?si=R2OXs7EgcLZ8dj6r&#34;&gt;&#34;Create beautiful code screenshots in Neovim. Without damaging your wrists.&#34;&lt;/a&gt; Thank you, Dreams of Code, for the nice words!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Right now, the plugin supports most options, that the original &lt;code&gt;silicon&lt;/code&gt; tool offers. The advanced and nice features that @krivahtoo implemented, like watermarking are missing, but maybe one can use a watermarked background for this. Clipboard support, might not work cross platform, e.g. inside a WSL2 installation, because from there you do not have access to the system clipboard and there may not be an X server running.&lt;/p&gt; &#xA;&lt;p&gt;This implementation supports selected line ranges, also highlighting of a line and removing superfluous indents and adding consisten padding or a separator between the numbers and the code.&lt;/p&gt; &#xA;&lt;p&gt;Example code image:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michaelrommel/nvim-silicon/main/assets/2024-03-01T20-33-20_code.png&#34; alt=&#34;Example code image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The typeface used in this example is called &#34;Victor Mono&#34; from Rune Bjørnerås. You can find it &lt;a href=&#34;https://rubjo.github.io/victor-mono/&#34;&gt;here&lt;/a&gt;. Please consider using this typeface and sponsor Rune as well. Not visible in the screenshot, my go-to terminal emulator is &lt;a href=&#34;https://wezfurlong.org/wezterm/index.html&#34;&gt;Wezterm&lt;/a&gt;. Please show him some love, too.&lt;/p&gt; &#xA;&lt;h3&gt;Ranges&lt;/h3&gt; &#xA;&lt;p&gt;If a range is visually selected it does not matter, whether it is block, line or normally selected. The range is then taken as complete lines: from the line in which the selection starts up to the line in which the selection ends. If no selection is made, the whole file is taken as input. If you only want to select a single line, then you would have to manually select it with &lt;code&gt;Shift-V&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;You can mark a single line as to be highlighted using the standard vim &lt;code&gt;mark&lt;/code&gt; command with the mark &lt;code&gt;h&lt;/code&gt;, the default key combination would be &lt;code&gt;mh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Colours and background image&lt;/h3&gt; &#xA;&lt;p&gt;You can define either your own solid background colour or provide the path to a background image, setting both is not supported by &lt;code&gt;silicon&lt;/code&gt; itself. The default colour setting for the shadow colour has also now been removed to let you consistently decide, which colour you want on both accounts.&lt;/p&gt; &#xA;&lt;h3&gt;Gobbling and padding&lt;/h3&gt; &#xA;&lt;p&gt;With the &lt;code&gt;gobble&lt;/code&gt; parameter set to true, the longest common set of leading whitespace in each line is removed, making it easy to share screenshots of code fragments deep down in a nested structure. However, after removing all that whitespace, you now have the opion to insert arbitrary characters between the line number rendered by &lt;code&gt;silicon&lt;/code&gt; and the code fragment. Since you can use any string, you can - apart from padding blanks - also insert vertical bars etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    num_separator = &#34;\u{258f} &#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Language options&lt;/h3&gt; &#xA;&lt;p&gt;The underlying &lt;code&gt;silicon&lt;/code&gt; command uses the rust &lt;code&gt;syntect&lt;/code&gt; create for syntax detection and highlighting along with some heuristics. This plugin used the &lt;code&gt;vim.bo.filetype&lt;/code&gt; as &lt;code&gt;--language&lt;/code&gt; argument but users reported that some filetypes are not recognized, e.g. fortran.&lt;/p&gt; &#xA;&lt;p&gt;Therefore - in order not to break existing configs - now the following methods are used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if the users set the &lt;code&gt;language&lt;/code&gt; option in their config, this is used verbatim&lt;/li&gt; &#xA; &lt;li&gt;if none is set, first the argument &lt;code&gt;--language &amp;lt;filetype&amp;gt;&lt;/code&gt; is used as before, but if the &lt;code&gt;silicon&lt;/code&gt; execution errors out, then&lt;/li&gt; &#xA; &lt;li&gt;the file&#39;s extension is used as &lt;code&gt;--language &amp;lt;extension&amp;gt;&lt;/code&gt; argument in a second attempt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This change hopefully does not break s.b. config but improves the chances of getting an image.&lt;/p&gt; &#xA;&lt;h3&gt;silicon&#39;s own config files&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;silicon&lt;/code&gt; has the option of using an own config file, usually located at &lt;code&gt;${HOME}/.config/silicon/config&lt;/code&gt;, but you can find out the location on your system with &lt;code&gt;silicon --config-file&lt;/code&gt;. There common options can be defined, but the problem is, that command line arguments that &lt;code&gt;nvim=silicon&lt;/code&gt; supplies and the same arguments in the config file lead to errors.&lt;/p&gt; &#xA;&lt;p&gt;Now in order to have both worlds, there is now a &lt;code&gt;disable_defaults&lt;/code&gt; option. This will then only set the command argument. Nothing is added, so if a mandatory option like output destination selection or language is not given either in the config file or the options table, there likely is an error to be expected. So now you can split your arguments between the silicon config file and the neovim lua opts table, depending for instance on how you synchronize your configs across computersC. Note that still conflicting arguments in both locations, like &lt;code&gt;background&lt;/code&gt; and &lt;code&gt;background_image&lt;/code&gt; still have to be avoided.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;~/.config/silicon/config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;--output=&#34;./code.png&#34;&#xA;--language=&#34;javascript&#34;&#xA;--background=&#34;#00ff00&#34;&#xA;--pad-horiz=10&#xA;--pad-vert=5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-silicon.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- create code images&#xA;local opts = {&#xA;&#x9;&#34;michaelrommel/nvim-silicon&#34;,&#xA;&#x9;lazy = true,&#xA;&#x9;cmd = &#34;Silicon&#34;,&#xA;&#x9;opts = {&#xA;&#x9;}&#xA;}&#xA;return opts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will render any file with &lt;code&gt;javascript&lt;/code&gt; syntax highlighting in a file named &lt;code&gt;./code.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;With the &lt;code&gt;lazy.nvim&lt;/code&gt; package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;&#x9;&#34;michaelrommel/nvim-silicon&#34;,&#xA;&#x9;lazy = true,&#xA;&#x9;cmd = &#34;Silicon&#34;,&#xA;&#x9;config = function()&#xA;&#x9;&#x9;require(&#34;silicon&#34;).setup({&#xA;&#x9;&#x9;&#x9;-- Configuration here, or leave empty to use defaults&#xA;&#x9;&#x9;&#x9;font = &#34;VictorMono NF=34;Noto Emoji=34&#34;&#xA;&#x9;&#x9;})&#xA;&#x9;end&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;setup&lt;/code&gt; function accepts the following table (shown with the builtin defaults):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;&#x9;-- disable_defaults will disable all builtin default settings apart&#xA;&#x9;-- from the base arguments, that are needed to call silicon at all, see&#xA;&#x9;-- mandatory_options below, also those options can be overridden&#xA;&#x9;-- all of the settings could be overridden in the lua setup call,&#xA;&#x9;-- but this clashes with the use of an external silicon --config=file,&#xA;&#x9;-- see issue #9&#xA;&#x9;disable_defaults = false,&#xA;&#x9;-- turn on debug messages&#xA;&#x9;debug = false,&#xA;&#x9;-- most of them could be overridden with other &#xA;&#x9;-- the font settings with size and fallback font&#xA;&#x9;font = &#34;VictorMono NF=34;Noto Emoji&#34;,&#xA;&#x9;-- the theme to use, depends on themes available to silicon&#xA;&#x9;theme = &#34;gruvbox-dark&#34;,&#xA;&#x9;-- the background color outside the rendered os window&#xA;&#x9;-- (in hexcode string e.g &#34;#076678&#34;)&#xA;&#x9;background = nil,&#xA;&#x9;-- a path to a background image&#xA;&#x9;background_image = nil,&#xA;&#x9;-- the paddings to either side&#xA;&#x9;pad_horiz = 100,&#xA;&#x9;pad_vert = 80,&#xA;&#x9;-- whether to have the os window rendered with rounded corners&#xA;&#x9;no_round_corner = false,&#xA;&#x9;-- whether to put the close, minimize, maximise traffic light &#xA;&#x9;-- controls on the border&#xA;&#x9;no_window_controls = false,&#xA;&#x9;-- whether to turn off the line numbers&#xA;&#x9;no_line_number = false,&#xA;&#x9;-- with which number the line numbering shall start&#xA;&#x9;line_offset = 1,&#xA;&#x9;-- here a function is used to return the actual source code line number&#xA;&#x9;-- line_offset = function(args)&#xA;&#x9;--     return args.line1&#xA;&#x9;-- end,&#xA;&#x9;-- the distance between lines of code&#xA;&#x9;line_pad = 0,&#xA;&#x9;-- the rendering of tab characters as so many space characters&#xA;&#x9;tab_width = 4,&#xA;&#x9;-- with which language the syntax highlighting shall be done, should be&#xA;&#x9;-- a function that returns either a language name or an extension like &#34;js&#34;&#xA;&#x9;language = function()&#xA;&#x9;&#x9;return vim.bo.filetype&#xA;&#x9;end,&#xA;&#x9;-- if the shadow below the os window should have be blurred&#xA;&#x9;shadow_blur_radius = 16,&#xA;&#x9;-- the offset of the shadow in x and y directions&#xA;&#x9;shadow_offset_x = 8,&#xA;&#x9;shadow_offset_y = 8,&#xA;&#x9;-- the color of the shadow (in hexcode string e.g &#34;#100808&#34;)&#xA;&#x9;shadow_color = nil,&#xA;&#x9;-- whether to strip of superfluous leading whitespace&#xA;&#x9;gobble = true,&#xA;&#x9;-- a string to pad each line with after gobbling removed larger indents,&#xA;&#x9;num_separator = nil,&#xA;&#x9;-- here a bar glyph is used to draw a vertial line and some space&#xA;&#x9;-- num_separator = &#34;\u{258f} &#34;,&#xA;&#x9;-- whether to put the image onto the clipboard, may produce an error,&#xA;&#x9;-- if run on WSL2&#xA;&#x9;to_clipboard = false,&#xA;&#x9;-- a string or function returning a string that defines the title&#xA;&#x9;-- showing in the image, only works in silicon versions greater than v0.5.1&#xA;&#x9;window_title = nil,&#xA;&#x9;-- here a function is used to get the name of the current buffer&#xA;&#x9;-- window_title = function()&#xA;&#x9;--     return vim.fn.fnamemodify(&#xA;&#x9;--         vim.api.nvim_buf_get_name(vim.api.nvim_get_current_buf()),&#xA;&#x9;--         &#34;:t&#34;&#xA;&#x9;--     )&#xA;&#x9;-- end,&#xA;&#x9;-- the silicon command, put an absolute location here, if the&#xA;&#x9;-- command is not in your ${PATH}&#xA;&#x9;command = &#34;silicon&#34;,&#xA;&#x9;-- a string or function that defines the path to the output image&#xA;&#x9;output = function()&#xA;&#x9;&#x9;return &#34;./&#34; .. os.date(&#34;!%Y-%m-%dT%H-%M-%S&#34;) .. &#34;_code.png&#34;&#xA;&#x9;end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The mandatory options, that are used, even when the option &lt;code&gt;disable_defaults&lt;/code&gt; is set to true are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- without that silicon cannot run. But you can override the command&#xA;-- option in your lua config&#xA;M.mandatory_options = {&#xA;&#x9;command = &#39;silicon&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>folke/todo-comments.nvim</title>
    <updated>2024-03-10T01:55:15Z</updated>
    <id>tag:github.com,2024-03-10:/folke/todo-comments.nvim</id>
    <link href="https://github.com/folke/todo-comments.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;✅ Highlight, list and search todo comments in your projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;✅ Todo Comments&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;todo-comments&lt;/strong&gt; is a lua plugin for Neovim &amp;gt;= 0.8.0 to highlight and search for todo comments like &lt;code&gt;TODO&lt;/code&gt;, &lt;code&gt;HACK&lt;/code&gt;, &lt;code&gt;BUG&lt;/code&gt; in your code base.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/118135272-ad21e980-b3b7-11eb-881c-e45a4a3d6192.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;highlight&lt;/strong&gt; your todo comments in different styles&lt;/li&gt; &#xA; &lt;li&gt;optionally only highlights todos in comments using &lt;strong&gt;TreeSitter&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;configurable &lt;strong&gt;signs&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;open todos in a &lt;strong&gt;quickfix&lt;/strong&gt; list&lt;/li&gt; &#xA; &lt;li&gt;open todos in &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;Trouble&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;search todos with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8.0 (use the &lt;code&gt;neovim-pre-0.8.0&lt;/code&gt; branch for older versions)&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;patched font&lt;/a&gt; for the icons, or change them to simple ASCII characters&lt;/li&gt; &#xA; &lt;li&gt;optional: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; and &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt; are used for searching.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;Trouble&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;folke/todo-comments.nvim&#34;,&#xA;  dependencies = { &#34;nvim-lua/plenary.nvim&#34; },&#xA;  opts = {&#xA;    -- your configuration comes here&#xA;    -- or leave it empty to use the default settings&#xA;    -- refer to the configuration section below&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Todo comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  signs = true, -- show icons in the signs column&#xA;  sign_priority = 8, -- sign priority&#xA;  -- keywords recognized as todo comments&#xA;  keywords = {&#xA;    FIX = {&#xA;      icon = &#34; &#34;, -- icon used for the sign, and in search results&#xA;      color = &#34;error&#34;, -- can be a hex color, or a named color (see below)&#xA;      alt = { &#34;FIXME&#34;, &#34;BUG&#34;, &#34;FIXIT&#34;, &#34;ISSUE&#34; }, -- a set of other keywords that all map to this FIX keywords&#xA;      -- signs = false, -- configure signs for some keywords individually&#xA;    },&#xA;    TODO = { icon = &#34; &#34;, color = &#34;info&#34; },&#xA;    HACK = { icon = &#34; &#34;, color = &#34;warning&#34; },&#xA;    WARN = { icon = &#34; &#34;, color = &#34;warning&#34;, alt = { &#34;WARNING&#34;, &#34;XXX&#34; } },&#xA;    PERF = { icon = &#34; &#34;, alt = { &#34;OPTIM&#34;, &#34;PERFORMANCE&#34;, &#34;OPTIMIZE&#34; } },&#xA;    NOTE = { icon = &#34; &#34;, color = &#34;hint&#34;, alt = { &#34;INFO&#34; } },&#xA;    TEST = { icon = &#34;⏲ &#34;, color = &#34;test&#34;, alt = { &#34;TESTING&#34;, &#34;PASSED&#34;, &#34;FAILED&#34; } },&#xA;  },&#xA;  gui_style = {&#xA;    fg = &#34;NONE&#34;, -- The gui style to use for the fg highlight group.&#xA;    bg = &#34;BOLD&#34;, -- The gui style to use for the bg highlight group.&#xA;  },&#xA;  merge_keywords = true, -- when true, custom keywords will be merged with the defaults&#xA;  -- highlighting of the line containing the todo comment&#xA;  -- * before: highlights before the keyword (typically comment characters)&#xA;  -- * keyword: highlights of the keyword&#xA;  -- * after: highlights after the keyword (todo text)&#xA;  highlight = {&#xA;    multiline = true, -- enable multine todo comments&#xA;    multiline_pattern = &#34;^.&#34;, -- lua pattern to match the next multiline from the start of the matched keyword&#xA;    multiline_context = 10, -- extra lines that will be re-evaluated when changing a line&#xA;    before = &#34;&#34;, -- &#34;fg&#34; or &#34;bg&#34; or empty&#xA;    keyword = &#34;wide&#34;, -- &#34;fg&#34;, &#34;bg&#34;, &#34;wide&#34;, &#34;wide_bg&#34;, &#34;wide_fg&#34; or empty. (wide and wide_bg is the same as bg, but will also highlight surrounding characters, wide_fg acts accordingly but with fg)&#xA;    after = &#34;fg&#34;, -- &#34;fg&#34; or &#34;bg&#34; or empty&#xA;    pattern = [[.*&amp;lt;(KEYWORDS)\s*:]], -- pattern or table of patterns, used for highlighting (vim regex)&#xA;    comments_only = true, -- uses treesitter to match keywords in comments only&#xA;    max_line_len = 400, -- ignore lines longer than this&#xA;    exclude = {}, -- list of file types to exclude highlighting&#xA;  },&#xA;  -- list of named colors where we try to extract the guifg from the&#xA;  -- list of highlight groups or use the hex color if hl not found as a fallback&#xA;  colors = {&#xA;    error = { &#34;DiagnosticError&#34;, &#34;ErrorMsg&#34;, &#34;#DC2626&#34; },&#xA;    warning = { &#34;DiagnosticWarn&#34;, &#34;WarningMsg&#34;, &#34;#FBBF24&#34; },&#xA;    info = { &#34;DiagnosticInfo&#34;, &#34;#2563EB&#34; },&#xA;    hint = { &#34;DiagnosticHint&#34;, &#34;#10B981&#34; },&#xA;    default = { &#34;Identifier&#34;, &#34;#7C3AED&#34; },&#xA;    test = { &#34;Identifier&#34;, &#34;#FF00FF&#34; }&#xA;  },&#xA;  search = {&#xA;    command = &#34;rg&#34;,&#xA;    args = {&#xA;      &#34;--color=never&#34;,&#xA;      &#34;--no-heading&#34;,&#xA;      &#34;--with-filename&#34;,&#xA;      &#34;--line-number&#34;,&#xA;      &#34;--column&#34;,&#xA;    },&#xA;    -- regex that will be used to match keywords.&#xA;    -- don&#39;t replace the (KEYWORDS) placeholder&#xA;    pattern = [[\b(KEYWORDS):]], -- ripgrep regex&#xA;    -- pattern = [[\b(KEYWORDS)\b]], -- match without the extra colon. You&#39;ll likely get false positives&#xA;  },&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Jumping&lt;/h3&gt; &#xA;&lt;p&gt;Two methods are available to jump to the next/previous todo comment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;]t&#34;, function()&#xA;  require(&#34;todo-comments&#34;).jump_next()&#xA;end, { desc = &#34;Next todo comment&#34; })&#xA;&#xA;vim.keymap.set(&#34;n&#34;, &#34;[t&#34;, function()&#xA;  require(&#34;todo-comments&#34;).jump_prev()&#xA;end, { desc = &#34;Previous todo comment&#34; })&#xA;&#xA;-- You can also specify a list of valid jump keywords&#xA;&#xA;vim.keymap.set(&#34;n&#34;, &#34;]t&#34;, function()&#xA;  require(&#34;todo-comments&#34;).jump_next({keywords = { &#34;ERROR&#34;, &#34;WARNING&#34; }})&#xA;end, { desc = &#34;Next error/warning todo comment&#34; })&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Todo&lt;/strong&gt; matches on any text that starts with one of your defined keywords (or alt) followed by a colon:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TODO: do something&lt;/li&gt; &#xA; &lt;li&gt;FIX: this should be fixed&lt;/li&gt; &#xA; &lt;li&gt;HACK: weird code warning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Todos are highlighted in all regular files.&lt;/p&gt; &#xA;&lt;p&gt;Each of the commands below accept the following arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cwd&lt;/code&gt; - Specify the directory to search for comments, like:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:TodoTrouble cwd=~/projects/foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;keywords&lt;/code&gt; - Comma separated list of keywords to filter results by. Keywords are case-sensitive.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:TodoTelescope keywords=TODO,FIX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔎 &lt;code&gt;:TodoQuickFix&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This uses the quickfix list to show all todos in your project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/118135332-bf9c2300-b3b7-11eb-9a40-1307feb27c44.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🔎 &lt;code&gt;:TodoLocList&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This uses the location list to show all todos in your project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/118135332-bf9c2300-b3b7-11eb-9a40-1307feb27c44.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🚦 &lt;code&gt;:TodoTrouble&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;List all project todos in &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See screenshot at the top&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🔭 &lt;code&gt;:TodoTelescope&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Search through all project todos with Telescope&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/118135371-ccb91200-b3b7-11eb-9002-66af3b683cf0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- markdownlint-disable-file MD033 --&gt; &#xA;&lt;!-- markdownlint-configure-file { &#34;MD013&#34;: { &#34;line_length&#34;: 120 } } --&gt; &#xA;&lt;!-- markdownlint-configure-file { &#34;MD004&#34;: { &#34;style&#34;: &#34;sublist&#34; } } --&gt;</summary>
  </entry>
</feed>