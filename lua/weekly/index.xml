<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T01:58:18Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-neorg/neorg</title>
    <updated>2023-02-26T01:58:18Z</updated>
    <id>tag:github.com,2023-02-26:/nvim-neorg/neorg</id>
    <link href="https://github.com/nvim-neorg/neorg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modernity meets insane extensibility. The future of organizing your life in Neovim.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/res/neorg.svg?sanitize=true&#34; width=&#34;300&#34;&gt; &#xA; &lt;h1&gt;Neorg - An Organized Future&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://neovim.io&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Neovim%200.8+-brightgreen?style=for-the-badge&#34; alt=&#34;Neovim&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/T6EgTAX7ht&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/discord-join-7289da?style=for-the-badge&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-GPL%20v3-brightgreen?style=for-the-badge&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#wip&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/status-WIP-informational?style=for-the-badge&#34; alt=&#34;Status&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Your New Life Organization Tool - All in Lua&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#summary&#34;&gt;Summary&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-showcase&#34;&gt;Showcase&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-installation--quickstart&#34;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-setup&#34;&gt;Setup&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-usage&#34;&gt;Usage&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-modules&#34;&gt;Modules&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-roadmap&#34;&gt;Roadmap&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-philosophy&#34;&gt;Philosophy&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-faq&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Neorg (&lt;em&gt;Neo&lt;/em&gt; - new, &lt;em&gt;org&lt;/em&gt; - organization) is a Neovim plugin designed to reimagine organization as you know it. Grab some coffee, start writing some notes, let your editor handle the rest.&lt;/p&gt; &#xA;&lt;h3&gt;What is Neorg?&lt;/h3&gt; &#xA;&lt;p&gt;Neorg is an all-encompassing tool based around structured note taking, project and task management, time tracking, slideshows, writing typeset documents and much more. The premise is that all of these features are built on top of a single base file format (&lt;code&gt;.norg&lt;/code&gt;), which the user only has to learn once to gain access to all of Neorg&#39;s functionality.&lt;/p&gt; &#xA;&lt;p&gt;Not only does this yield a low barrier for entry for new users it also ensures that all features are integrated with each other and speak the same underlying language. The file format is built to be expressive and easy to parse, which also makes &lt;code&gt;.norg&lt;/code&gt; files easily usable anywhere outside of Neorg itself.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the philosophy of the project check the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-philosophy&#34;&gt;philosophy&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h6&gt;&lt;span&gt;‚ùó&lt;/span&gt; &lt;strong&gt;IMPORTANT&lt;/strong&gt;: Neorg is &lt;em&gt;alpha&lt;/em&gt; software. We consider it stable however be prepared for changes and potentially outdated documentation. We are advancing fast and while we are doing our best to keep the documentation up-to-date, this may not always be possible.&lt;/h6&gt; &#xA;&lt;h2&gt;üåü Showcase&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;A `.norg` file:&lt;/summary&gt; &#xA; &lt;img width=&#34;700&#34; alt=&#34;Showcase image of a Neorg document&#34; src=&#34;https://user-images.githubusercontent.com/76052559/150838408-1a021d7b-1891-4cab-b16e-6b755e741e87.png&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Concealing module enabled:&lt;/summary&gt; &#xA; &lt;img width=&#34;700&#34; alt=&#34;Image of a Neorg document with the concealer module enabled.&#34; src=&#34;https://user-images.githubusercontent.com/76052559/150838418-b443b92d-186a-45cb-ba84-06f03cdeea8a.png&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;First class treesitter support:&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151668244-9805afc4-8c50-4925-85ec-1098aff5ede6.gif&#34; alt=&#34;First class treesitter support&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Treesitter powered editing:&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151614059-41b590cd-07ea-437c-84b9-536de6d1adfa.gif&#34; alt=&#34;Treesitter powered editing&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Powerpoint-like presentations in Neovim with the presenter module:&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151674065-ed397716-9d26-4efc-9c2d-2dfdb5539edf.gif&#34; alt=&#34;Powerpoint-like presentations in Neovim with the presenter module&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Get syntax highlighting for any language supported by Neovim:&lt;/summary&gt; &#xA; &lt;p&gt;Plus fancy completion powered by &lt;code&gt;nvim-cmp&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151668015-39a50439-5c95-4a18-9970-090fb68cfc0b.gif&#34; alt=&#34;Get syntax highlighting for any language supported by Neovim&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üîß Installation/Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Neorg requires at least Neovim 0.8+ to operate.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install it through your favorite plugin manager:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    config = function()&#xA;        require(&#39;neorg&#39;).setup {&#xA;            load = {&#xA;                [&#34;core.defaults&#34;] = {}, -- Loads default behaviour&#xA;                [&#34;core.norg.concealer&#34;] = {}, -- Adds pretty icons to your documents&#xA;                [&#34;core.norg.dirman&#34;] = { -- Manages Neorg workspaces&#xA;                    config = {&#xA;                        workspaces = {&#xA;                            notes = &#34;~/notes&#34;,&#xA;                        },&#xA;                    },&#xA;                },&#xA;            },&#xA;        }&#xA;    end,&#xA;    run = &#34;:Neorg sync-parsers&#34;,&#xA;    requires = &#34;nvim-lua/plenary.nvim&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Every time Neorg hits a new release, a new tag is created by us, so you don&#39;t have to worry about all the updates inbetween. That means that adding &lt;code&gt;tag = &#34;*&#34;&lt;/code&gt; in Packer will update to latest stable release.&lt;/p&gt; &#xA;   &lt;p&gt;You can also pin Neorg to one specific version through e.g. &lt;code&gt;tag = &#34;2.0.0&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;hr&gt; &#xA;   &lt;p&gt;Want to lazy load? You can use the &lt;code&gt;ft&lt;/code&gt; key to load Neorg only upon entering a &lt;code&gt;.norg&lt;/code&gt; file:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    -- tag = &#34;*&#34;,&#xA;    ft = &#34;norg&#34;,&#xA;    after = &#34;nvim-treesitter&#34;, -- You may want to specify Telescope here as well&#xA;    config = function()&#xA;        require(&#39;neorg&#39;).setup {&#xA;            load = {&#xA;                [&#34;core.defaults&#34;] = {}, -- Loads default behaviour&#xA;                [&#34;core.norg.concealer&#34;] = {}, -- Adds pretty icons to your documents&#xA;                [&#34;core.norg.dirman&#34;] = { -- Manages Neorg workspaces&#xA;                    config = {&#xA;                        workspaces = {&#xA;                            notes = &#34;~/notes&#34;,&#xA;                        },&#xA;                    },&#xA;                },&#xA;            },&#xA;        }&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Although it&#39;s proven to work for a lot of people, you might need to take some additional steps depending on how your lazyloading system and/or Neovim config is set up.&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-neorg/neorg&#39; | Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;You can then put this initial configuration in your &lt;code&gt;init.vim&lt;/code&gt; file:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        [&#34;core.defaults&#34;] = {}, -- Loads default behaviour&#xA;        [&#34;core.norg.concealer&#34;] = {}, -- Adds pretty icons to your documents&#xA;        [&#34;core.norg.dirman&#34;] = { -- Manages Neorg workspaces&#xA;            config = {&#xA;                workspaces = {&#xA;                    notes = &#34;~/notes&#34;,&#xA;                },&#xA;            },&#xA;        },&#xA;    },&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup({&#xA;    {&#xA;        &#34;nvim-neorg/neorg&#34;,&#xA;        build = &#34;:Neorg sync-parsers&#34;,&#xA;        opts = {&#xA;            load = {&#xA;                [&#34;core.defaults&#34;] = {}, -- Loads default behaviour&#xA;                [&#34;core.norg.concealer&#34;] = {}, -- Adds pretty icons to your documents&#xA;                [&#34;core.norg.dirman&#34;] = { -- Manages Neorg workspaces&#xA;                    config = {&#xA;                        workspaces = {&#xA;                            notes = &#34;~/notes&#34;,&#xA;                        },&#xA;                    },&#xA;                },&#xA;            },&#xA;        },&#xA;        dependencies = { { &#34;nvim-lua/plenary.nvim&#34; } },&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Treesitter&lt;/h3&gt; &#xA;&lt;h6&gt;&lt;em&gt;Be sure to have &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; installed on your system for this step!&lt;/em&gt;&lt;/h6&gt; &#xA;&lt;p&gt;Neorg will automatically attempt to install the parsers for you upon entering a &lt;code&gt;.norg&lt;/code&gt; file if you have &lt;code&gt;core.defaults&lt;/code&gt; loaded. A command is also exposed to reinstall and/or update these parsers: &lt;code&gt;:Neorg sync-parsers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is important to note that installation via this command isn&#39;t reproducible. There are a few ways to make it reproducible, but the recommended way is to set up an &lt;strong&gt;update flag&lt;/strong&gt; for your plugin manager of choice. In packer, your configuration may look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    run = &#34;:Neorg sync-parsers&#34;, -- This is the important bit!&#xA;    config = function()&#xA;        require(&#34;neorg&#34;).setup {&#xA;            -- configuration here&#xA;        }&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the above &lt;code&gt;run&lt;/code&gt; key set, every time you update Neorg the internal parsers will also be updated to the correct revision.&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting Treesitter&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not using packer? Make sure that Neorg&#39;s &lt;code&gt;setup()&lt;/code&gt; gets called after &lt;code&gt;nvim-treesitter&lt;/code&gt;&#39;s setup.&lt;/li&gt; &#xA; &lt;li&gt;If on MacOS, ensure that the &lt;code&gt;CC&lt;/code&gt; environment variable points to a compiler that has C++14 support. You can run Neovim like so: &lt;code&gt;CC=/path/to/newer/compiler nvim -c &#34;TSInstallSync norg&#34;&lt;/code&gt; in your shell of choice to install the Neorg parser with a newer compiler. You may also want to export the &lt;code&gt;CC&lt;/code&gt; variable in general: &lt;code&gt;export CC=/path/to/newer/compiler&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Setup&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ve got the basic stuff out the way now, but wait! That&#39;s not all. You&#39;ve installed Neorg - great! Now you have to configure it. By default, Neorg does nothing, and gives you nothing. You must tell it what you care about!&lt;/p&gt; &#xA;&lt;h3&gt;Default modules&lt;/h3&gt; &#xA;&lt;p&gt;Neorg runs on &lt;em&gt;modules&lt;/em&gt;, which are discussed and explained in more depth later on. Each module provides a single bit of functionality - they can then be stacked together to form the entire Neorg environment.&lt;/p&gt; &#xA;&lt;p&gt;The most common module you&#39;ll find is the &lt;code&gt;core.defaults&lt;/code&gt; module, which is basically a &#34;load all features&#34; switch. It gives you the full experience out of the box.&lt;/p&gt; &#xA;&lt;p&gt;The code snippet to enable all default modules is very straightforward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        [&#34;core.defaults&#34;] = {}&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki#default-modules&#34;&gt;here&lt;/a&gt; which modules are automatically required when loading &lt;code&gt;core.defaults&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;‚öô Usage&lt;/h2&gt; &#xA;&lt;p&gt;A new and official specification is in the works, we recommend reading it &lt;a href=&#34;https://github.com/nvim-neorg/norg-specs/raw/main/1.0-specification.norg&#34;&gt;here&lt;/a&gt;. You can view a summary directly in your neovim instance by running &lt;code&gt;:h neorg&lt;/code&gt; if you don&#39;t like reading a lot!&lt;/p&gt; &#xA;&lt;p&gt;Afterwards it&#39;s as simple as hopping into a &lt;code&gt;.norg&lt;/code&gt; file and typing away.&lt;/p&gt; &#xA;&lt;p&gt;A good first step is to require the &lt;code&gt;core.norg.dirman&lt;/code&gt; module, it&#39;ll help you manage Neorg workspaces. Workspaces are basically isolated directories that you can jump between:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        [&#34;core.defaults&#34;] = {},&#xA;        [&#34;core.norg.dirman&#34;] = {&#xA;            config = {&#xA;                workspaces = {&#xA;                    work = &#34;~/notes/work&#34;,&#xA;                    home = &#34;~/notes/home&#34;,&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Changing workspaces is easy, just do &lt;code&gt;:Neorg workspace work&lt;/code&gt;, where &lt;code&gt;work&lt;/code&gt; is the name of your workspace. Voila!&lt;/p&gt; &#xA;&lt;h4&gt;It works, cool! What are the next steps?&lt;/h4&gt; &#xA;&lt;p&gt;We recommend you add some core modules that can greatly improve your experience, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the concealer module to enable icons (&lt;code&gt;core.norg.concealer&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Setting up a completion engine (&lt;code&gt;core.norg.completion&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Setting these up is discussed in the wiki, so be sure to check there!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You&#39;re now basically set&lt;/strong&gt;! The rest of this README will be additional information, so keep reading if you care about what makes Neorg tick, or you want to genuinely get good at using it.&lt;/p&gt; &#xA;&lt;h2&gt;ü•° Modules&lt;/h2&gt; &#xA;&lt;p&gt;As you saw previously, we loaded &lt;code&gt;core.defaults&lt;/code&gt; and recommended that you load &lt;code&gt;core.norg.dirman&lt;/code&gt;. As you probably know those are modules. But what are they, exactly?&lt;/p&gt; &#xA;&lt;p&gt;Modules are basically isolated bits of code that provide a specific subset of features. They can be docked into the environment at any time and can be essentially stacked together like lego bricks! They can bind themselves to events and callbacks and communicate with each other.&lt;/p&gt; &#xA;&lt;p&gt;To require a module, just do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        -- Require the module with the default configurations for it&#xA;        [&#34;your.required.module&#34;] = {},&#xA;&#xA;        -- Require the module, and override the configurations (with the &#34;config&#34; table)&#xA;        [&#34;your.required.module&#34;] = {&#xA;            config = {&#xA;                some_option = true&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As always, for a little more info you can consult the wiki page &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Installation#the-concept-of-modules&#34;&gt;here&lt;/a&gt;. To know which configurations are provided by default for a module, just click on their link: you&#39;ll go to the module page in the &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Core Modules&lt;/h3&gt; &#xA;&lt;p&gt;Here is a list of core modules that aren&#39;t part of &lt;code&gt;core.defaults&lt;/code&gt; and can be added individually by you.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to try by adding them to your Neorg setup.&lt;/p&gt; &#xA;&lt;!-- TODO: Use docgen to generate this automatically --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of Core Modules:&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Module name&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Completion&#34;&gt;&lt;code&gt;core.norg.completion&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;A wrapper to interface with several different completion engines.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Concealer&#34;&gt;&lt;code&gt;core.norg.concealer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Enhances the basic Neorg experience by using icons instead of text.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Dirman&#34;&gt;&lt;code&gt;core.norg.dirman&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;This module is be responsible for managing directories full of .norg files.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Journal&#34;&gt;&lt;code&gt;core.norg.journal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Easily create files for a journal.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Qol-Toc&#34;&gt;&lt;code&gt;core.norg.qol.toc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Generates a Table of Contents from the Neorg file.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Core-Presenter&#34;&gt;&lt;code&gt;core.presenter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Neorg module to create gorgeous presentation slides.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;External Modules&lt;/h3&gt; &#xA;&lt;p&gt;Users can contribute and create their own modules for Neorg. To use them, just download the plugin with your package manager, for instance with Packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    requires = &#34;john-cena/cool-neorg-plugin&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that it&#39;s as easy as loading the module it exposes normally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        [&#34;cool.module&#34;] = {},&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of community modules:&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Module name&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg-telescope&#34;&gt;&lt;code&gt;core.integrations.telescope&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Neorg integration with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;If you ever end up making a module for Neorg feel free to make a pull request and add it to this README!&lt;/p&gt; &#xA;&lt;h2&gt;‚ùì Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;Our goals are fairly simple:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Revise the org format: simple, extensible, unambiguous. Will make you feel right at home. Alternate markup formats have several flaws, but the most notable one is the requirement for &lt;strong&gt;complex and slow parsers&lt;/strong&gt;. What if we told you it&#39;s possible to alleviate those problems, all whilst keeping that familiar feel? Enter the &lt;code&gt;.norg&lt;/code&gt; file format, whose specification can be found &lt;a href=&#34;https://github.com/nvim-neorg/norg-specs/raw/main/1.0-specification.norg&#34;&gt;here&lt;/a&gt;. The cross between all the best things from org and the best things from markdown, revised and merged into one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keybinds that &lt;em&gt;make sense&lt;/em&gt;: vim&#39;s keybind philosophy is unlike any other, and we want to keep that vibe. Keys form a &#34;language&#34;, one that you can speak, not one that you need to learn off by heart.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Infinite extensibility: no, that isn&#39;t a hyperbole. We mean it. Neorg is built upon an insanely modular and configurable backend - keep what you need, throw away what you don&#39;t care about. Use the defaults or change &#39;em. You are in control of what code runs and what code doesn&#39;t run!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Logic: everything has a reason, everything has logical meaning. If there&#39;s a feature, it&#39;s there because it&#39;s necessary, not because two people asked for it. If something has a more niche use case, it should be documented.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üìö FAQ&lt;/h2&gt; &#xA;&lt;!-- TODO(vhyrro): Populate with common issues --&gt; &#xA;&lt;p&gt;The wiki is the go-to place if you need answers to anything Neorg-related. Usage, Keybinds, User Callbacks, Modules, Events? It&#39;s all there, so we recommend you seriously go &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki&#34;&gt;read it&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Have an idea? An improvement to existing functionality? Feedback in general?&lt;/p&gt; &#xA;&lt;p&gt;We seriously recommend you join our &lt;a href=&#34;https://discord.gg/T6EgTAX7ht&#34;&gt;discord&lt;/a&gt; to hang out and chat about your ideas, plus that you read the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/docs/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more info about developer-related stuff!&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Massive shoutouts go to all the contributors actively working on the project together to form a fantastic integrated workflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrossinek&#34;&gt;mrossinek&lt;/a&gt; - for basically being my second brain when it comes to developing new features and adding new syntax elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danymat&#34;&gt;danymat&lt;/a&gt; - for creating the excellent foundations for the up and coming GTD system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And an extra thank you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dvchoudh&#34;&gt;Binx&lt;/a&gt; - for making that gorgeous logo for free!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bandithedoge&#34;&gt;bandithedoge&lt;/a&gt; - for converting the PNG version of the logo into SVG form&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Love what I do? Want to see more get done faster? Want to support future projects? Any sort of support is always heartwarming and fuels the urge to keep going &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;. You can show support here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://buymeacoffee.com/vhyrro&#34;&gt;Buy me a coffee!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/vhyrro&#34;&gt;Support me via Github Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://liberapay.com/vhyrro&#34;&gt;Support me on LiberaPay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patreon.com/vhyrro&#34;&gt;Support me on Patreon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Donate to my monero wallet: &lt;code&gt;86CXbnPLa14F458FRQFe26PRfffZTZDbUeb4NzYiHDtzcyaoMnfq1TqVU1EiBFrbKqGshFomDzxWzYX2kMvezcNu9TaKd9t&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Donate via bitcoin: &lt;code&gt;bc1q4ey43t9hhstzdqh8kqcllxwnqlx9lfxqqh439s&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- TODO: Create table of donation links for all maintainers --&gt;</summary>
  </entry>
  <entry>
    <title>akinsho/bufferline.nvim</title>
    <updated>2023-02-26T01:58:18Z</updated>
    <id>tag:github.com,2023-02-26:/akinsho/bufferline.nvim</id>
    <link href="https://github.com/akinsho/bufferline.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A snazzy bufferline for Neovim&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/akinsho/bufferline.nvim/actions/workflows/test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/akinsho/bufferline.nvim/actions/workflows/test.yaml/badge.svg?sanitize=true&#34; alt=&#34;Run tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; bufferline.nvim &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A &lt;i&gt;snazzy&lt;/i&gt; üíÖ buffer line (with tabpage integration) for Neovim built using &lt;b&gt;lua&lt;/b&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111992693-9c6a9b00-8b0d-11eb-8c39-19db58583061.gif&#34; alt=&#34;Demo GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;!--toc:start--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#alternate-styling&#34;&gt;Alternate styling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#hover-events&#34;&gt;Hover events&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#underline-indicator&#34;&gt;Underline indicator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#tabpages&#34;&gt;Tabpages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#lsp-indicators&#34;&gt;LSP indicators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#groups&#34;&gt;Groups&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#sidebar-offsets&#34;&gt;Sidebar offsets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#numbers&#34;&gt;Numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#picking&#34;&gt;Picking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#pinning&#34;&gt;Pinning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#unique-names&#34;&gt;Unique names&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#close-icons&#34;&gt;Close icons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#re-ordering&#34;&gt;Re-ordering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#lsp-indicators&#34;&gt;LSP indicators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#custom-areas&#34;&gt;Custom areas&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#how-do-i-see-only-buffers-per-tab&#34;&gt;How do I see only buffers per tab?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#caveats&#34;&gt;Caveats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akinsho/bufferline.nvim/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--toc:end--&gt; &#xA;&lt;p&gt;This plugin shamelessly attempts to emulate the aesthetics of GUI text editors/Doom Emacs. It was inspired by a screenshot of DOOM Emacs using &lt;a href=&#34;https://github.com/ema2159/centaur-tabs&#34;&gt;centaur tabs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.8+&lt;/li&gt; &#xA; &lt;li&gt;A patched font (see &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;nerd fonts&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A colorscheme (either your custom highlight or a maintained one somewhere)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;It is advised that you specify either the latest tag or a specific tag and bump them manually if you&#39;d prefer to inspect changes before updating. If you&#39;d like to use an older version of the plugin compatible with nvim-0.6.1 and below please change your tag to &lt;code&gt;tag = &#34;v1.*&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- using packer.nvim&#xA;use {&#39;akinsho/bufferline.nvim&#39;, tag = &#34;v3.*&#34;, requires = &#39;nvim-tree/nvim-web-devicons&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vimscript&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-tree/nvim-web-devicons&#39; &#34; Recommended (for coloured icons)&#xA;&#34; Plug &#39;ryanoasis/vim-devicons&#39; Icons without colours&#xA;Plug &#39;akinsho/bufferline.nvim&#39;, { &#39;tag&#39;: &#39;v3.*&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the docs for details &lt;code&gt;:h bufferline.nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You need to be using &lt;code&gt;termguicolors&lt;/code&gt; for this plugin to work, as it reads the hex &lt;code&gt;gui&lt;/code&gt; color values of various highlight groups.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vimscript&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; In your init.lua or init.vim&#xA;set termguicolors&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#34;bufferline&#34;).setup{}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.termguicolors = true&#xA;require(&#34;bufferline&#34;).setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can close buffers by clicking the close icon or by &lt;em&gt;right clicking&lt;/em&gt; the tab anywhere&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;for more details on how to configure this plugin in details please see &lt;code&gt;:h bufferline-configuration&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Colours derived from colorscheme where possible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sort buffers by &lt;code&gt;extension&lt;/code&gt;, &lt;code&gt;directory&lt;/code&gt; or pass in a custom compare function&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configuration via lua functions for greater customization.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Alternate styling&lt;/h4&gt; &#xA;&lt;h5&gt;Slanted tabs&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111992989-fec39b80-8b0d-11eb-851b-010641196a04.png&#34; alt=&#34;slanted tabs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: some terminals require special characters to be padded so set the style to &lt;code&gt;padded_slant&lt;/code&gt; if the appearance isn&#39;t right in your terminal emulator. Please keep in mind though that results may vary depending on your terminal emulator of choice and this style might will not work for all terminals&lt;/p&gt; &#xA;&lt;h5&gt;Sloped tabs&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/220115787-0ba2264f-1cf5-4f18-a322-7c7cfa3d8f42.png&#34; alt=&#34;sloped tabs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;see: &lt;code&gt;:h bufferline-styling&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Hover events&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: this is only available for &lt;em&gt;neovim 0.8+ (nightly) ONLY&lt;/em&gt; and is still &lt;strong&gt;experimental&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/189106657-163b0550-897c-42c8-a571-d899bdd69998.gif&#34; alt=&#34;hover-event-preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;see &lt;code&gt;:help bufferline-hover-events&lt;/code&gt; for more information on configuration&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Underline indicator&lt;/h4&gt; &#xA;&lt;img width=&#34;1355&#34; alt=&#34;Screen Shot 2022-08-22 at 09 14 24&#34; src=&#34;https://user-images.githubusercontent.com/22454918/185873089-2ae20db0-f292-4d96-afe4-ef0683a60709.png&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: as with the above your mileage will vary based on your terminal emulator. The screenshot above was achieved using kitty nightly (as of August 2022), with increased underline thickness and an increased underline position so it sits further from the text&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Tabpages&lt;/h4&gt; &#xA;&lt;img width=&#34;800&#34; alt=&#34;Screen Shot 2022-03-08 at 17 39 57&#34; src=&#34;https://user-images.githubusercontent.com/22454918/157337891-1848da24-69d6-4970-96ee-cf65b2a25c46.png&#34;&gt; &#xA;&lt;p&gt;This plugin can also be set to show only tabpages. This can be done by setting the &lt;code&gt;mode&lt;/code&gt; option to &lt;code&gt;tabs&lt;/code&gt;. This will change the bufferline to a tabline it has a lot of the same features/styling but not all.&lt;/p&gt; &#xA;&lt;p&gt;A few things to note are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sorting doesn&#39;t work yet as that needs to be thought through.&lt;/li&gt; &#xA; &lt;li&gt;Grouping doesn&#39;t work yet as that also needs to be thought through.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;LSP indicators&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/113215394-b1180300-9272-11eb-9632-8a9f9aae99fa.png&#34; alt=&#34;LSP Indicator&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;By setting &lt;code&gt;diagnostics = &#34;nvim_lsp&#34; | &#34;coc&#34;&lt;/code&gt; you will get an indicator in the bufferline for a given tab if it has any errors This will allow you to tell at a glance if a particular buffer has errors.&lt;/p&gt; &#xA;&lt;p&gt;In order to customise the appearance of the diagnostic count you can pass a custom function in your setup.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;snippet&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- rest of config ...&#xA;&#xA;--- count is an integer representing total count of errors&#xA;--- level is a string &#34;error&#34; | &#34;warning&#34;&#xA;--- diagnostics_dict is a dictionary from error level (&#34;error&#34;, &#34;warning&#34; or &#34;info&#34;)to number of errors for each level.&#xA;--- this should return a string&#xA;--- Don&#39;t get too fancy as this function will be executed a lot&#xA;diagnostics_indicator = function(count, level, diagnostics_dict, context)&#xA;  local icon = level:match(&#34;error&#34;) and &#34;ÔÅú &#34; or &#34;ÔÅ± &#34;&#xA;  return &#34; &#34; .. icon .. count&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4028913/112573484-9ee92100-8da9-11eb-9ffd-da9cb9cae3a6.png&#34; alt=&#34;diagnostics_indicator&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;snippet&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;diagnostics_indicator = function(count, level, diagnostics_dict, context)&#xA;  local s = &#34; &#34;&#xA;  for e, n in pairs(diagnostics_dict) do&#xA;    local sym = e == &#34;error&#34; and &#34;ÔÅó &#34;&#xA;      or (e == &#34;warning&#34; and &#34;ÔÅ± &#34; or &#34;ÔÑ©&#34; )&#xA;    s = s .. n .. sym&#xA;  end&#xA;  return s&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;The highlighting for the file name if there is an error can be changed by replacing the highlights for see:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:h bufferline-highlights&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;LSP indicators can additionally be reported conditionally, based on buffer context. For instance, you could disable reporting LSP indicators for the current buffer and only have them appear for other buffers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;diagnostics_indicator = function(count, level, diagnostics_dict, context)&#xA;  if context.buffer:current() then&#xA;    return &#39;&#39;&#xA;  end&#xA;&#xA;  return &#39;ÔÑ®&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/58056722/119390133-e5d19500-bccc-11eb-915d-f5d11f8e652c.jpeg&#34; alt=&#34;current&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/58056722/119390136-e66a2b80-bccc-11eb-9a87-e622e3e20563.jpeg&#34; alt=&#34;visible&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The first bufferline shows &lt;code&gt;diagnostic.lua&lt;/code&gt; as the currently opened &lt;code&gt;current&lt;/code&gt; buffer. It has LSP reported errors, but they don&#39;t show up in the bufferline. The second bufferline shows &lt;code&gt;500-nvim-bufferline.lua&lt;/code&gt; as the currently opened &lt;code&gt;current&lt;/code&gt; buffer. Because the &#39;faulty&#39; &lt;code&gt;diagnostic.lua&lt;/code&gt; buffer has now transitioned from &lt;code&gt;current&lt;/code&gt; to &lt;code&gt;visible&lt;/code&gt;, the LSP indicator does show up.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Groups&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/132410772-0a4c0b95-63bb-4281-8a4e-a652458c3f0f.gif&#34; alt=&#34;bufferline_group_toggle&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The buffers this plugin shows can be grouped based on a users configuration. Groups are a way of allowing a user to visualize related buffers in clusters as well as operating on them together e.g. by clicking the group indicator all grouped buffers can be hidden. They are partially inspired by google chrome&#39;s tabs as well as centaur tab&#39;s groups.&lt;/p&gt; &#xA;&lt;p&gt;see &lt;code&gt;:help bufferline-groups&lt;/code&gt; for more information on how to set these up&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Sidebar offsets&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/117363338-5fd3e280-aeb4-11eb-99f2-5ec33dff6f31.png&#34; alt=&#34;explorer header&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Numbers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/119562833-b5f2c200-bd9e-11eb-81d3-06876024bf30.png&#34; alt=&#34;bufferline with numbers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can prefix buffer names with either the &lt;code&gt;ordinal&lt;/code&gt; or &lt;code&gt;buffer id&lt;/code&gt;, using the &lt;code&gt;numbers&lt;/code&gt; option. Currently this can be specified as either a string of &lt;code&gt;buffer_id&lt;/code&gt; | &lt;code&gt;ordinal&lt;/code&gt; or a function&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/130784872-936d4c55-b9dd-413b-871d-7bc66caf8f17.png&#34; alt=&#34;numbers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;see &lt;code&gt;:help bufferline-numbers&lt;/code&gt; for more details&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Unique names&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111993343-6da0f480-8b0e-11eb-8d93-44019458d2c9.png&#34; alt=&#34;duplicate names&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Close icons&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111993390-7a254d00-8b0e-11eb-9951-43b4350f6a29.gif&#34; alt=&#34;close button&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Re-ordering&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111993463-91643a80-8b0e-11eb-87f0-26acfe92c021.gif&#34; alt=&#34;re-order buffers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This order can be persisted between sessions (enabled by default).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Picking&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/111993296-5bbf5180-8b0e-11eb-9ad9-fcf9619436fd.gif&#34; alt=&#34;bufferline pick&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Pinning&lt;/h4&gt; &#xA;&lt;img width=&#34;899&#34; alt=&#34;Screen Shot 2022-03-31 at 18 13 50&#34; src=&#34;https://user-images.githubusercontent.com/22454918/161112867-ba48fdf6-42ee-4cd3-9e1a-7118c4a2738b.png&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Custom areas&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/118527523-4d219f00-b739-11eb-889f-60fb06fd71bc.png&#34; alt=&#34;custom area&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;see &lt;code&gt;:help bufferline-custom-areas&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How do I see only buffers per tab?&lt;/h2&gt; &#xA;&lt;p&gt;This behaviour is &lt;em&gt;not native in neovim&lt;/em&gt; there is no internal concept of localised buffers to tabs as that is not how tabs were designed to work. They were designed to show an arbitrary layout of windows per tab.&lt;/p&gt; &#xA;&lt;p&gt;You can get this behaviour using &lt;a href=&#34;https://github.com/tiagovla/scope.nvim&#34;&gt;scope.nvim&lt;/a&gt; with this plugin. Although I believe a better long-term solution for users who want this functionality is to ask for real native support for this upstream.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This won&#39;t appeal to everyone&#39;s tastes. This plugin is opinionated about how the tabline looks, it&#39;s unlikely to please everyone.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I want to prevent this becoming a pain to maintain so I&#39;ll be conservative about what I add.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This plugin relies on some basic highlights being set by your colour scheme i.e. &lt;code&gt;Normal&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;TabLineSel&lt;/code&gt; (&lt;code&gt;WildMenu&lt;/code&gt; as fallback), &lt;code&gt;Comment&lt;/code&gt;. It&#39;s unlikely to work with all colour schemes. You can either try manually overriding the colours or manually creating these highlight groups before loading this plugin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the contrast in your colour scheme isn&#39;t very high, think an all black colour scheme, some of the highlights of this plugin won&#39;t really work as intended since it depends on darkening things.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why isn&#39;t the bufferline appearing?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The most common reason for this that has come up in various issues is it clashes with another plugin. Please make sure that you do not have another bufferline plugin installed.&lt;/p&gt; &lt;p&gt;If you are using &lt;code&gt;airline&lt;/code&gt; make sure you set &lt;code&gt;let g:airline#extensions#tabline#enabled = 0&lt;/code&gt;. If you are using &lt;code&gt;lightline&lt;/code&gt; this also takes over the tabline by default and needs to be deactivated.&lt;/p&gt; &lt;p&gt;If you are on Windows and use the GUI version of nvim (nvim-qt.exe) then also ensure, that &lt;code&gt;GuiTabline&lt;/code&gt; is disabled. For this create a file called &lt;code&gt;ginit.vim&lt;/code&gt; in your nvim config directory and put the line &lt;code&gt;GuiTabline 0&lt;/code&gt; in it. Otherwise the QT tabline will overlay any terminal tablines.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Doesn&#39;t this plugin go against the &#34;vim way&#34;?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This is much better explained by &lt;a href=&#34;https://github.com/ap/vim-buftabline#why-this-and-not-vim-tabs&#34;&gt;buftablines&#39;s author&lt;/a&gt;. Please read this for a more comprehensive answer to this questions. The short answer to this is buffers represent files in nvim and tabs, a collection of windows (or just one). Vim natively allows visualising tabs i.e. collections of window, but not just the files that are open. There are &lt;em&gt;endless&lt;/em&gt; debates on this topic, but allowing a user to see what files they have open doesn&#39;t go against any clearly stated vim philosophy. It&#39;s a text editor and not a religion üôè. Obviously this won&#39;t appeal to everyone, which isn&#39;t really a feasible objective anyway.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-telescope/telescope.nvim</title>
    <updated>2023-02-26T01:58:18Z</updated>
    <id>tag:github.com,2023-02-26:/nvim-telescope/telescope.nvim</id>
    <link href="https://github.com/nvim-telescope/telescope.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find, Filter, Preview, Pick. All lua, all the time.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;telescope.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/nvim-telescope/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/nvim-telescope/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://luarocks.org/modules/Conni2461/telescope.nvim&#34;&gt;&lt;img src=&#34;https://img.shields.io/luarocks/v/Conni2461/telescope.nvim?logo=lua&amp;amp;color=purple&#34; alt=&#34;LuaRocks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gaze deeply into unknown regions using the power of the moon.&lt;/p&gt; &#xA;&lt;h2&gt;What Is Telescope?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;telescope.nvim&lt;/code&gt; is a highly extendable fuzzy finder over lists. Built on the latest awesome features from &lt;code&gt;neovim&lt;/code&gt; core. Telescope is centered around modularity, allowing for easy customization.&lt;/p&gt; &#xA;&lt;p&gt;Community driven builtin &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;pickers&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#sorters&#34;&gt;sorters&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#previewers&#34;&gt;previewers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TTTja6t.gif&#34; alt=&#34;Preview&#34;&gt; &lt;sub&gt;For more showcases of Telescope, please visit the &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Showcase&#34;&gt;Showcase section&lt;/a&gt; in the Telescope Wiki&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Telescope Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#default-mappings&#34;&gt;Default Mappings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;Pickers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#previewers&#34;&gt;Previewers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#sorters&#34;&gt;Sorters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#layout-display&#34;&gt;Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#themes&#34;&gt;Themes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#vim-commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#autocmds&#34;&gt;Autocmds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#media&#34;&gt;Media&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/raw/master/doc/telescope_changelog.txt&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This section should guide you to run your first builtin pickers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.7.0&#34;&gt;Neovim (v0.7.0)&lt;/a&gt; or the latest neovim nightly commit is required for &lt;code&gt;telescope.nvim&lt;/code&gt; to work.&lt;/p&gt; &#xA;&lt;h3&gt;Required dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;nvim-lua/plenary.nvim&lt;/a&gt; is required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Suggested dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;BurntSushi/ripgrep&lt;/a&gt; is required for &lt;code&gt;live_grep&lt;/code&gt; and &lt;code&gt;grep_string&lt;/code&gt; and is the first priority for &lt;code&gt;find_files&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also suggest you install one native telescope sorter to significantly improve sorting performance. Take a look at either &lt;a href=&#34;https://github.com/nvim-telescope/telescope-fzf-native.nvim&#34;&gt;telescope-fzf-native.nvim&lt;/a&gt; or &lt;a href=&#34;https://github.com/nvim-telescope/telescope-fzy-native.nvim&#34;&gt;telescope-fzy-native.nvim&lt;/a&gt;. For more information and a performance benchmark take a look at the &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Extensions&#34;&gt;Extensions&lt;/a&gt; wiki.&lt;/p&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;sharkdp/fd&lt;/a&gt; (finder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter/nvim-treesitter&lt;/a&gt; (finder/preview)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;neovim LSP&lt;/a&gt; (picker)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;devicons&lt;/a&gt; (icons)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;It is suggested to either use the latest release &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/tags&#34;&gt;tag&lt;/a&gt; or our release branch (which will get consistent updates) &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/tree/0.1.x&#34;&gt;0.1.x&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is not suggested to run latest master.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;nvim-telescope/telescope.nvim&#39;, { &#39;tag&#39;: &#39;0.1.1&#39; }&#xA;&#34; or                                , { &#39;branch&#39;: &#39;0.1.x&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;dein&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;call dein#add(&#39;nvim-lua/plenary.nvim&#39;)&#xA;call dein#add(&#39;nvim-telescope/telescope.nvim&#39;, { &#39;rev&#39;: &#39;0.1.1&#39; })&#xA;&#34; or                                         , { &#39;rev&#39;: &#39;0.1.x&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;nvim-telescope/telescope.nvim&#39;, tag = &#39;0.1.1&#39;,&#xA;-- or                            , branch = &#39;0.1.x&#39;,&#xA;  requires = { {&#39;nvim-lua/plenary.nvim&#39;} }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua:&#xA;    {&#xA;    &#39;nvim-telescope/telescope.nvim&#39;, tag = &#39;0.1.1&#39;,&#xA;-- or                              , branch = &#39;0.1.1&#39;,&#xA;      dependencies = { &#39;nvim-lua/plenary.nvim&#39; }&#xA;    }&#xA;&#xA;-- plugins/telescope.lua:&#xA;return {&#xA;    {&#xA;    &#39;nvim-telescope/telescope.nvim&#39;, tag = &#39;0.1.1&#39;,&#xA;-- or                              , branch = &#39;0.1.1&#39;,&#xA;      dependencies = { &#39;nvim-lua/plenary.nvim&#39; }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;checkhealth&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you call &lt;code&gt;:checkhealth telescope&lt;/code&gt; after installing telescope to ensure everything is set up correctly.&lt;/p&gt; &#xA;&lt;p&gt;After this setup you can continue reading here or switch to &lt;code&gt;:help telescope&lt;/code&gt; to get an understanding of how to use Telescope and how to configure it.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Try the command &lt;code&gt;:Telescope find_files&amp;lt;cr&amp;gt;&lt;/code&gt; to see if &lt;code&gt;telescope.nvim&lt;/code&gt; is installed correctly.&lt;/p&gt; &#xA;&lt;p&gt;Using VimL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;&#34; Find files using Telescope command-line sugar.&#xA;nnoremap &amp;lt;leader&amp;gt;ff &amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fg &amp;lt;cmd&amp;gt;Telescope live_grep&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fb &amp;lt;cmd&amp;gt;Telescope buffers&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fh &amp;lt;cmd&amp;gt;Telescope help_tags&amp;lt;cr&amp;gt;&#xA;&#xA;&#34; Using Lua functions&#xA;nnoremap &amp;lt;leader&amp;gt;ff &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).find_files()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fg &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).live_grep()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fb &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).buffers()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fh &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).help_tags()&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local builtin = require(&#39;telescope.builtin&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;ff&#39;, builtin.find_files, {})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;fg&#39;, builtin.live_grep, {})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;fb&#39;, builtin.buffers, {})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;fh&#39;, builtin.help_tags, {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;builtin pickers&lt;/a&gt; for a list of all builtin functions.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;This section should help you explore available options to configure and customize your &lt;code&gt;telescope.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike most vim plugins, &lt;code&gt;telescope.nvim&lt;/code&gt; can be customized by either applying customizations globally, or individually per picker.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Global Customization&lt;/strong&gt; affecting all pickers can be done through the main &lt;code&gt;setup()&lt;/code&gt; method (see defaults below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Individual Customization&lt;/strong&gt; affecting a single picker by passing &lt;code&gt;opts&lt;/code&gt; to builtin pickers (e.g. &lt;code&gt;builtin.find_files(opts)&lt;/code&gt;) see &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Configuration-Recipes&#34;&gt;Configuration recipes&lt;/a&gt; wiki page for ideas.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Telescope setup structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup{&#xA;  defaults = {&#xA;    -- Default configuration for telescope goes here:&#xA;    -- config_key = value,&#xA;    mappings = {&#xA;      i = {&#xA;        -- map actions.which_key to &amp;lt;C-h&amp;gt; (default: &amp;lt;C-/&amp;gt;)&#xA;        -- actions.which_key shows the mappings for your picker,&#xA;        -- e.g. git_{create, delete, ...}_branch for the git_branches picker&#xA;        [&#34;&amp;lt;C-h&amp;gt;&#34;] = &#34;which_key&#34;&#xA;      }&#xA;    }&#xA;  },&#xA;  pickers = {&#xA;    -- Default configuration for builtin pickers goes here:&#xA;    -- picker_name = {&#xA;    --   picker_config_key = value,&#xA;    --   ...&#xA;    -- }&#xA;    -- Now the picker_config_key will be applied every time you call this&#xA;    -- builtin picker&#xA;  },&#xA;  extensions = {&#xA;    -- Your extension configuration goes here:&#xA;    -- extension_name = {&#xA;    --   extension_config_key = value,&#xA;    -- }&#xA;    -- please take a look at the readme of the extension you want to configure&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To look at what default configuration options exist please read: &lt;code&gt;:help telescope.setup()&lt;/code&gt;. For picker specific &lt;code&gt;opts&lt;/code&gt; please read: &lt;code&gt;:help telescope.builtin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To embed the above code snippet in a &lt;code&gt;.vim&lt;/code&gt; file (for example in &lt;code&gt;after/plugin/telescope.nvim.vim&lt;/code&gt;), wrap it in &lt;code&gt;lua &amp;lt;&amp;lt; EOF code-snippet EOF&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;telescope&#39;).setup{&#xA;  -- ...&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default Mappings&lt;/h2&gt; &#xA;&lt;p&gt;Mappings are fully customizable. Many familiar mapping patterns are set up as defaults.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mappings&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-n&amp;gt;/&amp;lt;Down&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Next item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-p&amp;gt;/&amp;lt;Up&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Previous item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;j/k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Next/previous (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;H/M/L&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select High/Middle/Low (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gg/G&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select the first/last item (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Confirm selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-x&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to file selection as a split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-v&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to file selection as a vsplit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to a file in a new tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-u&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scroll up in preview window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-d&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scroll down in preview window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-/&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show mappings for picker actions (insert mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show mappings for picker actions (normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close telescope (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle selection and move to next selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle selection and move to prev selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-q&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send all items not filtered to quickfixlist (qflist)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;M-q&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send all selected items to qflist&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To see the full list of mappings, check out &lt;code&gt;lua/telescope/mappings.lua&lt;/code&gt; and the &lt;code&gt;default_mappings&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: you can use &lt;code&gt;&amp;lt;C-/&amp;gt;&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; in insert and normal mode, respectively, to show the actions mapped to your picker.&lt;/p&gt; &#xA;&lt;p&gt;Much like &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;builtin pickers&lt;/a&gt;, there are a number of &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/raw/master/lua/telescope/actions/init.lua&#34;&gt;actions&lt;/a&gt; you can pick from to remap your telescope buffer mappings, or create a new custom action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Built-in actions&#xA;local transform_mod = require(&#39;telescope.actions.mt&#39;).transform_mod&#xA;&#xA;-- or create your custom action&#xA;local my_cool_custom_action = transform_mod({&#xA;  x = function(prompt_bufnr)&#xA;    print(&#34;This function ran after another action. Prompt_bufnr: &#34; .. prompt_bufnr)&#xA;    -- Enter your function logic here. You can take inspiration from lua/telescope/actions.lua&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remap telescope mappings, please read &lt;code&gt;:help telescope.defaults.mappings&lt;/code&gt;. To do picker specific mappings, its suggested to do this with the &lt;code&gt;pickers&lt;/code&gt; table in &lt;code&gt;telescope.setup&lt;/code&gt;. Each picker accepts a &lt;code&gt;mappings&lt;/code&gt; table like its explained in &lt;code&gt;:help telescope.defaults.mappings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pickers&lt;/h2&gt; &#xA;&lt;p&gt;Built-in functions. Ready to be bound to any key you like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:lua require&#39;telescope.builtin&#39;.planets{}&#xA;&#xA;:nnoremap &amp;lt;Leader&amp;gt;pp :lua require&#39;telescope.builtin&#39;.planets{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.find_files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists files in your current working directory, respects .gitignore&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fuzzy search through the output of &lt;code&gt;git ls-files&lt;/code&gt; command, respects .gitignore&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.grep_string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Searches for the string under your cursor or selection in your current working directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.live_grep&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search for a string in your current working directory and get results live as you type, respects .gitignore. (Requires &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Vim Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.buffers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists open buffers in current neovim instance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.oldfiles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists previously open files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.commands&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists available plugin/user commands and runs them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists tags in current directory with tag location file preview (users are required to run ctags -R to generate tags or update when introducing new changes)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.command_history&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists commands that were executed recently, and reruns them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.search_history&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists searches that were executed recently, and reruns them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.help_tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists available help tags and opens a new window with the relevant help info on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.man_pages&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists manpage entries, opens them in a help window on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.marks&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim marks and their value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.colorscheme&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists available colorschemes and applies them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.quickfix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists items in the quickfix list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.quickfixhistory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all quickfix lists in your history and open them with &lt;code&gt;builtin.quickfix&lt;/code&gt; or quickfix window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.loclist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists items from the current window&#39;s location list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.jumplist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Jump List entries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.vim_options&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim options, allows you to edit the current value on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.registers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim registers, pastes the contents of the register on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.autocommands&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim autocommands and goes to their declaration on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.spell_suggest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists spelling suggestions for the current word under the cursor, replaces word with selected suggestion on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.keymaps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists normal mode keymappings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.filetypes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all available filetypes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.highlights&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all available highlights&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.current_buffer_fuzzy_find&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Live fuzzy search inside of the currently open buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.current_buffer_tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all of the tags for the currently open buffer, with a preview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.resume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists the results incl. multi-selections of the previous picker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.pickers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists the previous pickers incl. multi-selections (see &lt;code&gt;:h telescope.defaults.cache_picker&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Neovim LSP Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_references&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP references for word under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_incoming_calls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP incoming calls for word under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_outgoing_calls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP outgoing calls for word under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_document_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP document symbols in the current buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_workspace_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP document symbols in the current workspace&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_dynamic_workspace_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dynamically Lists LSP for all workspace symbols&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.diagnostics&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Diagnostics for all open buffers or a specific buffer. Use option &lt;code&gt;bufnr=0&lt;/code&gt; for current buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_implementations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Goto the implementation of the word under the cursor if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_definitions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Goto the definition of the word under the cursor, if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_type_definitions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Goto the definition of the type of the word under the cursor, if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Git Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_commits&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists git commits with diff preview, checkout action &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;, reset mixed &lt;code&gt;&amp;lt;C-r&amp;gt;m&lt;/code&gt;, reset soft &lt;code&gt;&amp;lt;C-r&amp;gt;s&lt;/code&gt; and reset hard &lt;code&gt;&amp;lt;C-r&amp;gt;h&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_bcommits&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists buffer&#39;s git commits with diff preview and checks them out on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_branches&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all branches with log preview, checkout action &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;, track action &lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt; and rebase action&lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_status&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists current changes per file with diff preview and add action. (Multi-selection still WIP)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_stash&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists stash items in current repository with ability to apply them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Treesitter Picker&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.treesitter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Function names, variables, from Treesitter!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Lists Picker&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.planets&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the telescope...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.builtin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Built-in pickers and run them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.reloader&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Lua modules and reload them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists symbols inside a file &lt;code&gt;data/telescope-sources/*.json&lt;/code&gt; found in your rtp. More info and symbol sources can be found &lt;a href=&#34;https://github.com/nvim-telescope/telescope-symbols.nvim&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Previewers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Previewers&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_cat.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default previewer for files. Uses vim buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_vimgrep.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default previewer for grep and similar. Uses vim buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_qflist.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default previewer for qflist. Uses vim buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.cat.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Terminal previewer for files. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vimgrep.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Terminal previewer for grep and similar. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.qflist.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Terminal previewer for qflist. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The default previewers are from now on &lt;code&gt;vim_buffer_&lt;/code&gt; previewers. They use vim buffers for displaying files and use tree-sitter or regex for file highlighting.&lt;/p&gt; &#xA;&lt;p&gt;These previewers are guessing the filetype of the selected file, so there might be cases where they miss, leading to wrong highlights. This is because we can&#39;t determine the filetype in the traditional way: We don&#39;t do &lt;code&gt;bufload&lt;/code&gt; and instead read the file asynchronously with &lt;code&gt;vim.loop.fs_&lt;/code&gt; and attach only a highlighter; otherwise the speed of the previewer would slow down considerably. If you want to configure more filetypes, take a look at &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim#plenaryfiletype&#34;&gt;plenary wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to configure the &lt;code&gt;vim_buffer_&lt;/code&gt; previewer (e.g. you want the line to wrap), do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;autocmd User TelescopePreviewerLoaded setlocal wrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sorters&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sorters&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_fuzzy_file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Telescope&#39;s default sorter for files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_generic_fuzzy_sorter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Telescope&#39;s default sorter for everything else&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_levenshtein_sorter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using Levenshtein distance algorithm (don&#39;t use :D)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_fzy_sorter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using fzy algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.fuzzy_with_index_bias&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Used to list stuff with consideration to when the item is added&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A &lt;code&gt;Sorter&lt;/code&gt; is called by the &lt;code&gt;Picker&lt;/code&gt; on each item returned by the &lt;code&gt;Finder&lt;/code&gt;. It returns a number, which is equivalent to the &#34;distance&#34; between the current &lt;code&gt;prompt&lt;/code&gt; and the &lt;code&gt;entry&lt;/code&gt; returned by a &lt;code&gt;finder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Layout (display)&lt;/h2&gt; &#xA;&lt;p&gt;Layout can be configured by choosing a specific &lt;code&gt;layout_strategy&lt;/code&gt; and specifying a particular &lt;code&gt;layout_config&lt;/code&gt; for that strategy. For more details on available strategies and configuration options, see &lt;code&gt;:help telescope.layout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some options for configuring sizes in layouts are &#34;resolvable&#34;. This means that they can take different forms, and will be interpreted differently according to which form they take. For example, if we wanted to set the &lt;code&gt;width&lt;/code&gt; of a picker using the &lt;code&gt;vertical&lt;/code&gt; layout strategy to 50% of the screen width, we would specify that width as &lt;code&gt;0.5&lt;/code&gt;, but if we wanted to specify the &lt;code&gt;width&lt;/code&gt; to be exactly 80 characters wide, we would specify it as &lt;code&gt;80&lt;/code&gt;. For more details on resolving sizes, see &lt;code&gt;:help telescope.resolve&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example, if we wanted to specify the layout strategy and width, but only for this instance, we could do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:lua require(&#39;telescope.builtin&#39;).find_files({layout_strategy=&#39;vertical&#39;,layout_config={width=0.5}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we wanted to change the width for every time we use the &lt;code&gt;vertical&lt;/code&gt; layout strategy, we could add the following to our &lt;code&gt;setup()&lt;/code&gt; call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup({&#xA;  defaults = {&#xA;    layout_config = {&#xA;      vertical = { width = 0.5 }&#xA;      -- other layout configuration here&#xA;    },&#xA;    -- other defaults configuration here&#xA;  },&#xA;  -- other configuration values here&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;p&gt;Common groups of settings can be set up to allow for themes. We have some built in themes but are looking for more cool options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/SorAcXv.png&#34; alt=&#34;dropdown&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Themes&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;themes.get_dropdown&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list like centered list. &lt;a href=&#34;https://i.imgur.com/SorAcXv.png&#34;&gt;dropdown&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;themes.get_cursor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/pull/878&#34;&gt;A cursor relative list.&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;themes.get_ivy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bottom panel overlay. &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/pull/771&#34;&gt;Ivy #771&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To use a theme, simply append it to a builtin function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;Leader&amp;gt;f :lua require&#39;telescope.builtin&#39;.find_files(require(&#39;telescope.themes&#39;).get_dropdown({}))&amp;lt;cr&amp;gt;&#xA;&#34; Change an option&#xA;nnoremap &amp;lt;Leader&amp;gt;f :lua require&#39;telescope.builtin&#39;.find_files(require(&#39;telescope.themes&#39;).get_dropdown({ winblend = 10 }))&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use with a command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Telescope find_files theme=dropdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can configure it in the pickers table in &lt;code&gt;telescope.setup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup{&#xA;  defaults = {&#xA;    -- ...&#xA;  },&#xA;  pickers = {&#xA;    find_files = {&#xA;      theme = &#34;dropdown&#34;,&#xA;    }&#xA;  },&#xA;  extensions = {&#xA;    -- ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Themes should work with every &lt;code&gt;telescope.builtin&lt;/code&gt; function. If you wish to make a theme, check out &lt;code&gt;lua/telescope/themes.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Vim Commands&lt;/h2&gt; &#xA;&lt;p&gt;All &lt;code&gt;telescope.nvim&lt;/code&gt; functions are wrapped in &lt;code&gt;vim&lt;/code&gt; commands for easy access, tab completions and setting options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;&#34; Show all builtin pickers&#xA;:Telescope&#xA;&#xA;&#34; Tab completion&#xA;:Telescope |&amp;lt;tab&amp;gt;&#xA;:Telescope find_files&#xA;&#xA;&#34; Setting options&#xA;:Telescope find_files prompt_prefix=üîç&#xA;&#xA;&#34; If the option accepts a Lua table as its value, you can use, to connect each&#xA;&#34; command string, e.g.: find_command, vimgrep_arguments are both options that&#xA;&#34; accept a Lua table as a value. So, you can configure them on the command line&#xA;&#34;like so:&#xA;:Telescope find_files find_command=rg,--ignore,--hidden,--files prompt_prefix=üîç&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for more information and how to realize more complex commands please read &lt;code&gt;:help telescope.command&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Autocmds&lt;/h2&gt; &#xA;&lt;p&gt;Telescope user autocmds:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Event&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;User TelescopeFindPre&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do it before Telescope creates all the floating windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;User TelescopePreviewerLoaded&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do it after Telescope previewer window is created&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Telescope provides the capabilities to create &amp;amp; register extensions, which improves telescope in a variety of ways.&lt;/p&gt; &#xA;&lt;p&gt;Some extensions provide integration with external tools, outside of the scope of &lt;code&gt;builtins&lt;/code&gt;. Others provide performance enhancements by using compiled C and interfacing directly with Lua over LuaJIT&#39;s FFI library.&lt;/p&gt; &#xA;&lt;p&gt;A list of community extensions can be found in the &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Extensions&#34;&gt;Extensions&lt;/a&gt; wiki. Always read the README of the extension you want to install, but here is a general overview of how most extensions work.&lt;/p&gt; &#xA;&lt;h3&gt;Loading extensions&lt;/h3&gt; &#xA;&lt;p&gt;To load an extension, use the &lt;code&gt;load_extension&lt;/code&gt; function as shown in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- This will load fzy_native and have it override the default file sorter&#xA;require(&#39;telescope&#39;).load_extension(&#39;fzy_native&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may skip explicitly loading extensions (they will then be lazy-loaded), but tab completions will not be available right away.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing pickers from extensions&lt;/h3&gt; &#xA;&lt;p&gt;Pickers from extensions are added to the &lt;code&gt;:Telescope&lt;/code&gt; command under their respective name. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;&#34; Run the `configurations` picker from nvim-dap&#xA;:Telescope dap configurations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They can also be called directly from Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Run the `configurations` picker from nvim-dap&#xA;require(&#39;telescope&#39;).extensions.dap.configurations()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;For writing your own picker and for information about the API please read the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/developers.md&#34;&gt;Developers Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Media&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/teej_dv/clip/RichDistinctPlumberPastaThat&#34;&gt;What is Telescope? (Video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/videos/756229115&#34;&gt;More advanced configuration (Video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=65AVwHZflsU&#34;&gt;Example video&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are welcome! Just open a pull request. Please read &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;fzf.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shougo/denite.nvim&#34;&gt;denite.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liuchengxu/vim-clap&#34;&gt;vim-clap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>