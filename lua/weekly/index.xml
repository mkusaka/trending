<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-12T01:41:27Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>David-Kunz/gen.nvim</title>
    <updated>2024-05-12T01:41:27Z</updated>
    <id>tag:github.com,2024-05-12:/David-Kunz/gen.nvim</id>
    <link href="https://github.com/David-Kunz/gen.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin to generate text using LLMs with customizable prompts&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gen.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Generate text using LLMs with customizable prompts&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/David-Kunz/gen.nvim/assets/1009936/79f17157-9327-484a-811b-2d71ceb8fbe3&#34; alt=&#34;gen_nvim&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/FIZt7MinpMY?si=KChSuJJDyrcTdYiM&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1009936/273126287-7b5f2b40-c678-47c5-8f21-edf9516f6034.jpg&#34; alt=&#34;Local LLMs in Neovim: gen.nvim&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requires&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama&lt;/a&gt; with an appropriate model, e.g. &lt;a href=&#34;https://ollama.com/library/llama3&#34;&gt;&lt;code&gt;llama3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://ollama.ai/library/mistral&#34;&gt;&lt;code&gt;mistral&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://ollama.ai/library/zephyr&#34;&gt;&lt;code&gt;zephyr&lt;/code&gt;&lt;/a&gt; (customizable)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://curl.se/&#34;&gt;Curl&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install with your favorite plugin manager, e.g. &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example with Lazy&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Minimal configuration&#xA;{ &#34;David-Kunz/gen.nvim&#34; },&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;-- Custom Parameters (with defaults)&#xA;{&#xA;    &#34;David-Kunz/gen.nvim&#34;,&#xA;    opts = {&#xA;        model = &#34;mistral&#34;, -- The default model to use.&#xA;        host = &#34;localhost&#34;, -- The host running the Ollama service.&#xA;        port = &#34;11434&#34;, -- The port on which the Ollama service is listening.&#xA;        quit_map = &#34;q&#34;, -- set keymap for close the response window&#xA;        retry_map = &#34;&amp;lt;c-r&amp;gt;&#34;, -- set keymap to re-send the current prompt&#xA;        init = function(options) pcall(io.popen, &#34;ollama serve &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&#34;) end,&#xA;        -- Function to initialize Ollama&#xA;        command = function(options)&#xA;            local body = {model = options.model, stream = true}&#xA;            return &#34;curl --silent --no-buffer -X POST http://&#34; .. options.host .. &#34;:&#34; .. options.port .. &#34;/api/chat -d $body&#34;&#xA;        end,&#xA;        -- The command for the Ollama service. You can use placeholders $prompt, $model and $body (shellescaped).&#xA;        -- This can also be a command string.&#xA;        -- The executed command must return a JSON object with { response, context }&#xA;        -- (context property is optional).&#xA;        -- list_models = &#39;&amp;lt;omitted lua function&amp;gt;&#39;, -- Retrieves a list of model names&#xA;        display_mode = &#34;float&#34;, -- The display mode. Can be &#34;float&#34; or &#34;split&#34;.&#xA;        show_prompt = false, -- Shows the prompt submitted to Ollama.&#xA;        show_model = false, -- Displays which model you are using at the beginning of your chat session.&#xA;        no_auto_close = false, -- Never closes the window automatically.&#xA;        debug = false -- Prints errors and the command which is run.&#xA;    }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are all &lt;a href=&#34;https://ollama.ai/library&#34;&gt;available models&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can call the &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gen&#39;).setup({&#xA;  -- same as above&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use command &lt;code&gt;Gen&lt;/code&gt; to generate text based on predefined and customizable prompts.&lt;/p&gt; &#xA;&lt;p&gt;Example key maps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set({ &#39;n&#39;, &#39;v&#39; }, &#39;&amp;lt;leader&amp;gt;]&#39;, &#39;:Gen&amp;lt;CR&amp;gt;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also directly invoke it with one of the &lt;a href=&#34;https://raw.githubusercontent.com/David-Kunz/gen.nvim/main/lua/gen/prompts.lua&#34;&gt;predefined prompts&lt;/a&gt; or your custom prompts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;]&#39;, &#39;:Gen Enhance_Grammar_Spelling&amp;lt;CR&amp;gt;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once a conversation is started, the whole context is sent to the LLM. That allows you to ask follow-up questions with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:Gen Chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and once the window is closed, you start with a fresh conversation.&lt;/p&gt; &#xA;&lt;p&gt;You can select a model from a list of all installed models with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gen&#39;).select_model()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Prompts&lt;/h2&gt; &#xA;&lt;p&gt;All prompts are defined in &lt;code&gt;require(&#39;gen&#39;).prompts&lt;/code&gt;, you can enhance or modify them.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gen&#39;).prompts[&#39;Elaborate_Text&#39;] = {&#xA;  prompt = &#34;Elaborate the following text:\n$text&#34;,&#xA;  replace = true&#xA;}&#xA;require(&#39;gen&#39;).prompts[&#39;Fix_Code&#39;] = {&#xA;  prompt = &#34;Fix the following code. Only ouput the result in format ```$filetype\n...\n```:\n```$filetype\n$text\n```&#34;,&#xA;  replace = true,&#xA;  extract = &#34;```$filetype\n(.-)```&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the following properties per prompt:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;prompt&lt;/code&gt;: (string | function) Prompt either as a string or a function which should return a string. The result can use the following placeholders: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;$text&lt;/code&gt;: Visually selected text&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;$filetype&lt;/code&gt;: File type of the buffer (e.g. &lt;code&gt;javascript&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;$input&lt;/code&gt;: Additional user input&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;$register&lt;/code&gt;: Value of the unnamed register (yanked text)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;replace&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the selected text shall be replaced with the generated output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;extract&lt;/code&gt;: Regular expression used to extract the generated result&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;model&lt;/code&gt;: The model to use, e.g. &lt;code&gt;zephyr&lt;/code&gt;, default: &lt;code&gt;mistral&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tip&lt;/h2&gt; &#xA;&lt;p&gt;User selections can be delegated to &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt; with &lt;a href=&#34;https://github.com/nvim-telescope/telescope-ui-select.nvim&#34;&gt;telescope-ui-select&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shellRaining/hlchunk.nvim</title>
    <updated>2024-05-12T01:41:27Z</updated>
    <id>tag:github.com,2024-05-12:/shellRaining/hlchunk.nvim</id>
    <link href="https://github.com/shellRaining/hlchunk.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is the lua implementation of nvim-hlchunk, you can use this neovim plugin to highlight your indent line and the current chunk (context) your cursor stayed&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img width=&#34;400px&#34; src=&#34;https://raw.githubusercontent.com/shellRaining/img/main/2305/01_logo_bg.png&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;hlchunk.nvim&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;English&lt;/b&gt; | &lt;a href=&#34;https://github.com/shellRaining/hlchunk.nvim/raw/main/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What can this plugin do&lt;/h2&gt; &#xA;&lt;p&gt;similar to &lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;indent-blankline&lt;/a&gt;, this plugin can highlight the indent line, and highlight the code chunk according to the current cursor position.&lt;/p&gt; &#xA;&lt;h2&gt;What is the advantage of this plugin&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;more extensible&lt;/li&gt; &#xA; &lt;li&gt;faster rendering speed (0.04 seconds per thousand renderings, with the window have 50 lines)&lt;/li&gt; &#xA; &lt;li&gt;more active maintenance (the author is a student with a lot of time to maintain this plugin, haha)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Brief introduction&lt;/h2&gt; &#xA;&lt;p&gt;this plugin now have five parts (future will add more... &lt;code&gt;^v^&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;chunk&lt;/li&gt; &#xA; &lt;li&gt;indent&lt;/li&gt; &#xA; &lt;li&gt;line_num&lt;/li&gt; &#xA; &lt;li&gt;blank&lt;/li&gt; &#xA; &lt;li&gt;context (experimental)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;one picture to understand what these mods do&lt;/p&gt; &#xA;&lt;img width=&#34;500&#34; src=&#34;https://raw.githubusercontent.com/shellRaining/img/main/2305/01_intro.png&#34;&gt; &#xA;&lt;h2&gt;more details about each mod&lt;/h2&gt; &#xA;&lt;p&gt;&lt;b&gt;&lt;font color=&#34;red&#34;&gt; NOTE: you can click the picture to get more information about how to configure like this &lt;/font&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;h3&gt;chunk&lt;/h3&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/shellRaining/hlchunk.nvim/main/docs/en/chunk.md#chunk_example1&#34;&gt; &lt;img width=&#34;500&#34; alt=&#34;image&#34; src=&#34;https://raw.githubusercontent.com/shellRaining/img/main/2303/08_hlchunk8.gif&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;indent&lt;/h3&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/shellRaining/hlchunk.nvim/main/docs/en/indent.md&#34;&gt; &lt;img width=&#34;500&#34; alt=&#34;image&#34; src=&#34;https://raw.githubusercontent.com/shellRaining/img/main/2302/23_hlchunk2.png&#34;&gt; &lt;img width=&#34;500&#34; alt=&#34;image&#34; src=&#34;https://raw.githubusercontent.com/shellRaining/img/main/2302/27_hlchunk4.png&#34;&gt; &lt;img width=&#34;500&#34; alt=&#34;image&#34; src=&#34;https://raw.githubusercontent.com/shellRaining/img/main/2305/01_indent.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;line_num&lt;/h3&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/shellRaining/hlchunk.nvim/main/docs/en/line_num.md&#34;&gt; &lt;img width=&#34;500&#34; alt=&#34;image&#34; src=&#34;https://raw.githubusercontent.com/shellRaining/img/main/2302/25_hlchunk3.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;blank&lt;/h3&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/shellRaining/hlchunk.nvim/main/docs/en/blank.md&#34;&gt; &lt;img width=&#34;500&#34; src=&#34;https://raw.githubusercontent.com/shellRaining/img/main/2303/11_hlblank2.png&#34;&gt; &lt;img width=&#34;500&#34; alt=&#34;image&#34; src=&#34;https://raw.githubusercontent.com/shellRaining/img/main/2303/08_hlblank1.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;neovim version &lt;code&gt;&amp;gt;= 0.9.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;shellRaining/hlchunk.nvim&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;call plug#begin()&#xA;Plug &#39;shellRaining/hlchunk.nvim&#39;&#xA;call plug#end()&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#34;hlchunk&#34;).setup({})&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lazy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;shellRaining/hlchunk.nvim&#34;,&#xA;  event = { &#34;UIEnter&#34; },&#xA;  config = function()&#xA;    require(&#34;hlchunk&#34;).setup({})&#xA;  end&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;The script comes with the following defaults:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click this Dropdown to see defaults setttings.&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    chunk = {&#xA;        enable = true,&#xA;        notify = true,&#xA;        use_treesitter = true,&#xA;        -- details about support_filetypes and exclude_filetypes in https://github.com/shellRaining/hlchunk.nvim/blob/main/lua/hlchunk/utils/filetype.lua&#xA;        support_filetypes = ft.support_filetypes,&#xA;        exclude_filetypes = ft.exclude_filetypes,&#xA;        chars = {&#xA;            horizontal_line = &#34;─&#34;,&#xA;            vertical_line = &#34;│&#34;,&#xA;            left_top = &#34;╭&#34;,&#xA;            left_bottom = &#34;╰&#34;,&#xA;            right_arrow = &#34;&amp;gt;&#34;,&#xA;        },&#xA;        style = {&#xA;            { fg = &#34;#806d9c&#34; },&#xA;            { fg = &#34;#c21f30&#34; }, -- this fg is used to highlight wrong chunk&#xA;        },&#xA;        textobject = &#34;&#34;,&#xA;        max_file_size = 1024 * 1024,&#xA;        error_sign = true,&#xA;    },&#xA;&#xA;    indent = {&#xA;        enable = true,&#xA;        use_treesitter = false,&#xA;        chars = {&#xA;            &#34;│&#34;,&#xA;        },&#xA;        style = {&#xA;            { fg = vim.fn.synIDattr(vim.fn.synIDtrans(vim.fn.hlID(&#34;Whitespace&#34;)), &#34;fg&#34;, &#34;gui&#34;) }&#xA;        },&#xA;    },&#xA;&#xA;    line_num = {&#xA;        enable = true,&#xA;        use_treesitter = false,&#xA;        style = &#34;#806d9c&#34;,&#xA;    },&#xA;&#xA;    blank = {&#xA;        enable = true,&#xA;        chars = {&#xA;            &#34;․&#34;,&#xA;        },&#xA;        style = {&#xA;            vim.fn.synIDattr(vim.fn.synIDtrans(vim.fn.hlID(&#34;Whitespace&#34;)), &#34;fg&#34;, &#34;gui&#34;),&#xA;        },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;setup example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;hlchunk&#39;).setup({&#xA;    indent = {&#xA;        chars = { &#34;│&#34;, &#34;¦&#34;, &#34;┆&#34;, &#34;┊&#34;, }, -- more code can be found in https://unicodeplus.com/&#xA;&#xA;        style = {&#xA;            &#34;#8B00FF&#34;,&#xA;        },&#xA;    },&#xA;    blank = {&#xA;        enable = false,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;command&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click this Dropdown to see Available Commands&lt;/summary&gt; &#xA; &lt;p&gt;this plugin provides some commands to switch plugin status, which are listed below&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;EnableHL&lt;/li&gt; &#xA;  &lt;li&gt;DisableHL&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;the two commands are used to switch the whole plugin status, when use &lt;code&gt;DisableHL&lt;/code&gt;, include &lt;code&gt;hl_chunk&lt;/code&gt; and &lt;code&gt;hl_indent&lt;/code&gt; will be disable&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;DisableHLChunk&lt;/li&gt; &#xA;  &lt;li&gt;EnableHLChunk&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;the two will control &lt;code&gt;hl_chunk&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;DisableHLIndent&lt;/li&gt; &#xA;  &lt;li&gt;EnableHLIndent&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;the two will control &lt;code&gt;hl_indent&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;DisableHLLineNum&lt;/li&gt; &#xA;  &lt;li&gt;EnableHLLineNum&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;the two will control &lt;code&gt;hl_line_num&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;DisableHLBlank&lt;/li&gt; &#xA;  &lt;li&gt;EnableHLBlank&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;the two will control &lt;code&gt;hl_blank&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>ejoy/ant</title>
    <updated>2024-05-12T01:41:27Z</updated>
    <id>tag:github.com,2024-05-12:/ejoy/ant</id>
    <link href="https://github.com/ejoy/ant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ant game engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ant 游戏引擎&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ejoy/ant/master/README.en.md&#34;&gt;English Version&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ejoy/ant/master/README.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ant 是由灵犀互娱开发的开源游戏引擎。现阶段仅将代码仓库公开，尚未正式发布。文档、示例等均待在 &lt;a href=&#34;https://github.com/ejoy/ant/wiki&#34;&gt;Wiki&lt;/a&gt; 上逐步完善。如有任何问题，可在 &lt;a href=&#34;https://github.com/ejoy/ant/discussions&#34;&gt;Discussions&lt;/a&gt; 发帖讨论。Issues 仅用于 Bug 跟踪，请不要在里面提问题。&lt;/p&gt; &#xA;&lt;h3&gt;更新并初始化第三方库：&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;git submodule update --init&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;搭建编译环境&lt;/h3&gt; &#xA;&lt;h4&gt;1.1 Windows&lt;/h4&gt; &#xA;&lt;h5&gt;1.1.1 MSVC&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装 Visual Studio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;1.1.2 MINGW&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;下载并安装 &lt;a href=&#34;https://www.msys2.org/&#34;&gt;msys2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;找到 msys2 安装目录，用 mingw64.exe 打开 msys2 的终端&lt;/li&gt; &#xA; &lt;li&gt;在 msys2 的终端中修改镜像服务器&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/i686/&#34; &amp;gt; /etc/pacman.d/mirrorlist.mingw32&#xA;echo &#34;Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64/&#34; &amp;gt; /etc/pacman.d/mirrorlist.mingw64&#xA;echo &#34;Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/\$arch/&#34; &amp;gt; /etc/pacman.d/mirrorlist.msys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;把 ming64 的路径加到环境变量&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;export MINGW=/mingw64&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;echo &#34;export PATH=\$MINGW/bin:\$PATH&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装 gcc/ninja&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -Syu mingw-w64-x86_64-gcc mingw-w64-x86_64-ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1.2 MACOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装xcode, ninja&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2.1 Common&lt;/h4&gt; &#xA;&lt;h5&gt;2.1.1 编译构建工具 luamake&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/actboy168/luamake&#xA;cd luamake&#xA;git submodule update --init&#xA;.\compile\install.bat (msvc)&#xA;./compile/install.sh (mingw/linux/macos)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;编译&lt;/h3&gt; &#xA;&lt;h4&gt;编译runtime&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;luamake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;编译tools&lt;/h4&gt; &#xA;&lt;p&gt;tools包含：shaderc, texturec, gltf2ozz，release模式会快一个数量级（debug模式下的tools可以不编译）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;luamake -mode release tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;编译选项&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;luamake [target] -mode [debug/release] #-mode默认是debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;运行&lt;/h3&gt; &#xA;&lt;p&gt;运行一个最简单的示例&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/msvc/debug/ant.exe test/simple/main.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;启动编辑器&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/msvc/debug/ant.exe tools/editor/main.lua [projectdir] #for example: test/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;调试&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装VSCode；&lt;/li&gt; &#xA; &lt;li&gt;安装&lt;strong&gt;Lua Debug&lt;/strong&gt;插件；&lt;/li&gt; &#xA; &lt;li&gt;添加调试配置到&lt;code&gt;.vscode/launch.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;version&#34;: &#34;0.2.0&#34;,&#xA;    &#34;configurations&#34;: [&#xA;        {&#xA;            &#34;type&#34;: &#34;lua&#34;,&#xA;            &#34;request&#34;: &#34;launch&#34;,&#xA;            &#34;name&#34;: &#34;Debug&#34;,&#xA;            &#34;luaexe&#34;: &#34;${workspaceFolder}/bin/msvc/debug/ant.exe&#34;,&#xA;            &#34;luaVersion&#34;: &#34;lua-latest&#34;,&#xA;            &#34;path&#34;: null,&#xA;            &#34;cpath&#34;: null,&#xA;            &#34;console&#34;: &#34;integratedTerminal&#34;,&#xA;            &#34;stopOnEntry&#34;: true,&#xA;            &#34;outputCapture&#34;: [],&#xA;            &#34;program&#34;: &#34;test/simple/main.lua&#34;,&#xA;            &#34;arg&#34;: []&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;关于ant目录结构&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;bin&lt;/strong&gt;：编译结果，exe/dll/lib等&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;build&lt;/strong&gt;：编译的中间结果&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;clibs&lt;/strong&gt;：c/c++代码&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;engine&lt;/strong&gt;：引擎基础支持代码，包括包管理器、启动代码等&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;pkg&lt;/strong&gt;：引擎的各个功能包（包与包之间有依赖）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;runtime&lt;/strong&gt;：引擎运行时的不同平台支持&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;test&lt;/strong&gt;：测试工程&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tools&lt;/strong&gt;：引擎相关的工具&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>