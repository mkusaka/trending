<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-23T01:58:34Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LazyVim/starter</title>
    <updated>2023-07-23T01:58:34Z</updated>
    <id>tag:github.com,2023-07-23:/LazyVim/starter</id>
    <link href="https://github.com/LazyVim/starter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starter template for LazyVim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üí§ LazyVim&lt;/h1&gt; &#xA;&lt;p&gt;A starter template for &lt;a href=&#34;https://github.com/LazyVim/LazyVim&#34;&gt;LazyVim&lt;/a&gt;. Refer to the &lt;a href=&#34;https://lazyvim.github.io/installation&#34;&gt;documentation&lt;/a&gt; to get started.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HiPhish/rainbow-delimiters.nvim</title>
    <updated>2023-07-23T01:58:34Z</updated>
    <id>tag:github.com,2023-07-23:/HiPhish/rainbow-delimiters.nvim</id>
    <link href="https://github.com/HiPhish/rainbow-delimiters.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rainbow delimiters for Neovim with Tree-sitter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. default-role:: code&lt;/p&gt; &#xA;&lt;p&gt;############################### Rainbow delimiters for Neovim ###############################&lt;/p&gt; &#xA;&lt;p&gt;This Neovim plugin provides alternating syntax highlighting (‚Äúrainbow parentheses‚Äù) for Neovim, powered by &lt;code&gt;Tree-sitter&lt;/code&gt;_. The goal is to have a hackable plugin which allows for different configuration of queries and strategies, both globally and per file type. Users can override and extend the built-in defaults through their own configuration.&lt;/p&gt; &#xA;&lt;p&gt;This is a fork of &lt;code&gt;nvim-ts-rainbow2&lt;/code&gt;&lt;em&gt;, which was implemented as a module for &lt;code&gt;nvim-treessiter&lt;/code&gt;&lt;/em&gt;. However, since nvim-treesitter has deprecated the module system I had to create this standalone plugin.&lt;/p&gt; &#xA;&lt;p&gt;Installation and setup ######################&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Install it like any other Neovim plugin. You will need a Tree-sitter parser for each language you want to use rainbow delimiters with.&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;Configuration is done by setting entries in the Vim script dictionary &lt;code&gt;g:rainbow_delimiters&lt;/code&gt;. Here is an example configuration:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: vim&lt;/p&gt; &#xA;&lt;p&gt;let g:rainbow_delimiters = { \ &#39;strategy&#39;: { \ &#39;&#39;: rainbow_delimiters#strategy.global, \ &#39;vim&#39;: rainbow_delimiters#strategy.local, \ }, \ &#39;query&#39;: { \ &#39;&#39;: &#39;rainbow-delimiters&#39;, \ &#39;lua&#39;: &#39;rainbow-blocks&#39;, \ }, \ &#39;highlight&#39;: [ \ &#39;RainbowDelimiterRed&#39;, \ &#39;RainbowDelimiterYellow&#39;, \ &#39;RainbowDelimiterBlue&#39;, \ &#39;RainbowDelimiterOrange&#39;, \ &#39;RainbowDelimiterGreen&#39;, \ &#39;RainbowDelimiterViolet&#39;, \ &#39;RainbowDelimiterCyan&#39;, \ ], \ }&lt;/p&gt; &#xA;&lt;p&gt;The equivalent code in Lua:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: lua&lt;/p&gt; &#xA;&lt;p&gt;-- This module contains a number of default definitions local rainbow_delimiters = require &#39;rainbow-delimiters&#39;&lt;/p&gt; &#xA;&lt;p&gt;vim.g.rainbow_delimiters = { strategy = { [&#39;&#39;] = rainbow_delimiters.strategy[&#39;global&#39;], vim = rainbow_delimiters.strategy[&#39;local&#39;], }, query = { [&#39;&#39;] = &#39;rainbow-delimiters&#39;, lua = &#39;rainbow-blocks&#39;, }, highlight = { &#39;RainbowDelimiterRed&#39;, &#39;RainbowDelimiterYellow&#39;, &#39;RainbowDelimiterBlue&#39;, &#39;RainbowDelimiterOrange&#39;, &#39;RainbowDelimiterGreen&#39;, &#39;RainbowDelimiterViolet&#39;, &#39;RainbowDelimiterCyan&#39;, }, }&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the &lt;code&gt;manual&lt;/code&gt;_ for more details. For those who prefer a &lt;code&gt;setup&lt;/code&gt; function there is the module &lt;code&gt;rainbow-delimiters.setup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Help wanted ###########&lt;/p&gt; &#xA;&lt;p&gt;There are only so many languages which I understand to the point that I can write queries for them. If you want support for a new language please consider contributing code. See the CONTRIBUTING_ for details.&lt;/p&gt; &#xA;&lt;p&gt;Status of the plugin ####################&lt;/p&gt; &#xA;&lt;p&gt;Tree-sitter support in Neovim is still experimental. This plugin and its API should be considered stable insofar as breaking changes will only happen if changes to Neovim necessitates them.&lt;/p&gt; &#xA;&lt;p&gt;.. warning::&lt;/p&gt; &#xA;&lt;p&gt;There is currently a shortcoming in Neovim&#39;s Tree-sitter API which makes it so that only the first node of a capture group can be highlighted. Please see &lt;code&gt;neovim/neovim#17099&lt;/code&gt;_ for details. Affected queries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTML &lt;code&gt;rainbow-delimiters&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSX (Javascript + React.js) &lt;code&gt;rainbow-delimiters-react&lt;/code&gt; (affects React tags only)&lt;/li&gt; &#xA; &lt;li&gt;Python (&lt;code&gt;rainbow-delimiters&lt;/code&gt;) (affects only the &lt;code&gt;for ... in&lt;/code&gt; inside comprehensions)&lt;/li&gt; &#xA; &lt;li&gt;TSX (Typescript + React.js) &lt;code&gt;rainbow-delimiters-react&lt;/code&gt; (affects React tags only)&lt;/li&gt; &#xA; &lt;li&gt;Vue.js &lt;code&gt;rainbow-delimiters&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of these are related to HTML-like tags, so you can use an alternative query instead. See the manual_ (&lt;code&gt;:h ts-rainbow-query&lt;/code&gt;) for a list of extra queries.&lt;/p&gt; &#xA;&lt;p&gt;Screenshots ###########&lt;/p&gt; &#xA;&lt;h1&gt;Bash&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/4954650/212133420-4eec7fd3-9458-42ef-ba11-43c1ad9db26b.png&#34;&gt;https://user-images.githubusercontent.com/4954650/212133420-4eec7fd3-9458-42ef-ba11-43c1ad9db26b.png&lt;/a&gt; :alt: Screenshot of a Bash script with alternating coloured delimiters&lt;/p&gt; &#xA;&lt;h1&gt;C&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/4954650/212133423-8b4f1f00-634a-42c1-9ebc-69f8057a63e6.png&#34;&gt;https://user-images.githubusercontent.com/4954650/212133423-8b4f1f00-634a-42c1-9ebc-69f8057a63e6.png&lt;/a&gt; :alt: Screenshot of a C program with alternating coloured delimiters&lt;/p&gt; &#xA;&lt;h1&gt;Common Lisp&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/4954650/212133425-85496400-4e24-4afd-805c-55ca3665c4d9.png&#34;&gt;https://user-images.githubusercontent.com/4954650/212133425-85496400-4e24-4afd-805c-55ca3665c4d9.png&lt;/a&gt; :alt: Screenshot of a Common Lisp program with alternating coloured delimiters&lt;/p&gt; &#xA;&lt;h1&gt;Java&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/4954650/212133426-7615f902-e39f-4625-bb91-2e757233c7ba.png&#34;&gt;https://user-images.githubusercontent.com/4954650/212133426-7615f902-e39f-4625-bb91-2e757233c7ba.png&lt;/a&gt; :alt: Screenshot of a Java program with alternating coloured delimiters&lt;/p&gt; &#xA;&lt;h1&gt;LaTeX&lt;/h1&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;blocks&lt;/code&gt; query to highlight the entire &lt;code&gt;\begin&lt;/code&gt; and &lt;code&gt;\end&lt;/code&gt; instructions.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/4954650/212133427-46182f57-bfd8-4cbe-be1f-9aad5ddfd796.png&#34;&gt;https://user-images.githubusercontent.com/4954650/212133427-46182f57-bfd8-4cbe-be1f-9aad5ddfd796.png&lt;/a&gt; :alt: Screenshot of a LaTeX document with alternating coloured delimiters&lt;/p&gt; &#xA;&lt;p&gt;License #######&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache-2.0 license. Please see the &lt;code&gt;LICENSE&lt;/code&gt;_ file for details.&lt;/p&gt; &#xA;&lt;p&gt;Migrating from nvim-ts-rainbow2 ###############################&lt;/p&gt; &#xA;&lt;p&gt;Rainbow-Delimiters uses different settings than nvim-ts-rainbow2, but converting the configuration is straight-forward. The biggest change is where the settings are stored.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Settings are stored in the global variable &lt;code&gt;g:rainbow-delimiters&lt;/code&gt;, which has the same keys as the old settings&lt;/li&gt; &#xA; &lt;li&gt;The default strategy and query have index &lt;code&gt;&#39;&#39;&lt;/code&gt; (empty string) instead of &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default highlight groups have the prefix &lt;code&gt;RainbowDelimiter&lt;/code&gt; instead of &lt;code&gt;TSRainbow&lt;/code&gt;, e.g. &lt;code&gt;RainbowDelimiterRed&lt;/code&gt; instead of &lt;code&gt;TSRainbowRed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The default query is now called &lt;code&gt;rainbow-delimiters&lt;/code&gt; instead of &lt;code&gt;rainbow-parens&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The public Lua module is called &lt;code&gt;rainbow-delimiters&lt;/code&gt; instead of &lt;code&gt;ts-rainbow&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The name of the default query is now &lt;code&gt;rainbow-delimiters&lt;/code&gt; because for some languages like HTML the notion of &#34;parentheses&#34; does not make any sense. In HTML the only meaningful delimiter is the tag. Hence the generic notion of a &#34;delimiter&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Attribution ###########&lt;/p&gt; &#xA;&lt;p&gt;This is a fork of a previous Neovim plugin, the original repository is available under &lt;a href=&#34;https://sr.ht/~p00f/nvim-ts-rainbow/&#34;&gt;https://sr.ht/~p00f/nvim-ts-rainbow/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Attributions from the original author&lt;/h1&gt; &#xA;&lt;p&gt;Huge thanks to @vigoux, @theHamsta, @sogaiu, @bfredl and @sunjon and @steelsojka for all their help&lt;/p&gt; &#xA;&lt;p&gt;.. _Tree-sitter: &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;https://tree-sitter.github.io/tree-sitter/&lt;/a&gt; .. _nvim-treesitter: &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;https://github.com/nvim-treesitter/nvim-treesitter&lt;/a&gt; .. _CONTRIBUTING: CONTRIBUTING.rst .. _LICENSE: LICENSE .. _manual: doc/rainbow-delimiters.txt .. _neovim/neovim#17099: &lt;a href=&#34;https://github.com/neovim/neovim/pull/17099&#34;&gt;https://github.com/neovim/neovim/pull/17099&lt;/a&gt; .. _nvim-ts-rainbow2: &lt;a href=&#34;https://gitlab.com/HiPhish/nvim-ts-rainbow2&#34;&gt;https://gitlab.com/HiPhish/nvim-ts-rainbow2&lt;/a&gt; .. _nvim-treessiter: &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;https://github.com/nvim-treesitter/nvim-treesitter&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mhartington/formatter.nvim</title>
    <updated>2023-07-23T01:58:34Z</updated>
    <id>tag:github.com,2023-07-23:/mhartington/formatter.nvim</id>
    <link href="https://github.com/mhartington/formatter.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Formatter.nvim&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;A format runner for &lt;code&gt;Neovim&lt;/code&gt;.&lt;/h3&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/mhartington/formatter.nvim/master/asset/splash.gif&#34; alt=&#34;splash&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;We want to thank the &lt;a href=&#34;https://github.com/sbdchd/neoformat&#34;&gt;&lt;code&gt;neoformat&lt;/code&gt;&lt;/a&gt; contributors. They developed a lot of formatter configurations that we used as a reference to create our own opt-in default formatter configurations.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Written in &lt;code&gt;Lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous execution&lt;/li&gt; &#xA; &lt;li&gt;Buffer locking&lt;/li&gt; &#xA; &lt;li&gt;Opt-in default formatter configurations&lt;/li&gt; &#xA; &lt;li&gt;Conditional formatting&lt;/li&gt; &#xA; &lt;li&gt;Before/after format hooks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;code&gt;packer.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;packer&#39;).use { &#39;mhartington/formatter.nvim&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/savq/paq-nvim&#34;&gt;&lt;code&gt;paq-nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;paq&#34;) { &#39;mhartington/formatter.nvim&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;code&gt;vim-plug&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;mhartington/formatter.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;&lt;code&gt;Vundle.vim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plugin &#39;mhartington/formatter.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/tpope/vim-pathogen&#34;&gt;&lt;code&gt;vim-pathogen&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/.vim/bundle &amp;amp;&amp;amp; \&#xA;git clone https://github.com/mhartington/formatter.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;&lt;code&gt;dein.vim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;mhartington/formatter.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure&lt;/h2&gt; &#xA;&lt;p&gt;Setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Utilities for creating configurations&#xA;local util = require &#34;formatter.util&#34;&#xA;&#xA;-- Provides the Format, FormatWrite, FormatLock, and FormatWriteLock commands&#xA;require(&#34;formatter&#34;).setup {&#xA;  -- Enable or disable logging&#xA;  logging = true,&#xA;  -- Set the log level&#xA;  log_level = vim.log.levels.WARN,&#xA;  -- All formatter configurations are opt-in&#xA;  filetype = {&#xA;    -- Formatter configurations for filetype &#34;lua&#34; go here&#xA;    -- and will be executed in order&#xA;    lua = {&#xA;      -- &#34;formatter.filetypes.lua&#34; defines default configurations for the&#xA;      -- &#34;lua&#34; filetype&#xA;      require(&#34;formatter.filetypes.lua&#34;).stylua,&#xA;&#xA;      -- You can also define your own configuration&#xA;      function()&#xA;        -- Supports conditional formatting&#xA;        if util.get_current_buffer_file_name() == &#34;special.lua&#34; then&#xA;          return nil&#xA;        end&#xA;&#xA;        -- Full specification of configurations is down below and in Vim help&#xA;        -- files&#xA;        return {&#xA;          exe = &#34;stylua&#34;,&#xA;          args = {&#xA;            &#34;--search-parent-directories&#34;,&#xA;            &#34;--stdin-filepath&#34;,&#xA;            util.escape_path(util.get_current_buffer_file_path()),&#xA;            &#34;--&#34;,&#xA;            &#34;-&#34;,&#xA;          },&#xA;          stdin = true,&#xA;        }&#xA;      end&#xA;    },&#xA;&#xA;    -- Use the special &#34;*&#34; filetype for defining formatter configurations on&#xA;    -- any filetype&#xA;    [&#34;*&#34;] = {&#xA;      -- &#34;formatter.filetypes.any&#34; defines default configurations for any&#xA;      -- filetype&#xA;      require(&#34;formatter.filetypes.any&#34;).remove_trailing_whitespace&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Opt-in formatters&lt;/h3&gt; &#xA;&lt;p&gt;By default, there are no preconfigured formatters. You can opt-into &lt;a href=&#34;https://raw.githubusercontent.com/mhartington/formatter.nvim/master/lua/formatter/defaults&#34;&gt;default configurations per formatter&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mhartington/formatter.nvim/master/lua/formatter/filetypes&#34;&gt;default configurations per &lt;code&gt;filetype&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/mhartington/formatter.nvim/master/lua/formatter/filetypes/any.lua&#34;&gt;default configurations for any &lt;code&gt;filetype&lt;/code&gt;&lt;/a&gt; or write your own. It is hard to predict what everyone wants, but at the same time we realize that most formatter configurations are the same. See the discussion in &lt;a href=&#34;https://github.com/mhartington/formatter.nvim/issues/97&#34;&gt;#97&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://raw.githubusercontent.com/mhartington/formatter.nvim/master/lua/formatter/defaults&#34;&gt;default configurations per formatter&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mhartington/formatter.nvim/master/lua/formatter/filetypes&#34;&gt;default configurations per &lt;code&gt;filetype&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/mhartington/formatter.nvim/master/lua/formatter/filetypes/any.lua&#34;&gt;default configurations for any &lt;code&gt;filetype&lt;/code&gt;&lt;/a&gt; as a starting point for creating your configurations. Feel free to contribute to this repository by creating or improving default configurations that everyone can use! The guide for contributing to default configurations is below.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://raw.githubusercontent.com/mhartington/formatter.nvim/master/lua/formatter/util.lua&#34;&gt;&lt;code&gt;util&lt;/code&gt; module&lt;/a&gt; which has various functions that help with creating default configurations as shown above.&lt;/p&gt; &#xA;&lt;h3&gt;Map keys&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;f :Format&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;F :FormatWrite&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Format after save&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;augroup FormatAutogroup&#xA;  autocmd!&#xA;  autocmd BufWritePost * FormatWrite&#xA;augroup END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Before/after format hooks&lt;/h3&gt; &#xA;&lt;p&gt;You can execute code before and after formatting like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;augroup FormatAutogroup&#xA;  autocmd!&#xA;  autocmd User FormatterPre lua print &#34;This will print before formatting&#34;&#xA;  autocmd User FormatterPost lua print &#34;This will print after formatting&#34;&#xA;augroup END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that these commands are executed using &lt;code&gt;silent&lt;/code&gt; when the &lt;code&gt;log_level&lt;/code&gt; is higher than &lt;code&gt;vim.log.levels.DEBUG&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Buffer locking&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;FormatLock&lt;/code&gt; and &lt;code&gt;FormatWriteLock&lt;/code&gt; commands instead of &lt;code&gt;Format&lt;/code&gt; and &lt;code&gt;FormatWrite&lt;/code&gt; to lock the buffer (set buffer option &lt;code&gt;modifiable&lt;/code&gt; to false) while formatting.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration specification&lt;/h3&gt; &#xA;&lt;p&gt;Each formatter configuration is a function that returns a table. Because each entry is a function, the tables for each &lt;code&gt;filetype&lt;/code&gt; act as an ordered list (or array). This means things run in the order you list them, keep this in mind. You can also return &lt;code&gt;nil&lt;/code&gt; from these functions to conditionally apply formatters.&lt;/p&gt; &#xA;&lt;p&gt;Each formatter configuration should return a table that consist of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;exe&lt;/code&gt;: the program you wish to run.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;args&lt;/code&gt;: a table of arguments to pass (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stdin&lt;/code&gt;: if it should use the standard input (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cwd&lt;/code&gt; : the path to run the program from (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;try_node_modules&lt;/code&gt;: tries to run a formatter from locally install npm packages (optional) (to be implemented)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no_append&lt;/code&gt; : don&#39;t append the path of the file to the formatter command (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore_exitcode&lt;/code&gt; : set to true if the program expects non-zero success exit code (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;transform&lt;/code&gt; : pass a function that takes in the formatted text and returns the text to be applied to the buffer (optional) (see &lt;a href=&#34;https://github.com/mhartington/formatter.nvim/raw/af59d125957b49577acdc927c013436f209c9843/lua/formatter/filetypes/ruby.lua#L16&#34;&gt;&lt;code&gt;ruby&lt;/code&gt; &lt;code&gt;rubocop&lt;/code&gt;&lt;/a&gt; default formatter configuration as an example)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tempfile_dir&lt;/code&gt;: directory for temp file when not using &lt;code&gt;stdin&lt;/code&gt; (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tempfile_prefix&lt;/code&gt;: prefix for temp file when not using &lt;code&gt;stdin&lt;/code&gt; (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tempfile_postfix&lt;/code&gt;: postfix for temp file when not using &lt;code&gt;stdin&lt;/code&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;cwd&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;cwd&lt;/code&gt; argument can be used for in example monolithic projects which contain sources with different styles. Setting &lt;code&gt;cwd&lt;/code&gt; to the path of the file being formatted causes, for example, &lt;code&gt;clang-format&lt;/code&gt; to search for the nearest &lt;code&gt;.clang-format&lt;/code&gt; file in the file&#39;s parent directories.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;try_node_modules&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;try_node_modules&lt;/code&gt; argument is not yet implemented, but feel free to use this argument in your configurations. When we add support for it, you get the &lt;code&gt;node_modules&lt;/code&gt; package scanning functionality automatically!&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;no_append&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;no_append&lt;/code&gt; argument is important for formatters that don&#39;t take the path to the formatted file as the last argument. A small minority of formatters take the path to the formatted file as a named argument. For an example, check the &lt;a href=&#34;https://raw.githubusercontent.com/mhartington/formatter.nvim/master/lua/formatter/filetypes/javascript.lua&#34;&gt;default &lt;code&gt;javascript&lt;/code&gt; &lt;code&gt;prettydiff&lt;/code&gt; configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/mhartington/formatter.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more information.&lt;/p&gt;</summary>
  </entry>
</feed>