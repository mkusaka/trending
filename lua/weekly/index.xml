<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-03T02:15:22Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LunarVim/LunarVim</title>
    <updated>2022-07-03T02:15:22Z</updated>
    <id>tag:github.com,2022-07-03:/LunarVim/LunarVim</id>
    <link href="https://github.com/LunarVim/LunarVim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An IDE layer for Neovim with sane defaults. Completely free and community driven.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/59826753/159940098-54284f26-f1da-4481-8b03-1deb34c57533.png&#34; alt=&#34;lunarvim_logo_dark&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/lunarvim/LunarVim/releases/latest&#34;&gt; &lt;img alt=&#34;Latest release&#34; src=&#34;https://img.shields.io/github/v/release/lunarvim/LunarVim&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/lunarvim/LunarVim/pulse&#34;&gt; &lt;img alt=&#34;Last commit&#34; src=&#34;https://img.shields.io/github/last-commit/lunarvim/LunarVim&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/lunarvim/LunarVim/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/lunarvim/lunarvim?style=flat-square&amp;amp;logo=GNU&amp;amp;label=License&#34; alt=&#34;License&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://patreon.com/chrisatmachine&#34; title=&#34;Donate to this project using Patreon&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/patreon-donate-yellow.svg?sanitize=true&#34; alt=&#34;Patreon donate button&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=chrisatmachine&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/chrisatmachine?style=social&amp;amp;logo=twitter&#34; alt=&#34;follow on Twitter&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/59826753/159939936-3a9a8e94-05ea-48fa-8c46-69378276451b.png&#34; alt=&#34;intro1&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/59826753/159939984-ac0190d7-a3fb-46c0-95ca-a6fec626bbac.png&#34; alt=&#34;info&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/59826753/159940004-84975294-5703-4bf1-aa98-2cc97cb38d96.png&#34; alt=&#34;demo1&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/59826753/159940040-375a0a28-4c81-4fdf-80f2-62853edf9b4f.png&#34; alt=&#34;demo2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install In One Command!&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have the release version of Neovim (0.7+).&lt;/p&gt; &#xA;&lt;h3&gt;Linux:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the install script without any interaction you can pass the &lt;code&gt;-y&lt;/code&gt; flag to automatically install all dependencies and have no prompts. This is particularly useful in automated installations.&lt;/p&gt; &#xA;&lt;p&gt;The same way, you can use &lt;code&gt;--no-install-dependencies&lt;/code&gt; to skip the dependency installation.&lt;/p&gt; &#xA;&lt;h3&gt;Windows (Powershell 7+):&lt;/h3&gt; &#xA;&lt;p&gt;Powershell v7+ is required for this script. For instructions on how to install, &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell?view=powershell-7.2&#34;&gt;click here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-WebRequest https://raw.githubusercontent.com/LunarVim/LunarVim/master/utils/installer/install.ps1 -UseBasicParsing | Invoke-Expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Automatic LSP support&lt;/h2&gt; &#xA;&lt;p&gt;By default, most supported language servers will get automatically installed once you open the supported file-type, e.g, opening a Python file for the first time will install &lt;code&gt;Pyright&lt;/code&gt; and configure it automatically for you.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration file&lt;/h2&gt; &#xA;&lt;p&gt;To install plugins configure LunarVim use the &lt;code&gt;config.lua&lt;/code&gt; located here: &lt;code&gt;~/.config/lvim/config.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- general&#xA;lvim.format_on_save = true&#xA;lvim.colorscheme = &#34;onedarker&#34;&#xA;&#xA;lvim.leader = &#34;space&#34;&#xA;-- add your own keymapping&#xA;lvim.keys.normal_mode[&#34;&amp;lt;C-s&amp;gt;&#34;] = &#34;:w&amp;lt;cr&amp;gt;&#34;&#xA;-- unmap a default keymapping&#xA;-- lvim.keys.normal_mode[&#34;&amp;lt;C-Up&amp;gt;&#34;] = &#34;&#34;&#xA;-- edit a default keymapping&#xA;-- lvim.keys.normal_mode[&#34;&amp;lt;C-q&amp;gt;&#34;] = &#34;:q&amp;lt;cr&amp;gt;&#34;&#xA;-- set keymap with custom opts&#xA;-- lvim.keys.insert_mode[&#34;po&#34;] = {&#39;&amp;lt;ESC&amp;gt;&#39;, { noremap = true }}&#xA;&#xA;-- Use which-key to add extra bindings with the leader-key prefix&#xA;-- lvim.builtin.which_key.mappings[&#34;P&#34;] = { &#34;&amp;lt;cmd&amp;gt;Telescope projects&amp;lt;CR&amp;gt;&#34;, &#34;Projects&#34; }&#xA;&#xA;-- Configure builtin plugins&#xA;lvim.builtin.alpha.active = true&#xA;lvim.builtin.notify.active = true&#xA;lvim.builtin.terminal.active = true&#xA;&#xA;-- Treesitter parsers change this to a table of the languages you want i.e. {&#34;java&#34;, &#34;python&#34;, javascript}&#xA;lvim.builtin.treesitter.ensure_installed = &#34;maintained&#34;&#xA;lvim.builtin.treesitter.ignore_install = { &#34;haskell&#34; }&#xA;&#xA;-- Disable virtual text&#xA;lvim.lsp.diagnostics.virtual_text = false&#xA;&#xA;-- Select which servers should be configured manually. Requires `:LvimCacheReset` to take effect.&#xA;-- See the full default list `:lua print(vim.inspect(lvim.lsp.override))`&#xA;vim.list_extend(lvim.lsp.automatic_configuration.skipped_servers, { &#34;pyright&#34; })&#xA;&#xA;-- set a formatter, this will override the language server formatting capabilities (if it exists)&#xA;local formatters = require &#34;lvim.lsp.null-ls.formatters&#34;&#xA;formatters.setup {&#xA;  { command = &#34;black&#34; },&#xA;  {&#xA;    command = &#34;prettier&#34;,&#xA;    ---@usage specify which filetypes to enable. By default a providers will attach to all the filetypes it supports.&#xA;    filetypes = { &#34;typescript&#34;, &#34;typescriptreact&#34; },&#xA;  },&#xA;}&#xA;&#xA;-- set additional linters&#xA;local linters = require &#34;lvim.lsp.null-ls.linters&#34;&#xA;linters.setup {&#xA;  {&#xA;    command = &#34;eslint_d&#34;,&#xA;    ---@usage specify which filetypes to enable. By default a providers will attach to all the filetypes it supports.&#xA;    filetypes = { &#34;javascript&#34;, &#34;javascriptreact&#34; },&#xA;  },&#xA;}&#xA;&#xA;-- Additional Plugins&#xA;lvim.plugins = {&#xA;    {&#34;lunarvim/colorschemes&#34;},&#xA;    {&#34;folke/tokyonight.nvim&#34;}, {&#xA;        &#34;ray-x/lsp_signature.nvim&#34;,&#xA;        config = function() require&#34;lsp_signature&#34;.on_attach() end,&#xA;        event = &#34;BufRead&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating LunarVim&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inside LunarVim &lt;code&gt;:LvimUpdate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;from the command-line &lt;code&gt;lvim +LvimUpdate +q&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Update the plugins&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inside LunarVim &lt;code&gt;:PackerUpdate&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Breaking changes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lvim.lang.FOO&lt;/code&gt; is no longer supported. Refer to &lt;a href=&#34;https://www.lunarvim.org/languages&#34;&gt;https://www.lunarvim.org/languages&lt;/a&gt; for up-to-date instructions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lvim.lsp.popup_border&lt;/code&gt; has been deprecated in favor of &lt;code&gt;lvim.lsp.float.border&lt;/code&gt; and &lt;code&gt;lvim.lsp.diagnostics.float.border&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lvim.builtin.dashboard&lt;/code&gt; has been replaced with &lt;code&gt;lvim.builtin.alpha&lt;/code&gt;, see &lt;a href=&#34;https://github.com/LunarVim/LunarVim/pull/1906&#34;&gt;https://github.com/LunarVim/LunarVim/pull/1906&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.lunarvim.org&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCS97tchJDq17Qms3cux8wcA&#34;&gt;YouTube&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://discord.gg/Xb9B4Ny&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://twitter.com/chrisatmachine&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;I have the processing power of a potato with 4 gb of ram and LunarVim runs perfectly.&#34;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;@juanCortelezzi, LunarVim user.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;My minimal config with a good amount less code than LunarVim loads 40ms slower. Time to switch.&#34;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;@mvllow, Potential LunarVim user.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div align=&#34;center&#34; id=&#34;madewithlua&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LunarVim/LunarVim/rolling/#madewithlua&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>folke/tokyonight.nvim</title>
    <updated>2022-07-03T02:15:22Z</updated>
    <id>tag:github.com,2022-07-03:/folke/tokyonight.nvim</id>
    <link href="https://github.com/folke/tokyonight.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🏙 A clean, dark Neovim theme written in Lua, with support for lsp, treesitter and lots of plugins. Includes additional themes for Kitty, Alacritty, iTerm and Fish.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🏙 Tokyo Night&lt;/h1&gt; &#xA;&lt;p&gt;A dark and light Neovim theme written in Lua ported from the Visual Studio Code &lt;a href=&#34;https://github.com/enkia/tokyo-night-vscode-theme&#34;&gt;TokyoNight&lt;/a&gt; theme. Includes extra themes for Kitty, Alacritty, iTerm and Fish.&lt;/p&gt; &#xA;&lt;h2&gt;Storm&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115295095-3a9e5080-a10e-11eb-9aed-6054488c46ce.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Night&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115295327-7afdce80-a10e-11eb-89b3-2591262bf95a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Day&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115996270-78c6c480-a593-11eb-8ed0-7d1400b058f5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;supports the latest Neovim 5.0 features like TreeSitter and LSP&lt;/li&gt; &#xA; &lt;li&gt;minimal inactive statusline&lt;/li&gt; &#xA; &lt;li&gt;vim terminal colors&lt;/li&gt; &#xA; &lt;li&gt;darker background for sidebar-like windows&lt;/li&gt; &#xA; &lt;li&gt;color configs for &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf.html?highlight=include&#34;&gt;Kitty&lt;/a&gt;, &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;Alacritty&lt;/a&gt; and &lt;a href=&#34;https://fishshell.com/&#34;&gt;Fish Shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lualine&lt;/strong&gt; theme&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Plugin Support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;TreeSitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;LSP Diagnostics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lsp-trouble.nvim&#34;&gt;LSP Trouble&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;LSP Saga&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Git Signs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;Git Gutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;NvimTree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liuchengxu/vim-which-key&#34;&gt;WhichKey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;Indent Blankline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;BufferLine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hoob3rt/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;Lightline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;Neogit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lambdalisue/fern.vim&#34;&gt;Fern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim&#34;&gt;Barbar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the theme with your preferred package manager:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;folke/tokyonight.nvim&#39;, { &#39;branch&#39;: &#39;main&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;folke/tokyonight.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;p&gt;Enable the colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;colorscheme tokyonight&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;vim.cmd[[colorscheme tokyonight]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable the &lt;code&gt;TokyoNight&lt;/code&gt; theme for &lt;code&gt;Lualine&lt;/code&gt;, simply specify it in your lualine settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    -- ... your lualine config&#xA;    theme = &#39;tokyonight&#39;&#xA;    -- ... your lualine config&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable the &lt;code&gt;tokyonight&lt;/code&gt; colorscheme for &lt;code&gt;Lightline&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;let g:lightline = {&#39;colorscheme&#39;: &#39;tokyonight&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❗️ configuration needs to be set &lt;strong&gt;BEFORE&lt;/strong&gt; loading the color scheme with &lt;code&gt;colorscheme tokyonight&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The theme comes in three styles, &lt;code&gt;storm&lt;/code&gt;, a darker variant &lt;code&gt;night&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;day&lt;/strong&gt; style will be used if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vim.g.tokyonight_style == &#34;day&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;or &lt;code&gt;vim.o.background == &#34;light&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;storm&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The theme comes in three styles, &lt;code&gt;storm&lt;/code&gt;, a darker variant &lt;code&gt;night&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_terminal_colors&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configure the colors used when opening a &lt;code&gt;:terminal&lt;/code&gt; in Neovim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_comments&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make comments italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_keywords&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make keywords italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_functions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make functions italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_variables&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make variables and identifiers italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_transparent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable this to disable setting the background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_hide_inactive_statusline&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard &lt;strong&gt;StatusLine&lt;/strong&gt; and &lt;strong&gt;LuaLine&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_sidebars&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set a darker background on sidebar-like windows. For example: &lt;code&gt;[&#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34;]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_transparent_sidebar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sidebar like windows like &lt;code&gt;NvimTree&lt;/code&gt; get a transparent background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_dark_sidebar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sidebar like windows like &lt;code&gt;NvimTree&lt;/code&gt; get a darker background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_dark_float&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Float windows like the lsp diagnostics windows get a darker background.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_colors&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;You can override specific color groups to use other groups or a hex color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_day_brightness&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adjusts the brightness of the colors of the &lt;strong&gt;Day&lt;/strong&gt; style. Number between 0 and 1, from dull to vibrant colors&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_lualine_bold&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, section headers in the lualine theme will be bold&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example config in Lua&#xA;vim.g.tokyonight_style = &#34;night&#34;&#xA;vim.g.tokyonight_italic_functions = true&#xA;vim.g.tokyonight_sidebars = { &#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34; }&#xA;&#xA;-- Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;vim.g.tokyonight_colors = { hint = &#34;orange&#34;, error = &#34;#ff0000&#34; }&#xA;&#xA;-- Load the colorscheme&#xA;vim.cmd[[colorscheme tokyonight]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Example config in VimScript&#xA;let g:tokyonight_style = &#34;night&#34;&#xA;let g:tokyonight_italic_functions = 1&#xA;let g:tokyonight_sidebars = [ &#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34; ]&#xA;&#xA;&#34; Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;let g:tokyonight_colors = {&#xA;  \ &#39;hint&#39;: &#39;orange&#39;,&#xA;  \ &#39;error&#39;: &#39;#ff0000&#39;&#xA;\ }&#xA;&#xA;&#34; Load the colorscheme&#xA;colorscheme tokyonight&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making &lt;code&gt;undercurls&lt;/code&gt; work properly in &lt;strong&gt;Tmux&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To have undercurls show up and in color, add the following to your &lt;strong&gt;Tmux&lt;/strong&gt; config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Undercurl&#xA;set -g default-terminal &#34;${TERM}&#34;&#xA;set -as terminal-overrides &#39;,*:Smulx=\E[4::%p1%dm&#39;  # undercurl support&#xA;set -as terminal-overrides &#39;,*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&amp;amp;%d::%p1%{255}%&amp;amp;%d%;m&#39;  # underscore colours - needs tmux-3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍭 Extras&lt;/h2&gt; &#xA;&lt;p&gt;Extra color configs for &lt;strong&gt;Kitty&lt;/strong&gt;, &lt;strong&gt;Alacritty&lt;/strong&gt;, &lt;strong&gt;Fish&lt;/strong&gt;, &lt;strong&gt;WezTerm&lt;/strong&gt; and &lt;strong&gt;iTerm&lt;/strong&gt; can be found in &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/&#34;&gt;extras&lt;/a&gt;. To use them, refer to their respective documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115395546-d8d6f880-a198-11eb-98fb-a1194787701d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can easily use the color palette for other plugins inside your Neovim config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local colors = require(&#34;tokyonight.colors&#34;).setup({}) -- pass in any of the config options as explained above&#xA;local utils = requires(&#34;tokyonight.util&#34;)&#xA;&#xA;aplugin.background = colors.bg_dark&#xA;aplugin.my_error = util.brighten(colors.red1, 0.3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🔥 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For the &lt;code&gt;extras&lt;/code&gt;, we use a simple template system that can be used to generate themes for the different styles.&lt;/p&gt; &#xA;&lt;p&gt;How to add a new extra template:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;create a file like &lt;code&gt;lua/tokyonight/extra/cool-app.lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;add the name and output file extension to the &lt;code&gt;extras&lt;/code&gt; table in &lt;code&gt;lua/tokyonight/extra/init.lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;in the root directory, run &lt;code&gt;$ lua lua/tokyonight/extra/init.lua&lt;/code&gt; to generate / update extra themes&lt;/li&gt; &#xA; &lt;li&gt;commit the newly created themes under &lt;code&gt;extra/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>phaazon/hop.nvim</title>
    <updated>2022-07-03T02:15:22Z</updated>
    <id>tag:github.com,2022-07-03:/phaazon/hop.nvim</id>
    <link href="https://github.com/phaazon/hop.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim motions on speed!&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;                                          __&#xA;                                         / /_  ____  ____&#xA;                                        / __ \/ __ \/ __ \&#xA;                                       / / / / /_/ / /_/ /&#xA;                                      /_/ /_/\____/ .___/&#xA;                                                 /_/&#xA;                                  · Neovim motions on speed! ·&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/phaazon/hop.nvim?color=cyan&amp;amp;style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr/phaazon/hop.nvim?color=green&amp;amp;style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors-anon/phaazon/hop.nvim?color=blue&amp;amp;style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/phaazon/hop.nvim?style=for-the-badge&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#using-vim-plug&#34;&gt;Install&lt;/a&gt; · &lt;a href=&#34;https://github.com/phaazon/hop.nvim/wiki&#34;&gt;Wiki&lt;/a&gt; · &lt;a href=&#34;https://github.com/phaazon/hop.nvim/wiki/Screenshots&#34;&gt;Screenshots&lt;/a&gt; · &lt;a href=&#34;https://matrix.to/#/#hop.nvim:matrix.org&#34;&gt;Discuss&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hop&lt;/strong&gt; is an &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt;-like plugin allowing you to jump anywhere in a document with as few keystrokes as possible. It does so by annotating text in your buffer with hints, short string sequences for which each character represents a key to type to jump to the annotated text. Most of the time, those sequences’ lengths will be between 1 to 3 characters, making every jump target in your document reachable in a few keystrokes.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/506592/176885253-5f618593-77c5-4843-9101-a9de30f0a022.png&#34;&gt; &lt;/p&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#important-note-about-versioning&#34;&gt;Important note about versioning&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#using-vim-plug&#34;&gt;Using vim-plug&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#using-packer&#34;&gt;Using packer&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#nightly-users&#34;&gt;Nightly users&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#keybindings&#34;&gt;Keybindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/hop.nvim/master/#chat&#34;&gt;Chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hop&lt;/strong&gt; is a complete from-scratch rewrite of &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt;, a famous plugin to enhance the native motions of Vim. Even though &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt; is usable in Neovim, it suffers from a few drawbacks making it not comfortable to use with Neovim version &amp;gt;0.5 – at least at the time of writing these lines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt; uses an old trick to annotate jump targets by saving the contents of the buffer, replacing it with the highlighted annotations and then restoring the initial buffer after jump. This trick is dangerous as it will change the contents of your buffer. A UI plugin should never do anything to existing buffers’ contents.&lt;/li&gt; &#xA; &lt;li&gt;Because the contents of buffers will temporarily change, other parts of the editor and/or plugins relying on buffer change events will react and will go mad. An example is the internal LSP client implementation of Neovim &amp;gt;0.5 or its treesitter native implementation. For LSP, it means that the connected LSP server will receive a buffer with the jump target annotations… not ideal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hop&lt;/strong&gt; is a modern take implementing this concept for the latest versions of Neovim.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to any word in the current buffer (&lt;code&gt;:HopWord&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Go to any character in the current buffer (&lt;code&gt;:HopChar1&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Go to any bigrams in the current buffer (&lt;code&gt;:HopChar2&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Make an arbitrary search akin to &lt;kbd&gt;/&lt;/kbd&gt; and go to any occurrences (&lt;code&gt;:HopPattern&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Go to any line and any line start (&lt;code&gt;:HopLine&lt;/code&gt;, &lt;code&gt;:HopLineStart&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Go to anywhere (&lt;code&gt;:HopAnywhere&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Use Hop cross windows with multi-windows support (&lt;code&gt;:Hop*MW&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Use it with commands like &lt;code&gt;v&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; to visually select/delete/change/yank up to your new cursor position.&lt;/li&gt; &#xA; &lt;li&gt;Support a wide variety of user configuration options, among the possibility to alter the behavior of commands to hint only before or after the cursor (&lt;code&gt;:Hop*BC&lt;/code&gt;, &lt;code&gt;:Hop*AC&lt;/code&gt;), for the current line (&lt;code&gt;:Hop*CurrentLine&lt;/code&gt;), change the dictionary keys to use for the labels, jump on sole occurrence, etc.&lt;/li&gt; &#xA; &lt;li&gt;Extensible: provide your own jump targets and create Hop extensions!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;This section will guide you through the list of steps you must take to be able to get started with &lt;strong&gt;Hop&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This plugin was written against Neovim 0.5, which is currently a nightly version. This plugin will not work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With a version of Neovim before 0.5.&lt;/li&gt; &#xA; &lt;li&gt;On Vim. &lt;strong&gt;No support for Vim is planned.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Whatever solution / package manager you are using, you need to ensure that the &lt;code&gt;setup&lt;/code&gt; Lua function is called at some point, otherwise the plugin will not work. If your package manager doesn’t support automatic calling of this function, you can call it manually after your plugin is installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;hop&#39;.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a default experience. Feel free to customize later the &lt;code&gt;setup&lt;/code&gt; invocation (&lt;code&gt;:h hop.setup&lt;/code&gt;). If you do, then you will probably want to ensure the configuration is okay by running &lt;code&gt;:checkhealth&lt;/code&gt;. Various checks will be performed by Hop to ensure everything is all good.&lt;/p&gt; &#xA;&lt;h3&gt;Important note about versioning&lt;/h3&gt; &#xA;&lt;p&gt;This plugin implements &lt;a href=&#34;https://semver.org&#34;&gt;SemVer&lt;/a&gt; via git branches and tags. Versions are prefixed with a &lt;code&gt;v&lt;/code&gt;, and only patch versions are git tags. Major and minor versions are git branches. You are &lt;strong&gt;very strongly advised&lt;/strong&gt; to use a major version dependency to be sure your config will not break when Hop gets updated.&lt;/p&gt; &#xA;&lt;h3&gt;Using vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;phaazon/hop.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;phaazon/hop.nvim&#39;,&#xA;  branch = &#39;v1&#39;, -- optional but strongly recommended&#xA;  config = function()&#xA;    -- you can configure Hop the way you like here; see :h hop-config&#xA;    require&#39;hop&#39;.setup { keys = &#39;etovxqpdygfblzhckisuran&#39; }&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nightly users&lt;/h3&gt; &#xA;&lt;p&gt;Hop supports nightly releases of Neovim. However, keep in mind that if you are on a nightly version, you must be &lt;strong&gt;on the last one&lt;/strong&gt;. If you are not, then you are exposed to compatibility issues / breakage.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/phaazon/hop.nvim/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Keybindings&lt;/h1&gt; &#xA;&lt;p&gt;Hop doesn’t set any keybindings; you will have to define them by yourself.&lt;/p&gt; &#xA;&lt;p&gt;If you want to create a key binding from within Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- place this in one of your configuration file(s)&#xA;vim.api.nvim_set_keymap(&#39;&#39;, &#39;f&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.AFTER_CURSOR, current_line_only = true })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;&#39;, &#39;F&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.BEFORE_CURSOR, current_line_only = true })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;&#39;, &#39;t&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.AFTER_CURSOR, current_line_only = true, hint_offset = -1 })&amp;lt;cr&amp;gt;&#34;, {})&#xA;vim.api.nvim_set_keymap(&#39;&#39;, &#39;T&#39;, &#34;&amp;lt;cmd&amp;gt;lua require&#39;hop&#39;.hint_char1({ direction = require&#39;hop.hint&#39;.HintDirection.BEFORE_CURSOR, current_line_only = true, hint_offset = 1 })&amp;lt;cr&amp;gt;&#34;, {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Chat&lt;/h1&gt; &#xA;&lt;p&gt;Join the discussion on the official &lt;a href=&#34;https://matrix.to/#/#hop.nvim:matrix.org&#34;&gt;Matrix room&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
</feed>