<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T02:16:01Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kyazdani42/nvim-tree.lua</title>
    <updated>2022-06-26T02:16:01Z</updated>
    <id>tag:github.com,2022-06-26:/kyazdani42/nvim-tree.lua</id>
    <link href="https://github.com/kyazdani42/nvim-tree.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A file explorer tree for neovim written in lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A File Explorer For Neovim Written In Lua&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/kyazdani42/nvim-tree.lua/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;124&#34; height=&#34;332&#34; src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/example.png?raw=true&#34;&gt; &#xA;&lt;p&gt;Automatic updates&lt;/p&gt; &#xA;&lt;p&gt;File type icons&lt;/p&gt; &#xA;&lt;p&gt;Git integration&lt;/p&gt; &#xA;&lt;p&gt;Diagnostics integration: LSP and COC&lt;/p&gt; &#xA;&lt;p&gt;(Live) filtering&lt;/p&gt; &#xA;&lt;p&gt;Cut, copy, paste, rename, delete, create&lt;/p&gt; &#xA;&lt;p&gt;Highly customisable&lt;/p&gt; &#xA;&lt;br clear=&#34;left&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#nvim-tree:matrix.org&#34;&gt;Join us on matrix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;This plugin requires &lt;a href=&#34;https://github.com/neovim/neovim/wiki/Installing-Neovim&#34;&gt;neovim &amp;gt;=0.7.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;kyazdani42/nvim-web-devicons&#39; &#34; optional, for file icons&#xA;Plug &#39;kyazdani42/nvim-tree.lua&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;kyazdani42/nvim-tree.lua&#39;,&#xA;  requires = {&#xA;    &#39;kyazdani42/nvim-web-devicons&#39;, -- optional, for file icons&#xA;  },&#xA;  tag = &#39;nightly&#39; -- optional, updated every week. (see issue #1193)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Setup should be run in a lua file or in a lua heredoc &lt;a href=&#34;https://neovim.io/doc/user/lua.html&#34;&gt;:help lua-heredoc&lt;/a&gt; if using in a vim file.&lt;/p&gt; &#xA;&lt;p&gt;Setup may only be run once; subsequent calls will result in a warning.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- examples for your init.lua&#xA;&#xA;-- empty setup using defaults&#xA;require(&#34;nvim-tree&#34;).setup()&#xA;&#xA;-- OR setup with some options&#xA;require(&#34;nvim-tree&#34;).setup({&#xA;  sort_by = &#34;case_sensitive&#34;,&#xA;  view = {&#xA;    adaptive_size = true,&#xA;    mappings = {&#xA;      list = {&#xA;        { key = &#34;u&#34;, action = &#34;dir_up&#34; },&#xA;      },&#xA;    },&#xA;  },&#xA;  renderer = {&#xA;    group_empty = true,&#xA;  },&#xA;  filters = {&#xA;    dotfiles = true,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For complete list of available configuration options see &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each option is documented in &lt;code&gt;:help nvim-tree.OPTION_NAME&lt;/code&gt;. Nested options can be accessed by appending &lt;code&gt;.&lt;/code&gt;, for example &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.view.mappings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-commands&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Basic commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeToggle&lt;/code&gt; Open or close the tree. Takes an optional path argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeFocus&lt;/code&gt; Open the tree if it is closed, and then focus on the tree.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeFindFile&lt;/code&gt; Move the cursor in the tree for the current buffer, opening folders if needed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeCollapse&lt;/code&gt; Collapses the nvim-tree recursively.&lt;/p&gt; &#xA;&lt;h2&gt;Mappings&lt;/h2&gt; &#xA;&lt;p&gt;nvim-tree comes with number of mappings; for default mappings please see &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-default-mappings&lt;/a&gt;, for way of configuring mappings see &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-mappings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;g?&lt;/code&gt; toggles help, showing all the mappings and their actions.&lt;/p&gt; &#xA;&lt;h2&gt;Tips &amp;amp; tricks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can add a directory by adding a &lt;code&gt;/&lt;/code&gt; at the end of the paths, entering multiple directories &lt;code&gt;BASE/foo/bar/baz&lt;/code&gt; will add directory foo, then bar and add a file baz to it.&lt;/li&gt; &#xA; &lt;li&gt;You can update window options for the tree by setting &lt;code&gt;require&#34;nvim-tree.view&#34;.View.winopts.MY_OPTION = MY_OPTION_VALUE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle&lt;/code&gt; has a second parameter which allows to toggle without focusing the explorer (&lt;code&gt;require&#34;nvim-tree&#34;.toggle(false, true)&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;You can allow nvim-tree to behave like vinegar, see &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-vinegar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;code&gt;:set nosplitright&lt;/code&gt;, the files will open on the left side of the tree, placing the tree window in the right side of the file you opened.&lt;/li&gt; &#xA; &lt;li&gt;You can automatically close the tab/vim when nvim-tree is the last window in the tab: &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/discussions/1115&#34;&gt;https://github.com/kyazdani42/nvim-tree.lua/discussions/1115&lt;/a&gt;. WARNING: this can catastrophically fail: &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/1368&#34;&gt;https://github.com/kyazdani42/nvim-tree.lua/issues/1368&lt;/a&gt;. Use with great caution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Diagnostic Logging&lt;/h3&gt; &#xA;&lt;p&gt;You may enable diagnostic logging to &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.log&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Performance Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are experiencing performance issues with nvim-tree.lua, you can enable profiling in the logs. It is advisable to enable git logging at the same time, as that can be a source of performance problems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;log = {&#xA;  enable = true,&#xA;  truncate = true,&#xA;  types = {&#xA;    git = true,&#xA;    profile = true,&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please attach &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt; if you raise an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Performance Tips:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using fish as an editor shell (which might be fixed in the future), try set &lt;code&gt;shell=/bin/bash&lt;/code&gt; in your vim config. Alternatively, you can &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/549#issuecomment-1127394585&#34;&gt;prevent fish from loading interactive configuration in a non-interactive shell&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try manually running the git command (see the logs) in your shell e.g. &lt;code&gt;git --no-optional-locks status --porcelain=v1 --ignored=matching -u&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Huge git repositories may timeout after the default &lt;code&gt;git.timeout&lt;/code&gt; of 400ms. Try increasing that in your setup if you see &lt;code&gt;[git] job timed out&lt;/code&gt; in the logs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try temporarily disabling git integration by setting &lt;code&gt;git.enable = false&lt;/code&gt; in your setup.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PRs are always welcome. See &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Help Wanted&lt;/h3&gt; &#xA;&lt;p&gt;Developers with the following environments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple macOS&lt;/li&gt; &#xA; &lt;li&gt;Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WSL&lt;/li&gt; &#xA;   &lt;li&gt;msys&lt;/li&gt; &#xA;   &lt;li&gt;powershell&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Help triaging, diagnosing and fixing issues specific to those environments is needed, as the nvim-tree developers do not have access to or expertise in these environments.&lt;/p&gt; &#xA;&lt;p&gt;Let us know you&#39;re interested by commenting on issues and raising PRs.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;kyazdani42 tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;akin909 tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot3.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;stsewd tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot4.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;reyhankaplan tree&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>williamboman/nvim-lsp-installer</title>
    <updated>2022-06-26T02:16:01Z</updated>
    <id>tag:github.com,2022-06-26:/williamboman/nvim-lsp-installer</id>
    <link href="https://github.com/williamboman/nvim-lsp-installer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin that allow you to seamlessly manage LSP servers with :LspInstall. With full Windows support!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/6705160/118490159-f064bb00-b71d-11eb-883e-4affbd020074.png&#34; alt=&#34;nvim-lsp-installer&#34; width=&#34;50%&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#requirements&#34;&gt;Requirements&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#minimum-requirements&#34;&gt;Minimum requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#additional-requirements&#34;&gt;Additional requirements&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#available-lsps&#34;&gt;Available LSPs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#logo&#34;&gt;Logo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#default-configuration&#34;&gt;Default configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Neovim plugin that allow you to manage LSP servers (servers are installed inside &lt;code&gt;:echo stdpath(&#34;data&#34;)&lt;/code&gt; by default). It works in tandem with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;lspconfig&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; by registering a hook that enhances the &lt;code&gt;PATH&lt;/code&gt; environment variable, allowing neovim&#39;s LSP client to locate the server executable installed by nvim-lsp-installer.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;On top of just providing commands for installing &amp;amp; uninstalling LSP servers, it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;provides a graphical UI&lt;/li&gt; &#xA; &lt;li&gt;provides the ability to check for, and upgrade to, new server versions through a single interface&lt;/li&gt; &#xA; &lt;li&gt;supports installing custom versions of LSP servers (for example &lt;code&gt;:LspInstall rust_analyzer@nightly&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;relaxes the minimum requirements by attempting multiple different utilities (for example, only one of &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, or &lt;code&gt;Invoke-WebRequest&lt;/code&gt; is required for HTTP requests)&lt;/li&gt; &#xA; &lt;li&gt;hosts &lt;a href=&#34;https://github.com/williamboman/nvim-lspconfig-test&#34;&gt;a suite of system tests&lt;/a&gt; for all supported servers&lt;/li&gt; &#xA; &lt;li&gt;has full support for Windows &lt;img src=&#34;https://user-images.githubusercontent.com/6705160/131256603-cacf7f66-dfa9-4515-8ae4-0e42d08cfc6a.png&#34; height=&#34;20&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;sup&gt;1 - while lspconfig is the main target, this plugin may also be used for other use cases&lt;/sup&gt; &lt;br&gt; &lt;sup&gt;2 - some servers don&#39;t provide an executable, in which case the full command to spawn the server is provided instead&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685720-782e33ba-172c-44b6-8558-fb4e98495294.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685404-2cd34b25-166e-4c84-b9dd-1d5580dc2bdd.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685322-a537f021-5850-4bbc-8be2-1ece5678d205.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685324-1310ae7d-67bf-4053-872c-d27e8a4c4b80.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150686052-fd5c4d54-b4da-4cb3-bb82-a094526ee5b5.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150686059-f1be8131-1274-4f62-9aa8-345599cbd8bc.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Requires neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt; and &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Minimum requirements&lt;/h3&gt; &#xA;&lt;p&gt;The minimum recommended requirements are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Unix systems: git(1), curl(1) or wget(1), unzip(1), tar(1), gzip(1)&lt;/li&gt; &#xA; &lt;li&gt;For Windows systems: powershell, git, tar, and &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; or &lt;a href=&#34;https://peazip.github.io/&#34;&gt;peazip&lt;/a&gt; or &lt;a href=&#34;https://github.com/mholt/archiver&#34;&gt;archiver&lt;/a&gt; or &lt;a href=&#34;https://www.winzip.com/&#34;&gt;winzip&lt;/a&gt; or &lt;a href=&#34;https://www.win-rar.com/&#34;&gt;WinRAR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional requirements&lt;/h3&gt; &#xA;&lt;p&gt;Additional requirements to install &amp;amp; run all servers are (depending on usage):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js (LTS) &amp;amp; npm&lt;/li&gt; &#xA; &lt;li&gt;Python3 &amp;amp; pip3&lt;/li&gt; &#xA; &lt;li&gt;go &amp;gt;= 1.17&lt;/li&gt; &#xA; &lt;li&gt;cargo&lt;/li&gt; &#xA; &lt;li&gt;Ruby &amp;amp; gem&lt;/li&gt; &#xA; &lt;li&gt;PHP &amp;amp; Composer&lt;/li&gt; &#xA; &lt;li&gt;JDK&lt;/li&gt; &#xA; &lt;li&gt;Julia&lt;/li&gt; &#xA; &lt;li&gt;dotnet&lt;/li&gt; &#xA; &lt;li&gt;ghcup&lt;/li&gt; &#xA; &lt;li&gt;luarocks&lt;/li&gt; &#xA; &lt;li&gt;meson&lt;/li&gt; &#xA; &lt;li&gt;ninja&lt;/li&gt; &#xA; &lt;li&gt;pwsh&lt;/li&gt; &#xA; &lt;li&gt;rebar3&lt;/li&gt; &#xA; &lt;li&gt;valac&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;williamboman/nvim-lsp-installer&#34;,&#xA;    &#34;neovim/nvim-lspconfig&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;williamboman/nvim-lsp-installer&#34;&#xA;Plug &#34;neovim/nvim-lspconfig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;nvim-lsp-installer will only make sure that Neovim can find your installed servers, it does not set up any servers for you automatically. You will have to set up your servers yourself (for example via &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;lspconfig&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;In order for nvim-lsp-installer to register the necessary hooks at the right moment, &lt;strong&gt;make sure you call the &lt;code&gt;require(&#34;nvim-lsp-installer&#34;).setup()&lt;/code&gt; function before you set up any servers&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-lsp-installer&#34;).setup {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#configuration&#34;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstallInfo&lt;/code&gt; - opens a graphical overview of your language servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstall [--sync] [server] ...&lt;/code&gt; - installs/reinstalls language servers. Runs in a blocking fashion if the &lt;code&gt;--sync&lt;/code&gt; argument is passed (only recommended for scripting purposes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspUninstall [--sync] &amp;lt;server&amp;gt; ...&lt;/code&gt; - uninstalls language servers. Runs in a blocking fashion if the &lt;code&gt;--sync&lt;/code&gt; argument is passed (only recommended for scripting purposes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspUninstallAll [--no-confirm]&lt;/code&gt; - uninstalls all language servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstallLog&lt;/code&gt; - opens the log file in a new tab window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspPrintInstalled&lt;/code&gt; - prints all installed language servers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You may optionally configure certain behavior of nvim-lsp-installer when calling the &lt;code&gt;.setup()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#default-configuration&#34;&gt;default configuration&lt;/a&gt; for all available settings.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-lsp-installer&#34;).setup({&#xA;    automatic_installation = true, -- automatically detect which servers to install (based on which servers are set up via lspconfig)&#xA;    ui = {&#xA;        icons = {&#xA;            server_installed = &#34;✓&#34;,&#xA;            server_pending = &#34;➜&#34;,&#xA;            server_uninstalled = &#34;✗&#34;&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available LSPs&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Server name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWK&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;awk_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Angular&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;angularls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ansible&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ansiblels&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apex&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apex_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arduino &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/arduino_language_server/README.md&#34;&gt;(docs!!!)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;arduino_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Assembly (GAS/NASM, GO)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;asm_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Astro&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;astro&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bash&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bashls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Beancount&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;beancount&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bicep&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bicep&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;csharp_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C# &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/omnisharp/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;omnisharp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CMake&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cssls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cssmodules_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clarity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clarity_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clojure&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clojure_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;codeqlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;crystalline&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scry&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cucumber&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cucumber_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dart&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dartls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deno&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;denols&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dhall&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dhall_lsp_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Diagnostic (general purpose server)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;diagnosticls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dlang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;serve_d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dockerls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dot&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EFM (general purpose server)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;efm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESLint &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/eslint/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixirls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elmls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ember&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ember&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Emmet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;emmet_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Erlang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;erlangls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fsautocomplete&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flux_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Foam (OpenFOAM)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;foam_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fortran&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fortls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;golangci_lint_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gopls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Grammarly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;grammarly&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GraphQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;graphql&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Groovy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;groovyls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;html&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haskell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haxe&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;haxe_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hoon&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hoon_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/jdtls/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jdtls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;quick_lint_js&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jsonnet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonnet_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Julia &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/julials/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;julials&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;kotlin_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ltex&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;texlab&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lelwel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lelwel_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sumneko_lua&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;marksman&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;prosemd_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;remark_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zk&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metamath Zero&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mm0_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nickel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nickel_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nimls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nix&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rnix&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCaml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ocamlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCaml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ocamllsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Objective C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OneScript, 1C:Enterprise&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bsl_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenCL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;opencl_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;intelephense&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpactor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;psalm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Perl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;perlnavigator&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Powershell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;powershell_es&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prisma&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;prismals&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Puppet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;puppet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PureScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;purescriptls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jedi_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pyright&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sourcery&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/pylsp/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pylsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;r_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rescriptls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reason&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reason_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Robot Framework&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;robotframework_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rome&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rome&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solargraph&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rust_analyzer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Salt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;salt_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shopify Theme Check&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;theme_check&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;slint_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solang&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity (VSCode)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solidity_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sorbet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorbet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sphinx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;esbonio&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stylelint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;stylelint_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Svelte&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svelte&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sourcekit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svlangserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;verible&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TOML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;taplo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tailwind CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tailwindcss&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Teal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;teal_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terraform&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;terraformls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terraform &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/tflint/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tflint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TypeScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;V&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vala&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vala_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VimL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vimls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visualforce&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;visualforce&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;volar&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuels&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lemminx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yamlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Logo&lt;/h2&gt; &#xA;&lt;p&gt;Illustrations in the logo are derived from &lt;a href=&#34;https://schauderbasis.de/&#34;&gt;@Kaligule&lt;/a&gt;&#39;s &#34;Robots&#34; collection.&lt;/p&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local DEFAULT_SETTINGS = {&#xA;    -- A list of servers to automatically install if they&#39;re not already installed. Example: { &#34;rust_analyzer&#34;, &#34;sumneko_lua&#34; }&#xA;    -- This setting has no relation with the `automatic_installation` setting.&#xA;    ensure_installed = {},&#xA;&#xA;    -- Whether servers that are set up (via lspconfig) should be automatically installed if they&#39;re not already installed.&#xA;    -- This setting has no relation with the `ensure_installed` setting.&#xA;    -- Can either be:&#xA;    --   - false: Servers are not automatically installed.&#xA;    --   - true: All servers set up via lspconfig are automatically installed.&#xA;    --   - { exclude: string[] }: All servers set up via lspconfig, except the ones provided in the list, are automatically installed.&#xA;    --       Example: automatic_installation = { exclude = { &#34;rust_analyzer&#34;, &#34;solargraph&#34; } }&#xA;    automatic_installation = false,&#xA;&#xA;    ui = {&#xA;        -- Whether to automatically check for outdated servers when opening the UI window.&#xA;        check_outdated_servers_on_open = true,&#xA;&#xA;        -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.&#xA;        border = &#34;none&#34;,&#xA;&#xA;        icons = {&#xA;            -- The list icon to use for installed servers.&#xA;            server_installed = &#34;◍&#34;,&#xA;            -- The list icon to use for servers that are pending installation.&#xA;            server_pending = &#34;◍&#34;,&#xA;            -- The list icon to use for servers that are not installed.&#xA;            server_uninstalled = &#34;◍&#34;,&#xA;        },&#xA;        keymaps = {&#xA;            -- Keymap to expand a server in the UI&#xA;            toggle_server_expand = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;            -- Keymap to install the server under the current cursor position&#xA;            install_server = &#34;i&#34;,&#xA;            -- Keymap to reinstall/update the server under the current cursor position&#xA;            update_server = &#34;u&#34;,&#xA;            -- Keymap to check for new version for the server under the current cursor position&#xA;            check_server_version = &#34;c&#34;,&#xA;            -- Keymap to update all installed servers&#xA;            update_all_servers = &#34;U&#34;,&#xA;            -- Keymap to check which installed servers are outdated&#xA;            check_outdated_servers = &#34;C&#34;,&#xA;            -- Keymap to uninstall a server&#xA;            uninstall_server = &#34;X&#34;,&#xA;        },&#xA;    },&#xA;&#xA;    -- The directory in which to install all servers.&#xA;    install_root_dir = path.concat { vim.fn.stdpath &#34;data&#34;, &#34;lsp_servers&#34; },&#xA;&#xA;    pip = {&#xA;        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior&#xA;        -- and is not recommended.&#xA;        --&#xA;        -- Example: { &#34;--proxy&#34;, &#34;https://proxyserver&#34; }&#xA;        install_args = {},&#xA;    },&#xA;&#xA;    -- Controls to which degree logs are written to the log file. It&#39;s useful to set this to vim.log.levels.DEBUG when&#xA;    -- debugging issues with server installations.&#xA;    log_level = vim.log.levels.INFO,&#xA;&#xA;    -- Limit for the maximum amount of servers to be installed at the same time. Once this limit is reached, any further&#xA;    -- servers that are requested to be installed will be put in a queue.&#xA;    max_concurrent_installers = 4,&#xA;&#xA;    github = {&#xA;        -- The template URL to use when downloading assets from GitHub.&#xA;        -- The placeholders are the following (in order):&#xA;        -- 1. The repository (e.g. &#34;rust-lang/rust-analyzer&#34;)&#xA;        -- 2. The release version (e.g. &#34;v0.3.0&#34;)&#xA;        -- 3. The asset name (e.g. &#34;rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz&#34;)&#xA;        download_url_template = &#34;https://github.com/%s/releases/download/%s/%s&#34;,&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jose-elias-alvarez/null-ls.nvim</title>
    <updated>2022-06-26T02:16:01Z</updated>
    <id>tag:github.com,2022-06-26:/jose-elias-alvarez/null-ls.nvim</id>
    <link href="https://github.com/jose-elias-alvarez/null-ls.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;null-ls.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Neovim&#39;s LSP ecosystem is growing, and plugins like &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt; make it a joy to work with LSP features like code actions and diagnostics.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the VS Code and coc.nvim ecosystems, Neovim doesn&#39;t provide a way for non-LSP sources to hook into its LSP client. null-ls is an attempt to bridge that gap and simplify the process of creating, sharing, and setting up LSP sources using pure Lua.&lt;/p&gt; &#xA;&lt;p&gt;null-ls is also an attempt to reduce the boilerplate required to set up general-purpose language servers and improve performance by removing the need for external processes.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;null-ls is in &lt;strong&gt;beta status&lt;/strong&gt;. Please see below for steps to follow if something doesn&#39;t work the way you expect (or doesn&#39;t work at all).&lt;/p&gt; &#xA;&lt;p&gt;At the moment, null-is is compatible with Neovim 0.7 (stable) and 0.8 (head), but some features and performance improvements are exclusive to the latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;null-ls sources are able to hook into the following LSP features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Code actions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Diagnostics (file- and project-level)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Formatting (including range formatting)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hover&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Completion&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;null-ls includes built-in sources for each of these features to provide out-of-the-box functionality. See &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/BUILTINS.md&#34;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/BUILTIN_CONFIG.md&#34;&gt;BUILTIN_CONFIG&lt;/a&gt; for instructions on how to set up and configure these sources.&lt;/p&gt; &#xA;&lt;p&gt;null-ls also provides helpers to streamline the process of spawning and transforming the output of command-line processes into an LSP-friendly format. If you want to create your own source, either for personal use or for a plugin, see &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/HELPERS.md&#34;&gt;HELPERS&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install null-ls using your favorite package manager. The plugin depends on &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;, which you are (probably) already using.&lt;/p&gt; &#xA;&lt;p&gt;To get started, you must set up null-ls and register at least one source. See &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/BUILTINS.md&#34;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/CONFIG.md&#34;&gt;CONFIG&lt;/a&gt; for information about setting up and configuring null-ls.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;null-ls&#34;).setup({&#xA;    sources = {&#xA;        require(&#34;null-ls&#34;).builtins.formatting.stylua,&#xA;        require(&#34;null-ls&#34;).builtins.diagnostics.eslint,&#xA;        require(&#34;null-ls&#34;).builtins.completion.spell,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The definitive source for information about null-ls is its &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/MAIN.md&#34;&gt;documentation&lt;/a&gt;, which contains information about how null-ls works, how to set it up, and how to create sources.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to add new features and built-ins for any language are always welcome. See &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Parsing buffer content&lt;/h3&gt; &#xA;&lt;p&gt;The following example demonstrates a diagnostic source that will parse the current buffer&#39;s content and show instances of the word &lt;code&gt;really&lt;/code&gt; as LSP warnings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;local api = vim.api&#xA;&#xA;local no_really = {&#xA;    method = null_ls.methods.DIAGNOSTICS,&#xA;    filetypes = { &#34;markdown&#34;, &#34;text&#34; },&#xA;    generator = {&#xA;        fn = function(params)&#xA;            local diagnostics = {}&#xA;            -- sources have access to a params object&#xA;            -- containing info about the current file and editor state&#xA;            for i, line in ipairs(params.content) do&#xA;                local col, end_col = line:find(&#34;really&#34;)&#xA;                if col and end_col then&#xA;                    -- null-ls fills in undefined positions&#xA;                    -- and converts source diagnostics into the required format&#xA;                    table.insert(diagnostics, {&#xA;                        row = i,&#xA;                        col = col,&#xA;                        end_col = end_col,&#xA;                        source = &#34;no-really&#34;,&#xA;                        message = &#34;Don&#39;t use &#39;really!&#39;&#34;,&#xA;                        severity = 2,&#xA;                    })&#xA;                end&#xA;            end&#xA;            return diagnostics&#xA;        end,&#xA;    },&#xA;}&#xA;&#xA;null_ls.register(no_really)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parsing CLI program output&lt;/h3&gt; &#xA;&lt;p&gt;null-ls includes helpers to simplify the process of spawning and capturing the output of CLI programs. This example shows how to pass the content of the current buffer to &lt;code&gt;markdownlint&lt;/code&gt; via &lt;code&gt;stdin&lt;/code&gt; and convert its output (which it sends to &lt;code&gt;stderr&lt;/code&gt;) into LSP diagnostics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;local helpers = require(&#34;null-ls.helpers&#34;)&#xA;&#xA;local markdownlint = {&#xA;    method = null_ls.methods.DIAGNOSTICS,&#xA;    filetypes = { &#34;markdown&#34; },&#xA;    -- null_ls.generator creates an async source&#xA;    -- that spawns the command with the given arguments and options&#xA;    generator = null_ls.generator({&#xA;        command = &#34;markdownlint&#34;,&#xA;        args = { &#34;--stdin&#34; },&#xA;        to_stdin = true,&#xA;        from_stderr = true,&#xA;        -- choose an output format (raw, json, or line)&#xA;        format = &#34;line&#34;,&#xA;        check_exit_code = function(code, stderr)&#xA;            local success = code &amp;lt;= 1&#xA;&#xA;            if not success then&#xA;              -- can be noisy for things that run often (e.g. diagnostics), but can&#xA;              -- be useful for things that run on demand (e.g. formatting)&#xA;              print(stderr)&#xA;            end&#xA;&#xA;            return success&#xA;        end,&#xA;        -- use helpers to parse the output from string matchers,&#xA;        -- or parse it manually with a function&#xA;        on_output = helpers.diagnostics.from_patterns({&#xA;            {&#xA;                pattern = [[:(%d+):(%d+) [%w-/]+ (.*)]],&#xA;                groups = { &#34;row&#34;, &#34;col&#34;, &#34;message&#34; },&#xA;            },&#xA;            {&#xA;                pattern = [[:(%d+) [%w-/]+ (.*)]],&#xA;                groups = { &#34;row&#34;, &#34;message&#34; },&#xA;            },&#xA;        }),&#xA;    }),&#xA;}&#xA;&#xA;null_ls.register(markdownlint)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Something isn&#39;t working! What do I do?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you run into issues when using null-ls, please follow the steps below and &lt;strong&gt;do not&lt;/strong&gt; open an issue on the Neovim repository. null-ls is not an actual LSP server, so we need to determine whether issues are specific to this plugin before sending anything upstream.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure your configuration is in line with the latest version of this document.&lt;/li&gt; &#xA; &lt;li&gt;Enable debug mode (see below) and check the output of your source(s). If the CLI program is not properly configured or is otherwise not running as expected, that&#39;s an issue with the program, not null-ls.&lt;/li&gt; &#xA; &lt;li&gt;Check the documentation for available configuration options that might solve your issue.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re having trouble configuring null-ls or want to know how to achieve a specific result, open a discussion.&lt;/li&gt; &#xA; &lt;li&gt;If you believe the issue is with null-ls itself or you want to request a new feature, open an issue and provide the information requested in the issue template.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How do I format files?&lt;/h3&gt; &#xA;&lt;p&gt;null-ls formatters run when you call &lt;code&gt;vim.lsp.buf.formatting()&lt;/code&gt; or &lt;code&gt;vim.lsp.buf.formatting_sync()&lt;/code&gt;. If a source supports it, you can run range formatting by visually selecting part of the buffer and calling &lt;code&gt;vim.lsp.buf.range_formatting()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On 0.8, you should use &lt;code&gt;vim.lsp.buf.format&lt;/code&gt; (see the help file for usage instructions).&lt;/p&gt; &#xA;&lt;h3&gt;How do I format files on save?&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Formatting-on-save&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I stop Neovim from asking me which server I want to use for formatting?&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Avoiding-LSP-formatting-conflicts&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I view project-level diagnostics?&lt;/h3&gt; &#xA;&lt;p&gt;For a built-in solution, use &lt;code&gt;:lua vim.diagnostic.setqflist()&lt;/code&gt;. You can also use a plugin like &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I enable debug mode and get debug output?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;debug&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; in your config:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;null-ls&#34;).setup({&#xA;    debug = true&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;:NullLsLog&lt;/code&gt; to open your debug log in the current Neovim instance or &lt;code&gt;:NullLsInfo&lt;/code&gt; to get the path to your debug log.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As with LSP logging, debug mode will slow down Neovim. Make sure to disable the option after you&#39;ve collected the information you&#39;re looking for.&lt;/p&gt; &#xA;&lt;h3&gt;Does it work with (other plugin)?&lt;/h3&gt; &#xA;&lt;p&gt;In most cases, yes. null-ls tries to act like an actual LSP server as much as possible, so it should work seamlessly with most LSP-related plugins. If you run into problems, please try to determine which plugin is causing them and open an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Compatibility-with-other-plugins&#34;&gt;This wiki page&lt;/a&gt; mentions plugins that require specific configuration options / tweaks to work with null-ls.&lt;/p&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to hard work by @folke, the plugin wraps the mechanism Neovim uses to spawn language servers to start a client entirely in-memory. The client attaches to buffers that match defined sources and receives and responds to requests, document changes, and other events from Neovim.&lt;/p&gt; &#xA;&lt;h3&gt;Will it affect my performance?&lt;/h3&gt; &#xA;&lt;p&gt;More testing is necessary, but since null-ls uses pure Lua and runs entirely in memory without any external processes, in most cases it should run faster than similar solutions. If you notice that performance is worse with null-ls than with an alternative, please open an issue!&lt;/p&gt; &#xA;&lt;h3&gt;I am seeing a formatting &lt;code&gt;timeout&lt;/code&gt; error message&lt;/h3&gt; &#xA;&lt;p&gt;This issue occurs when a formatter takes longer than the default timeout value. This is an automatic mechanism and controlled by Neovim. You might want to increase the timeout in your call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- 0.7&#xA;vim.lsp.buf.formatting_sync(nil, 2000) -- 2 seconds&#xA;&#xA;-- 0.8&#xA;vim.lsp.buf.format({ timeout_ms = 2000 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;The test suite includes unit and integration tests and depends on plenary.nvim. Run &lt;code&gt;make test&lt;/code&gt; in the root of the project to run the suite or &lt;code&gt;FILE=filename_spec.lua make test-file&lt;/code&gt; to test an individual file.&lt;/p&gt; &#xA;&lt;p&gt;All tests expect the latest Neovim master.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt; and &lt;a href=&#34;https://github.com/iamcco/diagnostic-languageserver&#34;&gt;diagnostic-languageserver&lt;/a&gt;: general-purpose language servers that can provide formatting and diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;nvim-lint&lt;/a&gt;: a Lua plugin that focuses on providing diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mhartington/formatter.nvim&#34;&gt;formatter.nvim&lt;/a&gt;: a Lua plugin that (surprise) focuses on formatting.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to everyone who sponsors my projects and makes continued development / maintenance possible!&lt;/p&gt; &#xA;&lt;!-- sponsors --&gt;&#xA;&lt;a href=&#34;https://github.com/yutkat&#34;&gt;&lt;img src=&#34;https://github.com/yutkat.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/hituzi-no-sippo&#34;&gt;&lt;img src=&#34;https://github.com/hituzi-no-sippo.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/sbc64&#34;&gt;&lt;img src=&#34;https://github.com/sbc64.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/milanglacier&#34;&gt;&lt;img src=&#34;https://github.com/milanglacier.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;!-- sponsors --&gt;</summary>
  </entry>
</feed>