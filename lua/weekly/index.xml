<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-24T01:47:43Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shagu/pfUI</title>
    <updated>2025-08-24T01:47:43Z</updated>
    <id>tag:github.com,2025-08-24:/shagu/pfUI</id>
    <link href="https://github.com/shagu/pfUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A User Interface Replacement for World of Warcraft: Vanilla &amp; TBC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pfUI&lt;/h1&gt; &#xA;&lt;p&gt;An AddOn for World of Warcraft: Vanilla (1.12.1) and The Burning Crusade (2.4.3), which aims to be a full replacement for the original interface. The design is inspired by several screenshots I&#39;ve seen from TukUI, ElvUI and others. This addon delivers modern features and a minimalistic style that&#39;s easy to use right from the start. It is entirely written from scratch without any inclusion of third-party addons or libraries.&lt;/p&gt; &#xA;&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; an addon-pack like &lt;a href=&#34;http://shagu.org/ShaguUI/&#34;&gt;ShaguUI&lt;/a&gt;, however, there is support for external addons like MobHealth3, DPSMate and others, but they will never be shipped within the package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please do not re-upload or distribute outdated versions of this project. However, you are more than welcome to fork or link to the official github page.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/shagu/ShaguAddons/master/_img/pfUI/config.jpg&#34; align=&#34;right&#34; width=&#34;48.5%&#34; /&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/shagu/ShaguAddons/master/_img/pfUI/unlock.jpg&#34; width=&#34;48.5%&#34; /&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/shagu/ShaguAddons/master/_img/pfUI/contrib.jpg&#34; align=&#34;right&#34; width=&#34;48.5%&#34; /&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/shagu/ShaguAddons/master/_img/pfUI/maraudon.jpg&#34; width=&#34;48.5%&#34; /&gt; &#xA;&lt;h2&gt;Installation (Vanilla)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;strong&gt;&lt;a href=&#34;https://github.com/shagu/pfUI/archive/master.zip&#34;&gt;Latest Version&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unpack the Zip file&lt;/li&gt; &#xA; &lt;li&gt;Rename the folder &#34;pfUI-master&#34; to &#34;pfUI&#34;&lt;/li&gt; &#xA; &lt;li&gt;Copy &#34;pfUI&#34; into Wow-Directory\Interface\AddOns&lt;/li&gt; &#xA; &lt;li&gt;Restart Wow&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation (The Burning Crusade)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;strong&gt;&lt;a href=&#34;https://github.com/shagu/pfUI/archive/master.zip&#34;&gt;Latest Version&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unpack the Zip file&lt;/li&gt; &#xA; &lt;li&gt;Rename the folder &#34;pfUI-master&#34; to &#34;pfUI-tbc&#34;&lt;/li&gt; &#xA; &lt;li&gt;Copy &#34;pfUI-tbc&#34; into Wow-Directory\Interface\AddOns&lt;/li&gt; &#xA; &lt;li&gt;Restart Wow&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;/pfui         Open the configuration GUI&#xA;/share        Open the configuration import/export dialog&#xA;/gm           Open the ticket Dialog&#xA;/rl           Reload the whole UI&#xA;/farm         Toggles the Farm-Mode&#xA;/pfcast       Same as /cast but for mouseover units&#xA;/focus        Creates a Focus-Frame for the current target&#xA;/castfocus    Same as /cast but for focus frame&#xA;/clearfocus   Clears the Focus-Frame&#xA;/swapfocus    Toggle Focus and Target-Frame&#xA;/pftest       Toggle pfUI Unitframe Test Mode&#xA;/abp          Addon Button Panel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Languages&lt;/h2&gt; &#xA;&lt;p&gt;pfUI supports and contains language specific code for the following gameclients.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;English (enUS)&lt;/li&gt; &#xA; &lt;li&gt;Korean (koKR)&lt;/li&gt; &#xA; &lt;li&gt;French (frFR)&lt;/li&gt; &#xA; &lt;li&gt;German (deDE)&lt;/li&gt; &#xA; &lt;li&gt;Chinese (zhCN)&lt;/li&gt; &#xA; &lt;li&gt;Spanish (esES)&lt;/li&gt; &#xA; &lt;li&gt;Russian (ruRU)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recommended Addons&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shagu.org/pfQuest&#34;&gt;pfQuest&lt;/a&gt; A simple database and quest helper&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://addons.us.to/addon/wim&#34;&gt;WIM&lt;/a&gt;, &lt;a href=&#34;https://github.com/shirsig/WIM&#34;&gt;WIM (continued)&lt;/a&gt; Give whispers an instant messenger feel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shagu.org/pfUI-eliteoverlay&#34;&gt;pfUI-eliteoverlay&lt;/a&gt; Add elite dragons to unitframes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shagu.org/pfUI-fonts&#34;&gt;pfUI-fonts&lt;/a&gt; Additional fonts for pfUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrrosh/pfUI-CustomMedia&#34;&gt;pfUI-CustomMedia&lt;/a&gt; Additional textures for pfUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrrosh/pfUI-Gryphons&#34;&gt;pfUI-Gryphons&lt;/a&gt; Add back the gryphons to your actionbars&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;What does &#34;pfUI&#34; stand for?&lt;/strong&gt;&lt;br /&gt; The term &#34;&lt;em&gt;pfui!&lt;/em&gt;&#34; is german and simply stands for &#34;&lt;em&gt;pooh!&lt;/em&gt;&#34;, because I&#39;m not a big fan of creating configuration UI&#39;s, especially not via the Wow-API (you might have noticed that in ShaguUI).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How can I donate?&lt;/strong&gt;&lt;br /&gt; You can donate via &lt;a href=&#34;https://github.com/sponsors/shagu&#34;&gt;GitHub&lt;/a&gt; or &lt;a href=&#34;https://ko-fi.com/shagu&#34;&gt;Ko-fi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How do I report a Bug?&lt;/strong&gt;&lt;br /&gt; Please provide as much information as possible in the &lt;a href=&#34;https://github.com/shagu/pfUI/issues&#34;&gt;Bugtracker&lt;/a&gt;. If there is an error message, provide the full content of it. Just telling that &#34;there is an error&#34; won&#39;t help any of us. Please consider adding additional information such as: since when did you got the error, does it still happen using a clean configuration, what other addons are loaded and which version you&#39;re running. When playing with a non-english client, the language might be relevant too. If possible, explain how people can reproduce the issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How can I contribute?&lt;/strong&gt; Report errors and issues in the &lt;a href=&#34;https://github.com/shagu/pfUI/issues&#34;&gt;Bugtracker&lt;/a&gt;. Please make sure to have the latest version installed and check for conflicting addons beforehand.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I have bad performance, what can I do?&lt;/strong&gt;&lt;br /&gt; There&#39;s only one known performance issue: that is while using &#34;Frame Shadows&#34;. Make sure to disable those in the pfUI settings (Settings -&amp;gt; Appearance -&amp;gt; Enable Frame Shadows). If you still have a low performance, it&#39;s most likely a combination with another addon. Disable all AddOns but pfUI and then enable one-by-one, till the performance problem occurs again. Make sure to report the identified AddOn and what you did to reproduce via the &lt;a href=&#34;https://github.com/shagu/pfUI/issues&#34;&gt;Bugtracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Where is the happiness indicator for pets?&lt;/strong&gt;&lt;br /&gt; The pet happiness is shown as the color of your pet&#39;s frame. Depending on your skin, this can either be the text or the background color of your pet&#39;s healthbar:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Green = Happy&lt;/li&gt; &#xA; &lt;li&gt;Yellow = Content&lt;/li&gt; &#xA; &lt;li&gt;Red = Unhappy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since version 4.0.7 there is also an additional icon that can be enabled from the pet unit frame options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Can I use Clique with pfUI?&lt;/strong&gt;&lt;br /&gt; This addon already includes support for clickcasting. If you still want to make use of clique, all pfUI&#39;s unitframes are already compatible to Clique-TBC. For Vanilla, a pfUI compatible version can be found &lt;a href=&#34;https://github.com/shagu/Clique/archive/master.zip&#34;&gt;Here&lt;/a&gt;. If you want to keep your current version of Clique, you&#39;ll have to apply this &lt;a href=&#34;https://github.com/shagu/Clique/commit/a5ee56c3f803afbdda07bae9cd330e0d4a75d75a&#34;&gt;Patch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Where is the Experience Bar?&lt;/strong&gt;&lt;br /&gt; The experience bar shows up on mouseover and whenever you gain experience, next to left chatframe by default. There&#39;s also an option to make it stay visible all the time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How do I show the Damage- and Threatmeter Dock?&lt;/strong&gt;&lt;br /&gt; If you enabled the &#34;dock&#34;-feature for your external (third-party) meters such as DPSMate or KTM, then you&#39;ll be able to toggle between them and the Right Chat by clicking on the &#34;&amp;gt;&#34; symbol on the bottom-right panel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why is my chat always resetting to only 3 lines of text?&lt;/strong&gt;&lt;br /&gt; This happens if &#34;Simple Chat&#34; is enabled in blizzards interface settings (Advanced Options). Paste the following command into your chat to disable that option: &lt;code&gt;/run SIMPLE_CHAT=&#34;0&#34;; pfUI.chat.SetupPositions(); ReloadUI()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How can I enable mouseover cast?&lt;/strong&gt;&lt;br /&gt; On Vanilla, create a macro with &#34;/pfcast SPELLNAME&#34;. If you also want to see the cooldown, You might want to add &#34;/run if nil then CastSpellByName(&#34;SPELLNAME&#34;) end&#34; on top of the macro. For The Burning Crusade, just use the regular mouseover macros.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Will there be pfUI for Activision&#39;s &#34;Classic&#34; remakes?&lt;/strong&gt;&lt;br /&gt; No, it would require an entire rewrite of the AddOn since the game is now a different one. The AddOn-API has evolved during the last 15 years and the new &#34;Classic&#34; versions are based on a current retail gameclient. I don&#39;t plan to play any of those new versions, so I won&#39;t be porting any of my addons to it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Everything from scratch?! Are you insane?&lt;/strong&gt;&lt;br /&gt; Most probably, yes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>seblyng/roslyn.nvim</title>
    <updated>2025-08-24T01:47:43Z</updated>
    <id>tag:github.com,2025-08-24:/seblyng/roslyn.nvim</id>
    <link href="https://github.com/seblyng/roslyn.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Roslyn LSP plugin for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;roslyn.nvim&lt;/h1&gt; &#xA;&lt;p&gt;This is an actively maintained &amp;amp; upgraded &lt;a href=&#34;https://github.com/jmederosalvarado/roslyn.nvim&#34;&gt;fork&lt;/a&gt; that interacts with the improved &amp;amp; open-source C# &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt; language server, meant to replace the old and discontinued OmniSharp. This language server is currently used in the &lt;a href=&#34;https://github.com/dotnet/vscode-csharp&#34;&gt;Visual Studio Code C# Extension&lt;/a&gt;, which is shipped with the standard C# Dev Kit.&lt;/p&gt; &#xA;&lt;h2&gt;IMPORTANT&lt;/h2&gt; &#xA;&lt;p&gt;This plugin does not provide Razor support.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/tris203/rzls.nvim&#34;&gt;https://github.com/tris203/rzls.nvim&lt;/a&gt; if you are using Razor.&lt;/p&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.11.0&lt;/li&gt; &#xA; &lt;li&gt;Roslyn language server downloaded locally&lt;/li&gt; &#xA; &lt;li&gt;.NET SDK installed and &lt;code&gt;dotnet&lt;/code&gt; command available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Difference to nvim-lspconfig&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;roslyn&lt;/code&gt; is now a part of &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;, but it does not implement all things that are implemented here. This plugin tries to keep things minimal but still implement some things that is not suited for &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;. A couple of additional things this plugin implements&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for multiple solutions&lt;/li&gt; &#xA; &lt;li&gt;Broad root_dir detection support. Meaning it will search for solutions upward in parent directories if &lt;code&gt;broad_search&lt;/code&gt; option is set&lt;/li&gt; &#xA; &lt;li&gt;Support for source generated files&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;Fix all&lt;/code&gt;, &lt;code&gt;Nested code actions&lt;/code&gt; and &lt;code&gt;Complex edit&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Roslyn target&lt;/code&gt; command to switch between multiple solutions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/a749f6c7-fc87-440c-912d-666d86453bc5&#34;&gt;https://github.com/user-attachments/assets/a749f6c7-fc87-440c-912d-666d86453bc5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Mason&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;roslyn&lt;/code&gt; is not in the mason core registry, so a custom registry is used. This registry provides two binaries&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;roslyn&lt;/code&gt; (To be used with this repo)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rzls&lt;/code&gt; (To be used with &lt;a href=&#34;https://github.com/tris203/rzls.nvim&#34;&gt;rzls.nvim&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;You need to set up the custom registry like this&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup({&#xA;    registries = {&#xA;        &#34;github:mason-org/mason-registry&#34;,&#xA;        &#34;github:Crashdummyy/mason-registry&#34;,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can then install it with &lt;code&gt;:MasonInstall roslyn&lt;/code&gt; or through the popup menu by running &lt;code&gt;:Mason&lt;/code&gt;. It is not available through &lt;a href=&#34;https://github.com/williamboman/mason-lspconfig.nvim&#34;&gt;mason-lspconfig.nvim&lt;/a&gt; and the &lt;code&gt;:LspInstall&lt;/code&gt; interface When installing the server through mason, the cmd is automatically added to the LSP config, so no need to add it manually&lt;/p&gt; &#xA; &lt;p&gt;The stable version of &lt;code&gt;roslyn&lt;/code&gt; is provided through &lt;code&gt;roslyn&lt;/code&gt; in the mason registry. This is the same version as in vscode. If you want the bleeding edge features, you can choose &lt;code&gt;roslyn-unstable&lt;/code&gt;. Be aware of breaking changes if you choose this version&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;There&#39;s currently an open &lt;a href=&#34;https://github.com/mason-org/mason-registry/pull/6330&#34;&gt;pull request&lt;/a&gt; to add the Roslyn server to &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;mason&lt;/a&gt;, which would greatly improve the experience. If you are interested in this, please react to the original comment, but don&#39;t spam the thread with unnecessary comments.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Manually&lt;/summary&gt; &#xA; &lt;p&gt;NOTE: The manual installation instructions are the same for this plugin and for nvim-lspconfig. The following instructions are copied from &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/configs.md#roslyn_ls&#34;&gt;nvim-lspconfig&lt;/a&gt;. If the installation instructions are not up-to-date or not clear, please first send a PR to &lt;code&gt;nvim-lspconfig&lt;/code&gt; with improvements so that we can align the installation instructions.&lt;/p&gt; &#xA; &lt;p&gt;To install the server, compile from source or download as nuget package. Go to &lt;code&gt;https://dev.azure.com/azure-public/vside/_artifacts/feed/vs-impl/NuGet/Microsoft.CodeAnalysis.LanguageServer.&amp;lt;platform&amp;gt;/overview&lt;/code&gt; replace &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; with one of the following &lt;code&gt;linux-x64&lt;/code&gt;, &lt;code&gt;osx-x64&lt;/code&gt;, &lt;code&gt;win-x64&lt;/code&gt;, &lt;code&gt;neutral&lt;/code&gt; (for more info on the download location see &lt;a href=&#34;https://github.com/dotnet/roslyn/issues/71474#issuecomment-2177303207&#34;&gt;https://github.com/dotnet/roslyn/issues/71474#issuecomment-2177303207&lt;/a&gt;). Download and extract it (nuget&#39;s are zip files).&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;if you chose &lt;code&gt;neutral&lt;/code&gt; nuget version, then you have to change the &lt;code&gt;cmd&lt;/code&gt; like so:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;cmd = {&#xA;    &#34;dotnet&#34;,&#xA;    &#34;&amp;lt;my_folder&amp;gt;/Microsoft.CodeAnalysis.LanguageServer.dll&#34;,&#xA;    &#34;--logLevel&#34;, -- this property is required by the server&#xA;    &#34;Information&#34;,&#xA;    &#34;--extensionLogDirectory&#34;, -- this property is required by the server&#xA;    fs.joinpath(uv.os_tmpdir(), &#34;roslyn_ls/logs&#34;),&#xA;    &#34;--stdio&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;where &lt;code&gt;&amp;lt;my_folder&amp;gt;&lt;/code&gt; has to be the folder you extracted the nuget package to.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;for all other platforms put the extracted folder to neovim&#39;s PATH (&lt;code&gt;vim.env.PATH&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;br /&gt; For server compatibility check the &lt;a href=&#34;https://github.com/dotnet/roslyn/raw/main/docs/wiki/NuGet-packages.md#versioning&#34;&gt;roslyn repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install the plugin with your preferred package manager:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;    &#34;seblyng/roslyn.nvim&#34;,&#xA;    ---@module &#39;roslyn.config&#39;&#xA;    ---@type RoslynNvimConfig&#xA;    opts = {&#xA;        -- your configuration comes here; leave empty for default settings&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The plugin comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;opts = {&#xA;    -- &#34;auto&#34; | &#34;roslyn&#34; | &#34;off&#34;&#xA;    --&#xA;    -- - &#34;auto&#34;: Does nothing for filewatching, leaving everything as default&#xA;    -- - &#34;roslyn&#34;: Turns off neovim filewatching which will make roslyn do the filewatching&#xA;    -- - &#34;off&#34;: Hack to turn off all filewatching. (Can be used if you notice performance issues)&#xA;    filewatching = &#34;auto&#34;,&#xA;&#xA;    -- Optional function that takes an array of targets as the only argument. Return the target you&#xA;    -- want to use. If it returns `nil`, then it falls back to guessing the target like normal&#xA;    -- Example:&#xA;    --&#xA;    -- choose_target = function(target)&#xA;    --     return vim.iter(target):find(function(item)&#xA;    --         if string.match(item, &#34;Foo.sln&#34;) then&#xA;    --             return item&#xA;    --         end&#xA;    --     end)&#xA;    -- end&#xA;    choose_target = nil,&#xA;&#xA;    -- Optional function that takes the selected target as the only argument.&#xA;    -- Returns a boolean of whether it should be ignored to attach to or not&#xA;    --&#xA;    -- I am for example using this to disable a solution with a lot of .NET Framework code on mac&#xA;    -- Example:&#xA;    --&#xA;    -- ignore_target = function(target)&#xA;    --     return string.match(target, &#34;Foo.sln&#34;) ~= nil&#xA;    -- end&#xA;    ignore_target = nil,&#xA;&#xA;    -- Whether or not to look for solution files in the child of the (root).&#xA;    -- Set this to true if you have some projects that are not a child of the&#xA;    -- directory with the solution file&#xA;    broad_search = false,&#xA;&#xA;    -- Whether or not to lock the solution target after the first attach.&#xA;    -- This will always attach to the target in `vim.g.roslyn_nvim_selected_solution`.&#xA;    -- NOTE: You can use `:Roslyn target` to change the target&#xA;    lock_target = false,&#xA;&#xA;    -- If the plugin should silence notifications about initialization&#xA;    silent = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure language server specific settings sent to the server, you can use the &lt;code&gt;vim.lsp.config&lt;/code&gt; interface with &lt;code&gt;roslyn&lt;/code&gt; as the name of the server.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.config(&#34;roslyn&#34;, {&#xA;    on_attach = function()&#xA;        print(&#34;This will run when the server attaches!&#34;)&#xA;    end,&#xA;    settings = {&#xA;        [&#34;csharp|inlay_hints&#34;] = {&#xA;            csharp_enable_inlay_hints_for_implicit_object_creation = true,&#xA;            csharp_enable_inlay_hints_for_implicit_variable_types = true,&#xA;        },&#xA;        [&#34;csharp|code_lens&#34;] = {&#xA;            dotnet_enable_references_code_lens = true,&#xA;        },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some tips and tricks that may be useful, but not in the scope of this plugin, are documented in the &lt;a href=&#34;https://github.com/seblyng/roslyn.nvim/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br /&gt; These settings are not guaranteed to be up-to-date and new ones can appear in the future. Aditionally, not not all settings are shown here, but only the most relevant ones for Neovim. For a full list, visit &lt;a href=&#34;https://github.com/dotnet/vscode-csharp/raw/main/test/lsptoolshost/unitTests/configurationMiddleware.test.ts&#34;&gt;this&lt;/a&gt; unit test from the vscode extension and look especially for the ones which &lt;strong&gt;don&#39;t&lt;/strong&gt; have &lt;code&gt;vsCodeConfiguration: null&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Background Analysis&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|background_analysis&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These settings control the scope of background diagnostics.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;background_analysis.dotnet_analyzer_diagnostics_scope&lt;/code&gt;&lt;br /&gt; Scope of the background analysis for .NET analyzer diagnostics.&lt;br /&gt; Expected values: &lt;code&gt;openFiles&lt;/code&gt;, &lt;code&gt;fullSolution&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;background_analysis.dotnet_compiler_diagnostics_scope&lt;/code&gt;&lt;br /&gt; Scope of the background analysis for .NET compiler diagnostics.&lt;br /&gt; Expected values: &lt;code&gt;openFiles&lt;/code&gt;, &lt;code&gt;fullSolution&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code Lens&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|code_lens&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These settings control the LSP code lens.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_references_code_lens&lt;/code&gt;&lt;br /&gt; Enable code lens references.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_tests_code_lens&lt;/code&gt;&lt;br /&gt; Enable tests code lens.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You must refresh the code lens yourself. Check &lt;code&gt;:h vim.lsp.codelens.refresh()&lt;/code&gt; and the example autocmd.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Completions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|completion&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These settings control how the completions behave.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_provide_regex_completions&lt;/code&gt;&lt;br /&gt; Show regular expressions in completion list.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_show_completion_items_from_unimported_namespaces&lt;/code&gt;&lt;br /&gt; Enables support for showing unimported types and unimported extension methods in completion lists.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_show_name_completion_suggestions&lt;/code&gt;&lt;br /&gt; Perform automatic object name completion for the members that you have recently selected.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inlay hints&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|inlay_hints&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These settings control what inlay hints should be displayed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;csharp_enable_inlay_hints_for_implicit_object_creation&lt;/code&gt;&lt;br /&gt; Show hints for implicit object creation.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;csharp_enable_inlay_hints_for_implicit_variable_types&lt;/code&gt;&lt;br /&gt; Show hints for variables with inferred types.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;csharp_enable_inlay_hints_for_lambda_parameter_types&lt;/code&gt;&lt;br /&gt; Show hints for lambda parameter types.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;csharp_enable_inlay_hints_for_types&lt;/code&gt;&lt;br /&gt; Display inline type hints.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_inlay_hints_for_indexer_parameters&lt;/code&gt;&lt;br /&gt; Show hints for indexers.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_inlay_hints_for_literal_parameters&lt;/code&gt;&lt;br /&gt; Show hints for literals.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_inlay_hints_for_object_creation_parameters&lt;/code&gt;&lt;br /&gt; Show hints for &#39;new&#39; expressions.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_inlay_hints_for_other_parameters&lt;/code&gt;&lt;br /&gt; Show hints for everything else.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_enable_inlay_hints_for_parameters&lt;/code&gt;&lt;br /&gt; Display inline parameter name hints.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_suppress_inlay_hints_for_parameters_that_differ_only_by_suffix&lt;/code&gt;&lt;br /&gt; Suppress hints when parameter names differ only by suffix.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_suppress_inlay_hints_for_parameters_that_match_argument_name&lt;/code&gt;&lt;br /&gt; Suppress hints when argument matches parameter name.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dotnet_suppress_inlay_hints_for_parameters_that_match_method_intent&lt;/code&gt;&lt;br /&gt; Suppress hints when parameter name matches the method&#39;s intent.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] These won&#39;t have any effect if you don&#39;t enable inlay hints in your config. Check &lt;code&gt;:h vim.lsp.inlay_hint.enable()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Symbol search&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|symbol_search&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This setting controls how the language server should search for symbols.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dotnet_search_reference_assemblies&lt;/code&gt;&lt;br /&gt; Search symbols in reference assemblies.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp|formatting&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This setting controls how the language server should format code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dotnet_organize_imports_on_format&lt;/code&gt;&lt;br /&gt; Sort using directives on format alphabetically.&lt;br /&gt; Expected values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📚 Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Roslyn restart&lt;/code&gt; restarts the server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Roslyn start&lt;/code&gt; starts the server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Roslyn stop&lt;/code&gt; stops the server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Roslyn target&lt;/code&gt; chooses a solution if there are multiple to chose from&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Other usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have multiple solutions, this plugin tries to guess which one to use. You can change the target with the &lt;code&gt;:Roslyn target&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;The current solution is always stored in &lt;code&gt;vim.g.roslyn_nvim_selected_solution&lt;/code&gt;. You can use this, for example, to display the current solution in your statusline.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>