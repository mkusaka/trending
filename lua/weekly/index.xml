<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-17T01:48:26Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cpow/neovim-for-newbs</title>
    <updated>2024-03-17T01:48:26Z</updated>
    <id>tag:github.com,2024-03-17:/cpow/neovim-for-newbs</id>
    <link href="https://github.com/cpow/neovim-for-newbs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a simple lua neovim configuration for newbs&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>xiaorouji/openwrt-passwall</title>
    <updated>2024-03-17T01:48:26Z</updated>
    <id>tag:github.com,2024-03-17:/xiaorouji/openwrt-passwall</id>
    <link href="https://github.com/xiaorouji/openwrt-passwall" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>otavioschwanck/arrow.nvim</title>
    <updated>2024-03-17T01:48:26Z</updated>
    <id>tag:github.com,2024-03-17:/otavioschwanck/arrow.nvim</id>
    <link href="https://github.com/otavioschwanck/arrow.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bookmark your files, separated by project, and quickly navigate through them.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;arrow.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Arrow.nvim is a plugin made to manage quick file bookmarks using a single UI. You can just map one key and have everything you need to get started.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mPdSC5s.png&#34; alt=&#34;arrow.nvim&#34;&gt; &lt;img src=&#34;https://i.imgur.com/LcvG406.gif&#34; alt=&#34;arrow.nvim_gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Lazy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;otavioschwanck/arrow.nvim&#34;,&#xA;  opts = {&#xA;    show_icons = true,&#xA;    leader_key = &#39;;&#39; -- Recommended to be a single key&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#39;otavioschwanck/arrow.nvim&#39;, config = function()&#xA;  require(&#39;arrow&#39;).setup({&#xA;    show_icons = true,&#xA;    leader_key = &#39;;&#39; -- Recommended to be a single key&#xA;  })&#xA;end }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Just press the leader_key set on setup and follow you heart. (Is that easy)&lt;/p&gt; &#xA;&lt;h2&gt;Differences from harpoon:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Single keymap needed&lt;/li&gt; &#xA; &lt;li&gt;Different UI to manage the bookmarks&lt;/li&gt; &#xA; &lt;li&gt;Statusline helpers&lt;/li&gt; &#xA; &lt;li&gt;Show only the filename (show path only when needed: same filename twice or too generic filename, like create, index, etc)&lt;/li&gt; &#xA; &lt;li&gt;Has colors and icons &amp;lt;3&lt;/li&gt; &#xA; &lt;li&gt;Has the delete mode to quickly delete items&lt;/li&gt; &#xA; &lt;li&gt;Files can be opened vertically or horizontally&lt;/li&gt; &#xA; &lt;li&gt;Still has the option to edit file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  show_icons = true,&#xA;  always_show_path = false,&#xA;  separate_by_branch = false, -- Bookmarks will be separated by git branch&#xA;  hide_handbook = false, -- set to true to hide the shortcuts on menu.&#xA;  save_path = function()&#xA;    return vim.fn.stdpath(&#34;cache&#34;) .. &#34;/arrow&#34;&#xA;  end,&#xA;  mappings = {&#xA;    edit = &#34;e&#34;,&#xA;    delete_mode = &#34;d&#34;,&#xA;    clear_all_items = &#34;C&#34;,&#xA;    toggle = &#34;s&#34;, -- used as save if separate_save_and_remove is true&#xA;    open_vertical = &#34;v&#34;,&#xA;    open_horizontal = &#34;-&#34;,&#xA;    quit = &#34;q&#34;,&#xA;    remove = &#34;x&#34;, -- only used if separate_save_and_remove is true&#xA;  },&#xA;  custom_actions = {&#xA;    open = function(target_file_name, current_file_name) end, -- target_file_name = file selected to be open, current_file_name = filename from where this was called&#xA;    split_vertical = function(target_file_name, current_file_name) end,&#xA;    split_horizontal = function(target_file_name, current_file_name) end,&#xA;  },&#xA;  window = { -- controls the appearance and position of an arrow window (see nvim_open_win() for all options)&#xA;    width = &#34;auto&#34;,&#xA;    height = &#34;auto&#34;,&#xA;    row = &#34;auto&#34;,&#xA;    col = &#34;auto&#34;,&#xA;    border = &#34;double&#34;,&#xA;  }&#xA;  separate_save_and_remove = false, -- if true, will remove the toggle and create the save/remove keymaps.&#xA;  leader_key = &#34;;&#34;,&#xA;  save_key = &#34;cwd&#34;, -- what will be used as root to save the bookmarks. Can be also `git_root`.&#xA;  global_bookmarks = false, -- if true, arrow will save files globally (ignores separate_by_branch)&#xA;  index_keys = &#34;123456789zxcbnmZXVBNM,afghjklAFGHJKLwrtyuiopWRTYUIOP&#34;, -- keys mapped to bookmark index, i.e. 1st bookmark will be accessible by 1, and 12th - by c&#xA;  full_path_list = { &#34;update_stuff&#34; } -- filenames on this list will ALWAYS show the file path too.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also map previous and next key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;H&#34;, require(&#34;arrow.persist&#34;).previous)&#xA;vim.keymap.set(&#34;n&#34;, &#34;L&#34;, require(&#34;arrow.persist&#34;).next)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;C-s&amp;gt;&#34;, require(&#34;arrow.persist&#34;).toggle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Statusline&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;require(&#39;arrow.statusline&#39;)&lt;/code&gt; to access the statusline helpers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local statusline = require(&#39;arrow.statusline&#39;)&#xA;statusline.is_on_arrow_file() -- return nil if current file is not on arrow.  Return the index if it is.&#xA;statusline.text_for_statusline() -- return the text to be shown in the statusline (the index if is on arrow or &#34;&#34; if not)&#xA;statusline.text_for_statusline_with_icons() -- Same, but with an bow and arrow icon ;D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/v7Rvagj.png&#34; alt=&#34;statusline&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ArrowFileIndex&lt;/li&gt; &#xA; &lt;li&gt;ArrowCurrentFile&lt;/li&gt; &#xA; &lt;li&gt;ArrowAction&lt;/li&gt; &#xA; &lt;li&gt;ArrowDeleteMode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Working with sessions plugins&lt;/h2&gt; &#xA;&lt;p&gt;If you have any error using arrow with a session plugin, like on mini.sessions, add this to the post load session hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;arrow.git&#34;).refresh_git_branch() -- only if separated_by_branch is true&#xA;require(&#34;arrow.persist&#34;).load_cache_file()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Obs: persistence.nvim works fine with arrow.&lt;/p&gt; &#xA;&lt;h3&gt;Do you like my work? Please, buy me a coffee&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/otavioschwanck&#34;&gt;https://www.buymeacoffee.com/otavioschwanck&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>