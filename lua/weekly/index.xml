<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:44:00Z</updated>
  <subtitle>Weekly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Mee12345/GMod-Infinite-Map</title>
    <updated>2022-12-11T01:44:00Z</updated>
    <id>tag:github.com,2022-12-11:/Mee12345/GMod-Infinite-Map</id>
    <link href="https://github.com/Mee12345/GMod-Infinite-Map" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GMod Infinite Map &lt;a href=&#34;https://&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/made_with-mee%2B%2B-2ea44f&#34; alt=&#34;made with - mee++&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/discord/962140720192421928?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;This is a garrys mod addon that adds a map to the game called gm_infinite, as the title suggests this map visually appears infinite This is partially inspired by gm_infiniteflatgrass (from the Gravity Hull addon), but the map was very buggy and mostly impractical for use, especially when it comes to planes and ACF cars. Since the original creator of Gravity Hull is (presumably) dead, I am attempting to recreate it (Only the infinite map aspect).&lt;/p&gt; &#xA;&lt;h3&gt;This mod attempts (or is planning) to recreate gm_infiniteflatgrass with more features including:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generally less buggy&lt;/li&gt; &#xA; &lt;li&gt;Generally better addon support&lt;/li&gt; &#xA; &lt;li&gt;Ability to see over 2 billion hammer units in real time&lt;/li&gt; &#xA; &lt;li&gt;ACF Support (May need help from ACF devs on this one)&lt;/li&gt; &#xA; &lt;li&gt;WAC (Maybe LFS) Support&lt;/li&gt; &#xA; &lt;li&gt;Simphys car support&lt;/li&gt; &#xA; &lt;li&gt;Basic terrain including a ocean / lake system&lt;/li&gt; &#xA; &lt;li&gt;Ability to &#34;Go to space&#34;&lt;/li&gt; &#xA; &lt;li&gt;(Maybe) Procedural Planets^&lt;/li&gt; &#xA; &lt;li&gt;An attempt to revive the Spacebuild gamemode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;To Do:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Explosion Detour&lt;/li&gt; &#xA; &lt;li&gt;Finish Sound Detour&lt;/li&gt; &#xA; &lt;li&gt;Finish Procedural Planets&lt;/li&gt; &#xA; &lt;li&gt;(Maybe) Water system&lt;/li&gt; &#xA; &lt;li&gt;(Maybe) Detour Bullets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stuff I am NOT doing:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trees (On main terrain)&lt;/li&gt; &#xA; &lt;li&gt;Editable Terrain&lt;/li&gt; &#xA; &lt;li&gt;Higher poly terrain&lt;/li&gt; &#xA; &lt;li&gt;Support for every addon, there WILL be conflictions!&lt;/li&gt; &#xA; &lt;li&gt;NPC and Nextbot support&lt;/li&gt; &#xA; &lt;li&gt;Hammer editor support&lt;/li&gt; &#xA; &lt;li&gt;Particle detours&lt;/li&gt; &#xA; &lt;li&gt;Optimizations reguarding large amounts of spawned objects, this is source internal and performance wont be great&lt;/li&gt; &#xA; &lt;li&gt;Planets bigger than 1 chunk&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How It Works&lt;/h3&gt; &#xA;&lt;p&gt;The map isnt actually infinite, its impossible to go past the source bounds, so the entirety of the play space in the map is occupied in the same location. A hook is used to determine which props should and should not collide, and all entities are given perceived visual offsets per entity depending on which chunk (or cell) they are in, giving the illusion the map is presumably infinite (You cant do anything physical past the source boundery, but you can render things past it). The original Gravity Hull addon used this same method with &#34;Cells&#34; (But I call them chunks)&lt;/p&gt; &#xA;&lt;h3&gt;For better addon support this mod currently detours the following functions (ONLY ON THE SERVER!):&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity:GetPos&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity:SetPos&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity:LocalToWorld&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity:WorldToLocal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity:EyePos&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity:NearestPoint&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity:GetAttachment&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity:WorldSpaceCenter&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity:WorldSpaceAABB&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity:Spawn (for constraints)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PhysObj:GetPos&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PhysObj:SetPos&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PhysObj:ApplyForceOffset&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PhysObj:LocalToWorld&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PhysObj:WorldToLocal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PhysObj:CalculateVelocityOffset&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Vehicle:SetPos&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Vehicle:LocalToWorld&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Vehicle:WorldToLocal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CTakeDamageInfo:GetDamagePosition&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NextBot:GetRangeSquaredTo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NextBot:GetRangeTo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CLuaLocomotionMT:Approach&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CLuaLocomotionMT:FaceTowards&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Player:GetShootPos&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;util.TraceLine&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;util.TraceHull&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;util.TraceEntity&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;util.IsInWorld&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ents.FindInSphere&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;WireLib.ClampPos (unclamps wiremods internal clamp function since it wont let objects position be set outside of the source bounderies)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SF.clampPos (same thing but for starfall^)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mrjones2014/legendary.nvim</title>
    <updated>2022-12-11T01:44:00Z</updated>
    <id>tag:github.com,2022-12-11:/mrjones2014/legendary.nvim</id>
    <link href="https://github.com/mrjones2014/legendary.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üó∫Ô∏è A legend for your keymaps, commands, and autocmds, with which-key.nvim integration&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;&lt;code&gt;legendary.nvim&lt;/code&gt;&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#features&#34;&gt;Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Define your keymaps, commands, and autocommands as simple Lua tables, building a legend at the same time (like VS Code&#39;s Command Palette).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8648891/200827633-7009f5f3-e126-491c-88bd-73a0287978c4.gif&#34; alt=&#34;demo gif&#34;&gt; &lt;br&gt; &lt;sup&gt;Theme used in recording is &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim&#34;&gt;onedarkpro.nvim&lt;/a&gt;. The finder UI is handled by &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; via &lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;dressing.nvim&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; for details.&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Documentation Table of Contents (click to expand)&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/MAPPING_DEVELOPMENT.md&#34;&gt;Keymap Development Utilities&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/WHICH_KEY.md&#34;&gt;&lt;code&gt;which-key.nvim&lt;/code&gt; Integration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/API.md&#34;&gt;Lua API&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/README.md&#34;&gt;Table Structures&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/KEYMAPS.md&#34;&gt;Keymaps&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/COMMANDS.md&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/FUNCTIONS.md&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/AUTOCMDS.md&#34;&gt;&lt;code&gt;augroup&lt;/code&gt;/&lt;code&gt;autocmd&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define your keymaps, commands, &lt;code&gt;augroup&lt;/code&gt;/&lt;code&gt;autocmd&lt;/code&gt;s, and even arbitrary Lua functions to run on the fly, as simple Lua tables, then bind them with &lt;code&gt;legendary.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;which-key.nvim&lt;/a&gt;, use your existing &lt;code&gt;which-key.nvim&lt;/code&gt; tables with &lt;code&gt;legendary.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute normal, insert, and visual mode keymaps, commands, autocommands, and Lua functions when you select them&lt;/li&gt; &#xA; &lt;li&gt;Show your most recently executed items at the top when triggered via &lt;code&gt;legendary.nvim&lt;/code&gt; (can be disabled via config)&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;code&gt;vim.ui.select()&lt;/code&gt; so it can be hooked up to a fuzzy finder using something like &lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;dressing.nvim&lt;/a&gt; for a VS Code command palette like interface&lt;/li&gt; &#xA; &lt;li&gt;Buffer-local keymaps, commands, functions and autocmds only appear in the finder for the current buffer&lt;/li&gt; &#xA; &lt;li&gt;Help execute commands that take arguments by prefilling the command line instead of executing immediately&lt;/li&gt; &#xA; &lt;li&gt;Search built-in keymaps and commands along with your user-defined keymaps and commands (may be disabled in config). Notice some missing? Comment on &lt;a href=&#34;https://github.com/mrjones2014/legendary.nvim/discussions/89&#34;&gt;this discussion&lt;/a&gt; or submit a PR!&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;legendary.toolbox&lt;/code&gt; module to help create lazily-evaluated keymaps and commands, and item filter. Have an idea for a new helper? Comment on &lt;a href=&#34;https://github.com/mrjones2014/legendary.nvim/discussions/90&#34;&gt;this discussion&lt;/a&gt; or submit a PR!&lt;/li&gt; &#xA; &lt;li&gt;Sort by &lt;a href=&#34;https://en.wikipedia.org/wiki/Frecency&#34;&gt;frecency&lt;/a&gt;, a combined measure of how frequently and how recently you&#39;ve used an item from the picker&lt;/li&gt; &#xA; &lt;li&gt;A parser to convert Vimscript keymap commands (e.g. &lt;code&gt;vnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;f :SomeCommand&amp;lt;CR&amp;gt;&lt;/code&gt;) to &lt;code&gt;legendary.nvim&lt;/code&gt; keymap tables (see &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/API.md#converting-keymaps-from-vimscript&#34;&gt;Converting Keymaps From Vimscript&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Anonymous mappings; show mappings/commands in the finder without having &lt;code&gt;legendary.nvim&lt;/code&gt; handle creating them&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Optional) A &lt;code&gt;vim.ui.select()&lt;/code&gt; handler; this provides the UI for the finder. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I recommend &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; paired with &lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;dressing.nvim&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This project uses git tags to adhere to &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;. To check the latest version, see the &lt;a href=&#34;https://github.com/mrjones2014/legendary.nvim/tags&#34;&gt;git tag list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;packer.nvim&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- to use a version&#xA;use({&#xA;  &#39;mrjones2014/legendary.nvim&#39;,&#xA;  tag = &#39;v2.1.0&#39;,&#xA;  -- sqlite is only needed if you want to use frecency sorting&#xA;  -- requires = &#39;kkharji/sqlite.lua&#39;&#xA;})&#xA;-- or, to get rolling updates&#xA;use({&#xA;  &#39;mrjones2014/legendary.nvim&#39;&#xA;  -- sqlite is only needed if you want to use frecency sorting&#xA;  -- requires = &#39;kkharji/sqlite.lua&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;vim-plug&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-VimL&#34;&gt;&#34; if you want to use frecency sorting, sqlite is also needed&#xA;Plug &#34;kkharji/sqlite.lua&#34;&#xA;&#xA;&#34; to use a version&#xA;Plug &#34;mrjones2014/legendary.nvim&#34;, { &#39;tag&#39;: &#39;v2.1.0&#39; }&#xA;&#34; or, to get rolling updates&#xA;Plug &#34;mrjones2014/legendary.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Register keymaps through setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;legendary&#39;).setup({&#xA;  keymaps = {&#xA;    -- map keys to a command&#xA;    { &#39;&amp;lt;leader&amp;gt;ff&#39;, &#39;:Telescope find_files&#39;, description = &#39;Find files&#39; },&#xA;    -- map keys to a function&#xA;    { &#39;&amp;lt;leader&amp;gt;h&#39;, function() print(&#39;hello world!&#39;) end, description = &#39;Say hello&#39; },&#xA;    -- keymaps have opts.silent = true by default, but you can override it&#xA;    { &#39;&amp;lt;leader&amp;gt;s&#39;, &#39;:SomeCommand&amp;lt;CR&amp;gt;&#39;, description = &#39;Non-silent keymap&#39;, opts = { silent = false } },&#xA;    -- create keymaps with different implementations per-mode&#xA;    {&#xA;      &#39;&amp;lt;leader&amp;gt;c&#39;,&#xA;      { n = &#39;:LinewiseCommentToggle&amp;lt;CR&amp;gt;&#39;, x = &#34;:&#39;&amp;lt;,&#39;&amp;gt;BlockwiseCommentToggle&amp;lt;CR&amp;gt;&#34; },&#xA;      description = &#39;Toggle comment&#39;&#xA;    },&#xA;    -- create item groups to create sub-menus in the finder&#xA;    -- note that only keymaps, commands, and functions&#xA;    -- can be added to item groups&#xA;    {&#xA;      -- groups with same itemgroup will be merged&#xA;      itemgroup = &#39;short ID&#39;,&#xA;      description = &#39;A submenu of items...&#39;,&#xA;      icon = &#39;ÔÅº&#39;,&#xA;      keymaps = {&#xA;        -- more keymaps here&#xA;      },&#xA;    },&#xA;  },&#xA;  commands = {&#xA;    -- easily create user commands&#xA;    { &#39;:SayHello&#39;, function() print(&#39;hello world!&#39;) end, description = &#39;Say hello as a command&#39; },&#xA;    {&#xA;      -- groups with same itemgroup will be merged&#xA;      itemgroup = &#39;short ID&#39;,&#xA;      -- don&#39;t need to copy the other group data because&#xA;      -- it will be merged with the one from the keymaps table&#xA;      commands = {&#xA;        -- more commands here&#xA;      },&#xA;    },&#xA;  },&#xA;  funcs = {&#xA;    -- Make arbitrary Lua functions that can be executed via the item finder&#xA;    { function() doSomeStuff() end, description = &#39;Do some stuff with a Lua function!&#39; },&#xA;    {&#xA;      -- groups with same itemgroup will be merged&#xA;      itemgroup = &#39;short ID&#39;,&#xA;      -- don&#39;t need to copy the other group data because&#xA;      -- it will be merged with the one from the keymaps table&#xA;      funcs = {&#xA;        -- more funcs here&#xA;      },&#xA;    },&#xA;  },&#xA;  autocmds = {&#xA;    -- Create autocmds and augroups&#xA;    { &#39;BufWritePre&#39;, vim.lsp.buf.format, description = &#39;Format on save&#39; },&#xA;    {&#xA;      name = &#39;MyAugroup&#39;,&#xA;      clear = true,&#xA;      -- autocmds here&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more mapping features and more complicated setups see &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/README.md&#34;&gt;Table Structures&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To trigger the finder for your configured keymaps, commands, &lt;code&gt;augroup&lt;/code&gt;/&lt;code&gt;autocmd&lt;/code&gt;s, and Lua functions:&lt;/p&gt; &#xA;&lt;p&gt;Commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-VimL&#34;&gt;&#34; search keymaps, commands, and autocmds&#xA;:Legendary&#xA;&#xA;&#34; search keymaps&#xA;:Legendary keymaps&#xA;&#xA;&#34; search commands&#xA;:Legendary commands&#xA;&#xA;&#34; search functions&#xA;:Legendary functions&#xA;&#xA;&#34; search autocmds&#xA;:Legendary autocmds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lua API:&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;require(&#39;legend&#39;).find()&lt;/code&gt; function takes an &lt;code&gt;opts&lt;/code&gt; table with the following fields (all optional):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- pass a list of filter functions or a single filter function with&#xA;  -- the signature `function(item): boolean`&#xA;  -- several filter functions are provided for convenience&#xA;  -- see ./doc/FILTERS.md for a list&#xA;  filters = {},&#xA;  -- pass a function with the signature `function(item, mode): string[]`&#xA;  -- returning a list of strings where each string is one column&#xA;  -- use this to override the configured formatter for just one call&#xA;  formatter = nil,&#xA;  -- pass a string, or a function that returns a string&#xA;  -- to customize the select prompt for the current call&#xA;  select_prompt = nil,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/USAGE_EXAMPLES.md&#34;&gt;USAGE_EXAMPLES.md&lt;/a&gt; for some advanced usage examples.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Default configuration is shown below. For a detailed explanation of the structure for keymap, command, and &lt;code&gt;augroup&lt;/code&gt;/&lt;code&gt;autocmd&lt;/code&gt; tables, see &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/README.md&#34;&gt;doc/table_structures/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;legendary&#39;).setup({&#xA;  -- Initial keymaps to bind&#xA;  keymaps = {},&#xA;  -- Initial commands to bind&#xA;  commands = {},&#xA;  -- Initial augroups/autocmds to bind&#xA;  autocmds = {},&#xA;  -- Initial functions to bind&#xA;  funcs = {},&#xA;  -- Initial item groups to bind,&#xA;  -- note that item groups can also&#xA;  -- be under keymaps, commands, autocmds, or funcs&#xA;  itemgroups = {},&#xA;  -- default opts to merge with the `opts` table&#xA;  -- of each individual item&#xA;  default_opts = {&#xA;    keymaps = {},&#xA;    commands = {},&#xA;    autocmds = {},&#xA;  },&#xA;  -- Customize the prompt that appears on your vim.ui.select() handler&#xA;  -- Can be a string or a function that returns a string.&#xA;  select_prompt = &#39;Óåï legendary.nvim Óåï&#39;,&#xA;  -- Character to use to separate columns in the UI&#xA;  col_separator_char = &#39;‚îÇ&#39;,&#xA;  -- Optionally pass a custom formatter function. This function&#xA;  -- receives the item as a parameter and the mode that legendary&#xA;  -- was triggered from (e.g. `function(item, mode): string[]`)&#xA;  -- and must return a table of non-nil string values for display.&#xA;  -- It must return the same number of values for each item to work correctly.&#xA;  -- The values will be used as column values when formatted.&#xA;  -- See function `default_format(item)` in&#xA;  -- `lua/legendary/ui/format.lua` to see default implementation.&#xA;  default_item_formatter = nil,&#xA;  -- Include builtins by default, set to false to disable&#xA;  include_builtin = true,&#xA;  -- Include the commands that legendary.nvim creates itself&#xA;  -- in the legend by default, set to false to disable&#xA;  include_legendary_cmds = true,&#xA;  -- Options for list sorting. Note that fuzzy-finders will still&#xA;  -- do their own sorting. For telescope.nvim, you can set it to use&#xA;  -- `require(&#39;telescope.sorters&#39;).fuzzy_with_index_bias({})` when&#xA;  -- triggered via `legendary.nvim`. Example config for `dressing.nvim`:&#xA;  --&#xA;  -- require(&#39;dressing&#39;).setup({&#xA;  --  select = {&#xA;  --    get_config = function(opts)&#xA;  --      if opts.kind == &#39;legendary.nvim&#39; then&#xA;  --        return {&#xA;  --          telescope = {&#xA;  --            sorter = require(&#39;telescope.sorters&#39;).fuzzy_with_index_bias({})&#xA;  --          }&#xA;  --        }&#xA;  --      else&#xA;  --        return {}&#xA;  --      end&#xA;  --    end&#xA;  --  }&#xA;  -- })&#xA;  sort = {&#xA;    -- sort most recently used item to the top&#xA;    most_recent_first = true,&#xA;    -- sort user-defined items before built-in items&#xA;    user_items_first = true,&#xA;    -- sort the specified item type before other item types,&#xA;    -- value must be one of: &#39;keymap&#39;, &#39;command&#39;, &#39;autocmd&#39;, &#39;group&#39;, nil&#xA;    item_type_bias = nil,&#xA;    -- settings for frecency sorting.&#xA;    -- https://en.wikipedia.org/wiki/Frecency&#xA;    -- Set `frecency = false` to disable.&#xA;    -- this feature requires sqlite.lua (https://github.com/tami5/sqlite.lua)&#xA;    -- and will be automatically disabled if sqlite is not available.&#xA;    -- NOTE: THIS TAKES PRECEDENCE OVER OTHER SORT OPTIONS!&#xA;    frecency = {&#xA;      -- the directory to store the database in&#xA;      db_root = string.format(&#39;%s/legendary/&#39;, vim.fn.stdpath(&#39;data&#39;)),&#xA;      -- the maximum number of timestamps for a single item&#xA;      -- to store in the database&#xA;      max_timestamps = 10,&#xA;    },&#xA;  },&#xA;  which_key = {&#xA;    -- Automatically add which-key tables to legendary&#xA;    -- see ./doc/WHICH_KEY.md for more details&#xA;    auto_register = false,&#xA;    -- you can put which-key.nvim tables here,&#xA;    -- or alternatively have them auto-register,&#xA;    -- see ./doc/WHICH_KEY.md&#xA;    mappings = {},&#xA;    opts = {},&#xA;    -- controls whether legendary.nvim actually binds they keymaps,&#xA;    -- or if you want to let which-key.nvim handle the bindings.&#xA;    -- if not passed, true by default&#xA;    do_binding = true,&#xA;  },&#xA;  scratchpad = {&#xA;    -- How to open the scratchpad buffer,&#xA;    -- &#39;current&#39; for current window, &#39;float&#39;&#xA;    -- for floating window&#xA;    view = &#39;float&#39;,&#xA;    -- How to show the results of evaluated Lua code.&#xA;    -- &#39;print&#39; for `print(result)`, &#39;float&#39; for a floating window.&#xA;    results_view = &#39;float&#39;,&#xA;    -- Border style for floating windows related to the scratchpad&#xA;    float_border = &#39;rounded&#39;,&#xA;    -- Whether to restore scratchpad contents from a cache file&#xA;    keep_contents = true,&#xA;  },&#xA;  -- Directory used for caches&#xA;  cache_path = string.format(&#39;%s/legendary/&#39;, vim.fn.stdpath(&#39;cache&#39;)),&#xA;  -- Log level, one of &#39;trace&#39;, &#39;debug&#39;, &#39;info&#39;, &#39;warn&#39;, &#39;error&#39;, &#39;fatal&#39;&#xA;  log_level = &#39;info&#39;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Additional documentation can be found under &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/&#34;&gt;doc/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stevearc/dressing.nvim</title>
    <updated>2022-12-11T01:44:00Z</updated>
    <id>tag:github.com,2022-12-11:/stevearc/dressing.nvim</id>
    <link href="https://github.com/stevearc/dressing.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin to improve the default vim.ui interfaces&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dressing.nvim&lt;/h1&gt; &#xA;&lt;p&gt;With the release of Neovim 0.6 we were given the start of extensible core UI hooks (&lt;a href=&#34;https://github.com/neovim/neovim/pull/15771&#34;&gt;vim.ui.select&lt;/a&gt; and &lt;a href=&#34;https://github.com/neovim/neovim/pull/15959&#34;&gt;vim.ui.input&lt;/a&gt;). They exist to allow plugin authors to override them with improvements upon the default behavior, so that&#39;s exactly what we&#39;re going to do.&lt;/p&gt; &#xA;&lt;p&gt;It is a goal to match and not extend the core Neovim API. All options that core respects will be respected, and we will not accept any custom parameters or options in the functions. Customization will be done entirely using a separate &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#configuration&#34;&gt;configuration&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#highlights&#34;&gt;Highlights&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#advanced-configuration&#34;&gt;Advanced configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#notes-for-plugin-authors&#34;&gt;Notes for plugin authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#alternative-and-related-projects&#34;&gt;Alternative and related projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Neovim 0.7.0+ (for earlier versions, use the &lt;a href=&#34;https://github.com/stevearc/dressing.nvim/tree/nvim-0.5&#34;&gt;nvim-0.5 branch&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vim.input&lt;/code&gt; replacement (handling a LSP rename)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/506791/145502533-3dc2f87d-95ea-422d-a318-12c0092f1bdf.png&#34; alt=&#34;Screenshot from 2021-12-09 17-36-16&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vim.select&lt;/code&gt; (telescope)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/506791/144541916-4fa60c50-cadc-4f0f-b3c1-6307310e6e99.png&#34; alt=&#34;Screenshot from 2021-12-02 19-46-01&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vim.select&lt;/code&gt; (fzf)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/506791/144541986-6081b4f8-b3b2-418d-9265-b9dabec2c4c4.png&#34; alt=&#34;Screenshot from 2021-12-02 19-46-54&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vim.select&lt;/code&gt; (nui)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/506791/144542071-1aa66f81-b07c-492e-9884-fdafed1006df.png&#34; alt=&#34;Screenshot from 2021-12-02 19-47-56&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vim.select&lt;/code&gt; (built-in)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/506791/144729527-ede0d7ba-a6e6-41e0-be5a-1a5f16d35b05.png&#34; alt=&#34;Screenshot from 2021-12-04 17-14-32&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;dressing.nvim supports all the usual plugin managers&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;packer&#39;).startup(function()&#xA;    use {&#39;stevearc/dressing.nvim&#39;}&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Paq&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    {&#39;stevearc/dressing.nvim&#39;};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;stevearc/dressing.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dein&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;stevearc/dressing.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pathogen&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/dressing.nvim.git ~/.vim/bundle/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/dressing.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/dressing.nvim/start/dressing.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re fine with the defaults, you&#39;re good to go after installation. If you want to tweak, call this function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;dressing&#39;).setup({&#xA;  input = {&#xA;    -- Set to false to disable the vim.ui.input implementation&#xA;    enabled = true,&#xA;&#xA;    -- Default prompt string&#xA;    default_prompt = &#34;Input:&#34;,&#xA;&#xA;    -- Can be &#39;left&#39;, &#39;right&#39;, or &#39;center&#39;&#xA;    prompt_align = &#34;left&#34;,&#xA;&#xA;    -- When true, &amp;lt;Esc&amp;gt; will close the modal&#xA;    insert_only = true,&#xA;&#xA;    -- When true, input will start in insert mode.&#xA;    start_in_insert = true,&#xA;&#xA;    -- These are passed to nvim_open_win&#xA;    anchor = &#34;SW&#34;,&#xA;    border = &#34;rounded&#34;,&#xA;    -- &#39;editor&#39; and &#39;win&#39; will default to being centered&#xA;    relative = &#34;cursor&#34;,&#xA;&#xA;    -- These can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;    prefer_width = 40,&#xA;    width = nil,&#xA;    -- min_width and max_width can be a list of mixed types.&#xA;    -- min_width = {20, 0.2} means &#34;the greater of 20 columns or 20% of total&#34;&#xA;    max_width = { 140, 0.9 },&#xA;    min_width = { 20, 0.2 },&#xA;&#xA;    buf_options = {},&#xA;    win_options = {&#xA;      -- Window transparency (0-100)&#xA;      winblend = 10,&#xA;      -- Disable line wrapping&#xA;      wrap = false,&#xA;    },&#xA;&#xA;    -- Set to `false` to disable&#xA;    mappings = {&#xA;      n = {&#xA;        [&#34;&amp;lt;Esc&amp;gt;&#34;] = &#34;Close&#34;,&#xA;        [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;Confirm&#34;,&#xA;      },&#xA;      i = {&#xA;        [&#34;&amp;lt;C-c&amp;gt;&#34;] = &#34;Close&#34;,&#xA;        [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;Confirm&#34;,&#xA;        [&#34;&amp;lt;Up&amp;gt;&#34;] = &#34;HistoryPrev&#34;,&#xA;        [&#34;&amp;lt;Down&amp;gt;&#34;] = &#34;HistoryNext&#34;,&#xA;      },&#xA;    },&#xA;&#xA;    override = function(conf)&#xA;      -- This is the config that will be passed to nvim_open_win.&#xA;      -- Change values here to customize the layout&#xA;      return conf&#xA;    end,&#xA;&#xA;    -- see :help dressing_get_config&#xA;    get_config = nil,&#xA;  },&#xA;  select = {&#xA;    -- Set to false to disable the vim.ui.select implementation&#xA;    enabled = true,&#xA;&#xA;    -- Priority list of preferred vim.select implementations&#xA;    backend = { &#34;telescope&#34;, &#34;fzf_lua&#34;, &#34;fzf&#34;, &#34;builtin&#34;, &#34;nui&#34; },&#xA;&#xA;    -- Trim trailing `:` from prompt&#xA;    trim_prompt = true,&#xA;&#xA;    -- Options for telescope selector&#xA;    -- These are passed into the telescope picker directly. Can be used like:&#xA;    -- telescope = require(&#39;telescope.themes&#39;).get_ivy({...})&#xA;    telescope = nil,&#xA;&#xA;    -- Options for fzf selector&#xA;    fzf = {&#xA;      window = {&#xA;        width = 0.5,&#xA;        height = 0.4,&#xA;      },&#xA;    },&#xA;&#xA;    -- Options for fzf_lua selector&#xA;    fzf_lua = {&#xA;      winopts = {&#xA;        width = 0.5,&#xA;        height = 0.4,&#xA;      },&#xA;    },&#xA;&#xA;    -- Options for nui Menu&#xA;    nui = {&#xA;      position = &#34;50%&#34;,&#xA;      size = nil,&#xA;      relative = &#34;editor&#34;,&#xA;      border = {&#xA;        style = &#34;rounded&#34;,&#xA;      },&#xA;      buf_options = {&#xA;        swapfile = false,&#xA;        filetype = &#34;DressingSelect&#34;,&#xA;      },&#xA;      win_options = {&#xA;        winblend = 10,&#xA;      },&#xA;      max_width = 80,&#xA;      max_height = 40,&#xA;      min_width = 40,&#xA;      min_height = 10,&#xA;    },&#xA;&#xA;    -- Options for built-in selector&#xA;    builtin = {&#xA;      -- These are passed to nvim_open_win&#xA;      anchor = &#34;NW&#34;,&#xA;      border = &#34;rounded&#34;,&#xA;      -- &#39;editor&#39; and &#39;win&#39; will default to being centered&#xA;      relative = &#34;editor&#34;,&#xA;&#xA;      buf_options = {},&#xA;      win_options = {&#xA;        -- Window transparency (0-100)&#xA;        winblend = 10,&#xA;      },&#xA;&#xA;      -- These can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;      -- the min_ and max_ options can be a list of mixed types.&#xA;      -- max_width = {140, 0.8} means &#34;the lesser of 140 columns or 80% of total&#34;&#xA;      width = nil,&#xA;      max_width = { 140, 0.8 },&#xA;      min_width = { 40, 0.2 },&#xA;      height = nil,&#xA;      max_height = 0.9,&#xA;      min_height = { 10, 0.2 },&#xA;&#xA;      -- Set to `false` to disable&#xA;      mappings = {&#xA;        [&#34;&amp;lt;Esc&amp;gt;&#34;] = &#34;Close&#34;,&#xA;        [&#34;&amp;lt;C-c&amp;gt;&#34;] = &#34;Close&#34;,&#xA;        [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;Confirm&#34;,&#xA;      },&#xA;&#xA;      override = function(conf)&#xA;        -- This is the config that will be passed to nvim_open_win.&#xA;        -- Change values here to customize the layout&#xA;        return conf&#xA;      end,&#xA;    },&#xA;&#xA;    -- Used to override format_item. See :help dressing-format&#xA;    format_item_override = {},&#xA;&#xA;    -- see :help dressing_get_config&#xA;    get_config = nil,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;p&gt;The built-in &lt;code&gt;vim.ui.input&lt;/code&gt; and &lt;code&gt;vim.ui.select&lt;/code&gt; components mostly use the standard highlight groups for neovim floating windows (e.g. &lt;code&gt;NormalFloat&lt;/code&gt; for the text, &lt;code&gt;FloatBorder&lt;/code&gt; for the border). In addition, the window title uses a non-standard &lt;code&gt;FloatTitle&lt;/code&gt; group that is linked to &lt;code&gt;FloatBorder&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;A common way to adjust the highlighting of just the dressing windows is by providing a &lt;code&gt;winhighlight&lt;/code&gt; option in the config. For example, &lt;code&gt;winhighlight = &#39;NormalFloat:DiagnosticError&#39;&lt;/code&gt; would change the default text color in the dressing windows. See &lt;code&gt;:help winhighlight&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Note that you can&#39;t change &lt;code&gt;FloatTitle&lt;/code&gt; via &lt;code&gt;winhighlight&lt;/code&gt; since it is not a built-in group.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;p&gt;For each of the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt; configs, there is an option &lt;code&gt;get_config&lt;/code&gt;. This can be a function that accepts the &lt;code&gt;opts&lt;/code&gt; parameter that is passed in to &lt;code&gt;vim.select&lt;/code&gt; or &lt;code&gt;vim.input&lt;/code&gt;. It must return either &lt;code&gt;nil&lt;/code&gt; (to no-op) or config values to use in place of the global config values for that module.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to use a specific configuration for code actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;dressing&#39;).setup({&#xA;  select = {&#xA;    get_config = function(opts)&#xA;      if opts.kind == &#39;codeaction&#39; then&#xA;        return {&#xA;          backend = &#39;nui&#39;,&#xA;          nui = {&#xA;            relative = &#39;cursor&#39;,&#xA;            max_width = 40,&#xA;          }&#xA;        }&#xA;      end&#xA;    end&#xA;  }&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes for plugin authors&lt;/h2&gt; &#xA;&lt;p&gt;TL;DR: you can customize the telescope &lt;code&gt;vim.ui.select&lt;/code&gt; implementation by passing &lt;code&gt;telescope&lt;/code&gt; into &lt;code&gt;opts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;vim.ui&lt;/code&gt; hooks are a great boon for us because we can now assume that users will have a reasonable UI available for simple input operations. We no longer have to build separate implementations for each of fzf, telescope, ctrlp, etc. The tradeoff is that &lt;code&gt;vim.ui.select&lt;/code&gt; is less customizable than any of these options, so if you wanted to have a preview window (like telescope supports), it is no longer an option.&lt;/p&gt; &#xA;&lt;p&gt;My solution to this is extending the &lt;code&gt;opts&lt;/code&gt; that are passed to &lt;code&gt;vim.ui.select&lt;/code&gt;. You can add a &lt;code&gt;telescope&lt;/code&gt; field that will be passed directly into the picker, allowing you to customize any part of the UI. If a user has both dressing and telescope installed, they will get your custom picker UI. If either of those are not true, the selection UI will gracefully degrade to whatever the user has configured for &lt;code&gt;vim.ui.select&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example of usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.ui.select({&#39;apple&#39;, &#39;banana&#39;, &#39;mango&#39;}, {&#xA;  prompt = &#34;Title&#34;,&#xA;  telescope = require(&#34;telescope.themes&#34;).get_cursor(),&#xA;}, function(selected) end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For now this is available only for the telescope backend, but feel free to request additions.&lt;/p&gt; &#xA;&lt;h2&gt;Alternative and related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-ui-select.nvim&#34;&gt;telescope-ui-select&lt;/a&gt; - provides a &lt;code&gt;vim.ui.select&lt;/code&gt; implementation for telescope&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-fzy&#34;&gt;nvim-fzy&lt;/a&gt; - fzf alternative that also provides a &lt;code&gt;vim.ui.select&lt;/code&gt; implementation (&lt;a href=&#34;https://github.com/mfussenegger/nvim-fzy/pull/13&#34;&gt;#13&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ray-x/guihua.lua&#34;&gt;guihua.lua&lt;/a&gt; - multipurpose GUI library that provides &lt;code&gt;vim.ui.select&lt;/code&gt; and &lt;code&gt;vim.ui.input&lt;/code&gt; implementations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt; - doing pretty much the same thing but for &lt;code&gt;vim.notify&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt; - provides common UI components for plugin authors&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>