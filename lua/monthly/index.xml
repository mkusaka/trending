<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-01T01:47:06Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>folke/tokyonight.nvim</title>
    <updated>2024-06-01T01:47:06Z</updated>
    <id>tag:github.com,2024-06-01:/folke/tokyonight.nvim</id>
    <link href="https://github.com/folke/tokyonight.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üèô A clean, dark Neovim theme written in Lua, with support for lsp, treesitter and lots of plugins. Includes additional themes for Kitty, Alacritty, iTerm and Fish.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üèô Tokyo Night&lt;/h1&gt; &#xA;&lt;p&gt;A dark and light &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; theme written in &lt;a href=&#34;https://www.lua.org&#34;&gt;Lua&lt;/a&gt; ported from the &lt;a href=&#34;https://github.com/enkia/tokyo-night-vscode-theme&#34;&gt;Visual Studio Code TokyoNight&lt;/a&gt; theme. Includes &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&#34;&gt;extra&lt;/a&gt; themes for &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf.html&#34;&gt;Kitty&lt;/a&gt;, &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;Alacritty&lt;/a&gt;, &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm&lt;/a&gt; and &lt;a href=&#34;https://fishshell.com/docs/current/index.html&#34;&gt;Fish&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Storm&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115295095-3a9e5080-a10e-11eb-9aed-6054488c46ce.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Night&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115295327-7afdce80-a10e-11eb-89b3-2591262bf95a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Moon&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/190951628-10ba28a1-57ff-4479-8eab-47400a402242.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Day&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115996270-78c6c480-a593-11eb-8ed0-7d1400b058f5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports the latest &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.9.0&#34;&gt;0.9.0&lt;/a&gt; features.&lt;/li&gt; &#xA; &lt;li&gt;Enhances terminal colors.&lt;/li&gt; &#xA; &lt;li&gt;Introduces a darker background option for sidebar-like windows.&lt;/li&gt; &#xA; &lt;li&gt;Supports all major plugins.&lt;/li&gt; &#xA; &lt;li&gt;Provides &lt;a href=&#34;https://github.com/folke/tokyonight.nvim&#34;&gt;TokyoNight&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&#34;&gt;extras&lt;/a&gt; for numerous other applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üç≠ Extras&lt;/h3&gt; &#xA;&lt;!-- extras:start --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;Alacritty&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/alacritty&#34;&gt;alacritty&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dandavison/delta&#34;&gt;Delta&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/delta&#34;&gt;delta&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dunst-project.org/&#34;&gt;Dunst&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/dunst&#34;&gt;dunst&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fishshell.com/docs/current/index.html&#34;&gt;Fish&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fish&#34;&gt;fish&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fishshell.com/docs/current/interactive.html#syntax-highlighting&#34;&gt;Fish Themes&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fish_themes&#34;&gt;fish_themes&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/dnkl/foot&#34;&gt;Foot&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/foot&#34;&gt;foot&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;Fzf&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fzf&#34;&gt;fzf&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/extrawurst/gitui&#34;&gt;GitUI&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/gitui&#34;&gt;gitui&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://helix-editor.com/&#34;&gt;Helix&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/helix&#34;&gt;helix&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/iterm&#34;&gt;iterm&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf.html&#34;&gt;Kitty&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/kitty&#34;&gt;kitty&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lua.org&#34;&gt;Lua Table for testing&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua&#34;&gt;lua&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prismjs.com&#34;&gt;Prism&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/prism&#34;&gt;prism&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sublimetext.com/docs/themes&#34;&gt;Sublime Text&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/sublime&#34;&gt;sublime&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gnome-terminator.readthedocs.io/en/latest/config.html&#34;&gt;Terminator&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/terminator&#34;&gt;terminator&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gnunn1/tilix&#34;&gt;Tilix&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/tilix&#34;&gt;tilix&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tmux/tmux/wiki&#34;&gt;Tmux&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/tmux&#34;&gt;tmux&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wezfurlong.org/wezterm/config/files.html&#34;&gt;WezTerm&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/wezterm&#34;&gt;wezterm&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/terminal-documentation&#34;&gt;Windows Terminal&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/windows_terminal&#34;&gt;windows_terminal&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.xfce.org/apps/terminal/advanced&#34;&gt;Xfce Terminal&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/xfceterm&#34;&gt;xfceterm&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/X_resources&#34;&gt;Xresources&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/xresources&#34;&gt;xresources&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sxyazi/yazi&#34;&gt;Yazi&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/yazi&#34;&gt;yazi&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pwmt.org/projects/zathura/&#34;&gt;Zathura&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/zathura&#34;&gt;zathura&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zellij.dev/&#34;&gt;Zellij&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/zellij&#34;&gt;zellij&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- extras:end --&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; &amp;gt;= &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.8.0&#34;&gt;0.8.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the theme with your preferred package manager, such as &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;folke/lazy.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;folke/tokyonight.nvim&#34;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  opts = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Vim Script&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;colorscheme tokyonight&#xA;&#xA;&#34; There are also colorschemes for the different styles.&#xA;colorscheme tokyonight-night&#xA;colorscheme tokyonight-storm&#xA;colorscheme tokyonight-day&#xA;colorscheme tokyonight-moon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.lua.org&#34;&gt;Lua&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd[[colorscheme tokyonight]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;External Plugins&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://github.com/utilyre/barbecue.nvim&#34;&gt;Barbecue&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#39;barbecue&#39;).setup {&#xA;  -- ... your barbecue config&#xA;  theme = &#39;tokyonight&#39;,&#xA;  -- ... your barbecue config&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    -- ... your lualine config&#xA;    theme = &#39;tokyonight&#39;&#xA;    -- ... your lualine config&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;Lightline&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;let g:lightline = {&#39;colorscheme&#39;: &#39;tokyonight&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ùóÔ∏è Set the configuration &lt;strong&gt;BEFORE&lt;/strong&gt; loading the color scheme with &lt;code&gt;colorscheme tokyonight&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The theme offers four styles: &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#storm&#34;&gt;storm&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#moon&#34;&gt;moon&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#night&#34;&gt;night&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#day&#34;&gt;day&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#day&#34;&gt;day&lt;/a&gt; style is used when &lt;code&gt;{ style = &#34;day&#34; }&lt;/code&gt; is passed to &lt;code&gt;setup(options)&lt;/code&gt; or when &lt;code&gt;vim.o.background = &#34;light&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/folke/tokyonight.nvim&#34;&gt;TokyoNight&lt;/a&gt; uses the default options, unless &lt;code&gt;setup&lt;/code&gt; is explicitly called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;tokyonight&#34;).setup({&#xA;  -- your configuration comes here&#xA;  -- or leave it empty to use the default settings&#xA;  style = &#34;storm&#34;, -- The theme comes in three styles, `storm`, `moon`, a darker variant `night` and `day`&#xA;  light_style = &#34;day&#34;, -- The theme is used when the background is set to light&#xA;  transparent = false, -- Enable this to disable setting the background color&#xA;  terminal_colors = true, -- Configure the colors used when opening a `:terminal` in [Neovim](https://github.com/neovim/neovim)&#xA;  styles = {&#xA;    -- Style to be applied to different syntax groups&#xA;    -- Value is any valid attr-list value for `:help nvim_set_hl`&#xA;    comments = { italic = true },&#xA;    keywords = { italic = true },&#xA;    functions = {},&#xA;    variables = {},&#xA;    -- Background styles. Can be &#34;dark&#34;, &#34;transparent&#34; or &#34;normal&#34;&#xA;    sidebars = &#34;dark&#34;, -- style for sidebars, see below&#xA;    floats = &#34;dark&#34;, -- style for floating windows&#xA;  },&#xA;  sidebars = { &#34;qf&#34;, &#34;help&#34; }, -- Set a darker background on sidebar-like windows. For example: `[&#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34;]`&#xA;  day_brightness = 0.3, -- Adjusts the brightness of the colors of the **Day** style. Number between 0 and 1, from dull to vibrant colors&#xA;  hide_inactive_statusline = false, -- Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard **StatusLine** and **LuaLine**.&#xA;  dim_inactive = false, -- dims inactive windows&#xA;  lualine_bold = false, -- When `true`, section headers in the lualine theme will be bold&#xA;&#xA;  --- You can override specific color groups to use other groups or a hex color&#xA;  --- function will be called with a ColorScheme table&#xA;  ---@param colors ColorScheme&#xA;  on_colors = function(colors) end,&#xA;&#xA;  --- You can override specific highlights to use other groups or a hex color&#xA;  --- function will be called with a Highlights and ColorScheme table&#xA;  ---@param highlights Highlights&#xA;  ---@param colors ColorScheme&#xA;  on_highlights = function(highlights, colors) end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ü™ì Overriding Colors &amp;amp; Highlight Groups&lt;/h2&gt; &#xA;&lt;p&gt;How the highlight groups are calculated:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;colors&lt;/code&gt; are determined based on your configuration, with the ability to override them using &lt;code&gt;config.on_colors(colors)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;These &lt;code&gt;colors&lt;/code&gt; are utilized to generate the highlight groups.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config.on_highlights(highlights, colors)&lt;/code&gt; can be used to override highlight groups.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For default values of &lt;code&gt;colors&lt;/code&gt; and &lt;code&gt;highlights&lt;/code&gt;, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_storm.lua&#34;&gt;storm&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_moon.lua&#34;&gt;moon&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_night.lua&#34;&gt;night&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_day.lua&#34;&gt;day&lt;/a&gt; themes.&lt;/p&gt; &#xA;&lt;h3&gt;Settings and color alteration demonstration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;tokyonight&#34;).setup({&#xA;  -- use the night style&#xA;  style = &#34;night&#34;,&#xA;  -- disable italic for functions&#xA;  styles = {&#xA;    functions = {}&#xA;  },&#xA;  sidebars = { &#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34; },&#xA;  -- Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;  on_colors = function(colors)&#xA;    colors.hint = colors.orange&#xA;    colors.error = &#34;#ff0000&#34;&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Gallery#borderless&#34;&gt;Borderless Telescope&lt;/a&gt; example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;tokyonight&#34;).setup({&#xA;  on_highlights = function(hl, c)&#xA;    local prompt = &#34;#2d3149&#34;&#xA;    hl.TelescopeNormal = {&#xA;      bg = c.bg_dark,&#xA;      fg = c.fg_dark,&#xA;    }&#xA;    hl.TelescopeBorder = {&#xA;      bg = c.bg_dark,&#xA;      fg = c.bg_dark,&#xA;    }&#xA;    hl.TelescopePromptNormal = {&#xA;      bg = prompt,&#xA;    }&#xA;    hl.TelescopePromptBorder = {&#xA;      bg = prompt,&#xA;      fg = prompt,&#xA;    }&#xA;    hl.TelescopePromptTitle = {&#xA;      bg = prompt,&#xA;      fg = prompt,&#xA;    }&#xA;    hl.TelescopePreviewTitle = {&#xA;      bg = c.bg_dark,&#xA;      fg = c.bg_dark,&#xA;    }&#xA;    hl.TelescopeResultsTitle = {&#xA;      bg = c.bg_dark,&#xA;      fg = c.bg_dark,&#xA;    }&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fix &lt;code&gt;undercurls&lt;/code&gt; in &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;Tmux&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To have undercurls show up and in color, add the following to your &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;Tmux&lt;/a&gt; configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Undercurl&#xA;set -g default-terminal &#34;${TERM}&#34;&#xA;set -as terminal-overrides &#39;,*:Smulx=\E[4::%p1%dm&#39;  # undercurl support&#xA;set -as terminal-overrides &#39;,*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&amp;amp;%d::%p1%{255}%&amp;amp;%d%;m&#39;  # underscore colours - needs tmux-3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üç≠ Extras&lt;/h2&gt; &#xA;&lt;p&gt;Extra color configs for &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf.html&#34;&gt;Kitty&lt;/a&gt;, &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;Alacritty&lt;/a&gt;, &lt;a href=&#34;https://fishshell.com/docs/current/index.html&#34;&gt;Fish&lt;/a&gt;, &lt;a href=&#34;https://wezfurlong.org/wezterm/config/files.html&#34;&gt;WezTerm&lt;/a&gt;, &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm&lt;/a&gt; and &lt;a href=&#34;https://codeberg.org/dnkl/foot&#34;&gt;foot&lt;/a&gt; can be found in &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/&#34;&gt;extras&lt;/a&gt;. To use them, refer to their respective documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115395546-d8d6f880-a198-11eb-98fb-a1194787701d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can easily use the color palette for other plugins inside your &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local colors = require(&#34;tokyonight.colors&#34;).setup() -- pass in any of the config options as explained above&#xA;local util = require(&#34;tokyonight.util&#34;)&#xA;&#xA;aplugin.background = colors.bg_dark&#xA;aplugin.my_error = util.lighten(colors.red1, 0.3) -- number between 0 and 1. 0 results in white, 1 results in red1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üî• Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome.&lt;/p&gt; &#xA;&lt;p&gt;For the &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&#34;&gt;extras&lt;/a&gt;, we use a simple template system that can be used to generate themes for the different styles.&lt;/p&gt; &#xA;&lt;p&gt;How to add a new extra template:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a file like &lt;code&gt;lua/tokyonight/extra/cool-app.lua&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the name and output file extension to the &lt;code&gt;extras&lt;/code&gt; table in &lt;code&gt;lua/tokyonight/extra/init.lua&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the following command to generate new &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&#34;&gt;extra&lt;/a&gt; themes from the tokyonight plugin directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvim --headless &#34;+lua require(&#39;tokyonight.extra&#39;).setup()&#34; +qa&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check the newly created themes in the &lt;code&gt;extra/&lt;/code&gt; directory. Please &lt;strong&gt;DO NOT&lt;/strong&gt; commit them, as they are already automatically built by the CI.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>koreader/koreader</title>
    <updated>2024-06-01T01:47:06Z</updated>
    <id>tag:github.com,2024-06-01:/koreader/koreader</id>
    <link href="https://github.com/koreader/koreader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An ebook reader application supporting PDF, DjVu, EPUB, FB2 and many more formats, running on Cervantes, Kindle, Kobo, PocketBook and Android devices&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://koreader.rocks&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koreader/koreader.github.io/master/koreader-logo.png&#34; alt=&#34;KOReader&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;KOReader is a document viewer primarily aimed at e-ink readers.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koreader/koreader/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/koreader/koreader&#34; alt=&#34;AGPL Licence&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/koreader/koreader/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/koreader/koreader.svg?sanitize=true&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/koreader/koreader&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/koreader/koreader?color=red&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.mobileread.com/forums/forumdisplay.php?f=276&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/forum-on_mobileread-lightgrey&#34; alt=&#34;Mobileread&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/koreader/koreader&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/koreader/koreader.svg?style=shield&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/koreader/koreader&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/koreader/koreader/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hosted.weblate.org/engage/koreader/?utm_source=widget&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/koreader/-/koreader/svg-badge.svg?sanitize=true&#34; alt=&#34;Weblate Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koreader/koreader/releases&#34;&gt;Download&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;http://koreader.rocks/user_guide/&#34;&gt;User guide&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/koreader/koreader/wiki&#34;&gt;Wiki&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;http://koreader.rocks/doc/&#34;&gt;Developer docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;portable&lt;/strong&gt;: runs on embedded devices (Cervantes, Kindle, Kobo, PocketBook, reMarkable), Android and Linux computers. Developers can run a KOReader emulator in Linux and MacOS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;multi-format documents&lt;/strong&gt;: supports fixed page formats (PDF, DjVu, CBT, CBZ) and reflowable e-book formats (EPUB, FB2, Mobi, DOC, RTF, HTML, CHM, TXT). Scanned PDF/DjVu documents can also be reflowed with the built-in K2pdfopt library. &lt;a href=&#34;https://github.com/koreader/koreader/wiki/ZIP&#34;&gt;ZIP files&lt;/a&gt; are also supported for some formats.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;full-featured reading&lt;/strong&gt;: multi-lingual user interface with a highly customizable reader view and many typesetting options. You can set arbitrary page margins, override line spacing and choose external fonts and styles. It has multi-lingual hyphenation dictionaries bundled into the application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;integrated&lt;/strong&gt; with &lt;em&gt;calibre&lt;/em&gt; (search metadata, receive ebooks wirelessly, browse library via OPDS), &lt;em&gt;Wallabag&lt;/em&gt;, &lt;em&gt;Wikipedia&lt;/em&gt;, &lt;em&gt;Google Translate&lt;/em&gt; and other content providers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;optimized for e-ink devices&lt;/strong&gt;: custom UI without animation, with paginated menus, adjustable text contrast, and easy zoom to fit content or page in paged media.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;extensible&lt;/strong&gt;: via plugins&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;fast&lt;/strong&gt;: on some older devices, it has been measured to have less than half the page-turn delay as the built in reading software.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;and much more&lt;/strong&gt;: look up words with StarDict dictionaries / Wikipedia, add your own online OPDS catalogs and RSS feeds, over-the-air software updates, an FTP client, an SSH server, ‚Ä¶&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;http://koreader.rocks/user_guide/&#34;&gt;user guide&lt;/a&gt; and the &lt;a href=&#34;https://github.com/koreader/koreader/wiki&#34;&gt;wiki&lt;/a&gt; to discover more features and to help us document them.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-menu.png&#34;&gt;&lt;img src=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-menu-thumbnail.png&#34; alt=&#34;&#34; width=&#34;200px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-footnotes.png&#34;&gt;&lt;img src=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-footnotes-thumbnail.png&#34; alt=&#34;&#34; width=&#34;200px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-dictionary.png&#34;&gt;&lt;img src=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-dictionary-thumbnail.png&#34; alt=&#34;&#34; width=&#34;200px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the model specific steps for your device:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-Android-devices&#34;&gt;Android&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-BQ-devices&#34;&gt;Cervantes&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-Kindle-devices&#34;&gt;Kindle&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-Kobo-devices&#34;&gt;Kobo&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-desktop-linux&#34;&gt;Linux&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-PocketBook-devices&#34;&gt;Pocketbook&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-Remarkable&#34;&gt;reMarkable&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koreader/koreader/master/doc/Building.md&#34;&gt;Setting up a build environment&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/koreader/koreader/master/doc/Collaborating_with_Git.md&#34;&gt;Collaborating with Git&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/koreader/koreader/master/doc/Building_targets.md&#34;&gt;Building targets&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/koreader/koreader/master/doc/Porting.md&#34;&gt;Porting&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;http://koreader.rocks/doc/&#34;&gt;Developer docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;KOReader is developed and supported by volunteers all around the world. There are many ways you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koreader/koreader/issues?q=is%3Aopen+is%3Aissue+label%3Abug&#34;&gt;fix bugs&lt;/a&gt; and &lt;a href=&#34;https://github.com/koreader/koreader/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement&#34;&gt;implement new features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hosted.weblate.org/engage/koreader/?utm_source=widget&#34;&gt;translate the program into your language&lt;/a&gt; or improve an existing translation&lt;/li&gt; &#xA; &lt;li&gt;document lesser-known features on the &lt;a href=&#34;https://github.com/koreader/koreader/wiki&#34;&gt;wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;help others with your knowledge on the &lt;a href=&#34;http://www.mobileread.com/forums/forumdisplay.php?f=276&#34;&gt;forum&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Right now we only support &lt;a href=&#34;https://liberapay.com/KOReader&#34;&gt;liberapay&lt;/a&gt; donations.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koreader/koreader/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/koreader/koreader?color=orange&#34; alt=&#34;Last commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/koreader/koreader/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/koreader/koreader&#34; alt=&#34;Commit activity&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MeanderingProgrammer/markdown.nvim</title>
    <updated>2024-06-01T01:47:06Z</updated>
    <id>tag:github.com,2024-06-01:/MeanderingProgrammer/markdown.nvim</id>
    <link href="https://github.com/MeanderingProgrammer/markdown.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Plugin to improve viewing Markdown files in Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;markdown.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Plugin to improve viewing Markdown files in Neovim&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MeanderingProgrammer/markdown.nvim/main/demo/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functions entirely inside of Neovim with no external windows&lt;/li&gt; &#xA; &lt;li&gt;Changes between &lt;code&gt;rendered&lt;/code&gt; view in normal mode and &lt;code&gt;raw&lt;/code&gt; view in all other modes&lt;/li&gt; &#xA; &lt;li&gt;Changes &lt;code&gt;conceallevel&lt;/code&gt; between &lt;code&gt;rendered&lt;/code&gt; and &lt;code&gt;raw&lt;/code&gt; view based on configuration&lt;/li&gt; &#xA; &lt;li&gt;Supports rendering &lt;code&gt;markdown&lt;/code&gt; injected into other file types&lt;/li&gt; &#xA; &lt;li&gt;Highlights headings with different groups depending on level and replaces &lt;code&gt;#&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Updates horizontal breaks with full-width lines&lt;/li&gt; &#xA; &lt;li&gt;Highlights code blocks and inline code to better stand out&lt;/li&gt; &#xA; &lt;li&gt;Replaces bullet points with provided character based on level&lt;/li&gt; &#xA; &lt;li&gt;Replaces checkboxes with provided characters based on whether they are checked&lt;/li&gt; &#xA; &lt;li&gt;Replaces block quote leading &lt;code&gt;&amp;gt;&lt;/code&gt; with provided character&lt;/li&gt; &#xA; &lt;li&gt;Updates table borders with better border characters, does NOT automatically align&lt;/li&gt; &#xA; &lt;li&gt;Basic support for &lt;code&gt;LaTeX&lt;/code&gt; if &lt;code&gt;pylatexenc&lt;/code&gt; is installed on system&lt;/li&gt; &#xA; &lt;li&gt;Disable rendering when file is larger than provided value&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://github.com/orgs/community/discussions/16925&#34;&gt;callouts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support custom handlers which are ran identically to native handlers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tree-sitter-grammars/tree-sitter-markdown&#34;&gt;markdown &amp;amp; markdown_inline&lt;/a&gt; parsers for &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;treesitter&lt;/a&gt;: Used to parse &lt;code&gt;markdown&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pylatexenc/&#34;&gt;pylatexenc&lt;/a&gt; (Optional): Used to transform &lt;code&gt;LaTeX&lt;/code&gt; strings to appropriate unicode using &lt;code&gt;latex2text&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;lazy.nvim&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;MeanderingProgrammer/markdown.nvim&#39;,&#xA;    name = &#39;render-markdown&#39;, -- Only needed if you have another plugin named markdown.nvim&#xA;    dependencies = { &#39;nvim-treesitter/nvim-treesitter&#39; },&#xA;    config = function()&#xA;        require(&#39;render-markdown&#39;).setup({})&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;packer.nvim&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;    &#39;MeanderingProgrammer/markdown.nvim&#39;,&#xA;    as = &#39;render-markdown&#39;, -- Only needed if you have another plugin named markdown.nvim&#xA;    after = { &#39;nvim-treesitter&#39; },&#xA;    config = function()&#xA;        require(&#39;render-markdown&#39;).setup({})&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;Below is the configuration that gets used by default, any part of it can be modified by the user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    -- Configure whether Markdown should be rendered by default or not&#xA;    start_enabled = true,&#xA;    -- Maximum file size (in MB) that this plugin will attempt to render&#xA;    -- Any file larger than this will effectively be ignored&#xA;    max_file_size = 1.5,&#xA;    -- Capture groups that get pulled from markdown&#xA;    markdown_query = [[&#xA;        (atx_heading [&#xA;            (atx_h1_marker)&#xA;            (atx_h2_marker)&#xA;            (atx_h3_marker)&#xA;            (atx_h4_marker)&#xA;            (atx_h5_marker)&#xA;            (atx_h6_marker)&#xA;        ] @heading)&#xA;&#xA;        (thematic_break) @dash&#xA;&#xA;        (fenced_code_block) @code&#xA;&#xA;        [&#xA;            (list_marker_plus)&#xA;            (list_marker_minus)&#xA;            (list_marker_star)&#xA;        ] @list_marker&#xA;&#xA;        (task_list_marker_unchecked) @checkbox_unchecked&#xA;        (task_list_marker_checked) @checkbox_checked&#xA;&#xA;        (block_quote (block_quote_marker) @quote_marker)&#xA;        (block_quote (paragraph (inline (block_continuation) @quote_marker)))&#xA;&#xA;        (pipe_table) @table&#xA;        (pipe_table_header) @table_head&#xA;        (pipe_table_delimiter_row) @table_delim&#xA;        (pipe_table_row) @table_row&#xA;    ]],&#xA;    -- Capture groups that get pulled from inline markdown&#xA;    inline_query = [[&#xA;        (code_span) @code&#xA;&#xA;        (shortcut_link) @callout&#xA;    ]],&#xA;    -- The level of logs to write to file: vim.fn.stdpath(&#39;state&#39;) .. &#39;/render-markdown.log&#39;&#xA;    -- Only intended to be used for plugin development / debugging&#xA;    log_level = &#39;error&#39;,&#xA;    -- Filetypes this plugin will run on&#xA;    file_types = { &#39;markdown&#39; },&#xA;    -- Vim modes that will show a rendered view of the markdown file&#xA;    -- All other modes will be uneffected by this plugin&#xA;    render_modes = { &#39;n&#39;, &#39;c&#39; },&#xA;    -- Characters that will replace the # at the start of headings&#xA;    headings = { &#39;Û∞≤° &#39;, &#39;Û∞≤£ &#39;, &#39;Û∞≤• &#39;, &#39;Û∞≤ß &#39;, &#39;Û∞≤© &#39;, &#39;Û∞≤´ &#39; },&#xA;    -- Character to use for the horizontal break&#xA;    dash = &#39;‚Äî&#39;,&#xA;    -- Character to use for the bullet points in lists&#xA;    bullets = { &#39;‚óè&#39;, &#39;‚óã&#39;, &#39;‚óÜ&#39;, &#39;‚óá&#39; },&#xA;    checkbox = {&#xA;        -- Character that will replace the [ ] in unchecked checkboxes&#xA;        unchecked = &#39;Û∞Ñ± &#39;,&#xA;        -- Character that will replace the [x] in checked checkboxes&#xA;        checked = &#39;Ôíß &#39;,&#xA;    },&#xA;    -- Character that will replace the &amp;gt; at the start of block quotes&#xA;    quote = &#39;‚îÉ&#39;,&#xA;    -- Symbol / text to use for different callouts&#xA;    callout = {&#xA;        note = &#39;Ôëâ  Note&#39;,&#xA;        tip = &#39;ÔêÄ  Tip&#39;,&#xA;        important = &#39;Û∞Öæ  Important&#39;,&#xA;        warning = &#39;Ó©¨  Warning&#39;,&#xA;        caution = &#39;Û∞≥¶  Caution&#39;,&#xA;    },&#xA;    -- Window options to use that change between rendered and raw view&#xA;    win_options = {&#xA;        -- See :h &#39;conceallevel&#39;&#xA;        conceallevel = {&#xA;            -- Used when not being rendered, get user setting&#xA;            default = vim.api.nvim_get_option_value(&#39;conceallevel&#39;, {}),&#xA;            -- Used when being rendered, concealed text is completely hidden&#xA;            rendered = 3,&#xA;        },&#xA;        -- See :h &#39;concealcursor&#39;&#xA;        concealcursor = {&#xA;            -- Used when not being rendered, get user setting&#xA;            default = vim.api.nvim_get_option_value(&#39;concealcursor&#39;, {}),&#xA;            -- Used when being rendered, conceal text in all modes&#xA;            rendered = &#39;nvic&#39;,&#xA;        },&#xA;    },&#xA;    -- Determines how tables are rendered&#xA;    --  full: adds a line above and below tables + normal behavior&#xA;    --  normal: renders the rows of tables&#xA;    --  none: disables rendering, use this if you prefer having cell highlights&#xA;    table_style = &#39;full&#39;,&#xA;    -- Mapping from treesitter language to user defined handlers&#xA;    -- See &#39;Custom Handlers&#39; section for more info&#xA;    custom_handlers = {},&#xA;    -- Define the highlight groups to use when rendering various components&#xA;    highlights = {&#xA;        heading = {&#xA;            -- Background of heading line&#xA;            backgrounds = { &#39;DiffAdd&#39;, &#39;DiffChange&#39;, &#39;DiffDelete&#39; },&#xA;            -- Foreground of heading character only&#xA;            foregrounds = {&#xA;                &#39;markdownH1&#39;,&#xA;                &#39;markdownH2&#39;,&#xA;                &#39;markdownH3&#39;,&#xA;                &#39;markdownH4&#39;,&#xA;                &#39;markdownH5&#39;,&#xA;                &#39;markdownH6&#39;,&#xA;            },&#xA;        },&#xA;        -- Horizontal break&#xA;        dash = &#39;LineNr&#39;,&#xA;        -- Code blocks&#xA;        code = &#39;ColorColumn&#39;,&#xA;        -- Bullet points in list&#xA;        bullet = &#39;Normal&#39;,&#xA;        checkbox = {&#xA;            -- Unchecked checkboxes&#xA;            unchecked = &#39;@markup.list.unchecked&#39;,&#xA;            -- Checked checkboxes&#xA;            checked = &#39;@markup.heading&#39;,&#xA;        },&#xA;        table = {&#xA;            -- Header of a markdown table&#xA;            head = &#39;@markup.heading&#39;,&#xA;            -- Non header rows in a markdown table&#xA;            row = &#39;Normal&#39;,&#xA;        },&#xA;        -- LaTeX blocks&#xA;        latex = &#39;@markup.math&#39;,&#xA;        -- Quote character in a block quote&#xA;        quote = &#39;@markup.quote&#39;,&#xA;        -- Highlights to use for different callouts&#xA;        callout = {&#xA;            note = &#39;DiagnosticInfo&#39;,&#xA;            tip = &#39;DiagnosticOk&#39;,&#xA;            important = &#39;DiagnosticHint&#39;,&#xA;            warning = &#39;DiagnosticWarn&#39;,&#xA;            caution = &#39;DiagnosticError&#39;,&#xA;        },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;:RenderMarkdownToggle&lt;/code&gt; - Switch between enabling &amp;amp; disabling this plugin&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Function can also be accessed directly through &lt;code&gt;require(&#39;render-markdown&#39;).toggle()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Custom Handlers&lt;/h1&gt; &#xA;&lt;p&gt;Custom handlers allow users to integrate custom rendering for either unsupported languages or to override the native implementations. This can also be used to disable a native language, as custom handlers have priority.&lt;/p&gt; &#xA;&lt;p&gt;For example disabling the &lt;code&gt;LaTeX&lt;/code&gt; handler can be done with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    custom_handlers = {&#xA;        latex = { render = function() end },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each handler must conform to the following interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---@class render.md.Handler&#xA;---@field public render fun(namespace: integer, root: TSNode, buf: integer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;render&lt;/code&gt; function parameters are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt;: The id that this plugin interacts with when setting and clearing &lt;code&gt;extmark&lt;/code&gt;s&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;root&lt;/code&gt;: The root treesitter node for the specified language&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buf&lt;/code&gt;: The buffer containing the root node&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Custom handlers are ran identically to native ones, so by writing custom &lt;code&gt;extmark&lt;/code&gt;s (see :h nvim_buf_set_extmark()) to the provided &lt;code&gt;namespace&lt;/code&gt; this plugin will handle clearing the &lt;code&gt;extmark&lt;/code&gt;s on mode changes as well as re-calling the &lt;code&gt;render&lt;/code&gt; function when needed.&lt;/p&gt; &#xA;&lt;p&gt;This is a high level interface, as such creating, parsing, and iterating through a treesitter query is entirely up to the user if the functionality they want needs this. We do not provide any convenience functions, but you are more than welcome to use patterns from the native handlers.&lt;/p&gt; &#xA;&lt;h2&gt;More Complex Example&lt;/h2&gt; &#xA;&lt;p&gt;Lets say for &lt;code&gt;python&lt;/code&gt; we want to highlight lines with function definitions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Parse query outside of the render function to avoid doing it for each call&#xA;local query = vim.treesitter.query.parse(&#39;python&#39;, &#39;(function_definition) @def&#39;)&#xA;local function render_python(namespace, root, buf)&#xA;    for id, node in query:iter_captures(root, buf) do&#xA;        local capture = query.captures[id]&#xA;        local start_row, _, _, _ = node:range()&#xA;        if capture == &#39;def&#39; then&#xA;            vim.api.nvim_buf_set_extmark(buf, namespace, start_row, 0, {&#xA;                end_row = start_row + 1,&#xA;                end_col = 0,&#xA;                hl_group = &#39;DiffDelete&#39;,&#xA;                hl_eol = true,&#xA;            })&#xA;        end&#xA;    end&#xA;end&#xA;require(&#39;render-markdown&#39;).setup({&#xA;    custom_handlers = {&#xA;        python = { render = render_python },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Purpose&lt;/h1&gt; &#xA;&lt;p&gt;There are many existing markdown rendering plugins in the Neovim ecosystem. However, most of these rely on syncing a separate browser window with the buffer. This is the correct way to do things to get full feature support, however I wanted something that worked completely inside of Neovim and made things look slightly &#34;nicer&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The closest one I found to this was &lt;a href=&#34;https://github.com/lukas-reineke/headlines.nvim&#34;&gt;headlines.nvim&lt;/a&gt;, which is an awesome plugin that I took several ideas from. However it just didn&#39;t have quite what I was looking for. In particular I wanted something that would disappear completely when editing a file and quickly render some style when viewing the file. Hence this plugin.&lt;/p&gt; &#xA;&lt;h1&gt;Markdown Ecosystem&lt;/h1&gt; &#xA;&lt;p&gt;There are many &lt;code&gt;markdown&lt;/code&gt; plugins that specialize in different aspects of interacting with &lt;code&gt;markdown&lt;/code&gt; files. This plugin specializes in rendering the buffer inside of Neovim, for instance. As a result some plugins will clash with this one, whereas other plugins handle orthogonal concerns and can be used in addition to this one. Below is a categorized (incomplete) list of available plugins.&lt;/p&gt; &#xA;&lt;h2&gt;Render in Neovim&lt;/h2&gt; &#xA;&lt;p&gt;Using any of these plugins with this one will likely lead to undesired behavior as different functionality will clash.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/headlines.nvim&#34;&gt;headlines.nvim&lt;/a&gt; - Same high level idea and starting point of this plugin, but with different feature sets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Render in Browser&lt;/h2&gt; &#xA;&lt;p&gt;These can be used as a second pass to get a real preview of the &lt;code&gt;markdown&lt;/code&gt; file. Since they do not interact with the buffer directly there should be no issues.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iamcco/markdown-preview.nvim&#34;&gt;markdown-preview.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/euclio/vim-markdown-composer&#34;&gt;vim-markdown-composer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Orthogonal&lt;/h2&gt; &#xA;&lt;p&gt;These plugins handle functions completely separate from rendering and should also have no issues running alongside this plugin.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any LSP which provides standard LSP capabilities, such as: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/artempyanykh/marksman&#34;&gt;marksman&lt;/a&gt; - General completion, definition, and reference functionality&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Feel-ix-343/markdown-oxide&#34;&gt;markdown-oxide&lt;/a&gt; - Adds Obsidian PKM features to LSP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tadmccorkle/markdown.nvim&#34;&gt;markdown.nvim&lt;/a&gt; - Adds &lt;code&gt;markdown&lt;/code&gt; specific keybindings for interacting with &lt;code&gt;markdown&lt;/code&gt; files&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>