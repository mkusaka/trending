<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-01T01:50:33Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>supermaven-inc/supermaven-nvim</title>
    <updated>2024-10-01T01:50:33Z</updated>
    <id>tag:github.com,2024-10-01:/supermaven-inc/supermaven-nvim</id>
    <link href="https://github.com/supermaven-inc/supermaven-nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Neovim plugin for Supermaven&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Supermaven Neovim Plugin&lt;/h1&gt; &#xA;&lt;p&gt;This plugin, supermaven-nvim, lets you use &lt;a href=&#34;https://supermaven.com/&#34;&gt;Supermaven&lt;/a&gt; in Neovim. If you encounter any issues while using supermaven-nvim, consider opening an issue or reaching out to us on &lt;a href=&#34;https://discord.com/invite/QQpqBmQH3w&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using a plugin manager, run the .setup({}) function in your Neovim configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup({&#xA;    {&#xA;      &#34;supermaven-inc/supermaven-nvim&#34;,&#xA;      config = function()&#xA;        require(&#34;supermaven-nvim&#34;).setup({})&#xA;      end,&#xA;    },&#xA;}, {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;supermaven-inc/supermaven-nvim&#34;,&#xA;  config = function()&#xA;    require(&#34;supermaven-nvim&#34;).setup({})&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional configuration&lt;/h3&gt; &#xA;&lt;p&gt;By default, supermaven-nvim will use the &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;C-]&amp;gt;&lt;/code&gt; keymaps to accept and clear suggestions. You can change these keymaps by passing a &lt;code&gt;keymaps&lt;/code&gt; table to the .setup({}) function. Also in this table is &lt;code&gt;accept_word&lt;/code&gt;, which allows partially accepting a completion, up to the end of the next word. By default this keymap is set to &lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;ignore_filetypes&lt;/code&gt; table is used to ignore filetypes when using supermaven-nvim. If a filetype is present as a key, and its value is &lt;code&gt;true&lt;/code&gt;, supermaven-nvim will not display suggestions for that filetype.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;suggestion_color&lt;/code&gt; and &lt;code&gt;cterm&lt;/code&gt; options can be used to set the color of the suggestion text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;supermaven-nvim&#34;).setup({&#xA;  keymaps = {&#xA;    accept_suggestion = &#34;&amp;lt;Tab&amp;gt;&#34;,&#xA;    clear_suggestion = &#34;&amp;lt;C-]&amp;gt;&#34;,&#xA;    accept_word = &#34;&amp;lt;C-j&amp;gt;&#34;,&#xA;  },&#xA;  ignore_filetypes = { cpp = true }, -- or { &#34;cpp&#34;, }&#xA;  color = {&#xA;    suggestion_color = &#34;#ffffff&#34;,&#xA;    cterm = 244,&#xA;  },&#xA;  log_level = &#34;info&#34;, -- set to &#34;off&#34; to disable logging completely&#xA;  disable_inline_completion = false, -- disables inline completion for use with cmp&#xA;  disable_keymaps = false, -- disables built in keymaps for more manual control&#xA;  condition = function()&#xA;    return false&#xA;  end -- condition to check for stopping supermaven, `true` means to stop supermaven when the condition is true.&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disabling supermaven-nvim conditionally&lt;/h3&gt; &#xA;&lt;p&gt;By default, supermaven-nvim will always run unless &lt;code&gt;condition&lt;/code&gt; function returns true or current filetype is in &lt;code&gt;ignore_filetypes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can disable supermaven-nvim conditionally by setting &lt;code&gt;condition&lt;/code&gt; function to return true.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;supermaven-nvim&#34;).setup({&#xA;  condition = function()&#xA;    return string.match(vim.fn.expand(&#34;%:t&#34;), &#34;foo.sh&#34;)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will disable supermaven-nvim for files with the name &lt;code&gt;foo.sh&lt;/code&gt; in it, e.g. &lt;code&gt;myscriptfoo.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using with nvim-cmp&lt;/h3&gt; &#xA;&lt;p&gt;If you are using nvim-cmp, you can use the &lt;code&gt;supermaven&lt;/code&gt; source (which is registered by default) by adding the following to your &lt;code&gt;cmp.setup()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- cmp.lua&#xA;cmp.setup {&#xA;  ...&#xA;  sources = {&#xA;    { name = &#34;supermaven&#34; },&#xA;  }&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also has a builtin highlight group CmpItemKindSupermaven. To add an icon to Supermaven for lspkind, simply add Supermaven to your lspkind symbol map.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lspkind.lua&#xA;local lspkind = require(&#34;lspkind&#34;)&#xA;lspkind.init({&#xA;  symbol_map = {&#xA;    Supermaven = &#34;&#34;,&#xA;  },&#xA;})&#xA;&#xA;vim.api.nvim_set_hl(0, &#34;CmpItemKindSupermaven&#34;, {fg =&#34;#6CC644&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can add Supermaven to the lspkind symbol_map within the cmp format function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- cmp.lua&#xA;cmp.setup {&#xA;  ...&#xA;  formatting = {&#xA;    format = lspkind.cmp_format({&#xA;      mode = &#34;symbol&#34;,&#xA;      max_width = 50,&#xA;      symbol_map = { Supermaven = &#34;&#34; }&#xA;    })&#xA;  }&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Programmatically checking and accepting suggestions&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can also check if there is an active suggestion and accept it programmatically.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;supermaven-nvim&#34;).setup({&#xA;  disable_keymaps = true&#xA;})&#xA;&#xA;...&#xA;&#xA;M.expand = function(fallback)&#xA;  local luasnip = require(&#39;luasnip&#39;)&#xA;  local suggestion = require(&#39;supermaven-nvim.completion_preview&#39;)&#xA;&#xA;  if luasnip.expandable() then&#xA;    luasnip.expand()&#xA;  elseif suggestion.has_suggestion() then&#xA;    suggestion.on_accept_suggestion()&#xA;  else&#xA;    fallback()&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Upon starting supermaven-nvim, you will be prompted to either use the Free Tier with the command &lt;code&gt;:SupermavenUseFree&lt;/code&gt; or to activate a Supermaven Pro subscription by following a link, which will connect your Supermaven account.&lt;/p&gt; &#xA;&lt;p&gt;If Supermaven is set up, you can use &lt;code&gt;:SupermavenLogout&lt;/code&gt; to switch versions.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;:SupermavenShowLog&lt;/code&gt; to view the logged messages in &lt;code&gt;path/to/stdpath-cache/supermaven-nvim.log&lt;/code&gt; if you encounter any issues. Or &lt;code&gt;:SupermavenClearLog&lt;/code&gt; to clear the log file.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;Supermaven-nvim provides the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:SupermavenStart    start supermaven-nvim&#xA;:SupermavenStop     stop supermaven-nvim&#xA;:SupermavenRestart  restart supermaven-nvim&#xA;:SupermavenToggle   toggle supermaven-nvim&#xA;:SupermavenStatus   show status of supermaven-nvim&#xA;:SupermavenUseFree  switch to the free version&#xA;:SupermavenUsePro   switch to the pro version&#xA;:SupermavenLogout   log out of supermaven&#xA;:SupermavenShowLog  show logs for supermaven-nvim&#xA;:SupermavenClearLog clear logs for supermaven-nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lua API&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;supermaven-nvim.api&lt;/code&gt; module provides the following functions for interacting with supermaven-nvim from Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local api = require(&#34;supermaven-nvim.api&#34;)&#xA;&#xA;api.start() -- starts supermaven-nvim&#xA;api.stop() -- stops supermaven-nvim&#xA;api.restart() -- restarts supermaven-nvim if it is running, otherwise starts it&#xA;api.toggle() -- toggles supermaven-nvim&#xA;api.is_running() -- returns true if supermaven-nvim is running&#xA;api.use_free_version() -- switch to the free version&#xA;api.use_pro() -- switch to the pro version&#xA;api.logout() -- log out of supermaven&#xA;api.show_log() -- show logs for supermaven-nvim&#xA;api.clear_log() -- clear logs for supermaven-nvim&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>rcarriga/nvim-notify</title>
    <updated>2024-10-01T01:50:33Z</updated>
    <id>tag:github.com,2024-10-01:/rcarriga/nvim-notify</id>
    <link href="https://github.com/rcarriga/nvim-notify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fancy, configurable, notification manager for NeoVim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-notify&lt;/h1&gt; &#xA;&lt;p&gt;A fancy, configurable, notification manager for NeoVim&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130856848-e8289850-028f-4f49-82f1-5ea1b8912f5e.gif&#34; alt=&#34;notify&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Credit to &lt;a href=&#34;https://github.com/sunjon&#34;&gt;sunjon&lt;/a&gt; for &lt;a href=&#34;https://neovim.discourse.group/t/wip-animated-notifications-plugin/448&#34;&gt;the design&lt;/a&gt; that inspired the appearance of this plugin.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#Installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#viewing-history&#34;&gt;Viewing History&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#highlights&#34;&gt;Highlights&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#render-style&#34;&gt;Render Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#animation-style&#34;&gt;Animation Style&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#opening-the-window&#34;&gt;Opening the window&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#changing-the-window&#34;&gt;Changing the window&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Make sure to use a font which supported glyphs (icons), font can be found &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;24-bit colour is required, which can be enabled by adding this to your init.lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.termguicolors = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can install nvim-notify with the package manager of your choice.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;&lt;strong&gt;dein&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#34;rcarriga/nvim-notify&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;strong&gt;vim-plug&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;rcarriga/nvim-notify&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;strong&gt;packer&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;rcarriga/nvim-notify&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply call the module with a message!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;notify&#34;)(&#34;My super important message&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other plugins can use the notification windows by setting it as your default notify function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify = require(&#34;notify&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can supply a level to change the border highlighting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify(&#34;This is an error message&#34;, &#34;error&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Updating an existing notification is also possible!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/152641078-92f3da72-f49f-4705-aec8-86512693445f.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use treesitter highlighting inside notifications with opacity changing&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/165042795-565878a3-9c6d-4c0b-ab0d-6858515835c5.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are a number of custom options that can be supplied in a table as the third argument. See &lt;code&gt;:h NotifyOptions&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Sample code for the first GIF above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local plugin = &#34;My Awesome Plugin&#34;&#xA;&#xA;vim.notify(&#34;This is an error message.\nSomething went wrong!&#34;, &#34;error&#34;, {&#xA;  title = plugin,&#xA;  on_open = function()&#xA;    vim.notify(&#34;Attempting recovery.&#34;, vim.log.levels.WARN, {&#xA;      title = plugin,&#xA;    })&#xA;    local timer = vim.loop.new_timer()&#xA;    timer:start(2000, 0, function()&#xA;      vim.notify({ &#34;Fixing problem.&#34;, &#34;Please wait...&#34; }, &#34;info&#34;, {&#xA;        title = plugin,&#xA;        timeout = 3000,&#xA;        on_close = function()&#xA;          vim.notify(&#34;Problem solved&#34;, nil, { title = plugin })&#xA;          vim.notify(&#34;Error code 0x0395AF&#34;, 1, { title = plugin })&#xA;        end,&#xA;      })&#xA;    end)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use plenary&#39;s async library to avoid using callbacks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local async = require(&#34;plenary.async&#34;)&#xA;local notify = require(&#34;notify&#34;).async&#xA;&#xA;async.run(function()&#xA;  notify(&#34;Let&#39;s wait for this to close&#34;).events.close()&#xA;  notify(&#34;It closed!&#34;)&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set a custom filetype to take advantage of treesitter highlighting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify(text, &#34;info&#34;, {&#xA;  title = &#34;My Awesome Plugin&#34;,&#xA;  on_open = function(win)&#xA;    local buf = vim.api.nvim_win_get_buf(win)&#xA;    vim.api.nvim_buf_set_option(buf, &#34;filetype&#34;, &#34;markdown&#34;)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the wiki for more examples!&lt;/p&gt; &#xA;&lt;h3&gt;Viewing History&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; installed then you can use the &lt;code&gt;notify&lt;/code&gt; extension to search the history:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope notify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).extensions.notify.notify(&amp;lt;opts&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you lazy load &lt;code&gt;telescope&lt;/code&gt; you should manually call &lt;code&gt;require(&#34;telescope&#34;).load_extension(&#34;notify&#34;)&lt;/code&gt; before using the above commands. If you don&#39;t lazy load &lt;code&gt;telescope&lt;/code&gt; then &lt;code&gt;notify&lt;/code&gt; does this for you.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/136264308-2fcdfe57-a8f6-4b34-8ea1-e3a8349bc581.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;There is a command to display a log of the history.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Notifications&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/136264653-83038119-634b-48e7-8e8a-0edf4546efe2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;You can get a list of past notifications with the history function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;notify&#34;).history()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;You can optionally call the &lt;code&gt;setup&lt;/code&gt; function to provide configuration options&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h notify.Config&lt;/code&gt; for options and &lt;code&gt;:h notify.setup()&lt;/code&gt; for default values.&lt;/p&gt; &#xA;&lt;h3&gt;Highlights&lt;/h3&gt; &#xA;&lt;p&gt;You can define custom highlights by supplying highlight groups for each of the levels. The naming scheme follows a simple structure: &lt;code&gt;Notify&amp;lt;upper case level name&amp;gt;&amp;lt;section&amp;gt;&lt;/code&gt;. If you want to use custom levels, you can define the highlights for them or they will follow the &lt;code&gt;INFO&lt;/code&gt; highlights by default.&lt;/p&gt; &#xA;&lt;p&gt;Here are the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;highlight NotifyERRORBorder guifg=#8A1F1F&#xA;highlight NotifyWARNBorder guifg=#79491D&#xA;highlight NotifyINFOBorder guifg=#4F6752&#xA;highlight NotifyDEBUGBorder guifg=#8B8B8B&#xA;highlight NotifyTRACEBorder guifg=#4F3552&#xA;highlight NotifyERRORIcon guifg=#F70067&#xA;highlight NotifyWARNIcon guifg=#F79000&#xA;highlight NotifyINFOIcon guifg=#A9FF68&#xA;highlight NotifyDEBUGIcon guifg=#8B8B8B&#xA;highlight NotifyTRACEIcon guifg=#D484FF&#xA;highlight NotifyERRORTitle  guifg=#F70067&#xA;highlight NotifyWARNTitle guifg=#F79000&#xA;highlight NotifyINFOTitle guifg=#A9FF68&#xA;highlight NotifyDEBUGTitle  guifg=#8B8B8B&#xA;highlight NotifyTRACETitle  guifg=#D484FF&#xA;highlight link NotifyERRORBody Normal&#xA;highlight link NotifyWARNBody Normal&#xA;highlight link NotifyINFOBody Normal&#xA;highlight link NotifyDEBUGBody Normal&#xA;highlight link NotifyTRACEBody Normal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Render Style&lt;/h3&gt; &#xA;&lt;p&gt;The appearance of the notifications can be configured, using either built-in methods or custom functions. See &lt;code&gt;:help notify-render()&lt;/code&gt; for details&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&#34;default&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/141534868-fdcc9d03-9f7b-47fd-acfc-5a20b98e4e0a.png&#34; alt=&#34;default&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&#34;minimal&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/141534952-bb0cf491-5bb4-473c-9a67-8adb5b23b232.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&#34;simple&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/191683325-220208a0-90bf-4daa-b375-01b573ca524c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&#34;compact&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/212632432-86621888-f885-4074-aed4-d12b5e291ab2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&#34;wrapped-compact&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Mostly same as &lt;code&gt;compact&lt;/code&gt;, but lines are wrapped based on &lt;code&gt;max_width&lt;/code&gt;, some padding is added.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/rcarriga/nvim-notify/assets/73286100/72237d45-6e3b-4c2a-8010-513a26871682&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&#34;wrapped-default&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;default&lt;/code&gt;, but lines are wrapped based on &lt;code&gt;max_width&lt;/code&gt;, some padding is added.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to submit custom rendering functions to share with others!&lt;/p&gt; &#xA;&lt;h3&gt;Animation Style&lt;/h3&gt; &#xA;&lt;p&gt;The animation is designed to work in stages. The first stage is the opening of the window, and all subsequent stages can changes the position or opacity of the window. You can use one of the built-in styles or provide your own in the setup.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&#34;fade_in_slide_out&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924913-f3a61f2c-2330-4426-a787-3cd7494fccc0.gif&#34; alt=&#34;fade_slide&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&#34;fade&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924911-a89bef9b-e815-4aa5-a255-84bc23dd8c8e.gif&#34; alt=&#34;fade&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&#34;slide&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924905-656cabfc-9eb7-4e22-b6da-8a2a1f508fa5.gif&#34; alt=&#34;slide&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&#34;static&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924902-8c77b5a1-6d13-48f4-98a9-866e58cb76e4.gif&#34; alt=&#34;static&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Custom styles can be provided by setting the config &lt;code&gt;stages&lt;/code&gt; value to a list of functions.&lt;/p&gt; &#xA;&lt;p&gt;If you create a custom style, feel free to open a PR to submit it as a built-in style!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB.&lt;/strong&gt; This is a prototype API that is open to change. I am looking for feedback on both issues or extra data that could be useful in creating animation styles.&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/lua/notify/stages/&#34;&gt;built-in styles&lt;/a&gt; to see examples&lt;/p&gt; &#xA;&lt;h4&gt;Opening the window&lt;/h4&gt; &#xA;&lt;p&gt;The first function in the list should return a table to be provided to &lt;code&gt;nvim_open_win&lt;/code&gt;, optionally including an extra &lt;code&gt;opacity&lt;/code&gt; key which can be between 0-100.&lt;/p&gt; &#xA;&lt;p&gt;The function is given a state table that contains the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;message: table&lt;/code&gt; State of the message to be shown &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;width&lt;/code&gt; Width of the message buffer&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;height&lt;/code&gt; Height of the message buffer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;open_windows: integer[]&lt;/code&gt; List of all window IDs currently showing messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buffer: integer&lt;/code&gt; The buffer containing the rendered notification message.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a notification can&#39;t be shown at the moment the function should return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Changing the window&lt;/h4&gt; &#xA;&lt;p&gt;All following functions should return the goal values for the window to reach from it&#39;s current point. They will receive the same state object as the initial function and a second argument of the window ID.&lt;/p&gt; &#xA;&lt;p&gt;The following fields can be returned in a table:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;row&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;height&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;width&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These can be provided as either numbers or as a table. If they are provided as numbers then they will change instantly the value given.&lt;/p&gt; &#xA;&lt;p&gt;If they are provided as a table, they will be treated as a value to animate towards. This uses a dampened spring algorithm to provide a natural feel to the movement.&lt;/p&gt; &#xA;&lt;p&gt;The table must contain the goal value as the 1st index (e.g. &lt;code&gt;{10}&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;All other values are provided with keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;damping: number&lt;/code&gt; How motion decays over time. Values less than 1 mean the spring can overshoot. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bounds: &amp;gt;= 0&lt;/li&gt; &#xA;   &lt;li&gt;Default: 1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;frequency: number&lt;/code&gt; How fast the spring oscillates &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bounds: &amp;gt;= 0&lt;/li&gt; &#xA;   &lt;li&gt;Default: 1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;complete: fun(value: number): bool&lt;/code&gt; Function to determine if value has reached its goal. If not provided it will complete when the value rounded to 2 decimal places is equal to the goal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once the last function has reached its goals, the window is removed.&lt;/p&gt; &#xA;&lt;p&gt;One of the stages should also return the key &lt;code&gt;time&lt;/code&gt; set to true. This is treated as the stage which the notification is on a timer. The goals of this stage are not used to check if it is complete. The next stage will start once the notification reaches its timeout.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kong/kong</title>
    <updated>2024-10-01T01:50:33Z</updated>
    <id>tag:github.com,2024-10-01:/Kong/kong</id>
    <link href="https://github.com/Kong/kong" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦍 The Cloud-Native API Gateway and AI Gateway.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://konghq.com/&#34;&gt;&lt;img src=&#34;https://konghq.com/wp-content/uploads/2018/05/kong-logo-github-readme.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Kong/kong?style=flat-square&#34; alt=&#34;Stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/Kong/kong?style=flat-square&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/_/kong?style=flat-square&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;a href=&#34;https://github.com/Kong/kong/actions&#34;&gt;&lt;img src=&#34;https://github.com/Kong/kong/workflows/Build%20&amp;amp;%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/Kong/kong?color=green&amp;amp;label=Version&amp;amp;style=flat-square&#34; alt=&#34;Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue?style=flat-square&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/thekonginc?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kong&lt;/strong&gt; or &lt;strong&gt;Kong API Gateway&lt;/strong&gt; is a cloud-native, platform-agnostic, scalable API Gateway distinguished for its high performance and extensibility via plugins. It also provides advanced AI capabilities with multi-LLM support.&lt;/p&gt; &#xA;&lt;p&gt;By providing functionality for proxying, routing, load balancing, health checking, authentication (and &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/#features&#34;&gt;more&lt;/a&gt;), Kong serves as the central layer for orchestrating microservices or conventional API traffic with ease.&lt;/p&gt; &#xA;&lt;p&gt;Kong runs natively on Kubernetes thanks to its official &lt;a href=&#34;https://github.com/Kong/kubernetes-ingress-controller&#34;&gt;Kubernetes Ingress Controller&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://konghq.com/install/#kong-community&#34;&gt;Installation&lt;/a&gt; | &lt;a href=&#34;https://docs.konghq.com&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://github.com/Kong/kong/discussions&#34;&gt;Discussions&lt;/a&gt; | &lt;a href=&#34;https://discuss.konghq.com&#34;&gt;Forum&lt;/a&gt; | &lt;a href=&#34;https://konghq.com/blog&#34;&gt;Blog&lt;/a&gt; | &lt;a href=&#34;https://hub.docker.com/r/kong/kong/tags&#34;&gt;Builds&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Let’s test drive Kong by adding authentication to an API in under 5 minutes.&lt;/p&gt; &#xA;&lt;p&gt;We suggest using the docker-compose distribution via the instructions below, but there is also a &lt;a href=&#34;https://docs.konghq.com/gateway/latest/install/docker/#install-kong-gateway-in-db-less-mode&#34;&gt;docker installation&lt;/a&gt; procedure if you’d prefer to run the Kong API Gateway in DB-less mode.&lt;/p&gt; &#xA;&lt;p&gt;Whether you’re running in the cloud, on bare metal, or using containers, you can find every supported distribution on our &lt;a href=&#34;https://konghq.com/install/#kong-community&#34;&gt;official installation&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To start, clone the Docker repository and navigate to the compose folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;  $ git clone https://github.com/Kong/docker-kong&#xA;  $ cd docker-kong/compose/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start the Gateway stack using:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;  $ KONG_DATABASE=postgres docker-compose --profile database up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Gateway is now available on the following ports on localhost:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:8000&lt;/code&gt; - send traffic to your service via Kong&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:8001&lt;/code&gt; - configure Kong using Admin API or via &lt;a href=&#34;https://github.com/kong/deck&#34;&gt;decK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:8002&lt;/code&gt; - access Kong&#39;s management Web UI (&lt;a href=&#34;https://github.com/Kong/kong-manager&#34;&gt;Kong Manager&lt;/a&gt;) on &lt;a href=&#34;http://localhost:8002&#34;&gt;localhost:8002&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next, follow the &lt;a href=&#34;https://docs.konghq.com/gateway-oss/latest/getting-started/configuring-a-service/&#34;&gt;quick start guide&lt;/a&gt; to tour the Gateway features.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;By centralizing common API functionality across all your organization&#39;s services, the Kong API Gateway creates more freedom for engineering teams to focus on the challenges that matter most.&lt;/p&gt; &#xA;&lt;p&gt;The top Kong features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Advanced routing, load balancing, health checking - all configurable via a RESTful admin API or declarative configuration.&lt;/li&gt; &#xA; &lt;li&gt;Authentication and authorization for APIs using methods like JWT, basic auth, OAuth, ACLs and more.&lt;/li&gt; &#xA; &lt;li&gt;Proxy, SSL/TLS termination, and connectivity support for L4 or L7 traffic.&lt;/li&gt; &#xA; &lt;li&gt;Plugins for enforcing traffic controls, rate limiting, req/res transformations, logging, monitoring and including a plugin developer hub.&lt;/li&gt; &#xA; &lt;li&gt;Plugins for AI traffic to support multi-LLM implementations and no-code AI use cases, with advanced AI prompt engineering, AI observability, AI security and more.&lt;/li&gt; &#xA; &lt;li&gt;Sophisticated deployment models like Declarative Databaseless Deployment and Hybrid Deployment (control plane/data plane separation) without any vendor lock-in.&lt;/li&gt; &#xA; &lt;li&gt;Native &lt;a href=&#34;https://github.com/Kong/kubernetes-ingress-controller&#34;&gt;ingress controller&lt;/a&gt; support for serving Kubernetes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://konghq.com/&#34;&gt;&lt;img src=&#34;https://konghq.com/wp-content/uploads/2018/05/kong-benefits-github-readme.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Plugin Hub&lt;/h3&gt; &#xA;&lt;p&gt;Plugins provide advanced functionality that extends the use of the Gateway. Many of the Kong Inc. and community-developed plugins like AWS Lambda, Correlation ID, and Response Transformer are showcased at the &lt;a href=&#34;https://docs.konghq.com/hub/&#34;&gt;Plugin Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Contribute to the Plugin Hub and ensure your next innovative idea is published and available to the broader community!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We ❤️ pull requests, and we’re continually working hard to make it as easy as possible for developers to contribute. Before beginning development with the Kong API Gateway, please familiarize yourself with the following developer resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Community Pledge (&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/COMMUNITY_PLEDGE.md&#34;&gt;COMMUNITY_PLEDGE.md&lt;/a&gt;) for our pledge to interact with you, the open source community.&lt;/li&gt; &#xA; &lt;li&gt;Contributor Guide (&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;) to learn about how to contribute to Kong.&lt;/li&gt; &#xA; &lt;li&gt;Development Guide (&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/DEVELOPER.md&#34;&gt;DEVELOPER.md&lt;/a&gt;): Setting up your development environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/COPYRIGHT&#34;&gt;COPYRIGHT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://docs.konghq.com/latest/plugin-development/&#34;&gt;Plugin Development Guide&lt;/a&gt; for building new and creative plugins, or browse the online version of Kong&#39;s source code documentation in the &lt;a href=&#34;https://docs.konghq.com/latest/pdk/&#34;&gt;Plugin Development Kit (PDK) Reference&lt;/a&gt;. Developers can build plugins in &lt;a href=&#34;https://docs.konghq.com/gateway/latest/plugin-development/&#34;&gt;Lua&lt;/a&gt;, &lt;a href=&#34;https://docs.konghq.com/gateway-oss/latest/external-plugins/#developing-go-plugins&#34;&gt;Go&lt;/a&gt; or &lt;a href=&#34;https://docs.konghq.com/gateway-oss/latest/external-plugins/#developing-javascript-plugins&#34;&gt;JavaScript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; for more details about a given release. The &lt;a href=&#34;https://semver.org&#34;&gt;SemVer Specification&lt;/a&gt; is followed when versioning Gateway releases.&lt;/p&gt; &#xA;&lt;h2&gt;Join the Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://docs.konghq.com/&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join the &lt;a href=&#34;https://github.com/Kong/kong/discussions&#34;&gt;Kong discussions forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join the Kong discussions at the Kong Nation forum: &lt;a href=&#34;https://discuss.konghq.com/&#34;&gt;https://discuss.konghq.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;http://kongcommunity.slack.com/&#34;&gt;Community Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read up on the latest happenings at our &lt;a href=&#34;https://konghq.com/blog/&#34;&gt;blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow us on &lt;a href=&#34;https://x.com/thekonginc&#34;&gt;X&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to our &lt;a href=&#34;https://www.youtube.com/c/KongInc/videos&#34;&gt;YouTube channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visit our &lt;a href=&#34;https://konghq.com/&#34;&gt;homepage&lt;/a&gt; to learn more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Konnect Cloud&lt;/h2&gt; &#xA;&lt;p&gt;Kong Inc. offers commercial subscriptions that enhance the Kong API Gateway in a variety of ways. Customers of Kong&#39;s &lt;a href=&#34;https://konghq.com/kong-konnect/&#34;&gt;Konnect Cloud&lt;/a&gt; subscription take advantage of additional gateway functionality, commercial support, and access to Kong&#39;s managed (SaaS) control plane platform. The Konnect Cloud platform features include real-time analytics, a service catalog, developer portals, and so much more! &lt;a href=&#34;https://konghq.com/products/kong-konnect/register?utm_medium=Referral&amp;amp;utm_source=Github&amp;amp;utm_campaign=kong-gateway&amp;amp;utm_content=konnect-promo-in-gateway&amp;amp;utm_term=get-started&#34;&gt;Get started&lt;/a&gt; with Konnect Cloud.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2016-2024 Kong Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   https://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>