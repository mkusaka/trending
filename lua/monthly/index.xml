<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-01T01:47:18Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stevearc/oil.nvim</title>
    <updated>2024-05-01T01:47:18Z</updated>
    <id>tag:github.com,2024-05-01:/stevearc/oil.nvim</id>
    <link href="https://github.com/stevearc/oil.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim file explorer: edit your filesystem like a buffer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;oil.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/tpope/vim-vinegar&#34;&gt;vim-vinegar&lt;/a&gt; like file explorer that lets you edit your filesystem like a normal Neovim buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/506791/209727111-6b4a11f4-634a-4efa-9461-80e9717cea94.mp4&#34;&gt;https://user-images.githubusercontent.com/506791/209727111-6b4a11f4-634a-4efa-9461-80e9717cea94.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#adapters&#34;&gt;Adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.8+&lt;/li&gt; &#xA; &lt;li&gt;(optional) &lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; for file icons&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;oil.nvim supports all the usual plugin managers&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lazy.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;stevearc/oil.nvim&#39;,&#xA;  opts = {},&#xA;  -- Optional dependencies&#xA;  dependencies = { &#34;nvim-tree/nvim-web-devicons&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;packer&#34;).startup(function()&#xA;  use({&#xA;    &#34;stevearc/oil.nvim&#34;,&#xA;    config = function()&#xA;      require(&#34;oil&#34;).setup()&#xA;    end,&#xA;  })&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Paq&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;paq&#34;)({&#xA;  { &#34;stevearc/oil.nvim&#34; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;stevearc/oil.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dein&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;stevearc/oil.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pathogen&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/oil.nvim.git ~/.vim/bundle/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/oil.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/oil/start/oil.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your init.lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;oil&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open a directory with &lt;code&gt;nvim .&lt;/code&gt;. Use &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to open a file/directory, and &lt;code&gt;-&lt;/code&gt; to go up a directory. Otherwise, just treat it like a normal buffer and make changes as you like. Remember to &lt;code&gt;:w&lt;/code&gt; when you&#39;re done to actually perform the actions.&lt;/p&gt; &#xA;&lt;p&gt;If you want to mimic the &lt;code&gt;vim-vinegar&lt;/code&gt; method of navigating to the parent directory of a file, add this keymap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;-&#34;, &#34;&amp;lt;CMD&amp;gt;Oil&amp;lt;CR&amp;gt;&#34;, { desc = &#34;Open parent directory&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can open a directory with &lt;code&gt;:edit &amp;lt;path&amp;gt;&lt;/code&gt; or &lt;code&gt;:Oil &amp;lt;path&amp;gt;&lt;/code&gt;. To open oil in a floating window, do &lt;code&gt;:Oil --float &amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;oil&#34;).setup({&#xA;  -- Oil will take over directory buffers (e.g. `vim .` or `:e src/`)&#xA;  -- Set to false if you still want to use netrw.&#xA;  default_file_explorer = true,&#xA;  -- Id is automatically added at the beginning, and name at the end&#xA;  -- See :help oil-columns&#xA;  columns = {&#xA;    &#34;icon&#34;,&#xA;    -- &#34;permissions&#34;,&#xA;    -- &#34;size&#34;,&#xA;    -- &#34;mtime&#34;,&#xA;  },&#xA;  -- Buffer-local options to use for oil buffers&#xA;  buf_options = {&#xA;    buflisted = false,&#xA;    bufhidden = &#34;hide&#34;,&#xA;  },&#xA;  -- Window-local options to use for oil buffers&#xA;  win_options = {&#xA;    wrap = false,&#xA;    signcolumn = &#34;no&#34;,&#xA;    cursorcolumn = false,&#xA;    foldcolumn = &#34;0&#34;,&#xA;    spell = false,&#xA;    list = false,&#xA;    conceallevel = 3,&#xA;    concealcursor = &#34;nvic&#34;,&#xA;  },&#xA;  -- Send deleted files to the trash instead of permanently deleting them (:help oil-trash)&#xA;  delete_to_trash = false,&#xA;  -- Skip the confirmation popup for simple operations (:help oil.skip_confirm_for_simple_edits)&#xA;  skip_confirm_for_simple_edits = false,&#xA;  -- Selecting a new/moved/renamed file or directory will prompt you to save changes first&#xA;  -- (:help prompt_save_on_select_new_entry)&#xA;  prompt_save_on_select_new_entry = true,&#xA;  -- Oil will automatically delete hidden buffers after this delay&#xA;  -- You can set the delay to false to disable cleanup entirely&#xA;  -- Note that the cleanup process only starts when none of the oil buffers are currently displayed&#xA;  cleanup_delay_ms = 2000,&#xA;  lsp_file_methods = {&#xA;    -- Time to wait for LSP file operations to complete before skipping&#xA;    timeout_ms = 1000,&#xA;    -- Set to true to autosave buffers that are updated with LSP willRenameFiles&#xA;    -- Set to &#34;unmodified&#34; to only save unmodified buffers&#xA;    autosave_changes = false,&#xA;  },&#xA;  -- Constrain the cursor to the editable parts of the oil buffer&#xA;  -- Set to `false` to disable, or &#34;name&#34; to keep it on the file names&#xA;  constrain_cursor = &#34;editable&#34;,&#xA;  -- Set to true to watch the filesystem for changes and reload oil&#xA;  experimental_watch_for_changes = false,&#xA;  -- Keymaps in oil buffer. Can be any value that `vim.keymap.set` accepts OR a table of keymap&#xA;  -- options with a `callback` (e.g. { callback = function() ... end, desc = &#34;&#34;, mode = &#34;n&#34; })&#xA;  -- Additionally, if it is a string that matches &#34;actions.&amp;lt;name&amp;gt;&#34;,&#xA;  -- it will use the mapping at require(&#34;oil.actions&#34;).&amp;lt;name&amp;gt;&#xA;  -- Set to `false` to remove a keymap&#xA;  -- See :help oil-actions for a list of all available actions&#xA;  keymaps = {&#xA;    [&#34;g?&#34;] = &#34;actions.show_help&#34;,&#xA;    [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;actions.select&#34;,&#xA;    [&#34;&amp;lt;C-s&amp;gt;&#34;] = &#34;actions.select_vsplit&#34;,&#xA;    [&#34;&amp;lt;C-h&amp;gt;&#34;] = &#34;actions.select_split&#34;,&#xA;    [&#34;&amp;lt;C-t&amp;gt;&#34;] = &#34;actions.select_tab&#34;,&#xA;    [&#34;&amp;lt;C-p&amp;gt;&#34;] = &#34;actions.preview&#34;,&#xA;    [&#34;&amp;lt;C-c&amp;gt;&#34;] = &#34;actions.close&#34;,&#xA;    [&#34;&amp;lt;C-l&amp;gt;&#34;] = &#34;actions.refresh&#34;,&#xA;    [&#34;-&#34;] = &#34;actions.parent&#34;,&#xA;    [&#34;_&#34;] = &#34;actions.open_cwd&#34;,&#xA;    [&#34;`&#34;] = &#34;actions.cd&#34;,&#xA;    [&#34;~&#34;] = &#34;actions.tcd&#34;,&#xA;    [&#34;gs&#34;] = &#34;actions.change_sort&#34;,&#xA;    [&#34;gx&#34;] = &#34;actions.open_external&#34;,&#xA;    [&#34;g.&#34;] = &#34;actions.toggle_hidden&#34;,&#xA;    [&#34;g\\&#34;] = &#34;actions.toggle_trash&#34;,&#xA;  },&#xA;  -- Configuration for the floating keymaps help window&#xA;  keymaps_help = {&#xA;    border = &#34;rounded&#34;,&#xA;  },&#xA;  -- Set to false to disable all of the above keymaps&#xA;  use_default_keymaps = true,&#xA;  view_options = {&#xA;    -- Show files and directories that start with &#34;.&#34;&#xA;    show_hidden = false,&#xA;    -- This function defines what is considered a &#34;hidden&#34; file&#xA;    is_hidden_file = function(name, bufnr)&#xA;      return vim.startswith(name, &#34;.&#34;)&#xA;    end,&#xA;    -- This function defines what will never be shown, even when `show_hidden` is set&#xA;    is_always_hidden = function(name, bufnr)&#xA;      return false&#xA;    end,&#xA;    -- Sort file names in a more intuitive order for humans. Is less performant,&#xA;    -- so you may want to set to false if you work with large directories.&#xA;    natural_order = true,&#xA;    sort = {&#xA;      -- sort order can be &#34;asc&#34; or &#34;desc&#34;&#xA;      -- see :help oil-columns to see which columns are sortable&#xA;      { &#34;type&#34;, &#34;asc&#34; },&#xA;      { &#34;name&#34;, &#34;asc&#34; },&#xA;    },&#xA;  },&#xA;  -- EXPERIMENTAL support for performing file operations with git&#xA;  git = {&#xA;    -- Return true to automatically git add/mv/rm files&#xA;    add = function(path)&#xA;      return false&#xA;    end,&#xA;    mv = function(src_path, dest_path)&#xA;      return false&#xA;    end,&#xA;    rm = function(path)&#xA;      return false&#xA;    end,&#xA;  },&#xA;  -- Configuration for the floating window in oil.open_float&#xA;  float = {&#xA;    -- Padding around the floating window&#xA;    padding = 2,&#xA;    max_width = 0,&#xA;    max_height = 0,&#xA;    border = &#34;rounded&#34;,&#xA;    win_options = {&#xA;      winblend = 0,&#xA;    },&#xA;    -- This is the config that will be passed to nvim_open_win.&#xA;    -- Change values here to customize the layout&#xA;    override = function(conf)&#xA;      return conf&#xA;    end,&#xA;  },&#xA;  -- Configuration for the actions floating preview window&#xA;  preview = {&#xA;    -- Width dimensions can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;    -- min_width and max_width can be a single value or a list of mixed integer/float types.&#xA;    -- max_width = {100, 0.8} means &#34;the lesser of 100 columns or 80% of total&#34;&#xA;    max_width = 0.9,&#xA;    -- min_width = {40, 0.4} means &#34;the greater of 40 columns or 40% of total&#34;&#xA;    min_width = { 40, 0.4 },&#xA;    -- optionally define an integer/float for the exact width of the preview window&#xA;    width = nil,&#xA;    -- Height dimensions can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;    -- min_height and max_height can be a single value or a list of mixed integer/float types.&#xA;    -- max_height = {80, 0.9} means &#34;the lesser of 80 columns or 90% of total&#34;&#xA;    max_height = 0.9,&#xA;    -- min_height = {5, 0.1} means &#34;the greater of 5 columns or 10% of total&#34;&#xA;    min_height = { 5, 0.1 },&#xA;    -- optionally define an integer/float for the exact height of the preview window&#xA;    height = nil,&#xA;    border = &#34;rounded&#34;,&#xA;    win_options = {&#xA;      winblend = 0,&#xA;    },&#xA;    -- Whether the preview window is automatically updated when the cursor is moved&#xA;    update_on_cursor_moved = true,&#xA;  },&#xA;  -- Configuration for the floating progress window&#xA;  progress = {&#xA;    max_width = 0.9,&#xA;    min_width = { 40, 0.4 },&#xA;    width = nil,&#xA;    max_height = { 10, 0.9 },&#xA;    min_height = { 5, 0.1 },&#xA;    height = nil,&#xA;    border = &#34;rounded&#34;,&#xA;    minimized_border = &#34;none&#34;,&#xA;    win_options = {&#xA;      winblend = 0,&#xA;    },&#xA;  },&#xA;  -- Configuration for the floating SSH window&#xA;  ssh = {&#xA;    border = &#34;rounded&#34;,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adapters&lt;/h2&gt; &#xA;&lt;p&gt;Oil does all of its filesystem interaction through an &lt;em&gt;adapter&lt;/em&gt; abstraction. In practice, this means that oil can be used to view and modify files in more places than just the local filesystem, so long as the destination has an adapter implementation.&lt;/p&gt; &#xA;&lt;p&gt;Note that file operations work &lt;em&gt;across adapters&lt;/em&gt;. This means that you can use oil to copy files to/from a remote server using the ssh adapter just as easily as you can copy files from one directory to another on your local machine.&lt;/p&gt; &#xA;&lt;h3&gt;SSH&lt;/h3&gt; &#xA;&lt;p&gt;This adapter allows you to browse files over ssh, much like netrw. To use it, simply open a buffer using the following name template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvim oil-ssh://[username@]hostname[:port]/[path]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This may look familiar. In fact, this is the same url format that netrw uses.&lt;/p&gt; &#xA;&lt;p&gt;Note that at the moment the ssh adapter does not support Windows machines, and it requires the server to have a &lt;code&gt;/bin/sh&lt;/code&gt; binary as well as standard unix commands (&lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt;, &lt;code&gt;cp&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt;, &lt;code&gt;ln&lt;/code&gt;, &lt;code&gt;echo&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;!-- API --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#get_entry_on_linebufnr-lnum&#34;&gt;get_entry_on_line(bufnr, lnum)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#get_cursor_entry&#34;&gt;get_cursor_entry()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#discard_all_changes&#34;&gt;discard_all_changes()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#set_columnscols&#34;&gt;set_columns(cols)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#set_sortsort&#34;&gt;set_sort(sort)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#set_is_hidden_fileis_hidden_file&#34;&gt;set_is_hidden_file(is_hidden_file)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#toggle_hidden&#34;&gt;toggle_hidden()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#get_current_dir&#34;&gt;get_current_dir()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#open_floatdir&#34;&gt;open_float(dir)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#toggle_floatdir&#34;&gt;toggle_float(dir)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#opendir&#34;&gt;open(dir)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#close&#34;&gt;close()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#open_previewopts&#34;&gt;open_preview(opts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#selectopts-callback&#34;&gt;select(opts, callback)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#saveopts-cb&#34;&gt;save(opts, cb)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#setupopts&#34;&gt;setup(opts)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /API --&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why &#34;oil&#34;&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; From the &lt;a href=&#34;https://github.com/tpope/vim-vinegar&#34;&gt;vim-vinegar&lt;/a&gt; README, a quote by Drew Neil:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Split windows and the project drawer go together like oil and vinegar&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Vinegar was taken. Let&#39;s be oil. Plus, I think it&#39;s pretty slick ;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why would I want to use oil vs any other plugin?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You like to use a netrw-like view to browse directories (as opposed to a file tree)&lt;/li&gt; &#xA; &lt;li&gt;AND you want to be able to edit your filesystem like a buffer&lt;/li&gt; &#xA; &lt;li&gt;AND you want to perform cross-directory actions. AFAIK there is no other plugin that does this. (update: &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-files.md&#34;&gt;mini.files&lt;/a&gt; also offers this functionality)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t need those features specifically, check out the alternatives listed below&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why write another plugin yourself instead of adding functionality to one that already exists&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Because I am a &lt;em&gt;maniac control freak&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Can oil display files as a tree view&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; No. A tree view would require a completely different methodology, necessitating a complete rewrite. I don&#39;t use tree views, so I will leave this as a plugin for someone else to write.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: What are some alternatives?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-files.md&#34;&gt;mini.files&lt;/a&gt;: A newer plugin that also supports cross-directory filesystem-as-buffer edits. It utilizes a unique column view.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-vinegar&#34;&gt;vim-vinegar&lt;/a&gt;: The granddaddy. This made me fall in love with single-directory file browsing. I stopped using it when I encountered netrw bugs and performance issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shougo/defx.nvim&#34;&gt;defx.nvim&lt;/a&gt;: What I switched to after vim-vinegar. Much more flexible and performant, but requires python and the API is a little hard to work with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elihunter173/dirbuf.nvim&#34;&gt;dirbuf.nvim&lt;/a&gt;: The first plugin I encountered that let you edit the filesystem like a buffer. Never used it because it &lt;a href=&#34;https://github.com/elihunter173/dirbuf.nvim/issues/7&#34;&gt;can&#39;t do cross-directory edits&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tamago324/lir.nvim&#34;&gt;lir.nvim&lt;/a&gt;: What I used prior to writing this plugin. Similar to vim-vinegar, but with better Neovim integration (floating windows, lua API).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-dirvish&#34;&gt;vim-dirvish&lt;/a&gt;: Never personally used, but well-established, stable, simple directory browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trapd00r/vidir&#34;&gt;vidir&lt;/a&gt;: Never personally used, but might be the first plugin to come up with the idea of editing a directory like a buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s also file trees like &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;neo-tree&lt;/a&gt; and &lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua&#34;&gt;nvim-tree&lt;/a&gt;, but they&#39;re really a different category entirely.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>3rd/image.nvim</title>
    <updated>2024-05-01T01:47:18Z</updated>
    <id>tag:github.com,2024-05-01:/3rd/image.nvim</id>
    <link href="https://github.com/3rd/image.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🖼️ Bringing images to Neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🖼️ image.nvim&lt;/h1&gt; &#xA;&lt;p&gt;This plugin attempts to add image support to Neovim.&lt;/p&gt; &#xA;&lt;p&gt;It works wonderfully with Kitty + Tmux, and it handles painful things like rendering an image at a given position in a buffer, scrolling, windows, etc.&lt;/p&gt; &#xA;&lt;p&gt;It has built-in Markdown and Neorg integrations that you can use right now. &lt;br&gt; It can also render image files as images when opened.&lt;/p&gt; &#xA;&lt;p&gt;Join on Discord: &lt;a href=&#34;https://discord.gg/GTwbCxBNgz&#34;&gt;https://discord.gg/GTwbCxBNgz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/3rd/image.nvim/assets/59587503/9a9a1792-6476-4d96-8b8e-d3cdd7f5759e&#34;&gt;https://github.com/3rd/image.nvim/assets/59587503/9a9a1792-6476-4d96-8b8e-d3cdd7f5759e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin requires a few external dependencies. Here is a list, there are instructions for specific plugin managers below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mandatory Deps:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ImageMagick/ImageMagick&#34;&gt;ImageMagick&lt;/a&gt; - see &lt;a href=&#34;https://raw.githubusercontent.com/3rd/image.nvim/master/#installing-imagemagick&#34;&gt;Installing ImageMagick&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leafo/magick&#34;&gt;magick LuaRock&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You need &lt;strong&gt;one of:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;Kitty&lt;/a&gt; &amp;gt;= 28.0 - for the &lt;code&gt;kitty&lt;/code&gt; backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jstkdng/ueberzugpp&#34;&gt;ueberzugpp&lt;/a&gt; - for the &lt;code&gt;ueberzug&lt;/code&gt; backend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Fully &lt;strong&gt;optional:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/curl/curl&#34;&gt;curl&lt;/a&gt; - for remote images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing The Plugin &amp;amp; Rock&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Lazy.nvim&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Don&#39;t forget to install the imageMagick system package, detailed &lt;a href=&#34;https://raw.githubusercontent.com/3rd/image.nvim/master/#installing-imagemagick&#34;&gt;below&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;It&#39;s recommended that you use &lt;a href=&#34;https://github.com/vhyrro/luarocks.nvim&#34;&gt;vhyrro/luarocks.nvim&lt;/a&gt; to install luarocks for neovim while using lazy. But you can install manually as well.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;With luarocks.nvim&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;vhyrro/luarocks.nvim&#34;,&#xA;    priority = 1001, -- this plugin needs to run before anything else&#xA;    opts = {&#xA;        rocks = { &#34;magick&#34; },&#xA;    },&#xA;},&#xA;{&#xA;    &#34;3rd/image.nvim&#34;,&#xA;    dependencies = { &#34;luarocks.nvim&#34; },&#xA;    config = function()&#xA;        -- ...&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;strong&gt;OR Without luarocks.nvim&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;p&gt;You have to install the luarock manually.&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;install &lt;a href=&#34;https://luarocks.org/&#34;&gt;luarocks&lt;/a&gt; on your system via your system package manager&lt;/li&gt; &#xA;  &lt;li&gt;run &lt;code&gt;luarocks --local --lua-version=5.1 install magick&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example for configuring Neovim to load user-installed installed Lua rocks:&#xA;package.path = package.path .. &#34;;&#34; .. vim.fn.expand(&#34;$HOME&#34;) .. &#34;/.luarocks/share/lua/5.1/?/init.lua&#34;&#xA;package.path = package.path .. &#34;;&#34; .. vim.fn.expand(&#34;$HOME&#34;) .. &#34;/.luarocks/share/lua/5.1/?.lua&#34;&#xA;&#xA;-- lazy snippet&#xA;{&#xA;    &#34;3rd/image.nvim&#34;,&#xA;    config = function()&#xA;        -- ...&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Rocks.nvim&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Don&#39;t forget to install the imageMagick system package, detailed &lt;a href=&#34;https://raw.githubusercontent.com/3rd/image.nvim/master/#installing-imagemagick&#34;&gt;below&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;:Rocks install image.nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;NixOS&lt;/summary&gt; &#xA; &lt;p&gt;NixOS users need to install &lt;code&gt;imagemagick&lt;/code&gt; and &lt;code&gt;luajitPackages.magick&lt;/code&gt; (&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/243687&#34;&gt;thanks&lt;/a&gt; to &lt;a href=&#34;https://github.com/donovanglover&#34;&gt;@donovanglover&lt;/a&gt;).&lt;/p&gt; &#xA; &lt;p&gt;It&#39;s recommended that you can build your Neovim with those packages like so:&lt;/p&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;With home-manager&lt;/summary&gt; &#xA;  &lt;p&gt;&lt;em&gt;thanks to &lt;a href=&#34;https://github.com/wuliuqii&#34;&gt;@wuliuqii&lt;/a&gt; in &lt;a href=&#34;https://github.com/3rd/image.nvim/issues/13&#34;&gt;#13&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{ pkgs, ... }:&#xA;&#xA;{&#xA;  programs.neovim = {&#xA;    enable = true;&#xA;    extraLuaPackages = ps: [ ps.magick ];&#xA;    extraPackages = ps: [ ps.imagemagick ];&#xA;    # ... other config&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;Vanilla NixOS&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;# https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/editors/neovim/utils.nix#L27&#xA;{ pkgs, neovimUtils, wrapNeovimUnstable, ... }:&#xA;&#xA;let&#xA;  config = pkgs.neovimUtils.makeNeovimConfig {&#xA;    extraLuaPackages = p: [ p.magick ];&#xA;    extraPackages = p: [ p.imagemagick ];&#xA;    # ... other config&#xA;  };&#xA;in {&#xA;  nixpkgs.overlays = [&#xA;    (_: super: {&#xA;      neovim-custom = pkgs.wrapNeovimUnstable&#xA;        (super.neovim-unwrapped.overrideAttrs (oldAttrs: {&#xA;          buildInputs = oldAttrs.buildInputs ++ [ super.tree-sitter ];&#xA;        })) config;&#xA;    })&#xA;  ];&#xA;  environment.systemPackages = with pkgs; [ neovim-custom ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Installing ImageMagick&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;magick&lt;/code&gt; luarock provides bindings to ImageMagick&#39;s MagickWand, so we need to install that package as well.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu: &lt;code&gt;sudo apt install libmagickwand-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;MacOS: &lt;code&gt;brew install imagemagick&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;By default, brew installs into a weird location, so you have to add &lt;code&gt;$(brew --prefix)/lib&lt;/code&gt; to &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; by adding something like &lt;code&gt;export DYLD_LIBRARY_PATH=&#34;$(brew --prefix)/lib:$DYLD_LIBRARY_PATH&#34;&lt;/code&gt; to your shell profile (probably &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fedora: &lt;code&gt;sudo dnf install ImageMagick-devel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arch: &lt;code&gt;sudo pacman -Syy imagemagick&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default config&#xA;require(&#34;image&#34;).setup({&#xA;  backend = &#34;kitty&#34;,&#xA;  integrations = {&#xA;    markdown = {&#xA;      enabled = true,&#xA;      clear_in_insert_mode = false,&#xA;      download_remote_images = true,&#xA;      only_render_image_at_cursor = false,&#xA;      filetypes = { &#34;markdown&#34;, &#34;vimwiki&#34; }, -- markdown extensions (ie. quarto) can go here&#xA;    },&#xA;    neorg = {&#xA;      enabled = true,&#xA;      clear_in_insert_mode = false,&#xA;      download_remote_images = true,&#xA;      only_render_image_at_cursor = false,&#xA;      filetypes = { &#34;norg&#34; },&#xA;    },&#xA;    html = {&#xA;      enabled = false,&#xA;    },&#xA;    css = {&#xA;      enabled = false,&#xA;    },&#xA;  },&#xA;  max_width = nil,&#xA;  max_height = nil,&#xA;  max_width_window_percentage = nil,&#xA;  max_height_window_percentage = 50,&#xA;  window_overlap_clear_enabled = false, -- toggles images when windows are overlapped&#xA;  window_overlap_clear_ft_ignore = { &#34;cmp_menu&#34;, &#34;cmp_docs&#34;, &#34;&#34; },&#xA;  editor_only_render_when_focused = false, -- auto show/hide images when the editor gains/looses focus&#xA;  tmux_show_only_in_active_window = false, -- auto show/hide images in the correct Tmux window (needs visual-activity off)&#xA;  hijack_file_patterns = { &#34;*.png&#34;, &#34;*.jpg&#34;, &#34;*.jpeg&#34;, &#34;*.gif&#34;, &#34;*.webp&#34; }, -- render image files as images when opened&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tmux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You must set: &lt;code&gt;set -gq allow-passthrough on&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you want the images to be automatically hidden/shown when you switch windows (&lt;code&gt;tmux_show_only_in_active_window = true&lt;/code&gt;), set: &lt;code&gt;set -g visual-activity off&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Try it out with a minimal setup&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/3rd/image.nvim/master/minimal-setup.lua&#34;&gt;minimal-setup.lua&lt;/a&gt; from the root of this repository and run the demo with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvim --clean -c &#34;:luafile minimal-setup.lua&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Backends&lt;/h3&gt; &#xA;&lt;p&gt;All the backends support rendering inside Tmux.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;kitty&lt;/code&gt; - best in class, works great and is very snappy&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ueberzug&lt;/code&gt; - backed by &lt;a href=&#34;https://github.com/jstkdng/ueberzugpp&#34;&gt;ueberzugpp&lt;/a&gt;, supports any terminal, but has lower performance &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports multiple images thanks to &lt;a href=&#34;https://github.com/jstkdng/ueberzugpp/issues/74&#34;&gt;@jstkdng&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integrations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; - uses &lt;a href=&#34;https://github.com/MDeiml/tree-sitter-markdown&#34;&gt;tree-sitter-markdown&lt;/a&gt; and supports any Markdown-based grammars (Quarto, VimWiki Markdown)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;neorg&lt;/code&gt; - uses &lt;a href=&#34;https://github.com/nvim-neorg/tree-sitter-norg&#34;&gt;tree-sitter-norg&lt;/a&gt; (also check &lt;a href=&#34;https://github.com/nvim-neorg/neorg/issues/971&#34;&gt;https://github.com/nvim-neorg/neorg/issues/971&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can configure where images are searched for on a per-integration basis by passing a function to &lt;code&gt;resolve_image_path&lt;/code&gt; as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;image&#39;).setup({&#xA;  integrations = {&#xA;    markdown = {&#xA;      resolve_image_path = function(document_path, image_path, fallback)&#xA;        -- document_path is the path to the file that contains the image&#xA;        -- image_path is the potentially relative path to the image. for&#xA;        -- markdown it&#39;s `![](this text)`&#xA;&#xA;        -- you can call the fallback function to get the default behavior&#xA;        return fallback(document_path, image_path)&#xA;      end,&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/3rd/image.nvim/master/lua/types.lua&#34;&gt;types.lua&lt;/a&gt; for a better overview of how everything is modeled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local api = require(&#34;image&#34;)&#xA;&#xA;-- from a file (absolute path)&#xA;local image = api.from_file(&#34;/path/to/image.png&#34;, {&#xA;  id = &#34;my_image_id&#34;, -- optional, defaults to a random string&#xA;  window = 1000, -- optional, binds image to a window and its bounds&#xA;  buffer = 1000, -- optional, binds image to a buffer (paired with window binding)&#xA;  with_virtual_padding = true, -- optional, pads vertically with extmarks, defaults to false&#xA;&#xA;  -- optional, binds image to an extmark which it follows. Forced to be true when&#xA;  -- `with_virtual_padding` is true. defaults to false.&#xA;  inline = true,&#xA;&#xA;  -- geometry (optional)&#xA;  x = 1,&#xA;  y = 1,&#xA;  width = 10,&#xA;  height = 10&#xA;})&#xA;&#xA;-- from a URL&#xA;api.from_url(&#34;https://gist.ro/s/remote.png&#34;, {&#xA;    -- all the same options from above&#xA;}, function(img)&#xA;    -- do stuff with the image&#xA;end&#xA;)&#xA;&#xA;image:render() -- render image&#xA;image:render(geometry) -- update image geometry and render it&#xA;image:clear()&#xA;&#xA;image:move(x, y) -- move image&#xA;image:brightness(value) -- change brightness&#xA;image:saturation(value) -- change saturation&#xA;image:hue(value) -- change hue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benlubas&#34;&gt;@benlubas&lt;/a&gt; for their countless amazing contributions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edluffy&#34;&gt;@edluffy&lt;/a&gt; for &lt;a href=&#34;https://github.com/edluffy/hologram.nvim&#34;&gt;hologram.nvim&lt;/a&gt; - of which I borrowed a lot of code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vhyrro&#34;&gt;@vhyrro&lt;/a&gt; for their great ideas and &lt;a href=&#34;https://github.com/vhyrro/hologram.nvim&#34;&gt;hologram.nvim fork&lt;/a&gt; changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kovidgoyal&#34;&gt;@kovidgoyal&lt;/a&gt; for &lt;a href=&#34;https://github.com/kovidgoyal/kitty&#34;&gt;Kitty&lt;/a&gt; - the program I spend most of my time in&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jstkdng&#34;&gt;@jstkdng&lt;/a&gt; for &lt;a href=&#34;https://github.com/jstkdng/ueberzugpp&#34;&gt;ueberzugpp&lt;/a&gt; - the revived version of ueberzug&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The story behind&lt;/h3&gt; &#xA;&lt;p&gt;Some years ago, I took a trip to Emacs land for a few months to learn Elisp and also research what Org-mode is, how it works, and look for features of interest for my workflow. I already had my own document syntax, albeit a very simple one, hacked together with Vimscript and a lot of Regex, and I was looking for ideas to improve it and build features on top of it.&lt;/p&gt; &#xA;&lt;p&gt;I kept working on my &lt;a href=&#34;https://github.com/3rd/syslang&#34;&gt;syntax&lt;/a&gt; over the years, rewrote it many times, and today it&#39;s a proper Tree-sitter grammar, that I use for all my needs, from second braining to managing my tasks and time. It&#39;s helped me control my ADHD and be productive long before I was diagnosed, and it&#39;s still helping me be so much better than I&#39;d be without it today.&lt;/p&gt; &#xA;&lt;p&gt;One thing Emacs and Org-mode had that I liked was the ability to embed images in the document. Of course, we don&#39;t &lt;em&gt;&#34;need&#34;&lt;/em&gt; it, but... I really wanted to have images in my documents.&lt;/p&gt; &#xA;&lt;p&gt;About 3 years ago, I made my &lt;a href=&#34;https://www.reddit.com/r/neovim/comments/ieh7l4/im_building_an_image_plugin_and_need_some_help/&#34;&gt;first attempt&lt;/a&gt; at solving this problem but didn&#39;t get far. If you have similar interests, you might have seen the &lt;a href=&#34;https://www.youtube.com/watch?v=cnt9mPOjrLg&#34;&gt;vimage.nvim demo video&lt;/a&gt; on YouTube.&lt;/p&gt; &#xA;&lt;p&gt;It was using &lt;a href=&#34;https://github.com/seebye/ueberzug&#34;&gt;ueberzug&lt;/a&gt;, which is now dead. It was buggy and didn&#39;t handle things like window-relative positioning, attaching images to windows and buffers, folds, etc.&lt;/p&gt; &#xA;&lt;p&gt;Kitty&#39;s graphics protocol was a thing, but it didn&#39;t work with Tmux, which I&#39;ll probably use forever or replace it with something of my own.&lt;/p&gt; &#xA;&lt;p&gt;Now, things have changed, and I&#39;m happy to announce that rendering images using &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/graphics-protocol.html&#34;&gt;Kitty&#39;s graphics protocol&lt;/a&gt; from Neovim inside Tmux is working, and it&#39;s working pretty well!&lt;/p&gt; &#xA;&lt;p&gt;My plan for this plugin is to support multiple backends, provide a few core integrations, and an easy-to-use API for other plugin authors to build on top of. There is a lot of logic that deals with positioning, cropping, bounds, folds, extmarks, etc. that is painful and unrealistic to write from scratch for every plugin that wants to use images.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mfussenegger/nvim-lint</title>
    <updated>2024-05-01T01:47:18Z</updated>
    <id>tag:github.com,2024-05-01:/mfussenegger/nvim-lint</id>
    <link href="https://github.com/mfussenegger/nvim-lint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An asynchronous linter plugin for Neovim complementary to the built-in Language Server Protocol support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lint&lt;/h1&gt; &#xA;&lt;p&gt;An asynchronous linter plugin for Neovim (&amp;gt;= 0.6.0) complementary to the built-in Language Server Protocol support.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation &amp;amp; Goals&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;ale&lt;/a&gt; we already got an asynchronous linter, why write yet another one?&lt;/p&gt; &#xA;&lt;p&gt;Because &lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;ale&lt;/a&gt; also includes its own language server client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-lint&lt;/code&gt; instead has a more narrow scope: It spawns linters, parses their output, and reports the results via the &lt;code&gt;vim.diagnostic&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-lint&lt;/code&gt; complements the built-in language server client for languages where there are no language servers, or where standalone linters provide better results.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Neovim &amp;gt;= 0.6.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-lint&lt;/code&gt; is a regular plugin and can be installed via the &lt;code&gt;:h packages&lt;/code&gt; mechanism or via a plugin manager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone \&#xA;    https://github.com/mfussenegger/nvim-lint.git&#xA;    ~/.config/nvim/pack/plugins/start/nvim-lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-lint&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-lint&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Configure the linters you want to run per file type. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lint&#39;).linters_by_ft = {&#xA;  markdown = {&#39;vale&#39;,}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then setup a autocmd to trigger linting. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;au BufWritePost * lua require(&#39;lint&#39;).try_lint()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with Lua autocmds (requires 0.7):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd({ &#34;BufWritePost&#34; }, {&#xA;  callback = function()&#xA;&#xA;    -- try_lint without arguments runs the linters defined in `linters_by_ft`&#xA;    -- for the current filetype&#xA;    require(&#34;lint&#34;).try_lint()&#xA;&#xA;    -- You can call `try_lint` with a linter name or a list of names to always&#xA;    -- run specific linters, independent of the `linters_by_ft` configuration&#xA;    require(&#34;lint&#34;).try_lint(&#34;cspell&#34;)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some linters require a file to be saved to disk, others support linting &lt;code&gt;stdin&lt;/code&gt; input. For such linters you could also define a more aggressive autocmd, for example on the &lt;code&gt;InsertLeave&lt;/code&gt; or &lt;code&gt;TextChanged&lt;/code&gt; events.&lt;/p&gt; &#xA;&lt;p&gt;If you want to customize how the diagnostics are displayed, read &lt;code&gt;:help vim.diagnostic.config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Available Linters&lt;/h2&gt; &#xA;&lt;p&gt;There is a generic linter called &lt;code&gt;compiler&lt;/code&gt; that uses the &lt;code&gt;makeprg&lt;/code&gt; and &lt;code&gt;errorformat&lt;/code&gt; options of the current buffer.&lt;/p&gt; &#xA;&lt;p&gt;Other dedicated linters that are built-in are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Linter name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Set via &lt;code&gt;makeprg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compiler&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rhysd/actionlint&#34;&gt;actionlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;actionlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alexjs.com/&#34;&gt;alex&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;alex&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.ansible.com/lint.html&#34;&gt;ansible-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ansible_lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://bandit.readthedocs.io/en/latest/&#34;&gt;bandit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bandit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://beancount.github.io/docs/running_beancount_and_generating_reports.html#bean-check&#34;&gt;bean-check&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bean_check&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/biomejs/biome&#34;&gt;biomejs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;biomejs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrincetonUniversity/blocklint&#34;&gt;blocklint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;blocklint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bufbuild/buf&#34;&gt;buf_lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;buf_lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bazelbuild/buildtools/tree/master/buildifier&#34;&gt;buildifier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;buildifier&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aws-cloudformation/cfn-lint&#34;&gt;cfn-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cfn_lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stelligent/cfn_nag&#34;&gt;cfn_nag&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cfn_nag&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mrtazz/checkmake&#34;&gt;checkmake&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;checkmake&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.kernel.org/dev-tools/checkpatch.html&#34;&gt;checkpatch.pl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;checkpatch&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://checkstyle.sourceforge.io/&#34;&gt;checkstyle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;checkstyle&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nongnu.org/chktex&#34;&gt;chktex&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chktex&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://clang.llvm.org/extra/clang-tidy/&#34;&gt;clang-tidy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangtidy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/KDE/clazy&#34;&gt;clazy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/clj-kondo/clj-kondo&#34;&gt;clj-kondo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clj-kondo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cmake-lint/cmake-lint&#34;&gt;cmakelint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cmakelint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/codespell-project/codespell&#34;&gt;codespell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;codespell&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://commitlint.js.org&#34;&gt;commitlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;commitlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/danmar/cppcheck/&#34;&gt;cppcheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cppcheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cpplint/cpplint&#34;&gt;cpplint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpplint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rrrene/credo&#34;&gt;credo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;credo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/streetsidesoftware/cspell/tree/main/packages/cspell&#34;&gt;cspell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cspell&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cue-lang/cue&#34;&gt;cue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cue&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.curlylint.org/&#34;&gt;curlylint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;curlylint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://gondor.apana.org.au/~herbert/dash&#34;&gt;dash&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/astro/deadnix&#34;&gt;deadnix&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;deadnix&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/denoland/deno&#34;&gt;deno&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;deno&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://djlint.com/&#34;&gt;djlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;djlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dotenv-linter.github.io/&#34;&gt;dotenv-linter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotenv_linter&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/editorconfig-checker/editorconfig-checker&#34;&gt;editorconfig-checker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;editorconfig-checker&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shopify/erb-lint&#34;&gt;erb-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;erb_lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;ESLint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mantoni/eslint_d.js&#34;&gt;eslint_d&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eslint_d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bakpakin/Fennel&#34;&gt;fennel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fennel&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/fish-shell/fish-shell&#34;&gt;fish&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fish&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flake8.pycqa.org/&#34;&gt;Flake8&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flake8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/david-a-wheeler/flawfinder&#34;&gt;flawfinder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flawfinder&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Scony/godot-gdscript-toolkit&#34;&gt;gdlint (gdtoolkit)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gdlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jorisroovers/gitlint&#34;&gt;gitlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gitlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://golangci-lint.run/&#34;&gt;Golangci-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;golangcilint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/google/shaderc&#34;&gt;glslc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;glslc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/DirectXShaderCompiler&#34;&gt;DirectX Shader Compiler&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dxc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint&#34;&gt;hadolint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hadolint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ndmitchell/hlint&#34;&gt;hlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://htmlhint.com/&#34;&gt;htmlhint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;htmlhint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.html-tidy.org/&#34;&gt;HTML Tidy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tidy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://inko-lang.org/&#34;&gt;Inko&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;inko&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/janet-lang/janet&#34;&gt;janet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;janet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/candid82/joker&#34;&gt;joker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;joker&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jshint.com/&#34;&gt;jshint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jshint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zaach/jsonlint&#34;&gt;jsonlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pinterest/ktlint&#34;&gt;ktlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ktlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ctan.org/tex-archive/support/lacheck&#34;&gt;lacheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lacheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://languagetool.org/&#34;&gt;Languagetool&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;languagetool&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mpeterv/luacheck&#34;&gt;luacheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;luacheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DavidAnson/markdownlint&#34;&gt;markdownlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;markdownlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://markuplint.dev/&#34;&gt;markuplint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;markuplint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.mathworks.com/help/matlab/ref/mlint.html&#34;&gt;mlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://mypy-lang.org/&#34;&gt;Mypy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mypy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NixOS/nix&#34;&gt;Nix&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvuillam/npm-groovy-lint&#34;&gt;npm-groovy-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm-groovy-lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/priv-kweihmann/oelint-adv&#34;&gt;oelint-adv&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;oelint-adv&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.openpolicyagent.org/&#34;&gt;opa_check&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;opa_check&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Perl-Critic/Perl-Critic&#34;&gt;perlcritic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;perlcritic&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/perl-ide/App-perlimports&#34;&gt;perlimports&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;perlimports&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.php.net/&#34;&gt;php&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;phpcs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpcs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nunomaduro/phpinsights&#34;&gt;phpinsights&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpinsights&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://phpmd.org/&#34;&gt;phpmd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpmd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://phpstan.org/&#34;&gt;phpstan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpstan&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ponylang/ponyc&#34;&gt;ponyc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pony&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/loop-payments/prisma-lint&#34;&gt;prisma-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;prisma-lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/amperser/proselint&#34;&gt;proselint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;proselint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://psalm.dev/&#34;&gt;psalm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;psalm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/puppetlabs/puppet-lint&#34;&gt;puppet-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;puppet-lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pycodestyle.pycqa.org/en/latest/&#34;&gt;pycodestyle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pycodestyle&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pydocstyle.org/en/stable/&#34;&gt;pydocstyle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pydocstyle&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/csachs/pyproject-flake8&#34;&gt;pyproject-flake8&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pflake8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pylint.org/&#34;&gt;Pylint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pylint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/StyraInc/regal&#34;&gt;regal&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;regal&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mgechev/revive&#34;&gt;Revive&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;revive&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/boakley/robotframework-lint&#34;&gt;rflint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rflint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MarketSquare/robotframework-robocop&#34;&gt;robocop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;robocop&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/myint/rstcheck&#34;&gt;rstcheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rstcheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/twolfson/restructuredtext-lint&#34;&gt;rstlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rstlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rpm.org&#34;&gt;RPM&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rpmspec&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ruby/ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ruby&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;RuboCop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rubocop&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;Ruff&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ruff&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/warpnet/salt-lint&#34;&gt;salt-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;saltlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Kampfkarren/selene&#34;&gt;Selene&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;selene&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.shellcheck.net/&#34;&gt;ShellCheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;shellcheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/snyk/cli&#34;&gt;snyk&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;snyk_iac&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sqlfluff/sqlfluff&#34;&gt;sqlfluff&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlfluff&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://standardjs.com/&#34;&gt;standardjs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;standardjs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;StandardRB&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;standardrb&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NerdyPepper/statix&#34;&gt;statix check&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;statix&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stylelint/stylelint&#34;&gt;stylelint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;stylelint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://protofire.github.io/solhint/&#34;&gt;Solhint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solhint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;swiftlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/priv-kweihmann/systemdlint&#34;&gt;systemdlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;systemdlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/crate-ci/typos&#34;&gt;typos&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;typos&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nagelfar.sourceforge.net/&#34;&gt;Nagelfar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nagelfar&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vala-lang/vala-lint&#34;&gt;Vala&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vala_lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/errata-ai/vale&#34;&gt;Vale&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vale&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://verilator.org/guide/latest/&#34;&gt;Verilator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;verilator&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Vimjas/vint&#34;&gt;vint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jendrikseipp/vulture&#34;&gt;vulture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vulture&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.getwoke.tech/&#34;&gt;woke&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;woke&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/btford/write-good&#34;&gt;write-good&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;write_good&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/adrienverge/yamllint&#34;&gt;yamllint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yamllint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/terraform-linters/tflint&#34;&gt;tflint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tflint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aquasecurity/tfsec&#34;&gt;tfsec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tfsec&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tighten/tlint&#34;&gt;tlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aquasecurity/trivy&#34;&gt;trivy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;trivy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.zsh.org/&#34;&gt;zsh&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zsh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://quick-lint-js.com&#34;&gt;quick-lint-js&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;quick-lint-js&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Custom Linters&lt;/h2&gt; &#xA;&lt;p&gt;You can register custom linters by adding them to the &lt;code&gt;linters&lt;/code&gt; table, but please consider contributing a linter if it is missing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lint&#39;).linters.your_linter_name = {&#xA;  cmd = &#39;linter_cmd&#39;,&#xA;  stdin = true, -- or false if it doesn&#39;t support content input via stdin. In that case the filename is automatically added to the arguments.&#xA;  append_fname = true, -- Automatically append the file name to `args` if `stdin = false` (default: true)&#xA;  args = {}, -- list of arguments. Can contain functions with zero arguments that will be evaluated once the linter is used.&#xA;  stream = nil, -- (&#39;stdout&#39; | &#39;stderr&#39; | &#39;both&#39;) configure the stream to which the linter outputs the linting result.&#xA;  ignore_exitcode = false, -- set this to true if the linter exits with a code != 0 and that&#39;s considered normal.&#xA;  env = nil, -- custom environment table to use with the external process. Note that this replaces the *entire* environment, it is not additive.&#xA;  parser = your_parse_function&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of declaring the linter as a table, you can also declare it as a function which returns the linter table in case you want to dynamically generate some of the properties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;your_parse_function&lt;/code&gt; can be a function which takes three arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;output&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bufnr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;linter_cwd&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;output&lt;/code&gt; is the output generated by the linter command. The function must return a list of diagnostics as specified in &lt;code&gt;:help diagnostic-structure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can override the environment that the linting process runs in by setting the &lt;code&gt;env&lt;/code&gt; key, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;env = { [&#34;FOO&#34;] = &#34;bar&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this completely overrides the environment, it does not add new environment variables. The one exception is that the &lt;code&gt;PATH&lt;/code&gt; variable will be preserved if it is not explicitly set.&lt;/p&gt; &#xA;&lt;p&gt;You can generate a parse function from a Lua pattern or from an &lt;code&gt;errorformat&lt;/code&gt; using the function in the &lt;code&gt;lint.parser&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;h3&gt;from_errorformat&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;parser = require(&#39;lint.parser&#39;).from_errorformat(errorformat)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function takes two arguments: &lt;code&gt;errorformat&lt;/code&gt; and &lt;code&gt;skeleton&lt;/code&gt; (optional).&lt;/p&gt; &#xA;&lt;h3&gt;from_pattern&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;parser = require(&#39;lint.parser&#39;).from_pattern(pattern, groups, severity_map, defaults, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function allows to parse the linter&#39;s output using a Lua regular expression pattern.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pattern: The regular expression pattern applied on each line of the output&lt;/li&gt; &#xA; &lt;li&gt;groups: The groups specified by the pattern&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Available groups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lnum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;end_lnum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;end_col&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;message&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;code&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The order of the groups must match the order of the captures within the pattern. An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local pattern = &#39;[^:]+:(%d+):(%d+):(%w+):(.+)&#39;&#xA;local groups = { &#39;lnum&#39;, &#39;col&#39;, &#39;code&#39;, &#39;message&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;severity: A mapping from severity codes to diagnostic codes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;default_severity = {&#xA;[&#39;error&#39;] = vim.diagnostic.severity.ERROR,&#xA;[&#39;warning&#39;] = vim.diagnostic.severity.WARN,&#xA;[&#39;information&#39;] = vim.diagnostic.severity.INFO,&#xA;[&#39;hint&#39;] = vim.diagnostic.severity.HINT,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;defaults: The defaults diagnostic values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;defaults = {[&#34;source&#34;] = &#34;mylint-name&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;opts: Additional options&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;lnum_offset&lt;/code&gt;: Added to &lt;code&gt;lnum&lt;/code&gt;. Defaults to 0&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;end_lnum_offset&lt;/code&gt;: Added to &lt;code&gt;end_lnum&lt;/code&gt;. Defaults to 0&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;end_col_offset&lt;/code&gt;: offset added to &lt;code&gt;end_col&lt;/code&gt;. Defaults to &lt;code&gt;-1&lt;/code&gt;, assuming that the end-column position is exclusive.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize built-in linters&lt;/h2&gt; &#xA;&lt;p&gt;You can import a linter and modify its properties. An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local phpcs = require(&#39;lint&#39;).linters.phpcs&#xA;phpcs.args = {&#xA;  &#39;-q&#39;,&#xA;  -- &amp;lt;- Add a new parameter here&#xA;  &#39;--report=json&#39;,&#xA;  &#39;-&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also post-process the diagnostics produced by a linter by wrapping it. For example, to change the severity of all diagnostics created by &lt;code&gt;cspell&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lint = require(&#34;lint&#34;)&#xA;lint.linters.cspell = require(&#34;lint.util&#34;).wrap(lint.linters.cspell, function(diagnostic)&#xA;  diagnostic.severity = vim.diagnostic.severity.HINT&#xA;  return diagnostic&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Display configuration&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;code&gt;:help vim.diagnostic.config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have different settings per linter, you can get the &lt;code&gt;namespace&lt;/code&gt; for a linter via &lt;code&gt;require(&#34;lint&#34;).get_namespace(&#34;linter_name&#34;)&lt;/code&gt;. An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ns = require(&#34;lint&#34;).get_namespace(&#34;my_linter_name&#34;)&#xA;vim.diagnostic.config({ virtual_text = true }, ns)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the current running linters for your buffer&lt;/h2&gt; &#xA;&lt;p&gt;You can see which linters are running with &lt;code&gt;require(&#34;lint&#34;).get_running()&lt;/code&gt;. To include the running linters in the status line you could format them like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lint_progress = function()&#xA;  local linters = require(&#34;lint&#34;).get_running()&#xA;  if #linters == 0 then&#xA;      return &#34;󰦕&#34;&#xA;  end&#xA;  return &#34;󱉶 &#34; .. table.concat(linters, &#34;, &#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;Ale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iamcco/diagnostic-languageserver&#34;&gt;diagnostic-languageserver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development ☢️&lt;/h2&gt; &#xA;&lt;h3&gt;Run tests&lt;/h3&gt; &#xA;&lt;p&gt;Running tests requires &lt;a href=&#34;https://lunarmodules.github.io/busted/&#34;&gt;busted&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/nvim-neorocks/neorocks&#34;&gt;neorocks&lt;/a&gt; or &lt;a href=&#34;https://zignar.net/2023/01/21/using-luarocks-as-lua-interpreter-with-luarocks/&#34;&gt;Using Neovim as Lua interpreter with Luarocks&lt;/a&gt; for installation instructions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;busted tests/&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>