<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-01T02:16:36Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>j-hui/fidget.nvim</title>
    <updated>2023-07-01T02:16:36Z</updated>
    <id>tag:github.com,2023-07-01:/j-hui/fidget.nvim</id>
    <link href="https://github.com/j-hui/fidget.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standalone UI for nvim-lsp progress&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fidget.nvim&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: fidget.nvim will soon be completely rewritten. In the meantime, please pin your plugin config to the &lt;code&gt;legacy&lt;/code&gt; tag to avoid breaking changes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Standalone UI for nvim-lsp progress. Eye candy for the impatient.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/j-hui/fidget.nvim/raw/media/gifs/fidget-demo-rust-analyzer.gif?raw=true&#34; alt=&#34;fidget.nvim demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;The goals of this plugin are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to provide a UI for nvim-lsp&#39;s &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#progress&#34;&gt;progress&lt;/a&gt; handler.&lt;/li&gt; &#xA; &lt;li&gt;to be easy to configure&lt;/li&gt; &#xA; &lt;li&gt;to stay out of the way of other plugins (in particular status lines)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The language server protocol (LSP) defines an &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#progress&#34;&gt;endpoint&lt;/a&gt; for servers to report their progress while performing work. This endpoint is supported by Neovim&#39;s builtin LSP client, but only a handful of plugins (that I&#39;m aware of) make use of this feature. Those that do typically report progress in the status line, where space is at a premium and the layout is not well-suited to display the progress of concurrent tasks coming from multiple LSP servers. This approach also made status line configuration more complicated.&lt;/p&gt; &#xA;&lt;p&gt;I wanted be able to see the progress reported by LSP servers without involving the status line. Who doesn&#39;t love a little bit of eye candy?&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim v0.7.0+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;An LSP server that implements LSP&#39;s &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#progress&#34;&gt;progress&lt;/a&gt; endpoint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Having a working nvim-lsp setup is not technically necessary to &lt;em&gt;setup&lt;/em&gt; the plugin, but it won&#39;t do anything without a source of progress notifications.&lt;/p&gt; &#xA;&lt;p&gt;For an up-to-date list of LSP servers this plugin is known to work with, see &lt;a href=&#34;https://github.com/j-hui/fidget.nvim/issues/17&#34;&gt;this pinned issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Install this plugin using your favorite plugin manager. For example, using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;j-hui/fidget.nvim&#39;, { &#39;tag&#39;: &#39;legacy&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure the plugin installed (e.g., run &lt;code&gt;:PlugInstall&lt;/code&gt; if using vim-plug). After the plugin is loaded (e.g., after &lt;code&gt;plug#end()&lt;/code&gt; for vim-plug), call its &lt;code&gt;setup&lt;/code&gt; function (in Lua):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#34;fidget&#34;.setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/j-hui/fidget.nvim/main/doc/fidget.md&#34;&gt;documentation&lt;/a&gt; for configuration options.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements and Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;This plugin takes inspiration and borrows code from &lt;a href=&#34;https://github.com/arkav/lualine-lsp-progress&#34;&gt;arkav/lualine-lsp-progress&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Fidget spinner designs were adapted from the npm package &lt;a href=&#34;https://github.com/sindresorhus/cli-spinners&#34;&gt;sindresorhus/cli-spinners&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-lua/lsp-status.nvim&#34;&gt;nvim-lua/lsp-status.nvim&lt;/a&gt; also supports showing progress text, though it requires some configuration to integrate that into their status line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;neoclide/coc.nvim&lt;/a&gt; provides a nice LSP progress UI in the status line, which first inspired my desire to have this feature for nvim-lsp.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stevearc/dressing.nvim</title>
    <updated>2023-07-01T02:16:36Z</updated>
    <id>tag:github.com,2023-07-01:/stevearc/dressing.nvim</id>
    <link href="https://github.com/stevearc/dressing.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin to improve the default vim.ui interfaces&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dressing.nvim&lt;/h1&gt; &#xA;&lt;p&gt;With the release of Neovim 0.6 we were given the start of extensible core UI hooks (&lt;a href=&#34;https://github.com/neovim/neovim/pull/15771&#34;&gt;vim.ui.select&lt;/a&gt; and &lt;a href=&#34;https://github.com/neovim/neovim/pull/15959&#34;&gt;vim.ui.input&lt;/a&gt;). They exist to allow plugin authors to override them with improvements upon the default behavior, so that&#39;s exactly what we&#39;re going to do.&lt;/p&gt; &#xA;&lt;p&gt;It is a goal to match and not extend the core Neovim API. All options that core respects will be respected, and we will not accept any custom parameters or options in the functions. Customization will be done entirely using a separate &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#configuration&#34;&gt;configuration&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#highlights&#34;&gt;Highlights&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#advanced-configuration&#34;&gt;Advanced configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#notes-for-plugin-authors&#34;&gt;Notes for plugin authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/dressing.nvim/master/#alternative-and-related-projects&#34;&gt;Alternative and related projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Neovim 0.8.0+ (for earlier versions, use the &lt;a href=&#34;https://github.com/stevearc/dressing.nvim/tree/nvim-0.7&#34;&gt;nvim-0.7&lt;/a&gt; or &lt;a href=&#34;https://github.com/stevearc/dressing.nvim/tree/nvim-0.5&#34;&gt;nvim-0.5&lt;/a&gt; branch)&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vim.input&lt;/code&gt; replacement (handling a LSP rename)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/506791/145502533-3dc2f87d-95ea-422d-a318-12c0092f1bdf.png&#34; alt=&#34;Screenshot from 2021-12-09 17-36-16&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vim.select&lt;/code&gt; (telescope)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/506791/144541916-4fa60c50-cadc-4f0f-b3c1-6307310e6e99.png&#34; alt=&#34;Screenshot from 2021-12-02 19-46-01&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vim.select&lt;/code&gt; (fzf)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/506791/144541986-6081b4f8-b3b2-418d-9265-b9dabec2c4c4.png&#34; alt=&#34;Screenshot from 2021-12-02 19-46-54&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vim.select&lt;/code&gt; (nui)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/506791/144542071-1aa66f81-b07c-492e-9884-fdafed1006df.png&#34; alt=&#34;Screenshot from 2021-12-02 19-47-56&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vim.select&lt;/code&gt; (built-in)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/506791/144729527-ede0d7ba-a6e6-41e0-be5a-1a5f16d35b05.png&#34; alt=&#34;Screenshot from 2021-12-04 17-14-32&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;dressing.nvim supports all the usual plugin managers&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lazy.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;stevearc/dressing.nvim&#39;,&#xA;  opts = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;packer&#39;).startup(function()&#xA;    use {&#39;stevearc/dressing.nvim&#39;}&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Paq&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    {&#39;stevearc/dressing.nvim&#39;};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;stevearc/dressing.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dein&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;stevearc/dressing.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pathogen&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/dressing.nvim.git ~/.vim/bundle/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/dressing.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/dressing.nvim/start/dressing.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re fine with the defaults, you&#39;re good to go after installation. If you want to tweak, call this function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;dressing&#39;).setup({&#xA;  input = {&#xA;    -- Set to false to disable the vim.ui.input implementation&#xA;    enabled = true,&#xA;&#xA;    -- Default prompt string&#xA;    default_prompt = &#34;Input:&#34;,&#xA;&#xA;    -- Can be &#39;left&#39;, &#39;right&#39;, or &#39;center&#39;&#xA;    title_pos = &#34;left&#34;,&#xA;&#xA;    -- When true, &amp;lt;Esc&amp;gt; will close the modal&#xA;    insert_only = true,&#xA;&#xA;    -- When true, input will start in insert mode.&#xA;    start_in_insert = true,&#xA;&#xA;    -- These are passed to nvim_open_win&#xA;    anchor = &#34;SW&#34;,&#xA;    border = &#34;rounded&#34;,&#xA;    -- &#39;editor&#39; and &#39;win&#39; will default to being centered&#xA;    relative = &#34;cursor&#34;,&#xA;&#xA;    -- These can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;    prefer_width = 40,&#xA;    width = nil,&#xA;    -- min_width and max_width can be a list of mixed types.&#xA;    -- min_width = {20, 0.2} means &#34;the greater of 20 columns or 20% of total&#34;&#xA;    max_width = { 140, 0.9 },&#xA;    min_width = { 20, 0.2 },&#xA;&#xA;    buf_options = {},&#xA;    win_options = {&#xA;      -- Window transparency (0-100)&#xA;      winblend = 10,&#xA;      -- Disable line wrapping&#xA;      wrap = false,&#xA;      -- Indicator for when text exceeds window&#xA;      list = true,&#xA;      listchars = &#34;precedes:…,extends:…&#34;,&#xA;      -- Increase this for more context when text scrolls off the window&#xA;      sidescrolloff = 0,&#xA;    },&#xA;&#xA;    -- Set to `false` to disable&#xA;    mappings = {&#xA;      n = {&#xA;        [&#34;&amp;lt;Esc&amp;gt;&#34;] = &#34;Close&#34;,&#xA;        [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;Confirm&#34;,&#xA;      },&#xA;      i = {&#xA;        [&#34;&amp;lt;C-c&amp;gt;&#34;] = &#34;Close&#34;,&#xA;        [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;Confirm&#34;,&#xA;        [&#34;&amp;lt;Up&amp;gt;&#34;] = &#34;HistoryPrev&#34;,&#xA;        [&#34;&amp;lt;Down&amp;gt;&#34;] = &#34;HistoryNext&#34;,&#xA;      },&#xA;    },&#xA;&#xA;    override = function(conf)&#xA;      -- This is the config that will be passed to nvim_open_win.&#xA;      -- Change values here to customize the layout&#xA;      return conf&#xA;    end,&#xA;&#xA;    -- see :help dressing_get_config&#xA;    get_config = nil,&#xA;  },&#xA;  select = {&#xA;    -- Set to false to disable the vim.ui.select implementation&#xA;    enabled = true,&#xA;&#xA;    -- Priority list of preferred vim.select implementations&#xA;    backend = { &#34;telescope&#34;, &#34;fzf_lua&#34;, &#34;fzf&#34;, &#34;builtin&#34;, &#34;nui&#34; },&#xA;&#xA;    -- Trim trailing `:` from prompt&#xA;    trim_prompt = true,&#xA;&#xA;    -- Options for telescope selector&#xA;    -- These are passed into the telescope picker directly. Can be used like:&#xA;    -- telescope = require(&#39;telescope.themes&#39;).get_ivy({...})&#xA;    telescope = nil,&#xA;&#xA;    -- Options for fzf selector&#xA;    fzf = {&#xA;      window = {&#xA;        width = 0.5,&#xA;        height = 0.4,&#xA;      },&#xA;    },&#xA;&#xA;    -- Options for fzf-lua&#xA;    fzf_lua = {&#xA;      -- winopts = {&#xA;      --   height = 0.5,&#xA;      --   width = 0.5,&#xA;      -- },&#xA;    },&#xA;&#xA;    -- Options for nui Menu&#xA;    nui = {&#xA;      position = &#34;50%&#34;,&#xA;      size = nil,&#xA;      relative = &#34;editor&#34;,&#xA;      border = {&#xA;        style = &#34;rounded&#34;,&#xA;      },&#xA;      buf_options = {&#xA;        swapfile = false,&#xA;        filetype = &#34;DressingSelect&#34;,&#xA;      },&#xA;      win_options = {&#xA;        winblend = 10,&#xA;      },&#xA;      max_width = 80,&#xA;      max_height = 40,&#xA;      min_width = 40,&#xA;      min_height = 10,&#xA;    },&#xA;&#xA;    -- Options for built-in selector&#xA;    builtin = {&#xA;      -- These are passed to nvim_open_win&#xA;      anchor = &#34;NW&#34;,&#xA;      border = &#34;rounded&#34;,&#xA;      -- &#39;editor&#39; and &#39;win&#39; will default to being centered&#xA;      relative = &#34;editor&#34;,&#xA;&#xA;      buf_options = {},&#xA;      win_options = {&#xA;        -- Window transparency (0-100)&#xA;        winblend = 10,&#xA;        cursorline = true,&#xA;        cursorlineopt = &#34;both&#34;,&#xA;      },&#xA;&#xA;      -- These can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;      -- the min_ and max_ options can be a list of mixed types.&#xA;      -- max_width = {140, 0.8} means &#34;the lesser of 140 columns or 80% of total&#34;&#xA;      width = nil,&#xA;      max_width = { 140, 0.8 },&#xA;      min_width = { 40, 0.2 },&#xA;      height = nil,&#xA;      max_height = 0.9,&#xA;      min_height = { 10, 0.2 },&#xA;&#xA;      -- Set to `false` to disable&#xA;      mappings = {&#xA;        [&#34;&amp;lt;Esc&amp;gt;&#34;] = &#34;Close&#34;,&#xA;        [&#34;&amp;lt;C-c&amp;gt;&#34;] = &#34;Close&#34;,&#xA;        [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;Confirm&#34;,&#xA;      },&#xA;&#xA;      override = function(conf)&#xA;        -- This is the config that will be passed to nvim_open_win.&#xA;        -- Change values here to customize the layout&#xA;        return conf&#xA;      end,&#xA;    },&#xA;&#xA;    -- Used to override format_item. See :help dressing-format&#xA;    format_item_override = {},&#xA;&#xA;    -- see :help dressing_get_config&#xA;    get_config = nil,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;p&gt;A common way to adjust the highlighting of just the dressing windows is by providing a &lt;code&gt;winhighlight&lt;/code&gt; option in the config. See &lt;code&gt;:help winhighlight&lt;/code&gt; for more details. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;dressing&#39;).setup({&#xA;  input = {&#xA;    winhighlight = &#39;NormalFloat:DiagnosticError&#39;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;p&gt;For each of the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt; configs, there is an option &lt;code&gt;get_config&lt;/code&gt;. This can be a function that accepts the &lt;code&gt;opts&lt;/code&gt; parameter that is passed in to &lt;code&gt;vim.select&lt;/code&gt; or &lt;code&gt;vim.input&lt;/code&gt;. It must return either &lt;code&gt;nil&lt;/code&gt; (to no-op) or config values to use in place of the global config values for that module.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to use a specific configuration for code actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;dressing&#39;).setup({&#xA;  select = {&#xA;    get_config = function(opts)&#xA;      if opts.kind == &#39;codeaction&#39; then&#xA;        return {&#xA;          backend = &#39;nui&#39;,&#xA;          nui = {&#xA;            relative = &#39;cursor&#39;,&#xA;            max_width = 40,&#xA;          }&#xA;        }&#xA;      end&#xA;    end&#xA;  }&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes for plugin authors&lt;/h2&gt; &#xA;&lt;p&gt;TL;DR: you can customize the telescope &lt;code&gt;vim.ui.select&lt;/code&gt; implementation by passing &lt;code&gt;telescope&lt;/code&gt; into &lt;code&gt;opts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;vim.ui&lt;/code&gt; hooks are a great boon for us because we can now assume that users will have a reasonable UI available for simple input operations. We no longer have to build separate implementations for each of fzf, telescope, ctrlp, etc. The tradeoff is that &lt;code&gt;vim.ui.select&lt;/code&gt; is less customizable than any of these options, so if you wanted to have a preview window (like telescope supports), it is no longer an option.&lt;/p&gt; &#xA;&lt;p&gt;My solution to this is extending the &lt;code&gt;opts&lt;/code&gt; that are passed to &lt;code&gt;vim.ui.select&lt;/code&gt;. You can add a &lt;code&gt;telescope&lt;/code&gt; field that will be passed directly into the picker, allowing you to customize any part of the UI. If a user has both dressing and telescope installed, they will get your custom picker UI. If either of those are not true, the selection UI will gracefully degrade to whatever the user has configured for &lt;code&gt;vim.ui.select&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example of usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.ui.select({&#39;apple&#39;, &#39;banana&#39;, &#39;mango&#39;}, {&#xA;  prompt = &#34;Title&#34;,&#xA;  telescope = require(&#34;telescope.themes&#34;).get_cursor(),&#xA;}, function(selected) end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For now this is available only for the telescope backend, but feel free to request additions.&lt;/p&gt; &#xA;&lt;h2&gt;Alternative and related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-ui-select.nvim&#34;&gt;telescope-ui-select&lt;/a&gt; - provides a &lt;code&gt;vim.ui.select&lt;/code&gt; implementation for telescope&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ibhagwan/fzf-lua/raw/061a4df40f5238782fdd7b380fe55650fadd9384/README.md?plain=1#L259-L264&#34;&gt;fzf-lua&lt;/a&gt; - provides a &lt;code&gt;vim.ui.select&lt;/code&gt; implementation for fzf&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-fzy&#34;&gt;nvim-fzy&lt;/a&gt; - fzf alternative that also provides a &lt;code&gt;vim.ui.select&lt;/code&gt; implementation (&lt;a href=&#34;https://github.com/mfussenegger/nvim-fzy/pull/13&#34;&gt;#13&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ray-x/guihua.lua&#34;&gt;guihua.lua&lt;/a&gt; - multipurpose GUI library that provides &lt;code&gt;vim.ui.select&lt;/code&gt; and &lt;code&gt;vim.ui.input&lt;/code&gt; implementations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt; - doing pretty much the same thing but for &lt;code&gt;vim.notify&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt; - provides common UI components for plugin authors. &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/vim.ui&#34;&gt;The wiki&lt;/a&gt; has examples of how to build your own &lt;code&gt;vim.ui&lt;/code&gt; interfaces.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-pack/nvim-spectre</title>
    <updated>2023-07-01T02:16:36Z</updated>
    <id>tag:github.com,2023-07-01:/nvim-pack/nvim-spectre</id>
    <link href="https://github.com/nvim-pack/nvim-spectre" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find the enemy and replace them with dark power.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-spectre&lt;/h1&gt; &#xA;&lt;p&gt;A search panel for neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spectre&lt;/strong&gt; &lt;strong&gt;find the enemy and replace them with dark power.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/windwp/nvim-spectre/wiki/assets/demospectre.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Use Spectre?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use regex in search&lt;/li&gt; &#xA; &lt;li&gt;It can filter search by path glob (filetype)&lt;/li&gt; &#xA; &lt;li&gt;It only searches when you leave &lt;strong&gt;Insert Mode&lt;/strong&gt;, &lt;code&gt;incsearch&lt;/code&gt; can be annoying when writing regex&lt;/li&gt; &#xA; &lt;li&gt;Use one buffer and you can edit or move&lt;/li&gt; &#xA; &lt;li&gt;A tool to replace text on project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;nvim-pack/nvim-spectre&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also need to install the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;BurntSushi/ripgrep&lt;/a&gt; (finder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;devicons&lt;/a&gt; (icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/sed/&#34;&gt;sed&lt;/a&gt; (replace tool)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MacOs&lt;/h3&gt; &#xA;&lt;p&gt;You may need run &lt;code&gt;brew install gnu-sed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;S&#39;, &#39;&amp;lt;cmd&amp;gt;lua require(&#34;spectre&#34;).open()&amp;lt;CR&amp;gt;&#39;, {&#xA;    desc = &#34;Open Spectre&#34;&#xA;})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;sw&#39;, &#39;&amp;lt;cmd&amp;gt;lua require(&#34;spectre&#34;).open_visual({select_word=true})&amp;lt;CR&amp;gt;&#39;, {&#xA;    desc = &#34;Search current word&#34;&#xA;})&#xA;vim.keymap.set(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;sw&#39;, &#39;&amp;lt;esc&amp;gt;&amp;lt;cmd&amp;gt;lua require(&#34;spectre&#34;).open_visual()&amp;lt;CR&amp;gt;&#39;, {&#xA;    desc = &#34;Search current word&#34;&#xA;})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;sp&#39;, &#39;&amp;lt;cmd&amp;gt;lua require(&#34;spectre&#34;).open_file_search({select_word=true})&amp;lt;CR&amp;gt;&#39;, {&#xA;    desc = &#34;Search on current file&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use command: &lt;code&gt;:Spectre&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Warnings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Always commit your files before you replace text. &lt;code&gt;nvim-spectre&lt;/code&gt; does not support undo directly.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t use your crazy vim skills to edit result text or UI or you may encounter strange behaviour.&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;dd&lt;/code&gt; to toggle result items.&lt;/li&gt; &#xA; &lt;li&gt;You need to use &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; not &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; to leave insert mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Regex Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default regex uses vim&#39;s &lt;strong&gt;magic mode&lt;/strong&gt; &lt;code&gt;\v&lt;/code&gt; and &lt;strong&gt;no-ignore-case&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It has different regex sytax compared to the &lt;code&gt;rg&lt;/code&gt; command and replace command &lt;code&gt;sed&lt;/code&gt; so be careful when replacing text.&lt;/li&gt; &#xA; &lt;li&gt;It has a different highlighting result because I use vim regex to highlight text so be careful but you can try to replace.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Replace&lt;/h2&gt; &#xA;&lt;p&gt;You can replace groups with &lt;code&gt;\0-9&lt;/code&gt; similar to vim and sed, if you run a replace command and don&#39;t see the change you may need to reload file with &lt;code&gt;:e&lt;/code&gt; because &lt;code&gt;sed&lt;/code&gt; is replace outside vim.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;spectre&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change any settings if you don&#39;t like them. &lt;strong&gt;Don&#39;t just copy all&lt;/strong&gt; as settings may change as the plugin is updated so it may be better use the default settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;spectre&#39;).setup({&#xA;&#xA;  color_devicons = true,&#xA;  open_cmd = &#39;vnew&#39;,&#xA;  live_update = false, -- auto execute search again when you write to any file in vim&#xA;  line_sep_start = &#39;┌-----------------------------------------&#39;,&#xA;  result_padding = &#39;¦  &#39;,&#xA;  line_sep       = &#39;└-----------------------------------------&#39;,&#xA;  highlight = {&#xA;      ui = &#34;String&#34;,&#xA;      search = &#34;DiffChange&#34;,&#xA;      replace = &#34;DiffDelete&#34;&#xA;  },&#xA;  mapping={&#xA;    [&#39;toggle_line&#39;] = {&#xA;        map = &#34;dd&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).toggle_line()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;toggle current item&#34;&#xA;    },&#xA;    [&#39;enter_file&#39;] = {&#xA;        map = &#34;&amp;lt;cr&amp;gt;&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).select_entry()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;goto current file&#34;&#xA;    },&#xA;    [&#39;send_to_qf&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;q&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).send_to_qf()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;send all item to quickfix&#34;&#xA;    },&#xA;    [&#39;replace_cmd&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;c&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).replace_cmd()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;input replace vim command&#34;&#xA;    },&#xA;    [&#39;show_option_menu&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;o&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).show_options()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;show option&#34;&#xA;    },&#xA;    [&#39;run_current_replace&#39;] = {&#xA;      map = &#34;&amp;lt;leader&amp;gt;rc&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).run_current_replace()&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;replace current line&#34;&#xA;    },&#xA;    [&#39;run_replace&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;R&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre.actions&#39;).run_replace()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;replace all&#34;&#xA;    },&#xA;    [&#39;change_view_mode&#39;] = {&#xA;        map = &#34;&amp;lt;leader&amp;gt;v&#34;,&#xA;        cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_view()&amp;lt;CR&amp;gt;&#34;,&#xA;        desc = &#34;change result view mode&#34;&#xA;    },&#xA;    [&#39;change_replace_sed&#39;] = {&#xA;      map = &#34;trs&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_engine_replace(&#39;sed&#39;)&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;use sed to replace&#34;&#xA;    },&#xA;    [&#39;change_replace_oxi&#39;] = {&#xA;      map = &#34;tro&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_engine_replace(&#39;oxi&#39;)&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;use oxi to replace&#34;&#xA;    },&#xA;    [&#39;toggle_live_update&#39;]={&#xA;      map = &#34;tu&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).toggle_live_update()&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;update change when vim write file.&#34;&#xA;    },&#xA;    [&#39;toggle_ignore_case&#39;] = {&#xA;      map = &#34;ti&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_options(&#39;ignore-case&#39;)&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;toggle ignore case&#34;&#xA;    },&#xA;    [&#39;toggle_ignore_hidden&#39;] = {&#xA;      map = &#34;th&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).change_options(&#39;hidden&#39;)&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;toggle search hidden&#34;&#xA;    },&#xA;    [&#39;resume_last_search&#39;] = {&#xA;      map = &#34;&amp;lt;leader&amp;gt;l&#34;,&#xA;      cmd = &#34;&amp;lt;cmd&amp;gt;lua require(&#39;spectre&#39;).resume_last_search()&amp;lt;CR&amp;gt;&#34;,&#xA;      desc = &#34;resume last search before close&#34;&#xA;    },&#xA;    -- you can put your mapping here it only use normal mode&#xA;  },&#xA;  find_engine = {&#xA;    -- rg is map with finder_cmd&#xA;    [&#39;rg&#39;] = {&#xA;      cmd = &#34;rg&#34;,&#xA;      -- default args&#xA;      args = {&#xA;        &#39;--color=never&#39;,&#xA;        &#39;--no-heading&#39;,&#xA;        &#39;--with-filename&#39;,&#xA;        &#39;--line-number&#39;,&#xA;        &#39;--column&#39;,&#xA;      } ,&#xA;      options = {&#xA;        [&#39;ignore-case&#39;] = {&#xA;          value= &#34;--ignore-case&#34;,&#xA;          icon=&#34;[I]&#34;,&#xA;          desc=&#34;ignore case&#34;&#xA;        },&#xA;        [&#39;hidden&#39;] = {&#xA;          value=&#34;--hidden&#34;,&#xA;          desc=&#34;hidden file&#34;,&#xA;          icon=&#34;[H]&#34;&#xA;        },&#xA;        -- you can put any rg search option you want here it can toggle with&#xA;        -- show_option function&#xA;      }&#xA;    },&#xA;    [&#39;ag&#39;] = {&#xA;      cmd = &#34;ag&#34;,&#xA;      args = {&#xA;        &#39;--vimgrep&#39;,&#xA;        &#39;-s&#39;&#xA;      } ,&#xA;      options = {&#xA;        [&#39;ignore-case&#39;] = {&#xA;          value= &#34;-i&#34;,&#xA;          icon=&#34;[I]&#34;,&#xA;          desc=&#34;ignore case&#34;&#xA;        },&#xA;        [&#39;hidden&#39;] = {&#xA;          value=&#34;--hidden&#34;,&#xA;          desc=&#34;hidden file&#34;,&#xA;          icon=&#34;[H]&#34;&#xA;        },&#xA;      },&#xA;    },&#xA;  },&#xA;  replace_engine={&#xA;      [&#39;sed&#39;]={&#xA;          cmd = &#34;sed&#34;,&#xA;          args = nil,&#xA;          options = {&#xA;            [&#39;ignore-case&#39;] = {&#xA;              value= &#34;--ignore-case&#34;,&#xA;              icon=&#34;[I]&#34;,&#xA;              desc=&#34;ignore case&#34;&#xA;            },&#xA;          }&#xA;      },&#xA;      -- call rust code by nvim-oxi to replace&#xA;      [&#39;oxi&#39;] = {&#xA;        cmd = &#39;oxi&#39;,&#xA;        args = {},&#xA;        options = {&#xA;          [&#39;ignore-case&#39;] = {&#xA;            value = &#34;i&#34;,&#xA;            icon = &#34;[I]&#34;,&#xA;            desc = &#34;ignore case&#34;&#xA;          },&#xA;        }&#xA;      }&#xA;  },&#xA;  default = {&#xA;      find = {&#xA;          --pick one of item in find_engine&#xA;          cmd = &#34;rg&#34;,&#xA;          options = {&#34;ignore-case&#34;}&#xA;      },&#xA;      replace={&#xA;          --pick one of item in replace_engine&#xA;          cmd = &#34;sed&#34;&#xA;      }&#xA;  },&#xA;  replace_vim_cmd = &#34;cdo&#34;,&#xA;  is_open_target_win = true, --open file on opener window&#xA;  is_insert_mode = false  -- start open panel on is_insert_mode&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- if you want to get items from spectre panel you can use some of the&#xA;-- following functions to get data from spectre.&#xA;require(&#39;spectre.actions&#39;).get_current_entry()&#xA;require(&#39;spectre.actions&#39;).get_all_entries()&#xA;require(&#39;spectre.actions&#39;).get_state()&#xA;&#xA;-- write your custom open function&#xA;require(&#39;spectre&#39;).open({&#xA;  is_insert_mode = true,&#xA;  cwd = &#34;~/.config/nvim&#34;,&#xA;  search_text=&#34;test&#34;,&#xA;  replace_text=&#34;test&#34;,&#xA;  path=&#34;lua/**/*.lua&#34;,&#xA;  is_close = false, -- close an exists instance of spectre and open new&#xA;})&#xA;-- you can use all variables above on command line&#xA;-- for example: Spectre % is_insert_mode=true cwd=~/.config/nvim&#xA;-- in this example `%` will expand to current file.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Replace Method&lt;/h2&gt; &#xA;&lt;p&gt;There are two replace methods &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;oxi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sed&lt;/th&gt; &#xA;   &lt;th&gt;oxi&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;group number by &#39;\0&#39;&lt;/td&gt; &#xA;   &lt;td&gt;group number by &#39;${0}&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;use vim to highlight on UI&lt;/td&gt; &#xA;   &lt;td&gt;use rust to highlight on UI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;use sed to replace&lt;/td&gt; &#xA;   &lt;td&gt;use rust to replace&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;run sed command&lt;/td&gt; &#xA;   &lt;td&gt;call rust code directly by nvim-oxi&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Install &lt;code&gt;oxi&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;you will need to install &lt;code&gt;cargo&lt;/code&gt; and run the command: &lt;a href=&#34;https://raw.githubusercontent.com/nvim-pack/nvim-spectre/master/build.sh&#34;&gt;build.sh&lt;/a&gt; &lt;a href=&#34;https://github.com/noib3/nvim-oxi&#34;&gt;nvim-oxi&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;set default replace command to &lt;code&gt;&#34;oxi&#34;&lt;/code&gt; on &lt;code&gt;setup()&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;spectre&#39;).setup({&#xA;    default = {&#xA;        replace = {&#xA;            cmd = &#34;oxi&#34;&#xA;       }&#xA;    }&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to everyone who sponsors my projects and makes continued development and maintenance possible!&lt;/p&gt; &#xA;&lt;!-- patreon --&gt;&#xA;&lt;a href=&#34;https://github.com/t4t5&#34;&gt;&lt;img src=&#34;https://github.com/t4t5.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;!-- patreon--&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How can I add a custom status line? &lt;a href=&#34;https://github.com/windwp/windline.nvim&#34;&gt;windline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#39;windline&#39;).add_status(&#xA;        require(&#39;spectre.state_utils&#39;).status_line()&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What if I have remapped keys in my neovim config?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/nvim-pack/nvim-spectre/raw/1abe23ec9b7bc3082164f4cb842d521ef70e080e/lua/spectre/init.lua#L175&#34;&gt;Spectre hardcodes some mappings in order to work correctly&lt;/a&gt;. You can remap them as described above. You are allowed to create as many mappings as you want. For name and description choose any value. &#39;map&#39; and &#39;cmd&#39; are the only important fields.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why is it called Spectre?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I wanted to call it &lt;code&gt;Search Panel&lt;/code&gt; but this name is not cool.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I got the name of a hero on a game.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Spectre has a skill to find enemy on global map so I use it:)&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>