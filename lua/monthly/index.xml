<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:54:02Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-lua/kickstart.nvim</title>
    <updated>2023-01-01T01:54:02Z</updated>
    <id>tag:github.com,2023-01-01:/nvim-lua/kickstart.nvim</id>
    <link href="https://github.com/nvim-lua/kickstart.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A launch point for your personal nvim configuration&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;A starting point for Neovim that is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Small (~370 lines)&lt;/li&gt; &#xA; &lt;li&gt;Single-file&lt;/li&gt; &#xA; &lt;li&gt;Documented&lt;/li&gt; &#xA; &lt;li&gt;Modular&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Kickstart.nvim targets &lt;em&gt;only&lt;/em&gt; the latest &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/stable&#34;&gt;&#39;stable&#39;&lt;/a&gt; and latest &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/nightly&#34;&gt;&#39;nightly&#39;&lt;/a&gt; of Neovim. If you are experiencing issues, please make sure you have the latest versions.&lt;/p&gt; &#xA;&lt;p&gt;This repo is meant to be used as a starting point for a user&#39;s own configuration; remove the things you don&#39;t use and add what you miss. Please refrain from leaving comments about enabling / disabling particular languages out of the box.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backup your previous configuration&lt;/li&gt; &#xA; &lt;li&gt;Copy and paste the kickstart.nvim &lt;code&gt;init.lua&lt;/code&gt; into &lt;code&gt;$HOME/.config/nvim/init.lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start Neovim (&lt;code&gt;nvim&lt;/code&gt;) and run &lt;code&gt;:PackerInstall&lt;/code&gt; - ignore any error message about missing plugins, &lt;code&gt;:PackerInstall&lt;/code&gt; will fix that shortly&lt;/li&gt; &#xA; &lt;li&gt;Restart Neovim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If there are languages that you don&#39;t want to use, remove their configuration and notes from your &lt;code&gt;init.lua&lt;/code&gt; after copy and pasting (for example, in the mason configuration).&lt;/p&gt; &#xA;&lt;h3&gt;Windows Installation&lt;/h3&gt; &#xA;&lt;p&gt;Installation may require installing build tools, and updating the run command for &lt;code&gt;telescope-fzf-native&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;telescope-fzf-native&lt;/code&gt; documention for &lt;a href=&#34;https://github.com/nvim-telescope/telescope-fzf-native.nvim#installation&#34;&gt;more details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install CMake, and the Microsoft C++ Build Tools on Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#39;nvim-telescope/telescope-fzf-native.nvim&#39;, run = &#39;cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release &amp;amp;&amp;amp; cmake --build build --config Release &amp;amp;&amp;amp; cmake --install build --prefix build&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You could directly modify the &lt;code&gt;init.lua&lt;/code&gt; file with your personal customizations. This option is the most straightforward, but if you update your config from this repo, you may need to reapply your changes.&lt;/p&gt; &#xA;&lt;p&gt;An alternative approach is to create a separate &lt;code&gt;custom.plugins&lt;/code&gt; module to register your own plugins. In addition, you can handle further customizations in the &lt;code&gt;/after/plugin/&lt;/code&gt; directory (see &lt;code&gt;:help load-plugins&lt;/code&gt;). See the following examples for more information. Leveraging this technique should make upgrading to a newer version of this repo easier.&lt;/p&gt; &#xA;&lt;h4&gt;Example &lt;code&gt;plugins.lua&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The following is an example of a &lt;code&gt;plugins.lua&lt;/code&gt; module (located at &lt;code&gt;$HOME/.config/nvim/lua/custom/plugins.lua&lt;/code&gt;) where you can register your own plugins.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return function(use)&#xA;  use({&#xA;    &#34;folke/which-key.nvim&#34;,&#xA;      config = function()&#xA;        require(&#34;which-key&#34;).setup({})&#xA;      end&#xA;  })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example &lt;code&gt;defaults.lua&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For further customizations, you can add a file in the &lt;code&gt;/after/plugin/&lt;/code&gt; folder (see &lt;code&gt;:help load-plugins&lt;/code&gt;) to include your own options, keymaps, autogroups, and more. The following is an example &lt;code&gt;defaults.lua&lt;/code&gt; file (located at &lt;code&gt;$HOME/.config/nvim/after/plugin/defaults.lua&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.relativenumber = true&#xA;&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;sr&#39;, require(&#39;telescope.builtin&#39;).resume, { desc = &#39;[S]earch [R]esume&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Pull-requests are welcome. The goal of this repo is not to create a Neovim configuration framework, but to offer a starting template that shows, by example, available features in Neovim. Some things that will not be included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom language server configuration (null-ls templates)&lt;/li&gt; &#xA; &lt;li&gt;Theming beyond a default colorscheme necessary for LSP highlight groups&lt;/li&gt; &#xA; &lt;li&gt;Lazy-loading. Kickstart.nvim should start within 40 ms on modern hardware. Please profile and contribute to upstream plugins to optimize startup time instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each PR, especially those which increase the line count, should have a description as to why the PR is necessary.&lt;/p&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What should I do if I already have a pre-existing neovim configuration? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You should back it up, then delete all files associated with it.&lt;/li&gt; &#xA;   &lt;li&gt;This includes your existing init.lua and the neovim files in &lt;code&gt;.local&lt;/code&gt; which can be deleted with &lt;code&gt;rm -rf ~/.local/share/nvim/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-telescope/telescope.nvim</title>
    <updated>2023-01-01T01:54:02Z</updated>
    <id>tag:github.com,2023-01-01:/nvim-telescope/telescope.nvim</id>
    <link href="https://github.com/nvim-telescope/telescope.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find, Filter, Preview, Pick. All lua, all the time.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;telescope.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/nvim-telescope/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/nvim-telescope/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gaze deeply into unknown regions using the power of the moon.&lt;/p&gt; &#xA;&lt;h2&gt;What Is Telescope?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;telescope.nvim&lt;/code&gt; is a highly extendable fuzzy finder over lists. Built on the latest awesome features from &lt;code&gt;neovim&lt;/code&gt; core. Telescope is centered around modularity, allowing for easy customization.&lt;/p&gt; &#xA;&lt;p&gt;Community driven builtin &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;pickers&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#sorters&#34;&gt;sorters&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#previewers&#34;&gt;previewers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TTTja6t.gif&#34; alt=&#34;Preview&#34;&gt; &lt;sub&gt;For more showcases of Telescope, please visit the &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Showcase&#34;&gt;Showcase section&lt;/a&gt; in the Telescope Wiki&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Telescope Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#default-mappings&#34;&gt;Default Mappings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;Pickers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#previewers&#34;&gt;Previewers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#sorters&#34;&gt;Sorters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#layout-display&#34;&gt;Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#themes&#34;&gt;Themes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#vim-commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#autocmds&#34;&gt;Autocmds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#media&#34;&gt;Media&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/raw/master/doc/telescope_changelog.txt&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This section should guide you to run your first builtin pickers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.7.0&#34;&gt;Neovim (v0.7.0)&lt;/a&gt; or the latest neovim nightly commit is required for &lt;code&gt;telescope.nvim&lt;/code&gt; to work.&lt;/p&gt; &#xA;&lt;h3&gt;Required dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;nvim-lua/plenary.nvim&lt;/a&gt; is required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Suggested dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;BurntSushi/ripgrep&lt;/a&gt; is required for &lt;code&gt;live_grep&lt;/code&gt; and &lt;code&gt;grep_string&lt;/code&gt; and is the first priority for &lt;code&gt;find_files&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also suggest you install one native telescope sorter to significantly improve sorting performance. Take a look at either &lt;a href=&#34;https://github.com/nvim-telescope/telescope-fzf-native.nvim&#34;&gt;telescope-fzf-native.nvim&lt;/a&gt; or &lt;a href=&#34;https://github.com/nvim-telescope/telescope-fzy-native.nvim&#34;&gt;telescope-fzy-native.nvim&lt;/a&gt;. For more information and a performance benchmark take a look at the &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Extensions&#34;&gt;Extensions&lt;/a&gt; wiki.&lt;/p&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;sharkdp/fd&lt;/a&gt; (finder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter/nvim-treesitter&lt;/a&gt; (finder/preview)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;neovim LSP&lt;/a&gt; (picker)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;devicons&lt;/a&gt; (icons)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;It is suggested to either use the latest release &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/tags&#34;&gt;tag&lt;/a&gt; or our release branch (which will get consistent updates) &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/tree/0.1.x&#34;&gt;0.1.x&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is not suggested to run latest master.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;nvim-telescope/telescope.nvim&#39;, { &#39;tag&#39;: &#39;0.1.0&#39; }&#xA;&#34; or                                , { &#39;branch&#39;: &#39;0.1.x&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;dein&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;call dein#add(&#39;nvim-lua/plenary.nvim&#39;)&#xA;call dein#add(&#39;nvim-telescope/telescope.nvim&#39;, { &#39;rev&#39;: &#39;0.1.0&#39; })&#xA;&#34; or                                         , { &#39;rev&#39;: &#39;0.1.x&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;nvim-telescope/telescope.nvim&#39;, tag = &#39;0.1.0&#39;,&#xA;-- or                            , branch = &#39;0.1.x&#39;,&#xA;  requires = { {&#39;nvim-lua/plenary.nvim&#39;} }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;checkhealth&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you call &lt;code&gt;:checkhealth telescope&lt;/code&gt; after installing telescope to ensure everything is set up correctly.&lt;/p&gt; &#xA;&lt;p&gt;After this setup you can continue reading here or switch to &lt;code&gt;:help telescope&lt;/code&gt; to get an understanding of how to use Telescope and how to configure it.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Try the command &lt;code&gt;:Telescope find_files&amp;lt;cr&amp;gt;&lt;/code&gt; to see if &lt;code&gt;telescope.nvim&lt;/code&gt; is installed correctly.&lt;/p&gt; &#xA;&lt;p&gt;Using VimL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;&#34; Find files using Telescope command-line sugar.&#xA;nnoremap &amp;lt;leader&amp;gt;ff &amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fg &amp;lt;cmd&amp;gt;Telescope live_grep&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fb &amp;lt;cmd&amp;gt;Telescope buffers&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fh &amp;lt;cmd&amp;gt;Telescope help_tags&amp;lt;cr&amp;gt;&#xA;&#xA;&#34; Using Lua functions&#xA;nnoremap &amp;lt;leader&amp;gt;ff &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).find_files()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fg &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).live_grep()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fb &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).buffers()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fh &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).help_tags()&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local builtin = require(&#39;telescope.builtin&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;ff&#39;, builtin.find_files, {})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;fg&#39;, builtin.live_grep, {})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;fb&#39;, builtin.buffers, {})&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;fh&#39;, builtin.help_tags, {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;builtin pickers&lt;/a&gt; for a list of all builtin functions.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;This section should help you explore available options to configure and customize your &lt;code&gt;telescope.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike most vim plugins, &lt;code&gt;telescope.nvim&lt;/code&gt; can be customized by either applying customizations globally, or individually per picker.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Global Customization&lt;/strong&gt; affecting all pickers can be done through the main &lt;code&gt;setup()&lt;/code&gt; method (see defaults below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Individual Customization&lt;/strong&gt; affecting a single picker by passing &lt;code&gt;opts&lt;/code&gt; to builtin pickers (e.g. &lt;code&gt;builtin.find_files(opts)&lt;/code&gt;) see &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Configuration-Recipes&#34;&gt;Configuration recipes&lt;/a&gt; wiki page for ideas.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Telescope setup structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup{&#xA;  defaults = {&#xA;    -- Default configuration for telescope goes here:&#xA;    -- config_key = value,&#xA;    mappings = {&#xA;      i = {&#xA;        -- map actions.which_key to &amp;lt;C-h&amp;gt; (default: &amp;lt;C-/&amp;gt;)&#xA;        -- actions.which_key shows the mappings for your picker,&#xA;        -- e.g. git_{create, delete, ...}_branch for the git_branches picker&#xA;        [&#34;&amp;lt;C-h&amp;gt;&#34;] = &#34;which_key&#34;&#xA;      }&#xA;    }&#xA;  },&#xA;  pickers = {&#xA;    -- Default configuration for builtin pickers goes here:&#xA;    -- picker_name = {&#xA;    --   picker_config_key = value,&#xA;    --   ...&#xA;    -- }&#xA;    -- Now the picker_config_key will be applied every time you call this&#xA;    -- builtin picker&#xA;  },&#xA;  extensions = {&#xA;    -- Your extension configuration goes here:&#xA;    -- extension_name = {&#xA;    --   extension_config_key = value,&#xA;    -- }&#xA;    -- please take a look at the readme of the extension you want to configure&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To look at what default configuration options exist please read: &lt;code&gt;:help telescope.setup()&lt;/code&gt;. For picker specific &lt;code&gt;opts&lt;/code&gt; please read: &lt;code&gt;:help telescope.builtin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To embed the above code snippet in a &lt;code&gt;.vim&lt;/code&gt; file (for example in &lt;code&gt;after/plugin/telescope.nvim.vim&lt;/code&gt;), wrap it in &lt;code&gt;lua &amp;lt;&amp;lt; EOF code-snippet EOF&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;telescope&#39;).setup{&#xA;  -- ...&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default Mappings&lt;/h2&gt; &#xA;&lt;p&gt;Mappings are fully customizable. Many familiar mapping patterns are set up as defaults.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mappings&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-n&amp;gt;/&amp;lt;Down&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Next item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-p&amp;gt;/&amp;lt;Up&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Previous item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;j/k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Next/previous (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;H/M/L&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select High/Middle/Low (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gg/G&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select the first/last item (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Confirm selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-x&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to file selection as a split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-v&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to file selection as a vsplit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to a file in a new tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-u&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scroll up in preview window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-d&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scroll down in preview window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-/&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show mappings for picker actions (insert mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show mappings for picker actions (normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close telescope (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle selection and move to next selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle selection and move to prev selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-q&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send all items not filtered to quickfixlist (qflist)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;M-q&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send all selected items to qflist&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To see the full list of mappings, check out &lt;code&gt;lua/telescope/mappings.lua&lt;/code&gt; and the &lt;code&gt;default_mappings&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: you can use &lt;code&gt;&amp;lt;C-/&amp;gt;&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; in insert and normal mode, respectively, to show the actions mapped to your picker.&lt;/p&gt; &#xA;&lt;p&gt;Much like &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;builtin pickers&lt;/a&gt;, there are a number of &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/raw/master/lua/telescope/actions/init.lua&#34;&gt;actions&lt;/a&gt; you can pick from to remap your telescope buffer mappings, or create a new custom action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Built-in actions&#xA;local transform_mod = require(&#39;telescope.actions.mt&#39;).transform_mod&#xA;&#xA;-- or create your custom action&#xA;local my_cool_custom_action = transform_mod({&#xA;  x = function(prompt_bufnr)&#xA;    print(&#34;This function ran after another action. Prompt_bufnr: &#34; .. prompt_bufnr)&#xA;    -- Enter your function logic here. You can take inspiration from lua/telescope/actions.lua&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remap telescope mappings, please read &lt;code&gt;:help telescope.defaults.mappings&lt;/code&gt;. To do picker specific mappings, its suggested to do this with the &lt;code&gt;pickers&lt;/code&gt; table in &lt;code&gt;telescope.setup&lt;/code&gt;. Each picker accepts a &lt;code&gt;mappings&lt;/code&gt; table like its explained in &lt;code&gt;:help telescope.defaults.mappings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pickers&lt;/h2&gt; &#xA;&lt;p&gt;Built-in functions. Ready to be bound to any key you like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:lua require&#39;telescope.builtin&#39;.planets{}&#xA;&#xA;:nnoremap &amp;lt;Leader&amp;gt;pp :lua require&#39;telescope.builtin&#39;.planets{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.find_files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists files in your current working directory, respects .gitignore&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fuzzy search through the output of &lt;code&gt;git ls-files&lt;/code&gt; command, respects .gitignore&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.grep_string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Searches for the string under your cursor in your current working directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.live_grep&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search for a string in your current working directory and get results live as you type, respects .gitignore&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Vim Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.buffers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists open buffers in current neovim instance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.oldfiles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists previously open files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.commands&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists available plugin/user commands and runs them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists tags in current directory with tag location file preview (users are required to run ctags -R to generate tags or update when introducing new changes)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.command_history&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists commands that were executed recently, and reruns them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.search_history&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists searches that were executed recently, and reruns them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.help_tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists available help tags and opens a new window with the relevant help info on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.man_pages&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists manpage entries, opens them in a help window on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.marks&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim marks and their value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.colorscheme&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists available colorschemes and applies them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.quickfix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists items in the quickfix list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.quickfixhistory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all quickfix lists in your history and open them with &lt;code&gt;builtin.quickfix&lt;/code&gt; or quickfix window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.loclist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists items from the current window&#39;s location list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.jumplist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Jump List entries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.vim_options&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim options, allows you to edit the current value on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.registers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim registers, pastes the contents of the register on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.autocommands&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim autocommands and goes to their declaration on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.spell_suggest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists spelling suggestions for the current word under the cursor, replaces word with selected suggestion on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.keymaps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists normal mode keymappings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.filetypes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all available filetypes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.highlights&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all available highlights&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.current_buffer_fuzzy_find&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Live fuzzy search inside of the currently open buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.current_buffer_tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all of the tags for the currently open buffer, with a preview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.resume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists the results incl. multi-selections of the previous picker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.pickers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists the previous pickers incl. multi-selections (see &lt;code&gt;:h telescope.defaults.cache_picker&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Neovim LSP Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_references&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP references for word under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_incoming_calls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP incoming calls for word under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_outgoing_calls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP outgoing calls for word under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_document_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP document symbols in the current buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_workspace_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP document symbols in the current workspace&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_dynamic_workspace_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dynamically Lists LSP for all workspace symbols&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.diagnostics&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Diagnostics for all open buffers or a specific buffer. Use option &lt;code&gt;bufnr=0&lt;/code&gt; for current buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_implementations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Goto the implementation of the word under the cursor if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_definitions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Goto the definition of the word under the cursor, if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_type_definitions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Goto the definition of the type of the word under the cursor, if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Git Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_commits&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists git commits with diff preview, checkout action &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;, reset mixed &lt;code&gt;&amp;lt;C-r&amp;gt;m&lt;/code&gt;, reset soft &lt;code&gt;&amp;lt;C-r&amp;gt;s&lt;/code&gt; and reset hard &lt;code&gt;&amp;lt;C-r&amp;gt;h&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_bcommits&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists buffer&#39;s git commits with diff preview and checks them out on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_branches&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all branches with log preview, checkout action &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;, track action &lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt; and rebase action&lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_status&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists current changes per file with diff preview and add action. (Multi-selection still WIP)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_stash&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists stash items in current repository with ability to apply them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Treesitter Picker&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.treesitter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Function names, variables, from Treesitter!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Lists Picker&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.planets&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the telescope...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.builtin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Built-in pickers and run them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.reloader&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Lua modules and reload them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists symbols inside a file &lt;code&gt;data/telescope-sources/*.json&lt;/code&gt; found in your rtp. More info and symbol sources can be found &lt;a href=&#34;https://github.com/nvim-telescope/telescope-symbols.nvim&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Previewers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Previewers&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_cat.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default previewer for files. Uses vim buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_vimgrep.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default previewer for grep and similar. Uses vim buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_qflist.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default previewer for qflist. Uses vim buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.cat.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Terminal previewer for files. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vimgrep.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Terminal previewer for grep and similar. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.qflist.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Terminal previewer for qflist. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The default previewers are from now on &lt;code&gt;vim_buffer_&lt;/code&gt; previewers. They use vim buffers for displaying files and use tree-sitter or regex for file highlighting.&lt;/p&gt; &#xA;&lt;p&gt;These previewers are guessing the filetype of the selected file, so there might be cases where they miss, leading to wrong highlights. This is because we can&#39;t determine the filetype in the traditional way: We don&#39;t do &lt;code&gt;bufload&lt;/code&gt; and instead read the file asynchronously with &lt;code&gt;vim.loop.fs_&lt;/code&gt; and attach only a highlighter; otherwise the speed of the previewer would slow down considerably. If you want to configure more filetypes, take a look at &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim#plenaryfiletype&#34;&gt;plenary wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to configure the &lt;code&gt;vim_buffer_&lt;/code&gt; previewer (e.g. you want the line to wrap), do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;autocmd User TelescopePreviewerLoaded setlocal wrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sorters&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sorters&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_fuzzy_file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Telescope&#39;s default sorter for files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_generic_fuzzy_sorter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Telescope&#39;s default sorter for everything else&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_levenshtein_sorter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using Levenshtein distance algorithm (don&#39;t use :D)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_fzy_sorter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using fzy algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.fuzzy_with_index_bias&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Used to list stuff with consideration to when the item is added&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A &lt;code&gt;Sorter&lt;/code&gt; is called by the &lt;code&gt;Picker&lt;/code&gt; on each item returned by the &lt;code&gt;Finder&lt;/code&gt;. It returns a number, which is equivalent to the &#34;distance&#34; between the current &lt;code&gt;prompt&lt;/code&gt; and the &lt;code&gt;entry&lt;/code&gt; returned by a &lt;code&gt;finder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Layout (display)&lt;/h2&gt; &#xA;&lt;p&gt;Layout can be configured by choosing a specific &lt;code&gt;layout_strategy&lt;/code&gt; and specifying a particular &lt;code&gt;layout_config&lt;/code&gt; for that strategy. For more details on available strategies and configuration options, see &lt;code&gt;:help telescope.layout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some options for configuring sizes in layouts are &#34;resolvable&#34;. This means that they can take different forms, and will be interpreted differently according to which form they take. For example, if we wanted to set the &lt;code&gt;width&lt;/code&gt; of a picker using the &lt;code&gt;vertical&lt;/code&gt; layout strategy to 50% of the screen width, we would specify that width as &lt;code&gt;0.5&lt;/code&gt;, but if we wanted to specify the &lt;code&gt;width&lt;/code&gt; to be exactly 80 characters wide, we would specify it as &lt;code&gt;80&lt;/code&gt;. For more details on resolving sizes, see &lt;code&gt;:help telescope.resolve&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example, if we wanted to specify the layout strategy and width, but only for this instance, we could do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:lua require(&#39;telescope.builtin&#39;).find_files({layout_strategy=&#39;vertical&#39;,layout_config={width=0.5}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we wanted to change the width for every time we use the &lt;code&gt;vertical&lt;/code&gt; layout strategy, we could add the following to our &lt;code&gt;setup()&lt;/code&gt; call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup({&#xA;  defaults = {&#xA;    layout_config = {&#xA;      vertical = { width = 0.5 }&#xA;      -- other layout configuration here&#xA;    },&#xA;    -- other defaults configuration here&#xA;  },&#xA;  -- other configuration values here&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;p&gt;Common groups of settings can be set up to allow for themes. We have some built in themes but are looking for more cool options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/SorAcXv.png&#34; alt=&#34;dropdown&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Themes&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;themes.get_dropdown&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list like centered list. &lt;a href=&#34;https://i.imgur.com/SorAcXv.png&#34;&gt;dropdown&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;themes.get_cursor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/pull/878&#34;&gt;A cursor relative list.&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;themes.get_ivy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bottom panel overlay. &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/pull/771&#34;&gt;Ivy #771&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To use a theme, simply append it to a builtin function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;Leader&amp;gt;f :lua require&#39;telescope.builtin&#39;.find_files(require(&#39;telescope.themes&#39;).get_dropdown({}))&amp;lt;cr&amp;gt;&#xA;&#34; Change an option&#xA;nnoremap &amp;lt;Leader&amp;gt;f :lua require&#39;telescope.builtin&#39;.find_files(require(&#39;telescope.themes&#39;).get_dropdown({ winblend = 10 }))&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use with a command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Telescope find_files theme=dropdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can configure it in the pickers table in &lt;code&gt;telescope.setup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup{&#xA;  defaults = {&#xA;    -- ...&#xA;  },&#xA;  pickers = {&#xA;    find_files = {&#xA;      theme = &#34;dropdown&#34;,&#xA;    }&#xA;  },&#xA;  extensions = {&#xA;    -- ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Themes should work with every &lt;code&gt;telescope.builtin&lt;/code&gt; function. If you wish to make a theme, check out &lt;code&gt;lua/telescope/themes.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Vim Commands&lt;/h2&gt; &#xA;&lt;p&gt;All &lt;code&gt;telescope.nvim&lt;/code&gt; functions are wrapped in &lt;code&gt;vim&lt;/code&gt; commands for easy access, tab completions and setting options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;&#34; Show all builtin pickers&#xA;:Telescope&#xA;&#xA;&#34; Tab completion&#xA;:Telescope |&amp;lt;tab&amp;gt;&#xA;:Telescope find_files&#xA;&#xA;&#34; Setting options&#xA;:Telescope find_files prompt_prefix=🔍&#xA;&#xA;&#34; If the option accepts a Lua table as its value, you can use, to connect each&#xA;&#34; command string, e.g.: find_command, vimgrep_arguments are both options that&#xA;&#34; accept a Lua table as a value. So, you can configure them on the command line&#xA;&#34;like so:&#xA;:Telescope find_files find_command=rg,--ignore,--hidden,--files prompt_prefix=🔍&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for more information and how to realize more complex commands please read &lt;code&gt;:help telescope.command&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Autocmds&lt;/h2&gt; &#xA;&lt;p&gt;Telescope user autocmds:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Event&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;User TelescopeFindPre&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do it before Telescope creates all the floating windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;User TelescopePreviewerLoaded&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do it after Telescope previewer window is created&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Telescope provides the capabilities to create &amp;amp; register extensions, which improves telescope in a variety of ways.&lt;/p&gt; &#xA;&lt;p&gt;Some extensions provide integration with external tools, outside of the scope of &lt;code&gt;builtins&lt;/code&gt;. Others provide performance enhancements by using compiled C and interfacing directly with Lua over LuaJIT&#39;s FFI library.&lt;/p&gt; &#xA;&lt;p&gt;A list of community extensions can be found in the &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Extensions&#34;&gt;Extensions&lt;/a&gt; wiki. Always read the README of the extension you want to install, but here is a general overview of how most extensions work.&lt;/p&gt; &#xA;&lt;h3&gt;Loading extensions&lt;/h3&gt; &#xA;&lt;p&gt;To load an extension, use the &lt;code&gt;load_extension&lt;/code&gt; function as shown in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- This will load fzy_native and have it override the default file sorter&#xA;require(&#39;telescope&#39;).load_extension(&#39;fzy_native&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may skip explicitly loading extensions (they will then be lazy-loaded), but tab completions will not be available right away.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing pickers from extensions&lt;/h3&gt; &#xA;&lt;p&gt;Pickers from extensions are added to the &lt;code&gt;:Telescope&lt;/code&gt; command under their respective name. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;&#34; Run the `configurations` picker from nvim-dap&#xA;:Telescope dap configurations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They can also be called directly from Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Run the `configurations` picker from nvim-dap&#xA;require(&#39;telescope&#39;).extensions.dap.configurations()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;For writing your own picker and for information about the API please read the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/developers.md&#34;&gt;Developers Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Media&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/teej_dv/clip/RichDistinctPlumberPastaThat&#34;&gt;What is Telescope? (Video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/videos/756229115&#34;&gt;More advanced configuration (Video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=65AVwHZflsU&#34;&gt;Example video&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are welcome! Just open a pull request. Please read &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;fzf.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shougo/denite.nvim&#34;&gt;denite.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liuchengxu/vim-clap&#34;&gt;vim-clap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>williamboman/mason.nvim</title>
    <updated>2023-01-01T01:54:02Z</updated>
    <id>tag:github.com,2023-01-01:/williamboman/mason.nvim</id>
    <link href="https://github.com/williamboman/mason.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Portable package manager for Neovim that runs everywhere Neovim runs. Easily install and manage LSP servers, DAP servers, linters, and formatters.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/williamboman/mason.nvim/actions?query=workflow%3ATests+branch%3Amain+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/williamboman/mason.nvim/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-linux%20macOS%20windows-blue&#34; alt=&#34;Platforms&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/williamboman/mason.nvim&#34; alt=&#34;Repository size&#34;&gt; &lt;a href=&#34;https://github.com/sponsors/williamboman&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/williamboman?style=flat-square&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/177613416-0c0354d2-f431-40d8-87f0-21310f0bba0e.png&#34; alt=&#34;mason.nvim&#34;&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Portable package manager for Neovim that runs everywhere Neovim runs.&lt;br&gt; Easily install and manage LSP servers, DAP servers, linters, and formatters.&lt;br&gt; &lt;code&gt;:help mason.nvim&lt;/code&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#introduction&#34;&gt;Introduction&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#how-to-use-installed-packages&#34;&gt;How to use installed packages&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-introduction&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; is a Neovim plugin that allows you to easily manage external editor tooling such as LSP servers, DAP servers, linters, and formatters through a single interface. It runs everywhere Neovim runs (across Linux, macOS, Windows, etc.), with only a small set of &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#requirements&#34;&gt;external requirements&lt;/a&gt; needed.&lt;/p&gt; &#xA;&lt;p&gt;Packages are installed in Neovim&#39;s &lt;code&gt;:h stdpath&lt;/code&gt; by default. Executables are linked to a single &lt;code&gt;bin/&lt;/code&gt; directory, which &lt;code&gt;mason.nvim&lt;/code&gt; will add to Neovim&#39;s PATH during setup, allowing seamless access from Neovim builtins (shell, terminal, etc.) as well as other 3rd party plugins.&lt;/p&gt; &#xA;&lt;p&gt;For a list of all available packages, see &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/PACKAGES.md&#34;&gt;PACKAGES.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to use installed packages&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-how-to-use-packages&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Although many packages are perfectly usable out of the box through Neovim builtins, it is recommended to use other 3rd party plugins to further integrate these. The following plugins are recommended:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LSP: &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;lspconfig&lt;/code&gt;&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/williamboman/mason-lspconfig.nvim&#34;&gt;&lt;code&gt;mason-lspconfig.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DAP: &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linters: &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;&lt;code&gt;null-ls.nvim&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;&lt;code&gt;nvim-lint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Formatters: &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;&lt;code&gt;null-ls.nvim&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/mhartington/formatter.nvim&#34;&gt;&lt;code&gt;formatter.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;Main window&#34; src=&#34;https://user-images.githubusercontent.com/6705160/177617680-d62caf26-f253-4ace-ab57-4b590595adca.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/177617684-6bb4c13f-1235-4ac9-829e-120b06f7437b.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;Language filter&#34; src=&#34;https://user-images.githubusercontent.com/6705160/177617688-8f9ba225-00c8-495c-9c4c-b74240d6f280.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;LSP server configuration schema&#34; src=&#34;https://user-images.githubusercontent.com/6705160/177617692-02c6ddde-a97e-42b4-bca4-4f4caf45d569.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;Checking for new versions&#34; src=&#34;https://user-images.githubusercontent.com/6705160/180648183-69077d10-8795-4da6-ba4d-57ecf0cb25c9.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;Help window&#34; src=&#34;https://user-images.githubusercontent.com/6705160/180648292-136a0888-0fb6-4226-aa29-53bd3ffed400.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-requirements&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; relaxes the minimum requirements by attempting multiple different utilities (for example, &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, and &lt;code&gt;Invoke-WebRequest&lt;/code&gt; are all perfect substitutes). The &lt;em&gt;minimum&lt;/em&gt; recommended requirements are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Unix systems: &lt;code&gt;git(1)&lt;/code&gt;, &lt;code&gt;curl(1)&lt;/code&gt; or &lt;code&gt;wget(1)&lt;/code&gt;, &lt;code&gt;unzip(1)&lt;/code&gt;, &lt;code&gt;tar(1)&lt;/code&gt;, &lt;code&gt;gzip(1)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Windows systems: pwsh or powershell, git, tar, and &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; or &lt;a href=&#34;https://peazip.github.io/&#34;&gt;peazip&lt;/a&gt; or &lt;a href=&#34;https://github.com/mholt/archiver&#34;&gt;archiver&lt;/a&gt; or &lt;a href=&#34;https://www.winzip.com/&#34;&gt;winzip&lt;/a&gt; or &lt;a href=&#34;https://www.win-rar.com/&#34;&gt;WinRAR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;mason.nvim&lt;/code&gt; will regularly shell out to external package managers, such as &lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt;. Depending on your personal usage, some of these will also need to be installed. Refer to &lt;code&gt;:checkhealth mason&lt;/code&gt; for a full list.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;williamboman/mason.nvim&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;vim-plug&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;williamboman/mason.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-quickstart&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; is optimized to load as little as possible during setup. Lazy-loading the plugin, or somehow deferring the setup, is not recommended.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/williamboman/mason.nvim/wiki/Extensions&#34;&gt;Wiki&lt;/a&gt; for a list of 3rd party extensions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/mason-lspconfig.nvim&#34;&gt;&lt;code&gt;mason-lspconfig.nvim&lt;/code&gt;&lt;/a&gt; - recommended for usage with &lt;code&gt;lspconfig&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-commands&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Mason&lt;/code&gt; - opens a graphical status window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonInstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - installs/reinstalls the provided packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonUninstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - uninstalls the provided packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonUninstallAll&lt;/code&gt; - uninstalls all packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonLog&lt;/code&gt; - opens the &lt;code&gt;mason.nvim&lt;/code&gt; log file in a new tab window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;:h mason-settings&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You may optionally configure certain behavior of &lt;code&gt;mason.nvim&lt;/code&gt; when calling the &lt;code&gt;.setup()&lt;/code&gt; function. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#default-configuration&#34;&gt;default configuration&lt;/a&gt; for a list of all available settings.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup({&#xA;    ui = {&#xA;        icons = {&#xA;            package_installed = &#34;✓&#34;,&#xA;            package_pending = &#34;➜&#34;,&#xA;            package_uninstalled = &#34;✗&#34;&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local DEFAULT_SETTINGS = {&#xA;    -- The directory in which to install packages.&#xA;    install_root_dir = path.concat { vim.fn.stdpath &#34;data&#34;, &#34;mason&#34; },&#xA;&#xA;    -- Where Mason should put its bin location in your PATH. Can be one of:&#xA;    -- - &#34;prepend&#34; (default, Mason&#39;s bin location is put first in PATH)&#xA;    -- - &#34;append&#34; (Mason&#39;s bin location is put at the end of PATH)&#xA;    -- - &#34;skip&#34; (doesn&#39;t modify PATH)&#xA;    ---@type &#39;&#34;prepend&#34;&#39; | &#39;&#34;append&#34;&#39; | &#39;&#34;skip&#34;&#39;&#xA;    PATH = &#34;prepend&#34;,&#xA;&#xA;    pip = {&#xA;        -- Whether to upgrade pip to the latest version in the virtual environment before installing packages.&#xA;        upgrade_pip = false,&#xA;&#xA;        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior&#xA;        -- and is not recommended.&#xA;        --&#xA;        -- Example: { &#34;--proxy&#34;, &#34;https://proxyserver&#34; }&#xA;        install_args = {},&#xA;    },&#xA;&#xA;    -- Controls to which degree logs are written to the log file. It&#39;s useful to set this to vim.log.levels.DEBUG when&#xA;    -- debugging issues with package installations.&#xA;    log_level = vim.log.levels.INFO,&#xA;&#xA;    -- Limit for the maximum amount of packages to be installed at the same time. Once this limit is reached, any further&#xA;    -- packages that are requested to be installed will be put in a queue.&#xA;    max_concurrent_installers = 4,&#xA;&#xA;    github = {&#xA;        -- The template URL to use when downloading assets from GitHub.&#xA;        -- The placeholders are the following (in order):&#xA;        -- 1. The repository (e.g. &#34;rust-lang/rust-analyzer&#34;)&#xA;        -- 2. The release version (e.g. &#34;v0.3.0&#34;)&#xA;        -- 3. The asset name (e.g. &#34;rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz&#34;)&#xA;        download_url_template = &#34;https://github.com/%s/releases/download/%s/%s&#34;,&#xA;    },&#xA;&#xA;    -- The provider implementations to use for resolving package metadata (latest version, available versions, etc.).&#xA;    -- Accepts multiple entries, where later entries will be used as fallback should prior providers fail.&#xA;    -- Builtin providers are:&#xA;    --   - mason.providers.registry-api (default) - uses the https://api.mason-registry.dev API&#xA;    --   - mason.providers.client                 - uses only client-side tooling to resolve metadata&#xA;    providers = {&#xA;        &#34;mason.providers.registry-api&#34;,&#xA;    },&#xA;&#xA;    ui = {&#xA;        -- Whether to automatically check for new versions when opening the :Mason window.&#xA;        check_outdated_packages_on_open = true,&#xA;&#xA;        -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.&#xA;        border = &#34;none&#34;,&#xA;&#xA;        icons = {&#xA;            -- The list icon to use for installed packages.&#xA;            package_installed = &#34;◍&#34;,&#xA;            -- The list icon to use for packages that are installing, or queued for installation.&#xA;            package_pending = &#34;◍&#34;,&#xA;            -- The list icon to use for packages that are not installed.&#xA;            package_uninstalled = &#34;◍&#34;,&#xA;        },&#xA;&#xA;        keymaps = {&#xA;            -- Keymap to expand a package&#xA;            toggle_package_expand = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;            -- Keymap to install the package under the current cursor position&#xA;            install_package = &#34;i&#34;,&#xA;            -- Keymap to reinstall/update the package under the current cursor position&#xA;            update_package = &#34;u&#34;,&#xA;            -- Keymap to check for new version for the package under the current cursor position&#xA;            check_package_version = &#34;c&#34;,&#xA;            -- Keymap to update all installed packages&#xA;            update_all_packages = &#34;U&#34;,&#xA;            -- Keymap to check which installed packages are outdated&#xA;            check_outdated_packages = &#34;C&#34;,&#xA;            -- Keymap to uninstall a package&#xA;            uninstall_package = &#34;X&#34;,&#xA;            -- Keymap to cancel a package installation&#xA;            cancel_installation = &#34;&amp;lt;C-c&amp;gt;&#34;,&#xA;            -- Keymap to apply language filter&#xA;            apply_language_filter = &#34;&amp;lt;C-f&amp;gt;&#34;,&#xA;        },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;sup&gt; 👋 didn&#39;t find what you were looking for? Try looking in the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/doc/mason.txt&#34;&gt;help docs&lt;/a&gt; &lt;code&gt;:help mason.nvim&lt;/code&gt;! &lt;/sup&gt;</summary>
  </entry>
</feed>