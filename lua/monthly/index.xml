<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-01T01:57:07Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>EdenEast/nightfox.nvim</title>
    <updated>2025-02-01T01:57:07Z</updated>
    <id>tag:github.com,2025-02-01:/EdenEast/nightfox.nvim</id>
    <link href="https://github.com/EdenEast/nightfox.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦊A highly customizable theme for vim and neovim with support for lsp, treesitter and a variety of plugins.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;128&#34; height=&#34;128&#34; src=&#34;https://user-images.githubusercontent.com/2746374/179428323-6d6b5e7f-6459-47b3-9e03-fea7553d85af.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Nightfox&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/edeneast/nightfox.nvim/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/edeneast/nightfox.nvim?colorA=192330&amp;amp;colorB=719cd6&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/edeneast/nightfox.nvim/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/edeneast/nightfox.nvim?colorA=192330&amp;amp;colorB=dbc074&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/edeneast/nightfox.nvim/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/edeneast/nightfox.nvim?colorA=192330&amp;amp;colorB=81b29a&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/EdenEast/nightfox.nvim/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/edeneast/nightfox.nvim?colorA=192330&amp;amp;colorB=9d79d6&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A highly customizable theme for vim and neovim with support for lsp, treesitter and a variety of plugins. &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;Nightfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/158456286-9e3ee657-60e6-49d8-b85e-dcab285b31c3.png&#34; alt=&#34;nightfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Dayfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/210672782-6b8690d0-3ef5-4f32-bdea-4f0a97b9d9d5.png&#34; alt=&#34;dayfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Dawnfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/158456278-c5d656de-c445-44b8-9813-9fc91ffbce4c.png&#34; alt=&#34;dawnfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Duskfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/158456284-b6ff583f-c0bb-417c-b2d5-60b8364049a7.png&#34; alt=&#34;duskfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Nordfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/158456289-eee096df-7ea7-4161-9199-808fdba58e06.png&#34; alt=&#34;nordfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Terafox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/160268126-cd417690-3660-4a04-9040-183c35f127f7.png&#34; alt=&#34;terafox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA; &lt;h3&gt;Carbonfox&lt;/h3&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/183569670-91260cab-83a9-4247-8e09-6abb46c52152.png&#34; alt=&#34;carbonfox&#34; style=&#34;border-radius:1%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tabline is &lt;a href=&#34;https://github.com/nanozuki/tabby.nvim&#34;&gt;tabby.nvim&lt;/a&gt; and statusline is &lt;a href=&#34;https://github.com/freddiehaddad/feline.nvim&#34;&gt;feline.nvim&lt;/a&gt;. You can find my config for &lt;a href=&#34;https://github.com/EdenEast/nyx/raw/573ff3f22da95c00ec71a094b3e1ec166c0afcdd/config/.config/nvim/lua/eden/modules/ui/tabby.lua&#34;&gt;tabby&lt;/a&gt; and &lt;a href=&#34;https://github.com/EdenEast/nyx/raw/573ff3f22da95c00ec71a094b3e1ec166c0afcdd/config/.config/nvim/lua/eden/modules/ui/feline/init.lua&#34;&gt;feline&lt;/a&gt; here as well as the auto generated &lt;a href=&#34;https://github.com/EdenEast/nyx/raw/573ff3f22da95c00ec71a094b3e1ec166c0afcdd/config/.config/nvim/lua/eden/modules/ui/colors.lua&#34;&gt;highlight&lt;/a&gt; groups here. If you would like a single consumable file that contains that can be added to your own config check out &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/misc/feline.lua&#34;&gt;misc/feline.lua&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/misc/tabby.lua&#34;&gt;misc/tabby.lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports both vim and neovim&lt;/li&gt; &#xA; &lt;li&gt;Highly configurable with template overriding&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#colorblind&#34;&gt;Colorblind&lt;/a&gt; mode (daltonization, and simulation)&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#supported-plugins&#34;&gt;plugins&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#status-lines&#34;&gt;status lines&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;And many others should &#34;just work&#34;!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#compile&#34;&gt;Compile&lt;/a&gt; user&#39;s configuration for fast startup times&lt;/li&gt; &#xA; &lt;li&gt;Export &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#color-lib&#34;&gt;Color&lt;/a&gt; library utility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#interactive&#34;&gt;Interactive&lt;/a&gt; live config re-loading&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8 &lt;strong&gt;or&lt;/strong&gt; Vim 9 with lua = &lt;strong&gt;5.1+&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;True color support&lt;/li&gt; &#xA; &lt;li&gt;Undercurl terminal support (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note for MacOS: The default &lt;code&gt;terminal&lt;/code&gt; does not support &lt;code&gt;true color&lt;/code&gt;. Use either &lt;code&gt;Iterm2&lt;/code&gt; or &lt;a href=&#34;https://gist.github.com/XVilka/8346728#terminal-emulators&#34;&gt;another&lt;/a&gt; terminal that supports true color.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download with your favorite package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;EdenEast/nightfox.nvim&#34; } -- lazy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#34;EdenEast/nightfox.nvim&#34; -- Packer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;EdenEast/nightfox.nvim&#39; &#34; Vim-Plug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply set the colorscheme with the builtin command &lt;code&gt;:colorscheme&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;colorscheme nightfox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#34;colorscheme nightfox&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;There is no need to call &lt;code&gt;setup&lt;/code&gt; if you don&#39;t want to change the default options and settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Default options&#xA;require(&#39;nightfox&#39;).setup({&#xA;  options = {&#xA;    -- Compiled file&#39;s destination location&#xA;    compile_path = vim.fn.stdpath(&#34;cache&#34;) .. &#34;/nightfox&#34;,&#xA;    compile_file_suffix = &#34;_compiled&#34;, -- Compiled file suffix&#xA;    transparent = false,     -- Disable setting background&#xA;    terminal_colors = true,  -- Set terminal colors (vim.g.terminal_color_*) used in `:terminal`&#xA;    dim_inactive = false,    -- Non focused panes set to alternative background&#xA;    module_default = true,   -- Default enable value for modules&#xA;    colorblind = {&#xA;      enable = false,        -- Enable colorblind support&#xA;      simulate_only = false, -- Only show simulated colorblind colors and not diff shifted&#xA;      severity = {&#xA;        protan = 0,          -- Severity [0,1] for protan (red)&#xA;        deutan = 0,          -- Severity [0,1] for deutan (green)&#xA;        tritan = 0,          -- Severity [0,1] for tritan (blue)&#xA;      },&#xA;    },&#xA;    styles = {               -- Style to be applied to different syntax groups&#xA;      comments = &#34;NONE&#34;,     -- Value is any valid attr-list value `:help attr-list`&#xA;      conditionals = &#34;NONE&#34;,&#xA;      constants = &#34;NONE&#34;,&#xA;      functions = &#34;NONE&#34;,&#xA;      keywords = &#34;NONE&#34;,&#xA;      numbers = &#34;NONE&#34;,&#xA;      operators = &#34;NONE&#34;,&#xA;      strings = &#34;NONE&#34;,&#xA;      types = &#34;NONE&#34;,&#xA;      variables = &#34;NONE&#34;,&#xA;    },&#xA;    inverse = {             -- Inverse highlight for different types&#xA;      match_paren = false,&#xA;      visual = false,&#xA;      search = false,&#xA;    },&#xA;    modules = {             -- List of various plugins and additional options&#xA;      -- ...&#xA;    },&#xA;  },&#xA;  palettes = {},&#xA;  specs = {},&#xA;  groups = {},&#xA;})&#xA;&#xA;-- setup must be called before loading&#xA;vim.cmd(&#34;colorscheme nightfox&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to change any of the default options above you only have to define the options that change. If an option is not present in your options table the default option will be used. For example if changing the styles of certain syntax is the only desired change then your options table would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nightfox&#39;).setup({&#xA;  options = {&#xA;    styles = {&#xA;      comments = &#34;italic&#34;,&#xA;      keywords = &#34;bold&#34;,&#xA;      types = &#34;italic,bold&#34;,&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see a detailed explanation of nightfox&#39;s config settings consult either the builtin help &lt;code&gt;:help nightfox&lt;/code&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md&#34;&gt;Usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;p&gt;Nightfox&#39;s modules store configuration information for various plugins and other neovim modules. To enable a module either set the module to &lt;code&gt;true&lt;/code&gt; or if the module has additional configuration information set &lt;code&gt;enable&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default modules will be enabled. To change this behaviour change &lt;code&gt;options.module_default&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To see a list of modules check, see &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md#module&#34;&gt;Usage&lt;/a&gt; or &lt;code&gt;:help&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Customize palettes and groups&lt;/h3&gt; &#xA;&lt;p&gt;You can change the color &lt;code&gt;palette&lt;/code&gt; and the highlight &lt;code&gt;group&lt;/code&gt; of nightfox. Here is a brief example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Palettes are the base color defines of a colorscheme.&#xA;-- You can override these palettes for each colorscheme defined by nightfox.&#xA;local palettes = {&#xA;  -- Everything defined under `all` will be applied to each style.&#xA;  all = {&#xA;    -- Each palette defines these colors:&#xA;    --   black, red, green, yellow, blue, magenta, cyan, white, orange, pink&#xA;    --&#xA;    -- These colors have 3 shades: base, bright, and dim&#xA;    --&#xA;    -- Defining just a color defines it&#39;s base color&#xA;    red = &#34;#ff0000&#34;,&#xA;  },&#xA;  nightfox = {&#xA;    -- A specific style&#39;s value will be used over the `all`&#39;s value&#xA;    red = &#34;#c94f6d&#34;,&#xA;  },&#xA;  dayfox = {&#xA;    -- Defining multiple shades is done by passing a table&#xA;    blue = { base = &#34;#4d688e&#34;, bright = &#34;#4e75aa&#34;, dim = &#34;#485e7d&#34; },&#xA;  },&#xA;  nordfox = {&#xA;    -- A palette also defines the following:&#xA;    --   bg0, bg1, bg2, bg3, bg4, fg0, fg1, fg2, fg3, sel0, sel1, comment&#xA;    --&#xA;    -- These are the different foreground and background shades used by the theme.&#xA;    -- The base bg and fg is 1, 0 is normally the dark alternative. The others are&#xA;    -- incrementally lighter versions.&#xA;    bg1 = &#34;#2e3440&#34;,&#xA;&#xA;    -- sel is different types of selection colors.&#xA;    sel0 = &#34;#3e4a5b&#34;, -- Popup bg, visual selection bg&#xA;    sel1 = &#34;#4f6074&#34;, -- Popup sel bg, search bg&#xA;&#xA;    -- comment is the definition of the comment color.&#xA;    comment = &#34;#60728a&#34;,&#xA;  },&#xA;}&#xA;&#xA;-- Spec&#39;s (specifications) are a mapping of palettes to logical groups that will be&#xA;-- used by the groups. Some examples of the groups that specs map would be:&#xA;--   - syntax groups (functions, types, keywords, ...)&#xA;--   - diagnostic groups (error, warning, info, hints)&#xA;--   - git groups (add, removed, changed)&#xA;--&#xA;-- You can override these just like palettes&#xA;local specs = {&#xA;  -- As with palettes, the values defined under `all` will be applied to every style.&#xA;  all = {&#xA;    syntax = {&#xA;      -- Specs allow you to define a value using either a color or template. If the string does&#xA;      -- start with `#` the string will be used as the path of the palette table. Defining just&#xA;      -- a color uses the base version of that color.&#xA;      keyword = &#34;magenta&#34;,&#xA;&#xA;      -- Adding either `.bright` or `.dim` will change the value&#xA;      conditional = &#34;magenta.bright&#34;,&#xA;      number = &#34;orange.dim&#34;,&#xA;    },&#xA;    git = {&#xA;      -- A color define can also be used&#xA;      changed = &#34;#f4a261&#34;,&#xA;    },&#xA;  },&#xA;  nightfox = {&#xA;    syntax = {&#xA;      -- As with palettes, a specific style&#39;s value will be used over the `all`&#39;s value.&#xA;      operator = &#34;orange&#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&#xA;-- Groups are the highlight group definitions. The keys of this table are the name of the highlight&#xA;-- groups that will be overridden. The value is a table with the following values:&#xA;--   - fg, bg, style, sp, link,&#xA;--&#xA;-- Just like `spec` groups support templates. This time the template is based on a spec object.&#xA;local groups = {&#xA;  -- As with specs and palettes, the values defined under `all` will be applied to every style.&#xA;  all = {&#xA;    -- If `link` is defined it will be applied over any other values defined&#xA;    Whitespace = { link = &#34;Comment&#34; },&#xA;&#xA;    -- Specs are used for the template. Specs have their palette&#39;s as a field that can be accessed&#xA;    IncSearch = { bg = &#34;palette.cyan&#34; },&#xA;  },&#xA;  nightfox = {&#xA;    -- As with specs and palettes, a specific style&#39;s value will be used over the `all`&#39;s value.&#xA;    PmenuSel = { bg = &#34;#73daca&#34;, fg = &#34;bg0&#34; },&#xA;  },&#xA;}&#xA;&#xA;require(&#34;nightfox&#34;).setup({ palettes = palettes, specs = specs, groups = groups })&#xA;&#xA;-- setup must be called before loading&#xA;vim.cmd(&#34;colorscheme nightfox&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To find the list of syntax highlight groups defined for vim use the help &lt;code&gt;:help group-name&lt;/code&gt; and &lt;code&gt;:help nvim-treesitter-highlights&lt;/code&gt; for treesitter. If you would also like to see how nightfox defines these highlight groups you can see &lt;a href=&#34;https://github.com/EdenEast/nightfox.nvim/raw/main/lua/nightfox/group/syntax.lua&#34;&gt;syntax.lua&lt;/a&gt; for vim&#39;s syntax and &lt;a href=&#34;https://github.com/EdenEast/nightfox.nvim/raw/main/lua/nightfox/group/modules/treesitter.lua&#34;&gt;treesitter.lua&lt;/a&gt; for treesitter. These files list out all all highlight groups and have a comment describing them. Another file to note is &lt;a href=&#34;https://github.com/EdenEast/nightfox.nvim/raw/main/lua/nightfox/group/editor.lua&#34;&gt;editor.lua&lt;/a&gt; which is the highlight groups responsible for how vim looks (background, cursorline, tabline, etc...). To get the highlight group under your cursor see &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#syntax-highlight-groups&#34;&gt;here&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;p&gt;To get more information check out &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md#configuration&#34;&gt;Usage&lt;/a&gt; or the help file &lt;code&gt;:help nightfox&lt;/code&gt; for more detailed information.&lt;/p&gt; &#xA;&lt;h3&gt;Custom template values&lt;/h3&gt; &#xA;&lt;p&gt;Nightfox&#39;s &lt;code&gt;palettes&lt;/code&gt; and &lt;code&gt;specs&lt;/code&gt; can be extended with your own values. This is useful for users that want to distinguish a spec value being used for multiple group definitions. This is best understood with an example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bg0&lt;/code&gt; is used as the dark alternative background color. This is used in multiple areas (non-current file, status line, normal float, etc...). If you would like to have the inactive color diffferent then the float / statusline color you can define your own value in the &lt;code&gt;specs&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nightfox&#34;).setup({&#xA;  palettes = {&#xA;    -- Custom duskfox with black background&#xA;    duskfox = {&#xA;      bg1 = &#34;#000000&#34;, -- Black background&#xA;      bg0 = &#34;#1d1d2b&#34;, -- Alt backgrounds (floats, statusline, ...)&#xA;      bg3 = &#34;#121820&#34;, -- 55% darkened from stock&#xA;      sel0 = &#34;#131b24&#34;, -- 55% darkened from stock&#xA;    },&#xA;  },&#xA;  specs = {&#xA;    all = {&#xA;      inactive = &#34;bg0&#34;, -- Default value for other styles&#xA;    },&#xA;    duskfox = {&#xA;      inactive = &#34;#090909&#34;, -- Slightly lighter then black background&#xA;    },&#xA;  },&#xA;  groups = {&#xA;    all = {&#xA;      NormalNC = { fg = &#34;fg1&#34;, bg = &#34;inactive&#34; }, -- Non-current windows&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Api&lt;/h2&gt; &#xA;&lt;p&gt;Nightfox exposes some Api&#39;s and utility classes that let you fetch data from nightfox.&lt;/p&gt; &#xA;&lt;h3&gt;Palettes&lt;/h3&gt; &#xA;&lt;p&gt;You can get the palettes used by each colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Returns a table with each colorscheme and the palette associated with it&#xA;local palettes = require(&#39;nightfox.palette&#39;).load()&#xA;&#xA;-- Returns the palette of the specified colorscheme&#xA;local palette = require(&#39;nightfox.palette&#39;).load(&#34;nightfox&#34;)&#xA;&#xA;print(vim.inspect(palette.red))&#xA;-- {&#xA;--   base = &#34;#c94f6d&#34;,&#xA;--   bright = &#34;#d16983&#34;,&#xA;--   dim = &#34;#ab435d&#34;,&#xA;-- }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md#palette&#34;&gt;Usage&lt;/a&gt; for more information on palettes.&lt;/p&gt; &#xA;&lt;h3&gt;Specs&lt;/h3&gt; &#xA;&lt;p&gt;You can get the spec used by each colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Returns a table with each colorscheme and the spec associated with it&#xA;local specs require(&#39;nightfox.spec&#39;).load()&#xA;&#xA;-- Returns the spec of the specified colorscheme&#xA;local spec = require(&#39;nightfox.spec&#39;).load(&#34;nightfox&#34;)&#xA;&#xA;print(vim.inspect(spec.git))&#xA;-- {&#xA;--   add = &#34;#81b29a&#34;,&#xA;--   changed = &#34;#dbc074&#34;,&#xA;--   removed = &#34;#c94f6d&#34;&#xA;-- }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md#spec&#34;&gt;Usage&lt;/a&gt; for more information on specs.&lt;/p&gt; &#xA;&lt;h3&gt;Color lib&lt;/h3&gt; &#xA;&lt;p&gt;Nightfox uses a color library internally to manipulate colors. You can use this library as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local palette = require(&#39;nightfox.palette&#39;).load(&#39;nightfox&#39;)&#xA;local Color = require(&#34;nightfox.lib.color&#34;)&#xA;&#xA;local bg = Color.from_hex(palette.bg1)&#xA;local red = Color.from_hex(&#34;#ff0000&#34;)&#xA;&#xA;-- Blend the bg with red. The blend factor is from 0 to 1&#xA;-- with 0 being full bg and 1 being full red&#xA;local red_bg = bg:blend(red, 0.2)&#xA;&#xA;print(red_bg:to_css())&#xA;-- &#34;#471c26&#34;&#xA;&#xA;-- Brighten bg by adding 10 to the value of the color as a hsv&#xA;local alt_bg = bg:brighten(10)&#xA;print(vim.inspect(alt_bg:to_hsv()))&#xA;-- {&#xA;--   hue = 213.91304347826,&#xA;--   saturation = 47.916666666667,&#xA;--   value = 28.823529411765&#xA;-- }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a lot of useful functions to manipulate and work with colors in different color spaces. See &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/usage.md#color&#34;&gt;Usage&lt;/a&gt; for more information on &lt;code&gt;Color&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Colorblind&lt;/h2&gt; &#xA;&lt;p&gt;For individuals with &lt;code&gt;color vision deficiency&lt;/code&gt; (cvd), nightfox has implemented a &lt;code&gt;colorblind&lt;/code&gt; mode to help enhance color contrast. This can be enabled with this option &lt;code&gt;colorblind.enable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Understanding cvd&lt;/summary&gt; &#xA; &lt;p&gt;There are three types of cvd:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Protan (Red / L cones)&lt;/li&gt; &#xA;  &lt;li&gt;Deutan (Green / M cones)&lt;/li&gt; &#xA;  &lt;li&gt;Tritan (Blue / S cones)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;These are referred to as &lt;code&gt;protanomaly&lt;/code&gt;, &lt;code&gt;deuteranomaly&lt;/code&gt;, and &lt;code&gt;tritanomaly&lt;/code&gt; for individuals that have all three cones (trichromats) but one is weak (anomalous trichromacy).&lt;/p&gt; &#xA; &lt;p&gt;These can also be referred to as &lt;code&gt;protanopia&lt;/code&gt;, &lt;code&gt;deuteranopia&lt;/code&gt;, and &lt;code&gt;tritanopia&lt;/code&gt;. This is for individuals that only have two cones (dichromats or dichromacy).&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Cone&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Weak (trichromacy)&lt;/th&gt; &#xA;    &lt;th&gt;Missing (Dichromacy)&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;L / Red&lt;/td&gt; &#xA;    &lt;td&gt;Protan&lt;/td&gt; &#xA;    &lt;td&gt;Protanomaly&lt;/td&gt; &#xA;    &lt;td&gt;Protanopia&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;M / Green&lt;/td&gt; &#xA;    &lt;td&gt;Deutan&lt;/td&gt; &#xA;    &lt;td&gt;Deuteranomaly&lt;/td&gt; &#xA;    &lt;td&gt;Deuteranopia&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;S / Blue&lt;/td&gt; &#xA;    &lt;td&gt;Tritan&lt;/td&gt; &#xA;    &lt;td&gt;Tritanomaly&lt;/td&gt; &#xA;    &lt;td&gt;Tritanopia&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Configuring cvd&lt;/h3&gt; &#xA;&lt;p&gt;Nightfox needs to simulate your cvd in order to shift colors correctly. This is done by setting your cvd type&#39;s severity level. Severity is a value between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; where &lt;code&gt;1&lt;/code&gt; is full dichromacy. You can also have multiple kinds of cvd configured at a time. Here is a full example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nightfox&#34;).setup({&#xA;  options = {&#xA;    colorblind = {&#xA;      enable = true,&#xA;      severity = {&#xA;        protan = 0.3,&#xA;        deutan = 0.6,&#xA;      },&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are looking for a way to self evaluate what severity factor to use, check out &lt;a href=&#34;https://daltonlens.org/evaluating-cvd-simulation/#Generating-Ishihara-like-plates-for-self-evaluation&#34;&gt;daltonlens&#39;s&lt;/a&gt; self evaluation article with interactive self evaluation Ishihasa plates.&lt;/p&gt; &#xA;&lt;p&gt;Another method would be to use the option &lt;code&gt;colorblind.simulate_only&lt;/code&gt; option along with nightfox&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/#interactive&#34;&gt;interactive&lt;/a&gt; mode. While nightfox is simulating cvd set a severity to 1. Now decrease the severity incrementally until you cannot perceive a difference in the change of colors.&lt;/p&gt; &#xA;&lt;h3&gt;How does this work?&lt;/h3&gt; &#xA;&lt;p&gt;This is accomplished by applying an algorithm called &lt;code&gt;Daltonization&lt;/code&gt;. The process follows these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Simulate what a person with cvd would see&lt;/li&gt; &#xA; &lt;li&gt;Calculate the difference between original vs. simulated&lt;/li&gt; &#xA; &lt;li&gt;Shift the difference towards the visible spectrum of the cvd individual&lt;/li&gt; &#xA; &lt;li&gt;Correct original color by adding it to the corrected difference&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can see the simulated colors instead of the corrected colors by setting the option &lt;code&gt;colorblind.simulate_only&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2746374/210025850-9a84b142-e989-4efa-9b55-5f7312013da3.gif&#34; alt=&#34;cvd-example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;p&gt;Nightfox is a highly customizable and configurable colorscheme. This does however come at the cost of complexity and execution time.&lt;/p&gt; &#xA;&lt;p&gt;Nightfox pre-computes the result of your configuration and saves the lua bytecode in a cache to be used on next load. This significantly speeds up nightfox&#39;s execution time. Changes to your configuration will be re-computed and cached automatically.&lt;/p&gt; &#xA;&lt;p&gt;By default nightfox writes the compiled results into the system&#39;s &lt;code&gt;cache&lt;/code&gt; directory. On unix this is &lt;code&gt;$XDG_CACHE_HOME/nvim/nightfox&lt;/code&gt; and on windows this is &lt;code&gt;%localappdata%\\Temp\\nvim\\nightfox&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Nightfox provides functions to work with the nightfox compiler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:NightfoxCompile &#34; Manually call nightfox compiler to create/update compiled files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nightfox&#39;).compile() -- lua api version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactive&lt;/h2&gt; &#xA;&lt;p&gt;Nightfox makes it easy to make changes to its config and see the results. For this nightfox exposes the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NightfoxInteractive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will attach an autocmd to the current buffer that executes on &lt;code&gt;BufferWritePost&lt;/code&gt;. The autocmd will clear nightfox&#39;s internal state and re-source it&#39;s config from the newly saved file. It will then reset the colorscheme.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2746374/211108157-b5221ea4-9369-453d-9c27-4a71ac161a55.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are a few things to note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This requires executing &lt;code&gt;luafile&lt;/code&gt; on the current file. Any syntax errors will throw errors.&lt;/li&gt; &#xA; &lt;li&gt;If you are using packer and have nightfox&#39;s config in a &lt;code&gt;config = function() end&lt;/code&gt; block, this will not work as packer would require to be re-compiled and the compiled file sourced.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/goolord/alpha-nvim&#34;&gt;alpha-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stevearc/aerial.nvim&#34;&gt;aerial.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim&#34;&gt;barbar.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;dashboard-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lambdalisue/fern.vim&#34;&gt;fern.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/j-hui/fidget.nvim&#34;&gt;fidget.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;vim-gitgutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lambdalisue/glyph-palette.vim&#34;&gt;glyph-palette.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;hop.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RRethy/vim-illuminate&#34;&gt;vim-illuminate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggandor/lightspeed.nvim&#34;&gt;lightspeed.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;lspsaga.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/lsp-trouble.nvim&#34;&gt;lsp-trouble.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;indent-blankline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;mini.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mvllow/modes.nvim&#34;&gt;modes.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SmiteshP/nvim-navic&#34;&gt;nvim-navic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NeogitOrg/neogit&#34;&gt;neogit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest&#34;&gt;neotest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;neo-tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rlane/pounce.nvim&#34;&gt;pounce.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-signify&#34;&gt;vim-signify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hiphish/rainbow-delimiters.nvim&#34;&gt;rainbow-delimiters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/symbols-outline.nvim&#34;&gt;symbols-outline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p00f/nvim-ts-rainbow&#34;&gt;nvim-ts-rainbow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HiPhish/nvim-ts-rainbow2&#34;&gt;nvim-ts-rainbow2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;which-key.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status lines&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Lualine checks the value of &lt;code&gt;vim.g.colors_name&lt;/code&gt; (set when using &lt;code&gt;:colorscheme&lt;/code&gt; command) to determine the theme to load. Set your colorscheme before calling setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#34;colorscheme nightfox&#34;)&#xA;require(&#39;lualine&#39;).setup({ ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;Lightline&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Lightline checks the value of &lt;code&gt;vim.g.lightline.colorscheme&lt;/code&gt;. It does not depend on the value of the &lt;code&gt;:colorscheme&lt;/code&gt; command, Please set it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#34;colorscheme nightfox&#34;)&#xA;vim.g.lightline = { colorscheme = &#34;nightfox&#34; } -- Or the name of colorscheme you use&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Syntax highlight groups&lt;/h2&gt; &#xA;&lt;p&gt;This section will help you determine what highlight group is being applied to a piece of syntax. These sections will output the highlight group for the value under the cursor.&lt;/p&gt; &#xA;&lt;h4&gt;Treesitter highlighting&lt;/h4&gt; &#xA;&lt;p&gt;If treesitter is the highlighting method for the language in question you can use the command: &lt;code&gt;:Inspect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Vim highlighting&lt;/h4&gt; &#xA;&lt;p&gt;Add this vimscript function to your configuration.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vimscript highlight function&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; plugin/syntax.vim&#xA;&#xA;&#34; Output the highlight group under the cursor&#xA;&#34;&#xA;&#34; This function will output the entire stack of hightlight groups being applied. The stack is&#xA;&#34; outputted in the correct order from top to bottom. Vim will walk through the stack from top to&#xA;&#34; bottom and apply the first defined highlight group found.&#xA;function! SynStack()&#xA;  for i1 in synstack(line(&#34;.&#34;), col(&#34;.&#34;))&#xA;    let i2 = synIDtrans(i1)&#xA;    let n1 = synIDattr(i1, &#34;name&#34;)&#xA;    let n2 = synIDattr(i2, &#34;name&#34;)&#xA;    echo n1 &#34;-&amp;gt;&#34; n2&#xA;  endfor&#xA;endfunction&#xA;&#xA;&#34; You can also create a convenience mapping&#xA;map &amp;lt;F2&amp;gt; &amp;lt;cmd&amp;gt;call SynStack()&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Extra&lt;/h2&gt; &#xA;&lt;p&gt;There are &lt;a href=&#34;https://raw.githubusercontent.com/EdenEast/nightfox.nvim/main/extra&#34;&gt;extra&lt;/a&gt; configuration files for the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;alacritty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fishshell.com/&#34;&gt;fish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iterm2.com/index.html&#34;&gt;iterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/overview/#configuring-kitty&#34;&gt;kitty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://konsole.kde.org/&#34;&gt;konsole&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://starship.rs/&#34;&gt;starship&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;tmux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.warp.dev/&#34;&gt;warp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wezfurlong.org/wezterm/config/appearance.html#defining-a-color-scheme-in-a-separate-file&#34;&gt;wezterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/Terminal&#34;&gt;windows terminal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/X_resources&#34;&gt;xresources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zellij.dev/&#34;&gt;zellij&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/catppuccin/nvim/&#34;&gt;catppuccin&lt;/a&gt; (integration/modules)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rose-pine/nvim&#34;&gt;rose-pine&lt;/a&gt; (dawnfox/duskfox)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shaunsingh/oxocarbon.nvim&#34;&gt;oxocarbon.nvim&lt;/a&gt; (carbonfox)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coolers.co&#34;&gt;coolers&lt;/a&gt; (useful color information and palette tool)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.colorhexa.com/&#34;&gt;colorhexa&lt;/a&gt; (detailed color information)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NeogitOrg/neogit/raw/b688a2c/lua/neogit/lib/color.lua&#34;&gt;neogit&lt;/a&gt; (base for color lib)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://daltonlens.org/&#34;&gt;daltonlens&lt;/a&gt; (understanding cvd simulations and research. Thanks &lt;a href=&#34;https://github.com/nburrus&#34;&gt;@nburrus&lt;/a&gt;!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;Some themes were inspired by wallpapers.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Nordfox&lt;/summary&gt; &#xA; &lt;img src=&#34;https://i.imgur.com/LzJYkpS.jpeg&#34; alt=&#34;nordfox_reference&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Terafox&lt;/summary&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/179428810-69b440d1-7107-49f2-ab2b-aaab1c449cce.jpeg&#34; alt=&#34;terafox_reference&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;💝 Thanks to&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/keifererikson&#34;&gt;@keifererikson&lt;/a&gt; for logo&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>epwalsh/obsidian.nvim</title>
    <updated>2025-02-01T01:57:07Z</updated>
    <id>tag:github.com,2025-02-01:/epwalsh/obsidian.nvim</id>
    <link href="https://github.com/epwalsh/obsidian.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Obsidian 🤝 Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;obsidian.nvim&lt;/h1&gt; &#xA;&lt;div&gt;&#xA; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#setup&#34;&gt;Setup&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#configuration-options&#34;&gt;Configure&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#contributing&#34;&gt;Contribute&lt;/a&gt; · &lt;a href=&#34;https://github.com/epwalsh/obsidian.nvim/discussions&#34;&gt;Discuss&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;a href=&#34;https://github.com/epwalsh/obsidian.nvim/releases/latest&#34;&gt;&lt;img alt=&#34;Latest release&#34; src=&#34;https://img.shields.io/github/v/release/epwalsh/obsidian.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;&amp;amp;color=d9b3ff&amp;amp;include_prerelease&amp;amp;sort=semver&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/epwalsh/obsidian.nvim/pulse&#34;&gt;&lt;img alt=&#34;Last commit&#34; src=&#34;https://img.shields.io/github/last-commit/epwalsh/obsidian.nvim?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;color=9fdf9f&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/neovim/neovim/releases/latest&#34;&gt;&lt;img alt=&#34;Latest Neovim&#34; src=&#34;https://img.shields.io/github/v/release/neovim/neovim?style=for-the-badge&amp;amp;logo=neovim&amp;amp;logoColor=D9E0EE&amp;amp;label=Neovim&amp;amp;labelColor=302D41&amp;amp;color=99d6ff&amp;amp;sort=semver&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;http://www.lua.org/&#34;&gt;&lt;img alt=&#34;Made with Lua&#34; src=&#34;https://img.shields.io/badge/Built%20with%20Lua-grey?style=for-the-badge&amp;amp;logo=lua&amp;amp;logoColor=D9E0EE&amp;amp;label=Lua&amp;amp;labelColor=302D41&amp;amp;color=b3b3ff&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://www.buymeacoffee.com/epwalsh&#34;&gt;&lt;img alt=&#34;Buy me a coffee&#34; src=&#34;https://img.shields.io/badge/Buy%20me%20a%20coffee-grey?style=for-the-badge&amp;amp;logo=buymeacoffee&amp;amp;logoColor=D9E0EE&amp;amp;label=Sponsor&amp;amp;labelColor=302D41&amp;amp;color=ffff99&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A Neovim plugin for writing and navigating &lt;a href=&#34;https://obsidian.md&#34;&gt;Obsidian&lt;/a&gt; vaults, written in Lua.&lt;/p&gt; &#xA;&lt;p&gt;Built for people who love the concept of Obsidian -- a simple, markdown-based notes app -- but love Neovim too much to stand typing characters into anything else.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re new to Obsidian I highly recommend watching &lt;a href=&#34;https://youtu.be/5ht8NYkU9wQ?si=8nbnNsRVnw0xfX2S&#34;&gt;this excellent YouTube video&lt;/a&gt; for a great overview.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Keep in mind this plugin is not meant to replace Obsidian, but to complement it.&lt;/em&gt; The Obsidian app is very powerful in its own way; it comes with a mobile app and has a lot of functionality that&#39;s not feasible to implement in Neovim, such as the graph explorer view. That said, this plugin stands on its own as well. You don&#39;t necessarily need to use it alongside the Obsidian app.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;👉 &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;⚙️ &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#system-requirements&#34;&gt;System requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#install-and-configure&#34;&gt;Install and configure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#plugin-dependencies&#34;&gt;Plugin dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#configuration-options&#34;&gt;Configuration options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#notes-on-configuration&#34;&gt;Notes on configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#using-templates&#34;&gt;Using templates&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#usage-outside-of-a-workspace-or-vault&#34;&gt;Usage outside of a workspace or vault&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;➕ &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;▶️ &lt;strong&gt;Completion:&lt;/strong&gt; Ultra-fast, asynchronous autocompletion for note references and tags via &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; (triggered by typing &lt;code&gt;[[&lt;/code&gt; for wiki links, &lt;code&gt;[&lt;/code&gt; for markdown links, or &lt;code&gt;#&lt;/code&gt; for tags), powered by &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/epwalsh/obsidian.nvim/assets/8812459/90d5f218-06cd-4ebb-b00b-b59c2f5c3cc1&#34;&gt;&lt;img src=&#34;https://github.com/epwalsh/obsidian.nvim/assets/8812459/90d5f218-06cd-4ebb-b00b-b59c2f5c3cc1&#34; alt=&#34;See this screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🏃 &lt;strong&gt;Navigation:&lt;/strong&gt; Navigate throughout your vault by typing &lt;code&gt;gf&lt;/code&gt; on any link to another note.&lt;/p&gt; &#xA;&lt;p&gt;📷 &lt;strong&gt;Images:&lt;/strong&gt; Paste images into notes.&lt;/p&gt; &#xA;&lt;p&gt;💅 &lt;strong&gt;Syntax:&lt;/strong&gt; Additional markdown syntax highlighting, concealing, and extmarks for references, tags, and check-boxes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/epwalsh/obsidian.nvim/assets/8812459/e74f5267-21b5-49bc-a3bb-3b9db5fa6687&#34;&gt;&lt;img src=&#34;https://github.com/epwalsh/obsidian.nvim/assets/8812459/e74f5267-21b5-49bc-a3bb-3b9db5fa6687&#34; alt=&#34;See this screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianOpen [QUERY]&lt;/code&gt; to open a note in the Obsidian app. This command has one optional argument: a query used to resolve the note to open by ID, path, or alias. If not given, the note corresponding to the current buffer is opened.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianNew [TITLE]&lt;/code&gt; to create a new note. This command has one optional argument: the title of the new note.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianQuickSwitch&lt;/code&gt; to quickly switch to (or open) another note in your vault, searching by its name using &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; with your preferred picker (see &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#plugin-dependencies&#34;&gt;plugin dependencies&lt;/a&gt; below).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianFollowLink [vsplit|hsplit]&lt;/code&gt; to follow a note reference under the cursor, optionally opening it in a vertical or horizontal split.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianBacklinks&lt;/code&gt; for getting a picker list of references to the current buffer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianTags [TAG ...]&lt;/code&gt; for getting a picker list of all occurrences of the given tags.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianToday [OFFSET]&lt;/code&gt; to open/create a new daily note. This command also takes an optional offset in days, e.g. use &lt;code&gt;:ObsidianToday -1&lt;/code&gt; to go to yesterday&#39;s note. Unlike &lt;code&gt;:ObsidianYesterday&lt;/code&gt; and &lt;code&gt;:ObsidianTomorrow&lt;/code&gt; this command does not differentiate between weekdays and weekends.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianYesterday&lt;/code&gt; to open/create the daily note for the previous working day.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianTomorrow&lt;/code&gt; to open/create the daily note for the next working day.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianDailies [OFFSET ...]&lt;/code&gt; to open a picker list of daily notes. For example, &lt;code&gt;:ObsidianDailies -2 1&lt;/code&gt; to list daily notes from 2 days ago until tomorrow.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianTemplate [NAME]&lt;/code&gt; to insert a template from the templates folder, selecting from a list using your preferred picker. See &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#using-templates&#34;&gt;&#34;using templates&#34;&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianSearch [QUERY]&lt;/code&gt; to search for (or create) notes in your vault using &lt;code&gt;ripgrep&lt;/code&gt; with your preferred picker.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianLink [QUERY]&lt;/code&gt; to link an inline visual selection of text to a note. This command has one optional argument: a query that will be used to resolve the note by ID, path, or alias. If not given, the selected text will be used as the query.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianLinkNew [TITLE]&lt;/code&gt; to create a new note and link it to an inline visual selection of text. This command has one optional argument: the title of the new note. If not given, the selected text will be used as the title.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianLinks&lt;/code&gt; to collect all links within the current buffer into a picker window.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianExtractNote [TITLE]&lt;/code&gt; to extract the visually selected text into a new note and link to it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianWorkspace [NAME]&lt;/code&gt; to switch to another workspace.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianPasteImg [IMGNAME]&lt;/code&gt; to paste an image from the clipboard into the note at the cursor position by saving it to the vault and adding a markdown image link. You can configure the default folder to save images to with the &lt;code&gt;attachments.img_folder&lt;/code&gt; option.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianRename [NEWNAME] [--dry-run]&lt;/code&gt; to rename the note of the current buffer or reference under the cursor, updating all backlinks across the vault. Since this command is still relatively new and could potentially write a lot of changes to your vault, I highly recommend committing the current state of your vault (if you&#39;re using version control) before running it, or doing a dry-run first by appending &#34;--dry-run&#34; to the command, e.g. &lt;code&gt;:ObsidianRename new-id --dry-run&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianToggleCheckbox&lt;/code&gt; to cycle through checkbox options.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianNewFromTemplate [TITLE]&lt;/code&gt; to create a new note from a template in the templates folder. Selecting from a list using your preferred picker. This command has one optional argument: the title of the new note.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ObsidianTOC&lt;/code&gt; to load the table of contents of the current note into a picker list.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/epwalsh/obsidian.nvim/assets/8812459/2986e1d2-13e8-40e2-9c9e-75691a3b662e&#34;&gt;&lt;img src=&#34;https://github.com/epwalsh/obsidian.nvim/assets/8812459/2986e1d2-13e8-40e2-9c9e-75691a3b662e&#34; alt=&#34;2024-01-31 14 22 52&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;System requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NeoVim &amp;gt;= 0.8.0 (this plugin uses &lt;code&gt;vim.fs&lt;/code&gt; which was only added in 0.8).&lt;/li&gt; &#xA; &lt;li&gt;If you want completion and search features (recommended) you&#39;ll need &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; to be installed and on your &lt;code&gt;$PATH&lt;/code&gt;. See &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep#installation&lt;/a&gt; for install options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Specific operating systems also require additional dependencies in order to use all of obsidian.nvim&#39;s functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows WSL&lt;/strong&gt; users need &lt;a href=&#34;https://gitlab.com/4U6U57/wsl-open&#34;&gt;&lt;code&gt;wsl-open&lt;/code&gt;&lt;/a&gt; for the &lt;code&gt;:ObsidianOpen&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MacOS&lt;/strong&gt; users need &lt;a href=&#34;https://github.com/jcsalterego/pngpaste&#34;&gt;&lt;code&gt;pngpaste&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;brew install pngpaste&lt;/code&gt;) for the &lt;code&gt;:ObsidianPasteImg&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt; users need xclip (X11) or wl-clipboard (Wayland) for the &lt;code&gt;:ObsidianPasteImg&lt;/code&gt; command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Search functionality (e.g. via the &lt;code&gt;:ObsidianSearch&lt;/code&gt; and &lt;code&gt;:ObsidianQuickSwitch&lt;/code&gt; commands) also requires a picker such &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#plugin-dependencies&#34;&gt;plugin dependencies&lt;/a&gt; below).&lt;/p&gt; &#xA;&lt;h3&gt;Install and configure&lt;/h3&gt; &#xA;&lt;p&gt;To configure obsidian.nvim you just need to call &lt;code&gt;require(&#34;obsidian&#34;).setup({ ... })&lt;/code&gt; with the desired options. Here are some examples using different plugin managers. The full set of &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#plugin-dependencies&#34;&gt;plugin dependencies&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#configuration-options&#34;&gt;configuration options&lt;/a&gt; are listed below.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ WARNING: if you install from the latest release (recommended for stability) instead of &lt;code&gt;main&lt;/code&gt;, be aware that the README on &lt;code&gt;main&lt;/code&gt; may reference features that haven&#39;t been released yet. For that reason I recommend viewing the README on the tag for the &lt;a href=&#34;https://github.com/epwalsh/obsidian.nvim/releases&#34;&gt;latest release&lt;/a&gt; instead of &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;epwalsh/obsidian.nvim&#34;,&#xA;  version = &#34;*&#34;,  -- recommended, use latest release instead of latest commit&#xA;  lazy = true,&#xA;  ft = &#34;markdown&#34;,&#xA;  -- Replace the above line with this if you only want to load obsidian.nvim for markdown files in your vault:&#xA;  -- event = {&#xA;  --   -- If you want to use the home shortcut &#39;~&#39; here you need to call &#39;vim.fn.expand&#39;.&#xA;  --   -- E.g. &#34;BufReadPre &#34; .. vim.fn.expand &#34;~&#34; .. &#34;/my-vault/*.md&#34;&#xA;  --   -- refer to `:h file-pattern` for more examples&#xA;  --   &#34;BufReadPre path/to/my-vault/*.md&#34;,&#xA;  --   &#34;BufNewFile path/to/my-vault/*.md&#34;,&#xA;  -- },&#xA;  dependencies = {&#xA;    -- Required.&#xA;    &#34;nvim-lua/plenary.nvim&#34;,&#xA;&#xA;    -- see below for full list of optional dependencies 👇&#xA;  },&#xA;  opts = {&#xA;    workspaces = {&#xA;      {&#xA;        name = &#34;personal&#34;,&#xA;        path = &#34;~/vaults/personal&#34;,&#xA;      },&#xA;      {&#xA;        name = &#34;work&#34;,&#xA;        path = &#34;~/vaults/work&#34;,&#xA;      },&#xA;    },&#xA;&#xA;    -- see below for full list of options 👇&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;code&gt;packer.nvim&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;  &#34;epwalsh/obsidian.nvim&#34;,&#xA;  tag = &#34;*&#34;,  -- recommended, use latest release instead of latest commit&#xA;  requires = {&#xA;    -- Required.&#xA;    &#34;nvim-lua/plenary.nvim&#34;,&#xA;&#xA;    -- see below for full list of optional dependencies 👇&#xA;  },&#xA;  config = function()&#xA;    require(&#34;obsidian&#34;).setup({&#xA;      workspaces = {&#xA;        {&#xA;          name = &#34;personal&#34;,&#xA;          path = &#34;~/vaults/personal&#34;,&#xA;        },&#xA;        {&#xA;          name = &#34;work&#34;,&#xA;          path = &#34;~/vaults/work&#34;,&#xA;        },&#xA;      },&#xA;&#xA;      -- see below for full list of options 👇&#xA;    })&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugin dependencies&lt;/h3&gt; &#xA;&lt;p&gt;The only &lt;strong&gt;required&lt;/strong&gt; plugin dependency is &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;, but there are a number of optional dependencies that enhance the obsidian.nvim experience.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Completion:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[recommended]&lt;/strong&gt; &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;hrsh7th/nvim-cmp&lt;/a&gt;: for completion of note references.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pickers:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[recommended]&lt;/strong&gt; &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope/telescope.nvim&lt;/a&gt;: for search and quick-switch functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.pick&#34;&gt;Mini.Pick&lt;/a&gt; from the mini.nvim library: an alternative to telescope for search and quick-switch functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ibhagwan/fzf-lua&#34;&gt;ibhagwan/fzf-lua&lt;/a&gt;: another alternative to telescope for search and quick-switch functionality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax highlighting:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[recommended]&lt;/strong&gt; &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;: for base markdown syntax highlighting. See &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#syntax-highlighting&#34;&gt;syntax highlighting&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/preservim/vim-markdown&#34;&gt;preservim/vim-markdown&lt;/a&gt;: an alternative to nvim-treesitter for syntax highlighting (see &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#syntax-highlighting&#34;&gt;syntax highlighting&lt;/a&gt; for more details), plus other cool features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Miscellaneous:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🆕 &lt;a href=&#34;https://github.com/epwalsh/pomo.nvim&#34;&gt;pomo.nvim&lt;/a&gt;: for running lightweight &lt;a href=&#34;https://en.wikipedia.org/wiki/Pomodoro_Technique&#34;&gt;pomodoro&lt;/a&gt; timers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you choose to use any of these you should include them in the &#34;dependencies&#34; or &#34;requires&#34; field of the obsidian.nvim plugin spec for your package manager.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration options&lt;/h3&gt; &#xA;&lt;p&gt;This is a complete list of all of the options that can be passed to &lt;code&gt;require(&#34;obsidian&#34;).setup()&lt;/code&gt;. The settings below are &lt;em&gt;not necessarily the defaults, but represent reasonable default settings&lt;/em&gt;. Please read each option carefully and customize it to your needs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- A list of workspace names, paths, and configuration overrides.&#xA;  -- If you use the Obsidian app, the &#39;path&#39; of a workspace should generally be&#xA;  -- your vault root (where the `.obsidian` folder is located).&#xA;  -- When obsidian.nvim is loaded by your plugin manager, it will automatically set&#xA;  -- the workspace to the first workspace in the list whose `path` is a parent of the&#xA;  -- current markdown file being edited.&#xA;  workspaces = {&#xA;    {&#xA;      name = &#34;personal&#34;,&#xA;      path = &#34;~/vaults/personal&#34;,&#xA;    },&#xA;    {&#xA;      name = &#34;work&#34;,&#xA;      path = &#34;~/vaults/work&#34;,&#xA;      -- Optional, override certain settings.&#xA;      overrides = {&#xA;        notes_subdir = &#34;notes&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;&#xA;  -- Alternatively - and for backwards compatibility - you can set &#39;dir&#39; to a single path instead of&#xA;  -- &#39;workspaces&#39;. For example:&#xA;  -- dir = &#34;~/vaults/work&#34;,&#xA;&#xA;  -- Optional, if you keep notes in a specific subdirectory of your vault.&#xA;  notes_subdir = &#34;notes&#34;,&#xA;&#xA;  -- Optional, set the log level for obsidian.nvim. This is an integer corresponding to one of the log&#xA;  -- levels defined by &#34;vim.log.levels.*&#34;.&#xA;  log_level = vim.log.levels.INFO,&#xA;&#xA;  daily_notes = {&#xA;    -- Optional, if you keep daily notes in a separate directory.&#xA;    folder = &#34;notes/dailies&#34;,&#xA;    -- Optional, if you want to change the date format for the ID of daily notes.&#xA;    date_format = &#34;%Y-%m-%d&#34;,&#xA;    -- Optional, if you want to change the date format of the default alias of daily notes.&#xA;    alias_format = &#34;%B %-d, %Y&#34;,&#xA;    -- Optional, default tags to add to each new daily note created.&#xA;    default_tags = { &#34;daily-notes&#34; },&#xA;    -- Optional, if you want to automatically insert a template from your template directory like &#39;daily.md&#39;&#xA;    template = nil&#xA;  },&#xA;&#xA;  -- Optional, completion of wiki links, local markdown links, and tags using nvim-cmp.&#xA;  completion = {&#xA;    -- Set to false to disable completion.&#xA;    nvim_cmp = true,&#xA;    -- Trigger completion at 2 chars.&#xA;    min_chars = 2,&#xA;  },&#xA;&#xA;  -- Optional, configure key mappings. These are the defaults. If you don&#39;t want to set any keymappings this&#xA;  -- way then set &#39;mappings = {}&#39;.&#xA;  mappings = {&#xA;    -- Overrides the &#39;gf&#39; mapping to work on markdown/wiki links within your vault.&#xA;    [&#34;gf&#34;] = {&#xA;      action = function()&#xA;        return require(&#34;obsidian&#34;).util.gf_passthrough()&#xA;      end,&#xA;      opts = { noremap = false, expr = true, buffer = true },&#xA;    },&#xA;    -- Toggle check-boxes.&#xA;    [&#34;&amp;lt;leader&amp;gt;ch&#34;] = {&#xA;      action = function()&#xA;        return require(&#34;obsidian&#34;).util.toggle_checkbox()&#xA;      end,&#xA;      opts = { buffer = true },&#xA;    },&#xA;    -- Smart action depending on context, either follow link or toggle checkbox.&#xA;    [&#34;&amp;lt;cr&amp;gt;&#34;] = {&#xA;      action = function()&#xA;        return require(&#34;obsidian&#34;).util.smart_action()&#xA;      end,&#xA;      opts = { buffer = true, expr = true },&#xA;    }&#xA;  },&#xA;&#xA;  -- Where to put new notes. Valid options are&#xA;  --  * &#34;current_dir&#34; - put new notes in same directory as the current buffer.&#xA;  --  * &#34;notes_subdir&#34; - put new notes in the default notes subdirectory.&#xA;  new_notes_location = &#34;notes_subdir&#34;,&#xA;&#xA;  -- Optional, customize how note IDs are generated given an optional title.&#xA;  ---@param title string|?&#xA;  ---@return string&#xA;  note_id_func = function(title)&#xA;    -- Create note IDs in a Zettelkasten format with a timestamp and a suffix.&#xA;    -- In this case a note with the title &#39;My new note&#39; will be given an ID that looks&#xA;    -- like &#39;1657296016-my-new-note&#39;, and therefore the file name &#39;1657296016-my-new-note.md&#39;&#xA;    local suffix = &#34;&#34;&#xA;    if title ~= nil then&#xA;      -- If title is given, transform it into valid file name.&#xA;      suffix = title:gsub(&#34; &#34;, &#34;-&#34;):gsub(&#34;[^A-Za-z0-9-]&#34;, &#34;&#34;):lower()&#xA;    else&#xA;      -- If title is nil, just add 4 random uppercase letters to the suffix.&#xA;      for _ = 1, 4 do&#xA;        suffix = suffix .. string.char(math.random(65, 90))&#xA;      end&#xA;    end&#xA;    return tostring(os.time()) .. &#34;-&#34; .. suffix&#xA;  end,&#xA;&#xA;  -- Optional, customize how note file names are generated given the ID, target directory, and title.&#xA;  ---@param spec { id: string, dir: obsidian.Path, title: string|? }&#xA;  ---@return string|obsidian.Path The full path to the new note.&#xA;  note_path_func = function(spec)&#xA;    -- This is equivalent to the default behavior.&#xA;    local path = spec.dir / tostring(spec.id)&#xA;    return path:with_suffix(&#34;.md&#34;)&#xA;  end,&#xA;&#xA;  -- Optional, customize how wiki links are formatted. You can set this to one of:&#xA;  --  * &#34;use_alias_only&#34;, e.g. &#39;[[Foo Bar]]&#39;&#xA;  --  * &#34;prepend_note_id&#34;, e.g. &#39;[[foo-bar|Foo Bar]]&#39;&#xA;  --  * &#34;prepend_note_path&#34;, e.g. &#39;[[foo-bar.md|Foo Bar]]&#39;&#xA;  --  * &#34;use_path_only&#34;, e.g. &#39;[[foo-bar.md]]&#39;&#xA;  -- Or you can set it to a function that takes a table of options and returns a string, like this:&#xA;  wiki_link_func = function(opts)&#xA;    return require(&#34;obsidian.util&#34;).wiki_link_id_prefix(opts)&#xA;  end,&#xA;&#xA;  -- Optional, customize how markdown links are formatted.&#xA;  markdown_link_func = function(opts)&#xA;    return require(&#34;obsidian.util&#34;).markdown_link(opts)&#xA;  end,&#xA;&#xA;  -- Either &#39;wiki&#39; or &#39;markdown&#39;.&#xA;  preferred_link_style = &#34;wiki&#34;,&#xA;&#xA;  -- Optional, boolean or a function that takes a filename and returns a boolean.&#xA;  -- `true` indicates that you don&#39;t want obsidian.nvim to manage frontmatter.&#xA;  disable_frontmatter = false,&#xA;&#xA;  -- Optional, alternatively you can customize the frontmatter data.&#xA;  ---@return table&#xA;  note_frontmatter_func = function(note)&#xA;    -- Add the title of the note as an alias.&#xA;    if note.title then&#xA;      note:add_alias(note.title)&#xA;    end&#xA;&#xA;    local out = { id = note.id, aliases = note.aliases, tags = note.tags }&#xA;&#xA;    -- `note.metadata` contains any manually added fields in the frontmatter.&#xA;    -- So here we just make sure those fields are kept in the frontmatter.&#xA;    if note.metadata ~= nil and not vim.tbl_isempty(note.metadata) then&#xA;      for k, v in pairs(note.metadata) do&#xA;        out[k] = v&#xA;      end&#xA;    end&#xA;&#xA;    return out&#xA;  end,&#xA;&#xA;  -- Optional, for templates (see below).&#xA;  templates = {&#xA;    folder = &#34;templates&#34;,&#xA;    date_format = &#34;%Y-%m-%d&#34;,&#xA;    time_format = &#34;%H:%M&#34;,&#xA;    -- A map for custom variables, the key should be the variable and the value a function&#xA;    substitutions = {},&#xA;  },&#xA;&#xA;  -- Optional, by default when you use `:ObsidianFollowLink` on a link to an external&#xA;  -- URL it will be ignored but you can customize this behavior here.&#xA;  ---@param url string&#xA;  follow_url_func = function(url)&#xA;    -- Open the URL in the default web browser.&#xA;    vim.fn.jobstart({&#34;open&#34;, url})  -- Mac OS&#xA;    -- vim.fn.jobstart({&#34;xdg-open&#34;, url})  -- linux&#xA;    -- vim.cmd(&#39;:silent exec &#34;!start &#39; .. url .. &#39;&#34;&#39;) -- Windows&#xA;    -- vim.ui.open(url) -- need Neovim 0.10.0+&#xA;  end,&#xA;&#xA;  -- Optional, by default when you use `:ObsidianFollowLink` on a link to an image&#xA;  -- file it will be ignored but you can customize this behavior here.&#xA;  ---@param img string&#xA;  follow_img_func = function(img)&#xA;    vim.fn.jobstart { &#34;qlmanage&#34;, &#34;-p&#34;, img }  -- Mac OS quick look preview&#xA;    -- vim.fn.jobstart({&#34;xdg-open&#34;, url})  -- linux&#xA;    -- vim.cmd(&#39;:silent exec &#34;!start &#39; .. url .. &#39;&#34;&#39;) -- Windows&#xA;  end,&#xA;&#xA;  -- Optional, set to true if you use the Obsidian Advanced URI plugin.&#xA;  -- https://github.com/Vinzent03/obsidian-advanced-uri&#xA;  use_advanced_uri = false,&#xA;&#xA;  -- Optional, set to true to force &#39;:ObsidianOpen&#39; to bring the app to the foreground.&#xA;  open_app_foreground = false,&#xA;&#xA;  picker = {&#xA;    -- Set your preferred picker. Can be one of &#39;telescope.nvim&#39;, &#39;fzf-lua&#39;, or &#39;mini.pick&#39;.&#xA;    name = &#34;telescope.nvim&#34;,&#xA;    -- Optional, configure key mappings for the picker. These are the defaults.&#xA;    -- Not all pickers support all mappings.&#xA;    note_mappings = {&#xA;      -- Create a new note from your query.&#xA;      new = &#34;&amp;lt;C-x&amp;gt;&#34;,&#xA;      -- Insert a link to the selected note.&#xA;      insert_link = &#34;&amp;lt;C-l&amp;gt;&#34;,&#xA;    },&#xA;    tag_mappings = {&#xA;      -- Add tag(s) to current note.&#xA;      tag_note = &#34;&amp;lt;C-x&amp;gt;&#34;,&#xA;      -- Insert a tag at the current location.&#xA;      insert_tag = &#34;&amp;lt;C-l&amp;gt;&#34;,&#xA;    },&#xA;  },&#xA;&#xA;  -- Optional, sort search results by &#34;path&#34;, &#34;modified&#34;, &#34;accessed&#34;, or &#34;created&#34;.&#xA;  -- The recommend value is &#34;modified&#34; and `true` for `sort_reversed`, which means, for example,&#xA;  -- that `:ObsidianQuickSwitch` will show the notes sorted by latest modified time&#xA;  sort_by = &#34;modified&#34;,&#xA;  sort_reversed = true,&#xA;&#xA;  -- Set the maximum number of lines to read from notes on disk when performing certain searches.&#xA;  search_max_lines = 1000,&#xA;&#xA;  -- Optional, determines how certain commands open notes. The valid options are:&#xA;  -- 1. &#34;current&#34; (the default) - to always open in the current window&#xA;  -- 2. &#34;vsplit&#34; - to open in a vertical split if there&#39;s not already a vertical split&#xA;  -- 3. &#34;hsplit&#34; - to open in a horizontal split if there&#39;s not already a horizontal split&#xA;  open_notes_in = &#34;current&#34;,&#xA;&#xA;  -- Optional, define your own callbacks to further customize behavior.&#xA;  callbacks = {&#xA;    -- Runs at the end of `require(&#34;obsidian&#34;).setup()`.&#xA;    ---@param client obsidian.Client&#xA;    post_setup = function(client) end,&#xA;&#xA;    -- Runs anytime you enter the buffer for a note.&#xA;    ---@param client obsidian.Client&#xA;    ---@param note obsidian.Note&#xA;    enter_note = function(client, note) end,&#xA;&#xA;    -- Runs anytime you leave the buffer for a note.&#xA;    ---@param client obsidian.Client&#xA;    ---@param note obsidian.Note&#xA;    leave_note = function(client, note) end,&#xA;&#xA;    -- Runs right before writing the buffer for a note.&#xA;    ---@param client obsidian.Client&#xA;    ---@param note obsidian.Note&#xA;    pre_write_note = function(client, note) end,&#xA;&#xA;    -- Runs anytime the workspace is set/changed.&#xA;    ---@param client obsidian.Client&#xA;    ---@param workspace obsidian.Workspace&#xA;    post_set_workspace = function(client, workspace) end,&#xA;  },&#xA;&#xA;  -- Optional, configure additional syntax highlighting / extmarks.&#xA;  -- This requires you have `conceallevel` set to 1 or 2. See `:help conceallevel` for more details.&#xA;  ui = {&#xA;    enable = true,  -- set to false to disable all additional syntax features&#xA;    update_debounce = 200,  -- update delay after a text change (in milliseconds)&#xA;    max_file_length = 5000,  -- disable UI features for files with more than this many lines&#xA;    -- Define how various check-boxes are displayed&#xA;    checkboxes = {&#xA;      -- NOTE: the &#39;char&#39; value has to be a single character, and the highlight groups are defined below.&#xA;      [&#34; &#34;] = { char = &#34;󰄱&#34;, hl_group = &#34;ObsidianTodo&#34; },&#xA;      [&#34;x&#34;] = { char = &#34;&#34;, hl_group = &#34;ObsidianDone&#34; },&#xA;      [&#34;&amp;gt;&#34;] = { char = &#34;&#34;, hl_group = &#34;ObsidianRightArrow&#34; },&#xA;      [&#34;~&#34;] = { char = &#34;󰰱&#34;, hl_group = &#34;ObsidianTilde&#34; },&#xA;      [&#34;!&#34;] = { char = &#34;&#34;, hl_group = &#34;ObsidianImportant&#34; },&#xA;      -- Replace the above with this if you don&#39;t have a patched font:&#xA;      -- [&#34; &#34;] = { char = &#34;☐&#34;, hl_group = &#34;ObsidianTodo&#34; },&#xA;      -- [&#34;x&#34;] = { char = &#34;✔&#34;, hl_group = &#34;ObsidianDone&#34; },&#xA;&#xA;      -- You can also add more custom ones...&#xA;    },&#xA;    -- Use bullet marks for non-checkbox lists.&#xA;    bullets = { char = &#34;•&#34;, hl_group = &#34;ObsidianBullet&#34; },&#xA;    external_link_icon = { char = &#34;&#34;, hl_group = &#34;ObsidianExtLinkIcon&#34; },&#xA;    -- Replace the above with this if you don&#39;t have a patched font:&#xA;    -- external_link_icon = { char = &#34;&#34;, hl_group = &#34;ObsidianExtLinkIcon&#34; },&#xA;    reference_text = { hl_group = &#34;ObsidianRefText&#34; },&#xA;    highlight_text = { hl_group = &#34;ObsidianHighlightText&#34; },&#xA;    tags = { hl_group = &#34;ObsidianTag&#34; },&#xA;    block_ids = { hl_group = &#34;ObsidianBlockID&#34; },&#xA;    hl_groups = {&#xA;      -- The options are passed directly to `vim.api.nvim_set_hl()`. See `:help nvim_set_hl`.&#xA;      ObsidianTodo = { bold = true, fg = &#34;#f78c6c&#34; },&#xA;      ObsidianDone = { bold = true, fg = &#34;#89ddff&#34; },&#xA;      ObsidianRightArrow = { bold = true, fg = &#34;#f78c6c&#34; },&#xA;      ObsidianTilde = { bold = true, fg = &#34;#ff5370&#34; },&#xA;      ObsidianImportant = { bold = true, fg = &#34;#d73128&#34; },&#xA;      ObsidianBullet = { bold = true, fg = &#34;#89ddff&#34; },&#xA;      ObsidianRefText = { underline = true, fg = &#34;#c792ea&#34; },&#xA;      ObsidianExtLinkIcon = { fg = &#34;#c792ea&#34; },&#xA;      ObsidianTag = { italic = true, fg = &#34;#89ddff&#34; },&#xA;      ObsidianBlockID = { italic = true, fg = &#34;#89ddff&#34; },&#xA;      ObsidianHighlightText = { bg = &#34;#75662e&#34; },&#xA;    },&#xA;  },&#xA;&#xA;  -- Specify how to handle attachments.&#xA;  attachments = {&#xA;    -- The default folder to place images in via `:ObsidianPasteImg`.&#xA;    -- If this is a relative path it will be interpreted as relative to the vault root.&#xA;    -- You can always override this per image by passing a full path to the command instead of just a filename.&#xA;    img_folder = &#34;assets/imgs&#34;,  -- This is the default&#xA;&#xA;    -- Optional, customize the default name or prefix when pasting images via `:ObsidianPasteImg`.&#xA;    ---@return string&#xA;    img_name_func = function()&#xA;      -- Prefix image names with timestamp.&#xA;      return string.format(&#34;%s-&#34;, os.time())&#xA;    end,&#xA;&#xA;    -- A function that determines the text to insert in the note when pasting an image.&#xA;    -- It takes two arguments, the `obsidian.Client` and an `obsidian.Path` to the image file.&#xA;    -- This is the default implementation.&#xA;    ---@param client obsidian.Client&#xA;    ---@param path obsidian.Path the absolute path to the image file&#xA;    ---@return string&#xA;    img_text_func = function(client, path)&#xA;      path = client:vault_relative_path(path) or path&#xA;      return string.format(&#34;![%s](%s)&#34;, path.name, path)&#xA;    end,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notes on configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Workspaces&lt;/h4&gt; &#xA;&lt;p&gt;For most Obsidian users, each workspace you configure in your obsidian.nvim config should correspond to a unique Obsidian vault, in which case the &lt;code&gt;path&lt;/code&gt; of each workspace should be set to the corresponding vault root path.&lt;/p&gt; &#xA;&lt;p&gt;For example, suppose you have an Obsidian vault at &lt;code&gt;~/vaults/personal&lt;/code&gt;, then the &lt;code&gt;workspaces&lt;/code&gt; field in your config would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;  workspaces = {&#xA;    {&#xA;      name = &#34;personal&#34;,&#xA;      path = &#34;~/vaults/personal&#34;,&#xA;    },&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However obsidian.nvim&#39;s concept of workspaces is a little more general than that of vaults, since it&#39;s also valid to configure a workspace that doesn&#39;t correspond to a vault, or to configure multiple workspaces for a single vault. The latter case can be useful if you want to segment a single vault into multiple directories with different settings applied to each directory. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;  workspaces = {&#xA;    {&#xA;      name = &#34;project-1&#34;,&#xA;      path = &#34;~/vaults/personal/project-1&#34;,&#xA;      -- `strict=true` here tells obsidian to use the `path` as the workspace/vault root,&#xA;      -- even though the actual Obsidian vault root may be `~/vaults/personal/`.&#xA;      strict = true,&#xA;      overrides = {&#xA;        -- ...&#xA;      },&#xA;    },&#xA;    {&#xA;      name = &#34;project-2&#34;,&#xA;      path = &#34;~/vaults/personal/project-2&#34;,&#xA;      strict = true,&#xA;      overrides = {&#xA;        -- ...&#xA;      },&#xA;    },&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;obsidian.nvim also supports &#34;dynamic&#34; workspaces. These are simply workspaces where the &lt;code&gt;path&lt;/code&gt; is set to a Lua function (that returns a path) instead of a hard-coded path. This can be useful in several scenarios, such as when you want a workspace whose &lt;code&gt;path&lt;/code&gt; is always set to the parent directory of the current buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;  workspaces = {&#xA;    {&#xA;      name = &#34;buf-parent&#34;,&#xA;      path = function()&#xA;        return assert(vim.fs.dirname(vim.api.nvim_buf_get_name(0)))&#xA;      end,&#xA;    },&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dynamic workspaces are also useful when you want to use a subset of this plugin&#39;s functionality on markdown files outside of your &#34;fixed&#34; vaults. See &lt;a href=&#34;https://raw.githubusercontent.com/epwalsh/obsidian.nvim/main/#usage-outside-of-a-workspace-or-vault&#34;&gt;using obsidian.nvim outside of a workspace / Obsidian vault&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Completion&lt;/h4&gt; &#xA;&lt;p&gt;obsidian.nvim will set itself up as an nvim-cmp source automatically when you enter a markdown buffer within your vault directory, you do &lt;strong&gt;not&lt;/strong&gt; need to specify this plugin as a cmp source manually.&lt;/p&gt; &#xA;&lt;p&gt;Note that in order to trigger completion for tags &lt;em&gt;within YAML frontmatter&lt;/em&gt; you still need to type the &#34;#&#34; at the start of the tag. obsidian.nvim will remove the &#34;#&#34; when you hit enter on the tag completion item.&lt;/p&gt; &#xA;&lt;h4&gt;Syntax highlighting&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter/raw/master/README.md&#34;&gt;nvim-treesitter&lt;/a&gt; you&#39;re configuration should include both &#34;markdown&#34; and &#34;markdown_inline&#34; sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-treesitter.configs&#34;).setup({&#xA;  ensure_installed = { &#34;markdown&#34;, &#34;markdown_inline&#34;, ... },&#xA;  highlight = {&#xA;    enable = true,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;vim-markdown&lt;/code&gt; you&#39;ll probably want to disable its frontmatter syntax highlighting (&lt;code&gt;vim.g.vim_markdown_frontmatter = 1&lt;/code&gt;) which I&#39;ve found doesn&#39;t work very well.&lt;/p&gt; &#xA;&lt;h4&gt;Concealing characters&lt;/h4&gt; &#xA;&lt;p&gt;If you wish to use the formatting concealment features, you will need to have &lt;code&gt;conceallevel&lt;/code&gt; set to a value that allows it (either &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt;), for example: &lt;code&gt;set conceallevel=1&lt;/code&gt; in viml or &lt;code&gt;vim.opt.conceallevel = 1&lt;/code&gt; in a lua config.&lt;/p&gt; &#xA;&lt;h4&gt;Note naming and location&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;notes_subdir&lt;/code&gt; and &lt;code&gt;note_id_func&lt;/code&gt; options are not mutually exclusive. You can use them both. For example, using a combination of both of the above settings, a new note called &#34;My new note&#34; will assigned a path like &lt;code&gt;notes/1657296016-my-new-note.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;gf&lt;/code&gt; passthrough&lt;/h4&gt; &#xA;&lt;p&gt;If you want the &lt;code&gt;gf&lt;/code&gt; passthrough functionality but you&#39;ve already overridden the &lt;code&gt;gf&lt;/code&gt; keybinding, just change your &lt;code&gt;gf&lt;/code&gt; mapping definition to something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;gf&#34;, function()&#xA;  if require(&#34;obsidian&#34;).util.cursor_on_markdown_link() then&#xA;    return &#34;&amp;lt;cmd&amp;gt;ObsidianFollowLink&amp;lt;CR&amp;gt;&#34;&#xA;  else&#xA;    return &#34;gf&#34;&#xA;  end&#xA;end, { noremap = false, expr = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then make sure to comment out the &lt;code&gt;gf&lt;/code&gt; keybinding in your obsidian.nvim config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;mappings = {&#xA;  -- [&#34;gf&#34;] = ...&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or alternatively you could map obsidian.nvim&#39;s follow functionality to a different key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;mappings = {&#xA;  [&#34;fo&#34;] = {&#xA;    action = function()&#xA;      return require(&#34;obsidian&#34;).util.gf_passthrough()&#xA;    end,&#xA;    opts = { noremap = false, expr = true, buffer = true },&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using templates&lt;/h3&gt; &#xA;&lt;p&gt;To insert a template in the current note, run the command &lt;code&gt;:ObsidianTemplate&lt;/code&gt;. This will open a list of available templates in your templates folder with your preferred picker. Select a template and hit &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to insert. To create a new note from a template, run the command &lt;code&gt;:ObsidianNewFromTemplate&lt;/code&gt;. This will prompt you for an optional path for the new note and will open a list of available templates in your templates folder with your preferred picker. Select a template and hit &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to create the new note with the selected template. Substitutions for &lt;code&gt;{{id}}&lt;/code&gt;, &lt;code&gt;{{title}}&lt;/code&gt;, &lt;code&gt;{{path}}&lt;/code&gt;, &lt;code&gt;{{date}}&lt;/code&gt;, and &lt;code&gt;{{time}}&lt;/code&gt; are supported out-of-the-box. For example, with the following configuration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- other fields ...&#xA;&#xA;  templates = {&#xA;      folder = &#34;my-templates-folder&#34;,&#xA;      date_format = &#34;%Y-%m-%d-%a&#34;,&#xA;      time_format = &#34;%H:%M&#34;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the file &lt;code&gt;~/my-vault/my-templates-folder/note template.md&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# {{title}}&#xA;&#xA;Date created: {{date}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;creating the note &lt;code&gt;Configuring Neovim.md&lt;/code&gt; and executing &lt;code&gt;:ObsidianTemplate&lt;/code&gt; will insert&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# Configuring Neovim&#xA;&#xA;Date created: 2023-03-01-Wed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;above the cursor position.&lt;/p&gt; &#xA;&lt;p&gt;You can also define custom template substitutions with the configuration field &lt;code&gt;templates.substitutions&lt;/code&gt;. For example, to automatically substitute the template variable &lt;code&gt;{{yesterday}}&lt;/code&gt; when inserting a template, you could add this to your config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;-- other fields ...&#xA;templates = {&#xA;  substitutions = {&#xA;    yesterday = function()&#xA;      return os.date(&#34;%Y-%m-%d&#34;, os.time() - 86400)&#xA;    end&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage outside of a workspace or vault&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to configure obsidian.nvim to work on individual markdown files outside of a regular workspace / Obsidian vault by configuring a &#34;dynamic&#34; workspace. To do so you just need to add a special workspace with a function for the &lt;code&gt;path&lt;/code&gt; field (instead of a string), which should return a &lt;em&gt;parent&lt;/em&gt; directory of the current buffer. This tells obsidian.nvim to use that directory as the workspace &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt; (vault root) when the buffer is not located inside another fixed workspace.&lt;/p&gt; &#xA;&lt;p&gt;For example, to extend the configuration above this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;{&#xA;  workspaces = {&#xA;     {&#xA;       name = &#34;personal&#34;,&#xA;       path = &#34;~/vaults/personal&#34;,&#xA;     },&#xA;     ...&#xA;+    {&#xA;+      name = &#34;no-vault&#34;,&#xA;+      path = function()&#xA;+        -- alternatively use the CWD:&#xA;+        -- return assert(vim.fn.getcwd())&#xA;+        return assert(vim.fs.dirname(vim.api.nvim_buf_get_name(0)))&#xA;+      end,&#xA;+      overrides = {&#xA;+        notes_subdir = vim.NIL,  -- have to use &#39;vim.NIL&#39; instead of &#39;nil&#39;&#xA;+        new_notes_location = &#34;current_dir&#34;,&#xA;+        templates = {&#xA;+          folder = vim.NIL,&#xA;+        },&#xA;+        disable_frontmatter = true,&#xA;+      },&#xA;+    },&#xA;+  },&#xA;   ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this configuration, anytime you enter a markdown buffer outside of &#34;~/vaults/personal&#34; (or whatever your configured fixed vaults are), obsidian.nvim will switch to the dynamic workspace with the path / root set to the parent directory of the buffer.&lt;/p&gt; &#xA;&lt;p&gt;Please note that in order to avoid unexpected behavior (like a new directory being created for &lt;code&gt;notes_subdir&lt;/code&gt;) it&#39;s important to carefully set the workspace &lt;code&gt;overrides&lt;/code&gt; options. And keep in mind that to reset a configuration option to &lt;code&gt;nil&lt;/code&gt; you&#39;ll have to use &lt;code&gt;vim.NIL&lt;/code&gt; there instead of the builtin Lua &lt;code&gt;nil&lt;/code&gt; due to the way Lua tables work.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://github.com/epwalsh/obsidian.nvim/raw/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guide before submitting a pull request.&lt;/p&gt; &#xA;&lt;p&gt;And if you&#39;re feeling especially generous I always appreciate some coffee funds! ❤️&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/epwalsh&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Buy%20Me%20a%20Coffee-ffdd00?style=for-the-badge&amp;amp;logo=buy-me-a-coffee&amp;amp;logoColor=black&#34; alt=&#34;BuyMeACoffee&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nvim-tree/nvim-web-devicons</title>
    <updated>2025-02-01T01:57:07Z</updated>
    <id>tag:github.com,2025-02-01:/nvim-tree/nvim-web-devicons</id>
    <link href="https://github.com/nvim-tree/nvim-web-devicons" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provides Nerd Font icons (glyphs) for use by neovim plugins&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nvim-web-devicons&lt;/h1&gt; &#xA;&lt;p&gt;Provides &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Font&lt;/a&gt; [^1] icons (glyphs) for use by &lt;em&gt;Neovim&lt;/em&gt; plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Icons by: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Extension&lt;/li&gt; &#xA;   &lt;li&gt;Full name&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Colours&lt;/li&gt; &#xA; &lt;li&gt;Light and dark variants&lt;/li&gt; &#xA; &lt;li&gt;API to modify/add icons&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &lt;code&gt;lua&lt;/code&gt; fork of &lt;a href=&#34;https://github.com/ryanoasis/vim-devicons&#34;&gt;vim-devicons&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Nerd fonts moved some symbols with version 3.0. Version 2.3 is meant for transition, supporting both version 2 and version 3 icons. Nvim-web-devicons requires version 2.3 or above to work properly. If you are unable to update please use your plugin manager to pin version of nvim-web-dev icons to &lt;code&gt;nerd-v2-compat&lt;/code&gt; tag.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;[^1]: Not limited to Nerd Font icons: unicode and other fonts may be used.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/wiki/Installing-Neovim&#34;&gt;neovim &amp;gt;=0.7.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;A Patched Nerd Font&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-tree/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;nvim-tree/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;nvim-tree/nvim-web-devicons&#34;, opts = {} },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://luarocks.org/modules/nvim-tree/nvim-web-devicons&#34;&gt;&lt;img src=&#34;https://img.shields.io/luarocks/v/nvim-tree/nvim-web-devicons?logo=lua&amp;amp;color=purple&#34; alt=&#34;LuaRocks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Additional Icons&lt;/h2&gt; &#xA;&lt;p&gt;Additional icons may be added for icons that are present in Nerd Fonts: use the &lt;a href=&#34;https://www.nerdfonts.com/cheat-sheet&#34;&gt;Cheat Sheet&lt;/a&gt; search for available icons.&lt;/p&gt; &#xA;&lt;p&gt;PRs are always welcome! Please see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-web-devicons/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] If the icon you need is not available on Nerd Fonts you first need to make a PR to a project that feeds glyphs to Nerd Fonts. Probably the most adequate project to contribute is &lt;a href=&#34;https://github.com/devicons/devicon&#34;&gt;https://github.com/devicons/devicon&lt;/a&gt;. Take into account that &lt;strong&gt;months&lt;/strong&gt; can pass before the icon is available on the Nerd Fonts project, once there feel free to open a PR on this project, see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-web-devicons/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Viewing&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;:NvimWebDeviconsHiTest&lt;/code&gt; to see all icons and their highlighting.&lt;/p&gt; &#xA;&lt;h3&gt;Variants&lt;/h3&gt; &#xA;&lt;p&gt;Light or dark color variants of the icons depend on &lt;code&gt;&amp;amp;background&lt;/code&gt;.&lt;br&gt; The variant can also be set manually in &lt;code&gt;setup&lt;/code&gt; with the &lt;code&gt;variant&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;The variant is updated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;on &lt;code&gt;OptionSet&lt;/code&gt; event for &lt;code&gt;background&lt;/code&gt;, or&lt;/li&gt; &#xA; &lt;li&gt;after explicitly calling &lt;code&gt;require(&#34;nvim-web-devicons&#34;).refresh()&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, be advised that the plugin using nvim-web-devicons may have cached the icons.&lt;/p&gt; &#xA;&lt;h3&gt;Case Sensitivity&lt;/h3&gt; &#xA;&lt;p&gt;Filename icons e.g. &lt;code&gt;&#34;Dockerfile&#34;&lt;/code&gt; are case insensitively matched.&lt;/p&gt; &#xA;&lt;p&gt;Extension icons e.g. &lt;code&gt;&#34;lua&#34;&lt;/code&gt; are case sensitive.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;This adds all the highlight groups for the devicons i.e. it calls &lt;code&gt;vim.api.nvim_set_hl&lt;/code&gt; for all icons this might need to be re-called in a &lt;code&gt;Colorscheme&lt;/code&gt; to re-apply cleared highlights if the color scheme changes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.setup {&#xA; -- your personal icons can go here (to override)&#xA; -- you can specify color or cterm_color instead of specifying both of them&#xA; -- DevIcon will be appended to `name`&#xA; override = {&#xA;  zsh = {&#xA;    icon = &#34;&#34;,&#xA;    color = &#34;#428850&#34;,&#xA;    cterm_color = &#34;65&#34;,&#xA;    name = &#34;Zsh&#34;&#xA;  }&#xA; };&#xA; -- globally enable different highlight colors per icon (default to true)&#xA; -- if set to false all icons will have the default icon&#39;s color&#xA; color_icons = true;&#xA; -- globally enable default icons (default to false)&#xA; -- will get overriden by `get_icons` option&#xA; default = true;&#xA; -- globally enable &#34;strict&#34; selection of icons - icon will be looked up in&#xA; -- different tables, first by filename, and if not found by extension; this&#xA; -- prevents cases when file doesn&#39;t have any extension but still gets some icon&#xA; -- because its name happened to match some extension (default to false)&#xA; strict = true;&#xA; -- set the light or dark variant manually, instead of relying on `background`&#xA; -- (default to nil)&#xA; variant = &#34;light|dark&#34;;&#xA; -- same as `override` but specifically for overrides by filename&#xA; -- takes effect when `strict` is true&#xA; override_by_filename = {&#xA;  [&#34;.gitignore&#34;] = {&#xA;    icon = &#34;&#34;,&#xA;    color = &#34;#f1502f&#34;,&#xA;    name = &#34;Gitignore&#34;&#xA;  }&#xA; };&#xA; -- same as `override` but specifically for overrides by extension&#xA; -- takes effect when `strict` is true&#xA; override_by_extension = {&#xA;  [&#34;log&#34;] = {&#xA;    icon = &#34;&#34;,&#xA;    color = &#34;#81e043&#34;,&#xA;    name = &#34;Log&#34;&#xA;  }&#xA; };&#xA; -- same as `override` but specifically for operating system&#xA; -- takes effect when `strict` is true&#xA; override_by_operating_system = {&#xA;  [&#34;apple&#34;] = {&#xA;    icon = &#34;&#34;,&#xA;    color = &#34;#A2AAAD&#34;,&#xA;    cterm_color = &#34;248&#34;,&#xA;    name = &#34;Apple&#34;,&#xA;  },&#xA; };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Icon&lt;/h3&gt; &#xA;&lt;p&gt;Get the icon for a given file by passing in the &lt;code&gt;name&lt;/code&gt;, the &lt;code&gt;extension&lt;/code&gt; and an &lt;em&gt;optional&lt;/em&gt; options &lt;code&gt;table&lt;/code&gt;. The name is passed in to check for an exact match e.g. &lt;code&gt;.bashrc&lt;/code&gt; if there is no exact name match the extension is used. Calls &lt;code&gt;.setup()&lt;/code&gt; if it hasn&#39;t already ran.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icon(filename, extension, options)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can used to change how the plugin works the keys include &lt;code&gt;default = &amp;lt;boolean&amp;gt;&lt;/code&gt; and &lt;code&gt;strict = &amp;lt;boolean&amp;gt;&lt;/code&gt;. If the default key is set to true this function will return a default if there is no matching icon. If the strict key is set to true this function will lookup icon specifically by filename, and if not found then specifically by extension, and fallback to default icon if default key is set to true. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icon(filename, extension, { default = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check if the setup function was already called with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.has_loaded()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get icon and color code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;get_icon_color&lt;/code&gt; differs from &lt;code&gt;get_icon&lt;/code&gt; only in the second return value. &lt;code&gt;get_icon_cterm_color&lt;/code&gt; returns cterm color instead of gui color &lt;code&gt;get_icon&lt;/code&gt; returns icon and highlight name. If you want to get color code, you can use this function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local icon, color = require&#39;nvim-web-devicons&#39;.get_icon_color(&#34;init.lua&#34;, &#34;lua&#34;)&#xA;assert(icon == &#34;&#34;)&#xA;assert(color == &#34;#51a0cf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get all icons&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to get all of the registered icons with the &lt;code&gt;get_icons()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icons()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be useful for debugging purposes or for creating custom highlights for each icon.&lt;/p&gt; &#xA;&lt;p&gt;Mapped categories can be fetched via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icons_by_filename()&#xA;require&#39;nvim-web-devicons&#39;.get_icons_by_extension()&#xA;require&#39;nvim-web-devicons&#39;.get_icons_by_operating_system()&#xA;require&#39;nvim-web-devicons&#39;.get_icons_by_desktop_environment()&#xA;require&#39;nvim-web-devicons&#39;.get_icons_by_window_manager()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set an icon&lt;/h3&gt; &#xA;&lt;p&gt;You can override individual icons with the &lt;code&gt;set_icon({...})&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).set_icon {&#xA;  zsh = {&#xA;    icon = &#34;&#34;,&#xA;    color = &#34;#428850&#34;,&#xA;    cterm_color = &#34;65&#34;,&#xA;    name = &#34;Zsh&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override the default icon with the &lt;code&gt;set_default_icon(icon, color, cterm_color)&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).set_default_icon(&#39;&#39;, &#39;#6d8086&#39;, 65)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting and setting icons by filetype&lt;/h3&gt; &#xA;&lt;p&gt;You can get the icon and colors associated with a filetype using the &lt;code&gt;by_filetype&lt;/code&gt; functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).get_icon_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_colors_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_color_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_cterm_color_by_filetype(filetype, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or set the icon to use for a filetype with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).set_icon_by_filetype { cpp = &#34;c&#34;, pandoc = &#34;md&#34;, }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These functions are the same as their counterparts without the &lt;code&gt;_by_filetype&lt;/code&gt; suffix, but they take a filetype instead of a name/extension.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;get_icon_name_by_filetype(filetype)&lt;/code&gt; to get the icon name associated with the filetype.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;My &lt;code&gt;setup&lt;/code&gt; Overrides Are Not Applied&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Cause:&lt;/em&gt; A plugin may be calling nvim-web-devicons &lt;code&gt;setup&lt;/code&gt; before you do. Your &lt;code&gt;setup&lt;/code&gt; call will be ignored.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Workaround:&lt;/em&gt; Call nvim-web-devicons &lt;code&gt;setup&lt;/code&gt; before the plugin&#39;s own &lt;code&gt;setup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Windows and WSL not rendering icons properly on some terminals&lt;/h3&gt; &#xA;&lt;p&gt;On Windows and WSL, it is possible that the icons are not rendered properly when using a terminal that relies on Windows&#39; default system libraries. An example of this is Alacritty (&lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons/issues/271#issuecomment-2081280928&#34;&gt;#271&lt;/a&gt;). Other terminals (e.g. Windows Terminal, and WezTerm) do no have this issue, as they ship newer versions of these libraries. More precisely, they use newer versions of &lt;code&gt;conpty.dll&lt;/code&gt; and &lt;code&gt;OpenConsole.exe&lt;/code&gt;. So, as a workaround to the rendering issue, you need to make your terminal use these newer files. Whether this is possible depends on the terminal you are using. Please refer to the terminal&#39;s documentation for this.&lt;/p&gt; &#xA;&lt;p&gt;In the specific case of Alacritty, you need to place up-to-date &lt;code&gt;conpty.dll&lt;/code&gt; and &lt;code&gt;OpenConsole.exe&lt;/code&gt; files in your &lt;code&gt;PATH&lt;/code&gt;. Microsoft does not provide these files directly, but you can get them from other terminal emulators that ship them.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PRs are always welcome! Please see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-tree/nvim-web-devicons/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>