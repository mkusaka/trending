<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T02:17:17Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rebelot/kanagawa.nvim</title>
    <updated>2023-06-01T02:17:17Z</updated>
    <id>tag:github.com,2023-06-01:/rebelot/kanagawa.nvim</id>
    <link href="https://github.com/rebelot/kanagawa.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NeoVim dark colorscheme inspired by the colors of the famous painting by Katsushika Hokusai.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;🌊 KANAGAWA.nvim 🌊&lt;/h2&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/kanagawa@2x.png&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;NeoVim dark colorscheme inspired by the colors of the famous painting by Katsushika Hokusai.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;&lt;img alt=&#34;Preview&#34; src=&#34;https://user-images.githubusercontent.com/36300441/222913073-22b95f11-8c08-4b2b-867c-19072c921de1.png&#34; width=&#34;1000&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extensive support for &lt;code&gt;TreeSitter&lt;/code&gt; syntax highlighting, and &lt;em&gt;many&lt;/em&gt; popular plugins&lt;/li&gt; &#xA; &lt;li&gt;Compilation to lua byte code for super fast startup times&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download with your favorite package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#34;rebelot/kanagawa.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim latest&lt;/li&gt; &#xA; &lt;li&gt;truecolor terminal support&lt;/li&gt; &#xA; &lt;li&gt;undercurl terminal support (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;As simple as writing (pasting)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;colorscheme kanagawa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#34;colorscheme kanagawa&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;There is no need to call setup if you are ok with the defaults.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Default options:&#xA;require(&#39;kanagawa&#39;).setup({&#xA;    compile = false,             -- enable compiling the colorscheme&#xA;    undercurl = true,            -- enable undercurls&#xA;    commentStyle = { italic = true },&#xA;    functionStyle = {},&#xA;    keywordStyle = { italic = true},&#xA;    statementStyle = { bold = true },&#xA;    typeStyle = {},&#xA;    transparent = false,         -- do not set background color&#xA;    dimInactive = false,         -- dim inactive window `:h hl-NormalNC`&#xA;    terminalColors = true,       -- define vim.g.terminal_color_{0,17}&#xA;    colors = {                   -- add/modify theme and palette colors&#xA;        palette = {},&#xA;        theme = { wave = {}, lotus = {}, dragon = {}, all = {} },&#xA;    },&#xA;    overrides = function(colors) -- add/modify highlights&#xA;        return {}&#xA;    end,&#xA;    theme = &#34;wave&#34;,              -- Load &#34;wave&#34; theme when &#39;background&#39; option is not set&#xA;    background = {               -- map the value of &#39;background&#39; option to a theme&#xA;        dark = &#34;wave&#34;,           -- try &#34;dragon&#34; !&#xA;        light = &#34;lotus&#34;&#xA;    },&#xA;})&#xA;&#xA;-- setup must be called before loading&#xA;vim.cmd(&#34;colorscheme kanagawa&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE 1:&lt;/em&gt;&lt;/strong&gt; If you enable compilation, make sure to run &lt;code&gt;:KanagawaCompile&lt;/code&gt; command every time you make changes to your config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; 1. Modify your config&#xA;&#34; 2. Restart nvim&#xA;&#34; 3. Run this command:&#xA;:KanagawaCompile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE 2:&lt;/em&gt;&lt;/strong&gt; Kanagawa adjusts to the value of some options. Make sure that the options &lt;code&gt;&#39;laststatus&#39;&lt;/code&gt; and &lt;code&gt;&#39;cmdheight&#39;&lt;/code&gt; are set &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; calling &lt;code&gt;setup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;p&gt;Kanagawa comes in three variants:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;wave&lt;/code&gt; the default heart-warming theme,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dragon&lt;/code&gt; for those late-night sessions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lotus&lt;/code&gt; for when you&#39;re out in the open.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Themes can be changed in three ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setting &lt;code&gt;config.theme&lt;/code&gt; to the desired theme. Note that &lt;code&gt;vim.o.background&lt;/code&gt; &lt;strong&gt;must&lt;/strong&gt; be unset.&lt;/li&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;background&lt;/code&gt; option: Any change to the value of &lt;code&gt;vim.o.background&lt;/code&gt; will select the theme mapped by &lt;code&gt;config.background&lt;/code&gt;. Use &lt;code&gt;vim.o.background = &#34;&#34;&lt;/code&gt; to unset this option.&lt;/li&gt; &#xA; &lt;li&gt;Loading the colorscheme directly with: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd(&#34;colorscheme kanagawa-wave&#34;)&#xA;vim.cmd(&#34;colorscheme kanagawa-dragon&#34;)&#xA;vim.cmd(&#34;colorscheme kanagawa-lotus&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; or &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;kanagawa&#34;).load(&#34;wave&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;In kanagawa, there are &lt;em&gt;two&lt;/em&gt; kinds of colors: &lt;code&gt;PaletteColors&lt;/code&gt; and &lt;code&gt;ThemeColors&lt;/code&gt;; &lt;code&gt;PaletteColors&lt;/code&gt; are defined directly as RGB Hex strings, and have arbitrary names that recall their actual color. Conversely, &lt;code&gt;ThemeColors&lt;/code&gt; are named and grouped &lt;em&gt;semantically&lt;/em&gt; on the basis of their actual function.&lt;/p&gt; &#xA;&lt;p&gt;In short, a &lt;code&gt;palette&lt;/code&gt; defines all the available colors, while a &lt;code&gt;theme&lt;/code&gt; maps the &lt;code&gt;PaletteColors&lt;/code&gt; to specific &lt;code&gt;ThemeColors&lt;/code&gt; and the same palette color may be assigned to multiple theme colors.&lt;/p&gt; &#xA;&lt;p&gt;You can change &lt;em&gt;both&lt;/em&gt; theme or palette colors using &lt;code&gt;config.colors&lt;/code&gt;. All the palette color names can be found &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/lua/kanagawa/colors.lua&#34;&gt;here&lt;/a&gt;, while their usage by each theme can be found &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/lua/kanagawa/themes.lua&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;kanagawa&#39;).setup({&#xA;    ...,&#xA;    colors = {&#xA;        palette = {&#xA;            -- change all usages of these colors&#xA;            sumiInk0 = &#34;#000000&#34;,&#xA;            fujiWhite = &#34;#FFFFFF&#34;,&#xA;        },&#xA;        theme = {&#xA;            -- change specific usages for a certain theme, or for all of them&#xA;            wave = {&#xA;                ui = {&#xA;                    float = {&#xA;                        bg = &#34;none&#34;,&#xA;                    },&#xA;                },&#xA;            },&#xA;            dragon = {&#xA;                syn = {&#xA;                    parameter = &#34;yellow&#34;,&#xA;                },&#xA;            },&#xA;            all = {&#xA;                ui = {&#xA;                    bg_gutter = &#34;none&#34;&#xA;                }&#xA;            }&#xA;        }&#xA;    },&#xA;    ...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also conveniently add/modify &lt;code&gt;hlgroups&lt;/code&gt; using the &lt;code&gt;config.overrides&lt;/code&gt; option. Supported keywords are the same for &lt;code&gt;:h nvim_set_hl&lt;/code&gt; &lt;code&gt;{val}&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;kanagawa&#39;).setup({&#xA;    ...,&#xA;    overrides = function(colors)&#xA;        return {&#xA;            -- Assign a static color to strings&#xA;            String = { fg = colors.palette.carpYellow, italic = true },&#xA;            -- theme colors will update dynamically when you change theme!&#xA;            SomePluginHl = { fg = colors.theme.syn.type, bold = true },&#xA;        }&#xA;    end,&#xA;    ...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common customizations&lt;/h3&gt; &#xA;&lt;h4&gt;Remove &lt;em&gt;gutter&lt;/em&gt; background&lt;/h4&gt; &#xA;&lt;p&gt;Remove the background of &lt;code&gt;LineNr&lt;/code&gt;, &lt;code&gt;{Sign,Fold}Column&lt;/code&gt; and friends&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;colors = {&#xA;    theme = {&#xA;        all = {&#xA;            ui = {&#xA;                bg_gutter = &#34;none&#34;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Transparent Floating Windows&lt;/h4&gt; &#xA;&lt;p&gt;This will make floating windows look nicer with default borders.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;overrides = function(colors)&#xA;    local theme = colors.theme&#xA;    return {&#xA;        NormalFloat = { bg = &#34;none&#34; },&#xA;        FloatBorder = { bg = &#34;none&#34; },&#xA;        FloatTitle = { bg = &#34;none&#34; },&#xA;&#xA;        -- Save an hlgroup with dark background and dimmed foreground&#xA;        -- so that you can use it where your still want darker windows.&#xA;        -- E.g.: autocmd TermOpen * setlocal winhighlight=Normal:NormalDark&#xA;        NormalDark = { fg = theme.ui.fg_dim, bg = theme.ui.bg_m3 },&#xA;&#xA;        -- Popular plugins that open floats will link to NormalFloat by default;&#xA;        -- set their background accordingly if you wish to keep them dark and borderless&#xA;        LazyNormal = { bg = theme.ui.bg_m3, fg = theme.ui.fg_dim },&#xA;        MasonNormal = { bg = theme.ui.bg_m3, fg = theme.ui.fg_dim },&#xA;    }&#xA;end,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to keep the floating windows darker, but you&#39;re unhappy with how borders are rendered, consider using characters that are drawn at the edges of the box:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;🭽&#34;, &#34;▔&#34;, &#34;🭾&#34;, &#34;▕&#34;, &#34;🭿&#34;, &#34;▁&#34;, &#34;🭼&#34;, &#34;▏&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Borderless Telescope&lt;/h4&gt; &#xA;&lt;p&gt;Block-like &lt;em&gt;modern&lt;/em&gt; Telescope UI&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;overrides = function(colors)&#xA;    local theme = colors.theme&#xA;    return {&#xA;        TelescopeTitle = { fg = theme.ui.special, bold = true },&#xA;        TelescopePromptNormal = { bg = theme.ui.bg_p1 },&#xA;        TelescopePromptBorder = { fg = theme.ui.bg_p1, bg = theme.ui.bg_p1 },&#xA;        TelescopeResultsNormal = { fg = theme.ui.fg_dim, bg = theme.ui.bg_m1 },&#xA;        TelescopeResultsBorder = { fg = theme.ui.bg_m1, bg = theme.ui.bg_m1 },&#xA;        TelescopePreviewNormal = { bg = theme.ui.bg_dim },&#xA;        TelescopePreviewBorder = { bg = theme.ui.bg_dim, fg = theme.ui.bg_dim },&#xA;    }&#xA;end,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dark completion (popup) menu&lt;/h4&gt; &#xA;&lt;p&gt;More uniform colors for the popup menu.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;overrides = function(colors)&#xA;    local theme = colors.theme&#xA;    return {&#xA;        Pmenu = { fg = theme.ui.shade0, bg = theme.ui.bg_p1 },  -- add `blend = vim.o.pumblend` to enable transparency&#xA;        PmenuSel = { fg = &#34;NONE&#34;, bg = theme.ui.bg_p2 },&#xA;        PmenuSbar = { bg = theme.ui.bg_m1 },&#xA;        PmenuThumb = { bg = theme.ui.bg_p2 },&#xA;    }&#xA;end,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;h3&gt;Get palette and theme colors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Get the colors for the current theme&#xA;local colors = require(&#34;kanagawa.colors&#34;).setup()&#xA;local palette_colors = colors.palette&#xA;local theme_colors = colors.theme&#xA;&#xA;-- Get the colors for a specific theme&#xA;local wave_colors = require(&#34;kanagawa.colors&#34;).setup({ theme = &#39;wave&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Terminal integration&lt;/h3&gt; &#xA;&lt;p&gt;The following example provides a snippet to automatically change the theme for the Kitty terminal emulator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#34;ColorScheme&#34;, {&#xA;    pattern = &#34;kanagawa&#34;,&#xA;    callback = function()&#xA;        if vim.o.background == &#34;light&#34; then&#xA;            vim.fn.system(&#34;kitty +kitten themes Kanagawa_light&#34;)&#xA;        elseif vim.o.background == &#34;dark&#34; then&#xA;            vim.fn.system(&#34;kitty +kitten themes Kanagawa_dragon&#34;)&#xA;        else&#xA;            vim.fn.system(&#34;kitty +kitten themes Kanagawa&#34;)&#xA;        end&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h2&gt;Color palette&lt;/h2&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Hex&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Usage&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/fujiWhite.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;fujiWhite&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#DCD7BA&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Default foreground&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/oldWhite.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;oldWhite&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#C8C093&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Dark foreground (statuslines)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/sumiInk0.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;sumiInk0&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#16161D&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Dark background (statuslines and floating windows)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/sumiInk1.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;sumiInk1&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#1F1F28&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Default background&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/sumiInk2.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;sumiInk2&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#2A2A37&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Lighter background (colorcolumn, folds)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/sumiInk3.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;sumiInk3&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#363646&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Lighter background (cursorline)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/sumiInk4.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;sumiInk4&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#54546D&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Darker foreground (line numbers, fold column, non-text characters), float borders&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/waveBlue1.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;waveBlue1&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#223249&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Popup background, visual selection background&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/waveBlue2.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;waveBlue2&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#2D4F67&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Popup selection background, search background&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/winterGreen.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;winterGreen&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#2B3328&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Diff Add (background)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/winterYellow.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;winterYellow&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#49443C&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Diff Change (background)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/winterRed.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;winterRed&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#43242B&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Diff Deleted (background)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/winterBlue.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;winterBlue&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#252535&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Diff Line (background)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/autumnGreen.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;autumnGreen&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#76946A&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Git Add&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/autumnRed.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;autumnRed&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#C34043&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Git Delete&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/autumnYellow.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;autumnYellow&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#DCA561&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Git Change&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/samuraiRed.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;samuraiRed&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#E82424&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Diagnostic Error&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/roninYellow.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;roninYellow&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#FF9E3B&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Diagnostic Warning&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/waveAqua1.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;waveAqua1&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#6A9589&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Diagnostic Info&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/dragonBlue.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;dragonBlue&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#658594&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Diagnostic Hint&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/fujiGray.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;fujiGray&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#727169&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Comments&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/springViolet1.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;springViolet1&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#938AA9&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Light foreground&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/oniViolet.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;oniViolet&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#957FB8&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Statements and Keywords&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/crystalBlue.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;crystalBlue&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#7E9CD8&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Functions and Titles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/springViolet2.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;springViolet2&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#9CABCA&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Brackets and punctuation&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/springBlue.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;springBlue&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#7FB4CA&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Specials and builtin functions&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/lightBlue.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;lightBlue&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#A3D4D5&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Not used&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/waveAqua2.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;waveAqua2&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#7AA89F&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Types&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/springGreen.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;springGreen&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#98BB6C&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Strings&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/boatYellow1.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;boatYellow1&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#938056&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Not used&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/boatYellow2.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;boatYellow2&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#C0A36E&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Operators, RegEx&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/carpYellow.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;carpYellow&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#E6C384&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Identifiers&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/sakuraPink.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;sakuraPink&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#D27E99&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Numbers&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/waveRed.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;waveRed&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#E46876&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Standout specials 1 (builtin variables)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/peachRed.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;peachRed&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#FF5D62&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Standout specials 2 (exception handling, return)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/surimiOrange.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;surimiOrange&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#FFA066&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Constants, imports, booleans&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/assets/circles/katanaGray.svg?sanitize=true&#34; width=&#34;40&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;katanaGray&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;#717C7C&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Deprecated&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/alacritty_kanagawa.yml&#34;&gt;alacritty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/base16-theme.yaml&#34;&gt;base16&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/broot_kanagawa.toml&#34;&gt;broot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/kanagawa-theme.el&#34;&gt;emacs, doom emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/kanagawa.fish&#34;&gt;fish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/foot_kanagawa.ini&#34;&gt;foot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/kanagawa.itermcolors&#34;&gt;iTerm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/kanagawa.conf&#34;&gt;kitty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/kanagawa.minttyrc&#34;&gt;mintty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/pywal-theme.json&#34;&gt;pywal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/kanagawa.sway&#34;&gt;sway&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/wezterm.lua&#34;&gt;wezterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/windows_terminal.json&#34;&gt;Windows Terminal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/.Xresources&#34;&gt;Xresources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/extras/Kanagawa.json&#34;&gt;JSON compatible with many terminals&lt;/a&gt; Check &lt;a href=&#34;https://github.com/Gogh-Co/Gogh#-terminals&#34;&gt;Gogh&lt;/a&gt; for the list of supported terminals.&lt;/li&gt; &#xA; &lt;li&gt;🎉 Bonus! You win a tiny &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/kanagawa.nvim/master/palette.py&#34;&gt;python script&lt;/a&gt;🐍 to extract color palettes 🎨 from any image! 🥳&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/tokyonight.nvim&#34;&gt;Tokyonight&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/morhetz/gruvbox&#34;&gt;Gruvbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/catppuccin/nvim&#34;&gt;Catppuccin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://affinity.serif.com/designer/&#34;&gt;Affinity Designer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Donate&lt;/h3&gt; &#xA;&lt;p&gt;Buy me coffee and support my work ;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate/?business=VNQPHGW4JEM3S&amp;amp;no_recurring=0&amp;amp;item_name=Buy+me+coffee+and+support+my+work+%3B%29&amp;amp;currency_code=EUR&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nvim-neo-tree/neo-tree.nvim</title>
    <updated>2023-06-01T02:17:17Z</updated>
    <id>tag:github.com,2023-06-01:/nvim-neo-tree/neo-tree.nvim</id>
    <link href="https://github.com/nvim-neo-tree/neo-tree.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin to manage the file system and other tree like structures.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neo-tree.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Neo-tree is a Neovim plugin to browse the file system and other tree like structures in whatever style suits you, including sidebars, floating windows, netrw split style, or all of them at once!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-with-right-aligned-symbols.png&#34; alt=&#34;Neo-tree file system&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Breaking Changes BAD &lt;span&gt;💣&lt;/span&gt; &lt;span&gt;👿&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The biggest and most important feature of Neo-tree is that we will never knowingly push a breaking change and interrupt your day. Bugs happen, but breaking changes can always be avoided. When breaking changes are needed, there will be a new branch that you can opt into, when it is a good time for you.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/#what-is-a-breaking-change&#34;&gt;What is a Breaking Change?&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Changelog#20&#34;&gt;Changelog 2.0&lt;/a&gt; for breaking changes and deprecations in 2.0.&lt;/p&gt; &#xA;&lt;h3&gt;User Experience GOOD &lt;span&gt;🙂&lt;/span&gt; &lt;span&gt;👍&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Aside from being polite about breaking changes, Neo-tree is also focused on the little details of user experience. Everything should work exactly as you would expect a sidebar to work without all of the glitchy behavior that is normally accepted in (neo)vim sidebars. I can&#39;t stand glitchy behavior, and neither should you!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neo-tree won&#39;t let other buffers take over its window.&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree won&#39;t leave its window scrolled to the last line when there is plenty of room to display the whole tree.&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree does not need to be manually refreshed (set &lt;code&gt;use_libuv_file_watcher=true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree can intelligently follow the current file (set &lt;code&gt;follow_current_file=true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree is thoughtful about maintaining or setting focus on the right node&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree windows in different tabs are completely separate&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;respect_gitignore&lt;/code&gt; actually works!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Neo-tree is smooth, efficient, stable, and pays attention to the little details. If you find anything janky, wanky, broken, or unintuitive, please open an issue so we can fix it.&lt;/p&gt; &#xA;&lt;h2&gt;Minimal Quickstart&lt;/h2&gt; &#xA;&lt;h4&gt;Minimal Example for Packer:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Unless you are still migrating, remove the deprecated commands from v1.x&#xA;vim.cmd([[ let g:neo_tree_remove_legacy_commands = 1 ]])&#xA;&#xA;use {&#xA;  &#34;nvim-neo-tree/neo-tree.nvim&#34;,&#xA;    branch = &#34;v2.x&#34;,&#xA;    requires = { &#xA;      &#34;nvim-lua/plenary.nvim&#34;,&#xA;      &#34;nvim-tree/nvim-web-devicons&#34;, -- not strictly required, but recommended&#xA;      &#34;MunifTanjim/nui.nvim&#34;,&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Press &lt;code&gt;?&lt;/code&gt; in the Neo-tree window to view the list of mappings.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h4&gt;Longer Example for Packer:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;nvim-neo-tree/neo-tree.nvim&#34;,&#xA;    branch = &#34;v2.x&#34;,&#xA;    requires = { &#xA;      &#34;nvim-lua/plenary.nvim&#34;,&#xA;      &#34;nvim-tree/nvim-web-devicons&#34;, -- not strictly required, but recommended&#xA;      &#34;MunifTanjim/nui.nvim&#34;,&#xA;      {&#xA;        -- only needed if you want to use the commands with &#34;_with_window_picker&#34; suffix&#xA;        &#39;s1n7ax/nvim-window-picker&#39;,&#xA;        tag = &#34;v1.*&#34;,&#xA;        config = function()&#xA;          require&#39;window-picker&#39;.setup({&#xA;            autoselect_one = true,&#xA;            include_current = false,&#xA;            filter_rules = {&#xA;              -- filter using buffer options&#xA;              bo = {&#xA;                -- if the file type is one of following, the window will be ignored&#xA;                filetype = { &#39;neo-tree&#39;, &#34;neo-tree-popup&#34;, &#34;notify&#34; },&#xA;&#xA;                -- if the buffer type is one of following, the window will be ignored&#xA;                buftype = { &#39;terminal&#39;, &#34;quickfix&#34; },&#xA;              },&#xA;            },&#xA;            other_win_hl_color = &#39;#e35e4f&#39;,&#xA;          })&#xA;        end,&#xA;      }&#xA;    },&#xA;    config = function ()&#xA;      -- Unless you are still migrating, remove the deprecated commands from v1.x&#xA;      vim.cmd([[ let g:neo_tree_remove_legacy_commands = 1 ]])&#xA;&#xA;      -- If you want icons for diagnostic errors, you&#39;ll need to define them somewhere:&#xA;      vim.fn.sign_define(&#34;DiagnosticSignError&#34;,&#xA;        {text = &#34; &#34;, texthl = &#34;DiagnosticSignError&#34;})&#xA;      vim.fn.sign_define(&#34;DiagnosticSignWarn&#34;,&#xA;        {text = &#34; &#34;, texthl = &#34;DiagnosticSignWarn&#34;})&#xA;      vim.fn.sign_define(&#34;DiagnosticSignInfo&#34;,&#xA;        {text = &#34; &#34;, texthl = &#34;DiagnosticSignInfo&#34;})&#xA;      vim.fn.sign_define(&#34;DiagnosticSignHint&#34;,&#xA;        {text = &#34;&#34;, texthl = &#34;DiagnosticSignHint&#34;})&#xA;      -- NOTE: this is changed from v1.x, which used the old style of highlight groups&#xA;      -- in the form &#34;LspDiagnosticsSignWarning&#34;&#xA;&#xA;      require(&#34;neo-tree&#34;).setup({&#xA;        close_if_last_window = false, -- Close Neo-tree if it is the last window left in the tab&#xA;        popup_border_style = &#34;rounded&#34;,&#xA;        enable_git_status = true,&#xA;        enable_diagnostics = true,&#xA;        open_files_do_not_replace_types = { &#34;terminal&#34;, &#34;trouble&#34;, &#34;qf&#34; }, -- when opening files, do not use windows containing these filetypes or buftypes&#xA;        sort_case_insensitive = false, -- used when sorting files and directories in the tree&#xA;        sort_function = nil , -- use a custom function for sorting files and directories in the tree &#xA;        -- sort_function = function (a,b)&#xA;        --       if a.type == b.type then&#xA;        --           return a.path &amp;gt; b.path&#xA;        --       else&#xA;        --           return a.type &amp;gt; b.type&#xA;        --       end&#xA;        --   end , -- this sorts files and directories descendantly&#xA;        default_component_configs = {&#xA;          container = {&#xA;            enable_character_fade = true&#xA;          },&#xA;          indent = {&#xA;            indent_size = 2,&#xA;            padding = 1, -- extra padding on left hand side&#xA;            -- indent guides&#xA;            with_markers = true,&#xA;            indent_marker = &#34;│&#34;,&#xA;            last_indent_marker = &#34;└&#34;,&#xA;            highlight = &#34;NeoTreeIndentMarker&#34;,&#xA;            -- expander config, needed for nesting files&#xA;            with_expanders = nil, -- if nil and file nesting is enabled, will enable expanders&#xA;            expander_collapsed = &#34;&#34;,&#xA;            expander_expanded = &#34;&#34;,&#xA;            expander_highlight = &#34;NeoTreeExpander&#34;,&#xA;          },&#xA;          icon = {&#xA;            folder_closed = &#34;&#34;,&#xA;            folder_open = &#34;&#34;,&#xA;            folder_empty = &#34;ﰊ&#34;,&#xA;            -- The next two settings are only a fallback, if you use nvim-web-devicons and configure default icons there&#xA;            -- then these will never be used.&#xA;            default = &#34;*&#34;,&#xA;            highlight = &#34;NeoTreeFileIcon&#34;&#xA;          },&#xA;          modified = {&#xA;            symbol = &#34;[+]&#34;,&#xA;            highlight = &#34;NeoTreeModified&#34;,&#xA;          },&#xA;          name = {&#xA;            trailing_slash = false,&#xA;            use_git_status_colors = true,&#xA;            highlight = &#34;NeoTreeFileName&#34;,&#xA;          },&#xA;          git_status = {&#xA;            symbols = {&#xA;              -- Change type&#xA;              added     = &#34;&#34;, -- or &#34;✚&#34;, but this is redundant info if you use git_status_colors on the name&#xA;              modified  = &#34;&#34;, -- or &#34;&#34;, but this is redundant info if you use git_status_colors on the name&#xA;              deleted   = &#34;✖&#34;,-- this can only be used in the git_status source&#xA;              renamed   = &#34;&#34;,-- this can only be used in the git_status source&#xA;              -- Status type&#xA;              untracked = &#34;&#34;,&#xA;              ignored   = &#34;&#34;,&#xA;              unstaged  = &#34;&#34;,&#xA;              staged    = &#34;&#34;,&#xA;              conflict  = &#34;&#34;,&#xA;            }&#xA;          },&#xA;        },&#xA;        -- A list of functions, each representing a global custom command&#xA;        -- that will be available in all sources (if not overridden in `opts[source_name].commands`)&#xA;        -- see `:h neo-tree-global-custom-commands`&#xA;        commands = {},&#xA;        window = {&#xA;          position = &#34;left&#34;,&#xA;          width = 40,&#xA;          mapping_options = {&#xA;            noremap = true,&#xA;            nowait = true,&#xA;          },&#xA;          mappings = {&#xA;            [&#34;&amp;lt;space&amp;gt;&#34;] = { &#xA;                &#34;toggle_node&#34;, &#xA;                nowait = false, -- disable `nowait` if you have existing combos starting with this char that you want to use &#xA;            },&#xA;            [&#34;&amp;lt;2-LeftMouse&amp;gt;&#34;] = &#34;open&#34;,&#xA;            [&#34;&amp;lt;cr&amp;gt;&#34;] = &#34;open&#34;,&#xA;            [&#34;&amp;lt;esc&amp;gt;&#34;] = &#34;revert_preview&#34;,&#xA;            [&#34;P&#34;] = { &#34;toggle_preview&#34;, config = { use_float = true } },&#xA;            [&#34;l&#34;] = &#34;focus_preview&#34;,&#xA;            [&#34;S&#34;] = &#34;open_split&#34;,&#xA;            [&#34;s&#34;] = &#34;open_vsplit&#34;,&#xA;            -- [&#34;S&#34;] = &#34;split_with_window_picker&#34;,&#xA;            -- [&#34;s&#34;] = &#34;vsplit_with_window_picker&#34;,&#xA;            [&#34;t&#34;] = &#34;open_tabnew&#34;,&#xA;            -- [&#34;&amp;lt;cr&amp;gt;&#34;] = &#34;open_drop&#34;,&#xA;            -- [&#34;t&#34;] = &#34;open_tab_drop&#34;,&#xA;            [&#34;w&#34;] = &#34;open_with_window_picker&#34;,&#xA;            --[&#34;P&#34;] = &#34;toggle_preview&#34;, -- enter preview mode, which shows the current node without focusing&#xA;            [&#34;C&#34;] = &#34;close_node&#34;,&#xA;            -- [&#39;C&#39;] = &#39;close_all_subnodes&#39;,&#xA;            [&#34;z&#34;] = &#34;close_all_nodes&#34;,&#xA;            --[&#34;Z&#34;] = &#34;expand_all_nodes&#34;,&#xA;            [&#34;a&#34;] = { &#xA;              &#34;add&#34;,&#xA;              -- this command supports BASH style brace expansion (&#34;x{a,b,c}&#34; -&amp;gt; xa,xb,xc). see `:h neo-tree-file-actions` for details&#xA;              -- some commands may take optional config options, see `:h neo-tree-mappings` for details&#xA;              config = {&#xA;                show_path = &#34;none&#34; -- &#34;none&#34;, &#34;relative&#34;, &#34;absolute&#34;&#xA;              }&#xA;            },&#xA;            [&#34;A&#34;] = &#34;add_directory&#34;, -- also accepts the optional config.show_path option like &#34;add&#34;. this also supports BASH style brace expansion.&#xA;            [&#34;d&#34;] = &#34;delete&#34;,&#xA;            [&#34;r&#34;] = &#34;rename&#34;,&#xA;            [&#34;y&#34;] = &#34;copy_to_clipboard&#34;,&#xA;            [&#34;x&#34;] = &#34;cut_to_clipboard&#34;,&#xA;            [&#34;p&#34;] = &#34;paste_from_clipboard&#34;,&#xA;            [&#34;c&#34;] = &#34;copy&#34;, -- takes text input for destination, also accepts the optional config.show_path option like &#34;add&#34;:&#xA;            -- [&#34;c&#34;] = {&#xA;            --  &#34;copy&#34;,&#xA;            --  config = {&#xA;            --    show_path = &#34;none&#34; -- &#34;none&#34;, &#34;relative&#34;, &#34;absolute&#34;&#xA;            --  }&#xA;            --}&#xA;            [&#34;m&#34;] = &#34;move&#34;, -- takes text input for destination, also accepts the optional config.show_path option like &#34;add&#34;.&#xA;            [&#34;q&#34;] = &#34;close_window&#34;,&#xA;            [&#34;R&#34;] = &#34;refresh&#34;,&#xA;            [&#34;?&#34;] = &#34;show_help&#34;,&#xA;            [&#34;&amp;lt;&#34;] = &#34;prev_source&#34;,&#xA;            [&#34;&amp;gt;&#34;] = &#34;next_source&#34;,&#xA;          }&#xA;        },&#xA;        nesting_rules = {},&#xA;        filesystem = {&#xA;          filtered_items = {&#xA;            visible = false, -- when true, they will just be displayed differently than normal items&#xA;            hide_dotfiles = true,&#xA;            hide_gitignored = true,&#xA;            hide_hidden = true, -- only works on Windows for hidden files/directories&#xA;            hide_by_name = {&#xA;              --&#34;node_modules&#34;&#xA;            },&#xA;            hide_by_pattern = { -- uses glob style patterns&#xA;              --&#34;*.meta&#34;,&#xA;              --&#34;*/src/*/tsconfig.json&#34;,&#xA;            },&#xA;            always_show = { -- remains visible even if other settings would normally hide it&#xA;              --&#34;.gitignored&#34;,&#xA;            },&#xA;            never_show = { -- remains hidden even if visible is toggled to true, this overrides always_show&#xA;              --&#34;.DS_Store&#34;,&#xA;              --&#34;thumbs.db&#34;&#xA;            },&#xA;            never_show_by_pattern = { -- uses glob style patterns&#xA;              --&#34;.null-ls_*&#34;,&#xA;            },&#xA;          },&#xA;          follow_current_file = false, -- This will find and focus the file in the active buffer every&#xA;                                       -- time the current file is changed while the tree is open.&#xA;          group_empty_dirs = false, -- when true, empty folders will be grouped together&#xA;          hijack_netrw_behavior = &#34;open_default&#34;, -- netrw disabled, opening a directory opens neo-tree&#xA;                                                  -- in whatever position is specified in window.position&#xA;                                -- &#34;open_current&#34;,  -- netrw disabled, opening a directory opens within the&#xA;                                                  -- window like netrw would, regardless of window.position&#xA;                                -- &#34;disabled&#34;,    -- netrw left alone, neo-tree does not handle opening dirs&#xA;          use_libuv_file_watcher = false, -- This will use the OS level file watchers to detect changes&#xA;                                          -- instead of relying on nvim autocmd events.&#xA;          window = {&#xA;            mappings = {&#xA;              [&#34;&amp;lt;bs&amp;gt;&#34;] = &#34;navigate_up&#34;,&#xA;              [&#34;.&#34;] = &#34;set_root&#34;,&#xA;              [&#34;H&#34;] = &#34;toggle_hidden&#34;,&#xA;              [&#34;/&#34;] = &#34;fuzzy_finder&#34;,&#xA;              [&#34;D&#34;] = &#34;fuzzy_finder_directory&#34;,&#xA;              [&#34;#&#34;] = &#34;fuzzy_sorter&#34;, -- fuzzy sorting using the fzy algorithm&#xA;              -- [&#34;D&#34;] = &#34;fuzzy_sorter_directory&#34;,&#xA;              [&#34;f&#34;] = &#34;filter_on_submit&#34;,&#xA;              [&#34;&amp;lt;c-x&amp;gt;&#34;] = &#34;clear_filter&#34;,&#xA;              [&#34;[g&#34;] = &#34;prev_git_modified&#34;,&#xA;              [&#34;]g&#34;] = &#34;next_git_modified&#34;,&#xA;            },&#xA;            fuzzy_finder_mappings = { -- define keymaps for filter popup window in fuzzy_finder_mode&#xA;              [&#34;&amp;lt;down&amp;gt;&#34;] = &#34;move_cursor_down&#34;,&#xA;              [&#34;&amp;lt;C-n&amp;gt;&#34;] = &#34;move_cursor_down&#34;,&#xA;              [&#34;&amp;lt;up&amp;gt;&#34;] = &#34;move_cursor_up&#34;,&#xA;              [&#34;&amp;lt;C-p&amp;gt;&#34;] = &#34;move_cursor_up&#34;,&#xA;            },&#xA;          },&#xA;&#xA;          commands = {} -- Add a custom command or override a global one using the same function name&#xA;        },&#xA;        buffers = {&#xA;          follow_current_file = true, -- This will find and focus the file in the active buffer every&#xA;                                       -- time the current file is changed while the tree is open.&#xA;          group_empty_dirs = true, -- when true, empty folders will be grouped together&#xA;          show_unloaded = true,&#xA;          window = {&#xA;            mappings = {&#xA;              [&#34;bd&#34;] = &#34;buffer_delete&#34;,&#xA;              [&#34;&amp;lt;bs&amp;gt;&#34;] = &#34;navigate_up&#34;,&#xA;              [&#34;.&#34;] = &#34;set_root&#34;,&#xA;            }&#xA;          },&#xA;        },&#xA;        git_status = {&#xA;          window = {&#xA;            position = &#34;float&#34;,&#xA;            mappings = {&#xA;              [&#34;A&#34;]  = &#34;git_add_all&#34;,&#xA;              [&#34;gu&#34;] = &#34;git_unstage_file&#34;,&#xA;              [&#34;ga&#34;] = &#34;git_add_file&#34;,&#xA;              [&#34;gr&#34;] = &#34;git_revert_file&#34;,&#xA;              [&#34;gc&#34;] = &#34;git_commit&#34;,&#xA;              [&#34;gp&#34;] = &#34;git_push&#34;,&#xA;              [&#34;gg&#34;] = &#34;git_commit_and_push&#34;,&#xA;            }&#xA;          }&#xA;        }&#xA;      })&#xA;&#xA;      vim.cmd([[nnoremap \ :Neotree reveal&amp;lt;cr&amp;gt;]])&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;The above configuration is not everything that can be changed, it&#39;s just the parts you might want to change first.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neo-tree&lt;/code&gt; for full documentation. You can also preview that online at &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/doc/neo-tree.txt&#34;&gt;doc/neo-tree.txt&lt;/a&gt;, although it&#39;s best viewed within vim.&lt;/p&gt; &#xA;&lt;p&gt;To see all of the default config options with commentary, you can view it online at &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/lua/neo-tree/defaults.lua&#34;&gt;lua/neo-tree/defaults.lua&lt;/a&gt;. You can also paste it into a buffer after installing Neo-tree by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:lua require(&#34;neo-tree&#34;).paste_default_config()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuration for Nerd Fonts v3 Users&lt;/h4&gt; &#xA;&lt;p&gt;The following configuration should fix broken icons if you are using Nerd Fonts v3:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neo-tree&#34;).setup({&#xA;  default_component_configs = {&#xA;    icon = {&#xA;      folder_empty = &#34;󰜌&#34;,&#xA;      folder_empty_open = &#34;󰜌&#34;,&#xA;    },&#xA;    git_status = {&#xA;      symbols = {&#xA;        renamed   = &#34;󰁕&#34;,&#xA;        unstaged  = &#34;󰄱&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;  document_symbols = {&#xA;    kinds = {&#xA;      File = { icon = &#34;󰈙&#34;, hl = &#34;Tag&#34; },&#xA;      Namespace = { icon = &#34;󰌗&#34;, hl = &#34;Include&#34; },&#xA;      Package = { icon = &#34;󰏖&#34;, hl = &#34;Label&#34; },&#xA;      Class = { icon = &#34;󰌗&#34;, hl = &#34;Include&#34; },&#xA;      Property = { icon = &#34;󰆧&#34;, hl = &#34;@property&#34; },&#xA;      Enum = { icon = &#34;󰒻&#34;, hl = &#34;@number&#34; },&#xA;      Function = { icon = &#34;󰊕&#34;, hl = &#34;Function&#34; },&#xA;      String = { icon = &#34;󰀬&#34;, hl = &#34;String&#34; },&#xA;      Number = { icon = &#34;󰎠&#34;, hl = &#34;Number&#34; },&#xA;      Array = { icon = &#34;󰅪&#34;, hl = &#34;Type&#34; },&#xA;      Object = { icon = &#34;󰅩&#34;, hl = &#34;Type&#34; },&#xA;      Key = { icon = &#34;󰌋&#34;, hl = &#34;&#34; },&#xA;      Struct = { icon = &#34;󰌗&#34;, hl = &#34;Type&#34; },&#xA;      Operator = { icon = &#34;󰆕&#34;, hl = &#34;Operator&#34; },&#xA;      TypeParameter = { icon = &#34;󰊄&#34;, hl = &#34;Type&#34; },&#xA;      StaticMethod = { icon = &#39;󰠄 &#39;, hl = &#39;Function&#39; },&#xA;    }&#xA;  },&#xA;  -- Add this section only if you&#39;ve configured source selector.&#xA;  source_selector = {&#xA;    sources = {&#xA;      { source = &#34;filesystem&#34;, display_name = &#34; 󰉓 Files &#34; },&#xA;      { source = &#34;git_status&#34;, display_name = &#34; 󰊢 Git &#34; },&#xA;    },&#xA;  },&#xA;  -- Other options ...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The &lt;code&gt;:Neotree&lt;/code&gt; Command&lt;/h2&gt; &#xA;&lt;p&gt;The single &lt;code&gt;:Neotree&lt;/code&gt; command accepts a range of arguments that give you full control over the details of what and where it will show. For example, the following command will open a file browser on the right hand side, &#34;revealing&#34; the currently active file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree filesystem reveal right&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments can be specified as either a key=value pair or just as the value. The key=value form is more verbose but may help with clarity. For example, the command above can also be specified as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree source=filesystem reveal=true position=right&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All arguments are optional and can be specified in any order. If you issue the command without any arguments, it will use default values for everything. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will open the filesystem source on the left hand side and focus it, if you are using the default config.&lt;/p&gt; &#xA;&lt;h3&gt;Tab Completion&lt;/h3&gt; &#xA;&lt;p&gt;Neotree supports tab completion for all arguments. Once a given argument has a value, it will stop suggesting those completions. It will also offer completions for paths. The simplest way to disambiguate a path from another type of argument is to start them with &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;./&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Arguments&lt;/h3&gt; &#xA;&lt;p&gt;Here is the full list of arguments you can use:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;action&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;What to do. Can be one of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;focus&lt;/td&gt; &#xA;   &lt;td&gt;Show and/or switch focus to the specified Neotree window. DEFAULT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;show&lt;/td&gt; &#xA;   &lt;td&gt;Show the window, but keep focus on your current window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;close&lt;/td&gt; &#xA;   &lt;td&gt;Close the window(s) specified. Can be combined with &#34;position&#34; and/or &#34;source&#34; to specify which window(s) to close.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;source&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;What to show. Can be one of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;filesystem&lt;/td&gt; &#xA;   &lt;td&gt;Show a file browser. DEFAULT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;buffers&lt;/td&gt; &#xA;   &lt;td&gt;Show a list of currently open buffers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;git_status&lt;/td&gt; &#xA;   &lt;td&gt;Show the output of &lt;code&gt;git status&lt;/code&gt; in a tree layout.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;position&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Where to show it, can be one of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left&lt;/td&gt; &#xA;   &lt;td&gt;Open as left hand sidebar. DEFAULT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right&lt;/td&gt; &#xA;   &lt;td&gt;Open as right hand sidebar.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;top&lt;/td&gt; &#xA;   &lt;td&gt;Open as top window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bottom&lt;/td&gt; &#xA;   &lt;td&gt;Open as bottom window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;Open as floating window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;current&lt;/td&gt; &#xA;   &lt;td&gt;Open within the current window, like netrw or vinegar would.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;toggle&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a boolean flag. Adding this means that the window will be closed if it is already open.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The directory to set as the root/cwd of the specified window. If you include a directory as one of the arguments, it will be assumed to be this option, you don&#39;t need the full dir=/path. You may use any value that can be passed to the &#39;expand&#39; function, such as &lt;code&gt;%:p:h:h&lt;/code&gt; to specify two directories up from the current file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree ./relative/path&#xA;:Neotree /home/user/relative/path&#xA;:Neotree dir=/home/user/relative/path&#xA;:Neotree position=current dir=relative/path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;git_base&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The base that is used to calculate the git status for each dir/file. By default it uses &lt;code&gt;HEAD&lt;/code&gt;, so it shows all changes that are not yet committed. You can for example work on a feature branch, and set it to &lt;code&gt;main&lt;/code&gt;. It will show all changes that happened on the feature branch and main since you branched off.&lt;/p&gt; &#xA;&lt;p&gt;Any git ref, commit, tag, or sha will work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree main&#xA;:Neotree v1.0&#xA;:Neotree git_base=8fe34be&#xA;:Neotree git_base=HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;reveal&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a boolean flag. Adding this will make Neotree automatically find and focus the current file when it opens.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;reveal_file&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A path to a file to reveal. This supersedes the &#34;reveal&#34; flag so there is no need to specify both. Use this if you want to reveal something other than the current file. If you include a path to a file as one of the arguments, it will be assumed to be this option. Like &#34;dir&#34;, you can pass any value that can be passed to the &#39;expand&#39; function. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree reveal_file=/home/user/my/file.text&#xA;:Neotree position=current dir=%:p:h:h reveal_file=%:p&#xA;:Neotree current %:p:h:h %:p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One neat trick you can do with this is to open a Neotree window which is focused on the file under the cursor using the &lt;code&gt;&amp;lt;cfile&amp;gt;&lt;/code&gt; keyword:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nnoremap gd :Neotree float reveal_file=&amp;lt;cfile&amp;gt; reveal_force_cwd&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;reveal_force_cwd&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a boolean flag. Normally, if you use one of the reveal options and the given file is not within the current working directory, you will be asked if you want to change the current working directory. If you include this flag, it will automatically change the directory without prompting. This option implies &#34;reveal&#34;, so you do not need to specify both.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neo-tree-commands&lt;/code&gt; for details and a full listing of available arguments.&lt;/p&gt; &#xA;&lt;h3&gt;File Nesting&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neo-tree-file-nesting&lt;/code&gt; for more details about file nesting.&lt;/p&gt; &#xA;&lt;h3&gt;Netrw Hijack&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;:edit .&#xA;:[v]split .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;&#34;filesystem.window.position&#34;&lt;/code&gt; is set to &lt;code&gt;&#34;current&#34;&lt;/code&gt;, or if you have specified &lt;code&gt;filesystem.hijack_netrw_behavior = &#34;open_current&#34;&lt;/code&gt;, then any command that would open a directory will open neo-tree in the specified window.&lt;/p&gt; &#xA;&lt;h2&gt;Sources&lt;/h2&gt; &#xA;&lt;p&gt;Neo-tree is built on the idea of supporting various sources. Sources are basically interface implementations whose job it is to provide a list of hierarchical items to be rendered, along with commands that are appropriate to those items.&lt;/p&gt; &#xA;&lt;h3&gt;filesystem&lt;/h3&gt; &#xA;&lt;p&gt;The default source is &lt;code&gt;filesystem&lt;/code&gt;, which displays your files and folders. This is the default source in commands when none is specified.&lt;/p&gt; &#xA;&lt;p&gt;This source can be used to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Browse the filesystem&lt;/li&gt; &#xA; &lt;li&gt;Control the current working directory of nvim&lt;/li&gt; &#xA; &lt;li&gt;Add/Copy/Delete/Move/Rename files and directories&lt;/li&gt; &#xA; &lt;li&gt;Search the filesystem&lt;/li&gt; &#xA; &lt;li&gt;Monitor git status and lsp diagnostics for the current working directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;buffers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-buffers.png&#34; alt=&#34;Neo-tree buffers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another available source is &lt;code&gt;buffers&lt;/code&gt;, which displays your open buffers. This is the same list you would see from &lt;code&gt;:ls&lt;/code&gt;. To show with the &lt;code&gt;buffers&lt;/code&gt; list, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree buffers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;git_status&lt;/h3&gt; &#xA;&lt;p&gt;This view take the results of the &lt;code&gt;git status&lt;/code&gt; command and display them in a tree. It includes commands for adding, unstaging, reverting, and committing.&lt;/p&gt; &#xA;&lt;p&gt;The screenshot below shows the result of &lt;code&gt;:Neotree float git_status&lt;/code&gt; while the filesystem is open in a sidebar:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-git_status.png&#34; alt=&#34;Neo-tree git_status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can specify a different git base here as well. But be aware that it is not possible to unstage / revert a file that is already committed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree float git_status git_base=main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;document_symbols&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/neo-tree-document-symbols.png&#34; alt=&#34;Neo-tree document_symbols&#34;&gt; The document_symbols source lists the symbols in the current document obtained by the LSP request &#34;textDocument/documentSymbols&#34;. It currently supports the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; UI: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Display all symbols in the current file with symbol kinds&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Symbols nesting&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Configurable kinds&#39; name and icon&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Auto-refresh symbol list &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Follow cursor&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commands &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jump to symbols, open symbol in split,... (&lt;code&gt;open_split&lt;/code&gt; and friends)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Rename symbols (&lt;code&gt;rename&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Preview symbol (&lt;code&gt;preview&lt;/code&gt; and friends)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Hover docs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Call hierarchy&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; LSP &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; LSP Support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; LSP server selection (ignore, allow_only, use first, use all, etc.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; CoC Support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See #879 for the tracking issue of these features.&lt;/p&gt; &#xA;&lt;p&gt;This source is currently experimental, so in order to use it, you need to first add &lt;code&gt;&#34;document_symbols&#34;&lt;/code&gt; to &lt;code&gt;config.sources&lt;/code&gt; and open it with the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree document_symbols&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Source Selector&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-source-selector.png&#34; alt=&#34;Neo-tree source selector&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can enable a clickable source selector in either the winbar (requires neovim 0.8+) or the statusline. To do so, set one of these options to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#34;neo-tree&#34;).setup({&#xA;        source_selector = {&#xA;            winbar = false,&#xA;            statusline = false&#xA;        }&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many configuration options to change the style of these tabs. See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/lua/neo-tree/defaults.lua&#34;&gt;lua/neo-tree/defaults.lua&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration and Customization&lt;/h2&gt; &#xA;&lt;p&gt;This is designed to be flexible. The way that is achieved is by making everything a function, or a string that identifies a built-in function. All of the built-in functions can be replaced with your own implementation, or you can add new ones.&lt;/p&gt; &#xA;&lt;p&gt;Each node in the tree is created from the renderer specified for the given node type, and each renderer is a list of component configs to be rendered in order. Each component is a function, either built-in or specified in your config. Those functions simply return the text and highlight group for the component.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, there is an events system that you can hook into. If you want to show some new data point related to your files, gather it in the &lt;code&gt;before_render&lt;/code&gt; event, create a component to display it, and reference that component in the renderer for the &lt;code&gt;file&lt;/code&gt; and/or &lt;code&gt;directory&lt;/code&gt; type.&lt;/p&gt; &#xA;&lt;p&gt;Details on how to configure everything is in the help file at &lt;code&gt;:h neo-tree-configuration&lt;/code&gt; or online at &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim/raw/main/doc/neo-tree.txt&#34;&gt;neo-tree.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Recipes for customizations can be found on the &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Recipes&#34;&gt;wiki&lt;/a&gt;. Recipes include things like adding a component to show the &lt;a href=&#34;https://github.com/ThePrimeagen/harpoon&#34;&gt;Harpoon&lt;/a&gt; index for files, or responding to the &lt;code&gt;&#34;file_opened&#34;&lt;/code&gt; event to auto clear the search when you open a file.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;There are many tree plugins for (neo)vim, so why make another one? Well, I wanted something that was:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Easy to maintain and enhance.&lt;/li&gt; &#xA; &lt;li&gt;Stable.&lt;/li&gt; &#xA; &lt;li&gt;Easy to customize.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Easy to maintain and enhance&lt;/h3&gt; &#xA;&lt;p&gt;This plugin is designed to grow and be flexible. This is accomplished by making the code as decoupled and functional as possible. Hopefully new contributors will find it easy to work with.&lt;/p&gt; &#xA;&lt;p&gt;One big difference between this plugin and the ones that came before it, which is also what finally pushed me over the edge into making a new plugin, is that we now have libraries to build upon that did not exist when other tree plugins were created. Most notably, &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvm&lt;/a&gt;. Building upon shared libraries will go a long way in making neo-tree easy to maintain.&lt;/p&gt; &#xA;&lt;h3&gt;Stable&lt;/h3&gt; &#xA;&lt;p&gt;This project will have releases and release tags that follow a simplified Semantic Versioning scheme. The quickstart instructions will always refer to the latest stable major version. Following the &lt;strong&gt;main&lt;/strong&gt; branch is for contributors and those that always want bleeding edge. There will be branches for &lt;strong&gt;v1.x&lt;/strong&gt;, &lt;strong&gt;v2.x&lt;/strong&gt;, etc which will receive updates after a short testing period in &lt;strong&gt;main&lt;/strong&gt;. You should be safe to follow those branches and be sure your tree won&#39;t break in an update. There will also be tags for each release pushed to those branches named &lt;strong&gt;v1.1&lt;/strong&gt;, &lt;strong&gt;v1.2&lt;/strong&gt;, etc. If stability is critical to you, or a bug accidentally make it into &lt;strong&gt;v1.x&lt;/strong&gt;, you can use those tags instead. It&#39;s possible we may backport bug fixes to those tags, but no garauntees on that.&lt;/p&gt; &#xA;&lt;p&gt;There will never be a breaking change within a major version (1.x, 2.x, etc.) If a breaking change is needed, there will be depracation warnings in the prior major version, and the breaking change will happen in the next major version.&lt;/p&gt; &#xA;&lt;h3&gt;Easy to Customize&lt;/h3&gt; &#xA;&lt;p&gt;Neo-tree follows in the spirit of plugins like &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/noib3/nvim-cokeline&#34;&gt;nvim-cokeline&lt;/a&gt;. Everything will be configurable and take either strings, tables, or functions. You can take sane defaults or build your tree items from scratch. There should be the ability to add any features you can think of through existing hooks in the setup function.&lt;/p&gt; &#xA;&lt;h2&gt;What is a Breaking Change?&lt;/h2&gt; &#xA;&lt;p&gt;As of v1.30, a breaking change is defined as anything that &lt;em&gt;changes&lt;/em&gt; existing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vim commands (&lt;code&gt;:NeoTreeShow&lt;/code&gt;, &lt;code&gt;:NeoTreeReveal&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;configuration options that are passed into the &lt;code&gt;setup()&lt;/code&gt; function&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NeoTree*&lt;/code&gt; highlight groups&lt;/li&gt; &#xA; &lt;li&gt;lua functions exported in the following modules that are not prefixed with &lt;code&gt;_&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.events&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.sources.manager&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.sources.*&lt;/code&gt; (init.lua files)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.sources.*.commands&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.ui.renderer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.utils&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If there are other functions you would like to use that are not yet considered part of the public API, please open an issue so we can discuss it.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are encouraged. Please see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project relies upon these two excellent libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt; for all UI components, including the tree!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt; for backend utilities, such as scanning the filesystem.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The design is heavily inspired by these excellent plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/noib3/nvim-cokeline&#34;&gt;nvim-cokeline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Everything I know about writing a tree control in lua, I learned from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>LazyVim/LazyVim</title>
    <updated>2023-06-01T02:17:17Z</updated>
    <id>tag:github.com,2023-06-01:/LazyVim/LazyVim</id>
    <link href="https://github.com/LazyVim/LazyVim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim config for the lazy&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/292349/213446185-2db63fd5-8c84-459c-9f04-e286382d6e80.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://lazyvim.github.io/installation&#34;&gt;Install&lt;/a&gt; · &lt;a href=&#34;https://lazyvim.github.io/configuration&#34;&gt;Configure&lt;/a&gt; · &lt;a href=&#34;https://lazyvim.github.io&#34;&gt;Docs&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/LazyVim/LazyVim/releases/latest&#34;&gt; &lt;img alt=&#34;Latest release&#34; src=&#34;https://img.shields.io/github/v/release/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;include_prerelease&amp;amp;sort=semver&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/LazyVim/LazyVim/pulse&#34;&gt; &lt;img alt=&#34;Last commit&#34; src=&#34;https://img.shields.io/github/last-commit/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=8bd5ca&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/LazyVim/LazyVim/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=ee999f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/LazyVim/LazyVim/stargazers&#34;&gt; &lt;img alt=&#34;Stars&#34; src=&#34;https://img.shields.io/github/stars/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c69ff5&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/LazyVim/LazyVim/issues&#34;&gt; &lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/LazyVim/LazyVim&#34;&gt; &lt;img alt=&#34;Repo Size&#34; src=&#34;https://img.shields.io/github/repo-size/LazyVim/LazyVim?color=%23DDB6F2&amp;amp;label=SIZE&amp;amp;logo=codesandbox&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=folke&#34;&gt; &lt;img alt=&#34;follow on Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/folke?style=for-the-badge&amp;amp;logo=twitter&amp;amp;color=8aadf3&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;LazyVim is a Neovim setup powered by &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;💤 lazy.nvim&lt;/a&gt; to make it easy to customize and extend your config. Rather than having to choose between starting from scratch or using a pre-made distro, LazyVim offers the best of both worlds - the flexibility to tweak your config as needed, along with the convenience of a pre-configured setup.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/211285846-0b7bb3bf-0462-4029-b64c-4ee1d037fc1c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/213447056-92290767-ea16-430c-8727-ce994c93e9cc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔥 Transform your Neovim into a full-fledged IDE&lt;/li&gt; &#xA; &lt;li&gt;💤 Easily customize and extend your config with &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🚀 Blazingly fast&lt;/li&gt; &#xA; &lt;li&gt;🧹 Sane default settings for options, autocmds, and keymaps&lt;/li&gt; &#xA; &lt;li&gt;📦 Comes with a wealth of plugins pre-configured and ready to use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.8.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can find a starter template for &lt;strong&gt;LazyVim&lt;/strong&gt; &lt;a href=&#34;https://github.com/LazyVim/starter&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Try it with Docker&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -w /root -it --rm alpine:edge sh -uelic &#39;&#xA;  apk add git lazygit neovim ripgrep alpine-sdk --update&#xA;  git clone https://github.com/LazyVim/starter ~/.config/nvim&#xA;  cd ~/.config/nvim&#xA;  nvim&#xA;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Install the &lt;a href=&#34;https://github.com/LazyVim/starter&#34;&gt;LazyVim Starter&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Make a backup of your current Neovim files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mv ~/.config/nvim ~/.config/nvim.bak&#xA;mv ~/.local/share/nvim ~/.local/share/nvim.bak&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Clone the starter&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/LazyVim/starter ~/.config/nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Remove the &lt;code&gt;.git&lt;/code&gt; folder, so you can add it to your own repo later&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf ~/.config/nvim/.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Start Neovim!&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to the comments in the files on how to customize &lt;strong&gt;LazyVim&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;There&#39;s a great video created by &lt;a href=&#34;https://github.com/elijahmanor&#34;&gt;@elijahmanor&lt;/a&gt; with a walkthrough to get started.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=N93cTbtLCIM&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/N93cTbtLCIM/hqdefault.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📂 File Structure&lt;/h2&gt; &#xA;&lt;p&gt;The files under config will be automatically loaded at the appropriate time, so you don&#39;t need to require those files manually. &lt;strong&gt;LazyVim&lt;/strong&gt; comes with a set of default config files that will be loaded &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; your own. See &lt;a href=&#34;https://github.com/LazyVim/LazyVim/tree/main/lua/lazyvim/config&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can add your custom plugin specs under &lt;code&gt;lua/plugins/&lt;/code&gt;. All files there will be automatically loaded by &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;~/.config/nvim&#xA;├── lua&#xA;│&amp;nbsp;&amp;nbsp; ├── config&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── autocmds.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── keymaps.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── lazy.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── options.lua&#xA;│&amp;nbsp;&amp;nbsp; └── plugins&#xA;│&amp;nbsp;&amp;nbsp;     ├── spec1.lua&#xA;│&amp;nbsp;&amp;nbsp;     ├── **&#xA;│&amp;nbsp;&amp;nbsp;     └── spec2.lua&#xA;└── init.lua&#xA;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://lazyvim.github.io&#34;&gt;docs&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>