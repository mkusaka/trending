<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-01T02:45:56Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>glepnir/lspsaga.nvim</title>
    <updated>2022-08-01T02:45:56Z</updated>
    <id>tag:github.com,2022-08-01:/glepnir/lspsaga.nvim</id>
    <link href="https://github.com/glepnir/lspsaga.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;neovim lsp plugin&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;                                 __&#xA;                                / /________  _________ _____ _____ _&#xA;                               / / ___/ __ \/ ___/ __ `/ __ `/ __ `/&#xA;                              / (__  ) /_/ (__  ) /_/ / /_/ / /_/ /&#xA;                             /_/____/ .___/____/\__,_/\__, /\__,_/&#xA;                                   /_/               /____/&#xA;&#xA;                          ‚ö° designed for convenience and efficiency ‚ö°&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A light-weight lsp plugin based on neovim&#39;s built-in lsp with a highly performant UI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#lspsaga-nvim:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Element-0DBD8B?style=for-the-badge&amp;amp;logo=element&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#vim-plug&#34;&gt;Vim Plug&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#packer&#34;&gt;Packer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#mappings&#34;&gt;Mappings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#customize-appearance&#34;&gt;Customize Appearance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#showcase&#34;&gt;Showcase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#donate&#34;&gt;Donate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Vim Plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;glepnir/lspsaga.nvim&#39;, { &#39;branch&#39;: &#39;main&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;    &#34;glepnir/lspsaga.nvim&#34;,&#xA;    branch = &#34;main&#34;,&#xA;    config = function()&#xA;        local saga = require(&#34;lspsaga&#34;)&#xA;&#xA;        saga.init_lsp_saga({&#xA;            -- your configuration&#xA;        })&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Lspsaga support use command &lt;code&gt;Lspsaga&lt;/code&gt; with completion or use lua function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local saga = require &#39;lspsaga&#39;&#xA;&#xA;-- change the lsp symbol kind&#xA;local kind = require(&#39;lspsaga.lspkind&#39;)&#xA;kind[type_number][2] = icon -- see lua/lspsaga/lspkind.lua&#xA;&#xA;-- use default config&#xA;saga.init_lsp_saga()&#xA;&#xA;-- use custom config&#xA;saga.init_lsp_saga({&#xA;    -- put modified options in there&#xA;})&#xA;&#xA;-- Options with default value&#xA;-- &#34;single&#34; | &#34;double&#34; | &#34;rounded&#34; | &#34;bold&#34; | &#34;plus&#34;&#xA;border_style = &#34;single&#34;,&#xA;--the range of 0 for fully opaque window (disabled) to 100 for fully&#xA;--transparent background. Values between 0-30 are typically most useful.&#xA;saga_winblend = 0,&#xA;-- when cursor in saga window you config these to move&#xA;move_in_saga = { prev = &#39;&amp;lt;C-p&amp;gt;&#39;,next = &#39;&amp;lt;C-n&amp;gt;&#39;},&#xA;-- Error, Warn, Info, Hint&#xA;-- use emoji like&#xA;-- { &#34;üôÄ&#34;, &#34;üòø&#34;, &#34;üòæ&#34;, &#34;üò∫&#34; }&#xA;-- or&#xA;-- { &#34;üò°&#34;, &#34;üò•&#34;, &#34;üò§&#34;, &#34;üòê&#34; }&#xA;-- and diagnostic_header can be a function type&#xA;-- must return a string and when diagnostic_header&#xA;-- is function type it will have a param `entry`&#xA;-- entry is a table type has these filed&#xA;-- { bufnr, code, col, end_col, end_lnum, lnum, message, severity, source }&#xA;diagnostic_header = { &#34;ÔÅó &#34;, &#34;ÔÅ™ &#34;, &#34;ÔÅö &#34;, &#34;Ô¥û &#34; },&#xA;-- show diagnostic source&#xA;show_diagnostic_source = true,&#xA;-- add bracket or something with diagnostic source, just have 2 elements&#xA;diagnostic_source_bracket = {},&#xA;-- preview lines of lsp_finder and definition preview&#xA;max_preview_lines = 10,&#xA;-- use emoji lightbulb in default&#xA;code_action_icon = &#34;üí°&#34;,&#xA;-- if true can press number to execute the codeaction in codeaction window&#xA;code_action_num_shortcut = true,&#xA;-- same as nvim-lightbulb but async&#xA;code_action_lightbulb = {&#xA;    enable = true,&#xA;    sign = true,&#xA;    enable_in_insert = true,&#xA;    sign_priority = 20,&#xA;    virtual_text = true,&#xA;},&#xA;-- finder icons&#xA;finder_icons = {&#xA;  def = &#39;Óàï  &#39;,&#xA;  ref = &#39;Ô™æ &#39;,&#xA;  link = &#39;Ô†∏  &#39;,&#xA;},&#xA;-- custom finder title winbar function type&#xA;-- param is current word with symbol icon string type&#xA;-- return a winbar format string like `%#CustomFinder#Test%*`&#xA;finder_title_bar = function(param) do your stuff here end,&#xA;finder_action_keys = {&#xA;    open = &#34;o&#34;,&#xA;    vsplit = &#34;s&#34;,&#xA;    split = &#34;i&#34;,&#xA;    tabe = &#34;t&#34;,&#xA;    quit = &#34;q&#34;,&#xA;    scroll_down = &#34;&amp;lt;C-f&amp;gt;&#34;,&#xA;    scroll_up = &#34;&amp;lt;C-b&amp;gt;&#34;, -- quit can be a table&#xA;},&#xA;code_action_keys = {&#xA;    quit = &#34;q&#34;,&#xA;    exec = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;},&#xA;rename_action_quit = &#34;&amp;lt;C-c&amp;gt;&#34;,&#xA;rename_in_select = true,&#xA;definition_preview_icon = &#34;Ôî∏  &#34;,&#xA;-- show symbols in winbar must nightly&#xA;symbol_in_winbar = {&#xA;    in_custom = false,&#xA;    enable = false,&#xA;    separator = &#39;Ôëä &#39;,&#xA;    show_file = true,&#xA;    click_support = false,&#xA;},&#xA;-- show outline&#xA;show_outline = {&#xA;  win_position = &#39;right&#39;,&#xA;  --set special filetype win that outline window split.like NvimTree neotree&#xA;  -- defx, db_ui&#xA;  win_with = &#39;&#39;,&#xA;  win_width = 30,&#xA;  auto_enter = true,&#xA;  auto_preview = true,&#xA;  virt_text = &#39;‚îÉ&#39;,&#xA;  jump_key = &#39;o&#39;,&#xA;  -- auto refresh when change buffer&#xA;  auto_refresh = true,&#xA;},&#xA;-- if you don&#39;t use nvim-lspconfig you must pass your server name and&#xA;-- the related filetypes into this table&#xA;-- like server_filetype_map = { metals = { &#34;sbt&#34;, &#34;scala&#34; } }&#xA;server_filetype_map = {},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show symbols in winbar need neovim 0.8+&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; work with custom winbar &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;saga.init_lsp_saga({&#xA;    symbol_in_winbar = {&#xA;        in_custom = true&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;use &lt;code&gt;require(&#39;lspsaga.symbolwinbar&#39;).get_symbol_node&lt;/code&gt; this function in your custom winbar to get symbols node and set &lt;code&gt;User LspsagaUpdateSymbol&lt;/code&gt; event in your autocmds&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example:&#xA;local function get_file_name(include_path)&#xA;    local file_name = require(&#39;lspsaga.symbolwinbar&#39;).get_file_name()&#xA;    if vim.fn.bufname &#39;%&#39; == &#39;&#39; then return &#39;&#39; end&#xA;    if include_path == false then return file_name end&#xA;    -- Else if include path: ./lsp/saga.lua -&amp;gt; lsp &amp;gt; saga.lua&#xA;    local sep = vim.loop.os_uname().sysname == &#39;Windows&#39; and &#39;\\&#39; or &#39;/&#39;&#xA;    local path_list = vim.split(string.gsub(vim.fn.expand &#39;%:~:.:h&#39;, &#39;%%&#39;, &#39;&#39;), sep)&#xA;    local file_path = &#39;&#39;&#xA;    for _, cur in ipairs(path_list) do&#xA;        file_path = (cur == &#39;.&#39; or cur == &#39;~&#39;) and &#39;&#39; or&#xA;                    file_path .. cur .. &#39; &#39; .. &#39;%#LspSagaWinbarSep#&amp;gt;%*&#39; .. &#39; %*&#39;&#xA;    end&#xA;    return file_path .. file_name&#xA;end&#xA;&#xA;local function config_winbar()&#xA;    local exclude = {&#xA;        [&#39;teminal&#39;] = true,&#xA;        [&#39;toggleterm&#39;] = true,&#xA;        [&#39;prompt&#39;] = true,&#xA;        [&#39;NvimTree&#39;] = true,&#xA;        [&#39;help&#39;] = true,&#xA;    } -- Ignore float windows and exclude filetype&#xA;    if vim.api.nvim_win_get_config(0).zindex or exclude[vim.bo.filetype] then&#xA;        vim.wo.winbar = &#39;&#39;&#xA;    else&#xA;        local ok, lspsaga = pcall(require, &#39;lspsaga.symbolwinbar&#39;)&#xA;        local sym&#xA;        if ok then sym = lspsaga.get_symbol_node() end&#xA;        local win_val = &#39;&#39;&#xA;        win_val = get_file_name(true) -- set to true to include path&#xA;        if sym ~= nil then win_val = win_val .. sym end&#xA;        vim.wo.winbar = win_val&#xA;    end&#xA;end&#xA;&#xA;local events = { &#39;BufEnter&#39;, &#39;BufWinEnter&#39;, &#39;CursorMoved&#39; }&#xA;&#xA;vim.api.nvim_create_autocmd(events, {&#xA;    pattern = &#39;*&#39;,&#xA;    callback = function() config_winbar() end,&#xA;})&#xA;&#xA;vim.api.nvim_create_autocmd(&#39;User&#39;, {&#xA;    pattern = &#39;LspsagaUpdateSymbol&#39;,&#xA;    callback = function() config_winbar() end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Support Click in symbols winbar&lt;/summary&gt; &#xA; &lt;p&gt;To enable click support for winbar define a function similar to &lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;statusline&#39;&#34;&gt;statusline&lt;/a&gt; (Search for &#34;Start of execute function label&#34;)&lt;/p&gt; &#xA; &lt;p&gt;minwid will be replaced with current node. For example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;symbol_in_winbar = {&#xA;    click_support = function(node, clicks, button, modifiers)&#xA;        -- To see all avaiable details: vim.pretty_print(node)&#xA;        local st = node.range.start&#xA;        local en = node.range[&#39;end&#39;]&#xA;        if button == &#34;l&#34; then&#xA;            if clicks == 2 then&#xA;                -- double left click to do nothing&#xA;            else -- jump to node&#39;s starting line+char&#xA;                vim.fn.cursor(st.line + 1, st.character + 1)&#xA;            end&#xA;        elseif button == &#34;r&#34; then&#xA;            if modifiers == &#34;s&#34; then&#xA;                print &#34;lspsaga&#34; -- shift right click to print &#34;lspsaga&#34;&#xA;            end -- jump to node&#39;s ending line+char&#xA;            vim.fn.cursor(en.line + 1, en.character + 1)&#xA;        elseif button == &#34;m&#34; then&#xA;            -- middle click to visual select node&#xA;            vim.fn.cursor(st.line + 1, st.character + 1)&#xA;            vim.cmd &#34;normal v&#34;&#xA;            vim.fn.cursor(en.line + 1, en.character + 1)&#xA;        end&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Mappings&lt;/h2&gt; &#xA;&lt;p&gt;Plugin does not provide mappings by default. However, you can bind mappings yourself. You can find examples in the &lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#showcase&#34;&gt;showcase&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Customize Appearance&lt;/h2&gt; &#xA;&lt;p&gt;Colors can be simply changed by overwriting the default highlights groups LspSaga is using.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;highlight link LspSagaFinderSelection Search&#xA;&#34; or&#xA;highlight link LspSagaFinderSelection guifg=&#39;#ff0000&#39; guibg=&#39;#00ff00&#39; gui=&#39;bold&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available highlight groups you can find in &lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/plugin/lspsaga.lua&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lsp finder&lt;/summary&gt; &#xA; &lt;p&gt;Finder Title work with neovim 0.8 +&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lsp finder to find the cursor word definition and reference&#xA;vim.keymap.set(&#34;n&#34;, &#34;gh&#34;, require(&#34;lspsaga.finder&#34;).lsp_finder, { silent = true,noremap = true })&#xA;-- or use command LspSagaFinder&#xA;vim.keymap.set(&#34;n&#34;, &#34;gh&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga lsp_finder&amp;lt;CR&amp;gt;&#34;, { silent = true,noremap = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/181253960-cef49f9d-db8b-4b04-92d8-cb6322749414.png&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Code action&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local action = require(&#34;lspsaga.codeaction&#34;)&#xA;&#xA;-- code action&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;ca&#34;, action.code_action, { silent = true,noremap = true })&#xA;vim.keymap.set(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;ca&#34;, function()&#xA;    vim.fn.feedkeys(vim.api.nvim_replace_termcodes(&#34;&amp;lt;C-U&amp;gt;&#34;, true, false, true))&#xA;    action.range_code_action()&#xA;end, { silent = true,noremap =true })&#xA;-- or use command&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;ca&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga code_action&amp;lt;CR&amp;gt;&#34;, { silent = true,noremap = true })&#xA;vim.keymap.set(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;ca&#34;, &#34;&amp;lt;cmd&amp;gt;&amp;lt;C-U&amp;gt;Lspsaga range_code_action&amp;lt;CR&amp;gt;&#34;, { silent = true,noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/175305503-180e6b39-d162-4ef2-aa2b-9ffe309948e6.gif&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Async lightbulb&lt;/summary&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/175752848-cef8218a-f8e4-42c2-96bd-06bb07cd42c6.gif&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details id=&#34;hover-doc&#34;&gt; &#xA; &lt;summary&gt;Hover doc&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- show hover doc and press twice will jumpto hover window&#xA;vim.keymap.set(&#34;n&#34;, &#34;K&#34;, require(&#34;lspsaga.hover&#34;).render_hover_doc, { silent = true })&#xA;-- or use command&#xA;vim.keymap.set(&#34;n&#34;, &#34;K&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga hover_doc&amp;lt;CR&amp;gt;&#34;, { silent = true })&#xA;&#xA;local action = require(&#34;lspsaga.action&#34;)&#xA;-- scroll down hover doc or scroll in definition preview&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;C-f&amp;gt;&#34;, function()&#xA;    action.smart_scroll_with_saga(1)&#xA;end, { silent = true })&#xA;-- scroll up hover doc&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;C-b&amp;gt;&#34;, function()&#xA;    action.smart_scroll_with_saga(-1)&#xA;end, { silent = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/175306592-f0540e35-561f-418c-a41e-7df167ba9b86.gif&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Signature help&lt;/summary&gt; &#xA; &lt;p&gt;You also can use &lt;code&gt;smart_scroll_with_saga&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#hover-doc&#34;&gt;hover doc&lt;/a&gt;) to scroll in signature help win.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- show signature help&#xA;vim.keymap.set(&#34;n&#34;, &#34;gs&#34;, require(&#34;lspsaga.signaturehelp&#34;).signature_help, { silent = true,noremap = true})&#xA;-- or command&#xA;vim.keymap.set(&#34;n&#34;, &#34;gs&#34;, &#34;&amp;lt;Cmd&amp;gt;Lspsaga signature_help&amp;lt;CR&amp;gt;&#34;, { silent = true,noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/175306809-755c4624-a5d2-4c11-8b29-f41914f22411.gif&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Rename with preview and select&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- rename&#xA;vim.keymap.set(&#34;n&#34;, &#34;gr&#34;, require(&#34;lspsaga.rename&#34;).lsp_rename, { silent = true,noremap = true })&#xA;-- or command&#xA;vim.keymap.set(&#34;n&#34;, &#34;gr&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga rename&amp;lt;CR&amp;gt;&#34;, { silent = true,noremap = true })&#xA;-- close rename win use &amp;lt;C-c&amp;gt; in insert mode or `q` in normal mode or `:q`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/175300080-6e72001c-78dd-4d86-8139-bba38befee15.gif&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Preview definition&lt;/summary&gt; &#xA; &lt;p&gt;You also can use &lt;code&gt;smart_scroll_with_saga&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/#hover-doc&#34;&gt;hover doc&lt;/a&gt;) to scroll in preview definition win.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- preview definition&#xA;vim.keymap.set(&#34;n&#34;, &#34;gd&#34;, require(&#34;lspsaga.definition&#34;).preview_definition, { silent = true,noremap = true })&#xA;-- or use command&#xA;vim.keymap.set(&#34;n&#34;, &#34;gd&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga preview_definition&amp;lt;CR&amp;gt;&#34;, { silent = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/105657900-5b387f00-5f00-11eb-8b39-4d3b1433cb75.gif&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Jump and show diagnostics&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;cd&#34;, require(&#34;lspsaga.diagnostic&#34;).show_line_diagnostics, { silent = true,noremap = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;cd&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga show_line_diagnostics&amp;lt;CR&amp;gt;&#34;, { silent = true,noremap= true })&#xA;&#xA;-- jump diagnostic&#xA;vim.keymap.set(&#34;n&#34;, &#34;[e&#34;, require(&#34;lspsaga.diagnostic&#34;).goto_prev, { silent = true, noremap =true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;]e&#34;, require(&#34;lspsaga.diagnostic&#34;).goto_next, { silent = true, noremap =true })&#xA;-- or jump to error&#xA;vim.keymap.set(&#34;n&#34;, &#34;[E&#34;, function()&#xA;  require(&#34;lspsaga.diagnostic&#34;).goto_prev({ severity = vim.diagnostic.severity.ERROR })&#xA;end, { silent = true, noremap = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;]E&#34;, function()&#xA;  require(&#34;lspsaga.diagnostic&#34;).goto_next({ severity = vim.diagnostic.severity.ERROR })&#xA;end, { silent = true, noremap = true })&#xA;-- or use command&#xA;vim.keymap.set(&#34;n&#34;, &#34;[e&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga diagnostic_jump_next&amp;lt;CR&amp;gt;&#34;, { silent = true, noremap = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;]e&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga diagnostic_jump_prev&amp;lt;CR&amp;gt;&#34;, { silent = true, noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/182015252-c2e8acc1-3833-473d-a375-8093e104dc47.gif&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Fastest show symbols in winbar by use cache &lt;/summary&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/176679585-9485676b-ddea-44ca-bc88-b0eb04d450b1.gif&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Outline&lt;/summary&gt; &#xA; &lt;p&gt;work fast when lspsaga symbol winbar &lt;code&gt;in_custom = true&lt;/code&gt; or &lt;code&gt;enable = true&lt;/code&gt;,&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;:LSoutlineToggle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/41671631/179864315-3ec84106-bcd4-43db-8590-2fb07f4055d9.gif&#34;&gt;&lt;/p&gt;  &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Float terminal&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- float terminal also you can pass the cli command in open_float_terminal function&#xA;local term = require(&#34;lspsaga.floaterm&#34;)&#xA;&#xA;-- float terminal also you can pass the cli command in open_float_terminal function&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;A-d&amp;gt;&#34;, function()&#xA;    term.open_float_terminal(&#34;custom_cli_command&#34;)&#xA;end, { silent = true,noremap = true })&#xA;vim.keymap.set(&#34;t&#34;, &#34;&amp;lt;A-d&amp;gt;&#34;, function()&#xA;    vim.fn.feedkeys(vim.api.nvim_replace_termcodes(&#34;&amp;lt;C-\\&amp;gt;&amp;lt;C-n&amp;gt;&#34;, true, false, true))&#xA;    term.close_float_terminal()&#xA;end, { silent = true })&#xA;&#xA;-- or use command&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;A-d&amp;gt;&#34;, &#34;&amp;lt;cmd&amp;gt;Lspsaga open_floaterm custom_cli_command&amp;lt;CR&amp;gt;&#34;, { silent = true,noremap = true })&#xA;vim.keymap.set(&#34;t&#34;, &#34;&amp;lt;A-d&amp;gt;&#34;, &#34;&amp;lt;C-\\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;cmd&amp;gt;Lspsaga close_floaterm&amp;lt;CR&amp;gt;&#34;, { silent = true,noremap =true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/41671631/105658287-2c6ed880-5f01-11eb-8af6-daa6fd23576c.gif&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paypal.me/bobbyhub&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&#34;https://paypal.me/bobbyhub&#34;&gt;paypal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/glepnir/lspsaga.nvim/main/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wbthomason/packer.nvim</title>
    <updated>2022-08-01T02:45:56Z</updated>
    <id>tag:github.com,2022-08-01:/wbthomason/packer.nvim</id>
    <link href="https://github.com/wbthomason/packer.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A use-package inspired plugin manager for Neovim. Uses native packages, supports Luarocks dependencies, written in Lua, allows for expressive config&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;packer.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/packer-nvim/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/packer-nvim/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; inspired plugin/package management for Neovim.&lt;/p&gt; &#xA;&lt;p&gt;Have questions? Start a &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Have a problem or idea? Make an &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues&#34;&gt;issue&lt;/a&gt; or a &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/pulls&#34;&gt;PR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Packer is built on native packages. You may wish to read &lt;code&gt;:h packages&lt;/code&gt; before continuing&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#notices&#34;&gt;Notices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#bootstrapping&#34;&gt;Bootstrapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#the-startup-function&#34;&gt;The startup function&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#custom-initialization&#34;&gt;Custom Initialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#specifying-plugins&#34;&gt;Specifying Plugins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#performing-plugin-management-operations&#34;&gt;Performing plugin management operations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#extending-packer&#34;&gt;Extending packer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#compiling-lazy-loaders&#34;&gt;Compiling Lazy-Loaders&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#user-autocommands&#34;&gt;User autocommands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#using-a-floating-window&#34;&gt;Using a floating window&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#profiling&#34;&gt;Profiling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Notices&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-07-31:&lt;/strong&gt; If you&#39;re on macOS, note that building Neovim with the version of &lt;code&gt;luv&lt;/code&gt; from &lt;code&gt;homebrew&lt;/code&gt; &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues/496#issuecomment-890371022&#34;&gt;will cause any &lt;code&gt;packer&lt;/code&gt; command to crash&lt;/a&gt;. More about this issue at &lt;a href=&#34;https://github.com/neovim/neovim/issues/15054&#34;&gt;neovim/neovim#15054&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-07-28:&lt;/strong&gt; &lt;code&gt;packer&lt;/code&gt; will now highlight commits/plugin names with potentially breaking changes (determined by looking for &lt;code&gt;breaking change&lt;/code&gt; or &lt;code&gt;breaking_change&lt;/code&gt;, case insensitive, in the update commit bodies and headers) as &lt;code&gt;WarningMsg&lt;/code&gt; in the status window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-06-06&lt;/strong&gt;: Your Neovim must include &lt;a href=&#34;https://github.com/neovim/neovim/pull/14659&#34;&gt;https://github.com/neovim/neovim/pull/14659&lt;/a&gt;; &lt;code&gt;packer&lt;/code&gt; uses the &lt;code&gt;noautocmd&lt;/code&gt; key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-04-19&lt;/strong&gt;: &lt;code&gt;packer&lt;/code&gt; now provides built-in profiling for your config via the &lt;code&gt;packer_compiled&lt;/code&gt; file. Take a look at &lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#profiling&#34;&gt;the docs&lt;/a&gt; for more information!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-02-18&lt;/strong&gt;: Having trouble with Luarocks on macOS? See &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues/180&#34;&gt;this issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-01-19&lt;/strong&gt;: Basic Luarocks support has landed! Use the &lt;code&gt;rocks&lt;/code&gt; key with a string or table to specify packages to install.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-12-10&lt;/strong&gt;: The &lt;code&gt;disable_commands&lt;/code&gt; configuration flag now affects non-&lt;code&gt;startup&lt;/code&gt; use as well. This means that, by default, &lt;code&gt;packer&lt;/code&gt; will create commands for basic operations for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-11-13&lt;/strong&gt;: There is now a default implementation for a floating window &lt;code&gt;open_fn&lt;/code&gt; in &lt;code&gt;packer.util&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-09-04:&lt;/strong&gt; Due to changes to the Neovim &lt;code&gt;extmark&lt;/code&gt; api (see: &lt;a href=&#34;https://github.com/neovim/neovim/commit/3853276d9cacc99a2698117e904475dbf7033383&#34;&gt;https://github.com/neovim/neovim/commit/3853276d9cacc99a2698117e904475dbf7033383&lt;/a&gt;), users will need to update to a version of Neovim &lt;strong&gt;after&lt;/strong&gt; the aforementioned PR was merged. There are currently shims around the changed functions which should maintain support for earlier versions of Neovim, but these are intended to be temporary and will be removed by &lt;strong&gt;2020-10-04&lt;/strong&gt;. Therefore Packer will not work with Neovim v0.4.4, which was released before the &lt;code&gt;extmark&lt;/code&gt; change.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Declarative plugin specification&lt;/li&gt; &#xA; &lt;li&gt;Support for dependencies&lt;/li&gt; &#xA; &lt;li&gt;Support for Luarocks dependencies&lt;/li&gt; &#xA; &lt;li&gt;Expressive configuration and lazy-loading options&lt;/li&gt; &#xA; &lt;li&gt;Automatically compiles efficient lazy-loading code to improve startup time&lt;/li&gt; &#xA; &lt;li&gt;Uses native packages&lt;/li&gt; &#xA; &lt;li&gt;Extensible&lt;/li&gt; &#xA; &lt;li&gt;Written in Lua, configured in Lua&lt;/li&gt; &#xA; &lt;li&gt;Post-install/update hooks&lt;/li&gt; &#xA; &lt;li&gt;Uses jobs for async installation&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;git&lt;/code&gt; tags, branches, revisions, submodules&lt;/li&gt; &#xA; &lt;li&gt;Support for local plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;You need to be running Neovim v0.5.0+&lt;/strong&gt;; &lt;code&gt;packer&lt;/code&gt; makes use of extmarks and other newly-added Neovim features.&lt;/li&gt; &#xA; &lt;li&gt;If you are on Windows 10, you need developer mode enabled in order to use local plugins (creating symbolic links requires admin privileges on Windows - credit to @TimUntersberger for this note)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To get started, first clone this repository to somewhere on your &lt;code&gt;packpath&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Unix, Linux Installation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --depth 1 https://github.com/wbthomason/packer.nvim\&#xA; ~/.local/share/nvim/site/pack/packer/start/packer.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use Arch Linux, there is also &lt;a href=&#34;https://aur.archlinux.org/packages/nvim-packer-git/&#34;&gt;an AUR package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Windows Powershell Installation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/wbthomason/packer.nvim &#34;$env:LOCALAPPDATA\nvim-data\site\pack\packer\start\packer.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can write your plugin specification in Lua, e.g. (in &lt;code&gt;~/.config/nvim/lua/plugins.lua&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- This file can be loaded by calling `lua require(&#39;plugins&#39;)` from your init.vim&#xA;&#xA;-- Only required if you have packer configured as `opt`&#xA;vim.cmd [[packadd packer.nvim]]&#xA;&#xA;return require(&#39;packer&#39;).startup(function(use)&#xA;  -- Packer can manage itself&#xA;  use &#39;wbthomason/packer.nvim&#39;&#xA;&#xA;  -- Simple plugins can be specified as strings&#xA;  use &#39;9mm/vim-closer&#39;&#xA;&#xA;  -- Lazy loading:&#xA;  -- Load on specific commands&#xA;  use {&#39;tpope/vim-dispatch&#39;, opt = true, cmd = {&#39;Dispatch&#39;, &#39;Make&#39;, &#39;Focus&#39;, &#39;Start&#39;}}&#xA;&#xA;  -- Load on an autocommand event&#xA;  use {&#39;andymass/vim-matchup&#39;, event = &#39;VimEnter&#39;}&#xA;&#xA;  -- Load on a combination of conditions: specific filetypes or commands&#xA;  -- Also run code after load (see the &#34;config&#34; key)&#xA;  use {&#xA;    &#39;w0rp/ale&#39;,&#xA;    ft = {&#39;sh&#39;, &#39;zsh&#39;, &#39;bash&#39;, &#39;c&#39;, &#39;cpp&#39;, &#39;cmake&#39;, &#39;html&#39;, &#39;markdown&#39;, &#39;racket&#39;, &#39;vim&#39;, &#39;tex&#39;},&#xA;    cmd = &#39;ALEEnable&#39;,&#xA;    config = &#39;vim.cmd[[ALEEnable]]&#39;&#xA;  }&#xA;&#xA;  -- Plugins can have dependencies on other plugins&#xA;  use {&#xA;    &#39;haorenW1025/completion-nvim&#39;,&#xA;    opt = true,&#xA;    requires = {{&#39;hrsh7th/vim-vsnip&#39;, opt = true}, {&#39;hrsh7th/vim-vsnip-integ&#39;, opt = true}}&#xA;  }&#xA;&#xA;  -- Plugins can also depend on rocks from luarocks.org:&#xA;  use {&#xA;    &#39;my/supercoolplugin&#39;,&#xA;    rocks = {&#39;lpeg&#39;, {&#39;lua-cjson&#39;, version = &#39;2.1.0&#39;}}&#xA;  }&#xA;&#xA;  -- You can specify rocks in isolation&#xA;  use_rocks &#39;penlight&#39;&#xA;  use_rocks {&#39;lua-resty-http&#39;, &#39;lpeg&#39;}&#xA;&#xA;  -- Local plugins can be included&#xA;  use &#39;~/projects/personal/hover.nvim&#39;&#xA;&#xA;  -- Plugins can have post-install/update hooks&#xA;  use {&#39;iamcco/markdown-preview.nvim&#39;, run = &#39;cd app &amp;amp;&amp;amp; yarn install&#39;, cmd = &#39;MarkdownPreview&#39;}&#xA;&#xA;  -- Post-install/update hook with neovim command&#xA;  use { &#39;nvim-treesitter/nvim-treesitter&#39;, run = &#39;:TSUpdate&#39; }&#xA;&#xA;  -- Post-install/update hook with call of vimscript function with argument&#xA;  use { &#39;glacambre/firenvim&#39;, run = function() vim.fn[&#39;firenvim#install&#39;](0) end }&#xA;&#xA;  -- Use specific branch, dependency and run lua file after load&#xA;  use {&#xA;    &#39;glepnir/galaxyline.nvim&#39;, branch = &#39;main&#39;, config = function() require&#39;statusline&#39; end,&#xA;    requires = {&#39;kyazdani42/nvim-web-devicons&#39;}&#xA;  }&#xA;&#xA;  -- Use dependency and run lua function after load&#xA;  use {&#xA;    &#39;lewis6991/gitsigns.nvim&#39;, requires = { &#39;nvim-lua/plenary.nvim&#39; },&#xA;    config = function() require(&#39;gitsigns&#39;).setup() end&#xA;  }&#xA;&#xA;  -- You can specify multiple plugins in a single call&#xA;  use {&#39;tjdevries/colorbuddy.vim&#39;, {&#39;nvim-treesitter/nvim-treesitter&#39;, opt = true}}&#xA;&#xA;  -- You can alias plugin names&#xA;  use {&#39;dracula/vim&#39;, as = &#39;dracula&#39;}&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you get linter complaints about &lt;code&gt;use&lt;/code&gt; being an undefined global, these errors are spurious - &lt;code&gt;packer&lt;/code&gt; injects &lt;code&gt;use&lt;/code&gt; into the scope of the function passed to &lt;code&gt;startup&lt;/code&gt;. If these errors bother you, the easiest fix is to simply specify &lt;code&gt;use&lt;/code&gt; as an argument to the function you pass to &lt;code&gt;startup&lt;/code&gt;, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup(function(use)&#xA;...your config...&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; provides the following commands after you&#39;ve run and configured &lt;code&gt;packer&lt;/code&gt; with &lt;code&gt;require(&#39;packer&#39;).startup(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- You must run this or `PackerSync` whenever you make changes to your plugin configuration&#xA;-- Regenerate compiled loader file&#xA;:PackerCompile&#xA;&#xA;-- Remove any disabled or unused plugins&#xA;:PackerClean&#xA;&#xA;-- Clean, then install missing plugins&#xA;:PackerInstall&#xA;&#xA;-- Clean, then update and install plugins&#xA;:PackerUpdate&#xA;&#xA;-- Perform `PackerUpdate` and then `PackerCompile`&#xA;:PackerSync&#xA;&#xA;-- Loads opt plugin immediately&#xA;:PackerLoad completion-nvim ale&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can configure Neovim to automatically run &lt;code&gt;:PackerCompile&lt;/code&gt; whenever &lt;code&gt;plugins.lua&lt;/code&gt; is updated with &lt;a href=&#34;https://neovim.io/doc/user/autocmd.html#:autocmd&#34;&gt;an autocommand&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;augroup packer_user_config&#xA;  autocmd!&#xA;  autocmd BufWritePost plugins.lua source &amp;lt;afile&amp;gt; | PackerCompile&#xA;augroup end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This autocommand can be placed in your &lt;code&gt;init.vim&lt;/code&gt;, or any other startup file as per your setup. Placing this in &lt;code&gt;plugins.lua&lt;/code&gt; could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd([[&#xA;  augroup packer_user_config&#xA;    autocmd!&#xA;    autocmd BufWritePost plugins.lua source &amp;lt;afile&amp;gt; | PackerCompile&#xA;  augroup end&#xA;]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bootstrapping&lt;/h2&gt; &#xA;&lt;p&gt;If you want to automatically install and set up &lt;code&gt;packer.nvim&lt;/code&gt; on any machine you clone your configuration to, add the following snippet (which is due to @Iron-E and @khuedoan) somewhere in your config &lt;strong&gt;before&lt;/strong&gt; your first usage of &lt;code&gt;packer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local fn = vim.fn&#xA;local install_path = fn.stdpath(&#39;data&#39;)..&#39;/site/pack/packer/start/packer.nvim&#39;&#xA;if fn.empty(fn.glob(install_path)) &amp;gt; 0 then&#xA;  packer_bootstrap = fn.system({&#39;git&#39;, &#39;clone&#39;, &#39;--depth&#39;, &#39;1&#39;, &#39;https://github.com/wbthomason/packer.nvim&#39;, install_path})&#xA;  vim.cmd [[packadd packer.nvim]]&#xA;end&#xA;&#xA;return require(&#39;packer&#39;).startup(function(use)&#xA;  -- My plugins here&#xA;  -- use &#39;foo1/bar1.nvim&#39;&#xA;  -- use &#39;foo2/bar2.nvim&#39;&#xA;&#xA;  -- Automatically set up your configuration after cloning packer.nvim&#xA;  -- Put this at the end after all plugins&#xA;  if packer_bootstrap then&#xA;    require(&#39;packer&#39;).sync()&#xA;  end&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the following command (with &lt;code&gt;packer&lt;/code&gt; bootstrapped) to have &lt;code&gt;packer&lt;/code&gt; setup your configuration (or simply run updates) and close once all operations are completed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nvim --headless -c &#39;autocmd User PackerComplete quitall&#39; -c &#39;PackerSync&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The above snippets give some examples of &lt;code&gt;packer&lt;/code&gt; features and use. Examples include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;My dotfiles: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/lua/plugins.lua&#34;&gt;Specification file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/lua/plugins.lua&#34;&gt;Loading file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/plugin/packer_compiled.lua&#34;&gt;Generated lazy-loader file&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;An example using the &lt;code&gt;startup&lt;/code&gt; method: &lt;a href=&#34;https://github.com/tjdevries/config_manager/raw/master/xdg_config/nvim/lua/tj/plugins.lua&#34;&gt;tjdevries&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using this method, you do not require a &#34;loading&#34; file. You can simply &lt;code&gt;lua require(&#39;plugins&#39;)&lt;/code&gt; from your &lt;code&gt;init.vim&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following is a more in-depth explanation of &lt;code&gt;packer&lt;/code&gt;&#39;s features and use.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;startup&lt;/code&gt; function&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; provides &lt;code&gt;packer.startup(spec)&lt;/code&gt;, which is used in the above examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;startup&lt;/code&gt; is a convenience function for simple setup and can be invoked as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a function: &lt;code&gt;packer.startup(function() use &#39;tjdevries/colorbuddy.vim&#39; end)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a table with a function as its first element and config overrides as another element: &lt;code&gt;packer.startup({function() use &#39;tjdevries/colorbuddy.vim&#39; end, config = { ... }})&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a table with a table of plugin specifications as its first element, config overrides as another element, and optional rock specifications as another element: &lt;code&gt;packer.startup({{&#39;tjdevries/colorbuddy.vim&#39;}, config = { ... }, rocks = { ... }})&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom Initialization&lt;/h3&gt; &#xA;&lt;p&gt;You are not required to use &lt;code&gt;packer.startup&lt;/code&gt; if you prefer a more manual setup with finer control over configuration and loading.&lt;/p&gt; &#xA;&lt;p&gt;To take this approach, load &lt;code&gt;packer&lt;/code&gt; like any other Lua module. You must call &lt;code&gt;packer.init()&lt;/code&gt; before performing any operations; it is recommended to call &lt;code&gt;packer.reset()&lt;/code&gt; if you may be re-running your specification code (e.g. by sourcing your plugin specification file with &lt;code&gt;luafile&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You may pass a table of configuration values to &lt;code&gt;packer.init()&lt;/code&gt; to customize its operation. The default configuration values (and structure of the configuration table) are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ensure_dependencies   = true, -- Should packer install plugin dependencies?&#xA;  snapshot = nil, -- Name of the snapshot you would like to load at startup&#xA;  snapshot_path = join_paths(stdpath &#39;cache&#39;, &#39;packer.nvim&#39;), -- Default save directory for snapshots&#xA;  package_root   = util.join_paths(vim.fn.stdpath(&#39;data&#39;), &#39;site&#39;, &#39;pack&#39;),&#xA;  compile_path = util.join_paths(vim.fn.stdpath(&#39;config&#39;), &#39;plugin&#39;, &#39;packer_compiled.lua&#39;),&#xA;  plugin_package = &#39;packer&#39;, -- The default package for plugins&#xA;  max_jobs = nil, -- Limit the number of simultaneous jobs. nil means no limit&#xA;  auto_clean = true, -- During sync(), remove unused plugins&#xA;  compile_on_sync = true, -- During sync(), run packer.compile()&#xA;  disable_commands = false, -- Disable creating commands&#xA;  opt_default = false, -- Default to using opt (as opposed to start) plugins&#xA;  transitive_opt = true, -- Make dependencies of opt plugins also opt by default&#xA;  transitive_disable = true, -- Automatically disable dependencies of disabled plugins&#xA;  auto_reload_compiled = true, -- Automatically reload the compiled file after creating it.&#xA;  git = {&#xA;    cmd = &#39;git&#39;, -- The base command for git operations&#xA;    subcommands = { -- Format strings for git subcommands&#xA;      update         = &#39;pull --ff-only --progress --rebase=false&#39;,&#xA;      install        = &#39;clone --depth %i --no-single-branch --progress&#39;,&#xA;      fetch          = &#39;fetch --depth 999999 --progress&#39;,&#xA;      checkout       = &#39;checkout %s --&#39;,&#xA;      update_branch  = &#39;merge --ff-only @{u}&#39;,&#xA;      current_branch = &#39;branch --show-current&#39;,&#xA;      diff           = &#39;log --color=never --pretty=format:FMT --no-show-signature HEAD@{1}...HEAD&#39;,&#xA;      diff_fmt       = &#39;%%h %%s (%%cr)&#39;,&#xA;      get_rev        = &#39;rev-parse --short HEAD&#39;,&#xA;      get_msg        = &#39;log --color=never --pretty=format:FMT --no-show-signature HEAD -n 1&#39;,&#xA;      submodules     = &#39;submodule update --init --recursive --progress&#39;&#xA;    },&#xA;    depth = 1, -- Git clone depth&#xA;    clone_timeout = 60, -- Timeout, in seconds, for git clones&#xA;    default_url_format = &#39;https://github.com/%s&#39; -- Lua format string used for &#34;aaa/bbb&#34; style plugins&#xA;  },&#xA;  display = {&#xA;    non_interactive = false, -- If true, disable display windows for all operations&#xA;    open_fn  = nil, -- An optional function to open a window for packer&#39;s display&#xA;    open_cmd = &#39;65vnew \\[packer\\]&#39;, -- An optional command to open a window for packer&#39;s display&#xA;    working_sym = &#39;‚ü≥&#39;, -- The symbol for a plugin being installed/updated&#xA;    error_sym = &#39;‚úó&#39;, -- The symbol for a plugin with an error in installation/updating&#xA;    done_sym = &#39;‚úì&#39;, -- The symbol for a plugin which has completed installation/updating&#xA;    removed_sym = &#39;-&#39;, -- The symbol for an unused plugin which was removed&#xA;    moved_sym = &#39;‚Üí&#39;, -- The symbol for a plugin which was moved (e.g. from opt to start)&#xA;    header_sym = &#39;‚îÅ&#39;, -- The symbol for the header line in packer&#39;s display&#xA;    show_all_info = true, -- Should packer show all update details automatically?&#xA;    prompt_border = &#39;double&#39;, -- Border style of prompt popups.&#xA;    keybindings = { -- Keybindings for the display window&#xA;      quit = &#39;q&#39;,&#xA;      toggle_info = &#39;&amp;lt;CR&amp;gt;&#39;,&#xA;      diff = &#39;d&#39;,&#xA;      prompt_revert = &#39;r&#39;,&#xA;    }&#xA;  },&#xA;  luarocks = {&#xA;    python_cmd = &#39;python&#39; -- Set the python command to use for running hererocks&#xA;  },&#xA;  log = { level = &#39;warn&#39; }, -- The default print log level. One of: &#34;trace&#34;, &#34;debug&#34;, &#34;info&#34;, &#34;warn&#34;, &#34;error&#34;, &#34;fatal&#34;.&#xA;  profile = {&#xA;    enable = false,&#xA;    threshold = 1, -- integer in milliseconds, plugins which load faster than this won&#39;t be shown in profile output&#xA;  },&#xA;  autoremove = false, -- Remove disabled or unused plugins without prompting the user&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying plugins&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; is based around declarative specification of plugins. You can declare a plugin using the function &lt;code&gt;packer.use&lt;/code&gt;, which I highly recommend locally binding to &lt;code&gt;use&lt;/code&gt; for conciseness.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;use&lt;/code&gt; takes either a string or a table. If a string is provided, it is treated as a plugin location for a non-optional plugin with no additional configuration. Plugin locations may be specified as&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Absolute paths to a local plugin&lt;/li&gt; &#xA; &lt;li&gt;Full URLs (treated as plugins managed with &lt;code&gt;git&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;username/repo&lt;/code&gt; paths (treated as Github &lt;code&gt;git&lt;/code&gt; plugins)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A table given to &lt;code&gt;use&lt;/code&gt; can take two forms:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A list of plugin specifications (strings or tables)&lt;/li&gt; &#xA; &lt;li&gt;A table specifying a single plugin. It must have a plugin location string as its first element, and may additionally have a number of optional keyword elements, shown below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;myusername/example&#39;,        -- The plugin location string&#xA;  -- The following keys are all optional&#xA;  disable = boolean,           -- Mark a plugin as inactive&#xA;  as = string,                 -- Specifies an alias under which to install the plugin&#xA;  installer = function,        -- Specifies custom installer. See &#34;custom installers&#34; below.&#xA;  updater = function,          -- Specifies custom updater. See &#34;custom installers&#34; below.&#xA;  after = string or list,      -- Specifies plugins to load before this plugin. See &#34;sequencing&#34; below&#xA;  rtp = string,                -- Specifies a subdirectory of the plugin to add to runtimepath.&#xA;  opt = boolean,               -- Manually marks a plugin as optional.&#xA;  branch = string,             -- Specifies a git branch to use&#xA;  tag = string,                -- Specifies a git tag to use. Supports &#39;*&#39; for &#34;latest tag&#34;&#xA;  commit = string,             -- Specifies a git commit to use&#xA;  lock = boolean,              -- Skip updating this plugin in updates/syncs. Still cleans.&#xA;  run = string, function, or table, -- Post-update/install hook. See &#34;update/install hooks&#34;.&#xA;  requires = string or list,   -- Specifies plugin dependencies. See &#34;dependencies&#34;.&#xA;  rocks = string or list,      -- Specifies Luarocks dependencies for the plugin&#xA;  config = string or function, -- Specifies code to run after this plugin is loaded.&#xA;  -- The setup key implies opt = true&#xA;  setup = string or function,  -- Specifies code to run before this plugin is loaded.&#xA;  -- The following keys all imply lazy-loading and imply opt = true&#xA;  cmd = string or list,        -- Specifies commands which load this plugin. Can be an autocmd pattern.&#xA;  ft = string or list,         -- Specifies filetypes which load this plugin.&#xA;  keys = string or list,       -- Specifies maps which load this plugin. See &#34;Keybindings&#34;.&#xA;  event = string or list,      -- Specifies autocommand events which load this plugin.&#xA;  fn = string or list          -- Specifies functions which load this plugin.&#xA;  cond = string, function, or list of strings/functions,   -- Specifies a conditional test to load this plugin&#xA;  module = string or list      -- Specifies Lua module names for require. When requiring a string which starts&#xA;                               -- with one of these module names, the plugin will be loaded.&#xA;  module_pattern = string/list -- Specifies Lua pattern of Lua module names for require. When&#xA;  requiring a string which matches one of these patterns, the plugin will be loaded.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the &lt;code&gt;cmd&lt;/code&gt; option, the command may be a full command, or an autocommand pattern. If the command contains any non-alphanumeric characters, it is assumed to be a pattern, and instead of creating a stub command, it creates a CmdUndefined autocmd to load the plugin when a command that matches the pattern is invoked.&lt;/p&gt; &#xA;&lt;h4&gt;Checking plugin statuses&lt;/h4&gt; &#xA;&lt;p&gt;You can check whether or not a particular plugin is installed with &lt;code&gt;packer&lt;/code&gt; as well as if that plugin is loaded. To do this you can check for the plugin&#39;s name in the &lt;code&gt;packer_plugins&lt;/code&gt; global table. Plugins in this table are saved using only the last section of their names e.g. &lt;code&gt;tpope/vim-fugitive&lt;/code&gt; if installed will be under the key &lt;code&gt;vim-fugitive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;if packer_plugins[&#34;vim-fugitive&#34;] and packer_plugins[&#34;vim-fugitive&#34;].loaded then&#xA;print(&#34;Vim fugitive is loaded&#34;)&#xA;-- other custom logic&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; this table is only available &lt;em&gt;after&lt;/em&gt; &lt;code&gt;packer_compiled.vim&lt;/code&gt; is loaded so cannot be used till &lt;em&gt;after&lt;/em&gt; plugins have been loaded.&lt;/p&gt; &#xA;&lt;h4&gt;Luarocks support&lt;/h4&gt; &#xA;&lt;p&gt;You may specify that a plugin requires one or more Luarocks packages using the &lt;code&gt;rocks&lt;/code&gt; key. This key takes either a string specifying the name of a package (e.g. &lt;code&gt;rocks=lpeg&lt;/code&gt;), or a list specifying one or more packages. Entries in the list may either be strings, a list of strings or a table --- the latter case is used to specify arguments such as the particular version of a package. all supported luarocks keys are allowed except: &lt;code&gt;tree&lt;/code&gt; and &lt;code&gt;local&lt;/code&gt;. Environment variables for the luarocks command can also be specified using the &lt;code&gt;env&lt;/code&gt; key which takes a table as the value as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;rocks = {&#39;lpeg&#39;, {&#39;lua-cjson&#39;, version = &#39;2.1.0&#39;}}&#xA;use_rocks {&#39;lua-cjson&#39;, &#39;lua-resty-http&#39;}&#xA;use_rocks {&#39;luaformatter&#39;, server = &#39;https://luarocks.org/dev&#39;}&#xA;use_rocks {&#39;openssl&#39; env = {OPENSSL_DIR = &#34;/path/to/dir&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, &lt;code&gt;packer&lt;/code&gt; only supports equality constraints on package versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; also provides the function &lt;code&gt;packer.luarocks.install_commands()&lt;/code&gt;, which creates the &lt;code&gt;PackerRocks &amp;lt;cmd&amp;gt; &amp;lt;packages...&amp;gt;&lt;/code&gt; command. &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt; must be one of &#34;install&#34; or &#34;remove&#34;; &lt;code&gt;&amp;lt;packages...&amp;gt;&lt;/code&gt; is one or more package names (currently, version restrictions are not supported with this command). Running &lt;code&gt;PackerRocks&lt;/code&gt; will install or remove the given packages. You can use this command even if you don&#39;t use &lt;code&gt;packer&lt;/code&gt; to manage your plugins. However, please note that (1) packages installed through &lt;code&gt;PackerRocks&lt;/code&gt; &lt;strong&gt;will&lt;/strong&gt; be removed by calls to &lt;code&gt;packer.luarocks.clean()&lt;/code&gt; (unless they are also part of a &lt;code&gt;packer&lt;/code&gt; plugin specification), and (2) you will need to manually invoke &lt;code&gt;packer.luarocks.setup_paths&lt;/code&gt; (or otherwise modify your &lt;code&gt;package.path&lt;/code&gt;) to ensure that Neovim can find the installed packages.&lt;/p&gt; &#xA;&lt;p&gt;Finally, &lt;code&gt;packer&lt;/code&gt; provides the function &lt;code&gt;packer.use_rocks&lt;/code&gt;, which takes a string or table specifying one or more Luarocks packages as in the &lt;code&gt;rocks&lt;/code&gt; key. You can use this to ensure that &lt;code&gt;packer&lt;/code&gt; downloads and manages some rocks which you want to use, but which are not associated with any particular plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Custom installers&lt;/h4&gt; &#xA;&lt;p&gt;You may specify a custom installer &amp;amp; updater for a plugin using the &lt;code&gt;installer&lt;/code&gt; and &lt;code&gt;updater&lt;/code&gt; keys. Note that either both or none of these keys are required. These keys should be functions which take as an argument a &lt;code&gt;display&lt;/code&gt; object (from &lt;code&gt;lua/packer/display.lua&lt;/code&gt;) and return an async function (per &lt;code&gt;lua/packer/async.lua&lt;/code&gt;) which (respectively) installs/updates the given plugin.&lt;/p&gt; &#xA;&lt;p&gt;Providing the &lt;code&gt;installer&lt;/code&gt;/&lt;code&gt;updater&lt;/code&gt; keys overrides plugin type detection, but you still need to provide a location string for the name of the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Update/install hooks&lt;/h4&gt; &#xA;&lt;p&gt;You may specify operations to be run after successful installs/updates of a plugin with the &lt;code&gt;run&lt;/code&gt; key. This key may either be a Lua function, which will be called with the &lt;code&gt;plugin&lt;/code&gt; table for this plugin (containing the information passed to &lt;code&gt;use&lt;/code&gt; as well as output from the installation/update commands, the installation path of the plugin, etc.), a string, or a table of functions and strings.&lt;/p&gt; &#xA;&lt;p&gt;If an element of &lt;code&gt;run&lt;/code&gt; is a string, then either:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If the first character of &lt;code&gt;run&lt;/code&gt; is &#34;:&#34;, it is treated as a Neovim command and executed.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, &lt;code&gt;run&lt;/code&gt; is treated as a shell command and run in the installation directory of the plugin via &lt;code&gt;$SHELL -c &#39;&amp;lt;run&amp;gt;&#39;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Plugins may specify dependencies via the &lt;code&gt;requires&lt;/code&gt; key. This key can be a string or a list (table).&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;requires&lt;/code&gt; is a string, it is treated as specifying a single plugin. If a plugin with the name given in &lt;code&gt;requires&lt;/code&gt; is already known in the managed set, nothing happens. Otherwise, the string is treated as a plugin location string and the corresponding plugin is added to the managed set.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;requires&lt;/code&gt; is a list, it is treated as a list of plugin specifications following the format given above.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ensure_dependencies&lt;/code&gt; is true, the plugins specified in &lt;code&gt;requires&lt;/code&gt; will be installed.&lt;/p&gt; &#xA;&lt;p&gt;Plugins specified in &lt;code&gt;requires&lt;/code&gt; are removed when no active plugins require them.&lt;/p&gt; &#xA;&lt;h4&gt;Sequencing&lt;/h4&gt; &#xA;&lt;p&gt;You may specify a loading order for plugins using the &lt;code&gt;after&lt;/code&gt; key. This key can be a string or a list (table).&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;after&lt;/code&gt; is a string, it must be the name of another plugin managed by &lt;code&gt;packer&lt;/code&gt; (e.g. the final segment of a plugin&#39;s path - for a Github plugin &lt;code&gt;FooBar/Baz&lt;/code&gt;, the name would be just &lt;code&gt;Baz&lt;/code&gt;). If &lt;code&gt;after&lt;/code&gt; is a table, it must be a list of plugin names. If a plugin has an alias (i.e. uses the &lt;code&gt;as&lt;/code&gt; key), this alias is its name.&lt;/p&gt; &#xA;&lt;p&gt;The set of plugins specified in a plugin&#39;s &lt;code&gt;after&lt;/code&gt; key must &lt;strong&gt;all&lt;/strong&gt; be loaded before the plugin using &lt;code&gt;after&lt;/code&gt; will be loaded. For example, in the specification&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  use {&#39;FooBar/Baz&#39;, ft = &#39;bax&#39;}&#xA;  use {&#39;Something/Else&#39;, after = &#39;Baz&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the plugin &lt;code&gt;Else&lt;/code&gt; will only be loaded after the plugin &lt;code&gt;Baz&lt;/code&gt;, which itself is only loaded for files with &lt;code&gt;bax&lt;/code&gt; filetype.&lt;/p&gt; &#xA;&lt;h4&gt;Keybindings&lt;/h4&gt; &#xA;&lt;p&gt;Plugins may be lazy-loaded on the use of keybindings/maps. Individual keybindings are specified either as a string (in which case they are treated as normal mode maps) or a table in the format &lt;code&gt;{mode, map}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Performing plugin management operations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; exposes the following functions for common plugin management operations. In all of the below, &lt;code&gt;plugins&lt;/code&gt; is an optional table of plugin names; if not provided, the default is &#34;all managed plugins&#34;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.install(plugins)&lt;/code&gt;: Install the specified plugins if they are not already installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.update(plugins)&lt;/code&gt;: Update the specified plugins, installing any that are missing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.clean()&lt;/code&gt;: Remove any disabled or no longer managed plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.sync(plugins)&lt;/code&gt;: Perform a &lt;code&gt;clean&lt;/code&gt; followed by an &lt;code&gt;update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.compile(path)&lt;/code&gt;: Compile lazy-loader code and save to &lt;code&gt;path&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.snapshot(snapshot_name, ...)&lt;/code&gt;: Creates a snapshot file that will live under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be taken. Optionally, a list of plugins name can be provided to selectively choose the plugins to snapshot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.rollback(snapshot_name, ...)&lt;/code&gt;: Rollback plugins status a snapshot file that will live under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be taken. Optionally, a list of plugins name can be provided to selectively choose which plugins to revert.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.delete(snapshot_name)&lt;/code&gt;: Deletes a snapshot file under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be deleted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extending &lt;code&gt;packer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can add custom key handlers to &lt;code&gt;packer&lt;/code&gt; by calling &lt;code&gt;packer.set_handler(name, func)&lt;/code&gt; where &lt;code&gt;name&lt;/code&gt; is the key you wish to handle and &lt;code&gt;func&lt;/code&gt; is a function with the signature &lt;code&gt;func(plugins, plugin, value)&lt;/code&gt; where &lt;code&gt;plugins&lt;/code&gt; is the global table of managed plugins, &lt;code&gt;plugin&lt;/code&gt; is the table for a specific plugin, and &lt;code&gt;value&lt;/code&gt; is the value associated with key &lt;code&gt;name&lt;/code&gt; in &lt;code&gt;plugin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling Lazy-Loaders&lt;/h3&gt; &#xA;&lt;p&gt;To optimize startup time, &lt;code&gt;packer.nvim&lt;/code&gt; compiles code to perform the lazy-loading operations you specify. This means that you do not need to load &lt;code&gt;packer.nvim&lt;/code&gt; unless you want to perform some plugin management operations.&lt;/p&gt; &#xA;&lt;p&gt;To generate the compiled code, call &lt;code&gt;packer.compile(path)&lt;/code&gt;, where &lt;code&gt;path&lt;/code&gt; is some file path on your &lt;code&gt;runtimepath&lt;/code&gt;, with a &lt;code&gt;.vim&lt;/code&gt; extension. This will generate a blend of Lua and Vimscript to load and configure all your lazy-loaded plugins (e.g. generating commands, autocommands, etc.) and save it to &lt;code&gt;path&lt;/code&gt;. Then, when you start vim, the file at &lt;code&gt;path&lt;/code&gt; is loaded (because &lt;code&gt;path&lt;/code&gt; must be on your &lt;code&gt;runtimepath&lt;/code&gt;), and lazy-loading works.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;path&lt;/code&gt; is not provided to &lt;code&gt;packer.compile&lt;/code&gt;, the output file will default to the value of &lt;code&gt;config.compile_path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The option &lt;code&gt;compile_on_sync&lt;/code&gt;, which defaults to &lt;code&gt;true&lt;/code&gt;, will run &lt;code&gt;packer.compile()&lt;/code&gt; during &lt;code&gt;packer.sync()&lt;/code&gt;, if set to &lt;code&gt;true&lt;/code&gt;. Note that otherwise, you &lt;strong&gt;must&lt;/strong&gt; run &lt;code&gt;packer.compile&lt;/code&gt; yourself to generate the lazy-loader file!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you use a function value for &lt;code&gt;config&lt;/code&gt; or &lt;code&gt;setup&lt;/code&gt; keys in any plugin specifications, it &lt;strong&gt;must not&lt;/strong&gt; have any upvalues (i.e. captures). We currently use Lua&#39;s &lt;code&gt;string.dump&lt;/code&gt; to compile config/setup functions to bytecode, which has this limitation. Additionally, if functions are given for these keys, the functions will be passed the plugin name and information table as arguments.&lt;/p&gt; &#xA;&lt;h3&gt;User autocommands&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; runs most of its operations asyncronously. If you would like to implement automations that require knowing when the operations are complete, you can use the following &lt;code&gt;User&lt;/code&gt; autocmds (see &lt;code&gt;:help User&lt;/code&gt; for more info on how to use):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PackerComplete&lt;/code&gt;: Fires after install, update, clean, and sync asynchronous operations finish.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PackerCompileDone&lt;/code&gt;: Fires after compiling (see &lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#compiling-lazy-loaders&#34;&gt;the section on compilation&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using a floating window&lt;/h3&gt; &#xA;&lt;p&gt;You can configure Packer to use a floating window for command outputs by passing a utility function to &lt;code&gt;packer&lt;/code&gt;&#39;s config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup({function()&#xA;  -- Your plugins here&#xA;end,&#xA;config = {&#xA;  display = {&#xA;    open_fn = require(&#39;packer.util&#39;).float,&#xA;  }&#xA;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this floating window will show doubled borders. If you want to customize the window appearance, you can pass a configuration to &lt;code&gt;float&lt;/code&gt;, which is the same configuration that would be passed to &lt;code&gt;nvim_open_win&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup({function()&#xA;  -- Your plugins here&#xA;end,&#xA;config = {&#xA;  display = {&#xA;    open_fn = function()&#xA;      return require(&#39;packer.util&#39;).float({ border = &#39;single&#39; })&#xA;    end&#xA;  }&#xA;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profiling&lt;/h2&gt; &#xA;&lt;p&gt;Packer has built in functionality that can allow you to profile the time taken loading your plugins. In order to use this functionality you must either enable profiling in your config, or pass in an argument when running packer compile.&lt;/p&gt; &#xA;&lt;h4&gt;Setup via config&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;  profile = {&#xA;    enable = true,&#xA;    threshold = 1 -- the amount in ms that a plugins load time must be over for it to be included in the profile&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using the packer compile command&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:PackerCompile profile=true&#xA;&#34; or&#xA;:PackerCompile profile=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Profiling usage&lt;/h4&gt; &#xA;&lt;p&gt;This will rebuild your &lt;code&gt;packer_compiled.vim&lt;/code&gt; with profiling code included. In order to visualise the output of the profile restart your neovim and run &lt;code&gt;PackerProfile&lt;/code&gt;. This will open a window with the output of your profiling.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;packer.nvim&lt;/code&gt; logs to &lt;code&gt;stdpath(cache)/packer.nvim.log&lt;/code&gt;. Looking at this file is usually a good start if something isn&#39;t working as expected.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: Beta. Things seem to work and most features are complete, but certainly not every edge case has been tested. People willing to give it a try and report bugs/errors are very welcome!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic package management works (i.e. installation, updating, cleaning, start/opt plugins, displaying results)&lt;/li&gt; &#xA; &lt;li&gt;Automatic generation of lazy-loading code works&lt;/li&gt; &#xA; &lt;li&gt;More testing is needed&lt;/li&gt; &#xA; &lt;li&gt;The code is messy and needs more cleanup and refactoring&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current work-in-progress&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Playing with ideas to make manual compilation less necessary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to those who have contributed to the project! PRs and issues are always welcome. This list is infrequently updated; please feel free to bug me if you&#39;re not listed here and you would like to be.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@akinsho&lt;/li&gt; &#xA; &lt;li&gt;@nanotee&lt;/li&gt; &#xA; &lt;li&gt;@weilbith&lt;/li&gt; &#xA; &lt;li&gt;@Iron-E&lt;/li&gt; &#xA; &lt;li&gt;@tjdevries&lt;/li&gt; &#xA; &lt;li&gt;@numToStr&lt;/li&gt; &#xA; &lt;li&gt;@fsouza&lt;/li&gt; &#xA; &lt;li&gt;@gbrlsnchs&lt;/li&gt; &#xA; &lt;li&gt;@lewis6991&lt;/li&gt; &#xA; &lt;li&gt;@TimUntersberger&lt;/li&gt; &#xA; &lt;li&gt;@bfredl&lt;/li&gt; &#xA; &lt;li&gt;@sunjon&lt;/li&gt; &#xA; &lt;li&gt;@gwerbin&lt;/li&gt; &#xA; &lt;li&gt;@shadmansaleh&lt;/li&gt; &#xA; &lt;li&gt;@ur4ltz&lt;/li&gt; &#xA; &lt;li&gt;@EdenEast&lt;/li&gt; &#xA; &lt;li&gt;@khuedoan&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kyazdani42/nvim-tree.lua</title>
    <updated>2022-08-01T02:45:56Z</updated>
    <id>tag:github.com,2022-08-01:/kyazdani42/nvim-tree.lua</id>
    <link href="https://github.com/kyazdani42/nvim-tree.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A file explorer tree for neovim written in lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A File Explorer For Neovim Written In Lua&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/kyazdani42/nvim-tree.lua/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;124&#34; height=&#34;332&#34; src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/example.png?raw=true&#34;&gt; &#xA;&lt;p&gt;Automatic updates&lt;/p&gt; &#xA;&lt;p&gt;File type icons&lt;/p&gt; &#xA;&lt;p&gt;Git integration&lt;/p&gt; &#xA;&lt;p&gt;Diagnostics integration: LSP and COC&lt;/p&gt; &#xA;&lt;p&gt;(Live) filtering&lt;/p&gt; &#xA;&lt;p&gt;Cut, copy, paste, rename, delete, create&lt;/p&gt; &#xA;&lt;p&gt;Highly customisable&lt;/p&gt; &#xA;&lt;br clear=&#34;left&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#nvim-tree:matrix.org&#34;&gt;Join us on matrix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neovim/neovim/wiki/Installing-Neovim&#34;&gt;neovim &amp;gt;=0.7.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; is optional and used to display file icons. It requires a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;patched font&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;kyazdani42/nvim-web-devicons&#39; &#34; optional, for file icons&#xA;Plug &#39;kyazdani42/nvim-tree.lua&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;kyazdani42/nvim-tree.lua&#39;,&#xA;  requires = {&#xA;    &#39;kyazdani42/nvim-web-devicons&#39;, -- optional, for file icons&#xA;  },&#xA;  tag = &#39;nightly&#39; -- optional, updated every week. (see issue #1193)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Setup should be run in a lua file or in a lua heredoc &lt;a href=&#34;https://neovim.io/doc/user/lua.html&#34;&gt;:help lua-heredoc&lt;/a&gt; if using in a vim file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- examples for your init.lua&#xA;&#xA;-- empty setup using defaults&#xA;require(&#34;nvim-tree&#34;).setup()&#xA;&#xA;-- OR setup with some options&#xA;require(&#34;nvim-tree&#34;).setup({&#xA;  sort_by = &#34;case_sensitive&#34;,&#xA;  view = {&#xA;    adaptive_size = true,&#xA;    mappings = {&#xA;      list = {&#xA;        { key = &#34;u&#34;, action = &#34;dir_up&#34; },&#xA;      },&#xA;    },&#xA;  },&#xA;  renderer = {&#xA;    group_empty = true,&#xA;  },&#xA;  filters = {&#xA;    dotfiles = true,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For complete list of available configuration options see &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each option is documented in &lt;code&gt;:help nvim-tree.OPTION_NAME&lt;/code&gt;. Nested options can be accessed by appending &lt;code&gt;.&lt;/code&gt;, for example &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.view.mappings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-commands&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Basic commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeToggle&lt;/code&gt; Open or close the tree. Takes an optional path argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeFocus&lt;/code&gt; Open the tree if it is closed, and then focus on the tree.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeFindFile&lt;/code&gt; Move the cursor in the tree for the current buffer, opening folders if needed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:NvimTreeCollapse&lt;/code&gt; Collapses the nvim-tree recursively.&lt;/p&gt; &#xA;&lt;h2&gt;Api&lt;/h2&gt; &#xA;&lt;p&gt;nvim-tree exposes a public api; see &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-api&lt;/a&gt;. This is a stable non breaking api.&lt;/p&gt; &#xA;&lt;h2&gt;Mappings&lt;/h2&gt; &#xA;&lt;p&gt;nvim-tree comes with number of mappings; for default mappings please see &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-default-mappings&lt;/a&gt;, for way of configuring mappings see &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-mappings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;g?&lt;/code&gt; toggles help, showing all the mappings and their actions.&lt;/p&gt; &#xA;&lt;h2&gt;Tips &amp;amp; tricks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can add a directory by adding a &lt;code&gt;/&lt;/code&gt; at the end of the paths, entering multiple directories &lt;code&gt;BASE/foo/bar/baz&lt;/code&gt; will add directory foo, then bar and add a file baz to it.&lt;/li&gt; &#xA; &lt;li&gt;You can update window options for the tree by setting &lt;code&gt;require&#34;nvim-tree.view&#34;.View.winopts.MY_OPTION = MY_OPTION_VALUE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle&lt;/code&gt; has a second parameter which allows to toggle without focusing the explorer (&lt;code&gt;require&#34;nvim-tree&#34;.toggle(false, true)&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;You can allow nvim-tree to behave like vinegar, see &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree-vinegar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;code&gt;:set nosplitright&lt;/code&gt;, the files will open on the left side of the tree, placing the tree window in the right side of the file you opened.&lt;/li&gt; &#xA; &lt;li&gt;You can automatically close the tab/vim when nvim-tree is the last window in the tab: &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/discussions/1115&#34;&gt;https://github.com/kyazdani42/nvim-tree.lua/discussions/1115&lt;/a&gt;. WARNING: this can catastrophically fail: &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/1368&#34;&gt;https://github.com/kyazdani42/nvim-tree.lua/issues/1368&lt;/a&gt;. This will not be added to nvim-tree and the team will not provide support / assistance with this, due to complexities in vim event timings and side-effects.&lt;/li&gt; &#xA; &lt;li&gt;Hide the &lt;code&gt;.git&lt;/code&gt; folder: &lt;code&gt;filters = { custom = { &#34;^.git$&#34; } }&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.filters.custom&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To disable the display of icons see &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.renderer.icons.show&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Diagnostic Logging&lt;/h3&gt; &#xA;&lt;p&gt;You may enable diagnostic logging to &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/doc/nvim-tree-lua.txt&#34;&gt;:help nvim-tree.log&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Performance Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are experiencing performance issues with nvim-tree.lua, you can enable profiling in the logs. It is advisable to enable git logging at the same time, as that can be a source of performance problems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;log = {&#xA;  enable = true,&#xA;  truncate = true,&#xA;  types = {&#xA;    git = true,&#xA;    profile = true,&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please attach &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt; if you raise an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Performance Tips:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using fish as an editor shell (which might be fixed in the future), try set &lt;code&gt;shell=/bin/bash&lt;/code&gt; in your vim config. Alternatively, you can &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/549#issuecomment-1127394585&#34;&gt;prevent fish from loading interactive configuration in a non-interactive shell&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try manually running the git command (see the logs) in your shell e.g. &lt;code&gt;git --no-optional-locks status --porcelain=v1 --ignored=matching -u&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Huge git repositories may timeout after the default &lt;code&gt;git.timeout&lt;/code&gt; of 400ms. Try increasing that in your setup if you see &lt;code&gt;[git] job timed out&lt;/code&gt; in the logs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try temporarily disabling git integration by setting &lt;code&gt;git.enable = false&lt;/code&gt; in your setup.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PRs are always welcome. See &lt;a href=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Help Wanted&lt;/h3&gt; &#xA;&lt;p&gt;Developers with the following environments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple macOS&lt;/li&gt; &#xA; &lt;li&gt;Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WSL&lt;/li&gt; &#xA;   &lt;li&gt;msys&lt;/li&gt; &#xA;   &lt;li&gt;powershell&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Help triaging, diagnosing and fixing issues specific to those environments is needed, as the nvim-tree developers do not have access to or expertise in these environments.&lt;/p&gt; &#xA;&lt;p&gt;Let us know you&#39;re interested by commenting on issues and raising PRs.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;kyazdani42 tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;akin909 tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot3.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;stsewd tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot4.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;reyhankaplan tree&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>