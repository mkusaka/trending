<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-01T02:16:29Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jackMort/ChatGPT.nvim</title>
    <updated>2023-04-01T02:16:29Z</updated>
    <id>tag:github.com,2023-04-01:/jackMort/ChatGPT.nvim</id>
    <link href="https://github.com/jackMort/ChatGPT.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin for interacting with OpenAI GPT-3 chatbot, providing an easy interface for exploring GPT-3 and NLP.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://img.shields.io/github/actions/workflow/status/jackMort/ChatGPT.nvim/default.yml?branch=main&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blueviolet.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ChatGPT&lt;/code&gt; is a Neovim plugin that allows you to interact with OpenAI&#39;s GPT-3 language model. With &lt;code&gt;ChatGPT&lt;/code&gt;, you can ask questions and get answers from GPT-3 in real-time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jackMort/ChatGPT.nvim/raw/media/preview-2.png?raw=true&#34; alt=&#34;preview image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have &lt;code&gt;curl&lt;/code&gt; installed.&lt;/li&gt; &#xA; &lt;li&gt;Set environment variable called &lt;code&gt;$OPENAI_API_KEY&lt;/code&gt; which you can &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;obtain here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Packer&#xA;use({&#xA;  &#34;jackMort/ChatGPT.nvim&#34;,&#xA;    config = function()&#xA;      require(&#34;chatgpt&#34;).setup({&#xA;        -- optional configuration&#xA;      })&#xA;    end,&#xA;    requires = {&#xA;      &#34;MunifTanjim/nui.nvim&#34;,&#xA;      &#34;nvim-lua/plenary.nvim&#34;,&#xA;      &#34;nvim-telescope/telescope.nvim&#34;&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ChatGPT.nvim&lt;/code&gt; comes with the following defaults&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  welcome_message = WELCOME_MESSAGE,&#xA;  loading_text = &#34;loading&#34;,&#xA;  question_sign = &#34;ÔÄá&#34;, -- you can use emoji if you want e.g. üôÇ&#xA;  answer_sign = &#34;ÔÆß&#34;, -- ü§ñ&#xA;  max_line_length = 120,&#xA;  yank_register = &#34;+&#34;,&#xA;  chat_layout = {&#xA;    relative = &#34;editor&#34;,&#xA;    position = &#34;50%&#34;,&#xA;    size = {&#xA;      height = &#34;80%&#34;,&#xA;      width = &#34;80%&#34;,&#xA;    },&#xA;  },&#xA;  settings_window = {&#xA;    border = {&#xA;      style = &#34;rounded&#34;,&#xA;      text = {&#xA;        top = &#34; Settings &#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;  chat_window = {&#xA;    filetype = &#34;chatgpt&#34;,&#xA;    border = {&#xA;      highlight = &#34;FloatBorder&#34;,&#xA;      style = &#34;rounded&#34;,&#xA;      text = {&#xA;        top = &#34; ChatGPT &#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;  chat_input = {&#xA;    prompt = &#34; ÔÜí &#34;,&#xA;    border = {&#xA;      highlight = &#34;FloatBorder&#34;,&#xA;      style = &#34;rounded&#34;,&#xA;      text = {&#xA;        top_align = &#34;center&#34;,&#xA;        top = &#34; Prompt &#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;  openai_params = {&#xA;    model = &#34;gpt-3.5-turbo&#34;,&#xA;    frequency_penalty = 0,&#xA;    presence_penalty = 0,&#xA;    max_tokens = 300,&#xA;    temperature = 0,&#xA;    top_p = 1,&#xA;    n = 1,&#xA;  },&#xA;  openai_edit_params = {&#xA;    model = &#34;code-davinci-edit-001&#34;,&#xA;    temperature = 0,&#xA;    top_p = 1,&#xA;    n = 1,&#xA;  },&#xA;  keymaps = {&#xA;    close = { &#34;&amp;lt;C-c&amp;gt;&#34; },&#xA;    submit = &#34;&amp;lt;C-Enter&amp;gt;&#34;,&#xA;    yank_last = &#34;&amp;lt;C-y&amp;gt;&#34;,&#xA;    yank_last_code = &#34;&amp;lt;C-k&amp;gt;&#34;,&#xA;    scroll_up = &#34;&amp;lt;C-u&amp;gt;&#34;,&#xA;    scroll_down = &#34;&amp;lt;C-d&amp;gt;&#34;,&#xA;    toggle_settings = &#34;&amp;lt;C-o&amp;gt;&#34;,&#xA;    new_session = &#34;&amp;lt;C-n&amp;gt;&#34;,&#xA;    cycle_windows = &#34;&amp;lt;Tab&amp;gt;&#34;,&#xA;    -- in the Sessions pane&#xA;    select_session = &#34;&amp;lt;Space&amp;gt;&#34;,&#xA;    rename_session = &#34;r&#34;,&#xA;    delete_session = &#34;d&#34;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Plugin exposes following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ChatGPT&lt;/code&gt; command which opens interactive window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ChatGPTActAs&lt;/code&gt; command which opens a prompt selection from &lt;a href=&#34;https://github.com/f/awesome-chatgpt-prompts&#34;&gt;Awesome ChatGPT Prompts&lt;/a&gt; to be used with the ChatGPT.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jackMort/ChatGPT.nvim/raw/media/preview-3.png?raw=true&#34; alt=&#34;preview image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ChatGPTEditWithInstructions&lt;/code&gt; command which opens interactive window to edit selected text or whole window - &lt;a href=&#34;https://www.youtube.com/watch?v=dWe01EV0q3Q&#34;&gt;demo video&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jackMort/ChatGPT.nvim/raw/media/preview.png?raw=true&#34; alt=&#34;preview image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Available keybindings are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-Enter&amp;gt;&lt;/code&gt; to submit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; to close chat window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-u&amp;gt;&lt;/code&gt; scroll up chat window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-d&amp;gt;&lt;/code&gt; scroll down chat window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt; to copy/yank last answer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt; to copy/yank code from last answer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-o&amp;gt;&lt;/code&gt; Toggle settings window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt; Start new session.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; Cycle over windows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-i&amp;gt;&lt;/code&gt; [Edit Window] use response as input.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/jackMort&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;&amp;quot;Buy Me A Coffee&amp;quot;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kylechui/nvim-surround</title>
    <updated>2023-04-01T02:16:29Z</updated>
    <id>tag:github.com,2023-04-01:/kylechui/nvim-surround</id>
    <link href="https://github.com/kylechui/nvim-surround" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add/change/delete surrounding delimiter pairs with ease. Written with ‚ù§Ô∏è in Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-surround&lt;/h1&gt; &#xA;&lt;p&gt;Surround selections, stylishly &lt;span&gt;üòé&lt;/span&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;video src=&#34;https://user-images.githubusercontent.com/48545987/178679494-c7d58bdd-d8ca-4802-a01c-a9444b8b882f.mp4&#34; type=&#34;video/mp4&#34;&gt;&lt;/video&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ú®&lt;/span&gt; Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add/delete/change surrounding pairs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Function calls and HTML tags out-of-the-box&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dot-repeat previous actions&lt;/li&gt; &#xA; &lt;li&gt;Set buffer-local mappings and surrounds&lt;/li&gt; &#xA; &lt;li&gt;Jump to the &lt;em&gt;nearest&lt;/em&gt; surrounding pair for modification&lt;/li&gt; &#xA; &lt;li&gt;Use a single character as an alias for several text-objects &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;E.g. &lt;code&gt;q&lt;/code&gt; is aliased to &lt;code&gt;`,&#39;,&#34;&lt;/code&gt;, so &lt;code&gt;csqb&lt;/code&gt; replaces the &lt;em&gt;nearest&lt;/em&gt; set of quotes with parentheses&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Surround using powerful pairs that depend on user input&lt;/li&gt; &#xA; &lt;li&gt;Modify custom surrounds &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;First-class support for Vim motions, Lua patterns, and Tree-sitter nodes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Highlight selections for visual feedback&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üîí&lt;/span&gt; Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases&#34;&gt;Neovim 0.8+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Recommended] If &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; is installed, then Tree-sitter nodes may be surrounded and modified, in addition to just Vim motions and Lua patterns&lt;/li&gt; &#xA; &lt;li&gt;[Recommended] If &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-textobjects&#34;&gt;nvim-treesitter-textobjects&lt;/a&gt; is installed, then Tree-sitter text-objects can be used to define surrounds, simplifying configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üì¶&lt;/span&gt; Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;kylechui/nvim-surround&#34;,&#xA;    version = &#34;*&#34;, -- Use for stability; omit to use `main` branch for the latest features&#xA;    event = &#34;VeryLazy&#34;,&#xA;    config = function()&#xA;        require(&#34;nvim-surround&#34;).setup({&#xA;            -- Configuration here, or leave empty to use defaults&#xA;        })&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;    &#34;kylechui/nvim-surround&#34;,&#xA;    tag = &#34;*&#34;, -- Use for stability; omit to use `main` branch for the latest features&#xA;    config = function()&#xA;        require(&#34;nvim-surround&#34;).setup({&#xA;            -- Configuration here, or leave empty to use defaults&#xA;        })&#xA;    end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;üöÄ&lt;/span&gt; Usage&lt;/h2&gt; &#xA;&lt;p&gt;The three &#34;core&#34; operations of &lt;code&gt;add&lt;/code&gt;/&lt;code&gt;delete&lt;/code&gt;/&lt;code&gt;change&lt;/code&gt; can be done with the keymaps &lt;code&gt;ys{motion}{char}&lt;/code&gt;, &lt;code&gt;ds{char}&lt;/code&gt;, and &lt;code&gt;cs{target}{replacement}&lt;/code&gt;, respectively. For the following examples, &lt;code&gt;*&lt;/code&gt; will denote the cursor position:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;    Old text                    Command         New text&#xA;--------------------------------------------------------------------------------&#xA;    surr*ound_words             ysiw)           (surround_words)&#xA;    *make strings               ys$&#34;            &#34;make strings&#34;&#xA;    [delete ar*ound me!]        ds]             delete around me!&#xA;    remove &amp;lt;b&amp;gt;HTML t*ags&amp;lt;/b&amp;gt;    dst             remove HTML tags&#xA;    &#39;change quot*es&#39;            cs&#39;&#34;            &#34;change quotes&#34;&#xA;    &amp;lt;b&amp;gt;or tag* types&amp;lt;/b&amp;gt;        csth1&amp;lt;CR&amp;gt;       &amp;lt;h1&amp;gt;or tag types&amp;lt;/h1&amp;gt;&#xA;    delete(functi*on calls)     dsf             function calls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detailed information on how to use this plugin can be found in &lt;a href=&#34;https://github.com/kylechui/nvim-surround/raw/main/doc/nvim-surround.txt&#34;&gt;&lt;code&gt;:h nvim-surround.usage&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚öô&lt;/span&gt; Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The default configuration is found &lt;a href=&#34;https://github.com/kylechui/nvim-surround/raw/main/lua/nvim-surround/config.lua&#34;&gt;here&lt;/a&gt;. Simply call &lt;code&gt;require(&#34;nvim-surround&#34;).setup&lt;/code&gt; or &lt;code&gt;require(&#34;nvim-surround&#34;).buffer_setup&lt;/code&gt; with the desired options.&lt;/p&gt; &#xA;&lt;p&gt;More information on how to configure this plugin can be found in &lt;a href=&#34;https://github.com/kylechui/nvim-surround/raw/main/doc/nvim-surround.txt&#34;&gt;&lt;code&gt;:h nvim-surround.configuration&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/kylechui/nvim-surround/raw/main/CONTRIBUTING.md&#34;&gt;the contributing file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shoutouts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;vim-surround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.surround&#34;&gt;mini.surround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/machakann/vim-sandwich&#34;&gt;vim-sandwich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Like this project? Give it a &lt;span&gt;‚≠ê&lt;/span&gt; to show your support!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hrsh7th/nvim-cmp</title>
    <updated>2023-04-01T02:16:29Z</updated>
    <id>tag:github.com,2023-04-01:/hrsh7th/nvim-cmp</id>
    <link href="https://github.com/hrsh7th/nvim-cmp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A completion plugin for neovim coded in Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-cmp&lt;/h1&gt; &#xA;&lt;p&gt;A completion engine plugin for neovim written in Lua. Completion sources are installed from external repositories and &#34;sourced&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://user-images.githubusercontent.com/629908/139000570-3ac39587-a88b-43c6-b35e-207489719359.mp4&#34; width=&#34;100%&#34;&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Readme!&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;There is a GitHub issue that documents &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/issues/231&#34;&gt;breaking changes&lt;/a&gt; for nvim-cmp. Subscribe to the issue to be notified of upcoming breaking changes.&lt;/li&gt; &#xA; &lt;li&gt;This is my hobby project. You can support me via GitHub sponsors.&lt;/li&gt; &#xA; &lt;li&gt;Bug reports are welcome, but don&#39;t expect a fix unless you provide minimal configuration and steps to reproduce your issue.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;cmp.mapping.preset.*&lt;/code&gt; is pre-defined configuration that aims to mimic neovim&#39;s native like behavior. It can be changed without announcement. Please manage key-mapping by yourself.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Concept&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full support for LSP completion related capabilities&lt;/li&gt; &#xA; &lt;li&gt;Powerful customizability via Lua functions&lt;/li&gt; &#xA; &lt;li&gt;Smart handling of key mappings&lt;/li&gt; &#xA; &lt;li&gt;No flicker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h3&gt;Recommended Configuration&lt;/h3&gt; &#xA;&lt;p&gt;This example configuration uses &lt;code&gt;vim-plug&lt;/code&gt; as the plugin manager and &lt;code&gt;vim-vsnip&lt;/code&gt; as a snippet plugin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;call plug#begin(s:plug_dir)&#xA;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;hrsh7th/cmp-nvim-lsp&#39;&#xA;Plug &#39;hrsh7th/cmp-buffer&#39;&#xA;Plug &#39;hrsh7th/cmp-path&#39;&#xA;Plug &#39;hrsh7th/cmp-cmdline&#39;&#xA;Plug &#39;hrsh7th/nvim-cmp&#39;&#xA;&#xA;&#34; For vsnip users.&#xA;Plug &#39;hrsh7th/cmp-vsnip&#39;&#xA;Plug &#39;hrsh7th/vim-vsnip&#39;&#xA;&#xA;&#34; For luasnip users.&#xA;&#34; Plug &#39;L3MON4D3/LuaSnip&#39;&#xA;&#34; Plug &#39;saadparwaiz1/cmp_luasnip&#39;&#xA;&#xA;&#34; For ultisnips users.&#xA;&#34; Plug &#39;SirVer/ultisnips&#39;&#xA;&#34; Plug &#39;quangnguyen30192/cmp-nvim-ultisnips&#39;&#xA;&#xA;&#34; For snippy users.&#xA;&#34; Plug &#39;dcampos/nvim-snippy&#39;&#xA;&#34; Plug &#39;dcampos/cmp-snippy&#39;&#xA;&#xA;call plug#end()&#xA;&#xA;lua &amp;lt;&amp;lt;EOF&#xA;  -- Set up nvim-cmp.&#xA;  local cmp = require&#39;cmp&#39;&#xA;&#xA;  cmp.setup({&#xA;    snippet = {&#xA;      -- REQUIRED - you must specify a snippet engine&#xA;      expand = function(args)&#xA;        vim.fn[&#34;vsnip#anonymous&#34;](args.body) -- For `vsnip` users.&#xA;        -- require(&#39;luasnip&#39;).lsp_expand(args.body) -- For `luasnip` users.&#xA;        -- require(&#39;snippy&#39;).expand_snippet(args.body) -- For `snippy` users.&#xA;        -- vim.fn[&#34;UltiSnips#Anon&#34;](args.body) -- For `ultisnips` users.&#xA;      end,&#xA;    },&#xA;    window = {&#xA;      -- completion = cmp.config.window.bordered(),&#xA;      -- documentation = cmp.config.window.bordered(),&#xA;    },&#xA;    mapping = cmp.mapping.preset.insert({&#xA;      [&#39;&amp;lt;C-b&amp;gt;&#39;] = cmp.mapping.scroll_docs(-4),&#xA;      [&#39;&amp;lt;C-f&amp;gt;&#39;] = cmp.mapping.scroll_docs(4),&#xA;      [&#39;&amp;lt;C-Space&amp;gt;&#39;] = cmp.mapping.complete(),&#xA;      [&#39;&amp;lt;C-e&amp;gt;&#39;] = cmp.mapping.abort(),&#xA;      [&#39;&amp;lt;CR&amp;gt;&#39;] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.&#xA;    }),&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;nvim_lsp&#39; },&#xA;      { name = &#39;vsnip&#39; }, -- For vsnip users.&#xA;      -- { name = &#39;luasnip&#39; }, -- For luasnip users.&#xA;      -- { name = &#39;ultisnips&#39; }, -- For ultisnips users.&#xA;      -- { name = &#39;snippy&#39; }, -- For snippy users.&#xA;    }, {&#xA;      { name = &#39;buffer&#39; },&#xA;    })&#xA;  })&#xA;&#xA;  -- Set configuration for specific filetype.&#xA;  cmp.setup.filetype(&#39;gitcommit&#39;, {&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;cmp_git&#39; }, -- You can specify the `cmp_git` source if you were installed it.&#xA;    }, {&#xA;      { name = &#39;buffer&#39; },&#xA;    })&#xA;  })&#xA;&#xA;  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won&#39;t work anymore).&#xA;  cmp.setup.cmdline({ &#39;/&#39;, &#39;?&#39; }, {&#xA;    mapping = cmp.mapping.preset.cmdline(),&#xA;    sources = {&#xA;      { name = &#39;buffer&#39; }&#xA;    }&#xA;  })&#xA;&#xA;  -- Use cmdline &amp;amp; path source for &#39;:&#39; (if you enabled `native_menu`, this won&#39;t work anymore).&#xA;  cmp.setup.cmdline(&#39;:&#39;, {&#xA;    mapping = cmp.mapping.preset.cmdline(),&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;path&#39; }&#xA;    }, {&#xA;      { name = &#39;cmdline&#39; }&#xA;    })&#xA;  })&#xA;&#xA;  -- Set up lspconfig.&#xA;  local capabilities = require(&#39;cmp_nvim_lsp&#39;).default_capabilities()&#xA;  -- Replace &amp;lt;YOUR_LSP_SERVER&amp;gt; with each lsp server you&#39;ve enabled.&#xA;  require(&#39;lspconfig&#39;)[&#39;&amp;lt;YOUR_LSP_SERVER&amp;gt;&#39;].setup {&#xA;    capabilities = capabilities&#xA;  }&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Where can I find more completion sources?&lt;/h3&gt; &#xA;&lt;p&gt;Have a look at the &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki/List-of-sources&#34;&gt;Wiki&lt;/a&gt; and the &lt;code&gt;nvim-cmp&lt;/code&gt; &lt;a href=&#34;https://github.com/topics/nvim-cmp&#34;&gt;GitHub topic&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Where can I find advanced configuration examples?&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>