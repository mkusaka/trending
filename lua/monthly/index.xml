<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-01T01:47:41Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AstroNvim/astrocommunity</title>
    <updated>2025-05-01T01:47:41Z</updated>
    <id>tag:github.com,2025-05-01:/AstroNvim/astrocommunity</id>
    <link href="https://github.com/AstroNvim/astrocommunity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community repository of common plugin specifications&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; id=&#34;madewithlua&#34;&gt; &#xA; &lt;img src=&#34;https://astronvim.com/logo/astronvim.svg?sanitize=true&#34; width=&#34;110&#34; , height=&#34;100&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;AstroNvim Community Repository&lt;/h1&gt; &#xA;&lt;p&gt;AstroNvim&#39;s community repository contains plugin configuration specifications — a collection of plugins contributed by the community for AstroNvim, a NeoVim configuration. These specifications help manage the variety of plugins used in AstroNvim.&lt;/p&gt; &#xA;&lt;h2&gt;📦 Setup&lt;/h2&gt; &#xA;&lt;p&gt;To integrate the community plugins, add the provided configurations to your &lt;code&gt;plugins&lt;/code&gt; setup preferably before you import your own plugins to guarantee all AstroCommunity changes are loaded before your own overrides. If you are using the &lt;a href=&#34;https://github.com/AstroNvim/template&#34;&gt;AstroNvim Template&lt;/a&gt; This can be done in your &lt;code&gt;lua/community.lua&lt;/code&gt; file. If you&#39;re unfamiliar with configuring plugins, we recommend referring to the &lt;a href=&#34;https://docs.astronvim.com/configuration/customizing_plugins/&#34;&gt;AstroNvim documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Importing AstroCommunity Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Integrate the following content within your &lt;code&gt;lua/community.lua&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;AstroNvim/astrocommunity&#34;,&#xA;  { import = &#34;astrocommunity.colorscheme.catppuccin&#34; },&#xA;  -- ... import any community contributed plugins here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizing AstroCommunity Installations&lt;/h3&gt; &#xA;&lt;p&gt;Once you have AstroCommunity imports defined in your &lt;code&gt;lua/community.lua&lt;/code&gt; you can then further customize the installations in your own plugin definitions (typically done in the &lt;code&gt;lua/plugins/&lt;/code&gt; directory). Here is an example assuming you have Catppuccin installed as shown above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  { -- further customize the options set by the community&#xA;    &#34;catppuccin&#34;,&#xA;    opts = {&#xA;      integrations = {&#xA;        sandwich = false,&#xA;        noice = true,&#xA;        mini = true,&#xA;        leap = true,&#xA;        markdown = true,&#xA;        neotest = true,&#xA;        cmp = true,&#xA;        overseer = true,&#xA;        lsp_trouble = true,&#xA;        rainbow_delimiters = true,&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To disable imports, set the &lt;code&gt;enabled&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;. You have two approaches to modify an existing plugin: use the full repository name (e.g., &#34;m4xshen/smartcolumn.nvim&#34;) or the module name (e.g., &#34;catppuccin&#34;). Remember, the module name might differ from the folder name.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s recommended to use the full import path when customizing a plugin, and not the shorthand notation of just the repository name.&lt;/li&gt; &#xA; &lt;li&gt;You can override many aspects of community plugins including settings, dependencies, and versions. For more details on available options, refer to the &lt;a href=&#34;https://lazy.folke.io/&#34;&gt;lazy.nvim documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve written a plugin configuration and wish to add it with the AstroCommunity repository, please follow our &lt;a href=&#34;https://raw.githubusercontent.com/AstroNvim/astrocommunity/main/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; and submit a pull request. Ensure you&#39;ve rigorously tested your changes before submission. This isn&#39;t an official repository, so its stability relies on community contributions. We&#39;re excited to see how this project grows and evolves!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nvimtools/none-ls.nvim</title>
    <updated>2025-05-01T01:47:41Z</updated>
    <id>tag:github.com,2025-05-01:/nvimtools/none-ls.nvim</id>
    <link href="https://github.com/nvimtools/none-ls.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;null-ls.nvim reloaded / Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;none-ls.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;null-ls.nvim&lt;/code&gt; Reloaded, maintained by the community.&lt;/p&gt; &#xA;&lt;p&gt;Only the repo name is changed for compatibility concerns. All the API and future changes will keep in place as-is.&lt;/p&gt; &#xA;&lt;h2&gt;Migration&lt;/h2&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;jose-elias-alvarez/null-ls.nvim&lt;/code&gt; with &lt;code&gt;nvimtools/none-ls.nvim&lt;/code&gt; in your choice of package manager.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Open a pull request to become a collaborator. If you have contributed to &lt;code&gt;null-ls.nvim&lt;/code&gt; before, simply open an issue or comment on that commit.&lt;/p&gt; &#xA;&lt;p&gt;If you want to make changes, open a new pull request. Find another collaborator to review your changes, as a review is required for the PR to be merged by yourself (subject to change if there are more collaborators in the future).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;null-ls.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Neovim&#39;s LSP ecosystem is growing, and plugins like &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt; make it a joy to work with LSP features like code actions and diagnostics.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the VS Code and coc.nvim ecosystems, Neovim doesn&#39;t provide a way for non-LSP sources to hook into its LSP client. null-ls is an attempt to bridge that gap and simplify the process of creating, sharing, and setting up LSP sources using pure Lua.&lt;/p&gt; &#xA;&lt;p&gt;null-ls is also an attempt to reduce the boilerplate required to set up general-purpose language servers and improve performance by removing the need for external processes.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;null-ls is in &lt;strong&gt;beta status&lt;/strong&gt;. Please see below for steps to follow if something doesn&#39;t work the way you expect (or doesn&#39;t work at all).&lt;/p&gt; &#xA;&lt;p&gt;null-ls is developed on and tested against the latest stable version of Neovim. Support for versions built from &lt;code&gt;HEAD&lt;/code&gt; is provided on a best-effort basis, and users are encouraged to contribute fixes to any issues exclusive to these versions.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;null-ls sources are able to hook into the following LSP features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Code actions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Diagnostics (file- and project-level)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Formatting (including range formatting)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hover&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Completion&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;null-ls includes built-in sources for each of these features to provide out-of-the-box functionality. See &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTINS.md&#34;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTIN_CONFIG.md&#34;&gt;BUILTIN_CONFIG&lt;/a&gt; for instructions on how to set up and configure these sources.&lt;/p&gt; &#xA;&lt;p&gt;null-ls also provides helpers to streamline the process of spawning and transforming the output of command-line processes into an LSP-friendly format. If you want to create your own source, either for personal use or for a plugin, see &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/HELPERS.md&#34;&gt;HELPERS&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install null-ls using your favorite package manager. The plugin depends on &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;, which you are (probably) already using.&lt;/p&gt; &#xA;&lt;p&gt;To get started, you must set up null-ls and register at least one source. See &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTINS.md&#34;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/CONFIG.md&#34;&gt;CONFIG&lt;/a&gt; for information about setting up and configuring null-ls.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;&#xA;null_ls.setup({&#xA;    sources = {&#xA;        null_ls.builtins.formatting.stylua,&#xA;        null_ls.builtins.completion.spell,&#xA;        require(&#34;none-ls.diagnostics.eslint&#34;), -- requires none-ls-extras.nvim&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The definitive source for information about null-ls is its &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/MAIN.md&#34;&gt;documentation&lt;/a&gt;, which contains information about how null-ls works, how to set it up, and how to create sources.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to add new features and built-ins for any language are always welcome. See &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Parsing buffer content&lt;/h3&gt; &#xA;&lt;p&gt;The following example demonstrates a diagnostic source that will parse the current buffer&#39;s content and show instances of the word &lt;code&gt;really&lt;/code&gt; as LSP warnings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;&#xA;local no_really = {&#xA;    method = null_ls.methods.DIAGNOSTICS,&#xA;    filetypes = { &#34;markdown&#34;, &#34;text&#34; },&#xA;    generator = {&#xA;        fn = function(params)&#xA;            local diagnostics = {}&#xA;            -- sources have access to a params object&#xA;            -- containing info about the current file and editor state&#xA;            for i, line in ipairs(params.content) do&#xA;                local col, end_col = line:find(&#34;really&#34;)&#xA;                if col and end_col then&#xA;                    -- null-ls fills in undefined positions&#xA;                    -- and converts source diagnostics into the required format&#xA;                    table.insert(diagnostics, {&#xA;                        row = i,&#xA;                        col = col,&#xA;                        end_col = end_col + 1,&#xA;                        source = &#34;no-really&#34;,&#xA;                        message = &#34;Don&#39;t use &#39;really!&#39;&#34;,&#xA;                        severity = vim.diagnostic.severity.WARN,&#xA;                    })&#xA;                end&#xA;            end&#xA;            return diagnostics&#xA;        end,&#xA;    },&#xA;}&#xA;&#xA;null_ls.register(no_really)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parsing CLI program output&lt;/h3&gt; &#xA;&lt;p&gt;null-ls includes helpers to simplify the process of spawning and capturing the output of CLI programs. This example shows how to pass the content of the current buffer to &lt;code&gt;markdownlint&lt;/code&gt; via &lt;code&gt;stdin&lt;/code&gt; and convert its output (which it sends to &lt;code&gt;stderr&lt;/code&gt;) into LSP diagnostics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;local helpers = require(&#34;null-ls.helpers&#34;)&#xA;&#xA;local markdownlint = {&#xA;    method = null_ls.methods.DIAGNOSTICS,&#xA;    filetypes = { &#34;markdown&#34; },&#xA;    -- null_ls.generator creates an async source&#xA;    -- that spawns the command with the given arguments and options&#xA;    generator = null_ls.generator({&#xA;        command = &#34;markdownlint&#34;,&#xA;        args = { &#34;--stdin&#34; },&#xA;        to_stdin = true,&#xA;        from_stderr = true,&#xA;        -- choose an output format (raw, json, or line)&#xA;        format = &#34;line&#34;,&#xA;        check_exit_code = function(code, stderr)&#xA;            local success = code &amp;lt;= 1&#xA;&#xA;            if not success then&#xA;                -- can be noisy for things that run often (e.g. diagnostics), but can&#xA;                -- be useful for things that run on demand (e.g. formatting)&#xA;                print(stderr)&#xA;            end&#xA;&#xA;            return success&#xA;        end,&#xA;        -- use helpers to parse the output from string matchers,&#xA;        -- or parse it manually with a function&#xA;        on_output = helpers.diagnostics.from_patterns({&#xA;            {&#xA;                pattern = [[:(%d+):(%d+) [%w-/]+ (.*)]],&#xA;                groups = { &#34;row&#34;, &#34;col&#34;, &#34;message&#34; },&#xA;            },&#xA;            {&#xA;                pattern = [[:(%d+) [%w-/]+ (.*)]],&#xA;                groups = { &#34;row&#34;, &#34;message&#34; },&#xA;            },&#xA;        }),&#xA;    }),&#xA;}&#xA;&#xA;null_ls.register(markdownlint)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Something isn&#39;t working! What do I do?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you run into issues when using null-ls, please follow the steps below and &lt;strong&gt;do not&lt;/strong&gt; open an issue on the Neovim repository. null-ls is not an actual LSP server, so we need to determine whether issues are specific to this plugin before sending anything upstream.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure your configuration is in line with the latest version of this document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/#how-do-i-enable-debug-mode-and-get-debug-output&#34;&gt;Enable debug mode&lt;/a&gt; and check the output of your source(s). If the CLI program is not properly configured or is otherwise not running as expected, that&#39;s an issue with the program, not null-ls.&lt;/li&gt; &#xA; &lt;li&gt;Check the documentation for available configuration options that might solve your issue.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re having trouble configuring null-ls or want to know how to achieve a specific result, open a discussion.&lt;/li&gt; &#xA; &lt;li&gt;If you believe the issue is with null-ls itself or you want to request a new feature, open an issue and provide the information requested in the issue template.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;My &lt;code&gt;:checkhealth&lt;/code&gt; output is wrong! What do I do?&lt;/h3&gt; &#xA;&lt;p&gt;Checking whether a given command is executable is tricky, and null-ls&#39; health check doesn&#39;t handle all cases. null-ls&#39; internal command resolution is independent of its health check output, which is for informational purposes.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re not sure whether a given command is running as expected, &lt;a href=&#34;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/#how-do-i-enable-debug-mode-and-get-debug-output&#34;&gt;enable debug mode&lt;/a&gt; and check your log.&lt;/p&gt; &#xA;&lt;h3&gt;How do I format files?&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;vim.lsp.buf.format()&lt;/code&gt;. See &lt;code&gt;:help vim.lsp.buf.format()&lt;/code&gt; for usage instructions.&lt;/p&gt; &#xA;&lt;h3&gt;How do I format files on save?&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/nvimtools/none-ls.nvim/wiki/Formatting-on-save&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I stop Neovim from asking me which server I want to use for formatting?&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/nvimtools/none-ls.nvim/wiki/Avoiding-LSP-formatting-conflicts&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I view project-level diagnostics?&lt;/h3&gt; &#xA;&lt;p&gt;For a built-in solution, use &lt;code&gt;:lua vim.diagnostic.setqflist()&lt;/code&gt;. You can also use a plugin like &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I enable debug mode and get debug output?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;debug&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; in your config:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;null-ls&#34;).setup({&#xA;    debug = true,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;:NullLsLog&lt;/code&gt; to open your debug log in the current Neovim instance or &lt;code&gt;:NullLsInfo&lt;/code&gt; to get the path to your debug log.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As with LSP logging, debug mode will slow down Neovim. Make sure to disable the option after you&#39;ve collected the information you&#39;re looking for.&lt;/p&gt; &#xA;&lt;h3&gt;Does it work with (other plugin)?&lt;/h3&gt; &#xA;&lt;p&gt;In most cases, yes. null-ls tries to act like an actual LSP server as much as possible, so it should work seamlessly with most LSP-related plugins. If you run into problems, please try to determine which plugin is causing them and open an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvimtools/none-ls.nvim/wiki/Compatibility-with-other-plugins&#34;&gt;This wiki page&lt;/a&gt; mentions plugins that require specific configuration options / tweaks to work with null-ls.&lt;/p&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to hard work by @folke, the plugin wraps the mechanism Neovim uses to spawn language servers to start a client entirely in-memory. The client attaches to buffers that match defined sources and receives and responds to requests, document changes, and other events from Neovim.&lt;/p&gt; &#xA;&lt;h3&gt;Will it affect my performance?&lt;/h3&gt; &#xA;&lt;p&gt;More testing is necessary, but since null-ls uses pure Lua and runs entirely in memory without any external processes, in most cases it should run faster than similar solutions. If you notice that performance is worse with null-ls than with an alternative, please open an issue!&lt;/p&gt; &#xA;&lt;h3&gt;I am seeing a formatting &lt;code&gt;timeout&lt;/code&gt; error message&lt;/h3&gt; &#xA;&lt;p&gt;This issue occurs when a formatter takes longer than the default timeout value. This is an automatic mechanism and controlled by Neovim. You might want to increase the timeout in your call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.buf.format({ timeout_ms = 2000 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;The test suite includes unit and integration tests and depends on plenary.nvim. Run &lt;code&gt;make test&lt;/code&gt; in the root of the project to run the suite or &lt;code&gt;FILE=filename_spec.lua make test-file&lt;/code&gt; to test an individual file.&lt;/p&gt; &#xA;&lt;p&gt;To avoid a dependency on any plugin managers, the test suite will set up its plugin runtime under the &lt;code&gt;./tests&lt;/code&gt; directory to always have a plenary version available.&lt;/p&gt; &#xA;&lt;p&gt;If you run into plenary-related issues while running the tests, make sure you have an up-to-date version of the plugin by clearing that cache with: &lt;code&gt;make clean&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All tests expect to run on the latest release version of Neovim and are not guaranteed to work on versions built from &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt; and &lt;a href=&#34;https://github.com/iamcco/diagnostic-languageserver&#34;&gt;diagnostic-languageserver&lt;/a&gt;: general-purpose language servers that can provide formatting and diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;nvim-lint&lt;/a&gt;: a Lua plugin that focuses on providing diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mhartington/formatter.nvim&#34;&gt;formatter.nvim&lt;/a&gt;: a Lua plugin that (surprise) focuses on formatting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/lewis6991/hover.nvim&#34;&gt;hover.nvim&lt;/a&gt;: Hover plugin framework for Neovim.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mrcjkb/rustaceanvim</title>
    <updated>2025-05-01T01:47:41Z</updated>
    <id>tag:github.com,2025-05-01:/mrcjkb/rustaceanvim</id>
    <link href="https://github.com/mrcjkb/rustaceanvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦀 Supercharge your Rust experience in Neovim! A heavily modified fork of rust-tools.nvim&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/rustaceanvim.svg?sanitize=true&#34; alt=&#34;rustaceanvim&#34;&gt; &lt;/a&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/doc/rustaceanvim.txt&#34;&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/issues/new?assignees=&amp;amp;labels=bug&amp;amp;projects=&amp;amp;template=bug_report.yml&#34;&gt;Report Bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/discussions/new?category=ideas&#34;&gt;Request Feature&lt;/a&gt; · &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/discussions/new?category=q-a&#34;&gt;Ask Question&lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt; &lt;strong&gt; Supercharge your Rust experience in &lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt;!&lt;br&gt; A heavily modified fork of &lt;a href=&#34;https://github.com/simrat39/rust-tools.nvim&#34;&gt;rust-tools.nvim&lt;/a&gt;&lt;br&gt; &lt;/strong&gt; &lt;/p&gt; &#xA; &lt;p&gt;🦀&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/NeoVim-%2357A143.svg?&amp;amp;style=for-the-badge&amp;amp;logo=neovim&amp;amp;logoColor=white&#34; alt=&#34;Neovim&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.lua.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lua-%232C2D72.svg?style=for-the-badge&amp;amp;logo=lua&amp;amp;logoColor=white&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Rust-000000?style=for-the-badge&amp;amp;logo=rust&amp;amp;logoColor=white&#34; alt=&#34;Rust&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nixos.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/nix-0175C2?style=for-the-badge&amp;amp;logo=NixOS&amp;amp;logoColor=white&#34; alt=&#34;Nix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mrcjkb/rustaceanvim.svg?style=for-the-badge&#34; alt=&#34;GPL2 License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/mrcjkb/rustaceanvim.svg?style=for-the-badge&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/actions/workflows/nix-build.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/mrcjkb/rustaceanvim/nix-build.yml?style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://luarocks.org/modules/MrcJkb/rustaceanvim&#34;&gt;&lt;img src=&#34;https://img.shields.io/luarocks/v/MrcJkb/rustaceanvim?logo=lua&amp;amp;color=purple&amp;amp;style=for-the-badge&#34; alt=&#34;LuaRocks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Just works. &lt;a href=&#34;https://mrcjkb.dev/posts/2023-08-22-setup.html&#34;&gt;No need to call &lt;code&gt;setup&lt;/code&gt;!&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;No dependency on &lt;code&gt;lspconfig&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Lazy initialization by design.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔗&lt;/span&gt; Quick Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#pencil-prerequisites&#34;&gt;&lt;span&gt;📝&lt;/span&gt; Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#inbox_tray-installation&#34;&gt;&lt;span&gt;📥&lt;/span&gt; Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#zap-quick-setup&#34;&gt;&lt;span&gt;⚡&lt;/span&gt; Quick setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#books-usage--features&#34;&gt;&lt;span&gt;📚&lt;/span&gt; Usage / Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#gear-advanced-configuration&#34;&gt;&lt;span&gt;⚙&lt;/span&gt; Advanced configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#stethoscope-troubleshooting&#34;&gt;&lt;span&gt;🩺&lt;/span&gt; Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#left_speech_bubble-faq&#34;&gt;&lt;span&gt;🗨&lt;/span&gt; FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrcjkb/rustaceanvim/discussions/122&#34;&gt;&lt;span&gt;🚣&lt;/span&gt; Migrating from rust-tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;❔&lt;/span&gt; Do I need rustaceanvim&lt;/h2&gt; &#xA;&lt;p&gt;If you are starting out with Rust, Neovim&#39;s built-in LSP client API (see &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;&lt;code&gt;:h lsp&lt;/code&gt;&lt;/a&gt;) or &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;nvim-lspconfig.rust_analyzer&lt;/code&gt;&lt;/a&gt; is probably enough for you. It provides the lowest common denominator of LSP support. This plugin is for those who would like &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#books-usage--features&#34;&gt;additional non-standard features&lt;/a&gt; that are specific to rust-analyzer.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;📝&lt;/span&gt; Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Required&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;neovim &amp;gt;= 0.11&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rust-analyzer.github.io/&#34;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;For versions that are compatible with older Neovim versions, see previous major version bumps in &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/CHANGELOG.md&#34;&gt;the changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Optional&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://graphviz.org/doc/info/lang.html&#34;&gt;&lt;code&gt;dot&lt;/code&gt; from &lt;code&gt;graphviz&lt;/code&gt;&lt;/a&gt;, for crate graphs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/a&gt;, required for Cargo projects.&lt;/li&gt; &#xA; &lt;li&gt;A debug adapter (e.g. &lt;a href=&#34;https://lldb.llvm.org/&#34;&gt;&lt;code&gt;lldb&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/vadimcn/codelldb&#34;&gt;&lt;code&gt;codelldb&lt;/code&gt;&lt;/a&gt;) and &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;, required for debugging.&lt;/li&gt; &#xA; &lt;li&gt;A tree-sitter parser for Rust (required for the &lt;code&gt;:Rustc unpretty&lt;/code&gt; command). Can be installed using &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;, which also provides highlights, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;📥&lt;/span&gt; Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/nvim-neorocks/rocks.nvim&#34;&gt;&lt;code&gt;rocks.nvim&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Rocks install rustaceanvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;mrcjkb/rustaceanvim&#39;,&#xA;  version = &#39;^6&#39;, -- Recommended&#xA;  lazy = false, -- This plugin is already lazy&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;p&gt;It is suggested to pin to tagged releases if you would like to avoid breaking changes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To manually generate documentation, use &lt;code&gt;:helptags ALL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;p&gt;For Nix users with flakes enabled, this project provides outputs in the form of a package and an overlay. It is also available in &lt;code&gt;nixpkgs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Look at the configuration information below to get started.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚡&lt;/span&gt; Quick Setup&lt;/h2&gt; &#xA;&lt;p&gt;This plugin automatically configures the &lt;code&gt;rust-analyzer&lt;/code&gt; builtin LSP client and integrates with other Rust tools. See the &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#books-usage--features&#34;&gt;Usage / Features&lt;/a&gt; section for more info.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;Do not call the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;nvim-lspconfig.rust_analyzer&lt;/code&gt;&lt;/a&gt; setup or set up the LSP client for &lt;code&gt;rust-analyzer&lt;/code&gt; manually, as doing so may cause conflicts.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is a filetype plugin that works out of the box, so there is no need to call a &lt;code&gt;setup&lt;/code&gt; function or configure anything to get this plugin working.&lt;/p&gt; &#xA;&lt;p&gt;You will most likely want to add some keymaps. Most keymaps are only useful in rust files, so I suggest you define them in &lt;code&gt;~/.config/nvim/after/ftplugin/rust.lua&lt;/code&gt;[^1]&lt;/p&gt; &#xA;&lt;p&gt;[^1]: See &lt;a href=&#34;https://neovim.io/doc/user/starting.html#base-directories&#34;&gt;&lt;code&gt;:help base-directories&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local bufnr = vim.api.nvim_get_current_buf()&#xA;vim.keymap.set(&#xA;  &#34;n&#34;, &#xA;  &#34;&amp;lt;leader&amp;gt;a&#34;, &#xA;  function()&#xA;    vim.cmd.RustLsp(&#39;codeAction&#39;) -- supports rust-analyzer&#39;s grouping&#xA;    -- or vim.lsp.buf.codeAction() if you don&#39;t want grouping.&#xA;  end,&#xA;  { silent = true, buffer = bufnr }&#xA;)&#xA;vim.keymap.set(&#xA;  &#34;n&#34;, &#xA;  &#34;K&#34;,  -- Override Neovim&#39;s built-in hover keymap with rustaceanvim&#39;s hover actions&#xA;  function()&#xA;    vim.cmd.RustLsp({&#39;hover&#39;, &#39;actions&#39;})&#xA;  end,&#xA;  { silent = true, buffer = bufnr }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;For more LSP related keymaps, &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig#suggested-configuration&#34;&gt;see the &lt;code&gt;nvim-lspconfig&lt;/code&gt; suggestions&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;If you want to share keymaps with &lt;code&gt;nvim-lspconfig&lt;/code&gt;, you can also use the &lt;code&gt;vim.g.rustaceanvim.server.on_attach&lt;/code&gt; function, or an &lt;code&gt;LspAttach&lt;/code&gt; autocommand.&lt;/li&gt; &#xA;  &lt;li&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#gear-advanced-configuration&#34;&gt;Advanced configuration&lt;/a&gt; section or &lt;code&gt;:h rustaceanvim.config&lt;/code&gt; for more configuration options.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Do &lt;strong&gt;not&lt;/strong&gt; set &lt;code&gt;vim.g.rustaceanvim&lt;/code&gt; in &lt;code&gt;after/ftplugin/rust.lua&lt;/code&gt;, as the file is sourced after the plugin is initialized.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;span&gt;📚&lt;/span&gt; Usage / Features&lt;/h2&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Debugging&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;debuggables&lt;/code&gt; opens a prompt to select from available targets.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;debug&lt;/code&gt; searches for a target at the current cursor position.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp[!] debuggables {args[]}?&#xA;:RustLsp[!] debug {args[]}?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;debug&#39;)&#xA;vim.cmd.RustLsp(&#39;debuggables&#39;)&#xA;-- or, to run the previous debuggable:&#xA;vim.cmd.RustLsp { &#39;debuggables&#39;, bang = true }&#xA;-- or, to override the executable&#39;s args:&#xA;vim.cmd.RustLsp {&#39;debuggables&#39;, &#39;arg1&#39;, &#39;arg2&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will rerun the last debuggable.&lt;/p&gt; &#xA; &lt;p&gt;Requires:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt; (Please read the plugin&#39;s documentation).&lt;/li&gt; &#xA;  &lt;li&gt;A debug adapter (e.g. &lt;a href=&#34;https://lldb.llvm.org/resources/lldbdap&#34;&gt;&lt;code&gt;lldb-dap&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/vadimcn/codelldb&#34;&gt;&lt;code&gt;codelldb&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;By default, this plugin will silently attempt to autoload &lt;code&gt;nvim-dap&lt;/code&gt; configurations when the LSP client attaches. You can call them with &lt;code&gt;require(&#39;dap&#39;).continue()&lt;/code&gt; or &lt;code&gt;:DapContinue&lt;/code&gt; once they have been loaded. The feature can be disabled by setting &lt;code&gt;vim.g.rustaceanvim.dap.autoload_configurations = false&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;:RustLsp debuggables&lt;/code&gt; will only load debug configurations created by &lt;code&gt;rust-analyzer&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;require(&#39;dap&#39;).continue()&lt;/code&gt; will load all Rust debug configurations, including those specified in a &lt;code&gt;.vscode/launch.json&lt;/code&gt; (see &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/raw/9adbfdca13afbe646d09a8d7a86d5d031fb9c5a5/doc/dap.txt#L316&#34;&gt;&lt;code&gt;:h dap-launch.json&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;Note that rustaceanvim may only be able to load DAP configurations when rust-analyzer has finished initializing (which may be after the client attaches, in large projects). This means that the DAP configurations may not be loaded immediately upon startup.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/ce17d228-ae0a-416a-8159-fe095a85dcb7&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Runnables&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;runnables&lt;/code&gt; opens a prompt to select from available targets.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;run&lt;/code&gt; searches for a target at the current cursor position.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp[!] runnables {args[]}?&#xA;:RustLsp[!] run {args[]}?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;run&#39;) &#xA;vim.cmd.RustLsp(&#39;runnables&#39;)&#xA;-- or, to run the previous runnable:&#xA;vim.cmd.RustLsp { &#39;runnables&#39;, bang = true }&#xA;-- or, to override the executable&#39;s args:&#xA;vim.cmd.RustLsp {&#39;runnables&#39;, &#39;arg1&#39;, &#39;arg2&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will rerun the last runnable.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/95183192-5669-4a07-804b-83f67831be57&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Testables and failed test diagnostics&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;If you set the &lt;code&gt;vim.g.rustaceanvim.tools.test_executor&lt;/code&gt; option to &lt;code&gt;&#39;background&#39;&lt;/code&gt;, this plugin will run tests in the background, parse the results, and - if possible - display failed tests as diagnostics.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp[!] testables {args[]}?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;testables&#39;)&#xA;-- or, to run the previous testables:&#xA;vim.cmd.RustLsp { &#39;testables&#39;, bang = true }&#xA;-- or, to override the executable&#39;s args:&#xA;vim.cmd.RustLsp {&#39;testables&#39;, &#39;arg1&#39;, &#39;arg2&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will rerun the last testable.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/b3639b7a-105e-49de-9bdc-9c88e8e508a2&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Neotest integration&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;This plugin provides a &lt;a href=&#34;https://github.com/nvim-neotest/neotest&#34;&gt;neotest&lt;/a&gt; adapter, which you can add to neotest as follows:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neotest&#39;).setup {&#xA;    -- ...,&#xA;    adapters = {&#xA;      -- ...,&#xA;      require(&#39;rustaceanvim.neotest&#39;)&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note: If you use rustaceanvim&#39;s neotest adapter, do not add &lt;a href=&#34;https://github.com/rouge8/neotest-rust&#34;&gt;neotest-rust&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Here is a comparison between rustaceanvim&#39;s adapter and neotest-rust:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;rustaceanvim&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;neotest-rust&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Test discovery&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;rust-analyzer (LSP)&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;tree-sitter&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Command construction&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;rust-analyzer (LSP)&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;tree-sitter&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;DAP strategy&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Automatic DAP detection (reuses &lt;code&gt;debuggables&lt;/code&gt;); overridable with &lt;code&gt;vim.g.rustaceanvim.dap&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Defaults to &lt;code&gt;codelldb&lt;/code&gt;; manual configuration&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Test runner&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cargo&lt;/code&gt; or &lt;code&gt;cargo-nextest&lt;/code&gt;, if detected&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;code&gt;cargo-nextest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;If you configure rustaceanvim to use neotest, the &lt;code&gt;tools.test_executor&lt;/code&gt; will default to using neotest for &lt;code&gt;testables&lt;/code&gt; and &lt;code&gt;runnables&lt;/code&gt; that are tests.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/b734fdb6-3c8a-492b-9b39-bb238d7cd7b1&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Expand macros recursively&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp expandMacro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;expandMacro&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/477d9e58-74b0-42ff-87ca-2fef34d06db3&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Rebuild proc macros&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp rebuildProcMacros&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;rebuildProcMacros&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Move item up/down&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp moveItem {up|down}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;moveItem&#39;,  &#39;up&#39; }&#xA;vim.cmd.RustLsp { &#39;moveItem&#39;,  &#39;down&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Grouped code actions&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Sometimes, rust-analyzer groups code actions by category, which is not supported by Neovim&#39;s built-in &lt;code&gt;vim.lsp.buf.codeAction&lt;/code&gt;. This plugin provides a command with a UI that does:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp codeAction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;codeAction&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you set the option &lt;code&gt;vim.g.rustaceanvim.tools.code_actions.ui_select_fallback&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; (defaults to &lt;code&gt;false&lt;/code&gt;), it will fall back to &lt;code&gt;vim.ui.select&lt;/code&gt; if there are no grouped code actions.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/866d3cb1-8e56-4380-8c03-812386441f47&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Hover actions&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Note: To activate hover actions, run the command twice. This will move you into the window, then press enter on the selection you want. Alternatively, you can set &lt;code&gt;auto_focus&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your config and you will automatically enter the hover actions window.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp hover actions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;hover&#39;, &#39;actions&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can invoke a hover action by switching to the hover window and entering &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; on the respective line, or with a keymap for the &lt;code&gt;&amp;lt;Plug&amp;gt;RustHoverAction&lt;/code&gt; mapping, which accepts a &lt;code&gt;&amp;lt;count&amp;gt;&lt;/code&gt; prefix as the (1-based) index of the hover action to invoke.&lt;/p&gt; &#xA; &lt;p&gt;For example, if you set the following keymap:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;a&#39;, &#39;&amp;lt;Plug&amp;gt;RustHoverAction&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;you can invoke the third hover action with &lt;code&gt;3&amp;lt;space&amp;gt;a&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/c7b6c730-4439-47b0-9a75-7ea4e6831f7a&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Hover range&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp hover range&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;hover&#39;, &#39;range&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Explain errors&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Display a hover window with explanations from the &lt;a href=&#34;https://doc.rust-lang.org/error_codes/error-index.html&#34;&gt;rust error codes index&lt;/a&gt; over error diagnostics (if they have an error code).&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp explainError {cycle?|current?}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;explainError&#39;) -- default to &#39;cycle&#39;&#xA;vim.cmd.RustLsp({ &#39;explainError&#39;, &#39;cycle&#39; })&#xA;vim.cmd.RustLsp({ &#39;explainError&#39;, &#39;current&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;cycle&lt;/code&gt; or no args: Like &lt;code&gt;vim.diagnostic.goto_next&lt;/code&gt;, &lt;code&gt;explainError&lt;/code&gt; will cycle diagnostics, starting at the cursor position, until it can find a diagnostic with an error code.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;current&lt;/code&gt;: Searches for diagnostics only in the current cursor line.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/bac9b31c-22ca-40c4-bfd3-b8c5ba4cc49a&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Render diagnostics&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Display a hover window with the rendered diagnostic, as displayed during &lt;code&gt;cargo build&lt;/code&gt;. Useful for solving bugs around borrowing and generics, as it consolidates the important bits (sometimes across files) together.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp renderDiagnostic {cycle?|current?}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;renderDiagnostic&#39;) -- defaults to &#39;cycle&#39;&#xA;vim.cmd.RustLsp({ &#39;renderDiagnostic&#39;, &#39;cycle&#39; })&#xA;vim.cmd.RustLsp({ &#39;renderDiagnostic&#39;, &#39;current&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;cycle&lt;/code&gt; or no args: Like &lt;code&gt;vim.diagnostic.goto_next&lt;/code&gt;, &lt;code&gt;renderDiagnostic&lt;/code&gt; will cycle diagnostics, starting at the cursor position, until it can find a diagnostic with rendered data.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;current&lt;/code&gt;: Searches for diagnostics only in the current cursor line.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/a972c6b6-c504-4c2a-8380-53451bb8c2de&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Jump to related diagnostics&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Sometimes, rust-analyzer provides related diagnostics in multiple locations. Using the &lt;code&gt;relatedDiagnostics&lt;/code&gt; subcommand, you can navigate between them. If a diagnostic has more than one related diagnostic, this will populate the quickfix list.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp relatedDiagnostics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;relatedDiagnostics&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/26695f41-2d9d-4250-82fa-fea867fd9432&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Open Cargo.toml&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp openCargo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;openCargo&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Open docs.rs documentation&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Open docs.rs documentation for the symbol under the cursor.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp openDocs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;openDocs&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Parent Module&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp parentModule&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;parentModule&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Filtered workspace symbol searches&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;rust-analyzer supports filtering workspace symbol searches.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp[!] workspaceSymbol {onlyTypes?|allSymbols?} {query?}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;workspaceSymbol&#39;)&#xA;-- or&#xA;vim.cmd.RustLsp { &#xA;  &#39;workspaceSymbol&#39;, &#xA;  &#39;&amp;lt;onlyTypes|allSymbols&amp;gt;&#39; --[[ optional ]], &#xA;  &#39;&amp;lt;query&amp;gt;&#39; --[[ optional ]], &#xA;  bang = true --[[ optional ]]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will include dependencies in the search.&lt;/li&gt; &#xA;  &lt;li&gt;You can also influence the behaviour of &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.workspace_symbol()&#34;&gt;&lt;code&gt;vim.lsp.buf.workspace_symbol()&lt;/code&gt;&lt;/a&gt; by setting the rust-analyzer &lt;code&gt;workspace.symbol.search&lt;/code&gt; server option.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Join lines&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Join selected lines into one, smartly fixing up whitespace, trailing commas, and braces. Works with individual lines in normal mode and multiple lines in visual mode.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp joinLines&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;joinLines&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1711539/124515923-4504e800-dde9-11eb-8d58-d97945a1a785.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Structural search replace&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Searches the entire buffer in normal mode.&lt;/li&gt; &#xA;  &lt;li&gt;Searches the selection in visual mode.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp ssr {query}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;ssr&#39;, &#39;&amp;lt;query&amp;gt;&#39; --[[ optional ]] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/b61fbc56-ab53-48e6-bfdd-eb8d4de28795&#34; alt=&#34;tty&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;View crate graph&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp crateGraph {backend {output}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;crateGraph&#39;, &#39;[backend]&#39;, &#39;[output]&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Requires:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://graphviz.org/doc/info/lang.html&#34;&gt;&lt;code&gt;dot&lt;/code&gt; from &lt;code&gt;graphviz&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;View syntax tree&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Requires rust-analyzer &amp;gt;= 2025-01-20.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp syntaxTree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;syntaxTree&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/mrcjkb/rustaceanvim/assets/12857160/c865a263-1568-41c7-a32b-bc4a34b198dc&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Fly check&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Run &lt;code&gt;cargo check&lt;/code&gt; or another compatible command (f.x. &lt;code&gt;clippy&lt;/code&gt;) in a background thread and provide LSP diagnostics based on the output of the command.&lt;/p&gt; &#xA; &lt;p&gt;Useful in large projects where running &lt;code&gt;cargo check&lt;/code&gt; on each save can be costly.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp flyCheck {run?|clear?|cancel?}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp(&#39;flyCheck&#39;) -- defaults to &#39;run&#39;&#xA;vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;run&#39; }&#xA;vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;clear&#39; }&#xA;vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;cancel&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA;  &lt;p&gt;This is only useful if you set the option, &lt;code&gt;[&#39;rust-analzyer&#39;].checkOnSave = false&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;View HIR / MIR&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Opens a buffer with a textual representation of the HIR or MIR of the function containing the cursor. Useful for debugging or when working on rust-analyzer itself.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustLsp view {hir|mir}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustLsp { &#39;view&#39;, &#39;hir&#39; }&#xA;vim.cmd.RustLsp { &#39;view&#39;, &#39;mir&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Rustc unpretty&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Opens a buffer with a textual representation of the MIR or others things, of the function closest to the cursor. Achieves an experience similar to Rust Playground.&lt;/p&gt; &#xA; &lt;p&gt;NOTE: This currently requires a tree-sitter parser for Rust, and a nightly compiler toolchain.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Rustc unpretty {hir|mir|...}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.Rustc { &#39;unpretty&#39;, &#39;hir&#39; }&#xA;vim.cmd.Rustc { &#39;unpretty&#39;, &#39;mir&#39; }&#xA;-- ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Requires:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;A tree-sitter parser for Rust (required for the &lt;code&gt;:Rustc unpretty&lt;/code&gt; command). Can be installed using &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;ra-multiplex&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;On Linux and MacOS, rustaceanvim can auto-detect and connect to a running &lt;a href=&#34;https://github.com/pr2502/ra-multiplex&#34;&gt;ra-multiplex&lt;/a&gt; server. By default, it will try to do so automatically if the &lt;code&gt;vim.g.rustaceanvim.server.cmd&lt;/code&gt; option is unset. See also &lt;code&gt;:h rustaceanvim.ra_multiplex&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Configure rust-analyzer on the fly&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;You can configure rust-analyzer on the fly using the &lt;code&gt;:RustAnalyzer config&lt;/code&gt; subcommand. The command takes a Lua table as an argument (it does not validate it!).&lt;/p&gt; &#xA; &lt;p&gt;For example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RustAnalyzer config { checkOnSave = false }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd.RustAnalyzer { &#39;config&#39;, &#39;{ checkOnSave = false }&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See also: &lt;a href=&#34;https://rust-analyzer.github.io/book/configuration&#34;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚙&lt;/span&gt; Advanced configuration&lt;/h2&gt; &#xA;&lt;p&gt;To modify the default configuration, set &lt;code&gt;vim.g.rustaceanvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/doc/rustaceanvim.txt&#34;&gt;&lt;code&gt;:h rustaceanvim&lt;/code&gt;&lt;/a&gt; for a detailed documentation of all available configuration options. You may need to run &lt;code&gt;:helptags ALL&lt;/code&gt; if the documentation has not been installed.&lt;/li&gt; &#xA; &lt;li&gt;The default configuration &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/lua/rustaceanvim/config/internal.lua&#34;&gt;can be found here (see &lt;code&gt;RustaceanDefaultConfig&lt;/code&gt;)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For detailed descriptions of the language server configs, see the &lt;a href=&#34;https://rust-analyzer.github.io/book/configuration&#34;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You only need to specify the keys that you want to be changed, because defaults are applied for keys that are not provided.&lt;/p&gt; &#xA;&lt;p&gt;Example config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.rustaceanvim = {&#xA;  -- Plugin configuration&#xA;  tools = {&#xA;  },&#xA;  -- LSP configuration&#xA;  server = {&#xA;    on_attach = function(client, bufnr)&#xA;      -- you can also put keymaps in here&#xA;    end,&#xA;    default_settings = {&#xA;      -- rust-analyzer language server configuration&#xA;      [&#39;rust-analyzer&#39;] = {&#xA;      },&#xA;    },&#xA;  },&#xA;  -- DAP configuration&#xA;  dap = {&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;vim.g.rustaceanvim&lt;/code&gt; can also be a function that returns a table.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;You can also use &lt;code&gt;:h vim.lsp.config&lt;/code&gt; to configure &lt;code&gt;vim.g.rustaceanvim.server&lt;/code&gt; options. For example, &lt;code&gt;vim.lsp.config(&#34;*&#34;, {})&lt;/code&gt; or &lt;code&gt;vim.lsp.config(&#34;rust-analyzer&#34;, {})&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;codelldb&lt;/code&gt; for debugging&lt;/h3&gt; &#xA;&lt;p&gt;For Rust, &lt;code&gt;codelldb&lt;/code&gt; from the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb&#34;&gt;CodeLLDB VSCode extension&lt;/a&gt; provides a better experience than &lt;code&gt;lldb&lt;/code&gt;. If you are using a distribution that lets you install the &lt;code&gt;codelldb&lt;/code&gt; executable, this plugin will automatically detect it and configure itself to use it as a debug adapter.&lt;/p&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NixOS: &lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/nixos-unstable/pkgs/applications/editors/vscode/extensions/vadimcn.vscode-lldb/default.nix#L134&#34;&gt;&lt;code&gt;vscode-extensions.vadimcn.vscode-lldb.adapter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;This repository&#39;s Nix flake provides a &lt;code&gt;codelldb&lt;/code&gt; package.&lt;/li&gt; &#xA; &lt;li&gt;Arch Linux: &lt;a href=&#34;https://aur.archlinux.org/packages/codelldb-bin&#34;&gt;&lt;code&gt;codelldb-bin&lt;/code&gt; (AUR)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;:MasonInstall codelldb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your distribution does not have a &lt;code&gt;codelldb&lt;/code&gt; package, you can configure it as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb&#34;&gt;CodeLLDB VSCode extension&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Find out where it is installed. On Linux, this is typically in &lt;code&gt;$HOME/.vscode/extensions/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update your configuration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.rustaceanvim = function()&#xA;  -- Update this path&#xA;  local extension_path = vim.env.HOME .. &#39;/.vscode/extensions/vadimcn.vscode-lldb-1.10.0/&#39;&#xA;  local codelldb_path = extension_path .. &#39;adapter/codelldb&#39;&#xA;  local liblldb_path = extension_path .. &#39;lldb/lib/liblldb&#39;&#xA;  local this_os = vim.uv.os_uname().sysname;&#xA;&#xA;  -- The path is different on Windows&#xA;  if this_os:find &#34;Windows&#34; then&#xA;    codelldb_path = extension_path .. &#34;adapter\\codelldb.exe&#34;&#xA;    liblldb_path = extension_path .. &#34;lldb\\bin\\liblldb.dll&#34;&#xA;  else&#xA;    -- The liblldb extension is .so for Linux and .dylib for MacOS&#xA;    liblldb_path = liblldb_path .. (this_os == &#34;Linux&#34; and &#34;.so&#34; or &#34;.dylib&#34;)&#xA;  end&#xA;&#xA;  local cfg = require(&#39;rustaceanvim.config&#39;)&#xA;  return {&#xA;    dap = {&#xA;      adapter = cfg.get_codelldb_adapter(codelldb_path, liblldb_path),&#xA;    },&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to dynamically load different &lt;code&gt;rust-analyzer&lt;/code&gt; settings per project&lt;/h3&gt; &#xA;&lt;p&gt;By default, this plugin will look for a &lt;code&gt;.vscode/settings.json&lt;/code&gt;[^2] file and attempt to load it. If the file does not exist, or it can&#39;t be decoded, the &lt;code&gt;server.default_settings&lt;/code&gt; will be used.&lt;/p&gt; &#xA;&lt;p&gt;[^2]: See &lt;a href=&#34;https://github.com/rust-analyzer/rust-project.json-example/raw/master/.vscode/settings.json&#34;&gt;this example&lt;/a&gt; and the rust-analyzer &lt;a href=&#34;https://rust-analyzer.github.io/book/configuration&#34;&gt;configuration manual&lt;/a&gt;. Note that JSON5 is currently not supported by Neovim.&lt;/p&gt; &#xA;&lt;p&gt;Another option is to use &lt;code&gt;:h exrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🩺&lt;/span&gt; Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Health checks&lt;/h3&gt; &#xA;&lt;p&gt;For a health check, run &lt;code&gt;:checkhealth rustaceanvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; log file&lt;/h3&gt; &#xA;&lt;p&gt;To open the &lt;code&gt;rust-analyzer&lt;/code&gt; log file, run &lt;code&gt;:RustLsp logFile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Minimal config&lt;/h3&gt; &#xA;&lt;p&gt;To troubleshoot this plugin with a minimal config in a temporary directory, you can try &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/troubleshooting/minimal.lua&#34;&gt;minimal.lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nvim -u minimal.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;If you use Nix, you can run &lt;code&gt;nix run &#34;github:mrcjkb/rustaceanvim#nvim-minimal-stable&#34;&lt;/code&gt;. or &lt;code&gt;nix run &#34;github:mrcjkb/rustaceanvim#nvim-minimal-nightly&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you cannot reproduce your issue with a minimal config, it may be caused by another plugin, or a setting of your plugin manager. In this case, add additional plugins and configurations to &lt;code&gt;minimal.lua&lt;/code&gt;, until you can reproduce it.&lt;/p&gt; &#xA;&lt;h3&gt;rust-analyzer troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;For issues related to rust-analyzer (e.g. LSP features not working), see also &lt;a href=&#34;https://rust-analyzer.github.io/book/troubleshooting.html&#34;&gt;the rust-analyzer troubleshooting guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;🗨&lt;/span&gt; FAQ&lt;/h3&gt; &#xA;&lt;h4&gt;Where are inlay hints / type hints?&lt;/h4&gt; &#xA;&lt;p&gt;As Neovim &amp;gt;= 0.10 supports inlay hints natively, I have removed the code from this plugin. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#lsp-inlay_hint&#34;&gt;&lt;code&gt;:h lsp-inlay_hint&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Can I display inlay hints to the end of the line?&lt;/h4&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://github.com/chrisgrieser/nvim-lsp-endhints&#34;&gt;&lt;code&gt;nvim-lsp-endhints&lt;/code&gt;&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;h4&gt;How to enable auto completion?&lt;/h4&gt; &#xA;&lt;p&gt;As of &lt;a href=&#34;https://github.com/neovim/neovim/pull/27339&#34;&gt;#ff097f2091e7a970e5b12960683b4dade5563040&lt;/a&gt;, Neovim has built-in completion based on the &lt;code&gt;triggerCharacters&lt;/code&gt; sent by language servers. Omni completion is also available for a more traditional &lt;code&gt;vim&lt;/code&gt;-like completion experience.&lt;/p&gt; &#xA;&lt;p&gt;For more extensible and complex autocompletion setups, you need a plugin such as &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;&lt;code&gt;nvim-cmp&lt;/code&gt;&lt;/a&gt; and a LSP completion source like &lt;a href=&#34;https://github.com/hrsh7th/cmp-nvim-lsp&#34;&gt;&lt;code&gt;cmp-nvim-lsp&lt;/code&gt;&lt;/a&gt;, or you may use &lt;a href=&#34;https://github.com/saghen/blink.cmp&#34;&gt;&lt;code&gt;blink.cmp&lt;/code&gt;&lt;/a&gt;. This plugin will automatically register the necessary client capabilities if you have either &lt;code&gt;cmp-nvim-lsp&lt;/code&gt; or &lt;code&gt;blink.cmp&lt;/code&gt; installed.&lt;/p&gt; &#xA;&lt;h4&gt;I&#39;m having issues with (auto)completion&lt;/h4&gt; &#xA;&lt;p&gt;rustaceanvim doesn&#39;t implement (auto)completion. Issues with (auto)completion either come from another plugin or rust-analzyer.&lt;/p&gt; &#xA;&lt;h4&gt;mason.nvim and nvim-lspconfig&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/doc/mason.txt&#34;&gt;&lt;code&gt;:h rustaceanvim.mason&lt;/code&gt;&lt;/a&gt; for details about troubleshooting mason.nvim and nvim-lspconfig issues, or configuring rustaceanvim to use a rust-analyzer installation that is managed by mason.nvim.&lt;/p&gt; &#xA;&lt;h4&gt;I am not seeing diagnostics in a standalone file&lt;/h4&gt; &#xA;&lt;p&gt;rust-analyzer has limited support for standalone files. Many diagnostics come from Cargo. If you&#39;re not in a Cargo project, you won&#39;t see any Cargo diagnostics.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔗&lt;/span&gt; Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rouge8/neotest-rust&#34;&gt;&lt;code&gt;rouge8/neotest-rust&lt;/code&gt;&lt;/a&gt; A &lt;a href=&#34;https://github.com/nvim-neotest/neotest&#34;&gt;&lt;code&gt;neotest&lt;/code&gt;&lt;/a&gt; adapter for Rust, using &lt;a href=&#34;https://nexte.st/&#34;&gt;&lt;code&gt;cargo-nextest&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Saecki/crates.nvim&#34;&gt;&lt;code&gt;Saecki/crates.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vxpm/ferris.nvim&#34;&gt;&lt;code&gt;vxpm/ferris.nvim&lt;/code&gt;&lt;/a&gt; Geared towards people who prefer manual LSP client configuration. Has some features that have not yet been implemented by this plugin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adaszko/tree_climber_rust.nvim&#34;&gt;&lt;code&gt;adaszko/tree_climber_rust.nvim&lt;/code&gt;&lt;/a&gt; tree-sitter powered incremental selection tailored for Rust.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-tools.nvim&lt;/code&gt; draws inspiration from &lt;a href=&#34;https://github.com/akinsho/flutter-tools.nvim&#34;&gt;&lt;code&gt;akinsho/flutter-tools.nvim&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;</summary>
  </entry>
</feed>