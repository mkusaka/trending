<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-31T02:44:08Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ChristianChiarulli/nvim</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/ChristianChiarulli/nvim</id>
    <link href="https://github.com/ChristianChiarulli/nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My neovim config&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neovim from scratch&lt;/h1&gt; &#xA;&lt;h2&gt;Try out this config&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to remove or move your current &lt;code&gt;nvim&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:ChristianChiarulli/nvim.git ~/.config/nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;nvim&lt;/code&gt; and wait for the plugins to be installed&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; (You will notice treesitter pulling in a bunch of parsers the next time you open Neovim)&lt;/p&gt; &#xA;&lt;p&gt;each video will be associated with a branch so checkout the one you are interested in&lt;/p&gt; &#xA;&lt;h2&gt;Get healthy&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;code&gt;nvim&lt;/code&gt; and enter the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:checkhealth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll probably notice you don&#39;t have support for copy/paste also that python and node haven&#39;t been setup&lt;/p&gt; &#xA;&lt;p&gt;So let&#39;s fix that&lt;/p&gt; &#xA;&lt;p&gt;First we&#39;ll fix copy/paste&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On mac &lt;code&gt;pbcopy&lt;/code&gt; should be builtin&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Ubuntu&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt install xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Arch Linux&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo pacman -S xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next we need to install python support (node is optional)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim python support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip install pynvim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim node support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm i -g neovim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fonts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;A nerd font&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-codicons/raw/main/dist/codicon.ttf&#34;&gt;codicon&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf&#34;&gt;An emoji font&lt;/a&gt; After moving fonts to &lt;code&gt;~/.local/share/fonts/&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run: &lt;code&gt;$ fc-cache -f -v&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Java Debugging and Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:microsoft/java-debug.git&#xA;cd java-debug/&#xA;./mvnw clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:microsoft/vscode-java-test.git&#xA;cd vscode-java-test&#xA;npm install&#xA;npm run build-plugin&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jose-elias-alvarez/null-ls.nvim</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/jose-elias-alvarez/null-ls.nvim</id>
    <link href="https://github.com/jose-elias-alvarez/null-ls.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;null-ls.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Neovim&#39;s LSP ecosystem is growing, and plugins like &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt; make it a joy to work with LSP features like code actions and diagnostics.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the VS Code and coc.nvim ecosystems, Neovim doesn&#39;t provide a way for non-LSP sources to hook into its LSP client. null-ls is an attempt to bridge that gap and simplify the process of creating, sharing, and setting up LSP sources using pure Lua.&lt;/p&gt; &#xA;&lt;p&gt;null-ls is also an attempt to reduce the boilerplate required to set up general-purpose language servers and improve performance by removing the need for external processes.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;null-ls is in &lt;strong&gt;beta status&lt;/strong&gt;. Please see below for steps to follow if something doesn&#39;t work the way you expect (or doesn&#39;t work at all).&lt;/p&gt; &#xA;&lt;p&gt;At the moment, null-is is compatible with Neovim 0.7 (stable) and 0.8 (head), but some features and performance improvements are exclusive to the latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;null-ls sources are able to hook into the following LSP features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Code actions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Diagnostics (file- and project-level)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Formatting (including range formatting)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hover&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Completion&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;null-ls includes built-in sources for each of these features to provide out-of-the-box functionality. See &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/BUILTINS.md&#34;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/BUILTIN_CONFIG.md&#34;&gt;BUILTIN_CONFIG&lt;/a&gt; for instructions on how to set up and configure these sources.&lt;/p&gt; &#xA;&lt;p&gt;null-ls also provides helpers to streamline the process of spawning and transforming the output of command-line processes into an LSP-friendly format. If you want to create your own source, either for personal use or for a plugin, see &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/HELPERS.md&#34;&gt;HELPERS&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install null-ls using your favorite package manager. The plugin depends on &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;, which you are (probably) already using.&lt;/p&gt; &#xA;&lt;p&gt;To get started, you must set up null-ls and register at least one source. See &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/BUILTINS.md&#34;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/CONFIG.md&#34;&gt;CONFIG&lt;/a&gt; for information about setting up and configuring null-ls.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;null-ls&#34;).setup({&#xA;    sources = {&#xA;        require(&#34;null-ls&#34;).builtins.formatting.stylua,&#xA;        require(&#34;null-ls&#34;).builtins.diagnostics.eslint,&#xA;        require(&#34;null-ls&#34;).builtins.completion.spell,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The definitive source for information about null-ls is its &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/MAIN.md&#34;&gt;documentation&lt;/a&gt;, which contains information about how null-ls works, how to set it up, and how to create sources.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to add new features and built-ins for any language are always welcome. See &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Parsing buffer content&lt;/h3&gt; &#xA;&lt;p&gt;The following example demonstrates a diagnostic source that will parse the current buffer&#39;s content and show instances of the word &lt;code&gt;really&lt;/code&gt; as LSP warnings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;local api = vim.api&#xA;&#xA;local no_really = {&#xA;    method = null_ls.methods.DIAGNOSTICS,&#xA;    filetypes = { &#34;markdown&#34;, &#34;text&#34; },&#xA;    generator = {&#xA;        fn = function(params)&#xA;            local diagnostics = {}&#xA;            -- sources have access to a params object&#xA;            -- containing info about the current file and editor state&#xA;            for i, line in ipairs(params.content) do&#xA;                local col, end_col = line:find(&#34;really&#34;)&#xA;                if col and end_col then&#xA;                    -- null-ls fills in undefined positions&#xA;                    -- and converts source diagnostics into the required format&#xA;                    table.insert(diagnostics, {&#xA;                        row = i,&#xA;                        col = col,&#xA;                        end_col = end_col,&#xA;                        source = &#34;no-really&#34;,&#xA;                        message = &#34;Don&#39;t use &#39;really!&#39;&#34;,&#xA;                        severity = 2,&#xA;                    })&#xA;                end&#xA;            end&#xA;            return diagnostics&#xA;        end,&#xA;    },&#xA;}&#xA;&#xA;null_ls.register(no_really)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parsing CLI program output&lt;/h3&gt; &#xA;&lt;p&gt;null-ls includes helpers to simplify the process of spawning and capturing the output of CLI programs. This example shows how to pass the content of the current buffer to &lt;code&gt;markdownlint&lt;/code&gt; via &lt;code&gt;stdin&lt;/code&gt; and convert its output (which it sends to &lt;code&gt;stderr&lt;/code&gt;) into LSP diagnostics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;local helpers = require(&#34;null-ls.helpers&#34;)&#xA;&#xA;local markdownlint = {&#xA;    method = null_ls.methods.DIAGNOSTICS,&#xA;    filetypes = { &#34;markdown&#34; },&#xA;    -- null_ls.generator creates an async source&#xA;    -- that spawns the command with the given arguments and options&#xA;    generator = null_ls.generator({&#xA;        command = &#34;markdownlint&#34;,&#xA;        args = { &#34;--stdin&#34; },&#xA;        to_stdin = true,&#xA;        from_stderr = true,&#xA;        -- choose an output format (raw, json, or line)&#xA;        format = &#34;line&#34;,&#xA;        check_exit_code = function(code, stderr)&#xA;            local success = code &amp;lt;= 1&#xA;&#xA;            if not success then&#xA;              -- can be noisy for things that run often (e.g. diagnostics), but can&#xA;              -- be useful for things that run on demand (e.g. formatting)&#xA;              print(stderr)&#xA;            end&#xA;&#xA;            return success&#xA;        end,&#xA;        -- use helpers to parse the output from string matchers,&#xA;        -- or parse it manually with a function&#xA;        on_output = helpers.diagnostics.from_patterns({&#xA;            {&#xA;                pattern = [[:(%d+):(%d+) [%w-/]+ (.*)]],&#xA;                groups = { &#34;row&#34;, &#34;col&#34;, &#34;message&#34; },&#xA;            },&#xA;            {&#xA;                pattern = [[:(%d+) [%w-/]+ (.*)]],&#xA;                groups = { &#34;row&#34;, &#34;message&#34; },&#xA;            },&#xA;        }),&#xA;    }),&#xA;}&#xA;&#xA;null_ls.register(markdownlint)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Something isn&#39;t working! What do I do?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you run into issues when using null-ls, please follow the steps below and &lt;strong&gt;do not&lt;/strong&gt; open an issue on the Neovim repository. null-ls is not an actual LSP server, so we need to determine whether issues are specific to this plugin before sending anything upstream.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure your configuration is in line with the latest version of this document.&lt;/li&gt; &#xA; &lt;li&gt;Enable debug mode (see below) and check the output of your source(s). If the CLI program is not properly configured or is otherwise not running as expected, that&#39;s an issue with the program, not null-ls.&lt;/li&gt; &#xA; &lt;li&gt;Check the documentation for available configuration options that might solve your issue.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re having trouble configuring null-ls or want to know how to achieve a specific result, open a discussion.&lt;/li&gt; &#xA; &lt;li&gt;If you believe the issue is with null-ls itself or you want to request a new feature, open an issue and provide the information requested in the issue template.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How do I format files?&lt;/h3&gt; &#xA;&lt;p&gt;null-ls formatters run when you call &lt;code&gt;vim.lsp.buf.formatting()&lt;/code&gt; or &lt;code&gt;vim.lsp.buf.formatting_sync()&lt;/code&gt;. If a source supports it, you can run range formatting by visually selecting part of the buffer and calling &lt;code&gt;vim.lsp.buf.range_formatting()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On 0.8, you should use &lt;code&gt;vim.lsp.buf.format&lt;/code&gt; (see the help file for usage instructions).&lt;/p&gt; &#xA;&lt;h3&gt;How do I format files on save?&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Formatting-on-save&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I stop Neovim from asking me which server I want to use for formatting?&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Avoiding-LSP-formatting-conflicts&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I view project-level diagnostics?&lt;/h3&gt; &#xA;&lt;p&gt;For a built-in solution, use &lt;code&gt;:lua vim.diagnostic.setqflist()&lt;/code&gt;. You can also use a plugin like &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I enable debug mode and get debug output?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;debug&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; in your config:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;null-ls&#34;).setup({&#xA;    debug = true&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;:NullLsLog&lt;/code&gt; to open your debug log in the current Neovim instance or &lt;code&gt;:NullLsInfo&lt;/code&gt; to get the path to your debug log.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As with LSP logging, debug mode will slow down Neovim. Make sure to disable the option after you&#39;ve collected the information you&#39;re looking for.&lt;/p&gt; &#xA;&lt;h3&gt;Does it work with (other plugin)?&lt;/h3&gt; &#xA;&lt;p&gt;In most cases, yes. null-ls tries to act like an actual LSP server as much as possible, so it should work seamlessly with most LSP-related plugins. If you run into problems, please try to determine which plugin is causing them and open an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Compatibility-with-other-plugins&#34;&gt;This wiki page&lt;/a&gt; mentions plugins that require specific configuration options / tweaks to work with null-ls.&lt;/p&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to hard work by @folke, the plugin wraps the mechanism Neovim uses to spawn language servers to start a client entirely in-memory. The client attaches to buffers that match defined sources and receives and responds to requests, document changes, and other events from Neovim.&lt;/p&gt; &#xA;&lt;h3&gt;Will it affect my performance?&lt;/h3&gt; &#xA;&lt;p&gt;More testing is necessary, but since null-ls uses pure Lua and runs entirely in memory without any external processes, in most cases it should run faster than similar solutions. If you notice that performance is worse with null-ls than with an alternative, please open an issue!&lt;/p&gt; &#xA;&lt;h3&gt;I am seeing a formatting &lt;code&gt;timeout&lt;/code&gt; error message&lt;/h3&gt; &#xA;&lt;p&gt;This issue occurs when a formatter takes longer than the default timeout value. This is an automatic mechanism and controlled by Neovim. You might want to increase the timeout in your call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- 0.7&#xA;vim.lsp.buf.formatting_sync(nil, 2000) -- 2 seconds&#xA;&#xA;-- 0.8&#xA;vim.lsp.buf.format({ timeout_ms = 2000 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;The test suite includes unit and integration tests and depends on plenary.nvim. Run &lt;code&gt;make test&lt;/code&gt; in the root of the project to run the suite or &lt;code&gt;FILE=filename_spec.lua make test-file&lt;/code&gt; to test an individual file.&lt;/p&gt; &#xA;&lt;p&gt;All tests expect the latest Neovim master.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt; and &lt;a href=&#34;https://github.com/iamcco/diagnostic-languageserver&#34;&gt;diagnostic-languageserver&lt;/a&gt;: general-purpose language servers that can provide formatting and diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;nvim-lint&lt;/a&gt;: a Lua plugin that focuses on providing diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mhartington/formatter.nvim&#34;&gt;formatter.nvim&lt;/a&gt;: a Lua plugin that (surprise) focuses on formatting.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to everyone who sponsors my projects and makes continued development / maintenance possible!&lt;/p&gt; &#xA;&lt;!-- sponsors --&gt;&#xA;&lt;a href=&#34;https://github.com/yutkat&#34;&gt;&lt;img src=&#34;https://github.com/yutkat.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/hituzi-no-sippo&#34;&gt;&lt;img src=&#34;https://github.com/hituzi-no-sippo.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/sbc64&#34;&gt;&lt;img src=&#34;https://github.com/sbc64.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/milanglacier&#34;&gt;&lt;img src=&#34;https://github.com/milanglacier.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;!-- sponsors --&gt;</summary>
  </entry>
  <entry>
    <title>kyazdani42/nvim-tree.lua</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/kyazdani42/nvim-tree.lua</id>
    <link href="https://github.com/kyazdani42/nvim-tree.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A file explorer tree for neovim written in lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A File Explorer For Neovim Written In Lua&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/kyazdani42/nvim-tree.lua/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notice&lt;/h2&gt; &#xA;&lt;p&gt;This plugin requires &lt;a href=&#34;https://github.com/neovim/neovim/wiki/Installing-Neovim&#34;&gt;neovim &amp;gt;=0.7.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have issues since the recent setup migration, check out &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/674&#34;&gt;this guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; requires&#xA;Plug &#39;kyazdani42/nvim-web-devicons&#39; &#34; for file icons&#xA;Plug &#39;kyazdani42/nvim-tree.lua&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;kyazdani42/nvim-tree.lua&#39;,&#xA;    requires = {&#xA;      &#39;kyazdani42/nvim-web-devicons&#39;, -- optional, for file icon&#xA;    },&#xA;    tag = &#39;nightly&#39; -- optional, updated every week. (see issue #1193)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Setup should be run in a lua file or in a lua heredoc (&lt;code&gt;:help lua-heredoc&lt;/code&gt;) if using in a vim file. Legacy &lt;code&gt;g:&lt;/code&gt; options have been migrated to the setup function. See &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/674&#34;&gt;this issue&lt;/a&gt; for information on migrating your configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; vimrc&#xA;nnoremap &amp;lt;C-n&amp;gt; :NvimTreeToggle&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;r :NvimTreeRefresh&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;n :NvimTreeFindFile&amp;lt;CR&amp;gt;&#xA;&#34; More available functions:&#xA;&#34; NvimTreeOpen&#xA;&#34; NvimTreeClose&#xA;&#34; NvimTreeFocus&#xA;&#34; NvimTreeFindFileToggle&#xA;&#34; NvimTreeResize&#xA;&#34; NvimTreeCollapse&#xA;&#34; NvimTreeCollapseKeepBuffers&#xA;&#xA;set termguicolors &#34; this variable must be enabled for colors to be applied properly&#xA;&#xA;&#34; a list of groups can be found at `:help nvim_tree_highlight`&#xA;highlight NvimTreeFolderIcon guibg=blue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;&#xA;-- empty setup using defaults: add your own options&#xA;require&#39;nvim-tree&#39;.setup {&#xA;}&#xA;&#xA;-- OR&#xA;&#xA;-- setup with all defaults&#xA;-- each of these are documented in `:help nvim-tree.OPTION_NAME`&#xA;-- nested options are documented by accessing them with `.` (eg: `:help nvim-tree.view.mappings.list`).&#xA;require&#39;nvim-tree&#39;.setup { -- BEGIN_DEFAULT_OPTS&#xA;  auto_reload_on_write = true,&#xA;  create_in_closed_folder = false,&#xA;  disable_netrw = false,&#xA;  hijack_cursor = false,&#xA;  hijack_netrw = true,&#xA;  hijack_unnamed_buffer_when_opening = false,&#xA;  ignore_buffer_on_setup = false,&#xA;  open_on_setup = false,&#xA;  open_on_setup_file = false,&#xA;  open_on_tab = false,&#xA;  sort_by = &#34;name&#34;,&#xA;  update_cwd = false,&#xA;  reload_on_bufenter = false,&#xA;  respect_buf_cwd = false,&#xA;  view = {&#xA;    width = 30,&#xA;    height = 30,&#xA;    hide_root_folder = false,&#xA;    side = &#34;left&#34;,&#xA;    preserve_window_proportions = false,&#xA;    number = false,&#xA;    relativenumber = false,&#xA;    signcolumn = &#34;yes&#34;,&#xA;    mappings = {&#xA;      custom_only = false,&#xA;      list = {&#xA;        -- user mappings go here&#xA;      },&#xA;    },&#xA;  },&#xA;  renderer = {&#xA;    add_trailing = false,&#xA;    group_empty = false,&#xA;    highlight_git = false,&#xA;    highlight_opened_files = &#34;none&#34;,&#xA;    root_folder_modifier = &#34;:~&#34;,&#xA;    indent_markers = {&#xA;      enable = false,&#xA;      icons = {&#xA;        corner = &#34;└ &#34;,&#xA;        edge = &#34;│ &#34;,&#xA;        none = &#34;  &#34;,&#xA;      },&#xA;    },&#xA;    icons = {&#xA;      webdev_colors = true,&#xA;      git_placement = &#34;before&#34;,&#xA;      padding = &#34; &#34;,&#xA;      symlink_arrow = &#34; ➛ &#34;,&#xA;      show = {&#xA;        file = true,&#xA;        folder = true,&#xA;        folder_arrow = true,&#xA;        git = true,&#xA;      },&#xA;      glyphs = {&#xA;        default = &#34;&#34;,&#xA;        symlink = &#34;&#34;,&#xA;        folder = {&#xA;          arrow_closed = &#34;&#34;,&#xA;          arrow_open = &#34;&#34;,&#xA;          default = &#34;&#34;,&#xA;          open = &#34;&#34;,&#xA;          empty = &#34;&#34;,&#xA;          empty_open = &#34;&#34;,&#xA;          symlink = &#34;&#34;,&#xA;          symlink_open = &#34;&#34;,&#xA;        },&#xA;        git = {&#xA;          unstaged = &#34;✗&#34;,&#xA;          staged = &#34;✓&#34;,&#xA;          unmerged = &#34;&#34;,&#xA;          renamed = &#34;➜&#34;,&#xA;          untracked = &#34;★&#34;,&#xA;          deleted = &#34;&#34;,&#xA;          ignored = &#34;◌&#34;,&#xA;        },&#xA;      },&#xA;    },&#xA;    special_files = { &#34;Cargo.toml&#34;, &#34;Makefile&#34;, &#34;README.md&#34;, &#34;readme.md&#34; },&#xA;  },&#xA;  hijack_directories = {&#xA;    enable = true,&#xA;    auto_open = true,&#xA;  },&#xA;  update_focused_file = {&#xA;    enable = false,&#xA;    update_cwd = false,&#xA;    ignore_list = {},&#xA;  },&#xA;  ignore_ft_on_setup = {},&#xA;  system_open = {&#xA;    cmd = &#34;&#34;,&#xA;    args = {},&#xA;  },&#xA;  diagnostics = {&#xA;    enable = false,&#xA;    show_on_dirs = false,&#xA;    icons = {&#xA;      hint = &#34;&#34;,&#xA;      info = &#34;&#34;,&#xA;      warning = &#34;&#34;,&#xA;      error = &#34;&#34;,&#xA;    },&#xA;  },&#xA;  filters = {&#xA;    dotfiles = false,&#xA;    custom = {},&#xA;    exclude = {},&#xA;  },&#xA;  git = {&#xA;    enable = true,&#xA;    ignore = true,&#xA;    timeout = 400,&#xA;  },&#xA;  actions = {&#xA;    use_system_clipboard = true,&#xA;    change_dir = {&#xA;      enable = true,&#xA;      global = false,&#xA;      restrict_above_cwd = false,&#xA;    },&#xA;    expand_all = {&#xA;      max_folder_discovery = 300,&#xA;    },&#xA;    open_file = {&#xA;      quit_on_open = false,&#xA;      resize_window = true,&#xA;      window_picker = {&#xA;        enable = true,&#xA;        chars = &#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#34;,&#xA;        exclude = {&#xA;          filetype = { &#34;notify&#34;, &#34;packer&#34;, &#34;qf&#34;, &#34;diff&#34;, &#34;fugitive&#34;, &#34;fugitiveblame&#34; },&#xA;          buftype = { &#34;nofile&#34;, &#34;terminal&#34;, &#34;help&#34; },&#xA;        },&#xA;      },&#xA;    },&#xA;    remove_file = {&#xA;      close_window = true,&#xA;    },&#xA;  },&#xA;  trash = {&#xA;    cmd = &#34;trash&#34;,&#xA;    require_confirm = true,&#xA;  },&#xA;  live_filter = {&#xA;    prefix = &#34;[FILTER]: &#34;,&#xA;    always_show_folders = true,&#xA;  },&#xA;  log = {&#xA;    enable = false,&#xA;    truncate = false,&#xA;    types = {&#xA;      all = false,&#xA;      config = false,&#xA;      copy_paste = false,&#xA;      diagnostics = false,&#xA;      git = false,&#xA;      profile = false,&#xA;    },&#xA;  },&#xA;} -- END_DEFAULT_OPTS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mappings&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;list&lt;/code&gt; option in &lt;code&gt;view.mappings.list&lt;/code&gt; is a table of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- key can be either a string or a table of string (lhs)&#xA;-- action is the name of the action, set to `&#34;&#34;` to remove default action&#xA;-- action_cb is the function that will be called, it receives the node as a parameter. Optional for default actions&#xA;-- mode is normal by default&#xA;&#xA;local tree_cb = require&#39;nvim-tree.config&#39;.nvim_tree_callback&#xA;&#xA;local function print_node_path(node) {&#xA;  print(node.absolute_path)&#xA;}&#xA;&#xA;local list = {&#xA;  { key = {&#34;&amp;lt;CR&amp;gt;&#34;, &#34;o&#34; }, action = &#34;edit&#34;, mode = &#34;n&#34;},&#xA;  { key = &#34;p&#34;, action = &#34;print_path&#34;, action_cb = print_node_path },&#xA;  { key = &#34;s&#34;, cb = tree_cb(&#34;vsplit&#34;) }, --tree_cb and the cb property are deprecated&#xA;  { key = &#34;&amp;lt;2-RightMouse&amp;gt;&#34;, action = &#34;&#34; }, -- will remove default cd action&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defaults&lt;/h3&gt; &#xA;&lt;!-- BEGIN_DEFAULT_MAPPINGS_TABLE --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Default Keys&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;CR&amp;gt; &lt;br&gt; o &lt;br&gt; &amp;lt;2-LeftMouse&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;edit&lt;/td&gt; &#xA;   &lt;td&gt;open a file or folder; root will cd to the above directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-e&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;edit_in_place&lt;/td&gt; &#xA;   &lt;td&gt;edit the file in place, effectively replacing the tree explorer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;O&lt;/td&gt; &#xA;   &lt;td&gt;edit_no_picker&lt;/td&gt; &#xA;   &lt;td&gt;same as (edit) with no window picker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-]&amp;gt; &lt;br&gt; &amp;lt;2-RightMouse&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;cd&lt;/td&gt; &#xA;   &lt;td&gt;cd in the directory under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-v&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;vsplit&lt;/td&gt; &#xA;   &lt;td&gt;open the file in a vertical split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-x&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;split&lt;/td&gt; &#xA;   &lt;td&gt;open the file in a horizontal split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-t&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;tabnew&lt;/td&gt; &#xA;   &lt;td&gt;open the file in a new tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;&lt;/td&gt; &#xA;   &lt;td&gt;prev_sibling&lt;/td&gt; &#xA;   &lt;td&gt;navigate to the previous sibling of current file/directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;next_sibling&lt;/td&gt; &#xA;   &lt;td&gt;navigate to the next sibling of current file/directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;P&lt;/td&gt; &#xA;   &lt;td&gt;parent_node&lt;/td&gt; &#xA;   &lt;td&gt;move cursor to the parent directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;BS&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;close_node&lt;/td&gt; &#xA;   &lt;td&gt;close current opened directory or parent&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;Tab&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;preview&lt;/td&gt; &#xA;   &lt;td&gt;open the file as a preview (keeps the cursor in the tree)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;K&lt;/td&gt; &#xA;   &lt;td&gt;first_sibling&lt;/td&gt; &#xA;   &lt;td&gt;navigate to the first sibling of current file/directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;J&lt;/td&gt; &#xA;   &lt;td&gt;last_sibling&lt;/td&gt; &#xA;   &lt;td&gt;navigate to the last sibling of current file/directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;I&lt;/td&gt; &#xA;   &lt;td&gt;toggle_git_ignored&lt;/td&gt; &#xA;   &lt;td&gt;toggle visibility of files/folders hidden via &lt;code&gt;git.ignore&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;H&lt;/td&gt; &#xA;   &lt;td&gt;toggle_dotfiles&lt;/td&gt; &#xA;   &lt;td&gt;toggle visibility of dotfiles via &lt;code&gt;filters.dotfiles&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;U&lt;/td&gt; &#xA;   &lt;td&gt;toggle_custom&lt;/td&gt; &#xA;   &lt;td&gt;toggle visibility of files/folders hidden via &lt;code&gt;filters.custom&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;refresh&lt;/td&gt; &#xA;   &lt;td&gt;refresh the tree&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;a&lt;/td&gt; &#xA;   &lt;td&gt;create&lt;/td&gt; &#xA;   &lt;td&gt;add a file; leaving a trailing &lt;code&gt;/&lt;/code&gt; will add a directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;d&lt;/td&gt; &#xA;   &lt;td&gt;remove&lt;/td&gt; &#xA;   &lt;td&gt;delete a file (will prompt for confirmation)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;D&lt;/td&gt; &#xA;   &lt;td&gt;trash&lt;/td&gt; &#xA;   &lt;td&gt;trash a file via &lt;code&gt;trash&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;r&lt;/td&gt; &#xA;   &lt;td&gt;rename&lt;/td&gt; &#xA;   &lt;td&gt;rename a file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-r&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;full_rename&lt;/td&gt; &#xA;   &lt;td&gt;rename a file and omit the filename on input&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;cut&lt;/td&gt; &#xA;   &lt;td&gt;add/remove file/directory to cut clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c&lt;/td&gt; &#xA;   &lt;td&gt;copy&lt;/td&gt; &#xA;   &lt;td&gt;add/remove file/directory to copy clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;p&lt;/td&gt; &#xA;   &lt;td&gt;paste&lt;/td&gt; &#xA;   &lt;td&gt;paste from clipboard; cut clipboard has precedence over copy; will prompt for confirmation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;y&lt;/td&gt; &#xA;   &lt;td&gt;copy_name&lt;/td&gt; &#xA;   &lt;td&gt;copy name to system clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;copy_path&lt;/td&gt; &#xA;   &lt;td&gt;copy relative path to system clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gy&lt;/td&gt; &#xA;   &lt;td&gt;copy_absolute_path&lt;/td&gt; &#xA;   &lt;td&gt;copy absolute path to system clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[c&lt;/td&gt; &#xA;   &lt;td&gt;prev_git_item&lt;/td&gt; &#xA;   &lt;td&gt;go to next git item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;]c&lt;/td&gt; &#xA;   &lt;td&gt;next_git_item&lt;/td&gt; &#xA;   &lt;td&gt;go to prev git item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;dir_up&lt;/td&gt; &#xA;   &lt;td&gt;navigate up to the parent directory of the current file/directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s&lt;/td&gt; &#xA;   &lt;td&gt;system_open&lt;/td&gt; &#xA;   &lt;td&gt;open a file with default system application or a folder with default file manager, using &lt;code&gt;system_open&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;f&lt;/td&gt; &#xA;   &lt;td&gt;live_filter&lt;/td&gt; &#xA;   &lt;td&gt;live filter nodes dynamically based on regex matching.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F&lt;/td&gt; &#xA;   &lt;td&gt;clear_live_filter&lt;/td&gt; &#xA;   &lt;td&gt;clear live filter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;q&lt;/td&gt; &#xA;   &lt;td&gt;close&lt;/td&gt; &#xA;   &lt;td&gt;close tree window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;W&lt;/td&gt; &#xA;   &lt;td&gt;collapse_all&lt;/td&gt; &#xA;   &lt;td&gt;collapse the whole tree&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;E&lt;/td&gt; &#xA;   &lt;td&gt;expand_all&lt;/td&gt; &#xA;   &lt;td&gt;expand the whole tree, stopping after expanding &lt;code&gt;actions.expand_all.max_folder_discovery&lt;/code&gt; folders; this might hang neovim for a while if running on a big folder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;search_node&lt;/td&gt; &#xA;   &lt;td&gt;prompt the user to enter a path and then expands the tree to match the path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;run_file_command&lt;/td&gt; &#xA;   &lt;td&gt;enter vim command mode with the file the cursor is on&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;C-k&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;toggle_file_info&lt;/td&gt; &#xA;   &lt;td&gt;toggle a popup with file infos about the file under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;g?&lt;/td&gt; &#xA;   &lt;td&gt;toggle_help&lt;/td&gt; &#xA;   &lt;td&gt;toggle help&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- END_DEFAULT_MAPPINGS_TABLE --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  view.mappings.list = { -- BEGIN_DEFAULT_MAPPINGS&#xA;    { key = { &#34;&amp;lt;CR&amp;gt;&#34;, &#34;o&#34;, &#34;&amp;lt;2-LeftMouse&amp;gt;&#34; }, action = &#34;edit&#34; }&#xA;    { key = &#34;&amp;lt;C-e&amp;gt;&#34;,                          action = &#34;edit_in_place&#34; }&#xA;    { key = &#34;O&#34;,                              action = &#34;edit_no_picker&#34; }&#xA;    { key = { &#34;&amp;lt;C-]&amp;gt;&#34;, &#34;&amp;lt;2-RightMouse&amp;gt;&#34; },    action = &#34;cd&#34; }&#xA;    { key = &#34;&amp;lt;C-v&amp;gt;&#34;,                          action = &#34;vsplit&#34; }&#xA;    { key = &#34;&amp;lt;C-x&amp;gt;&#34;,                          action = &#34;split&#34; }&#xA;    { key = &#34;&amp;lt;C-t&amp;gt;&#34;,                          action = &#34;tabnew&#34; }&#xA;    { key = &#34;&amp;lt;&#34;,                              action = &#34;prev_sibling&#34; }&#xA;    { key = &#34;&amp;gt;&#34;,                              action = &#34;next_sibling&#34; }&#xA;    { key = &#34;P&#34;,                              action = &#34;parent_node&#34; }&#xA;    { key = &#34;&amp;lt;BS&amp;gt;&#34;,                           action = &#34;close_node&#34; }&#xA;    { key = &#34;&amp;lt;Tab&amp;gt;&#34;,                          action = &#34;preview&#34; }&#xA;    { key = &#34;K&#34;,                              action = &#34;first_sibling&#34; }&#xA;    { key = &#34;J&#34;,                              action = &#34;last_sibling&#34; }&#xA;    { key = &#34;I&#34;,                              action = &#34;toggle_git_ignored&#34; }&#xA;    { key = &#34;H&#34;,                              action = &#34;toggle_dotfiles&#34; }&#xA;    { key = &#34;U&#34;,                              action = &#34;toggle_custom&#34; }&#xA;    { key = &#34;R&#34;,                              action = &#34;refresh&#34; }&#xA;    { key = &#34;a&#34;,                              action = &#34;create&#34; }&#xA;    { key = &#34;d&#34;,                              action = &#34;remove&#34; }&#xA;    { key = &#34;D&#34;,                              action = &#34;trash&#34; }&#xA;    { key = &#34;r&#34;,                              action = &#34;rename&#34; }&#xA;    { key = &#34;&amp;lt;C-r&amp;gt;&#34;,                          action = &#34;full_rename&#34; }&#xA;    { key = &#34;x&#34;,                              action = &#34;cut&#34; }&#xA;    { key = &#34;c&#34;,                              action = &#34;copy&#34; }&#xA;    { key = &#34;p&#34;,                              action = &#34;paste&#34; }&#xA;    { key = &#34;y&#34;,                              action = &#34;copy_name&#34; }&#xA;    { key = &#34;Y&#34;,                              action = &#34;copy_path&#34; }&#xA;    { key = &#34;gy&#34;,                             action = &#34;copy_absolute_path&#34; }&#xA;    { key = &#34;[c&#34;,                             action = &#34;prev_git_item&#34; }&#xA;    { key = &#34;]c&#34;,                             action = &#34;next_git_item&#34; }&#xA;    { key = &#34;-&#34;,                              action = &#34;dir_up&#34; }&#xA;    { key = &#34;s&#34;,                              action = &#34;system_open&#34; }&#xA;    { key = &#34;f&#34;,                              action = &#34;live_filter&#34; }&#xA;    { key = &#34;F&#34;,                              action = &#34;clear_live_filter&#34; }&#xA;    { key = &#34;q&#34;,                              action = &#34;close&#34; }&#xA;    { key = &#34;W&#34;,                              action = &#34;collapse_all&#34; }&#xA;    { key = &#34;E&#34;,                              action = &#34;expand_all&#34; }&#xA;    { key = &#34;S&#34;,                              action = &#34;search_node&#34; }&#xA;    { key = &#34;.&#34;,                              action = &#34;run_file_command&#34; }&#xA;    { key = &#34;&amp;lt;C-k&amp;gt;&#34;,                          action = &#34;toggle_file_info&#34; }&#xA;    { key = &#34;g?&#34;,                             action = &#34;toggle_help&#34; }&#xA;  } -- END_DEFAULT_MAPPINGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips &amp;amp; reminders&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You can add a directory by adding a &lt;code&gt;/&lt;/code&gt; at the end of the paths, entering multiple directories &lt;code&gt;BASE/foo/bar/baz&lt;/code&gt; will add directory foo, then bar and add a file baz to it.&lt;/li&gt; &#xA; &lt;li&gt;You can update window options for the tree by setting &lt;code&gt;require&#34;nvim-tree.view&#34;.View.winopts.MY_OPTION = MY_OPTION_VALUE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle&lt;/code&gt; has a second parameter which allows to toggle without focusing the explorer (&lt;code&gt;require&#34;nvim-tree&#34;.toggle(false, true)&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;You can allow nvim-tree to behave like vinegar (see &lt;code&gt;:help nvim-tree-vinegar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;code&gt;:set nosplitright&lt;/code&gt;, the files will open on the left side of the tree, placing the tree window in the right side of the file you opened.&lt;/li&gt; &#xA; &lt;li&gt;You can automatically close the tab/vim when nvim-tree is the last window in the tab: &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/discussions/1115&#34;&gt;https://github.com/kyazdani42/nvim-tree.lua/discussions/1115&lt;/a&gt;. WARNING: other plugins or automation may interfere with this.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Diagnostic Logging&lt;/h2&gt; &#xA;&lt;p&gt;You may enable diagnostic logging to &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt;. See &lt;code&gt;:help nvim-tree.log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are experiencing performance issues with nvim-tree.lua, you can enable profiling in the logs. It is advisable to enable git logging at the same time, as that can be a source of performance problems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;log = {&#xA;  enable = true,&#xA;  truncate = true,&#xA;  types = {&#xA;    git = true,&#xA;    profile = true,&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please attach &lt;code&gt;$XDG_CACHE_HOME/nvim/nvim-tree.log&lt;/code&gt; if you raise an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Performance Tips:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using fish as an editor shell (which might be fixed in the future), try set &lt;code&gt;shell=/bin/bash&lt;/code&gt; in your vim config. Alternatively, you can &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua/issues/549#issuecomment-1127394585&#34;&gt;prevent fish from loading interactive configuration in a non-interactive shell&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try manually running the git command (see the logs) in your shell e.g. &lt;code&gt;git --no-optional-locks status --porcelain=v1 --ignored=matching -u&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Huge git repositories may timeout after the default &lt;code&gt;git.timeout&lt;/code&gt; of 400ms. Try increasing that in your setup if you see &lt;code&gt;[git] job timed out&lt;/code&gt; in the logs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try temporarily disabling git integration by setting &lt;code&gt;git.enable = false&lt;/code&gt; in your setup.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;kyazdani42 tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;akin909 tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot3.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;stsewd tree&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kyazdani42/nvim-tree.lua/master/.github/screenshot4.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;reyhankaplan tree&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LunarVim/LunarVim</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/LunarVim/LunarVim</id>
    <link href="https://github.com/LunarVim/LunarVim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An IDE layer for Neovim with sane defaults. Completely free and community driven.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/59826753/159940098-54284f26-f1da-4481-8b03-1deb34c57533.png&#34; alt=&#34;lunarvim_logo_dark&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/lunarvim/LunarVim/releases/latest&#34;&gt; &lt;img alt=&#34;Latest release&#34; src=&#34;https://img.shields.io/github/v/release/lunarvim/LunarVim&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/lunarvim/LunarVim/pulse&#34;&gt; &lt;img alt=&#34;Last commit&#34; src=&#34;https://img.shields.io/github/last-commit/lunarvim/LunarVim&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/lunarvim/LunarVim/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/lunarvim/lunarvim?style=flat-square&amp;amp;logo=GNU&amp;amp;label=License&#34; alt=&#34;License&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://patreon.com/chrisatmachine&#34; title=&#34;Donate to this project using Patreon&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/patreon-donate-yellow.svg?sanitize=true&#34; alt=&#34;Patreon donate button&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=chrisatmachine&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/chrisatmachine?style=social&amp;amp;logo=twitter&#34; alt=&#34;follow on Twitter&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/59826753/159939936-3a9a8e94-05ea-48fa-8c46-69378276451b.png&#34; alt=&#34;intro1&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/59826753/159939984-ac0190d7-a3fb-46c0-95ca-a6fec626bbac.png&#34; alt=&#34;info&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/59826753/159940004-84975294-5703-4bf1-aa98-2cc97cb38d96.png&#34; alt=&#34;demo1&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/59826753/159940040-375a0a28-4c81-4fdf-80f2-62853edf9b4f.png&#34; alt=&#34;demo2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install In One Command!&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have the release version of Neovim (0.7+).&lt;/p&gt; &#xA;&lt;h3&gt;Linux:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the install script without any interaction you can pass the &lt;code&gt;-y&lt;/code&gt; flag to automatically install all dependencies and have no prompts. This is particularly useful in automated installations.&lt;/p&gt; &#xA;&lt;p&gt;The same way, you can use &lt;code&gt;--no-install-dependencies&lt;/code&gt; to skip the dependency installation.&lt;/p&gt; &#xA;&lt;h3&gt;Windows (Powershell 7+):&lt;/h3&gt; &#xA;&lt;p&gt;Powershell v7+ is required for this script. For instructions on how to install, &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell?view=powershell-7.2&#34;&gt;click here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-WebRequest https://raw.githubusercontent.com/LunarVim/LunarVim/master/utils/installer/install.ps1 -UseBasicParsing | Invoke-Expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Automatic LSP support&lt;/h2&gt; &#xA;&lt;p&gt;By default, most supported language servers will get automatically installed once you open the supported file-type, e.g, opening a Python file for the first time will install &lt;code&gt;Pyright&lt;/code&gt; and configure it automatically for you.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration file&lt;/h2&gt; &#xA;&lt;p&gt;To install plugins configure LunarVim use the &lt;code&gt;config.lua&lt;/code&gt; located here: &lt;code&gt;~/.config/lvim/config.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- general&#xA;lvim.format_on_save = true&#xA;lvim.colorscheme = &#34;onedarker&#34;&#xA;&#xA;lvim.leader = &#34;space&#34;&#xA;-- add your own keymapping&#xA;lvim.keys.normal_mode[&#34;&amp;lt;C-s&amp;gt;&#34;] = &#34;:w&amp;lt;cr&amp;gt;&#34;&#xA;-- unmap a default keymapping&#xA;-- lvim.keys.normal_mode[&#34;&amp;lt;C-Up&amp;gt;&#34;] = &#34;&#34;&#xA;-- edit a default keymapping&#xA;-- lvim.keys.normal_mode[&#34;&amp;lt;C-q&amp;gt;&#34;] = &#34;:q&amp;lt;cr&amp;gt;&#34;&#xA;-- set keymap with custom opts&#xA;-- lvim.keys.insert_mode[&#34;po&#34;] = {&#39;&amp;lt;ESC&amp;gt;&#39;, { noremap = true }}&#xA;&#xA;-- Use which-key to add extra bindings with the leader-key prefix&#xA;-- lvim.builtin.which_key.mappings[&#34;P&#34;] = { &#34;&amp;lt;cmd&amp;gt;Telescope projects&amp;lt;CR&amp;gt;&#34;, &#34;Projects&#34; }&#xA;&#xA;-- Configure builtin plugins&#xA;lvim.builtin.alpha.active = true&#xA;lvim.builtin.notify.active = true&#xA;lvim.builtin.terminal.active = true&#xA;&#xA;-- Treesitter parsers change this to a table of the languages you want i.e. {&#34;java&#34;, &#34;python&#34;, javascript}&#xA;lvim.builtin.treesitter.ensure_installed = &#34;maintained&#34;&#xA;lvim.builtin.treesitter.ignore_install = { &#34;haskell&#34; }&#xA;&#xA;-- Disable virtual text&#xA;lvim.lsp.diagnostics.virtual_text = false&#xA;&#xA;-- Select which servers should be configured manually. Requires `:LvimCacheReset` to take effect.&#xA;-- See the full default list `:lua print(vim.inspect(lvim.lsp.override))`&#xA;vim.list_extend(lvim.lsp.automatic_configuration.skipped_servers, { &#34;pyright&#34; })&#xA;&#xA;-- set a formatter, this will override the language server formatting capabilities (if it exists)&#xA;local formatters = require &#34;lvim.lsp.null-ls.formatters&#34;&#xA;formatters.setup {&#xA;  { command = &#34;black&#34; },&#xA;  {&#xA;    command = &#34;prettier&#34;,&#xA;    ---@usage specify which filetypes to enable. By default a providers will attach to all the filetypes it supports.&#xA;    filetypes = { &#34;typescript&#34;, &#34;typescriptreact&#34; },&#xA;  },&#xA;}&#xA;&#xA;-- set additional linters&#xA;local linters = require &#34;lvim.lsp.null-ls.linters&#34;&#xA;linters.setup {&#xA;  {&#xA;    command = &#34;eslint_d&#34;,&#xA;    ---@usage specify which filetypes to enable. By default a providers will attach to all the filetypes it supports.&#xA;    filetypes = { &#34;javascript&#34;, &#34;javascriptreact&#34; },&#xA;  },&#xA;}&#xA;&#xA;-- Additional Plugins&#xA;lvim.plugins = {&#xA;    {&#34;lunarvim/colorschemes&#34;},&#xA;    {&#34;folke/tokyonight.nvim&#34;}, {&#xA;        &#34;ray-x/lsp_signature.nvim&#34;,&#xA;        config = function() require&#34;lsp_signature&#34;.on_attach() end,&#xA;        event = &#34;BufRead&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating LunarVim&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inside LunarVim &lt;code&gt;:LvimUpdate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;from the command-line &lt;code&gt;lvim +LvimUpdate +q&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Update the plugins&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inside LunarVim &lt;code&gt;:PackerUpdate&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Breaking changes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lvim.lang.FOO&lt;/code&gt; is no longer supported. Refer to &lt;a href=&#34;https://www.lunarvim.org/languages&#34;&gt;https://www.lunarvim.org/languages&lt;/a&gt; for up-to-date instructions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lvim.lsp.popup_border&lt;/code&gt; has been deprecated in favor of &lt;code&gt;lvim.lsp.float.border&lt;/code&gt; and &lt;code&gt;lvim.lsp.diagnostics.float.border&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lvim.builtin.dashboard&lt;/code&gt; has been replaced with &lt;code&gt;lvim.builtin.alpha&lt;/code&gt;, see &lt;a href=&#34;https://github.com/LunarVim/LunarVim/pull/1906&#34;&gt;https://github.com/LunarVim/LunarVim/pull/1906&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.lunarvim.org&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCS97tchJDq17Qms3cux8wcA&#34;&gt;YouTube&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://discord.gg/Xb9B4Ny&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://twitter.com/chrisatmachine&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;I have the processing power of a potato with 4 gb of ram and LunarVim runs perfectly.&#34;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;@juanCortelezzi, LunarVim user.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;My minimal config with a good amount less code than LunarVim loads 40ms slower. Time to switch.&#34;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;@mvllow, Potential LunarVim user.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div align=&#34;center&#34; id=&#34;madewithlua&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LunarVim/LunarVim/rolling/#madewithlua&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>ayamir/nvimdots</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/ayamir/nvimdots</id>
    <link href="https://github.com/ayamir/nvimdots" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A well configured and structured Neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/dashboard.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/telescope.png&#34; alt=&#34;Telescope&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/coding.png&#34; alt=&#34;Coding&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/dap.png&#34; alt=&#34;Debuging&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/gitui.png&#34; alt=&#34;Gitui&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is my neovim&#39;s configuration, which contains two branches.&lt;/p&gt; &#xA;&lt;p&gt;I use &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt; to manage plugins.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Branch&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Completion Solution&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;main&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;nvim-lspconfig+nvim-cmp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;coc&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;coc.nvim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Chinese introduction is &lt;a href=&#34;https://zhuanlan.zhihu.com/p/382092667&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast. Less than &lt;strong&gt;50ms&lt;/strong&gt; to start(Depends on SSD, tested on Sumsung 970 evo).&lt;/li&gt; &#xA; &lt;li&gt;Simple. Run out of the box.&lt;/li&gt; &#xA; &lt;li&gt;Modern. Pure lua to config.&lt;/li&gt; &#xA; &lt;li&gt;Modular. Easy to customize.&lt;/li&gt; &#xA; &lt;li&gt;Powerful. Full functionality to code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/startuptime.png&#34; alt=&#34;startup time&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ayamir/blog-imgs/main/vimstartup.png&#34; alt=&#34;vim-startuptime&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(Tested with &lt;a href=&#34;https://github.com/rhysd/vim-startuptime&#34;&gt;rhysd/vim-startuptime&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;Details&lt;/h1&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/ayamir/nvimdots/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgement&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/nvim&#34;&gt;glepnir/nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rcarriga/nvim-notify</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/rcarriga/nvim-notify</id>
    <link href="https://github.com/rcarriga/nvim-notify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fancy, configurable, notification manager for NeoVim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-notify&lt;/h1&gt; &#xA;&lt;p&gt;A fancy, configurable, notification manager for NeoVim&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130856848-e8289850-028f-4f49-82f1-5ea1b8912f5e.gif&#34; alt=&#34;notify&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Credit to &lt;a href=&#34;https://github.com/sunjon&#34;&gt;sunjon&lt;/a&gt; for &lt;a href=&#34;https://neovim.discourse.group/t/wip-animated-notifications-plugin/448&#34;&gt;the design&lt;/a&gt; that inspired the appearance of this plugin.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#viewing-history&#34;&gt;Viewing History&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#highlights&#34;&gt;Highlights&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#render-style&#34;&gt;Render Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#animation-style&#34;&gt;Animation Style&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#opening-the-window&#34;&gt;Opening the window&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#changing-the-window&#34;&gt;Changing the window&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply call the module with a message!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;notify&#34;)(&#34;My super important message&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other plugins can use the notification windows by setting it as your default notify function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify = require(&#34;notify&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can supply a level to change the border highlighting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify(&#34;This is an error message&#34;, &#34;error&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Updating an existing notification is also possible!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/152641078-92f3da72-f49f-4705-aec8-86512693445f.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use treesitter highlighting inside notifications with opacity changing&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/165042795-565878a3-9c6d-4c0b-ab0d-6858515835c5.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are a number of custom options that can be supplied in a table as the third argument. See &lt;code&gt;:h NotifyOptions&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Sample code for the first GIF above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local plugin = &#34;My Awesome Plugin&#34;&#xA;&#xA;vim.notify(&#34;This is an error message.\nSomething went wrong!&#34;, &#34;error&#34;, {&#xA;  title = plugin,&#xA;  on_open = function()&#xA;    vim.notify(&#34;Attempting recovery.&#34;, vim.lsp.log_levels.WARN, {&#xA;      title = plugin,&#xA;    })&#xA;    local timer = vim.loop.new_timer()&#xA;    timer:start(2000, 0, function()&#xA;      vim.notify({ &#34;Fixing problem.&#34;, &#34;Please wait...&#34; }, &#34;info&#34;, {&#xA;        title = plugin,&#xA;        timeout = 3000,&#xA;        on_close = function()&#xA;          vim.notify(&#34;Problem solved&#34;, nil, { title = plugin })&#xA;          vim.notify(&#34;Error code 0x0395AF&#34;, 1, { title = plugin })&#xA;        end,&#xA;      })&#xA;    end)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use plenary&#39;s async library to avoid using callbacks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local async = require(&#34;plenary.async&#34;)&#xA;local notify = require(&#34;notify&#34;).async&#xA;&#xA;async.run(function()&#xA;  notify(&#34;Let&#39;s wait for this to close&#34;).events.close()&#xA;  notify(&#34;It closed!&#34;)&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set a custom filetype to take advantage of treesitter highlighting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify(text, &#34;info&#34;, {&#xA;  title = &#34;My Awesome Plugin&#34;,&#xA;  on_open = function(win)&#xA;    local buf = vim.api.nvim_win_get_buf(win)&#xA;    vim.api.nvim_buf_set_option(buf, &#34;filetype&#34;, &#34;markdown&#34;)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the wiki for more examples!&lt;/p&gt; &#xA;&lt;h3&gt;Viewing History&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; installed then you can use the &lt;code&gt;notify&lt;/code&gt; extension to search the history:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope notify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).extensions.notify.notify(&amp;lt;opts&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you lazy load &lt;code&gt;telescope&lt;/code&gt; you should manually call &lt;code&gt;require(&#34;telescope&#34;).load_extension(&#34;notify&#34;)&lt;/code&gt; before using the above commands. If you don&#39;t lazy load &lt;code&gt;telescope&lt;/code&gt; then &lt;code&gt;notify&lt;/code&gt; does this for you.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/136264308-2fcdfe57-a8f6-4b34-8ea1-e3a8349bc581.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;There is a command to display a log of the history.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Notifications&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/136264653-83038119-634b-48e7-8e8a-0edf4546efe2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;You can get a list of past notifications with the history function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;notify&#34;).history()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;You can optionally call the &lt;code&gt;setup&lt;/code&gt; function to provide configuration options&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h notify.Config&lt;/code&gt; for options and &lt;code&gt;:h notify.setup()&lt;/code&gt; for default values.&lt;/p&gt; &#xA;&lt;h3&gt;Highlights&lt;/h3&gt; &#xA;&lt;p&gt;You can define custom highlights by supplying highlight groups for each of the levels. The naming scheme follows a simple structure: &lt;code&gt;Notify&amp;lt;upper case level name&amp;gt;&amp;lt;section&amp;gt;&lt;/code&gt;. If you want to use custom levels, you can define the highlights for them or they will follow the &lt;code&gt;INFO&lt;/code&gt; highlights by default.&lt;/p&gt; &#xA;&lt;p&gt;Here are the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;highlight NotifyERRORBorder guifg=#8A1F1F&#xA;highlight NotifyWARNBorder guifg=#79491D&#xA;highlight NotifyINFOBorder guifg=#4F6752&#xA;highlight NotifyDEBUGBorder guifg=#8B8B8B&#xA;highlight NotifyTRACEBorder guifg=#4F3552&#xA;highlight NotifyERRORIcon guifg=#F70067&#xA;highlight NotifyWARNIcon guifg=#F79000&#xA;highlight NotifyINFOIcon guifg=#A9FF68&#xA;highlight NotifyDEBUGIcon guifg=#8B8B8B&#xA;highlight NotifyTRACEIcon guifg=#D484FF&#xA;highlight NotifyERRORTitle  guifg=#F70067&#xA;highlight NotifyWARNTitle guifg=#F79000&#xA;highlight NotifyINFOTitle guifg=#A9FF68&#xA;highlight NotifyDEBUGTitle  guifg=#8B8B8B&#xA;highlight NotifyTRACETitle  guifg=#D484FF&#xA;highlight link NotifyERRORBody Normal&#xA;highlight link NotifyWARNBody Normal&#xA;highlight link NotifyINFOBody Normal&#xA;highlight link NotifyDEBUGBody Normal&#xA;highlight link NotifyTRACEBody Normal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Render Style&lt;/h3&gt; &#xA;&lt;p&gt;The appearance of the notifications can be configured, using either built-in methods or custome functions. See &lt;code&gt;:help notify-render()&lt;/code&gt; for details&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&#34;default&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/141534868-fdcc9d03-9f7b-47fd-acfc-5a20b98e4e0a.png&#34; alt=&#34;default&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&#34;minimal&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/141534952-bb0cf491-5bb4-473c-9a67-8adb5b23b232.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to submit custom rendering functions to share with others!&lt;/p&gt; &#xA;&lt;h3&gt;Animation Style&lt;/h3&gt; &#xA;&lt;p&gt;The animation is designed to work in stages. The first stage is the opening of the window, and all subsequent stages can changes the position or opacity of the window. You can use one of the built-in styles or provide your own in the setup.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&#34;fade_in_slide_out&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924913-f3a61f2c-2330-4426-a787-3cd7494fccc0.gif&#34; alt=&#34;fade_slide&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&#34;fade&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924911-a89bef9b-e815-4aa5-a255-84bc23dd8c8e.gif&#34; alt=&#34;fade&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&#34;slide&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924905-656cabfc-9eb7-4e22-b6da-8a2a1f508fa5.gif&#34; alt=&#34;slide&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&#34;static&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924902-8c77b5a1-6d13-48f4-98a9-866e58cb76e4.gif&#34; alt=&#34;static&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Custom styles can be provided by setting the config &lt;code&gt;stages&lt;/code&gt; value to a list of functions.&lt;/p&gt; &#xA;&lt;p&gt;If you create a custom style, feel free to open a PR to submit it as a built-in style!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB.&lt;/strong&gt; This is a prototype API that is open to change. I am looking for feedback on both issues or extra data that could be useful in creating animation styles.&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/lua/notify/stages/&#34;&gt;built-in styles&lt;/a&gt; to see examples&lt;/p&gt; &#xA;&lt;h4&gt;Opening the window&lt;/h4&gt; &#xA;&lt;p&gt;The first function in the list should return a table to be provided to &lt;code&gt;nvim_open_win&lt;/code&gt;, optionally including an extra &lt;code&gt;opacity&lt;/code&gt; key which can be between 0-100.&lt;/p&gt; &#xA;&lt;p&gt;The function is given a state table that contains the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;message: table&lt;/code&gt; State of the message to be shown &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;width&lt;/code&gt; Width of the message buffer&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;height&lt;/code&gt; Height of the message buffer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;open_windows: integer[]&lt;/code&gt; List of all window IDs currently showing messages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a notification can&#39;t be shown at the moment the function should return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Changing the window&lt;/h4&gt; &#xA;&lt;p&gt;All following functions should return the goal values for the window to reach from it&#39;s current point. They will receive the same state object as the initial function and a second argument of the window ID.&lt;/p&gt; &#xA;&lt;p&gt;The following fields can be returned in a table:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;row&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;height&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;width&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These can be provided as either numbers or as a table. If they are provided as numbers then they will change instantly the value given.&lt;/p&gt; &#xA;&lt;p&gt;If they are provided as a table, they will be treated as a value to animate towards. This uses a dampened spring algorithm to provide a natural feel to the movement.&lt;/p&gt; &#xA;&lt;p&gt;The table must contain the goal value as the 1st index (e.g. &lt;code&gt;{10}&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;All other values are provided with keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;damping: number&lt;/code&gt; How motion decays over time. Values less than 1 mean the spring can overshoot. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bounds: &amp;gt;= 0&lt;/li&gt; &#xA;   &lt;li&gt;Default: 1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;frequency: number&lt;/code&gt; How fast the spring oscillates &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bounds: &amp;gt;= 0&lt;/li&gt; &#xA;   &lt;li&gt;Default: 1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;complete: fun(value: number): bool&lt;/code&gt; Function to determine if value has reached its goal. If not provided it will complete when the value rounded to 2 decimal places is equal to the goal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once the last function has reached its goals, the window is removed.&lt;/p&gt; &#xA;&lt;p&gt;One of the stages should also return the key &lt;code&gt;time&lt;/code&gt; set to true. This is treated as the stage which the notification is on a timer. The goals of this stage are not used to check if it is complete. The next stage will start once the notification reaches its timeout.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>akinsho/toggleterm.nvim</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/akinsho/toggleterm.nvim</id>
    <link href="https://github.com/akinsho/toggleterm.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A neovim lua plugin to help easily manage multiple terminal windows&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; toggleterm.nvim &lt;/h1&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A &lt;i&gt;neovim&lt;/i&gt; plugin to persist and toggle multiple terminals during an editing session&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/akinsho/toggleterm.nvim/main/github/toggleterm.gif&#34; alt=&#34;screenshot&#34; title=&#34;Toggleterm in action&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Multiple orientations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Float&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/115306123-42d2ac00-a15f-11eb-84fc-c4246ee82a09.png&#34; alt=&#34;floating window&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vertical&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/akinsho/toggleterm.nvim/main/github/vertical-terms.png&#34; alt=&#34;vertical orientation&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tab&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/133490969-6a59e623-79db-4ca7-a73b-ef4b24a73b91.gif&#34; alt=&#34;tab orientation&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Send commands to different terminals&lt;/h3&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/112119367-36d1e980-8bb5-11eb-9787-5936391127a3.gif&#34; alt=&#34;exec&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This plugin only works in &lt;em&gt;Neovim 0.7&lt;/em&gt; or newer.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using packer in lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#34;akinsho/toggleterm.nvim&#34;, tag = &#39;v1.*&#39;, config = function()&#xA;  require(&#34;toggleterm&#34;).setup()&#xA;end}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using vim-plug in vimscript&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;akinsho/toggleterm.nvim&#39;, tag = &#39;v1.*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can/should specify a tag for the current major version of the plugin, to avoid breaking changes as this plugin evolves. To use a version of this plugin compatible with nvim versions less than 0.7 please use the tag &lt;code&gt;v1.*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Neovim&#39;s terminal is a very cool, but not super ergonomic tool to use. I find that I often want to set a process going and leave it to continue to run in the background. I don&#39;t need to see it all the time. I just need to be able to refer back to it at intervals. I also sometimes want to create a new terminal and run a few commands.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes I want these side by side, and I &lt;em&gt;really&lt;/em&gt; want these terminals to be easy to access. I also want my terminal to look different from non-terminal buffers so I use &lt;code&gt;winhighlight&lt;/code&gt; to darken them based on the &lt;code&gt;Normal&lt;/code&gt; background colour.&lt;/p&gt; &#xA;&lt;p&gt;This is the exact use case this was designed for. If that&#39;s your use case this might work for you.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;All I really want this plugin to be is what I described above. A wrapper around the terminal functionality.&lt;/p&gt; &#xA;&lt;p&gt;It basically (almost) does all that I need it to.&lt;/p&gt; &#xA;&lt;p&gt;I won&#39;t be turning this into a REPL plugin or doing a bunch of complex stuff. If you find any issues, &lt;em&gt;please&lt;/em&gt; consider a &lt;em&gt;pull request&lt;/em&gt; not an issue. I&#39;m also going to be pretty conservative about what I add.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;This plugin must be explicitly enabled by using &lt;code&gt;require(&#34;toggleterm&#34;).setup{}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;open_mapping&lt;/code&gt; key to use for toggling the terminal(s) will setup mappings for &lt;em&gt;normal&lt;/em&gt; mode If you prefix the mapping with a number that particular terminal will be opened.&lt;/p&gt; &#xA;&lt;p&gt;If you set the &lt;code&gt;insert_mappings&lt;/code&gt; key to true, the mapping will also take effect in insert mode; similarly setting &lt;code&gt;terminal_mappings&lt;/code&gt; to will have the mappings take effect in the opened terminal.&lt;/p&gt; &#xA;&lt;p&gt;However you will not be able to use a count with the open mapping in terminal and insert modes. You can create buffer specific mappings to exit terminal mode and then use a count with the open mapping. Check &lt;em&gt;Terminal window mappings&lt;/em&gt; for an example of how to do this.&lt;/p&gt; &#xA;&lt;p&gt;alternatively you can do this manually (not recommended but, your prerogative)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; set&#xA;autocmd TermEnter term://*toggleterm#*&#xA;      \ tnoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Cmd&amp;gt;exe v:count1 . &#34;ToggleTerm&#34;&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; By applying the mappings this way you can pass a count to your&#xA;&#34; mapping to open a specific window.&#xA;&#34; For example: 2&amp;lt;C-t&amp;gt; will open terminal 2&#xA;nnoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Cmd&amp;gt;exe v:count1 . &#34;ToggleTerm&#34;&amp;lt;CR&amp;gt;&#xA;inoremap &amp;lt;silent&amp;gt;&amp;lt;c-t&amp;gt; &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;exe v:count1 . &#34;ToggleTerm&#34;&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Please ensure you have set &lt;code&gt;hidden&lt;/code&gt; in your neovim config, otherwise the terminals will be discarded when closed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Please do not copy and paste this configuration! It is here to show what options are available. It is not written be used as is.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;toggleterm&#34;).setup{&#xA;  -- size can be a number or function which is passed the current terminal&#xA;  size = 20 | function(term)&#xA;    if term.direction == &#34;horizontal&#34; then&#xA;      return 15&#xA;    elseif term.direction == &#34;vertical&#34; then&#xA;      return vim.o.columns * 0.4&#xA;    end&#xA;  end,&#xA;  open_mapping = [[&amp;lt;c-\&amp;gt;]],&#xA;  on_open = fun(t: Terminal), -- function to run when the terminal opens&#xA;  on_close = fun(t: Terminal), -- function to run when the terminal closes&#xA;  on_stdout = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stdout&#xA;  on_stderr = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stderr&#xA;  on_exit = fun(t: Terminal, job: number, exit_code: number, name: string) -- function to run when terminal process exits&#xA;  hide_numbers = true, -- hide the number column in toggleterm buffers&#xA;  shade_filetypes = {},&#xA;  highlights = {&#xA;    -- highlights which map to a highlight group name and a table of it&#39;s values&#xA;    -- NOTE: this is only a subset of values, any group placed here will be set for the terminal window split&#xA;    Normal = {&#xA;      guibg = &amp;lt;VALUE-HERE&amp;gt;,&#xA;    },&#xA;    NormalFloat = {&#xA;      link = &#39;Normal&#39;&#xA;    },&#xA;    FloatBorder = {&#xA;      guifg = &amp;lt;VALUE-HERE&amp;gt;,&#xA;      guibg = &amp;lt;VALUE-HERE&amp;gt;,&#xA;    },&#xA;  },&#xA;  shade_terminals = true, -- NOTE: this option takes priority over highlights specified so if you specify Normal highlights you should set this to false&#xA;  shading_factor = &#39;&amp;lt;number&amp;gt;&#39;, -- the degree by which to darken to terminal colour, default: 1 for dark backgrounds, 3 for light&#xA;  start_in_insert = true,&#xA;  insert_mappings = true, -- whether or not the open mapping applies in insert mode&#xA;  terminal_mappings = true, -- whether or not the open mapping applies in the opened terminals&#xA;  persist_size = true,&#xA;  direction = &#39;vertical&#39; | &#39;horizontal&#39; | &#39;tab&#39; | &#39;float&#39;,&#xA;  close_on_exit = true, -- close the terminal window when the process exits&#xA;  shell = vim.o.shell, -- change the default shell&#xA;  -- This field is only relevant if direction is set to &#39;float&#39;&#xA;  float_opts = {&#xA;    -- The border key is *almost* the same as &#39;nvim_open_win&#39;&#xA;    -- see :h nvim_open_win for details on borders however&#xA;    -- the &#39;curved&#39; border is a custom border type&#xA;    -- not natively supported but implemented in this plugin.&#xA;    border = &#39;single&#39; | &#39;double&#39; | &#39;shadow&#39; | &#39;curved&#39; | ... other options supported by win open&#xA;    width = &amp;lt;value&amp;gt;,&#xA;    height = &amp;lt;value&amp;gt;,&#xA;    winblend = 3,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;code&gt;ToggleTerm&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is the command the mappings call under the hood. You can use it directly and prefix it with a count to target a specific terminal. This function also takes arguments &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt;. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:ToggleTerm size=40 dir=~/Desktop direction=horizontal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;dir&lt;/code&gt; is specified on creation toggle term will open at the specified directory. If the terminal has already been opened at a particular directory it will remain in that directory.&lt;/p&gt; &#xA;&lt;p&gt;The directory can also be specified as &lt;code&gt;git_dir&lt;/code&gt; which toggleterm will then use to try and derive the git repo directory. &lt;em&gt;NOTE&lt;/em&gt;: This currently will not work for &lt;code&gt;git-worktrees&lt;/code&gt; or other more complex setups.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;size&lt;/code&gt; is specified and the command opens a split (horizontal/vertical) terminal, the height/width of all terminals in the same direction will be changed to &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;direction&lt;/code&gt; is specified and the command opens a terminal, the terminal will be changed to the specified direction.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;size&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt; are ignored if the command closes a terminal.&lt;/p&gt; &#xA;&lt;h4&gt;Caveats&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Having multiple terminals with different directions open at the same time is currently unsupported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;ToggleTermToggleAll&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command allows you to open all the previously toggled terminal in one go or close all the currently open terminals at once.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;TermExec&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command allows you to open a terminal with a specific action. e.g. &lt;code&gt;2TermExec cmd=&#34;git status&#34; dir=~/&amp;lt;my-repo-path&amp;gt;&lt;/code&gt; will run git status in terminal 2. note that the &lt;code&gt;cmd&lt;/code&gt; argument &lt;strong&gt;must be quoted&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; the &lt;code&gt;dir&lt;/code&gt; argument can also be &lt;em&gt;optionally&lt;/em&gt; quoted if it contains spaces.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cmd&lt;/code&gt; and &lt;code&gt;dir&lt;/code&gt; arguments can also expand the same special keywords as &lt;code&gt;:h expand&lt;/code&gt; e.g. &lt;code&gt;TermExec cmd=&#34;echo %&#34;&lt;/code&gt; will be expanded to &lt;code&gt;TermExec cmd=&#34;echo /file/example&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These special keywords can be escaped using the &lt;code&gt;\&lt;/code&gt; character, if you want to print character as is.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt; arguments are like the &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt; arguments of &lt;code&gt;ToggleTerm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default focus is returned to the original window after executing the command (except for floating terminals). Use argument &lt;code&gt;go_back=0&lt;/code&gt; to disable this behaviour.&lt;/p&gt; &#xA;&lt;p&gt;You can send commands to a terminal without opening its window by using the &lt;code&gt;open=0&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;see &lt;code&gt;:h expand()&lt;/code&gt; for more details&lt;/p&gt; &#xA;&lt;h3&gt;Sending lines to the terminal&lt;/h3&gt; &#xA;&lt;p&gt;You can &#34;send lines&#34; to the toggled terminals with the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:ToggleTermSendCurrentLine &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends the whole line where you are currently standing with your cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ToggleTermSendVisualLines &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends all of the (whole) lines in your visual selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ToggleTermSendVisualSelection &amp;lt;T_ID&amp;gt;&lt;/code&gt;: sends only the visually selected text (this can be a block of text or a selection in a single line)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(&lt;code&gt;&amp;lt;T_ID&lt;/code&gt; is an optional terminal ID parameter which defines where should we send the lines. If the parameter is not provided, then the default is the &lt;code&gt;first terminal&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://user-images.githubusercontent.com/18753533/159889865-724becab-877b-45a2-898e-820afd6a4ee1.mov&#34; controls=&#34;controls&#34; muted height=&#34;640px&#34;&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Set terminal shading&lt;/h3&gt; &#xA;&lt;p&gt;This plugin automatically shades terminal filetypes to be darker than other window you can disable this by setting &lt;code&gt;shade_terminals = false&lt;/code&gt; in the setup object&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;toggleterm&#39;.setup {&#xA;  shade_terminals = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;alternatively you can set &lt;em&gt;which&lt;/em&gt; filetypes should be shaded by setting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- fzf is just an example&#xA;require&#39;toggleterm&#39;.setup {&#xA;  shade_filetypes = { &#34;none&#34;, &#34;fzf&#34; }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;setting &lt;code&gt;&#34;none&#34;&lt;/code&gt; will allow normal terminal buffers to be highlighted.&lt;/p&gt; &#xA;&lt;h3&gt;Set persistent size&lt;/h3&gt; &#xA;&lt;p&gt;By default, this plugin will persist the size of horizontal and vertical terminals. Split terminals in the same direction always have the same size. You can disable this behaviour by setting &lt;code&gt;persist_size = false&lt;/code&gt; in the setup object. Disabling this behaviour forces the opening terminal size to the &lt;code&gt;size&lt;/code&gt; defined in the setup object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;toggleterm&#39;.setup{&#xA;  persist_size = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Terminal window mappings&lt;/h3&gt; &#xA;&lt;p&gt;It can be helpful to add mappings to make moving in and out of a terminal easier once toggled, whilst still keeping it open.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function _G.set_terminal_keymaps()&#xA;  local opts = {noremap = true}&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;esc&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;jk&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-h&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;h]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-j&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;j]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-k&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;k]], opts)&#xA;  vim.api.nvim_buf_set_keymap(0, &#39;t&#39;, &#39;&amp;lt;C-l&amp;gt;&#39;, [[&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-W&amp;gt;l]], opts)&#xA;end&#xA;&#xA;-- if you only want these mappings for toggle term use term://*toggleterm#* instead&#xA;vim.cmd(&#39;autocmd! TermOpen term://* lua set_terminal_keymaps()&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Terminals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/116447435-e69f1480-a84f-11eb-86dd-19fa29646aa1.png&#34; alt=&#34;lazy git&#34;&gt; &lt;em&gt;using &lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;lazygit&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Toggleterm also exposes the &lt;code&gt;Terminal&lt;/code&gt; class so that this can be used to create custom terminals for showing terminal UIs like &lt;code&gt;lazygit&lt;/code&gt;, &lt;code&gt;htop&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;Each terminal can take the following arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Terminal:new {&#xA;  cmd = string -- command to execute when creating the terminal e.g. &#39;top&#39;&#xA;  direction = string -- the layout for the terminal, same as the main config options&#xA;  dir = string -- the directory for the terminal&#xA;  close_on_exit = bool -- close the terminal window when the process exits&#xA;  highlights = table -- a table with highlights&#xA;  env = table -- key:value table with environmental variables passed to jobstart()&#xA;  clear_env = bool -- use only environmental variables from `env`, passed to jobstart()&#xA;  on_open = fun(t: Terminal) -- function to run when the terminal opens&#xA;  on_close = fun(t: Terminal) -- function to run when the terminal closes&#xA;  -- callbacks for processing the output&#xA;  on_stdout = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stdout&#xA;  on_stderr = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stderr&#xA;  on_exit = fun(t: Terminal, job: number, exit_code: number, name: string) -- function to run when terminal process exits&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Terminal  = require(&#39;toggleterm.terminal&#39;).Terminal&#xA;local lazygit = Terminal:new({ cmd = &#34;lazygit&#34;, hidden = true })&#xA;&#xA;function _lazygit_toggle()&#xA;  lazygit:toggle()&#xA;end&#xA;&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;g&#34;, &#34;&amp;lt;cmd&amp;gt;lua _lazygit_toggle()&amp;lt;CR&amp;gt;&#34;, {noremap = true, silent = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new terminal but the specified command is not being run immediately. The command will run once the terminal is opened. Alternatively &lt;code&gt;term:spawn()&lt;/code&gt; can be used to start the command in a background buffer without opening a terminal window yet. If the &lt;code&gt;hidden&lt;/code&gt; key is set to true, this terminal will not be toggled by normal toggleterm commands such as &lt;code&gt;:ToggleTerm&lt;/code&gt; or the open mapping. It will only open and close by using the returned terminal object. A mapping for toggling the terminal can be set as in the example above.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively the terminal can be specified with a count which is the number that can be used to trigger this specific terminal. This can then be triggered using the current count e.g. &lt;code&gt;:5ToggleTerm&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lazygit = Terminal:new({ cmd = &#34;lazygit&#34;, count = 5 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set a custom layout for a terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lazygit = Terminal:new({&#xA;  cmd = &#34;lazygit&#34;,&#xA;  dir = &#34;git_dir&#34;,&#xA;  direction = &#34;float&#34;,&#xA;  float_opts = {&#xA;    border = &#34;double&#34;,&#xA;  },&#xA;  -- function to run on opening the terminal&#xA;  on_open = function(term)&#xA;    vim.cmd(&#34;startinsert!&#34;)&#xA;    vim.api.nvim_buf_set_keymap(term.bufnr, &#34;n&#34;, &#34;q&#34;, &#34;&amp;lt;cmd&amp;gt;close&amp;lt;CR&amp;gt;&#34;, {noremap = true, silent = true})&#xA;  end,&#xA;  -- function to run on closing the terminal&#xA;  on_close = function(term)&#xA;    vim.cmd(&#34;Closing terminal&#34;)&#xA;  end,&#xA;})&#xA;&#xA;function _lazygit_toggle()&#xA;  lazygit:toggle()&#xA;end&#xA;&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;g&#34;, &#34;&amp;lt;cmd&amp;gt;lua _lazygit_toggle()&amp;lt;CR&amp;gt;&#34;, {noremap = true, silent = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: do not use any of the private functionality of the terminal or other non-public parts of the API as these can change in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Statusline&lt;/h3&gt; &#xA;&lt;p&gt;In order to tell each terminal apart you can use the terminal buffer variable &lt;code&gt;b:toggle_number&lt;/code&gt; in your statusline&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; this is pseudo code&#xA;let statusline .= &#39;%{&amp;amp;ft == &#34;toggleterm&#34; ? &#34;terminal (&#34;.b:toggle_number.&#34;)&#34; : &#34;&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom commands&lt;/h3&gt; &#xA;&lt;p&gt;You can create your on commands by using the lua functions this plugin provides directly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;command! -count=1 TermGitPush  lua require&#39;toggleterm&#39;.exec(&#34;git push&#34;,    &amp;lt;count&amp;gt;, 12)&#xA;command! -count=1 TermGitPushF lua require&#39;toggleterm&#39;.exec(&#34;git push -f&#34;, &amp;lt;count&amp;gt;, 12)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Open multiple terminals side-by-side&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Direction&lt;/th&gt; &#xA;   &lt;th&gt;Supported&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vertical&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;horizontal&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tab&lt;/td&gt; &#xA;   &lt;td&gt;✖️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;✖️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In your first terminal, you need to leave the &lt;code&gt;TERMINAL&lt;/code&gt; mode using &lt;kbd&gt;C-\&lt;/kbd&gt;&lt;kbd&gt;C-N&lt;/kbd&gt; which can be remapped to &lt;kbd&gt;Esc&lt;/kbd&gt; for ease of use. &lt;img src=&#34;https://user-images.githubusercontent.com/31947091/133395516-22fef1e6-633d-4964-9175-f76fabf66794.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then you type on: &lt;code&gt;2&amp;lt;C-\&amp;gt;&lt;/code&gt;, and the result: &lt;img src=&#34;https://user-images.githubusercontent.com/31947091/133396789-fdf68b30-3a8c-440b-822f-6549f282c4fc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Explain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: this is the terminal&#39;s number (or ID), your first terminal is &lt;code&gt;1&lt;/code&gt; (e.g. your 3rd terminal will be &lt;code&gt;3&amp;lt;C-\&amp;gt;&lt;/code&gt;, so on).&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;C-\&lt;/kbd&gt;: this is the combined key mapping to the command &lt;code&gt;:ToggleTerm&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>folke/tokyonight.nvim</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/folke/tokyonight.nvim</id>
    <link href="https://github.com/folke/tokyonight.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🏙 A clean, dark Neovim theme written in Lua, with support for lsp, treesitter and lots of plugins. Includes additional themes for Kitty, Alacritty, iTerm and Fish.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🏙 Tokyo Night&lt;/h1&gt; &#xA;&lt;p&gt;A dark and light Neovim theme written in Lua ported from the Visual Studio Code &lt;a href=&#34;https://github.com/enkia/tokyo-night-vscode-theme&#34;&gt;TokyoNight&lt;/a&gt; theme. Includes extra themes for Kitty, Alacritty, iTerm and Fish.&lt;/p&gt; &#xA;&lt;h2&gt;Storm&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115295095-3a9e5080-a10e-11eb-9aed-6054488c46ce.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Night&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115295327-7afdce80-a10e-11eb-89b3-2591262bf95a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Day&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115996270-78c6c480-a593-11eb-8ed0-7d1400b058f5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;supports the latest Neovim 5.0 features like TreeSitter and LSP&lt;/li&gt; &#xA; &lt;li&gt;minimal inactive statusline&lt;/li&gt; &#xA; &lt;li&gt;vim terminal colors&lt;/li&gt; &#xA; &lt;li&gt;darker background for sidebar-like windows&lt;/li&gt; &#xA; &lt;li&gt;color configs for &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf.html?highlight=include&#34;&gt;Kitty&lt;/a&gt;, &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;Alacritty&lt;/a&gt; and &lt;a href=&#34;https://fishshell.com/&#34;&gt;Fish Shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lualine&lt;/strong&gt; theme&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Plugin Support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;TreeSitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;LSP Diagnostics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lsp-trouble.nvim&#34;&gt;LSP Trouble&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;LSP Saga&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Git Signs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;Git Gutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;NvimTree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liuchengxu/vim-which-key&#34;&gt;WhichKey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;Indent Blankline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;BufferLine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hoob3rt/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;Lightline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;Neogit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lambdalisue/fern.vim&#34;&gt;Fern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim&#34;&gt;Barbar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the theme with your preferred package manager:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;folke/tokyonight.nvim&#39;, { &#39;branch&#39;: &#39;main&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;folke/tokyonight.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;p&gt;Enable the colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;colorscheme tokyonight&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;vim.cmd[[colorscheme tokyonight]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable the &lt;code&gt;TokyoNight&lt;/code&gt; theme for &lt;code&gt;Lualine&lt;/code&gt;, simply specify it in your lualine settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    -- ... your lualine config&#xA;    theme = &#39;tokyonight&#39;&#xA;    -- ... your lualine config&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable the &lt;code&gt;tokyonight&lt;/code&gt; colorscheme for &lt;code&gt;Lightline&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;let g:lightline = {&#39;colorscheme&#39;: &#39;tokyonight&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❗️ configuration needs to be set &lt;strong&gt;BEFORE&lt;/strong&gt; loading the color scheme with &lt;code&gt;colorscheme tokyonight&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The theme comes in three styles, &lt;code&gt;storm&lt;/code&gt;, a darker variant &lt;code&gt;night&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;day&lt;/strong&gt; style will be used if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vim.g.tokyonight_style == &#34;day&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;or &lt;code&gt;vim.o.background == &#34;light&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;storm&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The theme comes in three styles, &lt;code&gt;storm&lt;/code&gt;, a darker variant &lt;code&gt;night&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_terminal_colors&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configure the colors used when opening a &lt;code&gt;:terminal&lt;/code&gt; in Neovim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_comments&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make comments italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_keywords&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make keywords italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_functions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make functions italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_italic_variables&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make variables and identifiers italic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_transparent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable this to disable setting the background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_hide_inactive_statusline&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard &lt;strong&gt;StatusLine&lt;/strong&gt; and &lt;strong&gt;LuaLine&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_sidebars&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set a darker background on sidebar-like windows. For example: &lt;code&gt;[&#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34;]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_transparent_sidebar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sidebar like windows like &lt;code&gt;NvimTree&lt;/code&gt; get a transparent background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_dark_sidebar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sidebar like windows like &lt;code&gt;NvimTree&lt;/code&gt; get a darker background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_dark_float&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Float windows like the lsp diagnostics windows get a darker background.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_colors&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;You can override specific color groups to use other groups or a hex color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_day_brightness&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adjusts the brightness of the colors of the &lt;strong&gt;Day&lt;/strong&gt; style. Number between 0 and 1, from dull to vibrant colors&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokyonight_lualine_bold&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, section headers in the lualine theme will be bold&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example config in Lua&#xA;vim.g.tokyonight_style = &#34;night&#34;&#xA;vim.g.tokyonight_italic_functions = true&#xA;vim.g.tokyonight_sidebars = { &#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34; }&#xA;&#xA;-- Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;vim.g.tokyonight_colors = { hint = &#34;orange&#34;, error = &#34;#ff0000&#34; }&#xA;&#xA;-- Load the colorscheme&#xA;vim.cmd[[colorscheme tokyonight]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Example config in VimScript&#xA;let g:tokyonight_style = &#34;night&#34;&#xA;let g:tokyonight_italic_functions = 1&#xA;let g:tokyonight_sidebars = [ &#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34; ]&#xA;&#xA;&#34; Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;let g:tokyonight_colors = {&#xA;  \ &#39;hint&#39;: &#39;orange&#39;,&#xA;  \ &#39;error&#39;: &#39;#ff0000&#39;&#xA;\ }&#xA;&#xA;&#34; Load the colorscheme&#xA;colorscheme tokyonight&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making &lt;code&gt;undercurls&lt;/code&gt; work properly in &lt;strong&gt;Tmux&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To have undercurls show up and in color, add the following to your &lt;strong&gt;Tmux&lt;/strong&gt; config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Undercurl&#xA;set -g default-terminal &#34;${TERM}&#34;&#xA;set -as terminal-overrides &#39;,*:Smulx=\E[4::%p1%dm&#39;  # undercurl support&#xA;set -as terminal-overrides &#39;,*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&amp;amp;%d::%p1%{255}%&amp;amp;%d%;m&#39;  # underscore colours - needs tmux-3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍭 Extras&lt;/h2&gt; &#xA;&lt;p&gt;Extra color configs for &lt;strong&gt;Kitty&lt;/strong&gt;, &lt;strong&gt;Alacritty&lt;/strong&gt;, &lt;strong&gt;Fish&lt;/strong&gt;, &lt;strong&gt;WezTerm&lt;/strong&gt; and &lt;strong&gt;iTerm&lt;/strong&gt; can be found in &lt;a href=&#34;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/&#34;&gt;extras&lt;/a&gt;. To use them, refer to their respective documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/115395546-d8d6f880-a198-11eb-98fb-a1194787701d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can easily use the color palette for other plugins inside your Neovim config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local colors = require(&#34;tokyonight.colors&#34;).setup({}) -- pass in any of the config options as explained above&#xA;local utils = requires(&#34;tokyonight.util&#34;)&#xA;&#xA;aplugin.background = colors.bg_dark&#xA;aplugin.my_error = util.brighten(colors.red1, 0.3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🔥 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For the &lt;code&gt;extras&lt;/code&gt;, we use a simple template system that can be used to generate themes for the different styles.&lt;/p&gt; &#xA;&lt;p&gt;How to add a new extra template:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;create a file like &lt;code&gt;lua/tokyonight/extra/cool-app.lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;add the name and output file extension to the &lt;code&gt;extras&lt;/code&gt; table in &lt;code&gt;lua/tokyonight/extra/init.lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;in the root directory, run &lt;code&gt;$ lua lua/tokyonight/extra/init.lua&lt;/code&gt; to generate / update extra themes&lt;/li&gt; &#xA; &lt;li&gt;commit the newly created themes under &lt;code&gt;extra/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>rxyhn/dotfiles</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/rxyhn/dotfiles</id>
    <link href="https://github.com/rxyhn/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My awesomewm dotfiles for awesome people! ✨&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/rxhyn-dotfile-header.png&#34; alt=&#34;Home Preview&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#wrench--setup&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-setup.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rxyhn/dotfiles/wiki&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-wiki.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#ocean--gallery&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-gallery.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#money_with_wings--tip-jar&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-tipjar.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- RICE PREVIEW --&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/aesthetic.png&#34; alt=&#34;Rice Preview&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- BADGES --&gt; &#xA;&lt;h1&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img alt=&#34;&#34; align=&#34;left&#34; src=&#34;https://img.shields.io/github/stars/rxyhn/dotfiles?color=162026&amp;amp;labelColor=162026&amp;amp;style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img alt=&#34;&#34; align=&#34;right&#34; src=&#34;https://badges.pufler.dev/visits/rxyhn/dotfiles?style=for-the-badge&amp;amp;color=162026&amp;amp;logoColor=white&amp;amp;labelColor=162026&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Hi there! Thanks for dropping by! &lt;span&gt;💙&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://awesomewm.org/&#34;&gt;&lt;img alt=&#34;AwesomeWM Logo&#34; height=&#34;150&#34; align=&#34;left&#34; src=&#34;https://awesomewm.org/doc/api/images/AUTOGEN_wibox_logo_logo_and_name.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt; Rxyhn&#39;s Aesthetic AwesomeWM Configuration Files! &lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to my AwesomeWM configuration files!&lt;/p&gt; &#xA;&lt;p&gt;This is my personal collection of configuration files.&lt;/p&gt; &#xA;&lt;p&gt;You might be here for looking my AwesomeWM configuration files? or looking for &lt;strong&gt;Linux Rice&lt;/strong&gt; reference?&lt;/p&gt; &#xA;&lt;p&gt;feel free to steal anything from here but don&#39;t forget to give me &lt;strong&gt;credits&lt;/strong&gt; :)&lt;/p&gt; &#xA;&lt;p&gt;AwesomeWM is the most powerful and highly configurable, next generation framework window manager for X, Although it takes time and effort to configure it, but I&#39;m very satisfied with the result.&lt;/p&gt; &#xA;&lt;p&gt;This is a beautiful user interface isn&#39;t it?&lt;/p&gt; &#xA;&lt;p&gt;These dotfiles are made with love, for sure.&lt;/p&gt; &#xA;&lt;!-- INFORMATION --&gt; &#xA;&lt;h2&gt;&lt;span&gt;❄&lt;/span&gt; ‎ &lt;samp&gt;Information&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Here are some details about my setup:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OS:&lt;/strong&gt; &lt;a href=&#34;https://archlinux.org&#34;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WM:&lt;/strong&gt; &lt;a href=&#34;https://github.com/awesomeWM/awesome&#34;&gt;awesome&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Terminal:&lt;/strong&gt; &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;alacritty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shell:&lt;/strong&gt; &lt;a href=&#34;https://www.zsh.org/&#34;&gt;zsh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Editor:&lt;/strong&gt; &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim&lt;/a&gt; / &lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;vscode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compositor:&lt;/strong&gt; &lt;a href=&#34;https://github.com/yshui/picom&#34;&gt;picom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Application Launcher:&lt;/strong&gt; &lt;a href=&#34;https://github.com/davatorium/rofi&#34;&gt;rofi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Music Player&lt;/strong&gt; &lt;a href=&#34;https://github.com/ncmpcpp/ncmpcpp&#34;&gt;ncmpcpp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AwesomeWM Modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/blingcorp/bling&#34;&gt;bling&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adds new layouts, modules, and widgets that try to primarily focus on window management&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/andOrlando/rubato&#34;&gt;rubato&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Creates smooth animations with a slope curve for awesomeWM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/xinhaoyuan/layout-machi&#34;&gt;layout-machi&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Manual layout for Awesome with an interactive editor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/andOrlando/color&#34;&gt;color&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clean and efficient api for color conversion in lua&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Aire-One/awesome-battery_widget&#34;&gt;UPower Battery Widget&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A UPowerGlib based battery widget for the Awesome WM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Main Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dashboard&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Animated Dock&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Info Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Notification Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Word Clock Lockscreen&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exit Screen&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Music Player&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;App Launcher&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Github Activity Previews&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brightness / Volume OSD&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battery Indicator&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wifi Indicator&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This repo has a wiki! You can check it by clicking &lt;del&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UIp6_0kct_U&#34;&gt;here&lt;/a&gt;&lt;/del&gt; &lt;a href=&#34;https://github.com/rxyhn/dotfiles/wiki&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- SETUP --&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔧&lt;/span&gt; ‎ &lt;samp&gt;Setup&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is step-by-step how to install these dotfiles. Just &lt;a href=&#34;https://en.wikipedia.org/wiki/RTFM&#34;&gt;R.T.F.M&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;1. Install Required Dependencies and Enable Services&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; ‎ &lt;strong&gt;This setup instructions only provided for Arch Linux (and other Arch-based distributions)&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Assuming your &lt;em&gt;AUR Helper&lt;/em&gt; is &lt;a href=&#34;https://github.com/Morganamilo/paru&#34;&gt;paru&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;First of all you should install the &lt;a href=&#34;https://github.com/awesomeWM/awesome/&#34;&gt;git version of AwesomeWM&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -S awesome-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Install necessary dependencies&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -Sy picom-git alacritty rofi todo-bin acpi acpid acpi_call upower \&#xA;jq inotify-tools polkit-gnome xdotool xclip gpick ffmpeg blueman \&#xA;pipewire pipewire-alsa pipewire-pulse pamixer brightnessctl scrot redshift \&#xA;feh mpv mpd mpc mpdris2 ncmpcpp playerctl --needed &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Enable Services&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl --user enable mpd.service&#xA;systemctl --user start mpd.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;2. Install My AwesomeWM Dotfiles&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Clone this repository&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recurse-submodules https://github.com/rxyhn/dotfiles.git&#xA;cd dotfiles &amp;amp;&amp;amp; git submodule update --remote --merge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Copy config files&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp -r config/* ~/.config/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Install a few fonts (mainly icon fonts) in order for text and icons to be rendered properly.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp -r misc/fonts/* ~/.fonts/&#xA;# or to ~/.local/share/fonts&#xA;cp -r misc/fonts/* ~/.local/share/fonts/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And run this command for your system to detect the newly installed fonts.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fc-cache -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Finally, now you can login with AwesomeWM&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;Congratulations, at this point you have installed this aesthetic dotfiles! &lt;span&gt;🎉&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;Log out from your current desktop session and log in into AwesomeWM&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- MISCELLANEOUS --&gt; &#xA;&lt;h2&gt;&lt;span&gt;🍀&lt;/span&gt; ‎ &lt;samp&gt;Miscellaneous&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;VSCode Themes&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/93292023/170319552-a42b920d-9f59-44d9-a9ad-b3aeed55bf6a.png&#34; alt=&#34;VSCode Preview&#34; width=&#34;500px&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;span&gt;🌌&lt;/span&gt; ‎ &lt;samp&gt;Aesthetic VSCode&lt;/samp&gt;&lt;/p&gt; &#xA; &lt;p&gt;Setup:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Install required extension&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=iocave.customize-ui&#34;&gt;Customize UI&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=antfu.icons-carbon&#34;&gt;Carbon Product Icons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;p&gt;note: You can use any themes, but some of the colors will be overwritten by mine&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;copy config file&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp misc/vscode/User/settings.json ~/.config/Code/User&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Touchpad tap-to-click &amp;amp; natural (reverse) scrolling (&lt;a href=&#34;https://wiki.archlinux.org/title/Libinput#Tapping_button_re-mapping&#34;&gt;libinput&lt;/a&gt;)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;/etc/X11/xorg.conf.d/30-touchpad.conf&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cfg&#34;&gt;Section &#34;InputClass&#34;&#xA;    Identifier &#34;touchpad&#34;&#xA;    Driver &#34;libinput&#34;&#xA;    MatchIsTouchpad &#34;on&#34;&#xA;    Option &#34;Tapping&#34; &#34;on&#34;&#xA;    Option &#34;TappingButtonMap&#34; &#34;lmr&#34;&#xA;    Option &#34;NaturalScrolling&#34; &#34;true&#34;&#xA;EndSection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- GALLERY --&gt; &#xA;&lt;h2&gt;&lt;span&gt;🌊&lt;/span&gt; ‎ &lt;samp&gt;Gallery&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Simple, Minimalist and Modern Bar&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/wibar.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Aesthetic Dashboard with neat grid layout and Notification Center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/dashboard.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Complete information, Info Center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/info-center.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;MacOS like control center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/control-center.png&#34; width=&#34;500px&#34; alt=&#34;control center preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Custom mouse-friendly ncmpcpp UI&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/ncmpcpp.png&#34; width=&#34;500px&#34; alt=&#34;ncmpcpp preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Lockscreen with &lt;a href=&#34;https://github.com/RMTT/lua-pam&#34;&gt;PAM Integration&lt;/a&gt;&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/lockscreen.png&#34; width=&#34;500px&#34; alt=&#34;word clock lockscreen preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Minimalist Exitscreen&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/exitscreen.png&#34; width=&#34;500px&#34; alt=&#34;exitscreen preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- HISTORY --&gt; &#xA;&lt;h2&gt;&lt;span&gt;🗾&lt;/span&gt; ‎ &lt;samp&gt;History&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Ngl this is started when im feel bored lol and decided to start using Linux, more precisely in January 2022. Fyi im a &lt;strong&gt;new Linux user,&lt;/strong&gt; when it&#39;s in &lt;a href=&#34;https://facebook.com/groups/linuxart&#34;&gt;Linuxer Desktop Art&lt;/a&gt; i saw a linux setup that caught my eye, then I&#39;m interested in and trying something similar, So yeaaaaaah this is my current setup, my purpose of doing this is to hone my skills to make an attractive UI and also as a hobby. I wanna say thank you to those of you who like and love my setup &amp;lt;3&lt;/p&gt; &#xA;&lt;pre align=&#34;center&#34;&gt;&#xA;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#japan--history&#34;&gt;&#xA;&lt;img alt=&#34;&#34; align=&#34;center&#34; width=&#34;96%&#34; src=&#34;https://api.star-history.com/svg?repos=rxyhn/dotfiles&amp;amp;type=Date&#34;&gt;&#xA;&lt;/a&gt;&#xA;&lt;/pre&gt; &#xA;&lt;!-- TIP JAR --&gt; &#xA;&lt;h2&gt;&lt;span&gt;💸&lt;/span&gt; ‎ &lt;samp&gt;TIP JAR&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you enjoyed it and would like to show your appreciation, you may want to tip me here.&lt;/p&gt; &#xA;&lt;p&gt;It is never required but always appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Thanks from the bottom of my heart! ‎ &lt;span&gt;💗&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/rxyhn&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ACKNOWLEDGEMENTS --&gt; &#xA;&lt;h2&gt;&lt;span&gt;💡&lt;/span&gt; ‎ &lt;samp&gt;Acknowledgements&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Special thanks to&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Contributors&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/rxyhn&#34;&gt;&lt;code&gt;rxyhn&lt;/code&gt;&lt;/a&gt; &lt;em&gt;there&#39;s nothing wrong with thanking yourself right?&lt;/em&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ner0z&#34;&gt;&lt;code&gt;ner0z&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/paulhersch&#34;&gt;&lt;code&gt;paulhersch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ChocolateBread799&#34;&gt;&lt;code&gt;ChocolateBread799&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/janleigh&#34;&gt;&lt;code&gt;janleigh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/rototrash&#34;&gt;&lt;code&gt;rototrash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;And for them, ofc.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/elenapan&#34;&gt;&lt;code&gt;elenapan&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/manilarome&#34;&gt;&lt;code&gt;manilarome&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/JavaCafe01&#34;&gt;&lt;code&gt;JavaCafe01&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/andOrlando&#34;&gt;&lt;code&gt;andOrlando&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rxyhn/AwesomeWM-Dotfiles/raw/main/.github/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?style=flat-square&amp;amp;label=License&amp;amp;message=GPL-3.0&amp;amp;logoColor=eceff4&amp;amp;logo=github&amp;amp;colorA=162026&amp;amp;colorB=162026&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>L3MON4D3/LuaSnip</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/L3MON4D3/LuaSnip</id>
    <link href="https://github.com/L3MON4D3/LuaSnip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snippet Engine for Neovim written in Lua.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/%23luasnip:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/luasnip:matrix.org?label=Matrix&amp;amp;logo=matrix&#34; alt=&#34;LuaSnip&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LuaSnip&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/41961280/122515860-5179fa00-d00e-11eb-91f7-331893f61fbf.mp4&#34;&gt;https://user-images.githubusercontent.com/41961280/122515860-5179fa00-d00e-11eb-91f7-331893f61fbf.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tabstops&lt;/li&gt; &#xA; &lt;li&gt;Text-Transformations using Lua functions&lt;/li&gt; &#xA; &lt;li&gt;Conditional Expansion&lt;/li&gt; &#xA; &lt;li&gt;Defining nested Snippets&lt;/li&gt; &#xA; &lt;li&gt;Filetype-specific Snippets&lt;/li&gt; &#xA; &lt;li&gt;Choices&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Snippet creation&lt;/li&gt; &#xA; &lt;li&gt;Regex-Trigger&lt;/li&gt; &#xA; &lt;li&gt;Autotriggered Snippets&lt;/li&gt; &#xA; &lt;li&gt;Fast&lt;/li&gt; &#xA; &lt;li&gt;Parse &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specification#snippet_syntax&#34;&gt;LSP-Style&lt;/a&gt; Snippets either directly in lua, as a vscode package or a snipmate snippet collection.&lt;/li&gt; &#xA; &lt;li&gt;Expand LSP-Snippets with &lt;a href=&#34;https://github.com/hrsh7th/nvim-compe&#34;&gt;nvim-compe&lt;/a&gt; (or its&#39; successor, &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; (requires &lt;a href=&#34;https://github.com/saadparwaiz1/cmp_luasnip&#34;&gt;cmp_luasnip&lt;/a&gt;))&lt;/li&gt; &#xA; &lt;li&gt;Snippet history (jump back into older snippets)&lt;/li&gt; &#xA; &lt;li&gt;Resolve filetype at the cursor using Treesitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Drawbacks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Snippets that make use of the entire functionality of this plugin have to be defined in Lua (but 95% of snippets can be written in lsp-syntax).&lt;/li&gt; &#xA; &lt;li&gt;The LSP-parser does not support Regex-Transformations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Neovim &amp;gt;= 0.5 (extmarks)&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Ie. With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Keymaps&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; press &amp;lt;Tab&amp;gt; to expand or jump in a snippet. These can also be mapped separately&#xA;&#34; via &amp;lt;Plug&amp;gt;luasnip-expand-snippet and &amp;lt;Plug&amp;gt;luasnip-jump-next.&#xA;imap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;Tab&amp;gt; luasnip#expand_or_jumpable() ? &#39;&amp;lt;Plug&amp;gt;luasnip-expand-or-jump&#39; : &#39;&amp;lt;Tab&amp;gt;&#39; &#xA;&#34; -1 for jumping backwards.&#xA;inoremap &amp;lt;silent&amp;gt; &amp;lt;S-Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require&#39;luasnip&#39;.jump(-1)&amp;lt;Cr&amp;gt;&#xA;&#xA;snoremap &amp;lt;silent&amp;gt; &amp;lt;Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;luasnip&#39;).jump(1)&amp;lt;Cr&amp;gt;&#xA;snoremap &amp;lt;silent&amp;gt; &amp;lt;S-Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;luasnip&#39;).jump(-1)&amp;lt;Cr&amp;gt;&#xA;&#xA;&#34; For changing choices in choiceNodes (not strictly necessary for a basic setup).&#xA;imap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;C-E&amp;gt; luasnip#choice_active() ? &#39;&amp;lt;Plug&amp;gt;luasnip-next-choice&#39; : &#39;&amp;lt;C-E&amp;gt;&#39;&#xA;smap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;C-E&amp;gt; luasnip#choice_active() ? &#39;&amp;lt;Plug&amp;gt;luasnip-next-choice&#39; : &#39;&amp;lt;C-E&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-cmp&lt;/code&gt;&#39;s wiki also contains &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki/Example-mappings#luasnip&#34;&gt;an example&lt;/a&gt; for setting up a super-tab-like mapping.&lt;/p&gt; &#xA;&lt;h2&gt;Add Snippets&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#loaders&#34;&gt;the doc&lt;/a&gt; for a general explanation of the loaders and their benefits. The following list serves only as a short overview.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vscode-like&lt;/strong&gt;: To use existing vs-code style snippets from a plugin (eg. &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets&#34;&gt;rafamadriz/friendly-snippets&lt;/a&gt;) simply install the plugin and then add&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;luasnip.loaders.from_vscode&#34;).lazy_load()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;somewhere in your nvim-config. LuaSnip will then load the snippets contained in the plugin on startup. You can also easily &lt;strong&gt;load your own custom vscode style snippets&lt;/strong&gt; by passing the path to the custom snippet-directory to the load function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- load snippets from path/of/your/nvim/config/my-cool-snippets&#xA;require(&#34;luasnip.loaders.from_vscode&#34;).lazy_load({ paths = { &#34;./my-cool-snippets&#34; } })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more info on the vscode-loader, check the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/b5a72f1fbde545be101fcd10b70bcd51ea4367de/Examples/snippets.lua#L501&#34;&gt;examples&lt;/a&gt; or &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#loaders&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Snipmate-like&lt;/strong&gt;: Very similar to Vscode-packages: install a plugin that provides snippets and call the &lt;code&gt;load&lt;/code&gt;-function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;luasnip.loaders.from_snipmate&#34;).lazy_load()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The snipmate format is very simple, so adding &lt;strong&gt;custom snippets&lt;/strong&gt; only requires a few steps:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;add a directory beside your &lt;code&gt;init.vim&lt;/code&gt; (or any other place that is in your &lt;code&gt;runtimepath&lt;/code&gt;) named &lt;code&gt;snippets&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;inside that directory, create files named &lt;code&gt;&amp;lt;filetype&amp;gt;.snippets&lt;/code&gt; and add snippets for the given filetype in it (for inspiration, check &lt;a href=&#34;https://github.com/honza/vim-snippets/tree/master/snippets&#34;&gt;honza/vim-snippets&lt;/a&gt;). &lt;pre&gt;&lt;code class=&#34;language-snipmate&#34;&gt;# comment&#xA;snippet &amp;lt;trigger&amp;gt; &amp;lt;description&amp;gt;&#xA;&amp;lt;snippet-body&amp;gt;&#xA;snippet if C-style if&#xA;if ($1)&#xA;&#x9;$0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Again, there are some &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/b5a72f1fbde545be101fcd10b70bcd51ea4367de/Examples/snippets.lua#L517&#34;&gt;examples&lt;/a&gt; and &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#snipmate&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;: Add the snippets by calling &lt;code&gt;require(&#34;luasnip&#34;).add_snippets(filetype, snippets)&lt;/code&gt;. An example for this can be found &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/Examples/snippets.lua#L190&#34;&gt;here&lt;/a&gt;.&lt;br&gt; This can also be done much cleaner, with all the benefits that come with using a loader, by using the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#lua&#34;&gt;loader for lua&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s also a repository collecting snippets for various languages, &lt;a href=&#34;https://github.com/molleweide/LuaSnip-snippets.nvim&#34;&gt;molleweide/LuaSnip-snippets.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docs and Examples&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md&#34;&gt;&lt;code&gt;DOC.md&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;:help luasnip&lt;/code&gt;) for a short overview and in-depth explanations of the different nodes and available API.&lt;br&gt; I highly recommend looking into (or better yet, &lt;code&gt;:luafile&lt;/code&gt;ing) &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/Examples/snippets.lua&#34;&gt;&lt;code&gt;Examples/snippets.lua&lt;/code&gt;&lt;/a&gt; before writing snippets in lua.&lt;br&gt; The &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/wiki&#34;&gt;Wiki&lt;/a&gt; contains some pretty useful extensions to Luasnip.&lt;/p&gt; &#xA;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;history&lt;/code&gt;: If true, Snippets that were exited can still be jumped back into. As Snippets are not removed when their text is deleted, they have to be removed manually via &lt;code&gt;LuasnipUnlinkCurrent&lt;/code&gt; if &lt;code&gt;delete_check_events&lt;/code&gt; is not enabled (set to eg. &lt;code&gt;&#39;TextChanged&#39;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;update_events&lt;/code&gt;: Choose which events trigger an update of the active nodes&#39; dependents. Default is just &lt;code&gt;&#39;InsertLeave&#39;&lt;/code&gt;, &lt;code&gt;&#39;TextChanged,TextChangedI&#39;&lt;/code&gt; would update on every change.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;region_check_events&lt;/code&gt;: Events on which to leave the current snippet if the cursor is outside its&#39; &#39;region&#39;. Disabled by default, &lt;code&gt;&#39;CursorMoved&#39;&lt;/code&gt;, &lt;code&gt;&#39;CursorHold&#39;&lt;/code&gt; or &lt;code&gt;&#39;InsertEnter&#39;&lt;/code&gt; seem reasonable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delete_check_events&lt;/code&gt;: When to check if the current snippet was deleted, and if so, remove it from the history. Off by default, &lt;code&gt;&#39;TextChanged&#39;&lt;/code&gt; (perhaps &lt;code&gt;&#39;InsertLeave&#39;&lt;/code&gt;, to react to changes done in Insert mode) should work just fine (alternatively, this can also be mapped using &lt;code&gt;&amp;lt;Plug&amp;gt;luasnip-delete-check&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;store_selection_keys&lt;/code&gt;: Mapping for populating &lt;code&gt;TM_SELECTED_TEXT&lt;/code&gt; and related variables (not set by default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enable_autosnippets&lt;/code&gt;: Autosnippets are disabled by default to minimize performance penalty if unused. Set to &lt;code&gt;true&lt;/code&gt; to enable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext_opts&lt;/code&gt;: Additional options passed to extmarks. Can be used to add passive/active highlight on a per-node-basis (more info in DOC.md)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parser_nested_assembler&lt;/code&gt;: Override the default behaviour of inserting a &lt;code&gt;choiceNode&lt;/code&gt; containing the nested snippet and an empty &lt;code&gt;insertNode&lt;/code&gt; for nested placeholders (&lt;code&gt;&#34;${1: ${2: this is nested}}&#34;&lt;/code&gt;). For an example (behaviour more similar to vscode), check &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/wiki/Nice-Configs#imitate-vscodes-behaviour-for-nested-placeholders&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ft_func&lt;/code&gt;: Source of possible filetypes for snippets. Defaults to a function, which returns &lt;code&gt;vim.split(vim.bo.filetype, &#34;.&#34;, true)&lt;/code&gt;, but check &lt;a href=&#34;https://raw.githubusercontent.com/L3MON4D3/LuaSnip/master/lua/luasnip/extras/filetype_functions.lua&#34;&gt;filetype_functions&lt;/a&gt; or &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#filetype_functions&#34;&gt;the docs&lt;/a&gt; for more options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;load_ft_func&lt;/code&gt;: Function to determine which filetypes belong to a given buffer (used for &lt;code&gt;lazy_loading&lt;/code&gt;). &lt;code&gt;fn(bufnr) -&amp;gt; filetypes (string[])&lt;/code&gt;. Again, there are some examples in &lt;a href=&#34;https://raw.githubusercontent.com/L3MON4D3/LuaSnip/master/lua/luasnip/extras/filetype_functions.lua&#34;&gt;filetype_functions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;snip_env&lt;/code&gt;: The global environment will be extended with this table in some places, eg. in files loaded by the &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#lua-snippets-loader&#34;&gt;lua-loader&lt;/a&gt;.&lt;br&gt; Setting &lt;code&gt;snip_env&lt;/code&gt; to &lt;code&gt;{ some_global = &#34;a value&#34; }&lt;/code&gt; will add the global variable &lt;code&gt;some_global&lt;/code&gt; while evaluating these files. If you mind the (probably) large number of generated warnings, consider adding the keys set here to the globals recognized by lua-language-server or add &lt;code&gt;---@diagnostic disable: undefined-global&lt;/code&gt; somewhere in the affected files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/hrsh7th/vim-vsnip/&#34;&gt;vsnip.vim&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>feline-nvim/feline.nvim</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/feline-nvim/feline.nvim</id>
    <link href="https://github.com/feline-nvim/feline.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal, stylish and customizable statusline for Neovim written in Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;feline.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A minimal, stylish and customizable statusline / winbar for Neovim written in Lua&lt;/p&gt; &#xA;&lt;p&gt;Requires Neovim &amp;gt;= 0.7 (or &amp;gt;= 0.5 with the &lt;code&gt;0.5-compat&lt;/code&gt; branch)&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Feline is a Lua statusline plugin that prioritizes speed, customizability and minimalism. It&#39;s fast and never gets in your way. Feline only provides you with the necessary tools that you need to customize the statusline to your liking and avoids feature-bloat. It&#39;s also extremely customizable and allows you to configure it in any way you wish to. Feline also has reasonable defaults for those who don&#39;t want to configure things and just want a good out of the box experience.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ease-of-use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Complete customizability over every component.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/#default-providers&#34;&gt;Built-in providers&lt;/a&gt; such as:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Vi-mode&lt;/li&gt; &#xA;   &lt;li&gt;File info&lt;/li&gt; &#xA;   &lt;li&gt;Cursor position&lt;/li&gt; &#xA;   &lt;li&gt;Diagnostics (using &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;Neovim&#39;s built-in LSP&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Git branch and diffs (using &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim/&#34;&gt;gitsigns.nvim&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;and many more&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Minimalistic, only provides the bare minimum and allows the user to build their own components very easily.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Winbar support.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Necessary &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Neovim v0.7 or greater (v0.5 or greater if using the &lt;code&gt;0.5-compat&lt;/code&gt; branch)&lt;/li&gt; &#xA;   &lt;li&gt;You must have 24-bit RGB color enabled in Neovim (do &lt;code&gt;:help &#39;termguicolors&#39;&lt;/code&gt; in Neovim for more info)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optional &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Neovim v0.8 or greater - For winbar support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons/&#34;&gt;nvim-web-devicons&lt;/a&gt; - For icon support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/&#34;&gt;A patched font&lt;/a&gt; - For icon support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim/&#34;&gt;gitsigns.nvim&lt;/a&gt; - For &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/#git&#34;&gt;git providers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Some of these configurations may be outdated and may need to be changed prior to use. A few of the configurations are missing a link because the link to them was removed due to the link no longer being valid.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default setup:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/29580810/114544000-d3028400-9c7b-11eb-856c-2feb166334b2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default no-icons setup:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/29580810/114742106-36201380-9d6d-11eb-9866-e8c0fef8a1bd.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/crivotz/nv-ide/raw/master/lua/plugins/feline.lua&#34;&gt;Config by crivotz:&lt;/a&gt;&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/3275600/114841377-0ce89d00-9dd8-11eb-82b4-b3ee332771c2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/6cdh/dotfiles/raw/62959d27344dade28d6dd638252cd82accb309ab/nvim/.config/nvim/lua/statusline.lua&#34;&gt;Config by 6cdh:&lt;/a&gt;&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/39000776/114838041-e68e2600-9e06-11eb-9334-431a627ff144.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Config by luizcoro2:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70335871/115327167-dd81b980-a164-11eb-9c02-7a3a1b6a94b5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Config by rafamadriz (classic):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gruvbox:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/67771985/116002735-a7bc5500-a5ea-11eb-82e3-86d1837902cf.png&#34; alt=&#34;image&#34;&gt; &lt;strong&gt;Nord:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/67771985/116002779-d3d7d600-a5ea-11eb-8772-7cb85d7bc324.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Config by rafamadriz (slant):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gruvbox:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/67771985/116002799-e94d0000-a5ea-11eb-9472-da0d75bbcceb.png&#34; alt=&#34;image&#34;&gt; &lt;strong&gt;Nord:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/67771985/116002808-efdb7780-a5ea-11eb-97eb-caf7875e9a3d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Config by rafamadriz (VSCode):&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/67771985/117713773-9d42b380-b1c5-11eb-8a8b-76949c9b2db1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gist.github.com/pianocomposer321/6151c458132a97590d21415db67361a6&#34;&gt;Config by pianocomposer321:&lt;/a&gt;&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/54072354/117869424-65d51500-b260-11eb-898c-0a0b987a6275.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ibhagwan/nvim-lua/raw/main/lua/plugins/feline.lua&#34;&gt;Config by iBhagwan:&lt;/a&gt;&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/59988195/133922136-3d037c37-7a3f-4e1b-b42e-c50b22fedfdb.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/EdenEast/nyx/raw/8a9819e/config/.config/nvim/lua/eden/modules/ui/feline/init.lua&#34;&gt;Config by EdenEast&lt;/a&gt;&lt;/strong&gt; (Colors generated from applied colorscheme)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nightfox&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/137549252-333f074e-47a0-464f-ac8a-7ce0ee43433c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dayfox&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/137549328-eb5f51c2-bd7b-4c9e-9080-b6132b688459.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can add your own configuration to this list. If you&#39;re interested, simply make a &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/CONTRIBUTING.md&#34;&gt;Pull Request&lt;/a&gt; and I&#39;ll add it.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim/&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;feline-nvim/feline.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug/&#34;&gt;vim-plug&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;feline-nvim/feline.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a compatibility branch&lt;/h3&gt; &#xA;&lt;p&gt;Feline has compatibility branches which are versions that have compatibility with an older Neovim version. The compatibility branches are old and usually don&#39;t contain the latest changes to Feline, though the changes may occasionally be backported. However, these branches are useful if you don&#39;t have the currently required minimum version of Neovim to use Feline. The compatibility branches are named like &lt;code&gt;{neovim-version}-compat&lt;/code&gt; where &lt;code&gt;{neovim-version}&lt;/code&gt; is the version of Neovim it maintains compatibility with. For example, the &lt;code&gt;0.5-compat&lt;/code&gt; branch is compatible with Neovim 0.5. Note that there may not be a compatibility branch for all versions and there may be gaps in the compatibility versions. Here&#39;s how you can install a compatibility branch instead of the master branch:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim/&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#39;feline-nvim/feline.nvim&#39;, branch = &#39;0.5-compat&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug/&#34;&gt;vim-plug&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;feline-nvim/feline.nvim&#39;, { &#39;branch&#39;: &#39;0.5-compat&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compatibility branches for versions that are 4 or more (minor) versions older than the latest Neovim version may be removed at any time, so use them at your own risk.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Using the default configuration&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve installed Feline, it&#39;s extremely easy to get started with it. If you don&#39;t mind using the default settings, you can just call Feline&#39;s &lt;code&gt;setup()&lt;/code&gt; function in your configuration. Like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;feline&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that&#39;s it! It&#39;s as easy as that. If you want to setup the &lt;code&gt;&#39;winbar&#39;&lt;/code&gt; alongside the statusline, just add this line next to the previous line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;feline&#39;).winbar.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Feline to fit your needs&lt;/h3&gt; &#xA;&lt;p&gt;If the default configuration doesn&#39;t fit your needs and you want to build your own statusline configuration, it&#39;s highly recommended to configure Feline to suit your needs. The only prerequisite is knowing the basics of Lua. Feline provides a ton of configuration options which can let you build your statusline exactly how you want it as long. To see how to do that, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/USAGE.md&#34;&gt;USAGE&lt;/a&gt; or use &lt;code&gt;:help feline.txt&lt;/code&gt; inside Neovim to read the USAGE documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;h3&gt;Common issues&lt;/h3&gt; &#xA;&lt;h4&gt;Feline crashes or disappears for seemingly no reason&lt;/h4&gt; &#xA;&lt;p&gt;This can be caused if you forget to remove your other statusline plugins after installing Feline. Make sure all other statusline plugins are removed before you install Feline, that should fix the issue.&lt;/p&gt; &#xA;&lt;h3&gt;Reporting issues or feature requests&lt;/h3&gt; &#xA;&lt;p&gt;If you have an issue that you can&#39;t find the fix to in the documentation or want to request a feature you think is absolutely necessary, feel free to make a new &lt;a href=&#34;https://github.com/feline-nvim/feline.nvim/issues&#34;&gt;Issue&lt;/a&gt; and I will try my best to look into it. If you want to contribute to Feline, you can make a Pull Request. For more details, please see: &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Feline?&lt;/h2&gt; &#xA;&lt;p&gt;Now, you might be thinking, why do we need another statusline plugin? We&#39;ve already got a bunch of brilliant statusline plugins like galaxyline, airline, lualine, expressline etc. and all of them are excellent. So then, why Feline?&lt;/p&gt; &#xA;&lt;p&gt;I&#39;d like the preface this by saying that what I&#39;m about to say can be (and probably is) very biased and opinionated. Take what&#39;s being said here with a grain of salt. All of this is purely my opinion and not a fact by any means, so it&#39;s fine to disagree. Moreover, any statement I make here may be incorrect or outdated. In which case, please feel free to make an &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/CONTRIBUTING.md&#34;&gt;Issue or Pull Request&lt;/a&gt; correcting it.&lt;/p&gt; &#xA;&lt;p&gt;I think that despite those plugins being neat, each have their own shortcomings. I find those shortcomings as too much to ignore. For example, most of the statusline plugins are not very customizable and the plugins only provide a limited amount of tools and options for customization. Feline, on the other hand, is built for customizability from the ground up. You are not limited in any way by what the plugin provides. You can control every individual component and its location, appearance, everything about it.&lt;/p&gt; &#xA;&lt;p&gt;Feline is also fast and never gets in your way. It lazy-loads most of its modules, which allows it to start up instantly. Statusline updates with Feline are also blazing fast, which provides for a really smooth experience.&lt;/p&gt; &#xA;&lt;p&gt;Feline is minimal and only implements the bare minimum required for you to get started. It both expects and invites you to make your own components and providers, because nobody understands you better than yourself. To help you do that, Feline provides all the tools and options you would need while also giving you a solid foundation to build from. One could say that the real goal of Feline is to make creating your own statusline as easy for you as possible, while also providing reasonable defaults that should be enough for most people.&lt;/p&gt; &#xA;&lt;p&gt;Documentation is another aspect where I found most statusline plugins to be very lacking. Feline is extremely easy to configure and well-documented, which allows anyone to be able to build their statusline as they wish to. It provides example for every option to allow anyone to easily understand the purpose of any option&lt;/p&gt; &#xA;&lt;p&gt;Lastly, anyone is welcome to contribute to Feline, either by making an Issue or through a Pull Request (see &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for further information). Any kind of contribution starting from fixing a minor typo to adding a massive new feature is welcome.&lt;/p&gt; &#xA;&lt;p&gt;And this plugin is named after cats, you won&#39;t get that anywhere else.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Feline is licensed under GNU GPLv3. For more info, see: &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;h3&gt;Naming&lt;/h3&gt; &#xA;&lt;p&gt;The name of this plugin is a silly pun based on the convention of the names of statusline plugins ending with &#39;line&#39;, while also being named after cats. And in a way this statusline is supposed to be as quick as a cat&#39;s instincts, so I guess the name fits.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/famiuhaque&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-blue.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>williamboman/nvim-lsp-installer</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/williamboman/nvim-lsp-installer</id>
    <link href="https://github.com/williamboman/nvim-lsp-installer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin that allows you to seamlessly manage LSP servers with :LspInstall. With full Windows support!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/6705160/118490159-f064bb00-b71d-11eb-883e-4affbd020074.png&#34; alt=&#34;nvim-lsp-installer&#34; width=&#34;50%&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#available-lsps&#34;&gt;Available LSPs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#custom-servers&#34;&gt;Custom servers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#logo&#34;&gt;Logo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#default-configuration&#34;&gt;Default configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Neovim plugin that allows you to manage LSP servers (servers are installed inside &lt;code&gt;:echo stdpath(&#34;data&#34;)&lt;/code&gt; by default). It works in tandem with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;lspconfig&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; by registering a hook that enhances the &lt;code&gt;PATH&lt;/code&gt; environment variable, allowing neovim&#39;s LSP client to locate the installed server executable.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;On top of just providing commands for installing &amp;amp; uninstalling LSP servers, it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;provides a graphical UI&lt;/li&gt; &#xA; &lt;li&gt;provides the ability to check for, and upgrade to, new server versions through a single interface&lt;/li&gt; &#xA; &lt;li&gt;supports installing custom versions of LSP servers (for example &lt;code&gt;:LspInstall rust_analyzer@nightly&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;relaxes the minimum requirements by attempting multiple different utilities (for example, only one of &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, or &lt;code&gt;Invoke-WebRequest&lt;/code&gt; is required for HTTP requests)&lt;/li&gt; &#xA; &lt;li&gt;hosts &lt;a href=&#34;https://github.com/williamboman/nvim-lspconfig-test&#34;&gt;a suite of system tests&lt;/a&gt; for all supported servers&lt;/li&gt; &#xA; &lt;li&gt;has full support for Windows &lt;img src=&#34;https://user-images.githubusercontent.com/6705160/131256603-cacf7f66-dfa9-4515-8ae4-0e42d08cfc6a.png&#34; height=&#34;20&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;sup&gt;1 - while lspconfig is the main target, this plugin may also be used for other use cases&lt;/sup&gt; &lt;br&gt; &lt;sup&gt;2 - some servers don&#39;t provide an executable, in which case the full command to spawn the server is provided instead&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685720-782e33ba-172c-44b6-8558-fb4e98495294.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685404-2cd34b25-166e-4c84-b9dd-1d5580dc2bdd.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685322-a537f021-5850-4bbc-8be2-1ece5678d205.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685324-1310ae7d-67bf-4053-872c-d27e8a4c4b80.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150686052-fd5c4d54-b4da-4cb3-bb82-a094526ee5b5.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150686059-f1be8131-1274-4f62-9aa8-345599cbd8bc.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requires neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt; and &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;. The &lt;em&gt;full requirements&lt;/em&gt; to install &lt;em&gt;all&lt;/em&gt; servers are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Unix systems: git(1), curl(1) or wget(1), unzip(1), tar(1), gzip(1)&lt;/li&gt; &#xA; &lt;li&gt;For Windows systems: powershell, git, tar, and &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; or &lt;a href=&#34;https://peazip.github.io/&#34;&gt;peazip&lt;/a&gt; or &lt;a href=&#34;https://github.com/mholt/archiver&#34;&gt;archiver&lt;/a&gt; or &lt;a href=&#34;https://www.winzip.com/&#34;&gt;winzip&lt;/a&gt; or &lt;a href=&#34;https://www.win-rar.com/&#34;&gt;WinRAR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Node.js (LTS) &amp;amp; npm&lt;/li&gt; &#xA; &lt;li&gt;Python3 &amp;amp; pip3&lt;/li&gt; &#xA; &lt;li&gt;go &amp;gt;= 1.17&lt;/li&gt; &#xA; &lt;li&gt;JDK&lt;/li&gt; &#xA; &lt;li&gt;Ruby &amp;amp; gem&lt;/li&gt; &#xA; &lt;li&gt;PHP &amp;amp; Composer&lt;/li&gt; &#xA; &lt;li&gt;dotnet&lt;/li&gt; &#xA; &lt;li&gt;pwsh&lt;/li&gt; &#xA; &lt;li&gt;Julia&lt;/li&gt; &#xA; &lt;li&gt;valac (and meson &amp;amp; ninja)&lt;/li&gt; &#xA; &lt;li&gt;rebar3&lt;/li&gt; &#xA; &lt;li&gt;cargo&lt;/li&gt; &#xA; &lt;li&gt;ghcup&lt;/li&gt; &#xA; &lt;li&gt;luarocks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;williamboman/nvim-lsp-installer&#34;,&#xA;    &#34;neovim/nvim-lspconfig&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;williamboman/nvim-lsp-installer&#34;&#xA;Plug &#34;neovim/nvim-lspconfig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;In order for nvim-lsp-installer to register the necessary hooks at the right moment, &lt;strong&gt;make sure you call the &lt;code&gt;.setup()&lt;/code&gt; function before you set up any servers with &lt;code&gt;lspconfig&lt;/code&gt;&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-lsp-installer&#34;).setup {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Important if you use packer.nvim! (click to expand) &lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Do not separate the nvim-lsp-installer setup from lspconfig, for example via the &lt;code&gt;config&lt;/code&gt; hook. Make sure to colocate the nvim-lsp-installer setup with the lspconfig setup. This is because load order of plugins is not guaranteed, leading to nvim-lsp-installer&#39;s &lt;code&gt;config&lt;/code&gt; function potentially executing after lspconfig&#39;s.&lt;/p&gt; &#xA;  &lt;p&gt;❌ Do not do this:&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    {&#xA;        &#34;williamboman/nvim-lsp-installer&#34;,&#xA;        config = function()&#xA;            require(&#34;nvim-lsp-installer&#34;).setup {}&#xA;        end&#xA;    },&#xA;    {&#xA;        &#34;neovim/nvim-lspconfig&#34;,&#xA;        config = function()&#xA;            local lspconfig = require(&#34;lspconfig&#34;)&#xA;            lspconfig.sumneko_lua.setup {}&#xA;        end&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;✅ Instead, do this:&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;williamboman/nvim-lsp-installer&#34;,&#xA;    {&#xA;        &#34;neovim/nvim-lspconfig&#34;,&#xA;        config = function()&#xA;            require(&#34;nvim-lsp-installer&#34;).setup {}&#xA;            local lspconfig = require(&#34;lspconfig&#34;)&#xA;            lspconfig.sumneko_lua.setup {}&#xA;        end&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#configuration&#34;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstallInfo&lt;/code&gt; - opens a graphical overview of your language servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstall [--sync] [server] ...&lt;/code&gt; - installs/reinstalls language servers. Runs in a blocking fashion if the &lt;code&gt;--sync&lt;/code&gt; argument is passed (only recommended for scripting purposes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspUninstall [--sync] &amp;lt;server&amp;gt; ...&lt;/code&gt; - uninstalls language servers. Runs in a blocking fashion if the &lt;code&gt;--sync&lt;/code&gt; argument is passed (only recommended for scripting purposes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspUninstallAll [--no-confirm]&lt;/code&gt; - uninstalls all language servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstallLog&lt;/code&gt; - opens the log file in a new tab window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspPrintInstalled&lt;/code&gt; - prints all installed language servers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You may optionally configure certain behavior of nvim-lsp-installer when calling the &lt;code&gt;.setup()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#default-configuration&#34;&gt;default configuration&lt;/a&gt; for all available settings.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-lsp-installer&#34;).setup({&#xA;    automatic_installation = true, -- automatically detect which servers to install (based on which servers are set up via lspconfig)&#xA;    ui = {&#xA;        icons = {&#xA;            server_installed = &#34;✓&#34;,&#xA;            server_pending = &#34;➜&#34;,&#xA;            server_uninstalled = &#34;✗&#34;&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available LSPs&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Server name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWK&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;awk_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Angular&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;angularls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ansible&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ansiblels&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arduino &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/arduino_language_server/README.md&#34;&gt;(docs!!!)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;arduino_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Assembly (GAS/NASM, GO)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;asm_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Astro&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;astro&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bash&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bashls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Beancount&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;beancount&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bicep&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bicep&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;csharp_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C# &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/omnisharp/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;omnisharp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CMake&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cssls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cssmodules_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clarity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clarity_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clojure&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clojure_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;codeqlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;crystalline&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scry&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cucumber&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cucumber_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dart&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dartls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deno&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;denols&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dhall&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dhall_lsp_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Diagnostic (general purpose server)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;diagnosticls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dlang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;serve_d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dockerls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dot&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EFM (general purpose server)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;efm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESLint &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/eslint/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixirls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elmls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ember&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ember&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Emmet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;emmet_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Erlang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;erlangls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fsautocomplete&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flux_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Foam (OpenFOAM)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;foam_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fortran&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fortls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;golangci_lint_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gopls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Grammarly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;grammarly&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GraphQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;graphql&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Groovy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;groovyls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;html&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haskell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haxe&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;haxe_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hoon&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hoon_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jdtls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;quick_lint_js&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jsonnet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonnet_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Julia&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;julials&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;kotlin_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ltex&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;texlab&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lelwel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lelwel_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sumneko_lua&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;prosemd_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;remark_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zk&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metamath Zero&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mm0_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nickel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nickel_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nimls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCaml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ocamlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCaml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ocamllsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Objective C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OneScript, 1C:Enterprise&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bsl_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenCL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;opencl_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;intelephense&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpactor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;psalm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Perl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;perlnavigator&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Powershell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;powershell_es&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prisma&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;prismals&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Puppet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;puppet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PureScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;purescriptls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jedi_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pyright&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sourcery&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/pylsp/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pylsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;r_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rescriptls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reason&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reason_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Robot Framework&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;robotframework_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rome&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rome&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solargraph&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rust_analyzer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Salt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;salt_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shopify Theme Check&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;theme_check&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;slint_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solang&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity (VSCode)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solidity_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sorbet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorbet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sphinx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;esbonio&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stylelint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;stylelint_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Svelte&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svelte&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sourcekit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;verible&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TOML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;taplo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tailwind CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tailwindcss&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Teal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;teal_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terraform&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;terraformls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terraform &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/tflint/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tflint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TypeScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;V&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vala&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vala_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VimL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vimls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;volar&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuels&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lemminx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yamlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Custom servers&lt;/h2&gt; &#xA;&lt;p&gt;You can create your own installers by using the same APIs nvim-lsp-installer itself uses. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/CUSTOM_SERVERS.md&#34;&gt;CUSTOM_SERVERS.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Logo&lt;/h2&gt; &#xA;&lt;p&gt;Illustrations in the logo are derived from &lt;a href=&#34;https://schauderbasis.de/&#34;&gt;@Kaligule&lt;/a&gt;&#39;s &#34;Robots&#34; collection.&lt;/p&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local DEFAULT_SETTINGS = {&#xA;    -- A list of servers to automatically install if they&#39;re not already installed. Example: { &#34;rust_analyzer&#34;, &#34;sumneko_lua&#34; }&#xA;    -- This setting has no relation with the `automatic_installation` setting.&#xA;    ensure_installed = {},&#xA;&#xA;    -- Whether servers that are set up (via lspconfig) should be automatically installed if they&#39;re not already installed.&#xA;    -- This setting has no relation with the `ensure_installed` setting.&#xA;    -- Can either be:&#xA;    --   - false: Servers are not automatically installed.&#xA;    --   - true: All servers set up via lspconfig are automatically installed.&#xA;    --   - { exclude: string[] }: All servers set up via lspconfig, except the ones provided in the list, are automatically installed.&#xA;    --       Example: automatic_installation = { exclude = { &#34;rust_analyzer&#34;, &#34;solargraph&#34; } }&#xA;    automatic_installation = false,&#xA;&#xA;    ui = {&#xA;        -- Whether to automatically check for outdated servers when opening the UI window.&#xA;        check_outdated_servers_on_open = true,&#xA;&#xA;        icons = {&#xA;            -- The list icon to use for installed servers.&#xA;            server_installed = &#34;◍&#34;,&#xA;            -- The list icon to use for servers that are pending installation.&#xA;            server_pending = &#34;◍&#34;,&#xA;            -- The list icon to use for servers that are not installed.&#xA;            server_uninstalled = &#34;◍&#34;,&#xA;        },&#xA;        keymaps = {&#xA;            -- Keymap to expand a server in the UI&#xA;            toggle_server_expand = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;            -- Keymap to install the server under the current cursor position&#xA;            install_server = &#34;i&#34;,&#xA;            -- Keymap to reinstall/update the server under the current cursor position&#xA;            update_server = &#34;u&#34;,&#xA;            -- Keymap to check for new version for the server under the current cursor position&#xA;            check_server_version = &#34;c&#34;,&#xA;            -- Keymap to update all installed servers&#xA;            update_all_servers = &#34;U&#34;,&#xA;            -- Keymap to check which installed servers are outdated&#xA;            check_outdated_servers = &#34;C&#34;,&#xA;            -- Keymap to uninstall a server&#xA;            uninstall_server = &#34;X&#34;,&#xA;        },&#xA;    },&#xA;&#xA;    -- The directory in which to install all servers.&#xA;    install_root_dir = path.concat { vim.fn.stdpath &#34;data&#34;, &#34;lsp_servers&#34; },&#xA;&#xA;    pip = {&#xA;        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior&#xA;        -- and is not recommended.&#xA;        --&#xA;        -- Example: { &#34;--proxy&#34;, &#34;https://proxyserver&#34; }&#xA;        install_args = {},&#xA;    },&#xA;&#xA;    -- Controls to which degree logs are written to the log file. It&#39;s useful to set this to vim.log.levels.DEBUG when&#xA;    -- debugging issues with server installations.&#xA;    log_level = vim.log.levels.INFO,&#xA;&#xA;    -- Limit for the maximum amount of servers to be installed at the same time. Once this limit is reached, any further&#xA;    -- servers that are requested to be installed will be put in a queue.&#xA;    max_concurrent_installers = 4,&#xA;&#xA;    github = {&#xA;        -- The template URL to use when downloading assets from GitHub.&#xA;        -- The placeholders are the following (in order):&#xA;        -- 1. The repository (e.g. &#34;rust-lang/rust-analyzer&#34;)&#xA;        -- 2. The release version (e.g. &#34;v0.3.0&#34;)&#xA;        -- 3. The asset name (e.g. &#34;rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz&#34;)&#xA;        download_url_template = &#34;https://github.com/%s/releases/download/%s/%s&#34;,&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>NvChad/NvChad</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/NvChad/NvChad</id>
    <link href="https://github.com/NvChad/NvChad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An attempt to make neovim cli functional like an IDE while being very beautiful, blazing fast startuptime ~ 20ms to 70ms&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;NvChad&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://nvchad.github.io/&#34;&gt;Home&lt;/a&gt; &#xA; &lt;span&gt; • &lt;/span&gt; &#xA; &lt;a href=&#34;https://nvchad.github.io/getting-started/setup&#34;&gt;Install&lt;/a&gt; &#xA; &lt;span&gt; • &lt;/span&gt; &#xA; &lt;a href=&#34;https://nvchad.github.io/contribute&#34;&gt;Contribute&lt;/a&gt; &#xA; &lt;span&gt; • &lt;/span&gt; &#xA; &lt;a href=&#34;https://github.com/NvChad/NvChad#gift_heart-support&#34;&gt;Support&lt;/a&gt; &#xA; &lt;span&gt; • &lt;/span&gt; &#xA; &lt;a href=&#34;https://nvchad.github.io/Extras&#34;&gt;Extras&lt;/a&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/NvChad/NvChad/Super-Linter/main?style=flat-square&amp;amp;logo=github&amp;amp;label=Build&amp;amp;color=8DBBE9&#34; alt=&#34;Super Linter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NvChad/NvChad/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/NvChad/NvChad?style=flat-square&amp;amp;logo=GNU&amp;amp;label=License&amp;amp;color=df967f&#34; alt=&#34;License&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim-0.7.0-blueviolet.svg?style=flat-square&amp;amp;logo=Neovim&amp;amp;color=90E59A&amp;amp;logoColor=white&#34; alt=&#34;Neovim Minimum Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NvChad/NvChad/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/NvChad/NvChad.svg?style=flat-square&amp;amp;label=Issues&amp;amp;color=d77982&#34; alt=&#34;GitHub Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/gADmkJb9Fb&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/869557815780470834?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#nvchad:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Matrix-40aa8b.svg?style=flat-square&amp;amp;logo=Matrix&amp;amp;logoColor=white&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/DE_WM&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-blue.svg?style=flat-square&amp;amp;logo=Telegram&amp;amp;logoColor=white&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/dashboard.png&#34;&gt; &#xA;&lt;img src=&#34;https://cdn.discordapp.com/attachments/610012460828852229/853933487295299584/unknown.png&#34;&gt; &#xA;&lt;p&gt;( Zoom in the screenshot )&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/main.png&#34;&gt; &#xA;&lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/rxyhn1.png&#34;&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;NvChad is a neovim config written in lua aiming to provide a base configuration with very beautiful UI and blazing fast startuptime (around 0.02 secs ~ 0.07 secs). We tweak UI plugins such as telescope, nvim-tree, bufferline etc well to provide an asethetic UI experience.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lazy loading is done 93% of the time meaning that plugins will not be loaded by default, they will be loaded only when required also at specific commands, events etc. This lowers the startuptime and it was like 0.07~ secs tested on an old pentium machine 1.4ghz + 4gb ram &amp;amp; HDD.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NvChad isnt a framework! Its supposed to be used as a &#34;base&#34; config, so users could tweak the defaults well, can also remove the things they dont like in the default config and build their config on top of it. Users can tweak the entire default config while staying in their custom config (lua/custom dir). This is the control center of the user&#39;s config and gitignored so the users can stay update to-date with NvChad&#39;s latest config (main branch) while still controlling it with their chadrc (file that controls entire custom dir)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Theme Showcase&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; &lt;b&gt;Images (Click to expand!)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/four_Themes.png&#34; alt=&#34;main themes&#34;&gt; &lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/radium1.png&#34; alt=&#34;radium&#34;&gt; &lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/radium2.png&#34; alt=&#34;radium&#34;&gt; &lt;img src=&#34;https://github.com/NvChad/nvchad.github.io/raw/src/static/img/screenshots/radium3.png&#34; alt=&#34;radium&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;(Note: these are just 4-5 themes, NvChad has around 27+ themes)&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;UI related plugins used&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; &lt;b&gt;Images (Click to expand!)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;h3&gt; Nvim-tree.lua &lt;/h3&gt; &#xA; &lt;p&gt;Fast file tree:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/nvimtree.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Telescope-nvim &lt;/h3&gt; &#xA; &lt;p&gt;A fuzzy file finder, picker, sorter, previewer and much more:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/tel.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Indent-blankline.nvim &lt;/h3&gt; &#xA; &lt;p&gt;Adds indentline:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/blanklineNvim.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Feline.nvim &lt;/h3&gt; &#xA; &lt;p&gt;Highly configurable statusline plugin:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/statusline.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Nvim-bufferline.lua &lt;/h3&gt; &#xA; &lt;p&gt;Better tab implementation:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/bufferline.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Nvim-web-devicons &lt;/h3&gt; &#xA; &lt;p&gt;Lua fork of Vim Devicons which offers more file icon customisability:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/image.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h3&gt; Nvim-treesitter &lt;/h3&gt;Better syntax highlighting for programming languages (NvChad by default comes with Lua/bash treesitter parsers).&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;Without/with Treesitter:&lt;/p&gt; &#xA; &lt;p&gt;&lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siduck/dotfiles/all/rice%20flex/woTree.png&#34;&gt;&lt;/kbd&gt;&lt;/p&gt;&#xA; &lt;hr&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Plugins list&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Many beautiful themes, theme toggler by &lt;a href=&#34;https://github.com/NvChad/base46&#34;&gt;our base46 plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Inbuilt terminal toggling &amp;amp; management with &lt;a href=&#34;https://github.com/NvChad/nvterm&#34;&gt;Nvterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NvChad updater, hide &amp;amp; unhide terminal buffers with &lt;a href=&#34;https://github.com/NvChad/extensions&#34;&gt;NvChad extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;File navigation with &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Managing tabs, buffers with &lt;a href=&#34;https://github.com/akinsho/bufferline.nvim&#34;&gt;bufferline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Beautiful and configurable icons with &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pretty and functional statusline with &lt;a href=&#34;https://github.com/Famiu/feline.nvim&#34;&gt;feline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git diffs and more with &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NeoVim Lsp configuration with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt; and &lt;a href=&#34;https://github.com/williamboman/nvim-lsp-installer/&#34;&gt;lsp-installer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Autocompletion with &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;File searching, previewing image and text files and more with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting with &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Autoclosing braces and html tags with &lt;a href=&#34;https://github.com/windwp/nvim-autopairs&#34;&gt;nvim-autopairs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Indentlines with &lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;indent-blankline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Useful snippets with &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets&#34;&gt;friendly snippets&lt;/a&gt; + &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;LuaSnip&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Popup mappings keysheet &lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;whichkey.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;I (@siduck i.e creator of NvChad) in my initial days of learning to program wanted a lightweight IDE for writing code, I had a very low end system which was like 1.4ghz pentium + 4gb ram &amp;amp; HDD. I was into web dev stuff so many suggested me to use vscode but that thing was very heavy on my system, It took more ram than my browser! ( minimal ungoogled chromium ) so I never tried it again, sublime text was nice but the fear of using proprietary software XD for a linux user bugged me a lot. Then I tried doom-emacs which looked pretty but it was slow and I was lost within its docs, I tried lunarvim but too lazy to read the docs. Doom-emacs and lunarvim inspired me to make a config which is the prettiest + very fast and simple.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I&#39;m decent at ricing i.e customizing system and making it look pretty so I posted my neovim rice on &lt;a href=&#34;https://www.reddit.com/r/neovim/comments/m3xl4f/neovim_rice/&#34;&gt;neovim subreddit&lt;/a&gt;, my neovim-dotfiles github repo blew up and then I had to come up with a name, I was amazed by the chad meme lol so I put NvChad as the name, the chad word in here doesnt literally mean the chad guy but in the sense such as chad linux vs windows i.e meaning superior, best etc. NvChad was made for my personal use but it gained some popularity which inspired me to make a public config i.e config usable by many and less hassle to update as everyone&#39;s going to use the same base config (NvChad) with their custom modifications (which are gitignored so that wont mess up), without the custom config stuff users would have to keep a track of every commit and copy paste git diffs to manually update nvchad.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;💝&lt;/span&gt; Support&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m (@siduck) really very sorry to remove the previous charity links but I had to do it for various reasons. A lot has been going here regarding financial issues and I do need some support if it&#39;s possible from your end. I haven&#39;t graduated yet and it would be great to earn some stuff as that&#39;d help me with daily minor expenses. If you like NvChad and would like to support &amp;amp; appreciate it via donation then I&#39;ll gladly accept it. Dont worry! NvChad will still stay alive &amp;amp; active without your donations! I will remove the sponsor button and re-add the charity links once I get a job, probably a year or two.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/siduck&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Ko--fi-F16061?style=for-the-badge&amp;amp;logo=ko-fi&amp;amp;logoColor=white&#34; alt=&#34;kofi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/siduck76&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&#34; alt=&#34;paypal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/siduck&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Buy_Me_A_Coffee-FFDD00?style=for-the-badge&amp;amp;logo=buy-me-a-coffee&amp;amp;logoColor=black&#34; alt=&#34;buymeacoffee&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/siduck&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Patreon-F96854?style=for-the-badge&amp;amp;logo=patreon&amp;amp;logoColor=white&#34; alt=&#34;patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elianiva&#34;&gt;Elianiva&lt;/a&gt; helped me with NeoVim Lua related issues many times, NvChad wouldn&#39;t exist without his help at all as he helped me in my initial neovim journey!&lt;/li&gt; &#xA; &lt;li&gt;@lorvethe for making the beautiful NvChad logo.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>neovim/nvim-lspconfig</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/neovim/nvim-lspconfig</id>
    <link href="https://github.com/neovim/nvim-lspconfig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickstart configurations for the Nvim LSP client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lspconfig&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;collection of common configurations&lt;/a&gt; for Neovim&#39;s built-in &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;language server client&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This plugin allows for declaratively configuring, launching, and initializing language servers you have installed on your system. &lt;strong&gt;Disclaimer: Language server configurations are provided on a best-effort basis and are community-maintained. See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&#34;&gt;contributions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lspconfig&lt;/code&gt; has extensive help documentation, see &lt;code&gt;:help lspconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;LSP overview&lt;/h1&gt; &#xA;&lt;p&gt;Neovim supports the Language Server Protocol (LSP), which means it acts as a client to language servers and includes a Lua framework &lt;code&gt;vim.lsp&lt;/code&gt; for building enhanced LSP tools. LSP facilitates features like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;go-to-definition&lt;/li&gt; &#xA; &lt;li&gt;find-references&lt;/li&gt; &#xA; &lt;li&gt;hover&lt;/li&gt; &#xA; &lt;li&gt;completion&lt;/li&gt; &#xA; &lt;li&gt;rename&lt;/li&gt; &#xA; &lt;li&gt;format&lt;/li&gt; &#xA; &lt;li&gt;refactor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Neovim provides an interface for all of these features, and the language server client is designed to be highly extensible to allow plugins to integrate language server features which are not yet present in Neovim core such as &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&#34;&gt;&lt;strong&gt;auto&lt;/strong&gt;-completion&lt;/a&gt; (as opposed to manual completion with omnifunc) and &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Snippets&#34;&gt;snippet integration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;These features are not implemented in this repo&lt;/strong&gt;, but in Neovim core. See &lt;code&gt;:help lsp&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Requires &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.6.1&#34;&gt;Neovim v0.6.1&lt;/a&gt; or &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/nightly&#34;&gt;Nightly&lt;/a&gt;. Update Neovim and &#39;lspconfig&#39; before reporting an issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &#39;lspconfig&#39; like any other Vim plugin, e.g. with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local use = require(&#39;packer&#39;).use&#xA;require(&#39;packer&#39;).startup(function()&#xA;  use &#39;wbthomason/packer.nvim&#39; -- Package manager&#xA;  use &#39;neovim/nvim-lspconfig&#39; -- Collection of configurations for the built-in LSP client&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install a language server, e.g. &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md#pyright&#34;&gt;pyright&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g pyright&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the language server setup to your init.lua.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;lspconfig&#39;.pyright.setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch neovim, the language server will now be attached and providing diagnostics (see &lt;code&gt;:LspInfo&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;nvim main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#Keybindings-and-completion&#34;&gt;Keybindings and completion&lt;/a&gt; for mapping useful functions and enabling omnifunc completion&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For a full list of servers, see &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt; or &lt;code&gt;:help lspconfig-server-configurations&lt;/code&gt;. This document contains installation instructions and additional, optional, customization suggestions for each language server. For some servers that are not on your system path (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you will be required to manually add &lt;code&gt;cmd&lt;/code&gt; as an entry in the table passed to &lt;code&gt;setup&lt;/code&gt;. Most language servers can be installed in less than a minute.&lt;/p&gt; &#xA;&lt;h2&gt;Suggested configuration&lt;/h2&gt; &#xA;&lt;p&gt;&#39;lspconfig&#39; does not map keybindings or enable completion by default. The following example configuration provides suggested keymaps for the most commonly used language server functions, and manually triggered completion with omnifunc (&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;strong&gt;you must pass the defined &lt;code&gt;on_attach&lt;/code&gt; as an argument to every &lt;code&gt;setup {}&lt;/code&gt; call&lt;/strong&gt; and &lt;strong&gt;the keybindings in &lt;code&gt;on_attach&lt;/code&gt; only take effect on buffers with an active language server&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Mappings.&#xA;-- See `:help vim.diagnostic.*` for documentation on any of the below functions&#xA;local opts = { noremap=true, silent=true }&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;e&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.diagnostic.open_float()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;[d&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.diagnostic.goto_prev()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;]d&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.diagnostic.goto_next()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;q&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.diagnostic.setloclist()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;&#xA;-- Use an on_attach function to only map the following keys&#xA;-- after the language server attaches to the current buffer&#xA;local on_attach = function(client, bufnr)&#xA;  -- Enable completion triggered by &amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&#xA;  vim.api.nvim_buf_set_option(bufnr, &#39;omnifunc&#39;, &#39;v:lua.vim.lsp.omnifunc&#39;)&#xA;&#xA;  -- Mappings.&#xA;  -- See `:help vim.lsp.*` for documentation on any of the below functions&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;gD&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.declaration()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;gd&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.definition()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;K&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.hover()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;gi&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.implementation()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;C-k&amp;gt;&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.signature_help()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;wa&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.add_workspace_folder()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;wr&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.remove_workspace_folder()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;wl&#39;, &#39;&amp;lt;cmd&amp;gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;D&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.type_definition()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;rn&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.rename()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;ca&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.code_action()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;gr&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.references()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;space&amp;gt;f&#39;, &#39;&amp;lt;cmd&amp;gt;lua vim.lsp.buf.formatting()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;end&#xA;&#xA;-- Use a loop to conveniently call &#39;setup&#39; on multiple servers and&#xA;-- map buffer local keybindings when the language server attaches&#xA;local servers = { &#39;pyright&#39;, &#39;rust_analyzer&#39;, &#39;tsserver&#39; }&#xA;for _, lsp in pairs(servers) do&#xA;  require(&#39;lspconfig&#39;)[lsp].setup {&#xA;    on_attach = on_attach,&#xA;    flags = {&#xA;      -- This will be the default in neovim 0.7+&#xA;      debounce_text_changes = 150,&#xA;    }&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Manual, triggered completion is provided by neovim&#39;s built-in omnifunc. For &lt;strong&gt;auto&lt;/strong&gt;completion, a general purpose &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&#34;&gt;autocompletion plugin&lt;/a&gt; is required.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;If you have an issue with &#39;lspconfig&#39;, the first step is to reproduce with a &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/test/minimal_init.lua&#34;&gt;minimal configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The most common reasons a language server does not start or attach are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The language server is not installed. &#39;lspconfig&#39; does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in each server&#39;s lua module from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is an executable name instead of an absolute path to the executable, ensure it is on your path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Missing filetype plugins. Certain languages are not detecting by vim/neovim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set ft?&lt;/code&gt; shows the filetype and not an empty value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Not triggering root detection. &lt;strong&gt;Some&lt;/strong&gt; language servers will only start if it is opened in a directory, or child directory, containing a file which signals the &lt;em&gt;root&lt;/em&gt; of the project. Most of the time, this is a &lt;code&gt;.git&lt;/code&gt; folder, but each server defines the root config in the lua file. See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt; or the source for the list of root directories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You must pass &lt;code&gt;on_attach&lt;/code&gt; and &lt;code&gt;capabilities&lt;/code&gt; for &lt;strong&gt;each&lt;/strong&gt; &lt;code&gt;setup {}&lt;/code&gt; if you want these to take effect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Do not call &lt;code&gt;setup {}&lt;/code&gt; twice for the same server&lt;/strong&gt;. The second call to &lt;code&gt;setup {}&lt;/code&gt; will overwrite the first.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:LspInfo&lt;/code&gt;. Add the following to your init.vim to enable logging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.set_log_level(&#34;debug&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attempt to run the language server, and open the log with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:LspLog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of the time, the reason for failure is present in the logs.&lt;/p&gt; &#xA;&lt;h2&gt;Built-in commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; shows the status of active and configured language servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following support tab-completion for all arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass &lt;code&gt;autostart = false&lt;/code&gt; to your &lt;code&gt;.setup{}&lt;/code&gt; call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStop &amp;lt;client_id&amp;gt;&lt;/code&gt; Defaults to stopping all buffer clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspRestart &amp;lt;client_id&amp;gt;&lt;/code&gt; Defaults to restarting all buffer clients.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The wiki&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki&#34;&gt;wiki&lt;/a&gt; for additional topics, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Installing-language-servers#automatically&#34;&gt;Automatic server installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Snippets&#34;&gt;Snippets support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Project-local-settings&#34;&gt;Project local settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Language-specific-plugins&#34;&gt;Recommended plugins for enhanced language server features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If you are missing a language server on the list in &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/server_configurations.md&#34;&gt;server_configurations.md&lt;/a&gt;, contributing a new configuration for it would be appreciated. You can follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new file at &lt;code&gt;lua/lspconfig/server_configurations/SERVER_NAME.lua&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy an &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/server_configurations/&#34;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/lua/lspconfig/server_configurations/texlab.lua&#34;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ask questions on our &lt;a href=&#34;https://neovim.discourse.group/c/7-category/7&#34;&gt;Discourse&lt;/a&gt; or in the &lt;a href=&#34;https://app.element.io/#/room/#neovim:matrix.org&#34;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also help out by testing &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/issues?q=is%3Apr+is%3Aopen+label%3Aneeds-testing&#34;&gt;PRs with the &lt;code&gt;needs-testing&lt;/code&gt;&lt;/a&gt; label that affect language servers you use regularly.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wbthomason/packer.nvim</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/wbthomason/packer.nvim</id>
    <link href="https://github.com/wbthomason/packer.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A use-package inspired plugin manager for Neovim. Uses native packages, supports Luarocks dependencies, written in Lua, allows for expressive config&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;packer.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/packer-nvim/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/packer-nvim/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; inspired plugin/package management for Neovim.&lt;/p&gt; &#xA;&lt;p&gt;Have questions? Start a &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Have a problem or idea? Make an &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues&#34;&gt;issue&lt;/a&gt; or a &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/pulls&#34;&gt;PR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Packer is built on native packages. You may wish to read &lt;code&gt;:h packages&lt;/code&gt; before continuing&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#notices&#34;&gt;Notices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#bootstrapping&#34;&gt;Bootstrapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#the-startup-function&#34;&gt;The startup function&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#custom-initialization&#34;&gt;Custom Initialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#specifying-plugins&#34;&gt;Specifying Plugins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#performing-plugin-management-operations&#34;&gt;Performing plugin management operations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#extending-packer&#34;&gt;Extending packer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#compiling-lazy-loaders&#34;&gt;Compiling Lazy-Loaders&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#user-autocommands&#34;&gt;User autocommands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#using-a-floating-window&#34;&gt;Using a floating window&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#profiling&#34;&gt;Profiling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Notices&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-07-31:&lt;/strong&gt; If you&#39;re on macOS, note that building Neovim with the version of &lt;code&gt;luv&lt;/code&gt; from &lt;code&gt;homebrew&lt;/code&gt; &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues/496#issuecomment-890371022&#34;&gt;will cause any &lt;code&gt;packer&lt;/code&gt; command to crash&lt;/a&gt;. More about this issue at &lt;a href=&#34;https://github.com/neovim/neovim/issues/15054&#34;&gt;neovim/neovim#15054&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-07-28:&lt;/strong&gt; &lt;code&gt;packer&lt;/code&gt; will now highlight commits/plugin names with potentially breaking changes (determined by looking for &lt;code&gt;breaking change&lt;/code&gt; or &lt;code&gt;breaking_change&lt;/code&gt;, case insensitive, in the update commit bodies and headers) as &lt;code&gt;WarningMsg&lt;/code&gt; in the status window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-06-06&lt;/strong&gt;: Your Neovim must include &lt;a href=&#34;https://github.com/neovim/neovim/pull/14659&#34;&gt;https://github.com/neovim/neovim/pull/14659&lt;/a&gt;; &lt;code&gt;packer&lt;/code&gt; uses the &lt;code&gt;noautocmd&lt;/code&gt; key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-04-19&lt;/strong&gt;: &lt;code&gt;packer&lt;/code&gt; now provides built-in profiling for your config via the &lt;code&gt;packer_compiled&lt;/code&gt; file. Take a look at &lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#profiling&#34;&gt;the docs&lt;/a&gt; for more information!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-02-18&lt;/strong&gt;: Having trouble with Luarocks on macOS? See &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/issues/180&#34;&gt;this issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-01-19&lt;/strong&gt;: Basic Luarocks support has landed! Use the &lt;code&gt;rocks&lt;/code&gt; key with a string or table to specify packages to install.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-12-10&lt;/strong&gt;: The &lt;code&gt;disable_commands&lt;/code&gt; configuration flag now affects non-&lt;code&gt;startup&lt;/code&gt; use as well. This means that, by default, &lt;code&gt;packer&lt;/code&gt; will create commands for basic operations for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-11-13&lt;/strong&gt;: There is now a default implementation for a floating window &lt;code&gt;open_fn&lt;/code&gt; in &lt;code&gt;packer.util&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-09-04:&lt;/strong&gt; Due to changes to the Neovim &lt;code&gt;extmark&lt;/code&gt; api (see: &lt;a href=&#34;https://github.com/neovim/neovim/commit/3853276d9cacc99a2698117e904475dbf7033383&#34;&gt;https://github.com/neovim/neovim/commit/3853276d9cacc99a2698117e904475dbf7033383&lt;/a&gt;), users will need to update to a version of Neovim &lt;strong&gt;after&lt;/strong&gt; the aforementioned PR was merged. There are currently shims around the changed functions which should maintain support for earlier versions of Neovim, but these are intended to be temporary and will be removed by &lt;strong&gt;2020-10-04&lt;/strong&gt;. Therefore Packer will not work with Neovim v0.4.4, which was released before the &lt;code&gt;extmark&lt;/code&gt; change.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Declarative plugin specification&lt;/li&gt; &#xA; &lt;li&gt;Support for dependencies&lt;/li&gt; &#xA; &lt;li&gt;Support for Luarocks dependencies&lt;/li&gt; &#xA; &lt;li&gt;Expressive configuration and lazy-loading options&lt;/li&gt; &#xA; &lt;li&gt;Automatically compiles efficient lazy-loading code to improve startup time&lt;/li&gt; &#xA; &lt;li&gt;Uses native packages&lt;/li&gt; &#xA; &lt;li&gt;Extensible&lt;/li&gt; &#xA; &lt;li&gt;Written in Lua, configured in Lua&lt;/li&gt; &#xA; &lt;li&gt;Post-install/update hooks&lt;/li&gt; &#xA; &lt;li&gt;Uses jobs for async installation&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;git&lt;/code&gt; tags, branches, revisions, submodules&lt;/li&gt; &#xA; &lt;li&gt;Support for local plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;You need to be running Neovim v0.5.0+&lt;/strong&gt;; &lt;code&gt;packer&lt;/code&gt; makes use of extmarks and other newly-added Neovim features.&lt;/li&gt; &#xA; &lt;li&gt;If you are on Windows 10, you need developer mode enabled in order to use local plugins (creating symbolic links requires admin privileges on Windows - credit to @TimUntersberger for this note)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To get started, first clone this repository to somewhere on your &lt;code&gt;packpath&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Unix, Linux Installation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --depth 1 https://github.com/wbthomason/packer.nvim\&#xA; ~/.local/share/nvim/site/pack/packer/start/packer.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use Arch Linux, there is also &lt;a href=&#34;https://aur.archlinux.org/packages/nvim-packer-git/&#34;&gt;an AUR package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Windows Powershell Installation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/wbthomason/packer.nvim &#34;$env:LOCALAPPDATA\nvim-data\site\pack\packer\start\packer.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can write your plugin specification in Lua, e.g. (in &lt;code&gt;~/.config/nvim/lua/plugins.lua&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- This file can be loaded by calling `lua require(&#39;plugins&#39;)` from your init.vim&#xA;&#xA;-- Only required if you have packer configured as `opt`&#xA;vim.cmd [[packadd packer.nvim]]&#xA;&#xA;return require(&#39;packer&#39;).startup(function()&#xA;  -- Packer can manage itself&#xA;  use &#39;wbthomason/packer.nvim&#39;&#xA;&#xA;  -- Simple plugins can be specified as strings&#xA;  use &#39;9mm/vim-closer&#39;&#xA;&#xA;  -- Lazy loading:&#xA;  -- Load on specific commands&#xA;  use {&#39;tpope/vim-dispatch&#39;, opt = true, cmd = {&#39;Dispatch&#39;, &#39;Make&#39;, &#39;Focus&#39;, &#39;Start&#39;}}&#xA;&#xA;  -- Load on an autocommand event&#xA;  use {&#39;andymass/vim-matchup&#39;, event = &#39;VimEnter&#39;}&#xA;&#xA;  -- Load on a combination of conditions: specific filetypes or commands&#xA;  -- Also run code after load (see the &#34;config&#34; key)&#xA;  use {&#xA;    &#39;w0rp/ale&#39;,&#xA;    ft = {&#39;sh&#39;, &#39;zsh&#39;, &#39;bash&#39;, &#39;c&#39;, &#39;cpp&#39;, &#39;cmake&#39;, &#39;html&#39;, &#39;markdown&#39;, &#39;racket&#39;, &#39;vim&#39;, &#39;tex&#39;},&#xA;    cmd = &#39;ALEEnable&#39;,&#xA;    config = &#39;vim.cmd[[ALEEnable]]&#39;&#xA;  }&#xA;&#xA;  -- Plugins can have dependencies on other plugins&#xA;  use {&#xA;    &#39;haorenW1025/completion-nvim&#39;,&#xA;    opt = true,&#xA;    requires = {{&#39;hrsh7th/vim-vsnip&#39;, opt = true}, {&#39;hrsh7th/vim-vsnip-integ&#39;, opt = true}}&#xA;  }&#xA;&#xA;  -- Plugins can also depend on rocks from luarocks.org:&#xA;  use {&#xA;    &#39;my/supercoolplugin&#39;,&#xA;    rocks = {&#39;lpeg&#39;, {&#39;lua-cjson&#39;, version = &#39;2.1.0&#39;}}&#xA;  }&#xA;&#xA;  -- You can specify rocks in isolation&#xA;  use_rocks &#39;penlight&#39;&#xA;  use_rocks {&#39;lua-resty-http&#39;, &#39;lpeg&#39;}&#xA;&#xA;  -- Local plugins can be included&#xA;  use &#39;~/projects/personal/hover.nvim&#39;&#xA;&#xA;  -- Plugins can have post-install/update hooks&#xA;  use {&#39;iamcco/markdown-preview.nvim&#39;, run = &#39;cd app &amp;amp;&amp;amp; yarn install&#39;, cmd = &#39;MarkdownPreview&#39;}&#xA;&#xA;  -- Post-install/update hook with neovim command&#xA;  use { &#39;nvim-treesitter/nvim-treesitter&#39;, run = &#39;:TSUpdate&#39; }&#xA;&#xA;  -- Post-install/update hook with call of vimscript function with argument&#xA;  use { &#39;glacambre/firenvim&#39;, run = function() vim.fn[&#39;firenvim#install&#39;](0) end }&#xA;&#xA;  -- Use specific branch, dependency and run lua file after load&#xA;  use {&#xA;    &#39;glepnir/galaxyline.nvim&#39;, branch = &#39;main&#39;, config = function() require&#39;statusline&#39; end,&#xA;    requires = {&#39;kyazdani42/nvim-web-devicons&#39;}&#xA;  }&#xA;&#xA;  -- Use dependency and run lua function after load&#xA;  use {&#xA;    &#39;lewis6991/gitsigns.nvim&#39;, requires = { &#39;nvim-lua/plenary.nvim&#39; },&#xA;    config = function() require(&#39;gitsigns&#39;).setup() end&#xA;  }&#xA;&#xA;  -- You can specify multiple plugins in a single call&#xA;  use {&#39;tjdevries/colorbuddy.vim&#39;, {&#39;nvim-treesitter/nvim-treesitter&#39;, opt = true}}&#xA;&#xA;  -- You can alias plugin names&#xA;  use {&#39;dracula/vim&#39;, as = &#39;dracula&#39;}&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you get linter complaints about &lt;code&gt;use&lt;/code&gt; being an undefined global, these errors are spurious - &lt;code&gt;packer&lt;/code&gt; injects &lt;code&gt;use&lt;/code&gt; into the scope of the function passed to &lt;code&gt;startup&lt;/code&gt;. If these errors bother you, the easiest fix is to simply specify &lt;code&gt;use&lt;/code&gt; as an argument to the function you pass to &lt;code&gt;startup&lt;/code&gt;, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup(function(use)&#xA;...your config...&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; provides the following commands after you&#39;ve run and configured &lt;code&gt;packer&lt;/code&gt; with &lt;code&gt;require(&#39;packer&#39;).startup(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- You must run this or `PackerSync` whenever you make changes to your plugin configuration&#xA;-- Regenerate compiled loader file&#xA;:PackerCompile&#xA;&#xA;-- Remove any disabled or unused plugins&#xA;:PackerClean&#xA;&#xA;-- Clean, then install missing plugins&#xA;:PackerInstall&#xA;&#xA;-- Clean, then update and install plugins&#xA;:PackerUpdate&#xA;&#xA;-- Perform `PackerUpdate` and then `PackerCompile`&#xA;:PackerSync&#xA;&#xA;-- Loads opt plugin immediately&#xA;:PackerLoad completion-nvim ale&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can configure Neovim to automatically run &lt;code&gt;:PackerCompile&lt;/code&gt; whenever &lt;code&gt;plugins.lua&lt;/code&gt; is updated with &lt;a href=&#34;https://neovim.io/doc/user/autocmd.html#:autocmd&#34;&gt;an autocommand&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;augroup packer_user_config&#xA;  autocmd!&#xA;  autocmd BufWritePost plugins.lua source &amp;lt;afile&amp;gt; | PackerCompile&#xA;augroup end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This autocommand can be placed in your &lt;code&gt;init.vim&lt;/code&gt;, or any other startup file as per your setup. Placing this in &lt;code&gt;plugins.lua&lt;/code&gt; could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd([[&#xA;  augroup packer_user_config&#xA;    autocmd!&#xA;    autocmd BufWritePost plugins.lua source &amp;lt;afile&amp;gt; | PackerCompile&#xA;  augroup end&#xA;]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bootstrapping&lt;/h2&gt; &#xA;&lt;p&gt;If you want to automatically install and set up &lt;code&gt;packer.nvim&lt;/code&gt; on any machine you clone your configuration to, add the following snippet (which is due to @Iron-E and @khuedoan) somewhere in your config &lt;strong&gt;before&lt;/strong&gt; your first usage of &lt;code&gt;packer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local fn = vim.fn&#xA;local install_path = fn.stdpath(&#39;data&#39;)..&#39;/site/pack/packer/start/packer.nvim&#39;&#xA;if fn.empty(fn.glob(install_path)) &amp;gt; 0 then&#xA;  packer_bootstrap = fn.system({&#39;git&#39;, &#39;clone&#39;, &#39;--depth&#39;, &#39;1&#39;, &#39;https://github.com/wbthomason/packer.nvim&#39;, install_path})&#xA;end&#xA;&#xA;return require(&#39;packer&#39;).startup(function(use)&#xA;  -- My plugins here&#xA;  -- use &#39;foo1/bar1.nvim&#39;&#xA;  -- use &#39;foo2/bar2.nvim&#39;&#xA;&#xA;  -- Automatically set up your configuration after cloning packer.nvim&#xA;  -- Put this at the end after all plugins&#xA;  if packer_bootstrap then&#xA;    require(&#39;packer&#39;).sync()&#xA;  end&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the following command (with &lt;code&gt;packer&lt;/code&gt; bootstrapped) to have &lt;code&gt;packer&lt;/code&gt; setup your configuration (or simply run updates) and close once all operations are completed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nvim --headless -c &#39;autocmd User PackerComplete quitall&#39; -c &#39;PackerSync&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The above snippets give some examples of &lt;code&gt;packer&lt;/code&gt; features and use. Examples include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;My dotfiles: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/lua/plugins.lua&#34;&gt;Specification file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/lua/plugins.lua&#34;&gt;Loading file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/dotfiles/raw/linux/neovim/.config/nvim/plugin/packer_compiled.lua&#34;&gt;Generated lazy-loader file&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;An example using the &lt;code&gt;startup&lt;/code&gt; method: &lt;a href=&#34;https://github.com/tjdevries/config_manager/raw/master/xdg_config/nvim/lua/tj/plugins.lua&#34;&gt;tjdevries&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using this method, you do not require a &#34;loading&#34; file. You can simply &lt;code&gt;lua require(&#39;plugins&#39;)&lt;/code&gt; from your &lt;code&gt;init.vim&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following is a more in-depth explanation of &lt;code&gt;packer&lt;/code&gt;&#39;s features and use.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;startup&lt;/code&gt; function&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; provides &lt;code&gt;packer.startup(spec)&lt;/code&gt;, which is used in the above examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;startup&lt;/code&gt; is a convenience function for simple setup and can be invoked as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a function: &lt;code&gt;packer.startup(function() use &#39;tjdevries/colorbuddy.vim&#39; end)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a table with a function as its first element and config overrides as another element: &lt;code&gt;packer.startup({function() use &#39;tjdevries/colorbuddy.vim&#39; end, config = { ... }})&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt; can be a table with a table of plugin specifications as its first element, config overrides as another element, and optional rock specifications as another element: &lt;code&gt;packer.startup({{&#39;tjdevries/colorbuddy.vim&#39;}, config = { ... }, rocks = { ... }})&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom Initialization&lt;/h3&gt; &#xA;&lt;p&gt;You are not required to use &lt;code&gt;packer.startup&lt;/code&gt; if you prefer a more manual setup with finer control over configuration and loading.&lt;/p&gt; &#xA;&lt;p&gt;To take this approach, load &lt;code&gt;packer&lt;/code&gt; like any other Lua module. You must call &lt;code&gt;packer.init()&lt;/code&gt; before performing any operations; it is recommended to call &lt;code&gt;packer.reset()&lt;/code&gt; if you may be re-running your specification code (e.g. by sourcing your plugin specification file with &lt;code&gt;luafile&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You may pass a table of configuration values to &lt;code&gt;packer.init()&lt;/code&gt; to customize its operation. The default configuration values (and structure of the configuration table) are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ensure_dependencies   = true, -- Should packer install plugin dependencies?&#xA;  snapshot = nil, -- Name of the snapshot you would like to load at startup&#xA;  snapshot_path = join_paths(stdpath &#39;cache&#39;, &#39;packer.nvim&#39;), -- Default save directory for snapshots&#xA;  package_root   = util.join_paths(vim.fn.stdpath(&#39;data&#39;), &#39;site&#39;, &#39;pack&#39;),&#xA;  compile_path = util.join_paths(vim.fn.stdpath(&#39;config&#39;), &#39;plugin&#39;, &#39;packer_compiled.lua&#39;),&#xA;  plugin_package = &#39;packer&#39;, -- The default package for plugins&#xA;  max_jobs = nil, -- Limit the number of simultaneous jobs. nil means no limit&#xA;  auto_clean = true, -- During sync(), remove unused plugins&#xA;  compile_on_sync = true, -- During sync(), run packer.compile()&#xA;  disable_commands = false, -- Disable creating commands&#xA;  opt_default = false, -- Default to using opt (as opposed to start) plugins&#xA;  transitive_opt = true, -- Make dependencies of opt plugins also opt by default&#xA;  transitive_disable = true, -- Automatically disable dependencies of disabled plugins&#xA;  auto_reload_compiled = true, -- Automatically reload the compiled file after creating it.&#xA;  git = {&#xA;    cmd = &#39;git&#39;, -- The base command for git operations&#xA;    subcommands = { -- Format strings for git subcommands&#xA;      update         = &#39;pull --ff-only --progress --rebase=false&#39;,&#xA;      install        = &#39;clone --depth %i --no-single-branch --progress&#39;,&#xA;      fetch          = &#39;fetch --depth 999999 --progress&#39;,&#xA;      checkout       = &#39;checkout %s --&#39;,&#xA;      update_branch  = &#39;merge --ff-only @{u}&#39;,&#xA;      current_branch = &#39;branch --show-current&#39;,&#xA;      diff           = &#39;log --color=never --pretty=format:FMT --no-show-signature HEAD@{1}...HEAD&#39;,&#xA;      diff_fmt       = &#39;%%h %%s (%%cr)&#39;,&#xA;      get_rev        = &#39;rev-parse --short HEAD&#39;,&#xA;      get_msg        = &#39;log --color=never --pretty=format:FMT --no-show-signature HEAD -n 1&#39;,&#xA;      submodules     = &#39;submodule update --init --recursive --progress&#39;&#xA;    },&#xA;    depth = 1, -- Git clone depth&#xA;    clone_timeout = 60, -- Timeout, in seconds, for git clones&#xA;    default_url_format = &#39;https://github.com/%s&#39; -- Lua format string used for &#34;aaa/bbb&#34; style plugins&#xA;  },&#xA;  display = {&#xA;    non_interactive = false, -- If true, disable display windows for all operations&#xA;    open_fn  = nil, -- An optional function to open a window for packer&#39;s display&#xA;    open_cmd = &#39;65vnew \\[packer\\]&#39;, -- An optional command to open a window for packer&#39;s display&#xA;    working_sym = &#39;⟳&#39;, -- The symbol for a plugin being installed/updated&#xA;    error_sym = &#39;✗&#39;, -- The symbol for a plugin with an error in installation/updating&#xA;    done_sym = &#39;✓&#39;, -- The symbol for a plugin which has completed installation/updating&#xA;    removed_sym = &#39;-&#39;, -- The symbol for an unused plugin which was removed&#xA;    moved_sym = &#39;→&#39;, -- The symbol for a plugin which was moved (e.g. from opt to start)&#xA;    header_sym = &#39;━&#39;, -- The symbol for the header line in packer&#39;s display&#xA;    show_all_info = true, -- Should packer show all update details automatically?&#xA;    prompt_border = &#39;double&#39;, -- Border style of prompt popups.&#xA;    keybindings = { -- Keybindings for the display window&#xA;      quit = &#39;q&#39;,&#xA;      toggle_info = &#39;&amp;lt;CR&amp;gt;&#39;,&#xA;      diff = &#39;d&#39;,&#xA;      prompt_revert = &#39;r&#39;,&#xA;    }&#xA;  },&#xA;  luarocks = {&#xA;    python_cmd = &#39;python&#39; -- Set the python command to use for running hererocks&#xA;  },&#xA;  log = { level = &#39;warn&#39; }, -- The default print log level. One of: &#34;trace&#34;, &#34;debug&#34;, &#34;info&#34;, &#34;warn&#34;, &#34;error&#34;, &#34;fatal&#34;.&#xA;  profile = {&#xA;    enable = false,&#xA;    threshold = 1, -- integer in milliseconds, plugins which load faster than this won&#39;t be shown in profile output&#xA;  },&#xA;  autoremove = false, -- Remove disabled or unused plugins without prompting the user&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying plugins&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; is based around declarative specification of plugins. You can declare a plugin using the function &lt;code&gt;packer.use&lt;/code&gt;, which I highly recommend locally binding to &lt;code&gt;use&lt;/code&gt; for conciseness.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;use&lt;/code&gt; takes either a string or a table. If a string is provided, it is treated as a plugin location for a non-optional plugin with no additional configuration. Plugin locations may be specified as&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Absolute paths to a local plugin&lt;/li&gt; &#xA; &lt;li&gt;Full URLs (treated as plugins managed with &lt;code&gt;git&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;username/repo&lt;/code&gt; paths (treated as Github &lt;code&gt;git&lt;/code&gt; plugins)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A table given to &lt;code&gt;use&lt;/code&gt; can take two forms:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A list of plugin specifications (strings or tables)&lt;/li&gt; &#xA; &lt;li&gt;A table specifying a single plugin. It must have a plugin location string as its first element, and may additionally have a number of optional keyword elements, shown below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;myusername/example&#39;,        -- The plugin location string&#xA;  -- The following keys are all optional&#xA;  disable = boolean,           -- Mark a plugin as inactive&#xA;  as = string,                 -- Specifies an alias under which to install the plugin&#xA;  installer = function,        -- Specifies custom installer. See &#34;custom installers&#34; below.&#xA;  updater = function,          -- Specifies custom updater. See &#34;custom installers&#34; below.&#xA;  after = string or list,      -- Specifies plugins to load before this plugin. See &#34;sequencing&#34; below&#xA;  rtp = string,                -- Specifies a subdirectory of the plugin to add to runtimepath.&#xA;  opt = boolean,               -- Manually marks a plugin as optional.&#xA;  branch = string,             -- Specifies a git branch to use&#xA;  tag = string,                -- Specifies a git tag to use. Supports &#39;*&#39; for &#34;latest tag&#34;&#xA;  commit = string,             -- Specifies a git commit to use&#xA;  lock = boolean,              -- Skip updating this plugin in updates/syncs. Still cleans.&#xA;  run = string, function, or table, -- Post-update/install hook. See &#34;update/install hooks&#34;.&#xA;  requires = string or list,   -- Specifies plugin dependencies. See &#34;dependencies&#34;.&#xA;  rocks = string or list,      -- Specifies Luarocks dependencies for the plugin&#xA;  config = string or function, -- Specifies code to run after this plugin is loaded.&#xA;  -- The setup key implies opt = true&#xA;  setup = string or function,  -- Specifies code to run before this plugin is loaded.&#xA;  -- The following keys all imply lazy-loading and imply opt = true&#xA;  cmd = string or list,        -- Specifies commands which load this plugin. Can be an autocmd pattern.&#xA;  ft = string or list,         -- Specifies filetypes which load this plugin.&#xA;  keys = string or list,       -- Specifies maps which load this plugin. See &#34;Keybindings&#34;.&#xA;  event = string or list,      -- Specifies autocommand events which load this plugin.&#xA;  fn = string or list          -- Specifies functions which load this plugin.&#xA;  cond = string, function, or list of strings/functions,   -- Specifies a conditional test to load this plugin&#xA;  module = string or list      -- Specifies Lua module names for require. When requiring a string which starts&#xA;                               -- with one of these module names, the plugin will be loaded.&#xA;  module_pattern = string/list -- Specifies Lua pattern of Lua module names for require. When&#xA;  requiring a string which matches one of these patterns, the plugin will be loaded.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the &lt;code&gt;cmd&lt;/code&gt; option, the command may be a full command, or an autocommand pattern. If the command contains any non-alphanumeric characters, it is assumed to be a pattern, and instead of creating a stub command, it creates a CmdUndefined autocmd to load the plugin when a command that matches the pattern is invoked.&lt;/p&gt; &#xA;&lt;h4&gt;Checking plugin statuses&lt;/h4&gt; &#xA;&lt;p&gt;You can check whether or not a particular plugin is installed with &lt;code&gt;packer&lt;/code&gt; as well as if that plugin is loaded. To do this you can check for the plugin&#39;s name in the &lt;code&gt;packer_plugins&lt;/code&gt; global table. Plugins in this table are saved using only the last section of their names e.g. &lt;code&gt;tpope/vim-fugitive&lt;/code&gt; if installed will be under the key &lt;code&gt;vim-fugitive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;if packer_plugins[&#34;vim-fugitive&#34;] and packer_plugins[&#34;vim-fugitive&#34;].loaded then&#xA;print(&#34;Vim fugitive is loaded&#34;)&#xA;-- other custom logic&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; this table is only available &lt;em&gt;after&lt;/em&gt; &lt;code&gt;packer_compiled.vim&lt;/code&gt; is loaded so cannot be used till &lt;em&gt;after&lt;/em&gt; plugins have been loaded.&lt;/p&gt; &#xA;&lt;h4&gt;Luarocks support&lt;/h4&gt; &#xA;&lt;p&gt;You may specify that a plugin requires one or more Luarocks packages using the &lt;code&gt;rocks&lt;/code&gt; key. This key takes either a string specifying the name of a package (e.g. &lt;code&gt;rocks=lpeg&lt;/code&gt;), or a list specifying one or more packages. Entries in the list may either be strings, a list of strings or a table --- the latter case is used to specify arguments such as the particular version of a package. all supported luarocks keys are allowed except: &lt;code&gt;tree&lt;/code&gt; and &lt;code&gt;local&lt;/code&gt;. Environment variables for the luarocks command can also be specified using the &lt;code&gt;env&lt;/code&gt; key which takes a table as the value as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;rocks = {&#39;lpeg&#39;, {&#39;lua-cjson&#39;, version = &#39;2.1.0&#39;}}&#xA;use_rocks {&#39;lua-cjson&#39;, &#39;lua-resty-http&#39;}&#xA;use_rocks {&#39;luaformatter&#39;, server = &#39;https://luarocks.org/dev&#39;}&#xA;use_rocks {&#39;openssl&#39; env = {OPENSSL_DIR = &#34;/path/to/dir&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, &lt;code&gt;packer&lt;/code&gt; only supports equality constraints on package versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; also provides the function &lt;code&gt;packer.luarocks.install_commands()&lt;/code&gt;, which creates the &lt;code&gt;PackerRocks &amp;lt;cmd&amp;gt; &amp;lt;packages...&amp;gt;&lt;/code&gt; command. &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt; must be one of &#34;install&#34; or &#34;remove&#34;; &lt;code&gt;&amp;lt;packages...&amp;gt;&lt;/code&gt; is one or more package names (currently, version restrictions are not supported with this command). Running &lt;code&gt;PackerRocks&lt;/code&gt; will install or remove the given packages. You can use this command even if you don&#39;t use &lt;code&gt;packer&lt;/code&gt; to manage your plugins. However, please note that (1) packages installed through &lt;code&gt;PackerRocks&lt;/code&gt; &lt;strong&gt;will&lt;/strong&gt; be removed by calls to &lt;code&gt;packer.luarocks.clean()&lt;/code&gt; (unless they are also part of a &lt;code&gt;packer&lt;/code&gt; plugin specification), and (2) you will need to manually invoke &lt;code&gt;packer.luarocks.setup_paths&lt;/code&gt; (or otherwise modify your &lt;code&gt;package.path&lt;/code&gt;) to ensure that Neovim can find the installed packages.&lt;/p&gt; &#xA;&lt;p&gt;Finally, &lt;code&gt;packer&lt;/code&gt; provides the function &lt;code&gt;packer.use_rocks&lt;/code&gt;, which takes a string or table specifying one or more Luarocks packages as in the &lt;code&gt;rocks&lt;/code&gt; key. You can use this to ensure that &lt;code&gt;packer&lt;/code&gt; downloads and manages some rocks which you want to use, but which are not associated with any particular plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Custom installers&lt;/h4&gt; &#xA;&lt;p&gt;You may specify a custom installer &amp;amp; updater for a plugin using the &lt;code&gt;installer&lt;/code&gt; and &lt;code&gt;updater&lt;/code&gt; keys. Note that either both or none of these keys are required. These keys should be functions which take as an argument a &lt;code&gt;display&lt;/code&gt; object (from &lt;code&gt;lua/packer/display.lua&lt;/code&gt;) and return an async function (per &lt;code&gt;lua/packer/async.lua&lt;/code&gt;) which (respectively) installs/updates the given plugin.&lt;/p&gt; &#xA;&lt;p&gt;Providing the &lt;code&gt;installer&lt;/code&gt;/&lt;code&gt;updater&lt;/code&gt; keys overrides plugin type detection, but you still need to provide a location string for the name of the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Update/install hooks&lt;/h4&gt; &#xA;&lt;p&gt;You may specify operations to be run after successful installs/updates of a plugin with the &lt;code&gt;run&lt;/code&gt; key. This key may either be a Lua function, which will be called with the &lt;code&gt;plugin&lt;/code&gt; table for this plugin (containing the information passed to &lt;code&gt;use&lt;/code&gt; as well as output from the installation/update commands, the installation path of the plugin, etc.), a string, or a table of functions and strings.&lt;/p&gt; &#xA;&lt;p&gt;If an element of &lt;code&gt;run&lt;/code&gt; is a string, then either:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If the first character of &lt;code&gt;run&lt;/code&gt; is &#34;:&#34;, it is treated as a Neovim command and executed.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, &lt;code&gt;run&lt;/code&gt; is treated as a shell command and run in the installation directory of the plugin via &lt;code&gt;$SHELL -c &#39;&amp;lt;run&amp;gt;&#39;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Plugins may specify dependencies via the &lt;code&gt;requires&lt;/code&gt; key. This key can be a string or a list (table).&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;requires&lt;/code&gt; is a string, it is treated as specifying a single plugin. If a plugin with the name given in &lt;code&gt;requires&lt;/code&gt; is already known in the managed set, nothing happens. Otherwise, the string is treated as a plugin location string and the corresponding plugin is added to the managed set.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;requires&lt;/code&gt; is a list, it is treated as a list of plugin specifications following the format given above.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ensure_dependencies&lt;/code&gt; is true, the plugins specified in &lt;code&gt;requires&lt;/code&gt; will be installed.&lt;/p&gt; &#xA;&lt;p&gt;Plugins specified in &lt;code&gt;requires&lt;/code&gt; are removed when no active plugins require them.&lt;/p&gt; &#xA;&lt;h4&gt;Sequencing&lt;/h4&gt; &#xA;&lt;p&gt;You may specify a loading order for plugins using the &lt;code&gt;after&lt;/code&gt; key. This key can be a string or a list (table).&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;after&lt;/code&gt; is a string, it must be the name of another plugin managed by &lt;code&gt;packer&lt;/code&gt; (e.g. the final segment of a plugin&#39;s path - for a Github plugin &lt;code&gt;FooBar/Baz&lt;/code&gt;, the name would be just &lt;code&gt;Baz&lt;/code&gt;). If &lt;code&gt;after&lt;/code&gt; is a table, it must be a list of plugin names. If a plugin has an alias (i.e. uses the &lt;code&gt;as&lt;/code&gt; key), this alias is its name.&lt;/p&gt; &#xA;&lt;p&gt;The set of plugins specified in a plugin&#39;s &lt;code&gt;after&lt;/code&gt; key must &lt;strong&gt;all&lt;/strong&gt; be loaded before the plugin using &lt;code&gt;after&lt;/code&gt; will be loaded. For example, in the specification&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  use {&#39;FooBar/Baz&#39;, ft = &#39;bax&#39;}&#xA;  use {&#39;Something/Else&#39;, after = &#39;Baz&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the plugin &lt;code&gt;Else&lt;/code&gt; will only be loaded after the plugin &lt;code&gt;Baz&lt;/code&gt;, which itself is only loaded for files with &lt;code&gt;bax&lt;/code&gt; filetype.&lt;/p&gt; &#xA;&lt;h4&gt;Keybindings&lt;/h4&gt; &#xA;&lt;p&gt;Plugins may be lazy-loaded on the use of keybindings/maps. Individual keybindings are specified either as a string (in which case they are treated as normal mode maps) or a table in the format &lt;code&gt;{mode, map}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Performing plugin management operations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; exposes the following functions for common plugin management operations. In all of the below, &lt;code&gt;plugins&lt;/code&gt; is an optional table of plugin names; if not provided, the default is &#34;all managed plugins&#34;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.install(plugins)&lt;/code&gt;: Install the specified plugins if they are not already installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.update(plugins)&lt;/code&gt;: Update the specified plugins, installing any that are missing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.clean()&lt;/code&gt;: Remove any disabled or no longer managed plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.sync(plugins)&lt;/code&gt;: Perform a &lt;code&gt;clean&lt;/code&gt; followed by an &lt;code&gt;update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.compile(path)&lt;/code&gt;: Compile lazy-loader code and save to &lt;code&gt;path&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.snapshot(snapshot_name, ...)&lt;/code&gt;: Creates a snapshot file that will live under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be taken. Optionally, a list of plugins name can be provided to selectively choose the plugins to snapshot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.rollback(snapshot_name, ...)&lt;/code&gt;: Rollback plugins status a snapshot file that will live under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be taken. Optionally, a list of plugins name can be provided to selectively choose which plugins to revert.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packer.delete(snapshot_name)&lt;/code&gt;: Deletes a snapshot file under &lt;code&gt;config.snapshot_path/&amp;lt;snapshot_name&amp;gt;&lt;/code&gt;. If &lt;code&gt;snapshot_name&lt;/code&gt; is an absolute path, then that will be the location where the snapshot will be deleted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extending &lt;code&gt;packer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can add custom key handlers to &lt;code&gt;packer&lt;/code&gt; by calling &lt;code&gt;packer.set_handler(name, func)&lt;/code&gt; where &lt;code&gt;name&lt;/code&gt; is the key you wish to handle and &lt;code&gt;func&lt;/code&gt; is a function with the signature &lt;code&gt;func(plugins, plugin, value)&lt;/code&gt; where &lt;code&gt;plugins&lt;/code&gt; is the global table of managed plugins, &lt;code&gt;plugin&lt;/code&gt; is the table for a specific plugin, and &lt;code&gt;value&lt;/code&gt; is the value associated with key &lt;code&gt;name&lt;/code&gt; in &lt;code&gt;plugin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling Lazy-Loaders&lt;/h3&gt; &#xA;&lt;p&gt;To optimize startup time, &lt;code&gt;packer.nvim&lt;/code&gt; compiles code to perform the lazy-loading operations you specify. This means that you do not need to load &lt;code&gt;packer.nvim&lt;/code&gt; unless you want to perform some plugin management operations.&lt;/p&gt; &#xA;&lt;p&gt;To generate the compiled code, call &lt;code&gt;packer.compile(path)&lt;/code&gt;, where &lt;code&gt;path&lt;/code&gt; is some file path on your &lt;code&gt;runtimepath&lt;/code&gt;, with a &lt;code&gt;.vim&lt;/code&gt; extension. This will generate a blend of Lua and Vimscript to load and configure all your lazy-loaded plugins (e.g. generating commands, autocommands, etc.) and save it to &lt;code&gt;path&lt;/code&gt;. Then, when you start vim, the file at &lt;code&gt;path&lt;/code&gt; is loaded (because &lt;code&gt;path&lt;/code&gt; must be on your &lt;code&gt;runtimepath&lt;/code&gt;), and lazy-loading works.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;path&lt;/code&gt; is not provided to &lt;code&gt;packer.compile&lt;/code&gt;, the output file will default to the value of &lt;code&gt;config.compile_path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The option &lt;code&gt;compile_on_sync&lt;/code&gt;, which defaults to &lt;code&gt;true&lt;/code&gt;, will run &lt;code&gt;packer.compile()&lt;/code&gt; during &lt;code&gt;packer.sync()&lt;/code&gt;, if set to &lt;code&gt;true&lt;/code&gt;. Note that otherwise, you &lt;strong&gt;must&lt;/strong&gt; run &lt;code&gt;packer.compile&lt;/code&gt; yourself to generate the lazy-loader file!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you use a function value for &lt;code&gt;config&lt;/code&gt; or &lt;code&gt;setup&lt;/code&gt; keys in any plugin specifications, it &lt;strong&gt;must not&lt;/strong&gt; have any upvalues (i.e. captures). We currently use Lua&#39;s &lt;code&gt;string.dump&lt;/code&gt; to compile config/setup functions to bytecode, which has this limitation. Additionally, if functions are given for these keys, the functions will be passed the plugin name and information table as arguments.&lt;/p&gt; &#xA;&lt;h3&gt;User autocommands&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; runs most of its operations asyncronously. If you would like to implement automations that require knowing when the operations are complete, you can use the following &lt;code&gt;User&lt;/code&gt; autocmds (see &lt;code&gt;:help User&lt;/code&gt; for more info on how to use):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PackerComplete&lt;/code&gt;: Fires after install, update, clean, and sync asynchronous operations finish.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PackerCompileDone&lt;/code&gt;: Fires after compiling (see &lt;a href=&#34;https://raw.githubusercontent.com/wbthomason/packer.nvim/master/#compiling-lazy-loaders&#34;&gt;the section on compilation&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using a floating window&lt;/h3&gt; &#xA;&lt;p&gt;You can configure Packer to use a floating window for command outputs by passing a utility function to &lt;code&gt;packer&lt;/code&gt;&#39;s config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup({function()&#xA;  -- Your plugins here&#xA;end,&#xA;config = {&#xA;  display = {&#xA;    open_fn = require(&#39;packer.util&#39;).float,&#xA;  }&#xA;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this floating window will show doubled borders. If you want to customize the window appearance, you can pass a configuration to &lt;code&gt;float&lt;/code&gt;, which is the same configuration that would be passed to &lt;code&gt;nvim_open_win&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;packer.startup({function()&#xA;  -- Your plugins here&#xA;end,&#xA;config = {&#xA;  display = {&#xA;    open_fn = function()&#xA;      return require(&#39;packer.util&#39;).float({ border = &#39;single&#39; })&#xA;    end&#xA;  }&#xA;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profiling&lt;/h2&gt; &#xA;&lt;p&gt;Packer has built in functionality that can allow you to profile the time taken loading your plugins. In order to use this functionality you must either enable profiling in your config, or pass in an argument when running packer compile.&lt;/p&gt; &#xA;&lt;h4&gt;Setup via config&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;  profile = {&#xA;    enable = true,&#xA;    threshold = 1 -- the amount in ms that a plugins load time must be over for it to be included in the profile&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using the packer compile command&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:PackerCompile profile=true&#xA;&#34; or&#xA;:PackerCompile profile=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Profiling usage&lt;/h4&gt; &#xA;&lt;p&gt;This will rebuild your &lt;code&gt;packer_compiled.vim&lt;/code&gt; with profiling code included. In order to visualise the output of the profile restart your neovim and run &lt;code&gt;PackerProfile&lt;/code&gt;. This will open a window with the output of your profiling.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;packer.nvim&lt;/code&gt; logs to &lt;code&gt;stdpath(cache)/packer.nvim.log&lt;/code&gt;. Looking at this file is usually a good start if something isn&#39;t working as expected.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: Beta. Things seem to work and most features are complete, but certainly not every edge case has been tested. People willing to give it a try and report bugs/errors are very welcome!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic package management works (i.e. installation, updating, cleaning, start/opt plugins, displaying results)&lt;/li&gt; &#xA; &lt;li&gt;Automatic generation of lazy-loading code works&lt;/li&gt; &#xA; &lt;li&gt;More testing is needed&lt;/li&gt; &#xA; &lt;li&gt;The code is messy and needs more cleanup and refactoring&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current work-in-progress&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Playing with ideas to make manual compilation less necessary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to those who have contributed to the project! PRs and issues are always welcome. This list is infrequently updated; please feel free to bug me if you&#39;re not listed here and you would like to be.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@akinsho&lt;/li&gt; &#xA; &lt;li&gt;@nanotee&lt;/li&gt; &#xA; &lt;li&gt;@weilbith&lt;/li&gt; &#xA; &lt;li&gt;@Iron-E&lt;/li&gt; &#xA; &lt;li&gt;@tjdevries&lt;/li&gt; &#xA; &lt;li&gt;@numToStr&lt;/li&gt; &#xA; &lt;li&gt;@fsouza&lt;/li&gt; &#xA; &lt;li&gt;@gbrlsnchs&lt;/li&gt; &#xA; &lt;li&gt;@lewis6991&lt;/li&gt; &#xA; &lt;li&gt;@TimUntersberger&lt;/li&gt; &#xA; &lt;li&gt;@bfredl&lt;/li&gt; &#xA; &lt;li&gt;@sunjon&lt;/li&gt; &#xA; &lt;li&gt;@gwerbin&lt;/li&gt; &#xA; &lt;li&gt;@shadmansaleh&lt;/li&gt; &#xA; &lt;li&gt;@ur4ltz&lt;/li&gt; &#xA; &lt;li&gt;@EdenEast&lt;/li&gt; &#xA; &lt;li&gt;@khuedoan&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>projekt0n/github-nvim-theme</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/projekt0n/github-nvim-theme</id>
    <link href="https://github.com/projekt0n/github-nvim-theme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Github theme for Neovim and Terminals written in Lua&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/S6SlCiV.png&#34; alt=&#34;github-nvim-theme&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Status&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Linting&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/projekt0n&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-projekt0n-blue&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/projekt0n&#34;&gt;&lt;img src=&#34;https://img.shields.io/liberapay/goal/projekt0n.svg?logo=liberapay&#34; alt=&#34;Liberapay Goal Progress&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports the latest Neovim 0.5 features like TreeSitter and LSP&lt;/li&gt; &#xA; &lt;li&gt;Minimal inactive statusline (only work with &lt;strong&gt;Vim&#39;s Default StatusLine&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Vim terminal colors&lt;/li&gt; &#xA; &lt;li&gt;Darker background for sidebar-like windows&lt;/li&gt; &#xA; &lt;li&gt;Color configs for &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;Alacritty&lt;/a&gt;, &lt;a href=&#34;https://konsole.kde.org/&#34;&gt;Konsole&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/terminal&#34;&gt;Windows Terminal&lt;/a&gt;, &lt;a href=&#34;https://wiki.archlinux.org/title/x_resources&#34;&gt;Xresources&lt;/a&gt;, &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt;, &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf.html?highlight=include&#34;&gt;kitty&lt;/a&gt; and &lt;a href=&#34;https://github.com/tmux/tmux/wiki&#34;&gt;tmux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Most elegant &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/LUALINE.md#screenshots&#34;&gt;&lt;strong&gt;lualine&lt;/strong&gt; theme&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the theme with your preferred package manager:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;projekt0n/github-nvim-theme&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#34;projekt0n/github-nvim-theme&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Enable the colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;colorscheme github_*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#39;github-theme&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;colors&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;You can override specific color groups to use other groups or a hex color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;comment_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;italic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Highlight style for comments (check &lt;code&gt;:help highlight-args&lt;/code&gt; for options)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dark_float&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Float windows like the lsp diagnostics windows get a darker background.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dark_sidebar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sidebar like windows like &lt;code&gt;NvimTree&lt;/code&gt; get a darker background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dev&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Developer Mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;function_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NONE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Highlight style for functions (check &lt;code&gt;:help highlight-args&lt;/code&gt; for options)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hide_end_of_buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enabling this option, will hide filler lines (~) after the end of the buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hide_inactive_statusline&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard &lt;strong&gt;StatusLine&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;keyword_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;italic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Highlight style for keywords (check &lt;code&gt;:help highlight-args&lt;/code&gt; for options)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;msg_area_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NONE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Highlight style for messages and cmdline (check &lt;code&gt;:help highlight-args&lt;/code&gt; for options)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;overrides&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Override specific highlight groups. The function accpet colors as argument. You can also add a non-exists highlight by enabling the &lt;code&gt;dev&lt;/code&gt; mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sidebars&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set a darker background on sidebar-like windows. For example: &lt;code&gt;{&#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;theme_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dark&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set theme variant (options: &lt;code&gt;dark&lt;/code&gt;/&lt;code&gt;dimmed&lt;/code&gt;/&lt;code&gt;dark_default&lt;/code&gt;/&lt;code&gt;dark_colorblind&lt;/code&gt;/&lt;code&gt;light&lt;/code&gt;/&lt;code&gt;light_default&lt;/code&gt;/&lt;code&gt;light_colorblind&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;transparent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable this to disable setting the background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;variable_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NONE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Highlight style for variables and identifiers (check &lt;code&gt;:help highlight-args&lt;/code&gt; for options)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;vim&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Example config in VimScript&#xA;&#34; NOTE: Configuration needs to be set BEFORE loading the color scheme with `colorscheme` command&#xA;let g:github_function_style = &#34;italic&#34;&#xA;let g:github_sidebars = [&#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34;]&#xA;&#xA;&#34; Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;let g:github_colors = {&#xA;  \ &#39;hint&#39;: &#39;orange&#39;,&#xA;  \ &#39;error&#39;: &#39;#ff0000&#39;&#xA;\ }&#xA;&#xA;&#34; Load the colorscheme&#xA;colorscheme github_dark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;lua&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example config in Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;dark&#34;,&#xA;  function_style = &#34;italic&#34;,&#xA;  sidebars = {&#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34;},&#xA;&#xA;  -- Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;  colors = {hint = &#34;orange&#34;, error = &#34;#ff0000&#34;},&#xA;&#xA;  -- Overwrite the highlight groups&#xA;  overrides = function(c)&#xA;    return {&#xA;      htmlTag = {fg = c.red, bg = &#34;#282c34&#34;, sp = c.hint, style = &#34;underline&#34;},&#xA;      DiagnosticHint = {link = &#34;LspDiagnosticsDefaultHint&#34;},&#xA;      -- this will remove the highlight groups&#xA;      TSField = {},&#xA;    }&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lualine Support&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;hide_inactive_statusline&lt;/code&gt; option is deprecated for lualine. That means it does not force the underline style to StatusLineNC highlight.&lt;/p&gt; &#xA;&lt;p&gt;Installation docs and screenshots at &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/LUALINE.md&#34;&gt;LUALINE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Terminal Themes&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To generate the configs &lt;code&gt;make terminal&lt;/code&gt; or &lt;code&gt;:luafile lua/github-theme/terminal/init.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Extra color configs for &lt;strong&gt;Alacritty&lt;/strong&gt;, &lt;strong&gt;Konsole&lt;/strong&gt;, &lt;strong&gt;Windows Terminal&lt;/strong&gt;, &lt;strong&gt;Xresources&lt;/strong&gt;, &lt;strong&gt;iTerm&lt;/strong&gt;, &lt;strong&gt;kitty&lt;/strong&gt;, and &lt;strong&gt;tmux&lt;/strong&gt; can be found in &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/terminal/&#34;&gt;terminal&lt;/a&gt; directory. To use them, refer to their respective documentation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alacritty - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/alacritty&#34;&gt;terminal/alacritty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Konsole - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/konsole&#34;&gt;terminal/konsole&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows Terminal - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/windows_terminal&#34;&gt;terminal/windows_terminal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xresources - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/xresources&#34;&gt;terminal/xresources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iTerm - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/iterm&#34;&gt;terminal/iterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;kitty - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/kitty&#34;&gt;terminal/kitty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tmux - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/tmux&#34;&gt;terminal/tmux&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Making &lt;code&gt;undercurls&lt;/code&gt; work properly in &lt;strong&gt;Tmux&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To have undercurls show up and in color, add the following to your &lt;strong&gt;Tmux&lt;/strong&gt; config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Undercurl&#xA;set -g default-terminal &#34;${TERM}&#34;&#xA;set -as terminal-overrides &#39;,*:Smulx=\E[4::%p1%dm&#39;  # undercurl support&#xA;set -as terminal-overrides &#39;,*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&amp;amp;%d::%p1%{255}%&amp;amp;%d%;m&#39;  # underscore colours - needs tmux-3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugin Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;Builtin lsp diagnostics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;dense-analysis/ale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projekt0n/circles.nvim&#34;&gt;projekt0n/circles.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;neoclide/coc.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;glepnir/dashboard-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;lewis6991/gitsigns.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;lukas-reineke/indent-blankline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lsp-trouble.nvim&#34;&gt;folke/lsp-trouble.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;glepnir/lspsaga.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;nvim-lualine/lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;TimUntersberger/neogit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;akinsho/nvim-bufferline.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;hrsh7th/nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-compe&#34;&gt;hrsh7th/nvim-compe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;rcarriga/nvim-notify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;kyazdani42/nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter/nvim-treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope/telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;airblade/vim-gitgutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;folke/which-key.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📺 Screenshots&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Font: &lt;a href=&#34;https://www.jetbrains.com/lp/mono/&#34;&gt;JetBrains Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terminal: &lt;a href=&#34;https://sw.kovidgoyal.net/kitty&#34;&gt;kitty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Icon: &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;StatusLine: &lt;strong&gt;Default&lt;/strong&gt;. &lt;a href=&#34;https://github.com/ful1e5/dotfiles/raw/a2777f85b104622dd82f4adfc6ad032e3ff074bf/nvim/.config/nvim/lua/options.lua#L19-L30&#34;&gt;dotfiles/nvim/.config/nvim/lua/options.lua#L19-L30&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;dotfiles: &lt;a href=&#34;https://github.com/ful1e5/dotfiles/tree/main/nvim/.config/nvim&#34;&gt;ful1e5/dotfiles/nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Theme Styles&lt;/h3&gt; &#xA;&lt;h4&gt;Dark&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_dark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;dark&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/XWxKWc8.png&#34; alt=&#34;github_dark&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Dimmed&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_dimmed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;dimmed&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/lMk4ifs.png&#34; alt=&#34;github_dimmed&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Dark Default&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_dark_default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;dark_default&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/ZfZcBGN.png&#34; alt=&#34;github_dark_default&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Dark Colorblind (Beta)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_dark_colorblind&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;dark_colorblind&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/OIXgRL4.png&#34; alt=&#34;github_dark_colorblind&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Light&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_light&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;light&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/OPwBDI4.png&#34; alt=&#34;github_light&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Light Default&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_light_default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;light_default&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/r9uPo5B.png&#34; alt=&#34;github_light_default&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Light Colorblind (Beta)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_light_colorblind&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;light_colorblind&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/fL4ZOUg.png&#34; alt=&#34;github_light_colorblind&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Syntax Styles&lt;/h3&gt; &#xA;&lt;h4&gt;Default&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/V0DsNa0.png&#34; alt=&#34;github_default_syntax&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Normal&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;let g:github_comment_style = &#34;NONE&#34;&#xA;let g:github_keyword_style = &#34;NONE&#34;&#xA;let g:github_function_style = &#34;NONE&#34;&#xA;let g:github_variable_style = &#34;NONE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  comment_style = &#34;NONE&#34;,&#xA;  keyword_style = &#34;NONE&#34;,&#xA;  function_style = &#34;NONE&#34;,&#xA;  variable_style = &#34;NONE&#34;&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/aRDXkWp.png&#34; alt=&#34;github_normal_syntax&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Italic&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;let g:github_comment_style = &#34;italic&#34;&#xA;let g:github_keyword_style = &#34;italic&#34;&#xA;let g:github_function_style = &#34;italic&#34;&#xA;let g:github_variable_style = &#34;italic&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  comment_style = &#34;italic&#34;,&#xA;  keyword_style = &#34;italic&#34;,&#xA;  function_style = &#34;italic&#34;,&#xA;  variable_style = &#34;italic&#34;&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/5wr3dyQ.png&#34; alt=&#34;github_italic_syntax&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Minimal config&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;let g:github_dark_sidebar = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  dark_sidebar = false,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/rAsEukW.png&#34; alt=&#34;github_minimal&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Telescope&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/XX7tixL.png&#34; alt=&#34;github_telescope&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;, any suggestions for features and contributions to the continuing code masterelopment can be made via the issue tracker or code contributions via a &lt;code&gt;Fork&lt;/code&gt; &amp;amp; &lt;code&gt;Pull requests&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>folke/which-key.nvim</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/folke/which-key.nvim</id>
    <link href="https://github.com/folke/which-key.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💥 Create key bindings that stick. WhichKey is a lua plugin for Neovim 0.5 that displays a popup with possible keybindings of the command you started typing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;💥 Which Key&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; is a lua plugin for Neovim 0.5 that displays a popup with possible key bindings of the command you started typing. Heavily inspired by the original &lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;emacs-which-key&lt;/a&gt; and &lt;a href=&#34;https://github.com/liuchengxu/vim-which-key&#34;&gt;vim-which-key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439438-669f8d00-a804-11eb-9b5b-c7122bd9acac.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;opens a popup with suggestions to complete a key binding&lt;/li&gt; &#xA; &lt;li&gt;works with any setting for &lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;timeoutlen&#39;&#34;&gt;timeoutlen&lt;/a&gt;, including instantly (&lt;code&gt;timeoutlen=0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;works correctly with built-in key bindings&lt;/li&gt; &#xA; &lt;li&gt;works correctly with buffer-local mappings&lt;/li&gt; &#xA; &lt;li&gt;extensible plugin architecture&lt;/li&gt; &#xA; &lt;li&gt;built-in plugins: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;marks:&lt;/strong&gt; shows your marks when you hit one of the jump keys.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;registers:&lt;/strong&gt; shows the contents of your registers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;presets:&lt;/strong&gt; built-in key binding help for &lt;code&gt;motions&lt;/code&gt;, &lt;code&gt;text-objects&lt;/code&gt;, &lt;code&gt;operators&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;spelling:&lt;/strong&gt; spelling suggestions inside the which-key popup&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;Plug &#39;folke/which-key.nvim&#39;&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;  require(&#34;which-key&#34;).setup {&#xA;    -- your configuration comes here&#xA;    -- or leave it empty to use the default settings&#xA;    -- refer to the configuration section below&#xA;  }&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;use {&#xA;  &#34;folke/which-key.nvim&#34;,&#xA;  config = function()&#xA;    require(&#34;which-key&#34;).setup {&#xA;      -- your configuration comes here&#xA;      -- or leave it empty to use the default settings&#xA;      -- refer to the configuration section below&#xA;    }&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❗️ IMPORTANT: the timeout when &lt;strong&gt;WhichKey&lt;/strong&gt; opens is controlled by the vim setting &lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;timeoutlen&#39;&#34;&gt;timeoutlen&lt;/a&gt;. Please refer to the documentation to properly set it up. Setting it to &lt;code&gt;0&lt;/code&gt;, will effectively always show &lt;strong&gt;WhichKey&lt;/strong&gt; immediately, but a setting of &lt;code&gt;500&lt;/code&gt; (500ms) is probably more appropriate.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❗️ don&#39;t create any keymappings yourself to trigger WhichKey. Unlike with &lt;em&gt;vim-which-key&lt;/em&gt;, we do this fully automatically. Please remove any left-over triggers you might have from using &lt;em&gt;vim-which-key&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🚑 You can run &lt;code&gt;:checkhealth which_key&lt;/code&gt; to see if there&#39;s any conflicting keymaps that will prevent triggering &lt;strong&gt;WhichKey&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;WhichKey comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  plugins = {&#xA;    marks = true, -- shows a list of your marks on &#39; and `&#xA;    registers = true, -- shows your registers on &#34; in NORMAL or &amp;lt;C-r&amp;gt; in INSERT mode&#xA;    spelling = {&#xA;      enabled = false, -- enabling this will show WhichKey when pressing z= to select spelling suggestions&#xA;      suggestions = 20, -- how many suggestions should be shown in the list?&#xA;    },&#xA;    -- the presets plugin, adds help for a bunch of default keybindings in Neovim&#xA;    -- No actual key bindings are created&#xA;    presets = {&#xA;      operators = true, -- adds help for operators like d, y, ... and registers them for motion / text object completion&#xA;      motions = true, -- adds help for motions&#xA;      text_objects = true, -- help for text objects triggered after entering an operator&#xA;      windows = true, -- default bindings on &amp;lt;c-w&amp;gt;&#xA;      nav = true, -- misc bindings to work with windows&#xA;      z = true, -- bindings for folds, spelling and others prefixed with z&#xA;      g = true, -- bindings for prefixed with g&#xA;    },&#xA;  },&#xA;  -- add operators that will trigger motion and text object completion&#xA;  -- to enable all native operators, set the preset / operators plugin above&#xA;  operators = { gc = &#34;Comments&#34; },&#xA;  key_labels = {&#xA;    -- override the label used to display some keys. It doesn&#39;t effect WK in any other way.&#xA;    -- For example:&#xA;    -- [&#34;&amp;lt;space&amp;gt;&#34;] = &#34;SPC&#34;,&#xA;    -- [&#34;&amp;lt;cr&amp;gt;&#34;] = &#34;RET&#34;,&#xA;    -- [&#34;&amp;lt;tab&amp;gt;&#34;] = &#34;TAB&#34;,&#xA;  },&#xA;  icons = {&#xA;    breadcrumb = &#34;»&#34;, -- symbol used in the command line area that shows your active key combo&#xA;    separator = &#34;➜&#34;, -- symbol used between a key and it&#39;s label&#xA;    group = &#34;+&#34;, -- symbol prepended to a group&#xA;  },&#xA;  popup_mappings = {&#xA;    scroll_down = &#39;&amp;lt;c-d&amp;gt;&#39;, -- binding to scroll down inside the popup&#xA;    scroll_up = &#39;&amp;lt;c-u&amp;gt;&#39;, -- binding to scroll up inside the popup&#xA;  },&#xA;  window = {&#xA;    border = &#34;none&#34;, -- none, single, double, shadow&#xA;    position = &#34;bottom&#34;, -- bottom, top&#xA;    margin = { 1, 0, 1, 0 }, -- extra window margin [top, right, bottom, left]&#xA;    padding = { 2, 2, 2, 2 }, -- extra window padding [top, right, bottom, left]&#xA;    winblend = 0&#xA;  },&#xA;  layout = {&#xA;    height = { min = 4, max = 25 }, -- min and max height of the columns&#xA;    width = { min = 20, max = 50 }, -- min and max width of the columns&#xA;    spacing = 3, -- spacing between columns&#xA;    align = &#34;left&#34;, -- align columns left, center or right&#xA;  },&#xA;  ignore_missing = false, -- enable this to hide mappings for which you didn&#39;t specify a label&#xA;  hidden = { &#34;&amp;lt;silent&amp;gt;&#34;, &#34;&amp;lt;cmd&amp;gt;&#34;, &#34;&amp;lt;Cmd&amp;gt;&#34;, &#34;&amp;lt;CR&amp;gt;&#34;, &#34;call&#34;, &#34;lua&#34;, &#34;^:&#34;, &#34;^ &#34;}, -- hide mapping boilerplate&#xA;  show_help = true, -- show help message on the command line when the popup is visible&#xA;  triggers = &#34;auto&#34;, -- automatically setup triggers&#xA;  -- triggers = {&#34;&amp;lt;leader&amp;gt;&#34;} -- or specify a list manually&#xA;  triggers_blacklist = {&#xA;    -- list of mode / prefixes that should never be hooked by WhichKey&#xA;    -- this is mostly relevant for key maps that start with a native binding&#xA;    -- most people should not need to change this&#xA;    i = { &#34;j&#34;, &#34;k&#34; },&#xA;    v = { &#34;j&#34;, &#34;k&#34; },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🪄 Setup&lt;/h2&gt; &#xA;&lt;p&gt;With the default settings, &lt;strong&gt;WhichKey&lt;/strong&gt; will work out of the box for most builtin keybindings, but the real power comes from documenting and organizing your own keybindings.&lt;/p&gt; &#xA;&lt;p&gt;To document and/or setup your own mappings, you need to call the &lt;code&gt;register&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local wk = require(&#34;which-key&#34;)&#xA;wk.register(mappings, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default options for &lt;code&gt;opts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  mode = &#34;n&#34;, -- NORMAL mode&#xA;  -- prefix: use &#34;&amp;lt;leader&amp;gt;f&#34; for example for mapping everything related to finding files&#xA;  -- the prefix is prepended to every mapping part of `mappings`&#xA;  prefix = &#34;&#34;,&#xA;  buffer = nil, -- Global mappings. Specify a buffer number for buffer local mappings&#xA;  silent = true, -- use `silent` when creating keymaps&#xA;  noremap = true, -- use `noremap` when creating keymaps&#xA;  nowait = false, -- use `nowait` when creating keymaps&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❕ When you specify a command in your mapping that starts with &lt;code&gt;&amp;lt;Plug&amp;gt;&lt;/code&gt;, then we automatically set &lt;code&gt;noremap=false&lt;/code&gt;, since you always want recursive keybindings in this case&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;⌨️ Mappings&lt;/h3&gt; &#xA;&lt;p&gt;Group names use the special &lt;code&gt;name&lt;/code&gt; key in the tables. There&#39;s multiple ways to define the mappings. &lt;code&gt;wk.register&lt;/code&gt; can be called multiple times from anywhere in your config files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local wk = require(&#34;which-key&#34;)&#xA;-- As an example, we will create the following mappings:&#xA;--  * &amp;lt;leader&amp;gt;ff find files&#xA;--  * &amp;lt;leader&amp;gt;fr show recent files&#xA;--  * &amp;lt;leader&amp;gt;fb Foobar&#xA;-- we&#39;ll document:&#xA;--  * &amp;lt;leader&amp;gt;fn new file&#xA;--  * &amp;lt;leader&amp;gt;fe edit file&#xA;-- and hide &amp;lt;leader&amp;gt;1&#xA;&#xA;wk.register({&#xA;  f = {&#xA;    name = &#34;file&#34;, -- optional group name&#xA;    f = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; }, -- create a binding with label&#xA;    r = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34;, noremap=false, buffer = 123 }, -- additional options for creating the keymap&#xA;    n = { &#34;New File&#34; }, -- just a label. don&#39;t create any mapping&#xA;    e = &#34;Edit File&#34;, -- same as above&#xA;    [&#34;1&#34;] = &#34;which_key_ignore&#34;,  -- special label to hide it in the popup&#xA;    b = { function() print(&#34;bar&#34;) end, &#34;Foobar&#34; } -- you can also pass functions!&#xA;  },&#xA;}, { prefix = &#34;&amp;lt;leader&amp;gt;&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see more examples&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- all of the mappings below are equivalent&#xA;&#xA;-- method 2&#xA;wk.register({&#xA;  [&#34;&amp;lt;leader&amp;gt;&#34;] = {&#xA;    f = {&#xA;      name = &#34;+file&#34;,&#xA;      f = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; },&#xA;      r = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34; },&#xA;      n = { &#34;&amp;lt;cmd&amp;gt;enew&amp;lt;cr&amp;gt;&#34;, &#34;New File&#34; },&#xA;    },&#xA;  },&#xA;})&#xA;&#xA;-- method 3&#xA;wk.register({&#xA;  [&#34;&amp;lt;leader&amp;gt;f&#34;] = {&#xA;    name = &#34;+file&#34;,&#xA;    f = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; },&#xA;    r = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34; },&#xA;    n = { &#34;&amp;lt;cmd&amp;gt;enew&amp;lt;cr&amp;gt;&#34;, &#34;New File&#34; },&#xA;  },&#xA;})&#xA;&#xA;-- method 4&#xA;wk.register({&#xA;  [&#34;&amp;lt;leader&amp;gt;f&#34;] = { name = &#34;+file&#34; },&#xA;  [&#34;&amp;lt;leader&amp;gt;ff&#34;] = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; },&#xA;  [&#34;&amp;lt;leader&amp;gt;fr&#34;] = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34; },&#xA;  [&#34;&amp;lt;leader&amp;gt;fn&#34;] = { &#34;&amp;lt;cmd&amp;gt;enew&amp;lt;cr&amp;gt;&#34;, &#34;New File&#34; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt; The default label is &lt;code&gt;keymap.desc&lt;/code&gt; or &lt;code&gt;keymap.rhs&lt;/code&gt; or &lt;code&gt;&#34;&#34;&lt;/code&gt;, &lt;code&gt;:h nvim_set_keymap()&lt;/code&gt; to get more details about &lt;code&gt;desc&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;🚙 Operators, Motions and Text Objects&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; provides help to work with operators, motions and text objects.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;[count]operator[count][text-object]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;operators can be configured with the &lt;code&gt;operators&lt;/code&gt; option &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;set &lt;code&gt;plugins.presets.operators&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to automatically configure vim built-in operators&lt;/li&gt; &#xA;   &lt;li&gt;set this to &lt;code&gt;false&lt;/code&gt;, to only include the list you configured in the &lt;code&gt;operators&lt;/code&gt; option.&lt;/li&gt; &#xA;   &lt;li&gt;see &lt;a href=&#34;https://github.com/folke/which-key.nvim/raw/main/lua/which-key/plugins/presets/init.lua#L5&#34;&gt;here&lt;/a&gt; for the full list part of the preset&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;text objects are automatically retrieved from &lt;strong&gt;operator pending&lt;/strong&gt; key maps (&lt;code&gt;omap&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;set &lt;code&gt;plugins.presets.text_objects&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to configure built-in text objects&lt;/li&gt; &#xA;   &lt;li&gt;see &lt;a href=&#34;https://github.com/folke/which-key.nvim/raw/main/lua/which-key/plugins/presets/init.lua#L43&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;motions are part of the preset &lt;code&gt;plugins.presets.motions&lt;/code&gt; setting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;see &lt;a href=&#34;https://github.com/folke/which-key.nvim/raw/main/lua/which-key/plugins/presets/init.lua#L20&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to disable some operators? (like v)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- make sure to run this code before calling setup()&#xA;-- refer to the full lists at https://github.com/folke/which-key.nvim/blob/main/lua/which-key/plugins/presets/init.lua&#xA;local presets = require(&#34;which-key.plugins.presets&#34;)&#xA;presets.operators[&#34;v&#34;] = nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;p&gt;When the &lt;strong&gt;WhichKey&lt;/strong&gt; popup is open, you can use the following key bindings (they are also displayed at the bottom of the screen):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hit one of the keys to open a group or execute a key binding&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; to cancel and close the popup&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;bs&amp;gt;&lt;/code&gt; go up one level&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;c-d&amp;gt;&lt;/code&gt; scroll down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;c-u&amp;gt;&lt;/code&gt; scroll up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Apart from the automatic opening, you can also manually open &lt;strong&gt;WhichKey&lt;/strong&gt; for a certain &lt;code&gt;prefix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❗️ don&#39;t create any keymappings yourself to trigger WhichKey. Unlike with &lt;em&gt;vim-which-key&lt;/em&gt;, we do this fully automatically. Please remove any left-over triggers you might have from using &lt;em&gt;vim-which-key&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:WhichKey &#34; show all mappings&#xA;:WhichKey &amp;lt;leader&amp;gt; &#34; show all &amp;lt;leader&amp;gt; mappings&#xA;:WhichKey &amp;lt;leader&amp;gt; v &#34; show all &amp;lt;leader&amp;gt; mappings for VISUAL mode&#xA;:WhichKey &#39;&#39; v &#34; show ALL mappings for VISUAL mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🔥 Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Four built-in plugins are included with &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Marks&lt;/h3&gt; &#xA;&lt;p&gt;Shows a list of your buffer local and global marks when you hit ` or &#39;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439573-8f278700-a804-11eb-80ca-bb9263e6d937.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Registers&lt;/h3&gt; &#xA;&lt;p&gt;Shows a list of your buffer local and global registers when you hit &#34; in &lt;em&gt;NORMAL&lt;/em&gt; mode, or &lt;code&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt; in &lt;em&gt;INSERT&lt;/em&gt; mode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439609-98b0ef00-a804-11eb-9385-97c7d5ff4113.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Presets&lt;/h3&gt; &#xA;&lt;p&gt;Built-in key binding help for &lt;code&gt;motions&lt;/code&gt;, &lt;code&gt;text-objects&lt;/code&gt;, &lt;code&gt;operators&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439871-df9ee480-a804-11eb-9529-800e167db65c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Spelling&lt;/h3&gt; &#xA;&lt;p&gt;When enabled, this plugin hooks into &lt;code&gt;z=&lt;/code&gt; and replaces the full-screen spelling suggestions window by a list of suggestions within &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/118102022-1c361880-b38d-11eb-8e82-79ad266d9bb8.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎨 Colors&lt;/h2&gt; &#xA;&lt;p&gt;The table below shows all the highlight groups defined for &lt;strong&gt;WhichKey&lt;/strong&gt; with their default link.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;   &lt;th&gt;Defaults to&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKey&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Function&lt;/td&gt; &#xA;   &lt;td&gt;the key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyGroup&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Keyword&lt;/td&gt; &#xA;   &lt;td&gt;a group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeySeparator&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DiffAdded&lt;/td&gt; &#xA;   &lt;td&gt;the separator between the key and its label&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyDesc&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Identifier&lt;/td&gt; &#xA;   &lt;td&gt;the label of the key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyFloat&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NormalFloat&lt;/td&gt; &#xA;   &lt;td&gt;Normal in the popup window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyValue&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comment&lt;/td&gt; &#xA;   &lt;td&gt;used by plugins that provide values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-disable-file MD033 --&gt; &#xA;&lt;!-- markdownlint-configure-file { &#34;MD013&#34;: { &#34;line_length&#34;: 120 } } --&gt; &#xA;&lt;!-- markdownlint-configure-file { &#34;MD004&#34;: { &#34;style&#34;: &#34;sublist&#34; } } --&gt;</summary>
  </entry>
  <entry>
    <title>catppuccin/nvim</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/catppuccin/nvim</id>
    <link href="https://github.com/catppuccin/nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍨 Soothing pastel theme for NeoVim&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/logos/exports/1544x1544_circle.png&#34; width=&#34;100&#34; alt=&#34;Logo&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&#34; height=&#34;30&#34; width=&#34;0px&#34;&gt; Catppuccin for NeoVim &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&#34; height=&#34;30&#34; width=&#34;0px&#34;&gt; &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/catppuccin/nvim/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/catppuccin/nvim?colorA=1e1e28&amp;amp;colorB=c9cbff&amp;amp;style=for-the-badge&amp;amp;logo=starship style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/catppuccin/nvim/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/catppuccin/nvim?colorA=1e1e28&amp;amp;colorB=f7be95&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/catppuccin/nvim/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/catppuccin/nvim?colorA=1e1e28&amp;amp;colorB=b1e1a6&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/nvim/main/assets/demo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;This port of Catppuccin is special because it was the first one and the one that originated the project itself. Given this, it&#39;s important to acknowledge that it all didn&#39;t come to be what it is now out of nowhere. So, if you are interested in knowing more about the initial stages of the theme, you can find it under the &lt;a href=&#34;https://github.com/catppuccin/nvim/tree/old-catppuccino&#34;&gt;&lt;code&gt;old-catppuccino&lt;/code&gt;&lt;/a&gt; branch.&lt;/p&gt; &#xA;&lt;h1&gt;🎁 Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handy CLI.&lt;/li&gt; &#xA; &lt;li&gt;Extensible for many use cases.&lt;/li&gt; &#xA; &lt;li&gt;Integrations with a bunch of plugins: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;Native LSP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;Feline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hoob3rt/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;Nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tami5/lspsaga.nvim&#34;&gt;LSP Saga&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Git signs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;Indent Blankline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;Trouble&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;WhichKey&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim&#34;&gt;BarBar&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;NvimTree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;Neo-tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;Git Gutter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lambdalisue/fern.vim&#34;&gt;Fern&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;Lightline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.markdownguide.org/&#34;&gt;Markdown&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggandor/lightspeed.nvim&#34;&gt;Lightspeed&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/p00f/nvim-ts-rainbow&#34;&gt;Nvim-ts-Rainbow&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;Sneak&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;Hop&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;Neogit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/renerocksai/telekasten.nvim&#34;&gt;Telekasten&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;Notify&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/symbols-outline.nvim&#34;&gt;Symbols-Outline&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can use your favorite plugin manager for this. Here are some examples with the most popular ones:&lt;/p&gt; &#xA;&lt;h4&gt;Vim-plug&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Plug &#39;catppuccin/nvim&#39;, {&#39;as&#39;: &#39;catppuccin&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Packer.nvim&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;&#x9;&#34;catppuccin/nvim&#34;,&#xA;&#x9;as = &#34;catppuccin&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Vundle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Plugin &#39;catppuccin/nvim&#39;, {&#39;name&#39;: &#39;catppuccin&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;There are already some sane defaults that you may like, however you can change them to match your taste. These are the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;transparent_background = false,&#xA;term_colors = false,&#xA;styles = {&#xA;&#x9;comments = &#34;italic&#34;,&#xA;&#x9;conditionals = &#34;italic&#34;,&#xA;&#x9;loops = &#34;NONE&#34;,&#xA;&#x9;functions = &#34;NONE&#34;,&#xA;&#x9;keywords = &#34;NONE&#34;,&#xA;&#x9;strings = &#34;NONE&#34;,&#xA;&#x9;variables = &#34;NONE&#34;,&#xA;&#x9;numbers = &#34;NONE&#34;,&#xA;&#x9;booleans = &#34;NONE&#34;,&#xA;&#x9;properties = &#34;NONE&#34;,&#xA;&#x9;types = &#34;NONE&#34;,&#xA;&#x9;operators = &#34;NONE&#34;,&#xA;},&#xA;integrations = {&#xA;&#x9;treesitter = true,&#xA;&#x9;native_lsp = {&#xA;&#x9;&#x9;enabled = true,&#xA;&#x9;&#x9;virtual_text = {&#xA;&#x9;&#x9;&#x9;errors = &#34;italic&#34;,&#xA;&#x9;&#x9;&#x9;hints = &#34;italic&#34;,&#xA;&#x9;&#x9;&#x9;warnings = &#34;italic&#34;,&#xA;&#x9;&#x9;&#x9;information = &#34;italic&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;underlines = {&#xA;&#x9;&#x9;&#x9;errors = &#34;underline&#34;,&#xA;&#x9;&#x9;&#x9;hints = &#34;underline&#34;,&#xA;&#x9;&#x9;&#x9;warnings = &#34;underline&#34;,&#xA;&#x9;&#x9;&#x9;information = &#34;underline&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;&#x9;lsp_trouble = false,&#xA;&#x9;cmp = true,&#xA;&#x9;lsp_saga = false,&#xA;&#x9;gitgutter = false,&#xA;&#x9;gitsigns = true,&#xA;&#x9;telescope = true,&#xA;&#x9;nvimtree = {&#xA;&#x9;&#x9;enabled = true,&#xA;&#x9;&#x9;show_root = false,&#xA;&#x9;&#x9;transparent_panel = false,&#xA;&#x9;},&#xA;&#x9;neotree = {&#xA;&#x9;&#x9;enabled = false,&#xA;&#x9;&#x9;show_root = false,&#xA;&#x9;&#x9;transparent_panel = false,&#xA;&#x9;},&#xA;&#x9;which_key = false,&#xA;&#x9;indent_blankline = {&#xA;&#x9;&#x9;enabled = true,&#xA;&#x9;&#x9;colored_indent_levels = false,&#xA;&#x9;},&#xA;&#x9;dashboard = true,&#xA;&#x9;neogit = false,&#xA;&#x9;vim_sneak = false,&#xA;&#x9;fern = false,&#xA;&#x9;barbar = false,&#xA;&#x9;bufferline = true,&#xA;&#x9;markdown = true,&#xA;&#x9;lightspeed = false,&#xA;&#x9;ts_rainbow = false,&#xA;&#x9;hop = false,&#xA;&#x9;notify = true,&#xA;&#x9;telekasten = true,&#xA;&#x9;symbols_outline = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The way you setup the settings on your configuration varies based on whether you are using vimL for this or Lua.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;For init.lua&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local catppuccin = require(&#34;catppuccin&#34;)&#xA;&#xA;-- configure it&#xA;catppuccin.setup(&amp;lt;settings&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;For init.vim&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;local catppuccin = require(&#34;catppuccin&#34;)&#xA;&#xA;-- configure it&#xA;catppuccin.setup(&amp;lt;settings&amp;gt;)&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;After setting things up, you can load catppuccin like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;let g:catppuccin_flavour = &#34;dusk&#34; &#34; latte, frappe, macchiato, mocha&#xA;colorscheme catppuccin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;vim.g.catppuccin_flavour = &#34;frappe&#34; -- latte, frappe, macchiato, mocha&#xA;vim.cmd[[colorscheme catppuccin]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember that if you want to switch your Catppuccin flavour &#34;on the fly&#34; you may use the &lt;code&gt;:Catppuccin &amp;lt;flavour&amp;gt;&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: the command has autocompletion enabled, so you can just press tab to cycle through the flavours&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Although settings already have self-explanatory names, here is where you can find info about each one of them and their classifications!&lt;/p&gt; &#xA;&lt;h4&gt;General&lt;/h4&gt; &#xA;&lt;p&gt;This settings are unrelated to any group and are independent.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;transparent_background&lt;/code&gt;: (Boolean) if true, disables setting the background color.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;term_colors&lt;/code&gt;: (Boolean) if true, sets terminal colors (e.g. &lt;code&gt;g:terminal_color_0&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Styles&lt;/h4&gt; &#xA;&lt;p&gt;Handles the style of general hi groups (see &lt;code&gt;:h highlight-args&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;comments&lt;/code&gt;: (String) changed the style of the comments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;functions&lt;/code&gt;: (String) changed the style of the functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: (String) changed the style of the keywords.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strings&lt;/code&gt;: (String) changed the style of the strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;variables&lt;/code&gt;: (String) changed the style of the variables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Integrations&lt;/h4&gt; &#xA;&lt;p&gt;These integrations allow catppuccin to set the theme of various plugins/stuff. To enable an integration you just need to set it to &lt;code&gt;true&lt;/code&gt;, however, there are some special integrations...&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to know which highlight groups are being affected by catppuccin, checkout this directory: &lt;a href=&#34;https://github.com/catppuccin/nvim/tree/main/lua/catppuccin/core/integrations&#34;&gt;&lt;code&gt;lua/catppuccin/core/integrations/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Special Integrations&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feline.nvim&lt;/strong&gt;: First make sure that the &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons/&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt; plugin is installed. Then update your Feline config to use the Catppuccin components:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;feline&#34;).setup({&#xA;&#x9;components = require(&#39;catppuccin.core.integrations.feline&#39;),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Indent-blankline.nvim&lt;/strong&gt;: setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration. &lt;code&gt;colored_indent_levels&lt;/code&gt; enables char highlights per indent level. Follow the instructions &lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim#with-custom-gindent_blankline_char_highlight_list&#34;&gt;here&lt;/a&gt; to set the latter up.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lightline:&lt;/strong&gt; use this to set it up (Note: &lt;code&gt;catppuccin&lt;/code&gt; is the only valid colorscheme name. It will pick the one set in your config):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;let g:lightline = {&#39;colorscheme&#39;: &#39;catppuccin&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lualine:&lt;/strong&gt; use this to set it up (Note: &lt;code&gt;catppuccin&lt;/code&gt; is the only valid theme name. It will pick the one set in your config):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    theme = &#34;catppuccin&#34;&#xA;&#x9;-- ... the rest of your lualine config&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native Nvim LSP:&lt;/strong&gt; setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration. In the inners tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NvimTree:&lt;/strong&gt; setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;integration = {&#xA;  nvimtree = {&#xA;    enabled = true,&#xA;    show_root = true, -- makes the root folder not transparent&#xA;&#x9;transparent_panel = false, -- make the panel transparent&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neo-tree:&lt;/strong&gt; setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;integration = {&#xA;  neotree = {&#xA;    enabled = true,&#xA;    show_root = true, -- makes the root folder not transparent&#xA;&#x9;transparent_panel = false, -- make the panel transparent&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extra&lt;/h3&gt; &#xA;&lt;h4&gt;API&lt;/h4&gt; &#xA;&lt;p&gt;The API allows you fetch data from Catppuccin. It can be required as a Lua module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cp_api = require(&#34;catppuccin.api.&amp;lt;module&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Modules&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;colors&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;cp_api.get_colors()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Returns a table where the key is the name of the color and the value is its hex value.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Overwriting highlight groups&lt;/h4&gt; &#xA;&lt;p&gt;Highlight groups can be overwritten like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;catppuccin.remap({ &amp;lt;hi_group&amp;gt; = { &amp;lt;fields&amp;gt; }, })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local colors = require&#39;catppuccin.api.colors&#39;.get_colors() -- fetch colors with API&#xA;catppuccin.remap({ Comment = { fg = colors.flamingo }, })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hooks&lt;/h4&gt; &#xA;&lt;p&gt;Use them to execute code at certain events. These are the ones available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;before_loading()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Before loading a colorscheme&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;after_loading()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;After loading a colorscheme&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;They can be used like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local catppuccin = require(&#34;catppuccin&#34;)&#xA;&#xA;catppuccin.before_loading = function ()&#xA;&#x9;print(&#34;I ran before loading Catppuccin!&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💝 Thanks to&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Pocco81&#34;&gt;Pocco81&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/dev/assets/footers/gray0_ctp_on_line.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Copyright © 2020-present &lt;a href=&#34;https://github.com/catppuccin&#34; target=&#34;_blank&#34;&gt;Catppuccin Org&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/catppuccin/catppuccin/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?style=for-the-badge&amp;amp;label=License&amp;amp;message=MIT&amp;amp;logoColor=d9e0ee&amp;amp;colorA=302d41&amp;amp;colorB=c9cbff&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hrsh7th/nvim-cmp</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/hrsh7th/nvim-cmp</id>
    <link href="https://github.com/hrsh7th/nvim-cmp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A completion plugin for neovim coded in Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-cmp&lt;/h1&gt; &#xA;&lt;p&gt;A completion engine plugin for neovim written in Lua. Completion sources are installed from external repositories and &#34;sourced&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://user-images.githubusercontent.com/629908/139000570-3ac39587-a88b-43c6-b35e-207489719359.mp4&#34; width=&#34;100%&#34;&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Readme!&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;There is a Github issue that documents &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/issues/231&#34;&gt;breaking changes&lt;/a&gt; for nvim-cmp. Subscribe to the issue to be notified of upcoming breaking changes.&lt;/li&gt; &#xA; &lt;li&gt;This is my hobby project. You can support me via GitHub sponsors.&lt;/li&gt; &#xA; &lt;li&gt;Bug reports are welcome, but I might not fix if you don&#39;t provide a minimal reproduction configuration and steps.&lt;/li&gt; &#xA; &lt;li&gt;The nvim-cmp documents is &lt;a href=&#34;https://raw.githubusercontent.com/hrsh7th/nvim-cmp/main/doc/cmp.txt&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The nvim-cmp is designed for &lt;code&gt;customization&lt;/code&gt;! It&#39;s not designed to &lt;code&gt;work out of the box&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Concept&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full support for LSP completion related capabilities&lt;/li&gt; &#xA; &lt;li&gt;Powerful customizability via Lua functions&lt;/li&gt; &#xA; &lt;li&gt;Smart handling of key mapping&lt;/li&gt; &#xA; &lt;li&gt;No flicker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h3&gt;Recommended Configuration&lt;/h3&gt; &#xA;&lt;p&gt;This example configuration uses &lt;code&gt;vim-plug&lt;/code&gt; as the plugin manager and &lt;code&gt;vim-vsnip&lt;/code&gt; as snippet plugin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;call plug#begin(s:plug_dir)&#xA;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;hrsh7th/cmp-nvim-lsp&#39;&#xA;Plug &#39;hrsh7th/cmp-buffer&#39;&#xA;Plug &#39;hrsh7th/cmp-path&#39;&#xA;Plug &#39;hrsh7th/cmp-cmdline&#39;&#xA;Plug &#39;hrsh7th/nvim-cmp&#39;&#xA;&#xA;&#34; For vsnip users.&#xA;Plug &#39;hrsh7th/cmp-vsnip&#39;&#xA;Plug &#39;hrsh7th/vim-vsnip&#39;&#xA;&#xA;&#34; For luasnip users.&#xA;&#34; Plug &#39;L3MON4D3/LuaSnip&#39;&#xA;&#34; Plug &#39;saadparwaiz1/cmp_luasnip&#39;&#xA;&#xA;&#34; For ultisnips users.&#xA;&#34; Plug &#39;SirVer/ultisnips&#39;&#xA;&#34; Plug &#39;quangnguyen30192/cmp-nvim-ultisnips&#39;&#xA;&#xA;&#34; For snippy users.&#xA;&#34; Plug &#39;dcampos/nvim-snippy&#39;&#xA;&#34; Plug &#39;dcampos/cmp-snippy&#39;&#xA;&#xA;call plug#end()&#xA;&#xA;set completeopt=menu,menuone,noselect&#xA;&#xA;lua &amp;lt;&amp;lt;EOF&#xA;  -- Setup nvim-cmp.&#xA;  local cmp = require&#39;cmp&#39;&#xA;&#xA;  cmp.setup({&#xA;    snippet = {&#xA;      -- REQUIRED - you must specify a snippet engine&#xA;      expand = function(args)&#xA;        vim.fn[&#34;vsnip#anonymous&#34;](args.body) -- For `vsnip` users.&#xA;        -- require(&#39;luasnip&#39;).lsp_expand(args.body) -- For `luasnip` users.&#xA;        -- require(&#39;snippy&#39;).expand_snippet(args.body) -- For `snippy` users.&#xA;        -- vim.fn[&#34;UltiSnips#Anon&#34;](args.body) -- For `ultisnips` users.&#xA;      end,&#xA;    },&#xA;    window = {&#xA;      -- completion = cmp.config.window.bordered(),&#xA;      -- documentation = cmp.config.window.bordered(),&#xA;    },&#xA;    mapping = cmp.mapping.preset.insert({&#xA;      [&#39;&amp;lt;C-b&amp;gt;&#39;] = cmp.mapping.scroll_docs(-4),&#xA;      [&#39;&amp;lt;C-f&amp;gt;&#39;] = cmp.mapping.scroll_docs(4),&#xA;      [&#39;&amp;lt;C-Space&amp;gt;&#39;] = cmp.mapping.complete(),&#xA;      [&#39;&amp;lt;C-e&amp;gt;&#39;] = cmp.mapping.abort(),&#xA;      [&#39;&amp;lt;CR&amp;gt;&#39;] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.&#xA;    }),&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;nvim_lsp&#39; },&#xA;      { name = &#39;vsnip&#39; }, -- For vsnip users.&#xA;      -- { name = &#39;luasnip&#39; }, -- For luasnip users.&#xA;      -- { name = &#39;ultisnips&#39; }, -- For ultisnips users.&#xA;      -- { name = &#39;snippy&#39; }, -- For snippy users.&#xA;    }, {&#xA;      { name = &#39;buffer&#39; },&#xA;    })&#xA;  })&#xA;&#xA;  -- Set configuration for specific filetype.&#xA;  cmp.setup.filetype(&#39;gitcommit&#39;, {&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;cmp_git&#39; }, -- You can specify the `cmp_git` source if you were installed it.&#xA;    }, {&#xA;      { name = &#39;buffer&#39; },&#xA;    })&#xA;  })&#xA;&#xA;  -- Use buffer source for `/` (if you enabled `native_menu`, this won&#39;t work anymore).&#xA;  cmp.setup.cmdline(&#39;/&#39;, {&#xA;    mapping = cmp.mapping.preset.cmdline(),&#xA;    sources = {&#xA;      { name = &#39;buffer&#39; }&#xA;    }&#xA;  })&#xA;&#xA;  -- Use cmdline &amp;amp; path source for &#39;:&#39; (if you enabled `native_menu`, this won&#39;t work anymore).&#xA;  cmp.setup.cmdline(&#39;:&#39;, {&#xA;    mapping = cmp.mapping.preset.cmdline(),&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;path&#39; }&#xA;    }, {&#xA;      { name = &#39;cmdline&#39; }&#xA;    })&#xA;  })&#xA;&#xA;  -- Setup lspconfig.&#xA;  local capabilities = require(&#39;cmp_nvim_lsp&#39;).update_capabilities(vim.lsp.protocol.make_client_capabilities())&#xA;  -- Replace &amp;lt;YOUR_LSP_SERVER&amp;gt; with each lsp server you&#39;ve enabled.&#xA;  require(&#39;lspconfig&#39;)[&#39;&amp;lt;YOUR_LSP_SERVER&amp;gt;&#39;].setup {&#xA;    capabilities = capabilities&#xA;  }&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Where can I find more completion sources?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki/List-of-sources&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://github.com/topics/nvim-cmp&#34;&gt;GitHub topic&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Where can I find advanced configuration examples?&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>parkervcp/eggs</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/parkervcp/eggs</id>
    <link href="https://github.com/parkervcp/eggs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Service eggs for the pterodactyl panel&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Parkers Pterodactyl eggs repo&lt;/h1&gt; &#xA;&lt;p&gt;I am working on adding a large collection of public eggs for the Pterodactyl community.&lt;/p&gt; &#xA;&lt;p&gt;With that I am also accepting PR&#39;s for new services and also updates to the current ones.&lt;/p&gt; &#xA;&lt;p&gt;If you are submitting PR&#39;s try and keep names and titles the same.&lt;/p&gt; &#xA;&lt;h2&gt;How to import an egg&lt;/h2&gt; &#xA;&lt;p&gt;If you are reading this it looks like you are looking to add an egg to your server.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download any of the json files located in the folders below. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;It&#39;s easiest to right click the &lt;code&gt;raw&lt;/code&gt; button and save as.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;In your panel go to the &lt;code&gt;Nests&lt;/code&gt; section in the admin part of the panel&lt;/li&gt; &#xA; &lt;li&gt;Click the green &lt;code&gt;Import Egg&lt;/code&gt; button&lt;/li&gt; &#xA; &lt;li&gt;Browse to the json file you saved earlier&lt;/li&gt; &#xA; &lt;li&gt;Select what nest you want to put the egg in. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;If you want a new nest you need to create it before importing the egg.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;You must restart your daemon after importing an egg if you are using 0.7. This is not required on 1.X&lt;/h2&gt; &#xA;&lt;h2&gt;Please read the CONTRIBUTING.md before submitting PRs&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots&#34;&gt;Bots&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/atlbot&#34;&gt;ATL Bot&lt;/a&gt; Node JS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/bastion&#34;&gt;Bastion&lt;/a&gt; Node JS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/corpbot&#34;&gt;CorpBot&lt;/a&gt; Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/discordgo&#34;&gt;discordgo&lt;/a&gt; Golang generic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/discord.java&#34;&gt;discord.java&lt;/a&gt; Java generic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/discord.js&#34;&gt;discord.js&lt;/a&gt; Node JS generic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/discord.py&#34;&gt;discord.py&lt;/a&gt; Python generic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/dynamica&#34;&gt;Dynamica&lt;/a&gt; Node JS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/fragbot&#34;&gt;fragbot&lt;/a&gt; Golang&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/jmusicbot&#34;&gt;JMusicBot&lt;/a&gt; Java&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/nodemon.js&#34;&gt;nodemon.js&lt;/a&gt; Nodemon JS generic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/parkertron&#34;&gt;parkertron&lt;/a&gt; Golang&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/pixelbot&#34;&gt;pixel-bot&lt;/a&gt; Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/redbot&#34;&gt;Redbot&lt;/a&gt; Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/discord/sinusbot&#34;&gt;SinusBot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/other&#34;&gt;Other&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/other/bigbrotherbot&#34;&gt;Big Brother Bot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/twitch&#34;&gt;Twitch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/twitch/phantombot&#34;&gt;PhantomBot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/twitch/sogebot&#34;&gt;SogeBot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/teamspeak3&#34;&gt;TeamSpeak3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/bots/teamspeak3/jts3servermod&#34;&gt;JTS3ServerMod&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/database&#34;&gt;Database&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;In-Memory Databases&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/database/redis&#34;&gt;Redis&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/database/redis/redis-5&#34;&gt;Redis 5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/database/redis/redis-6&#34;&gt;Redis 6&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;noSQL&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/database/nosql/mongodb&#34;&gt;mongoDB&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SQL Databases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/database/sql/mariadb&#34;&gt;MariaDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/database/sql/postgres&#34;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/voice_servers&#34;&gt;Voice Servers&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/voice_servers/lavalink&#34;&gt;Lavalink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/voice_servers/teaspeak&#34;&gt;TeaSpeak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/voice_servers/ts3_manager&#34;&gt;TS3-Manager&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs&#34;&gt;Game Eggs&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/among_us&#34;&gt;Among Us&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/among_us/impostor_server&#34;&gt;Impostor Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/among_us/crewlink_server&#34;&gt;CrewLink Server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/beamng&#34;&gt;BeamNG.drive&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/beamng/beammp&#34;&gt;BeamMP Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/beamng/kissmp&#34;&gt;KissMP&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/classicube&#34;&gt;ClassiCube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/classicube/mcgalaxy&#34;&gt;MCGalaxy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/cod/cod4x&#34;&gt;Call of Duty 4X&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/enemy_territory/etlegacy&#34;&gt;ET Legacy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/ftl/tachyon&#34;&gt;FTL: Tachyon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/factorio&#34;&gt;Factorio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/factorio/factorio&#34;&gt;Vanilla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/factorio/factorio-modupdate&#34;&gt;ModUpdate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/gta&#34;&gt;Grand Theft Auto&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;GTA V&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/gta/fivem&#34;&gt;FiveM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/gta/ragemp&#34;&gt;RageMP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/gta/altv&#34;&gt;alt:V&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GTA SA&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/gta/mtasa&#34;&gt;Multi Theft Auto&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/gta/samp&#34;&gt;SA-MP&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GTA&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/gta/gtac&#34;&gt;GTAC&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/mindustry&#34;&gt;Mindustry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/mindustry/mindustry&#34;&gt;Mindustry&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/leaguesandbox&#34;&gt;League Sandbox&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minetest&#34;&gt;Minetest&lt;/a&gt; (including MTG)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minetest/minetest&#34;&gt;Minetest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft&#34;&gt;Minecraft&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/bedrock&#34;&gt;Bedrock&lt;/a&gt; Servers for Bedrock Minecraft (Windows 10, mobile, console)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/bedrock/bedrock&#34;&gt;Bedrock&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/bedrock/gomint&#34;&gt;gomint&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/bedrock/nukkit&#34;&gt;Nukkit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/bedrock/pocketmine_mp&#34;&gt;PocketMine MP&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java&#34;&gt;Java&lt;/a&gt; Servers for Java Minecraft&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/airplane&#34;&gt;Airplane&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/cuberite&#34;&gt;Cuberite&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/fabric&#34;&gt;Fabric&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/feather&#34;&gt;Feather&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/ftb&#34;&gt;Feed The Beast&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/forge&#34;&gt;Forge&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/glowstone&#34;&gt;Glowstone&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/magma&#34;&gt;Magma&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/mohist&#34;&gt;Mohist&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/nanolimbo&#34;&gt;NanoLimbo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/paper&#34;&gt;Paper&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/purpur&#34;&gt;Purpur&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/spigot&#34;&gt;Spigot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/spongeforge&#34;&gt;SpongeForge&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/spongevanilla&#34;&gt;SpongeVanilla&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/technic&#34;&gt;Technic&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/tuinity&#34;&gt;Tuinity&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/java/vanillacord&#34;&gt;VanillaCord&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy&#34;&gt;Proxies&lt;/a&gt; Minecraft Server Proxies&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/java&#34;&gt;Java&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/java/flamecord&#34;&gt;FlameCord&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/java/travertine&#34;&gt;Travertine&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/java/typhoonlimbo&#34;&gt;TyphoonLimbo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/java/velocity&#34;&gt;Velocity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/java/waterfall&#34;&gt;Waterfall&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/bedrock&#34;&gt;Bedrock&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/bedrock/waterdog_pe&#34;&gt;Waterdog PE&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/cross_platform&#34;&gt;Cross Platform&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/cross_platform/geyser&#34;&gt;GeyserMC&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/cross_platform/waterdog&#34;&gt;Waterdog&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/openarena&#34;&gt;OpenArena&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/openarena/openarena&#34;&gt;openarena&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/openra&#34;&gt;OpenRA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/openra/openra_dune2000&#34;&gt;OpenRA Dune2000&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/openra/openra_red_alert&#34;&gt;OpenRA Red Alert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/openra/openra_tiberian_dawn&#34;&gt;OpenRA Tiberian Dawn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/rdr&#34;&gt;Red Dead Redemption&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/rdr/redm&#34;&gt;RedM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers&#34;&gt;SteamCMD Servers&lt;/a&gt; These eggs use SteamCMD to install&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/7_days_to_die&#34;&gt;7 Days to Die&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/ark_survival_evolved&#34;&gt;ARK: Survival Evolved&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/arma&#34;&gt;Arma&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/arma/arma3&#34;&gt;Arma 3&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/arma/arma_reforger&#34;&gt;Arma Reforger&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/assetto_corsa&#34;&gt;Assetto Corsa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/avorion&#34;&gt;Avorion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/barotrauma&#34;&gt;Barotrauma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/citadel&#34;&gt;Citadel: Forged with Fire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/conan_exiles&#34;&gt;Conan Exiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/craftopia&#34;&gt;Craftopia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/cryofall&#34;&gt;Cryofall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/dont_starve&#34;&gt;Don&#39;t Starve Together&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/eco&#34;&gt;ECO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/fof&#34;&gt;Fistful of Frags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/hlds_server&#34;&gt;HLDS Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/holdfast&#34;&gt;Holdfast: Nations At War&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/hurtworld&#34;&gt;Hurtworld&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/insurgency_sandstorm&#34;&gt;Insurgency: Sandstorm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/killing_floor_2&#34;&gt;Killing Floor 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/left4dead&#34;&gt;Left 4 Dead&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/left4dead_2&#34;&gt;Left 4 Dead 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/modiverse&#34;&gt;Modiverse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/mordhau&#34;&gt;Mordhau&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/nmrih&#34;&gt;No More Room in Hell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/onset&#34;&gt;Onset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/pavlov_vr&#34;&gt;Pavlov VR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/pixark&#34;&gt;PixARK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/post_scriptum&#34;&gt;Post Scriptum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/project_zomboid&#34;&gt;Project Zomboid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/quake_live&#34;&gt;Quake Live&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/rising_world&#34;&gt;Rising World&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/risk_of_rain_2&#34;&gt;Risk Of Rain 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/rust&#34;&gt;Rust&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/rust/rust_autowipe&#34;&gt;Autowipe&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/rust/rust_staging&#34;&gt;Staging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/satisfactory&#34;&gt;Satisfactory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/scpsl&#34;&gt;SCP: Secret Laboratory&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/scpsl/dedicated&#34;&gt;dedicated&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/scpsl/multiadmin&#34;&gt;multiadmin&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/soldat&#34;&gt;Soldat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/space_engineers&#34;&gt;Space Engineers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/squad&#34;&gt;Squad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/starbound&#34;&gt;Starbound&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/stationeers&#34;&gt;Stationeers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/stormworks&#34;&gt;Stormworks: Build and Rescue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/subnautica_nitrox_mod&#34;&gt;Subnautica: Nitrox Mod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/svencoop&#34;&gt;Sven Co-op&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/the_forest&#34;&gt;The Forest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/team_fortress_2_classic&#34;&gt;Team Fortress 2 Classic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/tower_unite&#34;&gt;Tower Unite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/unturned&#34;&gt;Unturned&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/valheim&#34;&gt;Valheim&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/valheim/valheim_vanilla&#34;&gt;Valheim Vanilla&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/steamcmd_servers/valheim/valheim_plus&#34;&gt;Valheim Plus Mod&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/teeworlds&#34;&gt;Teeworlds&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/teeworlds/teeworlds&#34;&gt;Teeworlds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/terraria&#34;&gt;Terraria&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/terraria/vanilla&#34;&gt;Vanilla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/terraria/tmodloader&#34;&gt;tModLoader&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/terraria/tshock&#34;&gt;TShock&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/tycoon_games&#34;&gt;Tycoon Games&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/tycoon_games/openrct2&#34;&gt;OpenRCT2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/tycoon_games/openttd&#34;&gt;OpenTTD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/veloren&#34;&gt;Veloren&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/vintage_story/vintage_story&#34;&gt;Vintage Story&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/wine/generic&#34;&gt;Wine Generic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/xonotic/xonotic&#34;&gt;Xonotic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/FoundryVTT&#34;&gt;FoundryVTT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/monitoring/&#34;&gt;Monitoring&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Prometheus&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/monitoring/prometheus&#34;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/storage/&#34;&gt;Storage&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;S3 Storage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/storage/minio&#34;&gt;minio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/software/&#34;&gt;Software&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Code Server&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/software/code-server&#34;&gt;Code-Server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Elasticsearch&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/software/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Gitea&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/software/gitea&#34;&gt;Gitea&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Grafana&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/software/grafana&#34;&gt;Grafana&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;haste-server&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/software/haste-server&#34;&gt;haste-server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RabbitMQ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/software/rabbitmq&#34;&gt;rabbitmq&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;5e Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parkervcp/eggs/master/software/5e-tools&#34;&gt;5e Tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>LunarVim/Neovim-from-scratch</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/LunarVim/Neovim-from-scratch</id>
    <link href="https://github.com/LunarVim/Neovim-from-scratch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Neovim config designed from scratch to be understandable&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neovim from scratch&lt;/h1&gt; &#xA;&lt;p&gt;Each video will be associated with a branch so checkout the one you are interested in, you can follow along with this &lt;a href=&#34;https://www.youtube.com/watch?v=ctH-a-1eUME&amp;amp;list=PLhoH5vyxr6Qq41NFL4GvhFp-WLd5xzIzZ&#34;&gt;playlist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Try out this config&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to remove or move your current &lt;code&gt;nvim&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; Requires [Neovim v0.8.0]](&lt;a href=&#34;https://github.com/neovim/neovim/releases&#34;&gt;https://github.com/neovim/neovim/releases&lt;/a&gt;). &lt;a href=&#34;https://raw.githubusercontent.com/LunarVim/Neovim-from-scratch/master/#upgrade-to-latest-release&#34;&gt;Upgrade&lt;/a&gt; if you&#39;re on an earlier version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/LunarVim/Neovim-from-scratch.git ~/.config/nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;nvim&lt;/code&gt; and wait for the plugins to be installed&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; (You will notice treesitter pulling in a bunch of parsers the next time you open Neovim)&lt;/p&gt; &#xA;&lt;h2&gt;Get healthy&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;code&gt;nvim&lt;/code&gt; and enter the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:checkhealth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll probably notice you don&#39;t have support for copy/paste also that python and node haven&#39;t been setup&lt;/p&gt; &#xA;&lt;p&gt;So let&#39;s fix that&lt;/p&gt; &#xA;&lt;p&gt;First we&#39;ll fix copy/paste&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On mac &lt;code&gt;pbcopy&lt;/code&gt; should be builtin&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Ubuntu&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt install xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Arch Linux&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo pacman -S xsel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next we need to install python support (node is optional)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim python support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip install pynvim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim node support&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm i -g neovim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; make sure you have &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node&lt;/a&gt; installed, I recommend a node manager like &lt;a href=&#34;https://github.com/Schniz/fnm&#34;&gt;fnm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrade to latest release&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you &lt;a href=&#34;https://github.com/neovim/neovim/wiki/Building-Neovim#quick-start&#34;&gt;built from source&lt;/a&gt;, &lt;code&gt;cd&lt;/code&gt; into the folder where you cloned &lt;code&gt;neovim&lt;/code&gt; and run the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git pull&#xA;make distclean &amp;amp;&amp;amp; make CMAKE_BUILD_TYPE=Release&#xA;sudo make install&#xA;nvim -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The computing scientist&#39;s main challenge is not to get confused by the complexities of his own making.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;- Edsger W. Dijkstra&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nvim-telescope/telescope.nvim</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/nvim-telescope/telescope.nvim</id>
    <link href="https://github.com/nvim-telescope/telescope.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find, Filter, Preview, Pick. All lua, all the time.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;telescope.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/nvim-telescope/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/nvim-telescope/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gaze deeply into unknown regions using the power of the moon.&lt;/p&gt; &#xA;&lt;h2&gt;What Is Telescope?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;telescope.nvim&lt;/code&gt; is a highly extendable fuzzy finder over lists. Built on the latest awesome features from &lt;code&gt;neovim&lt;/code&gt; core. Telescope is centered around modularity, allowing for easy customization.&lt;/p&gt; &#xA;&lt;p&gt;Community driven builtin &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;pickers&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#sorters&#34;&gt;sorters&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#previewers&#34;&gt;previewers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TTTja6t.gif&#34; alt=&#34;Preview&#34;&gt; &lt;sub&gt;For more showcases of Telescope, please visit the &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Showcase&#34;&gt;Showcase section&lt;/a&gt; in the Telescope Wiki&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Telescope Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#default-mappings&#34;&gt;Default Mappings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;Pickers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#previewers&#34;&gt;Previewers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#sorters&#34;&gt;Sorters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#layout-display&#34;&gt;Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#themes&#34;&gt;Themes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#vim-commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#autocmds&#34;&gt;Autocmds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#media&#34;&gt;Media&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/raw/master/doc/telescope_changelog.txt&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This section should guide you to run your first builtin pickers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.7.0&#34;&gt;Neovim (v0.7.0)&lt;/a&gt; or the latest neovim nightly commit is required for &lt;code&gt;telescope.nvim&lt;/code&gt; to work.&lt;/p&gt; &#xA;&lt;h3&gt;Required dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;nvim-lua/plenary.nvim&lt;/a&gt; is required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Suggested dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;BurntSushi/ripgrep&lt;/a&gt; is required for &lt;code&gt;live_grep&lt;/code&gt; and &lt;code&gt;grep_string&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also suggest you install one native telescope sorter to significantly improve sorting performance. Take a look at either &lt;a href=&#34;https://github.com/nvim-telescope/telescope-fzf-native.nvim&#34;&gt;telescope-fzf-native.nvim&lt;/a&gt; or &lt;a href=&#34;https://github.com/nvim-telescope/telescope-fzy-native.nvim&#34;&gt;telescope-fzy-native.nvim&lt;/a&gt;. For more information and a performance benchmark take a look at the &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Extensions&#34;&gt;Extensions&lt;/a&gt; wiki.&lt;/p&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;sharkdp/fd&lt;/a&gt; (finder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter/nvim-treesitter&lt;/a&gt; (finder/preview)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;neovim LSP&lt;/a&gt; (picker)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;devicons&lt;/a&gt; (icons)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;nvim-telescope/telescope.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;dein&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;call dein#add(&#39;nvim-lua/plenary.nvim&#39;)&#xA;call dein#add(&#39;nvim-telescope/telescope.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;nvim-telescope/telescope.nvim&#39;,&#xA;  requires = { {&#39;nvim-lua/plenary.nvim&#39;} }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;checkhealth&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you call &lt;code&gt;:checkhealth telescope&lt;/code&gt; after installing telescope to ensure everything is setup correctly.&lt;/p&gt; &#xA;&lt;p&gt;After this setup you can continue reading here or switch to &lt;code&gt;:help telescope&lt;/code&gt; to get an understanding of how to use Telescope and how to configure it.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Try the command &lt;code&gt;:Telescope find_files&amp;lt;cr&amp;gt;&lt;/code&gt; to see if &lt;code&gt;telescope.nvim&lt;/code&gt; is installed correctly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;&#34; Find files using Telescope command-line sugar.&#xA;nnoremap &amp;lt;leader&amp;gt;ff &amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fg &amp;lt;cmd&amp;gt;Telescope live_grep&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fb &amp;lt;cmd&amp;gt;Telescope buffers&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fh &amp;lt;cmd&amp;gt;Telescope help_tags&amp;lt;cr&amp;gt;&#xA;&#xA;&#34; Using Lua functions&#xA;nnoremap &amp;lt;leader&amp;gt;ff &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).find_files()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fg &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).live_grep()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fb &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).buffers()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;fh &amp;lt;cmd&amp;gt;lua require(&#39;telescope.builtin&#39;).help_tags()&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;builtin pickers&lt;/a&gt; for a list of all builtin functions.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;This section should help you explore available options to configure and customize your &lt;code&gt;telescope.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike most vim plugins, &lt;code&gt;telescope.nvim&lt;/code&gt; can be customized by either applying customizations globally, or individually per picker.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Global Customization&lt;/strong&gt; affecting all pickers can be done through the main &lt;code&gt;setup()&lt;/code&gt; method (see defaults below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Individual Customization&lt;/strong&gt; affecting a single picker by passing &lt;code&gt;opts&lt;/code&gt; to builtin pickers (e.g. &lt;code&gt;builtin.find_files(opts)&lt;/code&gt;) see &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Configuration-Recipes&#34;&gt;Configuration recipes&lt;/a&gt; wiki page for ideas.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Telescope setup structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup{&#xA;  defaults = {&#xA;    -- Default configuration for telescope goes here:&#xA;    -- config_key = value,&#xA;    mappings = {&#xA;      i = {&#xA;        -- map actions.which_key to &amp;lt;C-h&amp;gt; (default: &amp;lt;C-/&amp;gt;)&#xA;        -- actions.which_key shows the mappings for your picker,&#xA;        -- e.g. git_{create, delete, ...}_branch for the git_branches picker&#xA;        [&#34;&amp;lt;C-h&amp;gt;&#34;] = &#34;which_key&#34;&#xA;      }&#xA;    }&#xA;  },&#xA;  pickers = {&#xA;    -- Default configuration for builtin pickers goes here:&#xA;    -- picker_name = {&#xA;    --   picker_config_key = value,&#xA;    --   ...&#xA;    -- }&#xA;    -- Now the picker_config_key will be applied every time you call this&#xA;    -- builtin picker&#xA;  },&#xA;  extensions = {&#xA;    -- Your extension configuration goes here:&#xA;    -- extension_name = {&#xA;    --   extension_config_key = value,&#xA;    -- }&#xA;    -- please take a look at the readme of the extension you want to configure&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To look at what default configuration options exist please read: &lt;code&gt;:help telescope.setup()&lt;/code&gt;. For picker specific &lt;code&gt;opts&lt;/code&gt; please read: &lt;code&gt;:help telescope.builtin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To embed the above code snippet in a &lt;code&gt;.vim&lt;/code&gt; file (for example in &lt;code&gt;after/plugin/telescope.nvim.vim&lt;/code&gt;), wrap it in &lt;code&gt;lua &amp;lt;&amp;lt; EOF code-snippet EOF&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;telescope&#39;).setup{&#xA;  -- ...&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default Mappings&lt;/h2&gt; &#xA;&lt;p&gt;Mappings are fully customizable. Many familiar mapping patterns are setup as defaults.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mappings&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-n&amp;gt;/&amp;lt;Down&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Next item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-p&amp;gt;/&amp;lt;Up&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Previous item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;j/k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Next/previous (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;H/M/L&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select High/Middle/Low (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;gg/G&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Select the first/last item (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Confirm selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-x&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to file selection as a split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-v&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to file selection as a vsplit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to a file in a new tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-u&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scroll up in preview window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-d&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scroll down in preview window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-/&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show mappings for picker actions (insert mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show mappings for picker actions (normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close telescope (in normal mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle selection and move to next selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle selection and move to prev selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-q&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send all items not filtered to quickfixlist (qflist)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;M-q&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send all selected items to qflist&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To see the full list of mappings, check out &lt;code&gt;lua/telescope/mappings.lua&lt;/code&gt; and the &lt;code&gt;default_mappings&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: you can use &lt;code&gt;&amp;lt;C-/&amp;gt;&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; in insert and normal mode, respectively, to show the actions mapped to your picker.&lt;/p&gt; &#xA;&lt;p&gt;Much like &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/#pickers&#34;&gt;builtin pickers&lt;/a&gt;, there are a number of &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/raw/master/lua/telescope/actions/init.lua&#34;&gt;actions&lt;/a&gt; you can pick from to remap your telescope buffer mappings, or create a new custom action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Built-in actions&#xA;local transform_mod = require(&#39;telescope.actions.mt&#39;).transform_mod&#xA;&#xA;-- or create your custom action&#xA;local my_cool_custom_action = transform_mod({&#xA;  x = function(prompt_bufnr)&#xA;    print(&#34;This function ran after another action. Prompt_bufnr: &#34; .. prompt_bufnr)&#xA;    -- Enter your function logic here. You can take inspiration from lua/telescope/actions.lua&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remap telescope mappings, please read &lt;code&gt;:help telescope.defaults.mappings&lt;/code&gt;. To do picker specific mappings, its suggested to do this with the &lt;code&gt;pickers&lt;/code&gt; table in &lt;code&gt;telescope.setup&lt;/code&gt;. Each picker accepts a &lt;code&gt;mappings&lt;/code&gt; table like its explained in &lt;code&gt;:help telescope.defaults.mappings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pickers&lt;/h2&gt; &#xA;&lt;p&gt;Built-in functions. Ready to be bound to any key you like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:lua require&#39;telescope.builtin&#39;.planets{}&#xA;&#xA;:nnoremap &amp;lt;Leader&amp;gt;pp :lua require&#39;telescope.builtin&#39;.planets{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.find_files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists files in your current working directory, respects .gitignore&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fuzzy search through the output of &lt;code&gt;git ls-files&lt;/code&gt; command, respects .gitignore, optionally ignores untracked files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.grep_string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Searches for the string under your cursor in your current working directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.live_grep&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search for a string in your current working directory and get results live as you type (respecting .gitignore)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Vim Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.buffers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists open buffers in current neovim instance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.oldfiles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists previously open files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.commands&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists available plugin/user commands and runs them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists tags in current directory with tag location file preview (users are required to run ctags -R to generate tags or update when introducing new changes)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.command_history&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists commands that were executed recently, and reruns them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.search_history&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists searches that were executed recently, and reruns them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.help_tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists available help tags and opens a new window with the relevant help info on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.man_pages&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists manpage entries, opens them in a help window on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.marks&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim marks and their value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.colorscheme&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists available colorschemes and applies them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.quickfix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists items in the quickfix list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.quickfixhistory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all quickfix lists in your history and open them with &lt;code&gt;builtin.quickfix&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.loclist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists items from the current window&#39;s location list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.jumplist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Jump List entries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.vim_options&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim options, allows you to edit the current value on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.registers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim registers, pastes the contents of the register on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.autocommands&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists vim autocommands and goes to their declaration on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.spell_suggest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists spelling suggestions for the current word under the cursor, replaces word with selected suggestion on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.keymaps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists normal mode keymappings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.filetypes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all available filetypes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.highlights&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all available highlights&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.current_buffer_fuzzy_find&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Live fuzzy search inside of the currently open buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.current_buffer_tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all of the tags for the currently open buffer, with a preview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.resume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists the results incl. multi-selections of the previous picker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.pickers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists the previous pickers incl. multi-selections (see &lt;code&gt;:h telescope.defaults.cache_picker&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Neovim LSP Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_references&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP references for word under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_document_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP document symbols in the current buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_workspace_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists LSP document symbols in the current workspace&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_dynamic_workspace_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dynamically Lists LSP for all workspace symbols&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.diagnostics&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Diagnostics for all open buffers or a specific buffer. Use option &lt;code&gt;bufnr=0&lt;/code&gt; for current buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_implementations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Goto the implementation of the word under the cursor if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_definitions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Goto the definition of the word under the cursor, if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.lsp_type_definitions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Goto the definition of the type of the word under the cursor, if there&#39;s only one, otherwise show all options in Telescope&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Git Pickers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_commits&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists git commits with diff preview, checkout action &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;, reset mixed &lt;code&gt;&amp;lt;C-r&amp;gt;m&lt;/code&gt;, reset soft &lt;code&gt;&amp;lt;C-r&amp;gt;s&lt;/code&gt; and reset hard &lt;code&gt;&amp;lt;C-r&amp;gt;h&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_bcommits&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists buffer&#39;s git commits with diff preview and checks them out on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_branches&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all branches with log preview, checkout action &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;, track action &lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt; and rebase action&lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_status&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists current changes per file with diff preview and add action. (Multi-selection still WIP)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.git_stash&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists stash items in current repository with ability to apply them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Treesitter Picker&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.treesitter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Function names, variables, from Treesitter!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Lists Picker&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.planets&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the telescope...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.builtin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Built-in pickers and run them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.reloader&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists Lua modules and reload them on &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builtin.symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists symbols inside a file &lt;code&gt;data/telescope-sources/*.json&lt;/code&gt; found in your rtp. More info and symbol sources can be found &lt;a href=&#34;https://github.com/nvim-telescope/telescope-symbols.nvim&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Previewers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Previewers&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_cat.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default previewer for files. Uses vim buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_vimgrep.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default previewer for grep and similar. Uses vim buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vim_buffer_qflist.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default previewer for qflist. Uses vim buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.cat.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Terminal previewer for files. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.vimgrep.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Terminal previewer for grep and similar. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewers.qflist.new&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Terminal previewer for qflist. Uses &lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;bat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The default previewers are from now on &lt;code&gt;vim_buffer_&lt;/code&gt; previewers. They use vim buffers for displaying files and use tree-sitter or regex for file highlighting.&lt;/p&gt; &#xA;&lt;p&gt;These previewers are guessing the filetype of the selected file, so there might be cases where they miss, leading to wrong highlights. This is because we can&#39;t determine the filetype in the traditional way: We don&#39;t do &lt;code&gt;bufload&lt;/code&gt; and instead read the file asynchronously with &lt;code&gt;vim.loop.fs_&lt;/code&gt; and attach only a highlighter; otherwise the speed of the previewer would slow down considerably. If you want to configure more filetypes, take a look at &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim#plenaryfiletype&#34;&gt;plenary wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to configure the &lt;code&gt;vim_buffer_&lt;/code&gt; previewer (e.g. you want the line to wrap), do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;autocmd User TelescopePreviewerLoaded setlocal wrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sorters&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sorters&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_fuzzy_file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Telescope&#39;s default sorter for files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_generic_fuzzy_sorter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Telescope&#39;s default sorter for everything else&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_levenshtein_sorter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using Levenshtein distance algorithm (don&#39;t use :D)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.get_fzy_sorter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using fzy algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorters.fuzzy_with_index_bias&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Used to list stuff with consideration to when the item is added&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A &lt;code&gt;Sorter&lt;/code&gt; is called by the &lt;code&gt;Picker&lt;/code&gt; on each item returned by the &lt;code&gt;Finder&lt;/code&gt;. It returns a number, which is equivalent to the &#34;distance&#34; between the current &lt;code&gt;prompt&lt;/code&gt; and the &lt;code&gt;entry&lt;/code&gt; returned by a &lt;code&gt;finder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Layout (display)&lt;/h2&gt; &#xA;&lt;p&gt;Layout can be configured by choosing a specific &lt;code&gt;layout_strategy&lt;/code&gt; and specifying a particular &lt;code&gt;layout_config&lt;/code&gt; for that strategy. For more details on available strategies and configuration options, see &lt;code&gt;:help telescope.layout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some options for configuring sizes in layouts are &#34;resolvable&#34;. This means that they can take different forms, and will be interpreted differently according to which form they take. For example, if we wanted to set the &lt;code&gt;width&lt;/code&gt; of a picker using the &lt;code&gt;vertical&lt;/code&gt; layout strategy to 50% of the screen width, we would specify that width as &lt;code&gt;0.5&lt;/code&gt;, but if we wanted to specify the &lt;code&gt;width&lt;/code&gt; to be exactly 80 characters wide, we would specify it as &lt;code&gt;80&lt;/code&gt;. For more details on resolving sizes, see &lt;code&gt;:help telescope.resolve&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example, if we wanted to specify the layout strategy and width, but only for this instance, we could do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:lua require(&#39;telescope.builtin&#39;).find_files({layout_strategy=&#39;vertical&#39;,layout_config={width=0.5}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we wanted to change the width for every time we use the &lt;code&gt;vertical&lt;/code&gt; layout strategy, we could add the following to our &lt;code&gt;setup()&lt;/code&gt; call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup({&#xA;  defaults = {&#xA;    layout_config = {&#xA;      vertical = { width = 0.5 }&#xA;      -- other layout configuration here&#xA;    },&#xA;    -- other defaults configuration here&#xA;  },&#xA;  -- other configuration values here&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;p&gt;Common groups of settings can be set up to allow for themes. We have some built in themes but are looking for more cool options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/SorAcXv.png&#34; alt=&#34;dropdown&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Themes&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;themes.get_dropdown&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list like centered list. &lt;a href=&#34;https://i.imgur.com/SorAcXv.png&#34;&gt;dropdown&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;themes.get_cursor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/pull/878&#34;&gt;A cursor relative list.&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;themes.get_ivy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bottom panel overlay. &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/pull/771&#34;&gt;Ivy #771&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To use a theme, simply append it to a builtin function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;Leader&amp;gt;f :lua require&#39;telescope.builtin&#39;.find_files(require(&#39;telescope.themes&#39;).get_dropdown({}))&amp;lt;cr&amp;gt;&#xA;&#34; Change an option&#xA;nnoremap &amp;lt;Leader&amp;gt;f :lua require&#39;telescope.builtin&#39;.find_files(require(&#39;telescope.themes&#39;).get_dropdown({ winblend = 10 }))&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use with a command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Telescope find_files theme=dropdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can configure it in the pickers table in &lt;code&gt;telescope.setup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup{&#xA;  defaults = {&#xA;    -- ...&#xA;  },&#xA;  pickers = {&#xA;    find_files = {&#xA;      theme = &#34;dropdown&#34;,&#xA;    }&#xA;  },&#xA;  extensions = {&#xA;    -- ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Themes should work with every &lt;code&gt;telescope.builtin&lt;/code&gt; function. If you wish to make a theme, check out &lt;code&gt;lua/telescope/themes.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Vim Commands&lt;/h2&gt; &#xA;&lt;p&gt;All &lt;code&gt;telescope.nvim&lt;/code&gt; functions are wrapped in &lt;code&gt;vim&lt;/code&gt; commands for easy access, tab completions and setting options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;&#34; Show all builtin pickers&#xA;:Telescope&#xA;&#xA;&#34; Tab completion&#xA;:Telescope |&amp;lt;tab&amp;gt;&#xA;:Telescope find_files&#xA;&#xA;&#34; Setting options&#xA;:Telescope find_files prompt_prefix=🔍&#xA;&#xA;&#34; If the option accepts a Lua table as its value, you can use, to connect each&#xA;&#34; command string, e.g.: find_command, vimgrep_arguments are both options that&#xA;&#34; accept a Lua table as a value. So, you can configure them on the command line&#xA;&#34;like so:&#xA;:Telescope find_files find_command=rg,--ignore,--hidden,--files prompt_prefix=🔍&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for more information and how to realize more complex commands please read &lt;code&gt;:help telescope.command&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Autocmds&lt;/h2&gt; &#xA;&lt;p&gt;Telescope user autocmds:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Event&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;User TelescopeFindPre&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do it before Telescope creates all the floating windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;User TelescopePreviewerLoaded&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do it after Telescope previewer window is created&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Telescope provides the capabilities to create &amp;amp; register extensions, which improve telescope in a variety of ways.&lt;/p&gt; &#xA;&lt;p&gt;Some extensions provide integration with external tools, outside of the scope of &lt;code&gt;builtins&lt;/code&gt;. Others provide performance enhancements by using compiled C and interfacing directly with Lua over LuaJIT&#39;s FFI library.&lt;/p&gt; &#xA;&lt;p&gt;A list of community extensions can be found in the &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Extensions&#34;&gt;Extensions&lt;/a&gt; wiki. Always read the README of the extension you want to install, but here is a general overview of how most extensions work.&lt;/p&gt; &#xA;&lt;h3&gt;Loading extensions&lt;/h3&gt; &#xA;&lt;p&gt;To load an extension, use the &lt;code&gt;load_extension&lt;/code&gt; function as shown in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- This will load fzy_native and have it override the default file sorter&#xA;require(&#39;telescope&#39;).load_extension(&#39;fzy_native&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may skip explicitly loading extensions (they will then be lazy-loaded), but tab completions will not be available right away.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing pickers from extensions&lt;/h3&gt; &#xA;&lt;p&gt;Pickers from extensions are added to the &lt;code&gt;:Telescope&lt;/code&gt; command under their respective name. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;&#34; Run the `configurations` picker from nvim-dap&#xA;:Telescope dap configurations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They can also be called directly from Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Run the `configurations` picker from nvim-dap&#xA;require(&#39;telescope&#39;).extensions.dap.configurations()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;For writing your own picker and for information about the API please read the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/developers.md&#34;&gt;Developers Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Media&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/teej_dv/clip/RichDistinctPlumberPastaThat&#34;&gt;What is Telescope? (Video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/videos/756229115&#34;&gt;More advanced configuration (Video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=65AVwHZflsU&#34;&gt;Example video&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are welcome! Just open a pull request. Please read &lt;a href=&#34;https://raw.githubusercontent.com/nvim-telescope/telescope.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;fzf.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shougo/denite.nvim&#34;&gt;denite.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liuchengxu/vim-clap&#34;&gt;vim-clap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>koreader/koreader</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/koreader/koreader</id>
    <link href="https://github.com/koreader/koreader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An ebook reader application supporting PDF, DjVu, EPUB, FB2 and many more formats, running on Cervantes, Kindle, Kobo, PocketBook and Android devices&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://koreader.rocks&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koreader/koreader.github.io/master/koreader-logo.png&#34; alt=&#34;KOReader&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;KOReader is a document viewer primarily aimed at e-ink readers.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koreader/koreader/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/koreader/koreader&#34; alt=&#34;AGPL Licence&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/koreader/koreader/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/koreader/koreader.svg?sanitize=true&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/koreader/koreader&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/koreader/koreader?color=red&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.mobileread.com/forums/forumdisplay.php?f=276&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/forum-on_mobileread-lightgrey&#34; alt=&#34;Mobileread&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/koreader/koreader&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/koreader/koreader.svg?style=shield&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/koreader/koreader&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/koreader/koreader/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hosted.weblate.org/engage/koreader/?utm_source=widget&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/koreader/-/koreader/svg-badge.svg?sanitize=true&#34; alt=&#34;Weblate Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koreader/koreader/releases&#34;&gt;Download&lt;/a&gt; • &lt;a href=&#34;http://koreader.rocks/koreader-user-guide.pdf&#34;&gt;User guide&lt;/a&gt; • &lt;a href=&#34;https://github.com/koreader/koreader/wiki&#34;&gt;Wiki&lt;/a&gt; • &lt;a href=&#34;http://koreader.rocks/doc/&#34;&gt;Developer docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;portable&lt;/strong&gt;: runs on embedded devices (Cervantes, Kindle, Kobo, PocketBook, reMarkable), Android and Linux computers. Developers can run a KOReader emulator in Linux and MacOS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;multi-format documents&lt;/strong&gt;: supports fixed page formats (PDF, DjVu, CBT, CBZ) and reflowable e-book formats (EPUB, FB2, Mobi, DOC, CHM, TXT). Scanned PDF/DjVu documents can also be reflowed with the built-in K2pdfopt library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;full-featured reading&lt;/strong&gt;: multi-lingual user interface with a highly customizable reader view and many typesetting options. You can set arbitrary page margins, override line spacing and choose external fonts and styles. It has multi-lingual hyphenation dictionaries bundled into the application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;integrated&lt;/strong&gt; with &lt;em&gt;calibre&lt;/em&gt; (search metadata, receive ebooks wirelessly, browse library via OPDS), &lt;em&gt;Wallabag&lt;/em&gt;, &lt;em&gt;Wikipedia&lt;/em&gt;, &lt;em&gt;Google Translate&lt;/em&gt; and other content providers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;optimized for e-ink devices&lt;/strong&gt;: custom UI without animation, with paginated menus, adjustable text contrast, and easy zoom to fit content or page in paged media.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;extensible&lt;/strong&gt;: via plugins&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;fast&lt;/strong&gt;: on some older devices, it has been measured to have less than half the page-turn delay as the built in reading software.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;and much more&lt;/strong&gt;: look up words with StarDict dictionaries / Wikipedia, add your own online OPDS catalogs and RSS feeds, over-the-air software updates, an FTP client, an SSH server, …&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;http://koreader.rocks/koreader-user-guide.pdf&#34;&gt;user guide&lt;/a&gt; and the &lt;a href=&#34;https://github.com/koreader/koreader/wiki&#34;&gt;wiki&lt;/a&gt; to discover more features and to help us document them.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-menu.png&#34;&gt;&lt;img src=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-menu-thumbnail.png&#34; alt=&#34;&#34; width=&#34;200px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-footnotes.png&#34;&gt;&lt;img src=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-footnotes-thumbnail.png&#34; alt=&#34;&#34; width=&#34;200px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-dictionary.png&#34;&gt;&lt;img src=&#34;https://github.com/koreader/koreader-artwork/raw/master/koreader-dictionary-thumbnail.png&#34; alt=&#34;&#34; width=&#34;200px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the model specific steps for your device:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-Android-devices&#34;&gt;Android&lt;/a&gt; • &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-BQ-devices&#34;&gt;Cervantes&lt;/a&gt; • &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-Kindle-devices&#34;&gt;Kindle&lt;/a&gt; • &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-Kobo-devices&#34;&gt;Kobo&lt;/a&gt; • &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-desktop-linux&#34;&gt;Linux&lt;/a&gt; • &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-PocketBook-devices&#34;&gt;Pocketbook&lt;/a&gt; • &lt;a href=&#34;https://github.com/koreader/koreader/wiki/Installation-on-Remarkable&#34;&gt;reMarkable&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koreader/koreader/master/doc/Building.md&#34;&gt;Setting up a build environment&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/koreader/koreader/master/doc/Collaborating_with_Git.md&#34;&gt;Collaborating with Git&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/koreader/koreader/master/doc/Building_targets.md&#34;&gt;Building targets&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/koreader/koreader/master/doc/Porting.md&#34;&gt;Porting&lt;/a&gt; • &lt;a href=&#34;http://koreader.rocks/doc/&#34;&gt;Developer docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;KOReader is developed and supported by volunteers all around the world. There are many ways you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koreader/koreader/issues?q=is%3Aopen+is%3Aissue+label%3Abug&#34;&gt;fix bugs&lt;/a&gt; and &lt;a href=&#34;https://github.com/koreader/koreader/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement&#34;&gt;implement new features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hosted.weblate.org/engage/koreader/?utm_source=widget&#34;&gt;translate the program into your language&lt;/a&gt; or improve an existing translation&lt;/li&gt; &#xA; &lt;li&gt;document lesser-known features on the &lt;a href=&#34;https://github.com/koreader/koreader/wiki&#34;&gt;wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;help others with your knowledge on the &lt;a href=&#34;http://www.mobileread.com/forums/forumdisplay.php?f=276&#34;&gt;forum&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Right now we only support &lt;a href=&#34;https://liberapay.com/KOReader&#34;&gt;liberapay&lt;/a&gt; donations, but you can also create a &lt;a href=&#34;https://www.bountysource.com/teams/koreader&#34;&gt;bounty&lt;/a&gt; to motivate others to work on a specific bug or feature request.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koreader/koreader/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/koreader/koreader?color=orange&#34; alt=&#34;Last commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/koreader/koreader/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/koreader/koreader&#34; alt=&#34;Commit activity&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nvim-neorg/neorg</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/nvim-neorg/neorg</id>
    <link href="https://github.com/nvim-neorg/neorg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modernity meets insane extensibility. The future of organizing your life in Neovim.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/res/neorg.svg?sanitize=true&#34; width=&#34;300&#34;&gt; &#xA; &lt;h1&gt;Neorg - An Organized Future&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://neovim.io&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Neovim%200.6+-brightgreen?style=for-the-badge&#34; alt=&#34;Neovim&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/T6EgTAX7ht&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/discord-join-7289da?style=for-the-badge&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-GPL%20v3-brightgreen?style=for-the-badge&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#wip&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/status-WIP-informational?style=for-the-badge&#34; alt=&#34;Status&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Your New Life Organization Tool - All in Lua&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#summary&#34;&gt;Summary&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-showcase&#34;&gt;Showcase&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-setup&#34;&gt;Setup&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-usage&#34;&gt;Usage&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-modules&#34;&gt;Modules&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-roadmap&#34;&gt;Roadmap&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-philosophy&#34;&gt;Philosophy&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-faq&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Neorg (&lt;em&gt;Neo&lt;/em&gt; - new, &lt;em&gt;org&lt;/em&gt; - organization) is a tool designed to reimagine organization as you know it. Grab some coffee, start writing some notes, let your editor handle the rest.&lt;/p&gt; &#xA;&lt;h3&gt;Why do we need Neorg?&lt;/h3&gt; &#xA;&lt;p&gt;There are currently projects designed to &lt;a href=&#34;https://github.com/kristijanhusak/orgmode.nvim&#34;&gt;clone org-mode from emacs&lt;/a&gt;, then what is the goal of this project?&lt;/p&gt; &#xA;&lt;p&gt;Whilst those projects are amazing, it&#39;s simply not enough for us. We need our &lt;em&gt;own, &lt;strong&gt;better&lt;/strong&gt;&lt;/em&gt; solution - one that will surpass &lt;em&gt;every&lt;/em&gt; other text editor. It&#39;s through our frustration of no native solution for Neovim and inconsistencies in the most popular markup formats that Neorg was born.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the philosophy of the project check the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-philosophy&#34;&gt;philosophy&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h6&gt;&lt;span&gt;❗&lt;/span&gt; &lt;strong&gt;IMPORTANT&lt;/strong&gt;: Neorg is &lt;em&gt;alpha&lt;/em&gt; software. We consider it stable however be prepared for changes and potentially outdated documentation. We are advancing fast and while we are doing our best to keep the documentation up-to-date, this may not always be possible.&lt;/h6&gt; &#xA;&lt;h2&gt;🌟 Showcase&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;A `.norg` file:&lt;/summary&gt; &#xA; &lt;img width=&#34;700&#34; alt=&#34;Showcase image of a Neorg document&#34; src=&#34;https://user-images.githubusercontent.com/76052559/150838408-1a021d7b-1891-4cab-b16e-6b755e741e87.png&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Concealing module enabled:&lt;/summary&gt; &#xA; &lt;img width=&#34;700&#34; alt=&#34;Image of a Neorg document with the concealer module enabled.&#34; src=&#34;https://user-images.githubusercontent.com/76052559/150838418-b443b92d-186a-45cb-ba84-06f03cdeea8a.png&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;First class treesitter support:&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151668244-9805afc4-8c50-4925-85ec-1098aff5ede6.gif&#34; alt=&#34;First class treesitter support&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Treesitter powered editing:&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151614059-41b590cd-07ea-437c-84b9-536de6d1adfa.gif&#34; alt=&#34;Treesitter powered editing&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Manage your tasks and projects with the GTD module:&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;See your current projects&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151700321-e6912aff-2e87-409b-986e-dff37904b51b.gif&#34; alt=&#34;See your current projects&#34;&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a new task&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151699879-3a04518b-16e6-4eb4-b765-678a15b90fb4.gif&#34; alt=&#34;Create a new task&#34;&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Edit tasks in an efficient manner through the UI&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151700653-89c30e99-68e0-4873-8e1a-ecd25dd271c2.gif&#34; alt=&#34;Edit tasks in an efficient manner through the UI&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;And much more...&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Powerpoint-like presentations in Neovim with the presenter module:&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151674065-ed397716-9d26-4efc-9c2d-2dfdb5539edf.gif&#34; alt=&#34;Powerpoint-like presentations in Neovim with the presenter module&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Get syntax highlighting for any language supported by Neovim:&lt;/summary&gt; &#xA; &lt;p&gt;Plus fancy completion powered by &lt;code&gt;nvim-cmp&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151668015-39a50439-5c95-4a18-9970-090fb68cfc0b.gif&#34; alt=&#34;Get syntax highlighting for any language supported by Neovim&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🔧 Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Neorg requires at least Neovim 0.6+ to operate.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install it through your favorite plugin manager:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    config = function()&#xA;        require(&#39;neorg&#39;).setup {&#xA;            ... -- check out setup part...&#xA;        }&#xA;    end,&#xA;    requires = &#34;nvim-lua/plenary.nvim&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Every time Neorg hits a new release, a new tag is created by us, so you don&#39;t have to worry about all the updates inbetween. That means, adding &lt;code&gt;tag = &#34;*&#34;&lt;/code&gt; in Packer will update to latest stable release.&lt;/p&gt; &lt;p&gt;You can also pin Neorg to one specific version through e.g. &lt;code&gt;tag = &#34;0.0.9&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer (with lazyloading)&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;Want to lazy load? Know that you&#39;ll have to jump through some hoops and hurdles to get it to work perfectly. You can use the &lt;code&gt;ft&lt;/code&gt; key to load Neorg only upon entering a &lt;code&gt;.norg&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    -- tag = &#34;latest&#34;,&#xA;    ft = &#34;norg&#34;,&#xA;    after = &#34;nvim-treesitter&#34;, -- You may want to specify Telescope here as well&#xA;    config = function()&#xA;        require(&#39;neorg&#39;).setup {&#xA;            ...&#xA;        }&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Although it&#39;s proven to work for a lot of people, you might need additional setups depending on how your lazyloading system is configured.&lt;/p&gt; &lt;p&gt;One important thing to ask yourself is: &#34;is it really worth it?&#34;. Neorg practically lazy loads itself: only a few lines of code are run on startup, these lines check whether the current extension is &lt;code&gt;.norg&lt;/code&gt;, if it&#39;s not then nothing else loads. You shouldn&#39;t have to worry about performance issues when it comes to startup, but hey, you do you :)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-neorg/neorg&#39; | Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can then put this initial configuration in your &lt;code&gt;init.vim&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;neorg&#39;).setup {&#xA;    ...&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Treesitter&lt;/h3&gt; &#xA;&lt;h6&gt;&lt;em&gt;Be sure to have &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; installed on your system for this step!&lt;/em&gt;&lt;/h6&gt; &#xA;&lt;p&gt;Neorg will automatically attempt to install the parsers for you upon entering a &lt;code&gt;.norg&lt;/code&gt; file if you have &lt;code&gt;core.defaults&lt;/code&gt; loaded. A command is also exposed to reinstall and/or update these parsers: &lt;code&gt;:Neorg sync-parsers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;:Neorg sync-parsers&lt;/code&gt; command is only available when in a &lt;code&gt;.norg&lt;/code&gt; file, and the installation isn&#39;t reproducible. To make it permanent, you want to alter your treesitter configuration a little:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-treesitter.configs&#39;).setup {&#xA;    ensure_installed = { &#34;norg&#34;, --[[ other parsers you would wish to have ]] },&#xA;    highlight = { -- Be sure to enable highlights if you haven&#39;t!&#xA;        enable = true,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Putting &lt;code&gt;&#34;norg_meta&#34;&lt;/code&gt; into your &lt;code&gt;ensure_installed&lt;/code&gt; table may trigger unintended errors. This is because &lt;code&gt;norg_meta&lt;/code&gt; isn&#39;t in the native &lt;code&gt;nvim-treesitter&lt;/code&gt; repositories, and the parser is only defined while using Neorg. This is why using &lt;code&gt;:Neorg sync-parsers&lt;/code&gt; is recommended.&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting Treesitter&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not using packer? Make sure that Neorg&#39;s &lt;code&gt;setup()&lt;/code&gt; gets called after &lt;code&gt;nvim-treesitter&lt;/code&gt;&#39;s setup.&lt;/li&gt; &#xA; &lt;li&gt;If on MacOS, ensure that the &lt;code&gt;CC&lt;/code&gt; environment variable points to a compiler that has C++14 support. You can run Neovim like so: &lt;code&gt;CC=/path/to/newer/compiler nvim -c &#34;TSInstallSync norg&#34;&lt;/code&gt; in your shell of choice to install the Neorg parser with a newer compiler. You may also want to export the &lt;code&gt;CC&lt;/code&gt; variable in general: &lt;code&gt;export CC=/path/to/newer/compiler&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Setup&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ve got the basic stuff out the way now, but wait! That&#39;s not all. You&#39;ve installed Neorg - great! Now you have to configure it. By default, Neorg does nothing, and gives you nothing. You must tell it what you care about!&lt;/p&gt; &#xA;&lt;h3&gt;Default modules&lt;/h3&gt; &#xA;&lt;p&gt;Neorg runs on &lt;em&gt;modules&lt;/em&gt;, which are discussed and explained in more depth later on. Each module provides a single bit of functionality - they can then be stacked together to form the entire Neorg environment.&lt;/p&gt; &#xA;&lt;p&gt;The most common module you&#39;ll find is the &lt;code&gt;core.defaults&lt;/code&gt; module, which is basically a &#34;load all features&#34; switch. It gives you the full experience out of the box.&lt;/p&gt; &#xA;&lt;p&gt;The code snippet to enable all default modules is very straightforward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        [&#34;core.defaults&#34;] = {}&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki#default-modules&#34;&gt;here&lt;/a&gt; which modules are automatically required when loading &lt;code&gt;core.defaults&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;⚙ Usage&lt;/h2&gt; &#xA;&lt;p&gt;We recommend reading the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/docs/NFF-0.1-spec.md&#34;&gt;spec&lt;/a&gt; and familiarizing yourself with the new format. You can view a summary directly in your neovim instance by running &lt;code&gt;:h neorg&lt;/code&gt; if you don&#39;t like reading a lot!&lt;/p&gt; &#xA;&lt;p&gt;Afterwards it&#39;s as simple as hopping into a &lt;code&gt;.norg&lt;/code&gt; file and typing away.&lt;/p&gt; &#xA;&lt;p&gt;A good first step is to require the &lt;code&gt;core.norg.dirman&lt;/code&gt; module, it&#39;ll help you manage Neorg workspaces. Workspaces are basically isolated directories that you can jump between:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        [&#34;core.defaults&#34;] = {},&#xA;        [&#34;core.norg.dirman&#34;] = {&#xA;            config = {&#xA;                workspaces = {&#xA;                    work = &#34;~/notes/work&#34;,&#xA;                    home = &#34;~/notes/home&#34;,&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Changing workspaces is easy, just do &lt;code&gt;:Neorg workspace work&lt;/code&gt;, where &lt;code&gt;work&lt;/code&gt; is the name of your workspace. Note that &lt;code&gt;:Neorg&lt;/code&gt; is only available when the Neorg environment is loaded, i.e. when you&#39;re in a &lt;code&gt;.norg&lt;/code&gt; file or have loaded a &lt;code&gt;.norg&lt;/code&gt; file already in your Neovim session.&lt;/p&gt; &#xA;&lt;p&gt;If the Neorg environment isn&#39;t loaded you&#39;ll find a &lt;code&gt;:NeorgStart&lt;/code&gt; command which will launch Neorg and pop you in to your last (or only) workspace.&lt;/p&gt; &#xA;&lt;h4&gt;It works, cool! What are the next steps?&lt;/h4&gt; &#xA;&lt;p&gt;We recommend you add some core modules that can greatly improve your experience, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the concealer module to enable icons (&lt;code&gt;core.norg.concealer&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Setting up a completion engine (&lt;code&gt;core.norg.completion&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Setting these up is discussed in the wiki, so be sure to check there!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You&#39;re now basically set&lt;/strong&gt;! The rest of this README will be additional information, so keep reading if you care about what makes Neorg tick, or you want to genuinely get good at using it.&lt;/p&gt; &#xA;&lt;h2&gt;🥡 Modules&lt;/h2&gt; &#xA;&lt;p&gt;As you saw previously, we loaded &lt;code&gt;core.defaults&lt;/code&gt; and recommended that you load &lt;code&gt;core.norg.dirman&lt;/code&gt;. As you probably know those are modules. But what are they, exactly?&lt;/p&gt; &#xA;&lt;p&gt;Modules are basically isolated bits of code that provide a specific subset of features. They can be docked into the environment at any time and can be essentially stacked together like lego bricks! They can bind themselves to events and callbacks and communicate with each other.&lt;/p&gt; &#xA;&lt;p&gt;To require a module, just do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        -- Require the module with the default configurations for it&#xA;        [&#34;your.required.module&#34;] = {},&#xA;&#xA;        -- Require the module, and override the configurations (with the &#34;config&#34; table)&#xA;        [&#34;your.required.module&#34;] = {&#xA;            config = {&#xA;                some_option = true&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As always, for a little more info you can consult the wiki page &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Installation#the-concept-of-modules&#34;&gt;here&lt;/a&gt;. To know which configurations are provided by default for a module, just click on their link: you&#39;ll go to the module page in the &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Core Modules&lt;/h3&gt; &#xA;&lt;p&gt;Here is a list of core modules that aren&#39;t part of &lt;code&gt;core.defaults&lt;/code&gt; and can be added individually by you.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to try by adding them to your Neorg setup.&lt;/p&gt; &#xA;&lt;!-- TODO: Use docgen to generate this automatically --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of Core Modules:&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Module name&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Getting-Things-Done&#34;&gt;&lt;code&gt;core.gtd.base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Manages your tasks with Neorg using the Getting Things Done methodology.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Completion&#34;&gt;&lt;code&gt;core.norg.completion&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;A wrapper to interface with several different completion engines.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Concealer&#34;&gt;&lt;code&gt;core.norg.concealer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Enhances the basic Neorg experience by using icons instead of text.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Dirman&#34;&gt;&lt;code&gt;core.norg.dirman&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;This module is be responsible for managing directories full of .norg files.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Journal&#34;&gt;&lt;code&gt;core.norg.journal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Easily create files for a journal.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Qol-Toc&#34;&gt;&lt;code&gt;core.norg.qol.toc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Generates a Table of Contents from the Neorg file.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Core-Presenter&#34;&gt;&lt;code&gt;core.presenter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Neorg module to create gorgeous presentation slides.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;External Modules&lt;/h3&gt; &#xA;&lt;p&gt;Users can contribute and create their own modules for Neorg. To use them, just download the plugin with your package manager, for instance with Packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    requires = &#34;john-cena/cool-neorg-plugin&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that it&#39;s as easy as loading the module it exposes normally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        [&#34;cool.module&#34;] = {},&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of community modules:&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Module name&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg-telescope&#34;&gt;&lt;code&gt;core.integrations.telescope&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Neorg integration with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/esquires/neorg-gtd-project-tags&#34;&gt;&lt;code&gt;external.gtd-project-tags&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Provides a view of tasks grouped with a project tag. Requires &lt;code&gt;core.gtd.base&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/danymat/neorg-gtd-things&#34;&gt;&lt;code&gt;external.integrations.gtd-things&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Use Things3 database to fetch and update tasks instead. Requires &lt;code&gt;core.gtd.base&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/max397574/neorg-contexts&#34;&gt;&lt;code&gt;external.context&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Display headings in which you are at the top of the window in a float popup.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/max397574/neorg-kanban&#34;&gt;&lt;code&gt;external.kanban&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Display your gtd todos in a kanban-like board in floating windows. Requires &lt;code&gt;core.gtd.base&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;If you ever end up making a module for Neorg feel free to make a pull request and add it to this README!&lt;/p&gt; &#xA;&lt;h2&gt;❓ Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;Our goals are fairly simple:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Revise the org format: simple, extensible, unambiguous. Will make you feel right at home. Alternate markup formats have several flaws, but the most notable one is the requirement for &lt;strong&gt;complex parsers&lt;/strong&gt;. I really advise checking &lt;a href=&#34;https://talk.commonmark.org/t/beyond-markdown/2787&#34;&gt;some writeups&lt;/a&gt; out on how bad it can get at times. What if we told you it&#39;s possible to alleviate those problems, all whilst keeping that familiar feel? Enter the &lt;code&gt;.norg&lt;/code&gt; file format, whose &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/docs/NFF-0.1-spec.md&#34;&gt;base spec&lt;/a&gt; is practically complete. The cross between all the best things from org and the best things from markdown, revised and merged into one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keybinds that &lt;em&gt;make sense&lt;/em&gt;: vim&#39;s keybind philosophy is unlike any other, and we want to keep that vibe. Keys form a &#34;language&#34;, one that you can speak, not one that you need to learn off by heart.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Infinite extensibility: no, that isn&#39;t a hyperbole. We mean it. Neorg is built upon an insanely modular and configurable backend - keep what you need, throw away what you don&#39;t care about. Use the defaults or change &#39;em. You are in control of what code runs and what code doesn&#39;t run!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Logic: everything has a reason, everything has logical meaning. If there&#39;s a feature, it&#39;s there because it&#39;s necessary, not because two people asked for it. If something has a more niche use case, it should be documented.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🗺 Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;We track a high-level roadmap, so that you can know what to expect. Just do &lt;code&gt;:h neorg-roadmap&lt;/code&gt;. To know exactly what&#39;s being worked on, just check out the &lt;a href=&#34;https://github.com/nvim-neorg/neorg/pulls&#34;&gt;repo&#39;s PRs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📚 FAQ&lt;/h2&gt; &#xA;&lt;!-- TODO(vhyrro): Populate with common issues --&gt; &#xA;&lt;p&gt;The wiki is the go-to place if you need answers to anything Neorg-related. Usage, Keybinds, User Callbacks, Modules, Events? It&#39;s all there, so we recommend you seriously go &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki&#34;&gt;read it&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Have an idea? An improvement to existing functionality? Feedback in general?&lt;/p&gt; &#xA;&lt;p&gt;We seriously recommend you join our &lt;a href=&#34;https://discord.gg/T6EgTAX7ht&#34;&gt;discord&lt;/a&gt; to hang out and chat about your ideas, plus that you read the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/docs/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more info about developer-related stuff!&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Massive shoutouts go to all the contributors actively working on the project together to form a fantastic integrated workflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrossinek&#34;&gt;mrossinek&lt;/a&gt; - for basically being my second brain when it comes to developing new features and adding new syntax elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danymat&#34;&gt;danymat&lt;/a&gt; - for creating the excellent GTD workflow in Neorg that we literally use internally to plan new features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And an extra thank you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Binx-Codes/&#34;&gt;Binx&lt;/a&gt; - for making that gorgeous logo for free!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bandithedoge&#34;&gt;bandithedoge&lt;/a&gt; - for converting the PNG version of the logo into SVG form&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Love what I do? Want to see more get done faster? Want to support future projects? Any sort of support is always heartwarming and fuels the urge to keep going &lt;span&gt;❤️&lt;/span&gt;. You can show support here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://buymeacoffee.com/vhyrro&#34;&gt;Buy me a coffee!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://liberapay.com/vhyrro&#34;&gt;Support me on LiberaPay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paypal.me/ewaczupryna?locale.x=en_GB&#34;&gt;Donate directly via paypal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patreon.com/vhyrro&#34;&gt;Support me on Patreon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Donate to my monero wallet: &lt;code&gt;86CXbnPLa14F458FRQFe26PRfffZTZDbUeb4NzYiHDtzcyaoMnfq1TqVU1EiBFrbKqGshFomDzxWzYX2kMvezcNu9TaKd9t&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Donate via bitcoin: &lt;code&gt;bc1q4ey43t9hhstzdqh8kqcllxwnqlx9lfxqqh439s&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- TODO: Create table of donation links for all maintainers --&gt;</summary>
  </entry>
  <entry>
    <title>awesomeWM/awesome</title>
    <updated>2022-05-31T02:44:08Z</updated>
    <id>tag:github.com,2022-05-31:/awesomeWM/awesome</id>
    <link href="https://github.com/awesomeWM/awesome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;awesome window manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Readme&lt;/h1&gt; &#xA;&lt;h2&gt;About Awesome&lt;/h2&gt; &#xA;&lt;p&gt;Awesome is a highly configurable, next generation framework window manager for X.&lt;/p&gt; &#xA;&lt;h2&gt;Building and installation&lt;/h2&gt; &#xA;&lt;p&gt;After extracting the dist tarball or cloning the repository, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;create a build directory at &lt;code&gt;./build&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;cmake&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;build Awesome and&lt;/li&gt; &#xA; &lt;li&gt;install it to the default prefix path &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Alternatively to the above, you can generate a &lt;code&gt;.deb&lt;/code&gt; or &lt;code&gt;.rpm&lt;/code&gt; package, for easy installation management:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make package&#xA;&#xA;sudo dpkg -i awesome-x.y.z.deb&#xA;# or&#xA;sudo rpm -Uvh awesome-x.y.z.rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced options and testing&lt;/h3&gt; &#xA;&lt;p&gt;A full list of dependencies, more advanced build options, as well as instructions on how to use the test suite can be found &lt;a href=&#34;https://awesomewm.org/apidoc/documentation/10-building-and-testing.md.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing current git master as a package receipts&lt;/h3&gt; &#xA;&lt;h4&gt;Arch Linux AUR&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S --needed base-devel git&#xA;git clone https://aur.archlinux.org/awesome-git.git&#xA;cd awesome-git&#xA;makepkg -fsri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debian-based&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt build-dep awesome&#xA;git clone https://github.com/awesomewm/awesome&#xA;cd awesome&#xA;make package&#xA;sudo apt install *.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Awesome&lt;/h2&gt; &#xA;&lt;p&gt;You can directly select Awesome from your display manager. If not, you can add the following line to your &lt;code&gt;.xinitrc&lt;/code&gt; to start Awesome using &lt;code&gt;startx&lt;/code&gt; or to &lt;code&gt;.xsession&lt;/code&gt; to start Awesome using your display manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;exec awesome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to connect Awesome to a specific display, make sure that the &lt;code&gt;DISPLAY&lt;/code&gt; environment variable is set correctly, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DISPLAY=foo.bar:1 exec awesome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(This will start Awesome on display &lt;code&gt;:1&lt;/code&gt; of the host foo.bar.)&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration of Awesome is done by creating a &lt;code&gt;$XDG_CONFIG_HOME/awesome/rc.lua&lt;/code&gt; file, typically &lt;code&gt;~/.config/awesome/rc.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example configuration named &lt;code&gt;awesomerc.lua&lt;/code&gt; is provided in the source.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;On most systems any message printed by Awesome (including warnings and errors) is written to &lt;code&gt;~/.xsession-errors&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If Awesome does not start or the configuration file is not producing the desired results the user should examine this file to gain insight into the problem.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging tips&lt;/h3&gt; &#xA;&lt;p&gt;You can call &lt;code&gt;awesome&lt;/code&gt; with &lt;code&gt;gdb&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DISPLAY=:2 gdb awesome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in &lt;code&gt;gdb&lt;/code&gt; set any arguments and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(gdb) set args --replace&#xA;(gdb) run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Asking questions&lt;/h2&gt; &#xA;&lt;h4&gt;IRC&lt;/h4&gt; &#xA;&lt;p&gt;You can join us in the &lt;code&gt;#awesome&lt;/code&gt; channel on the &lt;a href=&#34;http://www.oftc.net/&#34;&gt;OFTC&lt;/a&gt; IRC network.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webchat.oftc.net/?channels=awesome&#34;&gt;IRC Webchat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Stack Overflow&lt;/h4&gt; &#xA;&lt;p&gt;You can ask questions on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/awesome-wm&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Reddit&lt;/h4&gt; &#xA;&lt;p&gt;We also have a &lt;a href=&#34;https://www.reddit.com/r/awesomewm/&#34;&gt;awesome subreddit&lt;/a&gt; where you can share your work and ask questions.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting issues&lt;/h2&gt; &#xA;&lt;p&gt;Please report any issues you may find on &lt;a href=&#34;https://github.com/awesomeWM/awesome/issues&#34;&gt;our bugtracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing code&lt;/h2&gt; &#xA;&lt;p&gt;You can submit pull requests on the &lt;a href=&#34;https://github.com/awesomeWM/awesome&#34;&gt;github repository&lt;/a&gt;. Please read the &lt;a href=&#34;https://github.com/awesomeWM/awesome/raw/master/docs/02-contributing.md&#34;&gt;contributing guide&lt;/a&gt; for any coding, documentation or patch guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/awesomeWM/awesome&#34;&gt;&lt;img src=&#34;https://travis-ci.com/awesomeWM/awesome.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Online documentation is available &lt;a href=&#34;https://awesomewm.org/apidoc/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is licensed under GNU General Public License v2 or later. You can read it online at (&lt;a href=&#34;http://www.gnu.org/licenses/gpl-2.0.html&#34;&gt;v2&lt;/a&gt; or &lt;a href=&#34;http://www.gnu.org/licenses/gpl.html&#34;&gt;v3&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
</feed>