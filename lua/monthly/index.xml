<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:52:34Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jose-elias-alvarez/null-ls.nvim</title>
    <updated>2022-09-01T01:52:34Z</updated>
    <id>tag:github.com,2022-09-01:/jose-elias-alvarez/null-ls.nvim</id>
    <link href="https://github.com/jose-elias-alvarez/null-ls.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;null-ls.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Neovim&#39;s LSP ecosystem is growing, and plugins like &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt; make it a joy to work with LSP features like code actions and diagnostics.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the VS Code and coc.nvim ecosystems, Neovim doesn&#39;t provide a way for non-LSP sources to hook into its LSP client. null-ls is an attempt to bridge that gap and simplify the process of creating, sharing, and setting up LSP sources using pure Lua.&lt;/p&gt; &#xA;&lt;p&gt;null-ls is also an attempt to reduce the boilerplate required to set up general-purpose language servers and improve performance by removing the need for external processes.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;null-ls is in &lt;strong&gt;beta status&lt;/strong&gt;. Please see below for steps to follow if something doesn&#39;t work the way you expect (or doesn&#39;t work at all).&lt;/p&gt; &#xA;&lt;p&gt;At the moment, null-is is compatible with Neovim 0.7 (stable) and 0.8 (head), but some features and performance improvements are exclusive to the latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;null-ls sources are able to hook into the following LSP features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Code actions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Diagnostics (file- and project-level)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Formatting (including range formatting)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hover&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Completion&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;null-ls includes built-in sources for each of these features to provide out-of-the-box functionality. See &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/BUILTINS.md&#34;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/BUILTIN_CONFIG.md&#34;&gt;BUILTIN_CONFIG&lt;/a&gt; for instructions on how to set up and configure these sources.&lt;/p&gt; &#xA;&lt;p&gt;null-ls also provides helpers to streamline the process of spawning and transforming the output of command-line processes into an LSP-friendly format. If you want to create your own source, either for personal use or for a plugin, see &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/HELPERS.md&#34;&gt;HELPERS&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install null-ls using your favorite package manager. The plugin depends on &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;, which you are (probably) already using.&lt;/p&gt; &#xA;&lt;p&gt;To get started, you must set up null-ls and register at least one source. See &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/BUILTINS.md&#34;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/CONFIG.md&#34;&gt;CONFIG&lt;/a&gt; for information about setting up and configuring null-ls.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;null-ls&#34;).setup({&#xA;    sources = {&#xA;        require(&#34;null-ls&#34;).builtins.formatting.stylua,&#xA;        require(&#34;null-ls&#34;).builtins.diagnostics.eslint,&#xA;        require(&#34;null-ls&#34;).builtins.completion.spell,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The definitive source for information about null-ls is its &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/MAIN.md&#34;&gt;documentation&lt;/a&gt;, which contains information about how null-ls works, how to set it up, and how to create sources.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to add new features and built-ins for any language are always welcome. See &lt;a href=&#34;https://raw.githubusercontent.com/jose-elias-alvarez/null-ls.nvim/main/doc/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Parsing buffer content&lt;/h3&gt; &#xA;&lt;p&gt;The following example demonstrates a diagnostic source that will parse the current buffer&#39;s content and show instances of the word &lt;code&gt;really&lt;/code&gt; as LSP warnings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;local api = vim.api&#xA;&#xA;local no_really = {&#xA;    method = null_ls.methods.DIAGNOSTICS,&#xA;    filetypes = { &#34;markdown&#34;, &#34;text&#34; },&#xA;    generator = {&#xA;        fn = function(params)&#xA;            local diagnostics = {}&#xA;            -- sources have access to a params object&#xA;            -- containing info about the current file and editor state&#xA;            for i, line in ipairs(params.content) do&#xA;                local col, end_col = line:find(&#34;really&#34;)&#xA;                if col and end_col then&#xA;                    -- null-ls fills in undefined positions&#xA;                    -- and converts source diagnostics into the required format&#xA;                    table.insert(diagnostics, {&#xA;                        row = i,&#xA;                        col = col,&#xA;                        end_col = end_col,&#xA;                        source = &#34;no-really&#34;,&#xA;                        message = &#34;Don&#39;t use &#39;really!&#39;&#34;,&#xA;                        severity = 2,&#xA;                    })&#xA;                end&#xA;            end&#xA;            return diagnostics&#xA;        end,&#xA;    },&#xA;}&#xA;&#xA;null_ls.register(no_really)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parsing CLI program output&lt;/h3&gt; &#xA;&lt;p&gt;null-ls includes helpers to simplify the process of spawning and capturing the output of CLI programs. This example shows how to pass the content of the current buffer to &lt;code&gt;markdownlint&lt;/code&gt; via &lt;code&gt;stdin&lt;/code&gt; and convert its output (which it sends to &lt;code&gt;stderr&lt;/code&gt;) into LSP diagnostics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;local helpers = require(&#34;null-ls.helpers&#34;)&#xA;&#xA;local markdownlint = {&#xA;    method = null_ls.methods.DIAGNOSTICS,&#xA;    filetypes = { &#34;markdown&#34; },&#xA;    -- null_ls.generator creates an async source&#xA;    -- that spawns the command with the given arguments and options&#xA;    generator = null_ls.generator({&#xA;        command = &#34;markdownlint&#34;,&#xA;        args = { &#34;--stdin&#34; },&#xA;        to_stdin = true,&#xA;        from_stderr = true,&#xA;        -- choose an output format (raw, json, or line)&#xA;        format = &#34;line&#34;,&#xA;        check_exit_code = function(code, stderr)&#xA;            local success = code &amp;lt;= 1&#xA;&#xA;            if not success then&#xA;                -- can be noisy for things that run often (e.g. diagnostics), but can&#xA;                -- be useful for things that run on demand (e.g. formatting)&#xA;                print(stderr)&#xA;            end&#xA;&#xA;            return success&#xA;        end,&#xA;        -- use helpers to parse the output from string matchers,&#xA;        -- or parse it manually with a function&#xA;        on_output = helpers.diagnostics.from_patterns({&#xA;            {&#xA;                pattern = [[:(%d+):(%d+) [%w-/]+ (.*)]],&#xA;                groups = { &#34;row&#34;, &#34;col&#34;, &#34;message&#34; },&#xA;            },&#xA;            {&#xA;                pattern = [[:(%d+) [%w-/]+ (.*)]],&#xA;                groups = { &#34;row&#34;, &#34;message&#34; },&#xA;            },&#xA;        }),&#xA;    }),&#xA;}&#xA;&#xA;null_ls.register(markdownlint)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Something isn&#39;t working! What do I do?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you run into issues when using null-ls, please follow the steps below and &lt;strong&gt;do not&lt;/strong&gt; open an issue on the Neovim repository. null-ls is not an actual LSP server, so we need to determine whether issues are specific to this plugin before sending anything upstream.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure your configuration is in line with the latest version of this document.&lt;/li&gt; &#xA; &lt;li&gt;Enable debug mode (see below) and check the output of your source(s). If the CLI program is not properly configured or is otherwise not running as expected, that&#39;s an issue with the program, not null-ls.&lt;/li&gt; &#xA; &lt;li&gt;Check the documentation for available configuration options that might solve your issue.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re having trouble configuring null-ls or want to know how to achieve a specific result, open a discussion.&lt;/li&gt; &#xA; &lt;li&gt;If you believe the issue is with null-ls itself or you want to request a new feature, open an issue and provide the information requested in the issue template.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How do I format files?&lt;/h3&gt; &#xA;&lt;p&gt;null-ls formatters run when you call &lt;code&gt;vim.lsp.buf.formatting()&lt;/code&gt; or &lt;code&gt;vim.lsp.buf.formatting_sync()&lt;/code&gt;. If a source supports it, you can run range formatting by visually selecting part of the buffer and calling &lt;code&gt;vim.lsp.buf.range_formatting()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On 0.8, you should use &lt;code&gt;vim.lsp.buf.format&lt;/code&gt; (see the help file for usage instructions).&lt;/p&gt; &#xA;&lt;h3&gt;How do I format files on save?&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Formatting-on-save&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I stop Neovim from asking me which server I want to use for formatting?&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Avoiding-LSP-formatting-conflicts&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I view project-level diagnostics?&lt;/h3&gt; &#xA;&lt;p&gt;For a built-in solution, use &lt;code&gt;:lua vim.diagnostic.setqflist()&lt;/code&gt;. You can also use a plugin like &lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I enable debug mode and get debug output?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;debug&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; in your config:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;null-ls&#34;).setup({&#xA;    debug = true,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;:NullLsLog&lt;/code&gt; to open your debug log in the current Neovim instance or &lt;code&gt;:NullLsInfo&lt;/code&gt; to get the path to your debug log.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As with LSP logging, debug mode will slow down Neovim. Make sure to disable the option after you&#39;ve collected the information you&#39;re looking for.&lt;/p&gt; &#xA;&lt;h3&gt;Does it work with (other plugin)?&lt;/h3&gt; &#xA;&lt;p&gt;In most cases, yes. null-ls tries to act like an actual LSP server as much as possible, so it should work seamlessly with most LSP-related plugins. If you run into problems, please try to determine which plugin is causing them and open an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Compatibility-with-other-plugins&#34;&gt;This wiki page&lt;/a&gt; mentions plugins that require specific configuration options / tweaks to work with null-ls.&lt;/p&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to hard work by @folke, the plugin wraps the mechanism Neovim uses to spawn language servers to start a client entirely in-memory. The client attaches to buffers that match defined sources and receives and responds to requests, document changes, and other events from Neovim.&lt;/p&gt; &#xA;&lt;h3&gt;Will it affect my performance?&lt;/h3&gt; &#xA;&lt;p&gt;More testing is necessary, but since null-ls uses pure Lua and runs entirely in memory without any external processes, in most cases it should run faster than similar solutions. If you notice that performance is worse with null-ls than with an alternative, please open an issue!&lt;/p&gt; &#xA;&lt;h3&gt;I am seeing a formatting &lt;code&gt;timeout&lt;/code&gt; error message&lt;/h3&gt; &#xA;&lt;p&gt;This issue occurs when a formatter takes longer than the default timeout value. This is an automatic mechanism and controlled by Neovim. You might want to increase the timeout in your call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- 0.7&#xA;vim.lsp.buf.formatting_sync(nil, 2000) -- 2 seconds&#xA;&#xA;-- 0.8&#xA;vim.lsp.buf.format({ timeout_ms = 2000 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;The test suite includes unit and integration tests and depends on plenary.nvim. Run &lt;code&gt;make test&lt;/code&gt; in the root of the project to run the suite or &lt;code&gt;FILE=filename_spec.lua make test-file&lt;/code&gt; to test an individual file.&lt;/p&gt; &#xA;&lt;p&gt;All tests expect the latest Neovim master.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt; and &lt;a href=&#34;https://github.com/iamcco/diagnostic-languageserver&#34;&gt;diagnostic-languageserver&lt;/a&gt;: general-purpose language servers that can provide formatting and diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;nvim-lint&lt;/a&gt;: a Lua plugin that focuses on providing diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mhartington/formatter.nvim&#34;&gt;formatter.nvim&lt;/a&gt;: a Lua plugin that (surprise) focuses on formatting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/lewis6991/hover.nvim&#34;&gt;hover.nvim&lt;/a&gt;: Hover plugin framework for Neovim.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to everyone who sponsors my projects and makes continued development / maintenance possible!&lt;/p&gt; &#xA;&lt;!-- sponsors --&gt;&#xA;&lt;a href=&#34;https://github.com/hituzi-no-sippo&#34;&gt;&lt;img src=&#34;https://github.com/hituzi-no-sippo.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/sbc64&#34;&gt;&lt;img src=&#34;https://github.com/sbc64.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/chase&#34;&gt;&lt;img src=&#34;https://github.com/chase.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;!-- sponsors --&gt;</summary>
  </entry>
  <entry>
    <title>windwp/nvim-autopairs</title>
    <updated>2022-09-01T01:52:34Z</updated>
    <id>tag:github.com,2022-09-01:/windwp/nvim-autopairs</id>
    <link href="https://github.com/windwp/nvim-autopairs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;autopairs for neovim written by lua&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;nvim-autopairs&lt;/h2&gt; &#xA;&lt;p&gt;A super powerful autopair plugin for Neovim that supports multiple characters.&lt;/p&gt; &#xA;&lt;p&gt;Requires neovim 0.7&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;windwp/nvim-autopairs&#39;&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#34;nvim-autopairs&#34;).setup {}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;&#x9;&#34;windwp/nvim-autopairs&#34;,&#xA;    config = function() require(&#34;nvim-autopairs&#34;).setup {} end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default values&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local disable_filetype = { &#34;TelescopePrompt&#34; }&#xA;local disable_in_macro = false  -- disable when recording or executing a macro&#xA;local disable_in_visualblock = false -- disable when insert after visual block mode&#xA;local ignored_next_char = [=[[%w%%%&#39;%[%&#34;%.]]=]&#xA;local enable_moveright = true&#xA;local enable_afterquote = true  -- add bracket pairs after quote&#xA;local enable_check_bracket_line = true  --- check bracket in same line&#xA;local enable_bracket_in_quote = true --&#xA;local enable_abbr = false -- trigger abbreviation&#xA;local break_undo = true -- switch for basic rule break undo sequence&#xA;local check_ts = false&#xA;local map_cr = true&#xA;local map_bs = true  -- map the &amp;lt;BS&amp;gt; key&#xA;local map_c_h = false  -- Map the &amp;lt;C-h&amp;gt; key to delete a pair&#xA;local map_c_w = false -- map &amp;lt;c-w&amp;gt; to delete a pair if possible&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Override default values&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  disable_filetype = { &#34;TelescopePrompt&#34; , &#34;vim&#34; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mapping &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Before        Input         After&#xA;------------------------------------&#xA;{|}           &amp;lt;CR&amp;gt;          {&#xA;                                |&#xA;                            }&#xA;------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;nvim-cmp&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;h3&gt; You need to add mapping `CR` on nvim-cmp setup. Check readme.md on nvim-cmp repo. &lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- If you want insert `(` after select function or method item&#xA;local cmp_autopairs = require(&#39;nvim-autopairs.completion.cmp&#39;)&#xA;local cmp = require(&#39;cmp&#39;)&#xA;cmp.event:on(&#xA;  &#39;confirm_done&#39;,&#xA;  cmp_autopairs.on_confirm_done()&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can customize the kind of completion to add &lt;code&gt;(&lt;/code&gt; or any character.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local handlers = require(&#39;nvim-autopairs.completion.handlers&#39;)&#xA;&#xA;cmp.event:on(&#xA;  &#39;confirm_done&#39;,&#xA;  cmp_autopairs.on_confirm_done({&#xA;    filetypes = {&#xA;      -- &#34;*&#34; is a alias to all filetypes&#xA;      [&#34;*&#34;] = {&#xA;        [&#34;(&#34;] = {&#xA;          kind = {&#xA;            cmp.lsp.CompletionItemKind.Function,&#xA;            cmp.lsp.CompletionItemKind.Method,&#xA;          },&#xA;          handler = handlers[&#34;*&#34;]&#xA;        }&#xA;      },&#xA;      lua = {&#xA;        [&#34;(&#34;] = {&#xA;          kind = {&#xA;            cmp.lsp.CompletionItemKind.Function,&#xA;            cmp.lsp.CompletionItemKind.Method&#xA;          },&#xA;          ---@param char string&#xA;          ---@param item item completion&#xA;          ---@param bufnr buffer number&#xA;          handler = function(char, item, bufnr)&#xA;            -- Your handler function. Inpect with print(vim.inspect{char, item, bufnr})&#xA;          end&#xA;        }&#xA;      },&#xA;      -- Disable for tex&#xA;      tex = false&#xA;    }&#xA;  })&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Don&#39;t use &lt;code&gt;nil&lt;/code&gt; to disable a filetype. If a filetype is &lt;code&gt;nil&lt;/code&gt; then &lt;code&gt;*&lt;/code&gt; is used as fallback.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;coq_nvim&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local remap = vim.api.nvim_set_keymap&#xA;local npairs = require(&#39;nvim-autopairs&#39;)&#xA;&#xA;npairs.setup({ map_bs = false, map_cr = false })&#xA;&#xA;vim.g.coq_settings = { keymap = { recommended = false } }&#xA;&#xA;-- these mappings are coq recommended mappings unrelated to nvim-autopairs&#xA;remap(&#39;i&#39;, &#39;&amp;lt;esc&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-e&amp;gt;&amp;lt;esc&amp;gt;&#34; : &#34;&amp;lt;esc&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;c-c&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-e&amp;gt;&amp;lt;c-c&amp;gt;&#34; : &#34;&amp;lt;c-c&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;tab&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-n&amp;gt;&#34; : &#34;&amp;lt;tab&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;s-tab&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-p&amp;gt;&#34; : &#34;&amp;lt;bs&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;&#xA;-- skip it, if you use another global object&#xA;_G.MUtils= {}&#xA;&#xA;MUtils.CR = function()&#xA;  if vim.fn.pumvisible() ~= 0 then&#xA;    if vim.fn.complete_info({ &#39;selected&#39; }).selected ~= -1 then&#xA;      return npairs.esc(&#39;&amp;lt;c-y&amp;gt;&#39;)&#xA;    else&#xA;      return npairs.esc(&#39;&amp;lt;c-e&amp;gt;&#39;) .. npairs.autopairs_cr()&#xA;    end&#xA;  else&#xA;    return npairs.autopairs_cr()&#xA;  end&#xA;end&#xA;remap(&#39;i&#39;, &#39;&amp;lt;cr&amp;gt;&#39;, &#39;v:lua.MUtils.CR()&#39;, { expr = true, noremap = true })&#xA;&#xA;MUtils.BS = function()&#xA;  if vim.fn.pumvisible() ~= 0 and vim.fn.complete_info({ &#39;mode&#39; }).mode == &#39;eval&#39; then&#xA;    return npairs.esc(&#39;&amp;lt;c-e&amp;gt;&#39;) .. npairs.autopairs_bs()&#xA;  else&#xA;    return npairs.autopairs_bs()&#xA;  end&#xA;end&#xA;remap(&#39;i&#39;, &#39;&amp;lt;bs&amp;gt;&#39;, &#39;v:lua.MUtils.BS()&#39;, { expr = true, noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;without completion plugin&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- add option map_cr&#xA;npairs.setup({ map_cr = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Completion-plugin&#34;&gt;another completion plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have a problem with indent after you press &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; please check the settings of treesitter indent or install a plugin that has indent support for your filetype.&lt;/p&gt; &#xA;&lt;h3&gt;Rule&lt;/h3&gt; &#xA;&lt;p&gt;nvim-autopairs uses rules with conditions to check pairs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Rule = require(&#39;nvim-autopairs.rule&#39;)&#xA;local npairs = require(&#39;nvim-autopairs&#39;)&#xA;&#xA;npairs.add_rule(Rule(&#34;$$&#34;,&#34;$$&#34;,&#34;tex&#34;))&#xA;&#xA;-- you can use some built-in conditions&#xA;&#xA;local cond = require(&#39;nvim-autopairs.conds&#39;)&#xA;print(vim.inspect(cond))&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;$&#34;, &#34;$&#34;,{&#34;tex&#34;, &#34;latex&#34;})&#xA;    -- don&#39;t add a pair if the next character is %&#xA;    :with_pair(cond.not_after_regex(&#34;%%&#34;))&#xA;    -- don&#39;t add a pair if  the previous character is xxx&#xA;    :with_pair(cond.not_before_regex(&#34;xxx&#34;, 3))&#xA;    -- don&#39;t move right when repeat character&#xA;    :with_move(cond.none())&#xA;    -- don&#39;t delete if the next character is xx&#xA;    :with_del(cond.not_after_regex(&#34;xx&#34;))&#xA;    -- disable adding a newline when you press &amp;lt;cr&amp;gt;&#xA;    :with_cr(cond.none())&#xA;  },&#xA;  -- disable for .vim files, but it work for another filetypes&#xA;  Rule(&#34;a&#34;,&#34;a&#34;,&#34;-vim&#34;)&#xA;)&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;$$&#34;,&#34;$$&#34;,&#34;tex&#34;)&#xA;    :with_pair(function(opts)&#xA;        print(vim.inspect(opts))&#xA;        if opts.line==&#34;aa $$&#34; then&#xA;        -- don&#39;t add pair on that line&#xA;          return false&#xA;        end&#xA;    end)&#xA;   }&#xA;)&#xA;&#xA;-- you can use regex&#xA;-- press u1234 =&amp;gt; u1234number&#xA;npairs.add_rules({&#xA;    Rule(&#34;u%d%d%d%d$&#34;, &#34;number&#34;, &#34;lua&#34;)&#xA;      :use_regex(true)&#xA;})&#xA;&#xA;&#xA;&#xA;-- press x1234 =&amp;gt; x12341234&#xA;npairs.add_rules({&#xA;    Rule(&#34;x%d%d%d%d$&#34;, &#34;number&#34;, &#34;lua&#34;)&#xA;      :use_regex(true)&#xA;      :replace_endpair(function(opts)&#xA;          -- print(vim.inspect(opts))&#xA;          return opts.prev_char:sub(#opts.prev_char - 3,#opts.prev_char)&#xA;      end)&#xA;})&#xA;&#xA;&#xA;-- you can do anything with regex +special key&#xA;-- example press tab to uppercase text:&#xA;-- press b1234s&amp;lt;tab&amp;gt; =&amp;gt; B1234S1234S&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;b%d%d%d%d%w$&#34;, &#34;&#34;, &#34;vim&#34;)&#xA;    :use_regex(true,&#34;&amp;lt;tab&amp;gt;&#34;)&#xA;    :replace_endpair(function(opts)&#xA;          return&#xA;              opts.prev_char:sub(#opts.prev_char - 4,#opts.prev_char)&#xA;              ..&#34;&amp;lt;esc&amp;gt;viwU&#34;&#xA;    end)&#xA;})&#xA;&#xA;-- you can exclude filetypes&#xA;npairs.add_rule(&#xA;  Rule(&#34;$$&#34;,&#34;$$&#34;)&#xA;    :with_pair(cond.not_filetypes({&#34;lua&#34;}))&#xA;)&#xA;--- check ./lua/nvim-autopairs/rules/basic.lua&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Rules-API&#34;&gt;Rules API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Treesitter&lt;/h3&gt; &#xA;&lt;p&gt;You can use treesitter to check for a pair.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local npairs = require(&#34;nvim-autopairs&#34;)&#xA;local Rule = require(&#39;nvim-autopairs.rule&#39;)&#xA;&#xA;npairs.setup({&#xA;    check_ts = true,&#xA;    ts_config = {&#xA;        lua = {&#39;string&#39;},-- it will not add a pair on that treesitter node&#xA;        javascript = {&#39;template_string&#39;},&#xA;        java = false,-- don&#39;t check treesitter on java&#xA;    }&#xA;})&#xA;&#xA;local ts_conds = require(&#39;nvim-autopairs.ts-conds&#39;)&#xA;&#xA;&#xA;-- press % =&amp;gt; %% only while inside a comment or string&#xA;npairs.add_rules({&#xA;  Rule(&#34;%&#34;, &#34;%&#34;, &#34;lua&#34;)&#xA;    :with_pair(ts_conds.is_ts_node({&#39;string&#39;,&#39;comment&#39;})),&#xA;  Rule(&#34;$&#34;, &#34;$&#34;, &#34;lua&#34;)&#xA;    :with_pair(ts_conds.is_not_ts_node({&#39;function&#39;}))&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t add pairs if it already has a close pair in the same line&lt;/h3&gt; &#xA;&lt;p&gt;if &lt;strong&gt;next character&lt;/strong&gt; is a close pair and it doesn&#39;t have an open pair in same line, then it will not add a close pair&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input         After&#xA;------------------------------------&#xA;(  |))         (            (  (|))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  enable_check_bracket_line = false&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t add pairs if the next char is alphanumeric&lt;/h3&gt; &#xA;&lt;p&gt;You can customize how nvim-autopairs will behave if it encounters a specific character&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  ignored_next_char = &#34;[%w%.]&#34; -- will ignore alphanumeric and `.` symbol&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input         After&#xA;------------------------------------&#xA;|foobar        (            (|foobar&#xA;|.foobar       (            (|.foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugin Integration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  require(&#39;nvim-autopairs&#39;).disable()&#xA;  require(&#39;nvim-autopairs&#39;).enable()&#xA;  require(&#39;nvim-autopairs&#39;).remove_rule(&#39;(&#39;) -- remove rule (&#xA;  require(&#39;nvim-autopairs&#39;).clear_rules() -- clear all rules&#xA;  require(&#39;nvim-autopairs&#39;).get_rule(&#39;&#34;&#39;) -- get rule &#34; then modify it&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FastWrap&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input                    After&#xA;--------------------------------------------------&#xA;(|foobar      &amp;lt;M-e&amp;gt; then press $        (|foobar)&#xA;(|)(foobar)   &amp;lt;M-e&amp;gt; then press q       (|(foobar))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- put this to setup function and press &amp;lt;a-e&amp;gt; to use fast_wrap&#xA;npairs.setup({&#xA;    fast_wrap = {},&#xA;})&#xA;&#xA;-- change default fast_wrap&#xA;npairs.setup({&#xA;    fast_wrap = {&#xA;      map = &#39;&amp;lt;M-e&amp;gt;&#39;,&#xA;      chars = { &#39;{&#39;, &#39;[&#39;, &#39;(&#39;, &#39;&#34;&#39;, &#34;&#39;&#34; },&#xA;      pattern = [=[[%&#39;%&#34;%)%&amp;gt;%]%)%}%,]]=],&#xA;      end_key = &#39;$&#39;,&#xA;      keys = &#39;qwertyuiopzxcvbnmasdfghjkl&#39;,&#xA;      check_comma = true,&#xA;      highlight = &#39;Search&#39;,&#xA;      highlight_grey=&#39;Comment&#39;&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;autotag html and tsx&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-ts-autotag&#34;&gt;autotag&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Endwise&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Endwise&#34;&gt;endwise&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom rules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Custom-rules&#34;&gt;rules&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>echasnovski/mini.nvim</title>
    <updated>2022-09-01T01:52:34Z</updated>
    <id>tag:github.com,2022-09-01:/echasnovski/mini.nvim</id>
    <link href="https://github.com/echasnovski/mini.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin with collection of minimal, independent, and fast Lua modules dedicated to improve Neovim (version 0.5 and higher) experience&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/logo.png&#34; width=&#34;800em&#34;&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/echasnovski/mini.nvim&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/tags/&#34;&gt;&lt;img src=&#34;https://badgen.net/github/tag/echasnovski/mini.nvim&#34; alt=&#34;GitHub tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/CHANGELOG.md&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/Current%20version/development/cyan&#34; alt=&#34;Current version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Collection of 20+ minimal, independent, and fast Lua modules dedicated to improve &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; (version 0.5 and higher) experience. Think about it as &#34;Swiss Army knife&#34; among Neovim plugins: it has many different independent tools (modules) suitable for most common tasks. Each module can be used as a separate sub-plugin without any startup and usage overhead.&lt;/p&gt; &#xA;&lt;p&gt;If you want to help this project grow but don&#39;t know where to start, check out &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/CONTRIBUTING.md&#34;&gt;contributing guides&lt;/a&gt; or simply star this project on Github.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#general-principles&#34;&gt;General principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#plugin-colorschemes&#34;&gt;Plugin colorschemes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#modules&#34;&gt;Modules&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#miniai&#34;&gt;mini.ai&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minibase16&#34;&gt;mini.base16&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minibufremove&#34;&gt;mini.bufremove&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minicomment&#34;&gt;mini.comment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minicompletion&#34;&gt;mini.completion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minicursorword&#34;&gt;mini.cursorword&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minidoc&#34;&gt;mini.doc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minifuzzy&#34;&gt;mini.fuzzy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#miniindentscope&#34;&gt;mini.indentscope&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minijump&#34;&gt;mini.jump&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minijump2d&#34;&gt;mini.jump2d&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minimisc&#34;&gt;mini.misc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minipairs&#34;&gt;mini.pairs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minisessions&#34;&gt;mini.sessions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#ministarter&#34;&gt;mini.starter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#ministatusline&#34;&gt;mini.statusline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minisurround&#34;&gt;mini.surround&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minitabline&#34;&gt;mini.tabline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minitest&#34;&gt;mini.test&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#minitrailspace&#34;&gt;mini.trailspace&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#planned-modules&#34;&gt;Planned modules&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin offers two branches to install from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main&lt;/code&gt; (default) will have latest development version of plugin. All changes since last stable release should be perceived as being in beta testing phase (meaning they already passed alpha-testing and are moderately settled).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; will be updated only upon releases with code tested during public beta-testing phase in &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are at least the following ways to install this plugin:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer.nvim&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Development&#xA;use &#39;echasnovski/mini.nvim&#39;&#xA;&#xA;-- Stable&#xA;use { &#39;echasnovski/mini.nvim&#39;, branch = &#39;stable&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Development&#xA;Plug &#39;echasnovski/mini.nvim&#39;&#xA;&#xA;&#34; Stable&#xA;Plug &#39;echasnovski/mini.nvim&#39;, { &#39;branch&#39;: &#39;stable&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each module is independent and implemented within single file. You can copy corresponding file from &#39;lua/mini/&#39; directory to your &#39;.config/nvim/lua&#39; directory and use it from there.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Don&#39;t forget to call module&#39;s &lt;code&gt;setup()&lt;/code&gt; (if required) to enable its functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are on Windows, there might be problems with too long file paths (like &lt;code&gt;error: unable to create file &amp;lt;some file name&amp;gt;: Filename too long&lt;/code&gt;). Try doing one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable corresponding git global config value: &lt;code&gt;git config --system core.longpaths true&lt;/code&gt;. Then try to reinstall.&lt;/li&gt; &#xA; &lt;li&gt;Install plugin in other place with shorter path.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;General principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Design&lt;/strong&gt;. Each module is designed to solve a particular problem targeting balance between feature-richness (handling as many edge-cases as possible) and simplicity of implementation/support. Granted, not all of them ended up with the same balance, but it is the goal nevertheless.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Independence&lt;/strong&gt;. Modules are independent of each other and can be run without external dependencies. Although some of them may need dependencies for full experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Structure&lt;/strong&gt;. Each module is a submodule for a placeholder &#34;mini&#34; module. So, for example, &#34;surround&#34; module should be referred to as &#34;mini.surround&#34;. As later will be explained, this plugin can also be referred to as &#34;MiniSurround&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Setup&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Each module (if needed) should be setup separately with &lt;code&gt;require(&amp;lt;name of module&amp;gt;).setup({})&lt;/code&gt; (possibly replace {} with your config table or omit to use defaults). You can supply only values which differ from defaults, which will be used for the rest ones.&lt;/li&gt; &#xA;   &lt;li&gt;Call to module&#39;s &lt;code&gt;setup()&lt;/code&gt; always creates a global Lua object with coherent camel-case name: &lt;code&gt;require(&#39;mini.surround&#39;).setup()&lt;/code&gt; creates &lt;code&gt;_G.MiniSurround&lt;/code&gt;. This allows for a simpler usage of plugin functionality: instead of &lt;code&gt;require(&#39;mini.surround&#39;)&lt;/code&gt; use &lt;code&gt;MiniSurround&lt;/code&gt; (or manually &lt;code&gt;:lua MiniSurround.*&lt;/code&gt; in command line); available from &lt;code&gt;v:lua&lt;/code&gt; like &lt;code&gt;v:lua.MiniSurround&lt;/code&gt;. Considering this, &#34;module&#34; and &#34;Lua object&#34; names can be used interchangeably: &#39;mini.surround&#39; and &#39;MiniSurround&#39; will mean the same thing.&lt;/li&gt; &#xA;   &lt;li&gt;Each supplied &lt;code&gt;config&lt;/code&gt; table is stored in &lt;code&gt;config&lt;/code&gt; field of global object. Like &lt;code&gt;MiniSurround.config&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Values of &lt;code&gt;config&lt;/code&gt;, which affect runtime activity, can be changed on the fly to have effect. For example, &lt;code&gt;MiniSurround.config.n_lines&lt;/code&gt; can be changed during runtime; but changing &lt;code&gt;MiniSurround.config.mappings&lt;/code&gt; won&#39;t have any effect (as mappings are created once during &lt;code&gt;setup()&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Buffer local configuration&lt;/strong&gt;. Each module can be additionally configured to use certain runtime config settings locally to buffer. See &lt;code&gt;mini.nvim-buffer-local-config&lt;/code&gt; section in help file for more information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Disabling&lt;/strong&gt;. Each module&#39;s core functionality can be disabled globally or locally to buffer by creating appropriate global or buffer-scoped variables equal to &lt;code&gt;v:true&lt;/code&gt;. See &lt;code&gt;mini.nvim-disabling-recipes&lt;/code&gt; section in help file for common recipes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highlight groups&lt;/strong&gt;. Appearance of module&#39;s output is controlled by certain highlight group (see &lt;code&gt;:h highlight-groups&lt;/code&gt;). To customize them, use &lt;code&gt;highlight&lt;/code&gt; command. &lt;strong&gt;Note&lt;/strong&gt;: currently not many Neovim themes support this plugin&#39;s highlight groups; fixing this situation is highly appreciated. To see a more calibrated look, use MiniBase16 or plugin&#39;s colorscheme &lt;code&gt;minischeme&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stability&lt;/strong&gt;. Each module upon release is considered to be relatively stable: both in terms of setup and functionality. Any non-bugfix backward-incompatible change will be released gradually as much as possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plugin colorschemes&lt;/h2&gt; &#xA;&lt;p&gt;This plugin comes with several color schemes (all of them are made with &#39;mini.base16&#39; and have both dark and light variants):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;minischeme&lt;/code&gt; - blue and yellow main colors with high contrast and saturation palette. All examples use this colorscheme.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;minicyan&lt;/code&gt; - cyan and grey main colors with moderate contrast and saturation palette.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Activate them as regular &lt;code&gt;colorscheme&lt;/code&gt; (for example, &lt;code&gt;:colorscheme minicyan&lt;/code&gt;). You can see how they look in &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minibase16&#34;&gt;demo of &#39;mini.base16&#39;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;h3&gt;mini.ai&lt;/h3&gt; &#xA;&lt;p&gt;Extend and create &lt;code&gt;a&lt;/code&gt;/&lt;code&gt;i&lt;/code&gt; textobjects (like in &lt;code&gt;di(&lt;/code&gt; or &lt;code&gt;va&#34;&lt;/code&gt;). It enhances some builtin textobjects (like &lt;code&gt;a(&lt;/code&gt;, &lt;code&gt;a)&lt;/code&gt;, &lt;code&gt;a&#39;&lt;/code&gt;, and more), creates new ones (like &lt;code&gt;a*&lt;/code&gt;, &lt;code&gt;a&amp;lt;Space&amp;gt;&lt;/code&gt;, &lt;code&gt;af&lt;/code&gt;, &lt;code&gt;a?&lt;/code&gt;, and more), and allows user to create their own (like based on treesitter, and more). Supports dot-repeat, &lt;code&gt;v:count&lt;/code&gt;, different search methods, consecutive application, and customization via Lua patterns or functions. Has builtins for brackets, quotes, function call, argument, tag, user prompt, and any punctuation/digit/whitespace character.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#miniai&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.ai&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Table with textobject id as fields, textobject specification as values.&#xA;  -- Also use this to disable builtin textobjects. See |MiniAi.config|.&#xA;  custom_textobjects = nil,&#xA;&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    -- Main textobject prefixes&#xA;    around = &#39;a&#39;,&#xA;    inside = &#39;i&#39;,&#xA;&#xA;    -- Next/last variants&#xA;    around_next = &#39;an&#39;,&#xA;    inside_next = &#39;in&#39;,&#xA;    around_last = &#39;al&#39;,&#xA;    inside_last = &#39;il&#39;,&#xA;&#xA;    -- Move cursor to corresponding edge of `a` textobject&#xA;    goto_left = &#39;g[&#39;,&#xA;    goto_right = &#39;g]&#39;,&#xA;  },&#xA;&#xA;  -- Number of lines within which textobject is searched&#xA;  n_lines = 50,&#xA;&#xA;  -- How to search for object (first inside current line, then inside&#xA;  -- neighborhood). One of &#39;cover&#39;, &#39;cover_or_next&#39;, &#39;cover_or_prev&#39;,&#xA;  -- &#39;cover_or_nearest&#39;, &#39;next&#39;, &#39;previous&#39;, &#39;nearest&#39;.&#xA;  search_method = &#39;cover_or_next&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.ai&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wellle/targets.vim&#34;&gt;wellle/targets.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-textobjects&#34;&gt;nvim-treesitter/nvim-treesitter-textobjects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kana/vim-textobj-user&#34;&gt;kana/vim-textobj-user&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.base16&lt;/h3&gt; &#xA;&lt;p&gt;Fast implementation of &lt;a href=&#34;https://github.com/chriskempson/base16&#34;&gt;chriskempson/base16&lt;/a&gt; theme for manually supplied palette. Supports 30+ plugin integrations. Has unique palette generator which needs only background and foreground colors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minibase16&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.base16&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Table with names from `base00` to `base0F` and values being strings of&#xA;  -- HEX colors with format &#34;#RRGGBB&#34;. NOTE: this should be explicitly&#xA;  -- supplied in `setup()`.&#xA;  palette = nil,&#xA;&#xA;  -- Whether to support cterm colors. Can be boolean, `nil` (same as&#xA;  -- `false`), or table with cterm colors. See `setup()` documentation for&#xA;  -- more information.&#xA;  use_cterm = nil,&#xA;&#xA;  -- Plugin integrations. Use `default = false` to disable all integrations.&#xA;  -- Also can be set per plugin (see |MiniBase16.config|).&#xA;  plugins = { default = true },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.base16&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chriskempson/base16-vim&#34;&gt;chriskempson/base16-vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.bufremove&lt;/h3&gt; &#xA;&lt;p&gt;Buffer removing (unshow, delete, wipeout) while saving window layout.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minibufremove&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.bufremove&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Whether to set Vim&#39;s settings for buffers (allow hidden buffers)&#xA;  set_vim_settings = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.bufremove&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-sayonara&#34;&gt;mhinz/vim-sayonara&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moll/vim-bbye&#34;&gt;moll/vim-bbye&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.comment&lt;/h3&gt; &#xA;&lt;p&gt;Fast and familiar per-line code commenting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minicomment&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.comment&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    -- Toggle comment (like `gcip` - comment inner paragraph) for both&#xA;    -- Normal and Visual modes&#xA;    comment = &#39;gc&#39;,&#xA;&#xA;    -- Toggle comment on current line&#xA;    comment_line = &#39;gcc&#39;,&#xA;&#xA;    -- Define &#39;comment&#39; textobject (like `dgc` - delete whole comment block)&#xA;    textobject = &#39;gc&#39;,&#xA;  },&#xA;  -- Hook functions to be executed at certain stage of commenting&#xA;  hooks = {&#xA;    -- Before successful commenting. Does nothing by default.&#xA;    pre = function() end,&#xA;    -- After successful commenting. Does nothing by default.&#xA;    post = function() end,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.comment&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-commentary&#34;&gt;tpope/vim-commentary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/preservim/nerdcommenter&#34;&gt;preservim/nerdcommenter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/b3nj5m1n/kommentary&#34;&gt;b3nj5m1n/kommentary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/numToStr/Comment.nvim&#34;&gt;numToStr/Comment.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.completion&lt;/h3&gt; &#xA;&lt;p&gt;Async (with customizable &#39;debounce&#39; delay) &#39;two-stage chain completion&#39;: first builtin LSP, then configurable fallback. Also has functionality for completion item info and function signature (both in floating window appearing after customizable delay).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minicompletion&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.completion&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Delay (debounce type, in ms) between certain Neovim event and action.&#xA;  -- This can be used to (virtually) disable certain automatic actions by&#xA;  -- setting very high delay time (like 10^7).&#xA;  delay = { completion = 100, info = 100, signature = 50 },&#xA;&#xA;  -- Maximum dimensions of floating windows for certain actions. Action&#xA;  -- entry should be a table with &#39;height&#39; and &#39;width&#39; fields.&#xA;  window_dimensions = {&#xA;    info = { height = 25, width = 80 },&#xA;    signature = { height = 25, width = 80 },&#xA;  },&#xA;&#xA;  -- Way of how module does LSP completion&#xA;  lsp_completion = {&#xA;    -- `source_func` should be one of &#39;completefunc&#39; or &#39;omnifunc&#39;.&#xA;    source_func = &#39;completefunc&#39;,&#xA;&#xA;    -- `auto_setup` should be boolean indicating if LSP completion is set up&#xA;    -- on every `BufEnter` event.&#xA;    auto_setup = true,&#xA;&#xA;    -- `process_items` should be a function which takes LSP&#xA;    -- &#39;textDocument/completion&#39; response items and word to complete. Its&#xA;    -- output should be a table of the same nature as input items. The most&#xA;    -- common use-cases are custom filtering and sorting. You can use&#xA;    -- default `process_items` as `MiniCompletion.default_process_items()`.&#xA;    process_items = --&amp;lt;function: filters out snippets; sorts by LSP specs&amp;gt;,&#xA;  },&#xA;&#xA;  -- Fallback action. It will always be run in Insert mode. To use Neovim&#39;s&#xA;  -- built-in completion (see `:h ins-completion`), supply its mapping as&#xA;  -- string. Example: to use &#39;whole lines&#39; completion, supply &#39;&amp;lt;C-x&amp;gt;&amp;lt;C-l&amp;gt;&#39;.&#xA;  fallback_action = --&amp;lt;function: like `&amp;lt;C-n&amp;gt;` completion&amp;gt;,&#xA;&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one. Some of them&#xA;  -- might conflict with system mappings.&#xA;  mappings = {&#xA;    force_twostep = &#39;&amp;lt;C-Space&amp;gt;&#39;, -- Force two-step completion&#xA;    force_fallback = &#39;&amp;lt;A-Space&amp;gt;&#39;, -- Force fallback completion&#xA;  },&#xA;&#xA;  -- Whether to set Vim&#39;s settings for better experience (modifies&#xA;  -- `shortmess` and `completeopt`)&#xA;  set_vim_settings = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.completion&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;hrsh7th/nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shougo/ddc.vim&#34;&gt;Shougo/ddc.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.cursorword&lt;/h3&gt; &#xA;&lt;p&gt;Automatic highlighting of word under cursor (displayed after customizable delay). Current word under cursor can be highlighted differently.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minicursorword&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.cursorword&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Delay (in ms) between when cursor moved and when highlighting appeared&#xA;  delay = 100,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.cursorword&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/itchyny/vim-cursorword&#34;&gt;itchyny/vim-cursorword&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.doc&lt;/h3&gt; &#xA;&lt;p&gt;Generation of help files from EmmyLua-like annotations. Allows flexible customization of output via hook functions. Used for documenting this plugin.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minidoc&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.doc&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Lua string pattern to determine if line has documentation annotation.&#xA;  -- First capture group should describe possible section id. Default value&#xA;  -- means that annotation line should:&#xA;  -- - Start with `---` at first column.&#xA;  -- - Any non-whitespace after `---` will be treated as new section id.&#xA;  -- - Single whitespace at the start of main text will be ignored.&#xA;  annotation_pattern = &#39;^%-%-%-(%S*) ?&#39;,&#xA;&#xA;  -- Identifier of block annotation lines until first captured identifier&#xA;  default_section_id = &#39;@text&#39;,&#xA;&#xA;  -- Hooks to be applied at certain stage of document life cycle. Should&#xA;  -- modify its input in place (and not return new one).&#xA;  hooks = {&#xA;    -- Applied to block before anything else&#xA;    block_pre = --&amp;lt;function: infers header sections (tag and/or signature)&amp;gt;,&#xA;&#xA;    -- Applied to section before anything else&#xA;    section_pre = --&amp;lt;function: replaces current aliases&amp;gt;,&#xA;&#xA;    -- Applied if section has specified captured id&#xA;    sections = {&#xA;      [&#39;@alias&#39;] = --&amp;lt;function: registers alias in MiniDoc.current.aliases&amp;gt;,&#xA;      [&#39;@class&#39;] = --&amp;lt;function&amp;gt;,&#xA;      -- For most typical usage see |MiniDoc.afterlines_to_code|&#xA;      [&#39;@eval&#39;] = --&amp;lt;function: evaluates lines; replaces with their return&amp;gt;,&#xA;      [&#39;@field&#39;] = --&amp;lt;function&amp;gt;,&#xA;      [&#39;@param&#39;] = --&amp;lt;function&amp;gt;,&#xA;      [&#39;@private&#39;] = --&amp;lt;function: registers block for removal&amp;gt;,&#xA;      [&#39;@return&#39;] = --&amp;lt;function&amp;gt;,&#xA;      [&#39;@seealso&#39;] = --&amp;lt;function&amp;gt;,&#xA;      [&#39;@signature&#39;] = --&amp;lt;function: formats signature of documented object&amp;gt;,&#xA;      [&#39;@tag&#39;] = --&amp;lt;function: turns its line in proper tag lines&amp;gt;,&#xA;      [&#39;@text&#39;] = --&amp;lt;function: purposefully does nothing&amp;gt;,&#xA;      [&#39;@type&#39;] = --&amp;lt;function&amp;gt;,&#xA;      [&#39;@usage&#39;] = --&amp;lt;function&amp;gt;,&#xA;    },&#xA;&#xA;    -- Applied to section after all previous steps&#xA;    section_post = --&amp;lt;function: currently does nothing&amp;gt;,&#xA;&#xA;    -- Applied to block after all previous steps&#xA;    block_post = --&amp;lt;function: does many things&amp;gt;,&#xA;&#xA;    -- Applied to file after all previous steps&#xA;    file = --&amp;lt;function: adds separator&amp;gt;,&#xA;&#xA;    -- Applied to doc after all previous steps&#xA;    doc = --&amp;lt;function: adds modeline&amp;gt;,&#xA;  },&#xA;&#xA;  -- Path (relative to current directory) to script which handles project&#xA;  -- specific help file generation (like custom input files, hooks, etc.).&#xA;  script_path = &#39;scripts/minidoc.lua&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.doc&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt; (which is created with this module).&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tjdevries/tree-sitter-lua&#34;&gt;tjdevries/tree-sitter-lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.fuzzy&lt;/h3&gt; &#xA;&lt;p&gt;Functions for fast and simple fuzzy matching. It has not only functions to perform fuzzy matching of one string to others, but also a sorter for &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope/telescope.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minifuzzy&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.fuzzy&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Maximum allowed value of match features (width and first match). All&#xA;  -- feature values greater than cutoff can be considered &#34;equally bad&#34;.&#xA;  cutoff = 100,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.fuzzy&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-fzy-native.nvim&#34;&gt;nvim-telescope/telescope-fzy-native.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.indentscope&lt;/h3&gt; &#xA;&lt;p&gt;Visualize and operate on indent scope. Supports customization of debounce delay, animation style, and different granularity of options for scope computing algorithm.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#miniindentscope&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.indentscope&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  draw = {&#xA;    -- Delay (in ms) between event and start of drawing scope indicator&#xA;    delay = 100,&#xA;&#xA;    -- Animation rule for scope&#39;s first drawing. A function which, given&#xA;    -- next and total step numbers, returns wait time (in ms). See&#xA;    -- |MiniIndentscope.gen_animation()| for builtin options. To disable&#xA;    -- animation, use `require(&#39;mini.indentscope&#39;).gen_animation(&#39;none&#39;)`.&#xA;    animation = --&amp;lt;function: implements constant 20ms between steps&amp;gt;,&#xA;  },&#xA;&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    -- Textobjects&#xA;    object_scope = &#39;ii&#39;,&#xA;    object_scope_with_border = &#39;ai&#39;,&#xA;&#xA;    -- Motions (jump to respective border line; if not present - body line)&#xA;    goto_top = &#39;[i&#39;,&#xA;    goto_bottom = &#39;]i&#39;,&#xA;  },&#xA;&#xA;  -- Options which control scope computation&#xA;  options = {&#xA;    -- Type of scope&#39;s border: which line(s) with smaller indent to&#xA;    -- categorize as border. Can be one of: &#39;both&#39;, &#39;top&#39;, &#39;bottom&#39;, &#39;none&#39;.&#xA;    border = &#39;both&#39;,&#xA;&#xA;    -- Whether to use cursor column when computing reference indent.&#xA;    -- Useful to see incremental scopes with horizontal cursor movements.&#xA;    indent_at_cursor = true,&#xA;&#xA;    -- Whether to first check input line to be a border of adjacent scope.&#xA;    -- Use it if you want to place cursor on function header to get scope of&#xA;    -- its body.&#xA;    try_as_border = false,&#xA;  },&#xA;&#xA;  -- Which character to use for drawing scope indicator&#xA;  symbol = &#39;╎&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.indentscope&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;lukas-reineke/indent-blankline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michaeljsmith/vim-indent-object&#34;&gt;michaeljsmith/vim-indent-object&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.jump&lt;/h3&gt; &#xA;&lt;p&gt;Minimal and fast module for smarter jumping to a single character. Initial idea and implementation by &lt;a href=&#34;https://github.com/xigoi&#34;&gt;Adam Blažek&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minijump&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.jump&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    forward = &#39;f&#39;,&#xA;    backward = &#39;F&#39;,&#xA;    forward_till = &#39;t&#39;,&#xA;    backward_till = &#39;T&#39;,&#xA;    repeat_jump = &#39;;&#39;,&#xA;  },&#xA;&#xA;  -- Delay values (in ms) for different functionalities. Set any of them to&#xA;  -- a very big number (like 10^7) to virtually disable.&#xA;  delay = {&#xA;    -- Delay between jump and highlighting all possible jumps&#xA;    highlight = 250,&#xA;&#xA;    -- Delay between jump and automatic stop if idle (no jump is done)&#xA;    idle_stop = 10000000,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.jump&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rhysd/clever-f.vim&#34;&gt;rhysd/clever-f.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;justinmk/vim-sneak&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.jump2d&lt;/h3&gt; &#xA;&lt;p&gt;Minimal and fast Lua plugin for jumping (moving cursor) within visible lines via iterative label filtering. Supports custom jump targets (spots), labels, hooks, allowed windows and lines, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minijump2d&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.jump2d&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Function producing jump spots (byte indexed) for a particular line.&#xA;  -- For more information see |MiniJump2d.start|.&#xA;  -- If `nil` (default) - use |MiniJump2d.default_spotter|&#xA;  spotter = nil,&#xA;&#xA;  -- Characters used for labels of jump spots (in supplied order)&#xA;  labels = &#39;abcdefghijklmnopqrstuvwxyz&#39;,&#xA;&#xA;  -- Which lines are used for computing spots&#xA;  allowed_lines = {&#xA;    blank = true, -- Blank line (not sent to spotter even if `true`)&#xA;    cursor_before = true, -- Lines before cursor line&#xA;    cursor_at = true, -- Cursor line&#xA;    cursor_after = true, -- Lines after cursor line&#xA;    fold = true, -- Start of fold (not sent to spotter even if `true`)&#xA;  },&#xA;&#xA;  -- Which windows from current tabpage are used for visible lines&#xA;  allowed_windows = {&#xA;    current = true,&#xA;    not_current = true,&#xA;  },&#xA;&#xA;  -- Functions to be executed at certain events&#xA;  hooks = {&#xA;    before_start = nil, -- Before jump start&#xA;    after_jump = nil, -- After jump was actually done&#xA;  },&#xA;&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    start_jumping = &#39;&amp;lt;CR&amp;gt;&#39;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.jump2d&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;phaazon/hop.nvim&lt;/a&gt; (main inspiration behind this module)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggandor/lightspeed.nvim&#34;&gt;ggandor/lightspeed.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.misc&lt;/h3&gt; &#xA;&lt;p&gt;Collection of miscellaneous useful functions. Like &lt;code&gt;put()&lt;/code&gt; and &lt;code&gt;put_text()&lt;/code&gt; which print Lua objects to command line and current buffer respectively.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minimisc&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.misc&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Array of fields to make global (to be used as independent variables)&#xA;  make_global = { &#39;put&#39;, &#39;put_text&#39; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.misc&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;mini.pairs&lt;/h3&gt; &#xA;&lt;p&gt;Autopairs plugin which has minimal defaults and functionality to do per-key expression mappings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minipairs&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.pairs&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- In which modes mappings from this `config` should be created&#xA;  modes = { insert = true, command = false, terminal = false },&#xA;&#xA;  -- Global mappings. Each right hand side should be a pair information, a&#xA;  -- table with at least these fields (see more in |MiniPairs.map|):&#xA;  -- - &amp;lt;action&amp;gt; - one of &#39;open&#39;, &#39;close&#39;, &#39;closeopen&#39;.&#xA;  -- - &amp;lt;pair&amp;gt; - two character string for pair to be used.&#xA;  -- By default pair is not inserted after `\`, quotes are not recognized by&#xA;  -- `&amp;lt;CR&amp;gt;`, `&#39;` does not insert pair after a letter.&#xA;  -- Only parts of tables can be tweaked (others will use these defaults).&#xA;  mappings = {&#xA;    [&#39;(&#39;] = { action = &#39;open&#39;, pair = &#39;()&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;[&#39;] = { action = &#39;open&#39;, pair = &#39;[]&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;{&#39;] = { action = &#39;open&#39;, pair = &#39;{}&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;&#xA;    [&#39;)&#39;] = { action = &#39;close&#39;, pair = &#39;()&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;]&#39;] = { action = &#39;close&#39;, pair = &#39;[]&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;    [&#39;}&#39;] = { action = &#39;close&#39;, pair = &#39;{}&#39;, neigh_pattern = &#39;[^\\].&#39; },&#xA;&#xA;    [&#39;&#34;&#39;] = { action = &#39;closeopen&#39;, pair = &#39;&#34;&#34;&#39;, neigh_pattern = &#39;[^\\].&#39;, register = { cr = false } },&#xA;    [&#34;&#39;&#34;] = { action = &#39;closeopen&#39;, pair = &#34;&#39;&#39;&#34;, neigh_pattern = &#39;[^%a\\].&#39;, register = { cr = false } },&#xA;    [&#39;`&#39;] = { action = &#39;closeopen&#39;, pair = &#39;``&#39;, neigh_pattern = &#39;[^\\].&#39;, register = { cr = false } },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.pairs&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jiangmiao/auto-pairs&#34;&gt;jiangmiao/auto-pairs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs&#34;&gt;windwp/nvim-autopairs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.sessions&lt;/h3&gt; &#xA;&lt;p&gt;Session management (read, write, delete) which works using |mksession|. It was heavily inspired by &#39;vim-startify&#39; and should work out of the box with sessions created by it. Works with global (from configured directory) and local (from current directory) sessions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minisessions&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.sessions&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Whether to read latest session if Neovim opened without file arguments&#xA;  autoread = false,&#xA;&#xA;  -- Whether to write current session before quitting Neovim&#xA;  autowrite = true,&#xA;&#xA;  -- Directory where global sessions are stored (use `&#39;&#39;` to disable)&#xA;  directory = --&amp;lt;&#34;session&#34; subdir of user data directory from |stdpath()|&amp;gt;,&#xA;&#xA;  -- File for local session (use `&#39;&#39;` to disable)&#xA;  file = &#39;Session.vim&#39;,&#xA;&#xA;  -- Whether to force possibly harmful actions (meaning depends on function)&#xA;  force = { read = false, write = true, delete = false },&#xA;&#xA;  -- Hook functions for actions. Default `nil` means &#39;do nothing&#39;.&#xA;  hooks = {&#xA;    -- Before successful action&#xA;    pre = { read = nil, write = nil, delete = nil },&#xA;    -- After successful action&#xA;    post = { read = nil, write = nil, delete = nil },&#xA;  },&#xA;&#xA;  -- Whether to print session path after action&#xA;  verbose = { read = false, write = true, delete = true },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.sessions&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-startify&#34;&gt;mhinz/vim-startify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shatur/neovim-session-manager&#34;&gt;Shatur/neovim-session-manager&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.starter&lt;/h3&gt; &#xA;&lt;p&gt;Minimal, fast, and flexible start screen. Displayed items are fully customizable both in terms of what they do and how they look (with reasonable defaults). Item selection can be done using prefix query with instant visual feedback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#ministarter&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.starter&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Whether to open starter buffer on VimEnter. Not opened if Neovim was&#xA;  -- started with intent to show something else.&#xA;  autoopen = true,&#xA;&#xA;  -- Whether to evaluate action of single active item&#xA;  evaluate_single = false,&#xA;&#xA;  -- Items to be displayed. Should be an array with the following elements:&#xA;  -- - Item: table with &amp;lt;action&amp;gt;, &amp;lt;name&amp;gt;, and &amp;lt;section&amp;gt; keys.&#xA;  -- - Function: should return one of these three categories.&#xA;  -- - Array: elements of these three types (i.e. item, array, function).&#xA;  -- If `nil` (default), default items will be used (see |mini.starter|).&#xA;  items = nil,&#xA;&#xA;  -- Header to be displayed before items. Converted to single string via&#xA;  -- `tostring` (use `\n` to display several lines). If function, it is&#xA;  -- evaluated first. If `nil` (default), polite greeting will be used.&#xA;  header = nil,&#xA;&#xA;  -- Footer to be displayed after items. Converted to single string via&#xA;  -- `tostring` (use `\n` to display several lines). If function, it is&#xA;  -- evaluated first. If `nil` (default), default usage help will be shown.&#xA;  footer = nil,&#xA;&#xA;  -- Array  of functions to be applied consecutively to initial content.&#xA;  -- Each function should take and return content for &#39;Starter&#39; buffer (see&#xA;  -- |mini.starter| and |MiniStarter.content| for more details).&#xA;  content_hooks = nil,&#xA;&#xA;  -- Characters to update query. Each character will have special buffer&#xA;  -- mapping overriding your global ones. Be careful to not add `:` as it&#xA;  -- allows you to go into command mode.&#xA;  query_updaters = &#39;abcdefghijklmnopqrstuvwxyz0123456789_-.&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.starter&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt; (also contains example configurations similar to &#39;vim-startify&#39; and &#39;dashboard-nvim&#39;). For its benchmarks alongside plugins with similar functionality, see &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/benchmarks/starter/startup-summary.md&#34;&gt;benchmarks/starter/startup-summary.md&lt;/a&gt; (more details &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/benchmarks/starter/README.md&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-startify&#34;&gt;mhinz/vim-startify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;glepnir/dashboard-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/goolord/alpha-nvim&#34;&gt;goolord/alpha-nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.statusline&lt;/h3&gt; &#xA;&lt;p&gt;Minimal and fast statusline. Has ability to use custom content supplied with concise function (using module&#39;s provided section functions) along with builtin default. For full experience needs &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd font&lt;/a&gt;, &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;lewis6991/gitsigns.nvim&lt;/a&gt; plugin, and &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt; plugin (but works without any them).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#ministatusline&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.statusline&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Content of statusline as functions which return statusline string. See&#xA;  -- `:h statusline` and code of default contents (used instead of `nil`).&#xA;  content = {&#xA;    -- Content for active window&#xA;    active = nil,&#xA;    -- Content for inactive window(s)&#xA;    inactive = nil,&#xA;  },&#xA;&#xA;  -- Whether to use icons by default&#xA;  use_icons = true,&#xA;&#xA;  -- Whether to set Vim&#39;s settings for statusline (make it always shown with&#xA;  -- &#39;laststatus&#39; set to 2). To use global statusline in Neovim&amp;gt;=0.7.0, set&#xA;  -- this to `false` and &#39;laststatus&#39; to 3.&#xA;  set_vim_settings = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.statusline&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hoob3rt/lualine.nvim&#34;&gt;hoob3rt/lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NTBBloodbath/galaxyline.nvim&#34;&gt;NTBBloodbath/galaxyline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/famiu/feline.nvim&#34;&gt;famiu/feline.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.surround&lt;/h3&gt; &#xA;&lt;p&gt;Fast and feature-rich surround plugin. Add, delete, replace, find, highlight surrounding (like pair of parenthesis, quotes, etc.). Supports dot-repeat, &lt;code&gt;v:count&lt;/code&gt;, different search methods, &#34;last&#34;/&#34;next&#34; extended mappings, customization via Lua patterns or functions, and more. Has builtins for brackets, function call, tag, user prompt, and any alphanumeric/punctuation/whitespace character.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minisurround&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.surround&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Add custom surroundings to be used on top of builtin ones. For more&#xA;  -- information with examples, see `:h MiniSurround.config`.&#xA;  custom_surroundings = nil,&#xA;&#xA;  -- Duration (in ms) of highlight when calling `MiniSurround.highlight()`&#xA;  highlight_duration = 500,&#xA;&#xA;  -- Module mappings. Use `&#39;&#39;` (empty string) to disable one.&#xA;  mappings = {&#xA;    add = &#39;sa&#39;, -- Add surrounding in Normal and Visual modes&#xA;    delete = &#39;sd&#39;, -- Delete surrounding&#xA;    find = &#39;sf&#39;, -- Find surrounding (to the right)&#xA;    find_left = &#39;sF&#39;, -- Find surrounding (to the left)&#xA;    highlight = &#39;sh&#39;, -- Highlight surrounding&#xA;    replace = &#39;sr&#39;, -- Replace surrounding&#xA;    update_n_lines = &#39;sn&#39;, -- Update `n_lines`&#xA;&#xA;    suffix_last = &#39;l&#39;, -- Suffix to search with &#34;prev&#34; method&#xA;    suffix_next = &#39;n&#39;, -- Suffix to search with &#34;next&#34; method&#xA;  },&#xA;&#xA;  -- Number of lines within which surrounding is searched&#xA;  n_lines = 20,&#xA;&#xA;  -- How to search for surrounding (first inside current line, then inside&#xA;  -- neighborhood). One of &#39;cover&#39;, &#39;cover_or_next&#39;, &#39;cover_or_prev&#39;,&#xA;  -- &#39;cover_or_nearest&#39;, &#39;next&#39;, &#39;prev&#39;, &#39;nearest&#39;. For more details,&#xA;  -- see `:h MiniSurround.config`.&#xA;  search_method = &#39;cover&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.surround&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;tpope/vim-surround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylechui/nvim-surround&#34;&gt;kylechui/nvim-surround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/machakann/vim-sandwich&#34;&gt;machakann/vim-sandwich&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.tabline&lt;/h3&gt; &#xA;&lt;p&gt;Minimal tabline which always shows listed (see &lt;code&gt;:h buflisted&lt;/code&gt;) buffers. Allows showing extra information section in case of multiple vim tabpages. For full experience needs &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minitabline&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.tabline&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Whether to show file icons (requires &#39;kyazdani42/nvim-web-devicons&#39;)&#xA;  show_icons = true,&#xA;&#xA;  -- Whether to set Vim&#39;s settings for tabline (make it always shown and&#xA;  -- allow hidden buffers)&#xA;  set_vim_settings = true,&#xA;&#xA;  -- Where to show tabpage section in case of multiple vim tabpages.&#xA;  -- One of &#39;left&#39;, &#39;right&#39;, &#39;none&#39;.&#xA;  tabpage_section = &#39;left&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.tabline&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/bufferline.nvim&#34;&gt;akinsho/bufferline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ap/vim-buftabline&#34;&gt;ap/vim-buftabline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.test&lt;/h3&gt; &#xA;&lt;p&gt;Framework for writing extensive Neovim plugin tests. Supports hierarchical tests, hooks, parametrization, filtering (like from current file or cursor position), screen tests, &#34;busted-style&#34; emulation, customizable reporters, and more. Designed to be used with provided wrapper for managing child Neovim processes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minitest&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.test&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Options for collection of test cases. See `:h MiniTest.collect()`.&#xA;  collect = {&#xA;    -- Temporarily emulate functions from &#39;busted&#39; testing framework&#xA;    -- (`describe`, `it`, `before_each`, `after_each`, and more)&#xA;    emulate_busted = true,&#xA;&#xA;    -- Function returning array of file paths to be collected.&#xA;    -- Default: all Lua files in &#39;tests&#39; directory starting with &#39;test_&#39;.&#xA;    find_files = function()&#xA;      return vim.fn.globpath(&#39;tests&#39;, &#39;**/test_*.lua&#39;, true, true)&#xA;    end,&#xA;&#xA;    -- Predicate function indicating if test case should be executed&#xA;    filter_cases = function(case) return true end,&#xA;  },&#xA;&#xA;  -- Options for execution of test cases. See `:h MiniTest.execute()`.&#xA;  execute = {&#xA;    -- Table with callable fields `start()`, `update()`, and `finish()`&#xA;    reporter = nil,&#xA;&#xA;    -- Whether to stop execution after first error&#xA;    stop_on_error = false,&#xA;  },&#xA;&#xA;  -- Path (relative to current directory) to script which handles project&#xA;  -- specific test running&#xA;  script_path = &#39;scripts/minitest.lua&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further reading:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For more detailed information, read &#39;mini.test&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For more hands-on introduction based on examples, see &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/TESTING.md&#34;&gt;TESTING.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For more in-depth usage see &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/tests&#34;&gt;tests&lt;/a&gt; of this plugin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;nvim-lua/plenary.nvim&lt;/a&gt; (&#39;test_harness&#39;, &#39;busted&#39;, &#39;luassert&#39; modules)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mini.trailspace&lt;/h3&gt; &#xA;&lt;p&gt;Automatic highlighting of trailing whitespace with functionality to remove it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/DEMO.md#minitrailspace&#34;&gt;&lt;strong&gt;DEMO of &#39;mini.trailspace&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Highlight only in normal buffers (ones with empty &#39;buftype&#39;). This is&#xA;  -- useful to not show trailing whitespace where it usually doesn&#39;t matter.&#xA;  only_in_normal_buffers = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read &#39;mini.trailspace&#39; section of &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins with similar functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ntpeters/vim-better-whitespace&#34;&gt;ntpeters/vim-better-whitespace&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Planned modules&lt;/h2&gt; &#xA;&lt;p&gt;This is the list of modules I currently intend to implement eventually (as my free time and dedication will allow), in alphabetical order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#39;mini.align&#39; - align text with respect to some separators. Something like &lt;a href=&#34;https://github.com/tommcdo/vim-lion&#34;&gt;tommcdo/vim-lion&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#39;mini.basics&#39; - configurable collection of options and mappings sets intended mostly for quick &#34;up and running&#34; Neovim config. Something like a combination of &lt;a href=&#34;https://github.com/tpope/vim-sensible&#34;&gt;tpope/vim-sensible&lt;/a&gt; and &lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;tpope/vim-unimpaired&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#39;mini.clue&#39; - &#34;show as you type&#34; floating window with customizable information. Something like &lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;folke/which-key.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/anuvyklack/hydra.nvim&#34;&gt;anuvyklack/hydra.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#39;mini.filetree&#39; - file tree viewer. Simplified version of &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;kyazdani42/nvim-tree&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#39;mini.root&#39; - automatically change current working directory. Something like &lt;a href=&#34;https://github.com/airblade/vim-rooter&#34;&gt;airblade/vim-rooter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#39;mini.snippets&#39; - work with snippets. Something like &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;L3MON4D3/LuaSnip&lt;/a&gt; but only with more straightforward functionality.&lt;/li&gt; &#xA; &lt;li&gt;&#39;mini.swap&#39; - exchange two regions of text. Something like &lt;a href=&#34;https://github.com/tommcdo/vim-exchange&#34;&gt;tommcdo/vim-exchange&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#39;mini.terminals&#39; - coherently manage terminal windows and send text from buffers to terminal windows. Something like &lt;a href=&#34;https://github.com/kassio/neoterm&#34;&gt;kassio/neoterm&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>