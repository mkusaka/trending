<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-01T02:07:47Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xmake-io/xmake</title>
    <updated>2023-08-01T02:07:47Z</updated>
    <id>tag:github.com,2023-08-01:/xmake-io/xmake</id>
    <link href="https://github.com/xmake-io/xmake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üî• A cross-platform build utility based on Lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://xmake.io&#34;&gt; &lt;img width=&#34;160&#34; heigth=&#34;160&#34; src=&#34;https://tboox.org/static/img/xmake/logo256c.png&#34;&gt; &lt;/a&gt; &#xA; &lt;h1&gt;xmake&lt;/h1&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/actions?query=workflow%3AWindows&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/xmake-io/xmake/windows.yml?branch=master&amp;amp;style=flat-square&amp;amp;logo=windows&#34; alt=&#34;github-ci&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/actions?query=workflow%3ALinux&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/xmake-io/xmake/linux.yml?branch=master&amp;amp;style=flat-square&amp;amp;logo=linux&#34; alt=&#34;github-ci&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/actions?query=workflow%3AmacOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/xmake-io/xmake/macos.yml?branch=master&amp;amp;style=flat-square&amp;amp;logo=apple&#34; alt=&#34;github-ci&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/xmake-io/xmake.svg?style=flat-square&#34; alt=&#34;Github All Releases&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/raw/master/LICENSE.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/xmake-io/xmake.svg?colorB=f48041&amp;amp;style=flat-square&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://www.reddit.com/r/xmake/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20reddit-ff3f34.svg?style=flat-square&#34; alt=&#34;Reddit&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://t.me/tbooxorg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20telegram-blue.svg?style=flat-square&#34; alt=&#34;Telegram&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=5hpwWFv&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20QQ-ff69b4.svg?style=flat-square&#34; alt=&#34;QQ&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://discord.gg/xmake&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?style=flat-square&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://xmake.io/#/sponsor&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/donate-us-orange.svg?style=flat-square&#34; alt=&#34;Donate&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;p&gt;&lt;b&gt;A cross-platform build utility based on Lua&lt;/b&gt;&lt;br&gt; &lt;i&gt;Modern C/C++ build tool: Simple, Fast, Powerful dependency package integration&lt;/i&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Support this project&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by &lt;a href=&#34;https://xmake.io/#/about/sponsor&#34;&gt;becoming a sponsor&lt;/a&gt;. Your logo will show up here with a link to your website. üôè&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/xmake#sponsors&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xmake/sponsors.svg?width=890&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xmake#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xmake/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Technical support&lt;/h2&gt; &#xA;&lt;p&gt;You can also consider sponsoring us to get extra technical support services via the &lt;a href=&#34;https://github.com/sponsors/waruqi&#34;&gt;Github sponsor program&lt;/a&gt;. If you do, you can get access to the &lt;a href=&#34;https://github.com/xmake-io/technical-support&#34;&gt;xmake-io/technical-support&lt;/a&gt; repository, which has the following bennefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Handling Issues with higher priority&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; One-to-one technical consulting service&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Review your xmake.lua and provide suggestions for improvement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction (&lt;a href=&#34;https://raw.githubusercontent.com/xmake-io/xmake/master/README_zh.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;What is Xmake?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Xmake is a cross-platform build utility based on the Lua scripting language.&lt;/li&gt; &#xA; &lt;li&gt;Xmake is very lightweight and has no dependencies outside of the standard library.&lt;/li&gt; &#xA; &lt;li&gt;Uses the &lt;code&gt;xmake.lua&lt;/code&gt; file to maintain project builds with a simple and readable syntax.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Xmake can be used to directly build source code (like with Make or Ninja), or it can generate project source files like CMake or Meson. It also has a &lt;em&gt;built-in&lt;/em&gt; package management system to help users integrate C/C++ dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although less precise, one can still understand Xmake in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Xmake ‚âà Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to know more, please refer to: the &lt;a href=&#34;https://xmake.io/#/getting_started&#34;&gt;Documentation&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmake-io/xmake&#34;&gt;GitHub&lt;/a&gt; or &lt;a href=&#34;https://gitee.com/tboox/xmake&#34;&gt;Gitee&lt;/a&gt;. You are also welcome to join our &lt;a href=&#34;https://xmake.io/#/about/contact&#34;&gt;community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The official Xmake repository can be found at &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-io/xmake-repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/xmake-io/xmake-docs/raw/master/assets/img/index/xmake-basic-render.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;With cURL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://xmake.io/shget.text | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With Wget&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://xmake.io/shget.text -O - | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With PowerShell&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Invoke-Expression (Invoke-Webrequest &#39;https://xmake.io/psget.text&#39; -UseBasicParsing).Content&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other installation methods&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want to use the above scripts to install Xmake, visit the &lt;a href=&#34;https://xmake.io/#/guide/installation&#34;&gt;Installation Guide&lt;/a&gt; for other installation methods (building from source, package managers, etc.).&lt;/p&gt; &#xA;&lt;h2&gt;Simple Project Description&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;console&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Creates a new target &lt;code&gt;console&lt;/code&gt; of kind &lt;code&gt;binary&lt;/code&gt;, and adds all the files ending in &lt;code&gt;.c&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Package dependences&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;tbox 1.6.*&#34;, &#34;zlib&#34;, &#34;libpng ~1.6&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adds a requirement of tbox v1.6, zlib (any version), and libpng v1.6.&lt;/p&gt; &#xA;&lt;p&gt;The official xmake package repository exists at: &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/xmake-io/xmake-docs/raw/master/assets/img/index/package.gif&#34; width=&#34;650px&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Commandline interface reference&lt;/h2&gt; &#xA;&lt;p&gt;The below assumes you are currently in the project&#39;s root directory.&lt;/p&gt; &#xA;&lt;h3&gt;Build a project&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run target&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake run console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debug target&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake run -d console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure platform&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake f -p [windows|linux|macosx|android|iphoneos ..] -a [x86|arm64 ..] -m [debug|release]&#xA;$ xmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Menu configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake f --menu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://xmake.io/assets/img/index/menuconf.png&#34; width=&#34;650px&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows (x86, x64)&lt;/li&gt; &#xA; &lt;li&gt;macOS (i386, x86_64, arm64)&lt;/li&gt; &#xA; &lt;li&gt;Linux (i386, x86_64, cross-toolchains ..)&lt;/li&gt; &#xA; &lt;li&gt;*BSD (i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;Android (x86, x86_64, armeabi, armeabi-v7a, arm64-v8a)&lt;/li&gt; &#xA; &lt;li&gt;iOS (armv7, armv7s, arm64, i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;WatchOS (armv7k, i386)&lt;/li&gt; &#xA; &lt;li&gt;AppleTVOS (armv7, arm64, i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;MSYS (i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;MinGW (i386, x86_64, arm, arm64)&lt;/li&gt; &#xA; &lt;li&gt;Cygwin (i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;Wasm (wasm32)&lt;/li&gt; &#xA; &lt;li&gt;Cross (cross-toolchains ..)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported toolchains&lt;/h2&gt; &#xA;&lt;h3&gt;IDE-Tied&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode&lt;/li&gt; &#xA; &lt;li&gt;MSVC (Microsoft Visual C compiler)&lt;/li&gt; &#xA; &lt;li&gt;Android NDK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Languages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zig&lt;/li&gt; &#xA; &lt;li&gt;Go(lang)&lt;/li&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA; &lt;li&gt;Nim&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;GCC (GNU Compiler Collection)&lt;/li&gt; &#xA; &lt;li&gt;Clang&lt;/li&gt; &#xA; &lt;li&gt;TinyCC&lt;/li&gt; &#xA; &lt;li&gt;icc (Intel C Compiler)&lt;/li&gt; &#xA; &lt;li&gt;icpc (Intel C++ Compiler)&lt;/li&gt; &#xA; &lt;li&gt;icx (Intel LLVM C/C++ Compiler)&lt;/li&gt; &#xA; &lt;li&gt;Clang-CL (Clang Compatability with MSVC)&lt;/li&gt; &#xA; &lt;li&gt;DPC++ (Intel LLVM C++ Compiler using SYCL)&lt;/li&gt; &#xA; &lt;li&gt;MinGW (GNU for Windows)&lt;/li&gt; &#xA; &lt;li&gt;C51 (Keil C Compiler for the 8051)&lt;/li&gt; &#xA; &lt;li&gt;GNU-RM (GNU Arm Embedded Toolchain)&lt;/li&gt; &#xA; &lt;li&gt;ArmCC (Keil C Compiler for Keil MKD Version 5)&lt;/li&gt; &#xA; &lt;li&gt;Circle (New C++20 compiler)&lt;/li&gt; &#xA; &lt;li&gt;WASI (C/C++ WebAssembly Toolchain)&lt;/li&gt; &#xA; &lt;li&gt;ArmClang (Version 6 of the Keil MDK)&lt;/li&gt; &#xA; &lt;li&gt;SDCC (Small Device C Compiler)&lt;/li&gt; &#xA; &lt;li&gt;GDC (GNU D Compiler)&lt;/li&gt; &#xA; &lt;li&gt;LDC (LLVM D Compiler)&lt;/li&gt; &#xA; &lt;li&gt;DMD (Dlang)&lt;/li&gt; &#xA; &lt;li&gt;FPC (Free Pascal Programming Language Compiler)&lt;/li&gt; &#xA; &lt;li&gt;GFortran (GNU Fortran Compiler)&lt;/li&gt; &#xA; &lt;li&gt;Ifort (Intel Fortran Compiler)&lt;/li&gt; &#xA; &lt;li&gt;CUDA (nvcc, nvc, nvc++, nvfortran)&lt;/li&gt; &#xA; &lt;li&gt;Emscripten&lt;/li&gt; &#xA; &lt;li&gt;LLVM&lt;/li&gt; &#xA; &lt;li&gt;Icarus Verilog&lt;/li&gt; &#xA; &lt;li&gt;Verilator (SystemVerilog simulator and lint system)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Assemblers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FASM&lt;/li&gt; &#xA; &lt;li&gt;NASM&lt;/li&gt; &#xA; &lt;li&gt;YASM&lt;/li&gt; &#xA; &lt;li&gt;MASM32 (Microsoft Macro Assembler 32-bit SDK)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C and C++&lt;/li&gt; &#xA; &lt;li&gt;Objective-C and Objective-C++&lt;/li&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA; &lt;li&gt;Assembly&lt;/li&gt; &#xA; &lt;li&gt;Golang&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;Dlang&lt;/li&gt; &#xA; &lt;li&gt;Fortran&lt;/li&gt; &#xA; &lt;li&gt;Cuda&lt;/li&gt; &#xA; &lt;li&gt;Zig&lt;/li&gt; &#xA; &lt;li&gt;Vala&lt;/li&gt; &#xA; &lt;li&gt;Pascal&lt;/li&gt; &#xA; &lt;li&gt;Nim&lt;/li&gt; &#xA; &lt;li&gt;Verilog&lt;/li&gt; &#xA; &lt;li&gt;FASM&lt;/li&gt; &#xA; &lt;li&gt;NASM&lt;/li&gt; &#xA; &lt;li&gt;YASM&lt;/li&gt; &#xA; &lt;li&gt;MASM32&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Xmake exhibits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple yet flexible configuration grammar.&lt;/li&gt; &#xA; &lt;li&gt;Quick, dependency-free installation.&lt;/li&gt; &#xA; &lt;li&gt;Easy compilation for most all supported platforms.&lt;/li&gt; &#xA; &lt;li&gt;Supports cross-compilation with intelligent analysis of cross toolchain information.&lt;/li&gt; &#xA; &lt;li&gt;Extremely fast parallel compilation support.&lt;/li&gt; &#xA; &lt;li&gt;Supports C++ modules (new in C++20).&lt;/li&gt; &#xA; &lt;li&gt;Supports cross-platform C/C++ dependencies with built-in package manager.&lt;/li&gt; &#xA; &lt;li&gt;Multi-language compilation support including mixed-language projects.&lt;/li&gt; &#xA; &lt;li&gt;Rich plug-in support with various project generators (ex. Visual Studio/Makefiles/CMake/&lt;code&gt;compile_commands.json&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;REPL interactive execution support&lt;/li&gt; &#xA; &lt;li&gt;Incremental compilation support with automatic analysis of header files&lt;/li&gt; &#xA; &lt;li&gt;Built-in toolchain management&lt;/li&gt; &#xA; &lt;li&gt;A large number of expansion modules&lt;/li&gt; &#xA; &lt;li&gt;Remote compilation support&lt;/li&gt; &#xA; &lt;li&gt;Distributed compilation support&lt;/li&gt; &#xA; &lt;li&gt;Local and remote build cache support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Project Types&lt;/h2&gt; &#xA;&lt;p&gt;Xmake supports the below types of projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Static libraries&lt;/li&gt; &#xA; &lt;li&gt;Shared libraries&lt;/li&gt; &#xA; &lt;li&gt;Console/CLI applications&lt;/li&gt; &#xA; &lt;li&gt;CUDA programs&lt;/li&gt; &#xA; &lt;li&gt;Qt applications&lt;/li&gt; &#xA; &lt;li&gt;WDK drivers (umdf/kmdf/wdm)&lt;/li&gt; &#xA; &lt;li&gt;WinSDK applications&lt;/li&gt; &#xA; &lt;li&gt;MFC applications&lt;/li&gt; &#xA; &lt;li&gt;Darwin applications (with metal support)&lt;/li&gt; &#xA; &lt;li&gt;Frameworks and bundles (in Darwin)&lt;/li&gt; &#xA; &lt;li&gt;SWIG modules (Lua, Python, ...)&lt;/li&gt; &#xA; &lt;li&gt;LuaRocks modules&lt;/li&gt; &#xA; &lt;li&gt;Protobuf programs&lt;/li&gt; &#xA; &lt;li&gt;Lex/Yacc programs&lt;/li&gt; &#xA; &lt;li&gt;Linux kernel modules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Package management&lt;/h2&gt; &#xA;&lt;h3&gt;Download and build&lt;/h3&gt; &#xA;&lt;p&gt;Xmake can automatically fetch and install dependencies!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://xmake.io/assets/img/index/package_manage.png&#34; width=&#34;650px&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Supported package repositories&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official package repository &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt; (tbox &amp;gt;1.6.1)&lt;/li&gt; &#xA; &lt;li&gt;Official package manager &lt;a href=&#34;https://github.com/xmake-io/xrepo&#34;&gt;Xrepo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmake.io/#/package/remote_package?id=using-self-built-private-package-repository&#34;&gt;User-built repositories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Conan (conan::openssl/1.1.1g)&lt;/li&gt; &#xA; &lt;li&gt;Conda (conda::libpng 1.3.67)&lt;/li&gt; &#xA; &lt;li&gt;Vcpkg (vcpkg:ffmpeg)&lt;/li&gt; &#xA; &lt;li&gt;Homebrew/Linuxbrew (brew::pcre2/libpcre2-8)&lt;/li&gt; &#xA; &lt;li&gt;Pacman on archlinux/msys2 (pacman::libcurl)&lt;/li&gt; &#xA; &lt;li&gt;Apt on ubuntu/debian (apt::zlib1g-dev)&lt;/li&gt; &#xA; &lt;li&gt;Clib (clib::clibs/bytes@0.0.4)&lt;/li&gt; &#xA; &lt;li&gt;Dub (dub::log 0.4.3)&lt;/li&gt; &#xA; &lt;li&gt;Portage on Gentoo/Linux (portage::libhandy)&lt;/li&gt; &#xA; &lt;li&gt;Nimble for nimlang (nimble::zip &amp;gt;1.3)&lt;/li&gt; &#xA; &lt;li&gt;Cargo for rust (cargo::base64 0.13.0)&lt;/li&gt; &#xA; &lt;li&gt;Zypper on openSUSE (zypper::libsfml2 2.5)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Package management features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The official repository provides nearly 500+ packages with simple compilation on all supported platforms&lt;/li&gt; &#xA; &lt;li&gt;Full platform package support, support for cross-compiled dependent packages&lt;/li&gt; &#xA; &lt;li&gt;Support package virtual environment using &lt;code&gt;xrepo env shell&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Precompiled package acceleration for Windows (NT)&lt;/li&gt; &#xA; &lt;li&gt;Support self-built package repositories and private repository deployment&lt;/li&gt; &#xA; &lt;li&gt;Third-party package repository support for repositories such as: vcpkg, conan, conda, etc.&lt;/li&gt; &#xA; &lt;li&gt;Supports automatic pulling of remote toolchains&lt;/li&gt; &#xA; &lt;li&gt;Supports dependency version locking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Processing architecture&lt;/h2&gt; &#xA;&lt;p&gt;Below is a diagram showing roughly the architecture of Xmake, and thus how it functions.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://xmake.io/assets/img/index/package_arch.png&#34; width=&#34;650px&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Distributed Compilation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cross-platform support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for MSVC, Clang, GCC and other cross-compilation toolchains.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for building for Android, Linux, Windows NT, and Darwin hosts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; No dependencies other than the compilation toolchain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for build server load balancing scheduling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for real time compressed transfer of large files (lz4).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Almost zero configuration cost, no shared filesystem required, for convenience and security.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details see: &lt;a href=&#34;https://github.com/xmake-io/xmake/issues/274&#34;&gt;#274&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Remote Compilation&lt;/h2&gt; &#xA;&lt;p&gt;For more details see: &lt;a href=&#34;https://github.com/xmake-io/xmake/issues/622&#34;&gt;#622&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Local/Remote Build Cache&lt;/h2&gt; &#xA;&lt;p&gt;For more details see: &lt;a href=&#34;https://github.com/xmake-io/xmake/issues/2371&#34;&gt;#622&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;Xmake&#39;s speed on is par with Ninja! The test project: &lt;a href=&#34;https://github.com/xmake-io/xmake/tree/master/core&#34;&gt;xmake-core&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Multi-task parallel compilation&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;Termux (8core/-j12)&lt;/th&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;MacOS (8core/-j12)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;24.890s&lt;/td&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;12.264s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;25.682s&lt;/td&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;11.327s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;5.416s+28.473s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;1.203s+14.030s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;4.458s+24.842s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;0.988s+11.644s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Single task compilation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;Termux (-j1)&lt;/th&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;MacOS (-j1)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;1m57.707s&lt;/td&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;39.937s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;1m52.845s&lt;/td&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;38.995s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;5.416s+2m10.539s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;1.203s+41.737s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;4.458s+1m54.868s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;0.988s+38.022s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Debug and release profiles&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_rules(&#34;mode.debug&#34;, &#34;mode.release&#34;)&#xA;&#xA;target(&#34;console&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    if is_mode(&#34;debug&#34;) then&#xA;        add_defines(&#34;DEBUG&#34;)&#xA;    end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom scripts&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    after_build(function (target)&#xA;        print(&#34;hello: %s&#34;, target:name())&#xA;        os.exec(&#34;echo %s&#34;, target:targetfile())&#xA;    end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatic integration of dependent packages&lt;/h3&gt; &#xA;&lt;p&gt;Download and use packages in &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt; or third-party repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;tbox &amp;gt;1.6.1&#34;, &#34;libuv master&#34;, &#34;vcpkg::ffmpeg&#34;, &#34;brew::pcre2/libpcre2-8&#34;)&#xA;add_requires(&#34;conan::openssl/1.1.1g&#34;, {alias = &#34;openssl&#34;, optional = true, debug = true})&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    add_packages(&#34;tbox&#34;, &#34;libuv&#34;, &#34;vcpkg::ffmpeg&#34;, &#34;brew::pcre2/libpcre2-8&#34;, &#34;openssl&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, we can also use the &lt;a href=&#34;https://github.com/xmake-io/xrepo&#34;&gt;xrepo&lt;/a&gt; command to quickly install dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Qt QuickApp Program&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    add_rules(&#34;qt.quickapp&#34;)&#xA;    add_files(&#34;src/*.cpp&#34;)&#xA;    add_files(&#34;src/qml.qrc&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cuda Program&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.cu&#34;)&#xA;    add_cugencodes(&#34;native&#34;)&#xA;    add_cugencodes(&#34;compute_35&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WDK/UMDF Driver Program&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;echo&#34;)&#xA;    add_rules(&#34;wdk.driver&#34;, &#34;wdk.env.umdf&#34;)&#xA;    add_files(&#34;driver/*.c&#34;)&#xA;    add_files(&#34;driver/*.inx&#34;)&#xA;    add_includedirs(&#34;exe&#34;)&#xA;&#xA;target(&#34;app&#34;)&#xA;    add_rules(&#34;wdk.binary&#34;, &#34;wdk.env.umdf&#34;)&#xA;    add_files(&#34;exe/*.cpp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more WDK driver examples (UMDF/KMDF/WDM), please visit &lt;a href=&#34;https://xmake.io/#/guide/project_examples?id=wdk-driver-program&#34;&gt;WDK Program Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Darwin Applications&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    add_rules(&#34;xcode.application&#34;)&#xA;    add_files(&#34;src/*.m&#34;, &#34;src/**.storyboard&#34;, &#34;src/*.xcassets&#34;)&#xA;    add_files(&#34;src/Info.plist&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Framework and Bundle Program (Darwin)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    add_rules(&#34;xcode.framework&#34;) -- or xcode.bundle&#xA;    add_files(&#34;src/*.m&#34;)&#xA;    add_files(&#34;src/Info.plist&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OpenMP Program&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;libomp&#34;, {optional = true})&#xA;target(&#34;loop&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.cpp&#34;)&#xA;    add_rules(&#34;c++.openmp&#34;)&#xA;    add_packages(&#34;libomp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Zig Program&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/main.zig&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatically fetch remote toolchain&lt;/h3&gt; &#xA;&lt;h4&gt;fetch a special version of LLVM&lt;/h4&gt; &#xA;&lt;p&gt;Require the Clang version packaged with LLM-10 to compile a project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;llvm 10.x&#34;, {alias = &#34;llvm-10&#34;})&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    set_toolchains(&#34;llvm@llvm-10&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fetch a cross-compilation toolchain&lt;/h4&gt; &#xA;&lt;p&gt;We can also pull a specified cross-compilation toolchain in to compile the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;muslcc&#34;)&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    set_toolchains(&#34;@muslcc&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fetch toolchain and packages&lt;/h4&gt; &#xA;&lt;p&gt;We can also use the specified &lt;code&gt;muslcc&lt;/code&gt; cross-compilation toolchain to compile and integrate all dependent packages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;muslcc&#34;)&#xA;add_requires(&#34;zlib&#34;, &#34;libogg&#34;, {system = false})&#xA;&#xA;set_toolchains(&#34;@muslcc&#34;)&#xA;&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    add_packages(&#34;zlib&#34;, &#34;libogg&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;h4&gt;Generate IDE project file pluginÔºàmakefile, vs2002 - vs2022 .. Ôºâ&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake project -k vsxmake -m &#34;debug,release&#34; # New vsproj generator (Recommended)&#xA;$ xmake project -k vs -m &#34;debug,release&#34;&#xA;$ xmake project -k cmake&#xA;$ xmake project -k ninja&#xA;$ xmake project -k compile_commands&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run a custom lua script plugin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake l ./test.lua&#xA;$ xmake l -c &#34;print(&#39;hello xmake!&#39;)&#34;&#xA;$ xmake l lib.detect.find_tool gcc&#xA;$ xmake l&#xA;&amp;gt; print(&#34;hello xmake!&#34;)&#xA;&amp;gt; {1, 2, 3}&#xA;&amp;lt; {&#xA;    1,&#xA;    2,&#xA;    3&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see a list of bultin plugs, please visit &lt;a href=&#34;https://xmake.io/#/plugin/builtin_plugins&#34;&gt;Builtin plugins&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please download and install other plugins from the plugins repository &lt;a href=&#34;https://github.com/xmake-io/xmake-plugins&#34;&gt;xmake-plugins&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;IDE/Editor Integration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmake-io/xmake-vscode&#34;&gt;xmake-vscode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmake-io/xmake-vscode/master/res/problem.gif&#34; width=&#34;650px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmake-io/xmake-sublime&#34;&gt;xmake-sublime&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmake-io/xmake-sublime/master/res/problem.gif&#34; width=&#34;650px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmake-io/xmake-idea&#34;&gt;xmake-idea&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmake-io/xmake-idea/master/res/problem.gif&#34; width=&#34;650px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/luzhlon/xmake.vim&#34;&gt;xmake.vim&lt;/a&gt; (third-party, thanks &lt;a href=&#34;https://github.com/luzhlon&#34;&gt;@luzhlon&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HelloWorld886/xmake-visualstudio&#34;&gt;xmake-visualstudio&lt;/a&gt; (third-party, thanks &lt;a href=&#34;https://github.com/HelloWorld886&#34;&gt;@HelloWorld886&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Arthapz/xmake-project-manager&#34;&gt;xmake-qtcreator&lt;/a&gt; (third-party, thanks &lt;a href=&#34;https://github.com/Arthapz&#34;&gt;@Arthapz&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Xmake Gradle Plugin (JNI)&lt;/h3&gt; &#xA;&lt;p&gt;We can use the &lt;a href=&#34;https://github.com/xmake-io/xmake-gradle&#34;&gt;xmake-gradle&lt;/a&gt; plugin to compile JNI libraries via gradle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;plugins {&#xA;  id &#39;org.tboox.gradle-xmake-plugin&#39; version &#39;1.1.5&#39;&#xA;}&#xA;&#xA;android {&#xA;    externalNativeBuild {&#xA;        xmake {&#xA;            path &#34;jni/xmake.lua&#34;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;xmakeBuild&lt;/code&gt; task will be injected into the &lt;code&gt;assemble&lt;/code&gt; task automatically if the &lt;code&gt;gradle-xmake-plugin&lt;/code&gt; has been applied.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./gradlew app:assembleDebug&#xA;&amp;gt; Task :nativelib:xmakeConfigureForArm64&#xA;&amp;gt; Task :nativelib:xmakeBuildForArm64&#xA;&amp;gt;&amp;gt; xmake build&#xA;[ 50%]: cache compiling.debug nativelib.cc&#xA;[ 75%]: linking.debug libnativelib.so&#xA;[100%]: build ok!&#xA;&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/arm64-v8a&#xA;&amp;gt; Task :nativelib:xmakeConfigureForArmv7&#xA;&amp;gt; Task :nativelib:xmakeBuildForArmv7&#xA;&amp;gt;&amp;gt; xmake build&#xA;[ 50%]: cache compiling.debug nativelib.cc&#xA;[ 75%]: linking.debug libnativelib.so&#xA;[100%]: build ok!&#xA;&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/armeabi-v7a&#xA;&amp;gt; Task :nativelib:preBuild&#xA;&amp;gt; Task :nativelib:assemble&#xA;&amp;gt; Task :app:assembleDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CI Integration&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub Action&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/xmake-io/github-action-setup-xmake&#34;&gt;github-action-setup-xmake&lt;/a&gt; plugin for GitHub Actions can allow you to use Xmake with minimal efforts if you use GitHub Actions for your CI pipeline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;uses: xmake-io/github-action-setup-xmake@v1&#xA;with:&#xA;  xmake-version: latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Who is using Xmake?&lt;/h2&gt; &#xA;&lt;p&gt;The list of people and projects who are using Xmake is available &lt;a href=&#34;https://xmake.io/#/about/who_is_using_xmake&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Xmake, you are welcome to submit your information to the above list through a PR, so that other users and the developers can gauge interest. Ihis also let users to use xmake more confidently and give us motivation to continue to maintain it.&lt;/p&gt; &#xA;&lt;p&gt;This will help the Xmake project and it&#39;s community grow stronger and expand!&lt;/p&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EmailÔºö&lt;a href=&#34;mailto:waruqi@gmail.com&#34;&gt;waruqi@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HomepageÔºö&lt;a href=&#34;https://xmake.io&#34;&gt;xmake.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Community &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/xmake/&#34;&gt;Chat on Reddit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://t.me/tbooxorg&#34;&gt;Chat on Telegram&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://discord.gg/xmake&#34;&gt;Chat on Discord&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Chat on QQ Group: 343118190, 662147501&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Source CodeÔºö&lt;a href=&#34;https://github.com/xmake-io/xmake&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://gitee.com/tboox/xmake&#34;&gt;Gitee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WeChat Public: tboox-os&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who have &lt;a href=&#34;https://raw.githubusercontent.com/xmake-io/xmake/master/CONTRIBUTING.md&#34;&gt;contributed&lt;/a&gt;: &lt;a href=&#34;https://github.com/xmake-io/xmake/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/xmake/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TitanSnow&#34;&gt;TitanSnow&lt;/a&gt;: Provide the xmake &lt;a href=&#34;https://github.com/TitanSnow/ts-xmake-logo&#34;&gt;logo&lt;/a&gt; and install scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uael&#34;&gt;uael&lt;/a&gt;: Provide the semantic versioning library &lt;a href=&#34;https://github.com/uael/sv&#34;&gt;sv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpportunityLiu&#34;&gt;OpportunityLiu&lt;/a&gt;: Improve cuda, tests and ci&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xq114&#34;&gt;xq144&lt;/a&gt;: Improve &lt;code&gt;xrepo env shell&lt;/code&gt;, and contribute a lot of packages to the &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt; repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enderger&lt;/code&gt;: Helped smooth out the edges on the English translation of the README&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>folke/neodev.nvim</title>
    <updated>2023-08-01T02:07:47Z</updated>
    <id>tag:github.com,2023-08-01:/folke/neodev.nvim</id>
    <link href="https://github.com/folke/neodev.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üíª Neovim setup for init.lua and plugin development with full signature help, docs and completion for the nvim lua API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üíª neodev.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Neovim setup for init.lua and plugin development with full signature help, docs and completion for the nvim lua API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/201495543-ff532160-c8bd-4651-a16f-4fb682c9b945.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically configures &lt;strong&gt;lua-language-server&lt;/strong&gt; for your &lt;strong&gt;Neovim&lt;/strong&gt; config, &lt;strong&gt;Neovim&lt;/strong&gt; runtime and plugin directories&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LuaLS/lua-language-server/wiki/Annotations&#34;&gt;Annotations&lt;/a&gt; for completion, hover and signatures of: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Vim functions&lt;/li&gt; &#xA;   &lt;li&gt;Neovim api functions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vim.opt&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/luvit/luv&#34;&gt;vim.loop&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;properly configures the &lt;code&gt;require&lt;/code&gt; path.&lt;/li&gt; &#xA; &lt;li&gt;adds all plugins in &lt;code&gt;opt&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; to the workspace so you get completion for all installed plugins&lt;/li&gt; &#xA; &lt;li&gt;properly configure the vim runtime&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.7.0&lt;/li&gt; &#xA; &lt;li&gt;completion plugin like &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;folke/neodev.nvim&#34;, opts = {} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;folke/neodev.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;neodev&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  library = {&#xA;    enabled = true, -- when not enabled, neodev will not change any settings to the LSP server&#xA;    -- these settings will be used for your Neovim config directory&#xA;    runtime = true, -- runtime path&#xA;    types = true, -- full signature, docs and completion of vim.api, vim.treesitter, vim.lsp and others&#xA;    plugins = true, -- installed opt or start plugins in packpath&#xA;    -- you can also specify the list of plugins to make available as a workspace library&#xA;    -- plugins = { &#34;nvim-treesitter&#34;, &#34;plenary.nvim&#34;, &#34;telescope.nvim&#34; },&#xA;  },&#xA;  setup_jsonls = true, -- configures jsonls to provide completion for project specific .luarc.json files&#xA;  -- for your Neovim config directory, the config.library settings will be used as is&#xA;  -- for plugin directories (root_dirs having a /lua directory), config.library.plugins will be disabled&#xA;  -- for any other directory, config.library.enabled will be set to false&#xA;  override = function(root_dir, options) end,&#xA;  -- With lspconfig, Neodev will automatically setup your lua-language-server&#xA;  -- If you disable this, then you have to set {before_init=require(&#34;neodev.lsp&#34;).before_init}&#xA;  -- in your lsp start options&#xA;  lspconfig = true,&#xA;  -- much faster, but needs a recent built of lua-language-server&#xA;  -- needs lua-language-server &amp;gt;= 3.6.0&#xA;  pathStrict = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;neodev&lt;/strong&gt; will &lt;strong&gt;ONLY&lt;/strong&gt; change the &lt;strong&gt;lua_ls&lt;/strong&gt; settings for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;your Neovim config directory&lt;/li&gt; &#xA; &lt;li&gt;your Neovim runtime directory&lt;/li&gt; &#xA; &lt;li&gt;any plugin directory (this is an lsp root_dir that contains a &lt;code&gt;/lua&lt;/code&gt; directory)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For any other &lt;code&gt;root_dir&lt;/code&gt;, &lt;strong&gt;neodev&lt;/strong&gt; will &lt;strong&gt;NOT&lt;/strong&gt; change any settings.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; with &lt;a href=&#34;https://github.com/folke/neoconf.nvim&#34;&gt;neoconf.nvim&lt;/a&gt;, you can easily set project local &lt;strong&gt;Neodev&lt;/strong&gt; settings. See the example &lt;a href=&#34;https://github.com/folke/neodev.nvim/raw/main/.neoconf.json&#34;&gt;.neoconf.json&lt;/a&gt; file in this repository&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- IMPORTANT: make sure to setup neodev BEFORE lspconfig&#xA;require(&#34;neodev&#34;).setup({&#xA;  -- add any options here, or leave empty to use the default settings&#xA;})&#xA;&#xA;-- then setup your lsp server as usual&#xA;local lspconfig = require(&#39;lspconfig&#39;)&#xA;&#xA;-- example to setup lua_ls and enable call snippets&#xA;lspconfig.lua_ls.setup({&#xA;  settings = {&#xA;    Lua = {&#xA;      completion = {&#xA;        callSnippet = &#34;Replace&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example for setting up **neodev** that overrides the settings for `/etc/nixos`&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- You can override the default detection using the override function&#xA;-- EXAMPLE: If you want a certain directory to be configured differently, you can override its settings&#xA;require(&#34;neodev&#34;).setup({&#xA;  override = function(root_dir, library)&#xA;    if root_dir:find(&#34;/etc/nixos&#34;, 1, true) == 1 then&#xA;      library.enabled = true&#xA;      library.plugins = true&#xA;    end&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;It&#39;s possible to setup Neodev without lspconfig, by configuring the &lt;code&gt;before_init&lt;/code&gt; of the options passed to &lt;code&gt;vim.lsp.start&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example without lspconfig&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- dont run neodev.setup&#xA;vim.lsp.start({&#xA;  name = &#34;lua-language-server&#34;,&#xA;  cmd = { &#34;lua-language-server&#34; },&#xA;  before_init = require(&#34;neodev.lsp&#34;).before_init,&#xA;  root_dir = vim.fn.getcwd(),&#xA;  settings = { Lua = {} },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>folke/lazy.nvim</title>
    <updated>2023-08-01T02:07:47Z</updated>
    <id>tag:github.com,2023-08-01:/folke/lazy.nvim</id>
    <link href="https://github.com/folke/lazy.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üí§ A modern plugin manager for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üí§ lazy.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; is a modern plugin manager for Neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/208301737-68fb279c-ba70-43ef-a369-8c3e8367d6b1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üì¶ Manage all your Neovim plugins with a powerful UI&lt;/li&gt; &#xA; &lt;li&gt;üöÄ Fast startup times thanks to automatic caching and bytecode compilation of Lua modules&lt;/li&gt; &#xA; &lt;li&gt;üíæ Partial clones instead of shallow clones&lt;/li&gt; &#xA; &lt;li&gt;üîå Automatic lazy-loading of Lua modules and lazy-loading on events, commands, filetypes, and key mappings&lt;/li&gt; &#xA; &lt;li&gt;‚è≥ Automatically install missing plugins before starting up Neovim, allowing you to start using it right away&lt;/li&gt; &#xA; &lt;li&gt;üí™ Async execution for improved performance&lt;/li&gt; &#xA; &lt;li&gt;üõ†Ô∏è No need to manually compile plugins&lt;/li&gt; &#xA; &lt;li&gt;üß™ Correct sequencing of dependencies&lt;/li&gt; &#xA; &lt;li&gt;üìÅ Configurable in multiple files&lt;/li&gt; &#xA; &lt;li&gt;üìö Generates helptags of the headings in &lt;code&gt;README.md&lt;/code&gt; files for plugins that don&#39;t have vimdocs&lt;/li&gt; &#xA; &lt;li&gt;üíª Dev options and patterns for using local plugins&lt;/li&gt; &#xA; &lt;li&gt;üìä Profiling tools to optimize performance&lt;/li&gt; &#xA; &lt;li&gt;üîí Lockfile &lt;code&gt;lazy-lock.json&lt;/code&gt; to keep track of installed plugins&lt;/li&gt; &#xA; &lt;li&gt;üîé Automatically check for updates&lt;/li&gt; &#xA; &lt;li&gt;üìã Commit, branch, tag, version, and full &lt;a href=&#34;https://devhints.io/semver&#34;&gt;Semver&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;üìà Statusline component to see the number of pending updates&lt;/li&gt; &#xA; &lt;li&gt;üé® Automatically lazy-loads colorschemes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.8.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can add the following Lua code to your &lt;code&gt;init.lua&lt;/code&gt; to bootstrap &lt;strong&gt;lazy.nvim&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;!-- bootstrap:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lazypath = vim.fn.stdpath(&#34;data&#34;) .. &#34;/lazy/lazy.nvim&#34;&#xA;if not vim.loop.fs_stat(lazypath) then&#xA;  vim.fn.system({&#xA;    &#34;git&#34;,&#xA;    &#34;clone&#34;,&#xA;    &#34;--filter=blob:none&#34;,&#xA;    &#34;https://github.com/folke/lazy.nvim.git&#34;,&#xA;    &#34;--branch=stable&#34;, -- latest stable release&#xA;    lazypath,&#xA;  })&#xA;end&#xA;vim.opt.rtp:prepend(lazypath)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- bootstrap:end --&gt; &#xA;&lt;p&gt;Next step is to add &lt;strong&gt;lazy.nvim&lt;/strong&gt; below the code added in the prior step in &lt;code&gt;init.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup(plugins, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;plugins&lt;/strong&gt;: this should be a &lt;code&gt;table&lt;/code&gt; or a &lt;code&gt;string&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;table&lt;/code&gt;: a list with your &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#-plugin-spec&#34;&gt;Plugin Spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;string&lt;/code&gt;: a Lua module name that contains your &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#-plugin-spec&#34;&gt;Plugin Spec&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#-structuring-your-plugins&#34;&gt;Structuring Your Plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;opts&lt;/strong&gt;: see &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#%EF%B8%8F-configuration&#34;&gt;Configuration&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example using a list of specs with the default options&#xA;vim.g.mapleader = &#34; &#34; -- Make sure to set `mapleader` before lazy so your mappings are correct&#xA;&#xA;require(&#34;lazy&#34;).setup({&#xA;  &#34;folke/which-key.nvim&#34;,&#xA;  { &#34;folke/neoconf.nvim&#34;, cmd = &#34;Neoconf&#34; },&#xA;  &#34;folke/neodev.nvim&#34;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ÑπÔ∏è It is recommended to run &lt;code&gt;:checkhealth lazy&lt;/code&gt; after installation.&lt;/p&gt; &#xA;&lt;h2&gt;üîå Plugin Spec&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[1]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Short plugin url. Will be expanded using &lt;code&gt;config.git.url_format&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;dir&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A directory pointing to a local plugin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;url&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A custom git url where the plugin is hosted&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A custom name for the plugin used for the local plugin directory and as the display name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;dev&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, a local plugin directory will be used instead. See &lt;code&gt;config.dev&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;lazy&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, the plugin will only be loaded when needed. Lazy-loaded plugins are automatically loaded when their Lua modules are &lt;code&gt;required&lt;/code&gt;, or when one of the lazy-loading handlers triggers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;enabled&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt; or &lt;code&gt;fun():boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;false&lt;/code&gt;, or if the &lt;code&gt;function&lt;/code&gt; returns false, then this plugin will not be included in the spec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;cond&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt; or &lt;code&gt;fun(LazyPlugin):boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;false&lt;/code&gt;, or if the &lt;code&gt;function&lt;/code&gt; returns false, then this plugin will not be loaded. Useful to disable some plugins in vscode, or firenvim for example.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;dependencies&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LazySpec[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list of plugin names or plugin specs that should be loaded when the plugin loads. Dependencies are always lazy-loaded unless specified otherwise. When specifying a name, make sure the plugin spec has been defined somewhere else.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;init&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun(LazyPlugin)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;init&lt;/code&gt; functions are always executed during startup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;opts&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;table&lt;/code&gt; or &lt;code&gt;fun(LazyPlugin, opts:table)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;opts&lt;/code&gt; should be a table (will be merged with parent specs), return a table (replaces parent specs) or should change a table. The table will be passed to the &lt;code&gt;Plugin.config()&lt;/code&gt; function. Setting this value will imply &lt;code&gt;Plugin.config()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;config&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun(LazyPlugin, opts:table)&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;config&lt;/code&gt; is executed when the plugin loads. The default implementation will automatically run &lt;code&gt;require(MAIN).setup(opts)&lt;/code&gt;. Lazy uses several heuristics to determine the plugin&#39;s &lt;code&gt;MAIN&lt;/code&gt; module automatically based on the plugin&#39;s &lt;strong&gt;name&lt;/strong&gt;. See also &lt;code&gt;opts&lt;/code&gt;. To use the default implementation without &lt;code&gt;opts&lt;/code&gt; set &lt;code&gt;config&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;main&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;You can specify the &lt;code&gt;main&lt;/code&gt; module to use for &lt;code&gt;config()&lt;/code&gt; and &lt;code&gt;opts()&lt;/code&gt;, in case it can not be determined automatically. See &lt;code&gt;config()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;build&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun(LazyPlugin)&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt; or a list of build commands&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;build&lt;/code&gt; is executed when a plugin is installed or updated. Before running &lt;code&gt;build&lt;/code&gt;, a plugin is first loaded. If it&#39;s a string it will be ran as a shell command. When prefixed with &lt;code&gt;:&lt;/code&gt; it is a Neovim command. You can also specify a list to executed multiple build commands. Some plugins provide their own &lt;code&gt;build.lua&lt;/code&gt; which is automatically used by lazy. So no need to specify a build step for those plugins.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;branch&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Branch of the repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;tag&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tag of the repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;commit&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Commit of the repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;version&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to override the default&lt;/td&gt; &#xA;   &lt;td&gt;Version to use from the repository. Full &lt;a href=&#34;https://devhints.io/semver&#34;&gt;Semver&lt;/a&gt; ranges are supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;pin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, this plugin will not be included in updates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;submodules&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When false, git submodules will not be fetched. Defaults to &lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;event&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt; or &lt;code&gt;fun(self:LazyPlugin, event:string[]):string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on event. Events can be specified as &lt;code&gt;BufEnter&lt;/code&gt; or with a pattern like &lt;code&gt;BufEnter *.lua&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;cmd&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt; or &lt;code&gt;fun(self:LazyPlugin, cmd:string[]):string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ft&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt; or &lt;code&gt;fun(self:LazyPlugin, ft:string[]):string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on filetype&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;keys&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt; or &lt;code&gt;LazyKeys[]&lt;/code&gt; or &lt;code&gt;fun(self:LazyPlugin, keys:string[]):(string | LazyKeys)[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on key mapping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;module&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do not automatically load this Lua module when it&#39;s required somewhere&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;priority&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Only useful for &lt;strong&gt;start&lt;/strong&gt; plugins (&lt;code&gt;lazy=false&lt;/code&gt;) to force loading certain plugins first. Default priority is &lt;code&gt;50&lt;/code&gt;. It&#39;s recommended to set this to a high number for colorschemes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;optional&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When a spec is tagged optional, it will only be included in the final spec, when the same plugin has been specified at least once somewhere else without &lt;code&gt;optional&lt;/code&gt;. This is mainly useful for Neovim distros, to allow setting options on plugins that may/may not be part of the user&#39;s plugins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Lazy Loading&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; automagically lazy-loads Lua modules, so it is not needed to specify &lt;code&gt;module=...&lt;/code&gt; everywhere in your plugin specification. This means that if you have a plugin &lt;code&gt;A&lt;/code&gt; that is lazy-loaded and a plugin &lt;code&gt;B&lt;/code&gt; that requires a module of plugin &lt;code&gt;A&lt;/code&gt;, then plugin &lt;code&gt;A&lt;/code&gt; will be loaded on demand as expected.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want this behavior for a certain plugin, you can specify that with &lt;code&gt;module=false&lt;/code&gt;. You can then manually load the plugin with &lt;code&gt;:Lazy load foobar.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can configure &lt;strong&gt;lazy.nvim&lt;/strong&gt; to lazy-load all plugins by default with &lt;code&gt;config.defaults.lazy = true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can also lazy-load on &lt;strong&gt;events&lt;/strong&gt;, &lt;strong&gt;commands&lt;/strong&gt;, &lt;strong&gt;file types&lt;/strong&gt; and &lt;strong&gt;key mappings&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins will be lazy-loaded when one of the following is &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The plugin only exists as a dependency in your spec&lt;/li&gt; &#xA; &lt;li&gt;It has an &lt;code&gt;event&lt;/code&gt;, &lt;code&gt;cmd&lt;/code&gt;, &lt;code&gt;ft&lt;/code&gt; or &lt;code&gt;keys&lt;/code&gt; key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config.defaults.lazy == true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;üåà Colorschemes&lt;/h4&gt; &#xA;&lt;p&gt;Colorscheme plugins can be configured with &lt;code&gt;lazy=true&lt;/code&gt;. The plugin will automagically load when doing &lt;code&gt;colorscheme foobar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; since &lt;strong&gt;start&lt;/strong&gt; plugins can possibly change existing highlight groups, it&#39;s important to make sure that your main &lt;strong&gt;colorscheme&lt;/strong&gt; is loaded first. To ensure this you can use the &lt;code&gt;priority=1000&lt;/code&gt; field. &lt;strong&gt;&lt;em&gt;(see the examples)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;‚å®Ô∏è Lazy Key Mappings&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;keys&lt;/code&gt; property can be a &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt; for simple normal-mode mappings, or it can be a &lt;code&gt;LazyKeys&lt;/code&gt; table with the following key-value pairs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[1]&lt;/strong&gt;: (&lt;code&gt;string&lt;/code&gt;) lhs &lt;strong&gt;&lt;em&gt;(required)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2]&lt;/strong&gt;: (&lt;code&gt;string|fun()&lt;/code&gt;) rhs &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;: (&lt;code&gt;string|string[]&lt;/code&gt;) mode &lt;strong&gt;&lt;em&gt;(optional, defaults to &lt;code&gt;&#34;n&#34;&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;any other option valid for &lt;code&gt;vim.keymap.set&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Key mappings will load the plugin the first time they get executed.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;[2]&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, then the real mapping has to be created by the &lt;code&gt;config()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example for neo-tree.nvim&#xA;{&#xA;  &#34;nvim-neo-tree/neo-tree.nvim&#34;,&#xA;    keys = {&#xA;      { &#34;&amp;lt;leader&amp;gt;ft&#34;, &#34;&amp;lt;cmd&amp;gt;Neotree toggle&amp;lt;cr&amp;gt;&#34;, desc = &#34;NeoTree&#34; },&#xA;    },&#xA;    config = function()&#xA;      require(&#34;neo-tree&#34;).setup()&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;p&gt;If you want to install a specific revision of a plugin, you can use &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;version&lt;/code&gt; property supports &lt;a href=&#34;https://semver.org/&#34;&gt;Semver&lt;/a&gt; ranges.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see some examples&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;*&lt;/code&gt;: latest stable version (this excludes pre-release versions)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;1.2.x&lt;/code&gt;: any version that starts with &lt;code&gt;1.2&lt;/code&gt;, such as &lt;code&gt;1.2.0&lt;/code&gt;, &lt;code&gt;1.2.3&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;^1.2.3&lt;/code&gt;: any version that is compatible with &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.3.0&lt;/code&gt;, &lt;code&gt;1.4.5&lt;/code&gt;, etc., but not &lt;code&gt;2.0.0&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;~1.2.3&lt;/code&gt;: any version that is compatible with &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.2.4&lt;/code&gt;, &lt;code&gt;1.2.5&lt;/code&gt;, but not &lt;code&gt;1.3.0&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;gt;1.2.3&lt;/code&gt;: any version that is greater than &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.3.0&lt;/code&gt;, &lt;code&gt;1.4.5&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;gt;=1.2.3&lt;/code&gt;: any version that is greater than or equal to &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.2.3&lt;/code&gt;, &lt;code&gt;1.3.0&lt;/code&gt;, &lt;code&gt;1.4.5&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;lt;1.2.3&lt;/code&gt;: any version that is less than &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.1.0&lt;/code&gt;, &lt;code&gt;1.0.5&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;lt;=1.2.3&lt;/code&gt;: any version that is less than or equal to &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.2.3&lt;/code&gt;, &lt;code&gt;1.1.0&lt;/code&gt;, &lt;code&gt;1.0.5&lt;/code&gt;, etc&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;config.defaults.version = &#34;*&#34;&lt;/code&gt; to install the latest stable version of plugins that support Semver.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;!-- spec:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  -- the colorscheme should be available when starting Neovim&#xA;  {&#xA;    &#34;folke/tokyonight.nvim&#34;,&#xA;    lazy = false, -- make sure we load this during startup if it is your main colorscheme&#xA;    priority = 1000, -- make sure to load this before all the other start plugins&#xA;    config = function()&#xA;      -- load the colorscheme here&#xA;      vim.cmd([[colorscheme tokyonight]])&#xA;    end,&#xA;  },&#xA;&#xA;  -- I have a separate config.mappings file where I require which-key.&#xA;  -- With lazy the plugin will be automatically loaded when it is required somewhere&#xA;  { &#34;folke/which-key.nvim&#34;, lazy = true },&#xA;&#xA;  {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    -- lazy-load on filetype&#xA;    ft = &#34;norg&#34;,&#xA;    -- options for neorg. This will automatically call `require(&#34;neorg&#34;).setup(opts)`&#xA;    opts = {&#xA;      load = {&#xA;        [&#34;core.defaults&#34;] = {},&#xA;      },&#xA;    },&#xA;  },&#xA;&#xA;  {&#xA;    &#34;dstein64/vim-startuptime&#34;,&#xA;    -- lazy-load on a command&#xA;    cmd = &#34;StartupTime&#34;,&#xA;    -- init is called during startup. Configuration for vim plugins typically should be set in an init function&#xA;    init = function()&#xA;      vim.g.startuptime_tries = 10&#xA;    end,&#xA;  },&#xA;&#xA;  {&#xA;    &#34;hrsh7th/nvim-cmp&#34;,&#xA;    -- load cmp on InsertEnter&#xA;    event = &#34;InsertEnter&#34;,&#xA;    -- these dependencies will only be loaded when cmp loads&#xA;    -- dependencies are always lazy-loaded unless specified otherwise&#xA;    dependencies = {&#xA;      &#34;hrsh7th/cmp-nvim-lsp&#34;,&#xA;      &#34;hrsh7th/cmp-buffer&#34;,&#xA;    },&#xA;    config = function()&#xA;      -- ...&#xA;    end,&#xA;  },&#xA;&#xA;  -- if some code requires a module from an unloaded plugin, it will be automatically loaded.&#xA;  -- So for api plugins like devicons, we can always set lazy=true&#xA;  { &#34;nvim-tree/nvim-web-devicons&#34;, lazy = true },&#xA;&#xA;  -- you can use the VeryLazy event for things that can&#xA;  -- load later and are not important for the initial UI&#xA;  { &#34;stevearc/dressing.nvim&#34;, event = &#34;VeryLazy&#34; },&#xA;&#xA;  {&#xA;    &#34;Wansmer/treesj&#34;,&#xA;    keys = {&#xA;      { &#34;J&#34;, &#34;&amp;lt;cmd&amp;gt;TSJToggle&amp;lt;cr&amp;gt;&#34;, desc = &#34;Join Toggle&#34; },&#xA;    },&#xA;    opts = { use_default_keymaps = false, max_join_length = 150 },&#xA;  },&#xA;&#xA;  {&#xA;    &#34;monaqa/dial.nvim&#34;,&#xA;    -- lazy-load on keys&#xA;    -- mode is `n` by default. For more advanced options, check the section on key mappings&#xA;    keys = { &#34;&amp;lt;C-a&amp;gt;&#34;, { &#34;&amp;lt;C-x&amp;gt;&#34;, mode = &#34;n&#34; } },&#xA;  },&#xA;&#xA;  -- local plugins need to be explicitly configured with dir&#xA;  { dir = &#34;~/projects/secret.nvim&#34; },&#xA;&#xA;  -- you can use a custom url to fetch a plugin&#xA;  { url = &#34;git@github.com:folke/noice.nvim.git&#34; },&#xA;&#xA;  -- local plugins can also be configure with the dev option.&#xA;  -- This will use {config.dev.path}/noice.nvim/ instead of fetching it from Github&#xA;  -- With the dev option, you can easily switch between the local and installed version of a plugin&#xA;  { &#34;folke/noice.nvim&#34;, dev = true },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- spec:end --&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;!-- config:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  root = vim.fn.stdpath(&#34;data&#34;) .. &#34;/lazy&#34;, -- directory where plugins will be installed&#xA;  defaults = {&#xA;    lazy = false, -- should plugins be lazy-loaded?&#xA;    version = nil,&#xA;    -- default `cond` you can use to globally disable a lot of plugins&#xA;    -- when running inside vscode for example&#xA;    cond = nil, ---@type boolean|fun(self:LazyPlugin):boolean|nil&#xA;    -- version = &#34;*&#34;, -- enable this to try installing the latest stable versions of plugins&#xA;  },&#xA;  -- leave nil when passing the spec as the first argument to setup()&#xA;  spec = nil, ---@type LazySpec&#xA;  lockfile = vim.fn.stdpath(&#34;config&#34;) .. &#34;/lazy-lock.json&#34;, -- lockfile generated after running update.&#xA;  concurrency = jit.os:find(&#34;Windows&#34;) and (vim.loop.available_parallelism() * 2) or nil, ---@type number limit the maximum amount of concurrent tasks&#xA;  git = {&#xA;    -- defaults for the `Lazy log` command&#xA;    -- log = { &#34;-10&#34; }, -- show the last 10 commits&#xA;    log = { &#34;-8&#34; }, -- show commits from the last 3 days&#xA;    timeout = 120, -- kill processes that take more than 2 minutes&#xA;    url_format = &#34;https://github.com/%s.git&#34;,&#xA;    -- lazy.nvim requires git &amp;gt;=2.19.0. If you really want to use lazy with an older version,&#xA;    -- then set the below to false. This should work, but is NOT supported and will&#xA;    -- increase downloads a lot.&#xA;    filter = true,&#xA;  },&#xA;  dev = {&#xA;    -- directory where you store your local plugin projects&#xA;    path = &#34;~/projects&#34;,&#xA;    ---@type string[] plugins that match these patterns will use your local versions instead of being fetched from GitHub&#xA;    patterns = {}, -- For example {&#34;folke&#34;}&#xA;    fallback = false, -- Fallback to git when local plugin doesn&#39;t exist&#xA;  },&#xA;  install = {&#xA;    -- install missing plugins on startup. This doesn&#39;t increase startup time.&#xA;    missing = true,&#xA;    -- try to load one of these colorschemes when starting an installation during startup&#xA;    colorscheme = { &#34;habamax&#34; },&#xA;  },&#xA;  ui = {&#xA;    -- a number &amp;lt;1 is a percentage., &amp;gt;1 is a fixed size&#xA;    size = { width = 0.8, height = 0.8 },&#xA;    wrap = true, -- wrap the lines in the ui&#xA;    -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.&#xA;    border = &#34;none&#34;,&#xA;    title = nil, ---@type string only works when border is not &#34;none&#34;&#xA;    title_pos = &#34;center&#34;, ---@type &#34;center&#34; | &#34;left&#34; | &#34;right&#34;&#xA;    -- Show pills on top of the Lazy window&#xA;    pills = true, ---@type boolean&#xA;    icons = {&#xA;      cmd = &#34;ÓØá &#34;,&#xA;      config = &#34;ÔÄì&#34;,&#xA;      event = &#34;Ó™Ü&#34;,&#xA;      ft = &#34;ÔÄñ &#34;,&#xA;      init = &#34;ÔÄì &#34;,&#xA;      import = &#34;ÓâΩ &#34;,&#xA;      keys = &#34;ÔÑú &#34;,&#xA;      lazy = &#34;Û∞í≤ &#34;,&#xA;      loaded = &#34;‚óè&#34;,&#xA;      not_loaded = &#34;‚óã&#34;,&#xA;      plugin = &#34;Ôíá &#34;,&#xA;      runtime = &#34;ÓüÖ &#34;,&#xA;      source = &#34;ÔÑ° &#34;,&#xA;      start = &#34;Ó´ì&#34;,&#xA;      task = &#34;‚úî &#34;,&#xA;      list = {&#xA;        &#34;‚óè&#34;,&#xA;        &#34;‚ûú&#34;,&#xA;        &#34;‚òÖ&#34;,&#xA;        &#34;‚Äí&#34;,&#xA;      },&#xA;    },&#xA;    -- leave nil, to automatically select a browser depending on your OS.&#xA;    -- If you want to use a specific browser, you can define it here&#xA;    browser = nil, ---@type string?&#xA;    throttle = 20, -- how frequently should the ui process render events&#xA;    custom_keys = {&#xA;      -- you can define custom key maps here.&#xA;      -- To disable one of the defaults, set it to false&#xA;&#xA;      -- open lazygit log&#xA;      [&#34;&amp;lt;localleader&amp;gt;l&#34;] = function(plugin)&#xA;        require(&#34;lazy.util&#34;).float_term({ &#34;lazygit&#34;, &#34;log&#34; }, {&#xA;          cwd = plugin.dir,&#xA;        })&#xA;      end,&#xA;&#xA;      -- open a terminal for the plugin dir&#xA;      [&#34;&amp;lt;localleader&amp;gt;t&#34;] = function(plugin)&#xA;        require(&#34;lazy.util&#34;).float_term(nil, {&#xA;          cwd = plugin.dir,&#xA;        })&#xA;      end,&#xA;    },&#xA;  },&#xA;  diff = {&#xA;    -- diff command &amp;lt;d&amp;gt; can be one of:&#xA;    -- * browser: opens the github compare view. Note that this is always mapped to &amp;lt;K&amp;gt; as well,&#xA;    --   so you can have a different command for diff &amp;lt;d&amp;gt;&#xA;    -- * git: will run git diff and open a buffer with filetype git&#xA;    -- * terminal_git: will open a pseudo terminal with git diff&#xA;    -- * diffview.nvim: will open Diffview to show the diff&#xA;    cmd = &#34;git&#34;,&#xA;  },&#xA;  checker = {&#xA;    -- automatically check for plugin updates&#xA;    enabled = false,&#xA;    concurrency = nil, ---@type number? set to 1 to check for updates very slowly&#xA;    notify = true, -- get a notification when new updates are found&#xA;    frequency = 3600, -- check for updates every hour&#xA;  },&#xA;  change_detection = {&#xA;    -- automatically check for config file changes and reload the ui&#xA;    enabled = true,&#xA;    notify = true, -- get a notification when changes are found&#xA;  },&#xA;  performance = {&#xA;    cache = {&#xA;      enabled = true,&#xA;    },&#xA;    reset_packpath = true, -- reset the package path to improve startup time&#xA;    rtp = {&#xA;      reset = true, -- reset the runtime path to $VIMRUNTIME and your config directory&#xA;      ---@type string[]&#xA;      paths = {}, -- add any custom paths here that you want to includes in the rtp&#xA;      ---@type string[] list any plugins you want to disable here&#xA;      disabled_plugins = {&#xA;        -- &#34;gzip&#34;,&#xA;        -- &#34;matchit&#34;,&#xA;        -- &#34;matchparen&#34;,&#xA;        -- &#34;netrwPlugin&#34;,&#xA;        -- &#34;tarPlugin&#34;,&#xA;        -- &#34;tohtml&#34;,&#xA;        -- &#34;tutor&#34;,&#xA;        -- &#34;zipPlugin&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;  -- lazy can generate helptags from the headings in markdown readme files,&#xA;  -- so :help works even for plugins that don&#39;t have vim docs.&#xA;  -- when the readme opens with :help it will be correctly displayed as markdown&#xA;  readme = {&#xA;    enabled = true,&#xA;    root = vim.fn.stdpath(&#34;state&#34;) .. &#34;/lazy/readme&#34;,&#xA;    files = { &#34;README.md&#34;, &#34;lua/**/README.md&#34; },&#xA;    -- only generate markdown helptags for plugins that dont have docs&#xA;    skip_if_doc_exists = true,&#xA;  },&#xA;  state = vim.fn.stdpath(&#34;state&#34;) .. &#34;/lazy/state.json&#34;, -- state info for checker and other things&#xA;  build = {&#xA;    -- Plugins can provide a `build.lua` file that will be executed when the plugin is installed&#xA;    -- or updated. When the plugin spec also has a `build` command, the plugin&#39;s `build.lua` not be&#xA;    -- executed. In this case, a warning message will be shown.&#xA;    warn_on_override = true,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- config:end --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;If you don&#39;t want to use a Nerd Font, you can replace the icons with Unicode symbols.&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ui = {&#xA;    icons = {&#xA;      cmd = &#34;‚åò&#34;,&#xA;      config = &#34;üõ†&#34;,&#xA;      event = &#34;üìÖ&#34;,&#xA;      ft = &#34;üìÇ&#34;,&#xA;      init = &#34;‚öô&#34;,&#xA;      keys = &#34;üóù&#34;,&#xA;      plugin = &#34;üîå&#34;,&#xA;      runtime = &#34;üíª&#34;,&#xA;      source = &#34;üìÑ&#34;,&#xA;      start = &#34;üöÄ&#34;,&#xA;      task = &#34;üìå&#34;,&#xA;      lazy = &#34;üí§ &#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;p&gt;Plugins are managed with the &lt;code&gt;:Lazy&lt;/code&gt; command. Open the help with &lt;code&gt;&amp;lt;?&amp;gt;&lt;/code&gt; to see all the key mappings.&lt;/p&gt; &#xA;&lt;p&gt;You can press &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; on a plugin to show its details. Most properties can be hovered with &lt;code&gt;&amp;lt;K&amp;gt;&lt;/code&gt; to open links, help files, readmes, git commits and git issues.&lt;/p&gt; &#xA;&lt;p&gt;Lazy can automatically check for updates in the background. This feature can be enabled with &lt;code&gt;config.checker.enabled = true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any operation can be started from the UI, with a sub command or an API function:&lt;/p&gt; &#xA;&lt;!-- commands:start --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Lua&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy build {plugins}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).build(opts)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rebuild a plugin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy check [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).check(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check for updates and show the log (git fetch)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy clean [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).clean(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clean plugins that are no longer needed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy clear&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).clear()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clear finished tasks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy debug&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).debug()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show debug information&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy health&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).health()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run &lt;code&gt;:checkhealth lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy help&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).help()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle this help page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy home&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).home()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go back to plugin list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy install [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).install(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Install missing plugins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy load {plugins}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).load(opts)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Load a plugin that has not been loaded yet. Similar to &lt;code&gt;:packadd&lt;/code&gt;. Like &lt;code&gt;:Lazy load foo.nvim&lt;/code&gt;. Use &lt;code&gt;:Lazy! load&lt;/code&gt; to skip &lt;code&gt;cond&lt;/code&gt; checks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy log [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).log(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show recent updates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy profile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).profile()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show detailed profiling&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy reload {plugins}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).reload(opts)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reload a plugin (experimental!!)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy restore [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).restore(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Updates all plugins to the state in the lockfile. For a single plugin: restore it to the state in the lockfile or to a given commit under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy sync [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).sync(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run install, clean and update&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy update [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).update(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Update plugins. This will also update the lockfile&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- commands:end --&gt; &#xA;&lt;p&gt;Any command can have a &lt;strong&gt;bang&lt;/strong&gt; to make the command wait till it finished. For example, if you want to sync lazy from the cmdline, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ nvim --headless &#34;+Lazy! sync&#34; +qa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;opts&lt;/code&gt; is a table with the following key-values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;wait&lt;/strong&gt;: when true, then the call will wait till the operation completed&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;show&lt;/strong&gt;: when false, the UI will not be shown&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;plugins&lt;/strong&gt;: a list of plugin names to run the operation on&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;concurrency&lt;/strong&gt;: limit the &lt;code&gt;number&lt;/code&gt; of concurrently running tasks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Stats API (&lt;code&gt;require(&#34;lazy&#34;).stats()&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;!-- stats:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- startuptime in milliseconds till UIEnter&#xA;  startuptime = 0,&#xA;  -- when true, startuptime is the accurate cputime for the Neovim process. (Linux &amp;amp; Macos)&#xA;  -- this is more accurate than `nvim --startuptime`, and as such will be slightly higher&#xA;  -- when false, startuptime is calculated based on a delta with a timestamp when lazy started.&#xA;  real_cputime = false,&#xA;  count = 0, -- total number of plugins&#xA;  loaded = 0, -- number of loaded plugins&#xA;  ---@type table&amp;lt;string, number&amp;gt;&#xA;  times = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- stats:end --&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; provides a statusline component that you can use to show the number of pending updates. Make sure to enable &lt;code&gt;config.checker.enabled = true&lt;/code&gt; to make this work.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of configuring &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lualine&#34;).setup({&#xA;  sections = {&#xA;    lualine_x = {&#xA;      {&#xA;        require(&#34;lazy.status&#34;).updates,&#xA;        cond = require(&#34;lazy.status&#34;).has_updates,&#xA;        color = { fg = &#34;#ff9e64&#34; },&#xA;      },&#xA;    },&#xA;  },&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üìÜ User Events&lt;/h3&gt; &#xA;&lt;p&gt;The following user events will be triggered:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyDone&lt;/strong&gt;: when lazy has finished starting up and loaded your config&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazySync&lt;/strong&gt;: after running sync&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyInstall&lt;/strong&gt;: after an install&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyUpdate&lt;/strong&gt;: after an update&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyClean&lt;/strong&gt;: after a clean&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyCheck&lt;/strong&gt;: after checking for updates&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyLog&lt;/strong&gt;: after running log&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyLoad&lt;/strong&gt;: after loading a plugin. The &lt;code&gt;data&lt;/code&gt; attribute will contain the plugin name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazySyncPre&lt;/strong&gt;: before running sync&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyInstallPre&lt;/strong&gt;: before an install&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyUpdatePre&lt;/strong&gt;: before an update&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyCleanPre&lt;/strong&gt;: before a clean&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyCheckPre&lt;/strong&gt;: before checking for updates&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyLogPre&lt;/strong&gt;: before running log&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyReload&lt;/strong&gt;: triggered by change detection after reloading plugin specs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VeryLazy&lt;/strong&gt;: triggered after &lt;code&gt;LazyDone&lt;/code&gt; and processing &lt;code&gt;VimEnter&lt;/code&gt; auto commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyVimStarted&lt;/strong&gt;: triggered after &lt;code&gt;UIEnter&lt;/code&gt; when &lt;code&gt;require(&#34;lazy&#34;).stats().startuptime&lt;/code&gt; has been calculated. Useful to update the startuptime on your dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üîí Lockfile &lt;code&gt;lazy-lock.json&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;After every &lt;strong&gt;update&lt;/strong&gt;, the local lockfile is updated with the installed revisions. It is recommended to have this file under version control.&lt;/p&gt; &#xA;&lt;p&gt;If you use your Neovim config on multiple machines, using the lockfile, you can ensure that the same version of every plugin is installed.&lt;/p&gt; &#xA;&lt;p&gt;If you are on another machine, you can do &lt;code&gt;:Lazy restore&lt;/code&gt;, to update all your plugins to the version from the lockfile.&lt;/p&gt; &#xA;&lt;h2&gt;‚ö° Performance&lt;/h2&gt; &#xA;&lt;p&gt;Great care has been taken to make the startup code (&lt;code&gt;lazy.core&lt;/code&gt;) as efficient as possible. During startup, all Lua files used before &lt;code&gt;VimEnter&lt;/code&gt; or &lt;code&gt;BufReadPre&lt;/code&gt; are byte-compiled and cached, similar to what &lt;a href=&#34;https://github.com/lewis6991/impatient.nvim&#34;&gt;impatient.nvim&lt;/a&gt; does.&lt;/p&gt; &#xA;&lt;p&gt;My config for example loads in about &lt;code&gt;11ms&lt;/code&gt; with &lt;code&gt;93&lt;/code&gt; plugins. I do a lot of lazy-loading though :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; comes with an advanced profiler &lt;code&gt;:Lazy profile&lt;/code&gt; to help you improve performance. The profiling view shows you why and how long it took to load your plugins.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/208301766-5c400561-83c3-4811-9667-1ec4bb3c43b8.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üêõ Debug&lt;/h2&gt; &#xA;&lt;p&gt;See an overview of active lazy-loading handlers and what&#39;s in the module cache.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/208301790-7eedbfa5-d202-4e70-852e-de68aa47233b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ñ∂Ô∏è Startup Sequence&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; does &lt;strong&gt;NOT&lt;/strong&gt; use Neovim packages and even disables plugin loading completely (&lt;code&gt;vim.go.loadplugins = false&lt;/code&gt;). It takes over the complete startup sequence for more flexibility and better performance.&lt;/p&gt; &#xA;&lt;p&gt;In practice this means that step 10 of &lt;a href=&#34;https://neovim.io/doc/user/starting.html#initialization&#34;&gt;Neovim Initialization&lt;/a&gt; is done by Lazy:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;All the plugins&#39; &lt;code&gt;init()&lt;/code&gt; functions are executed&lt;/li&gt; &#xA; &lt;li&gt;All plugins with &lt;code&gt;lazy=false&lt;/code&gt; are loaded. This includes sourcing &lt;code&gt;/plugin&lt;/code&gt; and &lt;code&gt;/ftdetect&lt;/code&gt; files. (&lt;code&gt;/after&lt;/code&gt; will not be sourced yet)&lt;/li&gt; &#xA; &lt;li&gt;All files from &lt;code&gt;/plugin&lt;/code&gt; and &lt;code&gt;/ftdetect&lt;/code&gt; directories in you rtp are sourced (excluding &lt;code&gt;/after&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;All &lt;code&gt;/after/plugin&lt;/code&gt; files are sourced (this includes &lt;code&gt;/after&lt;/code&gt; from plugins)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Files from runtime directories are always sourced in alphabetical order.&lt;/p&gt; &#xA;&lt;h2&gt;üìÇ Structuring Your Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Some users may want to split their plugin specs in multiple files. Instead of passing a spec table to &lt;code&gt;setup()&lt;/code&gt;, you can use a Lua module. The specs from the &lt;strong&gt;module&lt;/strong&gt; and any top-level &lt;strong&gt;sub-modules&lt;/strong&gt; will be merged together in the final spec, so it is not needed to add &lt;code&gt;require&lt;/code&gt; calls in your main plugin file to the other files.&lt;/p&gt; &#xA;&lt;p&gt;The benefits of using this approach:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple to &lt;strong&gt;add&lt;/strong&gt; new plugin specs. Just create a new file in your plugins module.&lt;/li&gt; &#xA; &lt;li&gt;Allows for &lt;strong&gt;caching&lt;/strong&gt; of all your plugin specs. This becomes important if you have a lot of smaller plugin specs.&lt;/li&gt; &#xA; &lt;li&gt;Spec changes will automatically be &lt;strong&gt;reloaded&lt;/strong&gt; when they&#39;re updated, so the &lt;code&gt;:Lazy&lt;/code&gt; UI is always up to date.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup(&#34;plugins&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/nvim/lua/plugins.lua&lt;/code&gt; or &lt;code&gt;~/.config/nvim/lua/plugins/init.lua&lt;/code&gt; &lt;strong&gt;&lt;em&gt;(this file is optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;folke/neodev.nvim&#34;,&#xA;  &#34;folke/which-key.nvim&#34;,&#xA;  { &#34;folke/neoconf.nvim&#34;, cmd = &#34;Neoconf&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any lua file in &lt;code&gt;~/.config/nvim/lua/plugins/*.lua&lt;/code&gt; will be automatically merged in the main plugin spec&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a real-life example, you can check &lt;a href=&#34;https://github.com/LazyVim/LazyVim&#34;&gt;LazyVim&lt;/a&gt; and more specifically:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LazyVim/LazyVim/tree/main/lua/lazyvim/plugins&#34;&gt;lazyvim.plugins&lt;/a&gt; contains all the plugin specs that will be loaded&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;‚Ü©Ô∏è Importing Specs, &lt;code&gt;config&lt;/code&gt; &amp;amp; &lt;code&gt;opts&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;As part of a spec, you can add &lt;code&gt;import&lt;/code&gt; statements to import additional plugin modules. Both of the &lt;code&gt;setup()&lt;/code&gt; calls are equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup(&#34;plugins&#34;)&#xA;&#xA;-- Same as:&#xA;require(&#34;lazy&#34;).setup({{import = &#34;plugins&#34;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To import multiple modules from a plugin, add additional specs for each import. For example, to import LazyVim core plugins and an optional plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup({&#xA;  spec = {&#xA;    { &#34;LazyVim/LazyVim&#34;, import = &#34;lazyvim.plugins&#34; },&#xA;    { import = &#34;lazyvim.plugins.extras.coding.copilot&#34; },&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you import specs, you can override them by simply adding a spec for the same plugin to your local specs, adding any keys you want to override / merge.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;opts&lt;/code&gt;, &lt;code&gt;dependencies&lt;/code&gt;, &lt;code&gt;cmd&lt;/code&gt;, &lt;code&gt;event&lt;/code&gt;, &lt;code&gt;ft&lt;/code&gt; and &lt;code&gt;keys&lt;/code&gt; are always merged with the parent spec. Any other property will override the property from the parent spec.&lt;/p&gt; &#xA;&lt;h2&gt;üì¶ Migration Guide&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;setup&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;init&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;requires&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;dependencies&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;as&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opt&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lock&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;pin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disable=true&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;enabled = false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tag=&#39;*&#39;&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;version=&#34;*&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;after&lt;/code&gt; ‚ÑπÔ∏è &lt;strong&gt;&lt;em&gt;not needed&lt;/em&gt;&lt;/strong&gt; for most use-cases. Use &lt;code&gt;dependencies&lt;/code&gt; otherwise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wants&lt;/code&gt; ‚ÑπÔ∏è &lt;strong&gt;&lt;em&gt;not needed&lt;/em&gt;&lt;/strong&gt; for most use-cases. Use &lt;code&gt;dependencies&lt;/code&gt; otherwise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config&lt;/code&gt; don&#39;t support string type, use &lt;code&gt;fun(LazyPlugin)&lt;/code&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;module&lt;/code&gt; is auto-loaded. No need to specify&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keys&lt;/code&gt; spec is &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#%EF%B8%8F-lazy-key-mappings&#34;&gt;different&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtp&lt;/code&gt; can be accomplished with:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = function(plugin)&#xA;    vim.opt.rtp:append(plugin.dir .. &#34;/custom-rtp&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With packer &lt;code&gt;wants&lt;/code&gt;, &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; can be used to manage dependencies. With lazy, this isn&#39;t needed for most of the Lua dependencies. They can be installed just like normal plugins (even with &lt;code&gt;lazy=true&lt;/code&gt;) and will be loaded when other plugins need them. The &lt;code&gt;dependencies&lt;/code&gt; key can be used to group those required plugins with the one that requires them. The plugins which are added as &lt;code&gt;dependencies&lt;/code&gt; will always be lazy-loaded and loaded when the plugin is loaded.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/savq/paq-nvim&#34;&gt;paq-nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;as&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opt&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run&lt;/code&gt; ‚û°Ô∏è &lt;code&gt;build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ùå Uninstalling&lt;/h2&gt; &#xA;&lt;p&gt;To uninstall &lt;strong&gt;lazy.nvim&lt;/strong&gt;, you need to remove the following files and directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: &lt;code&gt;~/.local/share/nvim/lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;: &lt;code&gt;~/.local/state/nvim/lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lockfile&lt;/strong&gt;: &lt;code&gt;~/.config/nvim/lazy-lock.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Paths can differ if you changed &lt;code&gt;XDG&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üåà Highlight Groups&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see all highlight groups&lt;/summary&gt; &#xA; &lt;!-- colors:start --&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;    &lt;th&gt;Default Group&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyButton&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;CursorLine&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyButtonActive&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Visual&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyComment&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Comment&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyCommit&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@variable.builtin&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;commit ref&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyCommitIssue&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Number&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyCommitScope&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Italic&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;conventional commit scope&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyCommitType&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Title&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;conventional commit type&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyDimmed&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Conceal&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;property&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyDir&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@text.reference&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;directory&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyH1&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;IncSearch&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;home button&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyH2&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Bold&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;titles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyLocal&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Constant&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyNoCond&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;DiagnosticWarn&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;unloaded icon for a plugin where &lt;code&gt;cond()&lt;/code&gt; was false&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyNormal&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;NormalFloat&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyProgressDone&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Constant&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;progress bar done&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyProgressTodo&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;LineNr&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;progress bar todo&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyProp&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Conceal&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;property&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonCmd&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Operator&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonEvent&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Constant&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonFt&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Character&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonImport&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Identifier&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonKeys&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Statement&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonPlugin&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Special&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonRuntime&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@macro&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonSource&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Character&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonStart&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@field&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazySpecial&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@punctuation.special&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyTaskError&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;ErrorMsg&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;task errors&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyTaskOutput&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;MsgArea&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;task output&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyUrl&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@text.reference&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;url&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyValue&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@string&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;value of a property&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;!-- colors:end --&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üìö Plugin Authors&lt;/h2&gt; &#xA;&lt;p&gt;If your plugin needs a build step, you can create a file &lt;code&gt;build.lua&lt;/code&gt; or &lt;code&gt;build/init.lua&lt;/code&gt; in the root of your repo. This file will be loaded when the plugin is installed or updated.&lt;/p&gt; &#xA;&lt;p&gt;This makes it easier for users, so they no longer need to specify a &lt;code&gt;build&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;üì¶ Other Neovim Plugin Managers in Lua&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/savq/paq-nvim&#34;&gt;paq-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ii14/neopm&#34;&gt;neopm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chiyadev/dep&#34;&gt;dep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/notomo/optpack.nvim&#34;&gt;optpack.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rktjmp/pact.nvim&#34;&gt;pact.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>