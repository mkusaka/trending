<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-01T01:51:47Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xiaorouji/openwrt-passwall2</title>
    <updated>2025-07-01T01:51:47Z</updated>
    <id>tag:github.com,2025-07-01:/xiaorouji/openwrt-passwall2</id>
    <link href="https://github.com/xiaorouji/openwrt-passwall2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>tris203/precognition.nvim</title>
    <updated>2025-07-01T01:51:47Z</updated>
    <id>tag:github.com,2025-07-01:/tris203/precognition.nvim</id>
    <link href="https://github.com/tris203/precognition.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üí≠üëÄprecognition.nvim - Precognition uses virtual text and gutter signs to show available motions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üí≠üëÄprecognition.nvim&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;/ÀåpriÀêk…í…°Ààn…™ Én/ &lt;em&gt;noun&lt;/em&gt;&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;foreknowledge of an event, especially as a form of extrasensory perception.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;precognition.nvim&lt;/strong&gt; assists with discovering motions (Both vertical and horizontal) to navigate your current buffer&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/tris203/precognition.nvim/assets/18444302/6250954f-01c1-4343-8d89-0bdb84504c8d&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installation with any package manager, Lazy example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;return {&#xA;    &#34;tris203/precognition.nvim&#34;,&#xA;    --event = &#34;VeryLazy&#34;,&#xA;    opts = {&#xA;    -- startVisible = true,&#xA;    -- showBlankVirtLine = true,&#xA;    -- highlightColor = { link = &#34;Comment&#34; },&#xA;    -- hints = {&#xA;    --      Caret = { text = &#34;^&#34;, prio = 2 },&#xA;    --      Dollar = { text = &#34;$&#34;, prio = 1 },&#xA;    --      MatchingPair = { text = &#34;%&#34;, prio = 5 },&#xA;    --      Zero = { text = &#34;0&#34;, prio = 1 },&#xA;    --      w = { text = &#34;w&#34;, prio = 10 },&#xA;    --      b = { text = &#34;b&#34;, prio = 9 },&#xA;    --      e = { text = &#34;e&#34;, prio = 8 },&#xA;    --      W = { text = &#34;W&#34;, prio = 7 },&#xA;    --      B = { text = &#34;B&#34;, prio = 6 },&#xA;    --      E = { text = &#34;E&#34;, prio = 5 },&#xA;    -- },&#xA;    -- gutterHints = {&#xA;    --     G = { text = &#34;G&#34;, prio = 10 },&#xA;    --     gg = { text = &#34;gg&#34;, prio = 9 },&#xA;    --     PrevParagraph = { text = &#34;{&#34;, prio = 8 },&#xA;    --     NextParagraph = { text = &#34;}&#34;, prio = 8 },&#xA;    -- },&#xA;    -- disabled_fts = {&#xA;    --     &#34;startify&#34;,&#xA;    -- },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Config&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;hints&lt;/code&gt; can be hidden by setting their priority to 0. If you want to hide the entire virtual line, set all elements to &lt;code&gt;prio = 0&lt;/code&gt; in combination with the below.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;showBlankVirtLine = false&lt;/code&gt; Setting this option will mean that if a Virtual Line would be blank it won&#39;t be rendered&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;gutterHints&lt;/code&gt; can be hidden by setting their priority to 0.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;highlightColor&lt;/code&gt; can be set in two ways:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;As a table containing a link property pointing to an existing highlight group (see &lt;code&gt;:highlight&lt;/code&gt; for valid options).&lt;/li&gt; &#xA;   &lt;li&gt;As a table specifying custom highlight values, such as foreground and background colors. (&lt;a href=&#34;https://neovim.io/doc/user/api.html#nvim_set_hl()&#34;&gt;more info&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;disabled_fts&lt;/code&gt; can be used to disable &lt;code&gt;precognition&lt;/code&gt; on specific filetypes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hint priorities&lt;/h3&gt; &#xA;&lt;p&gt;Any hints that could appear in the same place as others should have unique priorities to avoid conflicts.&lt;/p&gt; &#xA;&lt;h2&gt;‚ùîUsage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;precognition&lt;/code&gt; can be controlled with the &lt;code&gt;Precognition&lt;/code&gt; user command, as well as programmatically via the Lua API.&lt;/p&gt; &#xA;&lt;h3&gt;Toggling&lt;/h3&gt; &#xA;&lt;p&gt;The hints can be toggled on and off with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Precognition toggle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;precognition&#34;).toggle()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The return value indicating the visible state can be used to produce a notification.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;if require(&#34;precognition&#34;).toggle() then&#xA;    vim.notify(&#34;precognition on&#34;)&#xA;else&#xA;    vim.notify(&#34;precognition off&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The subcommands and functions &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;hide&lt;/code&gt; are also available.&lt;/p&gt; &#xA;&lt;h3&gt;Peeking&lt;/h3&gt; &#xA;&lt;p&gt;The hints can be peeked, this means that the hint will be show until the next cursor movement.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Precognition peek&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;precognition&#34;).peek()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üíª Supported Versions&lt;/h2&gt; &#xA;&lt;p&gt;This plugin supports stable and nightly. &amp;gt;0.9 at the time of writing.&lt;/p&gt; &#xA;&lt;h2&gt;‚úçÔ∏è Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are what makes the open-source community such an amazing place to learn, inspire, and create. Any contributions you make are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a suggestion to improve the plugin, please open an issue first, fork the repo, and create a pull request.&lt;/p&gt; &#xA;&lt;p&gt;If you have found a bug please open an issue, and submit a pull request with a failing test if possible.&lt;/p&gt; &#xA;&lt;p&gt;If you‚Äôre interested in adding custom motions to Precognition, take a look at &lt;a href=&#34;https://github.com/tris203/precognition.nvim/raw/main/lua/precognition/motions/interface.lua&#34;&gt;interface.lua&lt;/a&gt; for the available integration points.&lt;/p&gt; &#xA;&lt;p&gt;More details on how to contribute can be found in CONTRIBUTING.md. Please read this prior to creating a pull request.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to give the project a star! Thanks again!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>greggh/claude-code.nvim</title>
    <updated>2025-07-01T01:51:47Z</updated>
    <id>tag:github.com,2025-07-01:/greggh/claude-code.nvim</id>
    <link href="https://github.com/greggh/claude-code.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Seamless integration between Claude Code AI assistant and Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Claude Code Neovim Plugin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/greggh/claude-code.nvim/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/greggh/claude-code.nvim?style=flat-square&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/greggh/claude-code.nvim?style=flat-square&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/greggh/claude-code.nvim?style=flat-square&#34; alt=&#34;GitHub Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/greggh/claude-code.nvim/ci.yml?branch=main&amp;amp;style=flat-square&amp;amp;logo=github&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim-0.7%2B-blueviolet?style=flat-square&amp;amp;logo=neovim&#34; alt=&#34;Neovim Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Tests-44%20passing-success?style=flat-square&amp;amp;logo=github-actions&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/releases/tag/v0.4.2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Version-0.4.2-blue?style=flat-square&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/greggh/claude-code.nvim?style=flat-square&amp;amp;logo=github&#34; alt=&#34;Discussions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A seamless integration between &lt;a href=&#34;https://github.com/anthropics/claude-code&#34;&gt;Claude Code&lt;/a&gt; AI assistant and Neovim&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#features&#34;&gt;Features&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#usage&#34;&gt;Usage&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#contributing&#34;&gt;Contributing&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/greggh/claude-code.nvim/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/greggh/claude-code.nvim/raw/main/assets/claude-code.png?raw=true&#34; alt=&#34;Claude Code in Neovim&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin was built entirely with Claude Code in a Neovim terminal, and then inside itself using Claude Code for everything!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üöÄ Toggle Claude Code in a terminal window with a single key press&lt;/li&gt; &#xA; &lt;li&gt;üß† Support for command-line arguments like &lt;code&gt;--continue&lt;/code&gt; and custom variants&lt;/li&gt; &#xA; &lt;li&gt;üîÑ Automatically detect and reload files modified by Claude Code&lt;/li&gt; &#xA; &lt;li&gt;‚ö° Real-time buffer updates when files are changed externally&lt;/li&gt; &#xA; &lt;li&gt;üì± Customizable window position and size&lt;/li&gt; &#xA; &lt;li&gt;ü§ñ Integration with which-key (if available)&lt;/li&gt; &#xA; &lt;li&gt;üìÇ Automatically uses git project root as working directory (when available)&lt;/li&gt; &#xA; &lt;li&gt;üß© Modular and maintainable code structure&lt;/li&gt; &#xA; &lt;li&gt;üìã Type annotations with LuaCATS for better IDE support&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Configuration validation to prevent errors&lt;/li&gt; &#xA; &lt;li&gt;üß™ Testing framework for reliability (44 comprehensive tests)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.7.0 or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anthropics/claude-code&#34;&gt;Claude Code CLI&lt;/a&gt; tool installed and available in your PATH&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt; (dependency for git operations)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for version history and updates.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;greggh/claude-code.nvim&#34;,&#xA;  dependencies = {&#xA;    &#34;nvim-lua/plenary.nvim&#34;, -- Required for git operations&#xA;  },&#xA;  config = function()&#xA;    require(&#34;claude-code&#34;).setup()&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;greggh/claude-code.nvim&#39;,&#xA;  requires = {&#xA;    &#39;nvim-lua/plenary.nvim&#39;, -- Required for git operations&#xA;  },&#xA;  config = function()&#xA;    require(&#39;claude-code&#39;).setup()&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;greggh/claude-code.nvim&#39;&#xA;&#34; After installing, add this to your init.vim:&#xA;&#34; lua require(&#39;claude-code&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The plugin can be configured by passing a table to the &lt;code&gt;setup&lt;/code&gt; function. Here&#39;s the default configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;claude-code&#34;).setup({&#xA;  -- Terminal window settings&#xA;  window = {&#xA;    split_ratio = 0.3,      -- Percentage of screen for the terminal window (height for horizontal, width for vertical splits)&#xA;    position = &#34;botright&#34;,  -- Position of the window: &#34;botright&#34;, &#34;topleft&#34;, &#34;vertical&#34;, &#34;rightbelow vsplit&#34;, etc.&#xA;    enter_insert = true,    -- Whether to enter insert mode when opening Claude Code&#xA;    hide_numbers = true,    -- Hide line numbers in the terminal window&#xA;    hide_signcolumn = true, -- Hide the sign column in the terminal window&#xA;  },&#xA;  -- File refresh settings&#xA;  refresh = {&#xA;    enable = true,           -- Enable file change detection&#xA;    updatetime = 100,        -- updatetime when Claude Code is active (milliseconds)&#xA;    timer_interval = 1000,   -- How often to check for file changes (milliseconds)&#xA;    show_notifications = true, -- Show notification when files are reloaded&#xA;  },&#xA;  -- Git project settings&#xA;  git = {&#xA;    use_git_root = true,     -- Set CWD to git root when opening Claude Code (if in git project)&#xA;  },&#xA;  -- Shell-specific settings&#xA;  shell = {&#xA;    separator = &#39;&amp;amp;&amp;amp;&#39;,        -- Command separator used in shell commands&#xA;    pushd_cmd = &#39;pushd&#39;,     -- Command to push directory onto stack (e.g., &#39;pushd&#39; for bash/zsh, &#39;enter&#39; for nushell)&#xA;    popd_cmd = &#39;popd&#39;,       -- Command to pop directory from stack (e.g., &#39;popd&#39; for bash/zsh, &#39;exit&#39; for nushell)&#xA;  },&#xA;  -- Command settings&#xA;  command = &#34;claude&#34;,        -- Command used to launch Claude Code&#xA;  -- Command variants&#xA;  command_variants = {&#xA;    -- Conversation management&#xA;    continue = &#34;--continue&#34;, -- Resume the most recent conversation&#xA;    resume = &#34;--resume&#34;,     -- Display an interactive conversation picker&#xA;&#xA;    -- Output options&#xA;    verbose = &#34;--verbose&#34;,   -- Enable verbose logging with full turn-by-turn output&#xA;  },&#xA;  -- Keymaps&#xA;  keymaps = {&#xA;    toggle = {&#xA;      normal = &#34;&amp;lt;C-,&amp;gt;&#34;,       -- Normal mode keymap for toggling Claude Code, false to disable&#xA;      terminal = &#34;&amp;lt;C-,&amp;gt;&#34;,     -- Terminal mode keymap for toggling Claude Code, false to disable&#xA;      variants = {&#xA;        continue = &#34;&amp;lt;leader&amp;gt;cC&#34;, -- Normal mode keymap for Claude Code with continue flag&#xA;        verbose = &#34;&amp;lt;leader&amp;gt;cV&#34;,  -- Normal mode keymap for Claude Code with verbose flag&#xA;      },&#xA;    },&#xA;    window_navigation = true, -- Enable window navigation keymaps (&amp;lt;C-h/j/k/l&amp;gt;)&#xA;    scrolling = true,         -- Enable scrolling keymaps (&amp;lt;C-f/b&amp;gt;) for page up/down&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; In your Vim/Neovim commands or init file:&#xA;:ClaudeCode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Or from Lua:&#xA;vim.cmd[[ClaudeCode]]&#xA;&#xA;-- Or map to a key:&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cc&#39;, &#39;&amp;lt;cmd&amp;gt;ClaudeCode&amp;lt;CR&amp;gt;&#39;, { desc = &#39;Toggle Claude Code&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;Basic command:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:ClaudeCode&lt;/code&gt; - Toggle the Claude Code terminal window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Conversation management commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:ClaudeCodeContinue&lt;/code&gt; - Resume the most recent conversation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ClaudeCodeResume&lt;/code&gt; - Display an interactive conversation picker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Output options command:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:ClaudeCodeVerbose&lt;/code&gt; - Enable verbose logging with full turn-by-turn output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Commands are automatically generated for each entry in your &lt;code&gt;command_variants&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Key Mappings&lt;/h3&gt; &#xA;&lt;p&gt;Default key mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ac&lt;/code&gt; - Toggle Claude Code terminal window (normal mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-,&amp;gt;&lt;/code&gt; - Toggle Claude Code terminal window (both normal and terminal modes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Variant mode mappings (if configured):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cC&lt;/code&gt; - Toggle Claude Code with --continue flag&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cV&lt;/code&gt; - Toggle Claude Code with --verbose flag&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, when in the Claude Code terminal:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-h&amp;gt;&lt;/code&gt; - Move to the window on the left&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt; - Move to the window below&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt; - Move to the window above&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt; - Move to the window on the right&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt; - Scroll full-page down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt; - Scroll full-page up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: After scrolling with &lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;, you&#39;ll need to press the &lt;code&gt;i&lt;/code&gt; key to re-enter insert mode so you can continue typing to Claude Code.&lt;/p&gt; &#xA;&lt;p&gt;When Claude Code modifies files that are open in Neovim, they&#39;ll be automatically reloaded.&lt;/p&gt; &#xA;&lt;h2&gt;How it Works&lt;/h2&gt; &#xA;&lt;p&gt;This plugin:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Creates a terminal buffer running the Claude Code CLI&lt;/li&gt; &#xA; &lt;li&gt;Sets up autocommands to detect file changes on disk&lt;/li&gt; &#xA; &lt;li&gt;Automatically reloads files when they&#39;re modified by Claude Code&lt;/li&gt; &#xA; &lt;li&gt;Provides convenient keymaps and commands for toggling the terminal&lt;/li&gt; &#xA; &lt;li&gt;Automatically detects git repositories and sets working directory to the git root&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please check out our &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for details on how to get started.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License - See &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;For a complete guide on setting up a development environment, installing all required tools, and understanding the project structure, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/DEVELOPMENT.md&#34;&gt;DEVELOPMENT.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Development Setup&lt;/h3&gt; &#xA;&lt;p&gt;The project includes comprehensive setup for development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complete installation instructions for all platforms in &lt;a href=&#34;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/DEVELOPMENT.md&#34;&gt;DEVELOPMENT.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pre-commit hooks for code quality&lt;/li&gt; &#xA; &lt;li&gt;Testing framework with 44 comprehensive tests&lt;/li&gt; &#xA; &lt;li&gt;Linting and formatting tools&lt;/li&gt; &#xA; &lt;li&gt;Weekly dependency updates workflow for Claude CLI and actions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run tests&#xA;make test&#xA;&#xA;# Check code quality&#xA;make lint&#xA;&#xA;# Set up pre-commit hooks&#xA;scripts/setup-hooks.sh&#xA;&#xA;# Format code&#xA;make format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greggh/claude-code.nvim/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; - Get help, share ideas, and connect with other users&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greggh/claude-code.nvim/issues&#34;&gt;GitHub Issues&lt;/a&gt; - Report bugs or suggest features&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greggh/claude-code.nvim/pulls&#34;&gt;GitHub Pull Requests&lt;/a&gt; - Contribute to the project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anthropics/claude-code&#34;&gt;Claude Code&lt;/a&gt; by Anthropic - This plugin was entirely built using Claude Code. Development cost: $5.42 with 17m 12.9s of API time&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;Plenary.nvim&lt;/a&gt; - Core dependency for testing framework and Git operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; - Versioning standard used in this project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt; - Code of Conduct standard&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://keepachangelog.com/&#34;&gt;Keep a Changelog&lt;/a&gt; - Changelog format&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://luals.github.io/wiki/annotations/&#34;&gt;LuaCATS&lt;/a&gt; - Type annotations for better IDE support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JohnnyMorganz/StyLua&#34;&gt;StyLua&lt;/a&gt; - Lua code formatter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lunarmodules/luacheck&#34;&gt;Luacheck&lt;/a&gt; - Lua static analyzer and linter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Made with ‚ù§Ô∏è by &lt;a href=&#34;https://github.com/greggh&#34;&gt;Gregg Housh&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>