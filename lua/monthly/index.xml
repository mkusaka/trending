<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-01T02:04:38Z</updated>
  <subtitle>Monthly Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stevearc/conform.nvim</title>
    <updated>2023-11-01T02:04:38Z</updated>
    <id>tag:github.com,2023-11-01:/stevearc/conform.nvim</id>
    <link href="https://github.com/stevearc/conform.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight yet powerful formatter plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;conform.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Lightweight yet powerful formatter plugin for Neovim&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatters&#34;&gt;Formatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#customizing-formatters&#34;&gt;Customizing formatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#recipes&#34;&gt;Recipes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#advanced-topics&#34;&gt;Advanced topics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatopts-callback&#34;&gt;format(opts, callback)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#list_formattersbufnr&#34;&gt;list_formatters(bufnr)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#list_all_formatters&#34;&gt;list_all_formatters()&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#get_formatter_infoformatter-bufnr&#34;&gt;get_formatter_info(formatter, bufnr)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#will_fallback_lspoptions&#34;&gt;will_fallback_lsp(options)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.8+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preserves extmarks and folds&lt;/strong&gt; - Most formatters replace the entire buffer, which clobbers extmarks and folds, and can cause the viewport and cursor to jump unexpectedly. Conform calculates minimal diffs and applies them using the built-in LSP format utilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fixes bad-behaving LSP formatters&lt;/strong&gt; - Some LSP servers are lazy and simply replace the entire buffer, leading to the problems mentioned above. Conform hooks into the LSP handler and turns these responses into proper piecewise changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enables range formatting for all formatters&lt;/strong&gt; - Since conform calculates minimal diffs, it can perform range formatting &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#range-formatting&#34;&gt;even if the underlying formatter doesn&#39;t support it.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple API&lt;/strong&gt; - Conform exposes a simple, imperative API modeled after &lt;code&gt;vim.lsp.buf.format()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Formats embedded code blocks&lt;/strong&gt; - Can format code blocks inside markdown files or similar (see &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#injected-language-formatting-code-blocks&#34;&gt;injected language formatting&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;conform.nvim supports all the usual plugin managers&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lazy.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;stevearc/conform.nvim&#39;,&#xA;  opts = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For a more thorough configuration involving lazy-loading, see &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#lazy-loading-with-lazynvim&#34;&gt;Lazy loading with lazy.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;packer&#34;).startup(function()&#xA;  use({&#xA;    &#34;stevearc/conform.nvim&#34;,&#xA;    config = function()&#xA;      require(&#34;conform&#34;).setup()&#xA;    end,&#xA;  })&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Paq&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;paq&#34;)({&#xA;  { &#34;stevearc/conform.nvim&#34; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;stevearc/conform.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dein&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;stevearc/conform.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pathogen&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/conform.nvim.git ~/.vim/bundle/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/conform.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/conform/start/conform.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;At a minimum, you will need to set up some formatters by filetype&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).setup({&#xA;  formatters_by_ft = {&#xA;    lua = { &#34;stylua&#34; },&#xA;    -- Conform will run multiple formatters sequentially&#xA;    python = { &#34;isort&#34;, &#34;black&#34; },&#xA;    -- Use a sub-list to run only the first available formatter&#xA;    javascript = { { &#34;prettierd&#34;, &#34;prettier&#34; } },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use &lt;code&gt;conform.format()&lt;/code&gt; just like you would &lt;code&gt;vim.lsp.buf.format()&lt;/code&gt;. For example, to format on save:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#34;BufWritePre&#34;, {&#xA;  pattern = &#34;*&#34;,&#xA;  callback = function(args)&#xA;    require(&#34;conform&#34;).format({ bufnr = args.buf })&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a shortcut, conform will optionally set up this format-on-save autocmd for you&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).setup({&#xA;  format_on_save = {&#xA;    -- These options will be passed to conform.format()&#xA;    timeout_ms = 500,&#xA;    lsp_fallback = true,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatopts-callback&#34;&gt;conform.format()&lt;/a&gt; for more details about the parameters.&lt;/p&gt; &#xA;&lt;p&gt;Conform also provides a formatexpr, same as the LSP client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.o.formatexpr = &#34;v:lua.require&#39;conform&#39;.formatexpr()&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view configured and available formatters, as well as to see the log file, run &lt;code&gt;:ConformInfo&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Formatters&lt;/h2&gt; &#xA;&lt;p&gt;You can view this list in vim with &lt;code&gt;:help conform-formatters&lt;/code&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand to see all formatters&lt;/summary&gt; &#xA; &lt;!-- FORMATTERS --&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://kamadorueda.com/alejandra/&#34;&gt;alejandra&lt;/a&gt; - The Uncompromising Nix Code Formatter.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://astyle.sourceforge.net/astyle.html&#34;&gt;astyle&lt;/a&gt; - A Free, Fast, and Small Automatic Formatter for C, C++, C++/CLI, Objective-C, C#, and Java Source Code.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/PyCQA/autoflake&#34;&gt;autoflake&lt;/a&gt; - Removes unused imports and unused variables as reported by pyflakes.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/hhatto/autopep8&#34;&gt;autopep8&lt;/a&gt; - A tool that automatically formats Python code to conform to the PEP 8 style guide.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/lovesegfault/beautysh&#34;&gt;beautysh&lt;/a&gt; - A Bash beautifier for the masses.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/FlamingTempura/bibtex-tidy&#34;&gt;bibtex-tidy&lt;/a&gt; - Cleaner and Formatter for BibTeX files.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/biomejs/biome&#34;&gt;biome&lt;/a&gt; - A toolchain for web projects, aimed to provide functionalities to maintain them.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/psf/black&#34;&gt;black&lt;/a&gt; - The uncompromising Python code formatter.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/shufo/blade-formatter&#34;&gt;blade-formatter&lt;/a&gt; - An opinionated blade template formatter for Laravel that respects readability.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/grantjenks/blue&#34;&gt;blue&lt;/a&gt; - The slightly less uncompromising Python code formatter.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://buf.build/docs/reference/cli/buf/format&#34;&gt;buf&lt;/a&gt; - A new way of working with Protocol Buffers.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/process/clang-format.html&#34;&gt;clang_format&lt;/a&gt; - Tool to format C/C++/… code according to a set of rules and heuristics.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/greglook/cljstyle&#34;&gt;cljstyle&lt;/a&gt; - Formatter for Clojure code.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/cheshirekow/cmake_format&#34;&gt;cmake_format&lt;/a&gt; - Parse cmake listfiles and format them nicely.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/codespell-project/codespell&#34;&gt;codespell&lt;/a&gt; - Check code for common misspellings.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/belav/csharpier&#34;&gt;csharpier&lt;/a&gt; - The opinionated C# code formatter&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/akaihola/darker&#34;&gt;darker&lt;/a&gt; - Run black only on changed lines.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/dart-format&#34;&gt;dart_format&lt;/a&gt; - Replace the whitespace in your program with formatting that follows Dart guidelines.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://deno.land/manual/tools/formatter&#34;&gt;deno_fmt&lt;/a&gt; - Use &lt;a href=&#34;https://deno.land/&#34;&gt;Deno&lt;/a&gt; to format TypeScript, JavaScript/JSON and markdown.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/dlang-community/dfmt&#34;&gt;dfmt&lt;/a&gt; - Formatter for D source code.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Riverside-Healthcare/djLint&#34;&gt;djlint&lt;/a&gt; - ✨ HTML Template Linter and Formatter. Django - Jinja - Nunjucks - Handlebars - GoLang.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/dprint/dprint&#34;&gt;dprint&lt;/a&gt; - Pluggable and configurable code formatting platform written in Rust.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/easy-coding-standard/easy-coding-standard&#34;&gt;easy-coding-standard&lt;/a&gt; - ecs - Use Coding Standard with 0-knowledge of PHP-CS-Fixer and PHP_CodeSniffer.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/avh4/elm-format&#34;&gt;elm_format&lt;/a&gt; - elm-format formats Elm source code according to a standard set of rules based on the official &lt;a href=&#34;https://elm-lang.org/docs/style-guide&#34;&gt;Elm Style Guide&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/nebulab/erb-formatter&#34;&gt;erb_format&lt;/a&gt; - Format ERB files with speed and precision.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/mantoni/eslint_d.js/&#34;&gt;eslint_d&lt;/a&gt; - Like ESLint, but faster.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://fishshell.com/docs/current/cmds/fish_indent.html&#34;&gt;fish_indent&lt;/a&gt; - Indent or otherwise prettify a piece of fish code.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/rhysd/fixjson&#34;&gt;fixjson&lt;/a&gt; - JSON Fixer for Humans using (relaxed) JSON5.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/daixiang0/gci&#34;&gt;gci&lt;/a&gt; - GCI, a tool that controls Go package import order and makes it always deterministic.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Scony/godot-gdscript-toolkit&#34;&gt;gdformat&lt;/a&gt; - A formatter for Godot&#39;s gdscript.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://gn.googlesource.com/gn/&#34;&gt;gn&lt;/a&gt; - gn build system&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/cmd/gofmt&#34;&gt;gofmt&lt;/a&gt; - Formats go programs.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/mvdan/gofumpt&#34;&gt;gofumpt&lt;/a&gt; - Enforce a stricter format than gofmt, while being backwards compatible. That is, gofumpt is happy with a subset of the formats that gofmt is happy with.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/cmd/goimports&#34;&gt;goimports&lt;/a&gt; - Updates your Go import lines, adding missing ones and removing unreferenced ones.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/incu6us/goimports-reviser&#34;&gt;goimports-reviser&lt;/a&gt; - Right imports sorting &amp;amp; code formatting tool (goimports alternative).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/segmentio/golines&#34;&gt;golines&lt;/a&gt; - A golang formatter that fixes long lines.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/google/google-java-format&#34;&gt;google-java-format&lt;/a&gt; - Reformats Java source code according to Google Java Style.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/threedaymonk/htmlbeautifier&#34;&gt;htmlbeautifier&lt;/a&gt; - A normaliser/beautifier for HTML that also understands embedded Ruby. Ideal for tidying up Rails templates.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/indent/&#34;&gt;indent&lt;/a&gt; - GNU Indent.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#injected-language-formatting-code-blocks&#34;&gt;injected&lt;/a&gt; - Format treesitter injected languages.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/PyCQA/isort&#34;&gt;isort&lt;/a&gt; - Python utility / library to sort imports alphabetically and automatically separate them into sections and by type.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/stedolan/jq&#34;&gt;jq&lt;/a&gt; - Command-line JSON processor.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/casey/just&#34;&gt;just&lt;/a&gt; - Format Justfile.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://ktlint.github.io/&#34;&gt;ktlint&lt;/a&gt; - An anti-bikeshedding Kotlin linter with built-in formatter.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/cmhughes/latexindent.pl&#34;&gt;latexindent&lt;/a&gt; - A perl script for formatting LaTeX files that is generally included in major TeX distributions.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/jonschlinkert/markdown-toc&#34;&gt;markdown-toc&lt;/a&gt; - API and CLI for generating a markdown TOC (table of contents) for a README or any markdown files.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/DavidAnson/markdownlint&#34;&gt;markdownlint&lt;/a&gt; - A Node.js style checker and lint tool for Markdown/CommonMark files.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/DavidAnson/markdownlint-cli2&#34;&gt;markdownlint-cli2&lt;/a&gt; - A fast, flexible, configuration-based command-line interface for linting Markdown/CommonMark files with the markdownlint library&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/executablebooks/mdformat&#34;&gt;mdformat&lt;/a&gt; - An opinionated Markdown formatter.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/mix/main/Mix.Tasks.Format.html&#34;&gt;mix&lt;/a&gt; - Format Elixir files using the mix format command.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/serokell/nixfmt&#34;&gt;nixfmt&lt;/a&gt; - nixfmt is a formatter for Nix code, intended to apply a uniform style.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/nix-community/nixpkgs-fmt&#34;&gt;nixpkgs_fmt&lt;/a&gt; - nixpkgs-fmt is a Nix code formatter for nixpkgs.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ocaml-ppx/ocamlformat&#34;&gt;ocamlformat&lt;/a&gt; - Auto-formatter for OCaml code.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/perl-ide/App-perlimports&#34;&gt;perlimports&lt;/a&gt; - Make implicit Perl imports explicit.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/perltidy/perltidy&#34;&gt;perltidy&lt;/a&gt; - Perl::Tidy, a source code formatter for Perl.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/darold/pgFormatter&#34;&gt;pg_format&lt;/a&gt; - PostgreSQL SQL syntax beautifier.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/PHP-CS-Fixer/PHP-CS-Fixer&#34;&gt;php_cs_fixer&lt;/a&gt; - The PHP Coding Standards Fixer.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://phpqa.io/projects/phpcbf.html&#34;&gt;phpcbf&lt;/a&gt; - PHP Code Beautifier and Fixer fixes violations of a defined coding standard.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/laravel/pint&#34;&gt;pint&lt;/a&gt; - Laravel Pint is an opinionated PHP code style fixer for minimalists.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;prettier&lt;/a&gt; - Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/fsouza/prettierd&#34;&gt;prettierd&lt;/a&gt; - prettier, as a daemon, for ludicrous formatting speed.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/lkrms/pretty-php&#34;&gt;pretty-php&lt;/a&gt; - The opinionated PHP code formatter&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/puppetlabs/puppet-lint&#34;&gt;puppet-lint&lt;/a&gt; - Check that your Puppet manifests conform to the style guide.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;rubocop&lt;/a&gt; - Ruby static code analyzer and formatter, based on the community Ruby style guide.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/fables-tales/rubyfmt&#34;&gt;rubyfmt&lt;/a&gt; - Ruby Autoformatter! (Written in Rust)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://beta.ruff.rs/docs/&#34;&gt;ruff_fix&lt;/a&gt; - An extremely fast Python linter, written in Rust. Fix lint errors.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://beta.ruff.rs/docs/&#34;&gt;ruff_format&lt;/a&gt; - An extremely fast Python linter, written in Rust. Formatter subcommand.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ruby-formatter/rufo&#34;&gt;rufo&lt;/a&gt; - Rufo is as an opinionated ruby formatter.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rustfmt&#34;&gt;rustfmt&lt;/a&gt; - A tool for formatting rust code according to style guidelines.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/avencera/rustywind&#34;&gt;rustywind&lt;/a&gt; - A tool for formatting Tailwind CSS classes.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/scalameta/scalafmt&#34;&gt;scalafmt&lt;/a&gt; - Code formatter for Scala.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;shellcheck&lt;/a&gt; - A static analysis tool for shell scripts.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/anordal/shellharden&#34;&gt;shellharden&lt;/a&gt; - The corrective bash syntax highlighter.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt; - A shell parser, formatter, and interpreter with &lt;code&gt;bash&lt;/code&gt; support.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/sql-formatter-org/sql-formatter&#34;&gt;sql_formatter&lt;/a&gt; - A whitespace formatter for different query languages.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/coreutils/manual/html_node/cat-invocation.html#cat-invocation&#34;&gt;squeeze_blanks&lt;/a&gt; - Squeeze repeated blank lines into a single blank line via &lt;code&gt;cat -s&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://standardjs.com&#34;&gt;standardjs&lt;/a&gt; - JavaScript Standard style guide, linter, and formatter.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/standardrb/standard&#34;&gt;standardrb&lt;/a&gt; - Ruby&#39;s bikeshed-proof linter and formatter.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/stylelint/stylelint&#34;&gt;stylelint&lt;/a&gt; - A mighty CSS linter that helps you avoid errors and enforce conventions.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/JohnnyMorganz/StyLua&#34;&gt;stylua&lt;/a&gt; - An opinionated code formatter for Lua.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-format&#34;&gt;swift_format&lt;/a&gt; - Swift formatter from apple. Requires building from source with &lt;code&gt;swift build&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;swiftformat&lt;/a&gt; - SwiftFormat is a code library and command-line tool for reformatting &lt;code&gt;swift&lt;/code&gt; code on macOS or Linux.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/tamasfe/taplo&#34;&gt;taplo&lt;/a&gt; - A TOML toolkit written in Rust.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://templ.guide/commands-and-tools/cli/#formatting-templ-files&#34;&gt;templ&lt;/a&gt; - Formats templ template files.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.terraform.io/docs/cli/commands/fmt.html&#34;&gt;terraform_fmt&lt;/a&gt; - The terraform-fmt command rewrites &lt;code&gt;terraform&lt;/code&gt; configuration files to a canonical format and style.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/tighten/tlint&#34;&gt;tlint&lt;/a&gt; - Tighten linter for Laravel conventions with support for auto-formatting.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/gawk/manual/gawk.html&#34;&gt;trim_newlines&lt;/a&gt; - Trim new lines with awk.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/gawk/manual/gawk.html&#34;&gt;trim_whitespace&lt;/a&gt; - Trim whitespaces with awk.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/uncrustify/uncrustify&#34;&gt;uncrustify&lt;/a&gt; - A source code beautifier for C, C++, C#, ObjectiveC, D, Java, Pawn and Vala.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/usort&#34;&gt;usort&lt;/a&gt; - Safe, minimal import sorting for Python projects.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/pamoller/xmlformatter&#34;&gt;xmlformat&lt;/a&gt; - xmlformatter is an Open Source Python package, which provides formatting of XML documents.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/lyz-code/yamlfix&#34;&gt;yamlfix&lt;/a&gt; - A configurable YAML formatter that keeps comments.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/google/yamlfmt&#34;&gt;yamlfmt&lt;/a&gt; - yamlfmt is an extensible command line tool or library to format yaml files.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/google/yapf&#34;&gt;yapf&lt;/a&gt; - Yet Another Python Formatter.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ziglang/zig&#34;&gt;zigfmt&lt;/a&gt; - Reformat Zig source into canonical form.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/kkinnear/zprint&#34;&gt;zprint&lt;/a&gt; - Formatter for Clojure and EDN.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;!-- /FORMATTERS --&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Customizing formatters&lt;/h2&gt; &#xA;&lt;p&gt;You can override/add to the default values of formatters&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).setup({&#xA;  formatters = {&#xA;    yamlfix = {&#xA;      -- Change where to find the command&#xA;      command = &#34;local/path/yamlfix&#34;,&#xA;      -- Adds environment args to the yamlfix formatter&#xA;      env = {&#xA;        YAMLFIX_SEQUENCE_STYLE = &#34;block_style&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;})&#xA;&#xA;-- These can also be set directly&#xA;require(&#34;conform&#34;).formatters.yamlfix = {&#xA;  env = {&#xA;    YAMLFIX_SEQUENCE_STYLE = &#34;block_style&#34;,&#xA;  },&#xA;}&#xA;&#xA;-- This can also be a function that returns the config,&#xA;-- which can be useful if you&#39;re doing lazy loading&#xA;require(&#34;conform&#34;).formatters.yamlfix = function(bufnr)&#xA;  return {&#xA;    command = require(&#34;conform.util&#34;).find_executable({&#xA;      &#34;local/path/yamlfix&#34;,&#xA;    }, &#34;yamlfix&#34;),&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to being able to override any of the original properties on the formatter, there is another property for easily adding additional arguments to the format command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).formatters.shfmt = {&#xA;  prepend_args = { &#34;-i&#34;, &#34;2&#34; },&#xA;  -- The base args are { &#34;-filename&#34;, &#34;$FILENAME&#34; } so the final args will be&#xA;  -- { &#34;-i&#34;, &#34;2&#34;, &#34;-filename&#34;, &#34;$FILENAME&#34; }&#xA;}&#xA;-- prepend_args can be a function, just like args&#xA;require(&#34;conform&#34;).formatters.shfmt = {&#xA;  prepend_args = function(ctx)&#xA;    return { &#34;-i&#34;, &#34;2&#34; }&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to overwrite the entire formatter definition and &lt;em&gt;not&lt;/em&gt; merge with the default values, pass &lt;code&gt;inherit = false&lt;/code&gt;. This is also the default behavior if there is no built-in formatter with the given name, which can be used to add your own custom formatters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).formatters.shfmt = {&#xA;  inherit = false,&#xA;  command = &#34;shfmt&#34;,&#xA;  args = { &#34;-i&#34;, &#34;2&#34;, &#34;-filename&#34;, &#34;$FILENAME&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recipes&lt;/h2&gt; &#xA;&lt;!-- RECIPES --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#format-command&#34;&gt;Format command&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#autoformat-with-extra-features&#34;&gt;Autoformat with extra features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#command-to-toggle-format-on-save&#34;&gt;Command to toggle format-on-save&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#automatically-run-slow-formatters-async&#34;&gt;Automatically run slow formatters async&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/recipes.md#lazy-loading-with-lazynvim&#34;&gt;Lazy loading with lazy.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /RECIPES --&gt; &#xA;&lt;h2&gt;Advanced topics&lt;/h2&gt; &#xA;&lt;!-- ADVANCED --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#minimal-format-diffs&#34;&gt;Minimal format diffs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#range-formatting&#34;&gt;Range formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/doc/advanced_topics.md#injected-language-formatting-code-blocks&#34;&gt;Injected language formatting (code blocks)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /ADVANCED --&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;A complete list of all configuration options&lt;/p&gt; &#xA;&lt;!-- OPTIONS --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).setup({&#xA;  -- Map of filetype to formatters&#xA;  formatters_by_ft = {&#xA;    lua = { &#34;stylua&#34; },&#xA;    -- Conform will run multiple formatters sequentially&#xA;    python = { &#34;isort&#34;, &#34;black&#34; },&#xA;    -- Use a sub-list to run only the first available formatter&#xA;    javascript = { { &#34;prettierd&#34;, &#34;prettier&#34; } },&#xA;    -- Use the &#34;*&#34; filetype to run formatters on all filetypes.&#xA;    [&#34;*&#34;] = { &#34;codespell&#34; },&#xA;    -- Use the &#34;_&#34; filetype to run formatters on filetypes that don&#39;t&#xA;    -- have other formatters configured.&#xA;    [&#34;_&#34;] = { &#34;trim_whitespace&#34; },&#xA;  },&#xA;  -- If this is set, Conform will run the formatter on save.&#xA;  -- It will pass the table to conform.format().&#xA;  -- This can also be a function that returns the table.&#xA;  format_on_save = {&#xA;    -- I recommend these options. See :help conform.format for details.&#xA;    lsp_fallback = true,&#xA;    timeout_ms = 500,&#xA;  },&#xA;  -- If this is set, Conform will run the formatter asynchronously after save.&#xA;  -- It will pass the table to conform.format().&#xA;  -- This can also be a function that returns the table.&#xA;  format_after_save = {&#xA;    lsp_fallback = true,&#xA;  },&#xA;  -- Set the log level. Use `:ConformInfo` to see the location of the log file.&#xA;  log_level = vim.log.levels.ERROR,&#xA;  -- Conform will notify you when a formatter errors&#xA;  notify_on_error = true,&#xA;  -- Custom formatters and changes to built-in formatters&#xA;  formatters = {&#xA;    my_formatter = {&#xA;      -- This can be a string or a function that returns a string.&#xA;      -- When defining a new formatter, this is the only field that is *required*&#xA;      command = &#34;my_cmd&#34;,&#xA;      -- A list of strings, or a function that returns a list of strings&#xA;      -- Return a single string instead of a list to run the command in a shell&#xA;      args = { &#34;--stdin-from-filename&#34;, &#34;$FILENAME&#34; },&#xA;      -- If the formatter supports range formatting, create the range arguments here&#xA;      range_args = function(ctx)&#xA;        return { &#34;--line-start&#34;, ctx.range.start[1], &#34;--line-end&#34;, ctx.range[&#34;end&#34;][1] }&#xA;      end,&#xA;      -- Send file contents to stdin, read new contents from stdout (default true)&#xA;      -- When false, will create a temp file (will appear in &#34;$FILENAME&#34; args). The temp&#xA;      -- file is assumed to be modified in-place by the format command.&#xA;      stdin = true,&#xA;      -- A function that calculates the directory to run the command in&#xA;      cwd = require(&#34;conform.util&#34;).root_file({ &#34;.editorconfig&#34;, &#34;package.json&#34; }),&#xA;      -- When cwd is not found, don&#39;t run the formatter (default false)&#xA;      require_cwd = true,&#xA;      -- When returns false, the formatter will not be used&#xA;      condition = function(ctx)&#xA;        return vim.fs.basename(ctx.filename) ~= &#34;README.md&#34;&#xA;      end,&#xA;      -- Exit codes that indicate success (default { 0 })&#xA;      exit_codes = { 0, 1 },&#xA;      -- Environment variables. This can also be a function that returns a table.&#xA;      env = {&#xA;        VAR = &#34;value&#34;,&#xA;      },&#xA;      -- Set to false to disable merging the config with the base definition&#xA;      inherit = true,&#xA;      -- When inherit = true, add these additional arguments to the command.&#xA;      -- This can also be a function, like args&#xA;      prepend_args = { &#34;--use-tabs&#34; },&#xA;    },&#xA;    -- These can also be a function that returns the formatter&#xA;    other_formatter = function(bufnr)&#xA;      return {&#xA;        command = &#34;my_cmd&#34;,&#xA;      }&#xA;    end,&#xA;  },&#xA;})&#xA;&#xA;-- You can set formatters_by_ft and formatters directly&#xA;require(&#34;conform&#34;).formatters_by_ft.lua = { &#34;stylua&#34; }&#xA;require(&#34;conform&#34;).formatters.my_formatter = {&#xA;  command = &#34;my_cmd&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- /OPTIONS --&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;!-- API --&gt; &#xA;&lt;h3&gt;format(opts, callback)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;format(opts, callback): boolean&lt;/code&gt; &lt;br&gt; Format a buffer&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;timeout_ms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Time in milliseconds to block for formatting. Defaults to 1000. No effect if async = true.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bufnr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Format this buffer (default 0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;async&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If true the method won&#39;t block. Defaults to false. If the buffer is modified before the formatter completes, the formatting will be discarded.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;formatters&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List of formatters to run. Defaults to all formatters for the buffer filetype.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lsp_fallback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|boolean|&#34;always&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Attempt LSP formatting if no formatters are available. Defaults to false. If &#34;always&#34;, will attempt LSP formatting even if formatters are available.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;quiet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Don&#39;t show any notifications for warnings or failures. Defaults to false.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;range&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Range to format. Table must contain &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; keys with {row, col} tuples using (1,0) indexing. Defaults to current selection in visual mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Passed to vim.lsp.buf.format when lsp_fallback = true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Passed to vim.lsp.buf.format when lsp_fallback = true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;filter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|fun(client: table): boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Passed to vim.lsp.buf.format when lsp_fallback = true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;callback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|fun(err: nil|string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called once formatting has completed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Returns:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;True if any formatters were attempted&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;list_formatters(bufnr)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;list_formatters(bufnr): conform.FormatterInfo[]&lt;/code&gt; &lt;br&gt; Retrieve the available formatters for a buffer&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bufnr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;list_all_formatters()&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;list_all_formatters(): conform.FormatterInfo[]&lt;/code&gt; &lt;br&gt; List information about all filetype-configured formatters&lt;/p&gt; &#xA;&lt;h3&gt;get_formatter_info(formatter, bufnr)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;get_formatter_info(formatter, bufnr): conform.FormatterInfo&lt;/code&gt; &lt;br&gt; Get information about a formatter (including availability)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;formatter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The name of the formatter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bufnr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;will_fallback_lsp(options)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;will_fallback_lsp(options): boolean&lt;/code&gt; &lt;br&gt; Check if the buffer will use LSP formatting when lsp_fallback = true&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;options&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Options passed to vim.lsp.buf.format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- /API --&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;nvim-lint&lt;/a&gt; for providing inspiration for the config and API. It&#39;s an excellent plugin that balances power and simplicity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;null-ls&lt;/a&gt; for formatter configurations and being my formatter/linter of choice for a long time.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>folke/zen-mode.nvim</title>
    <updated>2023-11-01T02:04:38Z</updated>
    <id>tag:github.com,2023-11-01:/folke/zen-mode.nvim</id>
    <link href="https://github.com/folke/zen-mode.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🧘 Distraction-free coding for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🧘 Zen Mode&lt;/h1&gt; &#xA;&lt;p&gt;Distraction-free coding for Neovim &amp;gt;= 0.5&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/118454007-b7d8c900-b6ac-11eb-8263-015a8d929644.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;opens the current buffer in a new full-screen floating window&lt;/li&gt; &#xA; &lt;li&gt;doesn&#39;t mess with existing window layouts / splits&lt;/li&gt; &#xA; &lt;li&gt;works correctly with other floating windows, like LSP hover, WhichKey, ...&lt;/li&gt; &#xA; &lt;li&gt;you can dynamically change the window size&lt;/li&gt; &#xA; &lt;li&gt;realigns when the editor or Zen window is resized&lt;/li&gt; &#xA; &lt;li&gt;optionally shade the backdrop of the Zen window&lt;/li&gt; &#xA; &lt;li&gt;always hides the status line&lt;/li&gt; &#xA; &lt;li&gt;optionally hide the number column, sign column, fold column, ...&lt;/li&gt; &#xA; &lt;li&gt;highly customizable with lua callbacks &lt;code&gt;on_open&lt;/code&gt;, &lt;code&gt;on_close&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;plugins: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;disable gitsigns&lt;/li&gt; &#xA;   &lt;li&gt;hide &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;tmux&lt;/a&gt; status line&lt;/li&gt; &#xA;   &lt;li&gt;increase &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;Kitty&lt;/a&gt; font-size&lt;/li&gt; &#xA;   &lt;li&gt;increase &lt;a href=&#34;https://alacritty.org/&#34;&gt;Alacritty&lt;/a&gt; font-size&lt;/li&gt; &#xA;   &lt;li&gt;increase &lt;a href=&#34;https://wezfurlong.org/wezterm/&#34;&gt;wezterm&lt;/a&gt; font-size&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zen Mode&lt;/strong&gt; is automatically closed when a new non-floating window is opened&lt;/li&gt; &#xA; &lt;li&gt;works well with plugins like &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt; to open a new buffer inside the Zen window&lt;/li&gt; &#xA; &lt;li&gt;close the Zen window with &lt;code&gt;:ZenMode&lt;/code&gt;, &lt;code&gt;:close&lt;/code&gt; or &lt;code&gt;:quit&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;❗ &lt;strong&gt;Zen Mode&lt;/strong&gt; uses the new &lt;code&gt;z-index&lt;/code&gt; option for floating windows&lt;/li&gt; &#xA;   &lt;li&gt;❗ only builds &lt;strong&gt;newer than May 15, 2021&lt;/strong&gt; are supported&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/twilight.nvim&#34;&gt;Twilight&lt;/a&gt; is optional to dim inactive portions of your code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;{&#xA;  &#34;folke/zen-mode.nvim&#34;,&#xA;  opts = {&#xA;    -- your configuration comes here&#xA;    -- or leave it empty to use the default settings&#xA;    -- refer to the configuration section below&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zen Mode&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  window = {&#xA;    backdrop = 0.95, -- shade the backdrop of the Zen window. Set to 1 to keep the same as Normal&#xA;    -- height and width can be:&#xA;    -- * an absolute number of cells when &amp;gt; 1&#xA;    -- * a percentage of the width / height of the editor when &amp;lt;= 1&#xA;    -- * a function that returns the width or the height&#xA;    width = 120, -- width of the Zen window&#xA;    height = 1, -- height of the Zen window&#xA;    -- by default, no options are changed for the Zen window&#xA;    -- uncomment any of the options below, or add other vim.wo options you want to apply&#xA;    options = {&#xA;      -- signcolumn = &#34;no&#34;, -- disable signcolumn&#xA;      -- number = false, -- disable number column&#xA;      -- relativenumber = false, -- disable relative numbers&#xA;      -- cursorline = false, -- disable cursorline&#xA;      -- cursorcolumn = false, -- disable cursor column&#xA;      -- foldcolumn = &#34;0&#34;, -- disable fold column&#xA;      -- list = false, -- disable whitespace characters&#xA;    },&#xA;  },&#xA;  plugins = {&#xA;    -- disable some global vim options (vim.o...)&#xA;    -- comment the lines to not apply the options&#xA;    options = {&#xA;      enabled = true,&#xA;      ruler = false, -- disables the ruler text in the cmd line area&#xA;      showcmd = false, -- disables the command in the last line of the screen&#xA;      -- you may turn on/off statusline in zen mode by setting &#39;laststatus&#39; &#xA;      -- statusline will be shown only if &#39;laststatus&#39; == 3&#xA;      laststatus = 0, -- turn off the statusline in zen mode&#xA;    },&#xA;    twilight = { enabled = true }, -- enable to start Twilight when zen mode opens&#xA;    gitsigns = { enabled = false }, -- disables git signs&#xA;    tmux = { enabled = false }, -- disables the tmux statusline&#xA;    -- this will change the font size on kitty when in zen mode&#xA;    -- to make this work, you need to set the following kitty options:&#xA;    -- - allow_remote_control socket-only&#xA;    -- - listen_on unix:/tmp/kitty&#xA;    kitty = {&#xA;      enabled = false,&#xA;      font = &#34;+4&#34;, -- font size increment&#xA;    },&#xA;    -- this will change the font size on alacritty when in zen mode&#xA;    -- requires  Alacritty Version 0.10.0 or higher&#xA;    -- uses `alacritty msg` subcommand to change font size&#xA;    alacritty = {&#xA;      enabled = false,&#xA;      font = &#34;14&#34;, -- font size&#xA;    },&#xA;    -- this will change the font size on wezterm when in zen mode&#xA;    -- See alse also the Plugins/Wezterm section in this projects README&#xA;    wezterm = {&#xA;      enabled = false,&#xA;      -- can be either an absolute font size or the number of incremental steps&#xA;      font = &#34;+4&#34;, -- (10% increase per step)&#xA;    },&#xA;  },&#xA;  -- callback where you can add custom code when the Zen window opens&#xA;  on_open = function(win)&#xA;  end,&#xA;  -- callback where you can add custom code when the Zen window closes&#xA;  on_close = function()&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;p&gt;Toggle &lt;strong&gt;Zen Mode&lt;/strong&gt; with &lt;code&gt;:ZenMode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can start &lt;strong&gt;Zen Mode&lt;/strong&gt; with the &lt;code&gt;Lua&lt;/code&gt; API and pass any additional options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;zen-mode&#34;).toggle({&#xA;  window = {&#xA;    width = .85 -- width will be 85% of the editor width&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🧩 Plugins&lt;/h2&gt; &#xA;&lt;h3&gt;Wezterm&lt;/h3&gt; &#xA;&lt;p&gt;In order to make the integration with wezterm work as intended, you need to add the following function to your wezterm config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;wezterm.on(&#39;user-var-changed&#39;, function(window, pane, name, value)&#xA;    local overrides = window:get_config_overrides() or {}&#xA;    if name == &#34;ZEN_MODE&#34; then&#xA;        local incremental = value:find(&#34;+&#34;)&#xA;        local number_value = tonumber(value)&#xA;        if incremental ~= nil then&#xA;            while (number_value &amp;gt; 0) do&#xA;                window:perform_action(wezterm.action.IncreaseFontSize, pane)&#xA;                number_value = number_value - 1&#xA;            end&#xA;            overrides.enable_tab_bar = false&#xA;        elseif number_value &amp;lt; 0 then&#xA;            window:perform_action(wezterm.action.ResetFontSize, pane)&#xA;            overrides.font_size = nil&#xA;            overrides.enable_tab_bar = true&#xA;        else&#xA;            overrides.font_size = number_value&#xA;            overrides.enable_tab_bar = false&#xA;        end&#xA;    end&#xA;    window:set_config_overrides(overrides)&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need this functionality within tmux, you need to add the following option to your tmux config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;set-option -g allow-passthrough on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://github.com/wez/wezterm/discussions/2550&#34;&gt;https://github.com/wez/wezterm/discussions/2550&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio Code &lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/userinterface#_zen-mode&#34;&gt;Zen Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Emacs &lt;a href=&#34;https://github.com/joostkremers/writeroom-mode&#34;&gt;writeroom-mode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>josean-dev/dev-environment-files</title>
    <updated>2023-11-01T02:04:38Z</updated>
    <id>tag:github.com,2023-11-01:/josean-dev/dev-environment-files</id>
    <link href="https://github.com/josean-dev/dev-environment-files" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;My Dev Environment Files 🚀&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; These are primarily meant for inspiration. I wouldn&#39;t just blindly use them. Proceed at your own risk!&lt;/p&gt; &#xA;&lt;p&gt;📹 Youtube Playlist With Detailed Walkthroughs on My Setup: &lt;a href=&#34;https://youtube.com/playlist?list=PLnu5gT9QrFg36OehOdECFvxFFeMHhb_07&#34;&gt;💻 My Dev Environment &amp;amp; Workflow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Terminal Setup&lt;/h1&gt; &#xA;&lt;p&gt;✍🏼 Blog Post Step-by-Step Guide: &lt;a href=&#34;https://josean.com/posts/terminal-setup&#34;&gt;How To Setup Your Mac Terminal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📹 Youtube Guide: &lt;a href=&#34;https://www.youtube.com/watch?v=CF1tMjvHDRA&amp;amp;list=PLnu5gT9QrFg36OehOdECFvxFFeMHhb_07&amp;amp;index=2&amp;amp;t=479s&#34;&gt;How To Make Your Boring Mac Terminal So Much Better&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Relevant Files&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.zshrc&#34;&gt;.zshrc&lt;/a&gt; - Zsh Shell Configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/coolnight.itermcolors&#34;&gt;coolnight.itermcolors&lt;/a&gt; - iTerm2 Color Scheme&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Tmux Setup&lt;/h1&gt; &#xA;&lt;p&gt;✍🏼 Blog Post: &lt;a href=&#34;https://josean.com/posts/tmux-setup&#34;&gt;How To Use and Configure Tmux Alongside Neovim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📹 Youtube Guide: &lt;a href=&#34;https://youtu.be/U-omALWIBos&#34;&gt;How I Setup And Use Tmux Alongside Neovim for an Awesome Dev Workflow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Relevant Files&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.tmux.conf&#34;&gt;.tmux.conf&lt;/a&gt; - Tmux Configuration File&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Yabai Tiling Window Manager Setup&lt;/h1&gt; &#xA;&lt;p&gt;✍🏼 Blog Post: &lt;a href=&#34;https://josean.com/posts/yabai-setup&#34;&gt;How To Setup And Use The Yabai Tiling Window Manager On Mac&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📹 Youtube Guide: &lt;a href=&#34;https://youtu.be/k94qImbFKWE&#34;&gt;How To Setup And Use The Yabai Tiling Window Manager On Mac&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Relevant Files&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/yabai/yabairc&#34;&gt;.config/yabai/yabairc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/skhd/skhdrc&#34;&gt;.config/skhd/skhdrc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Neovim Setup&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: This is my latest config with lazy.nvim. It is similar, but not the same as my original packer setup.&lt;/p&gt; &#xA;&lt;p&gt;If you are coming from my full neovim setup video with packer, that config is found here: &lt;a href=&#34;https://github.com/josean-dev/dev-environment-files/tree/packer-nvim-setup&#34;&gt;Packer Config&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📹 Packer Full Neovim Setup Guide: &lt;a href=&#34;https://youtu.be/vdn_pKJUda8&#34;&gt;How I Setup Neovim On My Mac To Make It Amazing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📹 lazy.nvim Neovim Guide: &lt;a href=&#34;https://youtu.be/6mxWayq-s9I&#34;&gt;How To Use lazy.nvim for an Amazing And Simple Neovim Config&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you clone the repo into your machine and use the config by copying .config/nvim to your home folder, wait for the plugins, language servers and parsers to install with lazy.nvim, Mason and nvim-treesitter. If you are opening a lua file or another file I have language servers configured for, like html, css or javascript/typescript, you might also get an error saying that the server failed to start. This is because Mason hasn&#39;t installed it yet. Press enter to continue, Mason will automatically install it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Relevant Files&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/nvim&#34;&gt;.config/nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup Requires&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;True Color Terminal Like: &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt; (Version 0.9 or Later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Font&lt;/a&gt; - I use Meslo Nerd Font&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;Ripgrep&lt;/a&gt; - For Telescope Fuzzy Finder&lt;/li&gt; &#xA; &lt;li&gt;XCode Command Line Tools&lt;/li&gt; &#xA; &lt;li&gt;If working with typescript/javascript and the typescript language server like me. You might need to install node.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re on mac, like me, you can install iTerm2, Neovim, Ripgrep and Node with homebrew.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask iterm2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install neovim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For XCode Command Line Tools do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xcode-select --install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;h4&gt;Plugin Manager&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;folke/lazy.nvim&lt;/a&gt; - Amazing plugin manager&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Dependency For Other Plugins&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;nvim-lua/plenary&lt;/a&gt; - Useful lua functions other plugins use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Preferred Colorscheme&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bluz71/vim-nightfly-guicolors&#34;&gt;bluz71/vim-nightfly-guicolors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Navigating Between Neovim Windows and Tmux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/christoomey/vim-tmux-navigator&#34;&gt;christoomey/vim-tmux-navigator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Essentials&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;tpope/vim-surround&lt;/a&gt; - manipulate surroundings with &#34;ys&#34;, &#34;ds&#34;, and &#34;cs&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vim-scripts/ReplaceWithRegister&#34;&gt;vim-scripts/ReplaceWithRegister&lt;/a&gt; - replace things with register with &#34;gr&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;File Explorer&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua&#34;&gt;nvim-tree/nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;VS Code Like Icons&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Neovim Greeter&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/goolord/alpha-nvim&#34;&gt;goolord/alpha-nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Status Line&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;nvim-lualine/lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Buffer Line&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/bufferline.nvim&#34;&gt;akinsho/bufferline.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Keymap Suggestions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;folke/which-key.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Fuzzy Finder&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-fzf-native.nvim&#34;&gt;nvim-telescope/telescope-fzf-native.nvim&lt;/a&gt; - Dependency for better performance&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope/telescope.nvim&lt;/a&gt; - Fuzzy Finder&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;stevearc/dressing.nvim&lt;/a&gt; - select/input ui improvement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Marking Files With Prime&#39;s Harpoon&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ThePrimeagen/harpoon&#34;&gt;ThePrimeagen/harpoon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Autocompletion&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;hrsh7th/nvim-cmp&lt;/a&gt; - Completion plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-buffer&#34;&gt;hrsh7th/cmp-buffer&lt;/a&gt; - Completion source for text in current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-path&#34;&gt;hrsh7th/cmp-path&lt;/a&gt; - Completion source for file system paths&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onsails/lspkind.nvim&#34;&gt;onsails/lspkind.nvim&lt;/a&gt; - Vs Code Like Icons for autocompletion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Snippets&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;L3MON4D3/LuaSnip&lt;/a&gt; - Snippet engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets&#34;&gt;rafamadriz/friendly-snippets&lt;/a&gt; - Useful snippets for different languages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saadparwaiz1/cmp_luasnip&#34;&gt;saadparwaiz1/cmp_luasnip&lt;/a&gt; - Completion source for snippet autocomplete&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Managing &amp;amp; Installing Language Servers, Linters &amp;amp; Formatters&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;williamboman/mason.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;LSP Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/mason-lspconfig.nvim&#34;&gt;williamboman/mason-lspconfig.nvim&lt;/a&gt; - Bridges gap b/w mason &amp;amp; lspconfig&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;neovim/nvim-lspconfig&lt;/a&gt; - Easy way to configure lsp servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/cmp-nvim-lsp&#34;&gt;hrsh7th/cmp-nvim-lsp&lt;/a&gt; - Smart code autocompletion with lsp&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Formatting &amp;amp; Linting&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stevearc/conform.nvim&#34;&gt;stevearc/conform.nvim&lt;/a&gt; - Easy way to configure formatters&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;mfussenegger/nvim-lint&lt;/a&gt; - Easy way to configure linters&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WhoIsSethDaniel/mason-tool-installer.nvim&#34;&gt;WhoIsSethDaniel/mason-tool-installer.nvim&lt;/a&gt; - Auto install linters &amp;amp; formatters on startup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Comments&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/numToStr/Comment.nvim&#34;&gt;numToStr/Comment.nvim&lt;/a&gt; - toggle comments with &#34;gc&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JoosepAlviste/nvim-ts-context-commentstring&#34;&gt;JoosepAlviste/nvim-ts-context-commentstring&lt;/a&gt; - Requires treesitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Treesitter Syntax Highlighting, Autoclosing &amp;amp; Text Objects&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter/nvim-treesitter&lt;/a&gt; - Treesitter configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-textobjects&#34;&gt;nvim-treesitter/nvim-treesitter-textobjects&lt;/a&gt; - Treesitter configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs&#34;&gt;windwp/nvim-autopairs&lt;/a&gt; - Autoclose brackets, parens, quotes, etc...&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/windwp/nvim-ts-autotag&#34;&gt;windwp/nvim-ts-autotag&lt;/a&gt; - Autoclose tags&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Git&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;lewis6991/gitsigns.nvim&lt;/a&gt; - Show line modifications on left hand side&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>