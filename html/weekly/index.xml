<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:01:09Z</updated>
  <subtitle>Weekly Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>octocat/Spoon-Knife</title>
    <updated>2022-06-02T02:01:09Z</updated>
    <id>tag:github.com,2022-06-02:/octocat/Spoon-Knife</id>
    <link href="https://github.com/octocat/Spoon-Knife" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo is for demonstration purposes only.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Well hello there!&lt;/h3&gt; &#xA;&lt;p&gt;This repository is meant to provide an example for &lt;em&gt;forking&lt;/em&gt; a repository on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Creating a &lt;em&gt;fork&lt;/em&gt; is producing a personal copy of someone else&#39;s project. Forks act as a sort of bridge between the original repository and your personal copy. You can submit &lt;em&gt;Pull Requests&lt;/em&gt; to help make other people&#39;s projects better by offering your changes up to the original project. Forking is at the core of social coding at GitHub.&lt;/p&gt; &#xA;&lt;p&gt;After forking this repository, you can make some changes to the project, and submit &lt;a href=&#34;https://github.com/octocat/Spoon-Knife/pulls&#34;&gt;a Pull Request&lt;/a&gt; as practice.&lt;/p&gt; &#xA;&lt;p&gt;For some more information on how to fork a repository, &lt;a href=&#34;http://guides.github.com/overviews/forking/&#34;&gt;check out our guide, &#34;Forking Projects&#34;&#34;&lt;/a&gt;. Thanks! &lt;span&gt;💖&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>QSCTech/zju-icicles</title>
    <updated>2022-06-02T02:01:09Z</updated>
    <id>tag:github.com,2022-06-02:/QSCTech/zju-icicles</id>
    <link href="https://github.com/QSCTech/zju-icicles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;浙江大学课程攻略共享计划&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;浙江大学课程攻略共享计划&lt;/h1&gt; &#xA;&lt;h2&gt;前言&lt;/h2&gt; &#xA;&lt;p&gt;来到一所大学，从第一次接触许多课，直到一门一门完成，这个过程中我们时常收集起许多资料和情报。&lt;/p&gt; &#xA;&lt;p&gt;有些是需要在网上搜索的电子书，每次见到一门新课程，Google 一下教材名称，有的可以立即找到，有的却是要花费许多眼力；有些是历年试卷或者 A4 纸，前人精心收集制作，抱着能对他人有用的想法公开，却需要在各个群或者 CC98 中摸索以至于从学长手中代代相传；有些是上完一门课才恍然领悟的技巧，原来这门课重点如此，当初本可以更轻松地完成得更好……&lt;/p&gt; &#xA;&lt;p&gt;我也曾很努力地收集各种课程资料，但到最后，某些重要信息的得到却往往依然是纯属偶然。这种状态时常令我感到后怕与不安。我也曾在课程结束后终于有了些许方法与总结，但这些想法无处诉说，最终只能把花费时间与精力才换来的经验耗散在了漫漫的遗忘之中。&lt;/p&gt; &#xA;&lt;p&gt;我为这一年一年，这么多人孤军奋战的重复劳动感到不平。&lt;/p&gt; &#xA;&lt;p&gt;我希望能够将这些隐晦的、不确定的、口口相传的资料和经验，变为公开的、易于获取的和大家能够共同完善、积累的共享资料。&lt;/p&gt; &#xA;&lt;p&gt;我希望只要是前人走过的弯路，后人就不必再走。这是我的信念，也是我建立这个项目的原因。&lt;/p&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;p&gt;本项目至今为止收录了以下内容：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;选课攻略&lt;/li&gt; &#xA; &lt;li&gt;电子版教材&lt;/li&gt; &#xA; &lt;li&gt;平时作业答案&lt;/li&gt; &#xA; &lt;li&gt;历年试卷&lt;/li&gt; &#xA; &lt;li&gt;复习资料&lt;/li&gt; &#xA; &lt;li&gt;开卷考试 A4 纸&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;等等。目前项目已覆盖大多数计科的专业课程。&lt;/p&gt; &#xA;&lt;h2&gt;平台&lt;/h2&gt; &#xA;&lt;p&gt;为什么采用 GitHub 项目作为平台呢？我有以下一些考虑。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QQ 群大多为年级和专业所分隔，无法长期共同地保有；况且群文件也缺乏组织。&lt;/li&gt; &#xA; &lt;li&gt;GitHub 项目可以使用目录进行文件组织，并且每个目录均可以在显示文件列表的同时显示一个 README，十分适合本项目的需求。&lt;/li&gt; &#xA; &lt;li&gt;GitHub 带有便捷的 Issue 和 Pull Request 协作功能，并且可以方便地对贡献的质量进行监督和调整。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;贡献&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;欢迎贡献！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;欢迎贡献！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;欢迎贡献！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;——因为很重要所以说了三遍&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Issue、PR、纠错、资料、选课/考试攻略，完全欢迎！&lt;/p&gt; &#xA;&lt;p&gt;来自大家的关注、维护和贡献，才是让这个浙江大学独有的攻略本继续存在的动力~&lt;/p&gt; &#xA;&lt;h3&gt;操作方法&lt;/h3&gt; &#xA;&lt;p&gt;提交 PR：Fork 本项目，然后在 GitHub 网页端点击 Upload File 上传文件，发起 PR 即可。留意一下项目的文件组织喔。&lt;/p&gt; &#xA;&lt;p&gt;或者也可以直接附加在 Issue 中，由维护者进行添加。&lt;/p&gt; &#xA;&lt;p&gt;对于教师的评价请一律使用姓名拼音首字母缩写；至于教师提供的课件就不用上传了，因为每年说不定会有更新的嘛。&lt;/p&gt; &#xA;&lt;p&gt;由于本项目体积很大，故可以采用在Github Web端直接上传的方式，具体操作如下：&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;首先Fork本项目&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;上传文件到已有文件夹：打开对应文件夹，点击绿色Download按钮旁的upload，上传你的文件。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;上传文件到新文件夹：打开任意文件夹，点击绿色Download按钮旁的upload，&lt;strong&gt;把浏览器地址栏中文件夹名称改为你想要新建的文件夹名称，然后回车&lt;/strong&gt;，上传你的文件。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;提醒&lt;/h3&gt; &#xA;&lt;p&gt;有些朋友在提交 PR 的时候可能会注意到自己的 Fork 和我们的主分支有数十甚至上百个不同的 commit 。如果出现这种情况，可以考虑以下两种解决方案：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;如果对git不太熟悉，建议（在备份完成后）先删除你的项目，重新 fork 、上传并重新提交 PR 。&lt;/li&gt; &#xA; &lt;li&gt;如果对git及其工作原理较为熟悉（而且愿意花费时间和流量折腾），可以尝试在 fork 出的项目上进行 rebase 以消除与主分支在历史上的冲突。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;警告&lt;/h3&gt; &#xA;&lt;p&gt;下列内容为不适合上传的内容。如果你认为缺少这些资料将会影响资源的完整性，请优先考虑放在校内资源平台，或联系你的教师并由教师发布。建议你撰写一个 README 文档并放置一些链接或指引文字来帮助找到这些资源。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;盗版电子书/付费电子书&lt;/li&gt; &#xA; &lt;li&gt;盗版/破解版/绿色版付费软件及其安装包&lt;/li&gt; &#xA; &lt;li&gt;课程/教师主页上列出的内容（请在获得教师许可后上传）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果你认为本仓库的一些文件侵犯了您的权益，请 &lt;a href=&#34;mailto:tech@zjuqsc.com&#34;&gt;向我们发送邮件&lt;/a&gt; 。我们将会从仓库中彻底清除这些文件。&lt;/p&gt; &#xA;&lt;h2&gt;许可&lt;/h2&gt; &#xA;&lt;p&gt;由贡献者编写部分的许可如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34;&gt;CC-BY-NC-SA：署名-非商业性使用-相同方式共享&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;资料仅供参考，请自己判断其适用性。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;其他部分的版权归属于其各自的作者。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>freddier/hyperblog</title>
    <updated>2022-06-02T02:01:09Z</updated>
    <id>tag:github.com,2022-06-02:/freddier/hyperblog</id>
    <link href="https://github.com/freddier/hyperblog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Un blog increíble para el curso de Git y Github de Platzi&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hyperblog 💚&lt;/h1&gt; &#xA;&lt;p&gt;Un blog increíble para el&lt;a href=&#34;https://platzi.com/cursos/git-github/&#34; title=&#34; curso de Git y Github&#34;&gt; curso de Git y Github&lt;/a&gt; de &lt;a href=&#34;https://platzi.com/&#34; title=&#34;Platzi&#34;&gt;Platzi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;El curso de Git y Github de Platzi es lo que me hacía falta para triplicar mi salario y lanzarme a la industria del tejido de lana sintética con Machine Learning&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;niñita&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;En este curso vemos de todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Todos los comandos de Git&lt;/li&gt; &#xA; &lt;li&gt;El flujo de trabajo en Github&lt;/li&gt; &#xA; &lt;li&gt;El verdadero amor por las buenas prácticas&lt;/li&gt; &#xA; &lt;li&gt;Trucos muy locos del profesor&lt;/li&gt; &#xA; &lt;li&gt;Las personalidades múltiples de Freddy&lt;/li&gt; &#xA; &lt;li&gt;Creado por el increíble Platzi Team&lt;/li&gt; &#xA; &lt;li&gt;Incluye ejemplos en Windows, Linux y Mac&lt;/li&gt; &#xA; &lt;li&gt;Disponible para todas las edades&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Y como un amable recordatorio: &lt;strong&gt;Este readme.md es un chiste&lt;/strong&gt;. Diseñado para el ejemplo. Si llegas acá NO TE LO TOMES EN SERIO y mejor ve &lt;a href=&#34;https://platzi.com/cursos/git-github/&#34; title=&#34;a ver el curso&#34;&gt;&lt;strong&gt;a ver el curso&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>udacity/cd0046-SQL-and-Data-Modeling-for-the-Web</title>
    <updated>2022-06-02T02:01:09Z</updated>
    <id>tag:github.com,2022-06-02:/udacity/cd0046-SQL-and-Data-Modeling-for-the-Web</id>
    <link href="https://github.com/udacity/cd0046-SQL-and-Data-Modeling-for-the-Web" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Project Fyyur Artist Booking Site&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Fyyur&lt;/h2&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Fyyur is a musical venue and artist booking site that facilitates the discovery and bookings of shows between local performing artists and venues. This site lets you list new artists and venues, discover them, and list shows with artists as a venue owner.&lt;/p&gt; &#xA;&lt;p&gt;Your job is to build out the data models to power the API endpoints for the Fyyur site by connecting to a PostgreSQL database for storing, querying, and creating information about artists and venues on Fyyur.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This app is nearly complete. It is only missing one thing… real data! While the views and controllers are defined in this application, it is missing models and model interactions to be able to store retrieve, and update data from a database. By the end of this project, you should have a fully functioning site that is at least capable of doing the following, if not more, using a PostgreSQL database:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;creating new venues, artists, and creating new shows.&lt;/li&gt; &#xA; &lt;li&gt;searching for venues and artists.&lt;/li&gt; &#xA; &lt;li&gt;learning more about a specific artist or venue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We want Fyyur to be the next new platform that artists and musical venues can use to find each other, and discover new music shows. Let&#39;s make that happen!&lt;/p&gt; &#xA;&lt;h2&gt;Tech Stack (Dependencies)&lt;/h2&gt; &#xA;&lt;h3&gt;1. Backend Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Our tech stack will include the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;virtualenv&lt;/strong&gt; as a tool to create isolated Python environments&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQLAlchemy ORM&lt;/strong&gt; to be our ORM library of choice&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; as our database of choice&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python3&lt;/strong&gt; and &lt;strong&gt;Flask&lt;/strong&gt; as our server language and server framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flask-Migrate&lt;/strong&gt; for creating and running schema migrations You can download and install the dependencies mentioned above using &lt;code&gt;pip&lt;/code&gt; as:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install virtualenv&#xA;pip install SQLAlchemy&#xA;pip install postgres&#xA;pip install Flask&#xA;pip install Flask-Migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - If we do not mention the specific version of a package, then the default latest stable package will be installed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2. Frontend Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;You must have the &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt;, and &lt;strong&gt;Javascript&lt;/strong&gt; with &lt;a href=&#34;https://getbootstrap.com/docs/3.4/customize/&#34;&gt;Bootstrap 3&lt;/a&gt; for our website&#39;s frontend. Bootstrap can only be installed by Node Package Manager (NPM). Therefore, if not already, download and install the &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt;. Windows users must run the executable as an Administrator, and restart the computer after installation. After successfully installing the Node, verify the installation as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;node -v&#xA;npm -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://getbootstrap.com/docs/3.3/getting-started/&#34;&gt;Bootstrap 3&lt;/a&gt; for the website&#39;s frontend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm init -y&#xA;npm install bootstrap@3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Main Files: Project Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;├── README.md&#xA;├── app.py *** the main driver of the app. Includes your SQLAlchemy models.&#xA;                  &#34;python app.py&#34; to run after installing dependencies&#xA;├── config.py *** Database URLs, CSRF generation, etc&#xA;├── error.log&#xA;├── forms.py *** Your forms&#xA;├── requirements.txt *** The dependencies we need to install with &#34;pip3 install -r requirements.txt&#34;&#xA;├── static&#xA;│&amp;nbsp;&amp;nbsp; ├── css &#xA;│&amp;nbsp;&amp;nbsp; ├── font&#xA;│&amp;nbsp;&amp;nbsp; ├── ico&#xA;│&amp;nbsp;&amp;nbsp; ├── img&#xA;│&amp;nbsp;&amp;nbsp; └── js&#xA;└── templates&#xA;    ├── errors&#xA;    ├── forms&#xA;    ├── layouts&#xA;    └── pages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Overall:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Models are located in the &lt;code&gt;MODELS&lt;/code&gt; section of &lt;code&gt;app.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Controllers are also located in &lt;code&gt;app.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The web frontend is located in &lt;code&gt;templates/&lt;/code&gt;, which builds static assets deployed to the web server at &lt;code&gt;static/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Web forms for creating data are located in &lt;code&gt;form.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Highlight folders:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;templates/pages&lt;/code&gt; -- (Already complete.) Defines the pages that are rendered to the site. These templates render views based on data passed into the template’s view, in the controllers defined in &lt;code&gt;app.py&lt;/code&gt;. These pages successfully represent the data to the user, and are already defined for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;templates/layouts&lt;/code&gt; -- (Already complete.) Defines the layout that a page can be contained in to define footer and header code for a given page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;templates/forms&lt;/code&gt; -- (Already complete.) Defines the forms used to create new artists, shows, and venues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;app.py&lt;/code&gt; -- (Missing functionality.) Defines routes that match the user’s URL, and controllers which handle data and renders views to the user. This is the main file you will be working on to connect to and manipulate the database and render views with data to the user, based on the URL.&lt;/li&gt; &#xA; &lt;li&gt;Models in &lt;code&gt;app.py&lt;/code&gt; -- (Missing functionality.) Defines the data models that set up the database tables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config.py&lt;/code&gt; -- (Missing functionality.) Stores configuration variables and instructions, separate from the main application code. This is where you will need to connect to the database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Understand the Project Structure (explained above) and where important files are located.&lt;/li&gt; &#xA; &lt;li&gt;Build and run local development following the Development Setup steps below.&lt;/li&gt; &#xA; &lt;li&gt;Fill in the missing functionality in this application: this application currently pulls in fake data, and needs to now connect to a real database and talk to a real backend.&lt;/li&gt; &#xA; &lt;li&gt;Fill out every &lt;code&gt;TODO&lt;/code&gt; section throughout the codebase. We suggest going in order of the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Connect to a database in &lt;code&gt;config.py&lt;/code&gt;. A project submission that uses a local database connection is fine.&lt;/li&gt; &#xA;   &lt;li&gt;Using SQLAlchemy, set up normalized models for the objects we support in our web app in the Models section of &lt;code&gt;app.py&lt;/code&gt;. Check out the sample pages provided at /artists/1, /venues/1, and /shows for examples of the data we want to model, using all of the learned best practices in database schema design. Implement missing model properties and relationships using database migrations via Flask-Migrate.&lt;/li&gt; &#xA;   &lt;li&gt;Implement form submissions for creating new Venues, Artists, and Shows. There should be proper constraints, powering the &lt;code&gt;/create&lt;/code&gt; endpoints that serve the create form templates, to avoid duplicate or nonsensical form submissions. Submitting a form should create proper new records in the database.&lt;/li&gt; &#xA;   &lt;li&gt;Implement the controllers for listing venues, artists, and shows. Note the structure of the mock data used. We want to keep the structure of the mock data.&lt;/li&gt; &#xA;   &lt;li&gt;Implement search, powering the &lt;code&gt;/search&lt;/code&gt; endpoints that serve the application&#39;s search functionalities.&lt;/li&gt; &#xA;   &lt;li&gt;Serve venue and artist detail pages, powering the &lt;code&gt;&amp;lt;venue|artist&amp;gt;/&amp;lt;id&amp;gt;&lt;/code&gt; endpoints that power the detail pages.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Data Handling with &lt;code&gt;Flask-WTF&lt;/code&gt; Forms&lt;/h4&gt; &#xA;&lt;p&gt;The starter codes use an interactive form builder library called &lt;a href=&#34;https://flask-wtf.readthedocs.io/&#34;&gt;Flask-WTF&lt;/a&gt;. This library provides useful functionality, such as form validation and error handling. You can peruse the Show, Venue, and Artist form builders in &lt;code&gt;forms.py&lt;/code&gt; file. The WTForms are instantiated in the &lt;code&gt;app.py&lt;/code&gt; file. For example, in the &lt;code&gt;create_shows()&lt;/code&gt; function, the Show form is instantiated from the command: &lt;code&gt;form = ShowForm()&lt;/code&gt;. To manage the request from Flask-WTF form, each field from the form has a &lt;code&gt;data&lt;/code&gt; attribute containing the value from user input. For example, to handle the &lt;code&gt;venue_id&lt;/code&gt; data from the Venue form, you can use: &lt;code&gt;show = Show(venue_id=form.venue_id.data)&lt;/code&gt;, instead of using &lt;code&gt;request.form[&#39;venue_id&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acceptance Criteria&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The web app should be successfully connected to a PostgreSQL database. A local connection to a database on your local computer is fine.&lt;/li&gt; &#xA; &lt;li&gt;There should be no use of mock data throughout the app. The data structure of the mock data per controller should be kept unmodified when satisfied by real data.&lt;/li&gt; &#xA; &lt;li&gt;The application should behave just as before with mock data, but now uses real data from a real backend server, with real search functionality. For example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;when a user submits a new artist record, the user should be able to see it populate in /artists, as well as search for the artist by name and have the search return results.&lt;/li&gt; &#xA; &lt;li&gt;I should be able to go to the URL &lt;code&gt;/artist/&amp;lt;artist-id&amp;gt;&lt;/code&gt; to visit a particular artist’s page using a unique ID per artist, and see real data about that particular artist.&lt;/li&gt; &#xA; &lt;li&gt;Venues should continue to be displayed in groups by city and state.&lt;/li&gt; &#xA; &lt;li&gt;Search should be allowed to be partial string matching and case-insensitive.&lt;/li&gt; &#xA; &lt;li&gt;Past shows versus Upcoming shows should be distinguished in Venue and Artist pages.&lt;/li&gt; &#xA; &lt;li&gt;A user should be able to click on the venue for an upcoming show in the Artist&#39;s page, and on that Venue&#39;s page, see the same show in the Venue Page&#39;s upcoming shows section.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;As a fellow developer on this application, I should be able to run &lt;code&gt;flask db migrate&lt;/code&gt;, and have my local database (once set up and created) be populated with the right tables to run this application and have it interact with my local postgres server, serving the application&#39;s needs completely with real data I can seed my local database with.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The models should be completed (see TODOs in the &lt;code&gt;Models&lt;/code&gt; section of &lt;code&gt;app.py&lt;/code&gt;) and model the objects used throughout Fyyur.&lt;/li&gt; &#xA; &lt;li&gt;Define the models in a different file to follow &lt;a href=&#34;https://en.wikipedia.org/wiki/Separation_of_concerns&#34;&gt;Separation of Concerns&lt;/a&gt; design principles. You can refactor the models to a new file, such as &lt;code&gt;models.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The right &lt;em&gt;type&lt;/em&gt; of relationship and parent-child dynamics between models should be accurately identified and fit the needs of this particular application.&lt;/li&gt; &#xA; &lt;li&gt;The relationship between the models should be accurately configured, and referential integrity amongst the models should be preserved.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flask db migrate&lt;/code&gt; should work, and populate my local postgres database with properly configured tables for this application&#39;s objects, including proper columns, column data types, constraints, defaults, and relationships that completely satisfy the needs of this application. The proper type of relationship between venues, artists, and shows should be configured.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Stand Out&lt;/h5&gt; &#xA;&lt;p&gt;Looking to go above and beyond? This is the right section for you! Here are some challenges to make your submission stand out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement artist availability. An artist can list available times that they can be booked. Restrict venues from being able to create shows with artists during a show time that is outside of their availability.&lt;/li&gt; &#xA; &lt;li&gt;Show Recent Listed Artists and Recently Listed Venues on the homepage, returning results for Artists and Venues sorting by newly created. Limit to the 10 most recently listed items.&lt;/li&gt; &#xA; &lt;li&gt;Implement Search Artists by City and State, and Search Venues by City and State. Searching by &#34;San Francisco, CA&#34; should return all artists or venues in San Francisco, CA.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Best of luck in your final project! Fyyur depends on you!&lt;/p&gt; &#xA;&lt;h2&gt;Development Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Download the project starter code locally&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/udacity/FSND.git&#xA;cd FSND/projects/01_fyyur/starter_code &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create an empty repository in your Github account online. To change the remote repository path in your local repository, use the commands below:&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git remote -v &#xA;git remote remove origin &#xA;git remote add origin &amp;lt;https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;REPO_NAME&amp;gt;.git&amp;gt;&#xA;git branch -M master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have finished editing your code, you can push the local repository to your Github account using the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git add . --all   &#xA;git commit -m &#34;your comment&#34;&#xA;git push -u origin master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Initialize and activate a virtualenv using:&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m virtualenv env&#xA;source env/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - In Windows, the &lt;code&gt;env&lt;/code&gt; does not have a &lt;code&gt;bin&lt;/code&gt; directory. Therefore, you&#39;d use the analogous command shown below:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;source env/Scripts/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install the dependencies:&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run the development server:&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;export FLASK_APP=myapp&#xA;export FLASK_ENV=development # enables debug mode&#xA;python3 app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Verify on the Browser&lt;/strong&gt;&lt;br&gt; Navigate to project homepage &lt;a href=&#34;http://127.0.0.1:5000/&#34;&gt;http://127.0.0.1:5000/&lt;/a&gt; or &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>sonic-net/SONiC</title>
    <updated>2022-06-02T02:01:09Z</updated>
    <id>tag:github.com,2022-06-02:/sonic-net/SONiC</id>
    <link href="https://github.com/sonic-net/SONiC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Landing page for Software for Open Networking in the Cloud (SONiC) - https://sonic-net.github.io/SONiC/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Software for Open Networking in the Cloud (SONiC)&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains documentation, Wiki, master project management, and website for the Software for Open Networking in the Cloud (SONiC).&lt;/p&gt; &#xA;&lt;p&gt;Documentation covers project wide concerns such as the getting started guide, faq, general requirements for contribution, developer&#39;s guide, governance, architecture, and so on. It also contains links to download and install SONiC and links to all the source. See &lt;a href=&#34;https://github.com/azure/sonic/wiki&#34;&gt;SONiC Wiki&lt;/a&gt; for complete information.&lt;/p&gt;</summary>
  </entry>
</feed>