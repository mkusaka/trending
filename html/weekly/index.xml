<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T02:00:59Z</updated>
  <subtitle>Weekly Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>acantril/aws-sa-associate-saac02</title>
    <updated>2022-06-26T02:00:59Z</updated>
    <id>tag:github.com,2022-06-26:/acantril/aws-sa-associate-saac02</id>
    <link href="https://github.com/acantril/aws-sa-associate-saac02" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Course Files for AWS Certified Solutions Architect Certification Course (SAAC02) - Adrian Cantrill&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aws-sa-associate-saac02&lt;/h1&gt; &#xA;&lt;p&gt;Course Files for AWS Certified Solutions Architect Certification Course (SAAC02) - Adrian Cantrill&lt;/p&gt; &#xA;&lt;p&gt;If you find something wrong feel free to let me know at &lt;a href=&#34;mailto:saac02-feedback@cantrill.io&#34;&gt;saac02-feedback@cantrill.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;or - if you want to help fix something, feel free to submit a PR with your suggested fixes and I&#39;ll review&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to use any portion of this repo in your own projects, just make sure you are aware of the license terms ... and I&#39;d appreciate a friendly heads-up :)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>munificent/craftinginterpreters</title>
    <updated>2022-06-26T02:00:59Z</updated>
    <id>tag:github.com,2022-06-26:/munificent/craftinginterpreters</id>
    <link href="https://github.com/munificent/craftinginterpreters" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository for the book &#34;Crafting Interpreters&#34;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is the repo used for the in-progress book &#34;&lt;a href=&#34;http://craftinginterpreters.com&#34;&gt;Crafting Interpreters&lt;/a&gt;&#34;. It contains the Markdown text of the book, full implementations of both interpreters, as well as the build system to weave the two together into the final site.&lt;/p&gt; &#xA;&lt;p&gt;If you find an error or have a suggestion, please do file an issue here. Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;One of the absolute best things about writing a book online and putting it out there before it&#39;s done is that people like you have been kind enough to give me feedback, point out typos, and find other errors or unclear text.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to do that, great! You can just file bugs here on the repo, or send a pull request if you&#39;re so inclined. If you want to send a pull request, but don&#39;t want to get the build system set up to regenerate the HTML too, don&#39;t worry about it. I&#39;ll do that when I pull it in.&lt;/p&gt; &#xA;&lt;h2&gt;Ports and implementations&lt;/h2&gt; &#xA;&lt;p&gt;Another way to get involved is by sharing your own implementation of Lox. Ports to other languages are particularly useful since not every reader likes Java and C. Feel free to add your Lox port or implementation to the wiki:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/munificent/craftinginterpreters/wiki/Lox-implementations&#34;&gt;Lox implementations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Stuff&lt;/h2&gt; &#xA;&lt;p&gt;I am a terribly forgetful, error-prone mammal, so I automated as much as I could.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;I develop on an OS X machine, but any POSIX system should work too. With a little extra effort, you should be able to get this working on Windows as well, though I can&#39;t help you out much.&lt;/p&gt; &#xA;&lt;p&gt;Most of the work is orchestrated by make. The build scripts, test runner, and other utilities are all written in &lt;a href=&#34;https://dart.dev/&#34;&gt;Dart&lt;/a&gt;. Instructions to install Dart are &lt;a href=&#34;https://dart.dev/get-dart&#34;&gt;here&lt;/a&gt;. Once you have Dart installed and on your path, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This downloads all of the packages used by the build and test scripts.&lt;/p&gt; &#xA;&lt;p&gt;In order to compile the two interpreters, you also need a C compiler on your path as well as &lt;code&gt;javac&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve got that setup, try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything is working, that will generate the site for the book as well as compiling the two interpreters clox and jlox. You can run either interpreter right from the root of the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./clox&#xA;$ ./jlox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hacking on the book&lt;/h3&gt; &#xA;&lt;p&gt;The Markdown and snippets of source code are woven together into the final HTML using a hand-written static site generator that started out as a &lt;a href=&#34;https://github.com/munificent/game-programming-patterns/raw/master/script/format.py&#34;&gt;single tiny Python script&lt;/a&gt; for &lt;a href=&#34;http://gameprogrammingpatterns.com/&#34;&gt;my first book&lt;/a&gt; and somehow grew into something approximating a real program.&lt;/p&gt; &#xA;&lt;p&gt;The generated HTML is committed in the repo under &lt;code&gt;site/&lt;/code&gt;. It is built from a combination of Markdown for prose, which lives in &lt;code&gt;book/&lt;/code&gt;, and snippets of code that are weaved in from the Java and C implementations in &lt;code&gt;java/&lt;/code&gt; and &lt;code&gt;c/&lt;/code&gt;. (All of those funny looking comments in the source code are how it knows which snippet goes where.)&lt;/p&gt; &#xA;&lt;p&gt;The script that does all the magic is &lt;code&gt;tool/bin/build.dart&lt;/code&gt;. You can run that directly, or run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make book&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That generates the entire site in one batch. If you are incrementally working on it, you&#39;ll want to run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This runs a little HTTP server on localhost rooted at the &lt;code&gt;site/&lt;/code&gt; directory. Any time you request a page, it regenerates any files whose sources have been changed, including Markdown files, interpreter source files, templates, and assets. Just let that keep running, edit files locally, and refresh your browser to see the changes.&lt;/p&gt; &#xA;&lt;h3&gt;Building the interpreters&lt;/h3&gt; &#xA;&lt;p&gt;You can build each interpreter like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make clox&#xA;$ make jlox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds the final version of each interpreter as it appears at the end of its part in the book.&lt;/p&gt; &#xA;&lt;p&gt;You can also see what the interpreters look like at the end of each chapter. (I use this to make sure they are working even in the middle of the book.) This is driven by a script, &lt;code&gt;tool/bin/split_chapters.dart&lt;/code&gt; that uses the same comment markers for the code snippets to determine which chunks of code are present in each chapter. It takes only the snippets that have been seen by the end of each chapter and produces a new copy of the source in &lt;code&gt;gen/&lt;/code&gt;, one directory for each chapter&#39;s code. (These are also an easier way to view the source code since they have all of the distracting marker comments stripped out.)&lt;/p&gt; &#xA;&lt;p&gt;Then, each of those can be built separately. Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make c_chapters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in the &lt;code&gt;build/&lt;/code&gt; directory, you&#39;ll get an executable for each chapter, like &lt;code&gt;chap14_chunks&lt;/code&gt;, etc. Likewise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make java_chapters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This compiles the Java code to classfiles in &lt;code&gt;build/gen/&lt;/code&gt; in a subdirectory for each chapter.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;I have a full Lox test suite that I use to ensure the interpreters in the book do what they&#39;re supposed to do. The test cases live in &lt;code&gt;test/&lt;/code&gt;. The Dart program &lt;code&gt;tool/bin/test.dart&lt;/code&gt; is a test runner that runs each of those test files on a Lox interpreter, parses the result, and validates that that the test does what it&#39;s expected to do.&lt;/p&gt; &#xA;&lt;p&gt;There are various interpreters you can run the tests against:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make test       # The final versions of clox and jlox.&#xA;$ make test_clox  # The final version of clox.&#xA;$ make test_jlox  # The final version of jlox.&#xA;$ make test_c     # Every chapter&#39;s version of clox.&#xA;$ make test_java  # Every chapter&#39;s version of jlox.&#xA;$ make test_all   # All of the above.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing your implementation&lt;/h3&gt; &#xA;&lt;p&gt;You are welcome to use the test suite and the test runner to test your own Lox implementation. The test runner is at &lt;code&gt;tool/bin/test.dart&lt;/code&gt; and can be given a custom interpreter executable to run using &lt;code&gt;--interpreter&lt;/code&gt;. For example, if you had an interpreter executable at &lt;code&gt;my_code/boblox&lt;/code&gt;, you could test it like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dart tool/bin/test.dart clox --interpreter my_code/boblox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You still need to tell it which suite of tests to run because that determines the test expectations. If your interpreter should behave like jlox, use &#34;jlox&#34; as the suite name. If it behaves like clox, use &#34;clox&#34;. If your interpreter is only complete up to the end of one of the chapters in the book, you can use that chapter as the suite, like &#34;chap10_functions&#34;. See the Makefile for the names of all of the chapters.&lt;/p&gt; &#xA;&lt;p&gt;If your interpreter needs other command line arguments passed to use, pass them to the test runner using &lt;code&gt;--arguments&lt;/code&gt; and it will forward to your interpreter.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;asset/&lt;/code&gt; – Sass files and jinja2 templates used to generate the site.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;book/&lt;/code&gt; - Markdown files for the text of each chapter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build/&lt;/code&gt; - Intermediate files and other build output (except for the site itself) go here. Not committed to Git.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c/&lt;/code&gt; – Source code of clox, the interpreter written in C. Also contains an XCode project, if that&#39;s your thing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gen/&lt;/code&gt; – Java source files generated by GenerateAst.java go here. Not committed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;java/&lt;/code&gt; – Source code of jlox, the interpreter written in Java.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;note/&lt;/code&gt; – Various research, notes, TODOs, and other miscellanea.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;note/answers&lt;/code&gt; – Sample answers for the challenges. No cheating!&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;site/&lt;/code&gt; – The final generated site. The contents of this directory directly mirror craftinginterpreters.com. Most content here is generated by build.py, but fonts, images, and JS only live here. Everything is committed, even the generated content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test/&lt;/code&gt; – Test cases for the Lox implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tool/&lt;/code&gt; – Dart package containing the build, test, and other scripts.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>w3c/csswg-drafts</title>
    <updated>2022-06-26T02:00:59Z</updated>
    <id>tag:github.com,2022-06-26:/w3c/csswg-drafts</id>
    <link href="https://github.com/w3c/csswg-drafts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CSS Working Group Editor Drafts&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;a href=&#34;https://www.w3.org/Style/CSS/&#34;&gt;CSS Working Group&lt;/a&gt; Specifications&lt;/h3&gt; &#xA;&lt;p&gt;This is the official CSSWG repository for editor&#39;s drafts of CSS specifications.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/w3c/csswg-drafts/main/CONTRIBUTING.md&#34;&gt;contributor guidelines&lt;/a&gt; for how to contribute.&lt;/p&gt; &#xA;&lt;p&gt;Specification issues are discussed as issues in this repository. General CSSWG discussion can be found on the public &lt;a href=&#34;https://lists.w3.org/Archives/Public/www-style/&#34;&gt;www-style mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To read the specifications in this repository, see them at the &lt;a href=&#34;https://drafts.csswg.org/&#34;&gt;index of all specifications&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repository is a two-way mirror of &lt;a href=&#34;https://hg.csswg.org/drafts&#34;&gt;https://hg.csswg.org/drafts&lt;/a&gt;, and contributing using Mercurial is also possible.&lt;/p&gt; &#xA;&lt;p&gt;Also see the related repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/w3c/fxtf-drafts/&#34;&gt;fxtf-drafts github repository&lt;/a&gt; - &lt;a href=&#34;https://hg.fxtf.org/drafts/&#34;&gt;fxtf mercurial repository&lt;/a&gt; - &lt;a href=&#34;https://drafts.fxtf.org/&#34;&gt;FX Task Force generated specification index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/w3c/css-houdini-drafts/&#34;&gt;css-houdini-drafts github repository&lt;/a&gt; - &lt;a href=&#34;https://hg.css-houdini.org/drafts/&#34;&gt;css-houdini mercurial repository&lt;/a&gt; - &lt;a href=&#34;https://drafts.css-houdini.org/&#34;&gt;CSS-TAG Houdini Task Force generated specification index&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>