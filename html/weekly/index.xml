<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-12T01:40:22Z</updated>
  <subtitle>Weekly Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alufers/mitmproxy2swagger</title>
    <updated>2025-01-12T01:40:22Z</updated>
    <id>tag:github.com,2025-01-12:/alufers/mitmproxy2swagger</id>
    <link href="https://github.com/alufers/mitmproxy2swagger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automagically reverse-engineer REST APIs via capturing traffic&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mitmproxy2swagger&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/mitmproxy2swagger&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/mitmproxy2swagger.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://archlinux.org/packages/extra/any/mitmproxy2swagger/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/archlinux-mitmproxy2swagger-blue&#34; alt=&#34;Arch Linux repository&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5400940/168086818-c48f60ab-3f95-42eb-b435-c8b1a6326b81.mp4&#34;&gt;https://user-images.githubusercontent.com/5400940/168086818-c48f60ab-3f95-42eb-b435-c8b1a6326b81.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tool for automatically converting &lt;a href=&#34;https://mitmproxy.org/&#34;&gt;mitmproxy&lt;/a&gt; captures to &lt;a href=&#34;https://swagger.io/specification/&#34;&gt;OpenAPI 3.0&lt;/a&gt; specifications. This means that you can automatically reverse-engineer REST APIs by just running the apps and capturing the traffic.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;🆕 NEW!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Added support for processing HAR exported from the browser DevTools. See &lt;a href=&#34;https://raw.githubusercontent.com/alufers/mitmproxy2swagger/master/#har&#34;&gt;Usage - HAR&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First you will need python3 and pip3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install mitmproxy2swagger&#xA;# ... or ...&#xA;$ pip3 install mitmproxy2swagger&#xA;# ... or ...&#xA;$ git clone git@github.com:alufers/mitmproxy2swagger.git&#xA;$ cd mitmproxy2swagger&#xA;$ docker build -t mitmproxy2swagger .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then clone the repo and run &lt;code&gt;mitmproxy2swagger&lt;/code&gt; as per examples below.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Mitmproxy&lt;/h3&gt; &#xA;&lt;p&gt;To create a specification by inspecting HTTP traffic you will need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Capture the traffic by using the mitmproxy tool. I personally recommend using mitmweb, which is a web interface built-in to mitmproxy.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mitmweb&#xA;Web server listening at http://127.0.0.1:8081/&#xA;Proxy server listening at http://*:9999&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To configure your client to use the proxy exposed by mitm proxy, please consult the &lt;a href=&#34;https://docs.mitmproxy.org/stable/&#34;&gt;mitmproxy documentation&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Save the traffic to a flow file.&lt;/p&gt; &lt;p&gt;In mitmweb you can do this by using the &#34;File&#34; menu and selecting &#34;Save&#34;:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alufers/mitmproxy2swagger/master/docs/mitmweb_save.png&#34; alt=&#34;A screenshot showing the location of the &amp;quot;Save&amp;quot; option in the &amp;quot;File&amp;quot; menu&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the first pass of mitmproxy2swagger:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mitmproxy2swagger -i &amp;lt;path_to_mitmptoxy_flow&amp;gt; -o &amp;lt;path_to_output_schema&amp;gt; -p &amp;lt;api_prefix&amp;gt;&#xA;# ... or ...&#xA;$ docker run -it -v $PWD:/app mitmproxy2swagger mitmproxy2swagger -i &amp;lt;path_to_mitmptoxy_flow&amp;gt; -o &amp;lt;path_to_output_schema&amp;gt; -p &amp;lt;api_prefix&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please note that you can use an existing schema, in which case the existing schema will be extended with the new data. You can also run it a few times with different flow captures, the captured data will be safely merged.&lt;/p&gt; &lt;p&gt;&lt;code&gt;&amp;lt;api_prefix&amp;gt;&lt;/code&gt; is the base url of the API you wish to reverse-engineer. You will need to obtain it by observing the requests being made in mitmproxy.&lt;/p&gt; &lt;p&gt;For example if an app has made requests like these:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;https://api.example.com/v1/login&#xA;https://api.example.com/v1/users/2&#xA;https://api.example.com/v1/users/2/profile&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The likely prefix is &lt;code&gt;https://api.example.com/v1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Running the first pass should have created a section in the schema file like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;x-path-templates:&#xA;  # Remove the ignore: prefix to generate an endpoint with its URL&#xA;  # Lines that are closer to the top take precedence, the matching is greedy&#xA;  - ignore:/addresses&#xA;  - ignore:/basket&#xA;  - ignore:/basket/add&#xA;  - ignore:/basket/checkouts&#xA;  - ignore:/basket/coupons/attach/{id}&#xA;  - ignore:/basket/coupons/attach/104754&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You should edit the schema file with a text editor and remove the &lt;code&gt;ignore:&lt;/code&gt; prefix from the paths you wish to be generated. You can also adjust the parameters appearing in the paths.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the second pass of mitmproxy2swagger:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mitmproxy2swagger -i &amp;lt;path_to_mitmptoxy_flow&amp;gt; -o &amp;lt;path_to_output_schema&amp;gt; -p &amp;lt;api_prefix&amp;gt; [--examples]&#xA;# ... or ...&#xA;$ docker run -it -v $PWD:/app mitmproxy2swagger mitmproxy2swagger -i &amp;lt;path_to_mitmptoxy_flow&amp;gt; -o &amp;lt;path_to_output_schema&amp;gt; -p &amp;lt;api_prefix&amp;gt; [--examples]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run the command a second time (with the same schema file). It will pick up the edited lines and generate endpoint descriptions.&lt;/p&gt; &lt;p&gt;Please note that mitmproxy2swagger will not overwrite existing endpoint descriptions, if you want to overwrite them, you can delete them before running the second pass.&lt;/p&gt; &lt;p&gt;Passing &lt;code&gt;--examples&lt;/code&gt; will add example data to requests and responses. Take caution when using this option, as it may add sensitive data (tokens, passwords, personal information etc.) to the schema. Passing &lt;code&gt;--headers&lt;/code&gt; will add headers data to requests and responses. Take caution when using this option, as it may add sensitive data (tokens, passwords, personal information etc.) to the schema.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;HAR&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Capture and export the traffic from the browser DevTools.&lt;/p&gt; &lt;p&gt;In the browser DevTools, go to the Network tab and click the &#34;Export HAR&#34; button.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alufers/mitmproxy2swagger/master/docs/export_har_button.png&#34; alt=&#34;A screenshot showing where the export har button is located&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continue the same way you would do with the mitmproxy dump. &lt;code&gt;mitmproxy2swagger&lt;/code&gt; will automatically detect the HAR file and process it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example output&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/alufers/mitmproxy2swagger/master/example_outputs/&#34;&gt;examples&lt;/a&gt;. You will find a generated schema there and an html file with the generated documentation (via &lt;a href=&#34;https://www.npmjs.com/package/redoc-cli&#34;&gt;redoc-cli&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;See the generated html file &lt;a href=&#34;https://raw.githack.com/alufers/mitmproxy2swagger/master/example_outputs/lisek-static.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development and contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project uses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python-poetry.org/&#34;&gt;poetry&lt;/a&gt; for dependency management&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; for code formatting and linting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.pytest.org/en/stable/&#34;&gt;pytest&lt;/a&gt; for unit testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run linters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit run --all-files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install pre-commit hooks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry run pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run tests with coverage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry run pytest --cov=mitmproxy2swagger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>horilla-opensource/horilla</title>
    <updated>2025-01-12T01:40:22Z</updated>
    <id>tag:github.com,2025-01-12:/horilla-opensource/horilla</id>
    <link href="https://github.com/horilla-opensource/horilla" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Horilla is a free and open source HR software.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;Horilla 🦍&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Horilla is a Free and Open Source HRMS Software.&lt;/p&gt; &#xA;&lt;img width=&#34;1470&#34; alt=&#34;Screenshot 2024-03-15 at 3 05 20 PM&#34; src=&#34;https://github.com/horilla-opensource/horilla/assets/131998600/1317bd0a-03a8-40be-8fb2-ecb655bb5c13&#34;&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Horilla can be installed on your system by following the below commands.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll have to install python, django and the database you wish to use for the project as a prerequisites.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Python Installation&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ubuntu comes with Python pre-installed, but if you need to install a specific version or if Python is not installed, you can use the terminal to install it.&lt;/p&gt; &#xA;&lt;p&gt;Open the terminal and type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  sudo apt-get install python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the latest version of Python 3.&lt;/p&gt; &#xA;&lt;p&gt;To check if Python is installed correctly, type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should output the version number of Python that you just installed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To install Python on Windows, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version of Python from the official website: &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;https://www.python.org/downloads/windows/&lt;/a&gt; .&lt;/li&gt; &#xA; &lt;li&gt;Run the installer and select &#34;Add Python to PATH&#34; during the installation process.&lt;/li&gt; &#xA; &lt;li&gt;Choose the installation directory and complete the installation process.&lt;/li&gt; &#xA; &lt;li&gt;To check if Python is installed correctly, open the Command Prompt and type the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should output the version number of Python that you just installed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;macOS comes with Python pre-installed, but if you need to install a specific version or if Python is not installed, you can use Homebrew to install it.&lt;/p&gt; &#xA;&lt;p&gt;Follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Homebrew by running the following command in the terminal:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install Python by running the following command in the terminal:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check if Python is installed correctly, type the following command in the terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should output the version number of Python that you just installed.&lt;/p&gt; &#xA;&lt;p&gt;Congratulations, you have successfully installed Python on Ubuntu, Windows, or macOS! You can now start using Python to build applications.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Installing Django&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Before installing Django, you must have Python installed on your machine.&lt;/p&gt; &#xA;&lt;p&gt;To install Django, follow the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a virtual environment:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It is highly recommended to create a virtual environment before installing Django.&lt;/p&gt; &#xA;&lt;p&gt;A virtual environment allows you to isolate your Python environment and avoid conflicts with other Python packages that may be installed on your machine.&lt;/p&gt; &#xA;&lt;p&gt;To create a virtual environment, open the terminal and navigate to the directory where you want to create the environment. Then type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m venv myenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new virtual environment named &#34;myenv&#34;.&lt;/p&gt; &#xA;&lt;p&gt;To activate the virtual environment, type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source myenv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will activate the virtual environment and you should see the name of the environment in the terminal prompt.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that to activate your virtual environment on Widows, you will need to run the following code below (See this &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;link&lt;/a&gt; to fully understand the differences between platforms):&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; env/Scripts/activate.bat //In CMD&#xA; env/Scripts/Activate.ps1 //In Powershel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install Django:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;With the virtual environment activated, you can now install Django using pip, the Python package manager. Type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install Django&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download and install the latest stable version of Django.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Verify the installation:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To verify that Django is installed correctly, type the following command in the terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m django --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should output the version number of Django that you just installed.&lt;/p&gt; &#xA;&lt;p&gt;Congratulations, you have successfully installed Django on your machine! You can now start building web applications using Django.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Installing Horilla&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;For installing the Horilla, follow the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the project repository from GitHub:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/horilla-opensource/horilla.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install the required dependencies using pip:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For installing the python dependencies required for the project, run the following command by going into the project directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you face any issue with the installing the pycairo package in ubuntu or macos, please follow the following commands and try the requirements installation command after this command.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt; &lt;code&gt;sudo apt-get install libcairo2-dev&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;MacOS&lt;/strong&gt; &lt;code&gt;brew install py3cairo&lt;/code&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Run the requirement installation command again&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Set up the database by running the following commands: &lt;em&gt;By default the test database will be loaded which will have demo data inside it. If you wish to start with a fresh database, you can either remove the TestDB_Horilla.sqlite3 from the project directory or change the name of the database inside the horilla/settings.py file. (You can configure different database based on your choice, of which configurations settings is given below in the documentation.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python manage.py makemigrations&#xA;python manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Create an admin employee account (use this command if you are starting with a fresh database, for the demo database there is already a Horilla admin user created with credentials &lt;em&gt;admin&lt;/em&gt; and &lt;em&gt;admin&lt;/em&gt; as username and password respectively).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python manage.py createhorillauser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: createhorillauser is a similar command to createsuperuser in Django, which creates an admin user along with a related admin employee into the database.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; Enter the details asked for creating the admin user for the project. &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Enabling the translations and breadcrumbs text&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python manage.py compilemessages&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Collect all the static files in the &#39;settings.STATIC_ROOT&#39; directory (your_project/staticfiles/ by default). In production, you should serve this directory directly by your webserver.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python manage.py collectstatic&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Running the project To run the project locally, execute the following command:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python manage.py runserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything is configured correctly, you should be able to access your Horilla app at &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note:&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;If you wish to run the Horilla application to any other port, you can specify the port number after the runserver command.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;eg: &lt;em&gt;python manage.py runserver &amp;lt;port_number&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note:&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;By default a SQLite database will be setup for the project with demo data already loaded.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;If you wish to start with a fresh database, remove the db.sqlite3 file from the project directory and run the migrate command followed by the createhorillauser command to start with a fresh database.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Or if you wish to change the database, refer the below section.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Database Setup&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;By default an SQLite database will be setup for the project, incase you wish to change the database of your choice, please use the below reference to do the same.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To setup postgresql database for the project, first you have to install the PostgreSQL and its python package &lt;em&gt;&lt;strong&gt;psycopg2&lt;/strong&gt;&lt;/em&gt; .&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the psycopg2 package using pip. This package is a PostgreSQL database adapter for Python.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install psycopg2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;In the project settings file (settings.py), add the following database settings:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;ENGINE&#39;: &#39;django.db.backends.postgresql&#39;,&#xA;        &#39;NAME&#39;: &#39;&amp;lt;database_name&amp;gt;&#39;,&#xA;        &#39;USER&#39;: &#39;&amp;lt;database_user&amp;gt;&#39;,&#xA;        &#39;PASSWORD&#39;: &#39;&amp;lt;database_password&amp;gt;&#39;,&#xA;        &#39;HOST&#39;: &#39;&amp;lt;database_host&amp;gt;&#39;,&#xA;        &#39;PORT&#39;: &#39;&amp;lt;database_port&amp;gt;&#39;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;em&gt;&amp;lt;database_name&amp;gt;, &amp;lt;database_user&amp;gt;, &amp;lt;database_password&amp;gt;, &amp;lt;database_host&amp;gt;, and &amp;lt;database_port&amp;gt;&lt;/em&gt; with your PostgreSQL database settings.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run migrations to create the necessary database tables.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python manage.py makemigrations&#xA;python manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details: &lt;a href=&#34;https://docs.djangoproject.com/en/4.2/ref/databases/#postgresql-notes&#34;&gt;Django PostgreSQL Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To configure a MySQL database in Django, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;em&gt;&lt;strong&gt;mysqlclient&lt;/strong&gt;&lt;/em&gt; package which will allow Django to interact with MySQL. You can install it using pip:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install mysqlclient&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;In the project settings file (settings.py), add the following database settings:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,&#xA;        &#39;NAME&#39;: &#39;&amp;lt;database_name&amp;gt;&#39;,&#xA;        &#39;USER&#39;: &#39;&amp;lt;database_user&amp;gt;&#39;,&#xA;        &#39;PASSWORD&#39;: &#39;&amp;lt;database_password&amp;gt;&#39;,&#xA;        &#39;HOST&#39;: &#39;&amp;lt;database_host&amp;gt;&#39;,&#xA;        &#39;PORT&#39;: &#39;&amp;lt;database_port&amp;gt;&#39;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;em&gt;&amp;lt;database_name&amp;gt;, &amp;lt;database_user&amp;gt;, &amp;lt;database_password&amp;gt;, &amp;lt;database_host&amp;gt;, and &amp;lt;database_port&amp;gt;&lt;/em&gt; with the appropriate values for your MySQL installation.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run migrations to create the necessary database tables.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python manage.py makemigrations&#xA;python manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details: &lt;a href=&#34;https://docs.djangoproject.com/en/4.2/ref/databases/#mysql-notes&#34;&gt;Django MySQL Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MariaDB&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To configure a MariaDB database with Django, you can follow the same steps used for MySQL database configuration as shown above. For more details: &lt;a href=&#34;https://docs.djangoproject.com/en/4.2/ref/databases/#mariadb-notes&#34;&gt;Django MariaDB Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To configure a SQLite database with Django, you can follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the project settings file (settings.py), add the following database settings:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,&#xA;        &#39;NAME&#39;: BASE_DIR / &#39;db.sqlite3&#39;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a SQLite database in your project directory named db.sqlite3.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run migrations to create the necessary database tables.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python manage.py makemigrations&#xA;python manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note that SQLite has some limitations compared to other databases, so you may need to consider these limitations if you have a large amount of data or a high level of concurrency in your application.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For more details: &lt;a href=&#34;https://docs.djangoproject.com/en/4.2/ref/databases/#sqlite-notes&#34;&gt;Django SQLite Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Oracle&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To configure an Oracle database with Django, you can follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the cx_Oracle package which will allow Django to interact with Oracle. You can install it using pip:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install cx_Oracle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;In the project settings file (settings.py), add the following database settings:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;ENGINE&#39;: &#39;django.db.backends.oracle&#39;,&#xA;        &#39;NAME&#39;: &#39;&amp;lt;database_name&amp;gt;&#39;,&#xA;        &#39;USER&#39;: &#39;&amp;lt;database_user&amp;gt;&#39;,&#xA;        &#39;PASSWORD&#39;: &#39;&amp;lt;database_password&amp;gt;&#39;,&#xA;        &#39;HOST&#39;: &#39;&amp;lt;database_host&amp;gt;&#39;,&#xA;        &#39;PORT&#39;: &#39;&amp;lt;database_port&amp;gt;&#39;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;em&gt;&amp;lt;database_name&amp;gt;, &amp;lt;database_user&amp;gt;, &amp;lt;database_password&amp;gt;, &amp;lt;database_host&amp;gt;, and &amp;lt;database_port&amp;gt;&lt;/em&gt; with the appropriate values for your Oracle installation.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run migrations to create the necessary database tables.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python manage.py makemigrations&#xA;python manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note that Oracle has some specific requirements for its database setup, so you may need to consult Oracle&#39;s documentation for more information on how to set up your database correctly.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For more details: &lt;a href=&#34;https://docs.djangoproject.com/en/4.2/ref/databases/#oracle-notes&#34;&gt;Django Oracle Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recruitment&lt;/li&gt; &#xA; &lt;li&gt;Onboarding&lt;/li&gt; &#xA; &lt;li&gt;Employee&lt;/li&gt; &#xA; &lt;li&gt;Attendance&lt;/li&gt; &#xA; &lt;li&gt;Leave&lt;/li&gt; &#xA; &lt;li&gt;Asset&lt;/li&gt; &#xA; &lt;li&gt;Payroll&lt;/li&gt; &#xA; &lt;li&gt;Performance Management System&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Calendar App - Development Under Process&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Project Management - Development Under Process&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Chat App - Development Under Process&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;More to come.....&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Laguages and Tools Used:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://getbootstrap.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg?sanitize=true&#34; alt=&#34;bootstrap&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.chartjs.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://www.chartjs.org/media/logo-title.svg?sanitize=true&#34; alt=&#34;chartjs&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.w3schools.com/css/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg?sanitize=true&#34; alt=&#34;css3&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.djangoproject.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://cdn.worldvectorlogo.com/logos/django.svg?sanitize=true&#34; alt=&#34;django&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://git-scm.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://www.vectorlogo.zone/logos/git-scm/git-scm-icon.svg?sanitize=true&#34; alt=&#34;git&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.w3.org/html/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg?sanitize=true&#34; alt=&#34;html5&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.linux.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/devicons/devicon/master/icons/linux/linux-original.svg?sanitize=true&#34; alt=&#34;linux&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.mysql.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/devicons/devicon/master/icons/mysql/mysql-original-wordmark.svg?sanitize=true&#34; alt=&#34;mysql&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.oracle.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/devicons/devicon/master/icons/oracle/oracle-original.svg?sanitize=true&#34; alt=&#34;oracle&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.postgresql.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/devicons/devicon/master/icons/postgresql/postgresql-original-wordmark.svg?sanitize=true&#34; alt=&#34;postgresql&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.python.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/devicons/devicon/master/icons/python/python-original.svg?sanitize=true&#34; alt=&#34;python&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.sqlite.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt; &lt;img src=&#34;https://www.vectorlogo.zone/logos/sqlite/sqlite-icon.svg?sanitize=true&#34; alt=&#34;sqlite&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;strong&gt;AUTHORS&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.cybrosys.com/&#34;&gt;Cybrosys Technologies&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ABOUT&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.horilla.com/&#34;&gt;Horilla&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>e2b-dev/E2B</title>
    <updated>2025-01-12T01:40:22Z</updated>
    <id>tag:github.com,2025-01-12:/e2b-dev/E2B</id>
    <link href="https://github.com/e2b-dev/E2B" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Secure open source cloud runtime for AI apps &amp; AI agents&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/e2b-dev/E2B/main/readme-assets/logo-circle.png&#34; alt=&#34;e2b logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://pypi.org/project/e2b/&#34;&gt; &lt;img alt=&#34;Last 1 month downloads for the Python SDK&#34; loading=&#34;lazy&#34; width=&#34;200&#34; height=&#34;20&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent;width:auto;height:100%&#34; src=&#34;https://img.shields.io/pypi/dm/e2b?label=PyPI%20Downloads&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/e2b&#34;&gt; &lt;img alt=&#34;Last 1 month downloads for the JavaScript SDK&#34; loading=&#34;lazy&#34; width=&#34;200&#34; height=&#34;20&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent;width:auto;height:100%&#34; src=&#34;https://img.shields.io/npm/dm/e2b?label=NPM%20Downloads&#34;&gt; &lt;/a&gt; &lt;/h4&gt; &#xA;&lt;!--&#xA;&lt;img width=&#34;100%&#34; src=&#34;/readme-assets/preview.png&#34; alt=&#34;Cover image&#34;&gt;&#xA;---&gt; &#xA;&lt;h2&gt;What is E2B?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.e2b.dev/&#34;&gt;E2B&lt;/a&gt; is an open-source infrastructure that allows you to run AI-generated code in secure isolated sandboxes in the cloud. To start and control sandboxes, use our &lt;a href=&#34;https://www.npmjs.com/package/@e2b/code-interpreter&#34;&gt;JavaScript SDK&lt;/a&gt; or &lt;a href=&#34;https://pypi.org/project/e2b_code_interpreter&#34;&gt;Python SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This repository contains the core E2B SDK that&#39;s used in our main &lt;a href=&#34;https://github.com/e2b-dev/code-interpreter&#34;&gt;E2B Code Interpreter SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Run your first Sandbox&lt;/h2&gt; &#xA;&lt;h3&gt;1. Install SDK&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript / TypeScript&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm i @e2b/code-interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install e2b-code-interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Get your E2B API key&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sign up to E2B &lt;a href=&#34;https://e2b.dev&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Get your API key &lt;a href=&#34;https://e2b.dev/dashboard?tab=keys&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set environment variable with your API key&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;E2B_API_KEY=e2b_***&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Execute code with code interpreter inside Sandbox&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript / TypeScript&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Sandbox } from &#39;@e2b/code-interpreter&#39;&#xA;&#xA;const sandbox = await Sandbox.create()&#xA;await sbx.runCode(&#39;x = 1&#39;)&#xA;&#xA;const execution = await sbx.runCode(&#39;x+=1; x&#39;)&#xA;console.log(execution.text)  // outputs 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from e2b_code_interpreter import Sandbox&#xA;&#xA;with Sandbox() as sandbox:&#xA;    sandbox.run_code(&#34;x = 1&#34;)&#xA;    execution = sandbox.run_code(&#34;x+=1; x&#34;)&#xA;    print(execution.text)  # outputs 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Check docs&lt;/h3&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://e2b.dev/docs&#34;&gt;E2B documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;5. E2B cookbook&lt;/h3&gt; &#xA;&lt;p&gt;Visit our &lt;a href=&#34;https://github.com/e2b-dev/e2b-cookbook/tree/main&#34;&gt;Cookbook&lt;/a&gt; to get inspired by examples with different LLMs and AI frameworks.&lt;/p&gt;</summary>
  </entry>
</feed>