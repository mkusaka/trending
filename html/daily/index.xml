<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-13T01:32:46Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>learntocloud/learn-to-cloud</title>
    <updated>2022-07-13T01:32:46Z</updated>
    <id>tag:github.com,2022-07-13:/learntocloud/learn-to-cloud</id>
    <link href="https://github.com/learntocloud/learn-to-cloud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learn the fundamentals of cloud computing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome&lt;/h1&gt; &#xA;&lt;h2&gt;What is Learn to Cloud?&lt;/h2&gt; &#xA;&lt;p&gt;Learn to Cloud is a GUIDE that originated from &lt;a href=&#34;https://twitter.com/madebygps/status/1406258053427740672?lang=en&#34;&gt;this tweet&lt;/a&gt;. It&#39;s not a book or course. The goal is to provide an outline of skills you need to learn to get into Cloud Computing. At the end of it you should have the technical knowledge for roles like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;System administrator.&lt;/li&gt; &#xA; &lt;li&gt;Cloud Support Engineer.&lt;/li&gt; &#xA; &lt;li&gt;Cloud Administrator.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions? Comments? Feedback?&lt;/h2&gt; &#xA;&lt;p&gt;Please open an &lt;a href=&#34;https://github.com/learntocloud/learn-to-cloud/issues&#34;&gt;Issue&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Phases&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Order&lt;/th&gt; &#xA;   &lt;th&gt;Topic&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learntocloud/learn-to-cloud/main/phase0/README.md&#34;&gt;0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Start from zero tech experience&lt;/td&gt; &#xA;   &lt;td&gt;optional&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learntocloud/learn-to-cloud/main/phase1/README.md&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux and Networking fundamentals&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learntocloud/learn-to-cloud/main/phase2/README.md&#34;&gt;2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Programming fundamentals&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learntocloud/learn-to-cloud/main/phase3/README.md&#34;&gt;3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cloud Platform fundamentals&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learntocloud/learn-to-cloud/main/phase4/README.md&#34;&gt;4&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DevOps fundamentals&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learntocloud/learn-to-cloud/main/phase5/README.md&#34;&gt;5&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cloud Security fundamentals&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learntocloud/learn-to-cloud/main/phase1/README.md&#34;&gt;Go to Phase 1: Linux and Networking fundamentals&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>xxlllq/system_architect</title>
    <updated>2022-07-13T01:32:46Z</updated>
    <id>tag:github.com,2022-07-13:/xxlllq/system_architect</id>
    <link href="https://github.com/xxlllq/system_architect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💯高质量、最全面的2022年系统架构设计师（软考高级）备考资源库。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;span&gt;💯&lt;/span&gt;系统架构设计师复习资料&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;可通过QQ：&lt;strong&gt;1101464221&lt;/strong&gt; 、邮箱：&lt;strong&gt;&lt;a href=&#34;mailto:xxlllq@qq.com&#34;&gt;xxlllq@qq.com&lt;/a&gt;&lt;/strong&gt;联系作者。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;该项目从18年免费更新维护至今，帮助不少网友花最少的经济、投入最少的时间通过了考试，但是最近收到群友反馈网上存在大量&lt;a href=&#34;https://github.com/xxlllq/system_architect/raw/master/%E8%B5%84%E6%BA%90%E4%BF%9D%E6%8A%A4%E8%AE%B0%E5%BD%95/%E8%AE%B0%E5%BD%95.md&#34;&gt;贩卖本仓库免费资源&lt;/a&gt;获取利益的情况。决定从2021年8月24日开始，部分资源后续将不再免费&lt;span&gt;👉&lt;/span&gt;&lt;a href=&#34;https://fchxxn.com/exam&#34; target=&#34;_blank&#34; style=&#34;color:#f5803e&#34;&gt;点击获取最新全套资料&lt;/a&gt; &lt;span&gt;👈&lt;/span&gt; ，之前QQ交流群群友提供整理的资料将继续免费开放。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;&lt;span&gt;👉&lt;/span&gt;&lt;a href=&#34;https://fchxxn.com/exam&#34; target=&#34;_blank&#34; style=&#34;color:#f5803e&#34;&gt;点击获取最新全套资料&lt;/a&gt; &lt;span&gt;👈&lt;/span&gt; &lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;通过人数&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;👏&lt;/span&gt;&lt;a href=&#34;https://github.com/xxlllq/system_architect/raw/master/%E7%BE%A4%E9%80%9A%E8%BF%87%E4%BA%BA%E6%95%B0/2021%E4%B8%8B%E5%8D%8A%E5%B9%B4/2021.md&#34;&gt;2021下半年①~⑥群通过180人，点击查看详情 &amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;群名&lt;/th&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;通过人数&lt;/th&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;群名&lt;/th&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;通过人数&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;系统架构设计师①群&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;26人&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;系统架构设计师④群&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;26人&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;系统架构设计师②群&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;27人&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;系统架构设计师⑤群&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;25人&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;系统架构设计师③群&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;46人&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;系统架构设计师⑥群&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;30人&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;p&gt;&lt;span&gt;👏&lt;/span&gt;&lt;a href=&#34;https://github.com/xxlllq/system_architect/raw/master/%E7%BE%A4%E9%80%9A%E8%BF%87%E4%BA%BA%E6%95%B0/2020%E4%B8%8B%E5%8D%8A%E5%B9%B4/2020.md&#34;&gt;2020下半年①~②群通过116人，点击查看详情 &amp;gt; &lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;👏&lt;/span&gt;&lt;a href=&#34;https://github.com/xxlllq/system_architect/raw/master/%E7%BE%A4%E9%80%9A%E8%BF%87%E4%BA%BA%E6%95%B0/2019%E4%B8%8B%E5%8D%8A%E5%B9%B4/2019.md&#34;&gt;2019下半年①群通过104人，点击查看详情 &amp;gt; &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[x] &lt;strong&gt;2022年03月02日&lt;/strong&gt;：&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;2021年论文题1《论面向切面的编程技术及其应用》范文。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[x] &lt;strong&gt;2021年11月23日&lt;/strong&gt;：&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;更新2021年真题及解析，更新新版本《系统架构设计师2009至2021真题及解析》、《系统架构设计师2009至2021无解析真题》。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/真题/系统架构设计师2009至2021真题及解析（2022年版）.png&#34; title=&#34;点击查看大图：系统架构设计师2009至2020真题及解析&#34; width=&#34;220/&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/真题/系统架构设计师2009至2021无解析真题（2022年版）.png&#34; title=&#34;点击查看大图：系统架构设计师2009至2020无解析真题&#34; width=&#34;220&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[x] &lt;strong&gt;2021年10月4日&lt;/strong&gt;：&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;更新25篇2009到2021年论文真题范文以及多篇参考范文。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[x] &lt;strong&gt;2021年9月17日&lt;/strong&gt;：&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;2013年综合知识题2题目更正。&lt;/li&gt; &#xA;   &lt;li&gt;新增[论数据挖掘技术的应用]、[论Web系统的测试技术及其应用]、[论UP(统一过程方法)的应用]等论文范文。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[x] &lt;strong&gt;2021年9月14日&lt;/strong&gt;：&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;2017年案例分析题2第1问答案更正、2019年综合知识题28答案更正。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[x] &lt;strong&gt;2021年9月4日&lt;/strong&gt;：&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;更新新版本《系统架构设计师综合知识章节分类真题+解析[2020版]》。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[x] &lt;strong&gt;2021年9月3日&lt;/strong&gt;：&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;2020年综合知识新增部分真题及解析；2019年综合知识真题完整版更新完毕，补全所有题目+解析+参考答案，调整题目顺序；2019年案例分析补全题4第3小问真题及解析。&lt;/li&gt; &#xA;   &lt;li&gt;更新《系统架构设计师2009至2020真题及解析》、《系统架构设计师2009至2020无解析真题》、《系统架构设计师综合知识章节分类真题+解析[2019版]》。并调整[第11章测试评审方法]2019年题26的错误序号。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;资料简介&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;kbd&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87/首页.png&#34; title=&#34;点击查看大图：首页&#34; width=&#34;260&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87/真题.png&#34; title=&#34;点击查看大图：真题&#34; width=&#34;260&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87/论文.png&#34; title=&#34;点击查看大图：论文&#34; width=&#34;260&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87/教材.png&#34; title=&#34;点击查看大图：教材&#34; width=&#34;260&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87/全套资料.png&#34; title=&#34;点击查看大图：全套资料&#34; width=&#34;260&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87/占位.png&#34; title=&#34;点击查看大图：教材&#34; width=&#34;260&#34;&gt; &lt;/kbd&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;真题&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;包含2009-2021年全套真题及解析(综合知识+案例分析+论文)、2009-2021年无解析版真题(方便打印刷题)、章节分类真题解析(按章节练习历年真题)、其他真题书籍电子版。&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;kbd&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87/详情-真题-new1.png&#34; title=&#34;点击查看大图：详情-真题&#34; width=&#34;260&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87/详情-真题-2.jpg&#34; title=&#34;点击查看大图：详情-真题&#34; width=&#34;260&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87/详情-真题-new2.png&#34; title=&#34;点击查看大图：详情-真题&#34; width=&#34;260&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/真题/系统架构设计师2009至2021真题及解析（2022年版）.png&#34; title=&#34;点击查看大图：系统架构设计师2009至2020真题及解析&#34; width=&#34;260&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/真题/系统架构设计师2009至2021无解析真题（2022年版）.png&#34; title=&#34;点击查看大图：系统架构设计师2009至2020无解析真题&#34; width=&#34;260&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/真题/系统架构设计师章节分类真题解析（2021年版）.png&#34; title=&#34;点击查看大图：系统架构设计师章节分类真题解析（2020版）&#34; width=&#34;260&#34;&gt; &lt;/kbd&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;报名&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://www.ruankao.org.cn/&#34;&gt;&lt;strong&gt;官网&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&#34;https://bm.ruankao.org.cn/sign/welcome&#34;&gt;&lt;strong&gt;报名入口&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&#34;https://query.ruankao.org.cn/score/main&#34;&gt;&lt;strong&gt;成绩查询入口&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&#34;https://query.ruankao.org.cn/certificate/main&#34;&gt;&lt;strong&gt;证书查询入口1&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&#34;http://www.cpta.com.cn/certQuery.html&#34;&gt;&lt;strong&gt;证书查询入口2&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;官网公布的各地考试机构(链接来源于官网)： &lt;a href=&#34;http://rsj.beijing.gov.cn/ywsite/bjpta/&#34;&gt;北京&lt;/a&gt;、&lt;a href=&#34;http://www.tjeihr.org.cn&#34;&gt;天津&lt;/a&gt;、&lt;a href=&#34;http://www.hebpta.com.cn&#34;&gt;河北&lt;/a&gt;、&lt;a href=&#34;http://www.impta.com/&#34;&gt;内蒙古&lt;/a&gt;、&lt;a href=&#34;http://www.nbrkb.net&#34;&gt;宁波&lt;/a&gt;、&lt;a href=&#34;http://www.lnitec.com&#34;&gt;辽宁&lt;/a&gt;、&lt;a href=&#34;http://www.jlzkb.com/&#34;&gt;吉林&lt;/a&gt;、&lt;a href=&#34;http://www.hljrsks.org.cn/&#34;&gt;黑龙江&lt;/a&gt;、&lt;a href=&#34;http://www.dlrkb.com&#34;&gt;大连&lt;/a&gt;、&lt;a href=&#34;http://rsj.sh.gov.cn/xxzsp/ksy/index801.jsp&#34;&gt;上海&lt;/a&gt;、&lt;a href=&#34;http://www.jsiteec.org&#34;&gt;江苏&lt;/a&gt;、&lt;a href=&#34;http://www.zjrjks.org/&#34;&gt;浙江&lt;/a&gt;、&lt;a href=&#34;http://www.apta.gov.cn/&#34;&gt;安徽&lt;/a&gt;、&lt;a href=&#34;http://gxt.fujian.gov.cn/xw/ztjj/rmzt/fjrkzl/&#34;&gt;福建&lt;/a&gt;、&lt;a href=&#34;http://www.itetc.org/&#34;&gt;江西&lt;/a&gt;、&lt;a href=&#34;http://hrss.shandong.gov.cn/rsks/&#34;&gt;山东&lt;/a&gt;、&lt;a href=&#34;http://www.chniee.org.cn/&#34;&gt;河南&lt;/a&gt;、&lt;a href=&#34;http://www.hbsoft.net/&#34;&gt;湖北&lt;/a&gt;、&lt;a href=&#34;http://www.hniec.org/&#34;&gt;湖南&lt;/a&gt;、&lt;a href=&#34;http://rsks.gd.gov.cn/&#34;&gt;广东&lt;/a&gt;、&lt;a href=&#34;http://www.gxpta.com.cn/&#34;&gt;广西&lt;/a&gt;、&lt;a href=&#34;http://hrss.hainan.gov.cn/hnjy&#34;&gt;海南&lt;/a&gt;、&lt;a href=&#34;http://cqitrk.jjxxw.cq.gov.cn/main/index.html&#34;&gt;重庆&lt;/a&gt;、&lt;a href=&#34;http://202.61.89.231/index.aspx&#34;&gt;四川&lt;/a&gt;、&lt;a href=&#34;http://zgks.xxzx.guizhou.gov.cn/&#34;&gt;贵州&lt;/a&gt;、&lt;a href=&#34;http://www.ynxr.com/&#34;&gt;云南&lt;/a&gt;、&lt;a href=&#34;http://www.shaanxirk.com&#34;&gt;陕西&lt;/a&gt;、&lt;a href=&#34;http://ks.rst.gansu.gov.cn/ncms/index.shtml&#34;&gt;甘肃&lt;/a&gt;、&lt;a href=&#34;http://www.qhpta.com&#34;&gt;青海&lt;/a&gt;、&lt;a href=&#34;http://www.nxpta.com/&#34;&gt;宁夏&lt;/a&gt;、&lt;a href=&#34;http://www.xjctc.net/&#34;&gt;新疆&lt;/a&gt;、&lt;a href=&#34;http://btpta.xjbt.gov.cn/&#34;&gt;新疆兵团&lt;/a&gt;、&lt;a href=&#34;http://www.apec.org.hk/&#34;&gt;香港&lt;/a&gt;、&lt;a href=&#34;http://cms.cpttm.org.mo&#34;&gt;澳门&lt;/a&gt;、&lt;a href=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/#&#34;&gt;山西&lt;/a&gt;、&lt;a href=&#34;https://raw.githubusercontent.com/xxlllq/system_architect/master/#&#34;&gt;西藏&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;2018年12月14日查询成绩后知道自己通过了系统架构设计师的考试（每科满分75，及格45分），特地记录一下。最终的成绩如下：&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/2018_system_architect/master/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87/result.png&#34; width=&#34;400&#34;&gt; &lt;/kbd&gt; &#xA;&lt;/div&gt; 我是在2018年9月份决定报名参加系统架构设计师考试，主要是想借此机会督促自己学习些除工作外的知识。准备了2个月，复习时间为周末，复习方式为看教学视频和真题练习。上述资料均为复习过程和业务时间整理。 &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;下载方式&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;若熟悉Git使用，可通过 &lt;code&gt;https://github.com/xxlllq/system_architect.git&lt;/code&gt; 链接Clone到本地即可；若不熟悉Git使用，可一键下载本资源的压缩包，操作方式如下图所示：&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;kbd&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xxlllq/2018_system_architect/master/%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87/download.png&#34; width=&#34;300&#34;&gt; &lt;/kbd&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>yairEO/tagify</title>
    <updated>2022-07-13T01:32:46Z</updated>
    <id>tag:github.com,2022-07-13:/yairEO/tagify</id>
    <link href="https://github.com/yairEO/tagify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔖 lightweight, efficient Tags input component in Vanilla JS / React / Angular / Vue&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://yaireo.github.io/tagify&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/docs/readme-header.svg?sanitize=true&#34; width=&#34;320&#34; height=&#34;160&#34;&gt;&lt;/a&gt;&lt;a&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://yaireo.github.io/tagify&#34;&gt;Tagify&lt;/a&gt; - &lt;em&gt;tags&lt;/em&gt; input component &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Transforms an input field or a textarea into a &lt;em&gt;Tags component&lt;/em&gt;, in an easy, customizable way, with great performance and small code footprint, exploded with features. &lt;br&gt; &lt;strong&gt;Vanilla&lt;/strong&gt; ⚡ &lt;strong&gt;React&lt;/strong&gt; ⚡ &lt;strong&gt;Vue&lt;/strong&gt; ⚡ &lt;strong&gt;Angular&lt;/strong&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt; 👉 &lt;a href=&#34;https://yaireo.github.io/tagify&#34;&gt;See Many Examples&lt;/a&gt; 👈 &lt;br&gt;&lt;br&gt; &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@yaireo/tagify&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/@yaireo/tagify.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://simple.wikipedia.org/wiki/MIT_License&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-lightgrey&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/@yaireo/tagify&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dw/@yaireo/tagify&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/docs/mix3.gif?sanitize=true&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/docs/demo.gif?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!--ts--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#option-1---import-from-cdn&#34;&gt;Option 1 - import from CDN:&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#option-2---import-as-a-node-module&#34;&gt;option 2 - import as a &lt;em&gt;Node module&lt;/em&gt;:&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#usage-in-your-bundle&#34;&gt;Usage (in your bundle):&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#building-the-project&#34;&gt;Building the project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#adding-tags-dynamically&#34;&gt;Adding tags dynamically&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#output-value&#34;&gt;Output value&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#modify-original-input-value-format&#34;&gt;Modify original input value format&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#ajax-whitelist&#34;&gt;Ajax whitelist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#persisted-data&#34;&gt;Persisted data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#edit-tags&#34;&gt;Edit tags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#validations&#34;&gt;Validations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#drag--sort&#34;&gt;Drag &amp;amp; Sort&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#integration-example&#34;&gt;Integration example:&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#dom-templates&#34;&gt;DOM Templates&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#example-of-overriding-the-tag-template&#34;&gt;Example of overriding the &lt;code&gt;tag&lt;/code&gt; template:&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#suggestions-list&#34;&gt;Suggestions list&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#example-for-a-suggestion-item-alias&#34;&gt;Example for a suggestion item alias&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#example-whitelist&#34;&gt;Example whitelist:&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#mixed-content&#34;&gt;Mixed-Content&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#single-value&#34;&gt;Single-Value&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#react&#34;&gt;React&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#update-regarding-onchange-prop&#34;&gt;Update regarding &lt;code&gt;onChange&lt;/code&gt; prop:&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#updating-the-components-state&#34;&gt;Updating the component&#39;s state&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#jquery-version&#34;&gt;jQuery version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#css-variables&#34;&gt;CSS Variables&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#full-list-of-tagifys-scss-variables&#34;&gt;Full list of Tagify&#39;s SCSS variables&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#methods&#34;&gt;Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;Events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#hooks&#34;&gt;Hooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&#34;&gt;Settings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--te--&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Option 1 - import from CDN:&lt;/h3&gt; &#xA;&lt;p&gt;Place these lines before any other code which is (or will be) using &lt;em&gt;Tagify&lt;/em&gt; (&lt;a href=&#34;https://jsbin.com/jekuqap/edit?html&#34;&gt;Example here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/@yaireo/tagify&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;https://unpkg.com/@yaireo/tagify/dist/tagify.polyfills.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;link href=&#34;https://unpkg.com/@yaireo/tagify/dist/tagify.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Tagify&lt;/code&gt; will then be available globally. To load specific version use &lt;code&gt;@&lt;/code&gt; - for example: &lt;code&gt;unpkg.com/@yaireo/tagify@3.1.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;option 2 - import as a &lt;em&gt;Node module&lt;/em&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i @yaireo/tagify --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage (in your bundle):&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codesandbox.io/s/simple-tagify-setup-6pfi2&#34;&gt;live demo using Parcel as bundler&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Tagify from &#39;@yaireo/tagify&#39;&#xA;&#xA;var tagify = new Tagify(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Don&#39;t forget to &lt;strong&gt;include &lt;code&gt;tagify.css&lt;/code&gt;&lt;/strong&gt; file in your project. CSS location: &lt;code&gt;@yaireo/tagify/dist/tagify.css&lt;/code&gt; SCSS location: &lt;code&gt;@yaireo/tagify/src/tagify.scss&lt;/code&gt; &lt;a href=&#34;https://github.com/yairEO/tagify/pull/282&#34;&gt;See SCSS usecase &amp;amp; example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can be applied to input &amp;amp; textarea elements&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#mixed-content&#34;&gt;mix content&lt;/a&gt; (text and tags together)&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#single-value&#34;&gt;single-value&lt;/a&gt; mode (like &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Supports whitelist/blacklist&lt;/li&gt; &#xA; &lt;li&gt;Customizable HTML templates for the different areas of the component (wrapper, tags, dropdown, dropdown item, dropdown header, dropdown footer)&lt;/li&gt; &#xA; &lt;li&gt;Shows suggestions list (flexiable settings &amp;amp; styling) at &lt;em&gt;full (component) width&lt;/em&gt; or &lt;em&gt;next to&lt;/em&gt; the typed texted (caret)&lt;/li&gt; &#xA; &lt;li&gt;Allows setting suggestions&#39; &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#example-for-a-suggestion-item-alias&#34;&gt;aliases&lt;/a&gt; for easier fuzzy-searching&lt;/li&gt; &#xA; &lt;li&gt;Auto-suggest input as-you-type with the ability to auto-complete&lt;/li&gt; &#xA; &lt;li&gt;Can paste in multiple values: &lt;code&gt;tag 1, tag 2, tag 3&lt;/code&gt; or even newline-separated tags&lt;/li&gt; &#xA; &lt;li&gt;Tags can be created by Regex delimiter or by pressing the &#34;Enter&#34; key / focusing of the input&lt;/li&gt; &#xA; &lt;li&gt;Validate tags by Regex &lt;em&gt;pattern&lt;/em&gt; or by function&lt;/li&gt; &#xA; &lt;li&gt;Tags may be &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#edit-tags&#34;&gt;editable&lt;/a&gt; (double-click)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;ARIA accessibility support&lt;/del&gt;(Component too generic for any meaningful ARIA)&lt;/li&gt; &#xA; &lt;li&gt;Supports read-only mode to the whole component or per-tag&lt;/li&gt; &#xA; &lt;li&gt;Each tag can have any properties desired (class, data-whatever, readonly...)&lt;/li&gt; &#xA; &lt;li&gt;Automatically disallow duplicate tags (vis &#34;settings&#34; object)&lt;/li&gt; &#xA; &lt;li&gt;Has built-in CSS loader, if needed (Ex. &lt;em&gt;AJAX&lt;/em&gt; whitelist pulling)&lt;/li&gt; &#xA; &lt;li&gt;Tags can be trimmed via &lt;code&gt;hellip&lt;/code&gt; by giving &lt;code&gt;max-width&lt;/code&gt; to the &lt;code&gt;tag&lt;/code&gt; element in your &lt;code&gt;CSS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easily change direction to RTL (via the SCSS file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Internet Explorer - A polyfill script should be used: &lt;code&gt;tagify.polyfills.min.js&lt;/code&gt; (in &lt;code&gt;/dist&lt;/code&gt;)&lt;/del&gt; &lt;em&gt;&lt;strong&gt;(IE support has been dropped)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Many useful custom &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Original input/textarea element values kept in sync with Tagify&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building the project&lt;/h2&gt; &#xA;&lt;p&gt;Simply run &lt;code&gt;gulp&lt;/code&gt; in your terminal, from the project&#39;s path (&lt;a href=&#34;https://gulpjs.com&#34;&gt;Gulp&lt;/a&gt; should be installed first).&lt;/p&gt; &#xA;&lt;p&gt;Source files are this path: &lt;code&gt;/src/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Output files, which are automatically generated using Gulp, are in: &lt;code&gt;/dist/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The rest of the files are most likely irrelevant.&lt;/p&gt; &#xA;&lt;h2&gt;Adding tags dynamically&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var tagify = new Tagify(...);&#xA;&#xA;tagify.addTags([&#34;banana&#34;, &#34;orange&#34;, &#34;apple&#34;])&#xA;&#xA;// or add tags with pre-defined properties&#xA;&#xA;tagify.addTags([{value:&#34;banana&#34;, color:&#34;yellow&#34;}, {value:&#34;apple&#34;, color:&#34;red&#34;}, {value:&#34;watermelon&#34;, color:&#34;green&#34;}])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Output value&lt;/h2&gt; &#xA;&lt;p&gt;There are two possible ways to get the value of the tags:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Access the tagify&#39;s instance&#39;s &lt;code&gt;value&lt;/code&gt; prop: &lt;code&gt;tagify.value&lt;/code&gt; (Array of tags)&lt;/li&gt; &#xA; &lt;li&gt;Access the &lt;em&gt;original&lt;/em&gt; input&#39;s value: &lt;code&gt;inputElm.value&lt;/code&gt; (Stringified Array of tags)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The most common way is to simply listen to the &lt;code&gt;change&lt;/code&gt; event on the &lt;em&gt;original input&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var inputElm = document.querySelector,&#xA;    tagify = new Tagify (inputElm);&#xA;&#xA;inputElm.addEventListener(&#39;change&#39;, onChange)&#xA;&#xA;function onChange(e){&#xA;  // outputs a String&#xA;  console.log(e.target.value)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://jsbin.com/paxijaj/edit?html,js,output&#34;&gt;Modify original input value format&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default format is a JSON string:&lt;br&gt; &lt;code&gt;&#39;[{&#34;value&#34;:&#34;cat&#34;}, {&#34;value&#34;:&#34;dog&#34;}]&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;I &lt;strong&gt;recommend&lt;/strong&gt; keeping this because some situations might have values such as addresses (tags contain commas):&lt;br&gt; &lt;code&gt;&#39;[{&#34;value&#34;:&#34;Apt. 2A, Jacksonville, FL 39404&#34;}, {&#34;value&#34;:&#34;Forrest Ray, 191-103 Integer Rd., Corona New Mexico&#34;}]&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another example for complex tags state might be disabled tags, or ones with custom identifier &lt;em&gt;class&lt;/em&gt;:&lt;br&gt; &lt;em&gt;(tags can be clicked, so delevopers can choose to use this to disable/enable tags)&lt;/em&gt;&lt;br&gt; &lt;code&gt;&#39;[{&#34;value&#34;:&#34;cat&#34;, &#34;disabled&#34;:true}, {&#34;value&#34;:&#34;dog&#34;}, {&#34;value&#34;:&#34;bird&#34;, &#34;class&#34;:&#34;color-green&#34;}]&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To change the format, assuming your tags have no commas and are fairly simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var tagify = new Tagify(inputElm, {&#xA;  originalInputValueFormat: valuesArr =&amp;gt; valuesArr.map(item =&amp;gt; item.value).join(&#39;,&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt; &lt;code&gt;&#34;cat,dog&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ajax whitelist&lt;/h2&gt; &#xA;&lt;p&gt;Dynamically-loaded suggestions list (&lt;em&gt;whitelist&lt;/em&gt;) from the server (as the user types) is a frequent need to many.&lt;/p&gt; &#xA;&lt;p&gt;Tagify comes with its own loading animation, which is a very lightweight CSS-only code, and the &lt;em&gt;loading&lt;/em&gt; state is controlled by the method &lt;code&gt;tagify.loading&lt;/code&gt; which accepts &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as arguments.&lt;/p&gt; &#xA;&lt;p&gt;Below is a basic example using the &lt;code&gt;fetch&lt;/code&gt; API. I advise aborting the last request on any input before starting a new request.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example:&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var input = document.querySelector(&#39;input&#39;),&#xA;    tagify = new Tagify(input, {whitelist:[]}),&#xA;    controller; // for aborting the call&#xA;&#xA;// listen to any keystrokes which modify tagify&#39;s input&#xA;tagify.on(&#39;input&#39;, onInput)&#xA;&#xA;function onInput( e ){&#xA;  var value = e.detail.value&#xA;  tagify.whitelist = null // reset the whitelist&#xA;&#xA;  // https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort&#xA;  controller &amp;amp;&amp;amp; controller.abort()&#xA;  controller = new AbortController()&#xA;&#xA;  // show loading animation and hide the suggestions dropdown&#xA;  tagify.loading(true).dropdown.hide()&#xA;&#xA;  fetch(&#39;http://get_suggestions.com?value=&#39; + value, {signal:controller.signal})&#xA;    .then(RES =&amp;gt; RES.json())&#xA;    .then(function(newWhitelist){&#xA;      tagify.whitelist = newWhitelist // update whitelist Array in-place&#xA;      tagify.loading(false).dropdown.show(value) // render the suggestions dropdown&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Persisted data&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes the whitelist might be loaded asynchronously, and so any pre-filled value in the original input field will be removed if the &lt;code&gt;enforceWhitelist&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Tagify can automatically restore the last used &lt;code&gt;whitelist&lt;/code&gt; by setting a &lt;em&gt;&lt;strong&gt;unique id&lt;/strong&gt;&lt;/em&gt; to the Tagify instance, by using the &lt;em&gt;localstorage&lt;/em&gt; to persist the &lt;code&gt;whitelist&lt;/code&gt; &amp;amp; &lt;code&gt;value&lt;/code&gt; data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var input = document.querySelector(&#39;input&#39;),&#xA;    tagify = new Tagify(input, {&#xA;      id: &#39;test1&#39;,  // must be unique (per-tagify instance)&#xA;      enforceWhitelist: true,&#xA;    }),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Edit tags&lt;/h2&gt; &#xA;&lt;p&gt;Tags that aren&#39;t &lt;code&gt;read-only&lt;/code&gt; can be edited by double-clicking them (by default) or by changing the &lt;code&gt;editTags&lt;/code&gt; &lt;em&gt;setting&lt;/em&gt; to &lt;code&gt;1&lt;/code&gt;, making tags editable by single-clicking them.&lt;/p&gt; &#xA;&lt;p&gt;The value is saved on &lt;code&gt;blur&lt;/code&gt; or by pressing &lt;code&gt;enter&lt;/code&gt; key. Pressing &lt;code&gt;Escape&lt;/code&gt; will revert the change trigger &lt;code&gt;blur&lt;/code&gt;. &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;z&lt;/kbd&gt; will revert the change if an edited tag was marked as not valid (perhaps duplicate or blacklisted)&lt;/p&gt; &#xA;&lt;p&gt;To prevent &lt;em&gt;all&lt;/em&gt; tags from being allowed to be editable, set the &lt;code&gt;editTags&lt;/code&gt; setting to &lt;code&gt;false&lt;/code&gt; (or &lt;code&gt;null&lt;/code&gt;).&lt;br&gt; To do the same but for specific tag(s), set those tags&#39; data with &lt;code&gt;editable&lt;/code&gt; property set to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input value=&#39;[{&#34;value&#34;:&#34;foo&#34;, &#34;editable&#34;:false}, {&#34;value&#34;:&#34;bar&#34;}]&#39;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validations&lt;/h2&gt; &#xA;&lt;p&gt;For &#34;regular&#34; tags (not &lt;em&gt;mix-mode&lt;/em&gt; or &lt;em&gt;select-mode&lt;/em&gt;) the easiest way is to use the &lt;code&gt;pattern&lt;/code&gt; setting and use a Regex, or apply the &lt;code&gt;pattern&lt;/code&gt; attribute directly on the &lt;code&gt;input&lt;/code&gt; which will be &#34;transformed&#34; into a &lt;em&gt;Tagify&lt;/em&gt; component (for vanilla code where the &lt;code&gt;input&lt;/code&gt; tag is fully accessible to developers).&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;pattern&lt;/code&gt; setting does not meet your needs, use the &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&#34;&gt;&lt;code&gt;validate&lt;/code&gt; setting&lt;/a&gt;, which recieves a &lt;em&gt;tag data object&lt;/em&gt; as an argument and should return &lt;code&gt;true&lt;/code&gt; if validaiton is passing, or &lt;code&gt;false&lt;/code&gt;/&lt;code&gt;string&lt;/code&gt; of not. A &lt;em&gt;string&lt;/em&gt; may be returned as the reason of the validation failure so it would be printed as the &lt;code&gt;title&lt;/code&gt; attribute of the invalid tag.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsbin.com/rojixul/edit?js,output&#34;&gt;Here&#39;s an example&lt;/a&gt; for async validation for an added tag. The idea is to listen to &lt;code&gt;&#34;add&#34;&lt;/code&gt; event, and when it fires, first set the tag to &#34;loading&#34; state, run an async call, and then set the &lt;em&gt;loading&lt;/em&gt; state (of the tag) back to &lt;code&gt;false&lt;/code&gt;. If the custom async validation failed, call the &lt;code&gt;replaceTag&lt;/code&gt; Tagify method and set the &lt;code&gt;__isValid&lt;/code&gt; tag data property to the error string which will be shown when hovering the tag.&lt;/p&gt; &#xA;&lt;p&gt;Note - there is a setting to keep invalid tags (&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&#34;&gt;&lt;code&gt;keepInvalidTags&lt;/code&gt;&lt;/a&gt;) and if it&#39;s set to &lt;code&gt;true&lt;/code&gt;, the user can see the reason for the invalidation by hovering the tag and see the browser&#39;s native tooltip via the &lt;code&gt;title&lt;/code&gt; attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  empty      : &#34;empty&#34;,&#xA;  exceed     : &#34;number of tags exceeded&#34;,&#xA;  pattern    : &#34;pattern mismatch&#34;,&#xA;  duplicate  : &#34;already exists&#34;,&#xA;  notAllowed : &#34;not allowed&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The texts for those (invalid tags) &lt;em&gt;titles&lt;/em&gt; can be customized from the settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new Tagify(inputElement, {&#xA;  texts: {&#xA;    duplicate: &#34;Duplicates are not allowed&#34;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or by directly manipulating the &lt;em&gt;Tagify&lt;/em&gt; function &lt;em&gt;prototype&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Tagify.prototype.TEXTS = {...Tagify.prototype.TEXTS, {duplicate: &#34;Duplicates are not allowed&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Drag &amp;amp; Sort&lt;/h2&gt; &#xA;&lt;p&gt;To be able to sort tags by dragging, a 3rd-party script is needed.&lt;/p&gt; &#xA;&lt;p&gt;I have made a very simple &lt;em&gt;drag &amp;amp; drop&lt;/em&gt; (~&lt;code&gt;11kb&lt;/code&gt; &lt;em&gt;unminified&lt;/em&gt;) script which uses &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API&#34;&gt;HTML5 native API&lt;/a&gt; and it is available to download via &lt;a href=&#34;https://www.npmjs.com/package/@yaireo/dragsort&#34;&gt;NPM&lt;/a&gt; or &lt;a href=&#34;https://github.com/yairEO/dragsort&#34;&gt;Github&lt;/a&gt; but any other &lt;em&gt;drag &amp;amp; drop&lt;/em&gt; script may work. I could not find on the whole internet a decent lightweight script.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://codepen.io/vsync/pen/jOqYOVJ&#34;&gt;Integration example&lt;/a&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var tagify = new Tagify(inputElement)&#xA;&#xA;// bind &#34;DragSort&#34; to Tagify&#39;s main element and tell&#xA;// it that all the items with the below &#34;selector&#34; are &#34;draggable&#34;&#xA;var dragsort = new DragSort(tagify.DOM.scope, {&#xA;    selector: &#39;.&#39;+tagify.settings.classNames.tag,&#xA;    callbacks: {&#xA;        dragEnd: onDragEnd&#xA;    }&#xA;})&#xA;&#xA;// must update Tagify&#39;s value according to the re-ordered nodes in the DOM&#xA;function onDragEnd(elm){&#xA;    tagify.updateValueByDOMTags()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DOM Templates&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to control the templates for some of the HTML elements Tagify is using by modifying the &lt;code&gt;settings.templates&lt;/code&gt; Object with your own custom functions which &lt;strong&gt;must return&lt;/strong&gt; an &lt;em&gt;HTML string&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available templates are: &lt;code&gt;wrapper&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;dropdown&lt;/code&gt;, &lt;code&gt;dropdownItem&lt;/code&gt;, &lt;code&gt;dropdownContent&lt;/code&gt;, &lt;code&gt;dropdownHeader&lt;/code&gt;, &lt;code&gt;dropdownFooter&lt;/code&gt; and the optional &lt;code&gt;dropdownItemNoMatch&lt;/code&gt; which is a special template for rendering a suggestion item (in the dropdown list) only if there were no matches found for the typed input, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ...more tagify settings...&#xA;templates: {&#xA;  dropdownItemNoMatch: data =&amp;gt;&#xA;    `&amp;lt;div class=&#39;${tagify.settings.classNames.dropdownItem}&#39; tagifySuggestionIdx=&#34;noMatch&#34; tabindex=&#34;0&#34; role=&#34;option&#34;&amp;gt;&#xA;        No suggestion found for: &amp;lt;strong&amp;gt;${data.value}&amp;lt;/strong&amp;gt;&#xA;    &amp;lt;/div&amp;gt;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/raw/master/src/parts/templates.js&#34;&gt;View templates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example of overriding the &lt;code&gt;tag&lt;/code&gt; template:&lt;/h3&gt; &#xA;&lt;p&gt;Each template function is automatically binded with &lt;code&gt;this&lt;/code&gt; pointing to the current &lt;em&gt;Tagify&lt;/em&gt; instance. It is imperative to preserve the class names and also the &lt;code&gt;this.getAttributes(tagData)&lt;/code&gt; for proper functionality.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new Tagify(inputElem, {&#xA;  templates: {&#xA;    tag(tagData, tagify){&#xA;      return `&amp;lt;tag title=&#34;${(tagData.title || tagData.value)}&#34;&#xA;              contenteditable=&#39;false&#39;&#xA;              spellcheck=&#39;false&#39;&#xA;              tabIndex=&#34;${this.settings.a11y.focusableTags ? 0 : -1}&#34;&#xA;              class=&#34;${this.settings.classNames.tag} ${tagData.class ? tagData.class : &#34;&#34;}&#34;&#xA;              ${this.getAttributes(tagData)}&amp;gt;&#xA;      &amp;lt;x title=&#39;&#39; class=&#34;${this.settings.classNames.tagX}&#34; role=&#39;button&#39; aria-label=&#39;remove tag&#39;&amp;gt;&amp;lt;/x&amp;gt;&#xA;      &amp;lt;div&amp;gt;&#xA;          &amp;lt;span class=&#34;${this.settings.classNames.tagText}&#34;&amp;gt;${tagData[this.settings.tagTextProp] || tagData.value}&amp;lt;/span&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/tag&amp;gt;`,&#xA;&#xA;    dropdownFooter(suggestions){&#xA;      var hasMore = suggestions.length - this.settings.dropdown.maxItems;&#xA;&#xA;      return hasMore &amp;gt; 0&#xA;        ? `&amp;lt;footer data-selector=&#39;tagify-suggestions-footer&#39; class=&#34;${this.settings.classNames.dropdownFooter}&#34;&amp;gt;&#xA;            ${hasMore} more items. Refine your search.&#xA;          &amp;lt;/footer&amp;gt;`&#xA;        : &#39;&#39;;&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Suggestions list&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/docs/suggestions-list.apng&#34; alt=&#34;suggestions list dropdown&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The suggestions list is a &lt;em&gt;whitelist Array&lt;/em&gt; of &lt;em&gt;Strings&lt;/em&gt; or &lt;em&gt;Objects&lt;/em&gt; which was set in the &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&#34;&gt;settings&lt;/a&gt; Object when the Tagify instance was created, and can be set later directly on the instance: &lt;code&gt;tagifyInstance.whitelist = [&#34;tag1&#34;, &#34;tag2&#34;, ...]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The suggestions dropdown will be appended to the document&#39;s &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element and will be rendered by default in a position below (bottom of) the Tagify element. Using the keyboard arrows up/down will highlight an option from the list, and hitting the Enter key to select.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to tweak the list dropdown via 2 settings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;enabled&lt;/code&gt; - this is a numeral value that tells Tagify when to show the suggestions dropdown, when a minimum of N characters were typed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxItems&lt;/code&gt; - Limits the number of items the suggestions list will render&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var input = document.querySelector(&#39;input&#39;),&#xA;    tagify = new Tagify(input, {&#xA;        whitelist : [&#39;aaa&#39;, &#39;aaab&#39;, &#39;aaabb&#39;, &#39;aaabc&#39;, &#39;aaabd&#39;, &#39;aaabe&#39;, &#39;aaac&#39;, &#39;aaacc&#39;],&#xA;        dropdown : {&#xA;            classname     : &#34;color-blue&#34;,&#xA;            enabled       : 0,              // show the dropdown immediately on focus&#xA;            maxItems      : 5,&#xA;            position      : &#34;text&#34;,         // place the dropdown near the typed text&#xA;            closeOnSelect : false,          // keep the dropdown open after selecting a suggestion&#xA;            highlightFirst: true&#xA;        }&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;Will render&lt;/b&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&#34;tagify__dropdown tagify__dropdown--text&#34; style=&#34;left:993.5px; top:106.375px; width:616px;&#34;&amp;gt;&#xA;    &amp;lt;div class=&#34;tagify__dropdown__wrapper&#34;&amp;gt;&#xA;      &amp;lt;div class=&#34;tagify__dropdown__item tagify__dropdown__item--active&#34; value=&#34;aaab&#34;&amp;gt;aaab&amp;lt;/div&amp;gt;&#xA;      &amp;lt;div class=&#34;tagify__dropdown__item&#34; value=&#34;aaabb&#34;&amp;gt;aaabb&amp;lt;/div&amp;gt;&#xA;      &amp;lt;div class=&#34;tagify__dropdown__item&#34; value=&#34;aaabc&#34;&amp;gt;aaabc&amp;lt;/div&amp;gt;&#xA;      &amp;lt;div class=&#34;tagify__dropdown__item&#34; value=&#34;aaabd&#34;&amp;gt;aaabd&amp;lt;/div&amp;gt;&#xA;      &amp;lt;div class=&#34;tagify__dropdown__item&#34; value=&#34;aaabe&#34;&amp;gt;aaabe&amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default searching the suggestions is using &lt;a href=&#34;https://en.wikipedia.org/wiki/Approximate_string_matching&#34;&gt;fuzzy-search&lt;/a&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&#34;&gt;settings&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you wish to assign &lt;em&gt;alias&lt;/em&gt; to items (in your suggestion list), add the &lt;code&gt;searchBy&lt;/code&gt; property to &lt;em&gt;whitelist&lt;/em&gt; items you wish to have an &lt;em&gt;alias&lt;/em&gt; for.&lt;/p&gt; &#xA;&lt;p&gt;In the below example, typing a part of a string which is included in the &lt;code&gt;searchBy&lt;/code&gt; property, for example &lt;em&gt;&lt;code&gt;land midd&#34;&lt;/code&gt;&lt;/em&gt; - the suggested item which matches the value &#34;Israel&#34; will be rendered in the suggestions (dropdown) list.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://yaireo.github.io/tagify/#section-extra-properties&#34;&gt;Example&lt;/a&gt; for a suggestion item alias&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;whitelist = [&#xA;    ...&#xA;    { value:&#39;Israel&#39;, code:&#39;IL&#39;, searchBy:&#39;holy land, desert, middle east&#39; },&#xA;    ...&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another handy setting is &lt;code&gt;dropdown.searchKeys&lt;/code&gt; which, like the above &lt;code&gt;dropdown.searchBy&lt;/code&gt; setting, allows expanding the search of any typed terms to more than the &lt;code&gt;value&lt;/code&gt; property of the whitelist items (if items are a &lt;em&gt;Collection&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Example whitelist:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[&#xA;  {&#xA;    value    : 123456,&#xA;    nickname : &#34;foo&#34;,&#xA;    email    : &#34;foo@mail.com&#34;&#xA;  },&#xA;  {&#xA;    value    : 987654,&#xA;    nickname : &#34;bar&#34;,&#xA;    email    : &#34;bar@mail.com&#34;&#xA;  },&#xA;  ...more..&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;// setting to search in other keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  dropdown: {&#xA;    searchKeys: [&#34;nickname&#34;, &#34;email&#34;] //  fuzzy-search matching for those whitelist items&#39; properties&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mixed-Content&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://yaireo.github.io/tagify/#section-mix&#34;&gt;See demo here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This feature must be toggled using these &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&#34;&gt;settings&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  //  mixTagsInterpolator: [&#34;{{&#34;, &#34;}}&#34;],  // optional: interpolation before &amp;amp; after string&#xA;  mode: &#39;mix&#39;,    // &amp;lt;--  Enable mixed-content&#xA;  pattern: /@|#/  // &amp;lt;--  Text starting with @ or # (if single, String can be used here instead of Regex)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When mixing text with tags, the original textarea (or input) element will have a value as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[cartman]]⁠ and [[kyle]]⁠ do not know [[Homer simpson]]⁠&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the initial value of the textarea or input is formatted as the above example, Tagify will try to automatically convert everything between &lt;code&gt;[[&lt;/code&gt; &amp;amp; &lt;code&gt;]]&lt;/code&gt; to a tag, if tag exists in the &lt;em&gt;whitelist&lt;/em&gt;, so make sure when the Tagify instance is initialized, that it has tags with the correct &lt;code&gt;value&lt;/code&gt; property that match the same values that appear between &lt;code&gt;[[&lt;/code&gt; &amp;amp; &lt;code&gt;]]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Applying the setting &lt;code&gt;dropdown.position:&#34;text&#34;&lt;/code&gt; is encouraged for mixed-content tags, because the suggestions list weird when there is already a lot of content on multiple lines.&lt;/p&gt; &#xA;&lt;p&gt;If a tag does not exist in the &lt;em&gt;whitelist&lt;/em&gt;, it may be created by the user and all you should do is listen to the &lt;code&gt;add&lt;/code&gt; event and update your local/remote state.&lt;/p&gt; &#xA;&lt;h2&gt;Single-Value&lt;/h2&gt; &#xA;&lt;p&gt;Similar to native &lt;code&gt;&amp;lt;Select&amp;gt;&lt;/code&gt; element, but allows typing text as value.&lt;/p&gt; &#xA;&lt;h2&gt;React&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://codesandbox.io/s/tagify-react-wrapper-oempc&#34;&gt;&lt;strong&gt;live demo&lt;/strong&gt;&lt;/a&gt; for React integration examples. ⚠️ Tagify is &lt;strong&gt;not&lt;/strong&gt; a &lt;a href=&#34;https://github.com/yairEO/tagify/issues/489#issuecomment-629316093&#34;&gt;controlled component&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A Tagify React component is exported from &lt;a href=&#34;https://github.com/yairEO/tagify/raw/master/dist/react.tagify.js&#34;&gt;&lt;code&gt;react.tagify.js&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Update regarding &lt;code&gt;onChange&lt;/code&gt; prop:&lt;/h3&gt; &#xA;&lt;p&gt;I have changed how the &lt;code&gt;onChange&lt;/code&gt; works internally within the Wrapper of Tagify so as of &lt;em&gt;March 30, 2021&lt;/em&gt; the &lt;code&gt;e&lt;/code&gt; argument will include a &lt;code&gt;detail&lt;/code&gt; parameter with the value as string. There is no more &lt;code&gt;e.target&lt;/code&gt;, and to access the original DOM input element, do this: &lt;code&gt;e.detail.tagify.DOM.originalInput&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: You will need to import Tagify&#39;s CSS also, either by JavaScript or by SCSS &lt;code&gt;@import&lt;/code&gt; (which is preferable) Also note that you will need to use &lt;a href=&#34;https://www.npmjs.com/package/sass&#34;&gt;&lt;em&gt;dart-sass&lt;/em&gt;&lt;/a&gt; and not &lt;em&gt;node-sass&lt;/em&gt; in order to compile the file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import Tags from &#34;@yaireo/tagify/dist/react.tagify&#34; // React-wrapper file&#xA;import &#34;@yaireo/tagify/dist/tagify.css&#34; // Tagify CSS&#xA;&#xA;// on tag add/edit/remove&#xA;const onChange = useCallback((e) =&amp;gt; {&#xA;  console.log(&#34;CHANGED:&#34;&#xA;    , e.detail.tagify.value // Array where each tag includes tagify&#39;s (needed) extra properties&#xA;    , e.detail.tagify.getCleanValue()) // Same as above, without the extra properties&#xA;    , e.detail.value // a string representing the tags&#xA;  )&#xA;}, [])&#xA;&#xA;const App = () =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;Tags&#xA;      tagifyRef={tagifyRef} // optional Ref object for the Tagify instance itself, to get access to  inner-methods&#xA;      settings={settings}  // tagify settings object&#xA;      defaultValue=&#34;a,b,c&#34;&#xA;      {...tagifyProps}   // dynamic props such as &#34;loading&#34;, &#34;showDropdown:&#39;abc&#39;&#34;, &#34;value&#34;&#xA;      onChange={onChange}&#xA;    /&amp;gt;&#xA;  )&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To gain full access to Tagify&#39;s (instance) inner methods, A custom &lt;code&gt;ref&lt;/code&gt; can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;...&#xA;const tagifyRef = useRef()&#xA;...&#xA;&amp;lt;Tags tagifyRef={tagifyRef} ... /&amp;gt;&#xA;&#xA;// or mix-mode&#xA;&amp;lt;MixedTags&#xA;  settings={...}&#xA;  onChange={...}&#xA;  defaultValue={`This is a textarea which mixes text with [[{&#34;value&#34;:&#34;tags&#34;}]].`}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;MixedTags&amp;gt;&lt;/code&gt; component is a shorthand for &lt;code&gt;&amp;lt;Tags InputMode=&#34;textarea&#34;&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Updating the component&#39;s state&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;settings&lt;/code&gt; prop is &lt;strong&gt;only used once&lt;/strong&gt; in the initialization process, please do not update it afterwards.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;📖 List of (React) props for the &lt;code&gt;&amp;lt;Tags/&amp;gt;&lt;/code&gt; component&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Prop&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Updatable&lt;/th&gt; &#xA;    &lt;th&gt;Info&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;settings&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Object&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&#34;&gt;&lt;em&gt;settings&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;name&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;String&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&#39;s element &lt;code&gt;name&lt;/code&gt; attribute&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;value&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;String/Array&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;    &lt;td&gt;Initial value.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;defaultValue&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;String/Array&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Same as `value prop&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;placeholder&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;String&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;    &lt;td&gt;placeholder text for the component&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;readOnly&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;    &lt;td&gt;Toggles &lt;code&gt;readonly&lt;/code&gt; state. With capital &lt;code&gt;O&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;tagifyRef&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Object&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;useRef&lt;/code&gt; hook refference for the component inner instance of vailla &lt;em&gt;Tagify&lt;/em&gt; (for methods access)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;showFilteredDropdown&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Boolean/String&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;    &lt;td&gt;if &lt;code&gt;true&lt;/code&gt; shows the suggestions dropdown. if assigned a String, show the dropdown pre-filtered.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;loading&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;    &lt;td&gt;Toggles &lt;code&gt;loading&lt;/code&gt; state for the whole component&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;whitelist&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Array&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;    &lt;td&gt;Sets the &lt;code&gt;whitelist&lt;/code&gt; which is the basis for the suggestions dropdown &amp;amp; autocomplete&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;className&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;String&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Component&#39;s optional class name to be added&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;InputMode&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;String&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;&#34;textarea&#34;&lt;/code&gt; will create a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; (hidden) element instead of the default &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and automatically make Tagify act as &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#mixed-content&#34;&gt;&lt;em&gt;&#34;mix mode&#34;&lt;/em&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;autoFocus&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Should the component have focus on mount. Must be unique, per-page.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;children&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;String/Array&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;value&lt;/code&gt;/&lt;code&gt;defaultValue&lt;/code&gt; props are prefered&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onChange&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onInput&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onAdd&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onRemove&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onInvalid&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onClick&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onKeydown&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onFocus&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onBlur&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onEditInput&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onEditBeforeUpdate&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onEditUpdated&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onEditStart&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onEditKeydown&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onDropdownShow&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onDropdownHide&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onDropdownSelect&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onDropdownScroll&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onDropdownNoMatch&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;onDropdownUpdated&lt;/td&gt; &#xA;    &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#events&#34;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;jQuery version&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;jQuery.tagify.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;A jQuery wrapper version is also available, but I advise not using it because it&#39;s basically the exact same as the &#34;normal&#34; script (non-jqueryfied) and all the jQuery&#39;s wrapper does is allowing to chain the event listeners for (&#39;add&#39;, &#39;remove&#39;, &#39;invalid&#39;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#39;[name=tags]&#39;)&#xA;    .tagify()&#xA;    .on(&#39;add&#39;, function(e, tagData){&#xA;        console.log(&#39;added&#39;, ...tagData)  // data, index, and DOM node&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing methods can be done via the &lt;a href=&#34;https://api.jquery.com/data&#34;&gt;&lt;code&gt;.data(&#39;tagify&#39;)&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#39;[name=tags]&#39;).tagify();&#xA;// get tags from the server (ajax) and add them:&#xA;$(&#39;[name=tags]&#39;).data(&#39;tagify&#39;).addTags(&#39;aaa, bbb, ccc&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HTML input &amp;amp; textarea attributes&lt;/h2&gt; &#xA;&lt;p&gt;The below list of &lt;em&gt;attributes&lt;/em&gt; affect &lt;em&gt;Tagify&lt;/em&gt;.&lt;br&gt; These can also be set by Tagify &lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&#34;&gt;settings&lt;/a&gt; Object manually, and not &lt;em&gt;declerativly&lt;/em&gt; (via attributes).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Attribute&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern&#34;&gt;pattern&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;input pattern=&#39;^[A-Za-z_✲ ]{1,15}$&#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tag Regex pattern which tag input is validated by.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefplaceholder&#34;&gt;placeholder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;input placeholder=&#39;please type your tags&#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This attribute&#39;s value will be used as a constant placeholder, which is visible unless something is being typed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;readOnly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;input readOnly&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No user-interaction (add/remove/edit) allowed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autofocus&lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;input autofocus&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automatically focus the the Tagify component when the component is loaded&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;required&lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;input required&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adds a &lt;code&gt;required&lt;/code&gt; attribute to the Tagify wrapper element. Does nothing more.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;List of questions &amp;amp; scenarios which might come up during development with Tagify:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Dynamic whitelist&lt;/strong&gt;&lt;/summary&gt; The whitelist initial value is set like so: &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const tagify = new Tagify(tagNode, {&#xA;  whitelist: [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If changes to the whitelist are needed, they should be done like so:&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Incorrect:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;tagify.settings.whitelist = [&#34;foo&#34;, &#34;bar&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Correct:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// set the whitelist directly on the instance and not on the &#34;settings&#34; property&#xA;tagify.whitelist = [&#34;foo&#34;, &#34;bar&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;tags/whitelist data structure&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Tagify does not accept just &lt;em&gt;any&lt;/em&gt; kind of data structure.&lt;br&gt; If a tag data is represented as an &lt;code&gt;Object&lt;/code&gt;, it &lt;strong&gt;must&lt;/strong&gt; contain a &lt;strong&gt;unique&lt;/strong&gt; property &lt;code&gt;value&lt;/code&gt; which Tagify uses to check if a tag already exists, among other things, so make sure it is present.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Incorrect:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[{ &#34;id&#34;:1, &#34;name&#34;:&#34;foo bar&#34; }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Correct:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[{ &#34;id&#34;:1, &#34;value&#34;: 1, &#34;name&#34;:&#34;foo bar&#34; }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[{ &#34;value&#34;:1, &#34;name&#34;:&#34;foo bar&#34; }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[{ &#34;value&#34;:&#34;foo bar&#34; }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ad a simple array of Strings&#xA;[&#34;foo bar&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Save changes (Ex. to a server)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;In framework-less projects, the developer should save the state of the Tagify component (somewhere), and the question is:&lt;br&gt; &lt;strong&gt;when should the state be saved?&lt;/strong&gt; On every change made to &lt;em&gt;Tagify&#39;s&lt;/em&gt; internal state (&lt;code&gt;tagify.value&lt;/code&gt; via the &lt;code&gt;update()&lt;/code&gt; method).&lt;br&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var tagify = new Tagify(...)&#xA;&#xA;// listen to &#34;change&#34; events on the &#34;original&#34; input/textarea element&#xA;tagify.DOM.originalInput.addEventListener(&#39;change&#39;, onTagsChange)&#xA;&#xA;// This example uses async/await but you can use Promises, of course, if you prefer.&#xA;async function onTagsChange(e){&#xA;  const {name, value} = e.target&#xA;  // &#34;imaginary&#34; async function &#34;saveToServer&#34; should get the field&#39;s name &amp;amp; value&#xA;  await saveToServer(name, value)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you are using &lt;em&gt;React/Vue/Angular&lt;/em&gt; or any &#34;modern&#34; framework, then you already know how to attach &#34;onChange&#34; event listeners to your &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; elements, so the above is irrelevant.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Render tags in one single line&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Stopping tags from wrapping to new lines, add this to your &lt;code&gt;.tagify&lt;/code&gt; &lt;em&gt;selector CSS Rule&lt;/em&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;flex-wrap: nowrap;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Submit on `Enter` key&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Tagify internally has &lt;code&gt;state&lt;/code&gt; property, per &lt;code&gt;Tagify&lt;/code&gt; instance and this may be useful for a variety of things when implementing a specific scenario.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var tagify = new Tagify(...)&#xA;var formElm = document.forms[0]; // just an example&#xA;&#xA;tagify.on(&#39;keydown&#39;, onTagifyKeyDown)&#xA;&#xA;function onTagifyKeyDown(e){&#xA;  if( e.key == &#39;Enter&#39; &amp;amp;&amp;amp;         // &#34;enter&#34; key pressed&#xA;      !tagify.state.inputText &amp;amp;&amp;amp;  // assuming user is not in the middle oy adding a tag&#xA;      !tagify.state.editing       // user not editing a tag&#xA;    ){&#xA;    setTimeout(() =&amp;gt; formElm.submit())  // put some buffer to make sure tagify has done with whatever, to be on the safe-side&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/247&#34;&gt;Double-click tag fires both &#34;edit&#34; &amp;amp; &#34;click&#34; custom events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/254&#34;&gt;Manualy open the suggestions dropdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/244&#34;&gt;Render your own suggestions dropdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/252&#34;&gt;Allow max length on mix mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/253&#34;&gt;Always show dropdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/245&#34;&gt;Limit the length of a tag value (minimum &amp;amp; maximum)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/237&#34;&gt;&lt;em&gt;Mixed mode&lt;/em&gt; initial value&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/223&#34;&gt;Random colors for each tag&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/220&#34;&gt;Format input value for server side&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/294&#34;&gt;Writing to tagify textarea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/145&#34;&gt;Scroll all tags within one line, instead of growing vertically&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/365&#34;&gt;Insert emoji at caret location when editing a tag&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/413&#34;&gt;propagate &lt;code&gt;change&lt;/code&gt; event&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/433&#34;&gt;Manually update tag data after it was added&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/465&#34;&gt;Ajax Whitelist with &#34;enforceWhitelist&#34; setting enabled&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/474&#34;&gt;Custom (multiple) tag validation &amp;amp; AJAX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/160&#34;&gt;Make tags from pasted multi-line text&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/issues/524#issuecomment-699140465&#34;&gt;Add a tag at &lt;em&gt;caret&lt;/em&gt; position in &lt;em&gt;mixed mode&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yairEO/tagify/master/%5Bhttps0465%5D(https://github.com/yairEO/tagify/issues/862)&#34;&gt;Change automatic title tooltips for invalid tags&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CSS Variables&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Learn more about &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties&#34;&gt;CSS Variables&lt;/a&gt;) (custom properties)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Tagify&#39;s utilizes &lt;em&gt;CSS variables&lt;/em&gt; which allow easy customization without the need to manually write CSS. If you do wish to heavily style your Tagify components, then you can (and should) use the below variables within your modified styles as much as you can.&lt;/p&gt; &#xA;&lt;p&gt;For a &lt;em&gt;live&lt;/em&gt; example, see the &lt;a href=&#34;https://yaireo.github.io/tagify/#section-different-look&#34;&gt;demos page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tags-disabled-bg&lt;/td&gt; &#xA;   &lt;td&gt;Tag background color when &lt;em&gt;disabled&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tags-border-color&lt;/td&gt; &#xA;   &lt;td&gt;The outer border color which surrounds tagify&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tags-hover-border-color&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;hover&lt;/em&gt; state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tags-focus-border-color&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;focus&lt;/em&gt; state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-bg&lt;/td&gt; &#xA;   &lt;td&gt;Tag background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-hover&lt;/td&gt; &#xA;   &lt;td&gt;Tag background color on hover (mouse)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-text-color&lt;/td&gt; &#xA;   &lt;td&gt;Tag text color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-text-color--edit&lt;/td&gt; &#xA;   &lt;td&gt;Tag text color when a Tag is being edited&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-pad&lt;/td&gt; &#xA;   &lt;td&gt;Tag padding, from all sides. Ex. &lt;code&gt;.3em .5em&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag--min-width&lt;/td&gt; &#xA;   &lt;td&gt;Minimum Tag width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag--max-width&lt;/td&gt; &#xA;   &lt;td&gt;Maximum tag width, which gets trimmed with &lt;em&gt;hellip&lt;/em&gt; after&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-inset-shadow-size&lt;/td&gt; &#xA;   &lt;td&gt;This is the inner shadow size, which dictates the color of the Tags.&lt;br&gt;It&#39;s important the size fits &lt;em&gt;exactly&lt;/em&gt; to the tag.&lt;br&gt;Change this if you change the &lt;code&gt;--tag-pad&lt;/code&gt; or fontsize.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-invalid-color&lt;/td&gt; &#xA;   &lt;td&gt;For border color of edited tags with invalid value being typed into them&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-invalid-bg&lt;/td&gt; &#xA;   &lt;td&gt;Background color for invalid Tags.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-remove-bg&lt;/td&gt; &#xA;   &lt;td&gt;Tag background color when hovering the &lt;code&gt;×&lt;/code&gt; button.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-remove-btn-color&lt;/td&gt; &#xA;   &lt;td&gt;Remove (&lt;code&gt;×&lt;/code&gt;) button text color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-remove-btn-bg&lt;/td&gt; &#xA;   &lt;td&gt;Remove (&lt;code&gt;×&lt;/code&gt;) button background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-remove-btn-bg--hover&lt;/td&gt; &#xA;   &lt;td&gt;Remove (&lt;code&gt;×&lt;/code&gt;) button hover background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--input-color&lt;/td&gt; &#xA;   &lt;td&gt;Input text color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--tag-hide-transition&lt;/td&gt; &#xA;   &lt;td&gt;Controls the transition property when a tag is removed. default is &#39;.3s&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--placeholder-color&lt;/td&gt; &#xA;   &lt;td&gt;Placeholder text color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--placeholder-color-focus&lt;/td&gt; &#xA;   &lt;td&gt;Placeholder text color when Tagify has focus and no input was typed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--loader-size&lt;/td&gt; &#xA;   &lt;td&gt;Loading animation size. &lt;code&gt;1em&lt;/code&gt; is pretty big, default is a bit less.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--readonly-striped&lt;/td&gt; &#xA;   &lt;td&gt;Either a value &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; can be used to toggle the striped diagonal background in &lt;em&gt;readonly&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Full list of Tagify&#39;s &lt;a href=&#34;https://github.com/yairEO/tagify/raw/master/src/tagify.scss#L9-L24&#34;&gt;SCSS variables&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Methods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Tagify&lt;/code&gt; is &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes&#34;&gt;prototype&lt;/a&gt; based and There are many methods, but I&#39;ve chosen to list the most relevant ones:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Parameters&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reverts the input element back as it was before Tagify was applied&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;removeAllTags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Removes all tags and resets the original input tag&#39;s value property&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;addTags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ol&gt;&#xA;     &lt;li&gt;&lt;code&gt;Array&lt;/code&gt;/&lt;code&gt;String&lt;/code&gt;/&lt;code&gt;Object&lt;/code&gt; tag(s) to add&lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;Boolean&lt;/code&gt; clear input after adding&lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;Boolean&lt;/code&gt; - skip adding invalids&lt;/li&gt;&#xA;     &lt;ol&gt;&lt;/ol&gt;&#xA;    &lt;/ol&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Accepts a String (word, single or multiple with a delimiter), an Array of Objects (see above) or Strings.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;addMixTags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Array&lt;/code&gt;/&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bypasses the normalization process in &lt;code&gt;addTags&lt;/code&gt;, forcefully adding tags at the last caret location or at the end, if there&#39;s no last caret location saved (at &lt;code&gt;tagify.state.selection&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;removeTags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ol&gt;&#xA;     &lt;li&gt;&lt;code&gt;Array&lt;/code&gt;/&lt;code&gt;HTMLElement&lt;/code&gt;/&lt;code&gt;String&lt;/code&gt; tag(s) to remove&lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;silent&lt;/code&gt; does not update the component&#39;s value&lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;tranDuration&lt;/code&gt; Transition duration (in &lt;code&gt;ms&lt;/code&gt;)&lt;/li&gt;&#xA;    &lt;/ol&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(#502) Remove single/multiple Tags. When nothing passed, removes last tag. &#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;&lt;code&gt;silent&lt;/code&gt; - A flag, which when turned on, does not remove any value and does not update the original input value but simply removes the tag from tagify&lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;tranDuration&lt;/code&gt; - delay for animation, after which the tag will be removed from the DOM&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;addEmptyTag&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object&lt;/code&gt; &lt;sub&gt;(&lt;code&gt;tagData&lt;/code&gt;)&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create an empty tag (optionally with pre-defined data) and enters &#34;edit&#34; mode directly. &lt;a href=&#34;https://yaireo.github.io/tagify#section-different-look&#34;&gt;See demo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;loadOriginalValues&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;/&lt;code&gt;Array&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Converts the input&#39;s value into tags. This method gets called automatically when instansiating Tagify. Also works for mixed-tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;getWhitelistItemsByValue&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{value}&lt;/code&gt; - return an Array of found matching items (case-insensitive)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;getTagIndexByValue&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the index of a specific tag, by value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;getTagElmByValue&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the first matched tag node, if found&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isTagDuplicate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns how many tags already exists with that value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;parseMixTags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Converts a String argument (&lt;code&gt;[[foo]]⁠ and [[bar]]⁠ are..&lt;/code&gt;) into HTML with mixed tags &amp;amp; texts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;getTagElms&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a DOM nodes list of all the tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;getTagElmByValue&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a specific tag DOM node by value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tagData&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTMLElement&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;set/get tag data on a tag element (has&lt;code&gt;.tagify__tag&lt;/code&gt; class by default)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;editTag&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Goes to edit-mode in a specific tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;getTagTextNode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get the node which has the actual tag&#39;s content&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;setTagTextNode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTMLElement&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sets the text of a tag (DOM only, does not affect actual data)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;replaceTag&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tagElm&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt; &lt;sub&gt;(&lt;code&gt;tagData&lt;/code&gt;)&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exit a tag&#39;s edit-mode. if &#34;tagData&#34; exists, replace the tag element with new data and update Tagify value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;loading&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;toggle loading state on/off (Ex. AJAX whitelist pulling)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tagLoading&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTMLElement&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;same as above but for a specific tag element&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;createTagElem&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object&lt;/code&gt; &lt;sub&gt;(&lt;code&gt;tagData&lt;/code&gt;)&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a tag element from the supplied tag data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;injectAtCaret&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTMLElement&lt;/code&gt; &lt;sub&gt;(&lt;code&gt;injectedNode&lt;/code&gt;)&lt;/sub&gt;, &lt;code&gt;Object&lt;/code&gt; &lt;sub&gt;(&lt;code&gt;range&lt;/code&gt;)&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Injects text or HTML node at last caret position. &lt;code&gt;range&lt;/code&gt; parameter is &lt;em&gt;optional&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;placeCaretAfterNode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Places the caret after a given node&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;insertAfterTag&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTMLElement&lt;/code&gt; &lt;sub&gt;(tag element)&lt;/sub&gt;, &lt;code&gt;HTMLElement&lt;/code&gt;/&lt;code&gt;String&lt;/code&gt; &lt;sub&gt;(whatever to insert after)&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggleClass&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggles &lt;code&gt;class&lt;/code&gt; on the main &lt;em&gt;tagify&lt;/em&gt; container (&lt;code&gt;scope&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropdown.selectAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add &lt;strong&gt;all&lt;/strong&gt; whitelist items as tags and close the suggestion dropdown&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropdown.show&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shows the sugegstions list dropdown. A string paramater allows filtering the results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropdown.hide&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hides the suggestions list dropdown (if it&#39;s not managed manually by the developer)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropdown.toggle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggles dropdown show/hide. the boolean parameter will force-show&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;updateValueByDOMTags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Iterate tag DOM nodes and re-build the &lt;code&gt;tagify.value&lt;/code&gt; array (call this if tags get sorted manually)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;parseTemplate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;/&lt;code&gt;Function&lt;/code&gt; &lt;sub&gt;(template name or function)&lt;/sub&gt;, &lt;code&gt;Array&lt;/code&gt; &lt;sub&gt;(data)&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;converts a template string (by selecting one from the &lt;code&gt;settings.templates&lt;/code&gt; by name or supplying a template function which returns a String) into a DOM node&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;setReadonly&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggles &#34;readonly&#34; mode on/off&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;setDisabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggles &#34;disabled&#34; mode on/off&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;getPersistedData&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get data for the specific instance by parameter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;setPersistedData&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set data for the specific instance. Must supply a second parameter which will be the key to save the data in the localstorage (under the tagify namespace)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clearPersistedData&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clears data for the specific instance, by parameter. If the parameter is ommited, clears all persisted data related to this instance (by its &lt;code&gt;id&lt;/code&gt; which was set in the instance&#39;s settings)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;p&gt;All triggered events return the instance&#39;s scope (tagify).&lt;br&gt; See &lt;code&gt;e.detail&lt;/code&gt; for custom event additional data.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example 1&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var tagify = new Tagify(...)&#xA;&#xA;// events can be chainable, and multiple events may be binded for the same callback&#xA;tagify&#xA;  .on(&#39;input&#39;, e =&amp;gt; console.log(e.detail))&#xA;  .on(&#39;edit:input edit:updated edit:start edit:keydown&#39;, e =&amp;gt; console.log(e.type, e.detail))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example 2&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var tagify = new Tagify(inputNode, {&#xA;  callbacks: {&#xA;    &#34;change&#34;: (e) =&amp;gt; console.log(e.detail),&#xA;    &#34;dropdown:show&#34;: (e) =&amp;gt; console.log(e.detail)&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;change&lt;/td&gt; &#xA;   &lt;td&gt;Any change to the value has occurred. &lt;code&gt;e.details.value&lt;/code&gt; callback listener argument is a &lt;em&gt;String&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;add&lt;/td&gt; &#xA;   &lt;td&gt;A tag has been added&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;remove&lt;/td&gt; &#xA;   &lt;td&gt;A tag has been removed (&lt;a href=&#34;https://github.com/yairEO/tagify/issues/222&#34;&gt;use &lt;code&gt;removeTag&lt;/code&gt;&lt;/a&gt; instead with &lt;em&gt;jQuery&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;invalid&lt;/td&gt; &#xA;   &lt;td&gt;A tag has been added but did not pass validation. See &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events&#34;&gt;event detail&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;input&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events/input&#34;&gt;Input&lt;/a&gt; event, when a tag is being typed/edited. &lt;code&gt;e.detail&lt;/code&gt; exposes &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;inputElm&lt;/code&gt; &amp;amp; &lt;code&gt;isValid&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;click&lt;/td&gt; &#xA;   &lt;td&gt;Clicking a tag. Exposes the tag element, its index &amp;amp; data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dblclick&lt;/td&gt; &#xA;   &lt;td&gt;Double-clicking a tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;keydown&lt;/td&gt; &#xA;   &lt;td&gt;When Tagify input has focus and a key was pressed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;focus&lt;/td&gt; &#xA;   &lt;td&gt;The component currently has focus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;blur&lt;/td&gt; &#xA;   &lt;td&gt;The component lost focus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;edit:input&lt;/td&gt; &#xA;   &lt;td&gt;Typing inside an edited tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;edit:beforeUpdate&lt;/td&gt; &#xA;   &lt;td&gt;Just before a tag has been updated, while still in &#34;edit&#34; mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;edit:updated&lt;/td&gt; &#xA;   &lt;td&gt;A tag as been updated (changed view editing or by directly calling the &lt;code&gt;replaceTag()&lt;/code&gt; method)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;edit:start&lt;/td&gt; &#xA;   &lt;td&gt;A tag is now in &#34;edit mode&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;edit:keydown&lt;/td&gt; &#xA;   &lt;td&gt;keydown event while an edited tag is in focus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown:show&lt;/td&gt; &#xA;   &lt;td&gt;Suggestions dropdown is to be rendered. The dropdown DOM node is passed in the callback, &lt;a href=&#34;https://yaireo.github.io/tagify/#section-basic&#34;&gt;see demo&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown:hide&lt;/td&gt; &#xA;   &lt;td&gt;Suggestions dropdown has been removed from the DOM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown:select&lt;/td&gt; &#xA;   &lt;td&gt;Suggestions dropdown item selected (by mouse/keyboard/touch)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown:scroll&lt;/td&gt; &#xA;   &lt;td&gt;Tells the percentage scrolled. (&lt;code&gt;event.detail.percentage&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown:noMatch&lt;/td&gt; &#xA;   &lt;td&gt;No whitelist suggestion item matched for the typed input. At this point it is possible to manually set &lt;code&gt;tagify.suggestedListItems&lt;/code&gt; to any possible custom value, for example: &lt;code&gt;[{ value:&#34;default&#34; }]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown:updated&lt;/td&gt; &#xA;   &lt;td&gt;Fired when the dropdown list is re-filtered while suggestions list is visible and a tag was removed so it was re-added as a suggestion&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Hooks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Promise&lt;/strong&gt;-based hooks for &lt;em&gt;async&lt;/em&gt; program flow scenarios.&lt;/p&gt; &#xA;&lt;p&gt;Allows to &#34;hook&#34; (intervene) at certain points of the program, which were selected as a suitable place to &lt;strong&gt;pause&lt;/strong&gt; the program flow and wait for further instructions on how/if to proceed.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;For example, if a developer wishes to add a (native) confirmation popup before a tag is removed (by a user action): &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var input = document.querySelector(&#39;input&#39;)&#xA;var tagify = new Tagify(input,{&#xA;    hooks: {&#xA;        /**&#xA;         * Removes a tag&#xA;         * @param  {Array}  tags [Array of Objects [{node:..., data:...}, {...}, ...]]&#xA;         */&#xA;        beforeRemoveTag : function( tags ){&#xA;            return new Promise((resolve, reject) =&amp;gt; {&#xA;                confirm(&#34;Remove &#34; + tags[0].data.value + &#34;?&#34;)&#xA;                    ? resolve()&#xA;                    : reject()&#xA;            })&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Parameters&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;beforeRemoveTag&lt;/td&gt; &#xA;   &lt;td&gt;Array &lt;sub&gt;(of Objects)&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jsbin.com/xoseyux/edit?html,js,output&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;suggestionClick&lt;/td&gt; &#xA;   &lt;td&gt;Object &lt;sub&gt;(click event data)&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jsbin.com/tuwihuf/edit?html,js,output&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;beforePaste&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tagify&lt;/code&gt;, &lt;code&gt;pastedText&lt;/code&gt;, &lt;code&gt;clipboardData&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Before pasted text was added to Tagify. &lt;em&gt;Resolve&lt;/em&gt; with new paste value if needed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/yairEO/tagify/raw/master/src/parts/defaults.js#L1&#34;&gt;Settings&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;String&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://github.com/yairEO/tagify/#persisted-data&#34;&gt;&lt;em&gt;Persisted data&lt;/em&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tagTextProp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;String&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;value&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tag data Object property which will be displayed as the tag&#39;s text. Remember to keep &#34;value&#34; property &lt;em&gt;unique&lt;/em&gt;. See Also: &lt;code&gt;dropdown.mapValueTo&lt;/code&gt;, &lt;code&gt;dropdown.searchKeys&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;placeholder&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;String&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Placeholder text. If this attribute is set on an input/textarea element it will override this setting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;delimiters&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;String&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;,&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[RegEx &lt;strong&gt;string&lt;/strong&gt;] split tags by any of these delimiters. Example delimeters: &#34;,|.| &#34; (&lt;em&gt;comma&lt;/em&gt;, &lt;em&gt;dot&lt;/em&gt; or &lt;em&gt;whitespace&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pattern&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;String/RegEx&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;Validate input by RegEx pattern (can also be applied on the input itself as an attribute) Ex: &lt;code&gt;/[1-9]/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;String&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;Use &lt;code&gt;select&lt;/code&gt; for single-value dropdown-like select box. See &lt;code&gt;mix&lt;/code&gt; as value to allow mixed-content. The &#39;pattern&#39; setting must be set to some character.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mixTagsInterpolator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Array&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;&lt;code&gt;[&#39;[[&#39;, &#39;]]&#39;]&lt;/code&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interpolation for mix mode. Everything between these will become a tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mixTagsAllowedAfter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;RegEx&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;&lt;code&gt;/,|\.|\:|\s/&lt;/code&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Define conditions in which typed mix-tags content is allowing a tag to be created after.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;duplicates&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Should duplicate tags be allowed or not&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;trim&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;true&lt;/code&gt; trim the tag&#39;s value (remove before/after whitespaces)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enforceWhitelist&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Should ONLY use tags allowed in whitelist.&lt;br&gt;In &lt;code&gt;mix-mode&lt;/code&gt;, setting it to &lt;code&gt;false&lt;/code&gt; will not allow creating new tags.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;userInput&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Disable manually typing/pasting/editing tags (tags may only be added from the whitelist). Can also use the &lt;code&gt;disabled&lt;/code&gt; attribute on the original input element.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autoComplete.enabled&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Tries to suggest the input&#39;s value while typing (match from whitelist) by adding the rest of term as grayed-out text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autoComplete.rightKey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;true&lt;/code&gt;, when &lt;code&gt;→&lt;/code&gt; is pressed, use the suggested value to create a tag, else just auto-completes the input. In mixed-mode this is ignored and treated as &#34;true&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;whitelist&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Array&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[]&lt;/td&gt; &#xA;   &lt;td&gt;An array of allowed tags (&lt;em&gt;Strings&lt;/em&gt; or &lt;em&gt;Objects&lt;/em&gt;). When using &lt;em&gt;Objects&lt;/em&gt; in the &lt;em&gt;whitelist&lt;/em&gt; array a &lt;code&gt;value&lt;/code&gt; property is a must &amp;amp; should be unique. &lt;br&gt;Also, the *whitelist used for auto-completion when &lt;code&gt;autoCompletion.enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;blacklist&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Array&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[]&lt;/td&gt; &#xA;   &lt;td&gt;An array of tags which aren&#39;t allowed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;addTagOnBlur&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Automatically adds the text which was inputed as a tag when blur event happens&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pasteAsTags&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Automatically converts pasted text into tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;callbacks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Object&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;{}&lt;/td&gt; &#xA;   &lt;td&gt;Exposed callbacks object to be triggered on events: &lt;code&gt;&#39;add&#39;&lt;/code&gt; / &lt;code&gt;&#39;remove&#39;&lt;/code&gt; tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maxTags&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Number&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Infinity&lt;/td&gt; &#xA;   &lt;td&gt;Maximum number of allowed tags. when reached, adds a class &#34;tagify--hasMaxTags&#34; to &lt;code&gt;&amp;lt;Tags&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;editTags&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Object/Number&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;{}&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; will disallow editing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;editTags.&lt;em&gt;clicks&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Number&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Number of clicks to enter &#34;edit-mode&#34;: 1 for single click. Any other value is considered as double-click&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;editTags.&lt;em&gt;keepInvalid&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;keeps invalid edits as-is until &lt;code&gt;esc&lt;/code&gt; is pressed while in focus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;templates&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Object&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;&lt;code&gt;wrapper&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;dropdownItem&lt;/code&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Object consisting of functions which return template strings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;validate&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If the &lt;code&gt;pattern&lt;/code&gt; setting does not meet your needs, use this function, which receives &lt;em&gt;tag data object&lt;/em&gt; as an argument and should return &lt;code&gt;true&lt;/code&gt; if validation passed or &lt;code&gt;false&lt;/code&gt;/&lt;code&gt;string&lt;/code&gt; if not. A &lt;em&gt;string&lt;/em&gt; may be returned as the reason for the validation failure.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;transformTag&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Takes a tag data as argument and allows mutating it before a tag is created or edited and also before validation.&lt;br&gt;Should not &lt;code&gt;return&lt;/code&gt; anything, only &lt;strong&gt;mutate&lt;/strong&gt; the argument.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;keepInvalidTags&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;true&lt;/code&gt;, do not remove tags which did not pass validation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;skipInvalid&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;true&lt;/code&gt;, do not add invalid, temporary, tags before automatically removing them&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backspace&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;*&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;On pressing backspace key:&lt;br&gt; &lt;code&gt;true&lt;/code&gt; - remove last tag &lt;br&gt;&lt;code&gt;edit&lt;/code&gt; - edit last tag&lt;br&gt;&lt;code&gt;false&lt;/code&gt; - do nothing (useful for outside style)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;originalInputValueFormat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Function&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If you wish your original input/textarea &lt;code&gt;value&lt;/code&gt; property format to other than the default (which I recommend keeping) you may use this and make sure it returns a &lt;em&gt;string&lt;/em&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mixMode.&lt;em&gt;insertAfterTag&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Node/String&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;\u00A0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;node&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt; to add after a tag added&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;a11y.&lt;em&gt;focusableTags&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;allows tags to get focus, and also to be deleted via &lt;kbd&gt;Backspace&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;enabled&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Number&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Minimum characters input for showing a suggestions list. &lt;code&gt;false&lt;/code&gt; will not render a suggestions list.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;caseSensitive&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;if &lt;code&gt;true&lt;/code&gt;, match &lt;strong&gt;exact&lt;/strong&gt; item when a suggestion is selected (from the dropdown) and also more strict matching for dulpicate items. &lt;strong&gt;Ensure&lt;/strong&gt; &lt;code&gt;fuzzySearch&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; for this to work.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;maxItems&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Number&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Maximum items to show in the suggestions list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;classname&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;String&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom &lt;em&gt;classname&lt;/em&gt; for the dropdown suggestions list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;fuzzySearch&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Enables filtering dropdown items values&#39; by string &lt;em&gt;containing&lt;/em&gt; and not only &lt;em&gt;beginning&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;sortby&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;String/Function&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If set as &lt;code&gt;startsWith&lt;/code&gt; string, the suggestions list will be sorted with matched items which starts with the query shown first, and &lt;em&gt;exact&lt;/em&gt; matches shown before all.&lt;br&gt;&lt;br&gt; If this setting is defined as a &lt;code&gt;function&lt;/code&gt;, it recieves two arguments: the array of filtered items and the query and it must return an Array.&lt;br&gt;&lt;br&gt;(&lt;em&gt;default sorting order is same as the whitelist&#39;s&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;accentedSearch&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Enable searching for &lt;em&gt;accented&lt;/em&gt; items in the whitelist without typing exact match (#491)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;position&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;String&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;all&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;&lt;code&gt;manual&lt;/code&gt; - will not render the dropdown, and you would need to do it yourself. &lt;a href=&#34;https://yaireo.github.io/tagify/#section-manual-suggestions&#34;&gt;See demo&lt;/a&gt;&lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;text&lt;/code&gt; - places the dropdown next to the caret&lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;input&lt;/code&gt; - places the dropdown next to the input (useful in rare situations)&lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;all&lt;/code&gt; - normal, full-width design&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;highlightFirst&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;When a suggestions list is shown, highlight the first item, and also suggest it in the input (The suggestion can be accepted with &lt;kbd&gt;→&lt;/kbd&gt; key)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;closeOnSelect&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;close the dropdown after selecting an item, if &lt;code&gt;enabled:0&lt;/code&gt; is set (which means always show dropdown on focus)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;clearOnSelect&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Keep typed text after selecting a suggestion&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;mapValueTo&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Function/String&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If whitelist is an Array of Objects:&lt;br&gt;Ex. &lt;code&gt;[{value:&#39;foo&#39;, email:&#39;foo@a.com&#39;},...]&lt;/code&gt;)&lt;br&gt; this setting controlls which data &lt;em&gt;key&lt;/em&gt; will be printed in the dropdown.&lt;br&gt; Ex.1: &lt;code&gt;mapValueTo: data =&amp;gt; &#34;To:&#34; + data.email&lt;/code&gt;&lt;br&gt;Ex.2: &lt;code&gt;mapValueTo: &#34;email&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;searchKeys&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Array&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;&lt;code&gt;[&#34;value&#34;, &#34;searchBy&#34;]&lt;/code&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When a user types something and trying to match the whitelist items for suggestions, this setting allows matching other keys of a whitelist objects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;appendTarget&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;HTMLNode&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;document.body&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Target-Node which the &lt;em&gt;suggestions dropdown&lt;/em&gt; is appended to (&lt;em&gt;only when rendered&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dropdown.&lt;em&gt;placeAbove&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;sub&gt;Boolean&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If defined, will force the placement of the dropdown in respect to the Boolean value: &lt;code&gt;true&lt;/code&gt; will always show the suggestions dropdown above the input field and &lt;code&gt;false&lt;/code&gt; will always show it below. By default this setting it not defined and the placement of the dropdown is automatically decided according to the space availble, where opening it &lt;em&gt;below&lt;/em&gt; the input is preferred.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>