<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-01T01:37:26Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xx025/chatgptapi_server</title>
    <updated>2023-03-01T01:37:26Z</updated>
    <id>tag:github.com,2023-03-01:/xx025/chatgptapi_server</id>
    <link href="https://github.com/xx025/chatgptapi_server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;协调多个chatgpt账户收发消息，构建ChatGPT3.5 API服务；一个账号没办法同时请求两个问题，但一百个可以啊！&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;browser-chatgptapi&lt;/h1&gt; &#xA;&lt;p&gt;这是一个，ChatGPT3.5 API 服务（即在OpenAI网页使用的模型），它允许连接多个ChatGPT账户协同工作，并构建一个对外的API接口服务。&lt;/p&gt; &#xA;&lt;h2&gt;快速开始&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;运行web服务&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone -b master https://github.com/xx025/browser-chatgptapi.git&#xA;cd browser-chatgptapi&#xA;pip install virtualenv&#xA;virtualenv venv&#xA;venv\Scripts\activate.bat  &#xA;pip install -r requirements.txt&#xA;python run.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;此时web服务正在允许，他有两个重要的接口&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ws://localhost:8010/user&lt;/code&gt; 供用户连接&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ws://localhost:8010/server&lt;/code&gt; 供chatgpt服务连接&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;数据格式示例：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;msg&#34;: &#34;hello, i am user1&#34;&#xA;}   &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA; &#34;msg&#34;: &#34;hello user1, i am  server1&#34;&#xA;}   &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;连接chatgpt服务&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;下面是工作在revChatGPT&lt;a href=&#34;https://raw.githubusercontent.com/xx025/chatgptapi_server/main1/etc/revChatGPT.py&#34;&gt;完整代码&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt; import json&#xA; from revChatGPT.V1 import Chatbot&#xA; from ws4py.client.threadedclient import WebSocketClient&#xA; from ws4py.messaging import TextMessage&#xA;  &#xA; class CG_Client(WebSocketClient):    &#xA;     def received_message(self, resp:TextMessage):&#xA;         prompt = json.loads(str(resp)).get(&#39;msg&#39;, &#39;hello&#39;)&#xA;         print(prompt)&#xA;         access_token = &#34;you_access_token&#34;&#xA;         chatbot = Chatbot(config={&#34;access_token&#34;: access_token})&#xA;         response = &#34;&#34;&#xA;         for data in chatbot.ask(prompt):&#xA;             response = data[&#34;message&#34;]&#xA;         data = json.dumps({&#39;msg&#39;: response})&#xA;         self.send(data)    &#xA; &#xA; if __name__ == &#39;__main__&#39;:&#xA;     ws = None&#xA;     try:&#xA;         ws = CG_Client(&#39;ws://127.0.0.1:8010/server?token=r64XoPjdpVWPpSTrnin1&#39;)&#xA;         ws.connect()&#xA;         ws.run_forever()&#xA;     except KeyboardInterrupt:&#xA;         ws.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xx025/chatgptapi_server/main1/etc/etc.md&#34;&gt;其他&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;进行测试&lt;/p&gt; &lt;p&gt;我写了一个简单的测速页面你可以打开一个或多个&lt;code&gt;http://localhost:8010/&lt;/code&gt; 进行测试，你可以用postman打开一个WebSocket API测速页面进行测式&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;演示：&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;演示视频&lt;/strong&gt;：&lt;a href=&#34;https://www.youtube.com/watch?v=dis8NDfT16I&#34;&gt;YouTube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xx025/chatgptapi_server/main1/imgs/api_test.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;架构图&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xx025/chatgptapi_server/main1/imgs/en_architecture-diagram.png&#34; alt=&#34;架构图.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;最后&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;代码比较简陋，可完善之处多多，欢迎参与一起开发&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#xA;git checkout --orphan latest_branch&#xA;git add -A&#xA;git commit -am &#34;Initial commit&#34;&#xA;git branch -D main&#xA;git branch -m main&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jdm-contrib/jdm</title>
    <updated>2023-03-01T01:37:26Z</updated>
    <id>tag:github.com,2023-03-01:/jdm-contrib/jdm</id>
    <link href="https://github.com/jdm-contrib/jdm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A directory of direct links to delete your account from web services.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JustDeleteMe&lt;/h1&gt; &#xA;&lt;p&gt;A directory of direct links to delete your account from web services.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jdm-contrib/jdm/actions/workflows/workflow.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building Locally&lt;/h2&gt; &#xA;&lt;p&gt;JustDeleteMe is built using &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; and is linted and validated using a mixture of Ruby and Node.js packages and scripts.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org&#34;&gt;Ruby&lt;/a&gt; (&amp;gt;=2.7.2)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/jdm-contrib/jdm.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd jdm&#xA;gem install bundler&#xA;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building the site&lt;/h3&gt; &#xA;&lt;p&gt;Just run &lt;code&gt;jekyll serve&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;Tests are run via the &#34;cibuild&#34; script, and can be run via &lt;code&gt;./script/cibuild&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to help, do read our &lt;a href=&#34;https://raw.githubusercontent.com/jdm-contrib/jdm/master/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; guidelines. To help with translating, also see our &lt;a href=&#34;https://raw.githubusercontent.com/jdm-contrib/jdm/master/TRANSLATION_REFERENCE.md&#34;&gt;translation&lt;/a&gt; guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Project licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/jdm-contrib/jdm/master/LICENSE&#34;&gt;MIT License&lt;/a&gt; (MIT). This is a detached fork of the &lt;a href=&#34;https://github.com/justdeleteme/justdelete.me&#34;&gt;original repo&lt;/a&gt; that intends to keep the project alive, as the original one was abandoned.&lt;/p&gt; &#xA;&lt;p&gt;Language icon from &lt;a href=&#34;https://github.com/FortAwesome/Font-Awesome&#34;&gt;Font Awesome&lt;/a&gt; released under the &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC-BY 4.0&lt;/a&gt; license. Minor alignment changes made to optimize for the display size.&lt;/p&gt; &#xA;&lt;p&gt;Search functionality modified from &lt;a href=&#34;https://github.com/stevestreza/DevCenter.me&#34;&gt;DevCenter.me&lt;/a&gt;, MIT licensed, Copyright (c) 2013 Steve Streza.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gfxfundamentals/webgl2-fundamentals</title>
    <updated>2023-03-01T01:37:26Z</updated>
    <id>tag:github.com,2023-03-01:/gfxfundamentals/webgl2-fundamentals</id>
    <link href="https://github.com/gfxfundamentals/webgl2-fundamentals" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WebGL 2 lessons starting from the basics&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebGL2 Fundamentals&lt;/h1&gt; &#xA;&lt;p&gt;This is &lt;a href=&#34;https://webgl2fundamentals.org/&#34;&gt;a series of lessons or tutorials about WebGL2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike most WebGL lessons these are not based off of OpenGL. OpenGL is 20 years old. The lessons of OpenGL don&#39;t match well with WebGL. The APIs have changed too much. The ideas of OpenGL and OpenGL tutorials are out of date with WebGL, OpenGL ES 3.0 and the land of shaders.&lt;/p&gt; &#xA;&lt;p&gt;I would argue that WebGL is actually a very simple API. What makes it appear complicated is the way in which it&#39;s used. The complications are added by the programmer. WebGL itself is simple.&lt;/p&gt; &#xA;&lt;p&gt;These lessons try to show that simplicity and well as teach the fundamentals of 2D math and 3D math so readers can hopefully have an easier time writing their own WebGL programs and understanding the complexity that other programmers pile on top of simple WebGL.&lt;/p&gt; &#xA;&lt;p&gt;This is work in progress. Feel free to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Of course bug fixes are always welcome.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to write a new article please try to always take one step at a time. Don&#39;t do 2 or more things in a single step. Explain any new math in the simplest terms possible. Ideally with diagrams where possible.&lt;/p&gt; &#xA;&lt;h3&gt;Translating&lt;/h3&gt; &#xA;&lt;p&gt;Each translation goes in a folder under &lt;code&gt;webgl/lessons/&amp;lt;country-code&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Required files are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;langinfo.hanson&#xA;index.md&#xA;toc.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;langinfo.hanson&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Defines various language specific options. &lt;a href=&#34;https://github.com/timjansen/hanson&#34;&gt;Hanson&lt;/a&gt; is a JSON like format but allows comments.&lt;/p&gt; &#xA;&lt;p&gt;Current fields are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  // The language (will show up in the language selection menu)&#xA;  language: &#39;English&#39;,&#xA;&#xA;  // Phrase that appears under examples&#xA;  defaultExampleCaption: &#34;click here to open in a separate window&#34;,&#xA;&#xA;  // Title that appears on each page&#xA;  title: &#39;WebGL Fundamentals&#39;,&#xA;&#xA;  // Basic description that appears on each page&#xA;  description: &#39;Learn WebGL from the ground up. No magic&#39;,&#xA;&#xA;  // Link to the language root.&#xA;  link: &#39;https://webglfundamentals.org/webgl/lessons/ja&#39;,  // replace `ja` with country code&#xA;&#xA;  // html that appears after the article and before the comments&#xA;  commentSectionHeader: &#39;&amp;lt;div&amp;gt;Questions? &amp;lt;a href=&#34;https://stackoverflow.com/questions/tagged/webgl&#34;&amp;gt;Ask on stackoverflow&amp;lt;/a&amp;gt;.&amp;lt;/div&amp;gt;\n        &amp;lt;div&amp;gt;Issue/Bug? &amp;lt;a href=&#34;https://github.com/greggman/webgl-fundamentals/issues&#34;&amp;gt;Create an issue on github&amp;lt;/a&amp;gt;.&amp;lt;/div&amp;gt;&#39;,&#xA;&#xA;  // markdown that appears for untranslated articles&#xA;  missing: &#34;Sorry this article has not been translated yet. [Translations Welcome](https://github.com/greggman/webgl-fundamentals)! 😄\n\n[Here&#39;s the original English article for now]({{{origLink}}}).&#34;,&#xA;&#xA;  // the phrase &#34;Table of Contents&#34;&#xA;  toc: &#34;Table of Contents&#34;,&#xA;&#xA;  // translation of categories for table of contents&#xA;  categoryMapping: {&#xA;    &#39;fundamentals&#39;: &#34;Fundamentals&#34;,&#xA;    &#39;image-processing&#39;: &#34;Image Processing&#34;,&#xA;    &#39;matrices&#39;: &#34;2D translation, rotation, scale, matrix math&#34;,&#xA;    &#39;3d&#39;: &#34;3D&#34;,&#xA;    &#39;lighting&#39;: &#34;Lighting&#34;,&#xA;    &#39;organization&#39;: &#34;Structure and Organization&#34;,&#xA;    &#39;geometry&#39;: &#34;Geometry&#34;,&#xA;    &#39;textures&#39;: &#34;Textures&#34;,&#xA;    &#39;rendertargets&#39;: &#34;Rendering To A Texture&#34;,&#xA;    &#39;2d&#39;: &#34;2D&#34;,&#xA;    &#39;text&#39;: &#34;Text&#34;,&#xA;    &#39;misc&#39;: &#34;Misc&#34;,&#xA;    &#39;reference&#39;: &#34;Reference&#34;,&#xA;  },&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;index.md&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is the template for the main page for each language.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;toc.html&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is template for the table of contents for the language. It is included on both the index and on each article. The only parts not auto-generated are the links ending links which you can translate if you want to. The build system will create a placeholder for every English article for which there is no corresponding article in that language. It will be filled the &lt;code&gt;missing&lt;/code&gt; message from above.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;lang.css&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is included if and only if it exists. I&#39;d strongly prefer not to have to use it. In particular I don&#39;t want people to get into arguments about fonts but basically it&#39;s a way to choose the fonts per language. You should set the variables that are absolutely needed. Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* lessons/ko/lang.css */&#xA;&#xA;/* Only comment in overrides as absolutely necessary! */&#xA;:root {&#xA;  --article-font-family: &#34;best font for korean article text&#34;;&#xA;  --headline-font-family: &#34;best font for korean headlines&#34;;&#xA;  /* a block of code */&#xA;  /* --code-block-font-family: &#34;Lucida Console&#34;, Monaco, monospace; */&#xA;  /* a word in a sentence */&#xA;  /* --code-font-family: monospace; */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice 2 settings are not changed. It seems unlikely to me that code would need a different font per language.&lt;/p&gt; &#xA;&lt;p&gt;PS: While we&#39;re here, I love code fonts with ligatures but the seem like a bad idea for a tutorial site because the ligatures hide the actual characters needed so please don&#39;t ask for or use a ligature code font here.&lt;/p&gt; &#xA;&lt;h4&gt;Translation notes&lt;/h4&gt; &#xA;&lt;p&gt;The build process will make a placeholder html file for each article has an english .md file in &lt;code&gt;webgl/lessons&lt;/code&gt; but no corresponding .md file for the language. This is to make it easy to include links in one article that links to another article but that other article has not yet been translated. This way you don&#39;t have to go back and fix already translated articles. Just translate one article at a time and leave the links as is. They&#39;ll link to placeholders until someone translates the missing articles.&lt;/p&gt; &#xA;&lt;p&gt;Articles have front matter at the top&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Title: Localized Title of article&#xA;Description: Localized description of article (used in RSS and social media tags)&#xA;Cateogry: category for article **THIS STAYS IN ENGLISH**&#xA;TOC: Localized text for Table of Contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;DO NOT CHANGE LINKS&lt;/strong&gt; : For example a link to a local resources might look like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[text](link)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&#34;somelink&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While you can add query parameters (see below) do not add &#34;../&#34; to try to make the link relative to the .md file. Links should stay as though the article exists at the same location as the original English.&lt;/p&gt; &#xA;&lt;h3&gt;UI localization&lt;/h3&gt; &#xA;&lt;p&gt;Some of the diagrams allow passing translations for the UI and other text.&lt;/p&gt; &#xA;&lt;p&gt;For example if there is a slider named &#34;rotation&#34; you can add &#34;?ui-rotation=girar&#34; at the end of the URL for the diagram. For 2 or more translations separate them with a &lt;code&gt;&amp;amp;&lt;/code&gt;. Certain characters are disallowed in URLs like &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; etc. For those use their uri encoding.&lt;/p&gt; &#xA;&lt;p&gt;For diagram labels you&#39;ll have to look inside the code. For example for the directional lighting diagram near the start of the code it looks like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const lang = {&#xA;  lightDir: opt.lightDir || &#34;light direction&#34;,&#xA;  dot: opt.dot || &#34;dot(reverseLightDirection,surfaceDirection) = &#34;,&#xA;  surface1: opt.surface1 || &#34;surface&#34;,&#xA;  surface2: opt.surface2 || &#34;direction&#34;,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which means you can localize the labels like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{{diagram url=&#34;resources/directional-lighting.html?lightDir=光線方向&amp;amp;surface1=オブジェクト&amp;amp;surface2=表面方向&amp;amp;dot=dot(光線反対方向,表面方向)%20%3D%20&amp;amp;ui-rotation=角度&#34; caption=&#34;方向を回転してみて&#34; width=&#34;500&#34; height=&#34;400&#34;}}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For testing reference the sample directly in your browser. For example&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webgl2fundamentals.org/webgl/lessons/resources/directional-lighting.html?lightDir=%E5%85%89%E7%B7%9A%E6%96%B9%E5%90%91&amp;amp;surface1=%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88&amp;amp;surface2=%E8%A1%A8%E9%9D%A2%E6%96%B9%E5%90%91&amp;amp;dot=dot(%E5%85%89%E7%B7%9A%E5%8F%8D%E5%AF%BE%E6%96%B9%E5%90%91,%E8%A1%A8%E9%9D%A2%E6%96%B9%E5%90%91)%20%3D%20&amp;amp;ui-rotation=%E8%A7%92%E5%BA%A6&#34;&gt;&lt;code&gt;http://localhost:8080/webgl/lessons/resources/directional-lighting.html?lightDir=光線方向&amp;amp;surface1=オブジェクト&amp;amp;surface2=表面方向&amp;amp;dot=dot(光線反対方向,表面方向)%20%3D%20&amp;amp;ui-rotation=角度&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;To build&lt;/h3&gt; &#xA;&lt;p&gt;The site is built into the &lt;code&gt;out&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;p&gt;Steps&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/gfxfundamentals/webgl2-fundamentals.git&#xA;npm install&#xA;npm run build&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;now open your browser to &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Continuous build&lt;/h3&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;npm run watch&lt;/code&gt; after you&#39;ve built to get continuous building. Only the article .md files and files that are normally copied are supported.&lt;/p&gt; &#xA;&lt;h2&gt;TO DO&lt;/h2&gt; &#xA;&lt;p&gt;A list of articles I&#39;d like to write or see written&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lighting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;spot lighting&lt;/li&gt; &#xA;   &lt;li&gt;normal maps&lt;/li&gt; &#xA;   &lt;li&gt;shadow maps&lt;/li&gt; &#xA;   &lt;li&gt;fog&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;text &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;glyph cache&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;post processing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;how to render to a texture (scene on cube)&lt;/li&gt; &#xA;   &lt;li&gt;DOF&lt;/li&gt; &#xA;   &lt;li&gt;glow&lt;/li&gt; &#xA;   &lt;li&gt;light rays&lt;/li&gt; &#xA;   &lt;li&gt;RGB glitch, CRT distortion, scanlines&lt;/li&gt; &#xA;   &lt;li&gt;color mapping&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Creative coding &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ramp lighting - toon shading&lt;/li&gt; &#xA;   &lt;li&gt;outlines&lt;/li&gt; &#xA;   &lt;li&gt;color palettes&lt;/li&gt; &#xA;   &lt;li&gt;indexed everything&lt;/li&gt; &#xA;   &lt;li&gt;tilemaps&lt;/li&gt; &#xA;   &lt;li&gt;depth sprites&lt;/li&gt; &#xA;   &lt;li&gt;skinning&lt;/li&gt; &#xA;   &lt;li&gt;histogram&lt;/li&gt; &#xA;   &lt;li&gt;vsa&lt;/li&gt; &#xA;   &lt;li&gt;shadertoy&lt;/li&gt; &#xA;   &lt;li&gt;sdf&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;code organization &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;scene graph &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;putting lights and camera in scene graph&lt;/li&gt; &#xA;     &lt;li&gt;LODs&lt;/li&gt; &#xA;     &lt;li&gt;frustum culling&lt;/li&gt; &#xA;     &lt;li&gt;grid culling&lt;/li&gt; &#xA;     &lt;li&gt;oct-tree culling&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Physically based rendering&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>