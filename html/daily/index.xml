<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-01T01:27:37Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tc39/proposal-pattern-matching</title>
    <updated>2023-08-01T01:27:37Z</updated>
    <id>tag:github.com,2023-08-01:/tc39/proposal-pattern-matching</id>
    <link href="https://github.com/tc39/proposal-pattern-matching" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pattern matching syntax for ECMAScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ECMAScript Pattern Matching&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://tc39.github.io/process-document/&#34;&gt;Status&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stage&lt;/strong&gt;: 1&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spec Text&lt;/strong&gt;: &lt;a href=&#34;https://tc39.github.io/proposal-pattern-matching&#34;&gt;https://tc39.github.io/proposal-pattern-matching&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Authors&lt;/strong&gt;: Originally Kat Marchán (Microsoft, &lt;a href=&#34;https://twitter.com/zkat__&#34;&gt;@zkat__&lt;/a&gt;); now, the below champions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Champions&lt;/strong&gt;: (in alphabetical order)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Daniel Rosenwasser (Microsoft, &lt;a href=&#34;https://twitter.com/drosenwasser&#34;&gt;@drosenwasser&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Jack Works (Sujitech, &lt;a href=&#34;https://github.com/Jack-Works&#34;&gt;@Jack-Works&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Jordan Harband (&lt;a href=&#34;https://twitter.com/ljharb&#34;&gt;@ljharb&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Mark Cohen (Netflix, &lt;a href=&#34;https://twitter.com/mpcsh_&#34;&gt;@mpcsh_&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Ross Kirsling (Sony, &lt;a href=&#34;https://twitter.com/rkirsling&#34;&gt;@rkirsling&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Tab Atkins-Bittner (Google, &lt;a href=&#34;https://twitter.com/tabatkins&#34;&gt;@tabatkins&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#problem&#34;&gt;Problem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#priorities-for-a-solution&#34;&gt;Priorities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#prior-art&#34;&gt;Prior Art&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#code-samples&#34;&gt;Code Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#motivating-examples&#34;&gt;Motivating Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#proposal&#34;&gt;Terminology/Proposal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#possible-future-enhancements&#34;&gt;Possible Future Enhancements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;h2&gt;Problem&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways to match values in the language, but there are no ways to match patterns beyond regular expressions for strings. &lt;code&gt;switch&lt;/code&gt; is severely limited: it may not appear in expression position; an explicit &lt;code&gt;break&lt;/code&gt; is required in each &lt;code&gt;case&lt;/code&gt; to avoid accidental fallthrough; scoping is ambiguous (block-scoped variables inside one &lt;code&gt;case&lt;/code&gt; are available in the scope of the others, unless curly braces are used); the only comparison it can do is &lt;code&gt;===&lt;/code&gt;; etc.&lt;/p&gt; &#xA;&lt;h2&gt;Priorities for a solution&lt;/h2&gt; &#xA;&lt;p&gt;This section details this proposal’s priorities. Note that not every champion may agree with each priority.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;Pattern&lt;/em&gt; matching&lt;/h3&gt; &#xA;&lt;p&gt;The pattern matching construct is a full conditional logic construct that can do more than just pattern matching. As such, there have been (and there will be more) trade-offs that need to be made. In those cases, we should prioritize the ergonomics of structural pattern matching over other capabilities of this construct.&lt;/p&gt; &#xA;&lt;h3&gt;Subsumption of &lt;code&gt;switch&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This feature must be easily searchable, so that tutorials and documentation are easy to locate, and so that the feature is easy to learn and recognize. As such, there must be no syntactic overlap with the &lt;code&gt;switch&lt;/code&gt; statement.&lt;/p&gt; &#xA;&lt;p&gt;This proposal seeks to preserve the good parts of &lt;code&gt;switch&lt;/code&gt;, and eliminate any reasons to reach for it.&lt;/p&gt; &#xA;&lt;h3&gt;Be better than &lt;code&gt;switch&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;switch&lt;/code&gt; contains a plethora of footguns such as accidental case fallthrough and ambiguous scoping. This proposal should eliminate those footguns, while also introducing new capabilities that &lt;code&gt;switch&lt;/code&gt; currently can not provide.&lt;/p&gt; &#xA;&lt;h3&gt;Expression semantics&lt;/h3&gt; &#xA;&lt;p&gt;The pattern matching construct should be usable as an expression:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;return match { ... }&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;let foo = match { ... }&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;() =&amp;gt; match { ... }&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The value of the whole expression is the value of whatever &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;clause&lt;/a&gt; is matched.&lt;/p&gt; &#xA;&lt;h3&gt;Exhaustiveness and ordering&lt;/h3&gt; &#xA;&lt;p&gt;If the developer wants to ignore certain possible cases, they should specify that explicitly. A development-time error is less costly than a production-time error from something further down the stack.&lt;/p&gt; &#xA;&lt;p&gt;If the developer wants two cases to share logic (what we know as &#34;fall-through&#34; from &lt;code&gt;switch&lt;/code&gt;), they should specify it explicitly. Implicit fall-through inevitably silently accepts buggy code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;Clauses&lt;/a&gt; should always be checked in the order they’re written, i.e. from top to bottom.&lt;/p&gt; &#xA;&lt;h3&gt;User extensibility&lt;/h3&gt; &#xA;&lt;p&gt;Userland objects should be able to encapsulate their own matching semantics, without unnecessarily privileging builtins. This includes regular expressions (as opposed to the literal pattern syntax), numeric ranges, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Prior Art&lt;/h2&gt; &#xA;&lt;p&gt;This proposal adds a pattern matching expression to the language, based in part on the existing &lt;a href=&#34;https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns&#34;&gt;Destructuring Binding Patterns&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This proposal was approved for Stage 1 in the May 2018 TC39 meeting, and slides for that presentation are available &lt;a href=&#34;https://docs.google.com/presentation/d/1WPyAO4pHRsfwGoiIZupz_-tzAdv8mirw-aZfbxbAVcQ&#34;&gt;here&lt;/a&gt;. Its current form was presented to TC39 in the April 2021 meeting (&lt;a href=&#34;https://hackmd.io/@mpcsh/HkZ712ig_#/&#34;&gt;slides&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This proposal draws from, and partially overlaps with, corresponding features in &lt;a href=&#34;https://coffeescript.org/#switch&#34;&gt;CoffeeScript&lt;/a&gt;, &lt;a href=&#34;https://doc.rust-lang.org/1.6.0/book/patterns.html&#34;&gt;Rust&lt;/a&gt;, &lt;a href=&#34;https://www.python.org/dev/peps/pep-0622/&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/pattern-matching&#34;&gt;F#&lt;/a&gt;, &lt;a href=&#34;http://www.scala-lang.org/files/archive/spec/2.11/08-pattern-matching.html&#34;&gt;Scala&lt;/a&gt;, &lt;a href=&#34;https://elixir-lang.org/getting-started/pattern-matching.html&#34;&gt;Elixir/Erlang&lt;/a&gt;, and &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1371r2.pdf&#34;&gt;C++&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Userland matching&lt;/h3&gt; &#xA;&lt;p&gt;A list of community libraries that provide similar matching functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OliverBrotchie/optionals&#34;&gt;Optionals&lt;/a&gt; — Rust-like error handling, options and exhaustive pattern matching for TypeScript and Deno&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gvergnaud/ts-pattern&#34;&gt;ts-pattern&lt;/a&gt; — Exhaustive Pattern Matching library for TypeScript, with smart type inference.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iptop/babel-plugin-proposal-pattern-matching&#34;&gt;babel-plugin-proposal-pattern-matching&lt;/a&gt; — Minimal grammar, high performance JavaScript pattern matching implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shuckster/match-iz&#34;&gt;match-iz&lt;/a&gt; — A tiny functional pattern-matching library inspired by the TC39 proposal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/concept-not-found/patcom&#34;&gt;patcom&lt;/a&gt; — Feature parity with TC39 proposal without any new syntax&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Code samples&lt;/h1&gt; &#xA;&lt;h2&gt;General terminology&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;match (res) {&#xA;  when ({ status: 200, body, ...rest }): handleData(body, rest)&#xA;  when ({ status, destination: url }) if (300 &amp;lt;= status &amp;amp;&amp;amp; status &amp;lt; 400):&#xA;    handleRedirect(url)&#xA;  when ({ status: 500 }) if (!this.hasRetried): do {&#xA;    retry(req);&#xA;    this.hasRetried = true;&#xA;  }&#xA;  default: throwSomething();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;match expression&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The whole block beginning with the &lt;code&gt;match&lt;/code&gt; keyword, is the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#match-construct&#34;&gt;&lt;strong&gt;match construct&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;res&lt;/code&gt; is the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;&lt;strong&gt;matchable&lt;/strong&gt;&lt;/a&gt;. This can be any expression.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are four &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;&lt;strong&gt;clauses&lt;/strong&gt;&lt;/a&gt; in this example: three &lt;code&gt;when&lt;/code&gt; clauses, and one &lt;code&gt;default&lt;/code&gt; clause.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;clause&lt;/a&gt; consists of a left-hand side (LHS) and a right-hand side (RHS), separated by a colon (&lt;code&gt;:&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The LHS can begin with the &lt;code&gt;when&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; keywords.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;when&lt;/code&gt; keyword must be followed by a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;&lt;strong&gt;pattern&lt;/strong&gt;&lt;/a&gt; in parentheses. Each of the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;&lt;code&gt;when&lt;/code&gt; clauses&lt;/a&gt; here contain &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#object-pattern&#34;&gt;&lt;strong&gt;object patterns&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The parenthesized pattern may be followed by a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#guard&#34;&gt;&lt;strong&gt;guard&lt;/strong&gt;&lt;/a&gt;, which consists of the &lt;code&gt;if&lt;/code&gt; keyword, and a condition (any expression) in parentheses. &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#guard&#34;&gt;Guards&lt;/a&gt; provide a space for additional logic when &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; aren’t expressive enough.&lt;/li&gt; &#xA;   &lt;li&gt;An explicit &lt;code&gt;default&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;clause&lt;/a&gt; handles the &#34;no match&#34; scenario by always matching. It must always appear last when present, as any &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;clauses&lt;/a&gt; after an &lt;code&gt;default&lt;/code&gt; are unreachable.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The RHS is any expression. It will be evaluated if the LHS successfully matches, and the result will be the value of the entire &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#match-construct&#34;&gt;match construct&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We assume that &lt;a href=&#34;https://github.com/tc39/proposal-do-expressions&#34;&gt;&lt;code&gt;do&lt;/code&gt; expressions&lt;/a&gt; will mature soon, which will allow users to put multiple statements in an RHS; today, that requires an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&#34;&gt;IIFE&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;is expression&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const problematic = res is { status: 500 };&#xA;if (problematic) logger.report(res);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A new &lt;a href=&#34;https://tc39.es/ecma262/#prod-RelationalExpression&#34;&gt;RelationalExpression&lt;/a&gt; like &lt;code&gt;a instanceof b&lt;/code&gt; and &lt;code&gt;a in b&lt;/code&gt;, but for patterns.&lt;/li&gt; &#xA; &lt;li&gt;LHS is an expression, and RHS is a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;&lt;strong&gt;pattern&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More on combinators&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;match (command) {&#xA;  when ([ &#39;go&#39;, dir and (&#39;north&#39; or &#39;east&#39; or &#39;south&#39; or &#39;west&#39;)]): go(dir);&#xA;  when ([ &#39;take&#39;, item and /[a-z]+ ball/ and { weight }]): take(item);&#xA;  default: lookAround()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sample is a contrived parser for a text-based adventure game.&lt;/p&gt; &#xA;&lt;p&gt;The first clause matches if the command is an array with exactly two items. The first must be exactly the string &lt;code&gt;&#39;go&#39;&lt;/code&gt;, and the second must be one of the given cardinal directions. Note the use of the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern-combinators&#34;&gt;&lt;strong&gt;and combinator&lt;/strong&gt;&lt;/a&gt; to bind the second item in the array to &lt;code&gt;dir&lt;/code&gt; using an &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#identifier-pattern&#34;&gt;&lt;strong&gt;identifier pattern&lt;/strong&gt;&lt;/a&gt; before verifying (using the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern-combinators&#34;&gt;or combinator&lt;/a&gt;) that it’s one of the given directions.&lt;/p&gt; &#xA;&lt;p&gt;(Note that there is intentionally no precedence relationship between the pattern operators, such as &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, or &lt;code&gt;with&lt;/code&gt;; parentheses must be used to group &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; using different operators at the same level.)&lt;/p&gt; &#xA;&lt;p&gt;The second &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;clause&lt;/a&gt; showcases a more complex use of the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern-combinators&#34;&gt;and combinator&lt;/a&gt;. First is an &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#identifier-pattern&#34;&gt;identifier pattern&lt;/a&gt; that binds the second item in the array to &lt;code&gt;item&lt;/code&gt;. Then, there’s a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#regex-pattern&#34;&gt;regex pattern&lt;/a&gt; that checks if the item is a &lt;code&gt;&#34;something ball&#34;&lt;/code&gt;. Last is an &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#object-pattern&#34;&gt;object pattern&lt;/a&gt;, which checks that the item has a &lt;code&gt;weight&lt;/code&gt; property (which, combined with the previous pattern, means that the item must be an exotic string object), and makes that binding available to the RHS.&lt;/p&gt; &#xA;&lt;h2&gt;Array length checking&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;match (res) {&#xA;  if (isEmpty(res)): ...&#xA;  when ({ data: [page] }): ...&#xA;  when ({ data: [frontPage, ...pages] }): ...&#xA;  default: { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#array-pattern&#34;&gt;&lt;strong&gt;Array patterns&lt;/strong&gt;&lt;/a&gt; implicitly check the length of the incoming &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;clause&lt;/a&gt; is a bare &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#guard&#34;&gt;guard&lt;/a&gt;, which matches if the condition is truthy.&lt;/p&gt; &#xA;&lt;p&gt;The second &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;clause&lt;/a&gt; is an &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#object-pattern&#34;&gt;object pattern&lt;/a&gt; which contains an &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#array-pattern&#34;&gt;array pattern&lt;/a&gt;, which matches if &lt;code&gt;data&lt;/code&gt; has exactly one element, and binds that element to &lt;code&gt;page&lt;/code&gt; for the RHS.&lt;/p&gt; &#xA;&lt;p&gt;The third &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;clause&lt;/a&gt; matches if &lt;code&gt;data&lt;/code&gt; has &lt;strong&gt;at least one&lt;/strong&gt; element, binding that first element to &lt;code&gt;frontPage&lt;/code&gt;, and binding an array of any remaining elements to &lt;code&gt;pages&lt;/code&gt; using a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#rest-pattern&#34;&gt;&lt;strong&gt;rest pattern&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#rest-pattern&#34;&gt;Rest patterns&lt;/a&gt; can also be used in objects, with the expected semantics.)&lt;/p&gt; &#xA;&lt;h2&gt;Bindings from regex patterns with named capture groups&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;match (arithmeticStr) {&#xA;  when (/(?&amp;lt;left&amp;gt;\d+) \+ (?&amp;lt;right&amp;gt;\d+)/): process(left, right);&#xA;  when (/(\d+) \* (\d+)/ with [, left, right]): process(left, right);&#xA;  default: ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sample is a contrived arithmetic expression parser which uses &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#regex-patterns&#34;&gt;regex patterns&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first clause matches integer addition expressions, using named capture groups for each of the operands. The RHS is able to see the named capture groups as bindings.&lt;/p&gt; &#xA;&lt;p&gt;(These magic bindings will only work with &lt;strong&gt;literal&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#regex-patterns&#34;&gt;regex patterns&lt;/a&gt;. If a regex with named capture groups is passed into an &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#interpolation-pattern&#34;&gt;interpolation pattern&lt;/a&gt;, the RHS will see no magic bindings. It’s very important (e.g. for code analysis tools) that bindings only be introduced where the name is locally present.)&lt;/p&gt; &#xA;&lt;p&gt;The second clause matches integer multiplication expressions, but without named capture groups. Regexes (both literals and references inside &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#interpolation-patterns&#34;&gt;interpolation patterns&lt;/a&gt;) implement the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#custom-matcher-protocol&#34;&gt;custom matcher protocol&lt;/a&gt;, which makes the return value of &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match&#34;&gt;&lt;code&gt;String.prototype.match&lt;/code&gt;&lt;/a&gt; available to the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#with-chaining&#34;&gt;&lt;code&gt;with&lt;/code&gt; operator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(Regexes are a major motivator for the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#custom-matcher-protocol&#34;&gt;custom matcher protocol&lt;/a&gt; ― while we could treat them as a special case, they’re just ordinary objects. If they can be used as a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#regex-pattern&#34;&gt;pattern&lt;/a&gt;, then userland objects should be able to do this as well.)&lt;/p&gt; &#xA;&lt;h2&gt;Speaking of interpolations...&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const LF = 0x0a;&#xA;const CR = 0x0d;&#xA;&#xA;match (nextChar()) {&#xA;  when (${LF}): ...&#xA;  when (${CR}): ...&#xA;  default: ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we see the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#interpolation-pattern&#34;&gt;&lt;strong&gt;interpolation operator&lt;/strong&gt;&lt;/a&gt; (&lt;code&gt;${}&lt;/code&gt;), which escapes from &#34;pattern mode&#34; syntax to &#34;expression mode&#34; syntax. It is conceptually very similar to using &lt;code&gt;${}&lt;/code&gt; in template strings.&lt;/p&gt; &#xA;&lt;p&gt;Written as just &lt;code&gt;LF&lt;/code&gt;, &lt;code&gt;LF&lt;/code&gt; is an &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#identifier-pattern&#34;&gt;identifier pattern&lt;/a&gt;, which would always match regardless of the value of the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; (&lt;code&gt;nextChar()&lt;/code&gt;) and bind it to the given name (&lt;code&gt;LF&lt;/code&gt;), shadowing the outer &lt;code&gt;const LF = 0x0a&lt;/code&gt; declaration at the top.&lt;/p&gt; &#xA;&lt;p&gt;Written as &lt;code&gt;${LF}&lt;/code&gt;, &lt;code&gt;LF&lt;/code&gt; is evaluated as an expression, which results in the primitive &lt;code&gt;Number&lt;/code&gt; value &lt;code&gt;0x0a&lt;/code&gt;. This value is then treated as a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#primitive-pattern&#34;&gt;literal Number pattern&lt;/a&gt;, and the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;clause&lt;/a&gt; matches if the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is &lt;code&gt;0x0a&lt;/code&gt;. The RHS sees no new bindings.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#custom-matcher-protocol&#34;&gt;Custom matcher protocol&lt;/a&gt; interpolations&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class Option {&#xA;  #value;&#xA;  #hasValue = false;&#xA;&#xA;  constructor (hasValue, value) {&#xA;    this.#hasValue = !!hasValue;&#xA;    if (hasValue) {&#xA;      this.#value = value;&#xA;    }&#xA;  }&#xA;&#xA;  get value() {&#xA;    if (this.#hasValue) return this.#value;&#xA;    throw new Exception(&#39;Can’t get the value of an Option.None.&#39;);&#xA;  }&#xA;&#xA;  static Some(val) {&#xA;    return new Option(true, val);&#xA;  }&#xA;&#xA;  static None() {&#xA;    return new Option(false);&#xA;  }&#xA;&#xA;  static {&#xA;    Option.Some[Symbol.matcher] = (val) =&amp;gt; ({&#xA;      matched: #hasValue in val &amp;amp;&amp;amp; val.#hasValue,&#xA;      value: #value in val &amp;amp;&amp;amp; val.#value,&#xA;    });&#xA;&#xA;    Option.None[Symbol.matcher] = (val) =&amp;gt; ({&#xA;      matched: #hasValue in val &amp;amp;&amp;amp; !val.#hasValue&#xA;    });&#xA;  }&#xA;}&#xA;&#xA;match (result) {&#xA;  when (${Option.Some} with val): console.log(val);&#xA;  when (${Option.None}): console.log(&#34;none&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this sample implementation of the common &#34;Option&#34; type, the expressions inside &lt;code&gt;${}&lt;/code&gt; are the static &#34;constructors&#34; &lt;code&gt;Option.Some&lt;/code&gt; and &lt;code&gt;Option.None&lt;/code&gt;, which have a &lt;code&gt;Symbol.matcher&lt;/code&gt; method. That method is invoked with the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; (&lt;code&gt;result&lt;/code&gt;) as its sole argument. The &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#interpolation-pattern&#34;&gt;interpolation pattern&lt;/a&gt; is considered to have matched if the &lt;code&gt;Symbol.matcher&lt;/code&gt; method returns an object with a truthy &lt;code&gt;matched&lt;/code&gt; property. Any other return value (including &lt;code&gt;true&lt;/code&gt; by itself) indicates a failed match. (A thrown error percolates up the expression tree, as usual.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#interpolation-pattern&#34;&gt;interpolation pattern&lt;/a&gt; can optionally chain into another pattern using &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#with-chaining&#34;&gt;&lt;code&gt;with&lt;/code&gt; chaining&lt;/a&gt;, which matches against the &lt;code&gt;value&lt;/code&gt; property of the object returned by the &lt;code&gt;Symbol.matcher&lt;/code&gt; method; in this case, it allows &lt;code&gt;Option.Some&lt;/code&gt; to expose the value inside of the &lt;code&gt;Option&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Dynamic custom matchers can readily be created, opening a world of possibilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function asciiCI(str) {&#xA;  return {&#xA;    [Symbol.matcher](matchable) {&#xA;      return {&#xA;        matched: str.toLowerCase() == matchable.toLowerCase()&#xA;      };&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;match (cssProperty) {&#xA;  when ({ name: name and ${asciiCI(&#34;color&#34;)}, value }):&#xA;    console.log(&#34;color: &#34; + value);&#xA;    // matches if `name` is an ASCII case-insensitive match&#xA;    // for &#34;color&#34;, so `{name:&#34;COLOR&#34;, value:&#34;red&#34;} would match.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Built-in custom matchers&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;match (value) {&#xA;  when (${Number}): ...&#xA;  when (${BigInt}): ...&#xA;  when (${String}): ...&#xA;  when (${Array}): ...&#xA;  default: ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the built-in classes come with a predefined &lt;code&gt;Symbol.matcher&lt;/code&gt; method which uses &lt;a href=&#34;https://github.com/tc39/how-we-work/raw/master/terminology.md#brand-check&#34;&gt;brand check semantics&lt;/a&gt; to determine if the incoming &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is of that type. If so, the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is returned under the &lt;code&gt;value&lt;/code&gt; key.&lt;/p&gt; &#xA;&lt;p&gt;Brand checks allow for predictable results across realms. So, for example, arrays from other windows will still successfully match the &lt;code&gt;${Array}&lt;/code&gt; pattern, similar to &lt;code&gt;Array.isArray()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Motivating examples&lt;/h2&gt; &#xA;&lt;p&gt;Below are selected situations where we expect pattern matching will be widely used. As such, we want to optimize the ergonomics of such cases to the best of our ability.&lt;/p&gt; &#xA;&lt;p&gt;Matching &lt;code&gt;fetch()&lt;/code&gt; responses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const res = await fetch(jsonService)&#xA;match (res) {&#xA;  when ({ status: 200, headers: { &#39;Content-Length&#39;: s } }):&#xA;    console.log(`size is ${s}`);&#xA;  when ({ status: 404 }):&#xA;    console.log(&#39;JSON not found&#39;);&#xA;  when ({ status }) if (status &amp;gt;= 400): do {&#xA;    throw new RequestError(res);&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;More concise, more functional handling of Redux reducers (compare with &lt;a href=&#34;https://redux.js.org/basics/reducers#splitting-reducers&#34;&gt;this same example in the Redux documentation&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function todosReducer(state = initialState, action) {&#xA;  return match (action) {&#xA;    when ({ type: &#39;set-visibility-filter&#39;, payload: visFilter }):&#xA;      { ...state, visFilter }&#xA;    when ({ type: &#39;add-todo&#39;, payload: text }):&#xA;      { ...state, todos: [...state.todos, { text, completed: false }] }&#xA;    when ({ type: &#39;toggle-todo&#39;, payload: index }): do {&#xA;      const newTodos = state.todos.map((todo, i) =&amp;gt; {&#xA;        return i !== index ? todo : {&#xA;          ...todo,&#xA;          completed: !todo.completed&#xA;        };&#xA;      });&#xA;&#xA;      ({&#xA;        ...state,&#xA;        todos: newTodos,&#xA;      });&#xA;    }&#xA;    default: state // ignore unknown actions&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Concise conditional logic in JSX (via &lt;a href=&#34;https://twitter.com/bogas04/status/977499729557839873&#34;&gt;Divjot Singh&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Fetch url={API_URL}&amp;gt;&#xA;  {props =&amp;gt; match (props) {&#xA;    when ({ loading }): &amp;lt;Loading /&amp;gt;&#xA;    when ({ error }): do {&#xA;      console.err(&#34;something bad happened&#34;);&#xA;      &amp;lt;Error error={error} /&amp;gt;&#xA;    }&#xA;    when ({ data }): &amp;lt;Page data={data} /&amp;gt;&#xA;  }}&#xA;&amp;lt;/Fetch&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Proposal&lt;/h1&gt; &#xA;&lt;h2&gt;Match construct&lt;/h2&gt; &#xA;&lt;p&gt;Refers to the entire &lt;code&gt;match (...) { ... }&lt;/code&gt; expression. Evaluates to the RHS of the first &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;clause&lt;/a&gt; to match, or throws a TypeError if none match.&lt;/p&gt; &#xA;&lt;h2&gt;Matchable&lt;/h2&gt; &#xA;&lt;p&gt;The value a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;pattern&lt;/a&gt; is matched against. The top-level matchable shows up in &lt;code&gt;match (matchable) { ... }&lt;/code&gt;, and is used for each clause as the initial matchable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#array-pattern&#34;&gt;Destructuring patterns&lt;/a&gt; can pull values out of a matchable, using these sub-values as matchables for their own nested &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt;. For example, matching against &lt;code&gt;[&#34;foo&#34;]&lt;/code&gt; will confirm the matchable itself is an array-like with one item, then treat the first item as a matchable against the &lt;code&gt;&#34;foo&#34;&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#primitive-pattern&#34;&gt;primitive pattern&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Clause&lt;/h2&gt; &#xA;&lt;p&gt;One &#34;arm&#34; of the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#match-construct&#34;&gt;match construct&lt;/a&gt;’s contents, consisting of an LHS (left-hand side) and an RHS (right-hand side), separated by a colon (&lt;code&gt;:&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The LHS can look like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;when (&amp;lt;pattern&amp;gt;)&lt;/code&gt;, which matches its &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;pattern&lt;/a&gt; against the top-level &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;if (&amp;lt;expr&amp;gt;)&lt;/code&gt;, which matches if the &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is truthy;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;when (&amp;lt;pattern&amp;gt;) if (&amp;lt;expr&amp;gt;)&lt;/code&gt;, which does both;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default&lt;/code&gt;, which always succeeds but must be the final clause.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The RHS is an arbitrary JS expression, which the whole &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#match-construct&#34;&gt;match construct&lt;/a&gt; resolves to if the LHS successfully matches.&lt;/p&gt; &#xA;&lt;p&gt;(There is &lt;a href=&#34;https://github.com/tc39/proposal-pattern-matching/issues/181&#34;&gt;an open issue&lt;/a&gt; about whether there should be some separator syntax between the LHS and RHS.)&lt;/p&gt; &#xA;&lt;p&gt;The LHS’s patterns, if any, can introduce variable bindings which are visible to the guard and the RHS of the same clause. Bindings are not visible across clauses. Each pattern describes what bindings, if any, it introduces.&lt;/p&gt; &#xA;&lt;h3&gt;TODO: LHS&lt;/h3&gt; &#xA;&lt;h3&gt;TODO: RHS&lt;/h3&gt; &#xA;&lt;h2&gt;Guard&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;if (&amp;lt;expr&amp;gt;)&lt;/code&gt; part of a clause. The &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; sees bindings present at the start of the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#match-construct&#34;&gt;match construct&lt;/a&gt;; if the clause began with a &lt;code&gt;when (&amp;lt;pattern&amp;gt;)&lt;/code&gt;, it additionally sees the bindings introduced by the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;pattern&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pattern&lt;/h2&gt; &#xA;&lt;p&gt;There are several types of patterns:&lt;/p&gt; &#xA;&lt;h3&gt;Primitive Pattern&lt;/h3&gt; &#xA;&lt;p&gt;Boolean literals, numeric literals, string literals, and the null literal.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, some expressions that are &lt;em&gt;almost&lt;/em&gt; literals, and function as literals in people’s heads, are allowed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;, matching the undefined value&lt;/li&gt; &#xA; &lt;li&gt;numeric literals preceded by an unary &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, like &lt;code&gt;-1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Infinity&lt;/code&gt; (with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; prefixes as well)&lt;/li&gt; &#xA; &lt;li&gt;untagged template literals, with the interpolation expressions seeing only the bindings present at the start of the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#match-construct&#34;&gt;match construct&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These match if the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is &lt;a href=&#34;https://tc39.es/ecma262/#sec-samevalue&#34;&gt;&lt;code&gt;SameValue&lt;/code&gt;&lt;/a&gt; with them, with one exception: if the pattern is the literal &lt;code&gt;0&lt;/code&gt; (without the unary prefix operators &lt;code&gt;+0&lt;/code&gt; or &lt;code&gt;-0&lt;/code&gt;), it is instead compared with &lt;a href=&#34;https://tc39.es/ecma262/#sec-samevaluezero&#34;&gt;&lt;code&gt;SameValueZero&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(That is, &lt;code&gt;+0&lt;/code&gt; and &lt;code&gt;-0&lt;/code&gt; only match positive and negative zero, respectively, while &lt;code&gt;0&lt;/code&gt; matches both zeroes without regard for the sign.)&lt;/p&gt; &#xA;&lt;p&gt;They do not introduce bindings.&lt;/p&gt; &#xA;&lt;h3&gt;Identifier Pattern&lt;/h3&gt; &#xA;&lt;p&gt;Any identifier that isn’t a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#primitive-matcher&#34;&gt;primitive matcher&lt;/a&gt;, such as &lt;code&gt;foo&lt;/code&gt;. These always match, and bind the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; to the given binding name.&lt;/p&gt; &#xA;&lt;h3&gt;Regex Pattern&lt;/h3&gt; &#xA;&lt;p&gt;A regular expression literal.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is stringified, and the pattern matches if the string matches the regex. If the regex defines named capture groups, those names are introduced as bindings, bound to the captured substrings. Regex patterns can use &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#with-chaining&#34;&gt;&lt;code&gt;with&lt;/code&gt;-chaining&lt;/a&gt; to further match a pattern against the regex’s match result.&lt;/p&gt; &#xA;&lt;h3&gt;Interpolation pattern&lt;/h3&gt; &#xA;&lt;p&gt;An arbitrary JS expression wrapped in &lt;code&gt;${}&lt;/code&gt;, just like in template literals. For example, &lt;code&gt;${myVariable}&lt;/code&gt;, &lt;code&gt;${&#34;foo-&#34; + restOfString}&lt;/code&gt;, or &lt;code&gt;${getValue()}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At runtime, the expression inside the &lt;code&gt;${}&lt;/code&gt; is evaluated. If it resolves to an object with a method named &lt;code&gt;Symbol.matcher&lt;/code&gt;, that method is invoked, and matching proceeds with the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#custom-matcher-protocol&#34;&gt;custom matcher protocol&lt;/a&gt; semantics. If it resolves to anything else (typically a primitive, a &lt;code&gt;Symbol&lt;/code&gt;, or an object without a &lt;code&gt;Symbol.matcher&lt;/code&gt; function), then the pattern matches if the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is &lt;a href=&#34;https://tc39.es/ecma262/#sec-samevalue&#34;&gt;&lt;code&gt;SameValue&lt;/code&gt;&lt;/a&gt; with the result.&lt;/p&gt; &#xA;&lt;p&gt;Interpolation patterns can use &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#with-chaining&#34;&gt;&lt;code&gt;with&lt;/code&gt;-chaining&lt;/a&gt; to further match against the &lt;code&gt;value&lt;/code&gt; key of the object returned by the &lt;code&gt;Symbol.matcher&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;h3&gt;Array Pattern&lt;/h3&gt; &#xA;&lt;p&gt;A comma-separated list of zero or more patterns or holes, wrapped in square brackets, like &lt;code&gt;[&#34;foo&#34;, a, {bar}]&lt;/code&gt;. &#34;Holes&#34; are just nothing (or whitespace), like &lt;code&gt;[,,thirdItem]&lt;/code&gt;. The final item can optionally be either a &#34;rest pattern&#34;, looking like &lt;code&gt;...&lt;/code&gt;, or a &#34;binding rest pattern&#34;, looking like &lt;code&gt;...&amp;lt;identifier&amp;gt;&lt;/code&gt;. (Aka, an array pattern looks like array destructuring, save for the addition of the &#34;rest pattern&#34; variant.)&lt;/p&gt; &#xA;&lt;p&gt;First, an iterator is obtained from the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt;: if the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is itself iterable (exposes a &lt;code&gt;[Symbol.iterator]&lt;/code&gt; method) that is used; if it’s array-like, an array iterator is used.&lt;/p&gt; &#xA;&lt;p&gt;Then, items are pulled from the iterator, and matched against the array pattern’s corresponding nested patterns. (Holes always match, introducing no bindings.) If any of these matches fail, the entire array pattern fails to match.&lt;/p&gt; &#xA;&lt;p&gt;If the array pattern ends in a binding rest pattern, the remainder of the iterator is pulled into an Array, and bound to the identifier from the binding rest pattern, just like in array destructuring.&lt;/p&gt; &#xA;&lt;p&gt;If the array pattern does &lt;em&gt;not&lt;/em&gt; end in a rest pattern (binding or otherwise), the iterator must match the array pattern’s length: one final item is pulled from the iterator, and if it succeeds (rather than closing the iterator), the array pattern fails to match.&lt;/p&gt; &#xA;&lt;p&gt;The array pattern introduces all the bindings introduced by its nested patterns, plus the binding introduced by its binding rest pattern, if present.&lt;/p&gt; &#xA;&lt;p&gt;Bindings introduced by earlier nested patterns are visible to later nested patterns in the same array pattern. (For example, &lt;code&gt;[a, ${a}]&lt;/code&gt;) will match only if the second item in the array is identical to the first item.)&lt;/p&gt; &#xA;&lt;h4&gt;Array Pattern Caching&lt;/h4&gt; &#xA;&lt;p&gt;To allow for idiomatic uses of generators and other &#34;single-shot&#34; iterators to be reasonably matched against several array patterns, the iterators and their results are cached over the scope of the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#match-construct&#34;&gt;match construct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Specifically, whenever a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is matched against an array pattern, the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is used as the key in a cache, whose value is the iterator obtained from the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt;, and all items pulled from the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; by an array pattern.&lt;/p&gt; &#xA;&lt;p&gt;Whenever something would be matched against an array pattern, the cache is first checked, and the already-pulled items stored in the cache are used for the pattern, with new items pulled from the iterator only if necessary.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function* integers(to) {&#xA;  for(var i = 1; i &amp;lt;= to; i++) yield i;&#xA;}&#xA;&#xA;const fiveIntegers = integers(5);&#xA;match (fiveIntegers) {&#xA;  when([a]):&#xA;    console.log(`found one int: ${a}`);&#xA;    // Matching a generator against an array pattern.&#xA;    // Obtain the iterator (which is just the generator itself),&#xA;    // then pull two items:&#xA;    // one to match against the `a` pattern (which succeeds),&#xA;    // the second to verify the iterator only has one item&#xA;    // (which fails).&#xA;  when([a, b]):&#xA;    console.log(`found two ints: ${a} and ${b}`);&#xA;    // Matching against an array pattern again.&#xA;    // The generator object has already been cached,&#xA;    // so we fetch the cached results.&#xA;    // We need three items in total;&#xA;    // two to check against the patterns,&#xA;    // and the third to verify the iterator has only two items.&#xA;    // Two are already in the cache,&#xA;    // so we’ll just pull one more (and fail the pattern).&#xA;  default: console.log(&#34;more than two ints&#34;);&#xA;}&#xA;console.log([...fiveIntegers]);&#xA;// logs [4, 5]&#xA;// The match construct pulled three elements from the generator,&#xA;// so there’s two leftover afterwards.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When execution of the match construct finishes, all cached iterators are closed.&lt;/p&gt; &#xA;&lt;h3&gt;Object Pattern&lt;/h3&gt; &#xA;&lt;p&gt;A comma-separated list of zero or more &#34;object pattern clauses&#34;, wrapped in curly braces, like &lt;code&gt;{x: &#34;foo&#34;, y, z: {bar}}&lt;/code&gt;. Each &#34;object pattern clause&#34; is either an &lt;code&gt;&amp;lt;identifier&amp;gt;&lt;/code&gt;, or a &lt;code&gt;&amp;lt;key&amp;gt;: &amp;lt;pattern&amp;gt;&lt;/code&gt; pair, where &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; is an &lt;code&gt;&amp;lt;identifier&amp;gt;&lt;/code&gt; or a computed-key expression like &lt;code&gt;[Symbol.foo]&lt;/code&gt;. The final item can be a &#34;rest pattern&#34;, looking like &lt;code&gt;...&amp;lt;identifier&amp;gt;&lt;/code&gt;. (Aka, it looks like object destructuring.)&lt;/p&gt; &#xA;&lt;p&gt;For each object pattern clause, the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; must contain a property matching the key, and the value of that property must match the corresponding pattern; if either of these fail for any object pattern clause, the entire object pattern fails to match.&lt;/p&gt; &#xA;&lt;p&gt;Plain &lt;code&gt;&amp;lt;identifier&amp;gt;&lt;/code&gt; object pattern clauses are treated as if they were written &lt;code&gt;&amp;lt;identifier&amp;gt;: &amp;lt;identifier&amp;gt;&lt;/code&gt; (just like destructuring); that is, the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; must have the named property, and the property’s value is then bound to that name due to being matched against an &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#identifier-pattern&#34;&gt;identifier pattern&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the object pattern ends in a [TODO: rest pattern], all of the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt;’s own keys that weren’t explicitly matched are bound into a fresh &lt;code&gt;Object&lt;/code&gt;, just like destructuring or array patterns.&lt;/p&gt; &#xA;&lt;p&gt;Unlike array patterns, the lack of a final rest pattern imposes no additional constraints; &lt;code&gt;{foo}&lt;/code&gt; will match the object &lt;code&gt;{foo: 1, bar:2}&lt;/code&gt;, binding &lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; and ignoring the other key.&lt;/p&gt; &#xA;&lt;p&gt;The object pattern introduces all the bindings introduced by its nested patterns, plus the binding introduced by its rest pattern, if present.&lt;/p&gt; &#xA;&lt;p&gt;Bindings introduced by earlier nested patterns are visible to later nested patterns in the same object pattern. (For example, &lt;code&gt;{a, b:${a}}&lt;/code&gt;) will match only if the &lt;code&gt;b&lt;/code&gt; property item in the object is identical to the &lt;code&gt;a&lt;/code&gt; property&#39;s value.) Ordering is important, however, so &lt;code&gt;{b:${a}, a}&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; mean the same thing; instead, the &lt;code&gt;${a}&lt;/code&gt; resolves based on whatever &lt;code&gt;a&lt;/code&gt; binding might exist from earlier in the pattern, or outside the match construct entirely.&lt;/p&gt; &#xA;&lt;h4&gt;Object Pattern Caching&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#array-pattern-caching&#34;&gt;array pattern caching&lt;/a&gt;, object patterns cache their results over the scope of the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#match-construct&#34;&gt;match construct&lt;/a&gt;, so that multiple &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#clause&#34;&gt;clauses&lt;/a&gt; don’t observably retrieve the same property multiple times.&lt;/p&gt; &#xA;&lt;p&gt;(Unlike array pattern caching, which is &lt;em&gt;necessary&lt;/em&gt; for this proposal to work with iterators, object pattern caching is a nice-to-have. It does guard against some weirdness like non-idempotent getters, and helps make idempotent-but-expensive getters usable in pattern matching without contortions, but mostly it’s just for conceptual consistency.)&lt;/p&gt; &#xA;&lt;p&gt;Whenever a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is matched against an object pattern, for each property name in the object pattern, a &lt;code&gt;(&amp;lt;matchable&amp;gt;, &amp;lt;property name&amp;gt;)&lt;/code&gt; tuple is used as the key in a cache, whose value is the value of the property.&lt;/p&gt; &#xA;&lt;p&gt;Whenever something would be matched against an object pattern, the cache is first checked, and if the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; and that property name are already in the cache, the value is retrieved from cache instead of by a fresh &lt;code&gt;Get&lt;/code&gt; against the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const randomItem = {&#xA;  get numOrString() { return Math.random() &amp;lt; .5 ? 1 : &#34;1&#34;; }&#xA;};&#xA;&#xA;match (randomItem) {&#xA;  when({numOrString: ${Number}}):&#xA;    console.log(&#34;Only matches half the time.&#34;);&#xA;    // Whether the pattern matches or not,&#xA;    // we cache the (randomItem, &#34;numOrString&#34;) pair&#xA;    // with the result.&#xA;  when({numOrString: ${String}}):&#xA;    console.log(&#34;Guaranteed to match the other half of the time.&#34;);&#xA;    // Since (randomItem, &#34;numOrString&#34;) has already been cached,&#xA;    // we reuse the result here;&#xA;    // if it was a string for the first clause,&#xA;    // it’s the same string here.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TODO: Rest pattern&lt;/h3&gt; &#xA;&lt;h2&gt;Custom Matcher Protocol&lt;/h2&gt; &#xA;&lt;p&gt;When the expression inside an &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#interpolation-pattern&#34;&gt;interpolation pattern&lt;/a&gt; evaluates to an object with a &lt;code&gt;Symbol.matcher&lt;/code&gt; method, that method is called with the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; as its sole argument.&lt;/p&gt; &#xA;&lt;p&gt;To implement the &lt;code&gt;Symbol.matcher&lt;/code&gt; method, the developer must return an object with a &lt;code&gt;matched&lt;/code&gt; property. If that property is truthy, the pattern matches; if that value is falsy, the pattern does not match. In the case of a successful match, the matched value must be made available on a &lt;code&gt;value&lt;/code&gt; property of the return object.&lt;/p&gt; &#xA;&lt;h3&gt;Built-in Custom Matchers&lt;/h3&gt; &#xA;&lt;p&gt;All of the classes for primitive types (&lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;BigInt&lt;/code&gt;) expose a built-in &lt;code&gt;Symbol.matcher&lt;/code&gt; method, matching if and only if the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is an object of that type, or a primitive corresponding to that type (using brand-checking to check objects, so boxed values from other windows will still match). The &lt;code&gt;value&lt;/code&gt; property of the returned object is the (possibly auto-unboxed) primitive value.&lt;/p&gt; &#xA;&lt;p&gt;All other platform objects also expose built-in &lt;code&gt;Symbol.matcher&lt;/code&gt; methods, matching if and only if the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; is of the same type (again using brand-checking to verify, similar to &lt;code&gt;Array.isArray()&lt;/code&gt;). The &lt;code&gt;value&lt;/code&gt; property of the returned object is the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; itself.&lt;/p&gt; &#xA;&lt;p&gt;Userland classes do &lt;em&gt;not&lt;/em&gt; define a default custom matcher (for both &lt;a href=&#34;https://github.com/tc39/proposal-pattern-matching/issues/231&#34;&gt;practical and technical reasons&lt;/a&gt;), but it is very simple to define one in this style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class Foo {&#xA;  static [Symbol.matcher](value) {&#xA;    return {&#xA;      matched: value instanceof Foo,&#xA;      value,&#xA;    };&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;with&lt;/code&gt; chaining&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#interpolation-pattern&#34;&gt;interpolation pattern&lt;/a&gt; or a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#regex-pattern&#34;&gt;regex pattern&lt;/a&gt; (referred to as the &#34;parent pattern&#34; for the rest of this section) &lt;em&gt;may&lt;/em&gt; also have a &lt;code&gt;with &amp;lt;pattern&amp;gt;&lt;/code&gt; suffix, allowing you to provide further patterns to match against the parent pattern’s result.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;with&lt;/code&gt; pattern is only invoked if the parent pattern successfully matches. Any bindings introduced by the &lt;code&gt;with&lt;/code&gt; pattern are added to the bindings from the parent pattern, with the &lt;code&gt;with&lt;/code&gt; pattern’s values overriding the parent pattern’s value if the same bindings appear in both.&lt;/p&gt; &#xA;&lt;p&gt;The parent pattern defines what the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; will be for the &lt;code&gt;with&lt;/code&gt; pattern:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for regex patterns, the regex’s match object is used&lt;/li&gt; &#xA; &lt;li&gt;for interpolation patterns that did not invoke the custom matcher protocol, the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; itself is used&lt;/li&gt; &#xA; &lt;li&gt;for interpolation patterns that &lt;em&gt;did&lt;/em&gt; invoke the custom matcher protocol, the value of the &lt;code&gt;value&lt;/code&gt; property on the result object is used&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class MyClass = {&#xA;  static [Symbol.matcher](matchable) {&#xA;    return {&#xA;      matched: matchable === 3,&#xA;      value: { a: 1, b: { c: 2 } },&#xA;    };&#xA;  }&#xA;};&#xA;&#xA;match (3) {&#xA;  when (${MyClass}): true; // matches, doesn’t use the result&#xA;  when (${MyClass} with {a, b: {c}}): do {&#xA;    // passes the custom matcher,&#xA;    // then further applies an object pattern to the result’s value&#xA;    assert(a === 1);&#xA;    assert(c === 2);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;match (&#34;foobar&#34;) {&#xA;  when (/foo(.*)/ with [, suffix]):&#xA;    console.log(suffix);&#xA;    // logs &#34;bar&#34;, since the match result&#xA;    // is an array-like containing the whole match&#xA;    // followed by the groups.&#xA;    // note the hole at the start of the array matcher&#xA;    // ignoring the first item,&#xA;    // which is the entire match &#34;foobar&#34;.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pattern combinators&lt;/h2&gt; &#xA;&lt;p&gt;Two or more &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; can be combined with &lt;code&gt;or&lt;/code&gt; or &lt;code&gt;and&lt;/code&gt; to form a single larger pattern.&lt;/p&gt; &#xA;&lt;p&gt;A sequence of &lt;code&gt;or&lt;/code&gt;-separated &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; have short-circuiting &#34;or&#34; semantics: the &lt;strong&gt;or &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;pattern&lt;/a&gt;&lt;/strong&gt; matches if any of the nested &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; match, and stops executing as soon as one of its nested &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; matches. It introduces all the bindings introduced by its nested &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt;, but only the &lt;em&gt;values&lt;/em&gt; from its first successfully matched &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;pattern&lt;/a&gt;; bindings introduced by other &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; (either failed matches, or &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; past the first successful match) are bound to &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A sequence of &lt;code&gt;and&lt;/code&gt;-separated &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; have short-circuiting &#34;and&#34; semantics: the &lt;strong&gt;and &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;pattern&lt;/a&gt;&lt;/strong&gt; matches if all of the nested &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; match, and stops executing as soon as one of its nested &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; fails to match. It introduces all the bindings introduced by its nested &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt;, with later &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; providing the value for a given binding if multiple &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt; would introduce that binding.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;and&lt;/code&gt; can idiomatically be used to bind a &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; and still allow it to be further matched against additional &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;patterns&lt;/a&gt;. For examle, &lt;code&gt;when (foo and [bar, baz]) ...&lt;/code&gt; matches the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; against both the &lt;code&gt;foo&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#identifier-pattern&#34;&gt;identifier pattern&lt;/a&gt; (binding it to &lt;code&gt;foo&lt;/code&gt; for the RHS) &lt;em&gt;and&lt;/em&gt; against the &lt;code&gt;[bar, baz]&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#array-pattern&#34;&gt;array pattern&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bindings introduced by earlier nested patterns are visible to later nested patterns in the same combined pattern. (For example, &lt;code&gt;(a and ${console.log(a)||a})&lt;/code&gt;) will bind the matchable to &lt;code&gt;a&lt;/code&gt;, and then log it.)&lt;/p&gt; &#xA;&lt;p&gt;(Note: the &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; spellings of these operators are preferred by the champions group, but we&#39;d be okay with spelling them &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; if the committee prefers.&lt;/p&gt; &#xA;&lt;h2&gt;Parenthesizing Patterns&lt;/h2&gt; &#xA;&lt;p&gt;The pattern syntaxes do not have a precedence relationship with each other. Any multi-token patterns (&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;${...} with ...&lt;/code&gt;) appearing at the same &#34;nesting level&#34; are a syntax error; parentheses must be used to to specify their relationship to each other instead.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;when (&#34;foo&#34; or &#34;bar&#34; and val) ...&lt;/code&gt; is a syntax error; it must be written as &lt;code&gt;when (&#34;foo&#34; or (&#34;bar&#34; and val)) ...&lt;/code&gt; or &lt;code&gt;when ((&#34;foo&#34; or &#34;bar&#34;) and val)&lt;/code&gt; instead. Similarly, &lt;code&gt;when (${Foo} with bar and baz) ...&lt;/code&gt; is a syntax error; it must be written as &lt;code&gt;when (${Foo} with (bar and baz)) ...&lt;/code&gt; (binding the custom match result to both &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt;) or &lt;code&gt;when ((${Foo} with bar) and baz) ...&lt;/code&gt; (binding the custom match result to &lt;code&gt;bar&lt;/code&gt;, and the &lt;em&gt;original&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; to &lt;code&gt;baz&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;is expression&lt;/h2&gt; &#xA;&lt;p&gt;Refers to the &lt;code&gt;expr is pattern&lt;/code&gt; expression. Evaluates to a boolean to indicate if the LHS matches the RHS.&lt;/p&gt; &#xA;&lt;h1&gt;Possible future enhancements&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;async match&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If the &lt;code&gt;match&lt;/code&gt; construct appears inside a context where &lt;code&gt;await&lt;/code&gt; is allowed, &lt;code&gt;await&lt;/code&gt; can already be used inside it, just like inside &lt;code&gt;do&lt;/code&gt; expressions. However, just like &lt;code&gt;async do&lt;/code&gt; expressions, there’s uses of being able to use &lt;code&gt;await&lt;/code&gt; and produce a Promise, even when not already inside an &lt;code&gt;async function&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;async match (await matchable) {&#xA;  when ({ a }): await a;&#xA;  when ({ b }): b.then(() =&amp;gt; 42);&#xA;  default: await somethingThatRejects();&#xA;} // produces a Promise&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nil pattern&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;match (someArr) {&#xA;  when ([_, _, someVal]): ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most languages that have structural pattern matching have the concept of a &#34;nil matcher&#34;, which fills a hole in a data structure without creating a binding.&lt;/p&gt; &#xA;&lt;p&gt;In JS, the primary use-case would be skipping spaces in arrays. This is already covered in destructuring by simply omitting an identifier of any kind in between the commas.&lt;/p&gt; &#xA;&lt;p&gt;With that in mind, and also with the extremely contentious nature, we would only pursue this if we saw strong support for it.&lt;/p&gt; &#xA;&lt;h2&gt;Default Values&lt;/h2&gt; &#xA;&lt;p&gt;Destructuring can supply a default value with &lt;code&gt;= &amp;lt;expr&amp;gt;&lt;/code&gt; which is used when a key isn’t present. Is this useful for pattern matching?&lt;/p&gt; &#xA;&lt;p&gt;Optional keys seem reasonable; right now they’d require duplicating the pattern like &lt;code&gt;({a, b} or {a})&lt;/code&gt; (&lt;code&gt;b&lt;/code&gt; will be bound to undefined in the RHS if not present).&lt;/p&gt; &#xA;&lt;p&gt;Do we need/want full defaulting? Does it complicate the syntax to much to have arbitrary JS expressions there, without anything like wrapper characters to distinguish it from surrounding patterns?&lt;/p&gt; &#xA;&lt;p&gt;This would bring us into closer alignment with destructuring, which is nice.&lt;/p&gt; &#xA;&lt;h2&gt;Dedicated renaming syntax&lt;/h2&gt; &#xA;&lt;p&gt;Right now, to bind a value in the middle of a pattern but continue to match on it, you use &lt;code&gt;and&lt;/code&gt; to run both an &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#identifier-pattern&#34;&gt;identifier pattern&lt;/a&gt; and a further &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#pattern&#34;&gt;pattern&lt;/a&gt; on the same value, like &lt;code&gt;when(arr and [item]): ...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Langs like Haskell and Rust have a dedicated syntax for this, spelled &lt;code&gt;@&lt;/code&gt;; if we adopted this, the above could be written as &lt;code&gt;when(arr @ [item]): ...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since this would introduce no new functionality, just a dedicated syntactic form for a common operation and some amount of concordance with other languages, we’re not pursuing this as part of the base proposal.&lt;/p&gt; &#xA;&lt;h2&gt;Destructuring enhancements&lt;/h2&gt; &#xA;&lt;p&gt;Both destructuring and pattern matching should remain in sync, so enhancements to one would need to work for the other.&lt;/p&gt; &#xA;&lt;h2&gt;Integration with &lt;code&gt;catch&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Allow a &lt;code&gt;catch&lt;/code&gt; statement to conditionally catch an exception, saving a level of indentation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;try {&#xA;  throw new TypeError(&#39;a&#39;);&#xA;} catch match (e) {&#xA;  if (e instanceof RangeError): ...&#xA;  when (/^abc$/): ...&#xA;  default: do { throw e; } // default behavior&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Chaining guards&lt;/h2&gt; &#xA;&lt;p&gt;Some reasonable use-cases require repetition of patterns today, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;match (res) {&#xA;  when ({ pages, data }) if (pages &amp;gt; 1): console.log(&#34;multiple pages&#34;)&#xA;  when ({ pages, data }) if (pages === 1): console.log(&#34;one page&#34;)&#xA;  default: console.log(&#34;no pages&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We might want to allow match constructs to be chained, where the child match construct sees the bindings introduced in their parent clause, and which will cause the entire parent clause to fail if none of the sub-classes match.&lt;/p&gt; &#xA;&lt;p&gt;The above would then be written as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;match (res) {&#xA;  when ({ pages, data }) match {&#xA;    if (pages &amp;gt; 1): console.log(&#34;multiple pages&#34;)&#xA;    if (pages === 1): console.log(&#34;one page&#34;)&#xA;    // if pages == 0, no clauses succeed in the child match,&#xA;    // so the parent clause fails as well,&#xA;    // and we advance to the outer `default`&#xA;  }&#xA;  default: console.log(&#34;no pages&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the lack of &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-pattern-matching/main/#matchable&#34;&gt;matchable&lt;/a&gt; in the child (just &lt;code&gt;match {...}&lt;/code&gt;), to signify that it’s chaining from the &lt;code&gt;when&lt;/code&gt; rather than just being part an independent match construct in the RHS (which would, instead, throw if none of the clauses match):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;match (res) {&#xA;  when ({ pages, data }): match (0) {&#xA;    if(pages &amp;gt; 1): console.log(&#34;multiple pages&#34;)&#xA;    if(pages === 1): console.log(&#34;one page&#34;)&#xA;    // just an RHS, so if pages == 0,&#xA;    // the inner construct fails to match anything&#xA;    // and throws a TypeError&#xA;  }&#xA;  default: console.log(&#34;no pages&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The presence or absence of the separator colon also distinguishes these cases, of course.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;or&lt;/code&gt; on when clauses&lt;/h2&gt; &#xA;&lt;p&gt;There might be some cases that requires different &lt;code&gt;when + if&lt;/code&gt; guards with the same RHS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// current&#xA;match (expr()) {&#xA;    when ({ type: &#39;a&#39;, version, ...rest }) if (isAcceptableTypeVersion(version)):&#xA;        a_long_expression_do_something_with_rest&#xA;    when ({ kind: &#39;a&#39;, version, ...rest }) if (isAcceptableKindVersion(version)):&#xA;        a_long_expression_do_something_with_rest&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Today this case can be resolved by extracting &lt;code&gt;a_long_expression_do_something_with_rest&lt;/code&gt; to a function, but if cases above are very common, we may also allows &lt;code&gt;or&lt;/code&gt; to be used on the when clause, and the code above becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// current&#xA;match (expr()) {&#xA;    when ({ type: &#39;a&#39;, version, ...rest }) if (isAcceptableTypeVersion(version))&#xA;    or when ({ kind: &#39;a&#39;, version, ...rest }) if (isAcceptableKindVersion(version)):&#xA;        a_long_expression_do_something_with_rest&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;## Implementations&#xA;&#xA;* [Babel Plugin](https://github.com/babel/babel/pull/9318)&#xA;* [Sweet.js macro](https://github.com/natefaubion/sparkler) (NOTE: this isn’t based on the proposal, this proposal is partially based on it!)&#xA;--&gt;</summary>
  </entry>
  <entry>
    <title>elementary-data/elementary</title>
    <updated>2023-08-01T01:27:37Z</updated>
    <id>tag:github.com,2023-08-01:/elementary-data/elementary</id>
    <link href="https://github.com/elementary-data/elementary" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source data observability for analytics engineers.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Logo&#34; src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/github_banner.png&#34; width=&#34;1000&#34;&gt; &lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; dbt native data observability for analytics &amp;amp; data engineers &lt;/h2&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; Monitor your data quality, operation and performance directly from your dbt project. &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://join.slack.com/t/elementary-community/shared_invite/zt-uehfrq2f-zXeVTtXrjYRbdE_V6xq4Rg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join-Slack-ff69b4&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.elementary-data.com/quickstart&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-quickstart-orange&#34;&gt;&lt;/a&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/license-Apache--2.0-ff69b4&#34;&gt; &lt;img alt=&#34;Downloads&#34; src=&#34;https://static.pepy.tech/personalized-badge/elementary-lineage?period=total&amp;amp;units=international_system&amp;amp;left_color=grey&amp;amp;right_color=orange&#34; &amp;left_text=&#34;Downloads&amp;quot;/&#34;&gt; &lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;⭐️ Star the repo &lt;a href=&#34;https://github.com/elementary-data/elementary/stargazers&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/star_github.png&#34; width=&#34;45&#34;&gt;&lt;/a&gt; ⭐&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://bit.ly/3IAp9wf&#34;&gt;Demo »&lt;/a&gt; | &lt;a href=&#34;https://docs.elementary-data.com/&#34;&gt;Docs »&lt;/a&gt; | &lt;a href=&#34;https://join.slack.com/t/elementary-community/shared_invite/zt-uehfrq2f-zXeVTtXrjYRbdE_V6xq4Rg&#34;&gt;Slack »&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;What is Elementary?&lt;/h2&gt; &#xA;&lt;p&gt;Elementary is an open-source data observability solution, built for dbt users. Setup in minutes, gain immediate visibility, detect data issues, send actionable alerts, and understand impact and root cause.&lt;/p&gt; &#xA;&lt;kbd align=&#34;center&#34;&gt; &lt;a href=&#34;https://storage.googleapis.com/elementary_static/elementary_demo.html&#34;&gt;&lt;img align=&#34;center&#34; style=&#34;max-width:300px;&#34; src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/report_ui.gif&#34;&gt; &lt;/a&gt; &lt;/kbd&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Step 1 - &lt;a href=&#34;https://docs.elementary-data.com/quickstart&#34;&gt;Install Elementary dbt package&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Step 2 - &lt;a href=&#34;https://docs.elementary-data.com/quickstart-cli&#34;&gt;Install Elementary CLI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/happy_fire.ico&#34; width=&#34;16&#34;&gt; &lt;strong&gt;Data observability report&lt;/strong&gt; - Generate a data observability report, host it or share with your team.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/happy_fire.ico&#34; width=&#34;16&#34;&gt; &lt;strong&gt;Anomaly detection dbt tests&lt;/strong&gt; - Collect data quality metrics and detect anomalies, as native dbt tests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/happy_fire.ico&#34; width=&#34;16&#34;&gt; &lt;strong&gt;Test results&lt;/strong&gt; - Enriched with details for fast triage of issues.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/happy_fire.ico&#34; width=&#34;16&#34;&gt; &lt;strong&gt;Models performance&lt;/strong&gt; - Visibility of execution times, easy detection of degradation and bottlenecks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/happy_fire.ico&#34; width=&#34;16&#34;&gt; &lt;strong&gt;Data lineage&lt;/strong&gt; - Enriched with test results, easy to navigate and filter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/happy_fire.ico&#34; width=&#34;16&#34;&gt; &lt;strong&gt;dbt artifacts uploader&lt;/strong&gt; - Save metadata and run results as part of your dbt runs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/happy_fire.ico&#34; width=&#34;16&#34;&gt; &lt;strong&gt;Slack alerts&lt;/strong&gt; - Actionable alerts, including custom channels and tagging of owners and subscribers.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Join &lt;a href=&#34;https://join.slack.com/t/elementary-community/shared_invite/zt-uehfrq2f-zXeVTtXrjYRbdE_V6xq4Rg&#34;&gt;Slack&lt;/a&gt; to learn more on Elementary.&lt;/p&gt; &#xA;&lt;p&gt;Our full documentation is &lt;a href=&#34;https://docs.elementary-data.com/&#34;&gt;available here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it works?&lt;/h2&gt; &#xA;&lt;p&gt;Elementary &lt;a href=&#34;https://github.com/elementary-data/dbt-data-reliability&#34;&gt;dbt package&lt;/a&gt; creates tables of metadata and test results in your data warehouse, as part of your dbt runs. The CLI tool reads the data from these tables, and is used to generate the UI and alerts.&lt;/p&gt; &#xA;&lt;img align=&#34;center&#34; style=&#34;max-width:300px;&#34; src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/how_elementary_works.png&#34;&gt; &#xA;&lt;h2&gt;Community &amp;amp; Support&lt;/h2&gt; &#xA;&lt;p&gt;For additional information and help, you can use one of these channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/elementary-community/shared_invite/zt-uehfrq2f-zXeVTtXrjYRbdE_V6xq4Rg&#34;&gt;Slack&lt;/a&gt; (Live chat with the team, support, discussions, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elementary-data/elementary/issues&#34;&gt;GitHub issues&lt;/a&gt; (Bug reports, feature requests)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ElementaryData&#34;&gt;Twitter&lt;/a&gt; (Updates on new releases and stuff)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Integrations&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;dbt core (&amp;gt;=1.0.0)&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/dbt-16.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;dbt cloud&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/dbt-16.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data warehouses:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Snowflake&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/snowflake-16.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;BigQuery&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/bigquery-16.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Redshift&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/redshift-16.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Databricks SQL&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/databricks-16.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Postgres&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/postgres-16.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Operations:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Slack&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/slack-16.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;GitHub Actions&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/github-actions-16.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Amazon S3&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/s3-16.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Google Cloud Storage&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elementary-data/elementary/master/static/gcs-16.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ask us for integrations on &lt;a href=&#34;https://join.slack.com/t/elementary-community/shared_invite/zt-uehfrq2f-zXeVTtXrjYRbdE_V6xq4Rg&#34;&gt;Slack&lt;/a&gt; or as a &lt;a href=&#34;https://github.com/elementary-data/elementary-lineage/issues/new&#34;&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Contributions&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Thank you &lt;span&gt;🧡&lt;/span&gt; Whether it’s a bug fix, new feature, or additional documentation - we greatly appreciate contributions!&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://docs.elementary-data.com/general/contributions&#34;&gt;contributions guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/elementary-data/elementary/issues&#34;&gt;open issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Elementary contributors: ✨&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/oravi&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4517234?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elongl&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/30181361?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Maayan-s&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/22072028?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/IDoneShaveIt&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/48473443?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haritamar&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/11314965?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Hadarsagiv&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/119170841?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/noaKurman&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/16741969?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NoyaArie&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/31591071?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ellakz&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/18530437?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ofek1weiss&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/55920061?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RoiTabach&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/25003091?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hahnbeelee&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/55263191?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seanglynn-thrive&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/93200565?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hanywang2&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/44352119?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Nic3Guy&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/17640648?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yu-iskw&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1523515?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nimrodne&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/12689357?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hanrok&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/24649215?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shahafa&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/904848?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aaron-westlake&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/99689538?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/YashPimple&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/97302447?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Aylr&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/928247?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dorazouri&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/17954776?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ronmorgen1&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/86912787?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Ecalzo&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/44735669?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/civitaspo&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4525500?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fredmny&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/27257093?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GtheSheep&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/13685708?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/IrinaSel&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9607710?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jtalmi&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7266609?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tobias-mintlify&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/110702161?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ValdarT&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7242935?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rloredo&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/21148554?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/a13xa1v35&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/25589304?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kopackiw&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/26244440?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eKatia&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/79864170?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nzewail&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/29211170?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hengpor&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4929007?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/smitsrr&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/8473398?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SBurwash&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/35510512?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kkprab&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/97446187?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ivan-toriya&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/43750521?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jelstongreen&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/17743866?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pei0804&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9821370?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/esenilsson&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2824187?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pratik60&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2249430?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/benoit-tropos-io&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/79080900?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kouridis&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/11500822?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/clad&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/41725?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Deathfireofdoom&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/53213782?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/frannydelaney&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/77760780?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/edbizarro&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/84926?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Chintanvpatel&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1384301?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/andreqaugusto&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/68784205?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tc-chrisbui&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/115048867?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vishaalkk&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/13641827?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sadahry&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/28292300?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/will-warner&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/110092386?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/winzee&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1001577?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vinooganesh&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2461070?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dimoschi&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/13113025?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/manulpatel&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/77568048?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arilmav&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/60354578?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kochalex&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/3217653?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mossyyy&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/11269029?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt;</summary>
  </entry>
  <entry>
    <title>ajitpal/BookBank</title>
    <updated>2023-08-01T01:27:37Z</updated>
    <id>tag:github.com,2023-08-01:/ajitpal/BookBank</id>
    <link href="https://github.com/ajitpal/BookBank" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Books&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BookBank&lt;/h1&gt; &#xA;&lt;p&gt;Books to Study which I have collected from various online sources&lt;/p&gt;</summary>
  </entry>
</feed>