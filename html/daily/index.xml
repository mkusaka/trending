<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-18T01:31:39Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hemansnation/7-Day-AI-ML-Fundamentals-Workshop</title>
    <updated>2024-02-18T01:31:39Z</updated>
    <id>tag:github.com,2024-02-18:/hemansnation/7-Day-AI-ML-Fundamentals-Workshop</id>
    <link href="https://github.com/hemansnation/7-Day-AI-ML-Fundamentals-Workshop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;7 Day AI ML Fundamentals Workshop The purpose of this FREE workshop is 1. To give you a boost of getting started with AI. 2. A life-long community with a similar mindset. 3. strong grip on fundamentals that the advanced concepts will be easy to understand.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;7-Day-AI-ML-Fundamentals-Workshop&lt;/h1&gt; &#xA;&lt;p&gt;7 Day AI ML Fundamentals Workshop&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dmtrKovalenko/cypress-real-events</title>
    <updated>2024-02-18T01:31:39Z</updated>
    <id>tag:github.com,2024-02-18:/dmtrKovalenko/cypress-real-events</id>
    <link href="https://github.com/dmtrKovalenko/cypress-real-events" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fire native system events from Cypress.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Cypress Real Events &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Fire native system events from Cypress &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/cypress-real-events&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/cypress-real-events?style=for-the-badge&#34; alt=&#34;npm version&#34;&gt; &lt;/a&gt;&lt;a&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/cypress-real-events&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/cypress-real-events?style=for-the-badge&#34; alt=&#34;npm version&#34;&gt; &lt;/a&gt;&lt;a&gt;&lt;/a&gt; &lt;a href=&#34;https://app.circleci.com/pipelines/github/dmtrKovalenko/cypress-real-events&#34;&gt; &lt;img src=&#34;https://img.shields.io/circleci/build/github/dmtrKovalenko/cypress-real-events/main?style=for-the-badge&#34; alt=&#34;npm version&#34;&gt; &lt;/a&gt;&lt;a&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/made-with%20love-orange?style=for-the-badge&#34;&gt; &lt;a href=&#34;https://twitter.com/goose_plus_plus&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/goose_plus_plus?color=blue&amp;amp;style=for-the-badge&#34;&gt; &lt;/a&gt;&lt;a&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vshymanskyy.github.io/StandWithUkraine/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg?sanitize=true&#34; alt=&#34;Stand With Ukraine&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Cypress default events are simulated. That means that all events like &lt;code&gt;cy.click&lt;/code&gt; or &lt;code&gt;cy.type&lt;/code&gt; are fired from javascript. That&#39;s why these events will be untrusted (&lt;code&gt;event.isTrusted&lt;/code&gt; will be &lt;code&gt;false&lt;/code&gt;) and they can behave a little different from real native events. But for some cases, it can be impossible to use simulated events, for example, to fill a native alert or copy to the clipboard. This plugin solves this problem.&lt;/p&gt; &#xA;&lt;h2&gt;How?&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/&#34;&gt;Chrome Devtools Protocol&lt;/a&gt;. Cypress is connecting to CDP for tasks like screenshots, setting viewport, and others. This project utilizes the same connection to fire system events. The event firing system works literally like in puppeteer. And as a result, unlocks such features like &lt;strong&gt;hovering&lt;/strong&gt; and &lt;strong&gt;native focus management via Tab&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Cypress only. Really. Cypress itself can fire native events. The only limitation for real events –&amp;nbsp;&lt;strong&gt;they work only in the chromium-based browser&lt;/strong&gt;. That means that Firefox is not supported, at least for now.&lt;/p&gt; &#xA;&lt;h2&gt;Quick overview&lt;/h2&gt; &#xA;&lt;p&gt;Here is a simple test that can be written with native events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;it(&#34;tests real events&#34;, () =&amp;gt; {&#xA;  cy.get(&#34;input&#34;).realClick(); // perform a native real click on the field&#xA;  cy.realType(&#34;cypress real event&#34;); // fires native system keypress events and fills the field&#xA;  cy.realPress(&#34;Tab&#34;); // native tab click switches the focus&#xA;  cy.get(&#34;input&#34;).realMouseDown(); // perform a native mouse press on the field&#xA;  cy.get(&#34;input&#34;).realMouseUp(); // perform a native mouse release on the field&#xA;  cy.focused().realHover(); // hovers over the new focused element&#xA;  cy.contains(&#34;some text in the hovered popover&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install npm package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install cypress-real-events&#xA;&#xA;yarn add cypress-real-events&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Register new commands by adding this to your &lt;code&gt;cypress/support/index.{js,ts}&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#34;cypress-real-events&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To include TypeScript declarations, add &lt;code&gt;&#34;cypress-real-events&#34;&lt;/code&gt; to the &lt;code&gt;types&lt;/code&gt; section of your &lt;a href=&#34;https://docs.cypress.io/guides/tooling/typescript-support&#34;&gt;tsconfig.json&lt;/a&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;compilerOptions&#34;: {&#xA;    &#34;types&#34;: [&#34;cypress&#34;, &#34;node&#34;, &#34;cypress-real-events&#34;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The idea of the commands –&amp;nbsp;they should be as similar as possible to cypress default commands (like &lt;code&gt;cy.type&lt;/code&gt;), but starts with &lt;code&gt;real&lt;/code&gt; –&amp;nbsp;&lt;code&gt;cy.realType&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an overview of the available &lt;strong&gt;real&lt;/strong&gt; event commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#cyrealclick&#34;&gt;cy.realClick&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#cyrealhover&#34;&gt;cy.realHover&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#cyrealpress&#34;&gt;cy.realPress&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#cyrealtouch&#34;&gt;cy.realTouch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#cyrealtype&#34;&gt;cy.realType&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#cyrealswipe&#34;&gt;cy.realSwipe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#cyrealmousedown&#34;&gt;cy.realMouseDown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#cyrealmouseup&#34;&gt;cy.realMouseUp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#cyrealmousemove&#34;&gt;cy.realMouseMove&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#cyrealmousewheel&#34;&gt;cy.realMouseWheel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;cy.realClick&lt;/h2&gt; &#xA;&lt;p&gt;Fires native system click event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;cy.get(&#34;button&#34;).realClick();&#xA;cy.get(&#34;button&#34;).realClick(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.get(&#34;button&#34;).realClick({ position: &#34;topLeft&#34; }); // click on the top left corner of button&#xA;cy.get(&#34;body&#34;).realClick({ x: 100, y: 1240 }); // click by the x &amp;amp; y coordinates relative to the whole window&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;button&lt;/strong&gt;: &#34;none&#34; | &#34;left&#34; | &#34;right&#34; | &#34;middle&#34; | &#34;back&#34; | &#34;forward&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;pointer&lt;/strong&gt;: &#34;mouse&#34; | &#34;pen&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;x&lt;/strong&gt;: undefined | number (&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#coordinates&#34;&gt;more about coordinates&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;y&lt;/strong&gt;: undefined | number (&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#coordinates&#34;&gt;more about coordinates&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;position&lt;/strong&gt;: &#34;topLeft&#34; | &#34;top&#34; | &#34;topRight&#34; | &#34;left&#34; | &#34;center&#34; | &#34;right&#34; | &#34;bottomLeft&#34; | &#34;bottom&#34; | &#34;bottomRight&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;scrollBehavior&lt;/strong&gt;: &#34;center&#34; | &#34;top&#34; | &#34;bottom&#34; | &#34;nearest&#34; | false&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;clickCount&lt;/strong&gt;: number&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; have a bigger priority than &lt;code&gt;position&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;cy.realHover&lt;/h2&gt; &#xA;&lt;p&gt;Fires a real native hover event. Yes, it can test &lt;code&gt;:hover&lt;/code&gt; preprocessor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;cy.get(&#34;button&#34;).realHover();&#xA;cy.get(&#34;button&#34;).realHover(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.get(&#34;button&#34;).realHover({ position: &#34;bottomLeft&#34; }); // hovers over the bottom left corner of button&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;pointer&lt;/strong&gt;: &#34;mouse&#34; | &#34;pen&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;position&lt;/strong&gt;: &#34;topLeft&#34; | &#34;top&#34; | &#34;topRight&#34; | &#34;left&#34; | &#34;center&#34; | &#34;right&#34; | &#34;bottomLeft&#34; | &#34;bottom&#34; | &#34;bottomRight&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;scrollBehavior&lt;/strong&gt;: &#34;center&#34; | &#34;top&#34; | &#34;bottom&#34; | &#34;nearest&#34; | false&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;cy.realPress&lt;/h2&gt; &#xA;&lt;p&gt;Fires native press event. It can fire one key event or the &#34;shortcut&#34; like Shift+Control+M. Make sure that event is global, it means that it is required to &lt;strong&gt;firstly&lt;/strong&gt; focus any control before firing this event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;cy.realPress(&#34;Tab&#34;); // switch the focus for a11y testing&#xA;cy.realPress([&#34;Alt&#34;, &#34;Meta&#34;, &#34;P&#34;]); // Alt+(Command or Control)+P&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.realPress(key);&#xA;cy.realPress(key, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameters:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string | string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;key or keys to press. Should be the same as cypress&#39;s &lt;a href=&#34;https://docs.cypress.io/api/commands/type.html#Arguments&#34;&gt;type command argument&lt;/a&gt;. All the keys available &lt;a href=&#34;https://github.com/dmtrKovalenko/cypress-real-events/raw/main/src/keyCodeDefinitions.ts&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;options&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Options&lt;/td&gt; &#xA;   &lt;td&gt;{}&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;pointer&lt;/strong&gt;: &#34;mouse&#34; | &#34;pen&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;cy.realTouch&lt;/h3&gt; &#xA;&lt;p&gt;Fires native system touch event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;cy.get(&#34;button&#34;).realTouch();&#xA;cy.get(&#34;button&#34;).realTouch(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Usage:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.get(&#34;button&#34;).realTouch({ position: &#34;topLeft&#34; }); // touches the top left corner of button&#xA;cy.get(&#34;body&#34;).realTouch({ x: 100, y: 1240 }); // touches the x &amp;amp; y coordinates relative to the whole window&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;x&lt;/strong&gt;: undefined | number (&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#coordinates&#34;&gt;more about coordinates&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;y&lt;/strong&gt;: undefined | number (&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#coordinates&#34;&gt;more about coordinates&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;position&lt;/strong&gt;: &#34;topLeft&#34; | &#34;top&#34; | &#34;topRight&#34; | &#34;left&#34; | &#34;center&#34; | &#34;right&#34; | &#34;bottomLeft&#34; | &#34;bottom&#34; | &#34;bottomRight&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;radius&lt;/strong&gt;: undefined | number &lt;strong&gt;&lt;code&gt;default&lt;/code&gt;&lt;/strong&gt; 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;radiusX&lt;/strong&gt;: undefined | number &lt;strong&gt;&lt;code&gt;default&lt;/code&gt;&lt;/strong&gt; 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;radiusY&lt;/strong&gt;: undefined | number &lt;strong&gt;&lt;code&gt;default&lt;/code&gt;&lt;/strong&gt; 1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;cy.realType&lt;/h3&gt; &#xA;&lt;p&gt;Runs a sequence of native press events (via &lt;code&gt;cy.realPress&lt;/code&gt;). This can be used to simulate real typing. Make sure that type of event is global. This means that it is not attached to any field.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.realType(&#34;type any text&#34;); // type any text on the page&#xA;&#xA;cy.get(&#34;input&#34;).focus();&#xA;cy.realType(&#34;some text {enter}&#34;); // type into focused field&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.realType(text);&#xA;cy.realType(text, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parameters:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;text to type. Should be around the same as cypress&#39;s type command argument (&lt;a href=&#34;https://docs.cypress.io/api/commands/type.html#Arguments&#34;&gt;https://docs.cypress.io/api/commands/type.html#Arguments&lt;/a&gt;. All the keys available &lt;a href=&#34;https://github.com/dmtrKovalenko/cypress-real-events/raw/main/src/keyCodeDefinitions.ts&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;options&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Options&lt;/td&gt; &#xA;   &lt;td&gt;{}&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;delay&lt;/strong&gt;: undefined | number &lt;strong&gt;&lt;code&gt;default&lt;/code&gt;&lt;/strong&gt; 30&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;log&lt;/strong&gt;: undefined | false | true &lt;strong&gt;&lt;code&gt;default&lt;/code&gt;&lt;/strong&gt; true&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;pressDelay&lt;/strong&gt;: undefined | number &lt;strong&gt;&lt;code&gt;default&lt;/code&gt;&lt;/strong&gt; 10&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;cy.realSwipe&lt;/h3&gt; &#xA;&lt;p&gt;Runs native swipe events. It means that &lt;strong&gt;touch events&lt;/strong&gt; will be fired. Actually a sequence of &lt;code&gt;touchStart&lt;/code&gt; -&amp;gt; &lt;code&gt;touchMove&lt;/code&gt; -&amp;gt; &lt;code&gt;touchEnd&lt;/code&gt;. It can perfectly swipe drawers and other tools &lt;a href=&#34;https://csb-dhe0i-qj8xxmx8y.vercel.app/&#34;&gt;like this one&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure to enable mobile viewport :)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.get(&#34;.element&#34;).realSwipe(&#34;toLeft&#34;); // swipes from right to left&#xA;cy.get(&#34;.element&#34;).realSwipe(&#34;toRight&#34;); // inverted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.realSwipe(direction);&#xA;cy.realSwipe(direction, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parameters:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;toLeft&#34; | &#34;toTop&#34; | &#34;toRight&#34; | &#34;toBottom&#34;;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Direction of swipe&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;options&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Options&lt;/td&gt; &#xA;   &lt;td&gt;{}&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;length&lt;/strong&gt;: undefined | number &lt;strong&gt;&lt;code&gt;default&lt;/code&gt;&lt;/strong&gt; 10&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;step&lt;/strong&gt;: undefined | number &lt;strong&gt;&lt;code&gt;default&lt;/code&gt;&lt;/strong&gt; 10&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;x&lt;/strong&gt;: undefined | number (&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#coordinates&#34;&gt;more about coordinates&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;y&lt;/strong&gt;: undefined | number (&lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/#coordinates&#34;&gt;more about coordinates&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;touchPosition&lt;/strong&gt;: &#34;topLeft&#34; | &#34;top&#34; | &#34;topRight&#34; | &#34;left&#34; | &#34;center&#34; | &#34;right&#34; | &#34;bottomLeft&#34; | &#34;bottom&#34; | &#34;bottomRight&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;touchMoveDelay&lt;/strong&gt;: undefined | number &lt;strong&gt;&lt;code&gt;default&lt;/code&gt;&lt;/strong&gt; 0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;cy.realMouseDown&lt;/h2&gt; &#xA;&lt;p&gt;Fires native system mouse down event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;cy.get(&#34;button&#34;).realMouseDown();&#xA;cy.get(&#34;button&#34;).realMouseDown(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.get(&#34;button&#34;).realMouseDown({ position: &#34;topLeft&#34; }); // click on the top left corner of button&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;pointer&lt;/strong&gt;: &#34;mouse&#34; | &#34;pen&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;position&lt;/strong&gt;: &#34;topLeft&#34; | &#34;top&#34; | &#34;topRight&#34; | &#34;left&#34; | &#34;center&#34; | &#34;right&#34; | &#34;bottomLeft&#34; | &#34;bottom&#34; | &#34;bottomRight&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;scrollBehavior&lt;/strong&gt;: &#34;center&#34; | &#34;top&#34; | &#34;bottom&#34; | &#34;nearest&#34; | false&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;button&lt;/strong&gt;: &#34;left&#34; | &#34;middle&#34; | &#34;right&#34; | &#34;back&#34; | &#34;forward&#34; | &#34;none&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;cy.realMouseUp&lt;/h2&gt; &#xA;&lt;p&gt;Fires native system mouse up event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;cy.get(&#34;button&#34;).realMouseUp();&#xA;cy.get(&#34;button&#34;).realMouseUp(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.get(&#34;button&#34;).realMouseUp({ position: &#34;topLeft&#34; }); // click on the top left corner of button&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;pointer&lt;/strong&gt;: &#34;mouse&#34; | &#34;pen&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;position&lt;/strong&gt;: &#34;topLeft&#34; | &#34;top&#34; | &#34;topRight&#34; | &#34;left&#34; | &#34;center&#34; | &#34;right&#34; | &#34;bottomLeft&#34; | &#34;bottom&#34; | &#34;bottomRight&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;scrollBehavior&lt;/strong&gt;: &#34;center&#34; | &#34;top&#34; | &#34;bottom&#34; | &#34;nearest&#34; | false&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;button&lt;/strong&gt;: &#34;left&#34; | &#34;middle&#34; | &#34;right&#34; | &#34;back&#34; | &#34;forward&#34; | &#34;none&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;cy.realMouseMove&lt;/h2&gt; &#xA;&lt;p&gt;Fires native system mouseMoved event. Moves mouse inside a subject to the provided amount of coordinates from top left corner (adjustable with position option.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;cy.get(&#34;sector&#34;).realMouseMove(x, y);&#xA;cy.get(&#34;sector&#34;).realMouseMove(x, y, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.get(&#34;sector&#34;).realMouseMove(50, 50, { position: &#34;center&#34; }); // moves by 50px x and y from center of sector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;position&lt;/strong&gt;: &#34;topLeft&#34; | &#34;top&#34; | &#34;topRight&#34; | &#34;left&#34; | &#34;center&#34; | &#34;right&#34; | &#34;bottomLeft&#34; | &#34;bottom&#34; | &#34;bottomRight&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;scrollBehavior&lt;/strong&gt;: &#34;center&#34; | &#34;top&#34; | &#34;bottom&#34; | &#34;nearest&#34; | false&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;cy.realMouseWheel&lt;/h2&gt; &#xA;&lt;p&gt;Fires native system mouse wheel event, scrolls the page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;cy.get(&#34;div&#34;).realMouseWheel(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cy.get(&#34;div&#34;).realMouseWheel({ deltaY: 100 }) // Scroll down, mouse will be positioned at centered by default.&#xA;cy.get(&#34;div&#34;).realMouseWheel({ deltaY: -100 }) // Scroll up, mouse will be positioned at centered by default.&#xA;cy.get(&#34;div&#34;).realMouseWheel({ deltaX: 500 }) // Scroll right, mouse will be positioned at centered by default.&#xA;cy.get(&#34;div&#34;).realMouseWheel({ deltaX: -500 }) // Scroll left, mouse will be positioned at centered by default.&#xA;cy.get(&#34;div&#34;).realMouseWheel({ deltaY: 100, deltaX: 100 }) // Scroll right and down, mouse will be positioned at centered by default.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;scrollBehavior&lt;/strong&gt;: &#34;center&#34; | &#34;top&#34; | &#34;bottom&#34; | &#34;nearest&#34; | false&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;deltaX&lt;/strong&gt;: X delta in CSS pixels for mouse wheel event (default: 0). Positive values emulate a scroll right and negative values emulate scroll left event.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; &lt;strong&gt;deltaY&lt;/strong&gt;: Y delta in CSS pixels for mouse wheel event (default: 0). Positive values emulate a scroll down and negative values emulate a scroll up event.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Coordinates&lt;/h2&gt; &#xA;&lt;p&gt;Several commands from this plugin accept &lt;code&gt;{ x: number, y: number }&lt;/code&gt; coordinates. There is an important note that these coordinates are relative to the whole tab to pass it right to the CDP. For regular elements, we calculate them automatically, but if you need to pass absolute coordinates you will need to provide them yourself.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to debug coordinates is to run any real events command and check the logged coordinates by clicking on the command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/coordinates-log-screenshot.png&#34; alt=&#34;checking coordinates example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;1. Why &lt;code&gt;cy.realHover&lt;/code&gt; hovering state does not show in the visual regression services?&lt;/h3&gt; &#xA;&lt;p&gt;Unfortunately, neither visual regression services like Happo and Percy nor plain cy.screenshot do not allow to test the hovering state. The hovering state is very different from any kind of js and css so it is not possible to capture it using dom snapshotting (like visual regression services do) and the screenshooting as well because cypress core itself is preventing hovering state in the screenshots.&lt;/p&gt; &#xA;&lt;h3&gt;2. When I am doing &lt;code&gt;cy.realHover&lt;/code&gt; hovering state is not resetting after my checks&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s take an example. If the real user needs to open menu popover then do check content of popover content and close it the algorithm will be:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Hover menu&lt;/li&gt; &#xA; &lt;li&gt;Check the content&lt;/li&gt; &#xA; &lt;li&gt;Put mouse away from the popover&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To automate this with cypress, you can do the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;cy.get(&#34;[aria-label=&#39;Test Button&#39;]&#34;)&#xA;  .should(&#34;have.css&#34;, &#34;background-color&#34;, &#34;rgb(217, 83, 79)&#34;) // check the state before hover&#xA;  .realHover()&#xA;  .should(&#34;have.css&#34;, &#34;background-color&#34;, &#34;rgb(201, 48, 44&#34;); // test hovering state&#xA;&#xA;// reset hovering by putting mouse away (e.g. here top left corner of body)&#xA;cy.get(&#34;body&#34;).realHover({ position: &#34;topLeft&#34; });&#xA;// hover state reset 🎉&#xA;cy.get(&#34;[aria-label=&#39;Test Button&#39;]&#34;).should(&#xA;  &#34;have.css&#34;,&#xA;  &#34;background-color&#34;,&#xA;  &#34;rgb(217, 83, 79)&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Why do I get &#34;Are You Sure&#34; popups when I am using real events and why I do not get them while using the normal cypress clicks?&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes when there are unsaved changes in a webform, and you leave the page, the web application asks you due the &lt;code&gt;onbeforeunload event&lt;/code&gt; if you really want to leaf the page and loose the changes.&lt;/p&gt; &#xA;&lt;p&gt;You can try it on this &lt;a href=&#34;https://www.azyaamode.com/js/jquery/AYS/demo/are-you-sure-demo.html&#34;&gt;Demo Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In &#34;normal&#34; Cypress tests, these popup windows do not appear. This is because no &#34;real&#34; user actions are performed on the application. See &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event#security&#34;&gt;this&lt;/a&gt; page for more information about the beforeunload event. But when they appear, they block the whole test execution, and you have to handle them explicitly. Gleb Bahmutov writes about this behaviour and possible solutions in this &lt;a href=&#34;https://glebbahmutov.com/blog/onbeforeunload/&#34;&gt;Blog Post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now when you use this &lt;code&gt;real-events&lt;/code&gt; plugin and perform a &lt;code&gt;realEvent&lt;/code&gt; on your application, the browser thinks there happened a real user interaction. From now on your test is in an &lt;code&gt;active interaction&lt;/code&gt; state, which allows the application to use all the features listed &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Security/User_activation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;UX&lt;/h2&gt; &#xA;&lt;p&gt;One problem of the real native system events I need to mention – you will not get an error message if the event wasn&#39;t produced. Similar to selenium or playwright – if a javascript event was not fired you will not get a comprehensive error message.&lt;/p&gt; &#xA;&lt;p&gt;So probably this package should not be used as a replacement for the cypress events, at least for the writing tests experience 🐨&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is licensed under the terms of &lt;a href=&#34;https://raw.githubusercontent.com/dmtrKovalenko/cypress-real-events/develop/LICENSE&#34;&gt;MIT license&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TypingMind/typingmind</title>
    <updated>2024-02-18T01:31:39Z</updated>
    <id>tag:github.com,2024-02-18:/TypingMind/typingmind</id>
    <link href="https://github.com/TypingMind/typingmind" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The most advanced Web UI for AI chat&lt;/p&gt;&lt;hr&gt;&lt;h2 align=&#34;center&#34;&gt; &lt;img height=&#34;150&#34; alt=&#34;Typing Mind - A better UI for ChatGPT&#34; src=&#34;https://www.typingmind.com/banner.png&#34;&gt; &lt;br&gt; Static Self-host Version &lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;Typing Mind is the most advanced Chat UI frontend for AI models like ChatGPT, Claude, Gemini, and open-source models &lt;br&gt;&lt;/p&gt; &#xA; &lt;img alt=&#34;Users: 18,000+&#34; src=&#34;https://img.shields.io/badge/users-18%2C000%2B-green&#34;&gt; &#xA; &lt;a href=&#34;https://www.typingmind.com/discord&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1087527241505853520?style=flat&amp;amp;logo=discord&#34;&gt; &lt;/a&gt; &#xA; &lt;img alt=&#34;Uptime Robot ratio (30 days)&#34; src=&#34;https://img.shields.io/uptimerobot/ratio/m796342452-0b8b12da5c8a5f4bd1df4fbb&#34;&gt; &#xA; &lt;img alt=&#34;Documentations&#34; src=&#34;https://img.shields.io/badge/Documentations-black?logo=readthedocs&#34;&gt; &#xA; &lt;a href=&#34;https://setapp.com/apps/typingmind&#34;&gt; &lt;img alt=&#34;Setapp Rating: 91%&#34; src=&#34;https://img.shields.io/badge/Setapp-946%20ratings-green?logo=setapp&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://www.producthunt.com/posts/typing-mind?utm_source=badge-top-post-badge&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-typing-mind&#34;&gt; &lt;img alt=&#34;Product Hunt: Product of the Day&#34; src=&#34;https://img.shields.io/badge/Product%20of%20The%20Day-%231-orange?logo=producthunt&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://x.com/TypingMindApp&#34;&gt; &lt;img alt=&#34;X (formerly Twitter) Follow&#34; src=&#34;https://img.shields.io/twitter/follow/TypingMindApp&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;img width=&#34;1360&#34; alt=&#34;Screenshot of Typing Mind app&#34; src=&#34;https://github.com/TypingMind/typingmind/assets/4214509/d9c4a4df-51ba-4f36-8406-33c1e6f7ee1c&#34;&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.producthunt.com/posts/typing-mind?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-typing-mind&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.typingmind.com/assets/product-hunt/featured.svg?sanitize=true&#34; alt=&#34;Typing Mind - A better UI for ChatGPT | Product Hunt&#34; width=&#34;250&#34; height=&#34;54&#34; style=&#34;width: 250px; height: 54px;&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://www.producthunt.com/posts/typing-mind?utm_source=badge-top-post-badge&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-typing-mind&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.typingmind.com/assets/product-hunt/top-post-badge.svg?sanitize=true&#34; alt=&#34;Typing Mind - A better UI for ChatGPT | Product Hunt&#34; width=&#34;250&#34; height=&#34;54&#34; style=&#34;width: 250px; height: 54px;&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;📜 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🤖 Support multi models: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ChatGPT, Claude, Gemini, Azure OpenAI, Perplexity AI, Mixtral AI, LLama&lt;/li&gt; &#xA;   &lt;li&gt;Adding custom endpoint, custom models (e.g., Open Router), and locally hosted models (e.g., LocalAI, Ollama)&lt;/li&gt; &#xA;   &lt;li&gt;Custom model parameters: Temperature, Frequency_penalty, Presence_penalty, Top_P, Top_K, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🚀 Advanced Features: GPT-4 Vision, Document Uploads, DALL-E 3, Web Search, Text-to-Speech, Whipsper, Plugins&lt;/li&gt; &#xA; &lt;li&gt;💬 Chat Management: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tags, Search, Folders, Share, Backup &amp;amp; Sync, Import/Export, Migrate from ChatGPT&lt;/li&gt; &#xA;   &lt;li&gt;Fork Chat (conversation branching), Edit Message, Pin&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;📚 Prompt Library (with template variable support), AI Characters, Output Control, Dynamic Context Limit&lt;/li&gt; &#xA; &lt;li&gt;🔐 Secure and private by default: API keys encryption, set password, self-host&lt;/li&gt; &#xA; &lt;li&gt;🖥️ Beautiful and Functional User Interface: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Voice Input, Text-to-Speech, Sound Notification&lt;/li&gt; &#xA;   &lt;li&gt;Light/Dark mode, Hotkeys, Responsive &amp;amp; Mobile Friendly, Wide Screen Support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🧩 Integrations: Web Search, Plugins System (develop your own plugins), Search Keyword Suggestions&lt;/li&gt; &#xA; &lt;li&gt;🇺🇸 Multilingual: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;🇺🇸 English 🇩🇪 German, 🇨🇳 Mandarin, 🇻🇳 Vietnamese, 🇬🇷 Greek, 🇫🇷 French, 🇮🇹 Italian&lt;/li&gt; &#xA;   &lt;li&gt;🇷🇺 Russian, 🇺🇦 Ukrainian, 🇪🇸 Spanish, 🇵🇹 Portuguese, 🇱🇺 Luxembourgish&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;📦 &lt;a href=&#34;https://custom.typingmind.com/&#34;&gt;Typing Mind Custom&lt;/a&gt; (for teams): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Host a customized version of Typing Mind with custom branding, self-host, customized UI&lt;/li&gt; &#xA;   &lt;li&gt;Team sharing: Prompts Library, AI Characters&lt;/li&gt; &#xA;   &lt;li&gt;User Management, Access Control, Connect Internal Data, APIs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👋 Overview&lt;/h2&gt; &#xA;&lt;p&gt;Typing Mind is a Chat UI frontend that allows you to use AI chats from all popular AI models with your API key (ChatGPT, Claude, Azure OpenAI, Gemini, etc.).&lt;/p&gt; &#xA;&lt;p&gt;By using the API key with a Chat UI frontend like Typing Mind, you unlock the following benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You only pay for what you use (instead of a monthly subscription like ChatGPT Plus)&lt;/li&gt; &#xA; &lt;li&gt;Your chat conversation will NOT be used for training by OpenAI/Claude/etc.&lt;/li&gt; &#xA; &lt;li&gt;Chat with multiple models conveniently within a unified interface&lt;/li&gt; &#xA; &lt;li&gt;Enjoy a professional, advanced chat UI with tons of features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Typing Mind is &lt;strong&gt;offline first&lt;/strong&gt; and &lt;strong&gt;private by default&lt;/strong&gt;. All your data, messages, and API keys are stored locally on your device, and no one can see them except you.&lt;/p&gt; &#xA;&lt;p&gt;This is the &lt;em&gt;Static Self-host Version&lt;/em&gt; of Typing Mind (&lt;a href=&#34;https://www.typingmind.com/&#34;&gt;www.typingmind.com&lt;/a&gt;). By running the static self-host version, you can use Typing Mind from your private server or from a local device. Typing Mind is free to use with some basic features, a license key is needed to unlock all advanced features. See our &lt;a href=&#34;https://www.typingmind.com/pricing&#34;&gt;pricing plans&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To run the app locally on your device or private server:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;yarn install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start the server: &lt;code&gt;yarn start&lt;/code&gt; or &lt;code&gt;npm run start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;App will run at &lt;code&gt;localhost:3000&lt;/code&gt; by default.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Optionally, you can use any other static web server to host the &lt;code&gt;src&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you run the app on hostnames other than &lt;code&gt;localhost&lt;/code&gt;, you must use HTTPS to make sure all app features work.&lt;/p&gt; &#xA;&lt;h2&gt;🔗 Connect to local models&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the app&lt;/li&gt; &#xA; &lt;li&gt;Click the model dropdown → Model Settings → Add Custom Models&lt;/li&gt; &#xA; &lt;li&gt;Enter your custom model details: Endpoint, Model ID. Custom headers and body parameters are supported.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Test&#34; and then &#34;Add Model&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you face CORS issue, make sure to run your local model in CORS mode.&lt;/p&gt; &#xA;&lt;p&gt;Read the official documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.typingmind.com/chat-models-settings/set-up-local-models-with-local-ai-(llama-gpt4all-vicuna-falcon-etc.)&#34;&gt;Set up local models with Local AI (LLama, GPT4All, Vicuna, Falcon, etc.)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.typingmind.com/chat-models-settings/use-azure-openai&#34;&gt;Use with Azure OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.typingmind.com/chat-models-settings/use-openrouter-models&#34;&gt;Use with OpenRouter Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.typingmind.com/chat-models-settings/fine-tuning-models&#34;&gt;Use with Fine-tunned models (OpenAI)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.typingmind.com/chat-models-settings/use-with-mistral-ai&#34;&gt;Use with Mixtral AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.typingmind.com/chat-models-settings/use-with-perplexity-ai&#34;&gt;Use with Perplexity AI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📸 Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Home page&lt;/th&gt; &#xA;   &lt;th&gt;GPT-4 Vision&lt;/th&gt; &#xA;   &lt;th&gt;Custom Models&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;1284&#34; alt=&#34;Xnapper-2024-02-09-23 43 05&#34; src=&#34;https://github.com/TypingMind/typingmind/assets/4214509/5e7e288e-8ecc-4706-a2d2-d39a50669058&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;1284&#34; alt=&#34;gpt4 vision&#34; src=&#34;https://github.com/TypingMind/typingmind/assets/4214509/fe55a28a-8f05-431c-8ce1-859be0236c73&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;1283&#34; alt=&#34;custom model&#34; src=&#34;https://github.com/TypingMind/typingmind/assets/4214509/aa311abd-6314-49d4-a413-cb0e9bdf617d&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;AI Characters&lt;/th&gt; &#xA;   &lt;th&gt;Voice Input&lt;/th&gt; &#xA;   &lt;th&gt;Plugins&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;1284&#34; alt=&#34;ai characters&#34; src=&#34;https://github.com/TypingMind/typingmind/assets/4214509/12570e1f-0015-4b08-8355-70d77b177421&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;1284&#34; alt=&#34;voice input&#34; src=&#34;https://github.com/TypingMind/typingmind/assets/4214509/bc8f79f7-571d-4c94-ab69-e75e7b129992&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;1284&#34; alt=&#34;plugins&#34; src=&#34;https://github.com/TypingMind/typingmind/assets/4214509/9c0945d2-957b-4a41-83a4-c02968c7bed9&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;📝 Updates &amp;amp; Changelogs&lt;/h2&gt; &#xA;&lt;p&gt;To update, simply &lt;code&gt;git pull&lt;/code&gt; and restart your server.&lt;/p&gt; &#xA;&lt;p&gt;Change logs are available here: &lt;a href=&#34;https://www.typingmind.com/changelog&#34;&gt;https://www.typingmind.com/changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The static self-host version updates are delayed from 1 or 2 versions compared to the latest versions on &lt;a href=&#34;https://www.typingmind.com&#34;&gt;www.typingmind.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💡 Feedback / Ideas / Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please submit your ideas to &lt;a href=&#34;https://www.typingmind.com/ideas&#34;&gt;https://www.typingmind.com/ideas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For bug reports and customer support, please contact &lt;a href=&#34;mailto:support@typingmind.com&#34;&gt;support@typingmind.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;❓ FAQs&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;What is self-hosting?&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Self-host means you deploy the same version of TypingMind.com on your own web hosting server and domain name for your personal use.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Why self-hosting? What are the benefits?&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Some people prefer to run the software on their own server for privacy and availability reasons. For example, if TypingMind.com becomes inaccessible in the future, you can still access your own version of TypingMind from your server without any problem. The self-host version can also be run locally like an app.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;What can I customize in the self-host version?&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;As of now, you cannot customize anything. The self-host version will be exactly the same as the one you are using on TypingMind.com. If you are looking for a more flexible and customizable way to use Typing Mind, check out &lt;a href=&#34;https://custom.typingmind.com&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://custom.typingmind.com&#34;&gt;https://custom.typingmind.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Where can I deploy my self-host version?&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Anywhere! You can deploy it on your own server, or on a static web cloud service like GitHub Pages, Cloudflare Pages, AWS S3, Vercel, Netlify, Heroku, etc. You can even run it on localhost.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Do I have access to the full source code if I want to self-host?&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;No. The license key only grants you permission to use and deploy the app on your own server. You do not have permission to modify or redistribute the code. The full source code is not available for sale as the app is not open-source. You will only receive the compiled code of the app, you can deploy the app anywhere without having to update any code or settings.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;How do I receive updates for the self-host version?&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Simply clone or pull the latest changes from the GitHub repo (&lt;a href=&#34;https://github.com/TypingMind/typingmind&#34;&gt;https://github.com/TypingMind/typingmind&lt;/a&gt;), then restart your server.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Do I still need a License Key and Open API Key to use the self-hosted version?&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;Yes. Both are needed, as the self-hosted version is exactly the same as the version you see on TypingMind.com. The License Key is needed in the self-host version. When you enter the license key, the app will connect to TypingMind&#39;s license server to verify your license.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Can I let my team/community/customers use the self-host version?&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;You can, but keep in mind that they will also need a TypingMind License Key and OpenAI API Key in order to use it. If you are looking to use Typing Mind for a team check out &lt;a href=&#34;https://custom.typingmind.com&#34;&gt;https://custom.typingmind.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Can I embed my License Key/API key to the self-host version somehow and let my team/community/customers use it?&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;No you can&#39;t, and you shouldn&#39;t. It&#39;s not safe to share your License Key and API Key with the public like that. The Static App Self-host version is meant for personal use. If you are looking to set up a custom deployment of TypingMind for your team/community/customers, please check out &lt;a href=&#34;https://typingmind.com/custom&#34;&gt;https://typingmind.com/custom&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Can I have support on technical issues if I self-host?&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;The self-host version comes for free when you buy a license key. There is no support on technical issues if you self-host. If you don&#39;t have the technical skills to set up the self-host version, we recommend using the hosted version on &lt;a href=&#34;https://typingmind.com&#34;&gt;https://typingmind.com&lt;/a&gt; instead. You can also check out Typing Mind Custom for easier setup with custom branding and manage team members: &lt;a href=&#34;https://custom.typingmind.com/&#34;&gt;https://custom.typingmind.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;What permissions do I have with the self-host code?&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;✅ You have access to the compiled code of the app.&lt;/li&gt; &#xA;  &lt;li&gt;✅ You have permission to deploy and use the compiled code on your own server.&lt;/li&gt; &#xA;  &lt;li&gt;❌ You do not have permission to modify or redistribute the compiled code.&lt;/li&gt; &#xA;  &lt;li&gt;❌ You do not have permission to share or resell the compiled code.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>