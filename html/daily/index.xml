<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-06T01:34:27Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>datacontract/datacontract-specification</title>
    <updated>2023-11-06T01:34:27Z</updated>
    <id>tag:github.com,2023-11-06:/datacontract/datacontract-specification</id>
    <link href="https://github.com/datacontract/datacontract-specification" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Data Contract Specification Repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Data Contract Specification&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/images/datacontract.png&#34; alt=&#34;datacontract.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Data contracts bring data providers and data consumers together.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;data contract&lt;/em&gt; is a document that defines the structure, format, semantics, quality, and terms of use for exchanging data between a data provider and their consumers. A data contract is implemented by a data product&#39;s output port or other data technologies. Data contracts can also be used for the input port to specify the expectations of data dependencies and verify given guarantees.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;data contract specification&lt;/em&gt; defines a YAML format to describe attributes of provided data sets. It is data platform neutral, yet supports well-known formats to express schemas (e.g., dbt models, JSON Schema, Protobuf, SQL DDL) and quality tests (e.g., SodaCL, SQL queries) to avoid unnecessary abstractions. The data contract specification is an open initiative to define a common data contract format. Think of an &lt;a href=&#34;https://www.openapis.org/&#34;&gt;OpenAPI specification&lt;/a&gt;, but for data sets.&lt;/p&gt; &#xA;&lt;p&gt;Data contracts come into play when data is exchanged between different teams or organizational units, such as in a &lt;a href=&#34;https://www.datamesh-architecture.com/&#34;&gt;data mesh architecture&lt;/a&gt;. First, and foremost, data contracts are a communication tool to express a common understanding of how data should be structured and interpreted. They make semantic and quality expectations explicit. They are often created in &lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/workshop&#34;&gt;workshops&lt;/a&gt;. Later in development and production, they also serve as the basis for code generation, testing, schema validations, quality checks, monitoring, access control, and computational governance policies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The term &#34;data contract&#34; refers to a specification that is usually owned by the data provider and thus does not align with a &#34;contract&#34; in a legal sense as a mutual agreement between two parties. The term &#34;contract&#34; may be somewhat misleading, but it is how it is used in practice. The mutual agreement between one data provider and one data consumer is the &#34;data usage agreement&#34; that refers to a data contract. Data usage agreements have a defined lifecycle, start/end date, and help the data provider to track who accesses their data and for which purposes.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The specification is inspired by &lt;a href=&#34;https://github.com/AIDAUserGroup/open-data-contract-standard&#34;&gt;AIDA User Group&#39;s Open Data Contract Standard&lt;/a&gt;, (formerly &lt;a href=&#34;https://github.com/paypal/data-contract-template/raw/main/docs/README.md&#34;&gt;PayPal&#39;s Data Contract Template&lt;/a&gt;) and Data Mesh Manager&#39;s &lt;a href=&#34;https://www.datamesh-manager.com&#34;&gt;Data Contract API&lt;/a&gt;. It follows &lt;a href=&#34;https://www.openapis.org/&#34;&gt;OpenAPI&lt;/a&gt; and &lt;a href=&#34;https://www.asyncapi.com/&#34;&gt;AsyncAPI&lt;/a&gt; conventions.&lt;/p&gt; &#xA;&lt;h2&gt;Version&lt;/h2&gt; &#xA;&lt;p&gt;0.9.0&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://studio.datacontract.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/open%20in-Data%20Contract%20Studio-blue&#34; alt=&#34;Open in Data Contract Studio&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dataContractSpecification: 0.9.0&#xA;id: urn:datacontract:checkout:orders-latest-npii&#xA;info:&#xA;  title: Orders Latest NPII&#xA;  version: 1.0.0&#xA;  description: Successful customer orders in the webshop. All orders since 2020-01-01. Orders with their line items are in their current state (no history included). PII data is removed.&#xA;  owner: Checkout Team&#xA;  contact:&#xA;    name: John Doe (Data Product Owner)&#xA;    email: john.doe@example.com&#xA;servers:&#xA;  production:&#xA;    type: BigQuery&#xA;    project: acme_orders_prod&#xA;    dataset: bigquery_orders_latest_npii_v1&#xA;terms:&#xA;  usage: &amp;gt;&#xA;    Data can be used for reports, analytics and machine learning use cases.&#xA;    Order may be linked and joined by other tables&#xA;  limitations: &amp;gt;&#xA;    Not suitable for real-time use cases.&#xA;    Data may not be used to identify individual customers.&#xA;    Max data processing per day: 10 TiB&#xA;  billing: 5000 USD per month&#xA;  noticePeriod: P3M&#xA;schema:&#xA;  type: dbt  # the specification format: dbt, bigquery, avro, protobuf, sql, json-schema, custom&#xA;  specification:  # expressed as string or inline yaml or via &#34;$ref: model.yaml&#34;&#xA;    version: 2 &#xA;    description: The subset of the output port&#39;s data model that we agree to use&#xA;    models:&#xA;      - name: orders&#xA;        description: &amp;gt;&#xA;          One record per order. Includes cancelled and deleted orders.&#xA;        columns:&#xA;          - name: order_id&#xA;            data_type: string&#xA;            description: Primary key of the orders table&#xA;          - name: order_timestamp&#xA;            data_type: timestamptz&#xA;            description: The business timestamp in UTC when the order was successfully registered in the source system and the payment was successful.&#xA;          - name: order_total&#xA;            data_type: integer&#xA;            description: &#34;Total amount of the order in the smallest monetary unit (e.g., cents).&#34;&#xA;      - name: line_items&#xA;        description: &amp;gt;&#xA;          The items that are part of an order&#xA;        columns:&#xA;          - name: lines_item_id&#xA;            data_type: string&#xA;            description: Primary key of the lines_item_id table&#xA;          - name: order_id&#xA;            data_type: string&#xA;            description: Foreign key to the orders table&#xA;          - name: sku&#xA;            data_type: string&#xA;            description: The purchased article number&#xA;examples:&#xA;  - type: csv # csv, json, yaml, custom&#xA;    model: orders&#xA;    data: |- # expressed as string or inline yaml or via &#34;$ref: data.csv&#34;&#xA;      order_id,order_timestamp,order_total&#xA;      &#34;1001&#34;,&#34;2023-09-09T08:30:00Z&#34;,2500&#xA;      &#34;1002&#34;,&#34;2023-09-08T15:45:00Z&#34;,1800&#xA;      &#34;1003&#34;,&#34;2023-09-07T12:15:00Z&#34;,3200&#xA;      &#34;1004&#34;,&#34;2023-09-06T19:20:00Z&#34;,1500&#xA;      &#34;1005&#34;,&#34;2023-09-05T10:10:00Z&#34;,4200&#xA;      &#34;1006&#34;,&#34;2023-09-04T14:55:00Z&#34;,2800&#xA;      &#34;1007&#34;,&#34;2023-09-03T21:05:00Z&#34;,1900&#xA;      &#34;1008&#34;,&#34;2023-09-02T17:40:00Z&#34;,3600&#xA;      &#34;1009&#34;,&#34;2023-09-01T09:25:00Z&#34;,3100&#xA;      &#34;1010&#34;,&#34;2023-08-31T22:50:00Z&#34;,2700&#xA;  - type: csv&#xA;    model: line_items&#xA;    data: |-&#xA;      lines_item_id,order_id,sku&#xA;      &#34;1&#34;,&#34;1001&#34;,&#34;5901234123457&#34;&#xA;      &#34;2&#34;,&#34;1001&#34;,&#34;4001234567890&#34;&#xA;      &#34;3&#34;,&#34;1002&#34;,&#34;5901234123457&#34;&#xA;      &#34;4&#34;,&#34;1002&#34;,&#34;2001234567893&#34;&#xA;      &#34;5&#34;,&#34;1003&#34;,&#34;4001234567890&#34;&#xA;      &#34;6&#34;,&#34;1003&#34;,&#34;5001234567892&#34;&#xA;      &#34;7&#34;,&#34;1004&#34;,&#34;5901234123457&#34;&#xA;      &#34;8&#34;,&#34;1005&#34;,&#34;2001234567893&#34;&#xA;      &#34;9&#34;,&#34;1005&#34;,&#34;5001234567892&#34;&#xA;      &#34;10&#34;,&#34;1005&#34;,&#34;6001234567891&#34;&#xA;quality:&#xA;  type: SodaCL   # data quality check format: SodaCL, montecarlo, custom&#xA;  specification: # expressed as string or inline yaml or via &#34;$ref: checks.yaml&#34;&#xA;    checks for orders:&#xA;      - freshness(order_timestamp) &amp;lt; 24h&#xA;      - row_count &amp;gt; 500000&#xA;      - duplicate_count(order_id) = 0&#xA;    checks for line_items:&#xA;      - row_count &amp;gt; 500000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Schema&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/datacontract/datacontract-specification/raw/main/datacontract.schema.json&#34;&gt;JSON Schema&lt;/a&gt; of the Data Contract Specification.&lt;/p&gt; &#xA;&lt;h3&gt;Data Contract Object&lt;/h3&gt; &#xA;&lt;p&gt;This is the root document.&lt;/p&gt; &#xA;&lt;p&gt;It is &lt;em&gt;RECOMMENDED&lt;/em&gt; that the root document be named: &lt;code&gt;datacontract.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dataContractSpecification&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;REQUIRED. Specifies the Data Contract Specification being used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;REQUIRED. An organization-wide unique technical identifier, such as a UUID, URN, slug, string, or number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;info&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#info-object&#34;&gt;Info Object&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;REQUIRED. Specifies the metadata of the data contract. May be used by tooling.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;servers&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#servers-object&#34;&gt;Servers Object&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the servers of the data contract.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;terms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#terms-object&#34;&gt;Terms Object&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the terms and conditions of the data contract.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;schema&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#schema-object&#34;&gt;Schema Object&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the data contract schema. The specification supports different schemas.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;examples&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#examples-object&#34;&gt;Examples Object&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies example data sets for the schema. The specification supports different example types.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;quality&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#quality-object&#34;&gt;Quality Object&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the quality attributes and checks. The specification supports different quality check DSLs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This object &lt;em&gt;MAY&lt;/em&gt; be extended with &lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#specification-extensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Info Object&lt;/h3&gt; &#xA;&lt;p&gt;Metadata and life cycle information about the data contract.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;REQUIRED. The title of the data contract.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;REQUIRED. The version of the data contract document (which is distinct from the Data Contract Specification version or the Data Product implementation version).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A description of the data contract.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;owner&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The owner or team responsible for managing the data contract and providing the data.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dataProduct&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The identifier of the data product that contains the output port providing the data.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;outputPort&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DEPRECATED. The identifier of the output port that implements the data contract.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contact&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#contact-object&#34;&gt;Contact Object&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Contact information for the data contract.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Contact Object&lt;/h3&gt; &#xA;&lt;p&gt;Contact information for the data contract.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The identifying name of the contact person/organization.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;url&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL pointing to the contact information. This &lt;em&gt;MUST&lt;/em&gt; be in the form of a URL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;email&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The email address of the contact person/organization. This &lt;em&gt;MUST&lt;/em&gt; be in the form of an email address.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This object &lt;em&gt;MAY&lt;/em&gt; be extended with &lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#specification-extensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Servers Object&lt;/h3&gt; &#xA;&lt;p&gt;Information about the servers.&lt;/p&gt; &#xA;&lt;p&gt;The Servers Object is a map of &lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#server-object&#34;&gt;Server Objects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Server Object&lt;/h3&gt; &#xA;&lt;p&gt;The fields are dependent on the defined type.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The type of the data product technology that implements the data contract. Well-known server types are: &lt;code&gt;bigquery&lt;/code&gt;, &lt;code&gt;s3&lt;/code&gt;, &lt;code&gt;redshift&lt;/code&gt;, &lt;code&gt;snowflake&lt;/code&gt;, &lt;code&gt;databricks&lt;/code&gt;, &lt;code&gt;kafka&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An optional string describing the server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This object &lt;em&gt;MAY&lt;/em&gt; be extended with &lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#specification-extensions&#34;&gt;Specification Extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;BigQuery Server Object&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bigquery&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;project&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dataset&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;S3 Server Object&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;s3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;location&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;S3 URL, starting with &lt;code&gt;s3://&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  production:&#xA;    type: s3&#xA;    location: s3://acme-orders-prod/orders/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Redshift Server Object&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;redshift&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;account&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;database&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;schema&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Snowflake Server Object&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;snowflake&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;account&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;database&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;schema&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Databricks Server Object&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;databricks&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;share&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Kafka Server Object&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;kafka&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;host&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;topic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Terms Object&lt;/h3&gt; &#xA;&lt;p&gt;The terms and conditions of the data contract.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;usage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The usage describes the way the data is expected to be used. Can contain business and technical information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;limitations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The limitations describe the restrictions on how the data can be used, can be technical or restrictions on what the data may not be used for.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;billing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The billing describes the pricing model for using the data, such as whether it&#39;s free, having a monthly fee, or metered pay-per-use.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;noticePeriod&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The period of time that must be given by either party to terminate or modify a data usage agreement. Uses ISO-8601 period format, e.g., &lt;code&gt;P3M&lt;/code&gt; for a period of three months.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Schema Object&lt;/h3&gt; &#xA;&lt;p&gt;The schema of the data contract describes the syntax and semantics of provided data sets. As the type of the output port depends on the data platform, multiple schema specifications are supported.&lt;/p&gt; &#xA;&lt;p&gt;A schema may define a single table, a collection of tables as a dataset, a file structure, or any arbitrary structure.&lt;/p&gt; &#xA;&lt;p&gt;To avoid unnecessary abstractions, the data contract specification supports existing well-known formats. Some schema types, such as &lt;code&gt;dbt&lt;/code&gt;, also support defining tests and additional metadata.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;REQUIRED. The type of the schema.&lt;br&gt; Typical values are: &lt;code&gt;dbt&lt;/code&gt;, &lt;code&gt;bigquery&lt;/code&gt;, &lt;code&gt;json-schema&lt;/code&gt;, &lt;code&gt;sql-ddl&lt;/code&gt;, &lt;code&gt;avro&lt;/code&gt;, &lt;code&gt;protobuf&lt;/code&gt;, &lt;code&gt;custom&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;specification&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#dbt-schema-object&#34;&gt;dbt Schema Object&lt;/a&gt; |&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#bigquery-schema-object&#34;&gt;BigQuery Schema Object&lt;/a&gt; |&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#bigquery-schema-object&#34;&gt;JSON Schema Schema Object&lt;/a&gt; |&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#sql-ddl-schema-object&#34;&gt;SQL DDL Schema Object&lt;/a&gt; |&lt;br&gt; &lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;REQUIRED. The specification of the schema. The schema specification can be encoded as a string or as inline YAML.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;dbt Schema Object&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.getdbt.com/reference/model-properties&#34;&gt;https://docs.getdbt.com/reference/model-properties&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example (inline YAML):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schema:&#xA;  type: dbt&#xA;  specification:&#xA;    version: 2&#xA;    models:&#xA;      - name: &#34;My Table&#34;&#xA;        description: &#34;My description&#34;&#xA;        columns:&#xA;          - name: &#34;My column&#34;&#xA;            data_type: text&#xA;            description: &#34;My description&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example (string):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schema:&#xA;  type: dbt&#xA;  specification: |-&#xA;    version: 2&#xA;    models:&#xA;      - name: &#34;My Table&#34;&#xA;        description: &#34;My description&#34;&#xA;        columns:&#xA;          - name: &#34;My column&#34;&#xA;            data_type: text&#xA;            description: &#34;My description&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;BigQuery Schema Object&lt;/h4&gt; &#xA;&lt;p&gt;The schema structure is defined by the &lt;a href=&#34;https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#resource:-table&#34;&gt;Google BigQuery Table&lt;/a&gt; object. You can extract such a Table object via the &lt;a href=&#34;https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get&#34;&gt;tables.get&lt;/a&gt; endpoint.&lt;/p&gt; &#xA;&lt;p&gt;Instead of providing a single Table object, you can also provide an array of such objects. Be aware that &lt;a href=&#34;https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/list&#34;&gt;tables.list&lt;/a&gt; only returns a subset of the full Table object. You need to call every Table object via &lt;a href=&#34;https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get&#34;&gt;tables.get&lt;/a&gt; to get the full Table object, including the actual schema.&lt;/p&gt; &#xA;&lt;p&gt;Learn more: &lt;a href=&#34;https://cloud.google.com/bigquery/docs/reference/rest&#34;&gt;Google BigQuery REST Reference v2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schema:&#xA;  type: bigquery&#xA;  specification: |-&#xA;    {&#xA;      &#34;tableReference&#34;: {&#xA;        &#34;projectId&#34;: &#34;my-project&#34;,&#xA;        &#34;datasetId&#34;: &#34;my_dataset&#34;,&#xA;        &#34;tableId&#34;: &#34;my_table&#34;&#xA;      },&#xA;      &#34;description&#34;: &#34;This is a description&#34;,&#xA;      &#34;type&#34;: &#34;TABLE&#34;,&#xA;      &#34;schema&#34;: {&#xA;        &#34;fields&#34;: [&#xA;          {&#xA;            &#34;name&#34;: &#34;name&#34;,&#xA;            &#34;type&#34;: &#34;STRING&#34;,&#xA;            &#34;mode&#34;: &#34;NULLABLE&#34;,&#xA;            &#34;description&#34;: &#34;This is a description&#34;&#xA;          }&#xA;        ]&#xA;      }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSON Schema Schema Object&lt;/h4&gt; &#xA;&lt;p&gt;JSON Schema can be defined as JSON or rendered as YAML, following the &lt;a href=&#34;https://spec.openapis.org/oas/v3.1.0#properties&#34;&gt;OpenAPI Schema Object dialect&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example (inline YAML):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schema:&#xA;  type: json-schema&#xA;  specification:&#xA;    orders:&#xA;      description: One record per order. Includes cancelled and deleted orders.&#xA;      type: object&#xA;      properties:&#xA;        order_id:&#xA;          type: string&#xA;          description: Primary key of the orders table&#xA;        order_timestamp:&#xA;          type: string&#xA;          format: date-time&#xA;          description: The business timestamp in UTC when the order was successfully registered in the source system and the payment was successful.&#xA;        order_total:&#xA;          type: integer&#xA;          description: Total amount of the order in the smallest monetary unit (e.g., cents).&#xA;    line_items:&#xA;      type: object&#xA;      properties:&#xA;        lines_item_id:&#xA;          type: string&#xA;          description: Primary key of the lines_item_id table&#xA;        order_id:&#xA;          type: string&#xA;          description: Foreign key to the orders table&#xA;        sku:&#xA;          type: string&#xA;          description: The purchased article number&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example (string):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schema:&#xA;  type: json-schema&#xA;  specification: |-&#xA;    {&#xA;      &#34;$schema&#34;: &#34;http://json-schema.org/draft-07/schema#&#34;,&#xA;      &#34;type&#34;: &#34;object&#34;,&#xA;      &#34;properties&#34;: {&#xA;        &#34;orders&#34;: {&#xA;          &#34;type&#34;: &#34;object&#34;,&#xA;          &#34;description&#34;: &#34;One record per order. Includes cancelled and deleted orders.&#34;,&#xA;          &#34;properties&#34;: {&#xA;            &#34;order_id&#34;: {&#xA;              &#34;type&#34;: &#34;string&#34;,&#xA;              &#34;description&#34;: &#34;Primary key of the orders table&#34;&#xA;            },&#xA;            &#34;order_timestamp&#34;: {&#xA;              &#34;type&#34;: &#34;string&#34;,&#xA;              &#34;format&#34;: &#34;date-time&#34;,&#xA;              &#34;description&#34;: &#34;The business timestamp in UTC when the order was successfully registered in the source system and the payment was successful.&#34;&#xA;            },&#xA;            &#34;order_total&#34;: {&#xA;              &#34;type&#34;: &#34;integer&#34;,&#xA;              &#34;description&#34;: &#34;Total amount of the order in the smallest monetary unit (e.g., cents).&#34;&#xA;            }&#xA;          },&#xA;          &#34;required&#34;: [&#34;order_id&#34;, &#34;order_timestamp&#34;, &#34;order_total&#34;]&#xA;        },&#xA;        &#34;line_items&#34;: {&#xA;          &#34;type&#34;: &#34;object&#34;,&#xA;          &#34;properties&#34;: {&#xA;            &#34;lines_item_id&#34;: {&#xA;              &#34;type&#34;: &#34;string&#34;,&#xA;              &#34;description&#34;: &#34;Primary key of the lines_item_id table&#34;&#xA;            },&#xA;            &#34;order_id&#34;: {&#xA;              &#34;type&#34;: &#34;string&#34;,&#xA;              &#34;description&#34;: &#34;Foreign key to the orders table&#34;&#xA;            },&#xA;            &#34;sku&#34;: {&#xA;              &#34;type&#34;: &#34;string&#34;,&#xA;              &#34;description&#34;: &#34;The purchased article number&#34;&#xA;            }&#xA;          },&#xA;          &#34;required&#34;: [&#34;lines_item_id&#34;, &#34;order_id&#34;, &#34;sku&#34;]&#xA;        }&#xA;      },&#xA;      &#34;required&#34;: [&#34;orders&#34;, &#34;line_items&#34;]&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SQL DDL Schema Object&lt;/h4&gt; &#xA;&lt;p&gt;Classical SQL DDLs can be used to describe the structure.&lt;/p&gt; &#xA;&lt;p&gt;Example (string):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schema:&#xA;  type: sql-ddl&#xA;  specification: |-&#xA;      -- One record per order. Includes cancelled and deleted orders.&#xA;      CREATE TABLE orders (&#xA;        order_id TEXT PRIMARY KEY, -- Primary key of the orders table&#xA;        order_timestamp TIMESTAMPTZ NOT NULL, -- The business timestamp in UTC when the order was successfully registered in the source system and the payment was successful.&#xA;        order_total INTEGER NOT NULL -- Total amount of the order in the smallest monetary unit (e.g., cents)&#xA;      );&#xA;    &#xA;      -- The items that are part of an order&#xA;      CREATE TABLE line_items (&#xA;        lines_item_id TEXT PRIMARY KEY, -- Primary key of the lines_item_id table&#xA;        order_id TEXT REFERENCES orders(order_id), -- Foreign key to the orders table&#xA;        sku TEXT NOT NULL -- The purchased article number&#xA;      );&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples Object&lt;/h3&gt; &#xA;&lt;p&gt;The Examples Object is an array of &lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#examples-object&#34;&gt;Example Objects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Example Object&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The type of the data product technology that implements the data contract. Well-known server types are: &lt;code&gt;csv&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;yaml&lt;/code&gt;, &lt;code&gt;custom&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An optional string describing the example.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;model&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The reference to the model in the schema, e.g. a table name.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;data&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example data for this model.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;examples:&#xA;- type: csv&#xA;  model: orders&#xA;  data: |-&#xA;    order_id,order_timestamp,order_total&#xA;    &#34;1001&#34;,&#34;2023-09-09T08:30:00Z&#34;,2500&#xA;    &#34;1002&#34;,&#34;2023-09-08T15:45:00Z&#34;,1800&#xA;    &#34;1003&#34;,&#34;2023-09-07T12:15:00Z&#34;,3200&#xA;    &#34;1004&#34;,&#34;2023-09-06T19:20:00Z&#34;,1500&#xA;    &#34;1005&#34;,&#34;2023-09-05T10:10:00Z&#34;,4200&#xA;    &#34;1006&#34;,&#34;2023-09-04T14:55:00Z&#34;,2800&#xA;    &#34;1007&#34;,&#34;2023-09-03T21:05:00Z&#34;,1900&#xA;    &#34;1008&#34;,&#34;2023-09-02T17:40:00Z&#34;,3600&#xA;    &#34;1009&#34;,&#34;2023-09-01T09:25:00Z&#34;,3100&#xA;    &#34;1010&#34;,&#34;2023-08-31T22:50:00Z&#34;,2700&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quality Object&lt;/h3&gt; &#xA;&lt;p&gt;The quality object contains quality attributes and checks.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;REQUIRED. The type of the schema.&lt;br&gt; Typical values are: &lt;code&gt;SodaCL&lt;/code&gt;, &lt;code&gt;montecarlo&lt;/code&gt;, &lt;code&gt;custom&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;specification&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#sodacl-quality-object&#34;&gt;SodaCL Quality Object&lt;/a&gt; |&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/#monte-carlo-quality-object&#34;&gt;Monte Carlo Schema Object&lt;/a&gt; |&lt;br&gt; &lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;REQUIRED. The specification of the quality attributes. The quality specification can be encoded as a string or as inline YAML.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;SodaCL Quality Object&lt;/h4&gt; &#xA;&lt;p&gt;Quality attributes in &lt;a href=&#34;https://docs.soda.io/soda-cl/soda-cl-overview.html&#34;&gt;Soda Checks Language&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;specification&lt;/code&gt; represents the content of a &lt;code&gt;checks.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Example (inline):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;quality:&#xA;  type: SodaCL   # data quality check format: SodaCL, montecarlo, dbt-tests, custom&#xA;  specification: # expressed as string or inline yaml or via &#34;$ref: checks.yaml&#34;&#xA;    checks for orders:&#xA;      - row_count &amp;gt; 0&#xA;      - duplicate_count(order_id) = 0&#xA;    checks for line_items:&#xA;      - row_count &amp;gt; 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example (string):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;quality:&#xA;  type: SodaCL&#xA;  specification: |-&#xA;    checks for search_queries:&#xA;      - freshness(search_timestamp) &amp;lt; 1d&#xA;      - row_count &amp;gt; 100000&#xA;      - missing_count(search_query) = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Monte Carlo Quality Object&lt;/h4&gt; &#xA;&lt;p&gt;Quality attributes defined as Monte Carlos &lt;a href=&#34;https://docs.getmontecarlo.com/docs/monitors-as-code&#34;&gt;Monitors as Code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;specification&lt;/code&gt; represents the content of a &lt;code&gt;montecarlo.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Example (string):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;quality:&#xA;  type: montecarlo&#xA;  specification: |-&#xA;    montecarlo:&#xA;      field_health:&#xA;        - table: project:dataset.table_name&#xA;          timestamp_field: created&#xA;      dimension_tracking:&#xA;        - table: project:dataset.table_name&#xA;          timestamp_field: created&#xA;          field: order_status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specification Extensions&lt;/h3&gt; &#xA;&lt;p&gt;While the Data Contract Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.&lt;/p&gt; &#xA;&lt;p&gt;A custom fields can be added with any name. The value can be null, a primitive, an array or an object.&lt;/p&gt; &#xA;&lt;h3&gt;Design Principles&lt;/h3&gt; &#xA;&lt;p&gt;The Data Contract Specification follows these design principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is an open standard and its serialization can be versioned in git&lt;/li&gt; &#xA; &lt;li&gt;Follows OpenAPI and AsyncAPI conventions so that it feels immediately familiar&lt;/li&gt; &#xA; &lt;li&gt;Supports tooling by being machine-readable&lt;/li&gt; &#xA; &lt;li&gt;Supports existing well-known formats to avoid unnecessary abstractions&lt;/li&gt; &#xA; &lt;li&gt;Supports contract-first approaches&lt;/li&gt; &#xA; &lt;li&gt;Supports code-first approaches&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tooling&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://studio.datacontract.com/&#34;&gt;Data Contract Studio&lt;/a&gt; is a free web tool to develop and share data contracts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/datacontract/cli&#34;&gt;Data Contract CLI&lt;/a&gt; is a free CLI tool to help you create, develop, and maintain your data contracts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.datamesh-manager.com/&#34;&gt;Data Mesh Manager&lt;/a&gt; is a commercial tool to manage data products and data contracts. It supports the data contract specification and allows the user to import or export data contracts using this specification.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Data Contract Specifications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AIDAUserGroup/open-data-contract-standard&#34;&gt;AIDA User Group&#39;s Open Data Contract Standard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paypal/data-contract-template/raw/main/docs/README.md&#34;&gt;PayPal&#39;s Data Contract Template&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Literature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/dp/B0C37FPH3D&#34;&gt;Driving Data Quality with Data Contracts&lt;/a&gt; by Andrew Jones&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;The Data Contract Specification was originally created by &lt;a href=&#34;https://www.linkedin.com/in/jochenchrist/&#34;&gt;Jochen Christ&lt;/a&gt; and &lt;a href=&#34;https://www.linkedin.com/in/simonharrer/&#34;&gt;Dr. Simon Harrer&lt;/a&gt;, and is currently maintained by them.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please open an issue or a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/datacontract/datacontract-specification/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/datacontract/datacontract-specification/&#34; class=&#34;github-corner&#34; aria-label=&#34;View source on GitHub&#34;&gt;&#xA;  &lt;svg width=&#34;80&#34; height=&#34;80&#34; viewbox=&#34;0 0 250 250&#34; style=&#34;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&#34; aria-hidden=&#34;true&#34;&gt;&#xA;   &lt;path d=&#34;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&#34;&gt;&lt;/path&gt;&#xA;   &lt;path d=&#34;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&#34; fill=&#34;currentColor&#34; style=&#34;transform-origin: 130px 106px;&#34; class=&#34;octo-arm&#34;&gt;&lt;/path&gt;&#xA;   &lt;path d=&#34;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&#34; fill=&#34;currentColor&#34; class=&#34;octo-body&#34;&gt;&lt;/path&gt;&#xA;  &lt;/svg&gt;&lt;/a&gt;&amp;lt;style&amp;gt;.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}&amp;lt;/style&amp;gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>frainzy1477/luci-app-clash</title>
    <updated>2023-11-06T01:34:27Z</updated>
    <id>tag:github.com,2023-11-06:/frainzy1477/luci-app-clash</id>
    <link href="https://github.com/frainzy1477/luci-app-clash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Luci interface for Clash Openwrt&lt;/p&gt;&lt;hr&gt;&lt;h2 align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/Dreamacro/clash/docs/logo.png&#34; alt=&#34;Clash&#34; width=&#34;200&#34;&gt; &lt;br&gt;Luci App For Clash &lt;br&gt; &lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A rule based custom proxy client for Openwrt based on &lt;a href=&#34;https://github.com/Dreamacro/clash&#34; target=&#34;_blank&#34;&gt;Clash&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/frainzy1477/luci-app-clash/releases/tag/v1.7.5.7&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/luci%20for%20clash-v1.7.5.7-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/frainzy1477/luci-app-clash/releases&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/frainzy1477/luci-app-clash/total.svg?style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upload ipk file to tmp folder&lt;/li&gt; &#xA; &lt;li&gt;cd /tmp&lt;/li&gt; &#xA; &lt;li&gt;opkg update&lt;/li&gt; &#xA; &lt;li&gt;opkg install luci-app-clash_v1.7.5.7_all.ipk&lt;/li&gt; &#xA; &lt;li&gt;opkg install luci-app-clash_v1.7.5.7_all.ipk --force-depends&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Uninstall&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;opkg remove luci-app-clash&lt;/li&gt; &#xA; &lt;li&gt;opkg remove luci-app-clash --force-remove&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Subscription Config&lt;/li&gt; &#xA; &lt;li&gt;Config Upload&lt;/li&gt; &#xA; &lt;li&gt;Create Config&lt;/li&gt; &#xA; &lt;li&gt;GeoIP Database Update&lt;/li&gt; &#xA; &lt;li&gt;TProxy UDP&lt;/li&gt; &#xA; &lt;li&gt;IP Query&lt;/li&gt; &#xA; &lt;li&gt;DNS Forwarding&lt;/li&gt; &#xA; &lt;li&gt;Support Trojan(Trojan-GFW &amp;amp; Trojan-Go)&lt;/li&gt; &#xA; &lt;li&gt;Support SSR&lt;/li&gt; &#xA; &lt;li&gt;Support SS&lt;/li&gt; &#xA; &lt;li&gt;Support V2ray&lt;/li&gt; &#xA; &lt;li&gt;Support Snell&lt;/li&gt; &#xA; &lt;li&gt;Ping Custom Proxy Servers&lt;/li&gt; &#xA; &lt;li&gt;Tun Support&lt;/li&gt; &#xA; &lt;li&gt;Access Control&lt;/li&gt; &#xA; &lt;li&gt;Support Provider,&lt;/li&gt; &#xA; &lt;li&gt;Game Rules&lt;/li&gt; &#xA; &lt;li&gt;Restore Config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependency&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bash&lt;/li&gt; &#xA; &lt;li&gt;coreutils&lt;/li&gt; &#xA; &lt;li&gt;coreutils-nohup&lt;/li&gt; &#xA; &lt;li&gt;coreutils-base64&lt;/li&gt; &#xA; &lt;li&gt;ipset&lt;/li&gt; &#xA; &lt;li&gt;iptables&lt;/li&gt; &#xA; &lt;li&gt;luci&lt;/li&gt; &#xA; &lt;li&gt;luci-base&lt;/li&gt; &#xA; &lt;li&gt;wget&lt;/li&gt; &#xA; &lt;li&gt;libustream-openssl&lt;/li&gt; &#xA; &lt;li&gt;curl&lt;/li&gt; &#xA; &lt;li&gt;jsonfilter&lt;/li&gt; &#xA; &lt;li&gt;ca-certificates&lt;/li&gt; &#xA; &lt;li&gt;iptables-mod-tproxy&lt;/li&gt; &#xA; &lt;li&gt;kmod-tun&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;compile&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://wiki.openwrt.org/doc/howto/obtain.firmware.sdk&#34;&gt;SDK&lt;/a&gt;, and it&#39;s depends:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install gawk libncurses5-dev libz-dev zlib1g-dev  git ccache&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download your own SDK&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Untar ar71xx platform&#xA;tar xjf OpenWrt-SDK-15.05-ar71xx-generic_gcc-4.8-linaro_uClibc-0.9.33.2.Linux-x86_64.tar.bz2&#xA;cd OpenWrt-SDK-*&#xA;# update feeds&#xA;./scripts/feeds update packages&#xA;# Clone&#xA;git clone https://github.com/frainzy1477/luci-app-clash.git package/luci-app-clash&#xA;# select this package&#xA;make menuconfig&#xA;&#xA;# Compile and install po2lmo bin for build i18n language files&#xA;pushd package/luci-app-clash/tools/po2lmo&#xA;make &amp;amp;&amp;amp; sudo make install&#xA;popd&#xA;# I18n language files&#xA;po2lmo ./package/luci-app-clash/po/zh-cn/clash.po ./package/luci-app-clash/po/zh-cn/clash.zh-cn.lmo&#xA;&#xA;# Compile&#xA; make package/luci-app-clash/compile V=99&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Luci App For Clash - OpenWrt is released under the GPL v3.0 License - see detailed &lt;a href=&#34;https://github.com/frainzy1477/luci-app-clash/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; .&lt;/p&gt;</summary>
  </entry>
</feed>