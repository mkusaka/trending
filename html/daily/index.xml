<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-20T01:36:02Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hassanzhd/FAST-Resources</title>
    <updated>2023-07-20T01:36:02Z</updated>
    <id>tag:github.com,2023-07-20:/hassanzhd/FAST-Resources</id>
    <link href="https://github.com/hassanzhd/FAST-Resources" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Resources of FAST-NUCES 2018-2022&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>tc39/proposal-array-grouping</title>
    <updated>2023-07-20T01:36:02Z</updated>
    <id>tag:github.com,2023-07-20:/tc39/proposal-array-grouping</id>
    <link href="https://github.com/tc39/proposal-array-grouping" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A proposal to make grouping of array items easier&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;proposal-array-grouping&lt;/h1&gt; &#xA;&lt;p&gt;A proposal to make grouping of items in an array (and iterables) easier.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const array = [1, 2, 3, 4, 5];&#xA;&#xA;// `Object.groupBy` groups items by arbitrary key.&#xA;// In this case, we&#39;re grouping by even/odd keys&#xA;Object.groupBy(array, (num, index) =&amp;gt; {&#xA;  return num % 2 === 0 ? &#39;even&#39;: &#39;odd&#39;;&#xA;});&#xA;// =&amp;gt;  { odd: [1, 3, 5], even: [2, 4] }&#xA;&#xA;// `Map.groupBy` returns items in a Map, and is useful for grouping&#xA;// using an object key.&#xA;const odd  = { odd: true };&#xA;const even = { even: true };&#xA;Map.groupBy(array, (num, index) =&amp;gt; {&#xA;  return num % 2 === 0 ? even: odd;&#xA;});&#xA;// =&amp;gt;  Map { {odd: true}: [1, 3, 5], {even: true}: [2, 4] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Champions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Justin Ridgewell (&lt;a href=&#34;https://github.com/jridgewell&#34;&gt;@jridgewell&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Jordan Harband (&lt;a href=&#34;https://github.com/ljharb&#34;&gt;@ljharb&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Current &lt;a href=&#34;https://tc39.es/process-document/&#34;&gt;Stage&lt;/a&gt;: 2&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Array grouping is an extremely common operation, best exemplified by SQL&#39;s &lt;code&gt;GROUP BY&lt;/code&gt; clause and MapReduce programming (which is better thought of map-group-reduce). The ability to combine like data into groups allows developers to compute higher order datasets, like the average age of a cohort or daily LCP values for a webpage.&lt;/p&gt; &#xA;&lt;p&gt;Two methods are offered, &lt;code&gt;Object.groupBy&lt;/code&gt; and &lt;code&gt;Map.groupBy&lt;/code&gt;. The first returns a null-prototype object, which allows ergonomic destructuring and prevents accidental collisions with global Object properties. The second returns a regular &lt;code&gt;Map&lt;/code&gt; instance, which allows grouping on complex key types (imagine a compound key or &lt;a href=&#34;https://github.com/tc39/proposal-record-tuple&#34;&gt;tuple&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Why static methods?&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve &lt;a href=&#34;https://github.com/tc39/proposal-array-grouping/issues/37&#34;&gt;found&lt;/a&gt; a web compatibility issue with the name &lt;code&gt;Array.prototype.groupBy&lt;/code&gt;. The &lt;a href=&#34;https://sugarjs.com/&#34;&gt;Sugar&lt;/a&gt; library until v1.4.0 conditionally monkey-patches &lt;code&gt;Array.prototype&lt;/code&gt; with an incompatible method. By providing a native &lt;code&gt;groupBy&lt;/code&gt;, these versions of Sugar would fail to install their implementation, and any sites that depend on their behavior would break. We&#39;ve found some 660 origins that use these versions of the Sugar library.&lt;/p&gt; &#xA;&lt;p&gt;We then attempted the name &lt;code&gt;Array.prototype.group&lt;/code&gt;, but this ran into &lt;a href=&#34;https://github.com/tc39/proposal-array-grouping/issues/44&#34;&gt;code that uses an array as an arbitrary hashmap&lt;/a&gt;. Because these bugs are exceptionally difficult to detect (it requires devs to detect and know how to report the bug to us), the committee didn&#39;t want to attempt another prototype method name. Instead we chose to use static method, which we believe is unorthodox enough to not risk a web compatibility issue. This also gives us a nice way to support Records and Tuples in the future.&lt;/p&gt; &#xA;&lt;h2&gt;Polyfill&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A polyfill is available in the &lt;a href=&#34;https://github.com/zloirock/core-js&#34;&gt;core-js&lt;/a&gt; library. You can find it in the &lt;a href=&#34;https://github.com/zloirock/core-js#array-grouping&#34;&gt;ECMAScript proposals section&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lodash &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lodash.com/docs/4.17.15#groupBy&#34;&gt;&lt;code&gt;_.groupBy&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.npmjs.com/package/lodash.groupby&#34;&gt;850k downloads/week&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>