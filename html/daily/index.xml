<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-01T01:31:54Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gehaxelt/phuzz</title>
    <updated>2025-01-01T01:31:54Z</updated>
    <id>tag:github.com,2025-01-01:/gehaxelt/phuzz</id>
    <link href="https://github.com/gehaxelt/phuzz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHUZZ&lt;/h1&gt; &#xA;&lt;p&gt;PHUZZ is a grey-box coverage-guided fuzzer for PHP web applications developed by TBA to be published at AsiaCCS 2024 [0].&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for a variety of vulnerabilities: SQL Injection, Command Injection, Insecure Deserialization, Path Traversal, External Entity Injection, Cross-Site Scripting and Open Redirection&lt;/li&gt; &#xA; &lt;li&gt;Support for transparent instrumentation without modifying the target&#39;s source code, the PHP interpreter&#39;s source code or other external components (databases).&lt;/li&gt; &#xA; &lt;li&gt;Support for overriding specific functions in the target, e.g. to circument authentication/authorization or other security checks, to gain higher coverage.&lt;/li&gt; &#xA; &lt;li&gt;Support for capturing exceptions and errors otherwise hidden by the target, e.g. to find bugs or potential vulnerabilities.&lt;/li&gt; &#xA; &lt;li&gt;Support for multi-instance parallel fuzzing&lt;/li&gt; &#xA; &lt;li&gt;Support for PHP 8 and 7&lt;/li&gt; &#xA; &lt;li&gt;Limited support for independent actions leading to 2nd-order vulnerabilities (e.g. setting a value at endpoint A and triggering a vulnerability at endpoint B)&lt;/li&gt; &#xA; &lt;li&gt;Finds more server-side vulnerabilities than state-of-the-art blackbox fuzzer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Abstract&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Coverage-guided fuzz testing has received significant attention from the research community, with a strong focus on binary applications, greatly disregarding other targets, such as web applications. The importance of the World Wide Web in everyone&#39;s life cannot be overstated, and to this day, many web applications are developed in PHP. In this work, we address the challenges of applying coverage-guided fuzzing to PHP web applications and introduce PHUZZ, a modular fuzzing framework for PHP web applications. PHUZZ uses novel approaches to detect more client-side and server-side vulnerability classes than state-of-the-art related work, including SQL injections, remote command injections, insecure deserialization, path traversal, external entity injection, cross-site scripting, and open redirection. We evaluate PHUZZ on a diverse set of artificial and real-world web applications with known and unknown vulnerabilities, and compare it against a variety of state-of-the-art fuzzers. In order to show PHUZZ&#39; effectiveness, we fuzz over 1,000 API endpoints of the 115 most popular WordPress plugins, resulting in over 20 security issues and 2 new CVE-IDs. Finally, we make the framework publicly available to motivate and encourage further research on web application fuzz testing.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you use PHUZZ, please cite it as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{10.1145/3634737.3661137,&#xA;author = {Neef, Sebastian and Kleissner, Lorenz and Seifert, Jean-Pierre},&#xA;title = {What All the PHUZZ Is About: A Coverage-guided Fuzzer for Finding Vulnerabilities in PHP Web Applications},&#xA;year = {2024},&#xA;isbn = {9798400704826},&#xA;publisher = {Association for Computing Machinery},&#xA;address = {New York, NY, USA},&#xA;url = {https://doi.org/10.1145/3634737.3661137},&#xA;doi = {10.1145/3634737.3661137},&#xA;booktitle = {Proceedings of the 19th ACM Asia Conference on Computer and Communications Security},&#xA;pages = {1523â€“1538},&#xA;numpages = {16},&#xA;keywords = {PHUZZ, coverage-guided fuzzing, greybox fuzzing, fuzz testing, PHP, vulnerability discovery, web security, SQL injection, remote command execution, cross-site scripting},&#xA;location = {Singapore, Singapore},&#xA;series = {ASIA CCS &#39;24}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gehaxelt/phuzz/main/doc/phuzz-overview.png&#34; alt=&#34;PHUZZ overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Structure of this repo&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the code to run PHUZZ and other blackbox fuzzers in headless Docker containers. To learn how to use PHUZZ, please check the README in &lt;code&gt;./code/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The results of our experiments are available in &lt;code&gt;./experiments/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please also check the subfolders as many have a README with additional information.&lt;/p&gt; &#xA;&lt;h2&gt;Quick run&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Clone the repository&#xA;git@github.com:gehaxelt/phuzz.git&#xA;cd phuzz/code/&#xA;&#xA;sudo docker-compose up -d db --build --force-recreate&#xA;sleep 15s # give the DB some time to start up - might be shorter or longer depending on your hardware. When in doubt, check with docker-compose logs -f db.&#xA;sudo docker-compose up -d web --build --force-recreate&#xA;sleep 15s # give the DB some time to start up - might be shorter or longer depending on your hardware. When in doubt, check with docker-compose logs -f db.&#xA;&#xA;sudo docker-compose up fuzzer-dvwa-sqli-low-1 --build --force-recreate&#xA;# Let the fuzzer run for a while and terminate it with ctrl+c&#xA;# View the results with&#xA;less fuzzer/output/fuzzer-1/vulnerable-candidates.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributions &amp;amp; Future Work&lt;/h2&gt; &#xA;&lt;p&gt;We acknowledge that PHUZZ is research-grade code, although we tried to keep it as usable for future work as possible. For that, PHUZZ is divided into several modules/components using object oriented programming. Thus, incremental improvements to different aspects can be made, e.g. mutation, candidate selection, etc.&lt;/p&gt; &#xA;&lt;p&gt;If you have any issues running PHUZZ, encounter bugs or would like to contribute to PHUZZ, please feel free to open issues or propose pull requests!&lt;/p&gt; &#xA;&lt;p&gt;As for future work, the following features would be great to see in PHUZZ:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for more vulnerability classes (e.g. SSRF, header injection, ...)&lt;/li&gt; &#xA; &lt;li&gt;Support for hooking PHP expressions (e.g. eval / include / require / etc.), which is a limitation of UOPZ.&lt;/li&gt; &#xA; &lt;li&gt;Algorithm improvements for mutations, scoring, candidate selection, etc.&lt;/li&gt; &#xA; &lt;li&gt;Performance improvements (e.g. Python processing, Network communication, etc.) for more requests/second&lt;/li&gt; &#xA; &lt;li&gt;Crawler improvements for a more sophisticated interaction with the web application during the crawling process.&lt;/li&gt; &#xA; &lt;li&gt;Better support for dependent (stateful) actions, e.g. as performed by Atropos using snapshotting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Again, feel free to reach out to us if you would like to have a quick chat on how to improve PHUZZ.&lt;/p&gt; &#xA;&lt;h2&gt;CSAW&#39;24 Applied Research Competition Poster&lt;/h2&gt; &#xA;&lt;p&gt;This work has won the CSAW&#39;24 Applied Research Competition.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gehaxelt/phuzz/main/doc/poster/csaw-poster.png&#34; alt=&#34;PHUZZ poster&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[0] &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3634737.3661137&#34;&gt;https://dl.acm.org/doi/10.1145/3634737.3661137&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>