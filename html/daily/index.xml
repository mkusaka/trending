<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-11T01:28:40Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ming1016/SwiftPamphletApp</title>
    <updated>2024-05-11T01:28:40Z</updated>
    <id>tag:github.com,2024-05-11:/ming1016/SwiftPamphletApp</id>
    <link href="https://github.com/ming1016/SwiftPamphletApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;戴铭的开发小册子，一本活的开发手册。使用 SwiftUI + SwiftData + Swift Concurrency Aysnc/Await Actor + GitHub API 开发的 macOS 应用&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;戴铭的开发小册子 6.0&lt;/h1&gt; &#xA;&lt;p&gt;Swift开发的手册，是个 macOS 程序，已上线 App Store &lt;a href=&#34;https://apps.apple.com/cn/app/%E6%88%B4%E9%93%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B0%8F%E5%86%8C%E5%AD%90/id1609702529?mt=12&#34;&gt;点击安装&lt;/a&gt;，后面更新会方便很多。小册子文字版 《&lt;a href=&#34;https://ming1016.github.io/2021/11/23/daiming-swift-pamphlet/&#34;&gt;戴铭的 Swift 小册子&lt;/a&gt;》&lt;/p&gt; &#xA;&lt;p&gt;使用 SwiftData、Observable、NavigationSplitView 重构了戴铭的开发小册子，可自己添加管理资料。&lt;/p&gt; &#xA;&lt;p&gt;本版本解决了以下几个问题。&lt;/p&gt; &#xA;&lt;p&gt;第一个，存储的问题。以前使用的是三方数据库，写法比较繁琐且和 SwiftUI 结合的不好。现在用的是 SwiftData，写法简洁了很多，代码也好维护了。更多技术重构细节可以直接查看代码。&lt;/p&gt; &#xA;&lt;p&gt;第二，手册内容和资料之间的关系。以前比较隔离，资料和手册没有联系。现在采用的是每个知识点都可以添加相关资料，这样更利于知识的积累。&lt;/p&gt; &#xA;&lt;p&gt;第三，Github 库和开发者信息的管理问题。以前添加和删除都在代码层面，现在可以直接在 App 内进行。&lt;/p&gt; &#xA;&lt;p&gt;这三个问题解决后，可以将更多精力花在内容的更新增加以及 App 使用体验上了。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ming1016/SwiftPamphletApp/assets/251980/9514574b-0f20-4ff5-848c-9b5130f03b81&#34; alt=&#34;截屏2024-05-07 18 54 42&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ming1016/SwiftPamphletApp/assets/251980/f748a32d-7f4d-4327-a4b5-97a65ca754ec&#34; alt=&#34;截屏2024-05-07 18 48 33&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ming1016/SwiftPamphletApp/assets/251980/bb147ab7-5cbc-4263-a023-b924054a0f4b&#34; alt=&#34;截屏2024-05-07 18 49 43&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ming1016/SwiftPamphletApp/assets/251980/f590cbe5-8a94-41e3-8260-6492e3acf46e&#34; alt=&#34;截屏2024-05-07 19 06 30&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ming1016/SwiftPamphletApp/assets/251980/89b34786-44b1-4fcd-bdf6-8ad92ea80d4e&#34; alt=&#34;截屏2024-05-07 19 08 18&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>retrage/lkl-js</title>
    <updated>2024-05-11T01:28:40Z</updated>
    <id>tag:github.com,2024-05-11:/retrage/lkl-js</id>
    <link href="https://github.com/retrage/lkl-js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run Linux kernel in your web browser directly&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lkl.js&lt;/h1&gt; &#xA;&lt;p&gt;Run Linux kernel in your browser &lt;em&gt;directly&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repository includes pre-compiled LKL.js files. If you want to build LKL.js on your environment, please read &lt;a href=&#34;https://github.com/retrage/linux/raw/retrage/em-v2/Documentation/lkl-js.txt&#34;&gt;lkl-js.txt&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EtherDream/headphone-morse-transmitter</title>
    <updated>2024-05-11T01:28:40Z</updated>
    <id>tag:github.com,2024-05-11:/EtherDream/headphone-morse-transmitter</id>
    <link href="https://github.com/EtherDream/headphone-morse-transmitter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Send Morse code via ⏸️ ⏯️ ⏮️&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🎧 Morse Transmitter&lt;/h1&gt; &#xA;&lt;p&gt;Many headphones can send commands to its device, such as Airpods, with a single press to pause or resume, double press to play the next track, and triple press to play the previous track.&lt;/p&gt; &#xA;&lt;p&gt;Using this feature, we can use the headphones as a morse transmitter.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://etherdream.github.io/headphone-morse-transmitter/&#34;&gt;https://etherdream.github.io/headphone-morse-transmitter/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/EtherDream/headphone-morse-transmitter/assets/1072787/c5353575-128f-4915-8607-8f1a49d47a5a&#34;&gt;https://github.com/EtherDream/headphone-morse-transmitter/assets/1072787/c5353575-128f-4915-8607-8f1a49d47a5a&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using an Airpod, a single press sends a dit (.) , a double press sends a dah(-), and a triple press deletes the previous character.&lt;/p&gt; &#xA;&lt;p&gt;When the delay time is reached, the dit and dah codes in the input will be converted to a letter or number.&lt;/p&gt; &#xA;&lt;p&gt;Shorter delays allow faster input, but also increase the chance of errors.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Known issues: Firefox seems to have some issues with handling headphone events.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>