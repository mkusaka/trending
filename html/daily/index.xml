<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-05T01:30:40Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yoheinakajima/prettygraph</title>
    <updated>2024-05-05T01:30:40Z</updated>
    <id>tag:github.com,2024-05-05:/yoheinakajima/prettygraph</id>
    <link href="https://github.com/yoheinakajima/prettygraph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An experimental UI for text-to-knowledge-graph generation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;prettygraph&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;prettygraph&lt;/strong&gt; is a Python-based web application developed by &lt;a href=&#34;https://twitter.com/yoheinakajima&#34;&gt;@yoheinakajima&lt;/a&gt; to demonstrate a new UI pattern for text-to-knowledge graph generation. This project is a quick hack and not intended to be a robust framework, but a simple UI idea for dynamically highlighting the text input when generating knowledge graphs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/yoheinakajima/prettygraph/raw/main/prettygraph.jpeg?raw=true&#34; alt=&#34;prettygraph image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The application uses Flask for the backend, rendering templates for the front end, and LiteLLM for generating predictions which transform text inputs into JSON formatted graph data. This data is then visualized using Cytoscape.js. It&#39;s important to note that the graph regenerates on every period insertion with real-time updates in the UI, providing an interactive experience.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Text-to-Graph Generation:&lt;/strong&gt; Converts user input text into a knowledge graph.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic UI Updates:&lt;/strong&gt; Graph updates with each text input that ends with a period.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Color-Coded Visualization:&lt;/strong&gt; Nodes and edges in the graph are color-coded for better visual distinction.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This project uses Poetry for dependency management. To set up the project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/yoheinakajima/prettygraph&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the project directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd prettygraph&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies using Poetry:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the Flask application:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poetry run python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuring Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;To run this application, you need to set up the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable. Create a file named &lt;code&gt;.env&lt;/code&gt; in the root directory of your project and add the following line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;OPENAI_API_KEY=your_openai_api_key_here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once the application is running and the environment variables are set, open your web browser and navigate to &lt;code&gt;http://localhost/&lt;/code&gt;. Input text into the editable text box, and watch as the knowledge graph updates with each sentence termination (period).&lt;/p&gt; &#xA;&lt;h2&gt;Future Improvements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Improved Tracking:&lt;/strong&gt; Enhance the logic for tracking nodes and edges through their flow in the text, moving away from simple keyword matching to a more sophisticated relationship mapping.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Manual Graph Update:&lt;/strong&gt; Introduce a manual update button to generate the graph as needed, reducing computational load and API costs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Loading Animation:&lt;/strong&gt; Add a loading animation during graph generation to improve user experience by indicating processing is underway.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Incremental Graph Building:&lt;/strong&gt; Instead of regenerating the entire graph with each input, modify the existing graph by adding new elements and deduplicating nodes similarly to &lt;a href=&#34;https://github.com/yoheinakajima/mindgraph&#34;&gt;mindgraph&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;While &lt;strong&gt;prettygraph&lt;/strong&gt; is not intended to be maintained as a robust framework, contributions are welcome. Feel free to fork the repository and submit pull requests.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is open-sourced under the MIT License. See the LICENSE file for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;p&gt;For those interested in exploring more about knowledge graphs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yoheinakajima/instagraph&#34;&gt;InstaGraph&lt;/a&gt; - Web-based tool for generating knowledge graphs. Or for a web UI, try out &lt;a href=&#34;https://instagraph.ai&#34;&gt;instagraph.ai&lt;/a&gt; - has knowledge graph generation but not the color coded highlights.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yoheinakajima/mindgraph&#34;&gt;mindgraph&lt;/a&gt; - For generating large knowledge graphs with deduping of nodes using an LLM as new graphs are added.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This is an experimental project and may not handle all edge cases or inputs effectively.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sz-games/sz-games.github.io</title>
    <updated>2024-05-05T01:30:40Z</updated>
    <id>tag:github.com,2024-05-05:/sz-games/sz-games.github.io</id>
    <link href="https://github.com/sz-games/sz-games.github.io" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Best Way To Play Games In School&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sz Games&lt;/h1&gt; &#xA;&lt;p&gt;A Simple Way To Game In School&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MicroStrategy/did-btc-spec</title>
    <updated>2024-05-05T01:30:40Z</updated>
    <id>tag:github.com,2024-05-05:/MicroStrategy/did-btc-spec</id>
    <link href="https://github.com/MicroStrategy/did-btc-spec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;did:btc Method Specification&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;did:btc&lt;/code&gt; Method Specification&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the &lt;code&gt;did:btc&lt;/code&gt; &lt;a href=&#34;https://www.w3.org/TR/did-core/&#34;&gt;Decentralized Identifier&lt;/a&gt; Method Specification.&lt;/p&gt; &#xA;&lt;p&gt;The latest version of the specification can be viewed at &lt;a href=&#34;https://microstrategy.github.io/did-btc-spec/&#34;&gt;https://microstrategy.github.io/did-btc-spec/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Editing the Specification&lt;/h2&gt; &#xA;&lt;p&gt;This specification uses &lt;a href=&#34;https://github.com/w3c/respec/&#34;&gt;ReSpec&lt;/a&gt; html. Just edit &lt;a href=&#34;https://raw.githubusercontent.com/MicroStrategy/did-btc-spec/main/index.html&#34;&gt;index.html&lt;/a&gt; and open it in a browser to render and inspect the latest changes.&lt;/p&gt;</summary>
  </entry>
</feed>