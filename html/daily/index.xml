<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-29T01:24:55Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kbtxwer/IELTS</title>
    <updated>2023-12-29T01:24:55Z</updated>
    <id>tag:github.com,2023-12-29:/kbtxwer/IELTS</id>
    <link href="https://github.com/kbtxwer/IELTS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ÂâëÊ°•ÈõÖÊÄù&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>swisskyrepo/InternalAllTheThings</title>
    <updated>2023-12-29T01:24:55Z</updated>
    <id>tag:github.com,2023-12-29:/swisskyrepo/InternalAllTheThings</id>
    <link href="https://github.com/swisskyrepo/InternalAllTheThings" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Active Directory and Internal Pentest Cheatsheets&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Internal All The Things&lt;/h1&gt; &#xA;&lt;p&gt;Active Directory and Internal Pentest Cheatsheets&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/swisskyrepo/InternalAllTheThings/master/assets/banner.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üìñ Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feel free to update any pages with your knowledge by submitting a Pull Request&lt;/li&gt; &#xA; &lt;li&gt;Content in this repository is provided as is, for learning purpose. The author and contributors take no responsibility if you break something.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üë®‚Äçüíª Contributions&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/swisskyrepo/InternalAllTheThings/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=swisskyrepo/InternalAllTheThings&amp;amp;max=36&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Thanks again for your contribution! &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also share the project : &lt;a href=&#34;https://twitter.com/intent/tweet?text=Internal%20All%20The%20Things,%20a%20list%20of%20useful%20payloads%20and%20bypasses%20for%20Internal%20Security%20Assessments-%20by%20@pentest_swissky&amp;amp;url=https://github.com/swisskyrepo/InternalAllTheThings&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;Tweet&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OpenMDAO/om-Aviary</title>
    <updated>2023-12-29T01:24:55Z</updated>
    <id>tag:github.com,2023-12-29:/OpenMDAO/om-Aviary</id>
    <link href="https://github.com/OpenMDAO/om-Aviary" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Aviary -- NASA&#39;s aircraft design tool&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This repository is an &lt;a href=&#34;https://openmdao.org/&#34;&gt;OpenMDAO&lt;/a&gt;-based aircraft modeling tool that incorporates aircraft sizing and weight equations from its predecessors &lt;a href=&#34;https://ntrs.nasa.gov/api/citations/19810010563/downloads/19810010563.pdf&#34;&gt;GASP (General Aviation Synthesis Program)&lt;/a&gt; and &lt;a href=&#34;https://software.nasa.gov/software/LAR-18934-1&#34;&gt;FLOPS (Flight Optimization System)&lt;/a&gt;. It also incorporates aerodynamic calculations from GASP and FLOPS and has the capability to use an aerodynamics deck as well as an aircraft engine deck. There are two options for the mission analysis portion of this code, a 2 degrees-of-freedom (2DOF) approach, and a height energy (HtEn) approach. The user can select which type of mission analysis to use, as well as whether to use the FLOPS-based code or the GASP-based code for the weight, sizing, and aerodynamic relations.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The simplest installation method for development is an &#34;editable mode&#34; install with &lt;code&gt;pip&lt;/code&gt; in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs the package in the current environment such that changes to the Python code don&#39;t require re-installation.This command should be performed while in the folder containing &lt;code&gt;setup.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The Aviary documentation is located &lt;a href=&#34;https://openmdao.github.io/om-Aviary/intro.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise you can build the docs locally:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install jupyter-book using instructions located &lt;a href=&#34;https://jupyterbook.org/en/stable/start/overview.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to Aviary/aviary/docs&lt;/li&gt; &#xA; &lt;li&gt;Run the command &lt;code&gt;sh build_book.sh&lt;/code&gt; from your command prompt of choice&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the built html: &lt;code&gt;/Aviary/aviary/docs/\_build/html/intro.html&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Visualization&lt;/h2&gt; &#xA;&lt;p&gt;To visualize XDSMs and successfully pass spec tests, all the XDSM files must be run. This can be done using the &lt;code&gt;run_all.py&lt;/code&gt; utility script within the &lt;code&gt;aviary/xdsm&lt;/code&gt; directory. This is a necessary step before unit testing, otherwise unit tests will fail.&lt;/p&gt; &#xA;&lt;h2&gt;Validation&lt;/h2&gt; &#xA;&lt;p&gt;This code has been validated using output and data from the GASP and FLOPS codes themselves. The GASP-based weight calculations in this code include in their comments which versions of the GASP standalone weights module were used in validation. The aero and EOM subsystem validations were based on runs of the entire GASP and FLOPS code as they stood in the summer of 2021 and the summer of 2022 respectively.&lt;/p&gt; &#xA;&lt;h3&gt;Quick testing&lt;/h3&gt; &#xA;&lt;p&gt;The repository installation can be tested using the command &lt;code&gt;testflo .&lt;/code&gt; at the top-level Aviary folder. Assuming you have both SNOPT and IPOPT installed, the output should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    OK&#xA;&#xA;    Passed:  706&#xA;    Failed:  0&#xA;    Skipped: 3&#xA;&#xA;&#xA;    Ran 709 tests using 16 processes&#xA;    Wall clock time:   00:00:16.97&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Full testing&lt;/h3&gt; &#xA;&lt;p&gt;In addition to all of the quicker tests, we include multiple integration tests within Aviary. These have also been known as &#34;benchmarks&#34;. Due to their length, these tests are not run when using the above command. Instead, you can use the &lt;code&gt;run_all_benchmarks.py&lt;/code&gt; file in the &lt;code&gt;Aviary/aviary&lt;/code&gt; folder, which is just a light wrapper around the &lt;code&gt;testflo&lt;/code&gt; call. This will run all of the longer tests in parallel using all of your available CPU cores.&lt;/p&gt; &#xA;&lt;h2&gt;Package Versions&lt;/h2&gt; &#xA;&lt;p&gt;Information on the versions of the packages required for Aviary can be found in the most recent &lt;a href=&#34;https://github.com/OpenMDAO/Aviary/actions&#34;&gt;GitHub Actions runs&lt;/a&gt;. We have also provided a static version of the &lt;code&gt;environment.yml&lt;/code&gt; at the top level of the Aviary repo.&lt;/p&gt;</summary>
  </entry>
</feed>