<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-08T01:29:15Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>okta/okta-sdk-java</title>
    <updated>2023-09-08T01:29:15Z</updated>
    <id>tag:github.com,2023-09-08:/okta/okta-sdk-java</id>
    <link href="https://github.com/okta/okta-sdk-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Java SDK for Okta Resource Management&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://devforum.okta.com/&#34;&gt;&lt;img src=&#34;https://www.okta.com/sites/default/files/Dev_Logo-01_Large-thumbnail.png&#34; align=&#34;right&#34; width=&#34;256px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.okta.sdk%22%20a%3A%22okta-sdk-api%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.okta.sdk/okta-sdk-api.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://devforum.okta.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/support-Developer%20Forum-blue.svg?sanitize=true&#34; alt=&#34;Support&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.okta.com/okta-sdk-java/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-reference-lightgrey.svg?sanitize=true&#34; alt=&#34;API Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Okta Java Management SDK&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#release-status&#34;&gt;Release status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#need-help&#34;&gt;Need help?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#usage-guide&#34;&gt;Usage guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#spring-support&#34;&gt;Spring Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#configuration-reference&#34;&gt;Configuration reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#building-the-sdk&#34;&gt;Building the SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://foojay.io/today/works-with-openjdk&#34;&gt; &lt;img align=&#34;right&#34; src=&#34;https://github.com/foojayio/badges/raw/main/works_with_openjdk/Works-with-OpenJDK.png&#34; width=&#34;100&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;This repository contains the Okta management SDK for Java. This SDK can be used in your server-side code to interact with the Okta management API and:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create and update users with the &lt;a href=&#34;https://developer.okta.com/docs/api/resources/users&#34;&gt;Users API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add security factors to users with the &lt;a href=&#34;https://developer.okta.com/docs/api/resources/factors&#34;&gt;Factors API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manage groups with the &lt;a href=&#34;https://developer.okta.com/docs/api/resources/groups&#34;&gt;Groups API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manage applications with the &lt;a href=&#34;https://developer.okta.com/docs/api/resources/apps&#34;&gt;Apps API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manage logs with the &lt;a href=&#34;https://developer.okta.com/docs/api/resources/system_log&#34;&gt;Logs API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manage sessions with the &lt;a href=&#34;https://developer.okta.com/docs/api/resources/sessions&#34;&gt;Sessions API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manage templates with the &lt;a href=&#34;https://developer.okta.com/docs/reference/api/templates/&#34;&gt;Custom Templates API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manage identity providers with the &lt;a href=&#34;https://developer.okta.com/docs/reference/api/idps/&#34;&gt;Identity Providers API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manage authorization servers with the &lt;a href=&#34;https://developer.okta.com/docs/reference/api/authorization-servers/&#34;&gt;Authorization Servers API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manage event hooks with the &lt;a href=&#34;https://developer.okta.com/docs/reference/api/event-hooks/&#34;&gt;Event Hooks Management API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manage inline hooks with the &lt;a href=&#34;https://developer.okta.com/docs/reference/api/inline-hooks/&#34;&gt;Inline Hooks Management API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Manage features with the &lt;a href=&#34;https://developer.okta.com/docs/reference/api/features/&#34;&gt;Features API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Manage linked objects with the &lt;a href=&#34;https://developer.okta.com/docs/reference/api/linked-objects/&#34;&gt;Linked Objects API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Manage trusted origins with the &lt;a href=&#34;https://developer.okta.com/docs/reference/api/trusted-origins/&#34;&gt;Trusted Origins API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Manage user types with the &lt;a href=&#34;https://developer.okta.com/docs/reference/api/user-types/&#34;&gt;User Types API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Manage custom domains with the &lt;a href=&#34;https://developer.okta.com/docs/reference/api/domains/&#34;&gt;Domains API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Manage network zones with the &lt;a href=&#34;https://developer.okta.com/docs/reference/api/zones/&#34;&gt;Zones API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Much more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also publish these libraries for Java:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/okta/okta-spring-boot/&#34;&gt;Spring Boot Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/okta/okta-jwt-verifier-java&#34;&gt;Okta JWT Verifier for Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/okta/okta-auth-java&#34;&gt;Authentication SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can learn more on the &lt;a href=&#34;https://developer.okta.com/code/java/&#34;&gt;Okta + Java&lt;/a&gt; page in our documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Release status&lt;/h2&gt; &#xA;&lt;p&gt;This library uses semantic versioning and follows Okta&#39;s &lt;a href=&#34;https://developer.okta.com/code/library-versions/&#34;&gt;library version policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;✔&lt;/span&gt; The latest stable major version series is: 13.x.x&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.0.x, 1.x, 2.x.x, 3.x.x, 4.x.x, 5.x.x, 6.x.x, 7.x.x, 8.x.x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;⚠&lt;/span&gt; Retired&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9.x.x-beta, 10.x.x-beta&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;⚠&lt;/span&gt; Beta release (discontinued)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10.x.x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt; Stable (&lt;a href=&#34;https://github.com/okta/okta-sdk-java/raw/master/MIGRATING.md#migrating-from-8xx-to-10xx&#34;&gt;migration guide&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11.x.x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt; Stable (&lt;a href=&#34;https://github.com/okta/okta-sdk-java/raw/master/japicmp-11_0_0_vs_10_3_0.html&#34;&gt;see changes&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12.x.x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt; Stable (&lt;a href=&#34;https://github.com/okta/okta-sdk-java/releases/tag/okta-sdk-root-12.0.0&#34;&gt;see changes&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13.x.x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt; Stable (&lt;a href=&#34;https://github.com/okta/okta-sdk-java/releases/tag/okta-sdk-root-13.0.0&#34;&gt;see changes&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The latest release can always be found on the &lt;a href=&#34;https://github.com/okta/okta-sdk-java/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;p&gt;If you run into problems using the SDK, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ask questions on the &lt;a href=&#34;https://devforum.okta.com/&#34;&gt;Okta Developer Forums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Post &lt;a href=&#34;https://github.com/okta/okta-sdk-java/issues&#34;&gt;issues&lt;/a&gt; here on GitHub (for code errors)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 8 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use this SDK, you will need to include the following dependencies:&lt;/p&gt; &#xA;&lt;p&gt;For Apache Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.okta.sdk&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;okta-sdk-api&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${okta.sdk.version}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.okta.sdk&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;okta-sdk-impl&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${okta.sdk.version}&amp;lt;/version&amp;gt;&#xA;    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;compile &#34;com.okta.sdk:okta-sdk-api:${okta.sdk.version}&#34;&#xA;runtime &#34;com.okta.sdk:okta-sdk-impl:${okta.sdk.version}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where ${okta.sdk.version} is the latest published version in &lt;a href=&#34;https://search.maven.org/search?q=g:com.okta.sdk%20a:okta-sdk-api&#34;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SNAPSHOT Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Snapshots are deployed off of the &#39;master&#39; branch to &lt;a href=&#34;https://oss.sonatype.org/&#34;&gt;OSSRH&lt;/a&gt; and can be consumed using the following repository configured for Apache Maven or Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;https://oss.sonatype.org/content/repositories/snapshots/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An Okta account, called an &lt;em&gt;organization&lt;/em&gt; (sign up for a free &lt;a href=&#34;https://developer.okta.com/signup&#34;&gt;developer organization&lt;/a&gt; if you need one)&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://developer.okta.com/docs/api/getting_started/getting_a_token&#34;&gt;API token&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Construct a client instance by passing it your Okta domain name and API token:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ApiClient client = Clients.builder()&#xA;    .setOrgUrl(&#34;https://{yourOktaDomain}&#34;)  // e.g. https://dev-123456.okta.com&#xA;    .setClientCredentials(new TokenClientCredentials(&#34;{apiToken}&#34;))&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hard-coding the Okta domain and API token works for quick tests, but for real projects you should use a more secure way of storing these values (such as environment variables). This library supports a few different configuration sources, covered in the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#configuration-reference&#34;&gt;configuration reference&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;OAuth 2.0&lt;/h2&gt; &#xA;&lt;p&gt;Okta allows you to interact with Okta APIs using scoped OAuth 2.0 access tokens. Each access token enables the bearer to perform specific actions on specific Okta endpoints, with that ability controlled by which scopes the access token contains.&lt;/p&gt; &#xA;&lt;p&gt;This SDK supports this feature only for service-to-service applications. Check out &lt;a href=&#34;https://developer.okta.com/docs/guides/implement-oauth-for-okta-serviceapp/overview/&#34;&gt;our guides&lt;/a&gt; to learn more about how to register a new service application using a private and public key pair.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://developer.okta.com/docs/guides/implement-oauth-for-okta-serviceapp/main/#generate-the-jwk-using-the-admin-console&#34;&gt;our guide&lt;/a&gt; to learn how to generate a JWK and convert the same to PEM format which would be used as PrivateKey in &lt;code&gt;Client&lt;/code&gt; creation.&lt;/p&gt; &#xA;&lt;p&gt;When using this approach, you will not need an API Token because the SDK will request an access token for you. In order to use OAuth 2.0, construct a client instance by passing the following parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ApiClient client = Clients.builder()&#xA;    .setOrgUrl(&#34;https://{yourOktaDomain}&#34;)  // e.g. https://dev-123456.okta.com&#xA;    .setAuthorizationMode(AuthorizationMode.PRIVATE_KEY)&#xA;    .setClientId(&#34;{clientId}&#34;)&#xA;    .setKid(&#34;{kid}&#34;) // optional&#xA;    .setScopes(new HashSet&amp;lt;&amp;gt;(Arrays.asList(&#34;okta.users.manage&#34;, &#34;okta.apps.manage&#34;, &#34;okta.groups.manage&#34;)))&#xA;    .setPrivateKey(&#34;/path/to/yourPrivateKey.pem&#34;)&#xA;    // (or) .setPrivateKey(&#34;full PEM payload&#34;)&#xA;    // (or) .setPrivateKey(Paths.get(&#34;/path/to/yourPrivateKey.pem&#34;))&#xA;    // (or) .setPrivateKey(inputStream)&#xA;    // (or) .setPrivateKey(privateKey)&#xA;    // (or) .setOAuth2AccessToken(&#34;access token string&#34;) // if set, private key (if supplied) will be ignored&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage guide&lt;/h2&gt; &#xA;&lt;p&gt;These examples will help you understand how to use this library. You can also browse the full &lt;a href=&#34;https://developer.okta.com/okta-sdk-java/&#34;&gt;API reference documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you initialize a &lt;code&gt;ApiClient&lt;/code&gt; instance, you can pass this instance to the constructor of any API area clients (such as &lt;code&gt;UserApi&lt;/code&gt;, &lt;code&gt;GroupApi&lt;/code&gt;, &lt;code&gt;ApplicationApi&lt;/code&gt; etc.). You can start using these clients to call management APIs relevant to the chosen API area.&lt;/p&gt; &#xA;&lt;p&gt;Note: For creation (HTTP POST or PUT operation) of models that follow inheritance (e.g. Application, Policy | PolicyRule, UserFactor), use the APIs found in their respective &lt;code&gt;ApiHelper&lt;/code&gt; class (e.g. &lt;code&gt;ApplicationApiHelper&lt;/code&gt;, &lt;code&gt;PolicyApiHelper&lt;/code&gt;, &lt;code&gt;UserFactorApiHelper&lt;/code&gt;) to ensure safe type cast to their respective subclass types.&lt;/p&gt; &#xA;&lt;h3&gt;Authenticate a User&lt;/h3&gt; &#xA;&lt;p&gt;This library should be used with the Okta management API. For authentication, we recommend using an OAuth 2.0 or OpenID Connect library such as &lt;a href=&#34;https://spring.io/projects/spring-security-oauth&#34;&gt;Spring Security OAuth&lt;/a&gt; or &lt;a href=&#34;https://github.com/okta/okta-spring-boot&#34;&gt;Okta&#39;s Spring Boot integration&lt;/a&gt;. For &lt;a href=&#34;https://developer.okta.com/docs/api/resources/authn&#34;&gt;Okta Authentication API&lt;/a&gt; you can use &lt;a href=&#34;https://github.com/okta/okta-auth-java&#34;&gt;Authentication SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Get a User&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserApi userApi = new UserApi(client);&#xA;User user = userApi.getUser(&#34;userId&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List all Users&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserApi userApi = new UserApi(client);&#xA;List&amp;lt;User&amp;gt; users = userApi.listUsers(null, null, 5, null, null, null, null);&#xA;&#xA;// stream&#xA;users.stream()&#xA;    .forEach(user -&amp;gt; {&#xA;      // do something&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more examples of handling collections see the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#pagination&#34;&gt;pagination&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;h3&gt;Filter or search for Users&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserApi userApi = new UserApi(client);&#xA;&#xA;// search by email&#xA;List&amp;lt;User&amp;gt; users = userApi.listUsers(null, null, 5, null, &#34;profile.email eq \&#34;jcoder@example.com\&#34;&#34;, null, null);&#xA;&#xA;// filter parameter&#xA;userApi.listUsers(null, null, null, &#34;status eq \&#34;ACTIVE\&#34;&#34;,null, null, null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a User&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserApi userApi = new UserApi(client);&#xA;User user = UserBuilder.instance()&#xA;    .setEmail(&#34;joe.coder@example.com&#34;)&#xA;    .setFirstName(&#34;Joe&#34;)&#xA;    .setLastName(&#34;Code&#34;)&#xA;    .buildAndCreate(userApi);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a User with Group(s)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserApi userApi = new UserApi(client);&#xA;User user = UserBuilder.instance()&#xA;    .setEmail(&#34;joe.coder@example.com&#34;)&#xA;    .setFirstName(&#34;Joe&#34;)&#xA;    .setLastName(&#34;Code&#34;)&#xA;    .setGroups(Arrays.asList(&#34;groupId-1&#34;, &#34;groupId-2&#34;))&#xA;    .buildAndCreate(userApi);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update a User&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserApi userApi = new UserApi(client);&#xA;UpdateUserRequest updateUserRequest = new UpdateUserRequest();&#xA;UserProfile userProfile = new UserProfile();&#xA;userProfile.setNickName(&#34;Batman&#34;);&#xA;updateUserRequest.setProfile(userProfile);&#xA;userApi.updateUser(user.getId(), updateUserRequest, true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get and set custom attributes&lt;/h3&gt; &#xA;&lt;p&gt;Custom user profile attributes can be added with code like below, but the respective property must first be associated to the User schema. You can use the Profile Editor in your Org Administrator UI (Developer Console) or the Schemas API to manage schema extensions.&lt;/p&gt; &#xA;&lt;p&gt;Once you have created the custom attributes via UI, you can use the code below to get and set values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserApi userApi = new UserApi(client);&#xA;UpdateUserRequest updateUserRequest = new UpdateUserRequest();&#xA;UserProfile userProfile = new UserProfile();&#xA;userProfile.getAdditionalProperties().put(&#34;foo&#34;, &#34;bar&#34;);&#xA;updateUserRequest.setProfile(userProfile);&#xA;userApi.updateUser(user.getId(), updateUserRequest, true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remove a User&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserApi userApi = new UserApi(client);&#xA;&#xA;// deactivate first&#xA;userApi.deactivateUser(user.getId(), false);&#xA;&#xA;// then delete&#xA;userApi.deleteUser(user.getId(), false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List Groups&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GroupApi groupApi = new GroupApi(client);&#xA;List&amp;lt;Group&amp;gt; groups = groupApi.listGroups(null, null, null, 10, null, null, null, null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a Group&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GroupApi groupApi = new GroupApi(client);&#xA;Group group = GroupBuilder.instance()&#xA;    .setName(&#34;a-group-name&#34;)&#xA;    .setDescription(&#34;Example Group&#34;)&#xA;    .buildAndCreate(groupApi);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add a User to a Group&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// create user&#xA;UserApi userApi = new UserApi(client);&#xA;User user = UserBuilder.instance()&#xA;    .setEmail(&#34;joe.coder@example.com&#34;)&#xA;    .setFirstName(&#34;Joe&#34;)&#xA;    .setLastName(&#34;Code&#34;)&#xA;    .buildAndCreate(userApi);&#xA;&#xA;// create group&#xA;GroupApi groupApi = new GroupApi(client);&#xA;Group group = GroupBuilder.instance()&#xA;    .setName(&#34;a-group-name&#34;)&#xA;    .setDescription(&#34;Example Group&#34;)&#xA;    .buildAndCreate(groupApi);&#xA;&#xA;// assign user to group&#xA;groupApi.assignUserToGroup(group.getId(), user.getId());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List a User&#39;s enrolled Factors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserFactorApi userFactorApi = new UserFactorApi(client);&#xA;List&amp;lt;UserFactor&amp;gt; userFactors = userFactorApi.listFactors(&#34;userId&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get a User Factor&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserFactorApi userFactorApi = new UserFactorApi(client);&#xA;UserFactor userFactor = userFactorApi.getFactor(&#34;userId&#34;, &#34;factorId&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enroll a User in a new Factor&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserFactorApiHelper&amp;lt;UserFactor&amp;gt; userFactorApiHelper = new UserFactorApiHelper&amp;lt;&amp;gt;(new UserFactorApi(client));&#xA;SmsUserFactorProfile smsUserFactorProfile = new SmsUserFactorProfile();&#xA;smsUserFactorProfile.setPhoneNumber(&#34;555 867 5309&#34;);&#xA;SmsUserFactor smsUserFactor = new SmsUserFactor();&#xA;smsUserFactor.setProvider(FactorProvider.OKTA);&#xA;smsUserFactor.setFactorType(FactorType.SMS);&#xA;smsUserFactor.setProfile(smsUserFactorProfile);&#xA;userFactorApiHelper.enrollFactorOfType(SmsUserFactor.class, &#34;userId&#34;, smsUserFactor, true, &#34;templateId&#34;, 30, true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Activate a Factor&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserFactorApiHelper&amp;lt;UserFactor&amp;gt; userFactorApiHelper = new UserFactorApiHelper&amp;lt;&amp;gt;(new UserFactorApi(client));&#xA;CallUserFactor userFactor = (CallUserFactor) userFactorApiHelper.getFactor(&#34;userId&#34;, &#34;factorId&#34;);&#xA;ActivateFactorRequest activateFactorRequest = new ActivateFactorRequest();&#xA;activateFactorRequest.setPassCode(&#34;123456&#34;);&#xA;userFactorApiHelper.activateFactorOfType(CallUserFactor.class, &#34;userId&#34;, &#34;factorId&#34;, activateFactorRequest);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verify a Factor&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserFactorApiHelper&amp;lt;UserFactor&amp;gt; userFactorApiHelper = new UserFactorApiHelper&amp;lt;&amp;gt;(new UserFactorApi(client));&#xA;UserFactor userFactor = userFactorApiHelper.getFactor( &#34;userId&#34;, &#34;factorId&#34;);&#xA;VerifyFactorRequest verifyFactorRequest = new VerifyFactorRequest();&#xA;verifyFactorRequest.setPassCode(&#34;123456&#34;);&#xA;VerifyUserFactorResponse verifyUserFactorResponse =&#xA;    userFactorApiHelper.verifyFactor(&#34;userId&#34;, &#34;factorId&#34;, &#34;templateId&#34;, 10, &#34;xForwardedFor&#34;, &#34;userAgent&#34;, &#34;acceptLanguage&#34;, verifyFactorRequest);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a SWA Application&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ApplicationApiHelper&amp;lt;Application&amp;gt; applicationApiHelper = new ApplicationApiHelper&amp;lt;&amp;gt;(new ApplicationApi(client));&#xA;SwaApplicationSettingsApplication swaApplicationSettingsApplication = new SwaApplicationSettingsApplication();&#xA;swaApplicationSettingsApplication.buttonField(&#34;btn-login&#34;)&#xA;    .passwordField(&#34;txtbox-password&#34;)&#xA;    .usernameField(&#34;txtbox-username&#34;)&#xA;    .url(&#34;https://example.com/login.html&#34;);&#xA;SwaApplicationSettings swaApplicationSettings = new SwaApplicationSettings();&#xA;swaApplicationSettings.app(swaApplicationSettingsApplication);&#xA;BrowserPluginApplication browserPluginApplication = new BrowserPluginApplication();&#xA;browserPluginApplication.name(&#34;template_swa&#34;);&#xA;browserPluginApplication.label(&#34;Sample Plugin App&#34;);&#xA;browserPluginApplication.settings(swaApplicationSettings);&#xA;&#xA;// create BrowserPluginApplication app type&#xA;BrowserPluginApplication createdApp =&#xA;    applicationApiHelper.createApplicationOfType(BrowserPluginApplication.class, browserPluginApplication, true, null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get an Application&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ApplicationApi applicationApi = new ApplicationApi(client);&#xA;BookmarkApplication bookmarkApp = (BookmarkApplication) applicationApi.getApplication(&#34;bookmark-app-id&#34;, null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List all Applications&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ApplicationApi applicationApi = new ApplicationApi(client);&#xA;List&amp;lt;Application&amp;gt; applications = applicationApi.listApplications(null, null, null, null, null, true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get a Policy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PolicyApi policyApi = new PolicyApi(client);&#xA;MultifactorEnrollmentPolicy mfaPolicy =&#xA;    (MultifactorEnrollmentPolicy) policyApi.getPolicy(&#34;mfa-policy-id&#34;, null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List Policies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PolicyApi policyApi = new PolicyApi(client);&#xA;List&amp;lt;Policy&amp;gt; policies = policyApi.listPolicies(PolicyType.PASSWORD.name(), LifecycleStatus.ACTIVE.name(), null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List System Logs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SystemLogApi systemLogApi = new SystemLogApi(client);&#xA;&#xA;// use a filter (start date, end date, filter, or query, sort order) all options are nullable&#xA;List&amp;lt;LogEvent&amp;gt; logEvents =&#xA;    systemLogApi.listLogEvents(null, null, null, &#34;interestingURI.com&#34;, 100, &#34;ASCENDING&#34;, null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Call other API endpoints&lt;/h3&gt; &#xA;&lt;p&gt;Not every API endpoint is represented by a method in this library. You can call any Okta management API endpoint using this generic syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ApiClient apiClient = buildApiClient(&#34;orgBaseUrl&#34;, &#34;apiKey&#34;);&#xA;&#xA;// Create a BookmarkApplication&#xA;BookmarkApplication bookmarkApplication = new BookmarkApplication();&#xA;bookmarkApplication.setName(&#34;bookmark&#34;);&#xA;bookmarkApplication.setLabel(&#34;Sample Bookmark App&#34;);&#xA;bookmarkApplication.setSignOnMode(ApplicationSignOnMode.BOOKMARK);&#xA;BookmarkApplicationSettings bookmarkApplicationSettings = new BookmarkApplicationSettings();&#xA;BookmarkApplicationSettingsApplication bookmarkApplicationSettingsApplication =&#xA;    new BookmarkApplicationSettingsApplication();&#xA;bookmarkApplicationSettingsApplication.setUrl(&#34;https://example.com/bookmark.htm&#34;);&#xA;bookmarkApplicationSettingsApplication.setRequestIntegration(false);&#xA;bookmarkApplicationSettings.setApp(bookmarkApplicationSettingsApplication);&#xA;bookmarkApplication.setSettings(bookmarkApplicationSettings);&#xA;StringJoiner localVarQueryStringJoiner = new StringJoiner(&#34;&amp;amp;&#34;);&#xA;List&amp;lt;Pair&amp;gt; localVarQueryParams = new ArrayList&amp;lt;&amp;gt;();&#xA;List&amp;lt;Pair&amp;gt; localVarCollectionQueryParams = new ArrayList&amp;lt;&amp;gt;();&#xA;Map&amp;lt;String, String&amp;gt; localVarHeaderParams = new HashMap&amp;lt;&amp;gt;();&#xA;Map&amp;lt;String, String&amp;gt; localVarCookieParams = new HashMap&amp;lt;&amp;gt;();&#xA;Map&amp;lt;String, Object&amp;gt; localVarFormParams = new HashMap&amp;lt;&amp;gt;();&#xA;BookmarkApplication createdApp = apiClient.invokeAPI(&#xA;    &#34;/api/v1/apps&#34;,   // path&#xA;    HttpMethod.POST.name(),   // http method&#xA;    localVarQueryParams,   // query params&#xA;    localVarCollectionQueryParams, // collection query params&#xA;    localVarQueryStringJoiner.toString(),&#xA;    bookmarkApplication,   // request body&#xA;    localVarHeaderParams,   // header params&#xA;    localVarCookieParams,   // cookie params&#xA;    localVarFormParams,   // form params&#xA;    MediaType.APPLICATION_JSON_VALUE,   // accept&#xA;    MediaType.APPLICATION_JSON_VALUE,   // content type&#xA;    new String[]{ &#34;apiToken&#34;, &#34;oauth2&#34; },   // auth names&#xA;    new TypeReference&amp;lt;BookmarkApplication&amp;gt;() { }  // return type&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pagination&lt;/h3&gt; &#xA;&lt;p&gt;Pagination info would be available via &lt;code&gt;PagedList&lt;/code&gt; when the API response is a collection of models.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;UserApi userApi = new UserApi(client);&#xA;&#xA;// max number of items per page&#xA;int pageSize = 10;&#xA;PagedList&amp;lt;User&amp;gt; pagedUserList = new PagedList&amp;lt;&amp;gt;();&#xA;do {&#xA;    pagedUserList = (PagedList&amp;lt;User&amp;gt;)&#xA;        userApi.listUsers(null, pagedUserList.getAfter(), pageSize, null, null, null, null);&#xA;&#xA;    pagedUserList.forEach(usr -&amp;gt; log.info(&#34;User: {}&#34;, usr.getProfile().getEmail()));&#xA;} while (pagedUserList.hasMoreItems());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Thread Safety&lt;/h3&gt; &#xA;&lt;p&gt;Every instance of the SDK &lt;code&gt;Client&lt;/code&gt; is thread-safe. You &lt;strong&gt;should&lt;/strong&gt; use the same instance throughout the entire lifecycle of your application. Each instance has its own Connection pool and Caching resources that are automatically released when the instance is garbage collected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;spring-support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inject the Okta Java SDK in Spring&lt;/h2&gt; &#xA;&lt;p&gt;To integrate the Okta Java SDK into your Spring Boot application you just need to add a dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.okta.spring&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;okta-spring-sdk&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${okta.spring.version}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then define the following properties:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;okta.client.orgUrl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Your Okta Url: &lt;code&gt;https://{yourOktaDomain}&lt;/code&gt;, i.e. &lt;code&gt;https://dev-123456.okta.com&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;okta.client.token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An Okta API token, see &lt;a href=&#34;https://developer.okta.com/docs/api/getting_started/getting_a_token&#34;&gt;creating an API token&lt;/a&gt; for more info.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The configuration techniques described in the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#configuration-reference&#34;&gt;configuration reference&lt;/a&gt; section will work as well.&lt;/p&gt; &#xA;&lt;p&gt;All that is left is to inject the client (&lt;code&gt;com.okta.sdk.client.Client&lt;/code&gt;)! Take a look at &lt;a href=&#34;https://spring.io/blog/2007/07/11/setter-injection-versus-constructor-injection-and-the-use-of-required/&#34;&gt;this post&lt;/a&gt; for more info on the best way to inject your beans.&lt;/p&gt; &#xA;&lt;p&gt;For more information check out the &lt;a href=&#34;https://github.com/okta/okta-spring-boot/&#34;&gt;Okta Spring Boot Starter&lt;/a&gt; project!&lt;/p&gt; &#xA;&lt;h2&gt;Configuration reference&lt;/h2&gt; &#xA;&lt;p&gt;This library looks for configuration in the following sources:&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;An &lt;code&gt;okta.yaml&lt;/code&gt; at the root of the applications classpath&lt;/li&gt; &#xA; &lt;li&gt;An &lt;code&gt;okta.yaml&lt;/code&gt; file in a &lt;code&gt;.okta&lt;/code&gt; folder in the current user&#39;s home directory (&lt;code&gt;~/.okta/okta.yaml&lt;/code&gt; or &lt;code&gt;%userprofile%\.okta\okta.yaml&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Environment variables&lt;/li&gt; &#xA; &lt;li&gt;Java System Properties&lt;/li&gt; &#xA; &lt;li&gt;Configuration explicitly set programmatically (see the example in &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Higher numbers win. In other words, configuration passed via the constructor will override configuration found in environment variables, which will override configuration in &lt;code&gt;okta.yaml&lt;/code&gt; (if any), and so on.&lt;/p&gt; &#xA;&lt;h3&gt;YAML configuration&lt;/h3&gt; &#xA;&lt;p&gt;The full YAML configuration looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;okta:&#xA;  client:&#xA;    connectionTimeout: 30 # seconds&#xA;    orgUrl: &#34;https://{yourOktaDomain}&#34; # i.e. https://dev-123456.okta.com&#xA;    proxy:&#xA;      port: null&#xA;      host: null&#xA;      username: null&#xA;      password: null&#xA;    token: yourApiToken&#xA;    requestTimeout: 0 # seconds&#xA;    rateLimit:&#xA;      maxRetries: 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;Each one of the configuration values above can be turned into an environment variable name with the &lt;code&gt;_&lt;/code&gt; (underscore) character:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OKTA_CLIENT_CONNECTIONTIMEOUT&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OKTA_CLIENT_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;and so on&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;System properties&lt;/h3&gt; &#xA;&lt;p&gt;Each one of the configuration values written in &#39;dot&#39; notation to be used as a Java system property:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;okta.client.connectionTimeout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;okta.client.token&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;and so on&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Connection Retry&lt;/h2&gt; &#xA;&lt;p&gt;By default, this SDK will &lt;strong&gt;retry&lt;/strong&gt; requests that return with response code &lt;code&gt;503&lt;/code&gt;, &lt;code&gt;504&lt;/code&gt;, &lt;code&gt;429&lt;/code&gt;(caused by rate limiting), or socket/connection exceptions.&lt;/p&gt; &#xA;&lt;p&gt;Default configuration tells SDK to retry requests up to 4 times without time limitation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;okta.client.requestTimeout = 0 //Sets the maximum number of seconds to wait when retrying before giving up.&#xA;okta.client.rateLimit.maxRetries = 4 //Sets the maximum number of attempts to retrying before giving up.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For interactive clients (i.e. web pages) it is optimal to set &lt;code&gt;requestTimeout&lt;/code&gt; to be 10 sec (or less, based on your needs), and the &lt;code&gt;maxRetries&lt;/code&gt; attempts to be 0. This means the requests will retry as many times as possible within 10 seconds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;okta.client.requestTimeout = 10&#xA;okta.client.rateLimit.maxRetries = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(or)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.okta.sdk.client.Client;&#xA;import com.okta.sdk.client.Clients;&#xA;&#xA;Client client = Clients.builder()&#xA;                .setRetryMaxElapsed(10)&#xA;                .setRetryMaxAttempts(0)&#xA;                .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For batch/non-interactive processes optimal values are opposite. It is optimal to set &lt;code&gt;requestTimeout&lt;/code&gt; to be 0, and the &lt;code&gt;maxRetries&lt;/code&gt; attempts to be 5. The SDK will retry requests up to 5 times before failing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;okta.client.requestTimeout = 0&#xA;okta.client.rateLimit.maxRetries = 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to limit execution time and retry attempts, you can set both &lt;code&gt;requestTimeout&lt;/code&gt; and the &lt;code&gt;maxRetries&lt;/code&gt;. For example, the following example would retry up to 15 times within 30 seconds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;okta.client.requestTimeout = 30&#xA;okta.client.rateLimit.maxRetries = 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable the retry functionality you need to set &lt;code&gt;maxRetries&lt;/code&gt; to zero:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;okta.client.rateLimit.maxRetries = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caching&lt;/h2&gt; &#xA;&lt;p&gt;By default, a simple production-grade in-memory CacheManager will be enabled when the Client instance is created. This CacheManager implementation has the following characteristics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It assumes a default time-to-live and time-to-idle of 1 hour for all cache entries.&lt;/li&gt; &#xA; &lt;li&gt;It auto-sizes itself based on your application&#39;s memory usage. It will not cause OutOfMemoryExceptions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;The default cache manager is not suitable for an application deployed across multiple JVMs.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is because the default implementation is 100% in-memory (in-process) in the current JVM. If more than one JVM is deployed with the same application codebase - for example, a web application deployed on multiple identical hosts for scaling or high availability - each JVM would have it&#39;s own in-memory cache.&lt;/p&gt; &#xA;&lt;p&gt;As a result, if your application that uses an Okta Client instance is deployed across multiple JVMs, you SHOULD ensure that the Client is configured with a CacheManager implementation that uses coherent and clustered/distributed memory.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://developer.okta.com/okta-sdk-java/apidocs/com/okta/sdk/client/ClientBuilder&#34;&gt;&lt;code&gt;ClientBuilder&lt;/code&gt; Javadoc&lt;/a&gt; for more details on caching.&lt;/p&gt; &#xA;&lt;h3&gt;Caching for applications deployed on a single JVM&lt;/h3&gt; &#xA;&lt;p&gt;If your application is deployed on a single JVM and you still want to use the default CacheManager implementation, but the default cache configuration does not meet your needs, you can specify a different configuration. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Caches.newCacheManager()&#xA;    .withDefaultTimeToLive(300, TimeUnit.SECONDS) // default&#xA;    .withDefaultTimeToIdle(300, TimeUnit.SECONDS) //general default&#xA;    .withCache(forResource(User.class) //User-specific cache settings&#xA;        .withTimeToLive(1, TimeUnit.HOURS)&#xA;        .withTimeToIdle(30, TimeUnit.MINUTES))&#xA;    .withCache(forResource(Group.class) //Group-specific cache settings&#xA;        .withTimeToLive(1, TimeUnit.HOURS))&#xA;    //... etc ...&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disable Caching&lt;/h3&gt; &#xA;&lt;p&gt;While production applications will usually enable a working CacheManager as described above, you might wish to disable caching entirely. You can do this by configuring a disabled CacheManager instance. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ApiClient client = Clients.builder()&#xA;    .setCacheManager(Caches.newDisabledCacheManager())&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the SDK&lt;/h2&gt; &#xA;&lt;p&gt;In most cases, you won&#39;t need to build the SDK from source. If you want to build it yourself, take a look at the &lt;a href=&#34;https://github.com/okta/okta-sdk-java/wiki/Build-It&#34;&gt;build instructions wiki&lt;/a&gt; (though just cloning the repo and running &lt;code&gt;mvn install&lt;/code&gt; should get you going).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are happy to accept contributions and PRs! Please see the &lt;a href=&#34;https://raw.githubusercontent.com/okta/okta-sdk-java/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; to understand how to structure a contribution.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hammadojh/Web-Dev-Course</title>
    <updated>2023-09-08T01:29:15Z</updated>
    <id>tag:github.com,2023-09-08:/hammadojh/Web-Dev-Course</id>
    <link href="https://github.com/hammadojh/Web-Dev-Course" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Contains the course files and exercises&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/hammadojh/Web-Dev-Course/assets/10475021/8254d96d-27aa-4af0-ae2e-924f9c801acb&#34; alt=&#34;hammadojh_a_saudi_software_designer_and_developer_with_creative_11b15e45-0f15-4a08-a928-4522cb4a8324 copy&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Web Engineering and Develoment Course&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the Web Engineering and Development Course.&lt;/p&gt; &#xA;&lt;h2&gt;The course &amp;amp; Instructor&lt;/h2&gt; &#xA;&lt;p&gt;This course introduces the basics of Web development and engineering. It will be offered by Dr. Omar Hammad in King Fahd University of Petroleum and Minerals for ICS/SWE junior students in Fall 2023.&lt;/p&gt; &#xA;&lt;h2&gt;The lecture videos&lt;/h2&gt; &#xA;&lt;p&gt;The lecture videos are available in this youtube channel &amp;lt;ADD_CHANNEL&amp;gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents of the repository&lt;/h2&gt; &#xA;&lt;p&gt;This repostory contains all of the supporting material that the instructor refer to in the course lectures. They include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exercise files&lt;/li&gt; &#xA; &lt;li&gt;Links to articles&lt;/li&gt; &#xA; &lt;li&gt;PDF Handouts&lt;/li&gt; &#xA; &lt;li&gt;... more will be added&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;The following resources are used to prepare the lectures&lt;/p&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Internet-World-Program-Harvey-Deitel/dp/0273764020/ref=sr_1_3?keywords=internet+and+world+wide+web+how+to+program&amp;amp;qid=1693896711&amp;amp;s=books&amp;amp;sprefix=internet+and+world+%2Cstripbooks%2C316&amp;amp;sr=1-3&amp;amp;ufe=app_do%3Aamzn1.fos.f5122f16-c3e8-4386-bf32-63e904010ad0&#34;&gt;Internet &amp;amp; World Wide Web How to Program&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Fundamentals-Web-Development-Randy-Connolly/dp/0134481267/ref=pd_lpo_sccl_1/137-7326209-2451811?pd_rd_w=U97Vh&amp;amp;content-id=amzn1.sym.116f529c-aa4d-4763-b2b6-4d614ec7dc00&amp;amp;pf_rd_p=116f529c-aa4d-4763-b2b6-4d614ec7dc00&amp;amp;pf_rd_r=39N2E1FX3JRDHFB2Q5R4&amp;amp;pd_rd_wg=dGM3f&amp;amp;pd_rd_r=2f7bffbd-fdc3-4262-9702-317d22d66fa2&amp;amp;pd_rd_i=0134481267&amp;amp;psc=1&#34;&gt;Fundamentals of Web Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/HTML-CSS-Design-Build-Websites/dp/1118008189/ref=sr_1_1?keywords=html+and+css+design+and+build+websites&amp;amp;qid=1693896738&amp;amp;s=books&amp;amp;sprefix=html+%26+css+de%2Cstripbooks%2C242&amp;amp;sr=1-1&#34;&gt;HTML &amp;amp; CSS: Design &amp;amp; Build websites&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Websites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/&#34;&gt;MDN Web Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/&#34;&gt;W3Schools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codecademy.com/resources/docs&#34;&gt;CodeCademy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions?&lt;/h2&gt; &#xA;&lt;p&gt;send them to &lt;a href=&#34;mailto:omarjh@kfupm.edu.sa&#34;&gt;omarjh@kfupm.edu.sa&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Lectures Contents&lt;/h1&gt; &#xA;&lt;h2&gt;Lecture 1: Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Motivating the learner and Introduing some course policies.&lt;/p&gt; &#xA;&lt;h3&gt;Links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.midjourney.com/home/?callbackUrl=%2Fapp%2F&#34;&gt;Midjourney: The tool I use to show off&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hammadojh/Web-Dev-Course/main/www.codecademy.com&#34;&gt;Can ChatGPT Teach Me How To Code Better Than Courses?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Class Activities&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Group discussion&lt;/li&gt; &#xA; &lt;li&gt;Live poll&lt;/li&gt; &#xA; &lt;li&gt;Read &amp;amp; Ask&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lecture 2: Internet Basics for Web Dev&lt;/h2&gt; &#xA;&lt;p&gt;History and concepts about the web &amp;amp; internet&lt;/p&gt; &#xA;&lt;h3&gt;Links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webfoundation.org/about/vision/history-of-the-web&#34;&gt;The story of Tim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.britannica.com/biography/Tim-Berners-Lee&#34;&gt;Knighted in 2004&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://home.web.cern.ch/&#34;&gt;CERN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.xml.com/pub/a/w3j/s3.connolly.html&#34;&gt;XML came after HTML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Markup_language&#34;&gt;What is a markup language&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nngroup.com/articles/hypertext-history/&#34;&gt;Hypertext history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.w3.org/History/1989/proposal.html&#34;&gt;The proposal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pewresearch.org/internet/2014/03/11/world-wide-web-timeline/&#34;&gt;Pow research&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://info.cern.ch&#34;&gt;the first website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computerhistory.org/internethistory/&#34;&gt;History of the internet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Class Activities&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setup Github&lt;/li&gt; &#xA; &lt;li&gt;Research &amp;amp; Present&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lecture 3: HTML (Part 1)&lt;/h2&gt; &#xA;&lt;p&gt;Basics of HTML&lt;/p&gt; &#xA;&lt;h3&gt;Reading Material&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chapter 2 of Internet &amp;amp; World Wide Web&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/&#34;&gt;Moziila Developer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codecademy.com/article/francineblanc/how-to-use-git-for-beginners&#34;&gt;Basics of git &amp;amp; github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=i_23KUAEtUM&#34;&gt;Using Git with VSCode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Class Activities&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build your own website&lt;/li&gt; &#xA; &lt;li&gt;Push it to github&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>