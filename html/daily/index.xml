<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-17T01:29:23Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pytorch/kineto</title>
    <updated>2024-05-17T01:29:23Z</updated>
    <id>tag:github.com,2024-05-17:/pytorch/kineto</id>
    <link href="https://github.com/pytorch/kineto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CPU+GPU Profiling library that provides access to timeline traces and hardware performance counters.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kineto&lt;/h1&gt; &#xA;&lt;p&gt;Kineto is part of the PyTorch Profiler.&lt;/p&gt; &#xA;&lt;p&gt;The Kineto project enables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;performance observability and diagnostics&lt;/strong&gt; across common ML bottleneck components&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;actionable recommendations&lt;/strong&gt; for common issues&lt;/li&gt; &#xA; &lt;li&gt;integration of external system-level profiling tools&lt;/li&gt; &#xA; &lt;li&gt;integration with popular visualization platforms and analysis pipelines&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A central component is Libkineto, a profiling library with special focus on low-overhead GPU timeline tracing.&lt;/p&gt; &#xA;&lt;h2&gt;Libkineto&lt;/h2&gt; &#xA;&lt;p&gt;Libkineto is an in-process profiling library integrated with the PyTorch Profiler. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/kineto/main/libkineto/README.md&#34;&gt;README&lt;/a&gt; file in the &lt;code&gt;libkineto&lt;/code&gt; folder as well as documentation on the &lt;a href=&#34;https://pytorch.org/docs/master/profiler.html&#34;&gt;new PyTorch Profiler API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Holistic Trace Analysis&lt;/h2&gt; &#xA;&lt;p&gt;Holistic Trace Analysis (HTA) is an open source performance debugging library aimed at distributed workloads. HTA takes as input PyTorch Profiler traces and elevates the performance bottlenecks to enable faster debugging. Here&#39;s a partial list of features in HTA:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hta.readthedocs.io/en/latest/source/features/temporal_breakdown.html&#34;&gt;Temporal Breakdown&lt;/a&gt;: Breakdown of GPU time in terms of time spent in computation, communication, memory events, and idle time on a single node and across all ranks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hta.readthedocs.io/en/latest/source/features/idle_time_breakdown.html&#34;&gt;Idle Time Breakdown&lt;/a&gt;: Breakdown of GPU idle time into waiting for the host, waiting for another kernel or attributed to an unknown cause.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hta.readthedocs.io/en/latest/source/features/kernel_breakdown.html&#34;&gt;Kernel Breakdown&lt;/a&gt;: Find kernels with the longest duration on each rank.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hta.readthedocs.io/en/latest/source/features/kernel_breakdown.html#kernel-duration-distribution&#34;&gt;Kernel Duration Distribution&lt;/a&gt;: Distribution of average time taken by longest kernels across different ranks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hta.readthedocs.io/en/latest/source/features/comm_comp_overlap.html&#34;&gt;Communication Computation Overlap&lt;/a&gt;: Calculate the percentage of time when communication overlaps computation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For a complete list see &lt;a href=&#34;http://hta.readthedocs.io&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;PyTorch TensorBoard Profiler (Deprecated)&lt;/h2&gt; &#xA;&lt;p&gt;The goal of the PyTorch TensorBoard Profiler is to provide a seamless and intuitive end-to-end profiling experience, including straightforward collection from PyTorch and insightful visualizations and recommendations in the TensorBoard UI. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/kineto/main/tb_plugin/README.md&#34;&gt;README&lt;/a&gt; file in the &lt;code&gt;tb_plugin&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Future Development Direction:&lt;/h2&gt; &#xA;&lt;p&gt;Some areas we&#39;re currently working on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for tracing distributed workloads&lt;/li&gt; &#xA; &lt;li&gt;Trace processing, analysis and recommendation engine&lt;/li&gt; &#xA; &lt;li&gt;System-level activities, multiple tracing sources&lt;/li&gt; &#xA; &lt;li&gt;Profiling and monitoring daemon for larger scale deployments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Releases and Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We will follow the PyTorch release schedule which roughly happens on a 3 month basis.&lt;/p&gt; &#xA;&lt;p&gt;We appreciate all contributions. If you are planning to contribute back bug-fixes, please do so without any further discussion.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to contribute new features, please first open an issue and discuss the feature with us. Sending a PR without discussion might end up resulting in a rejected PR because we might be taking the infrastructure in a different direction than you might be aware of. We expect the architecture to keep evolving.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Kineto has a BSD-style license, as found in the &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/kineto/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DaGeger/paper-conversion</title>
    <updated>2024-05-17T01:29:23Z</updated>
    <id>tag:github.com,2024-05-17:/DaGeger/paper-conversion</id>
    <link href="https://github.com/DaGeger/paper-conversion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;文章去重助手 论文降重 智能改写 智能原创&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;文章降重助手&lt;/h1&gt; &#xA;&lt;h2&gt;降重原理&lt;/h2&gt; &#xA;&lt;p&gt;利用百度翻译通用API在不通语言间转换，由于不通语言语序不通，转换后可有效降重。&lt;/p&gt; &#xA;&lt;p&gt;初级&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;中-&amp;gt;英-&amp;gt;德-&amp;gt;中&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;中级&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;中-&amp;gt;英-&amp;gt;德-&amp;gt;日-&amp;gt;葡萄牙-&amp;gt;中&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;高级&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;中-&amp;gt;英-&amp;gt;德-&amp;gt;日-&amp;gt;葡萄牙-&amp;gt;意大利-&amp;gt;波兰-&amp;gt;保加利亚-&amp;gt;爱沙尼亚-&amp;gt;中&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;去重示例&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;原文&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;随着信息技术的不断发展与进步，人们在21世纪已经进入互联网的时代，通过网络学习已经成为人们获取知识的一个重要途径；在线教育平台凭借其不受时间、空间、教学条件有限等限制的优点，以慕课和腾讯课堂为代表的基于在线教学方式的教育信息化改革取得了飞速的发展。&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;转换后&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;随着信息技术的不断发展和进步，21世纪的人们已经进入了互联网时代，网络学习是人们理解的重要途径与不受时间、空间和教学条件限制的优势，以MOOC和腾讯教室为代表的在线教育平台，在在线教学方式的基础上，在教育信息化改革方面取得了长足的进步。&lt;/p&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;克隆项目&lt;/li&gt; &#xA; &lt;li&gt;注册百度翻译api，获取appid和秘钥，&lt;a href=&#34;https://api.fanyi.baidu.com/api/trans/product/apichoose&#34;&gt;百度翻译api注册连接&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;打开项目index.html 填入appid和秘钥&lt;/li&gt; &#xA; &lt;li&gt;尽情转换文章&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>controlpaths/hackbat</title>
    <updated>2024-05-17T01:29:23Z</updated>
    <id>tag:github.com,2024-05-17:/controlpaths/hackbat</id>
    <link href="https://github.com/controlpaths/hackbat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hackbat repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hackbat&lt;/h1&gt; &#xA;&lt;p&gt;HackBat is an open-source device designed for hackers and makers to experiment with different pen-testing techniques. The device is based on the Raspberry Pi RP2040 microcontroller and has an RF transceiver, NFC, WIFI, OLED display...&lt;/p&gt; &#xA;&lt;h2&gt;RP2040&lt;/h2&gt; &#xA;&lt;p&gt;The Raspberry Pi &lt;a href=&#34;https://www.raspberrypi.com/products/rp2040/specifications/&#34;&gt;RP2040&lt;/a&gt; is the brain of the HackBat. The main features of this MCU are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dual-core Arm Cortex-M0+ processor, flexible clock running up to 133 MHz 264kB on-chip SRAM&lt;/li&gt; &#xA; &lt;li&gt;2 × UART&lt;/li&gt; &#xA; &lt;li&gt;2 × SPI controllers&lt;/li&gt; &#xA; &lt;li&gt;2 × I2C controllers&lt;/li&gt; &#xA; &lt;li&gt;16 × PWM channels&lt;/li&gt; &#xA; &lt;li&gt;1 × USB 1.1 controller and PHY, with host and device support&lt;/li&gt; &#xA; &lt;li&gt;8 × Programmable I/O (PIO) state machines for custom peripheral support&lt;/li&gt; &#xA; &lt;li&gt;Operating temperature -40°C to +85°C&lt;/li&gt; &#xA; &lt;li&gt;Drag-and-drop programming using mass storage over USB&lt;/li&gt; &#xA; &lt;li&gt;Low-power sleep and dormant modes&lt;/li&gt; &#xA; &lt;li&gt;Temperature sensor&lt;/li&gt; &#xA; &lt;li&gt;Accelerated integer and floating-point libraries on-chip&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The RP2040 can be programmed using Arduino IDE, Python or C++.&lt;/p&gt; &#xA;&lt;h2&gt;Display&lt;/h2&gt; &#xA;&lt;p&gt;The OLED display used in the HackBat is a 128x64 pixels, with the driver SH110X. The device also allows OLED with SSD1306, but notice that the VCC and GND pins are reversed, so you need to change the 0 ohm resistors of those pins.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/controlpaths/hackbat/main/doc/oled_ps.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;RF&lt;/h2&gt; &#xA;&lt;p&gt;The Hackbat features a &lt;a href=&#34;https://www.ti.com/product/CC1101&#34;&gt;CC1101&lt;/a&gt; from Texas instruments. CC1101 is a low-cost sub-1 GHz transceiver designed for very low-power wireless applications. The circuit is mainly intended for the ISM (Industrial, cientific and Medical) and SRD (Short Range Device) frequency bands at 315, 433, 868, and 915 MHz, but can easily be programmed for operation at other frequencies in the 300-348 MHz, 387-464 MHz and 779-928 MHz bands&lt;/p&gt; &#xA;&lt;h2&gt;WIFI&lt;/h2&gt; &#xA;&lt;p&gt;The hackBat features an ESP8266 module, the ESP-12F. This module allow either the HackBat to connect a WIFI network, or generate an access point to allow connections.&lt;/p&gt; &#xA;&lt;p&gt;The ESP-12F modules can be programmed using the Arduino IDE and the UART conenction. In the HackBat, the ESP-12F is programmed through the RP2040 by using it as USB-UART bridge.&lt;/p&gt; &#xA;&lt;h2&gt;NFC&lt;/h2&gt; &#xA;&lt;p&gt;HackBat has NFC communication at 13.56MHz. The IC in charge of this peripheral is the [PN532].&lt;/p&gt; &#xA;&lt;p&gt;PN532 is a highly integrated transceiver module for contactless communication at 13.56 MHz based on the 80C51 microcontroller core supporting different card and reader/writer operating modes.&lt;/p&gt; &#xA;&lt;p&gt;HackBat uses &lt;a href=&#34;https://es.aliexpress.com/item/1005006005040320.html?spm=a2g0o.productlist.main.13.65b05927VOBhfq&amp;amp;algo_pvid=9ccfed98-181b-4e28-b2be-488f5ec17187&amp;amp;algo_exp_id=9ccfed98-181b-4e28-b2be-488f5ec17187-6&amp;amp;pdp_npi=4%40dis%21EUR%218.71%210.99%21%21%2166.15%217.50%21%402103854017142998536557342eb34a%2112000035367480068%21sea%21ES%210%21AB&amp;amp;curPageLogUid=pD9zsZTxZuDe&amp;amp;utparam-url=scene%3Asearch%7Cquery_from%3A&#34;&gt;this&lt;/a&gt; integrated module with the PN532.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/controlpaths/hackbat/main/doc/pn532.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The communication with the RP2040 is I2C.&lt;/p&gt; &#xA;&lt;h2&gt;Keyboard emulation&lt;/h2&gt; &#xA;&lt;p&gt;Since the RP2040 has USB host/Device, the HackBat can be used as a keyboard emulator using the Arduinoi &lt;code&gt;keyboard.h&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;h2&gt;Get Yours&lt;/h2&gt; &#xA;&lt;p&gt;The HackBat is open-source, so you can use the output files to manufacture your own in &lt;a href=&#34;https://jlcpcb.com/?from=controlpath&#34;&gt;JLCPCB&lt;/a&gt;. You just need to compress the &lt;code&gt;output_files&lt;/code&gt; directory, and upload it to &lt;a href=&#34;https://jlcpcb.com/?from=controlpath&#34;&gt;JLCPCB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/controlpaths/hackbat/main/doc/jlcorder.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Remember to change the Surface Finish to &lt;strong&gt;LeadFree HASL&lt;/strong&gt; to make your board ROHS compliant.&lt;/p&gt; &#xA;&lt;p&gt;Then you have to add the PCB Assembly service and upload the &lt;a href=&#34;https://raw.githubusercontent.com/controlpaths/hackbat/main/kicad/hackbat/production_files/hackbat-all-pos.csv&#34;&gt;centroid&lt;/a&gt; file, and the &lt;a href=&#34;https://raw.githubusercontent.com/controlpaths/hackbat/main/kicad/hackbat/production_files/bom.csv&#34;&gt;BOM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In a few days, you will receive your board at home.&lt;/p&gt;</summary>
  </entry>
</feed>