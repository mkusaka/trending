<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-21T01:32:35Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alufers/mitmproxy2swagger</title>
    <updated>2022-06-21T01:32:35Z</updated>
    <id>tag:github.com,2022-06-21:/alufers/mitmproxy2swagger</id>
    <link href="https://github.com/alufers/mitmproxy2swagger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automagically reverse-engineer REST APIs via capturing traffic&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mitmproxy2swagger&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/mitmproxy2swagger&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/mitmproxy2swagger.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5400940/168086818-c48f60ab-3f95-42eb-b435-c8b1a6326b81.mp4&#34;&gt;https://user-images.githubusercontent.com/5400940/168086818-c48f60ab-3f95-42eb-b435-c8b1a6326b81.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tool for automatically converting &lt;a href=&#34;https://mitmproxy.org/&#34;&gt;mitmproxy&lt;/a&gt; captures to &lt;a href=&#34;https://swagger.io/specification/&#34;&gt;OpenAPI 3.0&lt;/a&gt; specifications. This means that you can automatically reverse-engineer REST APIs by just running the apps and capturing the traffic.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;🆕 NEW!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Added support for processing HAR exported from the browser DevTools. See &lt;a href=&#34;https://raw.githubusercontent.com/alufers/mitmproxy2swagger/master/#har&#34;&gt;Usage - HAR&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First you will need python3 and pip3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install mitmproxy2swagger &#xA;# ... or ...&#xA;$ pip3 install mitmproxy2swagger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then clone the repo and run &lt;code&gt;mitmproxy2swagger&lt;/code&gt; as per examples below.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Mitmproxy&lt;/h3&gt; &#xA;&lt;p&gt;To create a specification by inspecting HTTP traffic you will need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Capture the traffic by using the mitmproxy tool. I personally recommend using mitmweb, which is a web interface built-in to mitmproxy.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mitmweb&#xA;Web server listening at http://127.0.0.1:8081/&#xA;Proxy server listening at http://*:9999&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To configure your client to use the proxy exposed by mitm proxy, please consult the &lt;a href=&#34;https://docs.mitmproxy.org/stable/&#34;&gt;mitmproxy documentation&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Save the traffic to a flow file.&lt;/p&gt; &lt;p&gt;In mitmweb you can do this by using the &#34;File&#34; menu and selecting &#34;Save&#34;:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alufers/mitmproxy2swagger/master/docs/mitmweb_save.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the first pass of mitmproxy2swagger:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mitmproxy2swagger -i &amp;lt;path_to_mitmptoxy_flow&amp;gt; -o &amp;lt;path_to_output_schema&amp;gt; -p &amp;lt;api_prefix&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please note that you can use an existing schema, in which case the existing schema will be extended with the new data. You can also run it a few times with different flow captures, the captured data will be safely merged.&lt;/p&gt; &lt;p&gt;&lt;code&gt;&amp;lt;api_prefix&amp;gt;&lt;/code&gt; is the base url of the API you wish to reverse-engineer. You will need to obtain it by observing the requests being made in mitmproxy.&lt;/p&gt; &lt;p&gt;For example if an app has made requests like these:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;https://api.example.com/v1/login&#xA;https://api.example.com/v1/users/2&#xA;https://api.example.com/v1/users/2/profile&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The likely prefix is &lt;code&gt;https://api.example.com/v1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Running the first pass should have created a section in the schema file like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;x-path-templates:&#xA;# Remove the ignore: prefix to generate an endpoint with its URL&#xA;# Lines that are closer to the top take precedence, the matching is greedy&#xA;- ignore:/addresses&#xA;- ignore:/basket&#xA;- ignore:/basket/add&#xA;- ignore:/basket/checkouts&#xA;- ignore:/basket/coupons/attach/{id}&#xA;- ignore:/basket/coupons/attach/104754&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You should edit the schema file with a text editor and remove the &lt;code&gt;ignore:&lt;/code&gt; prefix from the paths you wish to be generated. You can also adjust the parameters appearing in the paths.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the second pass of mitmproxy2swagger:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mitmproxy2swagger -i &amp;lt;path_to_mitmptoxy_flow&amp;gt; -o &amp;lt;path_to_output_schema&amp;gt; -p &amp;lt;api_prefix&amp;gt; [--examples]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run the command a second time (with the same schema file). It will pick up the edited lines and generate endpoint descriptions.&lt;/p&gt; &lt;p&gt;Please note that mitmproxy2swagger will not overwrite existing endpoint descriptions, if you want to overwrite them, you can delete them before running the second pass.&lt;/p&gt; &lt;p&gt;Passing &lt;code&gt;--examples&lt;/code&gt; will add example data to requests and responses. Take caution when using this option, as it may add sensitive data (tokens, passwords, personal information etc.) to the schema.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;HAR&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Capture and export the traffic from the browser DevTools.&lt;/p&gt; &lt;p&gt;In the browser DevTools, go to the Network tab and click the &#34;Export HAR&#34; button.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alufers/mitmproxy2swagger/master/docs/export_har_button.png&#34; alt=&#34;A screenshot showing where the export har button is located&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continue the same way you would do with the mitmproxy dump. &lt;code&gt;mitmproxy2swagger&lt;/code&gt; will automatically detect the HAR file and process it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example output&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/alufers/mitmproxy2swagger/master/example_outputs/&#34;&gt;examples&lt;/a&gt;. You will find a generated schema there and an html file with the generated documentation (via &lt;a href=&#34;https://www.npmjs.com/package/redoc-cli&#34;&gt;redoc-cli&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;See the generated html file &lt;a href=&#34;https://raw.githack.com/alufers/mitmproxy2swagger/master/example_outputs/lisek-static.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ultrasecurity/Storm-Breaker</title>
    <updated>2022-06-21T01:32:35Z</updated>
    <id>tag:github.com,2022-06-21:/ultrasecurity/Storm-Breaker</id>
    <link href="https://github.com/ultrasecurity/Storm-Breaker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Social engineering tool [Access Webcam &amp; Microphone &amp; Location Finder] With Python&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/ultrasecurity/Storm-Breaker&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ultrasecurity/Storm-Breaker/main/.imgs/1demo.png&#34; alt=&#34;StormBreaker&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;A tool with attractive capabilities&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://python.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/python-v3-blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://php.net&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/php-7.4.4-green&#34; alt=&#34;php&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/de-de/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-Linux-red&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ultrasecurity/Storm-Breaker/main/.imgs/Work0.png&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get Device Information Without Any Permissions&lt;/li&gt; &#xA; &lt;li&gt;Access Location [SMARTPHONES]&lt;/li&gt; &#xA; &lt;li&gt;Access Webcam&lt;/li&gt; &#xA; &lt;li&gt;Access Microphone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Update Log:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Second(latest) Update in May 18, 2022&lt;/li&gt; &#xA; &lt;li&gt;The overall structure of the tool is programmed from scratch&lt;/li&gt; &#xA; &lt;li&gt;Previous versions bugs fixed&lt;/li&gt; &#xA; &lt;li&gt;Added auto-download ngrok&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We have deleted ngrok in the new version of storm breaker and entrusted the user with run and share the localhost. So please note that storm breaker runs a localhost for you and you have to start the ngrok on your intended port yourself.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Storm Breaker&lt;/code&gt;&lt;/strong&gt; requires following programs to run properly -&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;php&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;neofetch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ngrok&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ultrasecurity/Storm-Breaker/main/.imgs/Work3.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Operating Systems Tested&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kali Linux 2022&lt;/li&gt; &#xA; &lt;li&gt;macOS Big Sur / M1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation On Kali Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/ultrasecurity/Storm-Breaker&#xA;$ cd Storm-Breaker&#xA;$ sudo bash install.sh&#xA;$ sudo python3 -m pip install -r requirements.txt&#xA;$ sudo python3 st.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; :: Workflow :: &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ultrasecurity/Storm-Breaker/main/.imgs/Work1.png&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ultrasecurity/Storm-Breaker/main/.imgs/Work2.png&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Chuyu-Team/Dism-Multi-language</title>
    <updated>2022-06-21T01:32:35Z</updated>
    <id>tag:github.com,2022-06-21:/Chuyu-Team/Dism-Multi-language</id>
    <link href="https://github.com/Chuyu-Team/Dism-Multi-language" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dism++ Multi-language Support &amp; BUG Report&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dism-Multi-language&lt;/h1&gt; &#xA;&lt;p&gt;Dism++ resource files for supporting translation to various languages. The default language used for development is in Simplified Chinese.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;[Data.xml]&lt;/h2&gt; &#xA;&lt;p&gt;Dism++ rules file which provides cleanup and optimization rules.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Languages of Dism++ (Languages folder)&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Contributors&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bg.xml&lt;/td&gt; &#xA;   &lt;td&gt;Bulgarian&lt;/td&gt; &#xA;   &lt;td&gt;Мартин Тайна, Pavel Belivakov&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cs.xml&lt;/td&gt; &#xA;   &lt;td&gt;Czech&lt;/td&gt; &#xA;   &lt;td&gt;Richard Kahl&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;de.xml&lt;/td&gt; &#xA;   &lt;td&gt;German&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:franz@drwindows.de&#34;&gt;franz@drwindows.de&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;en.xml&lt;/td&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;   &lt;td&gt;EMLVIRUS, Frag, Hexhu, raymai97, mdlgaofei, Mouri_Naruto, MikeGao, wondersnefu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;es.xml&lt;/td&gt; &#xA;   &lt;td&gt;Spanish&lt;/td&gt; &#xA;   &lt;td&gt;Oleada, MS-PC2, &lt;a href=&#34;mailto:nomemolesteis@gmail.com&#34;&gt;nomemolesteis@gmail.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fr.xml&lt;/td&gt; &#xA;   &lt;td&gt;French&lt;/td&gt; &#xA;   &lt;td&gt;JP.Sudret, P.Verdy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hu.xml&lt;/td&gt; &#xA;   &lt;td&gt;Hungarian&lt;/td&gt; &#xA;   &lt;td&gt;szuper&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;it.xml&lt;/td&gt; &#xA;   &lt;td&gt;Italian&lt;/td&gt; &#xA;   &lt;td&gt;Massimiliano F, Jumy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ja.xml&lt;/td&gt; &#xA;   &lt;td&gt;Japanese&lt;/td&gt; &#xA;   &lt;td&gt;山形まり花&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ko.xml&lt;/td&gt; &#xA;   &lt;td&gt;Korean&lt;/td&gt; &#xA;   &lt;td&gt;OldMac, 阿泽西&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pl-PL.xml&lt;/td&gt; &#xA;   &lt;td&gt;Polish&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:romuald68@gmail.com&#34;&gt;romuald68@gmail.com&lt;/a&gt;, Bladius (&lt;a href=&#34;mailto:KuchtaPC2015@outlook.com&#34;&gt;KuchtaPC2015@outlook.com&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pt.xml&lt;/td&gt; &#xA;   &lt;td&gt;Portuguese&lt;/td&gt; &#xA;   &lt;td&gt;JNylson&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ru.xml&lt;/td&gt; &#xA;   &lt;td&gt;Russian&lt;/td&gt; &#xA;   &lt;td&gt;Black Alex, Vasiliy Nasonov, virus, Vladimir, ZT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tr.xml&lt;/td&gt; &#xA;   &lt;td&gt;Turkish&lt;/td&gt; &#xA;   &lt;td&gt;Kaya Zeren&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zh-Hans.xml&lt;/td&gt; &#xA;   &lt;td&gt;Chinese Simplified&lt;/td&gt; &#xA;   &lt;td&gt;mingkuang&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zh-Hant.xml&lt;/td&gt; &#xA;   &lt;td&gt;Chinese Traditional&lt;/td&gt; &#xA;   &lt;td&gt;GT Wang (&lt;a href=&#34;http://mkvq.blogspot.com&#34;&gt;http://mkvq.blogspot.com&lt;/a&gt;) 、jamesfuh、月下独酌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;[chuyu-analysis]&lt;/h2&gt; &#xA;&lt;p&gt;Dism++崩溃统计后台。 感谢 Reinforce-II。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;[www.chuyu.me]&lt;/h2&gt; &#xA;&lt;p&gt;Base path for the official Dism++ website and help documentation. Dism++官方网站以及帮助文档。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Languages of Dism++ website (&lt;a href=&#34;http://www.chuyu.me&#34;&gt;www.chuyu.me&lt;/a&gt; folder)&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Contributors&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;de.xml&lt;/td&gt; &#xA;   &lt;td&gt;German&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:franz@drwindows.de&#34;&gt;franz@drwindows.de&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;en.xml&lt;/td&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;   &lt;td&gt;Frag, Hexhu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;es.xml&lt;/td&gt; &#xA;   &lt;td&gt;Spanish&lt;/td&gt; &#xA;   &lt;td&gt;MS-PC2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fr.xml&lt;/td&gt; &#xA;   &lt;td&gt;French&lt;/td&gt; &#xA;   &lt;td&gt;P.Verdy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ja.xml&lt;/td&gt; &#xA;   &lt;td&gt;Japanese&lt;/td&gt; &#xA;   &lt;td&gt;山形まり花&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pt.xml&lt;/td&gt; &#xA;   &lt;td&gt;Portuguese&lt;/td&gt; &#xA;   &lt;td&gt;JNylson&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ru.xml&lt;/td&gt; &#xA;   &lt;td&gt;Russian&lt;/td&gt; &#xA;   &lt;td&gt;AHOHNMYC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zh-Hans.xml&lt;/td&gt; &#xA;   &lt;td&gt;Chinese Simplified&lt;/td&gt; &#xA;   &lt;td&gt;mingkuang&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zh-Hant.xml&lt;/td&gt; &#xA;   &lt;td&gt;Chinese Traditional&lt;/td&gt; &#xA;   &lt;td&gt;GT Wang (&lt;a href=&#34;http://mkvq.blogspot.com&#34;&gt;http://mkvq.blogspot.com&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>