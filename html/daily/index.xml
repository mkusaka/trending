<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-12T01:31:04Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>confluentinc/confluent-kafka-go</title>
    <updated>2024-07-12T01:31:04Z</updated>
    <id>tag:github.com,2024-07-12:/confluentinc/confluent-kafka-go</id>
    <link href="https://github.com/confluentinc/confluent-kafka-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Confluent&#39;s Apache Kafka Golang client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Confluent&#39;s Golang Client for Apache Kafka&lt;sup&gt;TM&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;confluent-kafka-go&lt;/strong&gt; is Confluent&#39;s Golang client for &lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Apache Kafka&lt;/a&gt; and the &lt;a href=&#34;https://www.confluent.io/product/compare/&#34;&gt;Confluent Platform&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;High performance&lt;/strong&gt; - confluent-kafka-go is a lightweight wrapper around &lt;a href=&#34;https://github.com/confluentinc/librdkafka&#34;&gt;librdkafka&lt;/a&gt;, a finely tuned C client.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliability&lt;/strong&gt; - There are a lot of details to get right when writing an Apache Kafka client. We get them right in one place (librdkafka) and leverage this work across all of our clients (also &lt;a href=&#34;https://github.com/confluentinc/confluent-kafka-python&#34;&gt;confluent-kafka-python&lt;/a&gt; and &lt;a href=&#34;https://github.com/confluentinc/confluent-kafka-dotnet&#34;&gt;confluent-kafka-dotnet&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Supported&lt;/strong&gt; - Commercial support is offered by &lt;a href=&#34;https://confluent.io/&#34;&gt;Confluent&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Future proof&lt;/strong&gt; - Confluent, founded by the original creator/co-creator of Kafka, is building a &lt;a href=&#34;https://www.confluent.io/product/compare/&#34;&gt;streaming platform&lt;/a&gt; with Apache Kafka at its core. It&#39;s high priority for us that client features keep pace with core Apache Kafka and components of the &lt;a href=&#34;https://www.confluent.io/product/compare/&#34;&gt;Confluent Platform&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Golang bindings provides a high-level Producer and Consumer with support for the balanced consumer groups of Apache Kafka 0.9 and above.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://docs.confluent.io/current/clients/confluent-kafka-go/index.html&#34;&gt;API documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;For a step-by-step guide on using the client see &lt;a href=&#34;https://developer.confluent.io/get-started/go/&#34;&gt;Getting Started with Apache Kafka and Golang&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;High-level balanced consumer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/confluentinc/confluent-kafka-go/v2/kafka&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;&#x9;c, err := kafka.NewConsumer(&amp;amp;kafka.ConfigMap{&#xA;&#x9;&#x9;&#34;bootstrap.servers&#34;: &#34;localhost&#34;,&#xA;&#x9;&#x9;&#34;group.id&#34;:          &#34;myGroup&#34;,&#xA;&#x9;&#x9;&#34;auto.offset.reset&#34;: &#34;earliest&#34;,&#xA;&#x9;})&#xA;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;err = c.SubscribeTopics([]string{&#34;myTopic&#34;, &#34;^aRegex.*[Tt]opic&#34;}, nil)&#xA;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// A signal handler or similar could be used to set this to false to break the loop.&#xA;&#x9;run := true&#xA;&#xA;&#x9;for run {&#xA;&#x9;&#x9;msg, err := c.ReadMessage(time.Second)&#xA;&#x9;&#x9;if err == nil {&#xA;&#x9;&#x9;&#x9;fmt.Printf(&#34;Message on %s: %s\n&#34;, msg.TopicPartition, string(msg.Value))&#xA;&#x9;&#x9;} else if !err.(kafka.Error).IsTimeout() {&#xA;&#x9;&#x9;&#x9;// The client will automatically try to recover from all errors.&#xA;&#x9;&#x9;&#x9;// Timeout is not considered an error because it is raised by&#xA;&#x9;&#x9;&#x9;// ReadMessage in absence of messages.&#xA;&#x9;&#x9;&#x9;fmt.Printf(&#34;Consumer error: %v (%v)\n&#34;, err, msg)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;c.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Producer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/confluentinc/confluent-kafka-go/v2/kafka&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;&#x9;p, err := kafka.NewProducer(&amp;amp;kafka.ConfigMap{&#34;bootstrap.servers&#34;: &#34;localhost&#34;})&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;defer p.Close()&#xA;&#xA;&#x9;// Delivery report handler for produced messages&#xA;&#x9;go func() {&#xA;&#x9;&#x9;for e := range p.Events() {&#xA;&#x9;&#x9;&#x9;switch ev := e.(type) {&#xA;&#x9;&#x9;&#x9;case *kafka.Message:&#xA;&#x9;&#x9;&#x9;&#x9;if ev.TopicPartition.Error != nil {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fmt.Printf(&#34;Delivery failed: %v\n&#34;, ev.TopicPartition)&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fmt.Printf(&#34;Delivered message to %v\n&#34;, ev.TopicPartition)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}()&#xA;&#xA;&#x9;// Produce messages to topic (asynchronously)&#xA;&#x9;topic := &#34;myTopic&#34;&#xA;&#x9;for _, word := range []string{&#34;Welcome&#34;, &#34;to&#34;, &#34;the&#34;, &#34;Confluent&#34;, &#34;Kafka&#34;, &#34;Golang&#34;, &#34;client&#34;} {&#xA;&#x9;&#x9;p.Produce(&amp;amp;kafka.Message{&#xA;&#x9;&#x9;&#x9;TopicPartition: kafka.TopicPartition{Topic: &amp;amp;topic, Partition: kafka.PartitionAny},&#xA;&#x9;&#x9;&#x9;Value:          []byte(word),&#xA;&#x9;&#x9;}, nil)&#xA;&#x9;}&#xA;&#xA;&#x9;// Wait for message deliveries before shutting down&#xA;&#x9;p.Flush(15 * 1000)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More elaborate examples are available in the &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/confluent-kafka-go/master/examples&#34;&gt;examples&lt;/a&gt; directory, including &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/confluent-kafka-go/master/examples/confluent_cloud_example&#34;&gt;how to configure&lt;/a&gt; the Go client for use with &lt;a href=&#34;https://www.confluent.io/confluent-cloud/&#34;&gt;Confluent Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Supports Go 1.17+ and librdkafka 2.5.0+.&lt;/p&gt; &#xA;&lt;h2&gt;Using Go Modules&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://blog.golang.org/using-go-modules&#34;&gt;Go Modules&lt;/a&gt; to install confluent-kafka-go.&lt;/p&gt; &#xA;&lt;p&gt;Import the &lt;code&gt;kafka&lt;/code&gt; package from GitHub in your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;import &#34;github.com/confluentinc/confluent-kafka-go/v2/kafka&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are building for Alpine Linux (musl), &lt;code&gt;-tags musl&lt;/code&gt; must be specified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -tags musl ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A dependency to the latest stable version of confluent-kafka-go should be automatically added to your &lt;code&gt;go.mod&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Install the client&lt;/h2&gt; &#xA;&lt;p&gt;Manual install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u github.com/confluentinc/confluent-kafka-go/v2/kafka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Golang import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;import &#34;github.com/confluentinc/confluent-kafka-go/v2/kafka&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;librdkafka&lt;/h2&gt; &#xA;&lt;p&gt;Prebuilt librdkafka binaries are included with the Go client and librdkafka does not need to be installed separately on the build or target system. The following platforms are supported by the prebuilt librdkafka binaries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mac OSX x64 and arm64&lt;/li&gt; &#xA; &lt;li&gt;glibc-based Linux x64 and arm64 (e.g., RedHat, Debian, CentOS, Ubuntu, etc) - without GSSAPI/Kerberos support&lt;/li&gt; &#xA; &lt;li&gt;musl-based Linux amd64 and arm64 (Alpine) - without GSSAPI/Kerberos support&lt;/li&gt; &#xA; &lt;li&gt;Windows amd64 - without GSSAPI/Kerberos support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When building your application for Alpine Linux (musl libc) you must pass &lt;code&gt;-tags musl&lt;/code&gt; to &lt;code&gt;go get&lt;/code&gt;, &lt;code&gt;go build&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CGO_ENABLED&lt;/code&gt; must NOT be set to &lt;code&gt;0&lt;/code&gt; since the Go client is based on the C library librdkafka.&lt;/p&gt; &#xA;&lt;p&gt;If GSSAPI/Kerberos authentication support is required you will need to install librdkafka separately, see the &lt;strong&gt;Installing librdkafka&lt;/strong&gt; chapter below, and then build your Go application with &lt;code&gt;-tags dynamic&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing librdkafka&lt;/h2&gt; &#xA;&lt;p&gt;If the bundled librdkafka build is not supported on your platform, or you need a librdkafka with GSSAPI/Kerberos support, you must install librdkafka manually on the build and target system using one of the following alternatives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Debian and Ubuntu based distros, install &lt;code&gt;librdkafka-dev&lt;/code&gt; from the standard repositories or using &lt;a href=&#34;http://docs.confluent.io/current/installation.html#installation-apt&#34;&gt;Confluent&#39;s Deb repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For Redhat based distros, install &lt;code&gt;librdkafka-devel&lt;/code&gt; using &lt;a href=&#34;http://docs.confluent.io/current/installation.html#rpm-packages-via-yum&#34;&gt;Confluent&#39;s YUM repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For MacOS X, install &lt;code&gt;librdkafka&lt;/code&gt; from Homebrew. You may also need to brew install pkg-config if you don&#39;t already have it: &lt;code&gt;brew install librdkafka pkg-config&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For Alpine: &lt;code&gt;apk add librdkafka-dev pkgconf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Windows: there are no official/supported packages, but static builds are included for Windows/x64. Installing from source is needed only for GSSAPI/Kerberos support.&lt;/li&gt; &#xA; &lt;li&gt;For source builds, see instructions below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Build from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/confluentinc/librdkafka.git&#xA;cd librdkafka&#xA;./configure&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing librdkafka you will need to build your Go application with &lt;code&gt;-tags dynamic&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you use the &lt;code&gt;master&lt;/code&gt; branch of the Go client, then you need to use the &lt;code&gt;master&lt;/code&gt; branch of librdkafka.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;confluent-kafka-go requires librdkafka v1.9.0 or later.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Static builds on Linux&lt;/h2&gt; &#xA;&lt;p&gt;Since we are using &lt;code&gt;cgo&lt;/code&gt;, Go builds a dynamically linked library even when using the prebuilt, statically-compiled librdkafka as described in the &lt;strong&gt;librdkafka&lt;/strong&gt; chapter.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;glibc&lt;/code&gt; based systems, if the system where the client is being compiled is different from the target system, especially when the target system is older, there is a &lt;code&gt;glibc&lt;/code&gt; version error when trying to run the compiled client.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, if we try building a statically linked binary, it doesn&#39;t solve the problem, since there is no way to have truly static builds using &lt;code&gt;glibc&lt;/code&gt;. This is because there are some functions in &lt;code&gt;glibc&lt;/code&gt;, like &lt;code&gt;getaddrinfo&lt;/code&gt; which need the shared version of the library even when the code is compiled statically.&lt;/p&gt; &#xA;&lt;p&gt;One way around this is to either use a container/VM to build the binary, or install an older version of &lt;code&gt;glibc&lt;/code&gt; on the system where the client is being compiled.&lt;/p&gt; &#xA;&lt;p&gt;The other way is using &lt;code&gt;musl&lt;/code&gt; to create truly static builds for Linux. To do this, &lt;a href=&#34;https://wiki.musl-libc.org/getting-started.html&#34;&gt;install it for your system&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Static compilation command, meant to be used alongside the prebuilt librdkafka bundle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CC=/path/to/musl-gcc go build --ldflags &#39;-linkmode external -extldflags &#34;-static&#34;&#39; -tags musl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;API Strands&lt;/h1&gt; &#xA;&lt;p&gt;The recommended API strand is the Function-Based one, the Channel-Based one is documented in &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/confluent-kafka-go/master/examples/legacy&#34;&gt;examples/legacy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Function-Based Consumer&lt;/h2&gt; &#xA;&lt;p&gt;Messages, errors and events are polled through the &lt;code&gt;consumer.Poll()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;It has direct mapping to underlying librdkafka functionality.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/confluent-kafka-go/master/examples/consumer_example&#34;&gt;examples/consumer_example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Function-Based Producer&lt;/h2&gt; &#xA;&lt;p&gt;Application calls &lt;code&gt;producer.Produce()&lt;/code&gt; to produce messages. Delivery reports are emitted on the &lt;code&gt;producer.Events()&lt;/code&gt; or specified private channel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Warnings&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Produce()&lt;/code&gt; is a non-blocking call, if the internal librdkafka queue is full the call will fail and can be retried.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/confluent-kafka-go/master/examples/producer_example&#34;&gt;examples/producer_example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License v2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;KAFKA is a registered trademark of The Apache Software Foundation and has been licensed for use by confluent-kafka-go. confluent-kafka-go has no affiliation with and is not endorsed by The Apache Software Foundation.&lt;/p&gt; &#xA;&lt;h1&gt;Developer Notes&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/confluent-kafka-go/master/kafka/README.md&#34;&gt;kafka/README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Contributions to the code, examples, documentation, et.al, are very much appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Make your changes, run &lt;code&gt;gofmt&lt;/code&gt;, tests, etc, push your branch, create a PR, and &lt;a href=&#34;http://clabot.confluent.io/cla&#34;&gt;sign the CLA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Confluent Cloud&lt;/h1&gt; &#xA;&lt;p&gt;For a step-by-step guide on using the Golang client with Confluent Cloud see &lt;a href=&#34;https://developer.confluent.io/get-started/go/&#34;&gt;Getting Started with Apache Kafka and Golang&lt;/a&gt; on &lt;a href=&#34;https://developer.confluent.io/&#34;&gt;Confluent Developer&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>