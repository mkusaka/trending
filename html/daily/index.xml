<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-10T01:31:25Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mdn/translated-content</title>
    <updated>2022-06-10T01:31:25Z</updated>
    <id>tag:github.com,2022-06-10:/mdn/translated-content</id>
    <link href="https://github.com/mdn/translated-content" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All translated MDN content in raw form&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Contributing to the translated content of MDN Web Docs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸŽ‰&lt;/span&gt; First of all, thanks for taking the time to contribute to &lt;a href=&#34;https://developer.mozilla.org&#34;&gt;MDN Web Docs&lt;/a&gt;â€™ translated content! &lt;span&gt;ðŸŽ‰&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following is a set of guidelines for contributing to the &lt;a href=&#34;https://github.com/mdn/translated-content&#34;&gt;translated content of MDN Web Docs&lt;/a&gt;, which is hosted within the &lt;a href=&#34;https://github.com/mdn&#34;&gt;MDN Organization&lt;/a&gt; on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mdn/translated-content/main/PEERS_GUIDELINES.md&#34;&gt;Guidelines for peers can be found here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Locales&lt;/h2&gt; &#xA;&lt;p&gt;Before we go any further, you should be aware that we are only accepting updates to active locales â€” this means locales that have active community maintenance teams in place to review PRs, fix issues, make updates, etc. Currently the list of active locales is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ja&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ko&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pt-BR&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ru&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zh&lt;/code&gt; (&lt;code&gt;zh-CN&lt;/code&gt; and &lt;code&gt;zh-TW&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;es&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to just find a task and jump in, search by the labels &lt;code&gt;l10n-fr&lt;/code&gt;, &lt;code&gt;l10n-ja&lt;/code&gt;, &lt;code&gt;l10n-ko&lt;/code&gt;, &lt;code&gt;l10n-pt-br&lt;/code&gt;, &lt;code&gt;l10n-ru&lt;/code&gt;, &lt;code&gt;l10n-zh&lt;/code&gt; and &lt;code&gt;l10n-es&lt;/code&gt; in this repoâ€™s &lt;a href=&#34;https://github.com/mdn/translated-content/issues&#34;&gt;issues list&lt;/a&gt;, or the main &lt;a href=&#34;https://github.com/mdn/content/issues&#34;&gt;content repo issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone participating in this project is expected to follow our &lt;a href=&#34;https://raw.githubusercontent.com/mdn/translated-content/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;When contributing to the content you agree to license your contributions according to &lt;a href=&#34;https://raw.githubusercontent.com/mdn/translated-content/main/LICENSE.md&#34;&gt;our license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Making contributions&lt;/h2&gt; &#xA;&lt;p&gt;A good place to learn about general guidelines for contributing to &lt;a href=&#34;https://developer.mozilla.org&#34;&gt;MDN Web Docs&lt;/a&gt; is the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/MDN/Guidelines&#34;&gt;Guidelines document&lt;/a&gt;. For example, you can find out more about MDN&#39;s writing-style guidelines via the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/MDN/Guidelines/Writing_style_guide&#34;&gt;Writing style guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setting up to edit&lt;/h3&gt; &#xA;&lt;p&gt;This repo has exactly the same folder structure, concepts, and commands available to it as the &lt;a href=&#34;https://github.com/mdn/content&#34;&gt;content repo&lt;/a&gt;, which holds all of MDN&#39;s English content. The main difference is in the setup you need to do before you can start editing. It is mostly the same, but there is a little bit more to consider.&lt;/p&gt; &#xA;&lt;p&gt;To begin with, get the basic required tooling set up, as described in the &lt;a href=&#34;https://github.com/mdn/content#setup&#34;&gt;content repo Setup section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now you need to fork and clone both the &lt;a href=&#34;https://github.com/mdn/content&#34;&gt;content repo&lt;/a&gt; and the translated-content repo (this repo).&lt;/p&gt; &#xA;&lt;h3&gt;Content repo setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Once the above is done, cd into the content repo.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the command &lt;code&gt;yarn install&lt;/code&gt; to fetch the latest packages and get the local MDN testing environment set up. It is also recommended that you run &lt;code&gt;yarn install&lt;/code&gt; before every update you do to the source, to make sure you have the latest packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Next, create an environment variable called &lt;code&gt;CONTENT_TRANSLATED_ROOT&lt;/code&gt; containing the path to the &lt;em&gt;translated-content&lt;/em&gt; repoâ€™s &lt;code&gt;files&lt;/code&gt; directory. You could do this for a single session like so:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export CONTENT_TRANSLATED_ROOT=/path/to/translated-content/files&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But youâ€™ll have to newly-set this every time you open up a new terminal window. Instead, you could put the environment variable setting in an &lt;code&gt;.env&lt;/code&gt; file in the root of your content repo. This is most easily done using the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo CONTENT_TRANSLATED_ROOT=/path/to/translated-content/files &amp;gt;&amp;gt; .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(the &lt;code&gt;.env&lt;/code&gt; file will be created for you if it does not already exist.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now youâ€™ve got this set up, enter the command &lt;code&gt;yarn start&lt;/code&gt; to begin the local testing server running at &lt;code&gt;localhost:5042&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Working in the translated-content repo&lt;/h3&gt; &#xA;&lt;p&gt;Over in the translated-content repo, decide what change you want to make, and then:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new branch to make your changes in.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Switch to your new branch and make the changes you want to make. You can keep going back to &lt;code&gt;localhost:5042/&amp;lt;your_locale&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;localhost:5042/fr&lt;/code&gt; for French) to test your changes and make sure the content looks how you want it to look.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you are satisfied with your changes, create a pull request and one of our review teams will review it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once the pull request has been merged, the edition may take up to 48 hours (daily build and CDN caches). To see if your change has been deployed, you can check on &lt;a href=&#34;https://whatsdeployed.io/s/16d/mdn/translated-content&#34;&gt;What&#39;s Deployed&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;For more info on editing this repo&lt;/h3&gt; &#xA;&lt;p&gt;For more information, weâ€™d like to suggest that you go to the &lt;a href=&#34;https://github.com/mdn/content&#34;&gt;content repo&lt;/a&gt; and read its README file, particularly to learn about &lt;a href=&#34;https://github.com/mdn/content#fundamental-concepts&#34;&gt;fundamental concepts&lt;/a&gt;, &lt;a href=&#34;https://github.com/mdn/content#pull-request-etiquette&#34;&gt;pull request etiquette&lt;/a&gt;, and common actions such as &lt;a href=&#34;https://github.com/mdn/content#adding-a-new-document&#34;&gt;adding&lt;/a&gt;, &lt;a href=&#34;https://github.com/mdn/content#moving-one-or-more-documents&#34;&gt;moving&lt;/a&gt;, or &lt;a href=&#34;https://github.com/mdn/content#deleting-a-document&#34;&gt;deleting&lt;/a&gt; documents.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sindresorhus/github-markdown-css</title>
    <updated>2022-06-10T01:31:25Z</updated>
    <id>tag:github.com,2022-06-10:/sindresorhus/github-markdown-css</id>
    <link href="https://github.com/sindresorhus/github-markdown-css" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The minimal amount of CSS to replicate the GitHub Markdown style&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;github-markdown-css&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The minimal amount of CSS to replicate the GitHub Markdown style&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;The CSS is generated. Contributions should go to &lt;a href=&#34;https://github.com/sindresorhus/generate-github-markdown-css&#34;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://sindresorhus.com/github-markdown-css&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/170270/5219062/f22a978c-7685-11e4-8316-af25b6c89bc0.png&#34; width=&#34;300&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://sindresorhus.com/github-markdown-css&#34;&gt;Demo&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css&#34;&gt;manually&lt;/a&gt;, from &lt;a href=&#34;https://cdnjs.com/libraries/github-markdown-css&#34;&gt;CDNJS&lt;/a&gt;, or with npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install github-markdown-css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Import the &lt;code&gt;github-markdown.css&lt;/code&gt; file and add a &lt;code&gt;markdown-body&lt;/code&gt; class to the container of your rendered Markdown and set a width for it. GitHub uses &lt;code&gt;980px&lt;/code&gt; width and &lt;code&gt;45px&lt;/code&gt; padding, and &lt;code&gt;15px&lt;/code&gt; padding for mobile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&amp;gt;&#xA;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;github-markdown.css&#34;&amp;gt;&#xA;&amp;lt;style&amp;gt;&#xA;&#x9;.markdown-body {&#xA;&#x9;&#x9;box-sizing: border-box;&#xA;&#x9;&#x9;min-width: 200px;&#xA;&#x9;&#x9;max-width: 980px;&#xA;&#x9;&#x9;margin: 0 auto;&#xA;&#x9;&#x9;padding: 45px;&#xA;&#x9;}&#xA;&#xA;&#x9;@media (max-width: 767px) {&#xA;&#x9;&#x9;.markdown-body {&#xA;&#x9;&#x9;&#x9;padding: 15px;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&amp;lt;/style&amp;gt;&#xA;&amp;lt;article class=&#34;markdown-body&#34;&amp;gt;&#xA;&#x9;&amp;lt;h1&amp;gt;Unicorns&amp;lt;/h1&amp;gt;&#xA;&#x9;&amp;lt;p&amp;gt;All the things&amp;lt;/p&amp;gt;&#xA;&amp;lt;/article&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/rest/reference/markdown&#34;&gt;GitHub&#39;s &lt;code&gt;/markdown&lt;/code&gt; API&lt;/a&gt; to turn Markdown into the HTML that GitHub generates, which works well with the CSS in this repo. Other Markdown parsers will mostly work with these styles too. To mimic how GitHub highlights code, you can use &lt;a href=&#34;https://github.com/wooorm/starry-night&#34;&gt;&lt;code&gt;starry-night&lt;/code&gt;&lt;/a&gt; with your Markdown parser of choice.&lt;/p&gt; &#xA;&lt;p&gt;There are 3 themes provided in this package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;github-markdown.css&lt;/strong&gt;: (default) Automatically switches between light and dark through &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme&#34;&gt;&lt;code&gt;@media (prefers-color-scheme)&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;github-markdown-light.css&lt;/strong&gt;: Light-only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;github-markdown-dark.css&lt;/strong&gt;: Dark-only.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may know that now GitHub supports more than 2 themes including &lt;code&gt;dark_dimmed&lt;/code&gt;, &lt;code&gt;dark_high_contrast&lt;/code&gt; and &lt;code&gt;colorblind&lt;/code&gt; variants. If you want to try these themes, you can generate them on your own! See next section.&lt;/p&gt; &#xA;&lt;h2&gt;How&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/sindresorhus/generate-github-markdown-css&#34;&gt;&lt;code&gt;generate-github-markdown-css&lt;/code&gt;&lt;/a&gt; for how it&#39;s generated and ability to generate your own.&lt;/p&gt; &#xA;&lt;h2&gt;Dev&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;npm run make&lt;/code&gt; to update the CSS.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookresearch/fastText</title>
    <updated>2022-06-10T01:31:25Z</updated>
    <id>tag:github.com,2022-06-10:/facebookresearch/fastText</id>
    <link href="https://github.com/facebookresearch/fastText" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Library for fast text representation and classification.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fastText&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fasttext.cc/&#34;&gt;fastText&lt;/a&gt; is a library for efficient learning of word representations and sentence classification.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/facebookresearch/fastText/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/facebookresearch/fastText/tree/master.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#resources&#34;&gt;Resources&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#models&#34;&gt;Models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#supplementary-data&#34;&gt;Supplementary data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#cheatsheet&#34;&gt;Cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#building-fasttext&#34;&gt;Building fastText&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#getting-the-source-code&#34;&gt;Getting the source code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#building-fasttext-using-make-preferred&#34;&gt;Building fastText using make (preferred)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#building-fasttext-using-cmake&#34;&gt;Building fastText using cmake&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#building-fasttext-for-python&#34;&gt;Building fastText for Python&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#example-use-cases&#34;&gt;Example use cases&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#word-representation-learning&#34;&gt;Word representation learning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#obtaining-word-vectors-for-out-of-vocabulary-words&#34;&gt;Obtaining word vectors for out-of-vocabulary words&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#text-classification&#34;&gt;Text classification&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#full-documentation&#34;&gt;Full documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#references&#34;&gt;References&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#enriching-word-vectors-with-subword-information&#34;&gt;Enriching Word Vectors with Subword Information&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#bag-of-tricks-for-efficient-text-classification&#34;&gt;Bag of Tricks for Efficient Text Classification&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#fasttextzip-compressing-text-classification-models&#34;&gt;FastText.zip: Compressing text classification models&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#join-the-fasttext-community&#34;&gt;Join the fastText community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Models&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recent state-of-the-art &lt;a href=&#34;https://fasttext.cc/docs/en/english-vectors.html&#34;&gt;English word vectors&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Word vectors for &lt;a href=&#34;https://github.com/facebookresearch/fastText/raw/master/docs/crawl-vectors.md&#34;&gt;157 languages trained on Wikipedia and Crawl&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Models for &lt;a href=&#34;https://fasttext.cc/docs/en/language-identification.html#content&#34;&gt;language identification&lt;/a&gt; and &lt;a href=&#34;https://fasttext.cc/docs/en/supervised-models.html#content&#34;&gt;various supervised tasks&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supplementary data&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The preprocessed &lt;a href=&#34;https://fasttext.cc/docs/en/dataset.html#content&#34;&gt;YFCC100M data&lt;/a&gt; used in [2].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;p&gt;You can find &lt;a href=&#34;https://fasttext.cc/docs/en/faqs.html#content&#34;&gt;answers to frequently asked questions&lt;/a&gt; on our &lt;a href=&#34;https://fasttext.cc/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cheatsheet&lt;/h3&gt; &#xA;&lt;p&gt;We also provide a &lt;a href=&#34;https://fasttext.cc/docs/en/cheatsheet.html#content&#34;&gt;cheatsheet&lt;/a&gt; full of useful one-liners.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;We are continuously building and testing our library, CLI and Python bindings under various docker images using &lt;a href=&#34;https://circleci.com/&#34;&gt;circleci&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Generally, &lt;strong&gt;fastText&lt;/strong&gt; builds on modern Mac OS and Linux distributions. Since it uses some C++11 features, it requires a compiler with good C++11 support. These include :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(g++-4.7.2 or newer) or (clang-3.3 or newer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Compilation is carried out using a Makefile, so you will need to have a working &lt;strong&gt;make&lt;/strong&gt;. If you want to use &lt;strong&gt;cmake&lt;/strong&gt; you need at least version 2.8.9.&lt;/p&gt; &#xA;&lt;p&gt;One of the oldest distributions we successfully built and tested the CLI under is &lt;a href=&#34;https://www.debian.org/releases/jessie/&#34;&gt;Debian jessie&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the word-similarity evaluation script you will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 2.6 or newer&lt;/li&gt; &#xA; &lt;li&gt;NumPy &amp;amp; SciPy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the python bindings (see the subdirectory python) you will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python version 2.7 or &amp;gt;=3.4&lt;/li&gt; &#xA; &lt;li&gt;NumPy &amp;amp; SciPy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pybind/pybind11&#34;&gt;pybind11&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One of the oldest distributions we successfully built and tested the Python bindings under is &lt;a href=&#34;https://www.debian.org/releases/jessie/&#34;&gt;Debian jessie&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If these requirements make it impossible for you to use fastText, please open an issue and we will try to accommodate you.&lt;/p&gt; &#xA;&lt;h2&gt;Building fastText&lt;/h2&gt; &#xA;&lt;p&gt;We discuss building the latest stable version of fastText.&lt;/p&gt; &#xA;&lt;h3&gt;Getting the source code&lt;/h3&gt; &#xA;&lt;p&gt;You can find our &lt;a href=&#34;https://github.com/facebookresearch/fastText/releases/latest&#34;&gt;latest stable release&lt;/a&gt; in the usual place.&lt;/p&gt; &#xA;&lt;p&gt;There is also the master branch that contains all of our most recent work, but comes along with all the usual caveats of an unstable branch. You might want to use this if you are a developer or power-user.&lt;/p&gt; &#xA;&lt;h3&gt;Building fastText using make (preferred)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wget https://github.com/facebookresearch/fastText/archive/v0.9.2.zip&#xA;$ unzip v0.9.2.zip&#xA;$ cd fastText-0.9.2&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will produce object files for all the classes as well as the main binary &lt;code&gt;fasttext&lt;/code&gt;. If you do not plan on using the default system-wide compiler, update the two macros defined at the beginning of the Makefile (CC and INCLUDES).&lt;/p&gt; &#xA;&lt;h3&gt;Building fastText using cmake&lt;/h3&gt; &#xA;&lt;p&gt;For now this is not part of a release, so you will need to clone the master branch.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/facebookresearch/fastText.git&#xA;$ cd fastText&#xA;$ mkdir build &amp;amp;&amp;amp; cd build &amp;amp;&amp;amp; cmake ..&#xA;$ make &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the fasttext binary and also all relevant libraries (shared, static, PIC).&lt;/p&gt; &#xA;&lt;h3&gt;Building fastText for Python&lt;/h3&gt; &#xA;&lt;p&gt;For now this is not part of a release, so you will need to clone the master branch.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/facebookresearch/fastText.git&#xA;$ cd fastText&#xA;$ pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further information and introduction see python/README.md&lt;/p&gt; &#xA;&lt;h2&gt;Example use cases&lt;/h2&gt; &#xA;&lt;p&gt;This library has two main use cases: word representation learning and text classification. These were described in the two papers &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#enriching-word-vectors-with-subword-information&#34;&gt;1&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#bag-of-tricks-for-efficient-text-classification&#34;&gt;2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Word representation learning&lt;/h3&gt; &#xA;&lt;p&gt;In order to learn word vectors, as described in &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#enriching-word-vectors-with-subword-information&#34;&gt;1&lt;/a&gt;, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./fasttext skipgram -input data.txt -output model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;data.txt&lt;/code&gt; is a training file containing &lt;code&gt;UTF-8&lt;/code&gt; encoded text. By default the word vectors will take into account character n-grams from 3 to 6 characters. At the end of optimization the program will save two files: &lt;code&gt;model.bin&lt;/code&gt; and &lt;code&gt;model.vec&lt;/code&gt;. &lt;code&gt;model.vec&lt;/code&gt; is a text file containing the word vectors, one per line. &lt;code&gt;model.bin&lt;/code&gt; is a binary file containing the parameters of the model along with the dictionary and all hyper parameters. The binary file can be used later to compute word vectors or to restart the optimization.&lt;/p&gt; &#xA;&lt;h3&gt;Obtaining word vectors for out-of-vocabulary words&lt;/h3&gt; &#xA;&lt;p&gt;The previously trained model can be used to compute word vectors for out-of-vocabulary words. Provided you have a text file &lt;code&gt;queries.txt&lt;/code&gt; containing words for which you want to compute vectors, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./fasttext print-word-vectors model.bin &amp;lt; queries.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will output word vectors to the standard output, one vector per line. This can also be used with pipes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat queries.txt | ./fasttext print-word-vectors model.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the provided scripts for an example. For instance, running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./word-vector-example.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will compile the code, download data, compute word vectors and evaluate them on the rare words similarity dataset RW [Thang et al. 2013].&lt;/p&gt; &#xA;&lt;h3&gt;Text classification&lt;/h3&gt; &#xA;&lt;p&gt;This library can also be used to train supervised text classifiers, for instance for sentiment analysis. In order to train a text classifier using the method described in &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#bag-of-tricks-for-efficient-text-classification&#34;&gt;2&lt;/a&gt;, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./fasttext supervised -input train.txt -output model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;train.txt&lt;/code&gt; is a text file containing a training sentence per line along with the labels. By default, we assume that labels are words that are prefixed by the string &lt;code&gt;__label__&lt;/code&gt;. This will output two files: &lt;code&gt;model.bin&lt;/code&gt; and &lt;code&gt;model.vec&lt;/code&gt;. Once the model was trained, you can evaluate it by computing the precision and recall at k (P@k and R@k) on a test set using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./fasttext test model.bin test.txt k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The argument &lt;code&gt;k&lt;/code&gt; is optional, and is equal to &lt;code&gt;1&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;In order to obtain the k most likely labels for a piece of text, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./fasttext predict model.bin test.txt k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;code&gt;predict-prob&lt;/code&gt; to also get the probability for each label&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./fasttext predict-prob model.bin test.txt k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;test.txt&lt;/code&gt; contains a piece of text to classify per line. Doing so will print to the standard output the k most likely labels for each line. The argument &lt;code&gt;k&lt;/code&gt; is optional, and equal to &lt;code&gt;1&lt;/code&gt; by default. See &lt;code&gt;classification-example.sh&lt;/code&gt; for an example use case. In order to reproduce results from the paper &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#bag-of-tricks-for-efficient-text-classification&#34;&gt;2&lt;/a&gt;, run &lt;code&gt;classification-results.sh&lt;/code&gt;, this will download all the datasets and reproduce the results from Table 1.&lt;/p&gt; &#xA;&lt;p&gt;If you want to compute vector representations of sentences or paragraphs, please use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./fasttext print-sentence-vectors model.bin &amp;lt; text.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This assumes that the &lt;code&gt;text.txt&lt;/code&gt; file contains the paragraphs that you want to get vectors for. The program will output one vector representation per line in the file.&lt;/p&gt; &#xA;&lt;p&gt;You can also quantize a supervised model to reduce its memory usage with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./fasttext quantize -output model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;.ftz&lt;/code&gt; file with a smaller memory footprint. All the standard functionality, like &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;predict&lt;/code&gt; work the same way on the quantized models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./fasttext test model.ftz test.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The quantization procedure follows the steps described in &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#fasttextzip-compressing-text-classification-models&#34;&gt;3&lt;/a&gt;. You can run the script &lt;code&gt;quantization-example.sh&lt;/code&gt; for an example.&lt;/p&gt; &#xA;&lt;h2&gt;Full documentation&lt;/h2&gt; &#xA;&lt;p&gt;Invoke a command without arguments to list available arguments and their default values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./fasttext supervised&#xA;Empty input or output path.&#xA;&#xA;The following arguments are mandatory:&#xA;  -input              training file path&#xA;  -output             output file path&#xA;&#xA;The following arguments are optional:&#xA;  -verbose            verbosity level [2]&#xA;&#xA;The following arguments for the dictionary are optional:&#xA;  -minCount           minimal number of word occurrences [1]&#xA;  -minCountLabel      minimal number of label occurrences [0]&#xA;  -wordNgrams         max length of word ngram [1]&#xA;  -bucket             number of buckets [2000000]&#xA;  -minn               min length of char ngram [0]&#xA;  -maxn               max length of char ngram [0]&#xA;  -t                  sampling threshold [0.0001]&#xA;  -label              labels prefix [__label__]&#xA;&#xA;The following arguments for training are optional:&#xA;  -lr                 learning rate [0.1]&#xA;  -lrUpdateRate       change the rate of updates for the learning rate [100]&#xA;  -dim                size of word vectors [100]&#xA;  -ws                 size of the context window [5]&#xA;  -epoch              number of epochs [5]&#xA;  -neg                number of negatives sampled [5]&#xA;  -loss               loss function {ns, hs, softmax} [softmax]&#xA;  -thread             number of threads [12]&#xA;  -pretrainedVectors  pretrained word vectors for supervised learning []&#xA;  -saveOutput         whether output params should be saved [0]&#xA;&#xA;The following arguments for quantization are optional:&#xA;  -cutoff             number of words and ngrams to retain [0]&#xA;  -retrain            finetune embeddings if a cutoff is applied [0]&#xA;  -qnorm              quantizing the norm separately [0]&#xA;  -qout               quantizing the classifier [0]&#xA;  -dsub               size of each sub-vector [2]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Defaults may vary by mode. (Word-representation modes &lt;code&gt;skipgram&lt;/code&gt; and &lt;code&gt;cbow&lt;/code&gt; use a default &lt;code&gt;-minCount&lt;/code&gt; of 5.)&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;Please cite &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#enriching-word-vectors-with-subword-information&#34;&gt;1&lt;/a&gt; if using this code for learning word representations or &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/fastText/main/#bag-of-tricks-for-efficient-text-classification&#34;&gt;2&lt;/a&gt; if using for text classification.&lt;/p&gt; &#xA;&lt;h3&gt;Enriching Word Vectors with Subword Information&lt;/h3&gt; &#xA;&lt;p&gt;[1] P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov, &lt;a href=&#34;https://arxiv.org/abs/1607.04606&#34;&gt;&lt;em&gt;Enriching Word Vectors with Subword Information&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{bojanowski2017enriching,&#xA;  title={Enriching Word Vectors with Subword Information},&#xA;  author={Bojanowski, Piotr and Grave, Edouard and Joulin, Armand and Mikolov, Tomas},&#xA;  journal={Transactions of the Association for Computational Linguistics},&#xA;  volume={5},&#xA;  year={2017},&#xA;  issn={2307-387X},&#xA;  pages={135--146}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bag of Tricks for Efficient Text Classification&lt;/h3&gt; &#xA;&lt;p&gt;[2] A. Joulin, E. Grave, P. Bojanowski, T. Mikolov, &lt;a href=&#34;https://arxiv.org/abs/1607.01759&#34;&gt;&lt;em&gt;Bag of Tricks for Efficient Text Classification&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@InProceedings{joulin2017bag,&#xA;  title={Bag of Tricks for Efficient Text Classification},&#xA;  author={Joulin, Armand and Grave, Edouard and Bojanowski, Piotr and Mikolov, Tomas},&#xA;  booktitle={Proceedings of the 15th Conference of the European Chapter of the Association for Computational Linguistics: Volume 2, Short Papers},&#xA;  month={April},&#xA;  year={2017},&#xA;  publisher={Association for Computational Linguistics},&#xA;  pages={427--431},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FastText.zip: Compressing text classification models&lt;/h3&gt; &#xA;&lt;p&gt;[3] A. Joulin, E. Grave, P. Bojanowski, M. Douze, H. JÃ©gou, T. Mikolov, &lt;a href=&#34;https://arxiv.org/abs/1612.03651&#34;&gt;&lt;em&gt;FastText.zip: Compressing text classification models&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{joulin2016fasttext,&#xA;  title={FastText.zip: Compressing text classification models},&#xA;  author={Joulin, Armand and Grave, Edouard and Bojanowski, Piotr and Douze, Matthijs and J{\&#39;e}gou, H{\&#39;e}rve and Mikolov, Tomas},&#xA;  journal={arXiv preprint arXiv:1612.03651},&#xA;  year={2016}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(* These authors contributed equally.)&lt;/p&gt; &#xA;&lt;h2&gt;Join the fastText community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Facebook page: &lt;a href=&#34;https://www.facebook.com/groups/1174547215919768&#34;&gt;https://www.facebook.com/groups/1174547215919768&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google group: &lt;a href=&#34;https://groups.google.com/forum/#!forum/fasttext-library&#34;&gt;https://groups.google.com/forum/#!forum/fasttext-library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Contact: &lt;a href=&#34;mailto:egrave@fb.com&#34;&gt;egrave@fb.com&lt;/a&gt;, &lt;a href=&#34;mailto:bojanowski@fb.com&#34;&gt;bojanowski@fb.com&lt;/a&gt;, &lt;a href=&#34;mailto:ajoulin@fb.com&#34;&gt;ajoulin@fb.com&lt;/a&gt;, &lt;a href=&#34;mailto:tmikolov@fb.com&#34;&gt;tmikolov@fb.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the CONTRIBUTING file for information about how to help out.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;fastText is MIT-licensed.&lt;/p&gt;</summary>
  </entry>
</feed>