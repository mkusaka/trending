<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-23T01:32:27Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ibm-developer-skills-network/gkpbt-css-circle</title>
    <updated>2025-07-23T01:32:27Z</updated>
    <id>tag:github.com,2025-07-23:/ibm-developer-skills-network/gkpbt-css-circle</id>
    <link href="https://github.com/ibm-developer-skills-network/gkpbt-css-circle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;css-circle&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Readme&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>Tanq16/ExpenseOwl</title>
    <updated>2025-07-23T01:32:27Z</updated>
    <id>tag:github.com,2025-07-23:/Tanq16/ExpenseOwl</id>
    <link href="https://github.com/Tanq16/ExpenseOwl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extremely simple, self-hosted expense tracker with a beautiful UI.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/logo.png&#34; alt=&#34;ExpenseOwl Logo&#34; width=&#34;200&#34; height=&#34;200&#34;&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;ExpenseOwl&lt;/h1&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tanq16/expenseowl/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/tanq16/expenseowl/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/Tanq16/expenseowl/releases&#34;&gt;&lt;img alt=&#34;GitHub Release&#34; src=&#34;https://img.shields.io/github/v/release/tanq16/expenseowl&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a href=&#34;https://hub.docker.com/r/tanq16/expenseowl&#34;&gt;&lt;img alt=&#34;Docker Pulls&#34; src=&#34;https://img.shields.io/docker/pulls/tanq16/expenseowl&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/#why-create-this&#34;&gt;Why Create This?&lt;/a&gt;&amp;nbsp;•&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/#features&#34;&gt;Features&lt;/a&gt;&amp;nbsp;•&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/#installation&#34;&gt;Installation&lt;/a&gt;&amp;nbsp;•&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/#usage&#34;&gt;Usage&lt;/a&gt;&amp;nbsp;•&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/#contributing&#34;&gt;Contributing&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;ExpenseOwl&lt;/b&gt; is an extremely simple self-hosted expense tracking system with a modern monthly pie-chart visualization and cashflow showcase. &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Why Create This?&lt;/h1&gt; &#xA;&lt;p&gt;There are a ton of amazing projects for expense tracking across GitHub (&lt;a href=&#34;https://github.com/actualbudget/actual&#34;&gt;Actual&lt;/a&gt;, &lt;a href=&#34;https://github.com/firefly-iii/firefly-iii&#34;&gt;Firefly III&lt;/a&gt;, etc.). They&#39;re all incredible! I just don&#39;t find them &lt;em&gt;fast&lt;/em&gt; and &lt;em&gt;simple&lt;/em&gt;. They offer too many features I never use (like accounts or complex budgeting). &lt;em&gt;Don&#39;t get me wrong!&lt;/em&gt; They&#39;re amazing when complexity is needed, but I wanted something &lt;em&gt;&lt;strong&gt;dead simple&lt;/strong&gt;&lt;/em&gt; that gives me a quick monthly look at my expenses. NOTHING else!&lt;/p&gt; &#xA;&lt;p&gt;So, I created this project and I use it in my home lab for expenses. The primary intention is to track spending across your categories in a simplistic manner. No complications, searching, budgeting. This is &lt;em&gt;not&lt;/em&gt; a budgeting app; it&#39;s for tracking.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h3&gt;Core Functionality&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick expense/income add (only date, amount, and category are required)&lt;/li&gt; &#xA; &lt;li&gt;Single-user focused (mainly for a home lab deployment)&lt;/li&gt; &#xA; &lt;li&gt;Recurring transactions for both income and expenses&lt;/li&gt; &#xA; &lt;li&gt;Custom categories, currency symbols, and start date via app settings&lt;/li&gt; &#xA; &lt;li&gt;Optional tags for further classification&lt;/li&gt; &#xA; &lt;li&gt;Beautiful interface with both light and dark themes&lt;/li&gt; &#xA; &lt;li&gt;Self-contained binary and container image to ensure no internet interaction&lt;/li&gt; &#xA; &lt;li&gt;Multi-architecture Docker container with support for persistent storage&lt;/li&gt; &#xA; &lt;li&gt;PWA support for using the app on smartphone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Visualization&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Main dashboard - category breakdown (pie chart) and cashflow indicator &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Click on a category to exclude it from the pie chart; click again to add it back&lt;/li&gt; &#xA;   &lt;li&gt;Visualize the month&#39;s breakdown without considering some categories like Rent&lt;/li&gt; &#xA;   &lt;li&gt;Cashflow shows total income, total expenses, and balance (red or green based on +ve or -ve)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Table view for detailed expense listing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;View monthly or all expenses chronologically and delete them (hold shift to skip confirm)&lt;/li&gt; &#xA;   &lt;li&gt;Use the browser to search for a name or tags if needed&lt;/li&gt; &#xA;   &lt;li&gt;Tags show up if at least one transaction uses it;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Settings page for configurations and additional features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reorder, add, or remove custom categories&lt;/li&gt; &#xA;   &lt;li&gt;Select a custom currency symbol and a custom start date&lt;/li&gt; &#xA;   &lt;li&gt;Exporting data as CSV and import CSV from virtually anywhere&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Progressive Web App (PWA)&lt;/h3&gt; &#xA;&lt;p&gt;The front end of ExpenseOwl can be installed as a Progressive Web App on desktop and mobile devices (i.e., the back end still needs to be self-hosted). To install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Desktop: Click the install icon in your browser&#39;s address bar&lt;/li&gt; &#xA; &lt;li&gt;iOS: Use Safari&#39;s &#34;Add to Home Screen&#34; option in the share menu&lt;/li&gt; &#xA; &lt;li&gt;Android: Use Chrome&#39;s &#34;Install&#34; option in the menu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;Dashboard Showcase:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Desktop View&lt;/th&gt; &#xA;   &lt;th&gt;Mobile View&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dark&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/ddark-main.png&#34; alt=&#34;Dashboard Dark&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/mdark-main.png&#34; alt=&#34;Mobile Dashboard Dark&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Light&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/dlight-main.png&#34; alt=&#34;Dashboard Light&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/mlight-main.png&#34; alt=&#34;Mobile Dashboard Light&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand this to see screenshots of other pages&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;&lt;/th&gt; &#xA;    &lt;th&gt;Desktop View&lt;/th&gt; &#xA;    &lt;th&gt;Mobile View&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Table Dark&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/ddark-table.png&#34; alt=&#34;Dashboard Dark&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/mdark-table.png&#34; alt=&#34;Mobile Dashboard Dark&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Table Light&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/dlight-table.png&#34; alt=&#34;Dashboard Light&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/mlight-table.png&#34; alt=&#34;Mobile Dashboard Light&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Settings Dark&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/ddark-settings.png&#34; alt=&#34;Table Dark&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/mdark-settings.png&#34; alt=&#34;Mobile Table Dark&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Settings Light&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/dlight-settings.png&#34; alt=&#34;Table Light&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/assets/mlight-settings.png&#34; alt=&#34;Mobile Table Light&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;The recommended installation method is Docker. To run the container via CLI, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -d \&#xA;  --name expenseowl \&#xA;  -p 8080:8080 \&#xA;  -v expenseowl:/app/data \&#xA;  tanq16/expenseowl:main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use Docker compose, use this YAML definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;  expenseowl:&#xA;    image: tanq16/expenseowl:main&#xA;    restart: unless-stopped&#xA;    ports:&#xA;      - 5006:8080 # change 5006 to what you want to expose on&#xA;    volumes:&#xA;      - /home/tanq/expenseowl:/app/data # change dir as needed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand this to see additional execution options&lt;/summary&gt; &#xA; &lt;h3&gt;Using the Binary or Building from Source&lt;/h3&gt; &#xA; &lt;p&gt;Download the appropriate binary from the project releases. The binary automatically sets up a &lt;code&gt;data&lt;/code&gt; directory in your CWD, and starts the app at &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;To build the binary yourself:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/tanq16/expenseowl.git &amp;amp;&amp;amp; \&#xA;cd expenseowl &amp;amp;&amp;amp; \&#xA;go build ./cmd/expenseowl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Kubernetes Deployment&lt;/h3&gt; &#xA; &lt;p&gt;This is a community-contributed Kubernetes spec. Treat it as a sample and review before deploying to your cluster. Read the &lt;a href=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/kubernetes/README.md&#34;&gt;associated readme&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Once deployed, use the web interface to do everything. Access it through your browser:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dashboard: &lt;code&gt;http://localhost:8080/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Table View: &lt;code&gt;http://localhost:8080/table&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Settings: &lt;code&gt;http://localhost:8080/settings&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This app does not include authentication, so deploy carefully. I don&#39;t want to add half-baked authentication, so use Authelia, or equivalent as needed. ExpenseOwl works well with a reverse proxy like Nginx Proxy Manager too and is intended for homelab use only.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Conventions&lt;/h3&gt; &#xA;&lt;p&gt;Since writing the app, I&#39;ve found a ton of ways applications handle expenses. Release v4.0 solidifies the conventions I will continue to maintain the app in.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expenses are categorized by a -ve value, while income or reimbursement (designated by the &lt;code&gt;Report as gain&lt;/code&gt; checkbox) are +ve&lt;/li&gt; &#xA; &lt;li&gt;Expense dates are stored as UTC strings in RFC3339 format, however, the frontend hides the time value from the user; users are meant to select a date, and the current local time is automatically added to the given date&lt;/li&gt; &#xA; &lt;li&gt;Future and recurring expenses extending into future dates are added immediately to the backend&lt;/li&gt; &#xA; &lt;li&gt;The primary way to use ExpenseOwl is to quick review the month&#39;s stats via the pie chart - this allows users to make a mental note and soft decision of where to spend money, without the effort of maintaining a budget&lt;/li&gt; &#xA; &lt;li&gt;Categories are meant to be used as a classification criteria - example, how much did I spend on food, groceries, and utilities, etc.&lt;/li&gt; &#xA; &lt;li&gt;Tags are optional and are meant to assign features and characteristics to expenses.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] While these conventions can change during the project&#39;s lifecycle, largely, the intention (stemming from the motivation to build ExpenseOwl) behind simple, manual, easy tracking will not change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;With the exception of &lt;a href=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/#data-backends&#34;&gt;Data backends&lt;/a&gt;, all configuration of ExpenseOwl happens via the application UI. The list of all such options available via the settings page (&lt;code&gt;/settings&lt;/code&gt; endpoint) is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Category Settings:&lt;/li&gt; &#xA; &lt;li&gt;Currency Symbol: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is a frontend symbol configuration on what symbol to use to show amount values&lt;/li&gt; &#xA;   &lt;li&gt;Each currency has its default behavior for using &lt;code&gt;,&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; as separators (and if it uses decimals or not)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start Date: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is a custom day of the month from when the expenses will be displayed&lt;/li&gt; &#xA;   &lt;li&gt;Example: setting it to 5 means, expenses for each month will be counted from 5th to next month&#39;s 4th&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Recurring Transactions: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A recurring transaction can be for an expense or an income (gain)&lt;/li&gt; &#xA;   &lt;li&gt;Given a value for number of occurences and a start date, the app will add the transactions accordingly&lt;/li&gt; &#xA;   &lt;li&gt;Recurring transactions will be listed at the bottom of the page and can be edited/removed (all or future only transactions)&lt;/li&gt; &#xA;   &lt;li&gt;Recurring transactions allow similar options as normal expenses - category, tags, amount, name&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Theme Settings: supports light and dark theme, with default behavior to adapt to system&lt;/li&gt; &#xA; &lt;li&gt;Import/Export Data: covered under &lt;a href=&#34;https://raw.githubusercontent.com/Tanq16/ExpenseOwl/main/#data-importexport&#34;&gt;Data Import/Export&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Data Backends&lt;/h3&gt; &#xA;&lt;p&gt;ExpenseOwl supports two data backends - JSON (default), and Postgres. Postgres was added with v4.0 of the app primarily for homelabbers to reuse their Postgres instances as needed for better backup compatibility.&lt;/p&gt; &#xA;&lt;p&gt;Ideally, you need not configure anything differently for the JSON backend. ExpenseOwl automatically creates the data directory and the &lt;code&gt;.json&lt;/code&gt; files. You may, however, want to mount a specific volume to &lt;code&gt;/app/data&lt;/code&gt; within the container for persistence.&lt;/p&gt; &#xA;&lt;p&gt;For configuring Postgres, use the following environment variables:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Sample Value&lt;/th&gt; &#xA;   &lt;th&gt;Details&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STORAGE_TYPE&lt;/td&gt; &#xA;   &lt;td&gt;postgres&lt;/td&gt; &#xA;   &lt;td&gt;defaults to &lt;code&gt;json&lt;/code&gt;, hence JSON backend is default&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STORAGE_URL&lt;/td&gt; &#xA;   &lt;td&gt;&#34;localhost:5432/expenseowldb&#34;&lt;/td&gt; &#xA;   &lt;td&gt;format - SERVER/DB - the sslmode value is set by the next variable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STORAGE_SSL&lt;/td&gt; &#xA;   &lt;td&gt;require&lt;/td&gt; &#xA;   &lt;td&gt;can be one of &lt;code&gt;disable&lt;/code&gt; (default), &lt;code&gt;verify-full&lt;/code&gt;, &lt;code&gt;verify-ca&lt;/code&gt;, or &lt;code&gt;require&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STORAGE_USER&lt;/td&gt; &#xA;   &lt;td&gt;testuser&lt;/td&gt; &#xA;   &lt;td&gt;the user to authenticate with your Postgres instance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STORAGE_PASS&lt;/td&gt; &#xA;   &lt;td&gt;testpassword&lt;/td&gt; &#xA;   &lt;td&gt;the password for the Postgres user&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The app has been tested with SSL mode for Postgres set to disable for simplicity.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] The environment variables can be set for using &lt;code&gt;-e&lt;/code&gt; in the command line or &lt;code&gt;environment&lt;/code&gt; in a compose stack.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Having learnt more Go, I introduced the Storage interface in v4.0, making it easy to add any storage backend by simply implementing the interface.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Data Import/Export&lt;/h3&gt; &#xA;&lt;p&gt;ExpenseOwl is meant to make things simple, and importing CSV abides by the same philosophy. ExpenseOwl will accept any CSV file as long as it contains the columns - &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;category&lt;/code&gt;, &lt;code&gt;amount&lt;/code&gt;, and &lt;code&gt;date&lt;/code&gt;. This is case-insensitive so &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;Name&lt;/code&gt; doesn&#39;t matter.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] This feature allows ExpenseOwl to use exported data from any tool as long as the required categories are present, making it insanely easy to shift from any provider.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] The recommended format for the date is RFC3339. Additionally, ExpenseOwl can ingest several other time formats, including a short, human written date like &lt;code&gt;2012/8/14&lt;/code&gt; (14th August 2012). HOWEVER !!! ExpenseOwl only ingests date in YYYY-MM-DD (this order). ExpenseOwl does NOT deal with MM/DD or DD/MM. Full 4 digit year comes first, followed by month, and lastly the date.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] ExpenseOwl goes through every row in the imported data, and will intelligently fail on rows that have invalid or absent data. There is a 10 millisecond delay per record to reduce disk/db overhead, so please allow appropriate time for ingestion (eg. ~10 seconds for 1000 records).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Data exported as CSV will include expense IDs, so when importing the same CSV file, IDs will be maintained and skipped appropriately.&lt;/p&gt; &#xA;&lt;p&gt;An &lt;code&gt;Import from ExpenseOwl v3.2-&lt;/code&gt; will be present for v4.X to allow pulling in data from past releases.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are welcome; please ensure they align with the project&#39;s philosophy of maintaining simplicity by strictly using the current tech stack (Go for backend; HTML, CSS, JS for frontend). It is intended for home lab use, i.e., a self-hosted first approach (containerized use). Consider the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Additions should have sensible defaults without breaking foundations&lt;/li&gt; &#xA; &lt;li&gt;Environment variables can be used for system configuration in container and binary&lt;/li&gt; &#xA; &lt;li&gt;Found a typo or need to ask a question? Please open an issue instead of a PR&lt;/li&gt; &#xA; &lt;li&gt;To add a new backend type (say SQL, NocoDB, etc.), a new file can be added in the backend that implements the Storage interface&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>