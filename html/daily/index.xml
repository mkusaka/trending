<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-26T01:36:00Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>18alantom/strawberry</title>
    <updated>2023-05-26T01:36:00Z</updated>
    <id>tag:github.com,2023-05-26:/18alantom/strawberry</id>
    <link href="https://github.com/18alantom/strawberry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zero-dependency, build-free framework for the artisanal web.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; markdown=&#34;1&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/18alantom/strawberry/assets/29507195/9cb6a348-3b02-4de7-be62-ee85cf594871&#34; alt=&#34;strawberry logo&#34; width=&#34;720&#34;&gt; &#xA; &lt;p&gt;Zero-dependency, build-free framework for the artisanal web.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://strawberry.quest&#34;&gt;Website&lt;/a&gt; · &lt;a href=&#34;https://18alan.space/posts/how-hard-is-it-to-build-a-frontend-framework.html&#34;&gt;How it works&lt;/a&gt; · &lt;a href=&#34;https://github.com/18alantom/strawberry/tree/main/docs&#34;&gt;Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Strawberry is in a very experimental phase; pre-alpha. Everything stated below works, but I am still figuring out the quickest and cleanest ways of doing things.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Seriously, another frontend framework?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Yes, but, Strawberry is not like the usual frontend-framework.&lt;/p&gt; &#xA;&lt;p&gt;It doesn&#39;t have any dependencies. It doesn&#39;t need a build-step to run. It&#39;s tiny, less than 3KB when gzipped. Yet it does a lot of the core things the big, spangly frameworks can do.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- Define Components --&amp;gt;&#xA;&amp;lt;template name=&#34;plum-p&#34;&amp;gt;&#xA;  &amp;lt;p style=&#34;color: plum&#34;&amp;gt;&amp;lt;slot /&amp;gt;&amp;lt;/p&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&amp;lt;!-- Initialize Strawberry --&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  const data = sb.init();&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;!-- Use Components --&amp;gt;&#xA;&amp;lt;plum-p sb-mark=&#34;message&#34;&amp;gt; A plum colored p element! &amp;lt;/plum-p&amp;gt;&#xA;&#xA;&amp;lt;!-- Dynamically Update Components --&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  data.message = &#39;Hello, World!&#39;;&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://strawberry.quest/#inventory-example&#34;&gt;Here&#39;s&lt;/a&gt; a live example from the website.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34; markdown=&#34;1&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;Index&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/18alantom/strawberry/main/#installation&#34;&gt;Installation&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/18alantom/strawberry/main/#features&#34;&gt;Features&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/18alantom/strawberry/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you wanna try it out, then run this 👇 command to setup a simple &lt;em&gt;starter&lt;/em&gt; page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -so- https://raw.githubusercontent.com/18alantom/strawberry/main/setup.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you wanna just use it straight away, copy this 👇 script tag in the head of your html file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/sberry@0.0.0-alpha.1/dist/sb.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;re are a few of its features:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reactivity&lt;/strong&gt;: change your data and the UI updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Composability&lt;/strong&gt;: create and use components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build-free&lt;/strong&gt;: doesn&#39;t require a build-step. Link or &lt;a href=&#34;https://unpkg.com/sberry@0.0.0-alpha.1/dist/sb.min.js&#34;&gt;copy the lib&lt;/a&gt; and you&#39;re ready to go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zero Dependencies&lt;/strong&gt;: has no dependencies. Uses WebAPIs for everything.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tiny&lt;/strong&gt;: &lt;a href=&#34;https://github.com/18alantom/strawberry/raw/main/index.ts&#34;&gt;source code&lt;/a&gt; is under LOC.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No VDOM&lt;/strong&gt;: directly updates the DOM.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Strawberry is and will be developed with these two hard constraints:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Zero dependencies.&lt;/li&gt; &#xA; &lt;li&gt;No build step required to run it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Other than this, there is also a soft constraint of keeping the source code light.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Here are a couple of simple examples of a few things that Strawberry can do right now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Basic Reactivity&lt;/strong&gt;: &lt;code&gt;innerText&lt;/code&gt; is updated when &lt;code&gt;data.message&lt;/code&gt; when is set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p sb-mark=&#34;message&#34;&amp;gt;Placeholder&amp;lt;/p&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;  data.message = &#39;Hello, Strawberry!&#39;;&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Computed Values&lt;/strong&gt;: &lt;code&gt;innerText&lt;/code&gt; is updated with the computed value &lt;code&gt;data.countMessage&lt;/code&gt; when &lt;code&gt;data.count&lt;/code&gt; is updated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p sb-mark=&#34;countMessage&#34;&amp;gt;Placeholder&amp;lt;/p&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;  data.count = 0;&#xA;  data.countMessage = () =&amp;gt; `The count is: ${data.count}`;&#xA;&#xA;  data.count += 1;&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Conditional Rendering&lt;/strong&gt;: &lt;code&gt;p&lt;/code&gt; is rendered only when &lt;code&gt;data.sayHi&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;template sb-if=&#34;sayHi&#34;&amp;gt;&#xA;  &amp;lt;p&amp;gt;Hi!&amp;lt;/p&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;  data.sayHi = true;&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Looping&lt;/strong&gt;: &lt;code&gt;ul&lt;/code&gt; is populated with &lt;code&gt;li&lt;/code&gt; when &lt;code&gt;data.list&lt;/code&gt; is set. &lt;code&gt;innerText&lt;/code&gt; of the &lt;code&gt;li&lt;/code&gt; are set from the list items.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ul sb-mark=&#34;list&#34; sb-child=&#34;li&#34;&amp;gt;&amp;lt;/ul&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;  data.list = [&#39;Strawberry&#39;, &#39;Mulberry&#39;, &#39;Raspberry&#39;];&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Templates&lt;/strong&gt;: On running &lt;code&gt;sb.register&lt;/code&gt;, the &lt;code&gt;red-p&lt;/code&gt; element is defined and can be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;template name=&#34;red-p&#34;&amp;gt;&#xA;  &amp;lt;p style=&#34;color: red&#34;&amp;gt;&amp;lt;slot /&amp;gt;&amp;lt;/p&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&amp;lt;red-p&amp;gt;Hi!&amp;lt;/red-p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. External Templates&lt;/strong&gt;: Templates can be defined in external files. They are loaded and registered using &lt;code&gt;sb.load&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;&#xA;  sb.load(&#39;./templates.html&#39;);&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;red-p&amp;gt;Hi!&amp;lt;/red-p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. Nested Templates&lt;/strong&gt;: Templates can be nested, named slots can be used to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- Blue H1 Template --&amp;gt;&#xA;&amp;lt;template name=&#34;blue-h1&#34;&amp;gt;&#xA;  &amp;lt;h1 style=&#34;color: blue&#34;&amp;gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&amp;lt;/h1&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&amp;lt;!-- Red P Template --&amp;gt;&#xA;&amp;lt;template name=&#34;red-p&#34;&amp;gt;&#xA;  &amp;lt;p style=&#34;color: red&#34;&amp;gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&amp;lt;/p&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&amp;lt;!-- Div Template using the above two --&amp;gt;&#xA;&amp;lt;template name=&#34;user-div&#34;&amp;gt;&#xA;  &amp;lt;div&amp;gt;&#xA;    &amp;lt;blue-h1&amp;gt;&#xA;      &amp;lt;slot name=&#34;name&#34; /&amp;gt;&#xA;    &amp;lt;/blue-h1&amp;gt;&#xA;    &amp;lt;red-p&amp;gt;&#xA;      &amp;lt;slot name=&#34;age&#34; /&amp;gt;&#xA;    &amp;lt;/red-p&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;  const data = sb.init();&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;body&amp;gt;&#xA;  &amp;lt;user-div sb-mark=&#34;user&#34;&amp;gt;&amp;lt;/user-div&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;  data.user = { name: &#39;Lin&#39;, age: 36 };&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Douglas Crockford on the XML of today&lt;/h2&gt; &#xA;&lt;p&gt;These are excerpts from the CoRecursive podcast on &lt;a href=&#34;https://corecursive.com/json-vs-xml-douglas-crockford/&#34;&gt;JSON vs XML&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It’s probably the JavaScript frameworks. They have gotten so big and so weird. People seem to love them. I don’t understand why.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;And on web APIs.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;...the browsers have actually gotten pretty good. The web standards thing have finally worked, and the web API is stable pretty much. Some of it’s still pretty stupid, but it works and it’s reliable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Read the transcript on &lt;a href=&#34;https://corecursive.com/json-vs-xml-douglas-crockford/#javascript-frameworks&#34;&gt;CoRecursive&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OWASP/www-project-top-10-for-large-language-model-applications</title>
    <updated>2023-05-26T01:36:00Z</updated>
    <id>tag:github.com,2023-05-26:/OWASP/www-project-top-10-for-large-language-model-applications</id>
    <link href="https://github.com/OWASP/www-project-top-10-for-large-language-model-applications" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OWASP Foundation Web Respository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;www-project-top-10-for-large-language-model-applications&lt;/h1&gt; &#xA;&lt;p&gt;OWASP Foundation Web Respository&lt;/p&gt; &#xA;&lt;h1&gt;OWASP Top 10 for Large Language Model Applications&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://owasp.org/projects/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/owasp-incubator-blue.svg?sanitize=true&#34; alt=&#34;OWASP Incubator&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg?sanitize=true&#34; alt=&#34;License: CC BY-SA 4.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the official repository for the OWASP Top 10 for Large Language Model Applications!&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The OWASP Top 10 for Large Language Model Applications is a standard awareness document for developers and web application security. It represents a broad consensus about the most critical security risks to Large Language Model (LLM) applications.&lt;/p&gt; &#xA;&lt;p&gt;Our mission is to make application security visible, so that people and organizations can make informed decisions about application security risks related to LLMs.&lt;/p&gt; &#xA;&lt;h2&gt;Key Focus&lt;/h2&gt; &#xA;&lt;p&gt;The primary aim of this project is to provide a comprehensible and adoptable guide to navigate the potential security risks in LLM applications. Our Top 10 list serves as a starting point for developers and security professionals who are new to this domain, and as a reference for those who are more experienced.&lt;/p&gt; &#xA;&lt;p&gt;The list includes, among others, vulnerability types like &#34;Prompt Injections&#34;, &#34;Data Leakage&#34;, &#34;Inadequate Sandboxing&#34;, &#34;Data Poisoning&#34;, and many more.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;The first version of this list was contributed by Steve Wilson of Contrast Security. We encourage the community to contribute and help improve the project. If you have any suggestions, feedback or want to help improve the list, feel free to open an issue or send a pull request.&lt;/p&gt; &#xA;&lt;p&gt;We have a working group channel on the &lt;a href=&#34;https://owasp.org/slack/invite&#34;&gt;OWASP Slack&lt;/a&gt;, so please sign up and then join us on the #project-t10-llm channel.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>