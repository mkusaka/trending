<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-05T01:34:05Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>woodchen-ink/openai-billing-query</title>
    <updated>2023-08-05T01:34:05Z</updated>
    <id>tag:github.com,2023-08-05:/woodchen-ink/openai-billing-query</id>
    <link href="https://github.com/woodchen-ink/openai-billing-query" rel="alternate"></link>
    <summary type="html">&lt;p&gt;单页面项目，批量可视化查询openai(chatgpt)余额，支持显示总量，已使用，剩余量，已用比例，到期时间，GPT-4，是否绑卡。This is a single-page project that enables batch visualization query for openai (chatgpt) balance. It supports displaying total amount, used amount, remaining amount, usage ratio, expiration time, GPT-4, and whether it is bound with a card.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openai-billing-query&lt;/h1&gt; &#xA;&lt;p&gt;批量可视化查询openai(chatgpt)余额，支持显示总量，已使用，剩余量，已用比例，到期时间，GPT-4，是否绑卡&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woodchen-ink/openai-billing-query/main/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Telegram交流群：&lt;a href=&#34;https://t.me/ai_cn2023&#34;&gt;https://t.me/ai_cn2023&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7月29日更新（点个star吧）&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;新增GPT-3.5查询、绑卡信息（人名和地址）、组织名称、邮箱、组织ID、是否有效；&lt;/li&gt; &#xA; &lt;li&gt;使用sk查询不再整体报错，而是展示可以查询到的内容；&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;sess查询示例（120刀4.0key）&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn-img.czl.net/2023/07/29/64c3ef5003257.png&#34; alt=&#34;1690562370550.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;sk查询示例(120刀4.0key)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn-img.czl.net/2023/07/29/64c3eefec26cd.png&#34; alt=&#34;1690562289330.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;sk查询示例（5刀未绑卡key）&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn-img.czl.net/2023/07/29/64c3ee9070310.png&#34; alt=&#34;1690562178945.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7月22日更新后，如要查看完整信息，需登录一次账号，F12查看sess码，使用sess码进行查询&lt;/h2&gt; &#xA;&lt;p&gt;7月22日更新后，已删除key校验规则，需使用sess码进行查询。使用key只能查询部分信息。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn-img.czl.net/2023/07/22/64bab4daba587.png&#34; alt=&#34;1689957580942.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SESS ID获取方法&lt;/h2&gt; &#xA;&lt;p&gt;请见我的个人博客，提供视频教程：&lt;a href=&#34;https://woodchen.ink/1266.html&#34;&gt;https://woodchen.ink/1266.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;支持自定义反代接口&lt;/h2&gt; &#xA;&lt;p&gt;在第361行添加自己的接口代码&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;option value=&#34;反代网址&#34;&amp;gt;【自定义名称】自定义名称&amp;lt;/option&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;反代代码示例&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/woodchen-ink/openai-billing-query/assets/95951386/0bcdb51b-de08-49bc-bd01-5bf731f53d02&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;怎么部署&lt;/h2&gt; &#xA;&lt;p&gt;下载index.html直接打开就行，除了背景图片，没有任何外部资源。&lt;/p&gt; &#xA;&lt;h2&gt;贡献列表&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;人员&lt;/th&gt; &#xA;   &lt;th&gt;贡献内容&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/qiyue-rgb&#34;&gt;qiyue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;技术协助&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🙊&lt;/td&gt; &#xA;   &lt;td&gt;cloudflare反代地址&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;广告&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chat.czl.net&#34;&gt;CZL Chat&lt;/a&gt;，稳定商业版AI服务。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oapi.czl.net&#34;&gt;CZLOapi&lt;/a&gt;，OPENAI代理服务，无需翻墙。&lt;/li&gt; &#xA; &lt;li&gt;个人博客：&lt;a href=&#34;https://woodchen.ink&#34;&gt;https://woodchen.ink&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>fadynakhla/dr-claude</title>
    <updated>2023-08-05T01:34:05Z</updated>
    <id>tag:github.com,2023-08-05:/fadynakhla/dr-claude</id>
    <link href="https://github.com/fadynakhla/dr-claude" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Anthropic Claude2 Hackathon:Building MCTS with Claude for optimal action prediction during patient/doctor interactions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dr-claude&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/fadynakhla/dr-claude/master/images/DrClaude.jpeg&#34; width=&#34;128&#34;&gt; &#xA;&lt;p&gt;A Next Best Action Engine to help healthcare professionals &#34;pathfind&#34; towards the most accurate diagnosis in the shortest possible time, optimizing patient outcomes and resource utilization. Combines the power of symbolic reasoning (AlphaGo-style MCTS) with LLMs (Dr Claude contextualization) and retrievals.&lt;/p&gt; &#xA;&lt;p&gt;We use a &lt;a href=&#34;https://people.dbmi.columbia.edu/~friedma/Projects/DiseaseSymptomKB/index.html&#34;&gt;Disease-Symptom Knowledge Database&lt;/a&gt; for Dr Claude to reason over.&lt;/p&gt; &#xA;&lt;p&gt;Third Place Winner 🥉 at the &lt;a href=&#34;https://claude2hackathon.devpost.com/&#34;&gt;Anthropic Claude 2 Hackathon&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;To-do:&lt;/h2&gt; &#xA;&lt;p&gt;All the code was written in 24 hours, so there is some general refactoring and features to polish up to make Dr Claude more robust.&lt;/p&gt; &#xA;&lt;p&gt;Immediate priorities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add non-websocket endpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve the symptom retriever model&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve efficiency of MCTS expansion step&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve prompts and abstract away underlying LLM&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Unit tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; General cleanup and refactoring!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Async MCTS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add: Dr Claude callback during MCTS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1. Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re using &lt;a href=&#34;https://python-poetry.org/docs/&#34;&gt;Poetry&lt;/a&gt; for managing dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;poetry install&lt;/code&gt; to install dependencies, then &lt;code&gt;make app&lt;/code&gt; to start the engine.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/fadynakhla/dr-claude/master/images/demo.png&#34; width=&#34;780&#34;&gt;</summary>
  </entry>
  <entry>
    <title>mixmark-io/turndown</title>
    <updated>2023-08-05T01:34:05Z</updated>
    <id>tag:github.com,2023-08-05:/mixmark-io/turndown</id>
    <link href="https://github.com/mixmark-io/turndown" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛏 An HTML to Markdown converter written in JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Turndown&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/domchristie/turndown&#34;&gt;&lt;img src=&#34;https://travis-ci.org/domchristie/turndown.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Convert HTML into Markdown with JavaScript.&lt;/p&gt; &#xA;&lt;h2&gt;Project Updates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;to-markdown&lt;/code&gt; has been renamed to Turndown. See the &lt;a href=&#34;https://github.com/domchristie/to-markdown/wiki/Migrating-from-to-markdown-to-Turndown&#34;&gt;migration guide&lt;/a&gt; for details.&lt;/li&gt; &#xA; &lt;li&gt;Turndown repository has changed its URL to &lt;a href=&#34;https://github.com/mixmark-io/turndown&#34;&gt;https://github.com/mixmark-io/turndown&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install turndown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/turndown/dist/turndown.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For usage with RequireJS, UMD versions are located in &lt;code&gt;lib/turndown.umd.js&lt;/code&gt; (for Node.js) and &lt;code&gt;lib/turndown.browser.umd.js&lt;/code&gt; for browser usage. These files are generated when the npm package is published. To generate them manually, clone this repo and run &lt;code&gt;npm run build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// For Node.js&#xA;var TurndownService = require(&#39;turndown&#39;)&#xA;&#xA;var turndownService = new TurndownService()&#xA;var markdown = turndownService.turndown(&#39;&amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turndown also accepts DOM nodes as input (either element nodes, document nodes, or document fragment nodes):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var markdown = turndownService.turndown(document.getElementById(&#39;content&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;Options can be passed in to the constructor on instantiation. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var turndownService = new TurndownService({ option: &#39;value&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Option&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Valid values&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;headingStyle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;setext&lt;/code&gt; or &lt;code&gt;atx&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;setext&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;hr&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Any &lt;a href=&#34;http://spec.commonmark.org/0.27/#thematic-breaks&#34;&gt;Thematic break&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;* * *&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bulletListMarker&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;-&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, or &lt;code&gt;*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;codeBlockStyle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;indented&lt;/code&gt; or &lt;code&gt;fenced&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;indented&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fence&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;```&lt;/code&gt; or &lt;code&gt;~~~&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;```&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;emDelimiter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;_&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;_&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;strongDelimiter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;**&lt;/code&gt; or &lt;code&gt;__&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;**&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;linkStyle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;inlined&lt;/code&gt; or &lt;code&gt;referenced&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;inlined&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;linkReferenceStyle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;full&lt;/code&gt;, &lt;code&gt;collapsed&lt;/code&gt;, or &lt;code&gt;shortcut&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;full&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;preformattedCode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt; or &lt;a href=&#34;https://github.com/lucthev/collapse-whitespace/issues/16&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Advanced Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Option&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Valid values&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;blankReplacement&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rule replacement function&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;See &lt;strong&gt;Special Rules&lt;/strong&gt; below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;keepReplacement&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rule replacement function&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;See &lt;strong&gt;Special Rules&lt;/strong&gt; below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;defaultReplacement&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rule replacement function&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;See &lt;strong&gt;Special Rules&lt;/strong&gt; below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Methods&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;addRule(key, rule)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;key&lt;/code&gt; parameter is a unique name for the rule for easy reference. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;turndownService.addRule(&#39;strikethrough&#39;, {&#xA;  filter: [&#39;del&#39;, &#39;s&#39;, &#39;strike&#39;],&#xA;  replacement: function (content) {&#xA;    return &#39;~&#39; + content + &#39;~&#39;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;addRule&lt;/code&gt; returns the &lt;code&gt;TurndownService&lt;/code&gt; instance for chaining.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;strong&gt;Extending with Rules&lt;/strong&gt; below.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;keep(filter)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Determines which elements are to be kept and rendered as HTML. By default, Turndown does not keep any elements. The filter parameter works like a rule filter (see section on filters belows). Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;turndownService.keep([&#39;del&#39;, &#39;ins&#39;])&#xA;turndownService.turndown(&#39;&amp;lt;p&amp;gt;Hello &amp;lt;del&amp;gt;world&amp;lt;/del&amp;gt;&amp;lt;ins&amp;gt;World&amp;lt;/ins&amp;gt;&amp;lt;/p&amp;gt;&#39;) // &#39;Hello &amp;lt;del&amp;gt;world&amp;lt;/del&amp;gt;&amp;lt;ins&amp;gt;World&amp;lt;/ins&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will render &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt; elements as HTML when converted.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;keep&lt;/code&gt; can be called multiple times, with the newly added keep filters taking precedence over older ones. Keep filters will be overridden by the standard CommonMark rules and any added rules. To keep elements that are normally handled by those rules, add a rule with the desired behaviour.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;keep&lt;/code&gt; returns the &lt;code&gt;TurndownService&lt;/code&gt; instance for chaining.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;remove(filter)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Determines which elements are to be removed altogether i.e. converted to an empty string. By default, Turndown does not remove any elements. The filter parameter works like a rule filter (see section on filters belows). Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;turndownService.remove(&#39;del&#39;)&#xA;turndownService.turndown(&#39;&amp;lt;p&amp;gt;Hello &amp;lt;del&amp;gt;world&amp;lt;/del&amp;gt;&amp;lt;ins&amp;gt;World&amp;lt;/ins&amp;gt;&amp;lt;/p&amp;gt;&#39;) // &#39;Hello World&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will remove &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; elements (and contents).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;remove&lt;/code&gt; can be called multiple times, with the newly added remove filters taking precedence over older ones. Remove filters will be overridden by the keep filters, standard CommonMark rules, and any added rules. To remove elements that are normally handled by those rules, add a rule with the desired behaviour.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;remove&lt;/code&gt; returns the &lt;code&gt;TurndownService&lt;/code&gt; instance for chaining.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;use(plugin|array)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use a plugin, or an array of plugins. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Import plugins from turndown-plugin-gfm&#xA;var turndownPluginGfm = require(&#39;turndown-plugin-gfm&#39;)&#xA;var gfm = turndownPluginGfm.gfm&#xA;var tables = turndownPluginGfm.tables&#xA;var strikethrough = turndownPluginGfm.strikethrough&#xA;&#xA;// Use the gfm plugin&#xA;turndownService.use(gfm)&#xA;&#xA;// Use the table and strikethrough plugins only&#xA;turndownService.use([tables, strikethrough])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;use&lt;/code&gt; returns the &lt;code&gt;TurndownService&lt;/code&gt; instance for chaining.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;strong&gt;Plugins&lt;/strong&gt; below.&lt;/p&gt; &#xA;&lt;h2&gt;Extending with Rules&lt;/h2&gt; &#xA;&lt;p&gt;Turndown can be extended by adding &lt;strong&gt;rules&lt;/strong&gt;. A rule is a plain JavaScript object with &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;replacement&lt;/code&gt; properties. For example, the rule for converting &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  filter: &#39;p&#39;,&#xA;  replacement: function (content) {&#xA;    return &#39;\n\n&#39; + content + &#39;\n\n&#39;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The filter selects &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements, and the replacement function returns the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; contents separated by two new lines.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;filter&lt;/code&gt; String|Array|Function&lt;/h3&gt; &#xA;&lt;p&gt;The filter property determines whether or not an element should be replaced with the rule&#39;s &lt;code&gt;replacement&lt;/code&gt;. DOM nodes can be selected simply using a tag name or an array of tag names:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;filter: &#39;p&#39;&lt;/code&gt; will select &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filter: [&#39;em&#39;, &#39;i&#39;]&lt;/code&gt; will select &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; elements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The tag names in the &lt;code&gt;filter&lt;/code&gt; property are expected in lowercase, regardless of their form in the document.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, the filter can be a function that returns a boolean depending on whether a given node should be replaced. The function is passed a DOM node as well as the &lt;code&gt;TurndownService&lt;/code&gt; options. For example, the following rule selects &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements (with an &lt;code&gt;href&lt;/code&gt;) when the &lt;code&gt;linkStyle&lt;/code&gt; option is &lt;code&gt;inlined&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;filter: function (node, options) {&#xA;  return (&#xA;    options.linkStyle === &#39;inlined&#39; &amp;amp;&amp;amp;&#xA;    node.nodeName === &#39;A&#39; &amp;amp;&amp;amp;&#xA;    node.getAttribute(&#39;href&#39;)&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;replacement&lt;/code&gt; Function&lt;/h3&gt; &#xA;&lt;p&gt;The replacement function determines how an element should be converted. It should return the Markdown string for a given node. The function is passed the node&#39;s content, the node itself, and the &lt;code&gt;TurndownService&lt;/code&gt; options.&lt;/p&gt; &#xA;&lt;p&gt;The following rule shows how &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; elements are converted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;rules.emphasis = {&#xA;  filter: [&#39;em&#39;, &#39;i&#39;],&#xA;&#xA;  replacement: function (content, node, options) {&#xA;    return options.emDelimiter + content + options.emDelimiter&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Special Rules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Blank rule&lt;/strong&gt; determines how to handle blank elements. It overrides every rule (even those added via &lt;code&gt;addRule&lt;/code&gt;). A node is blank if it only contains whitespace, and it&#39;s not an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; or a void element. Its behaviour can be customised using the &lt;code&gt;blankReplacement&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Keep rules&lt;/strong&gt; determine how to handle the elements that should not be converted, i.e. rendered as HTML in the Markdown output. By default, no elements are kept. Block-level elements will be separated from surrounding content by blank lines. Its behaviour can be customised using the &lt;code&gt;keepReplacement&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remove rules&lt;/strong&gt; determine which elements to remove altogether. By default, no elements are removed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default rule&lt;/strong&gt; handles nodes which are not recognised by any other rule. By default, it outputs the node&#39;s text content (separated by blank lines if it is a block-level element). Its behaviour can be customised with the &lt;code&gt;defaultReplacement&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h3&gt;Rule Precedence&lt;/h3&gt; &#xA;&lt;p&gt;Turndown iterates over the set of rules, and picks the first one that matches the &lt;code&gt;filter&lt;/code&gt;. The following list describes the order of precedence:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Blank rule&lt;/li&gt; &#xA; &lt;li&gt;Added rules (optional)&lt;/li&gt; &#xA; &lt;li&gt;Commonmark rules&lt;/li&gt; &#xA; &lt;li&gt;Keep rules&lt;/li&gt; &#xA; &lt;li&gt;Remove rules&lt;/li&gt; &#xA; &lt;li&gt;Default rule&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;The plugin API provides a convenient way for developers to apply multiple extensions. A plugin is just a function that is called with the &lt;code&gt;TurndownService&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;h2&gt;Escaping Markdown Characters&lt;/h2&gt; &#xA;&lt;p&gt;Turndown uses backslashes (&lt;code&gt;\&lt;/code&gt;) to escape Markdown characters in the HTML input. This ensures that these characters are not interpreted as Markdown when the output is compiled back to HTML. For example, the contents of &lt;code&gt;&amp;lt;h1&amp;gt;1. Hello world&amp;lt;/h1&amp;gt;&lt;/code&gt; needs to be escaped to &lt;code&gt;1\. Hello world&lt;/code&gt;, otherwise it will be interpreted as a list item rather than a heading.&lt;/p&gt; &#xA;&lt;p&gt;To avoid the complexity and the performance implications of parsing the content of every HTML element as Markdown, Turndown uses a group of regular expressions to escape potential Markdown syntax. As a result, the escaping rules can be quite aggressive.&lt;/p&gt; &#xA;&lt;h3&gt;Overriding &lt;code&gt;TurndownService.prototype.escape&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you are confident in doing so, you may want to customise the escaping behaviour to suit your needs. This can be done by overriding &lt;code&gt;TurndownService.prototype.escape&lt;/code&gt;. &lt;code&gt;escape&lt;/code&gt; takes the text of each HTML element and should return a version with the Markdown characters escaped.&lt;/p&gt; &#xA;&lt;p&gt;Note: text in code elements is never passed to&lt;code&gt;escape&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;turndown is copyright © 2017+ Dom Christie and released under the MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>