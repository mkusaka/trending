<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-15T01:36:37Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dromara/payment-spring-boot</title>
    <updated>2023-03-15T01:36:37Z</updated>
    <id>tag:github.com,2023-03-15:/dromara/payment-spring-boot</id>
    <link href="https://github.com/dromara/payment-spring-boot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;微信支付V3支付，支持微信优惠券，代金券、商家券、公众号支付、微信小程序支付、分账、支付分、商家券、合单支付、先享卡、电商收付通等全部微信支付功能API，同时满足服务商、商户开发需求。一键集成，上手快，欢迎star。&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; style=&#34;margin-bottom: 10px&#34;&gt;&#xA; &lt;h1&gt;最全最好用的微信支付V3 Spring Boot 组件&lt;/h1&gt;&#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dromara/payment-spring-boot/raw/release/LICENSE&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/github/license/dromara/payment-spring-boot&#34;&gt; &lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://felord.cn&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/java-8-red&#34;&gt; &lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://spring.io&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/spring%20boot-2.4%2B-brightgreen&#34;&gt; &lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://mvnrepository.com/artifact/cn.felord/payment-spring-boot&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/maven-central/v/cn.felord/payment-spring-boot.svg?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dromara/payment-spring-boot&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/github/stars/dromara/payment-spring-boot?style=social&#34;&gt; &lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://gitee.com/dromara/payment-spring-boot/stargazers&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://gitee.com/felord/payment-spring-boot/badge/star.svg?theme=white&#34;&gt; &lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://work.weixin.qq.com/kfid/kfc9d9d759f27f087e1&#34;&gt; &lt;img alt=&#34;点击立即微信咨询&#34; src=&#34;https://img.shields.io/badge/%E7%82%B9%E5%87%BB-%E5%BE%AE%E4%BF%A1%E5%92%A8%E8%AF%A2-brightgreen&#34;&gt; &lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=qRTKHWY0&#34;&gt; &lt;img alt=&#34;点击加入QQ交流群&#34; src=&#34;https://img.shields.io/badge/QQ%E4%BA%A4%E6%B5%81%E7%BE%A4-945342113-ff69b4&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;如果你感觉这个项目不错，请点击右上角的Star以鼓励作者，谢谢。&lt;/p&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;Java微信支付V3支付Spring Boot Starter，支持微信优惠券，代金券、商家券、智慧商圈、商家转账到零钱、公众号支付、微信小程序支付、分账、支付分、商家券、合单支付、先享卡、电商收付通等全部微信支付功能API，同时满足多个服务商、多个商户开发需求。一键集成，屏蔽了复杂度，API友好，上手快，欢迎star。&lt;/p&gt; &#xA;&lt;h2&gt;Maven 最新中央仓库坐标&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;cn.felord&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;payment-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.0.17.RELEASE&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JDK问题&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;推荐使用Open JDK&lt;/strong&gt;，原因参见&lt;a href=&#34;https://github.com/dromara/payment-spring-boot/issues/5&#34;&gt;FBI Warning&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;文档地址&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dromara.github.io/payment-spring-boot&#34;&gt;payment-spring-boot GitHub文档&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API清单&lt;/h2&gt; &#xA;&lt;p&gt;目前已经实现绝大部分微信支付直连商户和服务商的接口，具体的API明细可查看&lt;a href=&#34;https://dromara.github.io/payment-spring-boot/#/wechat_v3_api&#34;&gt;API清单&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;随着版本迭代功能会增加，也可通过API注册表类&lt;code&gt;WechatPayV3Type&lt;/code&gt;进行API接口检索。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;CHANGELOG&lt;/h2&gt; &#xA;&lt;p&gt;更新日志&lt;a href=&#34;https://dromara.github.io/payment-spring-boot/#/changelog&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用入门&lt;/h2&gt; &#xA;&lt;h3&gt;集成配置&lt;/h3&gt; &#xA;&lt;p&gt;关于集成配置请详细阅读&lt;a href=&#34;https://dromara.github.io/payment-spring-boot&#34;&gt;payment-spring-boot GitHub文档&lt;/a&gt; 中&lt;a href=&#34;https://dromara.github.io/payment-spring-boot/#/quick_start&#34;&gt;快速接入&lt;/a&gt;章节&lt;/p&gt; &#xA;&lt;h3&gt;调用示例&lt;/h3&gt; &#xA;&lt;h4&gt;开启支付&lt;/h4&gt; &#xA;&lt;p&gt;需要手动通过&lt;code&gt;@EnableMobilePay&lt;/code&gt;注解开启支付&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import cn.felord.payment.autoconfigure.EnableMobilePay;&#xA;import org.springframework.context.annotation.Configuration;&#xA;&#xA;@EnableMobilePay&#xA;@Configuration&#xA;public class PayConfig {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;支付接口调用&lt;/h4&gt; &#xA;&lt;p&gt;这里简单以小程序支付为例，写了一个Spring MVC 控制器，在实践中建议对&lt;code&gt;WechatApiProvider&lt;/code&gt;进行二次封装作服务层调用&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import cn.felord.payment.wechat.enumeration.TradeBillType;&#xA;import cn.felord.payment.wechat.v3.WechatApiProvider;&#xA;import cn.felord.payment.wechat.v3.WechatDirectPayApi;&#xA;import cn.felord.payment.wechat.v3.model.*;&#xA;import com.fasterxml.jackson.databind.node.ObjectNode;&#xA;import org.springframework.beans.factory.annotation.Autowired;&#xA;import org.springframework.context.annotation.Profile;&#xA;import org.springframework.core.io.Resource;&#xA;import org.springframework.http.ResponseEntity;&#xA;import org.springframework.web.bind.annotation.*;&#xA;&#xA;import java.time.LocalDate;&#xA;import java.time.Month;&#xA;&#xA;/**&#xA; * 支付接口开发样例，以小程序支付为例.&#xA; */&#xA;@Profile({&#34;wechat&#34;, &#34;dev&#34;})&#xA;@RestController&#xA;@RequestMapping(&#34;/marketing&#34;)&#xA;public class PayController {&#xA;    @Autowired&#xA;    private WechatApiProvider wechatApiProvider;&#xA;    String TENANT_ID = &#34;mobile&#34;;&#xA;&#xA;    /**&#xA;     * 总流程建议为 生成商品订单 -&amp;gt; 生成对应的支付订单 -&amp;gt; 支付操作 -&amp;gt; 支付结果回调更新 -&amp;gt; 结束&#xA;     * &amp;lt;p&amp;gt;&#xA;     * 此处建议在商品订单生成之后调用&#xA;     *&#xA;     * @param orderId 商品订单id&#xA;     * @return the object node&#xA;     */&#xA;    @PostMapping(&#34;/js&#34;)&#xA;    public ObjectNode js(@RequestParam String orderId) {&#xA;&#xA;        //TODO&#xA;        // 查询该orderId下是否生成了支付订单&#xA;        // 如果没有&#xA;        // 新增支付订单存入数据库 并标明支付状态为【待支付】&#xA;        // 根据新生成的支付订单信息向微信支付发起支付 并根据返回结果进行处理&#xA;        // 如果有状态为待支付&#xA;        // 根据待支付订单信息向微信支付发起支付 并根据返回结果进行处理&#xA;        // 如果有状态为待支付之外的状态&#xA;        // 根据产品的业务设计自行实现&#xA;        // 支付状态更新逻辑在【回调接口 /wxpay/callbacks/transaction】中处理  需要幂等处理&#xA;&#xA;        // 开发时需要指定使用的商户租户配置 这里为 mobile 请参考 application-wechat.yml&#xA;&#xA;&#xA;        PayParams payParams = new PayParams();&#xA;&#xA;        payParams.setDescription(&#34;felord.cn&#34;);&#xA;        //&#xA;        // 商户侧唯一订单号 建议为商户侧支付订单号 订单表主键 或者唯一标识字段&#xA;        payParams.setOutTradeNo(&#34;X135423420201521613448&#34;);&#xA;        // 需要定义回调通知&#xA;        payParams.setNotifyUrl(&#34;/wxpay/callbacks/transaction&#34;);&#xA;        Amount amount = new Amount();&#xA;        amount.setTotal(100);&#xA;        payParams.setAmount(amount);&#xA;        // 此类支付  Payer 必传  且openid需要同appid有绑定关系 具体去看文档&#xA;        Payer payer = new Payer();&#xA;        payer.setOpenid(&#34;ooadI5kQYrrCqpgbisvC8bEw_oUc&#34;);&#xA;        payParams.setPayer(payer);&#xA;&#xA;        return wechatApiProvider.directPayApi(TENANT_ID)&#xA;                .jsPay(payParams)&#xA;                .getBody();&#xA;    }&#xA;&#xA;&#xA;    /**&#xA;     * 下载对账单 如果要解析内容的话自行实现&#xA;     *&#xA;     * @return the response entity&#xA;     */&#xA;    @GetMapping(&#34;/tradebill&#34;)&#xA;    public ResponseEntity&amp;lt;Resource&amp;gt; download() {&#xA;        WechatDirectPayApi wechatDirectPayApi = wechatApiProvider.directPayApi(TENANT_ID);&#xA;&#xA;        TradeBillParams tradeBillParams = new TradeBillParams();&#xA;        tradeBillParams.setBillDate(LocalDate.of(2021, Month.MAY, 20));&#xA;        tradeBillParams.setBillType(TradeBillType.ALL);&#xA;        return wechatDirectPayApi.downloadTradeBill(tradeBillParams);&#xA;    }&#xA;&#xA;    /**&#xA;     * 下载申请资金账单  如果要解析内容的话自行实现&#xA;     *&#xA;     * @return the response entity&#xA;     */&#xA;    @GetMapping(&#34;/fundflowbill&#34;)&#xA;    public ResponseEntity&amp;lt;Resource&amp;gt; fundFlowBill() {&#xA;        WechatDirectPayApi wechatDirectPayApi = wechatApiProvider.directPayApi(TENANT_ID);&#xA;&#xA;        FundFlowBillParams fundFlowBillParams = new FundFlowBillParams();&#xA;        fundFlowBillParams.setBillDate(LocalDate.of(2021, Month.MAY, 20));&#xA;&#xA;        return wechatDirectPayApi.downloadFundFlowBill(fundFlowBillParams);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;回调示例&lt;/h4&gt; &#xA;&lt;p&gt;回调可通过以下示例实现，多租户的回调可将租户ID&lt;code&gt;tenantId&lt;/code&gt;作为路径参数来实现&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import cn.felord.payment.wechat.v3.WechatApiProvider;&#xA;import cn.felord.payment.wechat.v3.WechatMarketingFavorApi;&#xA;import cn.felord.payment.wechat.v3.WechatPayCallback;&#xA;import cn.felord.payment.wechat.v3.model.ResponseSignVerifyParams;&#xA;import lombok.SneakyThrows;&#xA;import org.springframework.beans.factory.annotation.Autowired;&#xA;import org.springframework.context.annotation.Profile;&#xA;import org.springframework.web.bind.annotation.PostMapping;&#xA;import org.springframework.web.bind.annotation.RequestHeader;&#xA;import org.springframework.web.bind.annotation.RequestMapping;&#xA;import org.springframework.web.bind.annotation.RestController;&#xA;&#xA;import javax.servlet.http.HttpServletRequest;&#xA;import java.util.Map;&#xA;import java.util.stream.Collectors;&#xA;&#xA;/**&#xA; * 注意为了演示该配置在使用微信配置application-wechat.yaml才生效&#xA; * &amp;lt;p&amp;gt;&#xA; * 务必保证回调接口的幂等性&#xA; * &amp;lt;p&amp;gt;&#xA; * 微信回调控制器，当支付成功、代金券核销成功后，微信支付服务器会通过回调进行通知商户侧。&#xA; * 商户侧可以根据微信的回调通知进行支付的后续处理，例如支付状态的变更等等。&#xA; * 需要注意的是回调接口需要白名单放行。&#xA; * &amp;lt;p&amp;gt;&#xA; * 开发者只需要编写对结果的{@link java.util.function.Consumer}即可。&#xA; * &amp;lt;p&amp;gt;&#xA; * 请注意：返回的格格式必须是{@link WechatPayCallback} 给出的格式，不能被包装和更改，切记！&#xA; * @author felord.cn&#xA; * @since 1.0.0.RELEASE&#xA; */&#xA;@Profile({&#34;wechat&#34;, &#34;dev&#34;})&#xA;@RestController&#xA;@RequestMapping(&#34;/wxpay/callbacks&#34;)&#xA;public class CallbackController {&#xA;    private static final String TENANT_ID = &#34;mobile&#34;;&#xA;    @Autowired&#xA;    private WechatApiProvider wechatApiProvider;&#xA;&#xA;&#xA;    /**&#xA;     * 代金券核销通知.&#xA;     * &amp;lt;p&amp;gt;&#xA;     * 需要手动调用{@link WechatMarketingFavorApi#setMarketingFavorCallback(String)} 设置，一次性操作!&#xA;     *&#xA;     * @param wechatpaySerial    the wechatpay serial&#xA;     * @param wechatpaySignature the wechatpay signature&#xA;     * @param wechatpayTimestamp the wechatpay timestamp&#xA;     * @param wechatpayNonce     the wechatpay nonce&#xA;     * @param request            the request&#xA;     * @return the map&#xA;     */&#xA;    @SneakyThrows&#xA;    @PostMapping(&#34;/coupon&#34;)&#xA;    public Map&amp;lt;String, ?&amp;gt; couponCallback(&#xA;            @RequestHeader(&#34;Wechatpay-Serial&#34;) String wechatpaySerial,&#xA;            @RequestHeader(&#34;Wechatpay-Signature&#34;) String wechatpaySignature,&#xA;            @RequestHeader(&#34;Wechatpay-Timestamp&#34;) String wechatpayTimestamp,&#xA;            @RequestHeader(&#34;Wechatpay-Nonce&#34;) String wechatpayNonce,&#xA;            HttpServletRequest request) {&#xA;        String body = request.getReader().lines().collect(Collectors.joining());&#xA;        // 对请求头进行验签 以确保是微信服务器的调用&#xA;        ResponseSignVerifyParams params = new ResponseSignVerifyParams();&#xA;        params.setWechatpaySerial(wechatpaySerial);&#xA;        params.setWechatpaySignature(wechatpaySignature);&#xA;        params.setWechatpayTimestamp(wechatpayTimestamp);&#xA;        params.setWechatpayNonce(wechatpayNonce);&#xA;        params.setBody(body);&#xA;        return wechatApiProvider.callback(TENANT_ID).couponCallback(params, data -&amp;gt; {&#xA;            //TODO 对回调解析的结果进行消费  需要保证消费的幂等性 微信有可能多次调用此接口&#xA;        });&#xA;    }&#xA;&#xA;    /**&#xA;     * 微信支付成功回调.&#xA;     * &amp;lt;p&amp;gt;&#xA;     * 无需开发者判断，只有扣款成功微信才会回调此接口&#xA;     *&#xA;     * @param wechatpaySerial    the wechatpay serial&#xA;     * @param wechatpaySignature the wechatpay signature&#xA;     * @param wechatpayTimestamp the wechatpay timestamp&#xA;     * @param wechatpayNonce     the wechatpay nonce&#xA;     * @param request            the request&#xA;     * @return the map&#xA;     */&#xA;    @SneakyThrows&#xA;    @PostMapping(&#34;/transaction&#34;)&#xA;    public Map&amp;lt;String, ?&amp;gt; transactionCallback(&#xA;            @RequestHeader(&#34;Wechatpay-Serial&#34;) String wechatpaySerial,&#xA;            @RequestHeader(&#34;Wechatpay-Signature&#34;) String wechatpaySignature,&#xA;            @RequestHeader(&#34;Wechatpay-Timestamp&#34;) String wechatpayTimestamp,&#xA;            @RequestHeader(&#34;Wechatpay-Nonce&#34;) String wechatpayNonce,&#xA;            HttpServletRequest request) {&#xA;        String body = request.getReader().lines().collect(Collectors.joining());&#xA;        // 对请求头进行验签 以确保是微信服务器的调用&#xA;        ResponseSignVerifyParams params = new ResponseSignVerifyParams();&#xA;        params.setWechatpaySerial(wechatpaySerial);&#xA;        params.setWechatpaySignature(wechatpaySignature);&#xA;        params.setWechatpayTimestamp(wechatpayTimestamp);&#xA;        params.setWechatpayNonce(wechatpayNonce);&#xA;        params.setBody(body);&#xA;        return wechatApiProvider.callback(TENANT_ID).transactionCallback(params, data -&amp;gt; {&#xA;            //TODO 对回调解析的结果进行消费  需要保证消费的幂等性 微信有可能多次调用此接口&#xA;        });&#xA;    }&#xA;&#xA;    /**&#xA;     * 微信合单支付成功回调.&#xA;     * &amp;lt;p&amp;gt;&#xA;     * 无需开发者判断，只有扣款成功微信才会回调此接口&#xA;     *&#xA;     * @param wechatpaySerial    the wechatpay serial&#xA;     * @param wechatpaySignature the wechatpay signature&#xA;     * @param wechatpayTimestamp the wechatpay timestamp&#xA;     * @param wechatpayNonce     the wechatpay nonce&#xA;     * @param request            the request&#xA;     * @return the map&#xA;     */&#xA;    @SneakyThrows&#xA;    @PostMapping(&#34;/combine_transaction&#34;)&#xA;    public Map&amp;lt;String, ?&amp;gt; combineTransactionCallback(&#xA;            @RequestHeader(&#34;Wechatpay-Serial&#34;) String wechatpaySerial,&#xA;            @RequestHeader(&#34;Wechatpay-Signature&#34;) String wechatpaySignature,&#xA;            @RequestHeader(&#34;Wechatpay-Timestamp&#34;) String wechatpayTimestamp,&#xA;            @RequestHeader(&#34;Wechatpay-Nonce&#34;) String wechatpayNonce,&#xA;            HttpServletRequest request) {&#xA;        String body = request.getReader().lines().collect(Collectors.joining());&#xA;        // 对请求头进行验签 以确保是微信服务器的调用&#xA;        ResponseSignVerifyParams params = new ResponseSignVerifyParams();&#xA;        params.setWechatpaySerial(wechatpaySerial);&#xA;        params.setWechatpaySignature(wechatpaySignature);&#xA;        params.setWechatpayTimestamp(wechatpayTimestamp);&#xA;        params.setWechatpayNonce(wechatpayNonce);&#xA;        params.setBody(body);&#xA;        return wechatApiProvider.callback(TENANT_ID).combineTransactionCallback(params, data -&amp;gt; {&#xA;            //TODO 对回调解析的结果进行消费  需要保证消费的幂等性 微信有可能多次调用此接口&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;开源协议&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Apache 2.0&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;仓库地址&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dromara/payment-spring-boot&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/dromara/payment-spring-boot&#34;&gt;Gitee&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;QQ交流群&lt;/h2&gt; &#xA;&lt;p&gt;为了交流解惑，新建QQ群，可通过扫码进入。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dromara/payment-spring-boot/release/docs/img/qqun.png&#34; alt=&#34;QQ交流群&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gurusabarish/hugo-profile</title>
    <updated>2023-03-15T01:36:37Z</updated>
    <id>tag:github.com,2023-03-15:/gurusabarish/hugo-profile</id>
    <link href="https://github.com/gurusabarish/hugo-profile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A highly customizable and mobile first Hugo template for personal portfolio and blog.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hugo Profile | &lt;a href=&#34;https://github.com/gurusabarish/hugo-profile/wiki&#34;&gt;Wiki Page&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?text=Wow:&amp;amp;url=https%3A%2F%2Fgithub.com%2Fgurusabarish%2Fhugo-profile&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url?label=Tweet&amp;amp;style=social&amp;amp;url=https%3A%2F%2Fgithub.com%2Fgurusabarish%2Fhugo-profile&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gurusabarish/hugo-profile/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/gurusabarish/hugo-profile?style=plastic&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gurusabarish/hugo-profile/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/gurusabarish/hugo-profile?style=plastic&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlify.com/sites/hugo-profile/deploys&#34;&gt;&lt;img src=&#34;https://api.netlify.com/api/v1/badges/5c1dcb34-cada-4c80-82b7-cfdbdbd7c774/deploy-status&#34; alt=&#34;Netlify Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/gurusabarish/hugo-profile?include_prereleases&#34; alt=&#34;Latest Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/gurusabarish/hugo-profile&#34; alt=&#34;Last Commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/gurusabarish/hugo-profile?color=important&#34; alt=&#34;Open Issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr/gurusabarish/hugo-profile?color=yellowgreen&#34; alt=&#34;Open Pull Requests&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/gurusabarish/hugo-profile&#34; alt=&#34;License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A high performance and mobile first hugo template for personal portfolio and blog&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example Site: &lt;a href=&#34;https://hugo-profile.netlify.app&#34;&gt;hugo-profile.netlify.app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully Responsive&lt;/li&gt; &#xA; &lt;li&gt;Minimalist Design&lt;/li&gt; &#xA; &lt;li&gt;SEO Friendly.&lt;/li&gt; &#xA; &lt;li&gt;Light/Dark/auto&lt;/li&gt; &#xA; &lt;li&gt;Taxonomies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gurusabarish/hugo-profile/wiki/Color-Customization&#34;&gt;Color customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Analytics Support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/internal/#google-analytics&#34;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Comment Support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gohugo.io/content-management/comments/&#34;&gt;Disqus&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://formspree.io/&#34;&gt;FormSpree&lt;/a&gt; for submitting &#34;Contact me&#34; form&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Technology used: Bootstrap, fontawesome&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hugo Version 0.87.0 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to use this template&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gurusabarish/hugo-profile/master/#Hugo-theme&#34;&gt;Hugo theme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gurusabarish/hugo-profile/master/#Direct-deployment-using-netlify&#34;&gt;Direct deployment using netlify&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gurusabarish/hugo-profile/wiki&#34;&gt;For more details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hugo theme&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Hugo and create a site using &lt;code&gt;hugo new site my-site -f=yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone this repo inside your themes folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd themes&#xA;git clone https://github.com/gurusabarish/hugo-profile.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create config.yaml (you can use &lt;code&gt;config.toml&lt;/code&gt; too) inside root folder&lt;/li&gt; &#xA; &lt;li&gt;Setup the configurations in &lt;code&gt;config.yaml&lt;/code&gt;. &lt;a href=&#34;https://github.com/gurusabarish/hugo-profile/raw/master/exampleSite/config.yaml&#34;&gt;reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You should have the mentioned (&lt;em&gt;inside the config file&lt;/em&gt;) images in static folder to use them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details: &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Hugo&#39;s official docs&lt;/a&gt;, &lt;a href=&#34;https://www.mikedane.com/static-site-generators/hugo/content-organization/&#34;&gt;content management&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Direct deployment using netlify&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this repo or create new repo using &lt;code&gt;use this template&lt;/code&gt; button and connect repo to netlify.&lt;/li&gt; &#xA; &lt;li&gt;whenever you customize the files exampleSite folder, netlify will automatically deploy your changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details: &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-netlify/&#34;&gt;host on netlify&lt;/a&gt;, &lt;a href=&#34;https://www.mikedane.com/static-site-generators/hugo/content-organization/&#34;&gt;content management&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Deployment&lt;/h1&gt; &#xA;&lt;p&gt;Run &lt;code&gt;hugo&lt;/code&gt;. It will generate a folder called public. You can use the files inside public folder for deployment. You should delete the public folder for each time when you are using &lt;code&gt;hugo&lt;/code&gt; commend.&lt;/p&gt; &#xA;&lt;h1&gt;Issues&lt;/h1&gt; &#xA;&lt;p&gt;If you have a question, please &lt;a href=&#34;https://github.com/gurusabarish/hugo-profile/issues&#34;&gt;open an issue&lt;/a&gt; for help and to help those who come after you. The more information you can provide, the better!&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions, issues, and feature requests are welcome! For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Licensed under &lt;a href=&#34;https://raw.githubusercontent.com/gurusabarish/hugo-profile/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;🤝 Support&lt;/h1&gt; &#xA;&lt;p&gt;Give a ⭐️ or buy me a &lt;del&gt;&lt;code&gt;coffee&lt;/code&gt;&lt;/del&gt; tea if you like this project!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/Q5Q7BFFGU&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/gurusabarish&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; height=&#34;40&#34; width=&#34;145&#34; alt=&#34;Buy Me A Coffee&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>