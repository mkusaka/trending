<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-19T01:37:56Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>retrohacker/template</title>
    <updated>2023-03-19T01:37:56Z</updated>
    <id>tag:github.com,2023-03-19:/retrohacker/template</id>
    <link href="https://github.com/retrohacker/template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple framework for webapps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Template&lt;/h1&gt; &#xA;&lt;p&gt;Template is a simple JS framework for creating interactive applications.&lt;/p&gt; &#xA;&lt;p&gt;It focuses on using web-native patterns.&lt;/p&gt; &#xA;&lt;p&gt;Calling it a framework is a bit of an exaggeration, it&#39;s a single &lt;code&gt;class&lt;/code&gt; that manages HTML &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;p&gt;The entire &#34;framework&#34; is here: &lt;a href=&#34;https://raw.githubusercontent.com/retrohacker/template/main/template.js&#34;&gt;./template.js&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Your Hello World example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE &amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;script src=&#34;./template.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body&amp;gt;&#xA;    &amp;lt;div id=&#34;app&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;    &amp;lt;template id=&#34;HelloWorld&#34;&amp;gt;&#xA;      &amp;lt;div class=&#34;hello-world&#34;&amp;gt;&#xA;        &amp;lt;h1 class=&#34;message&#34;&amp;gt;&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/template&amp;gt;&#xA;    &amp;lt;script&amp;gt;&#xA;      class HelloWorld extends Template {&#xA;        constructor() {&#xA;          // First argument is the id of the template&#xA;          super(&#34;HelloWorld&#34;);&#xA;          // fragment contains the hydrated template&#xA;          // We can use it to query for child nodes, in this case: class=&#34;message&#34;&#xA;          // Anything you want to update during runtime should be stored on &#34;this&#34;&#xA;          this.message = this.fragment.querySelector(&#34;.message&#34;);&#xA;        }&#xA;        setMessage(msg) {&#xA;          // Update the content of &amp;lt;h1 class=&#34;message&#34;&amp;gt;&#xA;          this.message.innerText = msg;&#xA;        }&#xA;      }&#xA;      // Get the div we want to mount into&#xA;      const app = document.getElementById(&#34;app&#34;);&#xA;      // Create an instance of our HelloWorld component&#xA;      const helloworld = new HelloWorld();&#xA;      // Mount our component into the dom&#xA;      helloworld.mount(app);&#xA;      // Set our message&#xA;      helloworld.setMessage(&#34;Hello Template!&#34;);&#xA;    &amp;lt;/script&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Build process&lt;/h1&gt; &#xA;&lt;p&gt;You&#39;ll find that your &lt;code&gt;index.html&lt;/code&gt; file grows pretty quick when using Template.&lt;/p&gt; &#xA;&lt;p&gt;The fix is easy. First, create a directory called &lt;code&gt;app&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then create the files that make up our &lt;code&gt;index.html&lt;/code&gt; &#34;template&#34;:&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./app/pre-css.html&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;script src=&#34;./template.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;    &amp;lt;style&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;./app/pre-template.html&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;    &amp;lt;/style&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body&amp;gt;&#xA;    &amp;lt;div id=&#34;app&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;./app/pre-js.html&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;    &amp;lt;script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;./app/post-js.html&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;    &amp;lt;/script&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you look at the files above, we&#39;ve just split a standard &lt;code&gt;index.html&lt;/code&gt; file up into chunks.&lt;/p&gt; &#xA;&lt;p&gt;Now we use this little shell script to &#34;build&#34; our app by injecting our files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat ./app/pre-css.html &amp;gt; index.html&#xA;# Inject all of our CSS into the page&#xA;cat ./app/**/*.css &amp;gt; index.html&#xA;cat ./app/pre-template.html &amp;gt;&amp;gt; index.html&#xA;# Inject all of our HTML into the pa ge&#xA;cat ./app/**/*.html &amp;gt; index.html&#xA;cat ./app/pre-js.html &amp;gt;&amp;gt; index.html&#xA;# Inject all of our JS into the page&#xA;cat ./app/**/*.js &amp;gt;&amp;gt; index.html&#xA;cat ./app/post-js.html &amp;gt;&amp;gt; index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now &lt;code&gt;index.html&lt;/code&gt; contains your single page app!&lt;/p&gt; &#xA;&lt;p&gt;You can now create folders for each component (and nested components) under the app directory.&lt;/p&gt; &#xA;&lt;p&gt;For example, here is a file system with an &lt;code&gt;Auth&lt;/code&gt; component that has two subcomponents &lt;code&gt;Login&lt;/code&gt; and &lt;code&gt;Signup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;./app&#xA;├── Auth&#xA;│&amp;nbsp;&amp;nbsp; ├── index.html&#xA;│&amp;nbsp;&amp;nbsp; ├── index.js&#xA;│&amp;nbsp;&amp;nbsp; ├── Login&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── index.html&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── index.js&#xA;│&amp;nbsp;&amp;nbsp; └── Signup&#xA;│&amp;nbsp;&amp;nbsp;     ├── index.html&#xA;│&amp;nbsp;&amp;nbsp;     └── index.js&#xA;├── post-js.html&#xA;├── pre-css.html&#xA;├── pre-js.html&#xA;└── pre-template.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For some example components, checkout the &lt;a href=&#34;https://raw.githubusercontent.com/retrohacker/template/main/examples&#34;&gt;./examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: For CSS to work with the ShadowDOM Template uses, you&#39;ll need to include &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags inside the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag of your component&#39;s index.html file. The page&#39;s CSS will not apply to nodes in the ShadowDOM tree. You can still style some global properties in a global CSS file if you choose, but this &#34;quirk&#34; of web components is why there are no &lt;code&gt;index.css&lt;/code&gt; files in the file tree above.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>