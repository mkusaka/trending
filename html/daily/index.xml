<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-27T01:33:05Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>goitacademy/parcel-project-template</title>
    <updated>2022-06-27T01:33:05Z</updated>
    <id>tag:github.com,2022-06-27:/goitacademy/parcel-project-template</id>
    <link href="https://github.com/goitacademy/parcel-project-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Read in other languages: &lt;a href=&#34;https://raw.githubusercontent.com/goitacademy/parcel-project-template/main/README.md&#34;&gt;Русский&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/goitacademy/parcel-project-template/main/README.pl.md&#34;&gt;Polski&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Parcel template&lt;/h1&gt; &#xA;&lt;p&gt;Этот проект был создан при помощи Parcel. Для знакомства и настройки дополнительных возможностей &lt;a href=&#34;https://parceljs.org/&#34;&gt;обратись к документации&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Подготовка нового проекта&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Убедись что на компьютере установлена LTS-версия Node.js. &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Скачай и установи&lt;/a&gt; её если необходимо.&lt;/li&gt; &#xA; &lt;li&gt;Склонируй этот репозиторий.&lt;/li&gt; &#xA; &lt;li&gt;Измени имя папки с &lt;code&gt;parcel-project-template&lt;/code&gt; на имя своего проекта.&lt;/li&gt; &#xA; &lt;li&gt;Создай новый пустой репозиторий на GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Открой проект в VSCode, запусти терминал и свяжи проект с GitHub-репозиторием &lt;a href=&#34;https://docs.github.com/en/get-started/getting-started-with-git/managing-remote-repositories#changing-a-remote-repositorys-url&#34;&gt;по инструкции&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Установи зависимости проекта в терминале командой &lt;code&gt;npm install&lt;/code&gt; .&lt;/li&gt; &#xA; &lt;li&gt;Запусти режим разработки, выполнив команду &lt;code&gt;npm start&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Перейди в браузере по адресу &lt;a href=&#34;http://localhost:1234&#34;&gt;http://localhost:1234&lt;/a&gt;. Эта страница будет автоматически перезагружаться после сохранения изменений в файлах проекта.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Файлы и папки&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Все паршалы файлов стилей должны лежать в папке &lt;code&gt;src/sass&lt;/code&gt; и импортироваться в файлы стилей страниц. Например, для &lt;code&gt;index.html&lt;/code&gt; файл стилей называется &lt;code&gt;index.scss&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Изображения добавляй в папку &lt;code&gt;src/images&lt;/code&gt;. Сборщик оптимизирует их, но только при деплое продакшн версии проекта. Все это происходит в облаке, чтобы не нагружать твой компьютер, так как на слабых машинах это может занять много времени.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Деплой&lt;/h2&gt; &#xA;&lt;p&gt;Для настройки деплоя проекта необходимо выполнить несколько дополнительных шагов по настройке твоего репозитория. Зайди во вкладку &lt;code&gt;Settings&lt;/code&gt; и в подсекции &lt;code&gt;Actions&lt;/code&gt; выбери выбери пункт &lt;code&gt;General&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/goitacademy/parcel-project-template/main/assets/actions-config-step-1.png&#34; alt=&#34;GitHub actions settings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Пролистай страницу до последней секции, в которой убедись что выбраны опции как на следующем изображении и нажми &lt;code&gt;Save&lt;/code&gt;. Без этих настроек у сборки будет недостаточно прав для автоматизации процесса деплоя.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/goitacademy/parcel-project-template/main/assets/actions-config-step-2.png&#34; alt=&#34;GitHub actions settings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Продакшн версия проекта будет автоматически собираться и деплоиться на GitHub Pages, в ветку &lt;code&gt;gh-pages&lt;/code&gt;, каждый раз когда обновляется ветка &lt;code&gt;main&lt;/code&gt;. Например, после прямого пуша или принятого пул-реквеста. Для этого необходимо в файле &lt;code&gt;package.json&lt;/code&gt; отредактировать поле &lt;code&gt;homepage&lt;/code&gt; и скрипт &lt;code&gt;build&lt;/code&gt;, заменив &lt;code&gt;your_username&lt;/code&gt; и &lt;code&gt;your_repo_name&lt;/code&gt; на свои, и отправить изменения на GitHub.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;homepage&#34;: &#34;https://your_username.github.io/your_repo_name/&#34;,&#xA;&#34;scripts&#34;: {&#xA;  &#34;build&#34;: &#34;parcel build src/*.html --public-url /your_repo_name/&#34;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Далее необходимо зайти в настройки GitHub-репозитория (&lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Pages&lt;/code&gt;) и выставить раздачу продакшн версии файлов из папки &lt;code&gt;/root&lt;/code&gt; ветки &lt;code&gt;gh-pages&lt;/code&gt;, если это небыло сделано автоматически.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/goitacademy/parcel-project-template/main/assets/repo-settings.png&#34; alt=&#34;GitHub Pages settings&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Статус деплоя&lt;/h3&gt; &#xA;&lt;p&gt;Статус деплоя крайнего коммита отображается иконкой возле его идентификатора.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Желтый цвет&lt;/strong&gt; - выполняется сборка и деплой проекта.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Зеленый цвет&lt;/strong&gt; - деплой завершился успешно.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Красный цвет&lt;/strong&gt; - во время линтинга, сборки или деплоя произошла ошибка.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Более детальную информацию о статусе можно посмотреть кликнув по иконке, и в выпадающем окне перейти по ссылке &lt;code&gt;Details&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/goitacademy/parcel-project-template/main/assets/status.png&#34; alt=&#34;Deployment status&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Живая страница&lt;/h3&gt; &#xA;&lt;p&gt;Через какое-то время, обычно пару минут, живую страницу можно будет посмотреть по адресу указанному в отредактированном свойстве &lt;code&gt;homepage&lt;/code&gt;. Например, вот ссылка на живую версию для этого репозитория &lt;a href=&#34;https://goitacademy.github.io/parcel-project-template&#34;&gt;https://goitacademy.github.io/parcel-project-template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Если открывается пустая страница, убедись что во вкладке &lt;code&gt;Console&lt;/code&gt; нет ошибок связанных с неправильными путями к CSS и JS файлам проекта (&lt;strong&gt;404&lt;/strong&gt;). Скорее всего у тебя неправильное значение свойства &lt;code&gt;homepage&lt;/code&gt; или скрипта &lt;code&gt;build&lt;/code&gt; в файле &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Как это работает&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/goitacademy/parcel-project-template/main/assets/how-it-works.png&#34; alt=&#34;How it works&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;После каждого пуша в ветку &lt;code&gt;main&lt;/code&gt; GitHub-репозитория, запускается специальный скрипт (GitHub Action) из файла &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Все файлы репозитория копируются на сервер, где проект инициализируется и проходит сборку перед деплоем.&lt;/li&gt; &#xA; &lt;li&gt;Если все шаги прошли успешно, собранная продакшн версия файлов проекта отправляется в ветку &lt;code&gt;gh-pages&lt;/code&gt;. В противном случае, в логе выполнения скрипта будет указано в чем проблема.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>php/doc-en</title>
    <updated>2022-06-27T01:33:05Z</updated>
    <id>tag:github.com,2022-06-27:/php/doc-en</id>
    <link href="https://github.com/php/doc-en" rel="alternate"></link>
    <summary type="html">&lt;p&gt;English PHP documentation&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;README&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the README file within the doc-base/ directory. Your directory structure is probably like:&lt;/p&gt; &#xA;&lt;p&gt;phpdoc/en (DocBook files for the English language) phpdoc/doc-base (Tools and resources used for all languages)&lt;/p&gt; &#xA;&lt;p&gt;For information related to creating this setup, see:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://doc.php.net/tutorial/local-setup.php&#34;&gt;http://doc.php.net/tutorial/local-setup.php&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joBr99/nspanel-lovelace-ui</title>
    <updated>2022-06-27T01:33:05Z</updated>
    <id>tag:github.com,2022-06-27:/joBr99/nspanel-lovelace-ui</id>
    <link href="https://github.com/joBr99/nspanel-lovelace-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Custom Firmware for NsPanel with the design of HomeAssistant&#39;s lovelace UI in mind, works with Tasmota.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NSPanel Lovelace UI&lt;/h1&gt; &#xA;&lt;p&gt;If you like this project consider buying me a pizza 🍕 &lt;a href=&#34;https://paypal.me/joBr99&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?logo=paypal&amp;amp;label=&amp;amp;message=donate&amp;amp;color=slategrey&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hacs/integration&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HACS-Default-41BDF5.svg?sanitize=true&#34; alt=&#34;hacs_badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/joBr99/nspanel-lovelace-ui/actions/workflows/hacs-validation.yaml/badge.svg?sanitize=true&#34; alt=&#34;hacs validation&#34;&gt; &lt;a href=&#34;https://jessemillar.com/r/man-hours&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fmh.jessemillar.com%2Fhours%3Frepo%3Dhttps%3A%2F%2Fgithub.com%2FjoBr99%2Fnspanel-lovelace-ui.git&#34; alt=&#34;Man Hours&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NsPanel Lovelace UI is a Firmware for the nextion screen inside of NSPanel in the Design of &lt;a href=&#34;https://www.home-assistant.io/&#34;&gt;HomeAssistant&lt;/a&gt;&#39;s Lovelace UI Design.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;EU Model and US Model supported (in portrait and landscape orientation)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Content of the screen is controlled by a AppDaemon Python Script installed on your HomeAssistant Instance.&lt;/p&gt; &#xA;&lt;p&gt;Or an TypeScript on your ioBroker Instance in case you are an ioBroker User.&lt;/p&gt; &#xA;&lt;p&gt;NsPanel needs to be flashed with Tasmota (or upcoming with ESPHome)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/docs/img/nspanel-rl.png&#34; alt=&#34;nspanel-rl&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Entities Page with support for cover, switch, input_boolean, binary_sensor, sensor, button, number, scenes, script, input_button and light, input_text (read-only), lock, fan and automation&lt;/li&gt; &#xA; &lt;li&gt;Grid Page with support for cover, switch, input_boolean, button, scenes, light, lock and automation&lt;/li&gt; &#xA; &lt;li&gt;Detail Pages for Lights (Brightness, Temperature and Color of the Light) and for Covers (Position)&lt;/li&gt; &#xA; &lt;li&gt;Thermostat Page&lt;/li&gt; &#xA; &lt;li&gt;Media Player Card&lt;/li&gt; &#xA; &lt;li&gt;Alarm Control Card&lt;/li&gt; &#xA; &lt;li&gt;Screensaver Page with Time, Date and Weather Information&lt;/li&gt; &#xA; &lt;li&gt;Card with QrCode to display WiFi Information&lt;/li&gt; &#xA; &lt;li&gt;Localization possible (currently 38 languages)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Everything is dynamically configurable by a yaml config, no need to code or touch Nextion Editor&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It works with &lt;a href=&#34;https://tasmota.github.io/docs/&#34;&gt;Tasmota&lt;/a&gt; and MQTT. To control the panel and update it with content from HomeAssistant there is an &lt;a href=&#34;https://github.com/AppDaemon/appdaemon&#34;&gt;AppDaemon&lt;/a&gt; App.&lt;/p&gt; &#xA;&lt;p&gt;See the following picture to get an idea of the look of this firmware for NSPanel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/doc-pics/screens.png&#34; alt=&#34;screens&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some (not all) screenshots from the US Portrait Version:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/doc-pics/screens-us-p.png&#34; alt=&#34;screens-us-p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://docs.nspanel.pky.eu/&#34;&gt;https://docs.nspanel.pky.eu/&lt;/a&gt; for installation instructions and documentation of the configuration.&lt;/p&gt;</summary>
  </entry>
</feed>