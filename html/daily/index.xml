<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-16T01:37:24Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/dubbo-admin</title>
    <updated>2023-07-16T01:37:24Z</updated>
    <id>tag:github.com,2023-07-16:/apache/dubbo-admin</id>
    <link href="https://github.com/apache/dubbo-admin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ops and reference implementation for Apache Dubbo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NOTICE&lt;/h1&gt; &#xA;&lt;p&gt;此分支是 Dubbo Admin 正在基于 Go 语言重构的开发分支，目前仍在开发过程中。 如您正寻求将 Dubbo Admin 用作生产环境，想了解 Admin 的能力及安装方式，请参见 &lt;a href=&#34;https://github.com/apache/dubbo-admin/tree/develop#dubbo-admin&#34;&gt;develop 分支&lt;/a&gt; 及内部相关使用说明。&lt;/p&gt; &#xA;&lt;h1&gt;运行 Admin&lt;/h1&gt; &#xA;&lt;h2&gt;启动 Zookeeper&lt;/h2&gt; &#xA;&lt;p&gt;首先，你需要在本地启动一个 &lt;a href=&#34;https://zookeeper.apache.org/doc/current/zookeeperStarted.html&#34;&gt;zookeeper server&lt;/a&gt;，用作 Admin 连接的注册/配置中心。&lt;/p&gt; &#xA;&lt;h2&gt;启动 Admin&lt;/h2&gt; &#xA;&lt;h3&gt;Run with IDE&lt;/h3&gt; &#xA;&lt;p&gt;Once open this project in GoLand, a pre-configured Admin runnable task can be found from &#34;Run Configuration&#34; pop up menu as shown below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/dubbo-admin/refactor-with-go/docs/images/ide_configuration.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click the &lt;code&gt;Run&lt;/code&gt; button and you can get the Admin process started locally.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;But before doing that, you might need to change the configuration file located at &lt;code&gt;/conf/dubboadmin.yml&lt;/code&gt; to make sure &lt;code&gt;registry.address&lt;/code&gt; is pointed to the zookeeper server you started before.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin:&#xA;  registry:&#xA;    address: zookeeper://127.0.0.1:2181&#xA;  config-center: zookeeper://127.0.0.1:2181&#xA;  metadata-report:&#xA;    address: zookeeper://127.0.0.1:2181&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run with command line&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export ADMIN_CONFIG_PATH=/path/to/your/admin/project/conf/dubboadmin.yml&#xA;$ cd cmd/admin&#xA;$ go run . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open the browser and visit &lt;a href=&#34;http://localhost:38080/admin/&#34;&gt;http://localhost:38080/admin/&lt;/a&gt; to open the console.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you also have the Java version admin running, make sure to use different port to avoid conflict.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;一些 Dubbo 客户端示例&lt;/h3&gt; &#xA;&lt;p&gt;为了能在 Admin 控制台看到一些示例数据，可以在本地启动一些示例项目。可参考以下两个链接，务必确保示例使用的注册中心指向你之前启动的 zookeeper server，如果示例中有使用 embeded zookeeper 则应该进行修改并指向你本地起的 zookeeper 集群。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/dubbo-samples/tree/master/1-basic/dubbo-samples-spring-boot&#34;&gt;https://github.com/apache/dubbo-samples/tree/master/1-basic/dubbo-samples-spring-boot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dubbo.apache.org/zh-cn/overview/quickstart/java/brief/&#34;&gt;https://dubbo.apache.org/zh-cn/overview/quickstart/java/brief/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;前端开发步骤&lt;/h2&gt; &#xA;&lt;p&gt;项目完整前端代码存放在：&lt;code&gt;[dubbo-admin-ui](./dubbo-admin-ui/README.md)&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;贡献代码&lt;/h2&gt; &#xA;&lt;p&gt;开发过程中，可以使用预先定义好的 Makefile 任务来完成代码检查、测试等一系列工作。以下是一些命令说明&lt;/p&gt; &#xA;&lt;h3&gt;代码格式化&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make fmt   #Run gofumpt against code.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;代码检查&lt;/h3&gt; &#xA;&lt;p&gt;To run all code formatting, linting and vetting tools use the target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make lint     #Run golang lint against code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;测试代码&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test             #Run all tests&#xA;make test-dubboctl    #Run tests for dubboctl&#xA;make test-admin       #Run tests for admin&#xA;make test-authority   #Run tests for authority&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swagger API&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make swagger  #Generate dubbo-admin swagger docs in hack/swagger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;打包&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make build            #Build binary with the dubbo admin, authority, and dubboctl&#xA;make build-admin      #Build binary with the dubbo admin.&#xA;make build-authority  #Build binary with the dubbo authority.&#xA;make build-dubboctl   #Build binary with the dubbo dubboctl.&#xA;make build-ui         #Build the distribution of the admin ui pages.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;生成镜像&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make image            #Build docker image with the dubbo admin, authority and admin-ui&#xA;make image-admin      #Build docker image with the dubbo admin.&#xA;make image-authority  #Build docker image with the dubbo authority.&#xA;make image-ui         #Build docker image with the dubbo admin ui.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;多平台生成镜像和打包&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make buildx            #Build and push docker cross-platform image for the dubbo admin and authority&#xA;make buildx-admin      #Build and push docker image with the dubbo admin for cross-platform support&#xA;make buildx-authority  #Build and push docker image with the dubbo authority for cross-platform support&#xA;make buildx-dubboctl   #Build the dubboctl distribution for cross-platform support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;发布指南&lt;/h2&gt; &#xA;&lt;p&gt;正式发布的一些 make 命令...&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ecaps1038/yike-design-dev</title>
    <updated>2023-07-16T01:37:24Z</updated>
    <id>tag:github.com,2023-07-16:/ecaps1038/yike-design-dev</id>
    <link href="https://github.com/ecaps1038/yike-design-dev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vue3+Ts+Less 开发的前端UI框架&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;yike-design-dev&lt;/h1&gt; &#xA;&lt;p&gt;yike-design 前端UI框架开发&lt;/p&gt; &#xA;&lt;h2&gt;出发点&lt;/h2&gt; &#xA;&lt;p&gt;本人作为一名设计人员，非常希望有一套属自己的前端UI框架，用以表达我的设计。而在组件上，我不期望我的设计被前端UI框架束缚。所以最初的想法是能更灵活的运用和调整每一个组件，比如我甚至不希望它成为一个依赖包深深的藏在node_modules里面，我要它能时刻修改每一段源码，以用到我每一次独特的设计需求中；我希望我能够做到可见的按需引入单个组件，我可以将不要的组件统统删除...&lt;/p&gt; &#xA;&lt;p&gt;在对前端的兴趣，我已经开始了这项工作。&lt;/p&gt; &#xA;&lt;h2&gt;为何创建这个仓库&lt;/h2&gt; &#xA;&lt;p&gt;本人不才，开发只是我的一点兴趣，很多关于开发的东西都不懂，始终是徘徊在开发的大门处，并没有期望能跟开发大佬们一起协作完成一个作品。本人也一直对作品的视觉很在乎，有时候甚至看不得前端有一毫的破坏我的界面。所以一直都在自己单独写些东西。但团队的力量是不可预计的。在跟他人谈能共同完成一个项目时，我也会心潮澎湃，我应该信任一个团队，我应该能为一个团队去服务去创造。我要无限的开源这个项目（虽然说它还什么都不是），来期望每一位有兴趣的和认同我的想法的大佬们一起加入开发，来打造一套不一样的框架体验。&lt;/p&gt; &#xA;&lt;h2&gt;关于yike-design开发计划&lt;/h2&gt; &#xA;&lt;h3&gt;第一步、按进度开发完现在流行前端组件库的基础组件&lt;/h3&gt; &#xA;&lt;h3&gt;第二步、从第一步基础组件出发，开始封装功能性组件&lt;/h3&gt; &#xA;&lt;p&gt;例如：用户组件、登录组件、评论组件、富文本等等&lt;/p&gt; &#xA;&lt;h3&gt;第三步、封装前后端组件&lt;/h3&gt; &#xA;&lt;p&gt;该步会将组件封装为单个功能模块，解决前后端功能，做到类似低代码模块能力（我相信他是很不一样的，我期望并坚持站在设计体验的角度去思考这一步）。&lt;/p&gt; &#xA;&lt;h1&gt;所以你认同我的观点吗？那就加入一起创造它吧～&lt;/h1&gt; &#xA;&lt;p&gt;我会将开发和对外分开，对外相关文档请访 &lt;a href=&#34;https://www.huohuo90.com:3005&#34;&gt;yike-design&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>