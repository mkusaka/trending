<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-08T01:34:01Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zanfranceschi/rinha-de-backend-2024-q1</title>
    <updated>2024-02-08T01:34:01Z</updated>
    <id>tag:github.com,2024-02-08:/zanfranceschi/rinha-de-backend-2024-q1</id>
    <link href="https://github.com/zanfranceschi/rinha-de-backend-2024-q1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repositório da 2ª edição da Rinha de Backend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rinha de Backend - 2024/Q1&lt;/h1&gt; &#xA;&lt;p&gt;A Rinha de Backend é um desafio que tem como principal objetivo compartilhar conhecimento em formato de desafio! Esta é a segunda edição. A data limite para enviar sua submissão é &lt;code&gt;2024-03-10T23:59:59-03:00&lt;/code&gt; e em &lt;code&gt;2024-03-14T19:00:00-03:00&lt;/code&gt; os resultados serão anunciados &lt;a href=&#34;https://www.youtube.com/watch?v=2OonGBGcl5k&#34;&gt;numa live&lt;/a&gt; no YouTube.&lt;/p&gt; &#xA;&lt;p&gt;O principal assunto dessa Rinha trata de controle de concorrência com o tema créditos e débitos (crébitos) e foi inspirado pelos colegas &lt;a href=&#34;https://twitter.com/lucascs&#34;&gt;@lucascs&lt;/a&gt; e &lt;a href=&#34;https://twitter.com/kmyokoyama&#34;&gt;@kmyokoyama&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/lucascs/status/1744014270331769000&#34;&gt;nesse&lt;/a&gt; e &lt;a href=&#34;https://twitter.com/kmyokoyama/status/1744018208082760133&#34;&gt;nesse&lt;/a&gt; comentário &lt;a href=&#34;https://twitter.com/zanfranceschi/status/1743876243815059738&#34;&gt;dessa&lt;/a&gt; tweet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zanfranceschi/rinha-de-backend-2024-q1/main/misc/arte.jpg&#34; alt=&#34;arte&#34;&gt; Se quiser entender mais sobre o espírito das Rinhas, confira o &lt;a href=&#34;https://github.com/zanfranceschi/rinha-de-backend-2023-q3&#34;&gt;repositório da primeira edição&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ah! E antes de continuar, é importante dizer que a &lt;a href=&#34;https://cubos.academy/&#34;&gt;Cubos Academy&lt;/a&gt; disponibilizou o cupom &lt;code&gt;RINHADEV&lt;/code&gt; que te dá 20% de desconto &lt;strong&gt;PARA QUALQUER CURSO&lt;/strong&gt;! Vai lá no site deles e dá uma olhada – têm muitos cursos bem legais!&lt;/p&gt; &#xA;&lt;h2&gt;O Que Precisa Ser Feito?&lt;/h2&gt; &#xA;&lt;p&gt;Para participar você precisa desenvolver uma API HTTP com os seguintes endpoints:&lt;/p&gt; &#xA;&lt;h3&gt;Transações&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requisição&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;POST /clientes/[id]/transacoes&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;valor&#34;: 1000,&#xA;    &#34;tipo&#34; : &#34;c&#34;,&#xA;    &#34;descricao&#34; : &#34;descricao&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Onde&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[id]&lt;/code&gt; (na URL) deve ser um número inteiro representando a identificação do cliente.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;valor&lt;/code&gt; deve um número inteiro positivo que representa centavos (não vamos trabalhar com frações de centavos). Por exemplo, R$ 10 são 1000 centavos.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tipo&lt;/code&gt; deve ser apenas &lt;code&gt;c&lt;/code&gt; para crédito ou &lt;code&gt;d&lt;/code&gt; para débito.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;descricao&lt;/code&gt; deve ser uma string de 1 a 10 caractéres.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Todos os campos são obrigatórios.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Resposta&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HTTP 200 OK&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;limite&#34; : 100000,&#xA;    &#34;saldo&#34; : -9098&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Onde&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;limite&lt;/code&gt; deve ser o limite cadastrado do cliente.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;saldo&lt;/code&gt; deve ser o novo saldo após a conclusão da transação.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Obrigatoriamente, o http status code de requisições para transações bem sucedidas deve ser 200!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Regras&lt;/strong&gt; Uma transação de débito &lt;strong&gt;nunca&lt;/strong&gt; pode deixar o saldo do cliente menor que seu limite disponível. Por exemplo, um cliente com limite de 1000 (R$ 10) nunca deverá ter o saldo menor que -1000 (R$ -10). Nesse caso, um saldo de -1001 ou menor significa inconsistência na Rinha de Backend!&lt;/p&gt; &#xA;&lt;p&gt;Se uma requisição para débito for deixar o saldo inconsistente, a API deve retornar HTTP Status Code 422 sem completar a transação! O corpo da resposta nesse caso não será testado e você pode escolher como o representar.&lt;/p&gt; &#xA;&lt;p&gt;Se o atributo &lt;code&gt;[id]&lt;/code&gt; da URL for de uma identificação não existente de cliente, a API deve retornar HTTP Status Code 404. O corpo da resposta nesse caso não será testado e você pode escolher como o representar. Se a API retornar algo como HTTP 200 informando que o cliente não foi encontrado no corpo da resposta ou HTTP 204 sem corpo, ficarei extremamente deprimido e a Rinha será cancelada para sempre.&lt;/p&gt; &#xA;&lt;h2&gt;Extrato&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requisição&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GET /clientes/[id]/extrato&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Onde&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[id]&lt;/code&gt; (na URL) deve ser um número inteiro representando a identificação do cliente.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Resposta&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HTTP 200 OK&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;saldo&#34;: {&#xA;    &#34;total&#34;: -9098,&#xA;    &#34;data_extrato&#34;: &#34;2024-01-17T02:34:41.217753Z&#34;,&#xA;    &#34;limite&#34;: 100000&#xA;  },&#xA;  &#34;ultimas_transacoes&#34;: [&#xA;    {&#xA;      &#34;valor&#34;: 10,&#xA;      &#34;tipo&#34;: &#34;c&#34;,&#xA;      &#34;descricao&#34;: &#34;descricao&#34;,&#xA;      &#34;realizada_em&#34;: &#34;2024-01-17T02:34:38.543030Z&#34;&#xA;    },&#xA;    {&#xA;      &#34;valor&#34;: 90000,&#xA;      &#34;tipo&#34;: &#34;d&#34;,&#xA;      &#34;descricao&#34;: &#34;descricao&#34;,&#xA;      &#34;realizada_em&#34;: &#34;2024-01-17T02:34:38.543030Z&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Onde&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;saldo&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;total&lt;/code&gt; deve ser o saldo total atual do cliente (não apenas das últimas transações seguintes exibidas).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;data_extrato&lt;/code&gt; deve ser a data/hora da consulta do extrato.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;limite&lt;/code&gt; deve ser o limite cadastrado do cliente.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ultimas_transacoes&lt;/code&gt; é uma lista ordenada por data/hora das transações de forma decrescente contendo até as 10 últimas transações com o seguinte: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;valor&lt;/code&gt; deve ser o valor da transação.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;tipo&lt;/code&gt; deve ser &lt;code&gt;c&lt;/code&gt; para crédito e &lt;code&gt;d&lt;/code&gt; para débito.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;descricao&lt;/code&gt; deve ser a descrição informada durante a transação.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;realizada_em&lt;/code&gt; deve ser a data/hora da realização da transação.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Regras&lt;/strong&gt; Se o atributo &lt;code&gt;[id]&lt;/code&gt; da URL for de uma identificação não existente de cliente, a API deve retornar HTTP Status Code 404. O corpo da resposta nesse caso não será testado e você pode escolher como o representar. Já sabe o que acontece se sua API retornar algo na faixa 2XX, né? Agradecido.&lt;/p&gt; &#xA;&lt;h2&gt;Cadastro Inicial de Clientes&lt;/h2&gt; &#xA;&lt;p&gt;Para haver ênfase em concorrência durante o teste, poucos clientes devem ser cadastrados e testados. Por isso, apenas cinco clientes, com os seguintes IDs, limites e saldos iniciais, devem ser previamente cadastrados para o teste – isso é imprescindível!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;id&lt;/th&gt; &#xA;   &lt;th&gt;limite&lt;/th&gt; &#xA;   &lt;th&gt;saldo inicial&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;80000&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;10000000&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;500000&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Obs.: Não cadastre um cliente com o ID 6 especificamente, pois parte do teste é verificar se o cliente com o ID 6 realmente não existe e a API retorna HTTP 404!&lt;/p&gt; &#xA;&lt;h2&gt;Como Fazer e Entregar?&lt;/h2&gt; &#xA;&lt;p&gt;Assim como na Rinha de Backend anterior, você precisará conteinerizar sua API e outros componentes usados no formato de &lt;em&gt;docker-compose&lt;/em&gt;, obedecer às &lt;a href=&#34;https://raw.githubusercontent.com/zanfranceschi/rinha-de-backend-2024-q1/main/#restricoes&#34;&gt;restrições de recursos de CPU e memória&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/zanfranceschi/rinha-de-backend-2024-q1/main/#arquitetura&#34;&gt;configuração mínima arquitetural&lt;/a&gt;, e estrutura de artefatos e processo de entrega (o que, onde e quando suas coisas precisam ser entregues).&lt;/p&gt; &#xA;&lt;p&gt;Você pode fazer a submissão de forma individual, dupla de 2, dupla de 3 ou até dupla de 50 pessoas. Não tem limite. E você e/ou seu grupo pode fazer mais de uma submissão desde que a API seja diferente.&lt;/p&gt; &#xA;&lt;h3&gt;Artefato, Processo e Data Limite de Entrega&lt;/h3&gt; &#xA;&lt;p&gt;Para participar, basta fazer um pull request neste repositório incluindo um subdiretório em &lt;a href=&#34;https://raw.githubusercontent.com/zanfranceschi/rinha-de-backend-2024-q1/main/participantes&#34;&gt;participantes&lt;/a&gt; com os seguintes arquivos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt; - arquivo interpretável por &lt;code&gt;docker-compose&lt;/code&gt; contendo a declaração dos serviços que compõe sua API respeitando as &lt;a href=&#34;https://raw.githubusercontent.com/zanfranceschi/rinha-de-backend-2024-q1/main/#restricoes&#34;&gt;restrições de CPU/memória&lt;/a&gt; e &lt;a href=&#34;https://raw.githubusercontent.com/zanfranceschi/rinha-de-backend-2024-q1/main/#arquitetura&#34;&gt;arquitetura mínima&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;README.md&lt;/code&gt; - incluindo pelo menos seu nome, tecnologias que usou, o link para o repositório do código fonte da sua API, e alguma forma de entrar em contato caso vença. Fique à vontade para incluir informações adicionais como link para site, etc.&lt;/li&gt; &#xA; &lt;li&gt;Inclua aqui também quaisquer outros diretórios/arquivos necessários para que seus contêineres subam corretamente como, por exemplo, &lt;code&gt;nginx.conf&lt;/code&gt;, &lt;code&gt;banco.sql&lt;/code&gt;, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zanfranceschi/rinha-de-backend-2024-q1/main/participantes/exemplo&#34;&gt;Aqui&lt;/a&gt; tem um exemplo de submissão para te ajudar, caso queira.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Importante!&lt;/strong&gt; É fundamental que todos os serviços declarados no &lt;code&gt;docker-compose.yml&lt;/code&gt; estejam publicamente disponíveis! Caso contrário, não será possível executar os testes. Para isso, você pode criar uma conta em hub.docker.com para disponibilizar suas imagens. Essa imagens geralmente terão o formato &amp;lt;user&amp;gt;/&amp;lt;imagem&amp;gt;:&amp;lt;tag&amp;gt; – por exemplo, &lt;code&gt;zanfranceschi/rinha-api:latest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Um erro comum na edição anterior da Rinha foi a declaração de imagens como se estivessem presentes localmente. Isso pode ser verdade para quem as construiu (realizou o build localmente), mas não será verdadeiro para o servidor que executará os testes!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Importante!&lt;/strong&gt; É obrigatório deixar o repositório contendo o código fonte da sua API publicamente acessível e informado no arquivo &lt;code&gt;README.md&lt;/code&gt; entregue na submissão. Afinal, a Rinha de Backend tem como principal objetivo compartilhar conhecimento!&lt;/p&gt; &#xA;&lt;p&gt;Um exemplo de submissão/pull request da Ana, poderia ter os seguintes arquivos:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├─ participantes/&#xA;|  ├─ ana-01/&#xA;|  |  ├─ docker-compose.yml&#xA;|  |  ├─ nginx.config&#xA;|  |  ├─ sql/&#xA;|  |  |  ├─ ddl.sql&#xA;|  |  |  ├─ dml.sql&#xA;|  |  ├─ README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A data/hora limite para fazer pull requests para sua submissão é até &lt;code&gt;2024-03-10T23:59:59-03:00&lt;/code&gt;. Após esse dia/hora, qualquer pull request será automaticamente rejeitado.&lt;/p&gt; &#xA;&lt;p&gt;Note que você poderá fazer quantos pull requests desejar até essa data/hora limite!&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;arquitetura&#34;&gt;Arquitetura Mínima da API&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Por &#34;API&#34; aqui, me refiro a todos os serviços envolvidos para que o serviço que atenderá às requisições HTTP funcione, tais como o load balancer, banco de dados e servidor HTTP.&lt;/p&gt; &#xA;&lt;p&gt;A sua API precisa ter, no mínimo, os seguintes serviços:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Um &lt;strong&gt;load balancer&lt;/strong&gt; que faça a distribuição de tráfego usando o algoritmo round robin. Diferentemente da edição anterior, você não precisa usar o Nginx – pode escolher (ou até fazer) qualquer um como p.ex. o HAProxy. &lt;strong&gt;O load balancer será o serviço que receberá as requisições do teste e ele precisa aceitar requisições na porta 9999&lt;/strong&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2 instâncias de servidores web&lt;/strong&gt; que atenderão às requisições HTTP (distribuídas pelo load balancer).&lt;/li&gt; &#xA; &lt;li&gt;Um banco de dados relacional ou não relacional (exceto bancos de dados que têm como principal característica o armazenamento de dados em memória, tal como Redis, por exemplo).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart TD&#xA;    G(Stress Test - Gatling) -.-&amp;gt; LB(Load Balancer / porta 9999)&#xA;    subgraph Sua Aplicação&#xA;        LB -.-&amp;gt; API1(API - instância 01)&#xA;        LB -.-&amp;gt; API2(API - instância 02)&#xA;        API1 -.-&amp;gt; Db[(Database)]&#xA;        API2 -.-&amp;gt; Db[(Database)]&#xA;    end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Você pode usar componentes adicionais se quiser. Mas lembre-se de que as restrições de CPU e memória devem obedecer a regra de que a soma dos limites (que devem ser declarados para todos os serviços) não poderá ultrapassar 1.5 unidades de CPU e 550MB de memória! Use o bom senso e boa fé, não adicione um banco relacional e um Redis, por exemplo, e use apenas o Redis como armazenamento – afinal, a Rinha é apenas uma brincadeira que fomenta o aprendizado e não a competição desleal.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;restricoes&#34;&gt;Restrições de CPU/Memória&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Dentro do seu arquivo docker-compose.yml, você deverá limitar todos os serviços para que a soma deles não ultrapasse os seguintes limites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;deploy.resources.limits.cpu&lt;/code&gt; 1.5 – uma unidade e meia de CPU distribuída entre todos os seus serviços&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deploy.resources.limits.memory&lt;/code&gt; 550MB – 550 mega bytes de memória distribuídos entre todos os seus serviços&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Obs.: Por favor, use &lt;code&gt;MB&lt;/code&gt; para unidade de medida de memória; isso facilita as verificações de restrições.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# exemplo de parte de configuração de um serviço dentro do um arquivo docker-compose.yml&#xA;...&#xA;  nginx:&#xA;    image: nginx:latest&#xA;    volumes:&#xA;      - ./nginx.conf:/etc/nginx/nginx.conf:ro&#xA;    depends_on:&#xA;      - api01&#xA;      - api02&#xA;    ports:&#xA;      - &#34;9999:9999&#34;&#xA;    deploy:&#xA;      resources:&#xA;        limits:&#xA;          cpus: &#34;0.17&#34;&#xA;          memory: &#34;10MB&#34;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;examplo&#34;&gt;Arquivos de exemplo para te ajudar&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;O seguinte são apenas arquivos de exemplo para que você não saia do zero, caso tenha alguma dificuldade ou apenas queira acelerar a construção da sua API. Obviamente, modifique como quiser respeitando todos as restrições anteriormente explicadas aqui. Novamente, você não precisa usar especificamente um banco de dados relacional – o exemplo seguinte é apenas ilustrativo.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &#34;3.5&#34;&#xA;&#xA;services:&#xA;  api01: &amp;amp;api&#xA;    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório&#xA;    # publicamente acessível! Ex.: hub.docker.com&#xA;    image: ana/minha-api-matadora:latest&#xA;    hostname: api01&#xA;    environment:&#xA;      - DB_HOSTNAME=db&#xA;    &#xA;    # Não é necessário expor qualquer porta além da porta do load balancer,&#xA;    # mas é comum as pessoas o fazerem para testarem suas APIs e conectarem&#xA;    # ao banco de dados na fase de desenvolvimento.&#xA;    ports:&#xA;      - &#34;8081:8080&#34;&#xA;    depends_on:&#xA;      - db&#xA;    deploy:&#xA;      resources:&#xA;        limits:&#xA;          cpus: &#34;0.6&#34;&#xA;          memory: &#34;200MB&#34;&#xA;&#xA;  api02:&#xA;    # Essa sintaxe reusa o que foi declarado em &#39;api01&#39;.&#xA;    &amp;lt;&amp;lt;: *api &#xA;    hostname: api02&#xA;    environment:&#xA;      - DB_HOSTNAME=db&#xA;    ports:&#xA;      - &#34;8082:8080&#34;&#xA; &#xA;  nginx:&#xA;    image: nginx:latest&#xA;    volumes:&#xA;      - ./nginx.conf:/etc/nginx/nginx.conf:ro&#xA;    depends_on:&#xA;      - api01&#xA;      - api02&#xA;    ports:&#xA;        # Obrigatório expor/usar a porta 9999 no load balancer!&#xA;      - &#34;9999:9999&#34; &#xA;    deploy:&#xA;      resources:&#xA;        limits:&#xA;          cpus: &#34;0.17&#34;&#xA;          memory: &#34;10MB&#34;&#xA;&#xA;  db:&#xA;    image: postgres:latest&#xA;    hostname: db&#xA;    environment:&#xA;      - POSTGRES_PASSWORD=123&#xA;      - POSTGRES_USER=admin&#xA;      - POSTGRES_DB=rinha&#xA;    ports:&#xA;      - &#34;5432:5432&#34;&#xA;    volumes:&#xA;      - ./script.sql:/docker-entrypoint-initdb.d/script.sql&#xA;    deploy:&#xA;      resources:&#xA;        limits:&#xA;          # Note que a soma de todos os limites dos serviços&#xA;          # aqui declarados é de 1.5 unidades de CPU e 550MB&#xA;          # de memória. A distribuição feita aqui é apenas&#xA;          # um exemplo – distribua como quiser.&#xA;          cpus: &#34;0.13&#34;&#xA;          memory: &#34;140MB&#34;&#xA;&#xA;# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.&#xA;# A edição anterior se beneficiou do modo host pois o volume de requisições&#xA;# era relativamente alto e a virtualização da rede se tornou um gargalo, mas&#xA;# este modo é mais complexo de ser configurado. Fique à vontade para usar o&#xA;# modo que quiser desde que não conflite com portas trivialmente usadas em um&#xA;# SO.&#xA;networks:&#xA;  default:&#xA;    driver: bridge&#xA;    name: rinha-nginx-2024q1&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;script.sql&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Coloque scripts iniciais aqui&#xA;CREATE TABLE...&#xA;&#xA;DO $$&#xA;BEGIN&#xA;  INSERT INTO clientes (nome, limite)&#xA;  VALUES&#xA;    (&#39;o barato sai caro&#39;, 1000 * 100),&#xA;    (&#39;zan corp ltda&#39;, 800 * 100),&#xA;    (&#39;les cruders&#39;, 10000 * 100),&#xA;    (&#39;padaria joia de cocaia&#39;, 100000 * 100),&#xA;    (&#39;kid mais&#39;, 5000 * 100);&#xA;END; $$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;nginx.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-config&#34;&gt;events {&#xA;    worker_connections 1000;&#xA;}&#xA;&#xA;http {&#xA;    access_log off;&#xA;    sendfile   on;&#xA;    &#xA;    upstream api {&#xA;        server api01:8080;&#xA;        server api02:8080;&#xA;    }&#xA;&#xA;    server {&#xA;        listen 9999; # Lembra da porta 9999 obrigatória?&#xA;        &#xA;        location / {&#xA;            proxy_pass http://api;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ferramenta de Teste&lt;/h2&gt; &#xA;&lt;p&gt;Como na edição anterior, a ferramenta Gatling será usada novamente para realizar o teste de performance. Pode fazer muita diferença você executar os testes durante a fase de desenvolvimento para detectar possíveis problemas e gargalos. O teste está disponível nesse repositório em &lt;a href=&#34;https://raw.githubusercontent.com/zanfranceschi/rinha-de-backend-2024-q1/main/load-test&#34;&gt;load-test&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Ambiente de Testes&lt;/h2&gt; &#xA;&lt;p&gt;Para saber os detalhes sobre o ambiente (SO e versões de software) acesse &lt;a href=&#34;https://raw.githubusercontent.com/zanfranceschi/rinha-de-backend-2024-q1/main/SPECTESTENV.md&#34;&gt;Especificações do Ambiente de Testes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note que o ambiente em que os testes serão executados é Linux x64. Portanto, se seu ambiente de desenvolvimento possui outra arquitetura, você precisará fazer o build do docker da seguinte forma: &lt;code&gt;$ docker buildx build --platform linux/amd64&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Por exemplo: &lt;code&gt;$ docker buildx build --platform linux/amd64 -t ana/minha-api-matadora:latest .&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Para executar os testes&lt;/h3&gt; &#xA;&lt;p&gt;Aqui estão instruções rápidas para você poder executar os testes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Baixe o Gatling em &lt;a href=&#34;https://gatling.io/open-source/&#34;&gt;https://gatling.io/open-source/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Certifique-se de que tenha o JDK instalado (64bits OpenJDK LTS (Long Term Support) versions: 11, 17 e 21) &lt;a href=&#34;https://gatling.io/docs/gatling/tutorials/installation/&#34;&gt;https://gatling.io/docs/gatling/tutorials/installation/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configure o script &lt;code&gt;./executar-teste-local.sh&lt;/code&gt; (ou &lt;code&gt;./executar-teste-local.ps1&lt;/code&gt; se estiver no Windows)&lt;/li&gt; &#xA; &lt;li&gt;Suba sua API (ou load balancer) na porta 9999&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;./executar-teste-local.sh&lt;/code&gt; (ou &lt;code&gt;./executar-teste-local.ps1&lt;/code&gt; se estiver no Windows)&lt;/li&gt; &#xA; &lt;li&gt;Agora é só aguardar o teste terminar e abrir o relatório O caminho do relatório é exibido ao término da simulação. Os resultados/relatórios são salvos em &lt;code&gt;./load-test/user-files/results&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Fique à vontade para alterar a &lt;a href=&#34;https://raw.githubusercontent.com/zanfranceschi/rinha-de-backend-2024-q1/main/load-test/user-files/simulations/rinhabackend/RinhaBackendCrebitosSimulation.scala&#34;&gt;simulação&lt;/a&gt; para testar diferentes aspectos e cenários. Não inclua essas alterações no pull request de submissão!&lt;/p&gt; &#xA;&lt;p&gt;De nada :)&lt;/p&gt; &#xA;&lt;h3&gt;Pré teste&lt;/h3&gt; &#xA;&lt;p&gt;Na edição anterior da Rinha, o teste começava poucos segundos após a subida dos contêineres e, devido as restrições de CPU e memória, nem todos os serviços estavam prontos para receber requisições em tão pouco tempo. Nessa edição, antes do teste iniciar, um script verificará se a API está respondendo corretamente (via &lt;code&gt;GET /clientes/1/extrato&lt;/code&gt;) por até 40 segundos em intervalos de 2 segundos a cada tentativa. Por isso, certifique-se de que todos seus serviços não demorem mais do que 40 segundos para estarem aptos a receberem requisições!&lt;/p&gt; &#xA;&lt;h4&gt;Nota importante sobre o teste escrito!&lt;/h4&gt; &#xA;&lt;p&gt;A simulação contém um teste de lógica de saldo/limite que extrapola o que é comumente feito em testes de performance. O escrevi assim apenas por causa da natureza da Rinha de Backend. Evite fazer esse tipo de coisa em testes de performance, pois não é uma prática recomendada normalmente. Testes de lógica devem ficar junto ao código fonte em formato de testes de unidade ou integração!&lt;/p&gt; &#xA;&lt;h2&gt;Critérios para Vencer A Rinha de Backend&lt;/h2&gt; &#xA;&lt;p&gt;Surpresa! :)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rajaprerak/rajaprerak.github.io</title>
    <updated>2024-02-08T01:34:01Z</updated>
    <id>tag:github.com,2024-02-08:/rajaprerak/rajaprerak.github.io</id>
    <link href="https://github.com/rajaprerak/rajaprerak.github.io" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Personal Portfolio Website&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Personal Portfolio 🔥&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://rajaprerak.github.io/&#34;&gt;https://rajaprerak.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; Star me on GitHub — it helps!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rajaprerak/rajaprerak.github.io/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/maintained-yes-green.svg?sanitize=true&#34; alt=&#34;Maintenance&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://rajaprerak.github.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/website-up-yellow&#34; alt=&#34;Website shields.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/in/rajaprerak/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ask%20me-linkedin-1abc9c.svg?sanitize=true&#34; alt=&#34;Ask Me Anything !&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badges.mit-license.org&#34;&gt;&lt;img src=&#34;http://img.shields.io/:license-mit-blue.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Website Preview&lt;/h3&gt; &#xA;&lt;h4&gt;Home Page&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rajaprerak/rajaprerak.github.io/master/website_images/HomePage.gif&#34; width=&#34;900&#34;&gt; &#xA;&lt;h4&gt;About Page&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rajaprerak/rajaprerak.github.io/master/website_images/AboutPage.png&#34; width=&#34;900&#34;&gt; &#xA;&lt;h4&gt;Projects Page&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rajaprerak/rajaprerak.github.io/master/website_images/ProjectPage.png&#34; width=&#34;900&#34;&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; Star me on GitHub — it helps!&lt;/p&gt; &#xA;&lt;h2&gt;Features 📋&lt;/h2&gt; &#xA;&lt;p&gt;⚡️ Fully Responsive&lt;br&gt; ⚡️ Valid HTML5 &amp;amp; CSS3&lt;br&gt; ⚡️ Typing animation using &lt;code&gt;Typed.js&lt;/code&gt;&lt;br&gt; ⚡️ Easy to modify&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Deployment 📦&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repository and modify the content of &lt;b&gt;index.html&lt;/b&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add or remove images from &lt;code&gt;assets/img/&lt;/code&gt; directory as per your requirement.&lt;/li&gt; &#xA; &lt;li&gt;Update the info of &lt;code&gt;projects&lt;/code&gt; folder according to your need&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://create-react-app.dev/docs/deployment/#github-pages&#34;&gt;Github Pages&lt;/a&gt; to create your own website.&lt;/li&gt; &#xA; &lt;li&gt;To deploy your website, first you need to create github repository with name &lt;code&gt;&amp;lt;your-github-username&amp;gt;.github.io&lt;/code&gt; and push the generated code to the &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sections 📚&lt;/h2&gt; &#xA;&lt;p&gt;✔️ About&lt;br&gt; ✔️ Interests&lt;br&gt; ✔️ Education&lt;br&gt; ✔️ Online Certification&lt;br&gt; ✔️ Experience&lt;br&gt; ✔️ Projects &lt;br&gt; ✔️ Skills &lt;br&gt; ✔️ Resume&lt;br&gt; ✔️ Contact Info&lt;/p&gt; &#xA;&lt;h2&gt;Tools Used 🛠️&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;b&gt;GitHub Pages&lt;/b&gt; - To host my static website (HTML, CSS, JS).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing 💡&lt;/h2&gt; &#xA;&lt;h4&gt;Step 1&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Option 1&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;🍴 Fork this repo!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Option 2&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;👯 Clone this repo to your local machine.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Step 2&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build your code&lt;/strong&gt; 🔨🔨🔨&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Step 3&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔃 Create a new pull request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badges.mit-license.org&#34;&gt;&lt;img src=&#34;http://img.shields.io/:license-mit-blue.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://opensource.org/licenses/mit-license.php&#34;&gt;MIT license&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>federico-busato/Modern-CPP-Programming</title>
    <updated>2024-02-08T01:34:01Z</updated>
    <id>tag:github.com,2024-02-08:/federico-busato/Modern-CPP-Programming</id>
    <link href="https://github.com/federico-busato/Modern-CPP-Programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern C++ Programming Course (C++11/14/17/20/23)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Modern C++ Programming&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/federico-busato/Modern-CPP-Programming/master/other/cpp_logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/releases&#34; alt=&#34;Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/federico-busato/Modern-CPP-Programming?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a alt=&#34;Stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/federico-busato/Modern-CPP-Programming?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/network/members&#34; alt=&#34;Forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/federico-busato/Modern-CPP-Programming?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/commits/master&#34; alt=&#34;Commits&#34;&gt; &lt;img src=&#34;https://badgen.net/github/commits/federico-busato/Modern-CPP-Programming?style=for-the-badge&amp;amp;scale=1.2&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming-Material/issues&#34; alt=&#34;Issues&#34;&gt; &lt;img src=&#34;https://badgen.net/github/closed-issues/federico-busato/Modern-CPP-Programming?style=for-the-badge&amp;amp;scale=1.2&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;C++11 / C++14 / C++17 / C++20 / (C++23)&lt;/h2&gt; &#xA;&lt;p&gt;This &lt;em&gt;open-access&lt;/em&gt; course is directed at those who are already familiar with C and object-oriented programming towards a proficiency level of C++ programming. The course covers the basics of C++ programming and moves on to advanced C++ semantics and concepts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Free and frequently updated&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;22 lectures, ~1500 slides&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Include the &lt;em&gt;last language standard&lt;/em&gt; concepts and features&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Practical teaching&lt;/em&gt;: non-verbose, short structured descriptions associated with code&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Minimal code examples&lt;/em&gt; for showing just a specific feature or issue without digressing&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Complementary language aspects&lt;/em&gt;: tools, coding conventions, project organization, and code optimization&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Experience-based&lt;/em&gt;: many aspects, examples, and problems come from real-world cases faced during my work as software engineer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you enjoy the course or you find it useful, please add a &lt;strong&gt;Star&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/federico-busato/Modern-CPP-Programming?style=social&#34; alt=&#34;stars - Modern-CPP-Programming&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CHAPTERS&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;#&lt;/th&gt; &#xA;   &lt;th&gt;TITLE&lt;/th&gt; &#xA;   &lt;th&gt;MAIN FOCUS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/01.Introduction.pdf&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/01.Introduction.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;History of C/C++, Areas of Applications, Course introduction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/02.Basic_Concepts_I.pdf&#34;&gt;&lt;strong&gt;Basic Concepts I - Fundamental Types&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/02.Basic_Concepts_I.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Types overview, operators, and conversion&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/03.Basic_Concepts_II.pdf&#34;&gt;&lt;strong&gt;Basic Concepts II - Integral and Floating-point Types&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/03.Basic_Concepts_II.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Integral and floating-point types and their arithmetic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/04.Basic_Concepts_III.pdf&#34;&gt;&lt;strong&gt;Basic Concepts III - Entities and Control Flow&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/04.Basic_Concepts_III.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Enumerators, structures, control flow statements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/05.Basic_Concepts_IV.pdf&#34;&gt;&lt;strong&gt;Basic Concepts IV - Memory Management&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/05.Basic_Concepts_IV.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Heap, Stack, pointers, references, const properties, conversion operators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/06.Basic_Concepts_V.pdf&#34;&gt;&lt;strong&gt;Basic Concepts V - Functions and Preprocessing&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/06.Basic_Concepts_V.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Functions, lambda expressions, preprocessing directives&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/07.Object_Oriented_I.pdf&#34;&gt;&lt;strong&gt;Object Oriented Programming I&amp;nbsp;-&amp;nbsp;Class&amp;nbsp;Concepts&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/07.Object_Oriented_I.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Class hierarchy, constructor, destructor, class keywords&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/08.Object_Oriented_II.pdf&#34;&gt;&lt;strong&gt;Object Oriented Programming II&amp;nbsp;-&amp;nbsp;Polymorphism and Operator Overloading&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/08.Object_Oriented_II.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Polymorphism, operators overloading&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/09.Templates_I.pdf&#34;&gt;&lt;strong&gt;Templates and Meta-programming I&amp;nbsp;-&amp;nbsp;Function Templates and Compile-Time Utilities&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/09.Templates_I.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Function template, type traits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/10.Templates_II.pdf&#34;&gt;&lt;strong&gt;Templates and Meta-programming II&amp;nbsp;-&amp;nbsp;Class Templates and SFINAE&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/10.Templates_II.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Class template, SFINAE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;11&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/11.Translation_Units_I.pdf&#34;&gt;&lt;strong&gt;Translation Units&amp;nbsp;I&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/1.Translation_Units_I.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Linkage and One Definition Rule&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;12&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/12.Translation_Units_II.pdf&#34;&gt;&lt;strong&gt;Translation Units&amp;nbsp;II&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/12.Translation_Units_II.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Dealing with multiple translation units and files,&amp;nbsp;&amp;nbsp;&lt;code&gt;#include&lt;/code&gt;, and modules&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;13&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/13.Code_Convention.pdf&#34;&gt;&lt;strong&gt;Code Conventions&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/13.Code_Convention.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Project organization and main code conventions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;14&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/14.Ecosystem_I.pdf&#34;&gt;&lt;strong&gt;Ecosystem&amp;nbsp;I&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/14.Ecosystem_I.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Debugging, and testing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/15.Ecosystem_II.pdf&#34;&gt;&lt;strong&gt;Ecosystem&amp;nbsp;II&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/15.Ecosystem_II.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Cmake,&amp;nbsp;documenting, and other Tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;16&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/16.Utilities.pdf&#34;&gt;&lt;strong&gt;Utilities&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/16.Utilities.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Main &lt;code&gt;std&lt;/code&gt; libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;17&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/17.Iterators_Containers_Alg.pdf&#34;&gt;&lt;strong&gt;Containers, Iterators, and Algorithms&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/17.Iterators_Containers_Alg.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Containers, iterators, algorithms, ranges&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;18&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/18.Advanced_Topics_I.pdf&#34;&gt;&lt;strong&gt;Advanced Topics&amp;nbsp;I&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/18.Advanced_Topics_I.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Move semantics, universal reference, type deduction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;19&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/19.Advanced_Topics_II.pdf&#34;&gt;&lt;strong&gt;Advanced Topics&amp;nbsp;II&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/19.Advanced_Topics_II.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Error handling, C++ idioms, smart pointers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/20.Optimization_I.pdf&#34;&gt;&lt;strong&gt;Optimization I&amp;nbsp;-&amp;nbsp;Basic Concepts&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/20.Optimization_I.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Ahmdal Law, performance bounds, architecture concepts (ILP, SIMD, etc.), memory hierarchy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;21&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/21.Optimization_II.pdf&#34;&gt;&lt;strong&gt;Optimization II - Code Optimization&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/21.Optimization_II.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Arithmetic optimizations, memory optimizations, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;22&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/22.Optimization_III.pdf&#34;&gt;&lt;strong&gt;Optimization III -&amp;nbsp;Non-Coding Optimizations and Benchmarking&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/22.Optimization_III.html&#34;&gt;html&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Compiler optimizations, profiling and benchmarking tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;ALL-IN-ONE BOOK&lt;/strong&gt;&lt;/em&gt;: &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/modern-cpp.pdf&#34;&gt;&lt;strong&gt;modern-cpp.pdf&lt;/strong&gt;&lt;/a&gt; (could be a few commits behind), &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/htmls/modern-cpp.html&#34;&gt;html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TOPICS IN DETAILS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/01.Introduction.pdf&#34;&gt;1. Introduction&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Little History of C/C++ Programming Languages&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Areas of Application and Popularity&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Philosophy&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Weakness&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Books and References&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Course&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/02.Basic_Concepts_I.pdf&#34;&gt;2. Basic Concepts I - Fundamental Types and Operations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preparation&lt;/strong&gt;: What compiler should I use?, What editor/IDE compiler should I use?, How to compile?&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hello World&lt;/strong&gt;: I/O Stream&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Fundamental Types Overview&lt;/strong&gt;: Arithmetic types, Non-standard arithmetic types, &lt;code&gt;void&lt;/code&gt; type, Pointer type and &lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversion Rules&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;auto&lt;/code&gt; declaration&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Operators&lt;/strong&gt;: Operators precedence, Prefix/Postfix increment/decrement, Assignment, Compound , and Comma operators, Spaceship operator &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; , Safe Comparison Operators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/03.Basic_Concepts_II.pdf&#34;&gt;3. Basic Concepts II - Integral and Floating-point Types&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integral Data Types&lt;/strong&gt;: Fixed width integers, &lt;code&gt;size_t&lt;/code&gt; and&lt;code&gt;ptrdiff_t&lt;/code&gt;, Signed/Unsigned integer characteristics, Promotion, Truncation, Undefined behavior&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Floating-point Types and Arithmetic&lt;/strong&gt;: IEEE Floating-point Standard and Other Representations, Normal/Denormal values, Infinity, Not a Number (&lt;code&gt;NaN&lt;/code&gt;), Machine Epsilon, Units at the Last Place (ULP), Cheatsheet, Summary, Arithmetic Properties, Detect Floating-point Errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Floating-point Issues&lt;/strong&gt;: Catastrophic cancellation, Floating-point comparison&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/04.Basic_Concepts_III.pdf&#34;&gt;4. Basic Concepts III - Entities and Control Flow&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Entities&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declaration and Definition&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enumerators&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;struct&lt;/code&gt;, Bitfield, &lt;code&gt;union&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;: &lt;code&gt;if&lt;/code&gt; Statement, &lt;code&gt;for&lt;/code&gt; Loop, Range-base &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;goto&lt;/code&gt;, Avoid unused variable warning &lt;code&gt;[[maybe unused]]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/05.Basic_Concepts_IV.pdf&#34;&gt;5. Basic Concepts IV - Memory Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Heap and Stack&lt;/strong&gt;: Stack Memory, &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, Non-allocating placement allocation, Non-throwing allocation, Memory leak&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Initialization&lt;/strong&gt;: Variable initialization, Uniform initialization, Fixed-size array initialization, Structure initialization, Dynamic memory initialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pointers and References&lt;/strong&gt;: Pointer Operations, Address-of operator &lt;code&gt;&amp;amp;&lt;/code&gt;, Reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Constant and Literals, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;constexpr&lt;/code&gt;, &lt;code&gt;consteval&lt;/code&gt;, &lt;code&gt;constinit&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;if constexpr&lt;/code&gt;, &lt;code&gt;std::is constant evaluated()&lt;/code&gt;, &lt;code&gt;if consteval&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;volatile&lt;/code&gt; keyword&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Explicit Type Conversion&lt;/strong&gt;: &lt;code&gt;static_cast&lt;/code&gt;, &lt;code&gt;const_cast&lt;/code&gt;, &lt;code&gt;reinterpret_cast&lt;/code&gt;, Type punning&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sizeof&lt;/code&gt; Operator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/06.Basic_Concepts_V.pdf&#34;&gt;6. Basic Concepts V - Functions and Preprocessing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;: Pass by-value, Pass by-pointer, Pass by-reference, Function signature and Overloading, Overloading and &lt;code&gt;=delete&lt;/code&gt;, Default parameters, Attributes &lt;code&gt;[[attributes]]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Function Pointer and Function Objects&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lambda Expressions&lt;/strong&gt;: Capture list, Parameters, Composability, &lt;code&gt;constexpr/consteval&lt;/code&gt;, &lt;code&gt;template&lt;/code&gt;, &lt;code&gt;mutable&lt;/code&gt;, &lt;code&gt;[[nodiscard]]&lt;/code&gt;, Capture list and classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;: Preprocessors, Common errors, Source location macros, Conditional compiling macros, Stringizing operator (&lt;code&gt;#&lt;/code&gt;), &lt;code&gt;#error&lt;/code&gt; and &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;#pragma&lt;/code&gt;, Token-Pasting Operator (&lt;code&gt;##&lt;/code&gt;), Variadic Macro&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/07.Object_Oriented_I.pdf&#34;&gt;7. Object-Oriented Programming I&amp;nbsp;-&amp;nbsp;Class&amp;nbsp;Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Classes&lt;/strong&gt;: RAII Idiom&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Hierarchy&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access specifiers&lt;/strong&gt;: Inheritance access specifiers, When use &lt;code&gt;public/protected/private&lt;/code&gt; for data members?&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Constructor&lt;/strong&gt;: Default constructor, Class initialization, Uniform initialization for objects, Delegate constructor, &lt;code&gt;explicit&lt;/code&gt; keyword, &lt;code&gt;[[nodiscard]]&lt;/code&gt; and classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy Constructor&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Destructor&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Defaulted Constructors, Destructor, and Operators&lt;/strong&gt; (&lt;code&gt;= default&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Keywords&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;mutable&lt;/code&gt;, &lt;code&gt;using&lt;/code&gt;, &lt;code&gt;friend&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/08.Object_Oriented_II.pdf&#34;&gt;8. Object-Oriented Programming II&amp;nbsp;-&amp;nbsp;Polymorphism and Operator Overloading&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Polymorphism&lt;/strong&gt;: &lt;code&gt;virtual&lt;/code&gt; methods, Virtual table, &lt;code&gt;override&lt;/code&gt; keyword, &lt;code&gt;final&lt;/code&gt; keyword, Common errors, Pure virtual method, Abstract class and interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Inheritance Casting and Run-time Type Identification&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Operator Overloading&lt;/strong&gt;: Overview, Comparison operator &lt;code&gt;&amp;lt;&lt;/code&gt;, Spaceship operator &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;, Subscript operator &lt;code&gt;[]&lt;/code&gt;, Multidimensional Subscript operator &lt;code&gt;[]&lt;/code&gt;, Function call operator &lt;code&gt;()&lt;/code&gt;, static operator &lt;code&gt;[]&lt;/code&gt; and operator &lt;code&gt;()&lt;/code&gt;, Conversion operator &lt;code&gt;T()&lt;/code&gt;, Return type overloading resolution, Increment and decrement operators &lt;code&gt;++&lt;/code&gt;/&lt;code&gt;--&lt;/code&gt;, Assignment operator &lt;code&gt;=&lt;/code&gt;, Stream operator &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, Operator Notes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Special Objects&lt;/strong&gt;: Aggregate, Trivial class, Standard-layout class, Plain old data (POD), Hierarchy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/09.Templates_I.pdf&#34;&gt;9. Templates and Meta-programming I -&amp;nbsp;Function Templates and Compile-Time Utilities&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Function Template&lt;/strong&gt;: Overview, Template parameters, Template parameter - default value, Overloading, Specialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Template Variable&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Template Parameter Types&lt;/strong&gt;: Generic Type Notes, &lt;code&gt;auto&lt;/code&gt; Placeholder, Class template parameter type, Array and pointer types, Function type&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compile-Time Utilities&lt;/strong&gt;: &lt;code&gt;static_assert&lt;/code&gt;, &lt;code&gt;decltype&lt;/code&gt; Keyword, &lt;code&gt;using&lt;/code&gt; Keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type Traits&lt;/strong&gt;: Overview, Type traits library, Type manipulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/10.Templates_II.pdf&#34;&gt;10. Templates and Meta-programming II - &amp;nbsp;Class Templates and SFINAE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Template&lt;/strong&gt;: Class specialization, Class template constructor, Constructor template automatic deduction (CTAD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Template - Advanced Concepts&lt;/strong&gt;: Class + Function - Specialization, Dependent Names - &lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt; Keywords, Class template hierarchy and &lt;code&gt;using&lt;/code&gt;, &lt;code&gt;friend&lt;/code&gt; Keyword, Template Template Arguments&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Template Meta-Programming&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SFINAE: Substitution Failure Is Not An Error&lt;/strong&gt;: Function SFINAE, Class SFINAE, Class + Function SFINAE&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variadic Template&lt;/strong&gt;: Folding Expression, Variadic class template&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++20 Concepts&lt;/strong&gt;: Overview, &lt;code&gt;concept&lt;/code&gt; Keyword, &lt;code&gt;requires&lt;/code&gt; Clause, &lt;code&gt;requires&lt;/code&gt; Expression, &lt;code&gt;requires&lt;/code&gt; Expression + Clause, &lt;code&gt;requires&lt;/code&gt; Clause + Expression, &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;constexpr&lt;/code&gt;, Nested &lt;code&gt;requires&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/11.Translation_Units_I.pdf&#34;&gt;11. Translation Units I - Linkage and One Definition Rule&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Concepts&lt;/strong&gt;: Translation unit, Local and global scope, Linkage&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Storage Class and Duration&lt;/strong&gt;: Storage duration, Storage class, &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;extern&lt;/code&gt; keywords, Internal/External linkage examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linkage of &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;constexpr&lt;/code&gt;&lt;/strong&gt;: Static Initialization Order Fiasco&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linkage Summary&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dealing with Multiple Translation Units&lt;/strong&gt;: Class in multiple translation units&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One Definition Rule (ODR)&lt;/strong&gt;: Global variable issues, ODR - Point 3, &lt;code&gt;inline&lt;/code&gt; functions/variables, &lt;code&gt;constexpr&lt;/code&gt; and &lt;code&gt;inline&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ODR - Function Template&lt;/strong&gt;: Cases, &lt;code&gt;extern&lt;/code&gt; keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ODR - Class Template&lt;/strong&gt;: Cases, &lt;code&gt;extern&lt;/code&gt; keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ODR Undefined Behavior and Summary&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/12.Translation_Units_II.pdf&#34;&gt;12. Translation Units II - Include, Module, and Namespace&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;#include&lt;/code&gt; Issues&lt;/strong&gt;: Forward declaration, Include guard, Circular dependencies, Common linking errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++20 Modules&lt;/strong&gt;: Overview, Terminology, Visibility and Reachability, Module unit types, Keywords, Global module fragment, Private module fragment, Header module unit, Module partitions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Namespace&lt;/strong&gt;: Namespace functions vs. &lt;code&gt;static&lt;/code&gt; methods, Namespace alias, Anonymous namespace, &lt;code&gt;inline&lt;/code&gt; namespace, Attributes and namespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiling Multiple Translation Units&lt;/strong&gt;: Fundamental compiler flags, Compile Methods, Deal with libraries, Build static/dynamic libraries, Find dynamic library dependencies, Analyze object/executable symbols&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/13.Code_Convention.pdf&#34;&gt;13. Code Conventions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Project Organization&lt;/strong&gt;: Project directories, Project files, “Common” Project Organization Notes, Alternative - “Canonical” project organization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coding Styles and Conventions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;#include&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Macro and Preprocessing&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Namespace&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variables and Arithmetic Types&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Structs and Classes&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modern C++ Features&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Maintainability&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Naming&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Readability and Formatting&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Documentation&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/14.Ecosystem_I.pdf&#34;&gt;14. Ecosystem I - Debugging&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Assertion&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Execution debugging&lt;/strong&gt;: Breakpoints, Watchpoints / Catchpoints, Control Flow, Stack and Info, Print, Disassemble&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory Debugging&lt;/strong&gt;: &lt;code&gt;valgrind&lt;/code&gt;, Stack protection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sanitizers&lt;/strong&gt;: Address sanitizer, Leak sanitizer, Memory sanitizers, Undefined behavior sanitizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debugging Summary&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiler Warnings&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Testing&lt;/strong&gt;: Unit test, Test-Driven Development (TDD), Code coverage, Fuzz testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Quality&lt;/strong&gt;: &lt;code&gt;clang-tidy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/15.Ecosystem_II.pdf&#34;&gt;15. Ecosystem II - Cmake and Other Tools&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CMake&lt;/strong&gt;: &lt;code&gt;cmake&lt;/code&gt; and &lt;code&gt;ctest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Documentation&lt;/strong&gt;: &lt;code&gt;doxygen&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Statistics&lt;/strong&gt;: Count lines of code, Cyclomatic complexity analyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Other Tools&lt;/strong&gt;: Code formatting - &lt;code&gt;clang-format&lt;/code&gt;, &lt;code&gt;Compiler Explorer&lt;/code&gt;, Code transformation - &lt;code&gt;CppInsights&lt;/code&gt;, Code autocompletion - &lt;code&gt;GitHub Co-Pilot/TabNine/Kite&lt;/code&gt;, Local code search - &lt;code&gt;ripgrep&lt;/code&gt;, Code search engine - &lt;code&gt;searchcode/grep.app&lt;/code&gt;, Code benchmarking - &lt;code&gt;Quick-Bench&lt;/code&gt;, Font for Coding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/16.Utilities.pdf&#34;&gt;16. Utilities&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;I/O Stream&lt;/strong&gt;: Manipulator, &lt;code&gt;ofstream/ifstream&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt;: &lt;code&gt;std::string&lt;/code&gt;, Conversion from/to numeric values, &lt;code&gt;std::string_view&lt;/code&gt;, &lt;code&gt;std::format&lt;/code&gt;, &lt;code&gt;std::print&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Math Libraries&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Random Number&lt;/strong&gt;: Basic Concepts, C++ &lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;, Seed, PRNG period and quality, Distribution, Quasi-random&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time Measuring&lt;/strong&gt;: Wall-Clock time, User time, System time&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Std Class Templates&lt;/strong&gt;: &lt;code&gt;std::pair&lt;/code&gt;, &lt;code&gt;std::tuple&lt;/code&gt;, &lt;code&gt;std::variant&lt;/code&gt;, &lt;code&gt;std::optional&lt;/code&gt;, &lt;code&gt;std::any&lt;/code&gt;, &lt;code&gt;std::stacktrace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Filesystem Library&lt;/strong&gt;: Query methods, Modify methods&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/17.Iterators_Containers_Alg.pdf&#34;&gt;17. Containers, Iterators, and Algorithms&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Containers and Iterators&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sequence Containers&lt;/strong&gt;: &lt;code&gt;std::array&lt;/code&gt;, &lt;code&gt;std::vector&lt;/code&gt;, &lt;code&gt;std::list&lt;/code&gt;, &lt;code&gt;std::deque&lt;/code&gt;, &lt;code&gt;std::forward_list&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Associative Containers&lt;/strong&gt;: &lt;code&gt;std::set&lt;/code&gt;, &lt;code&gt;std::map&lt;/code&gt;, &lt;code&gt;std::multiset&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Container Adaptors&lt;/strong&gt;: &lt;code&gt;std::stack&lt;/code&gt;, &lt;code&gt;std::queue&lt;/code&gt;, &lt;code&gt;std::priority_queue&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;: &lt;code&gt;std::span&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Implement a Custom Iterator&lt;/strong&gt;: Semantic, Implement a simple Iterator&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Iterator Utility Methods&lt;/strong&gt;: &lt;code&gt;std::advance&lt;/code&gt;, &lt;code&gt;std::next&lt;/code&gt;, &lt;code&gt;std::prev&lt;/code&gt;, &lt;code&gt;std::distance&lt;/code&gt;, Container access methods, Iterator traits&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Algorithms Library&lt;/strong&gt;: &lt;code&gt;std::find_if&lt;/code&gt;, &lt;code&gt;std::sort&lt;/code&gt;, &lt;code&gt;std::accumulate&lt;/code&gt;, &lt;code&gt;std::generate&lt;/code&gt;, &lt;code&gt;std::remove_if&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++20 Ranges&lt;/strong&gt;: Key concepts, Range view, Range adaptor, Range factory, Range algorithms, Range actions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/18.Advanced_Topics_I.pdf&#34;&gt;18. Advanced Topics I&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Move Semantic&lt;/strong&gt;: &lt;code&gt;lvalues&lt;/code&gt; and &lt;code&gt;rvalues&lt;/code&gt; references, Move semantic, &lt;code&gt;std::move&lt;/code&gt;, Class Declaration Semantic&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Universal Reference and Perfect Forwarding&lt;/strong&gt;: Universal reference, Reference collapsing rules, Perfect forwarding&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Value Categories&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; Ref-qualifiers and &lt;code&gt;volatile&lt;/code&gt; Overloading&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy Elision and RVO&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type Deduction&lt;/strong&gt;: Pass by-reference, Pass by-pointer, Pass by-value, &lt;code&gt;auto&lt;/code&gt; deduction&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;const&lt;/code&gt; Correctness&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/19.Advanced_Topics_II.pdf&#34;&gt;19. Advanced Topics II&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Undefined Behavior:&lt;/strong&gt; Common cases, Detecting undefined behavior&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;: C++ Exceptions, Defining custom exceptions, &lt;code&gt;noexcept&lt;/code&gt; keyword, Memory allocation issues, Alternative error handling approaches&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Idioms&lt;/strong&gt;: Rule of zero/three/five, Singleton, PIMPL, CRTP, Template Virtual Functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Smart pointers&lt;/strong&gt;: &lt;code&gt;std::unique_ptr&lt;/code&gt;, &lt;code&gt;std::shared_ptr&lt;/code&gt;, &lt;code&gt;std::weak_ptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;: Thread Methods, Mutex, Atomic, Task-based parallelism&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/20.Optimization_I.pdf&#34;&gt;20. Optimization I&amp;nbsp;-&amp;nbsp;Basic Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Introduction&lt;/strong&gt;: Moore’s Law, Moore’s Law limitations, Reasons for Optimizing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Concepts&lt;/strong&gt;: Asymptotic complexity, Time-Memory Trade-off, Developing Cycle, Ahmdal&#39;s law, Throughput, Bandwidth, Latency, Performance bounds, Arithmetic intensity&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Architecture Concepts&lt;/strong&gt;: Instruction-level parallelism (ILP), Little’s law, Data-level parallelism (SIMD), Thread-level parallelism (TLP), Single Instruction Multiple Threads (SIMT), RISC, CISC Instruction sets&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory Hierarchy&lt;/strong&gt;: Memory hierarchy concepts, Memory locality&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/21.Optimization_II.pdf&#34;&gt;21. Optimization II&amp;nbsp;-&amp;nbsp;Code Optimization&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;I/O Operations&lt;/strong&gt;: &lt;code&gt;printf&lt;/code&gt;, Memory mapped I/O, Speed up raw data loading&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory Optimizations&lt;/strong&gt;: Heap memory, Stack memory, Cache utilization, data alignment, Memory Prefetch&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arithmetic&lt;/strong&gt;: Data types, Operations, Conversion, Floating-point, Compiler intrinsic functions, Value in a range, Lookup table&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;: Loop hoisting, Loop unrolling, Branch hints &lt;code&gt;[[likely/unlikely]]&lt;/code&gt;, Compiler hints &lt;code&gt;[[assume]]&lt;/code&gt;, Recursion&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;: Function call cost, Argument passing, Function optimizations, Function inlining, Pointers aliasing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Object-Oriented Programming&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Std Library and Other Language Aspects&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/22.Optimization_III.pdf&#34;&gt;22. Optimization III -&amp;nbsp;Non-Coding Optimizations and Benchmarking&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiler Optimizations&lt;/strong&gt;: About the compiler, Compiler optimization flags, Linker optimization flags, Architecture flags, Help the Compiler to produce better code, Profile guided optimization (PGO), Post-Processing Binary Optimizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiler Transformation Techniques&lt;/strong&gt;: Basic Transformations, Loop unswitching, Loop fusion, Loop fission, Loop interchange, Loop tiling&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Libraries and Data Structures&lt;/strong&gt;: External libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance Benchmarking&lt;/strong&gt;: What to test?, Workload/Dataset quality, Cache behavior, Stable CPU performance, Program, Multi-threads considerations, Program memory layout, Measurement overhead, Compiler optimizations, Metric evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Profiling&lt;/strong&gt;: &lt;code&gt;gprof&lt;/code&gt;, &lt;code&gt;uftrace&lt;/code&gt;, &lt;code&gt;callgrind&lt;/code&gt;, &lt;code&gt;cachegrind&lt;/code&gt;, &lt;code&gt;perf&lt;/code&gt; Linux profiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parallel Computing&lt;/strong&gt;: Concurrency vs. Parallelism, Performance scaling, Gustafson’s Law, Parallel programming languages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Software Design Chapter&lt;/li&gt; &#xA; &lt;li&gt;Build Aspects Chapter (e.g. reducing build time)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Essential Tool&lt;/h3&gt; &#xA;&lt;p&gt;Online compiler and execution: &lt;a href=&#34;https://godbolt.org/&#34;&gt;CompilerExplorer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for code execution: [Add new..] -&amp;gt; [execution only]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reporting bugs 🐛 and contributing&lt;/h3&gt; &#xA;&lt;p&gt;If you find any typo, conceptual error, or section to improve, please report them by using the &lt;code&gt;issue&lt;/code&gt; panel.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Federico Busato&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/fedebusato&#34;&gt;twitter.com/fedebusato&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LinkedIn: &lt;a href=&#34;https://www.linkedin.com/in/federico-busato/&#34;&gt;www.linkedin.com/in/federico-busato/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>