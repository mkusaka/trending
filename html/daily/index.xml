<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-26T01:30:11Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>availproject/avail</title>
    <updated>2024-07-26T01:30:11Z</updated>
    <id>tag:github.com,2024-07-26:/availproject/avail</id>
    <link href="https://github.com/availproject/avail" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;Center&#34;&gt; &#xA; &lt;h1&gt;Avail Node&lt;/h1&gt; &#xA; &lt;h3&gt;Official Client for the Avail blockchain&lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/availproject/avail/actions/workflows/default.yml&#34;&gt;&lt;img src=&#34;https://github.com/availproject/avail/actions/workflows/default.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/availproject/avail/main/.github/img/terminal.jpg&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running Avail Node&lt;/h2&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To manually run the Avail Node, you&#39;ll need to have the following dependencies installed:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/learn/get-started&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://docs.substrate.io/install/&#34;&gt;Substrate dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;After ensuring you have the dependencies installed, you can run the Avail Node using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p output&#xA;cargo run --locked --release -- --chain mainnet -d ./output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command compiles and runs the Avail Node connected to the Mainnet Network.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2024-03-05 12:31:25 Avail Node    &#xA;2024-03-05 12:31:25 ✌️  version 2.0.0-7d6ed7f7141    &#xA;2024-03-05 12:31:25 ❤️  by Avail Team, 2017-2024    &#xA;2024-03-05 12:31:25 📋 Chain specification: Avail Development Network    &#xA;2024-03-05 12:31:25 🏷  Node name: Alice    &#xA;2024-03-05 12:31:25 👤 Role: AUTHORITY    &#xA;2024-03-05 12:31:25 💾 Database: ParityDb at /tmp/substrateecX1Gm/chains/avail_development_network/paritydb/full    &#xA;2024-03-05 12:31:27 🔨 Initializing Genesis block/state (state: 0x7d28…a6c8, header-hash: 0x1074…234a)    &#xA;2024-03-05 12:31:27 👴 Loading GRANDPA authority set from genesis on what appears to be first startup.    &#xA;2024-03-05 12:31:28 👶 Creating empty BABE epoch changes on what appears to be first startup.    &#xA;2024-03-05 12:31:28 🏷  Local node identity is: 12D3KooWQDpM9w2zcvUaJS89KVAEdXsDFcBrTtc8awHGusRwSCEr    &#xA;2024-03-05 12:31:28 Prometheus metrics extended with avail metrics    &#xA;2024-03-05 12:31:28 💻 Operating system: linux    &#xA;2024-03-05 12:31:28 💻 CPU architecture: x86_64    &#xA;2024-03-05 12:31:28 💻 Target environment: gnu    &#xA;2024-03-05 12:31:28 💻 CPU: 13th Gen Intel(R) Core(TM) i7-13700K    &#xA;2024-03-05 12:31:28 💻 CPU cores: 16    &#xA;2024-03-05 12:31:28 💻 Memory: 31873MB    &#xA;2024-03-05 12:31:28 💻 Kernel: 6.7.6-200.fc39.x86_64    &#xA;2024-03-05 12:31:28 💻 Linux distribution: Fedora Linux 39 (Workstation Edition)    &#xA;2024-03-05 12:31:28 💻 Virtual machine: no    &#xA;2024-03-05 12:31:28 📦 Highest known block at #0    &#xA;2024-03-05 12:31:28 〽️ Prometheus exporter started at 127.0.0.1:9615    &#xA;2024-03-05 12:31:28 Running JSON-RPC server: addr=127.0.0.1:9944, allowed origins=[&#34;http://localhost:*&#34;, &#34;http://127.0.0.1:*&#34;, &#34;https://localhost:*&#34;, &#34;https://127.0.0.1:*&#34;, &#34;https://polkadot.js.org&#34;]    &#xA;2024-03-05 12:31:28 🏁 CPU score: 1.65 GiBs    &#xA;2024-03-05 12:31:28 🏁 Memory score: 22.52 GiBs    &#xA;2024-03-05 12:31:28 🏁 Disk score (seq. writes): 7.00 GiBs    &#xA;2024-03-05 12:31:28 🏁 Disk score (rand. writes): 2.77 GiBs    &#xA;2024-03-05 12:31:28 👶 Starting BABE Authorship worker    &#xA;2024-03-05 12:31:33 💤 Idle (0 peers), best: #0 (0x1074…234), finalized #0 (0x1074…234a), ⬇ 0 ⬆ 0    &#xA;2024-03-05 12:31:38 💤 Idle (0 peers), best: #0 (0x1074…234a), finalized #0 (0x1074…234a), ⬇ 0 ⬆ 0   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported Chains&lt;/h3&gt; &#xA;&lt;h4&gt;Development&lt;/h4&gt; &#xA;&lt;p&gt;A development chain is typically used for testing and development purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --locked --release -- --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Testnet Turing&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --locked --release -- --chain turing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --locked --release -- --chain mainnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;To run the Avail Node using Docker, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;docker build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode&#xA;# For SELinux&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running Dev Chain&lt;/h4&gt; &#xA;&lt;p&gt;There are instructions for running a development chain using Docker. A development chain is typically used for testing and development purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;docker build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;# For SELinux&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Podman&lt;/h3&gt; &#xA;&lt;p&gt;To run the Avail Node using Docker, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;podman build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode&#xA;# For SELinux&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running Dev Chain&lt;/h4&gt; &#xA;&lt;p&gt;There are instructions for running a development chain using Podman. A development chain is typically used for testing and development purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;podman build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;# For SELinux&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Kate RPC&lt;/h2&gt; &#xA;&lt;p&gt;To enable Kate RPC you need to pass &lt;code&gt;--enable-kate-rpc&lt;/code&gt; flag when executing the binary. &lt;code&gt;--dev&lt;/code&gt; implies &lt;code&gt;--enable-kate-rpc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./avail-node --enable-kate-rpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;All Custom Flags&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--enable-kate-rpc&#xA;    Enable Kate RPC&#xA;&#xA;--kate-max-cells-size &amp;lt;KATE_MAX_CELLS_SIZE&amp;gt;&#xA;    The maximum number of cells that can be requested in one go.&#xA;    &#xA;    Max size cannot exceed 10_000&#xA;    &#xA;    [default: 64]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run Benchmarks&lt;/h2&gt; &#xA;&lt;h3&gt;Kate RPC&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./avail-node --dev&#xA;deno run -A ./examples/deno/benchmarks/query_proof.ts &amp;amp;&amp;amp; deno run -A ./examples/deno/benchmarks/query_rows.ts &amp;amp;&amp;amp; deno run -A ./examples/deno/benchmarks/query_block_length.ts &amp;amp;&amp;amp; deno run -A ./examples/deno/benchmarks/query_data_proof.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Header Builder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Option 1: for time measurement &#xA;cargo bench --bench header_kate_commitment_cri&#xA;# Option 2: for time measurement &#xA;cargo bench --bench header_kate_commitment_divan&#xA;# Option 1: for instructions, cache and main memory hits&#xA;cargo bench --bench header_kate_commitment_iai_callgrind&#xA;# Option 2: for instructions, cache and main memory hits&#xA;cargo bench --bench header_kate_commitment_iai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For additional documentation check our &lt;a href=&#34;https://github.com/availproject/avail/wiki&#34;&gt;wiki page&lt;/a&gt;. There you can learn how to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run Avail Node together with Avail Light Clients&lt;/li&gt; &#xA; &lt;li&gt;Build Avail Node for different Linux flavours&lt;/li&gt; &#xA; &lt;li&gt;Find out what node synchronization options are available&lt;/li&gt; &#xA; &lt;li&gt;Running Avail Benchmarks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interact with the chain&lt;/h2&gt; &#xA;&lt;p&gt;You can find on this repository many example on how to interact with any avail chain.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the &lt;a href=&#34;https://raw.githubusercontent.com/availproject/avail/main/avail-js/&#34;&gt;avail-js&lt;/a&gt; folder, you will find our wrapper for polkadot-js including multiple helpers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/availproject/avail/main/avail-js/examples/&#34;&gt;example&lt;/a&gt; folder inside avail-js contains some examples using node-js and an example web app to setup the extension.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In the &lt;a href=&#34;https://raw.githubusercontent.com/availproject/avail/main/avail-subxt/&#34;&gt;avail-subxt&lt;/a&gt; folder, you will find our fork of subxt with some example that are moved to &lt;a href=&#34;https://raw.githubusercontent.com/availproject/avail/main/e2e/src/tests/&#34;&gt;e2e folder&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;a href=&#34;https://raw.githubusercontent.com/availproject/avail/main/examples/&#34;&gt;examples&lt;/a&gt; folders you will find examples for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Deno examples&lt;/li&gt; &#xA;   &lt;li&gt;Go examples&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>riggraz/no-style-please</title>
    <updated>2024-07-26T01:30:11Z</updated>
    <id>tag:github.com,2024-07-26:/riggraz/no-style-please</id>
    <link href="https://github.com/riggraz/no-style-please" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A (nearly) no-CSS, fast, minimalist Jekyll theme.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;no style, please!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/riggraz/no-style-please/master/logo.png&#34; width=&#34;64&#34; align=&#34;left&#34;&gt;A (nearly) no-CSS, fast, minimalist &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; theme. Inspired by &lt;a href=&#34;http://tilde.town/~elly/&#34;&gt;elly&#39;s site&lt;/a&gt;, expressly created for &lt;a href=&#34;https://riggraz.dev/&#34;&gt;my personal blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;a href=&#34;https://riggraz.dev/no-style-please/&#34;&gt;Try the demo out!&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/riggraz/no-style-please/master/_screenshots/featured-image.png&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast (&lt;strong&gt;1kb of CSS!&lt;/strong&gt; For more information on performance and more, see &lt;a href=&#34;https://raw.githubusercontent.com/riggraz/no-style-please/master/_screenshots/page-speed-insights-report.png&#34;&gt;Page Speed Insights report&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/riggraz/no-style-please/master/_screenshots/lighthouse-report.png&#34;&gt;Lighthouse report&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Light, dark and auto modes&lt;/li&gt; &#xA; &lt;li&gt;Responsive&lt;/li&gt; &#xA; &lt;li&gt;Content first (typography optimized for maximum readability)&lt;/li&gt; &#xA; &lt;li&gt;SEO optimized (uses &lt;a href=&#34;https://github.com/jekyll/jekyll-seo-tag&#34;&gt;Jekyll SEO Tag&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;RSS feed (uses &lt;a href=&#34;https://github.com/jekyll/jekyll-feed&#34;&gt;Jekyll Feed&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Fully compatible with &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/riggraz/no-style-please/master/#github-pages-installation&#34;&gt;GitHub Pages installation&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you haven&#39;t already created your blog using Jekyll, follow the &lt;a href=&#34;https://jekyllrb.com/docs/&#34;&gt;instructions&lt;/a&gt; to do so from Jekyll&#39;s documentation.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: if you are using Jekyll with GitHub Pages, see the &lt;a href=&#34;https://raw.githubusercontent.com/riggraz/no-style-please/master/#github-pages-installation&#34;&gt;GitHub Pages installation section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, to style your blog with this theme, add this line to your Jekyll site&#39;s &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;no-style-please&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add this line to your Jekyll site&#39;s &lt;code&gt;_config.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;theme: no-style-please&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install no-style-please&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub Pages installation&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use this theme for your Jekyll&#39;s site deployed on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;, follow the instructions on &lt;a href=&#34;https://docs.github.com/en/github/working-with-github-pages/adding-a-theme-to-your-github-pages-site-using-jekyll#adding-a-theme&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can edit &lt;code&gt;_config.yml&lt;/code&gt; file to customize your blog. You can change things such as the name of the blog, the author, the appearance of the theme (light, dark or auto), how dates are formatted, etc. Customizable fields should be straightforward to understand. Still, &lt;code&gt;_config.yml&lt;/code&gt; contains some comments to help you understand what each field does.&lt;/p&gt; &#xA;&lt;p&gt;For further customization (e.g. layout, CSS) see the &lt;a href=&#34;https://jekyllrb.com/docs/themes/#overriding-theme-defaults&#34;&gt;official Jekyll&#39;s documentation&lt;/a&gt; on customizing gem-based themes.&lt;/p&gt; &#xA;&lt;h3&gt;Customize the menu&lt;/h3&gt; &#xA;&lt;p&gt;In order to add/edit/delete entries from the main menu, you have to edit the &lt;code&gt;menu.yml&lt;/code&gt; file inside &lt;code&gt;_data&lt;/code&gt; folder. Through that file you can define the structure of the menu. Take a look at the default configuration to get an idea of how it works and read on for a more comprehensive explanation.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;menu.yml&lt;/code&gt; file accepts the following fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;entries&lt;/code&gt; define a new unordered list that will contain menu entries&lt;/li&gt; &#xA; &lt;li&gt;each entry is marked by a &lt;code&gt;-&lt;/code&gt; at the beginning of the line&lt;/li&gt; &#xA; &lt;li&gt;each entry can have the following attributes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;title&lt;/code&gt;, which defines the text to render for this menu entry (&lt;strong&gt;NB: you can also specify HTML!&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;url&lt;/code&gt;, which can be used to specify an URL for this entry. If not specified, &lt;code&gt;title&lt;/code&gt; will be rendered as-is; otherwise &lt;code&gt;title&lt;/code&gt; will be sorrounded by a link tag pointing to the specified URL. Note that the URL can either be relative or absolute. Also note that you can get the same result by placing an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag in the &lt;code&gt;title&lt;/code&gt; field.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;post_list&lt;/code&gt;, which can be set either to &lt;code&gt;true&lt;/code&gt; or to an object. If it is true, the entry will have a list of all posts as subentries. This is used to render your post list. If you want to customize which posts to render (e.g. by category), you can add one or more of the following attributes under &lt;code&gt;post_list&lt;/code&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;category&lt;/code&gt;, which can be set to a string. It is used to render a list of posts of the specified category only. If you don&#39;t set it, then posts of all categories will be rendered.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;limit&lt;/code&gt;, which can be set to a number. It specifies the number of posts to show. If not set, all posts will be rendered.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;show_more&lt;/code&gt;, which can be true. If it is true and if the number of posts to show is greater than the specified &lt;code&gt;limit&lt;/code&gt;, render a link to another page. To specify the URL and the text of the link, you can set &lt;code&gt;show_more_url&lt;/code&gt; and &lt;code&gt;show_more_text&lt;/code&gt; attributes, which are documented below.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;show_more_url&lt;/code&gt;, which can be a string. It specifies the URL for the show more link. Use only if &lt;code&gt;show_more&lt;/code&gt; is true. This will usually redirect to a page containing all posts, which you can easily create using an archive page (see &lt;a href=&#34;https://raw.githubusercontent.com/riggraz/no-style-please/master/#create-archive-pages&#34;&gt;create archive pages&lt;/a&gt; section)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;show_more_text&lt;/code&gt;, which can be a string. It specifies the text for the show more link. Use only if &lt;code&gt;show_more&lt;/code&gt; is true.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;entries&lt;/code&gt;, yes, you can have entries inside entries. In this way you can create nested sublists!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Create archive pages&lt;/h3&gt; &#xA;&lt;p&gt;A so-called archive page is a page that shows a list of posts (see &lt;a href=&#34;https://riggraz.dev/no-style-please/all-posts&#34;&gt;this&lt;/a&gt; for an example). You can create an archive page by creating a page and putting the following frontmatter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;---&#xA;layout: archive&#xA;title: The title of the page here&#xA;which_category: name-of-category&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;which_category&lt;/code&gt; is optional: if you don&#39;t put it, then all posts of the blog will be listed; on the other hand, if you specify a category, only posts of that category will be shown.&lt;/p&gt; &#xA;&lt;p&gt;This feature is particularly useful if used together with the &lt;code&gt;show_more&lt;/code&gt; attribute in the menu. For example, if you want to limit the number of posts shown in the home page to 5 but add a link to view them all, then you can create an archive page using the method showed above and link to it using the &lt;code&gt;show_more_url&lt;/code&gt; attribute in &lt;code&gt;menu.yml&lt;/code&gt;. See &lt;a href=&#34;https://github.com/riggraz/no-style-please/raw/master/_data/menu.yml&#34;&gt;this example&lt;/a&gt; if you&#39;re in doubt.&lt;/p&gt; &#xA;&lt;h3&gt;Customize the index page&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;index.md&lt;/code&gt; page should use layout &lt;code&gt;home&lt;/code&gt;, which is the layout that displays the menu. If you want to have some content after the menu, you can just add that content in the &lt;code&gt;index.md&lt;/code&gt; file, and it will automatically show under the menu.&lt;/p&gt; &#xA;&lt;p&gt;Another thing you can do to customize the index page is show the description of your blog between the title and the menu. To do this, just edit &lt;code&gt;_config.yml&lt;/code&gt; and change &lt;code&gt;theme_config.show_description&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Pro tips&lt;/h3&gt; &#xA;&lt;h4&gt;Dark mode for images&lt;/h4&gt; &#xA;&lt;p&gt;This theme provides dark mode by inverting all colors of light mode throught the CSS &lt;code&gt;invert()&lt;/code&gt; function. This approach would also invert the color of all images, but, since this is not the behaviour one would expect, images are not inverted by default.&lt;/p&gt; &#xA;&lt;p&gt;However, if you would like to force the color inversion on a specific image you can do so by applying &lt;code&gt;class=&#34;ioda&#34;&lt;/code&gt; to that image (&#34;ioda&#34; stands for &#34;invert on dark appearance&#34;). See the image in the &lt;a href=&#34;https://github.com/riggraz/no-style-please/raw/master/_posts/2020-07-07-overview-post.md&#34;&gt;overview post&lt;/a&gt; for an example of this approach. Note that color inversion will take place only when the theme has dark appearance!&lt;/p&gt; &#xA;&lt;p&gt;For example, if you have a black and white image it could make sense to invert it in dark mode. On the other hand, a colorful image will probably look bad if inverted.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/riggraz/no-style-please&#34;&gt;https://github.com/riggraz/no-style-please&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;http://contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To set up your environment to develop this theme, run &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Your theme is setup just like a normal Jekyll site! To test your theme, run &lt;code&gt;bundle exec jekyll serve&lt;/code&gt; and open your browser at &lt;code&gt;http://localhost:4000&lt;/code&gt;. This starts a Jekyll server using your theme. Add pages, documents, data, etc. like normal to test your theme&#39;s contents. As you make modifications to your theme and to your content, your site will regenerate and you should see the changes in the browser after a refresh, just like normal.&lt;/p&gt; &#xA;&lt;p&gt;When your theme is released, only the files in &lt;code&gt;_layouts&lt;/code&gt;, &lt;code&gt;_includes&lt;/code&gt;, &lt;code&gt;_sass&lt;/code&gt; and &lt;code&gt;assets&lt;/code&gt; tracked with Git will be bundled. To add a custom directory to your theme-gem, please edit the regexp in &lt;code&gt;no-style-please.gemspec&lt;/code&gt; accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The theme is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>