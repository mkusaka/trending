<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-08T01:35:19Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Skoolgq/SkoolTV</title>
    <updated>2023-04-08T01:35:19Z</updated>
    <id>tag:github.com,2023-04-08:/Skoolgq/SkoolTV</id>
    <link href="https://github.com/Skoolgq/SkoolTV" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is the beta testing repo for Skool&#39;s TV feature. See our production repository at @SkoolTV/skooltv.github.io&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>LuckyHookin/edge-TTS-record</title>
    <updated>2023-04-08T01:35:19Z</updated>
    <id>tag:github.com,2023-04-08:/LuckyHookin/edge-TTS-record</id>
    <link href="https://github.com/LuckyHookin/edge-TTS-record" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个可以录制 Microsoft Edge 浏览器的语音合成（TTS）语音并输出为 .wav 音频的（windows平台）工具。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;edge-TTS-record&lt;/h1&gt; &#xA;&lt;p&gt;新写的另一个工具发布：&lt;a href=&#34;https://t.bilibili.com/694237238144270361&#34;&gt;https://t.bilibili.com/694237238144270361&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/LuckyHookin/edge-TTS-record/raw/master/demo.png&#34; alt=&#34;edge-TTS-record-img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;一个可以录制 Microsoft Edge 浏览器的语音合成（TTS）语音并输出为 &lt;code&gt;.wav&lt;/code&gt; 音频的（windows平台）工具。&lt;/p&gt; &#xA;&lt;p&gt;Microsoft Edge 浏览器中有两款非常逼真的&lt;strong&gt;在线&lt;/strong&gt;（Online）中文（zh-CN）语音：Xiaoxiao、Yunyang。&lt;/p&gt; &#xA;&lt;p&gt;用法：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;下载 &lt;a href=&#34;https://github.com/LuckyHookin/edge-TTS-record/releases&#34;&gt;edge-TTS-record.exe&lt;/a&gt;，运行并允许联网&lt;/li&gt; &#xA; &lt;li&gt;在文本编辑框中输入文本，调整参数，点击试听&lt;/li&gt; &#xA; &lt;li&gt;没问题就可以点击录制了，音频文件会保存在指定的目录下&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;演示：&lt;a href=&#34;https://www.bilibili.com/video/BV1eK411c73s&#34;&gt;https://www.bilibili.com/video/BV1eK411c73s&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;注意：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;需要 Microsoft Edge 浏览器 Chromium 内核版，一般是 Windows 10 自带的，如果系统中没有安装，程序将自动为你下载安装&lt;/li&gt; &#xA; &lt;li&gt;不管是试听还是录制，使用&lt;strong&gt;在线&lt;/strong&gt;（Online）语音都需确保电脑是联网的&lt;/li&gt; &#xA; &lt;li&gt;录制是全局的，应避免其他软件声音的干扰&lt;/li&gt; &#xA; &lt;li&gt;在线（Online）语音似乎无法调整音调&lt;/li&gt; &#xA; &lt;li&gt;当无法录制时，你可能需要额外安装 .NET Framework: &lt;a href=&#34;https://www.microsoft.com/zh-CN/download/details.aspx?id=17851&#34;&gt;https://www.microsoft.com/zh-CN/download/details.aspx?id=17851&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TODO:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 路径配置&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;可自定义选择要录制的设备&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 软件更新检测&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;相关仓库：&lt;/p&gt; &#xA;&lt;p&gt;界面（vue.js）：&lt;a href=&#34;https://github.com/LuckyHookin/tts-record-html&#34;&gt;https://github.com/LuckyHookin/tts-record-html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;音频录制模块（C#，NAudio）：&lt;a href=&#34;https://github.com/LuckyHookin/RecordAudio&#34;&gt;https://github.com/LuckyHookin/RecordAudio&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>N4si/cloud-native-monitoring-app</title>
    <updated>2023-04-08T01:35:19Z</updated>
    <id>tag:github.com,2023-04-08:/N4si/cloud-native-monitoring-app</id>
    <link href="https://github.com/N4si/cloud-native-monitoring-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cloud Native app on K8S to monitor system resources using python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;Cloud Native Resource Monitoring Python App on K8s!&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Things you will Learn 🤯&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Python and How to create Monitoring Application in Python using Flask and psutil&lt;/li&gt; &#xA; &lt;li&gt;How to run a Python App locally.&lt;/li&gt; &#xA; &lt;li&gt;Learn Docker and How to containerize a Python application &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Creating Dockerfile&lt;/li&gt; &#xA;   &lt;li&gt;Building DockerImage&lt;/li&gt; &#xA;   &lt;li&gt;Running Docker Container&lt;/li&gt; &#xA;   &lt;li&gt;Docker Commands&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create ECR repository using Python Boto3 and pushing Docker Image to ECR&lt;/li&gt; &#xA; &lt;li&gt;Learn Kubernetes and Create EKS cluster and Nodegroups&lt;/li&gt; &#xA; &lt;li&gt;Create Kubernetes Deployments and Services using Python!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;# **Youtube Video for step by step Demonstration!**&#xA;https://youtu.be/kBWCsHEcWnc&#xA;&#xA;## **Prerequisites** !&#xA;&#xA;(Things to have before starting the projects)&#xA;&#xA;- [x]  AWS Account.&#xA;- [x]  Programmatic access and AWS configured with CLI.&#xA;- [x]  Python3 Installed.&#xA;- [x]  Docker and Kubectl installed.&#xA;- [x]  Code editor (Vscode)&#xA;&#xA;# ✨Let’s Start the Project ✨&#xA;&#xA;## **Part 1: Deploying the Flask application locally**&#xA;&#xA;### **Step 1: Clone the code**&#xA;&#xA;Clone the code from the repository:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;$ git clone &amp;lt;repository_url&amp;gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;### **Step 2: Install dependencies**&#xA;&#xA;The application uses the **`psutil`** and **`Flask`, Plotly, boto3** libraries. Install them using pip:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pip3 install -r requirements.txt&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;### **Step 3: Run the application**&#xA;&#xA;To run the application, navigate to the root directory of the project and execute the following command:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;$ python3 app.py&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;This will start the Flask server on **`localhost:5000`**. Navigate to [http://localhost:5000/](http://localhost:5000/) on your browser to access the application.&#xA;&#xA;## **Part 2: Dockerizing the Flask application**&#xA;&#xA;### **Step 1: Create a Dockerfile**&#xA;&#xA;Create a **`Dockerfile`** in the root directory of the project with the following contents:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Use the official Python image as the base image&lt;/h1&gt; &#xA;&lt;p&gt;FROM python:3.9-slim-buster&lt;/p&gt; &#xA;&lt;h1&gt;Set the working directory in the container&lt;/h1&gt; &#xA;&lt;p&gt;WORKDIR /app&lt;/p&gt; &#xA;&lt;h1&gt;Copy the requirements file to the working directory&lt;/h1&gt; &#xA;&lt;p&gt;COPY requirements.txt .&lt;/p&gt; &#xA;&lt;p&gt;RUN pip3 install --no-cache-dir -r requirements.txt&lt;/p&gt; &#xA;&lt;h1&gt;Copy the application code to the working directory&lt;/h1&gt; &#xA;&lt;p&gt;COPY . .&lt;/p&gt; &#xA;&lt;h1&gt;Set the environment variables for the Flask app&lt;/h1&gt; &#xA;&lt;p&gt;ENV FLASK_RUN_HOST=0.0.0.0&lt;/p&gt; &#xA;&lt;h1&gt;Expose the port on which the Flask app will run&lt;/h1&gt; &#xA;&lt;p&gt;EXPOSE 5000&lt;/p&gt; &#xA;&lt;h1&gt;Start the Flask app when the container is run&lt;/h1&gt; &#xA;&lt;p&gt;CMD [&#34;flask&#34;, &#34;run&#34;]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;### **Step 2: Build the Docker image**&#xA;&#xA;To build the Docker image, execute the following command:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;$ docker build -t &amp;lt;image_name&amp;gt; .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;### **Step 3: Run the Docker container**&#xA;&#xA;To run the Docker container, execute the following command:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;$ docker run -p 5000:5000 &amp;lt;image_name&amp;gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;This will start the Flask server in a Docker container on **`localhost:5000`**. Navigate to [http://localhost:5000/](http://localhost:5000/) on your browser to access the application.&#xA;&#xA;## **Part 3: Pushing the Docker image to ECR**&#xA;&#xA;### **Step 1: Create an ECR repository**&#xA;&#xA;Create an ECR repository using Python:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;import boto3&lt;/p&gt; &#xA;&lt;h1&gt;Create an ECR client&lt;/h1&gt; &#xA;&lt;p&gt;ecr_client = boto3.client(&#39;ecr&#39;)&lt;/p&gt; &#xA;&lt;h1&gt;Create a new ECR repository&lt;/h1&gt; &#xA;&lt;p&gt;repository_name = &#39;my-ecr-repo&#39; response = ecr_client.create_repository(repositoryName=repository_name)&lt;/p&gt; &#xA;&lt;h1&gt;Print the repository URI&lt;/h1&gt; &#xA;&lt;p&gt;repository_uri = response[&#39;repository&#39;][&#39;repositoryUri&#39;] print(repository_uri)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;### **Step 2: Push the Docker image to ECR**&#xA;&#xA;Push the Docker image to ECR using the push commands on the console:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;$ docker push &amp;lt;ecr_repo_uri&amp;gt;:&#xA; &lt;tag&gt;&lt;/tag&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;## **Part 4: Creating an EKS cluster and deploying the app using Python**&#xA;&#xA;### **Step 1: Create an EKS cluster**&#xA;&#xA;Create an EKS cluster and add node group&#xA;&#xA;### **Step 2: Create a node group**&#xA;&#xA;Create a node group in the EKS cluster.&#xA;&#xA;### **Step 3: Create deployment and service**&#xA;&#xA;```jsx&#xA;from kubernetes import client, config&#xA;&#xA;# Load Kubernetes configuration&#xA;config.load_kube_config()&#xA;&#xA;# Create a Kubernetes API client&#xA;api_client = client.ApiClient()&#xA;&#xA;# Define the deployment&#xA;deployment = client.V1Deployment(&#xA;    metadata=client.V1ObjectMeta(name=&#34;my-flask-app&#34;),&#xA;    spec=client.V1DeploymentSpec(&#xA;        replicas=1,&#xA;        selector=client.V1LabelSelector(&#xA;            match_labels={&#34;app&#34;: &#34;my-flask-app&#34;}&#xA;        ),&#xA;        template=client.V1PodTemplateSpec(&#xA;            metadata=client.V1ObjectMeta(&#xA;                labels={&#34;app&#34;: &#34;my-flask-app&#34;}&#xA;            ),&#xA;            spec=client.V1PodSpec(&#xA;                containers=[&#xA;                    client.V1Container(&#xA;                        name=&#34;my-flask-container&#34;,&#xA;                        image=&#34;568373317874.dkr.ecr.us-east-1.amazonaws.com/my-cloud-native-repo:latest&#34;,&#xA;                        ports=[client.V1ContainerPort(container_port=5000)]&#xA;                    )&#xA;                ]&#xA;            )&#xA;        )&#xA;    )&#xA;)&#xA;&#xA;# Create the deployment&#xA;api_instance = client.AppsV1Api(api_client)&#xA;api_instance.create_namespaced_deployment(&#xA;    namespace=&#34;default&#34;,&#xA;    body=deployment&#xA;)&#xA;&#xA;# Define the service&#xA;service = client.V1Service(&#xA;    metadata=client.V1ObjectMeta(name=&#34;my-flask-service&#34;),&#xA;    spec=client.V1ServiceSpec(&#xA;        selector={&#34;app&#34;: &#34;my-flask-app&#34;},&#xA;        ports=[client.V1ServicePort(port=5000)]&#xA;    )&#xA;)&#xA;&#xA;# Create the service&#xA;api_instance = client.CoreV1Api(api_client)&#xA;api_instance.create_namespaced_service(&#xA;    namespace=&#34;default&#34;,&#xA;    body=service&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;make sure to edit the name of the image on line 25 with your image Uri.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Once you run this file by running “python3 eks.py” deployment and service will be created.&lt;/li&gt; &#xA; &lt;li&gt;Check by running following commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;kubectl get deployment -n default (check deployments)&#xA;kubectl get service -n default (check service)&#xA;kubectl get pods -n default (to check the pods)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once your pod is up and running, run the port-forward to expose the service&lt;/p&gt; &#xA;&lt;p&gt;kubectl port-forward service/&amp;lt;service_name&amp;gt; 5000:5000&lt;/p&gt;</summary>
  </entry>
</feed>