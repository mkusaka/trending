<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-01T01:32:00Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>elastic/ecs-dotnet</title>
    <updated>2024-07-01T01:32:00Z</updated>
    <id>tag:github.com,2024-07-01:/elastic/ecs-dotnet</id>
    <link href="https://github.com/elastic/ecs-dotnet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;right&#34; width=&#34;auto&#34; height=&#34;auto&#34; src=&#34;https://www.elastic.co/static-res/images/elastic-logo-200.png&#34;&gt; &#xA;&lt;h1&gt;Elastic Common Schema .NET&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apm-ci.elastic.co/job/apm-agent-dotnet/job/ecs-dotnet-mbp/job/main/&#34;&gt;&lt;img src=&#34;https://apm-ci.elastic.co/buildStatus/icon?job=apm-agent-dotnet%2Fecs-dotnet-mbp%2Fmain&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains .NET integrations that use the Elastic Common Schema (ECS), including popular .NET logging frameworks. Read the &lt;a href=&#34;https://www.elastic.co/blog/elastic-common-schema-dotnet-library-and-integrations-released-for-elasticsearch&#34;&gt;announcement post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Elastic Common Schema defines a common set of fields for ingesting data into Elasticsearch. A common schema helps you correlate data from sources like logs and metrics or IT operations analytics and security analytics. Further information on ECS can be found in the official &lt;a href=&#34;https://www.elastic.co/guide/en/ecs/current/index.html&#34;&gt;Elastic documentation&lt;/a&gt; or &lt;a href=&#34;https://github.com/elastic/ecs&#34;&gt;github repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Contributions are welcome, please read our &lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/contributing.md&#34;&gt;guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;p&gt;Version components: &lt;code&gt;{major}.{minor}.{patch}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These libraries are not versioned according to &lt;a href=&#34;https://semver.org/&#34;&gt;SemVer&lt;/a&gt; principles. Backwards compatibility is only guaranteed within &lt;em&gt;minor&lt;/em&gt; versions, since ECS only makes this guarantee. Patch releases of this library will not seek to introduce breaking changes, but will be used to address bug fixes within that minor version.&lt;/p&gt; &#xA;&lt;p&gt;Each assembly release indicates the ECS version that it is compatible with (see &lt;em&gt;releases&lt;/em&gt;), but typically the minor version number of the assembly correlates to the compatible version of ECS; for example; all of &lt;code&gt;1.4.0&lt;/code&gt;, &lt;code&gt;1.4.1&lt;/code&gt;, &lt;code&gt;1.4.2&lt;/code&gt; and &lt;code&gt;1.4.3&lt;/code&gt; are compatible with ECS version &lt;code&gt;1.4.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The assemblies are versioned using an assembly identity of &lt;code&gt;major.minor.*&lt;/code&gt; as opposed to &lt;code&gt;major.*&lt;/code&gt; as is common when following SemVer.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Integrations&lt;/h1&gt; &#xA;&lt;p&gt;Official NuGet packages can be referenced from &lt;a href=&#34;https://www.nuget.org&#34;&gt;NuGet.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Download&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.CommonSchema&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Foundational project that contains a full C# representation of ECS, used by the other integrations listed.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.CommonSchema/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.CommonSchema.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.CommonSchema.Serilog&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Formats a Serilog log message into a JSON representation that can be indexed into Elasticsearch.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.CommonSchema.Serilog/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.CommonSchema.Serilog.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.CommonSchema.NLog&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Formats an NLog message into a JSON representation that can be indexed into Elasticsearch.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.CommonSchema.NLog/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.CommonSchema.NLog.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.CommonSchema.Log4net&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Formats a log4net message into a JSON representation that can be indexed into Elasticsearch.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.CommonSchema.Log4net/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.CommonSchema.Log4net.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.SerilogEnricher&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adds transaction id and trace id to every Serilog log message that is created during a transaction. This works in conjunction with the Elastic.CommonSchema.Serilog package and forms a solution to distributed tracing with Serilog.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.SerilogEnricher/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.SerilogEnricher.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.NLog&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduces two special placeholder variables (ElasticApmTraceId and ElasticApmTransactionId) for use within your NLog templates.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.NLog/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.NLog.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.CommonSchema.BenchmarkDotNetExporter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An exporter for BenchmarkDotnet that can index benchmarking results directly into Elasticsearch, which can be helpful for detecting code-related performance problems over time.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.CommonSchema.BenchmarkDotNetExporter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.CommonSchema.BenchmarkDotNetExporter.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Foundation Library&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.CommonSchema&#34;&gt;Elastic.CommonSchema&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Foundational project that contains a full C# representation of ECS. &lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.CommonSchema&#34;&gt;Learn more...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elastic/ecs-dotnet/main/src/Elastic.Extensions.Logging/ReadMe.md&#34;&gt;Elastic.Extensions.Logging&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Elastic Stack (ELK) logger provider for &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Writes direct to Elasticsearch using the Elastic Common Schema, with semantic logging of structured data from message and scope values.&lt;/p&gt; &#xA;&lt;p&gt;This logger provider can be added directly to Microsoft.Extensions.Logging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Elastic.Extensions.Logging;&#xA;&#xA;// ...&#xA;&#xA;    .ConfigureLogging((hostContext, loggingBuilder) =&amp;gt;&#xA;    {&#xA;        loggingBuilder.AddElasticsearch();&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.CommonSchema.Serilog&#34;&gt;Elastic.CommonSchema.Serilog&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Formats a Serilog event into a JSON representation that adheres to the Elastic Common Schema. &lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.CommonSchema.Serilog&#34;&gt;Learn more...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var logger = new LoggerConfiguration()&#xA;    .WriteTo.Console(new EcsTextFormatter())&#xA;    .CreateLogger();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.CommonSchema.NLog&#34;&gt;Elastic.CommonSchema.NLog&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Formats an NLog event into a JSON representation that adheres to the Elastic Common Schema. &lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.CommonSchema.NLog&#34;&gt;Learn more...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Layout.Register&amp;lt;EcsLayout&amp;gt;(&#34;EcsLayout&#34;); // Register the ECS layout.&#xA;var config = new LoggingConfiguration();&#xA;var consoleTarget = new ConsoleTarget(&#34;console&#34;) { Layout = new EcsLayout() };  // Use the ECS layout.&#xA;config.AddRule(LogLevel.Debug, LogLevel.Fatal, consoleTarget);&#xA;LogManager.Configuration = config;&#xA;var logger = LogManager.GetCurrentClassLogger();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.CommonSchema.Log4net&#34;&gt;Elastic.CommonSchema.Log4net&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Formats a log4net event into a JSON representation that adheres to the Elastic Common Schema. &lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.CommonSchema.Log4net&#34;&gt;Learn more...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var hierarchy = (Hierarchy)LogManager.CreateRepository(Guid.NewGuid().ToString());&#xA;var appender = new ConsoleAppender { Layout = new EcsLayout() }; // Use the ECS layout.&#xA;hierarchy.Root.AddAppender(appender);&#xA;hierarchy.Root.Level = Level.All;&#xA;hierarchy.Configured = true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;APM&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.Apm.SerilogEnricher&#34;&gt;Elastic.Apm.SerilogEnricher&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Adds transaction id and trace id to every Serilog log message that is created during a transaction. &lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.Apm.SerilogEnricher&#34;&gt;Learn more...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var logger = new LoggerConfiguration()&#xA;    .Enrich.WithElasticApmCorrelationInfo()&#xA;    .WriteTo.Console(outputTemplate: &#34;[{ElasticApmTraceId} {ElasticApmTransactionId} {Message:lj} {NewLine}{Exception}&#34;)&#xA;    .CreateLogger();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When combined with &lt;code&gt;Elastic.CommonSchema.Serilog&lt;/code&gt; the trace and transaction id will automatically appear in ECS as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var logger = new LoggerConfiguration()&#xA;    .Enrich.WithElasticApmCorrelationInfo()&#xA;    .WriteTo.Console(new EcsTextFormatter()) // APM information persisted in ECS as well&#xA;    .CreateLogger();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.Apm.NLog&#34;&gt;Elastic.Apm.NLog&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Introduce two special place holder variables (&lt;code&gt;ElasticApmTraceId&lt;/code&gt;, &lt;code&gt;ElasticApmTransactionId&lt;/code&gt;) easily into your NLog templates. &lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.Apm.NLog&#34;&gt;Learn more...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Logged message will be in format of `trace-id|transation-id|InTransaction`&#xA;// or `||InTransaction` if the place holders are not available&#xA;var consoleTarget = new ConsoleTarget(&#34;console&#34;);&#xA;consoleTarget.Layout = &#34;${ElasticApmTraceId}|${ElasticApmTransactionId}|${message}&#34;;&#xA;config.AddRule(LogLevel.Debug, LogLevel.Fatal, consoleTarget);&#xA;LogManager.Configuration = config;&#xA;var logger = LogManager.GetCurrentClassLogger();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using EcsLayout from &lt;code&gt;Elastic.CommonSchema.NLog&lt;/code&gt; then trace and transaction id will automatically appear in ECS.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarking&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.CommonSchema.BenchmarkDotNetExporter&#34;&gt;Elastic.CommonSchema.BenchmarkDotNetExporter&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;An exporter for &lt;a href=&#34;https://github.com/dotnet/BenchmarkDotNet&#34;&gt;BenchmarkDotnet&lt;/a&gt; that can index benchmarking result output directly into Elasticsearch. &lt;a href=&#34;https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.CommonSchema.BenchmarkDotNetExporter&#34;&gt;Learn more...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var options = new ElasticsearchBenchmarkExporterOptions(url)&#xA;{&#xA;&#x9;GitBranch = &#34;externally-provided-branch&#34;,&#xA;&#x9;GitCommitMessage = &#34;externally provided git commit message&#34;,&#xA;&#x9;GitRepositoryIdentifier = &#34;repository&#34;&#xA;};&#xA;var exporter = new ElasticsearchBenchmarkExporter(options);&#xA;&#xA;var config = CreateDefaultConfig().With(exporter);&#xA;BenchmarkRunner.Run(typeof(Md5VsSha256), config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elastic/ecs-dotnet/main/examples/aspnetcore-with-serilog/&#34;&gt;Elastic.CommonSchema.Serilog and ASP.NET Core&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyright and License&lt;/h2&gt; &#xA;&lt;p&gt;This software is Copyright (c) 2014-2020 by Elasticsearch BV.&lt;/p&gt; &#xA;&lt;p&gt;This is free software, licensed under: &lt;a href=&#34;https://github.com/elastic/ecs-dotnet/raw/main/license.txt&#34;&gt;The Apache License Version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>