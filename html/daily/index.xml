<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-05T01:30:29Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lukin/keywind</title>
    <updated>2024-06-05T01:30:29Z</updated>
    <id>tag:github.com,2024-06-05:/lukin/keywind</id>
    <link href="https://github.com/lukin/keywind" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Keywind is a component-based Keycloak Login Theme built with Tailwind CSS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;span&gt;ðŸŒ¬&lt;/span&gt; Keywind&lt;/h1&gt; &#xA;&lt;p&gt;Keywind is a component-based Keycloak Login Theme built with &lt;a href=&#34;https://github.com/tailwindlabs/tailwindcss&#34;&gt;Tailwind CSS&lt;/a&gt; and &lt;a href=&#34;https://github.com/alpinejs/alpine&#34;&gt;Alpine.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lukin/keywind/master/preview.png&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Styled Pages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Error&lt;/li&gt; &#xA; &lt;li&gt;Login&lt;/li&gt; &#xA; &lt;li&gt;Login Config TOTP&lt;/li&gt; &#xA; &lt;li&gt;Login IDP Link Confirm&lt;/li&gt; &#xA; &lt;li&gt;Login OAuth Grant&lt;/li&gt; &#xA; &lt;li&gt;Login OTP&lt;/li&gt; &#xA; &lt;li&gt;Login Page Expired&lt;/li&gt; &#xA; &lt;li&gt;Login Password&lt;/li&gt; &#xA; &lt;li&gt;Login Recovery Authn Code Config&lt;/li&gt; &#xA; &lt;li&gt;Login Recovery Authn Code Input&lt;/li&gt; &#xA; &lt;li&gt;Login Reset Password&lt;/li&gt; &#xA; &lt;li&gt;Login Update Password&lt;/li&gt; &#xA; &lt;li&gt;Login Update Profile&lt;/li&gt; &#xA; &lt;li&gt;Login Username&lt;/li&gt; &#xA; &lt;li&gt;Login X.509 Info&lt;/li&gt; &#xA; &lt;li&gt;Logout Confirm&lt;/li&gt; &#xA; &lt;li&gt;Register&lt;/li&gt; &#xA; &lt;li&gt;Select Authenticator&lt;/li&gt; &#xA; &lt;li&gt;Terms and Conditions&lt;/li&gt; &#xA; &lt;li&gt;WebAuthn Authenticate&lt;/li&gt; &#xA; &lt;li&gt;WebAuthn Error&lt;/li&gt; &#xA; &lt;li&gt;WebAuthn Register&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Identity Provider Icons&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple&lt;/li&gt; &#xA; &lt;li&gt;Bitbucket&lt;/li&gt; &#xA; &lt;li&gt;Discord&lt;/li&gt; &#xA; &lt;li&gt;Facebook&lt;/li&gt; &#xA; &lt;li&gt;GitHub&lt;/li&gt; &#xA; &lt;li&gt;GitLab&lt;/li&gt; &#xA; &lt;li&gt;Google&lt;/li&gt; &#xA; &lt;li&gt;Instagram&lt;/li&gt; &#xA; &lt;li&gt;LinkedIn&lt;/li&gt; &#xA; &lt;li&gt;Microsoft&lt;/li&gt; &#xA; &lt;li&gt;OpenID&lt;/li&gt; &#xA; &lt;li&gt;Red Hat OpenShift&lt;/li&gt; &#xA; &lt;li&gt;PayPal&lt;/li&gt; &#xA; &lt;li&gt;Slack&lt;/li&gt; &#xA; &lt;li&gt;Stack Overflow&lt;/li&gt; &#xA; &lt;li&gt;Twitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Keywind has been designed with component-based architecture from the start, and &lt;strong&gt;you can customize as little or as much Keywind as you need&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.keycloak.org/docs/latest/server_development/#deploying-themes&#34;&gt;Deploy Keywind Login Theme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.keycloak.org/docs/latest/server_development/#creating-a-theme&#34;&gt;Create your own Login Theme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Specify parent theme in &lt;a href=&#34;https://www.keycloak.org/docs/latest/server_development/#theme-properties&#34;&gt;theme properties&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;parent=keywind&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Brand and customize components with &lt;a href=&#34;https://freemarker.apache.org/docs/dgui_quickstart_template.html&#34;&gt;FreeMarker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h3&gt;Theme&lt;/h3&gt; &#xA;&lt;p&gt;When you do need to customize a palette, you can configure your colors under the &lt;code&gt;colors&lt;/code&gt; key in the &lt;code&gt;theme&lt;/code&gt; section of Tailwind config file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tailwind.config.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {&#xA;  theme: {&#xA;    extend: {&#xA;      colors: {&#xA;        primary: colors.red,&#xA;      },&#xA;    },&#xA;  },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about Tailwind CSS configuration in the &lt;a href=&#34;https://tailwindcss.com/docs/configuration&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;p&gt;You can update Keywind components in your own child theme. For example, create a copy of the &lt;code&gt;body&lt;/code&gt; component and change the background:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;theme/mytheme/login/components/atoms/body.ftl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;#macro kw&amp;gt;&#xA;  &amp;lt;body class=&#34;bg-primary-100&#34;&amp;gt;&#xA;    &amp;lt;#nested&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/#macro&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;When you&#39;re ready to deploy your own theme, run the build command to generate a static production build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm install&#xA;pnpm build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To deploy a theme as an archive, create a JAR archive with the theme resources.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm build:jar&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>SAP/ui5-webcomponents</title>
    <updated>2024-06-05T01:30:29Z</updated>
    <id>tag:github.com,2024-06-05:/SAP/ui5-webcomponents</id>
    <link href="https://github.com/SAP/ui5-webcomponents" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UI5 Web Components - the enterprise-flavored sugar on top of native APIs! Build SAP Fiori user interfaces with the technology of your choice.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/images/UI5_logo_wide.png&#34; alt=&#34;UI5 icon&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;UI5 Web Components&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SAP/ui5-webcomponents/actions/workflows/test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/SAP/ui5-webcomponents/actions/workflows/test.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@ui5/webcomponents&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/%40ui5%2Fwebcomponents.svg?sanitize=true&#34; alt=&#34;npm Package Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api.reuse.software/info/github.com/SAP/ui5-webcomponents&#34;&gt;&lt;img src=&#34;https://api.reuse.software/badge/github.com/SAP/ui5-webcomponents&#34; alt=&#34;REUSE status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What are &lt;a href=&#34;https://sap.github.io/ui5-webcomponents&#34;&gt;UI5 Web Components&lt;/a&gt;?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A rich set of &lt;strong&gt;enterprise-grade reusable UI elements&lt;/strong&gt; driven by a &lt;strong&gt;lightweight framework&lt;/strong&gt; (~20K gzipped for the framework part).&lt;/li&gt; &#xA; &lt;li&gt;Suitable for building anything from &lt;strong&gt;static web sites&lt;/strong&gt; to &lt;strong&gt;complex web applications&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Usable with any current or future &lt;strong&gt;web development framework&lt;/strong&gt; (React, Angular, Vue, etc.).&lt;/li&gt; &#xA; &lt;li&gt;Implement the &lt;a href=&#34;https://experience.sap.com/fiori-design/&#34;&gt;SAP Fiori design&lt;/a&gt; and follow the &lt;a href=&#34;https://experience.sap.com/fiori-design-web/&#34;&gt;SAP Fiori Design Guidelines&lt;/a&gt; for a consistent UX.&lt;/li&gt; &#xA; &lt;li&gt;Created and maintained by &lt;a href=&#34;https://sap.com&#34;&gt;SAP&lt;/a&gt; as part of the &lt;a href=&#34;https://openui5.org/&#34;&gt;UI5&lt;/a&gt; product family.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why use web components?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Future-proof&lt;/strong&gt;: being &lt;em&gt;web standards&lt;/em&gt;, they are compatible with any version of any web development framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Encapsulated&lt;/strong&gt;: the HTML/CSS in the &lt;em&gt;shadow DOM&lt;/em&gt; are protected from interference by the web page and vice versa, making them stable in any environment and suitable not only for apps, but also for &lt;em&gt;libraries and micro-frontends&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Elegant&lt;/strong&gt;: being &lt;em&gt;custom HTML elements&lt;/em&gt;, they hide implementation complexity behind a single HTML tag, making them easily usable with the standard DOM APIs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Where can I see them in action?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sap.github.io/ui5-webcomponents/components/&#34;&gt;Playground and API Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sap.github.io/ui5-webcomponents&#34;&gt;UI5 Web Components Home Page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/2-advanced/01-configuration.md&#34;&gt;Configuring UI5 Web Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/3-customizing/02-theme.md&#34;&gt;Customizing with &lt;code&gt;UI Theme Designer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/5-development/02-custom-UI5-Web-Components.md&#34;&gt;Developing Custom UI5 Web Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/5-development/01-custom-UI5-Web-Components-Packages.md&#34;&gt;Creating a Custom UI5 Web Components Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/2-advanced/03-scoping.md&#34;&gt;Micro-Frontends and Custom Elements Scoping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/Release%20Management.md&#34;&gt;Release Management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/FAQ.md&#34;&gt;F.A.Q.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;h3&gt;OpenUI5&lt;/h3&gt; &#xA;&lt;h4&gt;1. What is UI5/OpenUI5?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openui5.org/&#34;&gt;OpenUI5&lt;/a&gt; is an open source JS framework that lets you build enterprise-ready web applications, responsive to all devices, running on almost any browser of your choice. It&#39;s based on JavaScript, using jQuery as its foundation and follows web standards. It eases your development with a client-side HTML5 rendering library including a rich set of controls and supports data binding to different data models (JSON, XML and OData).&lt;/p&gt; &#xA;&lt;h4&gt;2. How do UI5 Web Components relate to OpenUI5?&lt;/h4&gt; &#xA;&lt;p&gt;UI5 Web Componentsâ€¦&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;â€¦are &lt;strong&gt;not built on top&lt;/strong&gt; of UI5, but rather lightweight and independent UI elements.&lt;/li&gt; &#xA; &lt;li&gt;â€¦are &lt;strong&gt;not a successor&lt;/strong&gt; of UI5, but rather a complementary offering.&lt;/li&gt; &#xA; &lt;li&gt;â€¦bring the relevant &lt;strong&gt;UI5 qualities and SAP Fiori UX to the HTML level&lt;/strong&gt;, usable with any web framework.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;UI5 Web Components are good forâ€¦&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;â€¦web applications which &lt;strong&gt;already use a different web framework&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;â€¦&lt;strong&gt;static web sites&lt;/strong&gt; built without web frameworks, to just add a few interactive UI elements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;UI5 remains what it is: the best choice forâ€¦&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;â€¦building complete &lt;strong&gt;enterprise-ready and responsive web applications&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UI5 Web Components for React&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SAP/ui5-webcomponents-react&#34;&gt;UI5 Web Components for React&lt;/a&gt; is a wrapper implementation around UI5 Web Components which makes using them in React even more comfortable. The current version of React (&lt;code&gt;react 18&lt;/code&gt;) has some shortcomings when it comes to handling Custom Elements, namely the binding of &lt;code&gt;boolean&lt;/code&gt; attributes as well as adding event listeners to custom event names like &lt;code&gt;selection-change&lt;/code&gt;. With the help of UI5 Web Components for React, you can use the UI5 Web Components in React as if they were native React components. In addition to that, this library is also offering TypeScript definitions for all components, some complex layout components built on top of UI5 Web Components as well as Charting Components.&lt;/p&gt; &#xA;&lt;h3&gt;UI5 Web Components for Angular&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SAP/ui5-webcomponents-ngx&#34;&gt;UI5 Web Components for Angular&lt;/a&gt; is a wrapper implementation around UI5 Web Components which to make it work with Angular without needing to use the &lt;code&gt;CUSTOM_ELEMENTS_SCHEMA&lt;/code&gt; or &lt;code&gt;NO_ERRORS_SCHEMA&lt;/code&gt; schemas. Moreover, all Angular-specific features, such as two-way data binding and Angular Form support, work out of the box.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the NPM module(s) that ship the desired UI5 Web Component(s), for example if you need &lt;code&gt;ui5-button&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @ui5/webcomponents&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the desired UI5 Web Component(s) to your app:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#34;@ui5/webcomponents/dist/Button.js&#34;; // loads and defines ui5-button&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the UI5 Web Component(s) as you would use any HTML element:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ui5-button&amp;gt;Hello world!&amp;lt;/ui5-button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/1-getting-started/02-importing-components.md&#34;&gt;Importing UI5 Web Components&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/1-getting-started/03-understanding-components-APIs.md&#34;&gt;Understanding UI5 Web Components APIs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Typescript Support&lt;/h2&gt; &#xA;&lt;p&gt;TypeScript Support is enabled for both component development and component consumption. Since version &lt;code&gt;1.11.0&lt;/code&gt;, we have been providing TypeScript definitions under an experimental flag, and starting from version &lt;code&gt;1.19.0&lt;/code&gt;, all TypeScript definitions are considered &lt;code&gt;stable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Is there a CDN I can use?&lt;/h3&gt; &#xA;&lt;p&gt;No, you are expected to import only the components (or other public APIs) that you are going to use and bundle them along with the rest of your application.&lt;/p&gt; &#xA;&lt;h2&gt;Browser Support&lt;/h2&gt; &#xA;&lt;p&gt;UI5 Web Components are supported by all major modern browsers.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Browser&lt;/th&gt; &#xA;   &lt;th&gt;Supported versions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chrome&lt;/td&gt; &#xA;   &lt;td&gt;Latest two stable releases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Firefox&lt;/td&gt; &#xA;   &lt;td&gt;Latest two stable releases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Safari&lt;/td&gt; &#xA;   &lt;td&gt;Latest two stable releases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Edge&lt;/td&gt; &#xA;   &lt;td&gt;Latest two stable releases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Project Structure, Development and Build&lt;/h2&gt; &#xA;&lt;p&gt;This section might be of interest to you mainly if you need to run or build the project locally&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; (&lt;strong&gt;version 21 or higher&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yarnpkg.com/en&#34;&gt;Yarn&lt;/a&gt; (&lt;strong&gt;version 1.22 or higher&lt;/strong&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The UI5 Web Components project is set up with the &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt; node package manager. This is because it offers functionality that the otherwise preferred &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; package manager is currently lacking. Namely, the &lt;a href=&#34;https://yarnpkg.com/lang/en/docs/workspaces/&#34;&gt;workspace&lt;/a&gt; setting which is currently used in the &lt;a href=&#34;https://github.com/SAP/ui5-webcomponents&#34;&gt;UI5 Web Components (mono-)repository&lt;/a&gt;. Note that npm &lt;a href=&#34;https://github.com/npm/npm/pull/15900#issuecomment-315335381&#34;&gt;might add&lt;/a&gt; this feature in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Structure&lt;/h3&gt; &#xA;&lt;p&gt;The UI5 Web Components project contains several packages:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;NPM Package&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;main&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@ui5/webcomponents&#34;&gt;UI5 Web Components - Main&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bread-and-butter components (buttons, inputs, popups, pickers, tables, etc.) that are generally found in web apps.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fiori&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@ui5/webcomponents-fiori&#34;&gt;UI5 Web Components - Fiori&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;More semantic components, specific to the Fiori UX (shell bar, side navigation, etc.) that are commonly found in SAP apps.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;icons&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@ui5/webcomponents-icons&#34;&gt;UI5 Web Components - Icons&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A rich icons collection (&lt;code&gt;SAP-icons&lt;/code&gt;), suitable for enterprise-grade apps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;icons-tnt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@ui5/webcomponents-icons-tnt&#34;&gt;UI5 Web Components - Icons TNT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A rich icons collection (&lt;code&gt;SAP-icons-TNT&lt;/code&gt;), suitable for more technical apps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;icons-business-suite&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@ui5/webcomponents-icons-business-suite&#34;&gt;UI5 Web Components - Icons Business Suite&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A rich icons collection (&lt;code&gt;BusinessSuiteInAppSymbols&lt;/code&gt;), suitable for SAP Fiori apps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;base&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@ui5/webcomponents-base&#34;&gt;UI5 Web Components - Base&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The UI5 Web Components framework itself&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;theming&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@ui5/webcomponents-theming&#34;&gt;UI5 Web Components - Theming&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Theming assets (the default theme and additional accessibility themes)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;localization&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@ui5/webcomponents-localization&#34;&gt;UI5 Web Components - Localization&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i18n&lt;/code&gt; functionality and &lt;code&gt;CLDR&lt;/code&gt; assets&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;create-package&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@ui5/create-webcomponents-package&#34;&gt;Create Webcomponents Package&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;npm init&lt;/code&gt; script for creating new UI5 Webcomponents Packages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;playground&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;The playground application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;How to run the project locally:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn # to install all dependencies&#xA;yarn start # to serve the project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A dev server will be started and the browser will open its index URL with a listing of all test pages.&lt;/p&gt; &#xA;&lt;h3&gt;How to start Website (Docs &amp;amp; Samples):&lt;/h3&gt; &#xA;&lt;p&gt;You can start the website app with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn # to install all dependencies&#xA;&#xA;# start the playground from the project root&#xA;yarn start:website&#xA;&#xA;# open http://localhost:3000/ui5-webcomponents/nightly/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you wish to manually install dependencies &amp;amp; run the Playground you can check out our &lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/6-contributing/03-website.md&#34;&gt;in depth tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Production Build&lt;/h3&gt; &#xA;&lt;p&gt;To build the UI5 Web Components project, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn # to install all dependencies&#xA;yarn ci:releasebuild # to build the project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Afterwards, you can find the build output in the &lt;code&gt;dist&lt;/code&gt; folder of the corresponding package folder. For example, to find the Button component (that belongs to the &lt;code&gt;main&lt;/code&gt; package), look inside the &lt;code&gt;packages/main/dist&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;None as of 1.24.0&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;No major bugs known. To report an issue or view the currently open issues, click &lt;a href=&#34;https://github.com/SAP/ui5-webcomponents/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;We welcome all comments, suggestions, questions, and bug reports. Please follow our &lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/SUPPORT.md#-content&#34;&gt;Support Guidelines&lt;/a&gt; on how to report an issue, or chat with us in the &lt;code&gt;#webcomponents&lt;/code&gt; channel of the &lt;a href=&#34;https://ui5-slack-invite.cfapps.eu10.hana.ondemand.com/&#34;&gt;OpenUI5 Community Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please check our &lt;a href=&#34;https://raw.githubusercontent.com/SAP/ui5-webcomponents/main/docs/6-contributing/02-conventions-and-guidelines.md&#34;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chrispsn/mesh-spreadsheet</title>
    <updated>2024-06-05T01:30:29Z</updated>
    <id>tag:github.com,2024-06-05:/chrispsn/mesh-spreadsheet</id>
    <link href="https://github.com/chrispsn/mesh-spreadsheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A data and code editor that feels like a spreadsheet.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mesh Spreadsheet&lt;/h1&gt; &#xA;&lt;p&gt;Mesh is a data and code editor that feels like a spreadsheet.&lt;/p&gt; &#xA;&lt;p&gt;This is Mesh v3. The formula language is &lt;a href=&#34;https://codeberg.org/ngn/k&#34;&gt;ngn/k&lt;/a&gt;, and the backend logic is also written in ngn/k.&lt;/p&gt; &#xA;&lt;p&gt;This is a very early release, and it may not receive any updates. See &lt;a href=&#34;https://raw.githubusercontent.com/chrispsn/mesh-spreadsheet/main/#what-needs-work&#34;&gt;What needs work&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Sheets eval on each recalc, and those evals are not sandboxed! Take care with what you write in the formula bar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrispsn/mesh-spreadsheet/main/demo.gif&#34; alt=&#34;Mesh v3 demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Who is Mesh for?&lt;/h2&gt; &#xA;&lt;p&gt;Mesh is a spreadsheet program that fits into software&#39;s typical development and release workflows.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;calculations are stored as text files&lt;/li&gt; &#xA; &lt;li&gt;data can be of arbitrary length and defined structure (including empty data)&lt;/li&gt; &#xA; &lt;li&gt;data can optionally be stored in external files (eg &lt;code&gt;data.json&lt;/code&gt;), instead of being stored in the sheet&lt;/li&gt; &#xA; &lt;li&gt;changes and releases can be managed via Git or other version control tools&lt;/li&gt; &#xA; &lt;li&gt;calculations can be run &#39;headlessly&#39;, independently of the program used to write the code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you maintain &lt;a href=&#34;https://xkcd.com/2347/&#34;&gt;load-bearing&lt;/a&gt; spreadsheets - files that are part of a processing pipeline - you might like Mesh.&lt;/p&gt; &#xA;&lt;h2&gt;What Mesh does&lt;/h2&gt; &#xA;&lt;h3&gt;Usual spreadsheet things&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write data straight into cells. Mesh will try to figure out the datatype you meant.&lt;/li&gt; &#xA; &lt;li&gt;Formulas start with a &lt;code&gt;=&lt;/code&gt; prefix: &lt;code&gt;=1+B2&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;F2&lt;/code&gt; or click the formula bar to edit a formula instead of overwriting it. Precedents are highlighted in the grid.&lt;/li&gt; &#xA; &lt;li&gt;Hardcode cells look different to formula cells.&lt;/li&gt; &#xA; &lt;li&gt;Data type is indicated by alignment (strings on the left, numbers on the right, everything else in the center).&lt;/li&gt; &#xA; &lt;li&gt;Format cell contents using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat&#34;&gt;Intl.NumberFormat syntax&lt;/a&gt;. For example, highlight a cell and press &lt;code&gt;Ctrl-Shift-4&lt;/code&gt; to show values in dollars.&lt;/li&gt; &#xA; &lt;li&gt;Cell names: toggle with &lt;code&gt;F3&lt;/code&gt;. Change a cell&#39;s name by writing to its name cell. Mesh will update other cell formulas to use the new name.&lt;/li&gt; &#xA; &lt;li&gt;Connect to external data: drag a file onto the grid. For now, the file needs to be stored in the same folder as &lt;code&gt;server.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Quick calcs about the selected data (count, sum, average), shown above the code pane.&lt;/li&gt; &#xA; &lt;li&gt;Calculated table columns - add modified assignments below the top-level definition:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;table:+`existingColumn!1 2 3&#xA;table[`newColumn]:1+table`existingColumn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unusual spreadsheet things&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A completely different - but very powerful - formula language.&lt;/li&gt; &#xA; &lt;li&gt;Sheets are stored as one or more text files, so that you can manage changes using Git. If you want to share it with someone, then manually zip the files into a folder.&lt;/li&gt; &#xA; &lt;li&gt;Data can optionally be stored in external files, while still being displayed in and being editable from the UI of your sheet. Just click where you want the data to &#39;live&#39;, open the hamburger menu, and drag-and-drop it under &#39;read-and-write files&#39;. For now, the file needs to be stored in the same place as &lt;code&gt;server.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Headless calculations. You don&#39;t need to run Mesh to run a Mesh sheet - just ngn/k.&lt;/li&gt; &#xA; &lt;li&gt;Separate logic and presentation. If two data structures visually overlap, the calculations still work, because element cells don&#39;t get their own cell reference (they have to be referenced via their parent).&lt;/li&gt; &#xA; &lt;li&gt;Export results to files by adding an &lt;code&gt;exportTo&lt;/code&gt; path in the cell&#39;s meta dict.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What Mesh doesn&#39;t do&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Excel formulas (&lt;a href=&#34;https://en.wikipedia.org/wiki/OpenFormula&#34;&gt;OpenFormula&lt;/a&gt; compatibility).&lt;/li&gt; &#xA; &lt;li&gt;Excel file import (&lt;a href=&#34;https://en.wikipedia.org/wiki/OpenDocument&#34;&gt;OpenDocument&lt;/a&gt; &#39;zipped XML&#39; sheets).&lt;/li&gt; &#xA; &lt;li&gt;Charting - instead, use an external program such as &lt;a href=&#34;https://observablehq.com/framework/&#34;&gt;Observable Framework&lt;/a&gt; to re-render charts on file change.&lt;/li&gt; &#xA; &lt;li&gt;Streaming data, or recalc when a file updates - instead, schedule or trigger data updates using cron or systemd timers.&lt;/li&gt; &#xA; &lt;li&gt;Range references (&lt;code&gt;A1:B2&lt;/code&gt;). Mesh doesn&#39;t use location-based references (which is why visual overlaps don&#39;t break calculations); however, values typed into an empty cell will be named based on their location.&lt;/li&gt; &#xA; &lt;li&gt;Case-insensitive cell references.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/ngn/k&#34;&gt;Get and build ngn/k&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have Python 3 and its &lt;code&gt;websockets&lt;/code&gt; module installed. In Ubuntu, the latter is &lt;code&gt;sudo apt install python3-websockets&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Update the values in &lt;code&gt;vars.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;server.py&lt;/code&gt; - this starts the backend.&lt;/li&gt; &#xA; &lt;li&gt;Start a second server to serve &lt;code&gt;index.html&lt;/code&gt;. Try &lt;code&gt;python3 -m http.server&lt;/code&gt; in the Mesh directory.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;localhost:8000&lt;/code&gt; in your browser.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Alternatively, you can skip steps 2-5 and run the backend server via Docker. Clone this repo, then in the repo&#39;s directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t mesh-spreadsheet .&#xA;docker run --publish 8765:8765 mesh-spreadsheet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll still need a way to access &lt;code&gt;index.html&lt;/code&gt; per step 6 above, and so you&#39;ll need a copy of &lt;code&gt;index.html&lt;/code&gt; available to serve (clone this repo again?). Maybe that can be done in a higher-level Docker Compose file.&lt;/p&gt; &#xA;&lt;h2&gt;How does Mesh work?&lt;/h2&gt; &#xA;&lt;p&gt;Mesh sheets are stored as ngn/k code in text files. The sheet is shown in your web browser, the client; it&#39;s connected via WebSockets to a backend server that does calculations and updates files on your disk.&lt;/p&gt; &#xA;&lt;p&gt;When you change a cell:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the client sends an instruction to the server&lt;/li&gt; &#xA; &lt;li&gt;the server: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;turns the sheet text into an abstract syntax tree (or &#39;AST&#39;)&lt;/li&gt; &#xA;   &lt;li&gt;modifies the cell&#39;s node in the tree&lt;/li&gt; &#xA;   &lt;li&gt;turns the tree back into code text (using &lt;a href=&#34;https://github.com/chrispsn/ngn-k-unparser&#34;&gt;this ngn/k unparser&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;re-runs the code text&lt;/li&gt; &#xA;   &lt;li&gt;passes visual info back to the client.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the data you&#39;re editing is stored in a file that lives outside the sheet, the server will instead:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;update the data structure in memory&lt;/li&gt; &#xA; &lt;li&gt;serialise that data to text&lt;/li&gt; &#xA; &lt;li&gt;write that text to disk&lt;/li&gt; &#xA; &lt;li&gt;re-run the sheet calcs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 3 of Mesh updates cell calculation order when the sheet is written, not when it&#39;s run.&lt;/p&gt; &#xA;&lt;h3&gt;Cell meta-info&lt;/h3&gt; &#xA;&lt;p&gt;Mesh records information that&#39;s just for the Mesh app as a dictionary that appears just above the data&#39;s definition. The Mesh app can still see it in the parse tree and extract info from it, but because that name is immediately redefined by the next line, it doesn&#39;t affect the calculations.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a list that&#39;s named &lt;code&gt;amounts&lt;/code&gt;, located at &lt;code&gt;G4&lt;/code&gt;, and formatted in AUD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;amounts:`number`loc!(`style`currency!(&#34;currency&#34;;&#34;AUD&#34;);`G4)&#xA;amounts:1 2 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s a read-write table connection to the file &lt;code&gt;analysis.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;B2:`path!,&#34;analysis.json&#34;&#xA;B2:`j?1:&#34;analysis.json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s a calculation that&#39;s exported to the file &lt;code&gt;somePath.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;B2:`exportTo!,&#34;somePath.json&#34;&#xA;B2:1 2 3 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What needs work&lt;/h2&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Obvious quality of life features: error handling, scrolling, undo/redo.&lt;/li&gt; &#xA; &lt;li&gt;Upstream issues in the unparser.&lt;/li&gt; &#xA; &lt;li&gt;Storing external data in directories other than that of &lt;code&gt;server.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A prettier code unparser and data serialiser, to make it easy to review changes via text comparison.&lt;/li&gt; &#xA; &lt;li&gt;No limit on the number of cells (which probably means changing the backend/calc language).&lt;/li&gt; &#xA; &lt;li&gt;Nicer data literals (which probably means changing the backend/calc language).&lt;/li&gt; &#xA; &lt;li&gt;Nested sheets and name lookup.&lt;/li&gt; &#xA; &lt;li&gt;Watching input files and automatically recalcing when they change.&lt;/li&gt; &#xA; &lt;li&gt;Cut-and-paste data.&lt;/li&gt; &#xA; &lt;li&gt;Pivot table wizard.&lt;/li&gt; &#xA; &lt;li&gt;Database connectivity, though that might be less important if (de-)serialisation is fast.&lt;/li&gt; &#xA; &lt;li&gt;Partial recalc from the point of change onwards, rather than recalculating the entire sheet on every change.&lt;/li&gt; &#xA; &lt;li&gt;Allowing an external program to swap out cell values with new ones so that sheets can be used as functions (eg swapping from test input to production input).&lt;/li&gt; &#xA; &lt;li&gt;Serialisation formats other than JSON and plain text. I&#39;d like CSV and maybe &lt;a href=&#34;https://github.com/ndjson/ndjson-spec&#34;&gt;NDJSON&lt;/a&gt; or &lt;a href=&#34;https://jsonlines.org/&#34;&gt;JSONL&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A syntax that has nice dict and table literals and lets you specify expected/conversion types for external files.&lt;/li&gt; &#xA; &lt;li&gt;Sandboxing.&lt;/li&gt; &#xA; &lt;li&gt;A UI for editing calculated columns, and per-column formatting rules.&lt;/li&gt; &#xA; &lt;li&gt;Maybe a dialect that treats strings as atoms? Strings (char lists) are special-cased in Mesh to only take up one cell, so backend logic would be simpler if this was done.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Packaging&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A fully-in-browser WASM version, to make Mesh easier to try out.&lt;/li&gt; &#xA; &lt;li&gt;Electron (or similar?), so that Mesh can interact more with the filesystem without needing a server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deep dive: editable dicts and tables&lt;/h3&gt; &#xA;&lt;p&gt;Sheets can store data in external files, or in the sheet source itself. This section talks about the latter.&lt;/p&gt; &#xA;&lt;p&gt;Mesh provides UI handles for editing list literals: inserting, deleting, or in-place edits of elements of simple lists such as &lt;code&gt;1 2 3&lt;/code&gt; and general lists such as &lt;code&gt;(1;`sym)&lt;/code&gt;. It can do this because the ngn/k AST has special representations of list literals, instead of just making them a function call. Mesh can just look at the first item in an AST list node to figure out what to do.&lt;/p&gt; &#xA;&lt;p&gt;But this approach isn&#39;t clean for dicts and tables, since the AST represents them as calls of functions that can do things other than make a data structure. For example, ngn/k uses &lt;code&gt;!&lt;/code&gt; as make-dict and &lt;code&gt;+!&lt;/code&gt; as make-table, but &lt;code&gt;!&lt;/code&gt; has overloads such as &#39;mod&#39;. General lists are also represented in the AST as a function call, but that function is internal-only (&lt;a href=&#34;https://ngn.codeberg.page/k/#eJxLKFDSMLRO0FQCAAw8AjI=&#34;&gt;&lt;code&gt;5:&lt;/code&gt;&lt;/a&gt;), and it doesn&#39;t have any overloads, so Mesh knows that its arguments should be treated as list literal elements.&lt;/p&gt; &#xA;&lt;p&gt;Conceivably Mesh could check the type and structure of the arguments to &lt;code&gt;!&lt;/code&gt; (and generate a UI handle if the args are editable), but it makes the backend code complex. If Mesh did go down this route, it might be good to require editable tables to use a composition (&lt;code&gt;(+!)[`a;1 2]&lt;/code&gt;) rather than a simple function call (&lt;code&gt;+![`a;1 2]&lt;/code&gt;): that way, the make-table function would appear as an easy-to-recognise single-node composition (&lt;code&gt;(&#39;;+;!)&lt;/code&gt;) instead of being split across nodes in the AST.&lt;/p&gt; &#xA;&lt;p&gt;Ideally, Mesh&#39;s formula language would:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;include special dict and table literal representations (ngn/k doesn&#39;t), that&lt;/li&gt; &#xA; &lt;li&gt;have unique AST representations.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Potentially those representations could &lt;em&gt;literally&lt;/em&gt; be dict and table data structures. Then the backend could just edit them like we would in userland, and they&#39;d also be much easier for Mesh to losslessly unparse: if dict literals just appeared in the AST as &lt;code&gt;!&lt;/code&gt; function calls, the unparser wouldn&#39;t know whether they intended a make-dict function call or a dict literal.&lt;/p&gt; &#xA;&lt;p&gt;Ideally dict literals would be a list of key:value pairs, and table literals would be defined row-wise to flow with the portrait shape of a text file - even if that data was stored as columns behind the scenes.&lt;/p&gt; &#xA;&lt;h2&gt;Why the k family? Why not Python or JavaScript?&lt;/h2&gt; &#xA;&lt;p&gt;Officially, ngn/k is &lt;a href=&#34;https://codeberg.org/ngn/k&#34;&gt;no longer supported&lt;/a&gt;. But Mesh could potentially be ported to other k dialects or other languages.&lt;/p&gt; &#xA;&lt;p&gt;To work with Mesh&#39;s approach to spreadsheets, the language needs certain features:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Its syntax should be simple and stable, so that it&#39;s (a) easy for Mesh to modify the AST and (b) fast to parse and unparse.&lt;/li&gt; &#xA; &lt;li&gt;Formulas for simple data processing, such as sums and table joins, should be short.&lt;/li&gt; &#xA; &lt;li&gt;It should have literals for lists, dicts, and tables. Those literals should have unique AST representations so that they are easy for Mesh to edit and can be losslessly round-tripped.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Bonus points if it has built-in serialisation formats (JSON, CSV) and is already on every machine or otherwise small enough to quickly download.&lt;/p&gt; &#xA;&lt;h2&gt;Thank you&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to Arthur Whitney for inventing and refining k, to ngn for his implementation of k6, and to my family and friends for their support.&lt;/p&gt;</summary>
  </entry>
</feed>