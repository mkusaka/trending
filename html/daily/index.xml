<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-09T01:31:32Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ircfspace/location</title>
    <updated>2024-04-09T01:31:32Z</updated>
    <id>tag:github.com,2024-04-09:/ircfspace/location</id>
    <link href="https://github.com/ircfspace/location" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free v2ray Config Based on Location&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Free v2ray Config Based on Location&lt;/h1&gt; &#xA;&lt;p&gt;کانفیگ‌های رایگان v2ray بر اساس لوکیشن ...&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ircfspace/location/main/screenshot.jpg&#34; alt=&#34;screenshot.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;این‌ابزار کانفیگ‌های رایگان گردآوری شده از طریق کانال‌های تلگرامی رو بر اساس لوکیشن دسته‌بندی میکنه و میتونین توسط V2rayn, V2rayng, Foxray یا Streisand ازشون استفاده کنین.&lt;/li&gt; &#xA; &lt;li&gt;این‌کانفیگ‌ها توسط ریپازیتوری TVC و به‌صورت خودکار جمع‌آوری میشن و از طریق این‌ابزار در دسترس عموم قرار میگیرن.&lt;/li&gt; &#xA; &lt;li&gt;ممکنه بعضی‌از لینک‌های ساب با خطای 404 مواجه بشن یا یک لوکیشن قبلا بوده باشه و الان نباشه؛ که دلیلش عدم در دسترس بودن کانفیگ‌های یک لوکیشن در همون‌بازه زمانی هست.&lt;/li&gt; &#xA; &lt;li&gt;آی‌پی‌ها برای دسته‌بندی کانفیگ‌ها بر اساس لوکیشن با یک دیتابیس تطابق داده میشن، که ممکنه گاهی اشتباه داشته باشه.&lt;/li&gt; &#xA; &lt;li&gt;برای رعایت مسائل امنیتی توصیه میشه تنها برای مصارف عادی ازشون استفاده کنین.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;دریافت نرم افزار موردنیاز :&lt;br&gt; &lt;a href=&#34;https://ircf.space/software.php&#34;&gt;https://ircf.space/software.php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;آموزش استفاده :&lt;br&gt; &lt;a href=&#34;https://youtube.com/watch?v=MNqsR8F6JWs&amp;amp;t=125s&#34;&gt;https://youtube.com/watch?v=MNqsR8F6JWs&amp;amp;t=125s&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dgunning/edgartools</title>
    <updated>2024-04-09T01:31:32Z</updated>
    <id>tag:github.com,2024-04-09:/dgunning/edgartools</id>
    <link href="https://github.com/dgunning/edgartools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python library for working with SEC Edgar&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/dgunning/edgartools&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/edgartools-logo.png&#34; alt=&#34;edgar-tools-logo&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;The world&#39;s easiest, most powerful edgar library&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://pypi.org/project/edgartools&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/edgartools.svg?sanitize=true&#34; alt=&#34;PyPI - Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/dgunning/edgartools&#34; alt=&#34;GitHub last commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/dgunning/edgartools/python-hatch-workflow.yml&#34; alt=&#34;GitHub Workflow Status&#34;&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/dgunning/edgartools&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/dgunning/edgartools/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pypa/hatch&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg?sanitize=true&#34; alt=&#34;Hatch project&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/dgunning/edgartools&#34; alt=&#34;GitHub&#34;&gt;&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/dgunning/edgartools&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/edgar-demo.gif&#34; alt=&#34;edgardemo&#34; height=&#34;500&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;About the project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;edgartools&lt;/code&gt;&lt;/strong&gt; is one of the nicest looking EDGAR libraries out there. It is also powerful and easy to use. You can query, filter and select any filing since 1994 and view the filing&#39;s html, text, xml or structured data.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Install using pip&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install edgartools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import and start using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from edgar import *&#xA;&#xA;# Tell the SEC who you are&#xA;set_identity(&#34;Michael Mccallum mike.mccalum@indigo.com&#34;)&#xA;&#xA;filings = get_filings()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Concepts&lt;/h1&gt; &#xA;&lt;h2&gt;How do I find a filing?&lt;/h2&gt; &#xA;&lt;p&gt;Depends on what you know&lt;/p&gt; &#xA;&lt;h3&gt;A. I know the accession number&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filing = find(&#34;0001065280-23-000273&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;B. I know the company ticker or cik&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filings = Company(&#34;NFLX&#34;).get_filings(form=&#34;10-Q&#34;).latest(1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C. Show me a list of filings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filings = get_filings(form=&#34;10-Q&#34;)&#xA;filing = filings[0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What can I do with a filing&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;strong&gt;view&lt;/strong&gt; it in the terminal or &lt;strong&gt;open&lt;/strong&gt; it in the browser, get the filing as &lt;strong&gt;html&lt;/strong&gt;, &lt;strong&gt;xml&lt;/strong&gt; or &lt;strong&gt;text&lt;/strong&gt;, and download &lt;strong&gt;attachments&lt;/strong&gt;. You can extract data from the filing into a data object.&lt;/p&gt; &#xA;&lt;h2&gt;What can I do with a company&lt;/h2&gt; &#xA;&lt;p&gt;You can get the company&#39;s &lt;strong&gt;filings&lt;/strong&gt;, &lt;strong&gt;facts&lt;/strong&gt; and &lt;strong&gt;financials&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;How to use edgartools&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Task&lt;/th&gt; &#xA;   &lt;th&gt;Code&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Set your EDGAR identity in Linux/Mac&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;export EDGAR_IDENTITY=&#34;First Last email@domain.com&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Set your EDGAR identity in Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;set EDGAR_IDENTITY=&#34;First Last email@domain.com&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Set identity in Windows Powershell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$env:EDGAR_IDENTITY=&#34;First Last email@domain.com&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Set identity in Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;set_identity(&#34;First Last email@domain.com&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Importing the library&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;from edgar import *&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Working with filings&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Task&lt;/th&gt; &#xA;   &lt;th&gt;Code&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get filings for the year to date&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings = get_filings()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get only xbrl filings&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings = get_filings(index=&#34;xbrl&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get filings for a specific year&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings = get_filings(2020)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get filings for a specific quarter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings = get_filings(2020, 1)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get filings for multiple years&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings = get_filings([2020, 2021])&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get filigs for a range of years&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings = get_filings(year=range(2010, 2020)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get filings for a specific form&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings = get_filings(form=&#34;10-K&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get filings for a list of forms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings = get_filings(form=[&#34;10-K&#34;, &#34;10-Q&#34;])&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Show the next page of filings&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings.next()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Show the previous page of filings&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings.prev()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the first n filings&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings.head(20)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the last n filings&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings.tail(20)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the latest n filings by date&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings.latest(20)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get a random sample of the filings&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings.sample(20)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Filter filings on a date&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings = filings.filter(date=&#34;2020-01-01&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Filter filings between dates&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings.filter(date=&#34;2020-01-01:2020-03-01&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Filter filings before a date&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings.filter(date=&#34;:2020-03-01&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Filter filings after a date&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings.filter(date=&#34;2020-03-01:&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get filings as a pandas dataframe&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filings.to_pandas()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Working with a filing&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Task&lt;/th&gt; &#xA;   &lt;th&gt;Code&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get a single filing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing = filings[3]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get a filing by accession number&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing = get_by_accession_number(&#34;0000320193-20-34576&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the filing homepage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing.homepage&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Open a filing in the browser&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing.open()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Open the filing homepage in the browser&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing.homepage.open()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;View the filing in the terminal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing.view()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the html of the filing document&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing.html()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the XBRL of the filing document&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing.xbrl()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the filing document as markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing.markdown()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the full submission text of a filing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing.text()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get and parse the data object of a filing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing.obj()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the filing attachments&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filing.attachments&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get a single attachment&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;attachment = filing.attachments[0]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Open an attachment in the browser&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;attachment.open()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Download an attachment&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;content = attachment.download()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Working with a company&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Task&lt;/th&gt; &#xA;   &lt;th&gt;Code&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get a company by ticker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;company = Company(&#34;AAPL&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get a company by CIK&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;company = Company(&#34;0000320193&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get company facts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;company.get_facts()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get company facts as a pandas dataframe&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;company.get_facts().to_pandas()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get company filings&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;company.get_filings()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get company filings by form&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;company.get_filings(form=&#34;10-K&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get a company filing by accession_number&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;company.get_filing(accession_number=&#34;0000320193-21-000139&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the company&#39;s financials&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;company.financials&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the company&#39;s balance sheet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;company.financials.balance_sheet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get the company&#39;s cash flow statement&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;company.financials.cash_flow_statement&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pip install edgartools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Set your Edgar user identity&lt;/h2&gt; &#xA;&lt;p&gt;Before you can access the SEC Edgar API you need to set the identity that you will use to access Edgar. This is usually your name and email, or a company name and email.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Sample Company Name AdminContact@&amp;lt;sample company domain&amp;gt;.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The user identity is sent in the User-Agent string and the Edgar API will refuse to respond to your request without it.&lt;/p&gt; &#xA;&lt;p&gt;EdgarTools will look for an environment variable called &lt;code&gt;EDGAR_IDENTITY&lt;/code&gt; and use that in each request. So, you need to set this environment variable before using it.&lt;/p&gt; &#xA;&lt;h3&gt;Setting EDGAR_IDENTITY in Linux/Mac&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export EDGAR_IDENTITY=&#34;Michael Mccallum mcalum@gmail.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting EDGAR_IDENTITY in Windows Powershell&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; $Env:EDGAR_IDENTITY=&#34;Michael Mccallum mcalum@gmail.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can call &lt;code&gt;set_identity&lt;/code&gt; which does the same thing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from edgar import set_identity&#xA;set_identity(&#34;Michael Mccallum mcalum@gmail.com&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more detail see &lt;a href=&#34;https://www.sec.gov/os/accessing-edgar-data&#34;&gt;https://www.sec.gov/os/accessing-edgar-data&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Importing edgar&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from edgar import *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting filings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;# Get filings for the current year and quarter&#xA;filings = get_filings() &#xA;&#xA;# Get filings for 2022&#xA;filings = get_filings(2022)                 # OR filings = get_filings(year=2022)&#xA;&#xA;# Get filings for 2022 quarter 4&#xA;filings = get_filings(2022, 4)              # OR filings = get_filings(year=2022, quarter=4)&#xA;&#xA;# Get filings for 2020, 2021 and 2022&#xA;filings = get_filings([2020, 2021, 2022])   # OR filings = get_filings(year=range(2020, 2023))&#xA;&#xA;# Get filings for 2020 quarters 1 and 2&#xA;filings = get_filings(2020, quarter=[1,2])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/get_filings.jpg&#34; alt=&#34;Get filings&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Filtering filings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Filter for form D&#xA;filings.filter(form=&#34;D&#34;)&#xA;&#xA;# Filter for form 10-K and 10-Q &#xA;filings.filter(form=[&#34;10-K&#34;, &#34;10-Q&#34;])&#xA;&#xA;# When you filter by form e.g. &#34;D&#34; it includes amendments e.g. &#34;D\A&#34;. You can omit amendments&#xA;filings.filter(form=&#34;D&#34;, amendments=False)&#xA;&#xA;# Filter by filing_date. date and filing_date mean the same thing&#xA;# Get all filings on 2023-02-23&#xA;filings.filter(date=&#34;2023-02-23&#34;)                      &#xA;# OR&#xA;filings.filter(filing_date=&#34;2023-02-23&#34;)&#xA;&#xA;# Filter to get all filings between 2023-01-23 and 2023-02-23     &#xA;filings.filter(date=&#34;2023-01-23:2023-02-23&#34;)&#xA;&#xA;# Filter to get all filings since 2023-01-23   &#xA;filings.filter(date=&#34;2023-01-23&#34;)&#xA;&#xA;# Filter to get all filings before 2023-02-23     &#xA;filings.filter(date=&#34;:2023-02-23&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Combining getting and filtering&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;get_filings(2022, form=&#34;D&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Convert the filings to a pandas dataframe&lt;/h3&gt; &#xA;&lt;p&gt;The filings data is stored in the &lt;code&gt;Filings&lt;/code&gt; class as a &lt;code&gt;pyarrow.Table&lt;/code&gt;. You can get the data as a pandas dataframe using &lt;code&gt;to_pandas&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = filings.to_pandas()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Navigating filings&lt;/h2&gt; &#xA;&lt;p&gt;The Filings object allows you to navigate through filings using &lt;code&gt;filings.next()&lt;/code&gt; and &lt;code&gt;filings.prev()&lt;/code&gt;. This shows you pages of the data - the page size is about 50.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# To see the next page of data&#xA;filings.next()&#xA;&#xA;# To see the previous page&#xA;filings.prev()&#xA;&#xA;# To see the current page&#xA;filings.current()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/filings_next.jpg&#34; alt=&#34;Get next filings&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting the latest filings&lt;/h2&gt; &#xA;&lt;p&gt;You can get the latest &lt;strong&gt;n&lt;/strong&gt; filings by filing_date from a filings using &lt;code&gt;filings.latest()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you provide the parameter &lt;code&gt;n&lt;/code&gt; it will return the latest &lt;code&gt;n&lt;/code&gt; filings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filing = filings.latest(n=5)&#xA;filing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/latest_filings.jpg&#34; alt=&#34;Latest filings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you omit this parameter, or set &lt;code&gt;n=1&lt;/code&gt; it will return a single `Filings object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filing = filings.latest()&#xA;filing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/latest_filing.jpg&#34; alt=&#34;Latest filing&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Filtering filings&lt;/h2&gt; &#xA;&lt;p&gt;You can filter the filings object using te &lt;code&gt;filter()&lt;/code&gt; function. This allows you to filter by filing date, or by form.&lt;/p&gt; &#xA;&lt;h3&gt;Filtering filings by date&lt;/h3&gt; &#xA;&lt;p&gt;To filter by filing date specify the filing date in &lt;strong&gt;YYYY-MM-DD&lt;/strong&gt; format e.g. &lt;strong&gt;2022-01-24&lt;/strong&gt; (Note the parameters &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;filing_date&lt;/code&gt; are equivalent aliases for each other)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filings.filter(date=&#34;2021-01-24&#34;) # or filings.filter(filing_date=&#34;2021-01-24&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify a filing date range using the colon&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filings.filter(date=&#34;2021-01-12:2021-02-28&#34;) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To filter by dates before a specified date use `:YYYY-MM-DD&#39;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filings.filter(date=&#34;:2021-02-28&#34;) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To filter by dates after a specified date use `YYYY-MM-DD:&#39;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filings.filter(date=&#34;2021-02-28:&#34;) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Filtering filings by form&lt;/h3&gt; &#xA;&lt;p&gt;You can filter filings by form using the &lt;code&gt;form&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filings.filter(form=&#34;10-K&#34;) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To filter by form e.g. &lt;strong&gt;10-K&lt;/strong&gt; and include form amendments use &lt;code&gt;amendments = True&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filings.filter(form=&#34;10-K&#34;, amendments=True) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/filter_amendments.jpg&#34; alt=&#34;Filter with amendments&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Working with a single filing&lt;/h2&gt; &#xA;&lt;p&gt;You can get a single filing from the filings using the bracket operator &lt;code&gt;[]&lt;/code&gt;, specifying the index of the filing. The index is the value displayed in the leftmost position in the filings table. For example, to get the &lt;strong&gt;10-Q&lt;/strong&gt; for &lt;strong&gt;Costco&lt;/strong&gt; in the table above use &lt;code&gt;filings[3]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filing = filings[3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/costco_10Q.jpg&#34; alt=&#34;Costco 10Q filing&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;View the filing homepage&lt;/h3&gt; &#xA;&lt;p&gt;You can view the filing homepage in the terminal using &lt;code&gt;filing.homepage&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This gives you access to the &lt;code&gt;FilingHomepage&lt;/code&gt; class that you can use to list all the documents and datafiles on the filing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filing.homepage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/filing_homepage.jpg&#34; alt=&#34;Filing homepage&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open a filing&lt;/h3&gt; &#xA;&lt;p&gt;You can open the filing in your browser using &lt;code&gt;filing.open()&lt;/code&gt;. This will work on environments with access to the browser, will probably not work on a remote server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filing.open()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Open the Filing Homepage&lt;/h3&gt; &#xA;&lt;p&gt;You can open the filing homepage in the browser using &lt;code&gt;filing.homepage.open()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filing.homepage.open()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View the filing as Markdown&lt;/h3&gt; &#xA;&lt;p&gt;You can view the filing&#39;s HTML content as markdown in the console using &lt;code&gt;view()&lt;/code&gt;. It works for all filing types but can be a little slow for filings with large HTML files&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filing.view()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get the filing&#39;s html&lt;/h3&gt; &#xA;&lt;p&gt;You can get the html content of the filing using&lt;code&gt;.html()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filing.html()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get the filing&#39;s html as Markdown&lt;/h3&gt; &#xA;&lt;p&gt;You can get the html content as markdown using&lt;code&gt;.markdown()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filing.markdown()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Viewing and downloading attachments&lt;/h2&gt; &#xA;&lt;p&gt;Every filing has a list of attachments. You can view the attachments using &lt;code&gt;filing.attachments&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# View the attachments&#xA;filing.attachments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/filing_attachments.png&#34; alt=&#34;Filing attachments&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can access each attachment using the bracket operator &lt;code&gt;[]&lt;/code&gt; and the index of the attachment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Get the first attachment&#xA;attachment = filing.attachments[0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/filing_attachment.png&#34; alt=&#34;Filing attachments&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can download the attachment using &lt;code&gt;attachment.download()&lt;/code&gt;. This will download the attachment to string or bytes in memory.&lt;/p&gt; &#xA;&lt;h2&gt;Automatic parsing of filing data&lt;/h2&gt; &#xA;&lt;p&gt;Now the reason you may want to download attachments is to get information contained in data files. For example, &lt;strong&gt;13F-HR&lt;/strong&gt; filings have attached infotable.xml files containing data from the holding report for that filing.&lt;/p&gt; &#xA;&lt;p&gt;Fortunately, the library handles this for you. If you call &lt;code&gt;filing.obj()&lt;/code&gt; it will automatically download and parse the data files into a data object, for several different form types. Currently, the following forms are supported:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Form&lt;/th&gt; &#xA;   &lt;th&gt;Data Object&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10-K&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TenK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Annual report&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10-Q&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TenQ&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quarterly report&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8-K&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;EightK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Current report&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MA-I&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;MunicipalAdvisorForm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Municipal advisor initial filing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Form 144&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Form144&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Notice of proposed sale of securities&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C, C-U, C-AR, C-TR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FormC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Form C Crowdfunding Offering&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;D&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FormD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Form D Offering&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3,4,5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ownership&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ownership reports&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13F-HR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ThirteenF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;13F Holdings Report&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NPORT-P&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FundReport&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fund Report&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EFFECT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Effect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Notice of Effectiveness&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;And other filing with XBRL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FilingXbrl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For example, to get the data object for a &lt;strong&gt;13F-HR&lt;/strong&gt; filing you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filings = get_filings(form=&#34;13F-HR&#34;)&#xA;filing = filings[0]&#xA;thirteenf = filing.obj()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/thirteenF.png&#34; alt=&#34;Filing attachments&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you call &lt;code&gt;obj()&lt;/code&gt; on a filing that does not have a data file, then it will return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Working with XBRL filings&lt;/h2&gt; &#xA;&lt;p&gt;Some filings are in &lt;strong&gt;XBRL (eXtensible Business Markup Language)&lt;/strong&gt; format. These are mainly the newer filings, as the SEC has started requiring this for newer filings.&lt;/p&gt; &#xA;&lt;p&gt;If a filing is in XBRL format then it opens up a lot more ways to get structured data about that specific filing and also about the company referred to in that filing.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Filing&lt;/code&gt; class has an &lt;code&gt;xbrl&lt;/code&gt; function that will download, parse and structure the filing&#39;s XBRL document if one exists. If it does not exist, then &lt;code&gt;filing.xbrl()&lt;/code&gt; will return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;filing.xbrl()&lt;/code&gt; returns a &lt;code&gt;FilingXbrl&lt;/code&gt; instance, which wraps the data, and provides convenient ways of working with the xbrl data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filing_xbrl = filing.xbrl()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/10Q_xbrl.jpg&#34; alt=&#34;Filing homapage&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using the Company API&lt;/h2&gt; &#xA;&lt;p&gt;With the company API you find a company using the &lt;strong&gt;cik&lt;/strong&gt; or &lt;strong&gt;ticker&lt;/strong&gt;. From the company you can access all their historical &lt;strong&gt;filings&lt;/strong&gt;, and a dataset of the company &lt;strong&gt;facts&lt;/strong&gt;. The SEC&#39;s company API also supplies a lot more details about a company including industry, the SEC filer type, the mailing and business address and much more.&lt;/p&gt; &#xA;&lt;h3&gt;Find a company using the cik&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;cik&lt;/strong&gt; is the id that uniquely identifies a company at the SEC. It is a number, but is sometimes shown in SEC Edgar resources as a string padded with leading zero&#39;s. For the edgar client API, just use the numbers and omit the leading zeroes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;company = Company(1324424)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/expe.png&#34; alt=&#34;expe&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Find a company using ticker&lt;/h3&gt; &#xA;&lt;p&gt;You can get a company using a ticker e.g. &lt;strong&gt;SNOW&lt;/strong&gt;. This will do a lookup for the company cik using the ticker, then load the company using the cik. This makes it two calls versus one for the cik company lookup, but is sometimes more convenient since tickers are easier to remember that ciks.&lt;/p&gt; &#xA;&lt;p&gt;Note that some companies have multiple tickers, so you technically cannot get SEC filings for a ticker. You instead get the SEC filings for the company to which the ticker belongs.&lt;/p&gt; &#xA;&lt;p&gt;The ticker is case-insensitive so you can use &lt;code&gt;Company(&#34;snow&#34;)&lt;/code&gt; or &lt;code&gt;Company(&#34;SNOW&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;snow = Company(&#34;snow&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgunning/edgartools/main/docs/images/snow.jpg&#34; alt=&#34;snow&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Company(1832950)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get filings for a company&lt;/h3&gt; &#xA;&lt;p&gt;To get the company&#39;s filings use &lt;code&gt;get_filings()&lt;/code&gt;. This gets all the company&#39;s filings that are available from the Edgar submissions endpoint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;company.get_filings()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Filtering filings&lt;/h3&gt; &#xA;&lt;p&gt;You can filter the company filings using a number of different parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class CompanyFilings:&#xA;    &#xA;    ...&#xA;    &#xA;    def get_filings(self,&#xA;                    *,&#xA;                    form: str | List = None,&#xA;                    accession_number: str | List = None,&#xA;                    file_number: str | List = None,&#xA;                    is_xbrl: bool = None,&#xA;                    is_inline_xbrl: bool = None&#xA;                    ):&#xA;        &#34;&#34;&#34;&#xA;        Get the company&#39;s filings and optionally filter by multiple criteria&#xA;        :param form: The form as a string e.g. &#39;10-K&#39; or List of strings [&#39;10-Q&#39;, &#39;10-K&#39;]&#xA;        :param accession_number: The accession number that uniquely identifies an SEC filing e.g. 0001640147-22-000100&#xA;        :param file_number: The file number e.g. 001-39504&#xA;        :param is_xbrl: Whether the filing is xbrl&#xA;        :param is_inline_xbrl: Whether the filing is inline_xbrl&#xA;        :return: The CompanyFiling instance with the filings that match the filters&#xA;        &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;The CompanyFilings class&lt;/h4&gt; &#xA;&lt;p&gt;The result of &lt;code&gt;get_filings()&lt;/code&gt; is a &lt;code&gt;CompanyFilings&lt;/code&gt; class. This class contains a pyarrow table with the filings and provides convenient functions for working with filings. You can access the underlying pyarrow &lt;code&gt;Table&lt;/code&gt; using the &lt;code&gt;.data&lt;/code&gt; property&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filings = company.get_filings()&#xA;&#xA;# Get the underlying Table&#xA;data: pa.Table = filings.data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get a filing by index&lt;/h4&gt; &#xA;&lt;p&gt;To access a filing in the CompanyFilings use the bracket &lt;code&gt;[]&lt;/code&gt; notation e.g. &lt;code&gt;filings[2]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filings[2]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get the latest filing&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;CompanyFilings&lt;/code&gt; class has a &lt;code&gt;latest&lt;/code&gt; function that will return the latest &lt;code&gt;Filing&lt;/code&gt;. So, to get the latest &lt;strong&gt;10-Q&lt;/strong&gt; filing, you do the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Latest filing makes sense if you filter by form  type e.g. 10-Q&#xA;snow_10Qs = snow.get_filings(form=&#39;10-Q&#39;)&#xA;latest_10Q = snow_10Qs.latest()&#xA;&#xA;# Or chain the function calls&#xA;snow.get_filings(form=&#39;10-Q&#39;).latest()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get company facts&lt;/h3&gt; &#xA;&lt;p&gt;Facts are an interesting and important dataset about a company accumlated from data the company provides to the SEC. Company facts are available for a company on the Company Facts&lt;code&gt;f&#34;https://data.sec.gov/api/xbrl/companyfacts/CIK{cik:010}.json&#34;&lt;/code&gt; It is a JSON endpoint and &lt;code&gt;edgartools&lt;/code&gt; parses the JSON into a structured dataset - a &lt;code&gt;pyarrow.Table&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Getting facts for a company&lt;/h4&gt; &#xA;&lt;p&gt;To get company facts, first get the company, then call &lt;code&gt;company.get_facts()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;company = Company(&#34;SNOW&#34;)&#xA;company_facts = company.get_facts()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result is a &lt;code&gt;CompanyFacts&lt;/code&gt; object which wraps the underlying facts and provides convenient ways of working with the facts data. To get access to the underyling data use the &lt;code&gt;facts&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;You can get the facts as a pandas dataframe by calling &lt;code&gt;to_pandas&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = company_facts.to_pandas()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Facts differ among companies. To see what facts are available you can use the &lt;code&gt;facts_meta&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are welcome! We would love to hear your thoughts on how this library could be better at working with SEC Edgar.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;We use GitHub issues to track public bugs. Report a bug by &lt;a href=&#34;https://github.com/dgunning/edgartools/issues&#34;&gt;opening a new issue&lt;/a&gt;; it&#39;s that easy!&lt;/p&gt; &#xA;&lt;h2&gt;Making code changes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the repo and create your branch from master.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;ve added code that should be tested, add tests.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;ve changed APIs, update the documentation.&lt;/li&gt; &#xA; &lt;li&gt;Ensure the test suite passes.&lt;/li&gt; &#xA; &lt;li&gt;Make sure your code lints.&lt;/li&gt; &#xA; &lt;li&gt;Issue that pull request!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;edgartools&lt;/code&gt; is distributed under the terms of the &lt;a href=&#34;https://spdx.org/licenses/MIT.html&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/dwight-gunning-860124/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supporters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dgunning/edgartools/stargazers&#34;&gt;&lt;img src=&#34;https://reporoster.com/stars/dgunning/edgartools&#34; alt=&#34;Stargazers repo roster for @dgunning/edgartools&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dgunning/edgartools/network/members&#34;&gt;&lt;img src=&#34;https://reporoster.com/forks/dgunning/edgartools&#34; alt=&#34;Forkers repo roster for @dgunning/edgartools&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Subscribe to Polar&lt;/h2&gt; &#xA;&lt;picture&gt;&#xA;  2 &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://polar.sh/embed/subscribe.svg?org=polarsource&amp;amp;label=Subscribe&amp;amp;darkmode&#34;&gt; 3 &#xA; &lt;img alt=&#34;Subscribe on Polar&#34; src=&#34;https://polar.sh/embed/subscribe.svg?org=polarsource&amp;amp;label=Subscribe&#34;&gt; 4&#xA;&lt;/picture&gt;</summary>
  </entry>
  <entry>
    <title>zengm-games/facesjs</title>
    <updated>2024-04-09T01:31:32Z</updated>
    <id>tag:github.com,2024-04-09:/zengm-games/facesjs</id>
    <link href="https://github.com/zengm-games/facesjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A JavaScript library for generating vector-based cartoon faces&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;faces.js&lt;/h1&gt; &#xA;&lt;p&gt;A JavaScript library for generating vector-based cartoon faces&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://zengm.com/facesjs/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zengm-games/facesjs/master/examples.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://zengm.com/facesjs/&#34;&gt;See a live demo here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;I wrote this to generate random cartoon faces for players in &lt;a href=&#34;https://basketball-gm.com/&#34;&gt;Basketball GM&lt;/a&gt; and &lt;a href=&#34;https://zengm.com/&#34;&gt;other games&lt;/a&gt;. You can use it for similar purposes, or &lt;a href=&#34;https://biowiki.org/wiki/index.php/Main_Page&#34;&gt;other purposes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Help wanted!&lt;/h2&gt; &#xA;&lt;p&gt;I am not an artist! The faces look kind of shitty! If you would like to help, please keep reading. With version 2 of faces.js, it will hopefully be easier for people to contribute. Even if you&#39;re new to programming or to JavaScript, I am happy to help you.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install --save facesjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add facesjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;p&gt;Import it with ES modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import { display, generate } from &#34;facesjs&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or CommonJS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const { display, generate } = require(&#34;facesjs&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, generate a random face:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const face = generate();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And display it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Display in a div with id &#34;my-div-id&#34;&#xA;display(&#34;my-div-id&#34;, face);&#xA;&#xA;// Display in a div you already have a reference to&#xA;const element = document.getElementById(&#34;my-div-id&#34;);&#xA;display(element, face);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like a non-random face, look inside the &lt;code&gt;face&lt;/code&gt; variable and you&#39;ll see all the available options for a manually constructed face.&lt;/p&gt; &#xA;&lt;h3&gt;Overrides&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;code&gt;display&lt;/code&gt; and &lt;code&gt;generate&lt;/code&gt; accept an optional final argument, specifying values to override either the randomly generated face (for &lt;code&gt;generate&lt;/code&gt;) or the supplied face (for &lt;code&gt;display&lt;/code&gt;). For instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Generate a random face that always has blue skin&#xA;const face = generate({ body: { color: &#34;blue&#34; } });&#xA;&#xA;# Display a face, but impose that it has blue skin&#xA;display(&#34;my-div-id&#34;, face, { body: { color: &#34;blue&#34; } });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;generate&lt;/code&gt; function takes a second optional arguement, which takes in extra parameters for player creation, in the form of an object.&lt;/p&gt; &#xA;&lt;p&gt;Generate a female/male face (default is male):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const face = generate(null, { gender: &#34;female&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assign a race attribute that can be white, black, asian, or brown (default is random):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const face = generate(null, { race: &#34;white&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or both together:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const face = generate(null, { gender: &#34;female&#34;, race: &#34;asian&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exporting SVGs&lt;/h2&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;faceToSvgString&lt;/code&gt; to convert a face object to an SVG string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import { faceToSvgString, generate } from &#34;facesjs&#34;;&#xA;&#xA;const face = generate();&#xA;const svg = faceToSvgString(face);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify overrides, similar to &lt;code&gt;display&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const svg = faceToSvgString(face, { body: { color: &#34;blue&#34; } });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;facesjs&lt;/code&gt; as a CLI program. All of the functionality from &lt;code&gt;generate&lt;/code&gt; and &lt;code&gt;display&lt;/code&gt; are available on the CLI too.&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;Output a random face to stdout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npx facesjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generage a blue female face and output to stdout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npx facesjs -j &#39;{&#34;body&#34;:{&#34;color&#34;:&#34;blue&#34;}}&#39; -g female&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generage a male white face and save it to test.svg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npx facesjs -r white -o test.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;-h, --help          Prints this help&#xA;-o, --output        Output filename to use rather than stdout&#xA;-f, --input-file    Path to a faces.js JSON file to convert to SVG&#xA;-j, --input-json    String faces.js JSON object to convert to SVG&#xA;-r, --race          Race - white/black/asian/brown, default is random&#xA;-g, --gender        Gender - male/female, default is male&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;--input-file and --input-json can specify either an entire face object or a partial face object. If it&#39;s a partial face object, the other features will be random.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Running &lt;code&gt;yarn run start&lt;/code&gt; will do a few things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Give you a URL to open the face viewer UI in your browser&lt;/li&gt; &#xA; &lt;li&gt;Watch for changes to the code&lt;/li&gt; &#xA; &lt;li&gt;Watch for changes to the facial feature SVG files&lt;/li&gt; &#xA; &lt;li&gt;Update the face viewer UI when any code or SVG changes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This lets you immediately see your changes as you work.&lt;/p&gt; &#xA;&lt;h2&gt;Adding new facial features&lt;/h2&gt; &#xA;&lt;p&gt;Each face is assembled from multiple SVGs. You can see them within the &#34;svg&#34; folder. If you want to add another feature, just create an SVG (using a vector graphics editor like &lt;a href=&#34;https://inkscape.org/&#34;&gt;Inkscape&lt;/a&gt;) and put it in the appropriate folder. It should automatically work. If not, it&#39;s a bug, please let me know!&lt;/p&gt; &#xA;&lt;p&gt;When creating SVGs, assume the size of the canvas is 400x600. For most features, it doesn&#39;t mater where you draw on the canvas because it will automatically identify your object and position it in the appropriate place. But for head and hair SVGs, position does matter. For those you do need to make sure they are in the correct place on a 400x600 canvas, same as the existing head and hair SVGs. Otherwise it won&#39;t know where to place the other facial features relative to the head and hair.&lt;/p&gt; &#xA;&lt;p&gt;If you find it not quite placing a facial feature exactly where you want, it&#39;s because by default it finds the center of the eye/eyebrow/mouth/nose SVG and places that in a specific location. If that&#39;s not good for a certain facial feature, that behavior can be overridden in code. For instance, see how it&#39;s done in display.js for the &#34;pinocchio&#34; nose which uses the left side of the SVG rather than the center to place it.&lt;/p&gt; &#xA;&lt;p&gt;If you want a brand new &#34;class&#34; of facial features (like facial hair, or earrings, or hats) you&#39;ll have to create a new subfolder within the &#34;svg&#34; folder and edit the code to recognize your new feature.&lt;/p&gt; &#xA;&lt;p&gt;If you find any of this confusing, feel free to reach out to me for help! I would love for someone to help me make better looking faces :)&lt;/p&gt; &#xA;&lt;h2&gt;Technical details&lt;/h2&gt; &#xA;&lt;h3&gt;Minimizing import size&lt;/h3&gt; &#xA;&lt;p&gt;If you generate and display faces in separate bundles, you can decrease file size by only including the &lt;code&gt;display&lt;/code&gt; or &lt;code&gt;generate&lt;/code&gt; function in each bundle. You can import the &lt;code&gt;display&lt;/code&gt; and &lt;code&gt;generate&lt;/code&gt; functions individually and rely on tree shaking from your bundler. ES modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import { display } from &#34;facesjs&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or CommonJS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const { generate } = require(&#34;facesjs&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, import them directly if you don&#39;t trust your bundler :). ES modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import generate from &#34;facesjs/build/esmodules/generate&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or CommonJS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const display = require(&#34;facesjs/build/commonjs/display&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dumbmatter&#34;&gt;dumbmatter&lt;/a&gt; wrote most of the code, &lt;a href=&#34;https://github.com/TravisJB89&#34;&gt;TravisJB89&lt;/a&gt; made most of the graphics, &lt;a href=&#34;https://liacui.carrd.co/&#34;&gt;Lia Cui&lt;/a&gt; made most of the female graphics, and &lt;a href=&#34;https://github.com/gurushida&#34;&gt;gurushida&lt;/a&gt; wrote the code to export faces as SVG strings.&lt;/p&gt;</summary>
  </entry>
</feed>