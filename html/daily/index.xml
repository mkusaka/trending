<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-03T01:34:53Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cphxj123/Dol-BJX-Ex</title>
    <updated>2023-12-03T01:34:53Z</updated>
    <id>tag:github.com,2023-12-03:/cphxj123/Dol-BJX-Ex</id>
    <link href="https://github.com/cphxj123/Dol-BJX-Ex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dol北极星扩展&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dol-BJX-Ex&lt;/h1&gt; &#xA;&lt;p&gt;北极星扩展MOD: 由北极星独立制作的模组，借鉴、吸收、融合、优化了一些其他模组的内容。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;主要内容：&#xA;&#xA;神圣转化大改 动物转化大改&#xA;&#xA;新添事件转化 新添神器系统&#xA;&#xA;额外战斗机制 额外地点事件&#xA;&#xA;其他小修小改 小型优化提升&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;感谢模组作者们的贡献，感谢各位测试反馈者的帮忙，感谢各位大佬的教导。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;吸收模组：&#xA;&#xA;--世扩模组&#xA;&#xA;--雨衣模组&#xA;&#xA;--血量模组&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;星扩均已整合模组加载器，请按照下方说明使用。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;安装模组: &#xA;&#xA;1.下载模组压缩包，不要解压，直接放在任意文件夹中。&#xA;&#xA;2.打开星扩游戏，在主界面左下角有个&#34;Mod管理器&#34;字样。&#xA;&#xA;3.点击Mod管理器，在弹出的界面找到&#34;添加/移除Mod&#34;。&#xA;&#xA;4.点击下方的&#34;选择文件&#34;，选择之前安装的模组压缩包。&#xA;&#xA;5.点击&#34;添加旁加载Mod&#34;，等待看到&#34;Success. 刷新页面后生效&#34;。&#xA;&#xA;6.重复上一步，直到把所有想要安装的mod添加(注意后加载覆盖前加载)。&#xA;&#xA;7.拉倒Mod管理器管理器最上面，点击&#34;重新载入&#34;。&#xA;&#xA;8.进入游戏，开始游玩(有些模组还需要在选项中启用功能)。&#xA;&#xA;卸载模组: &#xA;&#xA;1.打开游戏，打开左下角的&#34;Mod管理器&#34;。&#xA;&#xA;2.找到&#34;添加/移除Mod&#34;下面，&#34;可移除的旁加载Mod列表&#34;。&#xA;&#xA;3.选择需要移除的mod，点击&#34;移除选定的旁加载Mod&#34;。&#xA;&#xA;4.重复上一步，直到把所有不需要的mod移除。&#xA;&#xA;5.拉倒Mod管理器管理器最上面，点击&#34;重新载入&#34;。&#xA;&#xA;6.进入游戏，开始游玩&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;更新日志：&lt;/p&gt; &#xA;&lt;p&gt;2.1.0--集成模组加载器，修复部分犯罪、图标引起的bug。&lt;/p&gt; &#xA;&lt;p&gt;2.1.3--优化浣熊、走私者等提示信息，优化炎鬼、水鬼等肤色显示，部位图层选择优化，以及bug修复。&lt;/p&gt; &#xA;&lt;p&gt;2.1.4--添加失效衣服自动删除功能，避免装卸衣服模组造成的bug。修复混沌天使不能修复神殿誓言bug，泰勒跳转bug。&lt;/p&gt; &#xA;&lt;p&gt;2.1.5--紧急修复失效衣服自动删除功能，之前会造成衣服全部被删除。&lt;/p&gt; &#xA;&lt;p&gt;2.1.6--继续优化失效衣服删除功能，解锁缝纫机开启无效修复，修复触手平原爆红bug，修复泰勒爆红bug，悉尼祈祷室bug，野兽血量异常bug。&lt;/p&gt; &#xA;&lt;p&gt;2.1.7--加强荒原飞行效果，修复穿触手服爆红，水烟添加意志判定，湖边小屋价格随贝利租金变化，转化饰品效果优化，修复具现蘑菇衣服报错。&lt;/p&gt; &#xA;&lt;p&gt;2.1.8--修复特殊衣服穿衣爆红，实装开局事件转化。&lt;/p&gt; &#xA;&lt;p&gt;2.2.0--优化加强湖边小屋内容，全新直播效果，新增地下室，可购买木马(sm)，以及其他小型调整。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>unfoldadmin/django-unfold</title>
    <updated>2023-12-03T01:34:53Z</updated>
    <id>tag:github.com,2023-12-03:/unfoldadmin/django-unfold</id>
    <link href="https://github.com/unfoldadmin/django-unfold" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern Django admin theme for seamless interface development&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/unfoldadmin/django-unfold/assets/10785882/291e69c9-abdd-4f7e-a0d6-2af210a9013a#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://github.com/unfoldadmin/django-unfold/assets/10785882/291e69c9-abdd-4f7e-a0d6-2af210a9013a#gh-light-mode-only&#34; alt=&#34;screenshot-light&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/unfoldadmin/django-unfold/assets/10785882/94a2e90f-924a-4aaf-b6d9-cb1592000c55#gh-dark-mode-only&#34;&gt;&lt;img src=&#34;https://github.com/unfoldadmin/django-unfold/assets/10785882/94a2e90f-924a-4aaf-b6d9-cb1592000c55#gh-dark-mode-only&#34; alt=&#34;screenshot-dark&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Unfold Django Admin Theme &#xA; &lt;!-- omit from toc --&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/unfoldadmin/django-unfold/actions?query=workflow%3Arelease&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/unfoldadmin/django-unfold/release.yml?style=for-the-badge&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/django-unfold/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/django-unfold.svg?style=for-the-badge&#34; alt=&#34;PyPI - Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge&#34; alt=&#34;Code Style - Black&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;amp;logoColor=white&amp;amp;style=for-the-badge&#34; alt=&#34;Pre Commit&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unfold is theme for Django admin incorporating most common practises for building full-fledged admin areas. It is designed to work at the top of default administration provided by Django.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unfold:&lt;/strong&gt; demo site is available at &lt;a href=&#34;https://unfoldadmin.com&#34;&gt;unfoldadmin.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Formula:&lt;/strong&gt; repository with demo implementation at &lt;a href=&#34;https://github.com/unfoldadmin/formula&#34;&gt;github.com/unfoldadmin/formula&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Turbo:&lt;/strong&gt; Django &amp;amp; Next.js boilerplate implementing Unfold at &lt;a href=&#34;https://github.com/unfoldadmin/turbo&#34;&gt;github.com/unfoldadmin/turbo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features &#xA; &lt;!-- omit from toc --&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visual&lt;/strong&gt;: provides new user interface based on Tailwind CSS framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sidebar:&lt;/strong&gt; simplifies definition of custom sidebar navigation with icons&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dark mode:&lt;/strong&gt; supports both light and dark mode versions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configuration:&lt;/strong&gt; most of the basic options can be changed in settings.py&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependencies:&lt;/strong&gt; completely based only on &lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Actions:&lt;/strong&gt; multiple ways how to define actions within different parts of admin&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WYSIWYG:&lt;/strong&gt; built-in support for WYSIWYG (Trix)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom filters:&lt;/strong&gt; widgets for filtering number &amp;amp; datetime values&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dashboard:&lt;/strong&gt; custom components for rapid dashboard development&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tabs:&lt;/strong&gt; define custom tab navigations for models&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Colors:&lt;/strong&gt; possibility to override default color scheme&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Third party packages:&lt;/strong&gt; default support for multiple popular applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Environment label&lt;/strong&gt;: distinguish between environments by displaying a label&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of contents &#xA; &lt;!-- omit from toc --&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#available-settingspy-options&#34;&gt;Available settings.py options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#available-unfoldadminmodeladmin-options&#34;&gt;Available unfold.admin.ModelAdmin options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#actions&#34;&gt;Actions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#actions-overview&#34;&gt;Actions overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#custom-unfold-action-decorator&#34;&gt;Custom unfold @action decorator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#action-handler-functions&#34;&gt;Action handler functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#action-examples&#34;&gt;Action examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#filters&#34;&gt;Filters&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#numeric-filters&#34;&gt;Numeric filters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#datetime-filters&#34;&gt;Date/time filters&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#display-decorator&#34;&gt;Display decorator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#third-party-packages&#34;&gt;Third party packages&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-celery-beat&#34;&gt;django-celery-beat&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-guardian&#34;&gt;django-guardian&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-import-export&#34;&gt;django-import-export&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-modeltranslation&#34;&gt;django-modeltranslation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-money&#34;&gt;django-money&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-simple-history&#34;&gt;django-simple-history&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#user-admin-form&#34;&gt;User Admin Form&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#adding-custom-styles-and-scripts&#34;&gt;Adding custom styles and scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#project-level-tailwind-stylesheet&#34;&gt;Project level Tailwind stylesheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#admin-dashboard&#34;&gt;Admin dashboard&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#overriding-template&#34;&gt;Overriding template&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#custom-variables&#34;&gt;Custom variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#unfold-components&#34;&gt;Unfold components&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#unfold-development&#34;&gt;Unfold development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#pre-commit&#34;&gt;Pre-commit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#poetry-configuration&#34;&gt;Poetry configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#compiling-tailwind&#34;&gt;Compiling Tailwind&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The installation process is minimal. Everything what is needed after installation is to put new application at the beginning of &lt;strong&gt;INSTALLED_APPS&lt;/strong&gt;. Default admin configuration in urls.py can stay as it is and there are no changes required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py&#xA;&#xA;INSTALLED_APPS = [&#xA;    &#34;unfold&#34;,  # before django.contrib.admin&#xA;    &#34;unfold.contrib.filters&#34;,  # optional, if special filters are needed&#xA;    &#34;unfold.contrib.forms&#34;,  # optional, if special form elements are needed&#xA;    &#34;unfold.contrib.import_export&#34;,  # optional, if django-import-export package is used&#xA;    &#34;unfold.contrib.guardian&#34;,  # optional, if django-guardian package is used&#xA;    &#34;unfold.contrib.simple_history&#34;,  # optional, if django-simple-history package is used&#xA;    &#34;django.contrib.admin&#34;,  # required&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you need installation command below are the versions for &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;poetry&lt;/code&gt; which needs to be executed in shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install django-unfold&#xA;poetry add django-unfold&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just for an example below is the minimal admin configuration in terms of adding Unfold into URL paths.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# urls.py&#xA;&#xA;from django.contrib import admin&#xA;from django.urls import path&#xA;&#xA;urlpatterns = [&#xA;    path(&#34;admin/&#34;, admin.site.urls),&#xA;    # Other URL paths&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installation, it is required that admin classes are going to inherit from custom &lt;code&gt;ModelAdmin&lt;/code&gt; available in &lt;code&gt;unfold.admin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.contrib import admin&#xA;from unfold.admin import ModelAdmin&#xA;&#xA;&#xA;@admin.register(MyModel)&#xA;class CustomAdminClass(ModelAdmin):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Registered admin models coming from third party packages are not going to properly work with Unfold because of parent class. By default, these models are registered by using &lt;code&gt;django.contrib.admin.ModelAdmin&lt;/code&gt; but it is needed to use &lt;code&gt;unfold.admin.ModelAdmin&lt;/code&gt;. Solution for this problem is to unregister model and then again register it back by using &lt;code&gt;unfold.admin.ModelAdmin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.contrib import admin&#xA;from django.contrib.auth.admin import UserAdmin as BaseUserAdmin&#xA;from django.contrib.auth.models import User&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;&#xA;&#xA;admin.site.unregister(User)&#xA;&#xA;&#xA;@admin.register(User)&#xA;class UserAdmin(BaseUserAdmin, ModelAdmin):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Available settings.py options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py&#xA;&#xA;from django.templatetags.static import static&#xA;from django.urls import reverse_lazy&#xA;from django.utils.translation import gettext_lazy as _&#xA;&#xA;UNFOLD = {&#xA;    &#34;SITE_TITLE&#34;: None,&#xA;    &#34;SITE_HEADER&#34;: None,&#xA;    &#34;SITE_URL&#34;: &#34;/&#34;,&#xA;    # &#34;SITE_ICON&#34;: lambda request: static(&#34;icon.svg&#34;),  # both modes, optimise for 32px height&#xA;    &#34;SITE_ICON&#34;: {&#xA;        &#34;light&#34;: lambda request: static(&#34;icon-light.svg&#34;),  # light mode&#xA;        &#34;dark&#34;: lambda request: static(&#34;icon-dark.svg&#34;),  # dark mode&#xA;    },&#xA;    # &#34;SITE_LOGO&#34;: lambda request: static(&#34;logo.svg&#34;),  # both modes, optimise for 32px height&#xA;    &#34;SITE_LOGO&#34;: {&#xA;        &#34;light&#34;: lambda request: static(&#34;logo-light.svg&#34;),  # light mode&#xA;        &#34;dark&#34;: lambda request: static(&#34;logo-dark.svg&#34;),  # dark mode&#xA;    },&#xA;    &#34;SITE_SYMBOL&#34;: &#34;speed&#34;,  # symbol from icon set&#xA;    &#34;SHOW_HISTORY&#34;: True, # show/hide &#34;History&#34; button, default: True&#xA;    &#34;SHOW_VIEW_ON_SITE&#34;: True, # show/hide &#34;View on site&#34; button, default: True&#xA;    &#34;ENVIRONMENT&#34;: &#34;sample_app.environment_callback&#34;,&#xA;    &#34;DASHBOARD_CALLBACK&#34;: &#34;sample_app.dashboard_callback&#34;,&#xA;    &#34;LOGIN&#34;: {&#xA;        &#34;image&#34;: lambda request: static(&#34;sample/login-bg.jpg&#34;),&#xA;        &#34;redirect_after&#34;: lambda request: reverse_lazy(&#34;admin:APP_MODEL_changelist&#34;),&#xA;    },&#xA;    &#34;STYLES&#34;: [&#xA;        lambda request: static(&#34;css/style.css&#34;),&#xA;    ],&#xA;    &#34;SCRIPTS&#34;: [&#xA;        lambda request: static(&#34;js/script.js&#34;),&#xA;    ],&#xA;    &#34;COLORS&#34;: {&#xA;        &#34;primary&#34;: {&#xA;            &#34;50&#34;: &#34;250 245 255&#34;,&#xA;            &#34;100&#34;: &#34;243 232 255&#34;,&#xA;            &#34;200&#34;: &#34;233 213 255&#34;,&#xA;            &#34;300&#34;: &#34;216 180 254&#34;,&#xA;            &#34;400&#34;: &#34;192 132 252&#34;,&#xA;            &#34;500&#34;: &#34;168 85 247&#34;,&#xA;            &#34;600&#34;: &#34;147 51 234&#34;,&#xA;            &#34;700&#34;: &#34;126 34 206&#34;,&#xA;            &#34;800&#34;: &#34;107 33 168&#34;,&#xA;            &#34;900&#34;: &#34;88 28 135&#34;,&#xA;            &#34;950&#34;: &#34;59 7 100&#34;,&#xA;        },&#xA;    },&#xA;    &#34;EXTENSIONS&#34;: {&#xA;        &#34;modeltranslation&#34;: {&#xA;            &#34;flags&#34;: {&#xA;                &#34;en&#34;: &#34;🇬🇧&#34;,&#xA;                &#34;fr&#34;: &#34;🇫🇷&#34;,&#xA;                &#34;nl&#34;: &#34;🇧🇪&#34;,&#xA;            },&#xA;        },&#xA;    },&#xA;    &#34;SIDEBAR&#34;: {&#xA;        &#34;show_search&#34;: False,  # Search in applications and models names&#xA;        &#34;show_all_applications&#34;: False,  # Dropdown with all applications and models&#xA;        &#34;navigation&#34;: [&#xA;            {&#xA;                &#34;title&#34;: _(&#34;Navigation&#34;),&#xA;                &#34;separator&#34;: True,  # Top border&#xA;                &#34;items&#34;: [&#xA;                    {&#xA;                        &#34;title&#34;: _(&#34;Dashboard&#34;),&#xA;                        &#34;icon&#34;: &#34;dashboard&#34;,  # Supported icon set: https://fonts.google.com/icons&#xA;                        &#34;link&#34;: reverse_lazy(&#34;admin:index&#34;),&#xA;                        &#34;badge&#34;: &#34;sample_app.badge_callback&#34;,&#xA;                        &#34;permission&#34;: lambda request: request.user.is_superuser,&#xA;                    },&#xA;                    {&#xA;                        &#34;title&#34;: _(&#34;Users&#34;),&#xA;                        &#34;icon&#34;: &#34;people&#34;,&#xA;                        &#34;link&#34;: reverse_lazy(&#34;admin:users_user_changelist&#34;),&#xA;                    },&#xA;                ],&#xA;            },&#xA;        ],&#xA;    },&#xA;    &#34;TABS&#34;: [&#xA;        {&#xA;            &#34;models&#34;: [&#xA;                &#34;app_label.model_name_in_lowercase&#34;,&#xA;            ],&#xA;            &#34;items&#34;: [&#xA;                {&#xA;                    &#34;title&#34;: _(&#34;Your custom title&#34;),&#xA;                    &#34;link&#34;: reverse_lazy(&#34;admin:app_label_model_name_changelist&#34;),&#xA;                    &#34;permission&#34;: &#34;sample_app.permission_callback&#34;,&#xA;                },&#xA;            ],&#xA;        },&#xA;    ],&#xA;}&#xA;&#xA;&#xA;def dashboard_callback(request, context):&#xA;    &#34;&#34;&#34;&#xA;    Callback to prepare custom variables for index template which is used as dashboard&#xA;    template. It can be overridden in application by creating custom admin/index.html.&#xA;    &#34;&#34;&#34;&#xA;    context.update(&#xA;        {&#xA;            &#34;sample&#34;: &#34;example&#34;,  # this will be injected into templates/admin/index.html&#xA;        }&#xA;    )&#xA;    return context&#xA;&#xA;&#xA;def environment_callback(request):&#xA;    &#34;&#34;&#34;&#xA;    Callback has to return a list of two values represeting text value and the color&#xA;    type of the label displayed in top right corner.&#xA;    &#34;&#34;&#34;&#xA;    return [&#34;Production&#34;, &#34;danger&#34;] # info, danger, warning, success&#xA;&#xA;&#xA;def badge_callback(request):&#xA;    return 3&#xA;&#xA;def permission_callback(request):&#xA;    return request.user.has_perm(&#34;sample_app.change_model&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available unfold.admin.ModelAdmin options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django import models&#xA;from django.contrib import admin&#xA;from django.db import models&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.contrib.forms.widgets import WysiwygWidget&#xA;&#xA;&#xA;@admin.register(MyModel)&#xA;class CustomAdminClass(ModelAdmin):&#xA;    # Preprocess content of readonly fields before render&#xA;    readonly_preprocess_fields = {&#xA;        &#34;model_field_name&#34;: &#34;html.unescape&#34;,&#xA;        &#34;other_field_name&#34;: lambda content: content.strip(),&#xA;    }&#xA;&#xA;    # Display submit button in filters&#xA;    list_filter_submit = False&#xA;&#xA;    # Custom actions&#xA;    actions_list = []  # Displayed above the results list&#xA;    actions_row = []  # Displayed in a table row in results list&#xA;    actions_detail = []  # Displayed at the top of for in object detail&#xA;    actions_submit_line = []  # Displayed near save in object detail&#xA;&#xA;    formfield_overrides = {&#xA;        models.TextField: {&#xA;            &#34;widget&#34;: WysiwygWidget,&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Actions&lt;/h2&gt; &#xA;&lt;p&gt;It is highly recommended to read the base &lt;a href=&#34;https://docs.djangoproject.com/en/4.2/ref/contrib/admin/actions/&#34;&gt;Django actions documentation&lt;/a&gt; before reading this section, since Unfold actions are derived from Django actions.&lt;/p&gt; &#xA;&lt;h3&gt;Actions overview&lt;/h3&gt; &#xA;&lt;p&gt;Besides traditional actions selected from dropdown, Unfold supports several other types of actions. Following table gives overview of all available actions together with their recommended usage:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type of action&lt;/th&gt; &#xA;   &lt;th&gt;Appearance&lt;/th&gt; &#xA;   &lt;th&gt;Usage&lt;/th&gt; &#xA;   &lt;th&gt;Examples of usage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Default&lt;/td&gt; &#xA;   &lt;td&gt;List view - top of listing (in dropdown)&lt;/td&gt; &#xA;   &lt;td&gt;Actions, where you want to select specific subset of instances to perform this action upon&lt;/td&gt; &#xA;   &lt;td&gt;Bulk deleting, bulk activation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;List view - top of listing (as buttons)&lt;/td&gt; &#xA;   &lt;td&gt;General actions for model, without selecting specific instances&lt;/td&gt; &#xA;   &lt;td&gt;Import, export&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Row&lt;/td&gt; &#xA;   &lt;td&gt;List view - in each row&lt;/td&gt; &#xA;   &lt;td&gt;Action for one specific instance, executable from listing&lt;/td&gt; &#xA;   &lt;td&gt;Activation, sync with external service&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Detail&lt;/td&gt; &#xA;   &lt;td&gt;Detail view - top of detail&lt;/td&gt; &#xA;   &lt;td&gt;Action for one specific instance, executable from detail&lt;/td&gt; &#xA;   &lt;td&gt;Activation, sync with external service&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Submit line&lt;/td&gt; &#xA;   &lt;td&gt;Detail view - near submit button&lt;/td&gt; &#xA;   &lt;td&gt;Action performed during form submit (instance save)&lt;/td&gt; &#xA;   &lt;td&gt;Publishing article together with save&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Custom unfold @action decorator&lt;/h3&gt; &#xA;&lt;p&gt;Unfold also uses custom &lt;code&gt;@action&lt;/code&gt; decorator, supporting 2 more parameters in comparison to base &lt;code&gt;@action&lt;/code&gt; decorator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;url_path&lt;/code&gt;: Action path name, used to override the path under which the action will be available (if not provided, URL path will be generated by Unfold)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;attrs&lt;/code&gt;: Dictionary of the additional attributes added to the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element, used for e.g. opening action in new tab (&lt;code&gt;{&#34;target&#34;: &#34;_blank&#34;}&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Action handler functions&lt;/h3&gt; &#xA;&lt;p&gt;This section provides explanation of how the action handler functions should be constructed for Unfold actions. For default actions, follow official Django admin documentation.&lt;/p&gt; &#xA;&lt;h4&gt;For submit row action &#xA; &lt;!-- omit from toc --&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Submit row actions work a bit differently when compared to other custom Unfold actions. These actions first invoke form save (same as if you hit &lt;code&gt;Save&lt;/code&gt; button) and then lets you perform additional logic on already saved instance.&lt;/p&gt; &#xA;&lt;h4&gt;For global, row and detail action &#xA; &lt;!-- omit from toc --&gt;&lt;/h4&gt; &#xA;&lt;p&gt;All these actions are based on custom URLs generated for each of them. Handler function for these views is basically function based view.&lt;/p&gt; &#xA;&lt;p&gt;For actions without intermediate steps, you can write all the logic inside handler directly. Request and object ID are both passed to these action handler functions, so you are free to fetch the instance from database and perform any operations with it. In the end, it is recommended to return redirect back to either detail or listing, based on where the action was triggered from.&lt;/p&gt; &#xA;&lt;p&gt;For actions with intermediate steps, it is recommended to use handler function only to redirect to custom URL with custom view. This view can be extended from base Unfold view, to have unified experience.&lt;/p&gt; &#xA;&lt;p&gt;If that&#39;s confusing, there are examples for both these actions in next section.&lt;/p&gt; &#xA;&lt;h3&gt;Action examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.db.models import Model&#xA;from django.contrib.admin import register&#xA;from django.shortcuts import redirect&#xA;from django.urls import reverse_lazy&#xA;from django.utils.translation import gettext_lazy as _&#xA;from django.http import HttpRequest&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.decorators import action&#xA;&#xA;&#xA;class User(Model):&#xA;    pass&#xA;&#xA;&#xA;@register(User)&#xA;class UserAdmin(ModelAdmin):&#xA;    actions_list = [&#34;changelist_global_action_import&#34;]&#xA;    actions_row = [&#34;changelist_row_action_view_on_website&#34;]&#xA;    actions_detail = [&#34;change_detail_action_block&#34;]&#xA;    actions_submit_line = [&#34;submit_line_action_activate&#34;]&#xA;&#xA;    @action(description=_(&#34;Save &amp;amp; Activate&#34;))&#xA;    def submit_line_action_activate(self, request: HttpRequest, obj: User):&#xA;        &#34;&#34;&#34;&#xA;        If instance is modified in any way, it also needs to be saved,&#xA;        since this handler is invoked after instance is saved.&#xA;        :param request:&#xA;        :param obj: Model instance that was manipulated, with changes already saved to database&#xA;        :return: None, this handler should not return anything&#xA;        &#34;&#34;&#34;&#xA;        obj.is_active = True&#xA;        obj.save()&#xA;&#xA;    @action(description=_(&#34;Import&#34;), url_path=&#34;import&#34;)&#xA;    def changelist_global_action_import(self, request: HttpRequest):&#xA;        &#34;&#34;&#34;&#xA;        Handler for global actions does not receive any queryset or object ids, because it is&#xA;        meant to be used for general actions for given model.&#xA;        :param request:&#xA;        :return: View, as described in section above&#xA;        &#34;&#34;&#34;&#xA;        # This is example of action redirecting to custom page, where the action will be handled&#xA;        # (with intermediate steps)&#xA;        return redirect(&#xA;          reverse_lazy(&#34;view-where-import-will-be-handled&#34;)&#xA;        )&#xA;&#xA;    @action(description=_(&#34;Row&#34;), url_path=&#34;row-action&#34;, attrs={&#34;target&#34;: &#34;_blank&#34;})&#xA;    def changelist_row_action_view_on_website(self, request: HttpRequest, object_id: int):&#xA;        &#34;&#34;&#34;&#xA;        Handler for list row action.&#xA;        :param request:&#xA;        :param object_id: ID of instance that this action was invoked for&#xA;        :return: View, as described in section above&#xA;        &#34;&#34;&#34;&#xA;        return redirect(f&#34;https://example.com/{object_id}&#34;)&#xA;&#xA;    @action(description=_(&#34;Detail&#34;), url_path=&#34;detail-action&#34;, attrs={&#34;target&#34;: &#34;_blank&#34;})&#xA;    def change_detail_action_block(self, request: HttpRequest, object_id: int):&#xA;        &#34;&#34;&#34;&#xA;        Handler for detail action.&#xA;        :param request:&#xA;        :param object_id: ID of instance that this action was invoked for&#xA;        :return: View, as described in section above&#xA;        &#34;&#34;&#34;&#xA;        # This is example of action that handled whole logic inside handler&#xA;        # function and redirects back to object detail&#xA;        user = User.objects.get(pk=object_id)&#xA;        user.block()&#xA;        return redirect(&#xA;            reverse_lazy(&#34;admin:users_user_change&#34;, args=(object_id,))&#xA;        )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Filters&lt;/h2&gt; &#xA;&lt;p&gt;By default, Django admin handles all filters as regular HTML links pointing at the same URL with different query parameters. This approach is for basic filtering more than enough. In the case of more advanced filtering by incorporating input fields, it is not going to work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; when implementing a filter which contains input fields, there is a no way that user can submit the values, because default filters does not contain submit button. To implement submit button, &lt;code&gt;unfold.admin.ModelAdmin&lt;/code&gt; contains boolean &lt;code&gt;list_filter_submit&lt;/code&gt; flag which enables submit button in filter form.&lt;/p&gt; &#xA;&lt;h3&gt;Numeric filters&lt;/h3&gt; &#xA;&lt;p&gt;Currently, Unfold implements numeric filters inside &lt;code&gt;unfold.contrib.filters&lt;/code&gt; application. In order to use these filters, it is required to add this application into &lt;code&gt;INSTALLED_APPS&lt;/code&gt; in &lt;code&gt;settings.py&lt;/code&gt; right after &lt;code&gt;unfold&lt;/code&gt; application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.contrib import admin&#xA;from django.contrib.auth.models import User&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.contrib.filters.admin import (&#xA;    RangeNumericListFilter,&#xA;    RangeNumericFilter,&#xA;    SingleNumericFilter,&#xA;    SliderNumericFilter,&#xA;)&#xA;&#xA;&#xA;class CustomSliderNumericFilter(SliderNumericFilter):&#xA;    MAX_DECIMALS = 2&#xA;    STEP = 10&#xA;&#xA;&#xA;class CustomRangeNumericListFilter(RangeNumericListFilter):&#xA;    parameter_name = &#34;items_count&#34;&#xA;    title = &#34;items&#34;&#xA;&#xA;&#xA;@admin.register(User)&#xA;class YourModelAdmin(ModelAdmin):&#xA;    list_filter_submit = True  # Submit button at the bottom of the filter&#xA;    list_filter = (&#xA;        (&#34;field_A&#34;, SingleNumericFilter),  # Numeric single field search, __gte lookup&#xA;        (&#34;field_B&#34;, RangeNumericFilter),  # Numeric range search, __gte and __lte lookup&#xA;        (&#34;field_C&#34;, SliderNumericFilter),  # Numeric range filter but with slider&#xA;        (&#34;field_D&#34;, CustomSliderNumericFilter),  # Numeric filter with custom attributes&#xA;        CustomRangeNumericListFilter,  # Numeric range search not restricted to a model field&#xA;    )&#xA;&#xA;    def get_queryset(self, request):&#xA;        return super().get_queryset().annotate(items_count=Count(&#34;item&#34;, distinct=True))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Date/time filters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.contrib import admin&#xA;from django.contrib.auth.models import User&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.contrib.filters.admin import (&#xA;    RangeDateFilter,&#xA;    RangeDateTimeFilter,&#xA;)&#xA;&#xA;&#xA;@admin.register(User)&#xA;class YourModelAdmin(ModelAdmin):&#xA;    list_filter_submit = True  # Submit button at the bottom of the filter&#xA;    list_filter = (&#xA;        (&#34;field_E&#34;, RangeDateFilter),  # Date filter&#xA;        (&#34;field_F&#34;, RangeDateTimeFilter),  # Datetime filter&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Display decorator&lt;/h2&gt; &#xA;&lt;p&gt;Unfold introduces it&#39;s own &lt;code&gt;unfold.decorators.display&lt;/code&gt; decorator. By default it has exactly same behavior as native &lt;code&gt;django.contrib.admin.decorators.display&lt;/code&gt; but it adds same customizations which helps to extends default logic.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;@display(label=True)&lt;/code&gt;, &lt;code&gt;@display(label={&#34;value1&#34;: &#34;success&#34;})&lt;/code&gt; displays a result as a label. This option fits for different types of statuses. Label can be either boolean indicating we want to use label with default color or dict where the dict is responsible for displaying labels in different colors. At the moment these color combinations are supported: success(green), info(blue), danger(red) and warning(orange).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;@display(header=True)&lt;/code&gt; displays in results list two information in one table cell. Good example is when we want to display customer information, first line is going to be customer&#39;s name and right below the name display corresponding email address. Method with such a decorator is supposed to return a list with two elements &lt;code&gt;return &#34;Full name&#34;, &#34;E-mail address&#34;&lt;/code&gt;. There is a third optional argument, which is type of the string and its value is displayed in a circle before first two values on the front end. Its optimal usage is for displaying initials.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.db.models import TextChoices&#xA;from django.utils.translation import gettext_lazy as _&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.decorators import display&#xA;&#xA;&#xA;class UserStatus(TextChoices):&#xA;    ACTIVE = &#34;ACTIVE&#34;, _(&#34;Active&#34;)&#xA;    PENDING = &#34;PENDING&#34;, _(&#34;Pending&#34;)&#xA;    INACTIVE = &#34;INACTIVE&#34;, _(&#34;Inactive&#34;)&#xA;    CANCELLED = &#34;CANCELLED&#34;, _(&#34;Cancelled&#34;)&#xA;&#xA;&#xA;class UserAdmin(ModelAdmin):&#xA;    list_display = [&#xA;        &#34;display_as_two_line_heading&#34;,&#xA;        &#34;show_status&#34;,&#xA;        &#34;show_status_with_custom_label&#34;,&#xA;    ]&#xA;&#xA;    @display(&#xA;        description=_(&#34;Status&#34;),&#xA;        ordering=&#34;status&#34;,&#xA;        label=True&#xA;    )&#xA;    def show_status_default_color(self, obj):&#xA;        return obj.status&#xA;&#xA;    @display(&#xA;        description=_(&#34;Status&#34;),&#xA;        ordering=&#34;status&#34;,&#xA;        label={&#xA;            UserStatus.ACTIVE: &#34;success&#34;,  # green&#xA;            UserStatus.PENDING: &#34;info&#34;,  # blue&#xA;            UserStatus.INACTIVE: &#34;warning&#34;,  # orange&#xA;            UserStatus.CANCELLED: &#34;danger&#34;,  # red&#xA;        },&#xA;    )&#xA;    def show_status_customized_color(self, obj):&#xA;        return obj.status&#xA;&#xA;    @display(description=_(&#34;Status with label&#34;), ordering=&#34;status&#34;, label=True)&#xA;    def show_status_with_custom_label(self, obj):&#xA;        return obj.status, obj.get_status_display()&#xA;&#xA;    @display(header=True)&#xA;    def display_as_two_line_heading(self, obj):&#xA;        &#34;&#34;&#34;&#xA;        Third argument is short text which will appear as prefix in circle&#xA;        &#34;&#34;&#34;&#xA;        return &#34;First main heading&#34;, &#34;Smaller additional description&#34;, &#34;AB&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Third party packages&lt;/h2&gt; &#xA;&lt;h3&gt;django-celery-beat&lt;/h3&gt; &#xA;&lt;p&gt;In general, django-celery-beat does not have any components that require special styling. The default changelist templates are not inheriting from Unfold&#39;s &lt;code&gt;ModelAdmin&lt;/code&gt; but they are using default &lt;code&gt;ModelAdmin&lt;/code&gt; coming from &lt;code&gt;django.contrib.admin&lt;/code&gt; which is causing some design discrepancies in the changelist.&lt;/p&gt; &#xA;&lt;p&gt;In the source code below you can find a short code snippet to unregister all &lt;code&gt;django-celery-beat&lt;/code&gt; admin classes and register them with the proper parent &lt;code&gt;ModelAdmin&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;from django.contrib import admin&#xA;from unfold.admin import ModelAdmin&#xA;&#xA;from django_celery_beat.models import (&#xA;    ClockedSchedule,&#xA;    CrontabSchedule,&#xA;    IntervalSchedule,&#xA;    PeriodicTask,&#xA;    SolarSchedule,&#xA;)&#xA;&#xA;&#xA;admin.site.unregister(PeriodicTask)&#xA;admin.site.unregister(IntervalSchedule)&#xA;admin.site.unregister(CrontabSchedule)&#xA;admin.site.unregister(SolarSchedule)&#xA;admin.site.unregister(ClockedSchedule)&#xA;&#xA;@admin.register(PeriodicTask)&#xA;class PeriodicTaskAdmin(ModelAdmin):&#xA;    pass&#xA;&#xA;&#xA;@admin.register(IntervalSchedule)&#xA;class IntervalScheduleAdmin(ModelAdmin):&#xA;    pass&#xA;&#xA;&#xA;@admin.register(CrontabSchedule)&#xA;class CrontabScheduleAdmin(ModelAdmin):&#xA;    pass&#xA;&#xA;&#xA;@admin.register(SolarSchedule)&#xA;class SolarScheduleAdmin(ModelAdmin):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;django-guardian&lt;/h3&gt; &#xA;&lt;p&gt;Adding support for django-guardian is quote straightforward in Unfold, just add &lt;code&gt;unfold.contrib.guardian&lt;/code&gt; to &lt;code&gt;INSTALLED_APPS&lt;/code&gt; at the beggining of the file. This action will override all templates coming from the django-guardian. Please note that &lt;strong&gt;Object permissions&lt;/strong&gt; link is available in top right dropdown navigation.&lt;/p&gt; &#xA;&lt;h3&gt;django-import-export&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;unfold.contrib.import_export&lt;/code&gt; to &lt;code&gt;INSTALLED_APPS&lt;/code&gt; at the beggining of the file. This action will override all templates coming from the application.&lt;/li&gt; &#xA; &lt;li&gt;Change &lt;code&gt;import_form_class&lt;/code&gt; and &lt;code&gt;export_form_class&lt;/code&gt; in ModelAdmin which is inheriting from &lt;code&gt;ImportExportModelAdmin&lt;/code&gt;. This chunk of code is responsible for adding proper styling to form elements.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.contrib.import_export.forms import ExportForm, ImportForm&#xA;&#xA;class ExampleAdmin(ModelAdmin, ImportExportModelAdmin):&#xA;    import_form_class = ImportForm&#xA;    export_form_class = ExportForm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;django-modeltranslation&lt;/h3&gt; &#xA;&lt;p&gt;By default Unfold does not contain any specific implementation for django-modeltranslation and the application is partially supported. Basic behavior is supported except of tab navigation provided by django-modeltranslation. At the moment there are no plans in supporting this behavior.&lt;/p&gt; &#xA;&lt;p&gt;For django-modeltranslation fields for spefic languages, it is possible to define custom flags which will appear as a suffix in field&#39;s label. It is recommended to use emojis as suffix.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py&#xA;&#xA;UNFOLD = {&#xA;    &#34;EXTENSIONS&#34;: {&#xA;        &#34;modeltranslation&#34;: {&#xA;            &#34;flags&#34;: {&#xA;                &#34;en&#34;: &#34;🇬🇧&#34;,&#xA;                &#34;fr&#34;: &#34;🇫🇷&#34;,&#xA;                &#34;nl&#34;: &#34;🇧🇪&#34;,&#xA;            },&#xA;        },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;django-money&lt;/h3&gt; &#xA;&lt;p&gt;This application is supported in Unfold by default. It is not needed to add any other applications into &lt;code&gt;INSTALLED_APPS&lt;/code&gt;. Unfold is recognizing special form widget coming from django-money and applying specific styling.&lt;/p&gt; &#xA;&lt;h3&gt;django-simple-history&lt;/h3&gt; &#xA;&lt;p&gt;To make this application work, add &lt;code&gt;unfold.contrib.simple_history&lt;/code&gt; into &lt;code&gt;settings.py&lt;/code&gt; in &lt;code&gt;INSTALLED_APPS&lt;/code&gt; variable before right after &lt;code&gt;unfold&lt;/code&gt;. This app should ensure that templates coming from django-simple-history are overriden by Unfold.&lt;/p&gt; &#xA;&lt;h2&gt;User Admin Form&lt;/h2&gt; &#xA;&lt;p&gt;User&#39;s admin in Django is specific as it contains several forms which are requiring custom styling. All of these forms has been inherited and accordingly adjusted. In user admin class it is needed to use these inherited form classes to enable custom styling matching rest of the website.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# models.py&#xA;&#xA;from django.contrib.admin import register&#xA;from django.contrib.auth.models import User&#xA;from django.contrib.auth.admin import UserAdmin as BaseUserAdmin&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.forms import AdminPasswordChangeForm, UserChangeForm, UserCreationForm&#xA;&#xA;&#xA;@register(User)&#xA;class UserAdmin(BaseUserAdmin, ModelAdmin):&#xA;    form = UserChangeForm&#xA;    add_form = UserCreationForm&#xA;    change_password_form = AdminPasswordChangeForm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding custom styles and scripts&lt;/h2&gt; &#xA;&lt;p&gt;To add new custom styles, for example for custom dashboard, it is possible to load them via &lt;strong&gt;STYLES&lt;/strong&gt; key in &lt;strong&gt;UNFOLD&lt;/strong&gt; dict. This key accepts a list of strings or lambda functions which will be loaded on all pages. JavaScript files can be loaded by using similar apprach, but &lt;strong&gt;SCRIPTS&lt;/strong&gt; is used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py&#xA;&#xA;from django.templatetags.static import static&#xA;&#xA;UNFOLD = {&#xA;    &#34;STYLES&#34;: [&#xA;        lambda request: static(&#34;css/style.css&#34;),&#xA;    ],&#xA;    &#34;SCRIPTS&#34;: [&#xA;        lambda request: static(&#34;js/script.js&#34;),&#xA;    ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project level Tailwind stylesheet&lt;/h2&gt; &#xA;&lt;p&gt;When creating custom dashboard or adding custom components, it is needed to add own styles. Adding custom styles is described above. Most of the time, it is supposed that new elements are going to match with the rest of the administration panel. First of all, create tailwind.config.js in your application. Below is located minimal configuration for this file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// tailwind.config.js&#xA;&#xA;module.exports = {&#xA;  content: [&#34;./your_project/**/*.{html,py,js}&#34;],&#xA;  // In case custom colors are defined in UNFOLD[&#34;COLORS&#34;]&#xA;  colors: {&#xA;    primary: {&#xA;      50: &#34;rgb(var(--color-primary-50) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      100: &#34;rgb(var(--color-primary-100) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      200: &#34;rgb(var(--color-primary-200) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      300: &#34;rgb(var(--color-primary-300) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      400: &#34;rgb(var(--color-primary-400) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      500: &#34;rgb(var(--color-primary-500) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      600: &#34;rgb(var(--color-primary-600) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      700: &#34;rgb(var(--color-primary-700) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      800: &#34;rgb(var(--color-primary-800) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      900: &#34;rgb(var(--color-primary-900) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      950: &#34;rgb(var(--color-primary-950) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;    },&#xA;  },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the configuration file is set, it is possible to compile new styles which can be loaded into admin by using &lt;strong&gt;STYLES&lt;/strong&gt; key in &lt;strong&gt;UNFOLD&lt;/strong&gt; dict.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx tailwindcss -o your_project/static/css/styles.css --watch --minify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Admin dashboard&lt;/h2&gt; &#xA;&lt;h3&gt;Overriding template&lt;/h3&gt; &#xA;&lt;p&gt;Create &lt;code&gt;templates/admin/index.html&lt;/code&gt; in your project and paste the base template below into it. By default, all your custom styles here are not compiled because CSS classes are located in your specific project. Here it is needed to set up the Tailwind for your project and all requried instructions are located in &lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#project-level-tailwind-stylesheet&#34;&gt;Project Level Tailwind Stylesheet&lt;/a&gt; chapter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html+django&#34;&gt;{% extends &#39;unfold/layouts/base_simple.html&#39; %}&#xA;&#xA;{% load cache humanize i18n %}&#xA;&#xA;{% block breadcrumbs %}{% endblock %}&#xA;&#xA;{% block title %}&#xA;    {% if subtitle %}&#xA;        {{ subtitle }} |&#xA;    {% endif %}&#xA;&#xA;    {{ title }} | {{ site_title|default:_(&#39;Django site admin&#39;) }}&#xA;{% endblock %}&#xA;&#xA;{% block branding %}&#xA;    &amp;lt;h1 id=&#34;site-name&#34;&amp;gt;&#xA;        &amp;lt;a href=&#34;{% url &#39;admin:index&#39; %}&#34;&amp;gt;&#xA;            {{ site_header|default:_(&#39;Django administration&#39;) }}&#xA;        &amp;lt;/a&amp;gt;&#xA;    &amp;lt;/h1&amp;gt;&#xA;{% endblock %}&#xA;&#xA;{% block content %}&#xA;    Start creating your own Tailwind components here&#xA;{% endblock %}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom variables&lt;/h3&gt; &#xA;&lt;p&gt;When you are building a new dashboard, you need to display some data mostly coming from the database. To pass these data to the dashboard template, Unfold contains a special &lt;code&gt;DASHBOARD_CALLBACK&lt;/code&gt; parameter which allows passing a dictionary of variables to &lt;code&gt;templates/admin/index.html&lt;/code&gt; template.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# views.py&#xA;&#xA;def dashboard_callback(request, context):&#xA;    context.update({&#xA;        &#34;custom_variable&#34;: &#34;value&#34;,&#xA;    })&#xA;&#xA;    return context&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py&#xA;&#xA;UNFOLD = {&#xA;    &#34;DASHBOARD_CALLBACK&#34;: &#34;app.views.dashboard_callback&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unfold components&lt;/h3&gt; &#xA;&lt;p&gt;Unfold provides a set of already predefined templates to speed up overall dashboard development. These templates contain predefined design which matches global design style so there is no need to spend any time adjusting styles.&lt;/p&gt; &#xA;&lt;p&gt;The biggest benefit of Unfold components is the possibility to nest them inside one template file provides an unlimited amount of possible combinations. Then each component includes &lt;code&gt;children&lt;/code&gt; variable which contains a value specified in the parent component. Except for &lt;code&gt;children&lt;/code&gt; variable, components can have multiple variables coming from the parent template as component variables. These parameters can be specified in the same as parameters when using &lt;code&gt;{% include with param1=value1 param2=value2 %}&lt;/code&gt; template tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html+django&#34;&gt;{% component &#34;unfold/components/flex.html&#34; with col=1 %}&#xA;    {% component &#34;unfold/components/card.html&#34; %}&#xA;        {% component &#34;unfold/components/title.html&#34; %}&#xA;            Card Title&#xA;        {% endcomponent %}&#xA;    {% endcomponent %}&#xA;{% endcompontent %}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below you can find a more complex example which is using multiple components and processing them based on the passed variables from the &lt;code&gt;DASHBOARD_CALLBACK&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html+django&#34;&gt;{% load i18n %}&#xA;&#xA;{% block content %}&#xA;    {% component &#34;unfold/components/container.html&#34; %}&#xA;        {% component &#34;unfold/components/flex.html&#34; with class=&#34;gap-4&#34;%}&#xA;            {% component &#34;unfold/components/navigation.html&#34; with items=navigation %}&#xA;            {% endcomponent %}&#xA;&#xA;            {% component &#34;unfold/components/navigation.html&#34; with class=&#34;ml-auto&#34; items=filters %}&#xA;            {% endcomponent %}&#xA;        {% endcomponent %}&#xA;&#xA;        {% component &#34;unfold/components/flex.html&#34; with class=&#34;gap-8 mb-8 flex-col lg:flex-row&#34; %}&#xA;            {% for card in cards %}&#xA;                {% trans &#34;Last 7 days&#34; as label %}&#xA;                {% component &#34;unfold/components/card.html&#34; with class=&#34;lg:w-1/3&#34; %}&#xA;                    {% component &#34;unfold/components/text.html&#34; %}&#xA;                        {{ card.title }}&#xA;                    {% endcomponent %}&#xA;&#xA;                    {% component &#34;unfold/components/title.html&#34; %}&#xA;                        {{ card.metric }}&#xA;                    {% endcomponent %}&#xA;                {% endcomponent %}&#xA;            {% endfor %}&#xA;        {% endcomponent %}&#xA;    {% endcomponent %}&#xA;{% endblock %}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;List of available components &#xA; &lt;!-- omit from toc --&gt;&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Arguments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/chart/bar.html&lt;/td&gt; &#xA;   &lt;td&gt;Bar chart implementation&lt;/td&gt; &#xA;   &lt;td&gt;class, data, height, width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/chart/line.html&lt;/td&gt; &#xA;   &lt;td&gt;Line chart implementation&lt;/td&gt; &#xA;   &lt;td&gt;class, data, height, width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/card.html&lt;/td&gt; &#xA;   &lt;td&gt;Card component&lt;/td&gt; &#xA;   &lt;td&gt;class, title, footer, label&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/container.html&lt;/td&gt; &#xA;   &lt;td&gt;Wrapper for settings max width&lt;/td&gt; &#xA;   &lt;td&gt;class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/flex.html&lt;/td&gt; &#xA;   &lt;td&gt;Flex items&lt;/td&gt; &#xA;   &lt;td&gt;class, col&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/navigation.html&lt;/td&gt; &#xA;   &lt;td&gt;List of navigation links&lt;/td&gt; &#xA;   &lt;td&gt;class, items&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/progress.html&lt;/td&gt; &#xA;   &lt;td&gt;Percentual progress bar&lt;/td&gt; &#xA;   &lt;td&gt;class, value, title, description&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/separator.html&lt;/td&gt; &#xA;   &lt;td&gt;Separator, horizontal rule&lt;/td&gt; &#xA;   &lt;td&gt;class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/text.html&lt;/td&gt; &#xA;   &lt;td&gt;Paragraph of text&lt;/td&gt; &#xA;   &lt;td&gt;class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/title.html&lt;/td&gt; &#xA;   &lt;td&gt;Basic heading element&lt;/td&gt; &#xA;   &lt;td&gt;class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Unfold development&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;Before adding any source code, it is recommended to have pre-commit installed on your local computer to check for all potential issues when comitting the code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pre-commit&#xA;pre-commit install&#xA;pre-commit install --hook-type commit-msg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Poetry configuration&lt;/h3&gt; &#xA;&lt;p&gt;To add a new feature or fix the easiest approach is to use django-unfold in combination with Poetry. The process looks like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install django-unfold via &lt;code&gt;poetry add django-unfold&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;After that it is needed to git clone the repository somewhere on local computer.&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;em&gt;pyproject.toml&lt;/em&gt; and update django-unfold line &lt;code&gt;django-unfold = { path = &#34;../django-unfold&#34;, develop = true}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lock and update via &lt;code&gt;poetry lock &amp;amp;&amp;amp; poetry update&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compiling Tailwind&lt;/h3&gt; &#xA;&lt;p&gt;At the moment project contains package.json with all dependencies required to compile new CSS file. Tailwind configuration file is set to check all html, js and py files for Tailwind&#39;s classeses occurrences.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npx tailwindcss -i src/unfold/styles.css -o src/unfold/static/unfold/css/styles.css --watch --minify&#xA;&#xA;npm run tailwind:watch # run after each change in code&#xA;npm run tailwind:build # run once&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some components like datepickers, calendars or selectors in admin was not possible to style by overriding html templates so their default styles are overriden in &lt;strong&gt;styles.css&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; most of the custom styles located in style.css are created via &lt;code&gt;@apply some-tailwind-class;&lt;/code&gt; as is not possible to manually add CSS class to element which are for example created via jQuery.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;TailwindCSS&lt;/a&gt; - CSS framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://htmx.org/&#34;&gt;HTMX&lt;/a&gt; - AJAX communication with backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fonts.google.com/icons&#34;&gt;Material Icons&lt;/a&gt; - Icons from Google Fonts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trix-editor.org/&#34;&gt;Trix&lt;/a&gt; - WYSIWYG editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alpinejs.dev/&#34;&gt;Alpine.js&lt;/a&gt; - JavaScript interactions&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hehonghui/awesome-english-ebooks</title>
    <updated>2023-12-03T01:34:53Z</updated>
    <id>tag:github.com,2023-12-03:/hehonghui/awesome-english-ebooks</id>
    <link href="https://github.com/hehonghui/awesome-english-ebooks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;经济学人(含音频)、纽约客、卫报、连线、大西洋月刊等英语杂志免费下载,支持epub、mobi、pdf格式, 每周更新&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;经济学人、纽约客等英语外刊杂志下载&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;一、优质App推荐&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img align=&#34;center&#34; src=&#34;https://ereader.link/images/ereader.png&#34; width=&#34;32px&#34;&gt; 英阅阅读器 - 超好用的英语阅读神器, &lt;font color=&#34;#e3120b&#34;&gt;让您轻松读懂英文小说、外刊杂志&lt;/font&gt;,支持点击查词、句子翻译、mdict英汉-英英词典、阅读笔记等功能,&lt;a href=&#34;https://apps.apple.com/cn/app/ereader-%E8%8B%B1%E9%98%85%E9%98%85%E8%AF%BB%E5%99%A8/id1558805880&#34;&gt;iOS版下载&lt;/a&gt;、&lt;a href=&#34;https://www.coolapk.com/apk/283424&#34;&gt;Android版下载&lt;/a&gt;;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;二、内容分类&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hehonghui/awesome-english-ebooks/master/01_economist/te_2023.12.02&#34;&gt;经济学人 - 周刊, 点击这里下载最新一期&lt;/a&gt; , 每周五十一点更新&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hehonghui/awesome-english-ebooks/master/02_new_yorker/2023.12.04&#34;&gt;纽约客 - 周刊, 点击这里下载最新一期&lt;/a&gt; , 每周六上午更新&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hehonghui/awesome-english-ebooks/master/09_guardian/&#34;&gt;卫报 - 每周两期&lt;/a&gt;, 每周三、周日更新&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hehonghui/awesome-english-ebooks/master/04_atlantic&#34;&gt;The Atlantic - 月刊&lt;/a&gt;, 每月2号更新&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hehonghui/awesome-english-ebooks/master/05_wired&#34;&gt;Wired - 月刊&lt;/a&gt;, 每月2号更新&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;如何选择杂志 ? 请参考下面两篇文章&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25051680&#34;&gt;考研英语题源分析，看看题目来自于哪里&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/54181221&#34;&gt;2018英语外刊大合集&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;三、其他阅读器&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;epub 格式的电子书可以安装 &lt;a href=&#34;https://www.duokan.com/product&#34;&gt;多看阅读&lt;/a&gt; , 通过 &lt;code&gt;wifi传书功能&lt;/code&gt; 通过浏览器将电子书传入到阅读器中, 然后就可以进行阅读;&lt;/li&gt; &#xA; &lt;li&gt;mobi 格式的电子书需要使用 &lt;code&gt;kindle设备&lt;/code&gt; 或者在电脑、手机上安装 &lt;a href=&#34;https://www.amazon.cn/kindle-dbs/fd/kcp/ref=sv_kinc_0&#34;&gt;kindle 阅读app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>