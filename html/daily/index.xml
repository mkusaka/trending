<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-15T01:36:23Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Unstructured-IO/unstructured</title>
    <updated>2023-02-15T01:36:23Z</updated>
    <id>tag:github.com,2023-02-15:/Unstructured-IO/unstructured</id>
    <link href="https://github.com/Unstructured-IO/unstructured" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source libraries and APIs to build custom preprocessing pipelines for labeling, training, or production machine learning pipelines.&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Unstructured-IO/unstructured/main/img/unstructured_logo.png&#34; height=&#34;200&#34;&gt; &lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Unstructured-IO/unstructured/raw/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/unstructured.svg?sanitize=true&#34; alt=&#34;https://pypi.python.org/pypi/unstructured/&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/unstructured/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/unstructured.svg?sanitize=true&#34; alt=&#34;https://pypi.python.org/pypi/unstructured/&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/unstructured-io/unstructured/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/unstructured-io/unstructured&#34; alt=&#34;https://GitHub.com/unstructured-io/unstructured.js/graphs/contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Unstructured-IO/unstructured/raw/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true&#34; alt=&#34;code_of_conduct.md&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://GitHub.com/unstructured-io/unstructured/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/unstructured-io/unstructured&#34; alt=&#34;https://GitHub.com/unstructured-io/unstructured.js/releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/unstructured/&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/Open%20Source%20%3F/Yes%21/blue?icon=github&#34; alt=&#34;https://github.com/Naereen/badges/&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://join.slack.com/t/unstructuredw-kbe4326/shared_invite/zt-1nlh1ot5d-dfY7zCRlhFboZrIWLA4Qgw&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/JOIN US ON SLACK-4A154B?style=for-the-badge&amp;amp;logo=slack&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/unstructuredio/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/38184042/205945013-99670127-0bf3-4851-b4ac-0bc23e357476.gif&#34; title=&#34;unstructured in action!&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;p&gt;Open-Source Pre-Processing Tools for Unstructured Data&lt;/p&gt; &lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;unstructured&lt;/code&gt; library provides open-source components for pre-processing text documents such as &lt;strong&gt;PDFs&lt;/strong&gt;, &lt;strong&gt;HTML&lt;/strong&gt; and &lt;strong&gt;Word&lt;/strong&gt; Documents. These components are packaged as &lt;em&gt;bricks&lt;/em&gt; üß±, which provide users the building blocks they need to build pipelines targeted at the documents they care about. Bricks in the library fall into three categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;üß©&lt;/span&gt; &lt;em&gt;&lt;strong&gt;Partitioning bricks&lt;/strong&gt;&lt;/em&gt; that break raw documents down into standard, structured elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üßπ&lt;/span&gt; &lt;em&gt;&lt;strong&gt;Cleaning bricks&lt;/strong&gt;&lt;/em&gt; that remove unwanted text from documents, such as boilerplate and sentence fragments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üé≠&lt;/span&gt; &lt;em&gt;&lt;strong&gt;Staging bricks&lt;/strong&gt;&lt;/em&gt; that format data for downstream tasks, such as ML inference and data labeling. &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ú¥&lt;/span&gt; Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the library, run &lt;code&gt;pip install unstructured&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚òï&lt;/span&gt; Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;pyenv&lt;/code&gt; to manage virtualenv&#39;s is recommended but not necessary&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mac install instructions. See &lt;a href=&#34;https://github.com/Unstructured-IO/community#mac--homebrew&#34;&gt;here&lt;/a&gt; for more detailed instructions. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;brew install pyenv-virtualenv&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;pyenv install 3.8.15&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Linux instructions are available &lt;a href=&#34;https://github.com/Unstructured-IO/community#linux&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a virtualenv to work in and activate it, e.g. for one named &lt;code&gt;unstructured&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;code&gt;pyenv virtualenv 3.8.15 unstructured&lt;/code&gt; &lt;br&gt; &lt;code&gt;pyenv activate unstructured&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To install models and dependencies for processing images and PDFs locally, run &lt;code&gt;make install-local-inference&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;For processing image files, &lt;code&gt;tesseract&lt;/code&gt; is required. See &lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/Installation.html&#34;&gt;here&lt;/a&gt; for installation instructions.&lt;/li&gt; &#xA;   &lt;li&gt;For processing PDF files, &lt;code&gt;tesseract&lt;/code&gt; and &lt;code&gt;poppler&lt;/code&gt; are required. The &lt;a href=&#34;https://pdf2image.readthedocs.io/en/latest/installation.html&#34;&gt;pdf2image docs&lt;/a&gt; have instructions on installing &lt;code&gt;poppler&lt;/code&gt; across various platforms.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üëè&lt;/span&gt; Quick Tour&lt;/h2&gt; &#xA;&lt;p&gt;You can run this &lt;a href=&#34;https://colab.research.google.com/drive/1U8VCjY2-x8c6y5TYMbSFtQGlQVFHCVIW&#34;&gt;Colab notebook&lt;/a&gt; to run the examples below.&lt;/p&gt; &#xA;&lt;p&gt;The following examples show how to get started with the &lt;code&gt;unstructured&lt;/code&gt; library. You can parse &lt;strong&gt;TXT&lt;/strong&gt;, &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;PDF&lt;/strong&gt;, &lt;strong&gt;EML&lt;/strong&gt; and &lt;strong&gt;DOCX&lt;/strong&gt; documents with one line of code! &lt;br&gt;&lt;br&gt; See our &lt;a href=&#34;https://unstructured-io.github.io/unstructured&#34;&gt;documentation page&lt;/a&gt; for a full description of the features in the library.&lt;/p&gt; &#xA;&lt;h3&gt;Document Parsing&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to parse a document in unstructured is to use the &lt;code&gt;partition&lt;/code&gt; brick. If you use &lt;code&gt;partition&lt;/code&gt; brick, &lt;code&gt;unstructured&lt;/code&gt; will detect the file type and route it to the appropriate file-specific partitioning brick. If you are using the &lt;code&gt;partition&lt;/code&gt; brick, ensure you first install &lt;code&gt;libmagic&lt;/code&gt; using the instructions outlined &lt;a href=&#34;https://unstructured-io.github.io/unstructured/installing.html#filetype-detection&#34;&gt;here&lt;/a&gt; &lt;code&gt;partition&lt;/code&gt; will always apply the default arguments. If you need advanced features, use a document-specific brick. The &lt;code&gt;partition&lt;/code&gt; brick currently works for &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.docx&lt;/code&gt;, &lt;code&gt;.pptx&lt;/code&gt;, &lt;code&gt;.jpg&lt;/code&gt;, &lt;code&gt;.png&lt;/code&gt;, &lt;code&gt;.eml&lt;/code&gt;, &lt;code&gt;.html&lt;/code&gt;, and &lt;code&gt;.pdf&lt;/code&gt; documents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from unstructured.partition.auto import partition&#xA;&#xA;elements = partition(&#34;example-docs/layout-parser-paper.pdf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;print(&#34;\n\n&#34;.join([str(el) for el in elements]))&lt;/code&gt; to get a string representation of the output, which looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;LayoutParser : A UniÔ¨Åed Toolkit for Deep Learning Based Document Image Analysis&#xA;&#xA;Zejiang Shen 1 ( (cid:0) ), Ruochen Zhang 2 , Melissa Dell 3 , Benjamin Charles Germain Lee 4 , Jacob Carlson 3 , and&#xA;Weining Li 5&#xA;&#xA;Abstract. Recent advances in document image analysis (DIA) have been primarily driven by the application of neural&#xA;networks. Ideally, research outcomes could be easily deployed in production and extended for further investigation.&#xA;However, various factors like loosely organized codebases and sophisticated model conÔ¨Ågurations complicate the easy&#xA;reuse of im- portant innovations by a wide audience. Though there have been on-going eÔ¨Äorts to improve reusability and&#xA;simplify deep learning (DL) model development in disciplines like natural language processing and computer vision, none&#xA;of them are optimized for challenges in the domain of DIA. This represents a major gap in the existing toolkit, as DIA&#xA;is central to academic research across a wide range of disciplines in the social sciences and humanities. This paper&#xA;introduces LayoutParser , an open-source library for streamlining the usage of DL in DIA research and applica- tions.&#xA;The core LayoutParser library comes with a set of simple and intuitive interfaces for applying and customizing DL models&#xA;for layout de- tection, character recognition, and many other document processing tasks. To promote extensibility,&#xA;LayoutParser also incorporates a community platform for sharing both pre-trained models and full document digiti- zation&#xA;pipelines. We demonstrate that LayoutParser is helpful for both lightweight and large-scale digitization pipelines in&#xA;real-word use cases. The library is publicly available at https://layout-parser.github.io&#xA;&#xA;Keywords: Document Image Analysis ¬∑ Deep Learning ¬∑ Layout Analysis ¬∑ Character Recognition ¬∑ Open Source library ¬∑&#xA;Toolkit.&#xA;&#xA;Introduction&#xA;&#xA;Deep Learning(DL)-based approaches are the state-of-the-art for a wide range of document image analysis (DIA) tasks&#xA;including document image classiÔ¨Åcation [11,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTML Parsing&lt;/h3&gt; &#xA;&lt;p&gt;You can parse an HTML document using the following workflow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from unstructured.partition.html import partition_html&#xA;&#xA;elements = partition_html(&#34;example-docs/example-10k.html&#34;)&#xA;print(&#34;\n\n&#34;.join([str(el) for el in elements[:5]]))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The print statement will show the following text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;UNITED STATES&#xA;&#xA;SECURITIES AND EXCHANGE COMMISSION&#xA;&#xA;Washington, D.C. 20549&#xA;&#xA;FORM 10-K&#xA;&#xA;ANNUAL REPORT PURSUANT TO SECTION 13 OR 15(d) OF THE SECURITIES EXCHANGE ACT OF 1934&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And &lt;code&gt;elements&lt;/code&gt; will be a list of elements in the HTML document, similar to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&amp;lt;unstructured.documents.elements.Title at 0x169cbe820&amp;gt;,&#xA; &amp;lt;unstructured.documents.elements.NarrativeText at 0x169cbe8e0&amp;gt;,&#xA; &amp;lt;unstructured.documents.elements.NarrativeText at 0x169cbe3a0&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PDF Parsing&lt;/h3&gt; &#xA;&lt;p&gt;You can use the following workflow to parse PDF documents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from unstructured.partition.pdf import partition_pdf&#xA;&#xA;elements = partition_pdf(&#34;example-docs/layout-parser-paper.pdf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output will look the same as the example from the document parsing section above.&lt;/p&gt; &#xA;&lt;h3&gt;E-mail Parsing&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;partition_email&lt;/code&gt; function within &lt;code&gt;unstructured&lt;/code&gt; is helpful for parsing &lt;code&gt;.eml&lt;/code&gt; files. Common e-mail clients such as Microsoft Outlook and Gmail support exproting e-mails as &lt;code&gt;.eml&lt;/code&gt; files. &lt;code&gt;partition_email&lt;/code&gt; accepts filenames, file-like object, and raw text as input. The following three snippets for parsing &lt;code&gt;.eml&lt;/code&gt; files are equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from unstructured.partition.email import partition_email&#xA;&#xA;elements = partition_email(filename=&#34;example-docs/fake-email.eml&#34;)&#xA;&#xA;with open(&#34;example-docs/fake-email.eml&#34;, &#34;r&#34;) as f:&#xA;  elements = partition_email(file=f)&#xA;&#xA;with open(&#34;example-docs/fake-email.eml&#34;, &#34;r&#34;) as f:&#xA;  text = f.read()&#xA;elements = partition_email(text=text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;elements&lt;/code&gt; output will look like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&amp;lt;unstructured.documents.html.HTMLNarrativeText at 0x13ab14370&amp;gt;,&#xA;&amp;lt;unstructured.documents.html.HTMLTitle at 0x106877970&amp;gt;,&#xA;&amp;lt;unstructured.documents.html.HTMLListItem at 0x1068776a0&amp;gt;,&#xA;&amp;lt;unstructured.documents.html.HTMLListItem at 0x13fe4b0a0&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;print(&#34;\n\n&#34;.join([str(el) for el in elements]))&lt;/code&gt; to get a string representation of the output, which looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;This is a test email to use for unit tests.&#xA;&#xA;Important points:&#xA;&#xA;Roses are red&#xA;&#xA;Violets are blue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Text Document Parsing&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;partition_text&lt;/code&gt; function within &lt;code&gt;unstructured&lt;/code&gt; can be used to parse simple text files into elements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;partition_text&lt;/code&gt; accepts filenames, file-like object, and raw text as input. The following three snippets are for parsing text files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from unstructured.partition.text import partition_text&#xA;&#xA;elements = partition_text(filename=&#34;example-docs/fake-text.txt&#34;)&#xA;&#xA;with open(&#34;example-docs/fake-text.txt&#34;, &#34;r&#34;) as f:&#xA;  elements = partition_text(file=f)&#xA;&#xA;with open(&#34;example-docs/fake-text.txt&#34;, &#34;r&#34;) as f:&#xA;  text = f.read()&#xA;elements = partition_text(text=text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;elements&lt;/code&gt; output will look like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&amp;lt;unstructured.documents.html.HTMLNarrativeText at 0x13ab14370&amp;gt;,&#xA;&amp;lt;unstructured.documents.html.HTMLTitle at 0x106877970&amp;gt;,&#xA;&amp;lt;unstructured.documents.html.HTMLListItem at 0x1068776a0&amp;gt;,&#xA;&amp;lt;unstructured.documents.html.HTMLListItem at 0x13fe4b0a0&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;print(&#34;\n\n&#34;.join([str(el) for el in elements]))&lt;/code&gt; to get a string representation of the output, which looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;This is a test document to use for unit tests.&#xA;&#xA;Important points:&#xA;&#xA;Hamburgers are delicious&#xA;&#xA;Dogs are the best&#xA;&#xA;I love fuzzy blankets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;üíÇ‚ôÇ&lt;/span&gt; Security Policy&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://github.com/Unstructured-IO/unstructured/security/policy&#34;&gt;security policy&lt;/a&gt; for information on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üìö&lt;/span&gt; Learn more&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Section&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://unstructured.io&#34;&gt;Company Website&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unstructured.io product and company info&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://unstructured-io.github.io/unstructured&#34;&gt;Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Full API documentation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unstructured-IO/unstructured/main/Ingest.md&#34;&gt;Batch Processing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ingesting batches of documents through Unstructured&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>