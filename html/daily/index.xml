<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-11T01:36:22Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MiscellaneousStuff/meta-sam-demo</title>
    <updated>2023-04-11T01:36:22Z</updated>
    <id>tag:github.com,2023-04-11:/MiscellaneousStuff/meta-sam-demo</id>
    <link href="https://github.com/MiscellaneousStuff/meta-sam-demo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Meta&#39;s Segment Anything Model (SAM) Demo Site&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Meta&#39;s Segment Anything Model (SAM) Demo Site&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;!--Image / Video annotation based on Meta&#39;s Segment Anything Model (SAM). \--&gt; &#xA;&lt;p&gt;This repository is based on their demo website, &lt;a href=&#34;https://segment-anything.com&#34;&gt;segment-anything.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use this repository, clone it and install the required packages by doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/MiscellaneousStuff/meta-sam-demo&#xA;cd meta-sam-demo&#xA;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run it like a regular react app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To actually use the site when it is deployed, navigate to: &lt;code&gt;http://localhost:3000/&lt;/code&gt;. By default, the site re-directs to the demo page, however, all of the original pages are included and you can uncomment out whatever you want to run.&lt;/p&gt; &#xA;&lt;!--&#xA;## Overview&#xA;&#xA;The demo website uses two quantized models&#xA;- Prompt Encoder: `interactive_module_quantized_592547_2023_03_19_sam6_long_uncertain.onnx`&#xA;- Mask Decoder: `interactive_module_quantized_592547_2023_03_20_sam6_long_all_masks_extra_data_with_ious.onnx`&#xA;--&gt; &#xA;&lt;h1&gt;Getting Started with Create React App&lt;/h1&gt; &#xA;&lt;p&gt;This project was bootstrapped with &lt;a href=&#34;https://github.com/facebook/create-react-app&#34;&gt;Create React App&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Available Scripts&lt;/h2&gt; &#xA;&lt;p&gt;In the project directory, you can run:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Runs the app in the development mode.&lt;br&gt; Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to view it in the browser.&lt;/p&gt; &#xA;&lt;p&gt;The page will reload if you make edits.&lt;br&gt; You will also see any lint errors in the console.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm test&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Launches the test runner in the interactive watch mode.&lt;br&gt; See the section about &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/running-tests&#34;&gt;running tests&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm run build&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt; It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt; &#xA;&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt; Your app is ready to be deployed!&lt;/p&gt; &#xA;&lt;p&gt;See the section about &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/deployment&#34;&gt;deployment&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm run eject&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: this is a one-way operation. Once you &lt;code&gt;eject&lt;/code&gt;, you can’t go back!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you aren’t satisfied with the build tool and configuration choices, you can &lt;code&gt;eject&lt;/code&gt; at any time. This command will remove the single build dependency from your project.&lt;/p&gt; &#xA;&lt;p&gt;Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except &lt;code&gt;eject&lt;/code&gt; will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.&lt;/p&gt; &#xA;&lt;p&gt;You don’t have to ever use &lt;code&gt;eject&lt;/code&gt;. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;You can learn more in the &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/getting-started&#34;&gt;Create React App documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn React, check out the &lt;a href=&#34;https://reactjs.org/&#34;&gt;React documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SamPink/dev-gpt</title>
    <updated>2023-04-11T01:36:22Z</updated>
    <id>tag:github.com,2023-04-11:/SamPink/dev-gpt</id>
    <link href="https://github.com/SamPink/dev-gpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dev-gpt, an automated python developer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dev-gpt&lt;/h1&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Currently the best way to use dev-gpt is through the Jupyter notebook called dev-gpt&lt;/p&gt; &#xA;&lt;p&gt;This command-line interface (CLI) app uses OpenAI&#39;s GPT-4 to automatically write Python code based on a given prompt. It allows users to interact with GPT-4, request code snippets, save the code to files, and run the generated code. The app also extracts and installs required dependencies and handles potential code execution errors.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interact with GPT-4 through a command-line interface&lt;/li&gt; &#xA; &lt;li&gt;Automatically generate Python code based on user input&lt;/li&gt; &#xA; &lt;li&gt;Extract and install required dependencies&lt;/li&gt; &#xA; &lt;li&gt;Save generated code to a file&lt;/li&gt; &#xA; &lt;li&gt;Run generated code and display the output&lt;/li&gt; &#xA; &lt;li&gt;Error handling for code execution&lt;/li&gt; &#xA; &lt;li&gt;Save the session information in JSON format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.6+&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;openai&lt;/code&gt; library (install via &lt;code&gt;pip install openai&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;An OpenAI API key (obtain from &lt;a href=&#34;https://beta.openai.com/signup/&#34;&gt;OpenAI&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository: `git clone &lt;a href=&#34;https://github.com/SamPink/dev-gpt.git&#34;&gt;https://github.com/SamPink/dev-gpt.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change into the cloned directory: &lt;code&gt;cd gpt-4-python-code-generator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the required libraries: &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up an environment variable for the OpenAI API key: &lt;code&gt;export OPENAI_API_KEY=your_api_key_here&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the CLI app: &lt;code&gt;python cli.py --api_key your_api_key&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter a message to provide a prompt for GPT-4. For example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;Enter a new message (or type &#39;quit&#39; to exit): Write a Python function to find the factorial of a given number.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;GPT-4 generates a response with the code snippet and provides instructions on how to run the code. The response will be in the following format:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;```bash&#xA;(required dependencies)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(Python code)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Provide instructions on how to run the code in the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;4. The app saves generated code to a file and runs the code. Any output is displayed in the CLI.&#xA;&#xA;5. If there are any errors in the code, the app asks for help to fix the errors and generates a new response.&#xA;&#xA;6. To exit the CLI, type `quit` or `exit`.&#xA;&#xA;7. The session information is saved in a JSON file named `session.json`.&#xA;&#xA;## Example&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;$ python cli.py --api_key your_api_key Enter a new message (or type &#39;quit&#39; to exit): Write a Python function to find the factorial of a given number.&lt;/p&gt; &#xA;&lt;p&gt;GPT-4 Response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def factorial(n: int) -&amp;gt; int:&#xA;    if n == 0:&#xA;        return 1&#xA;    else:&#xA;        return n * factorial(n-1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the code, call the &lt;code&gt;factorial&lt;/code&gt; function with an integer argument, like &lt;code&gt;factorial(5)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;$ python cli.py --api_key your_api_key Enter a new message (or type &#39;quit&#39; to exit): Run the factorial function with the input 5. I ran the code and this is the output: Factorial of 5 is: 120&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>gurgleapps/pico-web-server-control</title>
    <updated>2023-04-11T01:36:22Z</updated>
    <id>tag:github.com,2023-04-11:/gurgleapps/pico-web-server-control</id>
    <link href="https://github.com/gurgleapps/pico-web-server-control" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and efficient MicroPython web server designed for Raspberry Pi Pico, ESP8266, ESP32, allowing seamless control of microcontroller projects via a web browser.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Raspberry Pi Pico Web Server Control&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains code to control Raspberry Pi Pico, ESP8266, ESP32 or other MicroPython projects using a browser-based user interface. It allows you to interact with your Pico projects remotely from any device with a web browser, including smartphones, tablets, and computers.&lt;/p&gt; &#xA;&lt;p&gt;The latest features include improved memory usage, support for additional microcontrollers like ESP8266, and convenient options such as blinking the IP address using the built-in LED and displaying a file list for the root directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gurgleapps.com/learn/projects/micropython-web-server-control-raspberry-pi-pico-projects&#34;&gt;&lt;img src=&#34;https://gurgleapps.com/assets/image-c/57/57b4760a0b877276a836a75bd107f158576c23b4.webp&#34; alt=&#34;MicroPython Web Server Control&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serve static and dynamic web pages from your Raspberry Pi Pico&lt;/li&gt; &#xA; &lt;li&gt;Run Python functions on your microcontroller device from a web browser&lt;/li&gt; &#xA; &lt;li&gt;Create dynamic web pages with live data from your Pico or other Microcontroller&lt;/li&gt; &#xA; &lt;li&gt;Blink the IP address using the built-in LED, handy when you&#39;re out in the field with no screen or computer&lt;/li&gt; &#xA; &lt;li&gt;Display a file and folder list of your root directory with an attractive and responsive user interface&lt;/li&gt; &#xA; &lt;li&gt;End-to-end examples showcasing various functionalities&lt;/li&gt; &#xA; &lt;li&gt;Easily customizable codebase&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have MicroPython on your Pico&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Copy the code to your Pico&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;config.py&lt;/code&gt; with your Wi-Fi details and IP blink options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;WIFI_SSID&lt;/code&gt;: Set this to your Wi-Fi network SSID (e.g., &lt;code&gt;&#34;your_wifi_ssid&#34;&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;WIFI_PASSWORD&lt;/code&gt;: Set this to your Wi-Fi network password (e.g., &lt;code&gt;&#34;your_wifi_password&#34;&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BLINK_IP&lt;/code&gt;: Set this to &lt;code&gt;True&lt;/code&gt; if you want the Pico to blink its IP address using the built-in LED; set it to &lt;code&gt;False&lt;/code&gt; if not&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BLINK_LAST_ONLY&lt;/code&gt;: Set this to &lt;code&gt;True&lt;/code&gt; if you want to blink only the last octet of the IP address; set it to &lt;code&gt;False&lt;/code&gt; to blink the entire IP address&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;main.py&lt;/code&gt; and look for the IP address of your web server&lt;/li&gt; &#xA; &lt;li&gt;Point your browsers to http://&amp;lt;YOUR_IP&amp;gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For detailed instructions and a step-by-step guide on how to use this project, please refer to our article:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gurgleapps.com/learn/projects/micropython-web-server-control-raspberry-pi-pico-projects&#34;&gt;MicroPython Web Server: Control Your Raspberry Pi Pico Projects Remotely&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love to see your projects, control panels, and improvements. Be sure to use this Github repo and submit your additions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/gurgleapps/pico-web-server-control/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>