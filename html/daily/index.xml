<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-20T01:32:02Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sidex15/susfs4ksu-module</title>
    <updated>2025-04-20T01:32:02Z</updated>
    <id>tag:github.com,2025-04-20:/sidex15/susfs4ksu-module</id>
    <link href="https://github.com/sidex15/susfs4ksu-module" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An addon root hiding service for KernelSU&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A KernelSU module for SUSFS patched kernel&lt;/h1&gt; &#xA;&lt;p&gt;This module installs a userspace helper tool called &lt;strong&gt;ksu_susfs&lt;/strong&gt; and &lt;strong&gt;sus_su&lt;/strong&gt; into /data/adb/ksu and provides a script to communicate with SUSFS kernel. This module provides root hiding for KernelSU on the kernel level.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have a custom kernel with SUSFS patched in it. Check the custom kernel source to see if it has SUSFS.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the kernel is using SUSFS 1.5.2 or later for effective hide.&lt;/li&gt; &#xA; &lt;li&gt;Shamiko v1.2.1 or later is acceptable (but it&#39;s highly optional to use it)&lt;/li&gt; &#xA; &lt;li&gt;HideMyApplist is acceptable&lt;/li&gt; &#xA; &lt;li&gt;ReVanced root module compatible&lt;/li&gt; &#xA; &lt;li&gt;Recommended to use &lt;a href=&#34;https://github.com/backslashxx/bindhosts&#34;&gt;bindhosts&lt;/a&gt; if you want to use systemless hosts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SUSFS Custom settings documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sidex15/susfs4ksu-module/wiki/SUSFS-Custom-Settings&#34;&gt;https://github.com/sidex15/susfs4ksu-module/wiki/SUSFS-Custom-Settings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Spoofing Kernel Uname guide on Revision 16+&lt;/h2&gt; &#xA;&lt;p&gt;In the new R16 of SUSFS includes a new parameter called &#34;Spoof Kernel Build&#34;. this may confuse some users about what those are.&lt;/p&gt; &#xA;&lt;p&gt;In the kernel version it affects this part:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;6.1.75-android14-11-g16c5f6cd5e9b-ab12268515&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While on the Kernel Build part is this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#1 SMP PREEMPT Fri Aug 23 03:08:10 UTC 2024&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may check them by using these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#This is for the Kernel Version&#xA;uname -r&#xA;#This is for the Kernel Build&#xA;uname -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding ro.boot.vbmeta.digest value&lt;/h2&gt; &#xA;&lt;p&gt;This module will now have a directory called &lt;code&gt;VerifiedBootHash&lt;/code&gt; in &lt;code&gt;/data/adb&lt;/code&gt; containing &lt;code&gt;VerifiedBootHash.txt&lt;/code&gt; for users with missing &lt;code&gt;ro.boot.vbmeta.digest&lt;/code&gt; value to prevent partition modified and abnormal boot state detection.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy your VerifiedBootHash in the Key Attestation demo and paste it to &lt;code&gt;/data/adb/VerifiedBootHash/VerifiedBootHash.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to add your own language, use the &lt;code&gt;webui&lt;/code&gt; branch and add your translations in the &lt;code&gt;./languages&lt;/code&gt; directory. Make sure to test the implementation thoroughly before submitting a pull request. Also, the name of the XML files should be the same as the language code, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For English, the file should be named &lt;code&gt;en.xml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Spanish, the file should be named &lt;code&gt;es.xml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then add your language to the &lt;code&gt;./languages/languages.json&lt;/code&gt; with this format: &lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;&amp;lt;your language code&amp;gt;&#34;: &#34;&amp;lt;Name of the language (not English translation)&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;so it will be included in the language drop-down menu. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;Don&#39;t worry; it will release officially soon ðŸ˜Š&lt;/del&gt; Released on Revision 17 ðŸš€&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;susfs4ksu: &lt;a href=&#34;https://gitlab.com/simonpunk/susfs4ksu/&#34;&gt;https://gitlab.com/simonpunk/susfs4ksu/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Buy us some coffee â˜•&lt;/h2&gt; &#xA;&lt;h3&gt;simonpunk&lt;/h3&gt; &#xA;&lt;p&gt;PayPal: &lt;code&gt;kingjeffkimo@yahoo.com.tw&lt;/code&gt; &lt;br&gt;BTC: &lt;code&gt;bc1qgkwvsfln02463zpjf7z6tds8xnpeykggtgk4kw&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;sidex15&lt;/h3&gt; &#xA;&lt;p&gt;PayPal: &lt;code&gt;sidex15.official@gmail.com&lt;/code&gt; &lt;br&gt;BTC: &lt;code&gt;1AVaRmoEivK94XRooqbbAgvzdTMA5cwGdc&lt;/code&gt; &lt;br&gt;ETH (ERC20): &lt;code&gt;0xa52151ebd2718a00af9e1dfcacfb30e1d3a94860&lt;/code&gt; &lt;br&gt;USDT (TRC20): &lt;code&gt;TAUbxzug7cygExFunhFBiG6ntmbJwz7Skn&lt;/code&gt; &lt;br&gt;USDT (ERC20): &lt;code&gt;0xa52151ebd2718a00af9e1dfcacfb30e1d3a94860&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tc39/proposal-enum</title>
    <updated>2025-04-20T01:32:02Z</updated>
    <id>tag:github.com,2025-04-20:/tc39/proposal-enum</id>
    <link href="https://github.com/tc39/proposal-enum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Proposal for ECMAScript enums&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Proposal for ECMAScript enums&lt;/h1&gt; &#xA;&lt;p&gt;A common and oft-used feature of many languages is the concept of an &lt;a href=&#34;https://en.wikipedia.org/wiki/Enumerated_type&#34;&gt;Enumerated Type&lt;/a&gt;, or &lt;code&gt;enum&lt;/code&gt;. Enums provide a finite domain of constant values that are regularly used to indicate choices, discriminants, and bitwise flags. As a popular and heavily used feature of TypeScript, this proposal seeks the adoption of a compatible form of TypeScript&#39;s &lt;code&gt;enum&lt;/code&gt; declaration. Where the syntax or semantics of this proposal differ from that of TypeScript, it is with the full knowledge of the TypeScript development team and represents either a change that TypeScript is willing to adopt, or represents a limited subset of functionality that TypeScript expands upon.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: This proposal has been heavily reworked from its prior incarnation, which can now be found at &lt;a href=&#34;https://github.com/rbuckton/proposal-enum/tree/old&#34;&gt;https://github.com/rbuckton/proposal-enum/tree/old&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stage:&lt;/strong&gt; 0&lt;br&gt; &lt;strong&gt;Champion:&lt;/strong&gt; Ron Buckton (@rbuckton)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For more information see the &lt;a href=&#34;https://tc39.github.io/process-document/&#34;&gt;TC39 proposal process&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ron Buckton (@rbuckton)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Motivations&lt;/h1&gt; &#xA;&lt;p&gt;Many ECMAScript hosts and libraries have various ways of distinguishing types or operations via some kind of discriminant:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ECMAScript: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;[Symbol.toStringTag]&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DOM: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Node.prototype.nodeType&lt;/code&gt; (&lt;code&gt;Node.ATTRIBUTE_NODE&lt;/code&gt;, &lt;code&gt;Node.CDATA_SECTION_NODE&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;DOMException.prototype.code&lt;/code&gt; (&lt;code&gt;DOMException.ABORT_ERR&lt;/code&gt;, &lt;code&gt;DOMException.DATA_CLONE_ERR&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;XMLHttpRequest.prototype.readyState&lt;/code&gt; (&lt;code&gt;XMLHttpRequest.DONE&lt;/code&gt;, &lt;code&gt;XMLHttpRequest.HEADERS_RECEIVED&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CSSRule.prototype.type&lt;/code&gt; (&lt;code&gt;CSSRule.CHARSET_RULE&lt;/code&gt;, &lt;code&gt;CSSRule.FONT_FACE_RULE&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Animation.prototype.playState&lt;/code&gt; (&lt;code&gt;&#34;idle&#34;&lt;/code&gt;, &lt;code&gt;&#34;running&#34;&lt;/code&gt;, &lt;code&gt;&#34;paused&#34;&lt;/code&gt;, &lt;code&gt;&#34;finished&#34;&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ApplicationCache.prototype.status&lt;/code&gt; (&lt;code&gt;ApplicationCache.CHECKING&lt;/code&gt;, &lt;code&gt;ApplicationCache.DOWNLOADING&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;NodeJS: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Buffer&lt;/code&gt; encodings (&lt;code&gt;&#34;ascii&#34;&lt;/code&gt;, &lt;code&gt;&#34;utf8&#34;&lt;/code&gt;, &lt;code&gt;&#34;base64&#34;&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;os.platform()&lt;/code&gt; (&lt;code&gt;&#34;win32&#34;&lt;/code&gt;, &lt;code&gt;&#34;linux&#34;&lt;/code&gt;, &lt;code&gt;&#34;darwin&#34;&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#34;constants&#34;&lt;/code&gt; module (&lt;code&gt;ENOENT&lt;/code&gt;, &lt;code&gt;EEXIST&lt;/code&gt;, etc.; &lt;code&gt;S_IFMT&lt;/code&gt;, &lt;code&gt;S_IFREG&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, with the recent adoption of &lt;a href=&#34;https://nodejs.org/docs/latest/api/typescript.html#type-stripping&#34;&gt;TypeScript Type Stripping&lt;/a&gt; in NodeJS, there has been renewed interest in ECMA-262 adopting a compatible form of TypeScript&#39;s &lt;code&gt;enum&lt;/code&gt; declaration as it is one of the most frequently used TypeScript features not supported in this mode.&lt;/p&gt; &#xA;&lt;p&gt;An &lt;code&gt;enum&lt;/code&gt; declaration provides several advantages over an object literal:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Closed domain by default â€” The declaration is non-extensible and enum members would be non-configurable and non-writable.&lt;/li&gt; &#xA; &lt;li&gt;Restricted domain of allowed values â€” Restricts initializers to a subset of allowed JS values (&lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;, &lt;code&gt;BigInt&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Self-references during definition â€” Referring to prior enum members of the same enum in the initializer of a subsequent enum member.&lt;/li&gt; &#xA; &lt;li&gt;Static Typing (tooling) â€” Static type systems like TypeScript use enum declarations to discriminate types, provide documentation in hovers, etc.&lt;/li&gt; &#xA; &lt;li&gt;ADT enums (future) â€” Potential future support for Algebraic Data Type enums (i.e., &#34;discriminated unions&#34;).&lt;/li&gt; &#xA; &lt;li&gt;Decorators (future) â€” Potential future support for &lt;code&gt;enum&lt;/code&gt;-specific Decorators.&lt;/li&gt; &#xA; &lt;li&gt;Auto-Initializers (future) â€” Potential future support for auto-initialized enum members.&lt;/li&gt; &#xA; &lt;li&gt;&#34;shared&#34; enums (future) â€” Potential future support for a &lt;code&gt;shared enum&lt;/code&gt; with restrictions on inputs to align with &lt;a href=&#34;https://github.com/tc39/proposal-structs&#34;&gt;&lt;code&gt;shared struct&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prior Art&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TypeScript: &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/enums.html&#34;&gt;Enums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C++: &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/cpp/enumerations-cpp&#34;&gt;Enumerations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C#: &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum&#34;&gt;Enumeration types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java: &lt;a href=&#34;https://docs.oracle.com/javase/specs/jls/se10/html/jls-8.html#jls-8.9&#34;&gt;Enum types&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Syntax&lt;/h1&gt; &#xA;&lt;p&gt;While a Stage 1 proposal is generally encouraged to avoid specific syntax, it is a stated goal of this proposal to introduce an &lt;code&gt;enum&lt;/code&gt; declaration whose syntax is compatible with TypeScript&#39;s. As such, the syntax of this proposal is restricted to a subset of TypeScript&#39;s &lt;code&gt;enum&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// enum declarations&#xA;&#xA;enum Numbers {&#xA;  zero = 0,&#xA;  one = 1,&#xA;  two = 2,&#xA;  three = 3,&#xA;  alsoThree = three // self reference&#xA;}&#xA;&#xA;enum PlayState {&#xA;  idle = &#34;idle&#34;,&#xA;  running = &#34;running&#34;,&#xA;  paused = &#34;paused&#34;&#xA;}&#xA;&#xA;enum Symbols {&#xA;  alpha = Symbol(&#34;alpha&#34;),&#xA;  beta = Symbol(&#34;beta&#34;) &#xA;}&#xA;&#xA;enum Named {&#xA;  Identifier = 0,&#xA;  &#34;string name&#34; = 1,&#xA;}&#xA;&#xA;// Accessing enum values:&#xA;let x = Numbers.three;&#xA;let y = Named[&#34;string name&#34;];&#xA;&#xA;// Iteration, replaces TypeScript enum &#34;Reverse mapping&#34; (formatting,&#xA;// debugging, diagnostics, etc):&#xA;for (const [key, value] of Numbers) ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Semantics&lt;/h1&gt; &#xA;&lt;p&gt;While a Stage 1 proposal is generally encouraged to avoid specific semantics, it is a stated goal of this proposal to introduce an &lt;code&gt;enum&lt;/code&gt; declaration whose semantics are compatible with TypeScript&#39;s. As such, the semantics of this proposal are intended to align with that of TypeScript&#39;s &lt;code&gt;enum&lt;/code&gt; where possible.&lt;/p&gt; &#xA;&lt;h2&gt;Enum Declarations&lt;/h2&gt; &#xA;&lt;p&gt;Enum declarations consist of a finite set of &lt;em&gt;enum members&lt;/em&gt; that define the names and values for each member of the enum. These results are stored as properties of an &lt;em&gt;enum object&lt;/em&gt;. An &lt;em&gt;enum object&lt;/em&gt; is an ordinary object whose [[Prototype]] is &lt;code&gt;null&lt;/code&gt;. Each enum member defines a property on the &lt;em&gt;enum object&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition, an &lt;em&gt;enum object&lt;/em&gt; contains a &lt;code&gt;Symbol.iterator&lt;/code&gt; method that yields a &lt;code&gt;[key, value]&lt;/code&gt; entry for each declared enum member, in document order. To explain the semantics of the &lt;code&gt;Symbol.iterator&lt;/code&gt; method, an &lt;em&gt;enum object&lt;/em&gt; may require an [[EnumMembers]] internal slot.&lt;/p&gt; &#xA;&lt;h2&gt;Enum Members&lt;/h2&gt; &#xA;&lt;p&gt;Enum members define the set of values that belong to the enum&#39;s domain. Each enum member consists of a name and an initializer that defines the value associated with that name. Enum members are [[Writable]]: &lt;code&gt;false&lt;/code&gt; and [[Configurable]]: &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Enum Member Names&lt;/h3&gt; &#xA;&lt;p&gt;Enum member names are currently restricted to &lt;em&gt;IdentifierName&lt;/em&gt; and &lt;em&gt;StringLiteral&lt;/em&gt;, as those are the only member names currently supported by TypeScript&#39;s &lt;code&gt;enum&lt;/code&gt;. We may opt to expand this to allow other member names like &lt;em&gt;ComputedPropertyName&lt;/em&gt; in the future, if there is sufficient motivation.&lt;/p&gt; &#xA;&lt;p&gt;An enum may not have duplicate member names. We may opt to introduce restrictions on member names like &lt;code&gt;constructor&lt;/code&gt; if we deem it necessary to support ADT enums in the future.&lt;/p&gt; &#xA;&lt;p&gt;If an enum member name shares the same string value as the name of the enum itself, it shadows the enum declaration name within the enum body.&lt;/p&gt; &#xA;&lt;h3&gt;Enum Member Initializers&lt;/h3&gt; &#xA;&lt;p&gt;An enum member&#39;s initializer is restricted to a subset of ECMAScript values (i.e., &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;, and &lt;code&gt;BigInt&lt;/code&gt;). This limitation allows us to consider future support for Algebraic Data Types (ADT) in enums without the possibility of conflicting with something like an enum member whose value is a function.&lt;/p&gt; &#xA;&lt;p&gt;An &lt;em&gt;IdentifierReference&lt;/em&gt; in an enum member initializer may refer to the name of a prior declaration, and to the enum itself (much like a &lt;code&gt;class&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;API&lt;/h1&gt; &#xA;&lt;p&gt;Aside from the &lt;code&gt;enum&lt;/code&gt; declaration itself, there is no other proposed API.&lt;/p&gt; &#xA;&lt;p&gt;An &lt;code&gt;enum&lt;/code&gt; declaration will have a &lt;code&gt;Symbol.iterator&lt;/code&gt; method that can be used to iterate over the key/value pairs of the enum&#39;s members.&lt;/p&gt; &#xA;&lt;h1&gt;Desugaring&lt;/h1&gt; &#xA;&lt;p&gt;An &lt;code&gt;enum&lt;/code&gt; declaration could potentially be implemented as the following desugaring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;enum E {&#xA;  A = 1,&#xA;  B = 2,&#xA;  C = A | E.B,&#xA;}&#xA;&#xA;let E = (() =&amp;gt; {&#xA;  let E = Object.create(null), A, B, C;&#xA;  Object.defineProperty(E, &#34;A&#34;, { value: A = 1 });&#xA;  Object.defineProperty(E, &#34;B&#34;, { value: B = 2 });&#xA;  Object.defineProperty(E, &#34;C&#34;, { value: C = A | E.B });&#xA;  Object.defineProperty(E, Symbol.iterator, {&#xA;    value: function* () {&#xA;      yield [&#34;A&#34;, E.A];&#xA;      yield [&#34;B&#34;, E.B];&#xA;      yield [&#34;C&#34;, E.C];&#xA;    }&#xA;  });&#xA;  Object.defineProperty(E, Symbol.toStringTag, { value: &#34;E&#34; });&#xA;  Object.preventExtensions(E);&#xA;  return E;&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Other Considerations&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;enum&lt;/code&gt; Expressions&lt;/h2&gt; &#xA;&lt;p&gt;While ECMAScript has both statement and expression forms for &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; declarations, this proposal does not currently support &lt;code&gt;enum&lt;/code&gt; expressions. There is no concept of an &lt;code&gt;enum&lt;/code&gt; expression in TypeScript, though we may consider &lt;code&gt;enum&lt;/code&gt; expressions for ECMAScript if there is sufficient motivation.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;export&lt;/code&gt;/&lt;code&gt;export default&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;An &lt;code&gt;enum&lt;/code&gt; declaration would support both &lt;code&gt;export&lt;/code&gt; and &lt;code&gt;export default&lt;/code&gt;, much like &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Interaction with Shared Structs&lt;/h2&gt; &#xA;&lt;p&gt;In general, this proposal hopes to align enum member values to those that can be shared with a &lt;code&gt;shared struct&lt;/code&gt;, however it is important to note that a &lt;code&gt;Symbol&lt;/code&gt;-valued enum that uses &lt;code&gt;Symbol()&lt;/code&gt; and not &lt;code&gt;Symbol.for()&lt;/code&gt; would produce values that cannot be reconciled between two Agents. In addition, ADT enums may need to contain non-shared data, such as in an &lt;code&gt;Option&lt;/code&gt; or &lt;code&gt;Result&lt;/code&gt; enum. As such, this proposal may seek to introduce a &lt;code&gt;shared enum&lt;/code&gt; declaration that further restricts allowed inputs.&lt;/p&gt; &#xA;&lt;h1&gt;Differences from TypeScript&lt;/h1&gt; &#xA;&lt;p&gt;There are several differences in the &lt;code&gt;enum&lt;/code&gt; declaration for this proposal compared to TypeScript&#39;s &lt;code&gt;enum&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#auto-initializers&#34;&gt;Auto-initializers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#declaration-merging&#34;&gt;Declaration merging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#reverse-mapping&#34;&gt;Reverse mapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#const-enum&#34;&gt;&lt;code&gt;const enum&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#symbol-values&#34;&gt;&lt;code&gt;Symbol&lt;/code&gt; values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#bigint-values&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt; values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#export-default&#34;&gt;&lt;code&gt;export default&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Auto-Initializers&lt;/h2&gt; &#xA;&lt;p&gt;TypeScript&#39;s &lt;code&gt;enum&lt;/code&gt; supports auto-initialization of enum members:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;enum Numbers {&#xA;  zero, // 0&#xA;  one,  // 1&#xA;  two   // 2&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, this behavior is contentious amongst some TC39 delegates and has been removed from this proposal. The main concern that has been raised is that introducing new auto-initialized enum members in the middle of an existing enum has the potential to be a versioning issue in packages, and that such behavior should be harder to reach for, as opposed to being the default behavior. However, even if this capability is not supported, TypeScript will continue to support auto-initialization due to its frequent use within the developer community, but would emit explicit initializers to JavaScript. It is possible that another form of auto-initialization may be introduced in the future that could be utilized by both TypeScript and ECMAScript. For more information, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#auto-initializers-1&#34;&gt;Auto-Initializers&lt;/a&gt; topic in the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#future-directions&#34;&gt;Future Directions&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Declaration Merging&lt;/h2&gt; &#xA;&lt;p&gt;TypeScript (as of v5.8) allows &lt;code&gt;enum&lt;/code&gt; declarations to merge with other &lt;code&gt;enum&lt;/code&gt; (and &lt;code&gt;namespace&lt;/code&gt;) declarations with the same name. This is not a desirable feature for ECMAScript enums and will not be supported. TypeScript is considering &lt;a href=&#34;https://github.com/microsoft/TypeScript/issues/54500#issuecomment-2770170732&#34;&gt;deprecating this feature&lt;/a&gt; in TypeScript 6.0.&lt;/p&gt; &#xA;&lt;h2&gt;Reverse Mapping&lt;/h2&gt; &#xA;&lt;p&gt;TypeScript currently supports reverse-mapping enum values back to enum member names using &lt;code&gt;E[value]&lt;/code&gt;, but only for &lt;code&gt;Number&lt;/code&gt; values. This limitation is intended to avoid collisions for &lt;code&gt;String&lt;/code&gt;-valued enum members that could potentially overwrite other members. While this information is invaluable for debugging, diagnostics, formatting, and serialization, it is far less frequently used compared to &lt;code&gt;enum&lt;/code&gt; on the whole.&lt;/p&gt; &#xA;&lt;p&gt;To avoid this inconsistency, we instead propose using iteration (by way of the &lt;code&gt;Symbol.iterator&lt;/code&gt; built-in symbol) to cover the &#34;reverse mapping&#34; case:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;enum E {&#xA;  A = 0,&#xA;  B = &#34;A&#34;,&#xA;}&#xA;&#xA;for (const [key, value] of E) {&#xA;  console.log(`${key}: ${value}`);&#xA;}&#xA;&#xA;// prints:&#xA;//  A: 0&#xA;//  B: A&#xA;&#xA;const keyForA = E[Symbol.iterator]().find(([, value]) =&amp;gt; value === &#34;A&#34;)[0]&#xA;console.log(keyForA); // prints: B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If adopted, TypeScript would add support for &lt;code&gt;Symbol.iterator&lt;/code&gt; while eventually deprecating existing reverse mapping support.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;const enum&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;TypeScript supports the concept of a &lt;code&gt;const enum&lt;/code&gt; declaration, which is similar to a normal &lt;code&gt;enum&lt;/code&gt; declaration except that enum values are inlined into their use sites. Implementations are free to optimize as they see fit, and it&#39;s entirely reasonable that an implementation may eventually support similar inlining on a normal &lt;code&gt;enum&lt;/code&gt; declaration. As the current &lt;code&gt;const enum&lt;/code&gt; requires whole program knowlege and a type system, we believe it should remain a TypeScript-specific capability at this time.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Symbol&lt;/code&gt; values&lt;/h2&gt; &#xA;&lt;p&gt;TypeScript does not currently support &lt;code&gt;Symbol&lt;/code&gt; values for enums, but would add support if this feature were to be adopted.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;BigInt&lt;/code&gt; values&lt;/h2&gt; &#xA;&lt;p&gt;TypeScript does not currently support &lt;code&gt;BigInt&lt;/code&gt; values for enums, but would add support if this feature were to be adopted.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;export default&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;TypeScript does not currently support &lt;code&gt;export default&lt;/code&gt; on an enum, but would add support if this feature were to be adopted.&lt;/p&gt; &#xA;&lt;h1&gt;Future Directions&lt;/h1&gt; &#xA;&lt;p&gt;While this proposal is intended to be rather limited in scope, there are several potential areas for future advancement in the form of follow-on proposals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#algebraic-data-types-adt-enums&#34;&gt;Algebraic Data Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#decorators&#34;&gt;Decorators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#auto-initializers-1&#34;&gt;Auto-Initializers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Algebraic Data Type (ADT) Enums&lt;/h2&gt; &#xA;&lt;p&gt;Algebraic Data Type (ADT) enums act like a discriminated union of structured types. ADT enum members describe a constructor function that produces an object with a discriminant property. A future enhancement of an ECMAScript &lt;code&gt;enum&lt;/code&gt; declaration might support ADT enums in conjunction with &lt;a href=&#34;https://github.com/tc39/proposal-extractors&#34;&gt;Extractors&lt;/a&gt; and &lt;a href=&#34;https://github.com/tc39/proposal-pattern-matching&#34;&gt;Pattern Matching&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;enum Option {&#xA;  Some(value),&#xA;  None()&#xA;}&#xA;&#xA;const opt = Option.Some(123);&#xA;match (opt) {&#xA;  Option.Some(let value): console.log(value);&#xA;  Option.None(): console.log(&#34;&amp;lt;no value&amp;gt;&#34;);&#xA;}&#xA;&#xA;&#xA;enum Result {&#xA;  Ok(value),&#xA;  Error(reason)&#xA;}&#xA;&#xA;function try_(cb) {&#xA;  try {&#xA;    return Result.Ok(_cb());&#xA;  } catch (e) {&#xA;    return Result.Error(e);&#xA;  }&#xA;}&#xA;&#xA;const res = try_(() =&amp;gt; obj.doWork());&#xA;match (res) {&#xA;  Result.Ok(let value): ...;&#xA;  Result.Error(let reason): ...;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;Option.Some&lt;/code&gt; might describe a &#34;constructor&#34; function that produces an object discriminated by either a well-known symbol field or merely by its [[Prototype]], such that &lt;code&gt;Option.Some(0) instanceof Option.Some&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. ADT enum members could also describe more complex shapes through the use of binding patterns, such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;enum Geometry {&#xA;  Point({ x, y }),&#xA;  Line(p1, p2),&#xA;}&#xA;&#xA;const p1 = Geometry.Point({ x: 0, y: 1 });&#xA;p1[0].x; // 0&#xA;p1[0].y; // 1&#xA;&#xA;const p2 = Geometry.Point({ x: 2, y: 3 });&#xA;const l = Geometry.Line(p1, p2);&#xA;l[0] === p1; // true&#xA;&#xA;const printGeom = geom =&amp;gt; match (geom) {&#xA;  Geometry.Point({ let x, let y }): console.log(`Point({ x: ${x}, y: ${y} })`);&#xA;  Geometry.Line(let p1, let p2): console.log(`Line(${printGeom(p1)}, ${printGeom(p2)})`);&#xA;};&#xA;&#xA;printGeom(p1); // Point({ x: 0, y: 1 })&#xA;printGeom(l); // Line(Point({ x: 0, y: 1 }), Point({ x: 2, y: 3 }))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ADT enum members may also need a mechanism to implement prototypal or static methods on the &lt;code&gt;enum&lt;/code&gt;, which is one reason why we prefer &lt;code&gt;Symbol.iterator&lt;/code&gt; to describe the domain of an &lt;code&gt;enum&lt;/code&gt; vs. something like &lt;code&gt;Object.entries()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Decorators&lt;/h2&gt; &#xA;&lt;p&gt;In the future we may opt to extend support for &lt;a href=&#34;https://github.com/tc39/proposal-decorators&#34;&gt;Decorators&lt;/a&gt; to &lt;code&gt;enum&lt;/code&gt; declarations to support serialization/deserialization, formatting, and FFI scenarios:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;@WasmType(&#34;u1&#34;)&#xA;enum Role {&#xA;  @Alias([&#34;user&#34;, &#34;person&#34;], { ignoreCase: true })&#xA;  user = 1,&#xA;  @Alias([&#34;admin&#34;, &#34;administrator&#34;], { ignoreCase: true })&#xA;  admin = 2,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Auto-Initializers&lt;/h2&gt; &#xA;&lt;p&gt;While this proposal does not support TypeScript&#39;s auto-initialization semantics, we may consider introducing an alternative syntax in a future proposal, such as the &lt;code&gt;of&lt;/code&gt; clause described in an &lt;a href=&#34;https://github.com/rbuckton/proposal-enum/tree/old&#34;&gt;older version of this proposal&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;enum Numbers of Number { zero, one, two, three }&#xA;Numbers.zero; // 0&#xA;&#xA;enum Colors of String { red, green, blue }&#xA;Colors.red; // &#34;red&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or through some form of statically recognizable syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;auto enum Numbers { zero, one, two, three }&#xA;Numbers.zero; // 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;p&gt;The following is a high-level list of tasks to progress through each stage of the &lt;a href=&#34;https://tc39.github.io/process-document/&#34;&gt;TC39 proposal process&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;Stage 1 Entrance Criteria&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Identified a &#34;&lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#status&#34;&gt;champion&lt;/a&gt;&#34; who will advance the addition.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#motivations&#34;&gt;Prose&lt;/a&gt; outlining the problem or need and the general shape of a solution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Illustrative &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#examples&#34;&gt;examples&lt;/a&gt; of usage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; High-level &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#api&#34;&gt;API&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stage 2 Entrance Criteria&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://rbuckton.github.io/proposal-enum&#34;&gt;Initial specification text&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#todo&#34;&gt;Transpiler support&lt;/a&gt; (&lt;em&gt;Optional&lt;/em&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stage 3 Entrance Criteria&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://rbuckton.github.io/proposal-enum&#34;&gt;Complete specification text&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Designated reviewers have &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#todo&#34;&gt;signed off&lt;/a&gt; on the current spec text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The ECMAScript editor has &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#todo&#34;&gt;signed off&lt;/a&gt; on the current spec text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stage 4 Entrance Criteria&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/tc39/test262&#34;&gt;Test262&lt;/a&gt; acceptance tests have been written for mainline usage scenarios and &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#todo&#34;&gt;merged&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Two compatible implementations which pass the acceptance tests: &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#todo&#34;&gt;[1]&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#todo&#34;&gt;[2]&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#todo&#34;&gt;pull request&lt;/a&gt; has been sent to tc39/ecma262 with the integrated spec text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The ECMAScript editor has signed off on the &lt;a href=&#34;https://raw.githubusercontent.com/tc39/proposal-enum/main/#todo&#34;&gt;pull request&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- # References --&gt; &#xA;&lt;!-- Links to other specifications, etc. --&gt; &#xA;&lt;!--&#xA;* [Title](url)&#xA;--&gt; &#xA;&lt;h1&gt;Prior Discussion&lt;/h1&gt; &#xA;&lt;!-- Links to prior discussion topics on https://esdiscuss.org --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://esdiscuss.org/topic/enums&#34;&gt;Enums?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://esdiscuss.org/topic/propose-simpler-string-constant&#34;&gt;Propose simpler string constant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rbuckton/proposal-enum/tree/old&#34;&gt;Old version of this proposal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jack-works/proposal-enum&#34;&gt;Prior &lt;code&gt;enum&lt;/code&gt; proposal by Jack-Works&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- The following are shared links used throughout the README: --&gt;</summary>
  </entry>
</feed>