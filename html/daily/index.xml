<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-17T01:33:59Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scrimba/learn-html-and-css</title>
    <updated>2022-09-17T01:33:59Z</updated>
    <id>tag:github.com,2022-09-17:/scrimba/learn-html-and-css</id>
    <link href="https://github.com/scrimba/learn-html-and-css" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code files for Scrimba&#39;s HTML and CSS course&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Welcome to &lt;a href=&#34;https://scrimba.com/learn/htmlandcss&#34;&gt;Learn HTML and CSS&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Here, you can find the starter files for all the challenges in the course. To get started, download the entire repo and then navigate to the folder you need - the folders are structured just like the course.&lt;/p&gt; &#xA;&lt;p&gt;If you have any problems at all, send an email to &lt;a href=&#34;mailto:help@scrimba.com&#34;&gt;help@scrimba.com&lt;/a&gt; or join our &lt;a href=&#34;https://raw.githubusercontent.com/scrimba/learn-html-and-css/main/scrimba.com/discord&#34;&gt;Discord server&lt;/a&gt; and we&#39;ll give you a hand.&lt;/p&gt; &#xA;&lt;p&gt;Happy coding!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hunar4321/particle-life</title>
    <updated>2022-09-17T01:33:59Z</updated>
    <id>tag:github.com,2022-09-17:/hunar4321/particle-life</id>
    <link href="https://github.com/hunar4321/particle-life" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple program to simulate artificial life using attraction/reuplsion forces between many particles&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/hunar4321/life_code&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/hunar4321/life_code&#34; alt=&#34;GitHub&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Particle Life Simulation&lt;/h1&gt; &#xA;&lt;p&gt;A simple program to simulate primitive Artificial Life using simple rules of attraction or repulsion among atom-like particles, producing complex self-organzing life-like patterns. Excluding the GUI elements, the code is less than a page. The video tutorial and walkthrough are available below.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More Here (YouTube video tutorial):&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0Kx4Y9TVMGg&#34;&gt;https://youtu.be/0Kx4Y9TVMGg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Online Demo (JavaScript version):&lt;/h2&gt; &#xA;&lt;p&gt;Click here for a live demo (JavaScript):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2d - &lt;a href=&#34;https://hunar4321.github.io/particle-life/particle_life.html&#34;&gt;https://hunar4321.github.io/particle-life/particle_life.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;3d - &lt;a href=&#34;https://hunar4321.github.io/particle-life/particle_life_3d.html&#34;&gt;https://hunar4321.github.io/particle-life/particle_life_3d.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interface (C++ version)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hunar4321/particle-life/main/images/interface.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example Results&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hunar4321/particle-life/main/images/big_pic.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Some Interesting Patterns to Reproduce:&lt;/h2&gt; &#xA;&lt;p&gt;You do not need to be exact with the parameters to reproduce these patterns. The best way to get interesting patterns is to first try random parameter explorations, once you find an interesting pattern, try fine-tuning it gradually. To avoid becoming stuck at a local maximum, you can make some occasional big parameter jumps. In this way interesting and different patterns shall keep poping up.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hunar4321/particle-life/main/images/some_patterns.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;To use:&lt;/h2&gt; &#xA;&lt;p&gt;Download this repo. unzip the file then go to /particle_life/bin/ folder and click on particle_life.exe&lt;/p&gt; &#xA;&lt;h2&gt;Code:&lt;/h2&gt; &#xA;&lt;p&gt;The source code is available in C++, JavaScript, and Python. Watch this YouTube video for a walkthrough tutorial: &lt;a href=&#34;https://youtu.be/0Kx4Y9TVMGg&#34;&gt;https://youtu.be/0Kx4Y9TVMGg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to contribute to the C++ program, the core algorithm is the first 100 lines of code at: &#34;/particle_life/src/ofApp.cpp&#34;. The rest are GUI components and rendering controls which are provided by the openFrameworks library an opensource and easy-to-use image rendering library.&lt;/p&gt; &#xA;&lt;p&gt;To start, download this repository then download openFrameworks library from here: &lt;a href=&#34;https://openframeworks.cc/&#34;&gt;https://openframeworks.cc/&lt;/a&gt;. Use openFramework&#39;s projectGenerator and import /particle_life/ folder to the project.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, generate a new openFramework project and add ofxGui. Once the project files are generated replace the /src/ folder with the one provided here.&lt;/p&gt; &#xA;&lt;p&gt;You can now compile the C++ code on your machine.&lt;/p&gt; &#xA;&lt;h2&gt;Other Ports:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NiclasEriksen/game-of-leif&#34;&gt;Godot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChevyRay/smarticles&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sikora507/go-artificial-life&#34;&gt;golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ravener/love-life&#34;&gt;Lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CapsAdmin/webgl-particles&#34;&gt;Webgl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/helloimalemur/ParticleSimulation&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BlinkSun/ParticleLifeSimulation&#34;&gt;C# Winforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freebasic.net/forum/viewtopic.php?p=294331#p294331&#34;&gt;FreeBasic&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The JavaScript code is as simple as this:&lt;/h2&gt; &#xA;&lt;p&gt;Also, look at the particle_life.html file for a more optimized version - thanks to those who have contributed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;canvas id=&#34;life&#34; width=&#34;500&#34; height=&#34;500&#34;&amp;gt;&amp;lt;/canvas&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  //Hunar Ahmad @ brainxyz&#xA;  m = document.getElementById(&#34;life&#34;).getContext(&#34;2d&#34;);&#xA;  draw = (x, y, c, s) =&amp;gt; {&#xA;    m.fillStyle = c;&#xA;    m.fillRect(x, y, s, s);&#xA;  };&#xA;  atoms = [];&#xA;  atom = (x, y, c) =&amp;gt; {&#xA;    return { x: x, y: y, vx: 0, vy: 0, color: c };&#xA;  };&#xA;  random = () =&amp;gt; {&#xA;    return Math.random() * 400 + 50;&#xA;  };&#xA;  create = (number, color) =&amp;gt; {&#xA;    group = [];&#xA;    for (let i = 0; i &amp;lt; number; i++) {&#xA;      group.push(atom(random(), random(), color));&#xA;      atoms.push(group[i]);&#xA;    }&#xA;    return group;&#xA;  };&#xA;  rule = (atoms1, atoms2, g) =&amp;gt; {&#xA;    for (let i = 0; i &amp;lt; atoms1.length; i++) {&#xA;      fx = 0;&#xA;      fy = 0;&#xA;      for (let j = 0; j &amp;lt; atoms2.length; j++) {&#xA;        a = atoms1[i];&#xA;        b = atoms2[j];&#xA;        dx = a.x - b.x;&#xA;        dy = a.y - b.y;&#xA;        d = Math.sqrt(dx * dx + dy * dy);&#xA;        if (d &amp;gt; 0 &amp;amp;&amp;amp; d &amp;lt; 80) {&#xA;          F = (g * 1) / d;&#xA;          fx += F * dx;&#xA;          fy += F * dy;&#xA;        }&#xA;      }&#xA;      a.vx = (a.vx + fx) * 0.5;&#xA;      a.vy = (a.vy + fy) * 0.5;&#xA;      a.x += a.vx;&#xA;      a.y += a.vy;&#xA;      if (a.x &amp;lt;= 0 || a.x &amp;gt;= 500) { a.vx *= -1; }&#xA;      if (a.y &amp;lt;= 0 || a.y &amp;gt;= 500) { a.vy *= -1; }&#xA;    }&#xA;  };&#xA;  yellow = create(200, &#34;yellow&#34;);&#xA;  red = create(200, &#34;red&#34;);&#xA;  green = create(200, &#34;green&#34;);&#xA;  update = () =&amp;gt; {&#xA;    rule(green, green, -0.32);&#xA;    rule(green, red, -0.17);&#xA;    rule(green, yellow, 0.34);&#xA;    rule(red, red, -0.1);&#xA;    rule(red, green, -0.34);&#xA;    rule(yellow, yellow, 0.15);&#xA;    rule(yellow, green, -0.2);&#xA;    m.clearRect(0, 0, 500, 500);&#xA;    draw(0, 0, &#34;black&#34;, 500);&#xA;    for (i = 0; i &amp;lt; atoms.length; i++) {&#xA;      draw(atoms[i].x, atoms[i].y, atoms[i].color, 5);&#xA;    }&#xA;    requestAnimationFrame(update);&#xA;  };&#xA;  update();&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Related topics: Particle Life Simulation, Primordial Soup - Evolution, Conway&#39;s game of life, Cellular automata, Self organzing patterns,&lt;/p&gt; &#xA;&lt;p&gt;This project was inspired by: Jeffery Ventrella&#39;s Clusters &lt;a href=&#34;http://www.ventrella.com/Clusters/&#34;&gt;http://www.ventrella.com/Clusters/&lt;/a&gt;. I do not have access to Ventrella&#39;s code but I guess the main difference of this project from the other particle life projects is that I did not implement collision detection and this made simulating thousands of particles possible in real-time. Also, I added GUI controls to change the parameters in real-time allowing easy fine-tuning and exploration, hence, I was able to find some never-seen-before patterns emerge form some extremely simple models of relations. The code here is probably an order of magnitude simpler than any other Artificial Life codes out there because I started this code solely as an educational material for non-programmers and general audience to prove the point that complexity can arise from simplicity.&lt;/p&gt; &#xA;&lt;h2&gt;Todos:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Adding the ability to save and load parameters (so that people can easily share the interesting models they find)&lt;/li&gt; &#xA; &lt;li&gt;Ability to add more particle types (currently it is fixed to four particle types)&lt;/li&gt; &#xA; &lt;li&gt;Currently, the biggest bottleneck is the nested for-loops (which calculate the pairwise distance among all particles) making the computational complexity quadratic. It would be amazing if we could find a way around.&lt;/li&gt; &#xA; &lt;li&gt;Alternative to point 3, computing the pairwise distances are embarrassingly parallel so it can be computed on GPU.&lt;/li&gt; &#xA; &lt;li&gt;Adding the ability to resize the screen and improving boundary-checking as many fast moving particles can escape the screen bounds.&lt;/li&gt; &#xA; &lt;li&gt;Adding a more intuitive UI so that it gives the ability for a finer control over the parameters.&lt;/li&gt; &#xA; &lt;li&gt;Adding a randomize button or, even better, having a simple meta rule to mutate the initial rule continously and recursively. This way the patterns will never get stuck on a local maximum and will keep changing!&lt;/li&gt; &#xA; &lt;li&gt;A better way to fine-tune is to use an evolutionary algorithm to select and optimize the parameters but one needs to write a fitness function for that. I currently don&#39;t know what fitness function corresponds to in the realm of this program. In our world the fitness function is competition and survival of the fittest. However, here we fine-tune and select the parameters that produce interesting patterns for us but the word &#34;interesting&#34; is easier to say than to define!&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>gobitfly/eth2-beaconchain-explorer</title>
    <updated>2022-09-17T01:33:59Z</updated>
    <id>tag:github.com,2022-09-17:/gobitfly/eth2-beaconchain-explorer</id>
    <link href="https://github.com/gobitfly/eth2-beaconchain-explorer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source golang based explorer for the eth2 beacon chain&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eth2 Beacon Chain Explorer&lt;/h1&gt; &#xA;&lt;p&gt;The explorer provides a comprehensive and easy to use interface for the upcoming Eth2 beacon chain. It makes it easy to view proposed blocks, follow attestations and monitor your staking activity.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gobitfly/eth2-beaconchain-explorer/actions?query=workflow%3A%22Build+%26+Publish+Docker+images%22&#34;&gt;&lt;img src=&#34;https://github.com/gobitfly/eth2-beaconchain-explorer/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/gobitfly/beaconchain-explorer?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/gobitfly/eth2-beaconchain-explorer?color=%2334D058&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/gobitfly/eth2-beaconchain-explorer&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/gobitfly/eth2-beaconchain-explorer&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gitpoap.io/gh/gobitfly/eth2-beaconchain-explorer&#34;&gt;&lt;img src=&#34;https://public-api.gitpoap.io/v1/repo/gobitfly/eth2-beaconchain-explorer/badge&#34; alt=&#34;GitPOAP Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;The explorer is built using golang and utilizes a PostgreSQL database for storing and indexing data. In order to avoid the situation we currently have with the Eth1 chain where closed source block explorers dominate the market we decided to make our explorer open source and available for everybody.&lt;/p&gt; &#xA;&lt;h3&gt;Eth 2.0 Testnet Explorers&lt;/h3&gt; &#xA;&lt;p&gt;Prysm &lt;a href=&#34;https://beaconcha.in&#34;&gt;beaconcha.in&lt;/a&gt;&lt;br&gt; Lighthouse &lt;a href=&#34;https://lighthouse.beaconcha.in&#34;&gt;lighthouse.beaconcha.in&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The explorer is still under heavy active development. More or less everything might change without prior notice and we cannot guarantee any backwards compatibility for now. Once the eth2 ecosystem matures we will be able to provide stronger guarantees about the updatability of the explorer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/26490734/120495328-e351f800-c3bc-11eb-92a8-e93fbde24539.png&#34; alt=&#34;Site&#34; title=&#34;Beacon Chain Web Interface Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bootstrap based and mobile first web interface&lt;/li&gt; &#xA; &lt;li&gt;Fast and robust blockchain indexing engine, able to handle missed, duplicate &amp;amp; forked blocks&lt;/li&gt; &#xA; &lt;li&gt;Index page &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto refresh - Index page data is automatically updated every 15 seconds&lt;/li&gt; &#xA;   &lt;li&gt;Basic chain statistics (current epoch, current slot, active validators, pending validators, staked ether)&lt;/li&gt; &#xA;   &lt;li&gt;Information on the 20 most recent blocks (epoch, slot, time, proposer, hash, number of attestations, deposits, slahsings and voluntary exits)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Epochs page &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pageable tabular view of all epochs (epoch, time, blocks, attestations, slashings, exits, finalization status, voting statistics)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Blocks page &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pageable tabular view of all blocks (epoch, time, proposer, hash, attestations, slashings, exits)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Block page &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Basic block info (epoch, slot, status, time, proposer, root hash, parent hash, state root hash, signature, randao reveal, graffiti, eth1 data)&lt;/li&gt; &#xA;   &lt;li&gt;List of attestations included in the block&lt;/li&gt; &#xA;   &lt;li&gt;List of deposits included in the block&lt;/li&gt; &#xA;   &lt;li&gt;List of LMD GHOST votes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Validators page &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pageable tabular view of all pending, active and ejected validators&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Validator page &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Basic validator info (index, current balance, current effective balance, status, slashed, active since, exited on)&lt;/li&gt; &#xA;   &lt;li&gt;Historic balance evolution chart&lt;/li&gt; &#xA;   &lt;li&gt;List of proposed and missed blocks&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Visualizations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Live visualization of blocks being added to the blockchain&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ToDo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add chain statistic charts&lt;/li&gt; &#xA; &lt;li&gt;Improve design, move away from stock bootstrap 4&lt;/li&gt; &#xA; &lt;li&gt;Use a proper open source charting library&lt;/li&gt; &#xA; &lt;li&gt;Come up with a smarter exporter logic (the current logic is stupid as it simply dumps the contents of the RPC calls into the database without doing any pre-aggregation or cleanups)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;We currently do not provide any pre-built binaries of the explorer. Docker images are available at &lt;a href=&#34;https://hub.docker.com/repository/docker/gobitfly/eth2-beaconchain-explorer&#34;&gt;https://hub.docker.com/repository/docker/gobitfly/eth2-beaconchain-explorer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the latest version of the Prysm beacon chain client and start it with the &lt;code&gt;--archive&lt;/code&gt; flag set&lt;/li&gt; &#xA; &lt;li&gt;Wait till the client finishes the initial sync&lt;/li&gt; &#xA; &lt;li&gt;Setup a PostgreSQL DB and import the &lt;code&gt;tables.sql&lt;/code&gt; file from the root of this repository&lt;/li&gt; &#xA; &lt;li&gt;Install go version 1.13 or higher&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository and run &lt;code&gt;make all&lt;/code&gt; to build the indexer and front-end binaries&lt;/li&gt; &#xA; &lt;li&gt;Copy the config-example.yml file and adapt it to your environment&lt;/li&gt; &#xA; &lt;li&gt;Start the explorer binary and pass the path to the config file as argument&lt;/li&gt; &#xA; &lt;li&gt;To build bootstrap run &lt;code&gt;npm run --prefix ./bootstrap dist-css&lt;/code&gt; in project folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing locally with docker&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;docker-compose up&lt;/code&gt; to start instances of the following containers &lt;code&gt;eth1&lt;/code&gt;, &lt;code&gt;prysm&lt;/code&gt;, &lt;code&gt;postgres&lt;/code&gt; and &lt;code&gt;golang&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a new terminal in project directory and run &lt;code&gt;docker run -it --rm --net=host -v $(pwd):/src postgres psql -f /src/tables.sql -d db -h 0.0.0.0 -U postgres&lt;/code&gt; to create new tables in the database&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Wait for the client to finish initial sync, you can check this by looking at logs of &lt;code&gt;prysm&lt;/code&gt; instance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;config-example.yml&lt;/code&gt; file and adapt it to your environment.&lt;br&gt; In your &lt;code&gt;.yml&lt;/code&gt; file specify &lt;code&gt;eth1Endpoint&lt;/code&gt; as &lt;code&gt;&#39;./private/eth1_node/.ethereum/goerli/geth.ipc&#39;&lt;/code&gt;. For database information check &lt;code&gt;postgres&lt;/code&gt; section in &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to &lt;code&gt;golang&lt;/code&gt; instance by running &lt;code&gt;docker exec -ti golang bash&lt;/code&gt; and run &lt;code&gt;make all&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the explorer binary and pass the path to the config file as argument&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./bin/explorer --config your_config.yml   &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Install golint. (see &lt;a href=&#34;https://github.com/golang/lint&#34;&gt;https://github.com/golang/lint&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Commercial usage&lt;/h2&gt; &#xA;&lt;p&gt;The explorer uses Highsoft charts which are not free for commercial and governmental use. If you plan to use the explorer for commercial purposes you currently need to purchase an appropriate HighSoft license. We are planning to switch out the Highsoft chart library with a less restrictive charting library (suggestions are welcome).&lt;/p&gt;</summary>
  </entry>
</feed>