<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-17T01:31:32Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>usds/website</title>
    <updated>2025-02-17T01:31:32Z</updated>
    <id>tag:github.com,2025-02-17:/usds/website</id>
    <link href="https://github.com/usds/website" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;USDS website&lt;/h1&gt; &#xA;&lt;p&gt;The USDS website is built with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; via the &lt;a href=&#34;https://rubygems.org/gems/github-pages&#34;&gt;github-pages gem&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://pages.github.com/versions/&#34;&gt;current dependencies&lt;/a&gt; for GitHub Pages&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://designsystem.digital.gov/&#34;&gt;U.S. Web Design System v3 (USWDS)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before getting started, install the following on your system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/documentation/installation/&#34;&gt;Ruby&lt;/a&gt;(v 3.1.3)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/npm/cli&#34;&gt;NPM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deployment steps&lt;/h2&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://github.com/usds/website-management#how-to-use-the-usds-website-staging-environment&#34;&gt;How to use staging environment&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install and run a development environment&lt;/h2&gt; &#xA;&lt;h3&gt;Initial setup&lt;/h3&gt; &#xA;&lt;p&gt;We recommmend that you use a Docker container to run the site as a development environment because of dependency and version collisions. This allows the site to run in a contained place, minimizing setup issues.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t usds-website . --no-cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run locally, with and without live reload&lt;/h3&gt; &#xA;&lt;p&gt;Run this command to have a local version on &lt;code&gt;http://localhost:4080&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 4080:4000  --name usdsweb usds-website&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to make changes and have them update on the running container we need to map the active source code in to the container with a volume mount and expose the port for livereload. This should ensure that changes you make are being mapped to the /app director and refresh on the running container. Note the volume mount syntax for &lt;code&gt;pwd&lt;/code&gt; might be different on Windows or a non Bash shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 4080:4000  -p 35729:35729 -v $(pwd):/app --name usdsweb usds-website&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development environment for sharing on cloud.gov&lt;/h3&gt; &#xA;&lt;p&gt;Builds staging Jekyll site using &lt;code&gt;JEKYLL_ENV=staging&lt;/code&gt;. Staging builds are used for temporary testing on cloud.gov. Do not deploy a staging build to GitHub pages.&lt;/p&gt; &#xA;&lt;p&gt;Staging sites are one-off, per-user builds in a cloud.gov sandbox. Handy for testing and gathering feedback.&lt;/p&gt; &#xA;&lt;p&gt;To create a cloud.gov staging build:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run build-staging&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Log in to cloud.gov cli, &lt;code&gt;cf&lt;/code&gt; (TODO: details here)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cf push&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Create a cloud.gov account and configure Cloud Foundry&lt;/h4&gt; &#xA;&lt;p&gt;If you haven&#39;t used cloud.gov before, you&#39;ll want to set up&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.gov/docs/getting-started/accounts/&#34;&gt;Determine if you have access to cloud.gov&lt;/a&gt; and follow instructions to &lt;a href=&#34;https://cloud.gov/docs/getting-started/setup/&#34;&gt;sign up&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Log in to your cloud.gov dashboard and install and configure &lt;a href=&#34;https://cloud.gov/docs/getting-started/setup/&#34;&gt;Cloud Foundry&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A successful push will print a staging url next to &lt;code&gt;routes&lt;/code&gt;, ex: &lt;code&gt;website-staging-foo-bar-ab.app.cloud.gov&lt;/code&gt;. Visit the staging url to preview your build.&lt;/p&gt; &#xA;&lt;h3&gt;Visual regression tests&lt;/h3&gt; &#xA;&lt;p&gt;To compare current actual screenshots with the established base images: &lt;code&gt;npm run visual-regression&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When pages are intentionally changed, refresh the base images with &lt;code&gt;npm run visual-refresh&lt;/code&gt;. This creates/updates base images and a &lt;code&gt;sitemap.json file&lt;/code&gt;. Commit these along with the page changes.&lt;/p&gt; &#xA;&lt;p&gt;A GitHub workflow automatically runs the regression script when a pull request targeting the &lt;code&gt;staging&lt;/code&gt; branch is created or updated. A summary of results will appear as a comment on the PR. If a refresh is needed, users can activate the refresh script by manually running the &lt;code&gt;Visual regression tesing&lt;/code&gt; Action and providing the PR number. New/updated base images will be added to the PR.&lt;/p&gt; &#xA;&lt;h3&gt;Automated Accessibility testing&lt;/h3&gt; &#xA;&lt;p&gt;This website relies on Cypress and cypress-axe to identify page-level accessibility issues. Hopefully, the issues identified in this testing are caught earlier in the development process using a combination of a good accessibility linter such as &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter&#34;&gt;axe-Linter&lt;/a&gt; and a browser plugin such as &lt;a href=&#34;https://accessibilityinsights.io/docs/web/overview/&#34;&gt;Microsoft Accessibility Insights&lt;/a&gt;. This type of testing is to catch any errors missed.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the tests are designed to test work as you develop locally. When you implement any changes in the UI, open the cypress e2e tests with &lt;code&gt;npm run cypress:open&lt;/code&gt;. These tests will inject the axe-core library into the page-level instance and run the accessibility API.&lt;/p&gt; &#xA;&lt;p&gt;Once you open cypress, select e2e testing and select your browser for testing. At this point you may click on the individual page-level tests. This will open a browser instance directly to the test, cypress will render the whole page. Accessibility violations will be visible on the left of the browser instance.&lt;/p&gt; &#xA;&lt;p&gt;Additional output is in the browser console, which you&#39;ll want to open. With the console open, you can now click on any of the issues in the test body, and learn more information about the error and how to resolve it.&lt;/p&gt; &#xA;&lt;p&gt;The accessibility.cy.js file runs a loop through all the pages, which may prove useful for future accessibility testing. A developer could more fully integrate cypress-axe testing with the CICD build process -- breaking the build if any accessibility error is detected.&lt;/p&gt; &#xA;&lt;p&gt;Additional Resources about Cypress-axe:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cypress-axe&#34;&gt;Cypress-axe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://timdeschryver.dev/blog/setting-up-cypress-with-axe-for-accessibility&#34;&gt;Setting up Cypress with axe for accessibility&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintenance&lt;/h2&gt; &#xA;&lt;h3&gt;Tickets&lt;/h3&gt; &#xA;&lt;p&gt;Tickets are in &lt;a href=&#34;https://github.com/usds/website-management&#34;&gt;website-management&lt;/a&gt;. Board is (&lt;a href=&#34;https://github.com/orgs/usds/projects/77/views/1&#34;&gt;https://github.com/orgs/usds/projects/77/views/1&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: make tickets in &lt;code&gt;website-management&lt;/code&gt; not here.&lt;/p&gt; &#xA;&lt;h3&gt;USWDS and custom styles&lt;/h3&gt; &#xA;&lt;p&gt;We use USWDS version 3. Most of the styles are built off of v2.12.0, but the underlying framework is v3. The &lt;code&gt;scss&lt;/code&gt; is in &lt;code&gt;assets/stylesheets/uswds&lt;/code&gt;, with the entry of &lt;code&gt;index.scss&lt;/code&gt;. &lt;code&gt;uswds-settings.scss&lt;/code&gt; has custom variables and &lt;code&gt;styles.scss&lt;/code&gt; has custom scss.&lt;/p&gt; &#xA;&lt;h4&gt;Change theme settings&lt;/h4&gt; &#xA;&lt;p&gt;Custom USWDS theme settings are declared in &lt;code&gt;assets/stylesheets/uswds/_uswds-theme-*.scss&lt;/code&gt;. Use these files to &lt;a href=&#34;https://designsystem.digital.gov/documentation/settings/&#34;&gt;add or remove utilities, edit variables, or change how the design system builds&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After updating, make a &lt;a href=&#34;https://raw.githubusercontent.com/usds/website/master/#running-and-building&#34;&gt;new build or restart your localhost&lt;/a&gt; to see any changes.&lt;/p&gt; &#xA;&lt;h4&gt;Updating USWDS&lt;/h4&gt; &#xA;&lt;p&gt;To update a major version of &lt;code&gt;uswds&lt;/code&gt;, consult their documentation. The &lt;code&gt;package.json&lt;/code&gt; settings will allow for minor and patch updates as a matter of course.&lt;/p&gt; &#xA;&lt;h3&gt;Content updates&lt;/h3&gt; &#xA;&lt;h4&gt;Uploading images&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usds/website/tree/master/images&#34;&gt;/images&lt;/a&gt;: This folder contains &lt;em&gt;editorial photos&lt;/em&gt; and other images for People cards and pages, Project cards and pages, event logos for the Events cards and page, and other areas that are likely to change semi-frequently.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usds/website/tree/master/assets/img&#34;&gt;/assets/img&lt;/a&gt;: Site assets and evergreen images such as page banners/headers and vector graphics should be placed in the assets/img folder here. The images in this folder typically will not be subject to change.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Adding Content&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usds/website/wiki/Adding-People-(carousel-and-pages)&#34;&gt;How to add people&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usds/website/wiki/Adding-projects-(carousel-and-pages)&#34;&gt;How to add projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usds/website/wiki/Adding-a-simple-page&#34;&gt;How to add a new page without HTML&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>