<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-26T01:28:02Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Codewithshobhit/Happy-Holi-Animation-Using-HTML-And-CSS</title>
    <updated>2024-03-26T01:28:02Z</updated>
    <id>tag:github.com,2024-03-26:/Codewithshobhit/Happy-Holi-Animation-Using-HTML-And-CSS</id>
    <link href="https://github.com/Codewithshobhit/Happy-Holi-Animation-Using-HTML-And-CSS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>susam/fxyt</title>
    <updated>2024-03-26T01:28:02Z</updated>
    <id>tag:github.com,2024-03-26:/susam/fxyt</id>
    <link href="https://github.com/susam/fxyt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tiny, esoteric, stack-based, postfix, canvas colouring language with only 36 simple commands&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FXYT&lt;/h1&gt; &#xA;&lt;p&gt;FXYT is a tiny canvas colouring language that consists of 36 simple stack-based commands. The input code is evaluated for each cell of a 256x256 graphical canvas. The colour of each cell is determined by the result of the evaluation. Here is an extremely simple FXYT code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XY^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://susam.net/fxyt.html#XYx&#34;&gt;&lt;img src=&#34;https://susam.github.io/blob/img/fxyt/fxyt-0.1.0-xor.png&#34; alt=&#34;Screenshot of XOR pattern&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See some more demos here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://susam.net/fxyt.html#XYxTN1srN255pTN1sqD&#34;&gt;Demo 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://susam.net/fxyt.html#XYaTN1srN255pTN1sqN0&#34;&gt;Demo 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://susam.net/fxyt.html#XYoTN1srN255pTN1sqDN0S&#34;&gt;Demo 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://susam.net/fxyt.html#XYpTN1srN255pTN1sqD&#34;&gt;Demo 4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://susam.net/fxyt.html#XYN256sTdrD&#34;&gt;Demo 5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/demo.md&#34;&gt;Community Demos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://susam.net/fxyt.html&#34;&gt;https://susam.net/fxyt.html&lt;/a&gt; to write your own code!&lt;/p&gt; &#xA;&lt;p&gt;This project is inspired by Martin Kleppe&#39;s &lt;a href=&#34;https://github.com/aemkei/tixy&#34;&gt;Tixy&lt;/a&gt; project. While Tixy supports JavaScript expressions to determine the size and colour of circles in a 16x16 grid, FXYT comes with its own tiny, stack-based language that is written in postfix notation. Further, FXYT provides a 256x256 grid of cells each of which can be painted with an arbitrary colour determined by the result of the evaluation of the input code.&lt;/p&gt; &#xA;&lt;p&gt;This project is intentionally minimal in nature. It is intended to be a creative code golfing playground that offers the challenge of crafting interesting visuals with a limited set of commands.&lt;/p&gt; &#xA;&lt;p&gt;FXYT stands for &lt;em&gt;function of x, y, and t&lt;/em&gt; and it may be pronounced /fɪksɪt/ (&#34;fixit&#34;).&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#coordinates&#34;&gt;Coordinates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#data-stack&#34;&gt;Data Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#loop-control-stack&#34;&gt;Loop Control Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#colours&#34;&gt;Colours&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#integers&#34;&gt;Integers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#arithmetic&#34;&gt;Arithmetic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#division-by-zero&#34;&gt;Division by Zero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#comparison&#34;&gt;Comparison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#inversion&#34;&gt;Inversion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#bitwise-operations&#34;&gt;Bitwise Operations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#clip&#34;&gt;Clip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#duplicate&#34;&gt;Duplicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#pop&#34;&gt;Pop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#swap&#34;&gt;Swap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#rotate&#34;&gt;Rotate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#loops&#34;&gt;Loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#frame-interval&#34;&gt;Frame Interval&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#print-data-stack&#34;&gt;Print Data Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#idioms&#34;&gt;Idioms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#common-mistakes&#34;&gt;Common Mistakes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#constraints&#34;&gt;Constraints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#distributable-links&#34;&gt;Distributable Links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#more&#34;&gt;More&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Coordinates&lt;/h2&gt; &#xA;&lt;h3&gt;X&lt;/h3&gt; &#xA;&lt;p&gt;Enter the following code in the input field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;X&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output consists of a blue gradient spread across the canvas that gradually changes from black on the left hand side to bright blue on the right hand side.&lt;/p&gt; &#xA;&lt;p&gt;The input code is evaluated for each cell in a 256x256 graphical canvas. Each cell has a coordinate which we represent here as (x, y) where x represents the column of the cell and y represents the row of the cell. The value of x varies from 0 to 255 as we move from the leftmost column to the rightmost column. Similarly, the value of y varies from 0 to 255 as we move from the bottommost row to the topmost row.&lt;/p&gt; &#xA;&lt;p&gt;Thus the cell at the bottom-left corner of the canvas has the coordinate (0, 0). Similarly, the cell at the top-right corner of the canvas has the coordinate (255, 255).&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;code&gt;X&lt;/code&gt; pushes the x-coordinate value of the current cell to the data stack. When the above piece of code is evaluated for each cell in the canvas, we get the result 0 for all cells at x = 0, the result 1 for all cells at x = 1, and so on up to the final column where the result is 255 for all cells at x = 255. The result obtained for each cell determines the colour of each cell. In particular, in this example, the result obtained for each cell determines the blue component of the colour of each cell. As a result, all cells at x = 0 appear black and all cells at x = 255 appear bright blue.&lt;/p&gt; &#xA;&lt;h3&gt;Y&lt;/h3&gt; &#xA;&lt;p&gt;Now enter the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We get a blue gradient again. However, this time the blue gradient changes from black to bright blue as we move gradually from the bottommost row of cells at y = 0 to the topmost row at y = 255.&lt;/p&gt; &#xA;&lt;h3&gt;T&lt;/h3&gt; &#xA;&lt;p&gt;Finally, enter the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;T&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we get an output that changes with time where the colour of the entire canvas changes from black to blue gradually in 256 iterations.&lt;/p&gt; &#xA;&lt;p&gt;We call any input code that contains at least one occurrence of the &lt;code&gt;T&lt;/code&gt; command as time-dependent code. Such code is evaluated in 256 iterations represented with the time variable t that changes from t = 0 to t = 255. By default, there is a 100 ms interval between two iterations. This interval is known as the frame interval.&lt;/p&gt; &#xA;&lt;p&gt;Thus we can say that any time-dependent code is evaluated for each cell at the coordinate (x, y, t) where the x-value and y-value represent the location of the cell as explained before and t represents the current iteration.&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;code&gt;T&lt;/code&gt; pushes the t-value of the current iteration to the stack. When the above piece of code is evaluated, we get the result 0 for all cells at t = 0, the result 1 for all cells at t = 1, and so on up to the final iteration when the result is 255 for all cells at t = 255. As a result, the colour of all the cells change from dark to bright blue gradually with each iteration.&lt;/p&gt; &#xA;&lt;h2&gt;Data Stack&lt;/h2&gt; &#xA;&lt;p&gt;The runtime environment contains exactly one data stack. Most FXYT commands manipulate this data stack. This data stack can contain at most 8 integer values. It is an error to push a value to the stack when the stack is full.&lt;/p&gt; &#xA;&lt;p&gt;In the remainder of this document, sometimes we will provide examples of stack. Such examples will be written using an array notation where the elements that appear on the left are at the bottom of the stack and the elements on the right are at the top of the stack. For example, a stack that contains (from bottom to top) the values 10, 20, 30, and 40 will be written as [10, 20, 30, 40]. If we push 50 to this stack, we will write the resulting stack as [10, 20, 30, 40, 50].&lt;/p&gt; &#xA;&lt;h2&gt;Loop Control Stack&lt;/h2&gt; &#xA;&lt;p&gt;Apart from the data stack, there is a loop control stack. Unlike the data stack, the loop control stack cannot be manipulated directly. The loop control stack is an internal implementation detail of the two looping commands &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; introduced later in this document. Each entry in the loop control stack is a pair of integers: loop counter and loop body position. This stack can contain at most 8 such entries. As a result, while executing nested loops, at most 8 nested loop bodies can be entered. It is an error to enter a loop that is 9 levels deep. To learn more about loops, see the section &lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#loops&#34;&gt;Loops&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Colours&lt;/h2&gt; &#xA;&lt;p&gt;Commands of FXYT manipulate the data stack. As mentioned before, the input code is evaluated for each cell at (x, y) for time-independent code. If the input code is time-dependent, then it is evaluated for each cell at (x, y, t).&lt;/p&gt; &#xA;&lt;p&gt;At the end of evaluation of the code for each cell, the top 3 values of the data stack is inspected to determine the red, blue, and green (RGB) components of the colour of the cell. The value at the top of the data stack is used as the blue component, the second value from the top is the green component, and the third value from the top is the red component.&lt;/p&gt; &#xA;&lt;p&gt;Suppose the data stack looks like the following after the evaluation of the input code for a certain cell: [10, 20, 30, 40, 50]. Then the colour used to paint that cell in RGB notation is rgb(30, 40, 50).&lt;/p&gt; &#xA;&lt;p&gt;For example, consider the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;YYY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When this code is evaluated for each cell of the canvas, the y-coordinate value of the cell is pushed to the data stack three times. At the end of each evaluation, the three values at the top of the data stack determine the RGB components of the colour. Since they are all equal, we get a shade of grey for each cell.&lt;/p&gt; &#xA;&lt;p&gt;If less than three values exist on the data stack at the end of evaluation, then values for the missing RGB components are set to 0. For example, consider the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;YY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the end of evaluation, the data stack contains only two values, so they decide the values of the blue and green components. The red component is set to 0. Thus each cell gets a shade of cyan. Finally consider this code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This time we get only one value on the data stack at the end of each evaluation and that only value determines the blue component of the colour of each cell.&lt;/p&gt; &#xA;&lt;p&gt;If the data stack is empty at the end of evaluation, then all three components of the RGB colour is set to 0 and the corresponding cell is painted black. For example, consider the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;X&lt;/code&gt; command pushes the x-coordinate value to the data stack but then the &lt;code&gt;P&lt;/code&gt; command pops it off the data stack. Thus the data stack becomes empty at the end of each evaluation. As a result, all cells are painted black. In fact, when the input code is empty, the evaluation of the empty code results in an empty stack thus leading to a black canvas too.&lt;/p&gt; &#xA;&lt;p&gt;The three values at the top of the data stack must be integers between 0 and 255, inclusive, because they are interpreted as the red, blue, and green components of the resulting RGB colour. If any value among these three values is negative, it is an error. Similarly, if any of these values exceed 255, it is an error.&lt;/p&gt; &#xA;&lt;p&gt;If an error occurs during the evaluation of the code, the error is displayed in the status panel and the entire canvas is painted red.&lt;/p&gt; &#xA;&lt;h2&gt;Integers&lt;/h2&gt; &#xA;&lt;p&gt;The commands &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt;, and &lt;code&gt;T&lt;/code&gt; push integer values to the data stack that correspond to the x, y, and t coordinates, respectively, of the current cell. It is also possible to place arbitrary integers on the stack by using &lt;code&gt;N&lt;/code&gt; along with the digit commands introduced in this section.&lt;/p&gt; &#xA;&lt;p&gt;The following code pushes the integer 0 to the data stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;N&lt;/code&gt; command stands for &lt;em&gt;nil&lt;/em&gt; which pushes the nil value (the zero value) to the data stack.&lt;/p&gt; &#xA;&lt;p&gt;A digit command like &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, etc. multiplies the value at the top of the data stack with 10 and adds the integer value of the digit to it. For example, consider the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N125&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are 4 distinct commands in this code: &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;5&lt;/code&gt;. The evaluation of these commands occur as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;N&lt;/code&gt; pushes the value 0 to the data stack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt; multiplies the value 0 at the top of the data stack with 10 and then adds 1 to it to get 1. Thus the value at the top of the stack is now 1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt; multiplies the value 1 at the top of the data stack with 10 and then adds 2 to it to get 12.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;5&lt;/code&gt; multiplies the value 12 at the top of the data stack with 10 and then adds 5 to it to get 125.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Thus at the end of the evaluation, the value at the top of the data stack is 125.&lt;/p&gt; &#xA;&lt;p&gt;The command sequence consisting of &lt;code&gt;N&lt;/code&gt; followed by some digits is an idiom for composing an integer on the data stack. For example, the following code places the three integers 147, 112, and 219 to the stack.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N147N112N219&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The data stack looks like [147, 112, 219] at the end of the evaluation and each cell of the canvas gets painted with the RGB colour (147, 112, 219) thereby making the entire canvas look medium purple.&lt;/p&gt; &#xA;&lt;h2&gt;Arithmetic&lt;/h2&gt; &#xA;&lt;p&gt;The commands &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;%&lt;/code&gt; perform arithmetic operations. Each command pops two values from the data stack, performs the arithmetic operation, and pushes the result back to the data stack.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following code leaves the result 120 on the data stack.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N70N50+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command sequence &lt;code&gt;N70&lt;/code&gt; leaves the integer 70 on the data stack. Then the command sequence &lt;code&gt;N50&lt;/code&gt; puts another integer 50 on the data stack. Finally, the command &lt;code&gt;+&lt;/code&gt; replaces both integers with their sum.&lt;/p&gt; &#xA;&lt;p&gt;The commands &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;%&lt;/code&gt; perform the addition, subtraction, multiplication, division, and modulus operations, respectively. These commands are explained with the following examples:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Result&lt;/th&gt; &#xA;   &lt;th&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XY+&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;X + Y&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XY-&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;X - Y&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XY*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;X * Y&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XY/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;X / Y&lt;/td&gt; &#xA;   &lt;td&gt;Fractional part is discarded&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XY%&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;X mod Y&lt;/td&gt; &#xA;   &lt;td&gt;Result lies between 0 and Y - 1, inclusive&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note that in case of subtraction, the value at the top of the data stack is subtracted from the second value from the top of the data stack. Similarly, in case of division and modulo, the value at the top of the data stack divides the second value from the top of the data stack.&lt;/p&gt; &#xA;&lt;p&gt;Also note that all arithmetic operations result in integers. Thus any fractional part is discarded from the result. For example, the following code leaves the result 7 on the data stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N73N10/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following code leaves the result -7 on the data stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NN73-N10/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The modulo command leaves a nonnegative remainder that is less than the divisor. For example, the following code leaves the remainder 2 (not -3) on the data stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NN8-N5%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Division by Zero&lt;/h2&gt; &#xA;&lt;p&gt;The FXYT evaluator has different modes for handling division by zero. The default mode is mode 0 in which any division by zero is considered an error. When such an error occurs, the evaluator halts and the entire canvas is painted red.&lt;/p&gt; &#xA;&lt;p&gt;In mode 1, when division by zero occurs while evaluating the code for a certain cell, the error is ignored and the cell is painted black.&lt;/p&gt; &#xA;&lt;p&gt;In mode 2, when division by zero occurs while evaluating the code for a certain cell, the error is ignored and the cell is painted red instead.&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;code&gt;M&lt;/code&gt; can be used to change modes. Each &lt;code&gt;M&lt;/code&gt; increments the mode number. It is an error to increment the mode number to 3.&lt;/p&gt; &#xA;&lt;p&gt;The following code demonstrates the default behaviour which leads to an error because a division by zero occurs at the coordinate (0, 0):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XY%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following code demonstrates mode 1 where division by zero error is ignored and the cells at which such errors occur are painted black.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MXY%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following code demonstrates mode 2 where division by zero error is ignored and the cells at which such errors occur are painted red.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MMXY%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In practice, &lt;code&gt;M&lt;/code&gt; (mode 1) may be useful to get a nice output with division by zero errors ignored. The command sequence &lt;code&gt;MM&lt;/code&gt; (mode 2) on the other hand may be useful to conspicously display all cells where division by zero error occurred.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison&lt;/h2&gt; &#xA;&lt;p&gt;The commands &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&lt;/code&gt; perform comparison operations. Each command pops two values from the data stack, compares them, and pushes the result of the comparison back to the data stack. The result of each comparison command is explained in table below:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Result&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XY=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1 if X = Y, 0 otherwise&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XY&amp;lt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1 if X &amp;lt; Y, 0 otherwise&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XY&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1 if X &amp;gt; Y, 0 otherwise&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For example, the following code leaves the value 1 on the data stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XX=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following code leaves the value 0 on the data stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N1N2=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following code draws a blue diagonal along the cells (x, y) where x = y:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XY=N255*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inversion&lt;/h2&gt; &#xA;&lt;p&gt;The command &lt;code&gt;!&lt;/code&gt; may be used to invert the result of comparison. Precisely speaking, this command changes the integer at the top of the stack according to these two simple rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the integer at the top of the data stack is 0, change it to 1.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise change it to 0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following code paints all cells blue except the ones on the x = y diagonal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XY=!N255*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bitwise Operations&lt;/h2&gt; &#xA;&lt;p&gt;The commands &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, and &lt;code&gt;|&lt;/code&gt; perform bitwise operations on integer values. Each command pops two values from the data stack, performs bitwise operations on them, and pushes the result back to the data stack. The result of each command is explained in the table below:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Result&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XY^&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;X bitwise-XOR Y&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XY&amp;amp;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;X bitwise-AND Y&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XY|&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;X bitwise-OR Y&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Clip&lt;/h2&gt; &#xA;&lt;p&gt;The command &lt;code&gt;C&lt;/code&gt; clips the value at the top of the data stack between 0 and 255. This can be useful for ensuring that a value at the top of the data stack is always a valid colour value.&lt;/p&gt; &#xA;&lt;p&gt;Consider the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XY+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code produces an error at the cell (1, 255) where this code evaluates to the result 266. However, adding the command &lt;code&gt;C&lt;/code&gt; as follows resolves the error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XY+C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now whenever the result exceeds 255, the &lt;code&gt;C&lt;/code&gt; command clips the result to 255 thus leading to a valid value for the blue component of the cell&#39;s colour.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, while the code &lt;code&gt;XY-&lt;/code&gt; produces an error, the code &lt;code&gt;XY-C&lt;/code&gt; doees not. Whenever the result is negative, the command &lt;code&gt;C&lt;/code&gt; clips the result to 0.&lt;/p&gt; &#xA;&lt;h2&gt;Duplicate&lt;/h2&gt; &#xA;&lt;p&gt;The command &lt;code&gt;D&lt;/code&gt; duplicates one item on the data stack. It pushes a copy of the value at the top of the data stack to the top. For example, consider the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N1N2N3D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting stack is [1, 2, 3, 3].&lt;/p&gt; &#xA;&lt;h2&gt;Pop&lt;/h2&gt; &#xA;&lt;p&gt;The command &lt;code&gt;P&lt;/code&gt; pops one item off the top of the data stack. The popped value is dropped. For example, consider the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N1N2N3P&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting stack is [1, 2]. 2.&lt;/p&gt; &#xA;&lt;h2&gt;Swap&lt;/h2&gt; &#xA;&lt;p&gt;The command &lt;code&gt;S&lt;/code&gt; swaps the two values at the top of the data stack. For example, consider the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N1N2N3S&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting stack is [1, 3, 2].&lt;/p&gt; &#xA;&lt;h2&gt;Rotate&lt;/h2&gt; &#xA;&lt;p&gt;The command &lt;code&gt;R&lt;/code&gt; rotates the three values at the top of the data stack such that the third value from the top of the data stack moves to the top, the value at the top of the data stack moves to the second place from the top, and the second value from the top of the data stack moves to the third place from the top. For example, consider the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N1N2N3N4N5R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting stack is [1, 2, 4, 5, 3].&lt;/p&gt; &#xA;&lt;h2&gt;Loops&lt;/h2&gt; &#xA;&lt;p&gt;Looping is supported with the commands &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;. Each time &lt;code&gt;[&lt;/code&gt; is encountered, the evaluator picks a loop counter from the data stack and remembers the code position after the &lt;code&gt;[&lt;/code&gt; as the beginning of the loop body. It maintains this information in the loop control stack. The loop control stack is not directly accessible to the programmer. It is an internal implementation detail of the commands &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To elaborate, the command &lt;code&gt;[&lt;/code&gt; pops off one value from the data stack and uses this value as the loop counter. The command that comes after the &lt;code&gt;[&lt;/code&gt; is considered to be the beginning of the loop body. If the loop counter is a positive integer, the loop body is entered. Otherwise, a corresponding &lt;code&gt;]&lt;/code&gt; is found (nested &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; pairs are skipped) and the evaluator skips ahead to the command after the corresponding &lt;code&gt;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;code&gt;]&lt;/code&gt; decrements the loop counter of the current loop. After decrementing the loop counter, if its value is still positive, then the evaluator jumps back to the beginning of the current loop&#39;s body. Otherwise, the evaluator exits the loop. While exiting a loop, the current loop&#39;s data is removed from the loop control stack.&lt;/p&gt; &#xA;&lt;p&gt;Consider the following input code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NN5[N10+]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At first, &lt;code&gt;N&lt;/code&gt; pushes the integer 0 to the data stack. We will refer to this place of the data stack where 0 has been pushed as the &lt;em&gt;initial place&lt;/em&gt;. The remainder of the code will increment the value in this initial place. The command sequence &lt;code&gt;N5&lt;/code&gt; places the integer 5 on the stack. Then &lt;code&gt;[&lt;/code&gt; pops off 5 from the data stack, uses it as the loop counter, and begins a loop. Each iteration of the loop executes &lt;code&gt;N10+&lt;/code&gt; which adds the integer 10 to the value in the initial place. Each time &lt;code&gt;]&lt;/code&gt; is encountered, the loop counter is decremented by 1 and if the loop counter is still 0, the evaluator jumps back to the beginning of the loop body. As a result, the loop containing &lt;code&gt;N10+&lt;/code&gt; is executed 5 times before the loop counter becomes 0 and the loop is exited. Thus the value at the initial place is incremented by 50. When the evaluation completes, the value 50 is left on the data stack.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of nested loops that leaves the value 200 on the data stack.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NN5[N10[N4+]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Frame Interval&lt;/h2&gt; &#xA;&lt;p&gt;The frame interval determines the time interval between two consecutive iterations of the evaluator for time-dependent code. The default frame interval is 100 ms. The frame interval may be changed with the command &lt;code&gt;F&lt;/code&gt;. This command pops an integer value from the top of the data stack. It is an error if the popped value is negative. If the popped value is nonnegative, it is considered to be a candidate frame interval expressed in milliseconds. The frame interval thus obtained during the evaluation of the cell (0, 0) is set as the frame interval between the current iteration and next iteration of evaluation.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following code sets the frame interval to 500 ms and executes a time-dependent code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N1000FXT^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember that the input code is evaluated for each cell. It is possible to write code such the evaluation of the code for different cells leads to different frame intervals. As explained earlier, it is the frame interval set in the evaluation of cell (0, 0) that determines the frame interval for the next iteration of evaluation. For example, consider the following time-dependent code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XY+N200+FT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example, the command &lt;code&gt;F&lt;/code&gt; pops an integer value 200 while the code is evaluated at the cell (0, 0). However it pops an integer value 710 when the same code is evaluated at the cell (255, 255). The frame interval for the next iteration of evaluation is thus 200 ms (not 710 ms).&lt;/p&gt; &#xA;&lt;p&gt;The renderer for time-dependent code tries to schedule each iteration of the evaluation in such a manner that the average frame interval equals the set frame interval. However, if the frame interval is set to a very small value (say, less than 100 ms or so), the renderer may fail to maintain the set frame interval on an average, especially, when the time to render the canvas exceeds the chosen frame interval.&lt;/p&gt; &#xA;&lt;h2&gt;Print Data Stack&lt;/h2&gt; &#xA;&lt;p&gt;The command &lt;code&gt;W&lt;/code&gt; provides a very minimal debugging facility. It prints the current coordinate followed by the data stack to the status panel and halts evaluation.&lt;/p&gt; &#xA;&lt;p&gt;Type the following code as the input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XYW&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following data should appear in the status panel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(0, 0) -&amp;gt; [0, 0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During the evaluation of the code at coordinate (0, 0), the &lt;code&gt;W&lt;/code&gt; command prints the coordinate (0, 0) followed by the data stack [0, 0] and halts the evaluation.&lt;/p&gt; &#xA;&lt;p&gt;A more typical requirement may to be find out what the input code evaluates to at a particular coordinate. This can be accomplished by combining comparison commands with looping commands. Here is an example that shows the result of evaluating &lt;code&gt;XY^&lt;/code&gt; at the coordinate (7, 9):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XY^XN7=YN9=&amp;amp;[W]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For each cell, first &lt;code&gt;XY^&lt;/code&gt; is evaluated and the result is left on the stack. Then &lt;code&gt;XN7=&lt;/code&gt; compares if x-coordinate value equals 7 and pushes the result (either 1 or 0) to the data stack. Similarly, &lt;code&gt;YN9=&lt;/code&gt; compares if the y-coordinate value equals 9 and pushes the result (either 1 or 0) to the data stack. Then &lt;code&gt;&amp;amp;&lt;/code&gt; pops both the comparison results and combines them with the bitwise AND operation and pushes the result to the data stack. Note that this command pushes 1 if both comparisons earlier evaluated to 1, otherwise 0 is pushed to the stack. Thus the following loop body is entered if and only if x = 7 and y = 9. As soon as the loop body is entered, &lt;code&gt;W&lt;/code&gt; writes the current coordinate (7, 9) and the result 14 (the bitwise XOR of 7 and 9 is 14) and halts the evaluation.&lt;/p&gt; &#xA;&lt;h2&gt;Idioms&lt;/h2&gt; &#xA;&lt;p&gt;The following idioms may be useful while writing FXYT code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To place an arbitrary positive integer on the data stack, write &lt;code&gt;N&lt;/code&gt; followed by the decimal digits of the integer. For example, &lt;code&gt;N105&lt;/code&gt; places the integer 105 on the data stack. The code &lt;code&gt;N105&lt;/code&gt; may be informally read as the &lt;em&gt;number 105&lt;/em&gt;. See the section &lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#integers&#34;&gt;Integers&lt;/a&gt; to learn more about why this works.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To place an arbitrary negative integer on the data stack, write &lt;code&gt;NN&lt;/code&gt; followed by the digits of the integer followed by &lt;code&gt;-&lt;/code&gt;. For example, &lt;code&gt;NN105-&lt;/code&gt; places the integer -105 on the data stack. The code &lt;code&gt;NN105-&lt;/code&gt; may be informally read as the &lt;em&gt;negative number 105&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To increment an integer at the top of the data stack, write &lt;code&gt;N1+&lt;/code&gt;. Similarly, to decrement an integer at the top of the data stack, write &lt;code&gt;N1-&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To check if the top two values on the data stack are unequal, write &lt;code&gt;=!&lt;/code&gt;. This replaces the two values at the top of the data stack with 1 if they are unequal, 0 otherwise. See section &lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/#inversion&#34;&gt;Inversion&lt;/a&gt; for details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To execute a block of code conditionally, push 1 on the data stack if the block should be executed and 0 otherwise, and then write a loop with the code block in it. For example, the code &lt;code&gt;YN10=[N255]&lt;/code&gt; places the integer 255 on the data stack if the y-coordinate value equals 10.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Common Mistakes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forgetting to write &lt;code&gt;N&lt;/code&gt; before entering a new integer is a common mistake. For example, the code &lt;code&gt;X1+&lt;/code&gt; does not push x-coordinate value and increment it by 1. Instead it is an error. Remember that &lt;code&gt;1&lt;/code&gt; (a digit command) multiplies the existing number at the top of the data stack with 10 and then adds 1 to it. Thus &lt;code&gt;X1&lt;/code&gt; effectively replaces the integer x on the stack with 10x + 1. The &lt;code&gt;+&lt;/code&gt; command then fails to add two integers at the top of the data stack because the data stack contains only one integer. The correct input code may be something like &lt;code&gt;XN1+&lt;/code&gt; instead. Always remember to write &lt;code&gt;N&lt;/code&gt; while forming a new integer on the data stack.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Constraints&lt;/h2&gt; &#xA;&lt;p&gt;The reference implementation that comes with this project enforces the following constraints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Whenever a command produces an integer result, the result must not not exceed 2147483647 and it must not be less than -2147483648.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The input code must not exceed 256 bytes in length.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The number of commands executed to evaluate the colour for a cell must not exceed 1000.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If any of these contraints are violated during evaluation, the evaluation halts with an error.&lt;/p&gt; &#xA;&lt;h2&gt;Distributable Links&lt;/h2&gt; &#xA;&lt;p&gt;The reference implementation provides distributable links when the input code is 64 bytes or less in length. Note that the implementation allows code up to a maximum length of 256 bytes. However, no distributable link is generated when the code length exceeds 64 bytes. Thus code that does not exceed 64 bytes in length has a special status in the reference implementation.&lt;/p&gt; &#xA;&lt;p&gt;The distributable link encodes the input code and appends it as a URL fragment to the address of the current page. Copy the URL with the encoded input code embedded in it from the address bar of the web browser in order to share it with others. When the recipient of the URL opens it with their web browser, the implementation reads the code embedded in the URL, decodes it, and executes it.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Can you add feature X to this project?&lt;/p&gt; &lt;p&gt;I have no intention of adding new features to this project. The language defined and implemented by this project is intentionally minimal. Inspired by esoteric programming languages with concise instruction sets, this tiny drawing language is meant to serve as a challenge for creating interesting visuals using a limited set of commands.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This is free and open source software. You can use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of it, under the terms of the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;This software is provided &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, express or implied. See &lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;To report bugs or ask questions, &lt;a href=&#34;https://github.com/susam/fxyt/issues&#34;&gt;create issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/susam/invaders&#34;&gt;Andromeda Invaders&lt;/a&gt;, a 1980s-arcade-style game written using HTML5, Canvas, and Web Audio.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/susam/cfrs&#34;&gt;CFRS[]&lt;/a&gt;, an extremely minimal turtle graphics language with only 6 simple commands.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/susam/fxyt/main/demo.md&#34;&gt;demo.md&lt;/a&gt; for FXYT community demos.&lt;/p&gt; &#xA;&lt;!--&#xA;Release Checklist&#xA;-----------------&#xA;&#xA;- Update version in package.json.&#xA;- Update version in HTML (1 place).&#xA;- Update copyright in HTML (1 place).&#xA;- Update copyright in LICENSE.md.&#xA;- Disable logging.&#xA;- Update CHANGES.md.&#xA;- Run: npm run lint&#xA;- Run: git status; git add -p&#xA;- Run: VERSION=&lt;VERSION&gt;&#xA;- Run: git commit -em &#34;Set version to $VERSION&#34;&#xA;- Run: git tag $VERSION -m &#34;FXYT $VERSION&#34;&#xA;- Run: git push origin main $VERSION&#xA;--&gt;</summary>
  </entry>
  <entry>
    <title>wintermute-cell/magick.css</title>
    <updated>2024-03-26T01:28:02Z</updated>
    <id>tag:github.com,2024-03-26:/wintermute-cell/magick.css</id>
    <link href="https://github.com/wintermute-cell/magick.css" rel="alternate"></link>
    <summary type="html">&lt;p&gt;magically playful, yet simple styling. all in one file.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;magick.css&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;magically playful, yet simple styling. all in one file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;img alt=&#34;a wizard&#34; src=&#34;https://raw.githubusercontent.com/wintermute-cell/magick.css/master/wizard.webp&#34; width=&#34;240&#34; height=&#34;240&#34;&gt; &#xA;&lt;h3&gt;Translations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wintermute-cell/magick.css/master/translations/zh-CN.md&#34;&gt;中文 (Simplified Chinese)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Feel free to contribute a translation to your language!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What is magick.css?&lt;/h2&gt; &#xA;&lt;p&gt;magick.css is a minimalistic, (mostly) classless CSS framework that is designed to be easy to use and easy to understand. It is contained in a single file, and every choice is commented. The goal is to achieve an elegant, but magically playful look, while maximizing readability and the ability to convey information; &lt;em&gt;somewhat akin to the notes of a wizard&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The framework retains its beauty and functionality across all devices and screen sizes, and works entirely without JavaScript. It is inspired by &lt;a href=&#34;https://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;, old school TTRPG rulebooks, CSS frameworks like &lt;a href=&#34;https://concrete.style/&#34;&gt;concrete.css&lt;/a&gt; and &lt;a href=&#34;https://edwardtufte.github.io/tufte-css/&#34;&gt;Tufte CSS&lt;/a&gt; and the &#34;usability as design&#34; ethic of brutalism.&lt;/p&gt; &#xA;&lt;h2&gt;What does it look like?&lt;/h2&gt; &#xA;&lt;p&gt;You can find a live example of magick.css being used &lt;a href=&#34;https://css.winterveil.net&#34;&gt;on my website&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;How do I use magick.css?&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;magick.css is built with &lt;a href=&#34;https://necolas.github.io/normalize.css/&#34;&gt;normalize.css&lt;/a&gt;. While it will look 90% correct without, it is recommended to use normalize.css.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;CDN&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to check out magick.css for your own project is to add it from a CDN. Just add these two lines to your html &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/normalize.css&#34;&amp;gt;&#xA;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/magick.css&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Local File&lt;/h3&gt; &#xA;&lt;p&gt;You could also just download the &lt;code&gt;magick.css&lt;/code&gt; file from this repo, and include it into your html &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; as you normally would:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;path/to/magick.css&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JS/NPM&lt;/h3&gt; &#xA;&lt;p&gt;You could also add &lt;code&gt;magick.css&lt;/code&gt; to your JS project like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install normalize.css magick.css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And import them in your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#39;normalize.css&#39;&#xA;import &#39;magick.css&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ports&lt;/h2&gt; &#xA;&lt;p&gt;magick.css currently also available as...&lt;/p&gt; &#xA;&lt;h3&gt;Obsidian.md Theme&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I don&#39;t like the hoops theme developers have to jump through to publish their work on the official theme gallery of a proprietary, monetized product. There is no compensation for their hard work beyond the donations of generous users; all the while Obsidian.md benefits greatly from them. That&#39;s why the Obsidian.md theme version of magick.css is not available in the official gallery.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Still, Obsidian.md is a useful tool for a lot of people. That&#39;s why I&#39;ve made the effort to port this CSS framework to Obsidian.md. You can install it by...&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Downloading &lt;code&gt;ports/obsidian.md/magick.css.zip&lt;/code&gt; from this repo.&lt;/li&gt; &#xA; &lt;li&gt;Unpacking it into the Obsidian.md theme directory. You can find this directory by pressing the folder icon next to the &lt;code&gt;Appearance &amp;gt; Themes&lt;/code&gt; setting inside of Obsidian.md&lt;/li&gt; &#xA; &lt;li&gt;If the theme is not immediately selectable, try restarting Obsidian.md to refresh.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>