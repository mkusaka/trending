<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-24T01:35:28Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>filipedeschamps/tabnews.com.br</title>
    <updated>2022-11-24T01:35:28Z</updated>
    <id>tag:github.com,2022-11-24:/filipedeschamps/tabnews.com.br</id>
    <link href="https://github.com/filipedeschamps/tabnews.com.br" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Conteúdos de valor concreto para quem vive de programação e tecnologia.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tabnews.com.br&lt;/h1&gt; &#xA;&lt;h2&gt;Instalar e rodar o projeto&lt;/h2&gt; &#xA;&lt;p&gt;Rodar o TabNews em sua máquina local é uma tarefa extremamente simples.&lt;/p&gt; &#xA;&lt;h3&gt;Dependências globais&lt;/h3&gt; &#xA;&lt;p&gt;Você precisa ter duas principais dependências instaladas:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js LTS v16 (ou qualquer versão superior)&lt;/li&gt; &#xA; &lt;li&gt;Docker Engine v17.12.0 com Docker Compose v1.24.1 (ou qualquer versão superior)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Utiliza &lt;code&gt;nvm&lt;/code&gt;? Então pode executar &lt;code&gt;nvm install&lt;/code&gt; na pasta do projeto para instalar e utilizar a versão mais apropriada do Node.js.&lt;/p&gt; &#xA;&lt;h3&gt;Dependências locais&lt;/h3&gt; &#xA;&lt;p&gt;Então após baixar o repositório, não se esqueça de instalar as dependências locais do projeto:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rodar o projeto&lt;/h3&gt; &#xA;&lt;p&gt;Para rodar o projeto localmente, basta rodar o comando abaixo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Isto irá automaticamente rodar serviços como Banco de dados (incluindo as Migrations), Servidor de Email e irá expor um Serviço Web (Frontend e API) no seguinte endereço:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http://localhost:3000/&#xA;http://localhost:3000/api/v1/status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Observações:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Para derrubar todos os serviços, basta utilizar as teclas &lt;code&gt;CTRL+C&lt;/code&gt;, que é o padrão dos terminais para matar processos.&lt;/li&gt; &#xA; &lt;li&gt;Você pode conferir o endereço dos outros serviços dentro do arquivo &lt;code&gt;.env&lt;/code&gt; encontrado na raiz do projeto, como por exemplo o endereço e credenciais do Banco de Dados local ou o Frontend do Serviço de Email.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cadastro e Login de usuários&lt;/h3&gt; &#xA;&lt;p&gt;No ambiente de desenvolvimento você poderá tanto criar usuários manualmente (inclusive para receber e testar o email de ativação), quanto utilizar usuários pré-cadastrados e que já foram ativados para sua conveniência.&lt;/p&gt; &#xA;&lt;h4&gt;Manualmente criar um usuário&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Após subir os serviços, acesse &lt;a href=&#34;http://localhost:3000/cadastro&#34;&gt;http://localhost:3000/cadastro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Preencha os dados e utilize &lt;strong&gt;qualquer email&lt;/strong&gt; com formato válido, mesmo que este email não exista, por exemplo: &lt;code&gt;teste@teste.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;O backend irá enviar um email para o servidor &lt;strong&gt;local&lt;/strong&gt; de emails e que pode ser acessado pelo endereço &lt;a href=&#34;http://localhost:1080/&#34;&gt;http://localhost:1080/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Abra o email de Ativação e acesse o link para ativar sua conta de fato.&lt;/li&gt; &#xA; &lt;li&gt;Com a conta ativa, realize o login: &lt;a href=&#34;http://localhost:3000/login&#34;&gt;http://localhost:3000/login&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Utilizar usuários pré-cadastrados&lt;/h4&gt; &#xA;&lt;p&gt;Por padrão, ao rodar o comando &lt;code&gt;npm run dev&lt;/code&gt; será injetado dois usuários ativados, um com features padrões e outro com features administrativas como a habilidade de rodar as Migrations usando a API ou alterar o conteúdo de outros usuários. Segue abaixo as credenciais destes dois usuários (&lt;code&gt;&#34;email&#34;&lt;/code&gt; + &lt;code&gt;&#34;senha&#34;&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Usuário Admin&lt;/strong&gt;: &lt;code&gt;&#34;admin@admin.com&#34;&lt;/code&gt; + &lt;code&gt;&#34;password&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Usuário padrão&lt;/strong&gt;: &lt;code&gt;&#34;user@user.com&#34;&lt;/code&gt; + &lt;code&gt;&#34;password&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rodar os testes&lt;/h2&gt; &#xA;&lt;p&gt;Há várias formas de rodar os testes dependendo do que você deseja fazer, mas o primeiro passo antes de fazer qualquer alteração no projeto é rodar os testes de forma geral para se certificar que tudo está passando como esperado. O comando abaixo irá rodar todos os serviços necessários, rodar os testes e em seguida derrubar todos os serviços.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Caso queira manter os serviços e testes rodando enquanto desenvolve (e rodando novamente a cada alteração), use o comando abaixo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run test&lt;span&gt;⌚&lt;/span&gt;services&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Os logs do Serviço Web e Jest (dos testes) irão se misturar, então caso queira rodar eles de forma separada, abra dois terminais separados e rode o seguinte:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Terminal 1&#xA;npm run dev&#xA;&#xA;# Terminal 2&#xA;npm run test:watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Caso não queira dar &lt;code&gt;watch&lt;/code&gt; em todos os testes e queira isolar apenas 1 arquivo de teste (ou um grupo de testes), você pode utilizar um simples &lt;code&gt;regex&lt;/code&gt; para dar &lt;code&gt;match&lt;/code&gt; no que quiser, por exemplo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Rodar apenas /tests/api/v1/_use-cases/registration-flow.test.js&#xA;npm run test:watch -- registration-flow&#xA;&#xA;# Rodar todos os testes de &#34;users&#34; da api &#34;v1&#34;&#xA;npm run test:watch -- v1/users/&#xA;&#xA;# Rodar apenas /tests/api/v1/users/[username]/patch.test.js&#xA;npm run test:watch -- username./patch&#xA;&#xA;# tests/integration/api/v1/contents/[username]/[slug]/get.test.js&#xA;npm run test:watch -- contents/.username./.slug./get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Observações:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A forma como é tratado o caminho dos arquivos pode mudar dependendo do seu sistema operacional.&lt;/li&gt; &#xA; &lt;li&gt;A forma como o seu terminal interpreta caracteres especiais como &lt;code&gt;/&lt;/code&gt; ou &lt;code&gt;[&lt;/code&gt; pode mudar, mas você poderá usar &lt;code&gt;regex&lt;/code&gt; para evitar usar esses caracteres, como por exemplo utilizar o &lt;code&gt;.&lt;/code&gt; que representa o &lt;code&gt;match&lt;/code&gt; com qualquer caractere. Isto foi utilizado nos exemplos acima para evitar os caracteres &lt;code&gt;[&lt;/code&gt; e &lt;code&gt;]&lt;/code&gt; dos arquivos.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Criar novas Migrations&lt;/h2&gt; &#xA;&lt;p&gt;Você pode utilizar o script &lt;code&gt;migration:create&lt;/code&gt;, por exemplo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run migration:create alter table users add tabcoins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Isto irá resultar em:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Created migration -- ./infra/migrations/1655399502254_alter-table-users-add-tabcoins.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Caso esta nova migração esteja válida, ela será automaticamente executada na próxima vez que você rodar o comando &lt;code&gt;npm run dev&lt;/code&gt;. Caso contrário, o serviço não irá subir e os logs de erro estarão registrados no arquivo &lt;code&gt;migrations.log&lt;/code&gt; encontrado na raiz do projeto.&lt;/p&gt; &#xA;&lt;h2&gt;Commit das alterações&lt;/h2&gt; &#xA;&lt;p&gt;Após finalizar suas alterações e se certificar que todos os testes estão passando com o comando geral &lt;code&gt;npm test&lt;/code&gt;, chegou a hora de fazer o commit das suas alterações.&lt;/p&gt; &#xA;&lt;p&gt;Para ser auxiliado no padrão de commit que utilizamos, rode o comando abaixo e siga as instruções:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Diário de Desenvolvimento&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/filipedeschamps/tabnews.com.br/wiki&#34;&gt;Acessar o diário&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribuidores&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/filipedeschamps/tabnews.com.br/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=filipedeschamps/tabnews.com.br&amp;amp;max=500&#34; alt=&#34;Lista de contribuidores&#34; width=&#34;100%&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>schemaorg/schemaorg</title>
    <updated>2022-11-24T01:35:28Z</updated>
    <id>tag:github.com,2022-11-24:/schemaorg/schemaorg</id>
    <link href="https://github.com/schemaorg/schemaorg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Schema.org - schemas and supporting software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to Schema.org&lt;/h1&gt; &#xA;&lt;p&gt;This is the Schema.org project repository. It contains all the schemas, examples and software used to publish schema.org. For the site itself, please see &lt;a href=&#34;https://schema.org/&#34;&gt;Schema.org&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;Note: Much of the supporting software is imported from a sub module: &#39;sdopythonapp&#39;&lt;/p&gt; &#xA;&lt;p&gt;Issues and proposals are managed here by participants of the &lt;a href=&#34;https://www.w3.org/community/schemaorg/&#34;&gt;W3C Schema.org Community Group&lt;/a&gt;. If you are interested to participate please join the group at the &lt;a href=&#34;https://www.w3.org/community/schemaorg/&#34;&gt;W3C&lt;/a&gt;, introduce yourself and find or file issues here that engage your interest. If you are new to Git and GitHub, there&#39;s a useful &lt;a href=&#34;https://www.w3.org/2006/tools/wiki/Github&#34;&gt;introduction to Github&lt;/a&gt; in the W3C Wiki.&lt;/p&gt; &#xA;&lt;p&gt;There are also continuous integration tests to check incoming pull requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/schemaorg/schemaorg/issues/1&#34;&gt;Issue #1&lt;/a&gt; in Github is an entry point for release planning. It should provide an overview of upcoming work, in terms of broad themes, specific issues and release milestones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/schemaorg/schemaorg/issues/1&#34;&gt;Issue #1&lt;/a&gt; will link to per-release entry points, or else navigate issues via label or milestone within Github. Every change to the site comes via discussions here. Substantive changes are recorded in our &lt;a href=&#34;https://schema.org/docs/releases.html&#34;&gt;release notes&lt;/a&gt;. A preview of the &lt;a href=&#34;http://webschemas.org/docs/releases.html&#34;&gt;draft new release notes&lt;/a&gt; can be found as part of the test site for our next release. Every month or so, after final review by the Schema.org Steering Group and wider community, we make a formal release.&lt;/p&gt; &#xA;&lt;p&gt;Regarding CC and opensource licenses for documents and software, see our &lt;a href=&#34;https://schema.org/docs/faq.html#18&#34;&gt;FAQ entry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Improving schemas&lt;/h1&gt; &#xA;&lt;p&gt;We are always interested in practical suggestions for improvements to schema.org, and our collection of schemas has been &lt;a href=&#34;http://schema.org/docs/releases.html&#34;&gt;growing gradually&lt;/a&gt; since our launch in 2011.&lt;/p&gt; &#xA;&lt;p&gt;We try to &lt;a href=&#34;https://lists.w3.org/Archives/Public/public-schemaorg/2015Dec/0016.html&#34;&gt;prioritize&lt;/a&gt; simple fixes and improvements to our existing schemas, examples and documentation over the addition of new vocabulary, and we are most likely to add new schemas when there is evidence that some (preferably large-scale) consuming application will make use of the data. Consuming applications need not be search engines; software tools e.g. opensource, markup-enriched approaches to Web analytics, browser add-ons or cloud tools are all rich areas for exploration and collaboration. The important thing is that there should be some reasonable expectation of data consumers making good use of the changes. It is not sufficient to justify additions on the basis that search engines generally try to use Schema.org-based structured data. Smaller changes, and backwards-compatible changes, are easier to incorporate.&lt;/p&gt; &#xA;&lt;p&gt;Note that Schema.org does &lt;em&gt;not&lt;/em&gt; attempt to capture the full detail of Web content; it is necessarily a simplification of a more complex reality. This means that there will be many cases where adding more detail to Schema.org will look possible. However, in the interests of keeping Schema.org simple and usable for publishers and webmasters, we will often choose not to add such detail. Schema.org uses Web standards such as JSON-LD, Microdata and RDFa to allow for &lt;a href=&#34;http://schema.org/docs/extension.html&#34;&gt;independent extension&lt;/a&gt; (for example, see &lt;a href=&#34;http://gs1.org/voc&#34;&gt;GS1&#39;s vocabulary&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;We are also highly unlikely to take on large scale reorganizations of Schema.org&#39;s terminology, if they are motivated solely by considerations of elegance, &#34;proper modeling&#34;, ontological purity or conceptual unification. Although the project founders and team are familiar with - and respectful of - the traditions behind such concerns, the scale, scope and nature of Schema.org has required us to trade elegance and global consistency for a somewhat scruffier notion of incremental evolution and a pragmatic tolerance for a style that would be out of place in a formal ontology. Proposals for unifying, cross-domain logic-based knowledge structures may be better received e.g. in the &lt;a href=&#34;https://groups.google.com/forum/#!forum/ontolog-forum&#34;&gt;Ontolog&lt;/a&gt; community.&lt;/p&gt; &#xA;&lt;p&gt;We sometimes introduce types without dedicated property associations, simply for markup usability reasons. In a formal ontology, this is often considered poor modeling. However, logically equivalent structures can result in many more errors from publishers/webmasters unfamiliar with the underlying formal concepts behind JSON-LD or RDF/S. Schema.org is not a closed system, and other initiatives e.g. Wikidata or &lt;a href=&#34;http://gs1.org/voc/&#34;&gt;GS1&lt;/a&gt; have defined many other terms that can be mixed in alongside those we define at schema.org. We also make efforts to align our designs to relevant external standards and initiatives, even when it reduces the global elegance of Schema.org considered alone. For example in a bibliographic or cultural heritage context we may be influenced by initiatives like MARC, BibFrame, and FRBR, while for e-commerce we collaborated with &lt;a href=&#34;http://blog.schema.org/2012/11/good-relations-and-schemaorg.html&#34;&gt;Good Relations&lt;/a&gt; and GS1. Schema.org&#39;s &lt;a href=&#34;https://schema.org/docs/news.html&#34;&gt;news&lt;/a&gt;-related terms were heavily influenced by incorporating &lt;a href=&#34;https://iptc.org/standards/rnews/&#34;&gt;IPTC&#39;s rNews&lt;/a&gt; design, alongside collaborations with &lt;a href=&#34;https://courses.poynter.org/courses/course-v1:newsu+nwsu_ClaimReview2017+2017_1/about&#34;&gt;fact checkers&lt;/a&gt;, the &lt;a href=&#34;https://thetrustproject.org/&#34;&gt;Trust Project&lt;/a&gt;, and others. Our TV and Music related vocabularies are heavily influenced by working with the &lt;a href=&#34;https://www.bbc.co.uk/ontologies/po&#34;&gt;BBC and the European Broadcasting Union&lt;/a&gt;, alongside &lt;a href=&#34;http://musicontology.com/docs/getting-started.html&#34;&gt;the Music ontology&lt;/a&gt; and &lt;a href=&#34;https://musicbrainz.org/doc/LinkedBrainz/RDF&#34;&gt;MusicBrainz&lt;/a&gt;; our schemas reflect these prior designs. We prefer to collaborate in this way, improving Schema.org incrementally and working to polish, integrate and blend such designs rather than produce our own pure model in isolation. The result may lack global elegance but brings our work into alignment with related efforts worldwide.&lt;/p&gt; &#xA;&lt;p&gt;We always welcome issues that track usability and readability issues, but encourage a focus on concrete situations (e.g. how to describe repeating events) rather than global philosophical concerns (e.g. whether a Reservation or Action is &#34;really&#34; an Event). We prioritize local coherence (having sensible ways to describe many common situations) over global elegance (having a global theory in which everything has a sensible place). This doesn&#39;t mean we never have cleanups, but they are balanced against (and often outweighed by) other considerations.&lt;/p&gt; &#xA;&lt;p&gt;When we add terms, often into the &#34;Pending&#34; area, we strongly encourage feedback that takes a global perspective: how does a new term relate to others, how could it be used alongside pre-existing patterns, etc. The changes we make during this integration phase reflect such considerations, but are usually expressed through modest rewording, examples, or adjustment to the documentation of type/property links, rather than through major restructuring.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Suggestions for improvements are always welcome here - please search for older discussions (including closed issues) before opening a new issue.&lt;/li&gt; &#xA; &lt;li&gt;We particularly value improvements to existing definitions, examples and text, to clarify how schema.org vocabulary is used in practice.&lt;/li&gt; &#xA; &lt;li&gt;Please don&#39;t be surprised or offended if you raise an issue proposing new schemas and it is marked by the project team as &#34;&lt;a href=&#34;https://github.com/schemaorg/schemaorg/issues?q=is%3Aissue+label%3A%22Closed+and+Noted+%28and+possibly+Queued%29%22+is%3Aclosed&#34;&gt;noted&lt;/a&gt;&#34; then closed. We have 100s of issues discussing possible improvements, and to keep things manageable we adopt the convention of noting then closing issues that are not likely to be immediately explored.&lt;/li&gt; &#xA; &lt;li&gt;While many Schema.org improvements have been proposed via Github&#39;s &#34;&lt;a href=&#34;https://help.github.com/articles/about-pull-requests/&#34;&gt;Pull request&lt;/a&gt;&#34; mechanism (see also our list of &lt;a href=&#34;https://github.com/schemaorg/schemaorg/pulls&#34;&gt;PRs&lt;/a&gt;), please do not undertake any substantial development work without agreeing it with the project team here first.&lt;/li&gt; &#xA; &lt;li&gt;All Pull Requests should reference specific issues that they&#39;re fixes or solutions for. This lets the schema.org community discuss problems and topics without it being tied too closely to a specific (and easily outdated) proposed fix.&lt;/li&gt; &#xA; &lt;li&gt;Please note that some changes are much easier to make than others: the wording/phrasing in definitions is relatively easy to amend, whereas the exact spelling of a type or property (&#39;Person&#39;, &#39;startDate&#39; etc.) is much more disruptive to change.&lt;/li&gt; &#xA; &lt;li&gt;There are many other projects developing schemas and ontologies for the Web, e.g. &lt;a href=&#34;http://wikidata.org/&#34;&gt;Wikidata&lt;/a&gt; or the vocabulary projects in the &lt;a href=&#34;http://lov.okfn.org/&#34;&gt;Linked Data&lt;/a&gt; community. Many of these projects go into more expressive detail than is possible for a project like Schema.org. To keep Schema.org manageable, we have a strong bias towards designs that are grounded in large scale usage on the Web, in particular &lt;a href=&#34;https://github.com/schemaorg/schemaorg/issues/652&#34;&gt;usage&lt;/a&gt; by data-consuming applications since these in turn motivate data publishers. Other schema initiatives have different priorities and make different tradeoffs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See more on &lt;a href=&#34;https://schema.org/docs/howwework.html&#34;&gt;&#34;How we work&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Software&lt;/h1&gt; &#xA;&lt;p&gt;For most collaborators, all you need to know about the software is how to run it.&lt;/p&gt; &#xA;&lt;p&gt;The objective of the software is to create a static copy of the Schema.org site, including potential local changes, to inspect and run behind a simple web server on a local system for testing. In the same way that a production release is deployed to a cloud server, your local version could then be deployed to a virtual machine using gcloud to enable collaboration with others.&lt;/p&gt; &#xA;&lt;p&gt;Full instructions are available in &lt;a href=&#34;https://raw.githubusercontent.com/schemaorg/schemaorg/main/software/SOFTWARE_README.md&#34;&gt;SOFTWARE_README.md&lt;/a&gt; explaining how to create the initial local copy to work with, then evolve to test out any changes.&lt;/p&gt; &#xA;&lt;p&gt;Essentially you will need to have a Linux-like (inc Mac) environment loaded with Python version 3.6 or above. You can then make test builds of schema.org running on your own machine accessible as &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt; or else post them on appspot.com for collaboration. See the &lt;a href=&#34;https://cloud.google.com/appengine/docs&#34;&gt;Appengine documentation&lt;/a&gt; for details of the relevant gcloud commands.&lt;/p&gt; &#xA;&lt;p&gt;More detailed information about the software and is use is available in &lt;a href=&#34;https://raw.githubusercontent.com/schemaorg/schemaorg/main/software/SOFTWARE_README.md&#34;&gt;SOFTWARE_README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also notes in the wiki: &lt;a href=&#34;https://github.com/schemaorg/schemaorg/wiki/Contributing&#34;&gt;https://github.com/schemaorg/schemaorg/wiki/Contributing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Formats and standards&lt;/h1&gt; &#xA;&lt;p&gt;All schemas and examples are in data/ in utf-8 encoded files.&lt;/p&gt; &#xA;&lt;p&gt;The main schemas file is data/schema.ttl (utf-8)&lt;/p&gt; &#xA;&lt;p&gt;While developing schemas, using data/sdo-somethinghere-schema.ttl can be useful.&lt;/p&gt; &#xA;&lt;p&gt;The format is based on W3C RDFS in RDF/Turtle format.&lt;/p&gt; &#xA;&lt;p&gt;The examples are stored in data/examples.txt (utf-8) and other *.txt files.&lt;/p&gt; &#xA;&lt;p&gt;As with schemas, data/*examples.txt will also be read. It can be useful to develop using separate files. When vocabulary is finally integrated into the main repository, schema data will be merged into schema.org. However examples will stay in separate files, as this works better with git&#39;s file comparison machinery.&lt;/p&gt; &#xA;&lt;p&gt;The data/releases/ hierarchy is reserved for release snapshots (see &lt;a href=&#34;https://schema.org/version/&#34;&gt;https://schema.org/version/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The ext/*/ hierarchy is reserved for extensions (see &lt;a href=&#34;https://schema.org/docs/extension.html&#34;&gt;https://schema.org/docs/extension.html&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;We no longer use github branches for work-in-progress. The main/ branch is our latest candidate. It is not guaranteed to be in a conceptually consistent state, but should stabilize prior to circulation of a release candidate for review.&lt;/p&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;p&gt;This documentation concerns the software codebase rather than schema.org itself.&lt;/p&gt; &#xA;&lt;p&gt;However do note that labels, comments, and documentation should use US English (in the code and schemas), if a choice between English variants is needed. Please aim for international English wherever possible.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://twitter.com/schemaorg_dev&#34;&gt;https://twitter.com/schemaorg_dev&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kaityo256/github</title>
    <updated>2022-11-24T01:35:28Z</updated>
    <id>tag:github.com,2022-11-24:/kaityo256/github</id>
    <link href="https://github.com/kaityo256/github" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitHub演習&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub演習&lt;/h1&gt; &#xA;&lt;h2&gt;この講義ノートについて&lt;/h2&gt; &#xA;&lt;p&gt;これは、理工学部の三年学部生向けのGit/GitHubを用いたソフトウェア開発演習のための講義ノートである。概ね一般的な記述となっているが、一部に大学のPC室特有の記述があるので、他大の方が利用される際は注意されたい。4回の座学、4回の実習の、計8回の講義/演習で学ぶ構成となっている。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kaityo256/github&#34;&gt;GitHubリポジトリ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kaityo256.github.io/github/&#34;&gt;HTML版&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/preface/README.md&#34;&gt;はじめに&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;座学&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/vcs/README.md&#34;&gt;バージョン管理とは&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-vcs&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;バージョン管理システムとは&lt;/li&gt; &#xA; &lt;li&gt;バージョン管理システムの歴史&lt;/li&gt; &#xA; &lt;li&gt;プログラミングができる人、できない人&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/term/README.md&#34;&gt;Gitの仕組みと用語&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-term&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;プロジェクト&lt;/li&gt; &#xA; &lt;li&gt;リポジトリとワーキングツリー&lt;/li&gt; &#xA; &lt;li&gt;コミット&lt;/li&gt; &#xA; &lt;li&gt;インデックスとステージング&lt;/li&gt; &#xA; &lt;li&gt;HEADとブランチ&lt;/li&gt; &#xA; &lt;li&gt;マージ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/command/README.md&#34;&gt;コマンドラインの使い方&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-cli&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;シェルとコマンドライン&lt;/li&gt; &#xA; &lt;li&gt;Unixコマンド&lt;/li&gt; &#xA; &lt;li&gt;Vimの使い方&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/basics/README.md&#34;&gt;Gitの基本的な使い方&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-basics&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;初期設定&lt;/li&gt; &#xA; &lt;li&gt;Gitの一連の操作&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git config&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/branch/README.md&#34;&gt;ブランチ操作&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-branch&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;なぜブランチを分けるか&lt;/li&gt; &#xA; &lt;li&gt;ブランチの基本&lt;/li&gt; &#xA; &lt;li&gt;マージ&lt;/li&gt; &#xA; &lt;li&gt;リベース&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/remote/README.md&#34;&gt;リモートリポジトリの操作&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-remote&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;リモートリポジトリとは&lt;/li&gt; &#xA; &lt;li&gt;ベアリポジトリ&lt;/li&gt; &#xA; &lt;li&gt;クローン&lt;/li&gt; &#xA; &lt;li&gt;プッシュ&lt;/li&gt; &#xA; &lt;li&gt;フェッチ&lt;/li&gt; &#xA; &lt;li&gt;上流ブランチとリモート追跡ブランチ&lt;/li&gt; &#xA; &lt;li&gt;その他知っておいた方が良いこと &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git remote&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;プッシュしたブランチをリベースしない&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/advanced/README.md&#34;&gt;Gitの使い方(応用編)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-advanced&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gitトラブルシューティング &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;コミットメッセージを間違えた(&lt;code&gt;git commit --amend&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;修正を取り消したい(&lt;code&gt;git restore&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;ステージングを取り消したい(&lt;code&gt;git restore --staged&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git checkout&lt;/code&gt;は使わない&lt;/li&gt; &#xA;   &lt;li&gt;リモートを間違えて登録した(&lt;code&gt;git remote remove&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;メインブランチで作業を開始してしまった(&lt;code&gt;git stash&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;プッシュしようとしたらリジェクトされた&lt;/li&gt; &#xA;   &lt;li&gt;頭が取れた(&lt;code&gt;detached HEAD&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;リベースしようとしたら衝突した&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;その他の便利なコマンド &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;この部分はいつ誰が書いた？(&lt;code&gt;git blame&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;このバグが入ったのはいつだ？(&lt;code&gt;git bisect&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/internals/README.md&#34;&gt;Gitの中身&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-internals&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.git&lt;/code&gt;ディレクトリの中身&lt;/li&gt; &#xA; &lt;li&gt;Gitのオブジェクト &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;blobオブジェクト&lt;/li&gt; &#xA;   &lt;li&gt;コミットオブジェクト&lt;/li&gt; &#xA;   &lt;li&gt;treeオブジェクト&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Gitの参照 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;HEADとブランチの実体&lt;/li&gt; &#xA;   &lt;li&gt;Detached HEAD状態&lt;/li&gt; &#xA;   &lt;li&gt;ブランチの作成と削除&lt;/li&gt; &#xA;   &lt;li&gt;リモートブランチと上流ブランチ&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;インデックス &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;インデックスの実体と中身&lt;/li&gt; &#xA;   &lt;li&gt;ブランチ切り替えとインデックス&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;演習&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/practice_basic/README.md&#34;&gt;Gitの操作(基本編)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-practice-basic&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;初期設定&lt;/li&gt; &#xA; &lt;li&gt;リポジトリの作成(&lt;code&gt;git init&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;インデックスへの追加(&lt;code&gt;git add&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ファイルの修正&lt;/li&gt; &#xA; &lt;li&gt;自動ステージング(&lt;code&gt;git commit -a&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;歴史の確認(&lt;code&gt;git log&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;VSCodeからの操作&lt;/li&gt; &#xA; &lt;li&gt;余談：データベース&#34;ふっとばし&#34;スペシャリスト&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/practice_advanced/README.md&#34;&gt;Gitの操作(応用編)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-practice-advanced&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git amend&lt;/code&gt;によりコミットが変更されることを確認する&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git merge&lt;/code&gt;の衝突を解決する&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git rebase&lt;/code&gt;により歴史を改変する&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git rebase&lt;/code&gt;の衝突を解決する&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git bisect&lt;/code&gt;を使ってみる&lt;/li&gt; &#xA; &lt;li&gt;余談：OSの系譜とドラマ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/practice_github_basic/README.md&#34;&gt;GitHubの操作(基本編)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-practice-github-basic&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHubアカウントを作成とSSH接続&lt;/li&gt; &#xA; &lt;li&gt;ローカルのリポジトリをGitHubに登録&lt;/li&gt; &#xA; &lt;li&gt;Issue管理&lt;/li&gt; &#xA; &lt;li&gt;Projectの利用&lt;/li&gt; &#xA; &lt;li&gt;プルリクエストを作ってみる&lt;/li&gt; &#xA; &lt;li&gt;余談：天空の城のセキュリティ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/practice_github_advanced/README.md&#34;&gt;GitHubの操作(応用編)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kaityo256/github-practice-github-advanced&#34;&gt;講義スライド&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MNISTの学習済みモデルをウェブで試す&lt;/li&gt; &#xA; &lt;li&gt;簡単なゲーム作成&lt;/li&gt; &#xA; &lt;li&gt;余談：余談：CEOからのメッセージ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/postface/README.md&#34;&gt;おわりに&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaityo256/github/main/references/README.md&#34;&gt;参考文献&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;ライセンス&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2021-present Hiroshi Watanabe&lt;/p&gt; &#xA;&lt;p&gt;この文章と絵(pptxファイルを含む)はクリエイティブ・コモンズ 4.0 表示 (CC-BY 4.0)で提供する。&lt;/p&gt;</summary>
  </entry>
</feed>