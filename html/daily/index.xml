<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-25T01:30:42Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>colour-science/colour-science-precis</title>
    <updated>2024-04-25T01:30:42Z</updated>
    <id>tag:github.com,2024-04-25:/colour-science/colour-science-precis</id>
    <link href="https://github.com/colour-science/colour-science-precis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Colour Science Precis for the CGI Artist&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://colour-science.github.io/colour-science-precis/&#34;&gt;Colour Science Precis for the CGI Artist&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Colour Science Precis&lt;/strong&gt; is a set of posters designed for the computer-generated imagery artist.&lt;/p&gt; &#xA;&lt;p&gt;Its purpose is to provide essential understanding and terminology for practical application of colour science in the media and entertainment industry. The &lt;strong&gt;Precis&lt;/strong&gt; takes its roots in &lt;strong&gt;Cinematic Color 2&lt;/strong&gt;, the unreleased sequel to &lt;a href=&#34;https://cinematiccolor.org&#34;&gt;Cinematic Color&lt;/a&gt; by Jeremy Selan. Capturing the entirety of Cinematic Color 2 in a few images is impossible, we thus cherry-picked the material we thought was important to be readily available.&lt;/p&gt; &#xA;&lt;p&gt;Colour science is a constant evolving field of research: We do not yet have a full understanding on how vision works, thus this &lt;strong&gt;Precis&lt;/strong&gt; is merely a snapshot of useful knowledge and will be updated in the future.&lt;/p&gt; &#xA;&lt;h2&gt;Posters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/colour-science/colour-science-precis/master/posters/Colour%20Science%20Precis%20-%20Page%201.png&#34; alt=&#34;Colour Science Precis - Page 1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/colour-science/colour-science-precis/master/posters/Colour%20Science%20Precis%20-%20Page%202.png&#34; alt=&#34;Colour Science Precis - Page 2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/colour-science/colour-science-precis/master/posters/Colour%20Science%20Precis%20-%20Page%203.png&#34; alt=&#34;Colour Science Precis - Page 3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;PDF versions are also available alongside in the &lt;a href=&#34;https://raw.githubusercontent.com/colour-science/colour-science-precis/master/posters/&#34;&gt;posters&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Source&lt;/h2&gt; &#xA;&lt;p&gt;A copy of the &lt;a href=&#34;https://www.figma.com&#34;&gt;Figma&lt;/a&gt; file is available in &lt;a href=&#34;https://raw.githubusercontent.com/colour-science/colour-science-precis/master/figma/Colour%20Science%20-%20Precis.fig&#34;&gt;Colour Science Precis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Many of the figures were authored using &lt;a href=&#34;https://github.com/colour-science/colour&#34;&gt;Colour&lt;/a&gt; and &lt;a href=&#34;https://colab.research.google.com/drive/1C1glP3WxP1flByylNUTTJ24tcDhm9jFW&#34;&gt;Google Colab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;We would like to thank all the following contributors to the authoring and reviewing of the &lt;strong&gt;Precis&lt;/strong&gt; and &lt;strong&gt;Cinematic Color 2&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;Precis Review&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alex Forsythe&lt;/li&gt; &#xA; &lt;li&gt;Daniele Siragusano&lt;/li&gt; &#xA; &lt;li&gt;Joseph Goldstone&lt;/li&gt; &#xA; &lt;li&gt;Kevin Whitfield&lt;/li&gt; &#xA; &lt;li&gt;Kris Murray&lt;/li&gt; &#xA; &lt;li&gt;Nick Shaw&lt;/li&gt; &#xA; &lt;li&gt;Remi Achard&lt;/li&gt; &#xA; &lt;li&gt;Sean Cooper&lt;/li&gt; &#xA; &lt;li&gt;Tim Kang&lt;/li&gt; &#xA; &lt;li&gt;Vlad Simion&lt;/li&gt; &#xA; &lt;li&gt;@MikeMmmm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cinematic Color 2 Editing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Haarm-Pieter Duiker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cinematic Color 2 Authoring&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alex Forsythe&lt;/li&gt; &#xA; &lt;li&gt;Kevin Shaw&lt;/li&gt; &#xA; &lt;li&gt;Nick Shaw&lt;/li&gt; &#xA; &lt;li&gt;Stefan Luka&lt;/li&gt; &#xA; &lt;li&gt;Thomas Mansencal&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cinematic Color 2 Review&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alex Fry&lt;/li&gt; &#xA; &lt;li&gt;Anders Langlands&lt;/li&gt; &#xA; &lt;li&gt;Andy Jones&lt;/li&gt; &#xA; &lt;li&gt;Andy Maltz&lt;/li&gt; &#xA; &lt;li&gt;Annie Chang&lt;/li&gt; &#xA; &lt;li&gt;Blake Sloan&lt;/li&gt; &#xA; &lt;li&gt;Brent Burley&lt;/li&gt; &#xA; &lt;li&gt;Brian Karis&lt;/li&gt; &#xA; &lt;li&gt;Cedric Lejeune&lt;/li&gt; &#xA; &lt;li&gt;Charles Boileau&lt;/li&gt; &#xA; &lt;li&gt;Charles Poynton&lt;/li&gt; &#xA; &lt;li&gt;Chris Clark&lt;/li&gt; &#xA; &lt;li&gt;Chris Davies&lt;/li&gt; &#xA; &lt;li&gt;Chris Kutcka&lt;/li&gt; &#xA; &lt;li&gt;Daniel Flood&lt;/li&gt; &#xA; &lt;li&gt;Daniel Smith&lt;/li&gt; &#xA; &lt;li&gt;Daniele Siragusano&lt;/li&gt; &#xA; &lt;li&gt;Danielle Costa&lt;/li&gt; &#xA; &lt;li&gt;Dave Levy&lt;/li&gt; &#xA; &lt;li&gt;David Baud&lt;/li&gt; &#xA; &lt;li&gt;David Long&lt;/li&gt; &#xA; &lt;li&gt;Deke Kincaid&lt;/li&gt; &#xA; &lt;li&gt;Dirk Meier&lt;/li&gt; &#xA; &lt;li&gt;Dominic Glynn&lt;/li&gt; &#xA; &lt;li&gt;Doug Walker&lt;/li&gt; &#xA; &lt;li&gt;Ed Giorgianni&lt;/li&gt; &#xA; &lt;li&gt;Evan Hart&lt;/li&gt; &#xA; &lt;li&gt;Ingmar Rieger&lt;/li&gt; &#xA; &lt;li&gt;Ivan Filipovic&lt;/li&gt; &#xA; &lt;li&gt;Jean D. Vanderberg&lt;/li&gt; &#xA; &lt;li&gt;Jeremy Selan&lt;/li&gt; &#xA; &lt;li&gt;Jeroen Schulte&lt;/li&gt; &#xA; &lt;li&gt;Jim Hejl&lt;/li&gt; &#xA; &lt;li&gt;Jim Houston&lt;/li&gt; &#xA; &lt;li&gt;Joachim Zell&lt;/li&gt; &#xA; &lt;li&gt;Jonathan Egstad&lt;/li&gt; &#xA; &lt;li&gt;Joseph Goldstone&lt;/li&gt; &#xA; &lt;li&gt;Joseph Slomka&lt;/li&gt; &#xA; &lt;li&gt;Josh Pines&lt;/li&gt; &#xA; &lt;li&gt;Kevin Wheatley&lt;/li&gt; &#xA; &lt;li&gt;Larry Gritz&lt;/li&gt; &#xA; &lt;li&gt;Lars Borg&lt;/li&gt; &#xA; &lt;li&gt;Marcos Fajardo&lt;/li&gt; &#xA; &lt;li&gt;Marie Fetiveau&lt;/li&gt; &#xA; &lt;li&gt;Mark Boorer&lt;/li&gt; &#xA; &lt;li&gt;Mark D. Fairchild&lt;/li&gt; &#xA; &lt;li&gt;Matt Pharr&lt;/li&gt; &#xA; &lt;li&gt;Matthias Scharfenberg&lt;/li&gt; &#xA; &lt;li&gt;Michael Chenery&lt;/li&gt; &#xA; &lt;li&gt;Michael Dolan&lt;/li&gt; &#xA; &lt;li&gt;Michael Mauderer&lt;/li&gt; &#xA; &lt;li&gt;Michael Parsons&lt;/li&gt; &#xA; &lt;li&gt;Mike Maloney&lt;/li&gt; &#xA; &lt;li&gt;Naty Hoffman&lt;/li&gt; &#xA; &lt;li&gt;Nick Porcino&lt;/li&gt; &#xA; &lt;li&gt;Patrick Morgan&lt;/li&gt; &#xA; &lt;li&gt;Paul Malin&lt;/li&gt; &#xA; &lt;li&gt;Peter Doyle&lt;/li&gt; &#xA; &lt;li&gt;Peter Shirley&lt;/li&gt; &#xA; &lt;li&gt;Ramon Montoya-Vozmediano&lt;/li&gt; &#xA; &lt;li&gt;Raymond Yeung&lt;/li&gt; &#xA; &lt;li&gt;Remi Achard&lt;/li&gt; &#xA; &lt;li&gt;Rick Sayre&lt;/li&gt; &#xA; &lt;li&gt;Rob Bredow&lt;/li&gt; &#xA; &lt;li&gt;Robin Green&lt;/li&gt; &#xA; &lt;li&gt;Rod Bogart&lt;/li&gt; &#xA; &lt;li&gt;Romain Guy&lt;/li&gt; &#xA; &lt;li&gt;Scott Dyer&lt;/li&gt; &#xA; &lt;li&gt;Sean Cooper&lt;/li&gt; &#xA; &lt;li&gt;Sebastien Lagarde&lt;/li&gt; &#xA; &lt;li&gt;Sheldon Stopack&lt;/li&gt; &#xA; &lt;li&gt;Stephen Hill&lt;/li&gt; &#xA; &lt;li&gt;Steve Agland&lt;/li&gt; &#xA; &lt;li&gt;Steve Shapiro&lt;/li&gt; &#xA; &lt;li&gt;Steve Shapiro&lt;/li&gt; &#xA; &lt;li&gt;Thomas Hourdel&lt;/li&gt; &#xA; &lt;li&gt;Tim Borer&lt;/li&gt; &#xA; &lt;li&gt;Timothy Lottes&lt;/li&gt; &#xA; &lt;li&gt;Tony Micilotta&lt;/li&gt; &#xA; &lt;li&gt;Vladimir Koylazov&lt;/li&gt; &#xA; &lt;li&gt;Walter Arrighetti&lt;/li&gt; &#xA; &lt;li&gt;Wenzel Jakob&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cinematic Color 1 Authoring&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jeremy Selan&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to contribute to the &lt;a href=&#34;https://github.com/colour-science/colour-science-precis&#34;&gt;Colour Science Precis&lt;/a&gt;, please open an &lt;a href=&#34;https://github.com/colour-science/colour-science-precis/issues&#34;&gt;issue&lt;/a&gt; or start a &lt;a href=&#34;https://github.com/colour-science/colour-science-precis/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;Code of Conduct&lt;/em&gt;, adapted from the &lt;a href=&#34;https://www.contributor-covenant.org/version/1/4/code-of-conduct.html&#34;&gt;Contributor Covenant 1.4&lt;/a&gt;, is available on the &lt;a href=&#34;https://www.colour-science.org/code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Contact &amp;amp; Social&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;Colour Developers&lt;/em&gt; can be reached via different means:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:colour-developers@colour-science.org&#34;&gt;Email&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.facebook.com/python.colour.science&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/colour-science/colour-science-precis/discussions&#34;&gt;Github Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/colour-science/colour&#34;&gt;Gitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/colour_science&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Colour Science Precis&lt;/strong&gt; by Colour Developers&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2024 Colour Developers -- &lt;a href=&#34;https://raw.githubusercontent.com/colour-science/colour-science-precis/master/colour-developers@colour-science.org&#34;&gt;colour-developers@colour-science.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This content is released under terms of CC BY-SA 4.0: &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;https://creativecommons.org/licenses/by-sa/4.0/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/colour-science/colour-science-precis&#34;&gt;https://github.com/colour-science/colour-science-precis&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>workadventure/map-starter-kit</title>
    <updated>2024-04-25T01:30:42Z</updated>
    <id>tag:github.com,2024-04-25:/workadventure/map-starter-kit</id>
    <link href="https://github.com/workadventure/map-starter-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A starter kit to help you get started developing your own maps for WorkAdventure&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WorkAdventure Map Starter Kit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/workadventure/map-starter-kit/master/map.png&#34; alt=&#34;map&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a starter kit to help you build your own map for &lt;a href=&#34;https://workadventu.re&#34;&gt;WorkAdventure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To understand how to use this starter kit, follow the tutorial at &lt;a href=&#34;https://workadventu.re/map-building&#34;&gt;https://workadventu.re/map-building&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;public&lt;/em&gt;: Static files like PDFs or audio files&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;src&lt;/em&gt;: Scripts files&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;tilesets&lt;/em&gt;: All tilesets&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;map.tmj&lt;/em&gt;: Map file&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;map.png&lt;/em&gt;: The map thumbnail displayed on the in-game map information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to use more than one map file, just add the new map file on root or in a folder.&lt;/p&gt; &#xA;&lt;p&gt;we recommend using 500x500 images for the map thumbnails.&lt;/p&gt; &#xA;&lt;p&gt;If you are going to create custom websites to embed in the map, please reference the HTML files in the &lt;code&gt;input&lt;/code&gt; option in &lt;em&gt;vite.config.js&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Node.js version &amp;gt;=17&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;With npm installed (comes with &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node&lt;/a&gt;), run the following commands into a terminal in the root directory of this project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test production map&lt;/h2&gt; &#xA;&lt;p&gt;You can test the optimized map as it will be in production:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run build&#xA;npm run prod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;This project contains multiple licenses as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/workadventure/map-starter-kit/master/LICENSE.code&#34;&gt;Code license&lt;/a&gt; &lt;em&gt;(all files except those for other licenses)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/workadventure/map-starter-kit/master/LICENSE.map&#34;&gt;Map license&lt;/a&gt; &lt;em&gt;(&lt;code&gt;map.tmj&lt;/code&gt; and the map visual as well)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/workadventure/map-starter-kit/master/LICENSE.assets&#34;&gt;Assets license&lt;/a&gt; &lt;em&gt;(the files inside the &lt;code&gt;src/assets/&lt;/code&gt; folder)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;About third party assets&lt;/h3&gt; &#xA;&lt;p&gt;If you add third party assets in your map, do not forget to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Credit the author and license with the &#34;tilesetCopyright&#34; property present in the properties of each tilesets in the &lt;code&gt;map.tmj&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Add the license text in LICENSE.assets&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/react-hooks-running-tests</title>
    <updated>2024-04-25T01:30:42Z</updated>
    <id>tag:github.com,2024-04-25:/learn-co-curriculum/react-hooks-running-tests</id>
    <link href="https://github.com/learn-co-curriculum/react-hooks-running-tests" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Running Tests in React&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use Jest to run tests in React applications&lt;/li&gt; &#xA; &lt;li&gt;Read test files and identify the purpose of test code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In this lab, we&#39;ll discuss how the tests are set up for the labs in a typical React application, and give some tips for running tests.&lt;/p&gt; &#xA;&lt;p&gt;Fork and clone this lesson by navigating to the GitHub repo with the &#34;OctoCat&#34; icon above so you can code along!&lt;/p&gt; &#xA;&lt;h2&gt;Running Jest Tests&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of JavaScript test frameworks out there. For testing vanilla JavaScript applications, one popular choice is Mocha, which we use for the tests in our JavaScript labs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt; is another popular choice for JavaScript developers, and in particular the React community. Jest, like React, was developed by Facebook and is an open source project. You can read the &lt;a href=&#34;https://jestjs.io/docs/getting-started&#34;&gt;Jest docs&lt;/a&gt; if you&#39;re curious to learn more.&lt;/p&gt; &#xA;&lt;p&gt;Jest comes preinstalled when you generate a React project using &lt;code&gt;create-react-app&lt;/code&gt;, so all you have to do to run tests in React labs is run &lt;code&gt;npm test&lt;/code&gt;, which will execute the test script found in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Running &lt;code&gt;npm test&lt;/code&gt; should produce output like this in your terminal:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://jestjs.io/img/blog/15-watch.gif&#34; alt=&#34;jest demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This command will run all tests in the &lt;code&gt;src&lt;/code&gt; directory by looking for files that have &lt;code&gt;.test.js&lt;/code&gt; in the file name (you&#39;ll typically find them in the &lt;code&gt;__tests__&lt;/code&gt; directory for our labs).&lt;/p&gt; &#xA;&lt;p&gt;The tests are set to run in &#34;watch mode&#34; by default, so after running &lt;code&gt;npm test&lt;/code&gt;, any changes you make to your components will cause the tests to run again. That means you can keep the tests running as you work!&lt;/p&gt; &#xA;&lt;h2&gt;Reading Test Files&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: some of the explanations in this section depend on you understanding a thing or two about React, so don&#39;t worry if this doesn&#39;t all make sense just yet! You can refer back to this lesson when you&#39;re curious about what the tests in our lessons are looking for.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In our React lessons, the tests use &lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt; and &lt;a href=&#34;https://testing-library.com/docs/react-testing-library/intro&#34;&gt;React Testing Library&lt;/a&gt; to test your React code. Tests will be written in the folder &lt;code&gt;src/__tests__&lt;/code&gt;, and typically there will be one test file for each component. A typical test file looks something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// import libraries needed for testing&#xA;import &#34;@testing-library/jest-dom&#34;;&#xA;import { render, screen } from &#34;@testing-library/react&#34;;&#xA;import React from &#34;react&#34;;&#xA;&#xA;// import the component you wrote&#xA;import Article from &#34;../components/Article&#34;;&#xA;&#xA;// test the component&#xA;test(&#34;displays the text &#39;please pass this test&#39;&#34;, () =&amp;gt; {&#xA;  render(&amp;lt;Article /&amp;gt;);&#xA;&#xA;  expect(screen.queryByText(&#34;please pass this test&#34;)).toBeInTheDocument();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can ignore most of the setup code at the top: this is just giving us access to code that is needed to test your React components, and to access the code in your component file itself. Let&#39;s focus on the test itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;test(&#34;displays the text &#39;please pass this test&#39;&#34;, () =&amp;gt; {&#xA;  render(&amp;lt;Article /&amp;gt;);&#xA;&#xA;  expect(screen.queryByText(&#34;please pass this test&#34;)).toBeInTheDocument();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example is doing the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;render&lt;/code&gt;: This method is used to render a React component inside the testing environment. Our Jest tests don&#39;t run in the browser, they run in Node, so one of the challenges of testing React components is that we need to simulate a browser environment within Node. Under the hood, the &lt;a href=&#34;https://github.com/jsdom/jsdom&#34;&gt;JSDOM&lt;/a&gt; library simulates a browser environment with browser-specific functionality, like the &lt;code&gt;document&lt;/code&gt; object, which isn&#39;t available in Node. The &lt;code&gt;render&lt;/code&gt; method then takes our React component and renders it in this simulated browser environment so we can check that it was rendered as expected.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;expect&lt;/code&gt;: This is a &lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt; method, to which we pass some expected value for testing. In this case, we&#39;re using a custom &lt;a href=&#34;https://testing-library.com/docs/ecosystem-jest-dom&#34;&gt;Jest DOM&lt;/a&gt; matcher &lt;code&gt;toBeInTheDocument&lt;/code&gt;, which checks if the element is present in the simulated browser environment after our component is rendered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;screen&lt;/code&gt;: This method provides a way to interact with the simulated browser environment, namely by giving us a number of &lt;a href=&#34;https://testing-library.com/docs/queries/about#priority&#34;&gt;query methods&lt;/a&gt; to search the DOM for elements we expect to have been rendered (think of it like a supercharged version of &lt;code&gt;document.querySelector&lt;/code&gt;). &lt;code&gt;screen.queryByText()&lt;/code&gt; searches the virtual DOM for some element that has the text content &lt;code&gt;&#34;please pass this test&#34;&lt;/code&gt;. If no element is found, it will return &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, all together, the test is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rendering the &lt;code&gt;&amp;lt;Article&amp;gt;&lt;/code&gt; component in a virtual environment&lt;/li&gt; &#xA; &lt;li&gt;looking for an element that has the text &lt;code&gt;&#34;please pass this test&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;if the element is found in the document, the test passes; if not, the test fails&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code Along&lt;/h2&gt; &#xA;&lt;p&gt;There are a couple of tests defined for this lab so you can get some practice.&lt;/p&gt; &#xA;&lt;p&gt;To get started, run &lt;code&gt;npm install&lt;/code&gt; (if you haven&#39;t already), then run &lt;code&gt;npm test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Pro tip&lt;/strong&gt;: you can use the shorthand &lt;code&gt;npm i&lt;/code&gt; and &lt;code&gt;npm t&lt;/code&gt; to run the install and test scripts as well!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You should see something like this in the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt; FAIL  src/__tests__/Header.test.js&#xA;  ● displays the text &#39;hello from the Header!&#39;&#xA;&#xA;    expect(received).toBeInTheDocument()&#xA;&#xA;    received value must be an HTMLElement or an SVGElement.&#xA;    Received has value: null&#xA;&#xA;       8 |   render(&amp;lt;Header /&amp;gt;);&#xA;       9 |&#xA;    &amp;gt; 10 |   expect(screen.queryByText(&#34;hello from the Header!&#34;)).toBeInTheDocument();&#xA;         |                                                        ^&#xA;      11 | });&#xA;      12 |&#xA;&#xA;      at __EXTERNAL_MATCHER_TRAP__ (node_modules/expect/build/index.js:342:30)&#xA;      at Object.&amp;lt;anonymous&amp;gt; (src/__tests__/Header.test.js:10:56)&#xA;&#xA; FAIL  src/__tests__/Article.test.js&#xA;  ● displays the text &#39;please pass this test&#39;&#xA;&#xA;    expect(received).toBeInTheDocument()&#xA;&#xA;    received value must be an HTMLElement or an SVGElement.&#xA;    Received has value: null&#xA;&#xA;       8 |   render(&amp;lt;Article /&amp;gt;);&#xA;       9 |&#xA;    &amp;gt; 10 |   expect(screen.queryByText(&#34;please pass this test&#34;)).toBeInTheDocument();&#xA;         |                                                        ^&#xA;      11 | });&#xA;      12 |&#xA;&#xA;      at __EXTERNAL_MATCHER_TRAP__ (node_modules/expect/build/index.js:342:30)&#xA;      at Object.&amp;lt;anonymous&amp;gt; (src/__tests__/Article.test.js:10:56)&#xA;&#xA;Test Suites: 2 failed, 2 total&#xA;Tests:       2 failed, 2 total&#xA;Snapshots:   0 total&#xA;Time:        3.486 s&#xA;Ran all test suites.&#xA;&#xA;Watch Usage&#xA; › Press f to run only failed tests.&#xA; › Press o to only run tests related to changed files.&#xA; › Press q to quit watch mode.&#xA; › Press p to filter by a filename regex pattern.&#xA; › Press t to filter by a test name regex pattern.&#xA; › Press Enter to trigger a test run.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s focus on the &lt;code&gt;Header.test.js&lt;/code&gt; file first. To tell Jest to only run tests on this one file, press the &lt;strong&gt;p&lt;/strong&gt; key in your terminal (this will let you filter out tests by their filename). In the next screen, type in &lt;code&gt;Header&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Pattern Mode Usage&#xA; › Press Esc to exit pattern mode.&#xA; › Press Enter to filter by a filenames regex pattern.&#xA;&#xA; pattern › Header&#xA;&#xA; Pattern matches 1 file&#xA; › src/__tests__/Header.test.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, press the Enter key to run tests in the &lt;code&gt;Header.test.js&lt;/code&gt; file only.&lt;/p&gt; &#xA;&lt;p&gt;See if you can get this test passing by updating the code in &lt;code&gt;src&lt;/code&gt; &amp;gt; &lt;code&gt;components&lt;/code&gt; &amp;gt; &lt;code&gt;Header.js&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#34;react&#34;;&#xA;&#xA;function Header(props) {&#xA;  return &amp;lt;h1&amp;gt;hello from the Header!&amp;lt;/h1&amp;gt;;&#xA;}&#xA;&#xA;export default Header;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, press the &lt;strong&gt;a&lt;/strong&gt; key in your terminal to tell Jest to run &lt;strong&gt;all&lt;/strong&gt; tests. Try getting the tests for the &lt;code&gt;Article&lt;/code&gt; component to pass too.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;ve finished, you can hit the &lt;strong&gt;q&lt;/strong&gt; key to exit Jest.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging Tools&lt;/h3&gt; &#xA;&lt;p&gt;One of the challenges of writing tests for user interfaces is that debugging can be more challenging. What we&#39;re testing is &lt;em&gt;what is being displayed to the user&lt;/em&gt;, but when we&#39;re running the tests, we&#39;re not actually displaying anything. And since the tests are running in Node, we can&#39;t use our usual UI debugging tools like the browser&#39;s developer tools to see what the DOM looks like.&lt;/p&gt; &#xA;&lt;p&gt;React Testing Library provides a nice &lt;code&gt;debug&lt;/code&gt; method to give us a sense of what the DOM looks like when our tests are running. Let&#39;s try this out instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// src/__tests__/Article.test.js&#xA;test(&#34;displays the text &#39;please pass this test&#39;&#34;, () =&amp;gt; {&#xA;  render(&amp;lt;Article /&amp;gt;);&#xA;&#xA;  // add this line&#xA;  screen.debug();&#xA;&#xA;  expect(screen.queryByText(&#34;please pass this test&#34;)).toBeInTheDocument();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now when we run the tests, we&#39;ll get a nice representation of what the DOM looks like for our rendered component printed in the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;&#xA;  &amp;lt;div&amp;gt;&#xA;    &amp;lt;div&amp;gt;please pass this test&amp;lt;/div&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also use this method to debug a single element:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;test(&#34;displays the text &#39;please pass this test&#39;&#34;, () =&amp;gt; {&#xA;  render(&amp;lt;Article /&amp;gt;);&#xA;&#xA;  const element = screen.queryByText(&#34;please pass this test&#34;);&#xA;&#xA;  screen.debug(element);&#xA;&#xA;  expect(element).toBeInTheDocument();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can see what just the &lt;code&gt;element&lt;/code&gt; found by &lt;code&gt;screen.queryByText(&#34;please pass this test&#34;)&lt;/code&gt; looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;please pass this test&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to keep these debugging tools handy when you&#39;re writing tests so you can check if you&#39;re testing your elements the right way.&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;Being able to run the tests and understand the output is an important skill to develop as a React developer. Make sure to take some time reading through the error messages when your tests aren&#39;t passing. It&#39;s also helpful to run the actual application in the browser to understand what your components are doing. At the end of the day, the job of the tests is to guide you in the right direction in your code, but what&#39;s most important is how your application actually works in the browser, so make sure to check that as well when you&#39;re writing your code!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re stuck wondering what a particular test is asking for, check out the resources links below (particularly for React Testing Library) to help get a better sense of how the test is written.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testing-library.com/docs/react-testing-library/intro&#34;&gt;React Testing Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testing-library.com/docs/ecosystem-jest-dom&#34;&gt;Jest DOM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>