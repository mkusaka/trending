<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-14T01:36:00Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gavinliu6/Makefile-Tutorial-zh-CN</title>
    <updated>2023-04-14T01:36:00Z</updated>
    <id>tag:github.com,2023-04-14:/gavinliu6/Makefile-Tutorial-zh-CN</id>
    <link href="https://github.com/gavinliu6/Makefile-Tutorial-zh-CN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Makefile 教程&lt;/p&gt;&lt;hr&gt;&lt;div class=&#34;home&#34;&gt; &#xA; &lt;div class=&#34;title-wrapper&#34;&gt; &#xA;  &lt;div class=&#34;title&#34;&gt;&#xA;   学习 Makefiles&#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;subtitle&#34;&gt;&#xA;   内附可口示例 🌰&#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;actions&#34;&gt; &#xA;   &lt;a class=&#34;action-btn&#34; href=&#34;https://raw.githubusercontent.com/gavinliu6/Makefile-Tutorial-zh-CN/main/#/docs/getting-started&#34;&gt;起步&lt;/a&gt; &#xA;   &lt;a class=&#34;action-btn&#34; href=&#34;https://raw.githubusercontent.com/gavinliu6/Makefile-Tutorial-zh-CN/main/#/docs/makefile-cookbook&#34;&gt;Cookbook&lt;/a&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/gavinliu6/Makefile-Tutorial-zh-CN/main/assets/images/pie_ingredients.png&#34; alt=&#34;Pie Ingredients&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;我之所以编写这份指南，是因为我一直以来都不能完全理解 Makefiles 文件的内容。&lt;/strong&gt; 它们似乎充斥着各种隐藏规则和晦涩难懂的符号，还有就是简单的问题复杂化。为此，我静坐数周，尽我所能地阅读了所有关于 Makefiles 的资料，把最关键的知识点都浓缩在了该指南里。每个主题都对应了一段简述和一个你可以用来自己运行的自包含示例。&lt;/p&gt; &#xA;&lt;p&gt;如果你大致理解了 Make，那么可以考虑阅读一下 &lt;a href=&#34;https://raw.githubusercontent.com/gavinliu6/Makefile-Tutorial-zh-CN/main/docs/makefile-cookbook&#34;&gt;Makefile Cookbook&lt;/a&gt; 一节，该节包含了一个中等规模项目的 Makefile 模板，并对它的每部分功能都做了充分的注释。&lt;/p&gt; &#xA;&lt;p&gt;祝你好运！我希望你能够在 Makefiles 的“混沌世界里大杀四方”。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;译者说明：该教程翻译自 &lt;a href=&#34;https://makefiletutorial.com/&#34;&gt;Makefile Tutorial&lt;/a&gt;，仅用于学习交流。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;note type=&#34;tip&#34;&gt; &#xA; &lt;p&gt;本站已与官方仓库的提交 &lt;a href=&#34;https://github.com/theicfire/makefiletutorial/commit/a048a0801bf6907873fbe5555ba9bdd43c063127&#34;&gt;a048a08&lt;/a&gt; 保持了同步。&lt;/p&gt; &#xA;&lt;/note&gt;</summary>
  </entry>
  <entry>
    <title>sumn2u/learn-javascript</title>
    <updated>2023-04-14T01:36:00Z</updated>
    <id>tag:github.com,2023-04-14:/sumn2u/learn-javascript</id>
    <link href="https://github.com/sumn2u/learn-javascript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A book that teaches JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Computers are common in today&#39;s world, as they are able to perform a wide variety of tasks quickly and accurately. They are used in many different industries, such as business, healthcare, education, and entertainment, and have become an essential part of daily life for many people. Besides this, they are also used to perform complex scientific and mathematical calculations, to store and process large amounts of data, and to communicate with people around the world.&lt;/p&gt; &#xA;&lt;p&gt;Programming involves creating a set of instructions, called a program, for a computer to follow. It can be tedious and frustrating at times because computers are very precise and need specific instructions in order to complete tasks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sumn2u/learn-javascript/main/_book/.gitbook/assets/intro.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Programming languages are artificial languages used to give instructions to computers. They are used in most programming tasks and are based on the way humans communicate with each other. Like human languages, programming languages allow words and phrases to be combined to express new concepts. It is interesting to note that the most effective way to communicate with computers involves using a language that is similar to human language.&lt;/p&gt; &#xA;&lt;p&gt;In the past, the primary way to interact with computers was through language-based interfaces like BASIC and DOS prompts. These have been largely replaced by visual interfaces, which are easier to learn but offer less flexibility. However, computer languages like &lt;em&gt;JavaScript&lt;/em&gt; are still in use and can be found in modern web browsers and on most devices.&lt;/p&gt; &#xA;&lt;p&gt;JavaScript (&lt;em&gt;JS for short&lt;/em&gt;) is the programming language that is used to create dynamic interaction while developing webpages, games, applications, and even servers.JavaScript started at Netscape, a web browser developed in the 1990s, and is today one of the most famous and used programming languages.&lt;/p&gt; &#xA;&lt;p&gt;Initially, it was created for making webpages alive and was able to run on a browser only. Now, it runs on any device that supports the JavaScript engine. Standard objects such as &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, and &lt;code&gt;Math&lt;/code&gt; are available in JavaScript, as well as operators, control structures, and statements. &lt;em&gt;Client-side JavaScript&lt;/em&gt; and &lt;em&gt;Server-side JavaScript&lt;/em&gt; are the extended versions of Core JavaScript.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Client-side JavaScript&lt;/em&gt; enables the enhancement and manipulation of web pages and client browsers. Responses to user events such as mouse clicks, form input, and page navigation are some of its examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Server-side JavaScript&lt;/em&gt; enables access to servers, databases, and file systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;JavaScript is an interpreted language. While running Javascript an interpreter interprets each line and runs it. The modern browser uses Just In Time (JIT) technology for compilation, which compiles JavaScript into executable bytecode.&lt;/p&gt; &#xA;&lt;p&gt;{% hint style=&#34;info&#34; %} &#34;LiveScript&#34; was the initial name given to JavaScript. {% endhint %}&lt;/p&gt; &#xA;&lt;p&gt;This book is divided into three main parts. The first 14 chapters cover the JavaScript language. The following three chapters discuss how JavaScript is used to program web browsers. The final two chapters are miscellaneous, and exercises. Various important topics and cases related to JavaScript programming are described in the Miscellaneous chapter, which is followed exercises.&lt;/p&gt; &#xA;&lt;h3&gt;Code, and what to do with it&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Code&lt;/em&gt; is the written instructions that make up a program. Many chapters in this book contain a lot of code, and it is important to read and write code as part of learning how to program. You should not just quickly scan the examples - read them carefully and try to understand them. This may be difficult at first, but with practice, you will improve. The same goes for the exercises - make sure you actually try to write a solution before assuming you understand them. It is also helpful to try running your solutions to the exercises in a JavaScript interpreter, as this will allow you to see if your code is working correctly and may encourage you to experiment and go beyond the exercises.&lt;/p&gt; &#xA;&lt;h3&gt;Typographic conventions&lt;/h3&gt; &#xA;&lt;p&gt;In this book, text written in a monospaced font represents elements of a program. This can be a self-contained fragment or a reference to part of a nearby program. Programs, like the one shown below, are written in this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const numbers = [45, 4, 9, 16, 25];&#xA;let txt = &#34;&#34;;&#xA;for (let x in numbers) {&#xA;  txt += numbers[x];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes, the expected output of a program is written after it, preceded by two slashes with a &lt;em&gt;Result&lt;/em&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log(txt);&#xA;&#xA;// Result: txt = &#39;45491625&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Good Luck! 🍀&lt;/p&gt;</summary>
  </entry>
</feed>