<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-23T01:31:27Z</updated>
  <subtitle>Daily Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>susam/cfr</title>
    <updated>2023-10-23T01:31:27Z</updated>
    <id>tag:github.com,2023-10-23:/susam/cfr</id>
    <link href="https://github.com/susam/cfr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extremely minimal drawing language consisting of only 5 simple commands: C, F, R, [, and ].&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CFR[]&lt;/h1&gt; &#xA;&lt;p&gt;CFR[] (CFR Brackets) is an extremely minimal drawing language that conists of only five simple commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C&lt;/code&gt;: Change colour.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;F&lt;/code&gt;: Move forward by one cell and paint the new cell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;R&lt;/code&gt;: Rotate right (clockwise) by 45°.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&lt;/code&gt;: Begin repeatable block and continue executing subsequent code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;]&lt;/code&gt;: Repeat current repeatable block once more and end the block.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;]&lt;/code&gt; goes back to the beginning of the current repeatable block, repeats it once more, and ends the block. Thus a block bounded by &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; behaves like a loop that runs twice before the block exits. See sections &lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#commands&#34;&gt;Commands&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#loops&#34;&gt;Loops&lt;/a&gt; for more details about this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://susam.net/cfr.html#0&#34;&gt;&lt;img src=&#34;https://susam.github.io/blob/img/cfr/cfr-demo0-0.1.0.png&#34; alt=&#34;Screenshot of CFR Brackets Colour Bars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://susam.net/cfr.html#0&#34;&gt;See Demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://susam.net/cfr.html&#34;&gt;Draw Now&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#implementation&#34;&gt;Implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#get-started&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#demos&#34;&gt;Demos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#canvas&#34;&gt;Canvas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#turtle&#34;&gt;Turtle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#loops&#34;&gt;Loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#code-normalisation-and-validation&#34;&gt;Code Normalisation and Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#distributable-links&#34;&gt;Distributable Links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/#more&#34;&gt;More&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;CFR[] is inspired by the educational programming language Logo and the esoteric programming language P′′ (P double prime). Inspired by Logo, CFR[] has a virtual turtle that moves around on a graphical canvas and paints the canvas as it moves. Inspired by P′′, it has an extremely small set of commands. CFR[] is intentionally meant to be hard to write in and hard to read.&lt;/p&gt; &#xA;&lt;p&gt;This project introduces the CFR[] language and provides a web-based implementation using HTML5 Canvas and JavaScript.&lt;/p&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;The current stable version of a CFR[] implementation is available at the following links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://susam.net/cfr.html&#34;&gt;susam.net/cfr.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://susam.github.io/cfr.html&#34;&gt;susam.github.io/cfr.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A testing version with recent bug fixes is available here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://susam.github.io/cfr/cfr.html&#34;&gt;susam.github.io/cfr/cfr.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Enter the following code in the input field to draw a vertical column consisting of 16 cells:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FFFFFFFFFFFFFFFF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, using the block commands, this can be shortened to the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[[FF]]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a slightly more involved code that draws a colourful octagon where each side of the octagon consists of 16 cells.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[[[[[[FF]]]]RCC]]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The maximum code length supported is 256 bytes.&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;The implementation in this project comes with a small collection of demos. Type any digit between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;7&lt;/code&gt; to see the corresponding demo. Typing a digit may require an external keyboard. If there is no external keyboard available, append &lt;code&gt;#&lt;/code&gt; and a digit to the page URL with an on-screen keyboard. For example, the URL &lt;a href=&#34;https://susam.net/cfr.html#3&#34;&gt;https://susam.net/cfr.html#3&lt;/a&gt; shows demo number 3.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://susam.net/cfr.html#3&#34;&gt;&lt;img src=&#34;https://susam.github.io/blob/img/cfr/cfr-demo3-0.1.0.png&#34; alt=&#34;Screenshot of CFR Brackets Demo 3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here are direct links to demos currently available: &lt;a href=&#34;https://susam.net/cfr.html#0&#34;&gt;#0&lt;/a&gt;, &lt;a href=&#34;https://susam.net/cfr.html#1&#34;&gt;#1&lt;/a&gt;, &lt;a href=&#34;https://susam.net/cfr.html#2&#34;&gt;#2&lt;/a&gt;, &lt;a href=&#34;https://susam.net/cfr.html#3&#34;&gt;#3&lt;/a&gt;, &lt;a href=&#34;https://susam.net/cfr.html#4&#34;&gt;#4&lt;/a&gt;, &lt;a href=&#34;https://susam.net/cfr.html#5&#34;&gt;#5&lt;/a&gt;, &lt;a href=&#34;https://susam.net/cfr.html#6&#34;&gt;#6&lt;/a&gt;, and &lt;a href=&#34;https://susam.net/cfr.html#7&#34;&gt;#7&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have an interesting demo that fits in 64 bytes of code, please &lt;a href=&#34;https://github.com/susam/cfr/issues&#34;&gt;create an issue&lt;/a&gt; and share it. If the demo looks very interesting, it may be included to the above list of available demos.&lt;/p&gt; &#xA;&lt;h2&gt;Canvas&lt;/h2&gt; &#xA;&lt;p&gt;The drawing canvas is divided into a grid of 256x256 cells. There are 256 rows with 256 cells in each row. Initially, all 65536 cells of the canvas are painted black.&lt;/p&gt; &#xA;&lt;p&gt;The rows are numbered 0, 1, 2, etc. Similarly, the columns are numbered 0, 1, 2, etc. too. The cell at the top-left corner is at row 0 and column 0. The cell at the bottom-right corner is at row 255 and column 255.&lt;/p&gt; &#xA;&lt;h2&gt;Turtle&lt;/h2&gt; &#xA;&lt;p&gt;The CFR[] commands are described in terms of the movement of an invisible virtual turtle and changes in its properties. The turtle has three properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Location: The cell where the turtle is currently situated.&lt;/li&gt; &#xA; &lt;li&gt;Heading: The direction for the turtle&#39;s next movement if it moves.&lt;/li&gt; &#xA; &lt;li&gt;Colour: The colour to be used for painting the next cell.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Its current location, heading, and colour are determined by its initial properties and the preceding commands. The initial properties of the turtle are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Location: Row 127 and column 127.&lt;/li&gt; &#xA; &lt;li&gt;Heading: North (up).&lt;/li&gt; &#xA; &lt;li&gt;Colour: White.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;This section describes all five commands of CFR[] in detail.&lt;/p&gt; &#xA;&lt;h3&gt;C&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;C&lt;/code&gt; command changes the colour used to paint the next cell. A total of 8 colours are supported. They are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Black&lt;/li&gt; &#xA; &lt;li&gt;Blue&lt;/li&gt; &#xA; &lt;li&gt;Green&lt;/li&gt; &#xA; &lt;li&gt;Cyan&lt;/li&gt; &#xA; &lt;li&gt;Red&lt;/li&gt; &#xA; &lt;li&gt;Magenta&lt;/li&gt; &#xA; &lt;li&gt;Yellow&lt;/li&gt; &#xA; &lt;li&gt;White&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The initial colour is white. Each &lt;code&gt;C&lt;/code&gt; command changes the drawing colour to the next one in the above list. When the current drawing colour is white, &lt;code&gt;C&lt;/code&gt; changes the drawing colour to black, i.e., the drawing colour &lt;em&gt;wraps around&lt;/em&gt; to black.&lt;/p&gt; &#xA;&lt;p&gt;The following code draws four cells in white (the initial colour), then four cells in black, and finally four cells in blue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FFFFCFFFFCFFFF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first &lt;code&gt;C&lt;/code&gt; in the code above changes the drawing colour from white to black. The second &lt;code&gt;C&lt;/code&gt; changes it from black to blue. Note that the canvas background is black in colour, so the four cells drawn in black are going to be invisible on the black background.&lt;/p&gt; &#xA;&lt;h3&gt;F&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;F&lt;/code&gt; command moves the virtual turtle forward by one cell and paints the cell it moves to with the current drawing colour. The direction of movement is determined by the current heading of the turtle. Each &lt;code&gt;F&lt;/code&gt; command moves the turtle by exactly one cell and paints the entire cell it has moved to. This is true for diagonal movements too. For example, if the turtle moves in the northeast direction, it moves from the current cell diagonally to the next cell that is touching the top-right corner of the current cell. It then paints that new cell it has moved to.&lt;/p&gt; &#xA;&lt;p&gt;When the turtle is at the edge of the canvas and the next command moves the turtle beyond the edge, the turtle simply wraps around to the opposite edge of the canvas, i.e., the turtle reenters the canvas from the opposite edge.&lt;/p&gt; &#xA;&lt;h3&gt;R&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;R&lt;/code&gt; command changes the heading of the turtle by rotating it by 1/8th of a complete turn. The initial heading is north (up). The following command rotates the turtle three times so that its heading changes to southeast and then paints 4 cells diagonally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RRRFFFF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;[&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;[&lt;/code&gt; command marks the beginning of a repeatable block. It does not change the properties of the turtle. This is a control flow command that only introduces a new repeatable block without producing any visual side effects.&lt;/p&gt; &#xA;&lt;h3&gt;]&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;]&lt;/code&gt; command marks the end of the current repeatable block and repeats that block exactly once. As a result, when the code evaluator enters a block marked with &lt;code&gt;[&lt;/code&gt;, the block is executed twice before the evaluator leaves the end of the block marked with &lt;code&gt;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Loops&lt;/h2&gt; &#xA;&lt;p&gt;The following code moves the turtle twice and then rotates it once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[F]R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The opening square bracket (&lt;code&gt;[&lt;/code&gt;) marks the beginning of a block. Then &lt;code&gt;F&lt;/code&gt; is executed as usual thereby moving the turtle forward once. Then the closing square bracket (&lt;code&gt;]&lt;/code&gt;) repeats the current block thereby executing the &lt;code&gt;F&lt;/code&gt; inside the block once more. Finally the evaluator moves ahead to &lt;code&gt;R&lt;/code&gt; and rotates the turtle once. Note that the evaluator leaves a block after the block has been repeated twice.&lt;/p&gt; &#xA;&lt;p&gt;The following code moves the turtle 6 times:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[FFF]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following command moves the turtle 12 times.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[FFF]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The inner block executes &lt;code&gt;FFF&lt;/code&gt; twice. The outer block repeats the inner block twice. As a result, the inner block is repeated four times and the turtle moves forward by 12 cells.&lt;/p&gt; &#xA;&lt;h2&gt;Code Normalisation and Validation&lt;/h2&gt; &#xA;&lt;p&gt;The reference implementation performs the following two normalisation steps (in the given order) on the input code before executing the code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lowercase letters are converted to uppercase.&lt;/li&gt; &#xA; &lt;li&gt;Any character in the input code that does not match a valid CFR[] command is removed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The reference implementation generates errors when the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A closing square bracket (&lt;code&gt;]&lt;/code&gt;) is encountered that does not have a corresponding open square bracket (&lt;code&gt;[&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The length of the code exceeds 256 characters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When an error is generated, the entire canvas is painted red and the execution halts immediately.&lt;/p&gt; &#xA;&lt;h2&gt;Distributable Links&lt;/h2&gt; &#xA;&lt;p&gt;The reference implementation provides distributable links when the input code is 64 bytes or less in length. Note that the implementation allows code up to a maximum length of 256 bytes. However, no distributable link is generated when the code length exceeds 64 bytes. Thus code that does not exceed 64 bytes in length has a special status in the reference implementation.&lt;/p&gt; &#xA;&lt;p&gt;The distributable link encodes the input code and appends it as a URL fragment to the address of the current page. Copy the URL with the encoded input code embedded in it from the address bar of the web browser in order to share it with others. When the recipient of the URL opens it with their web browser, the implementation reads the code embedded in the URL, expands it, and executes it.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This is free and open source software. You can use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of it, under the terms of the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;This software is provided &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, express or implied. See &lt;a href=&#34;https://raw.githubusercontent.com/susam/cfr/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;To report bugs or ask questions, &lt;a href=&#34;https://github.com/susam/cfr/issues&#34;&gt;create issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/susam/invaders&#34;&gt;Andromeda Invaders&lt;/a&gt;, a 1980s-arcade-style game written using HTML5, Canvas, and Web Audio.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/susam/pcface&#34;&gt;PC Face&lt;/a&gt;, a collection of bitmap arrays for rendering CP437 glyphs using IBM PC OEM fonts.&lt;/p&gt; &#xA;&lt;!--&#xA;Release Checklist&#xA;-----------------&#xA;&#xA;- Update version in package.json.&#xA;- Update version in HTML (1 place).&#xA;- Update copyright in HTML (1 place).&#xA;- Update copyright in LICENSE.md.&#xA;- Disable logging.&#xA;- Update CHANGES.md.&#xA;- Run: npm run lint&#xA;- Run: git status; git add -p&#xA;- Run: VERSION=&lt;VERSION&gt;&#xA;- Run: git commit -em &#34;Set version to $VERSION&#34;&#xA;- Run: git tag $VERSION -m &#34;CFR[] $VERSION&#34;&#xA;- Run: git push origin main $VERSION&#xA;--&gt;</summary>
  </entry>
  <entry>
    <title>RuanAragao/calculator</title>
    <updated>2023-10-23T01:31:27Z</updated>
    <id>tag:github.com,2023-10-23:/RuanAragao/calculator</id>
    <link href="https://github.com/RuanAragao/calculator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create your own calculator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Calculator&lt;/h1&gt; &#xA;&lt;p&gt;Create your own calculator&lt;/p&gt; &#xA;&lt;h2&gt;How&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Star ✨ this project 👀🫶&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;a href=&#34;https://github.com/RuanAragao/calculator/issues&#34;&gt;issues&lt;/a&gt; and create a new. Add the name of your calculator in title and comment a short prupose of your calculator.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Example:&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;h4&gt;title:&lt;/h4&gt; &#xA; &lt;p&gt;Screw calculator&lt;/p&gt; &#xA; &lt;h4&gt;comment:&lt;/h4&gt; &#xA; &lt;p&gt;convert weight to units&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Fork this project&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a folder in &lt;a href=&#34;https://raw.githubusercontent.com/RuanAragao/calculator/main/calculators/&#34;&gt;[root]/calculators&lt;/a&gt; with the name of your calculator using the &lt;em&gt;Kebab case&lt;/em&gt; convention.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Example:&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;code&gt;mkdir example-calculator&lt;/code&gt; &amp;gt; &lt;code&gt;[root]/calculators/example-calculator&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Iside your folder calculator is required &lt;code&gt;index.html&lt;/code&gt; file with your calculator.&lt;/li&gt; &#xA; &lt;li&gt;Edit the &lt;a href=&#34;https://raw.githubusercontent.com/RuanAragao/calculator/main/index.html&#34;&gt;/index.html&lt;/a&gt; file and add the your calculator folder link in alphabetical order with a &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; in the end. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Example:&lt;/p&gt; &#xA;   &lt;hr&gt; &#xA;   &lt;p&gt;&lt;code&gt;&amp;lt;a href=&#34;/calculators/example-calculator&#34;&amp;gt;Example Calculator&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open your pull request with &#34;Closes #{your-issue-number}&#34;. Example &#34;Closes #10&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Steps to contribute:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the repository by clicking the &#34;Fork&#34; button in the upper right corner of this page.&lt;/li&gt; &#xA; &lt;li&gt;Clone repository to your local machine:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/RuanAragao/calculator.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new branch for your contribution:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout -b your-branch-name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test your changes locally to ensure they function correctly.&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes with commit messages which contains description:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git commit -m &#34;commit message&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Push your changes to your forked repository:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git push origin your-branch-name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a pull request to the main branch of this repository.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you find any bugs or have any suggestions, please open an issue on GitHub and provide detailed information about the bug or suggestion. Once your pull request is submitted, it will be reviewed by the project maintainers.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/contributing-to-projects#making-a-pull-request&#34;&gt;Making a pull request&lt;/a&gt; 🔗 &lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;)&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/contributing-to-projects#managing-feedback&#34;&gt;Managing feedback&lt;/a&gt; 🔗 &lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;)&lt;/h3&gt;</summary>
  </entry>
</feed>