<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-01T01:51:37Z</updated>
  <subtitle>Monthly Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bobbyiliev/introduction-to-bash-scripting</title>
    <updated>2024-08-01T01:51:37Z</updated>
    <id>tag:github.com,2024-08-01:/bobbyiliev/introduction-to-bash-scripting</id>
    <link href="https://github.com/bobbyiliev/introduction-to-bash-scripting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free Introduction to Bash Scripting eBook&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://imgur.com/eXCcDPp.png&#34; height=&#34;450&#34; width=&#34;auto&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;a name=&#34;stars&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/bobbyiliev/introduction-to-bash-scripting?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a name=&#34;forks&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/bobbyiliev/introduction-to-bash-scripting?logoColor=green&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a name=&#34;contributions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/bobbyiliev/introduction-to-bash-scripting?logoColor=green&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a name=&#34;madeWith&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with-Markdown-1f425f.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a name=&#34;license&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/bobbyiliev/introduction-to-bash-scripting?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;💡 Introduction to Bash Scripting&lt;/h2&gt; &#xA;&lt;p&gt;This is an open-source introduction to Bash scripting guide/ebook that will help you learn the basics of Bash scripting and start writing awesome Bash scripts that will help you automate your daily SysOps, DevOps, and Dev tasks. No matter if you are a DevOps/SysOps engineer, developer, or just a Linux enthusiast, you can use Bash scripts to combine different Linux commands and automate boring and repetitive daily tasks, so that you can focus on more productive and fun things.&lt;/p&gt; &#xA;&lt;p&gt;The guide is suitable for anyone working as a developer, system administrator, or a DevOps engineer and wants to learn the basics of Bash scripting.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Download&lt;/h2&gt; &#xA;&lt;p&gt;To download a copy of the ebook use one of the following links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/bobbyiliev/introduction-to-bash-scripting/raw/main/ebook/en/export/introduction-to-bash-scripting-dark.pdf&#34;&gt;Dark mode&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/bobbyiliev/introduction-to-bash-scripting/raw/main/ebook/en/export/introduction-to-bash-scripting-light.pdf&#34;&gt;Light mode&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/bobbyiliev/introduction-to-bash-scripting/raw/main/ebook/en/export/introduction-to-bash-scripting.epub&#34;&gt;ePub&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📘 Chapters&lt;/h2&gt; &#xA;&lt;p&gt;The first 13 chapters would be purely focused on getting some solid Bash scripting foundations then the rest of the chapters would give you some real life examples and scripts.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/000-about-the-author.md&#34;&gt;&lt;strong&gt;About the book&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/001-introduction-to-bash.md&#34;&gt;&lt;strong&gt;Introduction to Bash scripting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/002-bash-structure.md&#34;&gt;&lt;strong&gt;Bash Structure&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/003-bash-hello-world.md&#34;&gt;&lt;strong&gt;Bash Hello World&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/004-bash-variables.md&#34;&gt;&lt;strong&gt;Bash Variables&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/005-bash-user-input.md&#34;&gt;&lt;strong&gt;Bash User Input&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/006-bash-comments.md&#34;&gt;&lt;strong&gt;Bash Comments&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/007-bash-arguments.md&#34;&gt;&lt;strong&gt;Bash Arguments&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/008-bash-arrays.md&#34;&gt;&lt;strong&gt;Bash Arrays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/009-bash-conditional-expressions.md&#34;&gt;&lt;strong&gt;Bash Conditional Expressions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/010-bash-conditionals.md&#34;&gt;&lt;strong&gt;Bash Conditionals&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/011-bash-loops.md&#34;&gt;&lt;strong&gt;Bash Loops&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/012-bash-functions.md&#34;&gt;&lt;strong&gt;Bash Functions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/013-debugging-and-testing.md&#34;&gt;&lt;strong&gt;Debugging, testing and shortcuts&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/014-creating-custom-bash-commands.md&#34;&gt;&lt;strong&gt;Creating custom bash commands&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/015-writing-your-first-bash-script.md&#34;&gt;&lt;strong&gt;Write your first Bash script&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/016-creating-an-interactive-menu-in-bash.md&#34;&gt;&lt;strong&gt;Creating an interactive menu in Bash&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/017-executing-bash-script-on-multiple-remote-server.md&#34;&gt;&lt;strong&gt;Executing BASH scripts on Multiple Remote Servers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md&#34;&gt;&lt;strong&gt;Work with JSON in BASH using jq&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/019-working-with-cloudflare-api-with-bash.md&#34;&gt;&lt;strong&gt;Working with Cloudflare API with Bash&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/020-nginx-and-apache-log-parser.md&#34;&gt;&lt;strong&gt;BASH Script parser to Summarize Your NGINX and Apache Access Logs&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/021-how-to-send-emails-with-bash.md&#34;&gt;&lt;strong&gt;Sending emails with Bash and SSMTP&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/022-bash-password-generator.md&#34;&gt;&lt;strong&gt;Bash Password Generator&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/023-bash-redirection.md&#34;&gt;&lt;strong&gt;Redirection in Bash&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/ebook/en/content/100-bash-wrap-up.md&#34;&gt;&lt;strong&gt;Wrap Up&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🌟 Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;This book is made possible thanks to these fantastic companies!&lt;/p&gt; &#xA;&lt;h3&gt;📊 Materialize&lt;/h3&gt; &#xA;&lt;p&gt;The Streaming Database for Real-time Analytics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://materialize.com/&#34;&gt;Materialize&lt;/a&gt; is a reactive database that delivers incremental view updates. Materialize helps developers easily build with streaming data using standard SQL.&lt;/p&gt; &#xA;&lt;h3&gt;💙 DigitalOcean&lt;/h3&gt; &#xA;&lt;p&gt;DigitalOcean is a cloud services platform delivering the simplicity developers love and businesses trust to run production applications at scale.&lt;/p&gt; &#xA;&lt;p&gt;It provides highly available, secure, and scalable compute, storage, and networking solutions that help developers build great software faster.&lt;/p&gt; &#xA;&lt;p&gt;Founded in 2012 with offices in New York and Cambridge, MA, DigitalOcean offers transparent and affordable pricing, an elegant user interface, and one of the largest libraries of open source resources available.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please visit &lt;a href=&#34;https://www.digitalocean.com&#34;&gt;https://www.digitalocean.com&lt;/a&gt; or follow &lt;a href=&#34;https://twitter.com/digitalocean&#34;&gt;@digitalocean&lt;/a&gt; on Twitter.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to DigitalOcean, you can get a free $100 credit and spin up your own servers via this referral link here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://m.do.co/c/2a9bba940f39&#34;&gt;Free $100 Credit For DigitalOcean&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;👩‍💻 DevDojo&lt;/h3&gt; &#xA;&lt;p&gt;The DevDojo is a resource to learn all things web development and web design. Learn on your lunch break or wake up and enjoy a cup of coffee with us to learn something new.&lt;/p&gt; &#xA;&lt;p&gt;Join this developer community, and we can all learn together, build together, and grow together.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://devdojo.com?ref=bobbyiliev&#34;&gt;Join DevDojo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information, please visit &lt;a href=&#34;https://www.devdojo.com?ref=bobbyiliev&#34;&gt;https://www.devdojo.com&lt;/a&gt; or follow &lt;a href=&#34;https://twitter.com/thedevdojo&#34;&gt;@thedevdojo&lt;/a&gt; on Twitter.&lt;/p&gt; &#xA;&lt;h2&gt;🕸️ Web Page&lt;/h2&gt; &#xA;&lt;p&gt;A web page showcasing the eBook:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ebook.bobby.sh/&#34;&gt;Introduction to Bash Scripting Web Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The web page was built using &lt;a href=&#34;http://devdojo.com/tails&#34;&gt;Tails&lt;/a&gt;, a new &lt;code&gt;kick-ass&lt;/code&gt; drag-and-drop TailwindCSS page builder!&lt;/p&gt; &#xA;&lt;h3&gt;DigitalOcean App Platform&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://ebook.bobby.sh&#34;&gt;website&lt;/a&gt; is hosted on the &lt;a href=&#34;https://www.digitalocean.com/products/app-platform/&#34;&gt;DigitalOcean App Platform&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We utilize the &lt;a href=&#34;https://www.digitalocean.com/docs/app-platform/how-to/add-deploy-do-button&#34;&gt;&#34;Deploy to DigitalOcean&#34; Button&lt;/a&gt; to deploy to the App Platform:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.digitalocean.com/apps/new?repo=https://github.com/bobbyiliev/introduction-to-bash-scripting/tree/main&#34;&gt;&lt;img src=&#34;https://mp-assets1.sfo2.digitaloceanspaces.com/deploy-to-do/do-btn-blue.svg?sanitize=true&#34; alt=&#34;Deploy to DO&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📹 Mini Video Course&lt;/h2&gt; &#xA;&lt;p&gt;If you prefer watching videos rather than reading, you can find a quick crash course based on the first 12 chapters of the eBook here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLY7SzAmnEqp78tsHh1kK0gOx_f-uwQZAT&#34;&gt;Introduction to Bash Scripting Mini Video Crash Course&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💻 Interactive training&lt;/h2&gt; &#xA;&lt;p&gt;You can follow the interactive training online here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ebook.bobby.sh/training.html&#34;&gt;Introduction to Bash Scripting Interactive training&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The training was built with Katacoda. You can find the Katacoda repository &lt;a href=&#34;https://github.com/bobbyiliev/katacoda&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to use Katacoda make sure to follow the steps from this tutorial here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://devdojo.com/bobbyiliev/how-to-use-katacoda-to-create-highly-engaging-training-tutorials&#34;&gt;How to Use Katacoda to Create Highly Engaging Training Tutorials&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;👋 About the author&lt;/h2&gt; &#xA;&lt;p&gt;My name is Bobby Iliev, and I have been working as a Linux DevOps Engineer since 2014. I am an avid Linux lover and supporter of the open-source movement philosophy. I am always doing that which I cannot do in order that I may learn how to do it, and I believe in sharing knowledge.&lt;/p&gt; &#xA;&lt;p&gt;I think it&#39;s essential always to keep professional and surround yourself with good people, work hard, and be nice to everyone. You have to perform at a consistently higher level than others. That&#39;s the mark of a true professional.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please visit my blog at &lt;a href=&#34;https://bobbyiliev.com&#34;&gt;https://bobbyiliev.com&lt;/a&gt;, follow me on Twitter &lt;a href=&#34;https://twitter.com/bobbyiliev_&#34;&gt;@bobbyiliev_&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/channel/UCQWmdHTeAO0UvaNqve9udRw&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case that you want to support me you can Buy Me a Coffee here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/bobbyiliev&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🔥 PDF Generation Tool&lt;/h2&gt; &#xA;&lt;p&gt;The project uses &lt;a href=&#34;https://github.com/themsaid/ibis/&#34;&gt;Ibis&lt;/a&gt; developed by &lt;a href=&#34;https://github.com/themsaid&#34;&gt;Mohamed Said&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ibis is a PHP tool that helps you write eBooks in markdown.&lt;/p&gt; &#xA;&lt;h2&gt;🎨 Book Cover&lt;/h2&gt; &#xA;&lt;p&gt;The cover for this ebook was created with &lt;a href=&#34;https://www.canva.com/join/determined-cork-learn&#34;&gt;Canva.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you ever need to create a graphic, poster, invitation, logo, presentation – or anything that looks good — give Canva a go.&lt;/p&gt; &#xA;&lt;h2&gt;🔗 Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bobbyiliev.com&#34;&gt;My blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://m.do.co/c/2a9bba940f39&#34;&gt;Free $100 Credit For DigitalOcean&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devdojo.com?ref=bobbyiliev&#34;&gt;Join DevDojo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/themsaid/ibis/&#34;&gt;Ibis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.canva.com/&#34;&gt;Canva&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://devdojo.com/tails&#34;&gt;Tails&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.katacoda.com/&#34;&gt;Katacoda&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📖 Other eBooks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bobbyiliev/introduction-to-git-and-github-ebook&#34;&gt;Introduction to Git and GitHub eBook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bobbyiliev/introduction-to-sql&#34;&gt;Introduction to SQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bobbyiliev/laravel-tips-and-tricks-ebook&#34;&gt;Laravel tips and tricks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🤲 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you are contributing 🍿 please read the &lt;a href=&#34;https://raw.githubusercontent.com/bobbyiliev/introduction-to-bash-scripting/main/CONTRIBUTING.md&#34;&gt;contributing file&lt;/a&gt; before submitting your pull requests.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RayTracing/raytracing.github.io</title>
    <updated>2024-08-01T01:51:37Z</updated>
    <id>tag:github.com,2024-08-01:/RayTracing/raytracing.github.io</id>
    <link href="https://github.com/RayTracing/raytracing.github.io" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main Web Site (Online Books)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ray Tracing in One Weekend Book Series&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RayTracing/raytracing.github.io/release/images/cover/CoverRTW1-small.jpg&#34; alt=&#34;RT in One Weekend&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RayTracing/raytracing.github.io/release/images/cover/CoverRTW2-small.jpg&#34; alt=&#34;RT The Next Week&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RayTracing/raytracing.github.io/release/images/cover/CoverRTW3-small.jpg&#34; alt=&#34;RT The Rest of Your Life&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayTracing/raytracing.github.io/release/books/RayTracingInOneWeekend.html&#34;&gt;In One Weekend&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayTracing/raytracing.github.io/release/books/RayTracingTheNextWeek.html&#34;&gt;The Next Week&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayTracing/raytracing.github.io/release/books/RayTracingTheRestOfYourLife.html&#34;&gt;The Rest of Your Life&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting the Books&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;Ray Tracing in One Weekend&lt;/em&gt; series of books are now available to the public for free directly from the web.&lt;/p&gt; &#xA;&lt;h3&gt;Version 4.0.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raytracing.github.io/books/RayTracingInOneWeekend.html&#34;&gt;Ray Tracing in One Weekend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raytracing.github.io/books/RayTracingTheNextWeek.html&#34;&gt;Ray Tracing: The Next Week&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raytracing.github.io/books/RayTracingTheRestOfYourLife.html&#34;&gt;Ray Tracing: The Rest of Your Life&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These books have been formatted for both screen and print. For more information about printing your own copies, or on getting PDFs of the books, see &lt;a href=&#34;https://raw.githubusercontent.com/RayTracing/raytracing.github.io/release/PRINTING.md&#34;&gt;PRINTING.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute a PR &lt;em&gt;&lt;strong&gt;please read our &lt;a href=&#34;https://raw.githubusercontent.com/RayTracing/raytracing.github.io/release/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; first&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;v4.0.0 has shipped! Three and a half years in the making, with massive changes to all three books and accompanying code.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to check out the latest updates and watch our progress, we&#39;re on the &lt;code&gt;dev-patch&lt;/code&gt;, &lt;code&gt;dev-minor&lt;/code&gt;, and &lt;code&gt;dev-major&lt;/code&gt; branches. You can also browse our release backlog to see what we&#39;re planning.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing, email us! You can find our contact info at the head of each book. Or just start &lt;a href=&#34;https://github.com/RayTracing/raytracing.github.io/discussions/&#34;&gt;a new discussion&lt;/a&gt; or &lt;a href=&#34;https://github.com/RayTracing/raytracing.github.io/issues/&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GitHub Discussions&lt;/h2&gt; &#xA;&lt;p&gt;Do you have general questions about raytracing code, issues with your own implmentation, or general raytracing ideas you&#39;d like to share? Check out our &lt;a href=&#34;https://github.com/RayTracing/raytracing.github.io/discussions/&#34;&gt;GitHub discussions&lt;/a&gt; forum!&lt;/p&gt; &#xA;&lt;h2&gt;Directory Structure&lt;/h2&gt; &#xA;&lt;p&gt;The organization of this repository is meant to be simple and self-evident at a glance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;books/&lt;/code&gt; -- This folder contains the three raytracing books (in HTML), and some supporting material.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;images/&lt;/code&gt; -- Contains all of the images and figures of the books. Can also be used to compare your results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;style/&lt;/code&gt; -- Contains the css for the books and the site.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;src/&lt;/code&gt; -- Contains the source.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;src/&amp;lt;book&amp;gt;/&lt;/code&gt; -- Contains the final source code for each book.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Source Code&lt;/h2&gt; &#xA;&lt;h3&gt;Intent&lt;/h3&gt; &#xA;&lt;p&gt;This repository is not meant to act as its own tutorial. The source is provided so you can compare your work when progressing through the book. We strongly recommend reading and following along with the book to understand the source. Ideally, you&#39;ll be developing your own implementation as you go, in order to deeply understand how a raytracer works.&lt;/p&gt; &#xA;&lt;h3&gt;Downloading The Source Code&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/RayTracing/raytracing.github.io/&#34;&gt;GitHub home&lt;/a&gt; for this project contains all source and documentation associated with the &lt;em&gt;Ray Tracing in One Weekend&lt;/em&gt; book series. To clone or download the source code, see the green &#34;Clone or download&#34; button in the upper right of the project home page.&lt;/p&gt; &#xA;&lt;h3&gt;Programming Language&lt;/h3&gt; &#xA;&lt;p&gt;This book is written in C++, and uses some modern features of C++11. The language and features were chosen to be broadly understood by the largest collection of programmers. It is not meant to represent ideal (or optimized) C++ code.&lt;/p&gt; &#xA;&lt;h3&gt;Implementations in Other Languages&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;Ray Tracing in One Weekend&lt;/em&gt; series has a long history of implementations in other programming languages (see &lt;a href=&#34;https://github.com/RayTracing/raytracing.github.io/wiki/Implementations&#34;&gt;Implementations in Other Languages&lt;/a&gt;), and across different operating systems. Feel free to add your own implementation to the list!&lt;/p&gt; &#xA;&lt;h3&gt;Branches&lt;/h3&gt; &#xA;&lt;p&gt;In general, ongoing development, with all of the latest changes, can be found in the &lt;code&gt;dev-patch&lt;/code&gt;, &lt;code&gt;dev-minor&lt;/code&gt;, and &lt;code&gt;dev-major&lt;/code&gt; branches, minor and major changes, depending on the change level and release in progress. We try to keep CHANGELOG.md up to date, so you can easily browse what&#39;s new in each development branch. We may from time to time use additional development branches, so stay up to date by reviewing the &lt;a href=&#34;https://raw.githubusercontent.com/RayTracing/raytracing.github.io/release/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;release&lt;/code&gt; branch contains the latest released (and live) assets. This is the branch from which GitHub pages serves up &lt;a href=&#34;https://raytracing.github.io/&#34;&gt;https://raytracing.github.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building and Running&lt;/h2&gt; &#xA;&lt;p&gt;Copies of the source are provided for you to check your work and compare against. If you wish to build the provided source, this project uses CMake. To build, go to the root of the project directory and run the following commands to create the debug version of every executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake -B build&#xA;$ cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should run &lt;code&gt;cmake -B build&lt;/code&gt; whenever you change your project &lt;code&gt;CMakeLists.txt&lt;/code&gt; file (like when adding a new source file).&lt;/p&gt; &#xA;&lt;p&gt;You can specify the target with the &lt;code&gt;--target &amp;lt;program&amp;gt;&lt;/code&gt; option, where the program may be &lt;code&gt;inOneWeekend&lt;/code&gt;, &lt;code&gt;theNextWeek&lt;/code&gt;, &lt;code&gt;theRestOfYourLife&lt;/code&gt;, or any of the demonstration programs. By default (with no &lt;code&gt;--target&lt;/code&gt; option), CMake will build all targets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake --build build --target inOneWeekend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optimized Builds&lt;/h3&gt; &#xA;&lt;p&gt;CMake supports Release and Debug configurations. These require slightly different invocations across Windows (MSVC) and Linux/macOS (using GCC or Clang). The following instructions will place optimized binaries under &lt;code&gt;build/Release&lt;/code&gt; and debug binaries (unoptimized and containing debug symbols) under &lt;code&gt;build/Debug&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;On Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cmake -B build&#xA;$ cmake --build build --config Release  # Create release binaries in `build\Release`&#xA;$ cmake --build build --config Debug    # Create debug binaries in `build\Debug`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux / macOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Configure and build release binaries under `build/Release`&#xA;$ cmake -B build/Release -DCMAKE_BUILD_TYPE=Release&#xA;$ cmake --build build/Release&#xA;&#xA;# Configure and build debug binaries under `build/Debug`&#xA;$ cmake -B build/Debug -DCMAKE_BUILD_TYPE=Debug&#xA;$ cmake --build build/Debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend building and running the &lt;code&gt;Release&lt;/code&gt; version (especially before the final render) for the fastest results, unless you need the extra debug information provided by the (default) debug build.&lt;/p&gt; &#xA;&lt;h3&gt;CMake GUI on Windows&lt;/h3&gt; &#xA;&lt;p&gt;You may choose to use the CMake GUI when building on windows.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open CMake GUI on Windows&lt;/li&gt; &#xA; &lt;li&gt;For &#34;Where is the source code:&#34;, set to location of the copied directory. For example, &lt;code&gt;C:\Users\Peter\raytracing.github.io&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add the folder &#34;build&#34; within the location of the copied directory. For example, &lt;code&gt;C:\Users\Peter\raytracing.github.io\build&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For &#34;Where to build the binaries&#34;, set this to the newly-created &#34;build&#34; directory.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Configure&#34;.&lt;/li&gt; &#xA; &lt;li&gt;For &#34;Specify the generator for this project&#34;, set this to your version of Visual Studio.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Done&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Configure&#34; again.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Generate&#34;.&lt;/li&gt; &#xA; &lt;li&gt;In File Explorer, navigate to build directory and double click the newly-created &lt;code&gt;.sln&lt;/code&gt; project.&lt;/li&gt; &#xA; &lt;li&gt;Build in Visual Studio.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If the project is succesfully cloned and built, you can then use the native terminal of your operating system to simply print the image to file.&lt;/p&gt; &#xA;&lt;h3&gt;Running The Programs&lt;/h3&gt; &#xA;&lt;p&gt;You can run the programs by executing the binaries placed in the build directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ build\Debug\inOneWeekend &amp;gt; image.ppm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, run the optimized version (if you compiled with the release configuration):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ build\Release\inOneWeekend &amp;gt; image.ppm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated PPM file can be viewed directly as a regular computer image, if your operating system supports this image type. If your system doesn&#39;t handle PPM files, then you should be able to find PPM file viewers online. We like &lt;a href=&#34;https://imagemagick.org/&#34;&gt;ImageMagick&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Corrections &amp;amp; Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If you spot errors, have suggested corrections, or would like to help out with the project, &lt;em&gt;&lt;strong&gt;please review the &lt;a href=&#34;https://raw.githubusercontent.com/RayTracing/raytracing.github.io/release/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for the most effective way to proceed.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>unfoldadmin/django-unfold</title>
    <updated>2024-08-01T01:51:37Z</updated>
    <id>tag:github.com,2024-08-01:/unfoldadmin/django-unfold</id>
    <link href="https://github.com/unfoldadmin/django-unfold" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern Django admin theme for seamless interface development&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/unfoldadmin/django-unfold/assets/10785882/291e69c9-abdd-4f7e-a0d6-2af210a9013a#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://github.com/unfoldadmin/django-unfold/assets/10785882/291e69c9-abdd-4f7e-a0d6-2af210a9013a#gh-light-mode-only&#34; alt=&#34;screenshot-light&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/unfoldadmin/django-unfold/assets/10785882/94a2e90f-924a-4aaf-b6d9-cb1592000c55#gh-dark-mode-only&#34;&gt;&lt;img src=&#34;https://github.com/unfoldadmin/django-unfold/assets/10785882/94a2e90f-924a-4aaf-b6d9-cb1592000c55#gh-dark-mode-only&#34; alt=&#34;screenshot-dark&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Unfold Django Admin Theme &#xA; &lt;!-- omit from toc --&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/unfoldadmin/django-unfold/actions?query=workflow%3Arelease&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/unfoldadmin/django-unfold/release.yml?style=for-the-badge&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/django-unfold/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/django-unfold.svg?style=for-the-badge&#34; alt=&#34;PyPI - Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/code%20style-ruff-30173D.svg?style=for-the-badge&#34; alt=&#34;Code Style - Ruff&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;amp;logoColor=white&amp;amp;style=for-the-badge&#34; alt=&#34;Pre Commit&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unfold is a theme for Django admin incorporating most common practices for building full-fledged admin areas. It is designed to work on top of default administration provided by Django.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unfold:&lt;/strong&gt; demo site is available at &lt;a href=&#34;https://unfoldadmin.com?utm_medium=github&amp;amp;utm_source=unfold&#34;&gt;unfoldadmin.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Formula:&lt;/strong&gt; repository with demo implementation at &lt;a href=&#34;https://github.com/unfoldadmin/formula&#34;&gt;github.com/unfoldadmin/formula&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Turbo:&lt;/strong&gt; Django &amp;amp; Next.js boilerplate implementing Unfold at &lt;a href=&#34;https://github.com/unfoldadmin/turbo&#34;&gt;github.com/unfoldadmin/turbo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Are you using Unfold and need a help?&#xA; &lt;!-- omit from toc --&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Did you decide to start using Unfold but you don&#39;t have time to make the switch from native Django admin? &lt;a href=&#34;https://unfoldadmin.com/?utm_medium=github&amp;amp;utm_source=unfold&#34;&gt;Get in touch with us&lt;/a&gt; and let&#39;s supercharge development by using our know-how.&lt;/p&gt; &#xA;&lt;h2&gt;Features &#xA; &lt;!-- omit from toc --&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visual&lt;/strong&gt;: provides a new user interface based on Tailwind CSS framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sidebar:&lt;/strong&gt; simplifies definition of custom sidebar navigation with icons&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dark mode:&lt;/strong&gt; supports both light and dark mode versions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configuration:&lt;/strong&gt; most of the basic options can be changed in settings.py&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependencies:&lt;/strong&gt; completely based only on &lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Actions:&lt;/strong&gt; multiple ways how to define actions within different parts of admin&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WYSIWYG:&lt;/strong&gt; built-in support for WYSIWYG (Trix)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Array widget:&lt;/strong&gt; built-in widget for &lt;code&gt;django.contrib.postgres.fields.ArrayField&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Filters:&lt;/strong&gt; custom dropdown, numeric, datetime, and text fields&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dashboard:&lt;/strong&gt; custom components for rapid dashboard development&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Inline tabs:&lt;/strong&gt; group inlines into tab navigation in the change form&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Model tabs:&lt;/strong&gt; define custom tab navigations for models&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fieldset tabs:&lt;/strong&gt; merge several fieldsets into tabs in the change form&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Colors:&lt;/strong&gt; possibility to override the default color scheme&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Changeform modes:&lt;/strong&gt; display fields in the change form in compressed mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Third party packages:&lt;/strong&gt; default support for multiple popular applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Environment label&lt;/strong&gt;: distinguish between environments by displaying a label&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nonrelated inlines&lt;/strong&gt;: displays nonrelated model as inline in changeform&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parallel admin&lt;/strong&gt;: support for default admin in parallel with Unfold. &lt;a href=&#34;https://unfoldadmin.com/blog/migrating-django-admin-unfold/?utm_medium=github&amp;amp;utm_source=unfold&#34;&gt;Admin migration guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Favicons&lt;/strong&gt;: built-in support for configuring various site favicons&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VS Code&lt;/strong&gt;: project configuration and development container is included&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of contents &#xA; &lt;!-- omit from toc --&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#available-settingspy-options&#34;&gt;Available settings.py options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#available-unfoldadminmodeladmin-options&#34;&gt;Available unfold.admin.ModelAdmin options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#actions&#34;&gt;Actions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#actions-overview&#34;&gt;Actions overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#custom-unfold-action-decorator&#34;&gt;Custom unfold @action decorator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#action-handler-functions&#34;&gt;Action handler functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#action-examples&#34;&gt;Action examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#action-with-form-example&#34;&gt;Action with form example&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#filters&#34;&gt;Filters&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#text-filters&#34;&gt;Text filters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#dropdown-filters&#34;&gt;Dropdown filters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#numeric-filters&#34;&gt;Numeric filters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#datetime-filters&#34;&gt;Date/time filters&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#custom-admin-pages&#34;&gt;Custom admin pages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#display-decorator&#34;&gt;Display decorator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#change-form-tabs&#34;&gt;Change form tabs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#inlines&#34;&gt;Inlines&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#custom-title&#34;&gt;Custom title&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#hide-title-row&#34;&gt;Hide title row&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#display-as-tabs&#34;&gt;Display as tabs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#nonrelated-inlines&#34;&gt;Nonrelated inlines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#third-party-packages&#34;&gt;Third party packages&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-celery-beat&#34;&gt;django-celery-beat&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-guardian&#34;&gt;django-guardian&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-import-export&#34;&gt;django-import-export&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-modeltranslation&#34;&gt;django-modeltranslation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-money&#34;&gt;django-money&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#django-simple-history&#34;&gt;django-simple-history&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#user-admin-form&#34;&gt;User Admin Form&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#adding-custom-styles-and-scripts&#34;&gt;Adding custom styles and scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#project-level-tailwind-stylesheet&#34;&gt;Project level Tailwind stylesheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#admin-dashboard&#34;&gt;Admin dashboard&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#overriding-template&#34;&gt;Overriding template&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#custom-variables&#34;&gt;Custom variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#unfold-components&#34;&gt;Unfold components&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#table-component-example&#34;&gt;Table component example&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#unfold-development&#34;&gt;Unfold development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#pre-commit&#34;&gt;Pre-commit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#poetry-configuration&#34;&gt;Poetry configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#compiling-tailwind&#34;&gt;Compiling Tailwind&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#design-system&#34;&gt;Design system&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#using-vs-code-with-containers&#34;&gt;Using VS Code with containers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#development-server&#34;&gt;Development server&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#compiling-tailwind-in-devcontainer&#34;&gt;Compiling Tailwind in devcontainer&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The installation process is minimal. Everything that is needed after installation is to put new application at the beginning of &lt;strong&gt;INSTALLED_APPS&lt;/strong&gt;. The default admin configuration in urls.py can stay as it is, and no changes are required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py&#xA;&#xA;INSTALLED_APPS = [&#xA;    &#34;unfold&#34;,  # before django.contrib.admin&#xA;    &#34;unfold.contrib.filters&#34;,  # optional, if special filters are needed&#xA;    &#34;unfold.contrib.forms&#34;,  # optional, if special form elements are needed&#xA;    &#34;unfold.contrib.inlines&#34;,  # optional, if special inlines are needed&#xA;    &#34;unfold.contrib.import_export&#34;,  # optional, if django-import-export package is used&#xA;    &#34;unfold.contrib.guardian&#34;,  # optional, if django-guardian package is used&#xA;    &#34;unfold.contrib.simple_history&#34;,  # optional, if django-simple-history package is used&#xA;    &#34;django.contrib.admin&#34;,  # required&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you need installation command below are the versions for &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;poetry&lt;/code&gt; which needs to be executed in shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install django-unfold&#xA;poetry add django-unfold&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just for an example below is the minimal admin configuration in terms of adding Unfold into URL paths.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# urls.py&#xA;&#xA;from django.contrib import admin&#xA;from django.urls import path&#xA;&#xA;urlpatterns = [&#xA;    path(&#34;admin/&#34;, admin.site.urls),&#xA;    # Other URL paths&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installation, it is required that admin classes are going to inherit from custom &lt;code&gt;ModelAdmin&lt;/code&gt; available in &lt;code&gt;unfold.admin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.contrib import admin&#xA;from unfold.admin import ModelAdmin&#xA;&#xA;&#xA;@admin.register(MyModel)&#xA;class CustomAdminClass(ModelAdmin):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Registered admin models coming from third party packages are not going to properly work with Unfold because of parent class. By default, these models are registered by using &lt;code&gt;django.contrib.admin.ModelAdmin&lt;/code&gt; but it is needed to use &lt;code&gt;unfold.admin.ModelAdmin&lt;/code&gt;. Solution for this problem is to unregister model and then again register it back by using &lt;code&gt;unfold.admin.ModelAdmin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.contrib import admin&#xA;from django.contrib.auth.admin import UserAdmin as BaseUserAdmin&#xA;from django.contrib.auth.admin import GroupAdmin as BaseGroupAdmin&#xA;from django.contrib.auth.models import User&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;&#xA;&#xA;admin.site.unregister(User)&#xA;admin.site.unregister(Group)&#xA;&#xA;&#xA;@admin.register(User)&#xA;class UserAdmin(BaseUserAdmin, ModelAdmin):&#xA;    pass&#xA;&#xA;&#xA;@admin.register(Group)&#xA;class GroupAdmin(BaseGroupAdmin, ModelAdmin):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Available settings.py options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py&#xA;&#xA;from django.templatetags.static import static&#xA;from django.urls import reverse_lazy&#xA;from django.utils.translation import gettext_lazy as _&#xA;&#xA;UNFOLD = {&#xA;    &#34;SITE_TITLE&#34;: None,&#xA;    &#34;SITE_HEADER&#34;: None,&#xA;    &#34;SITE_URL&#34;: &#34;/&#34;,&#xA;    # &#34;SITE_ICON&#34;: lambda request: static(&#34;icon.svg&#34;),  # both modes, optimise for 32px height&#xA;    &#34;SITE_ICON&#34;: {&#xA;        &#34;light&#34;: lambda request: static(&#34;icon-light.svg&#34;),  # light mode&#xA;        &#34;dark&#34;: lambda request: static(&#34;icon-dark.svg&#34;),  # dark mode&#xA;    },&#xA;    # &#34;SITE_LOGO&#34;: lambda request: static(&#34;logo.svg&#34;),  # both modes, optimise for 32px height&#xA;    &#34;SITE_LOGO&#34;: {&#xA;        &#34;light&#34;: lambda request: static(&#34;logo-light.svg&#34;),  # light mode&#xA;        &#34;dark&#34;: lambda request: static(&#34;logo-dark.svg&#34;),  # dark mode&#xA;    },&#xA;    &#34;SITE_SYMBOL&#34;: &#34;speed&#34;,  # symbol from icon set&#xA;    &#34;SITE_FAVICONS&#34;: [&#xA;        {&#xA;            &#34;rel&#34;: &#34;icon&#34;,&#xA;            &#34;sizes&#34;: &#34;32x32&#34;,&#xA;            &#34;type&#34;: &#34;image/svg+xml&#34;,&#xA;            &#34;href&#34;: lambda request: static(&#34;favicon.svg&#34;),&#xA;        },&#xA;    ],&#xA;    &#34;SHOW_HISTORY&#34;: True, # show/hide &#34;History&#34; button, default: True&#xA;    &#34;SHOW_VIEW_ON_SITE&#34;: True, # show/hide &#34;View on site&#34; button, default: True&#xA;    &#34;ENVIRONMENT&#34;: &#34;sample_app.environment_callback&#34;,&#xA;    &#34;DASHBOARD_CALLBACK&#34;: &#34;sample_app.dashboard_callback&#34;,&#xA;    &#34;THEME&#34;: &#34;dark&#34;, # Force theme: &#34;dark&#34; or &#34;light&#34;. Will disable theme switcher&#xA;    &#34;LOGIN&#34;: {&#xA;        &#34;image&#34;: lambda request: static(&#34;sample/login-bg.jpg&#34;),&#xA;        &#34;redirect_after&#34;: lambda request: reverse_lazy(&#34;admin:APP_MODEL_changelist&#34;),&#xA;    },&#xA;    &#34;STYLES&#34;: [&#xA;        lambda request: static(&#34;css/style.css&#34;),&#xA;    ],&#xA;    &#34;SCRIPTS&#34;: [&#xA;        lambda request: static(&#34;js/script.js&#34;),&#xA;    ],&#xA;    &#34;COLORS&#34;: {&#xA;        &#34;primary&#34;: {&#xA;            &#34;50&#34;: &#34;250 245 255&#34;,&#xA;            &#34;100&#34;: &#34;243 232 255&#34;,&#xA;            &#34;200&#34;: &#34;233 213 255&#34;,&#xA;            &#34;300&#34;: &#34;216 180 254&#34;,&#xA;            &#34;400&#34;: &#34;192 132 252&#34;,&#xA;            &#34;500&#34;: &#34;168 85 247&#34;,&#xA;            &#34;600&#34;: &#34;147 51 234&#34;,&#xA;            &#34;700&#34;: &#34;126 34 206&#34;,&#xA;            &#34;800&#34;: &#34;107 33 168&#34;,&#xA;            &#34;900&#34;: &#34;88 28 135&#34;,&#xA;            &#34;950&#34;: &#34;59 7 100&#34;,&#xA;        },&#xA;    },&#xA;    &#34;EXTENSIONS&#34;: {&#xA;        &#34;modeltranslation&#34;: {&#xA;            &#34;flags&#34;: {&#xA;                &#34;en&#34;: &#34;🇬🇧&#34;,&#xA;                &#34;fr&#34;: &#34;🇫🇷&#34;,&#xA;                &#34;nl&#34;: &#34;🇧🇪&#34;,&#xA;            },&#xA;        },&#xA;    },&#xA;    &#34;SIDEBAR&#34;: {&#xA;        &#34;show_search&#34;: False,  # Search in applications and models names&#xA;        &#34;show_all_applications&#34;: False,  # Dropdown with all applications and models&#xA;        &#34;navigation&#34;: [&#xA;            {&#xA;                &#34;title&#34;: _(&#34;Navigation&#34;),&#xA;                &#34;separator&#34;: True,  # Top border&#xA;                &#34;collapsible&#34;: True,  # Collapsible group of links&#xA;                &#34;items&#34;: [&#xA;                    {&#xA;                        &#34;title&#34;: _(&#34;Dashboard&#34;),&#xA;                        &#34;icon&#34;: &#34;dashboard&#34;,  # Supported icon set: https://fonts.google.com/icons&#xA;                        &#34;link&#34;: reverse_lazy(&#34;admin:index&#34;),&#xA;                        &#34;badge&#34;: &#34;sample_app.badge_callback&#34;,&#xA;                        &#34;permission&#34;: lambda request: request.user.is_superuser,&#xA;                    },&#xA;                    {&#xA;                        &#34;title&#34;: _(&#34;Users&#34;),&#xA;                        &#34;icon&#34;: &#34;people&#34;,&#xA;                        &#34;link&#34;: reverse_lazy(&#34;admin:users_user_changelist&#34;),&#xA;                    },&#xA;                ],&#xA;            },&#xA;        ],&#xA;    },&#xA;    &#34;TABS&#34;: [&#xA;        {&#xA;            &#34;models&#34;: [&#xA;                &#34;app_label.model_name_in_lowercase&#34;,&#xA;            ],&#xA;            &#34;items&#34;: [&#xA;                {&#xA;                    &#34;title&#34;: _(&#34;Your custom title&#34;),&#xA;                    &#34;link&#34;: reverse_lazy(&#34;admin:app_label_model_name_changelist&#34;),&#xA;                    &#34;permission&#34;: &#34;sample_app.permission_callback&#34;,&#xA;                },&#xA;            ],&#xA;        },&#xA;    ],&#xA;}&#xA;&#xA;&#xA;def dashboard_callback(request, context):&#xA;    &#34;&#34;&#34;&#xA;    Callback to prepare custom variables for index template which is used as dashboard&#xA;    template. It can be overridden in application by creating custom admin/index.html.&#xA;    &#34;&#34;&#34;&#xA;    context.update(&#xA;        {&#xA;            &#34;sample&#34;: &#34;example&#34;,  # this will be injected into templates/admin/index.html&#xA;        }&#xA;    )&#xA;    return context&#xA;&#xA;&#xA;def environment_callback(request):&#xA;    &#34;&#34;&#34;&#xA;    Callback has to return a list of two values represeting text value and the color&#xA;    type of the label displayed in top right corner.&#xA;    &#34;&#34;&#34;&#xA;    return [&#34;Production&#34;, &#34;danger&#34;] # info, danger, warning, success&#xA;&#xA;&#xA;def badge_callback(request):&#xA;    return 3&#xA;&#xA;def permission_callback(request):&#xA;    return request.user.has_perm(&#34;sample_app.change_model&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available unfold.admin.ModelAdmin options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django import models&#xA;from django.contrib import admin&#xA;from django.contrib.postgres.fields import ArrayField&#xA;from django.db import models&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.contrib.forms.widgets import ArrayWidget, WysiwygWidget&#xA;&#xA;&#xA;@admin.register(MyModel)&#xA;class CustomAdminClass(ModelAdmin):&#xA;    # Display fields in changeform in compressed mode&#xA;    compressed_fields = True  # Default: False&#xA;&#xA;    # Preprocess content of readonly fields before render&#xA;    readonly_preprocess_fields = {&#xA;        &#34;model_field_name&#34;: &#34;html.unescape&#34;,&#xA;        &#34;other_field_name&#34;: lambda content: content.strip(),&#xA;    }&#xA;&#xA;    # Display submit button in filters&#xA;    list_filter_submit = False&#xA;&#xA;    # Display changelist in fullwidth&#xA;    list_fullwidth = False&#xA;&#xA;    # Position horizontal scrollbar in changelist at the top&#xA;    list_horizontal_scrollbar_top = False&#xA;&#xA;    # Dsable select all action in changelist&#xA;    list_disable_select_all = False&#xA;&#xA;    # Custom actions&#xA;    actions_list = []  # Displayed above the results list&#xA;    actions_row = []  # Displayed in a table row in results list&#xA;    actions_detail = []  # Displayed at the top of for in object detail&#xA;    actions_submit_line = []  # Displayed near save in object detail&#xA;&#xA;    formfield_overrides = {&#xA;        models.TextField: {&#xA;            &#34;widget&#34;: WysiwygWidget,&#xA;        },&#xA;        ArrayField: {&#xA;            &#34;widget&#34;: ArrayWidget,&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Actions&lt;/h2&gt; &#xA;&lt;p&gt;It is highly recommended to read the base &lt;a href=&#34;https://docs.djangoproject.com/en/4.2/ref/contrib/admin/actions/&#34;&gt;Django actions documentation&lt;/a&gt; before reading this section, since Unfold actions are derived from Django actions.&lt;/p&gt; &#xA;&lt;h3&gt;Actions overview&lt;/h3&gt; &#xA;&lt;p&gt;Besides traditional actions selected from dropdown, Unfold supports several other types of actions. Following table gives overview of all available actions together with their recommended usage:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type of action&lt;/th&gt; &#xA;   &lt;th&gt;Appearance&lt;/th&gt; &#xA;   &lt;th&gt;Usage&lt;/th&gt; &#xA;   &lt;th&gt;Examples of usage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Default&lt;/td&gt; &#xA;   &lt;td&gt;List view - top of listing (in dropdown)&lt;/td&gt; &#xA;   &lt;td&gt;Actions, where you want to select specific subset of instances to perform this action upon&lt;/td&gt; &#xA;   &lt;td&gt;Bulk deleting, bulk activation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;List view - top of listing (as buttons)&lt;/td&gt; &#xA;   &lt;td&gt;General actions for model, without selecting specific instances&lt;/td&gt; &#xA;   &lt;td&gt;Import, export&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Row&lt;/td&gt; &#xA;   &lt;td&gt;List view - in each row&lt;/td&gt; &#xA;   &lt;td&gt;Action for one specific instance, executable from listing&lt;/td&gt; &#xA;   &lt;td&gt;Activation, sync with external service&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Detail&lt;/td&gt; &#xA;   &lt;td&gt;Detail view - top of detail&lt;/td&gt; &#xA;   &lt;td&gt;Action for one specific instance, executable from detail&lt;/td&gt; &#xA;   &lt;td&gt;Activation, sync with external service&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Submit line&lt;/td&gt; &#xA;   &lt;td&gt;Detail view - near submit button&lt;/td&gt; &#xA;   &lt;td&gt;Action performed during form submit (instance save)&lt;/td&gt; &#xA;   &lt;td&gt;Publishing article together with save&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Custom unfold @action decorator&lt;/h3&gt; &#xA;&lt;p&gt;Unfold also uses custom &lt;code&gt;@action&lt;/code&gt; decorator, supporting 2 more parameters in comparison to base &lt;code&gt;@action&lt;/code&gt; decorator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;url_path&lt;/code&gt;: Action path name, used to override the path under which the action will be available (if not provided, URL path will be generated by Unfold)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;attrs&lt;/code&gt;: Dictionary of the additional attributes added to the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element, used for e.g. opening action in new tab (&lt;code&gt;{&#34;target&#34;: &#34;_blank&#34;}&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Action handler functions&lt;/h3&gt; &#xA;&lt;p&gt;This section provides explanation of how the action handler functions should be constructed for Unfold actions. For default actions, follow official Django admin documentation.&lt;/p&gt; &#xA;&lt;h4&gt;For submit row action &#xA; &lt;!-- omit from toc --&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Submit row actions work a bit differently when compared to other custom Unfold actions. These actions first invoke form save (same as if you hit &lt;code&gt;Save&lt;/code&gt; button) and then lets you perform additional logic on already saved instance.&lt;/p&gt; &#xA;&lt;h4&gt;For global, row and detail action &#xA; &lt;!-- omit from toc --&gt;&lt;/h4&gt; &#xA;&lt;p&gt;All these actions are based on custom URLs generated for each of them. Handler function for these views is basically function based view.&lt;/p&gt; &#xA;&lt;p&gt;For actions without intermediate steps, you can write all the logic inside handler directly. Request and object ID are both passed to these action handler functions, so you are free to fetch the instance from database and perform any operations with it. In the end, it is recommended to return redirect back to either detail or listing, based on where the action was triggered from.&lt;/p&gt; &#xA;&lt;p&gt;For actions with intermediate steps, it is recommended to use handler function only to redirect to custom URL with custom view. This view can be extended from base Unfold view, to have unified experience.&lt;/p&gt; &#xA;&lt;p&gt;If that&#39;s confusing, there are examples for both these actions in next section.&lt;/p&gt; &#xA;&lt;h3&gt;Action examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.db.models import Model&#xA;from django.contrib.admin import register&#xA;from django.shortcuts import redirect&#xA;from django.urls import reverse_lazy&#xA;from django.utils.translation import gettext_lazy as _&#xA;from django.http import HttpRequest&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.decorators import action&#xA;&#xA;&#xA;class User(Model):&#xA;    pass&#xA;&#xA;&#xA;@register(User)&#xA;class UserAdmin(ModelAdmin):&#xA;    actions_list = [&#34;changelist_global_action_import&#34;]&#xA;    actions_row = [&#34;changelist_row_action_view_on_website&#34;]&#xA;    actions_detail = [&#34;change_detail_action_block&#34;]&#xA;    actions_submit_line = [&#34;submit_line_action_activate&#34;]&#xA;&#xA;    @action(description=_(&#34;Save &amp;amp; Activate&#34;), permissions=[&#34;submit_line_action_activate&#34;])&#xA;    def submit_line_action_activate(self, request: HttpRequest, obj: User):&#xA;        &#34;&#34;&#34;&#xA;        If instance is modified in any way, it also needs to be saved,&#xA;        since this handler is invoked after instance is saved.&#xA;        :param request:&#xA;        :param obj: Model instance that was manipulated, with changes already saved to database&#xA;        :return: None, this handler should not return anything&#xA;        &#34;&#34;&#34;&#xA;        obj.is_active = True&#xA;        obj.save()&#xA;&#xA;    def has_submit_line_action_activate_permission(self, request: HttpRequest, object_id: Union[str, int]):&#xA;        pass&#xA;&#xA;    @action(description=_(&#34;Import&#34;), url_path=&#34;import&#34;)&#xA;    def changelist_global_action_import(self, request: HttpRequest):&#xA;        &#34;&#34;&#34;&#xA;        Handler for global actions does not receive any queryset or object ids, because it is&#xA;        meant to be used for general actions for given model.&#xA;        :param request:&#xA;        :return: View, as described in section above&#xA;        &#34;&#34;&#34;&#xA;        # This is example of action redirecting to custom page, where the action will be handled&#xA;        # (with intermediate steps)&#xA;        return redirect(&#xA;          reverse_lazy(&#34;view-where-import-will-be-handled&#34;)&#xA;        )&#xA;&#xA;    @action(description=_(&#34;Row&#34;), url_path=&#34;row-action&#34;, attrs={&#34;target&#34;: &#34;_blank&#34;})&#xA;    def changelist_row_action_view_on_website(self, request: HttpRequest, object_id: int):&#xA;        &#34;&#34;&#34;&#xA;        Handler for list row action.&#xA;        :param request:&#xA;        :param object_id: ID of instance that this action was invoked for&#xA;        :return: View, as described in section above&#xA;        &#34;&#34;&#34;&#xA;        return redirect(f&#34;https://example.com/{object_id}&#34;)&#xA;&#xA;    @action(description=_(&#34;Detail&#34;), url_path=&#34;detail-action&#34;, attrs={&#34;target&#34;: &#34;_blank&#34;}, permissions=[&#34;change_detail_action_block&#34;])&#xA;    def change_detail_action_block(self, request: HttpRequest, object_id: int):&#xA;        &#34;&#34;&#34;&#xA;        Handler for detail action.&#xA;        :param request:&#xA;        :param object_id: ID of instance that this action was invoked for&#xA;        :return: View, as described in section above&#xA;        &#34;&#34;&#34;&#xA;        # This is example of action that handled whole logic inside handler&#xA;        # function and redirects back to object detail&#xA;        user = User.objects.get(pk=object_id)&#xA;        user.block()&#xA;        return redirect(&#xA;            reverse_lazy(&#34;admin:users_user_change&#34;, args=(object_id,))&#xA;        )&#xA;&#xA;&#xA;    def has_change_detail_action_block_permission(self, request: HttpRequest, object_id: Union[str, int]):&#xA;        pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Action with form example&lt;/h3&gt; &#xA;&lt;p&gt;Below is an example of an action that will display a form after clicking on the action button on the detail object page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django import forms&#xA;from django.template.loader import render_to_string&#xA;from django.urls import reverse_lazy&#xA;&#xA;from unfold.widgets import UnfoldAdminTextInputWidget&#xA;&#xA;&#xA;class SomeForm(forms.Form):&#xA;    # It is important to set a widget coming from Unfold&#xA;    note = forms.CharField(label=_(&#34;Note&#34;), widget=UnfoldAdminTextInputWidget)&#xA;&#xA;&#xA;@register(User)&#xA;class UserAdmin(ModelAdmin):&#xA;    actions_detail = [&#34;change_detail_action_block&#34;]&#xA;&#xA;    @action(description=_(&#34;Detail&#34;))&#xA;    def change_detail_action_block(self, request: HttpRequest, object_id: int) -&amp;gt; str:&#xA;        form = SomeForm(request.POST or None)&#xA;        user = User.objects.get(pk=object_id)&#xA;&#xA;        if request.method == &#34;POST&#34; and form.is_valid():&#xA;            # Do something with form data&#xA;            form.cleaned_data[&#34;note&#34;]&#xA;&#xA;            return redirect(&#xA;                reverse_lazy(&#34;admin:users_user_change&#34;, args=[object_id])&#xA;            )&#xA;&#xA;        return render_to_string(&#34;some/template.html&#34;, {&#xA;            &#34;form&#34;: form,&#xA;        })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Template displaying the form. Please note that breadcrumbs are empty in this case but if you want, you can configure your own breadcrumbs path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% extends &#34;admin/base_site.html&#34; %}&#xA;&#xA;{% block breadcrumbs %}{% endblock %}&#xA;&#xA;{% block content %}&#xA;    &amp;lt;form action=&#34;&#34; method=&#34;post&#34; novalidate&amp;gt;&#xA;        {% csrf_token %}&#xA;&#xA;        {% for field in form %}&#xA;            {% include &#34;unfold/helpers/field.html&#34; with field=field %}&#xA;        {% endfor %}&#xA;    &amp;lt;/form&amp;gt;&#xA;{% endblock %}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Filters&lt;/h2&gt; &#xA;&lt;p&gt;By default, Django admin handles all filters as regular HTML links pointing at the same URL with different query parameters. This approach is for basic filtering more than enough. In the case of more advanced filtering by incorporating input fields, it is not going to work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; when implementing a filter which contains input fields, there is a no way that user can submit the values, because default filters does not contain submit button. To implement submit button, &lt;code&gt;unfold.admin.ModelAdmin&lt;/code&gt; contains boolean &lt;code&gt;list_filter_submit&lt;/code&gt; flag which enables submit button in filter form.&lt;/p&gt; &#xA;&lt;h3&gt;Text filters&lt;/h3&gt; &#xA;&lt;p&gt;Text input field which allows filtering by the free string submitted by the user. There are two different variants of this filter: &lt;code&gt;FieldTextFilter&lt;/code&gt; and &lt;code&gt;TextFilter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FieldTextFilter&lt;/code&gt; requires just a model field name and the filter will make &lt;code&gt;__icontains&lt;/code&gt; search on this field. There are no other things to configure so the integration in &lt;code&gt;list_filter&lt;/code&gt; will be just one new row looking like &lt;code&gt;(&#34;model_field_name&#34;, FieldTextFilter)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the case of the &lt;code&gt;TextFilter&lt;/code&gt;, it is needed to write a whole new class inheriting from &lt;code&gt;TextFilter&lt;/code&gt; with a custom implementation of the &lt;code&gt;queryset&lt;/code&gt; method and the &lt;code&gt;parameter_name&lt;/code&gt; attribute. This attribute will be a representation of the search query parameter name in URI. The benefit of the &lt;code&gt;TextFilter&lt;/code&gt; is the possibility of writing complex queries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib import admin&#xA;from django.contrib.auth.models import User&#xA;from django.core.validators import EMPTY_VALUES&#xA;from django.utils.translation import gettext_lazy as _&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.contrib.filters.admin import TextFilter, FieldTextFilter&#xA;&#xA;class CustomTextFilter(TextFilter):&#xA;    title = _(&#34;Custom filter&#34;)&#xA;    parameter_name = &#34;query_param_in_uri&#34;&#xA;&#xA;    def queryset(self, request, queryset):&#xA;        if self.value() not in EMPTY_VALUES:&#xA;            # Here write custom query&#xA;            return queryset.filter(your_field=self.value())&#xA;&#xA;        return queryset&#xA;&#xA;&#xA;@admin.register(User)&#xA;class MyAdmin(ModelAdmin):&#xA;    list_filter_submit = True&#xA;    list_filter = [&#xA;        (&#34;model_charfield&#34;, FieldTextFilter),&#xA;        CustomTextFilter&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dropdown filters&lt;/h3&gt; &#xA;&lt;p&gt;Dropdown filters will display a select field with a list of options. Unfold contains two types of dropdowns: &lt;code&gt;ChoicesDropdownFilter&lt;/code&gt; and &lt;code&gt;RelatedDropdownFilter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The difference between them is that &lt;code&gt;ChoicesDropdownFilter&lt;/code&gt; will collect a list of options based on the &lt;code&gt;choices&lt;/code&gt; attribute of the model field so most commonly it will be used in combination with &lt;code&gt;CharField&lt;/code&gt; with specified &lt;code&gt;choices&lt;/code&gt;. On the other hand, &lt;code&gt;RelatedDropdownFilter&lt;/code&gt; needs a one-to-many or many-to-many foreign key to display options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; At the moment Unfold does not implement a dropdown with an autocomplete functionality, so it is important not to use dropdowns displaying large datasets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.contrib import admin&#xA;from django.contrib.auth.models import User&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.contrib.filters.admin import ChoicesDropdownFilter, RelatedDropdownFilter, DropdownFilter&#xA;&#xA;&#xA;class CustomDropdownFilter(DropdownFilter):&#xA;    title = _(&#34;Custom dropdown filter&#34;)&#xA;    parameter_name = &#34;query_param_in_uri&#34;&#xA;&#xA;    def lookups(self, request, model_admin):&#xA;        return [&#xA;            [&#34;option_1&#34;, _(&#34;Option 1&#34;)],&#xA;            [&#34;option_2&#34;, _(&#34;Option 2&#34;)],&#xA;        ]&#xA;&#xA;    def queryset(self, request, queryset):&#xA;        if self.value() not in EMPTY_VALUES:&#xA;            # Here write custom query&#xA;            return queryset.filter(your_field=self.value())&#xA;&#xA;        return queryset&#xA;&#xA;&#xA;@admin.register(User)&#xA;class MyAdmin(ModelAdmin):&#xA;    list_filter_submit = True&#xA;    list_filter = [&#xA;        CustomDropdownFilter,&#xA;        (&#34;modelfield_with_choices&#34;, ChoicesDropdownFilter),&#xA;        (&#34;modelfield_with_foreign_key&#34;, RelatedDropdownFilter)&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Numeric filters&lt;/h3&gt; &#xA;&lt;p&gt;Currently, Unfold implements numeric filters inside &lt;code&gt;unfold.contrib.filters&lt;/code&gt; application. In order to use these filters, it is required to add this application into &lt;code&gt;INSTALLED_APPS&lt;/code&gt; in &lt;code&gt;settings.py&lt;/code&gt; right after &lt;code&gt;unfold&lt;/code&gt; application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.contrib import admin&#xA;from django.contrib.auth.models import User&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.contrib.filters.admin import (&#xA;    RangeNumericListFilter,&#xA;    RangeNumericFilter,&#xA;    SingleNumericFilter,&#xA;    SliderNumericFilter,&#xA;)&#xA;&#xA;&#xA;class CustomSliderNumericFilter(SliderNumericFilter):&#xA;    MAX_DECIMALS = 2&#xA;    STEP = 10&#xA;&#xA;&#xA;class CustomRangeNumericListFilter(RangeNumericListFilter):&#xA;    parameter_name = &#34;items_count&#34;&#xA;    title = &#34;items&#34;&#xA;&#xA;&#xA;@admin.register(User)&#xA;class YourModelAdmin(ModelAdmin):&#xA;    list_filter_submit = True  # Submit button at the bottom of the filter&#xA;    list_filter = (&#xA;        (&#34;field_A&#34;, SingleNumericFilter),  # Numeric single field search, __gte lookup&#xA;        (&#34;field_B&#34;, RangeNumericFilter),  # Numeric range search, __gte and __lte lookup&#xA;        (&#34;field_C&#34;, SliderNumericFilter),  # Numeric range filter but with slider&#xA;        (&#34;field_D&#34;, CustomSliderNumericFilter),  # Numeric filter with custom attributes&#xA;        CustomRangeNumericListFilter,  # Numeric range search not restricted to a model field&#xA;    )&#xA;&#xA;    def get_queryset(self, request):&#xA;        return super().get_queryset().annotate(items_count=Count(&#34;item&#34;, distinct=True))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Date/time filters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.contrib import admin&#xA;from django.contrib.auth.models import User&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.contrib.filters.admin import (&#xA;    RangeDateFilter,&#xA;    RangeDateTimeFilter,&#xA;)&#xA;&#xA;&#xA;@admin.register(User)&#xA;class YourModelAdmin(ModelAdmin):&#xA;    list_filter_submit = True  # Submit button at the bottom of the filter&#xA;    list_filter = (&#xA;        (&#34;field_E&#34;, RangeDateFilter),  # Date filter&#xA;        (&#34;field_F&#34;, RangeDateTimeFilter),  # Datetime filter&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom admin pages&lt;/h2&gt; &#xA;&lt;p&gt;By default, Unfold provides a basic view mixin which helps with creation of basic views which are part of Unfold UI. The implementation requires creation of class based view inheriting from &lt;code&gt;unfold.views.UnfoldModelAdminViewMixin&lt;/code&gt;. It is important to add &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;permissions_required&lt;/code&gt; properties.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.views.generic import TemplateView&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.views import UnfoldModelAdminViewMixin&#xA;&#xA;&#xA;class MyClassBasedView(UnfoldModelAdminViewMixin, TemplateView):&#xA;    title = &#34;Custom Title&#34;  # required: custom page header title&#xA;    permissions_required = () # required: tuple of permissions&#xA;    template_name = &#34;some/template/path.html&#34;&#xA;&#xA;&#xA;class CustomAdmin(ModelAdmin):&#xA;    def get_urls(self):&#xA;        return super().get_urls() + [&#xA;            path(&#xA;                &#34;custom-url-path&#34;,&#xA;                MyClassBasedView.as_view(model_admin=self),  # IMPORTANT: model_admin is required&#xA;                name=&#34;custom_name&#34;&#xA;            ),&#xA;        ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The template is straightforward, extend from &lt;code&gt;unfold/layouts/base.html&lt;/code&gt; and the UI will display all Unfold components like header or sidebar with all menu items. Then all content needs to be located in &lt;code&gt;content&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-django-html&#34;&gt;{% extends &#34;unfold/layouts/base.html&#34; %}&#xA;&#xA;{% block content %}&#xA;    Content here&#xA;{% endblock %}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Display decorator&lt;/h2&gt; &#xA;&lt;p&gt;Unfold introduces it&#39;s own &lt;code&gt;unfold.decorators.display&lt;/code&gt; decorator. By default it has exactly same behavior as native &lt;code&gt;django.contrib.admin.decorators.display&lt;/code&gt; but it adds same customizations which helps to extends default logic.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;@display(label=True)&lt;/code&gt;, &lt;code&gt;@display(label={&#34;value1&#34;: &#34;success&#34;})&lt;/code&gt; displays a result as a label. This option fits for different types of statuses. Label can be either boolean indicating we want to use label with default color or dict where the dict is responsible for displaying labels in different colors. At the moment these color combinations are supported: success(green), info(blue), danger(red) and warning(orange).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;@display(header=True)&lt;/code&gt; displays in results list two information in one table cell. Good example is when we want to display customer information, first line is going to be customer&#39;s name and right below the name display corresponding email address. Method with such a decorator is supposed to return a list with two elements &lt;code&gt;return &#34;Full name&#34;, &#34;E-mail address&#34;&lt;/code&gt;. There is a third optional argument, which is type of the string and its value is displayed in a circle before first two values on the front end. Its optimal usage is for displaying initials.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.db.models import TextChoices&#xA;from django.utils.translation import gettext_lazy as _&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.decorators import display&#xA;&#xA;&#xA;class UserStatus(TextChoices):&#xA;    ACTIVE = &#34;ACTIVE&#34;, _(&#34;Active&#34;)&#xA;    PENDING = &#34;PENDING&#34;, _(&#34;Pending&#34;)&#xA;    INACTIVE = &#34;INACTIVE&#34;, _(&#34;Inactive&#34;)&#xA;    CANCELLED = &#34;CANCELLED&#34;, _(&#34;Cancelled&#34;)&#xA;&#xA;&#xA;class UserAdmin(ModelAdmin):&#xA;    list_display = [&#xA;        &#34;display_as_two_line_heading&#34;,&#xA;        &#34;show_status&#34;,&#xA;        &#34;show_status_with_custom_label&#34;,&#xA;    ]&#xA;&#xA;    @display(&#xA;        description=_(&#34;Status&#34;),&#xA;        ordering=&#34;status&#34;,&#xA;        label=True&#xA;    )&#xA;    def show_status_default_color(self, obj):&#xA;        return obj.status&#xA;&#xA;    @display(&#xA;        description=_(&#34;Status&#34;),&#xA;        ordering=&#34;status&#34;,&#xA;        label={&#xA;            UserStatus.ACTIVE: &#34;success&#34;,  # green&#xA;            UserStatus.PENDING: &#34;info&#34;,  # blue&#xA;            UserStatus.INACTIVE: &#34;warning&#34;,  # orange&#xA;            UserStatus.CANCELLED: &#34;danger&#34;,  # red&#xA;        },&#xA;    )&#xA;    def show_status_customized_color(self, obj):&#xA;        return obj.status&#xA;&#xA;    @display(description=_(&#34;Status with label&#34;), ordering=&#34;status&#34;, label=True)&#xA;    def show_status_with_custom_label(self, obj):&#xA;        return obj.status, obj.get_status_display()&#xA;&#xA;    @display(header=True)&#xA;    def display_as_two_line_heading(self, obj):&#xA;        &#34;&#34;&#34;&#xA;        Third argument is short text which will appear as prefix in circle&#xA;        &#34;&#34;&#34;&#xA;        return [&#xA;            &#34;First main heading&#34;,&#xA;            &#34;Smaller additional description&#34;,  # Use None in case you don&#39;t need it&#xA;            &#34;AB&#34;,  # Short text which will appear in front of&#xA;            # Image instead of initials. Initials are ignored if image is available&#xA;            {&#xA;                &#34;path&#34;: &#34;some/path/picture.jpg,&#xA;                &#34;squared&#34;: True, # Picture is displayed in square format, if empty circle&#xA;                &#34;borderless&#34;: True  # Picture will be displayed without border&#xA;                &#34;width&#34;: 64, # Removes default width. Use together with height&#xA;                &#34;height&#34;: 48, # Removes default height. Use together with width&#xA;            }&#xA;        ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change form tabs&lt;/h2&gt; &#xA;&lt;p&gt;When the change form contains a lot of fieldsets, sometimes it is better to group them into tabs so it will not be needed to scroll. To mark a fieldset for tab navigation it is required to add a &lt;code&gt;tab&lt;/code&gt; CSS class to the fieldset. Once the fieldset contains &lt;code&gt;tab&lt;/code&gt; class it will be recognized in a template and grouped into tab navigation. Each tab must contain its name. If the name is not available, it will be not included in the tab navigation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from django.contrib import admin&#xA;from django.utils.translation import gettext_lazy as _&#xA;from unfold.admin import ModelAdmin&#xA;&#xA;from .models import MyModel&#xA;&#xA;&#xA;@admin.register(MyModel)&#xA;class MyModelAdmin(ModelAdmin):&#xA;    fieldsets = (&#xA;        (&#xA;            None,&#xA;            {&#xA;                &#34;fields&#34;: [&#xA;                    &#34;field_1&#34;,&#xA;                    &#34;field_2&#34;,&#xA;                ],&#xA;            },&#xA;        ),&#xA;        (&#xA;            _(&#34;Tab 1&#34;),&#xA;            {&#xA;                &#34;classes&#34;: [&#34;tab&#34;],&#xA;                &#34;fields&#34;: [&#xA;                    &#34;field_3&#34;,&#xA;                    &#34;field_4&#34;,&#xA;                ],&#xA;            },&#xA;        ),&#xA;        (&#xA;            _(&#34;Tab 2&#34;),&#xA;            {&#xA;                &#34;classes&#34;: [&#34;tab&#34;],&#xA;                &#34;fields&#34;: [&#xA;                    &#34;field_5&#34;,&#xA;                    &#34;field_6&#34;,&#xA;                ],&#xA;            },&#xA;        ),&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inlines&lt;/h2&gt; &#xA;&lt;h3&gt;Custom title&lt;/h3&gt; &#xA;&lt;p&gt;By default, the title available for each inline row is coming from the &lt;code&gt;__str__&lt;/code&gt; implementation of the model. Unfold allows you to override this title by implementing &lt;code&gt;get_inline_title&lt;/code&gt; on the model which can return your own custom title just for the inline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from unfold.admin import TabularInline&#xA;&#xA;&#xA;class User(models.Model):&#xA;    # fiels, meta ...&#xA;&#xA;    def get_inline_title(self):&#xA;        return &#34;Custom title&#34;&#xA;&#xA;&#xA;class MyInline(TabularInline):&#xA;    model = User&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hide title row&lt;/h3&gt; &#xA;&lt;p&gt;By applying &lt;code&gt;hide_title&lt;/code&gt; attribute set to &lt;code&gt;True&lt;/code&gt;, it is possible to hide the title row which is available for &lt;code&gt;StackedInline&lt;/code&gt; or &lt;code&gt;TabularInline&lt;/code&gt;. For &lt;code&gt;StackedInline&lt;/code&gt; it is required to have disabled delete permission &lt;code&gt;can_delete&lt;/code&gt; to be able to hide the title row, because the checkbox with the delete action is inside this title.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from unfold.admin import TabularInline&#xA;&#xA;&#xA;class MyInline(TabularInline):&#xA;    model = User&#xA;    hide_title = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Display as tabs&lt;/h3&gt; &#xA;&lt;p&gt;Inlines can be grouped into tab navigation by specifying &lt;code&gt;tab&lt;/code&gt; attribute in the inline class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from unfold.admin import TabularInline&#xA;&#xA;&#xA;class MyInline(TabularInline):&#xA;    model = User&#xA;    tab = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nonrelated inlines&lt;/h3&gt; &#xA;&lt;p&gt;To display inlines which are not related (no foreign key pointing at the main model) to the model instance in changeform, you can use nonrelated inlines which are included in &lt;code&gt;unfold.contrib.inlines&lt;/code&gt; module. Make sure this module is included in &lt;code&gt;INSTALLED_APPS&lt;/code&gt; in settings.py.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib.auth.models import User&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.contrib.inlines.admin import NonrelatedTabularInline&#xA;from .models import OtherModel&#xA;&#xA;class OtherNonrelatedInline(NonrelatedTabularInline):  # NonrelatedStackedInline is available as well&#xA;    model = OtherModel&#xA;    fields = [&#34;field1&#34;, &#34;field2&#34;]  # Ignore property to display all fields&#xA;&#xA;    def get_form_queryset(self, obj):&#xA;        &#34;&#34;&#34;&#xA;        Gets all nonrelated objects needed for inlines. Method must be implemented.&#xA;        &#34;&#34;&#34;&#xA;        return self.model.objects.all()&#xA;&#xA;    def save_new_instance(self, parent, instance):&#xA;        &#34;&#34;&#34;&#xA;        Extra save method which can for example update inline instances based on current&#xA;        main model object. Method must be implemented.&#xA;        &#34;&#34;&#34;&#xA;        pass&#xA;&#xA;&#xA;@admin.register(User)&#xA;class UserAdmin(ModelAdmin):&#xA;    inlines = [OtherNonrelatedInline]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; credit for this functionality goes to &lt;a href=&#34;https://github.com/bhomnick/django-nonrelated-inlines&#34;&gt;django-nonrelated-inlines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Third party packages&lt;/h2&gt; &#xA;&lt;h3&gt;django-celery-beat&lt;/h3&gt; &#xA;&lt;p&gt;In general, django-celery-beat does not have any components that require special styling. The default changelist templates are not inheriting from Unfold&#39;s &lt;code&gt;ModelAdmin&lt;/code&gt; but they are using default &lt;code&gt;ModelAdmin&lt;/code&gt; coming from &lt;code&gt;django.contrib.admin&lt;/code&gt; which is causing some design discrepancies in the changelist.&lt;/p&gt; &#xA;&lt;p&gt;In the source code below you can find a short code snippet to unregister all &lt;code&gt;django-celery-beat&lt;/code&gt; admin classes and register them with the proper parent &lt;code&gt;ModelAdmin&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;from django.contrib import admin&#xA;from unfold.admin import ModelAdmin&#xA;&#xA;from django_celery_beat.models import (&#xA;    ClockedSchedule,&#xA;    CrontabSchedule,&#xA;    IntervalSchedule,&#xA;    PeriodicTask,&#xA;    SolarSchedule,&#xA;)&#xA;from django_celery_beat.admin import ClockedScheduleAdmin as BaseClockedScheduleAdmin&#xA;from django_celery_beat.admin import CrontabScheduleAdmin as BaseCrontabScheduleAdmin&#xA;from django_celery_beat.admin import PeriodicTaskAdmin as BasePeriodicTaskAdmin&#xA;from django_celery_beat.admin import PeriodicTaskForm, TaskSelectWidget&#xA;&#xA;admin.site.unregister(PeriodicTask)&#xA;admin.site.unregister(IntervalSchedule)&#xA;admin.site.unregister(CrontabSchedule)&#xA;admin.site.unregister(SolarSchedule)&#xA;admin.site.unregister(ClockedSchedule)&#xA;&#xA;&#xA;class UnfoldTaskSelectWidget(UnfoldAdminSelectWidget, TaskSelectWidget):&#xA;    pass&#xA;&#xA;&#xA;class UnfoldPeriodicTaskForm(PeriodicTaskForm):&#xA;    def __init__(self, *args, **kwargs):&#xA;        super().__init__(*args, **kwargs)&#xA;        self.fields[&#34;task&#34;].widget = UnfoldAdminTextInputWidget()&#xA;        self.fields[&#34;regtask&#34;].widget = UnfoldTaskSelectWidget()&#xA;&#xA;&#xA;@admin.register(PeriodicTask)&#xA;class PeriodicTaskAdmin(BasePeriodicTaskAdmin, ModelAdmin):&#xA;    form = UnfoldPeriodicTaskForm&#xA;&#xA;&#xA;@admin.register(IntervalSchedule)&#xA;class IntervalScheduleAdmin(ModelAdmin):&#xA;    pass&#xA;&#xA;&#xA;@admin.register(CrontabSchedule)&#xA;class CrontabScheduleAdmin(BaseCrontabScheduleAdmin, ModelAdmin):&#xA;    pass&#xA;&#xA;&#xA;@admin.register(SolarSchedule)&#xA;class SolarScheduleAdmin(ModelAdmin):&#xA;    pass&#xA;&#xA;@admin.register(ClockedSchedule)&#xA;class ClockedScheduleAdmin(BaseClockedScheduleAdmin, ModelAdmin):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;django-guardian&lt;/h3&gt; &#xA;&lt;p&gt;Adding support for django-guardian is quite straightforward in Unfold, just add &lt;code&gt;unfold.contrib.guardian&lt;/code&gt; to &lt;code&gt;INSTALLED_APPS&lt;/code&gt; at the beginning of the file. This action will override all templates coming from the django-guardian. Please note that &lt;strong&gt;Object permissions&lt;/strong&gt; link is available in top right dropdown navigation.&lt;/p&gt; &#xA;&lt;h3&gt;django-import-export&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;unfold.contrib.import_export&lt;/code&gt; to &lt;code&gt;INSTALLED_APPS&lt;/code&gt; at the beginning of the file. This action will override all templates coming from the application.&lt;/li&gt; &#xA; &lt;li&gt;Change &lt;code&gt;import_form_class&lt;/code&gt; and &lt;code&gt;export_form_class&lt;/code&gt; in ModelAdmin which is inheriting from &lt;code&gt;ImportExportModelAdmin&lt;/code&gt;. This chunk of code is responsible for adding proper styling to form elements.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# admin.py&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;from import_export.admin import ImportExportModelAdmin&#xA;from unfold.contrib.import_export.forms import ExportForm, ImportForm, SelectableFieldsExportForm&#xA;&#xA;class ExampleAdmin(ModelAdmin, ImportExportModelAdmin):&#xA;    import_form_class = ImportForm&#xA;    export_form_class = ExportForm&#xA;    # export_form_class = SelectableFieldsExportForm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When implementing &lt;code&gt;import_export.admin.ExportActionModelAdmin&lt;/code&gt; class in admin panel, import_export plugin adds its own implementation of action form which is not incorporating Unfold CSS classes. For this reason, &lt;code&gt;unfold.contrib.import_export.admin&lt;/code&gt; contains class with the same name &lt;code&gt;ExportActionModelAdmin&lt;/code&gt; which inherits behavior of parent form and adds appropriate CSS classes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This class has been removed and in new version (4.x) of django-import-export it is not needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;admin.py&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.contrib.import_export.admin import ExportActionModelAdmin&#xA;&#xA;class ExampleAdmin(ModelAdmin, ExportActionModelAdmin):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;django-modeltranslation&lt;/h3&gt; &#xA;&lt;p&gt;By default, Unfold supports django-modeltranslation and &lt;code&gt;TabbedTranslationAdmin&lt;/code&gt; admin class for the tabbed navigation is implemented with custom styling as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib import admin&#xA;&#xA;from modeltranslation.admin import TabbedTranslationAdmin&#xA;from unfold.admin import ModelAdmin&#xA;&#xA;from .models import MyModel&#xA;&#xA;&#xA;@admin.register(MyModel)&#xA;class MyModelAdmin(ModelAdmin, TabbedTranslationAdmin):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For django-modeltranslation fields for spefic languages, it is possible to define custom flags which will appear as a suffix in field&#39;s label. It is recommended to use emojis as suffix.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py&#xA;&#xA;UNFOLD = {&#xA;    &#34;EXTENSIONS&#34;: {&#xA;        &#34;modeltranslation&#34;: {&#xA;            &#34;flags&#34;: {&#xA;                &#34;en&#34;: &#34;🇬🇧&#34;,&#xA;                &#34;fr&#34;: &#34;🇫🇷&#34;,&#xA;                &#34;nl&#34;: &#34;🇧🇪&#34;,&#xA;            },&#xA;        },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;django-money&lt;/h3&gt; &#xA;&lt;p&gt;This application is supported in Unfold by default. It is not needed to add any other applications into &lt;code&gt;INSTALLED_APPS&lt;/code&gt;. Unfold is recognizing special form widget coming from django-money and applying specific styling.&lt;/p&gt; &#xA;&lt;h3&gt;django-simple-history&lt;/h3&gt; &#xA;&lt;p&gt;To make this application work, add &lt;code&gt;unfold.contrib.simple_history&lt;/code&gt; into &lt;code&gt;settings.py&lt;/code&gt; in &lt;code&gt;INSTALLED_APPS&lt;/code&gt; variable before right after &lt;code&gt;unfold&lt;/code&gt;. This app should ensure that templates coming from django-simple-history are overridden by Unfold.&lt;/p&gt; &#xA;&lt;h2&gt;User Admin Form&lt;/h2&gt; &#xA;&lt;p&gt;User&#39;s admin in Django is specific as it contains several forms which are requiring custom styling. All of these forms has been inherited and accordingly adjusted. In user admin class it is needed to use these inherited form classes to enable custom styling matching rest of the website.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# models.py&#xA;&#xA;from django.contrib.admin import register&#xA;from django.contrib.auth.models import User&#xA;from django.contrib.auth.admin import UserAdmin as BaseUserAdmin&#xA;&#xA;from unfold.admin import ModelAdmin&#xA;from unfold.forms import AdminPasswordChangeForm, UserChangeForm, UserCreationForm&#xA;&#xA;&#xA;@register(User)&#xA;class UserAdmin(BaseUserAdmin, ModelAdmin):&#xA;    form = UserChangeForm&#xA;    add_form = UserCreationForm&#xA;    change_password_form = AdminPasswordChangeForm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding custom styles and scripts&lt;/h2&gt; &#xA;&lt;p&gt;To add new custom styles, for example for custom dashboard, it is possible to load them via &lt;strong&gt;STYLES&lt;/strong&gt; key in &lt;strong&gt;UNFOLD&lt;/strong&gt; dict. This key accepts a list of strings or lambda functions which will be loaded on all pages. JavaScript files can be loaded by using similar apprach, but &lt;strong&gt;SCRIPTS&lt;/strong&gt; is used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py&#xA;&#xA;from django.templatetags.static import static&#xA;&#xA;UNFOLD = {&#xA;    &#34;STYLES&#34;: [&#xA;        lambda request: static(&#34;css/style.css&#34;),&#xA;    ],&#xA;    &#34;SCRIPTS&#34;: [&#xA;        lambda request: static(&#34;js/script.js&#34;),&#xA;    ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project level Tailwind stylesheet&lt;/h2&gt; &#xA;&lt;p&gt;When creating custom dashboard or adding custom components, it is needed to add own styles. Adding custom styles is described above. Most of the time, it is supposed that new elements are going to match with the rest of the administration panel. First of all, create tailwind.config.js in your application. Below is located minimal configuration for this file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// tailwind.config.js&#xA;&#xA;module.exports = {&#xA;  content: [&#34;./your_project/**/*.{html,py,js}&#34;],&#xA;  // In case custom colors are defined in UNFOLD[&#34;COLORS&#34;]&#xA;  colors: {&#xA;    primary: {&#xA;      50: &#34;rgb(var(--color-primary-50) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      100: &#34;rgb(var(--color-primary-100) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      200: &#34;rgb(var(--color-primary-200) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      300: &#34;rgb(var(--color-primary-300) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      400: &#34;rgb(var(--color-primary-400) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      500: &#34;rgb(var(--color-primary-500) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      600: &#34;rgb(var(--color-primary-600) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      700: &#34;rgb(var(--color-primary-700) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      800: &#34;rgb(var(--color-primary-800) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      900: &#34;rgb(var(--color-primary-900) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;      950: &#34;rgb(var(--color-primary-950) / &amp;lt;alpha-value&amp;gt;)&#34;,&#xA;    },&#xA;  },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the configuration file is set, it is possible to compile new styles which can be loaded into admin by using &lt;strong&gt;STYLES&lt;/strong&gt; key in &lt;strong&gt;UNFOLD&lt;/strong&gt; dict.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx tailwindcss -o your_project/static/css/styles.css --watch --minify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Admin dashboard&lt;/h2&gt; &#xA;&lt;h3&gt;Overriding template&lt;/h3&gt; &#xA;&lt;p&gt;Create &lt;code&gt;templates/admin/index.html&lt;/code&gt; in your project and paste the base template below into it. By default, all your custom styles here are not compiled because CSS classes are located in your specific project. Here it is needed to set up the Tailwind for your project and all required instructions are located in &lt;a href=&#34;https://raw.githubusercontent.com/unfoldadmin/django-unfold/main/#project-level-tailwind-stylesheet&#34;&gt;Project Level Tailwind Stylesheet&lt;/a&gt; chapter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html+django&#34;&gt;{% extends &#39;unfold/layouts/base_simple.html&#39; %}&#xA;&#xA;{% load cache humanize i18n %}&#xA;&#xA;{% block breadcrumbs %}{% endblock %}&#xA;&#xA;{% block title %}&#xA;    {% if subtitle %}&#xA;        {{ subtitle }} |&#xA;    {% endif %}&#xA;&#xA;    {{ title }} | {{ site_title|default:_(&#39;Django site admin&#39;) }}&#xA;{% endblock %}&#xA;&#xA;{% block branding %}&#xA;    &amp;lt;h1 id=&#34;site-name&#34;&amp;gt;&#xA;        &amp;lt;a href=&#34;{% url &#39;admin:index&#39; %}&#34;&amp;gt;&#xA;            {{ site_header|default:_(&#39;Django administration&#39;) }}&#xA;        &amp;lt;/a&amp;gt;&#xA;    &amp;lt;/h1&amp;gt;&#xA;{% endblock %}&#xA;&#xA;{% block content %}&#xA;    Start creating your own Tailwind components here&#xA;{% endblock %}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom variables&lt;/h3&gt; &#xA;&lt;p&gt;When you are building a new dashboard, you need to display some data mostly coming from the database. To pass these data to the dashboard template, Unfold contains a special &lt;code&gt;DASHBOARD_CALLBACK&lt;/code&gt; parameter which allows passing a dictionary of variables to &lt;code&gt;templates/admin/index.html&lt;/code&gt; template.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# views.py&#xA;&#xA;def dashboard_callback(request, context):&#xA;    context.update({&#xA;        &#34;custom_variable&#34;: &#34;value&#34;,&#xA;    })&#xA;&#xA;    return context&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py&#xA;&#xA;UNFOLD = {&#xA;    &#34;DASHBOARD_CALLBACK&#34;: &#34;app.views.dashboard_callback&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unfold components&lt;/h3&gt; &#xA;&lt;p&gt;Unfold provides a set of already predefined templates to speed up overall dashboard development. These templates contain predefined design which matches global design style so there is no need to spend any time adjusting styles.&lt;/p&gt; &#xA;&lt;p&gt;The biggest benefit of Unfold components is the possibility to nest them inside one template file provides an unlimited amount of possible combinations. Then each component includes &lt;code&gt;children&lt;/code&gt; variable which contains a value specified in the parent component. Except for &lt;code&gt;children&lt;/code&gt; variable, components can have multiple variables coming from the parent template as component variables. These parameters can be specified in the same as parameters when using &lt;code&gt;{% include with param1=value1 param2=value2 %}&lt;/code&gt; template tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html+django&#34;&gt;{% component &#34;unfold/components/flex.html&#34; with col=1 %}&#xA;    {% component &#34;unfold/components/card.html&#34; %}&#xA;        {% component &#34;unfold/components/title.html&#34; %}&#xA;            Card Title&#xA;        {% endcomponent %}&#xA;    {% endcomponent %}&#xA;{% endcomponent %}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below you can find a more complex example which is using multiple components and processing them based on the passed variables from the &lt;code&gt;DASHBOARD_CALLBACK&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html+django&#34;&gt;{% load i18n %}&#xA;&#xA;{% block content %}&#xA;    {% component &#34;unfold/components/container.html&#34; %}&#xA;        {% component &#34;unfold/components/flex.html&#34; with class=&#34;gap-4&#34;%}&#xA;            {% component &#34;unfold/components/navigation.html&#34; with items=navigation %}&#xA;            {% endcomponent %}&#xA;&#xA;            {% component &#34;unfold/components/navigation.html&#34; with class=&#34;ml-auto&#34; items=filters %}&#xA;            {% endcomponent %}&#xA;        {% endcomponent %}&#xA;&#xA;        {% component &#34;unfold/components/flex.html&#34; with class=&#34;gap-8 mb-8 flex-col lg:flex-row&#34; %}&#xA;            {% for card in cards %}&#xA;                {% trans &#34;Last 7 days&#34; as label %}&#xA;                {% component &#34;unfold/components/card.html&#34; with class=&#34;lg:w-1/3&#34; %}&#xA;                    {% component &#34;unfold/components/text.html&#34; %}&#xA;                        {{ card.title }}&#xA;                    {% endcomponent %}&#xA;&#xA;                    {% component &#34;unfold/components/title.html&#34; %}&#xA;                        {{ card.metric }}&#xA;                    {% endcomponent %}&#xA;                {% endcomponent %}&#xA;            {% endfor %}&#xA;        {% endcomponent %}&#xA;    {% endcomponent %}&#xA;{% endblock %}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;List of available components &#xA; &lt;!-- omit from toc --&gt;&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Arguments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/button.html&lt;/td&gt; &#xA;   &lt;td&gt;Basic button element&lt;/td&gt; &#xA;   &lt;td&gt;submit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/card.html&lt;/td&gt; &#xA;   &lt;td&gt;Card component&lt;/td&gt; &#xA;   &lt;td&gt;class, title, footer, label, icon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/chart/bar.html&lt;/td&gt; &#xA;   &lt;td&gt;Bar chart implementation&lt;/td&gt; &#xA;   &lt;td&gt;class, data, height, width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/chart/line.html&lt;/td&gt; &#xA;   &lt;td&gt;Line chart implementation&lt;/td&gt; &#xA;   &lt;td&gt;class, data, height, width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/container.html&lt;/td&gt; &#xA;   &lt;td&gt;Wrapper for settings max width&lt;/td&gt; &#xA;   &lt;td&gt;class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/flex.html&lt;/td&gt; &#xA;   &lt;td&gt;Flex items&lt;/td&gt; &#xA;   &lt;td&gt;class, col&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/icon.html&lt;/td&gt; &#xA;   &lt;td&gt;Icon element&lt;/td&gt; &#xA;   &lt;td&gt;class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/navigation.html&lt;/td&gt; &#xA;   &lt;td&gt;List of navigation links&lt;/td&gt; &#xA;   &lt;td&gt;class, items&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/progress.html&lt;/td&gt; &#xA;   &lt;td&gt;Percentual progress bar&lt;/td&gt; &#xA;   &lt;td&gt;class, value, title, description&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/separator.html&lt;/td&gt; &#xA;   &lt;td&gt;Separator, horizontal rule&lt;/td&gt; &#xA;   &lt;td&gt;class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/table.html&lt;/td&gt; &#xA;   &lt;td&gt;Table&lt;/td&gt; &#xA;   &lt;td&gt;table, card_included, striped&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/text.html&lt;/td&gt; &#xA;   &lt;td&gt;Paragraph of text&lt;/td&gt; &#xA;   &lt;td&gt;class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unfold/components/title.html&lt;/td&gt; &#xA;   &lt;td&gt;Basic heading element&lt;/td&gt; &#xA;   &lt;td&gt;class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Table component example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import Dict&#xA;from django.http import HttpRequest&#xA;&#xA;&#xA;def dashboard_callback(request: HttpRequest) -&amp;gt; Dict:&#xA;    return {&#xA;        &#34;table_data&#34;: {&#xA;            &#34;headers&#34;: [&#34;col 1&#34;, &#34;col 2&#34;],&#xA;            &#34;rows&#34;: [&#xA;                [&#34;a&#34;, &#34;b&#34;],&#xA;                [&#34;c&#34;, &#34;d&#34;],&#xA;            ]&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-django-html&#34;&gt;{% component &#34;unfold/components/card&#34; with title=&#34;Card title&#34; %}&#xA;    {% component &#34;unfold/components/table.html&#34; with table=table_data card_included=1 striped=1 %}{% encomponent %}&#xA;{% endcomponent %}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unfold development&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;Before adding any source code, it is recommended to have pre-commit installed on your local computer to check for all potential issues when committing the code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pre-commit&#xA;pre-commit install&#xA;pre-commit install --hook-type commit-msg&#xA;pre-commit run --all-files # Check if everything is okay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Poetry configuration&lt;/h3&gt; &#xA;&lt;p&gt;To add a new feature or fix the easiest approach is to use django-unfold in combination with Poetry. The process looks like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install django-unfold via &lt;code&gt;poetry add django-unfold&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;After that it is needed to git clone the repository somewhere on local computer.&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;em&gt;pyproject.toml&lt;/em&gt; and update django-unfold line &lt;code&gt;django-unfold = { path = &#34;../django-unfold&#34;, develop = true}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lock and update via &lt;code&gt;poetry lock &amp;amp;&amp;amp; poetry update&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compiling Tailwind&lt;/h3&gt; &#xA;&lt;p&gt;At the moment project contains package.json with all dependencies required to compile new CSS file. Tailwind configuration file is set to check all html, js and py files for Tailwind&#39;s classes occurrences.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npx tailwindcss -i src/unfold/styles.css -o src/unfold/static/unfold/css/styles.css --watch --minify&#xA;&#xA;npm run tailwind:watch # run after each change in code&#xA;npm run tailwind:build # run once&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some components like datepickers, calendars or selectors in admin was not possible to style by overriding html templates so their default styles are overridden in &lt;strong&gt;styles.css&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; most of the custom styles located in style.css are created via &lt;code&gt;@apply some-tailwind-class;&lt;/code&gt; as is not possible to manually add CSS class to element which are for example created via jQuery.&lt;/p&gt; &#xA;&lt;h3&gt;Design system&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Classes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Regular text&lt;/td&gt; &#xA;   &lt;td&gt;text-gray-600 dark:text-gray-300&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hover regular text&lt;/td&gt; &#xA;   &lt;td&gt;text-gray-700 dark:text-gray-200&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Headings&lt;/td&gt; &#xA;   &lt;td&gt;font-semibold text-gray-900 dark:text-gray-100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Icon&lt;/td&gt; &#xA;   &lt;td&gt;text-gray-400 dark:text-gray-500&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hover icon&lt;/td&gt; &#xA;   &lt;td&gt;hover:text-gray-500 dark:hover:text-gray-400&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using VS Code with containers&lt;/h3&gt; &#xA;&lt;p&gt;Unfold already contains prepared support for VS Code development. After cloning the project locally, open the main folder in VS Code (in terminal &lt;code&gt;code .&lt;/code&gt;). Immediately, you would see a message from VS Code &lt;strong&gt;Folder contains a Dev Container configuration file. Reopen folder to develop in a container&lt;/strong&gt; which will inform you that the support for containers is prepared. Confirm the message by clicking on &lt;strong&gt;Reopen in Container&lt;/strong&gt;. If the message is not there, you can still manually open the project in a container by running the command &lt;strong&gt;Dev Containers: Reopen in Container&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Development server&lt;/h4&gt; &#xA;&lt;p&gt;Now the VS Code will build an image and install Python dependencies. After successful installation is completed, VS Code will spin a container and from now it is possible to directly develop in the container. Unfold contains an example development application with the basic Unfold configuration available under &lt;code&gt;tests/server&lt;/code&gt;. Run &lt;code&gt;python manage.py runserver&lt;/code&gt; within a &lt;code&gt;tests/server&lt;/code&gt; folder to start a development Django server. Note that you have to run the command from VS Code terminal which is already connected to the running container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this is not a production ready server. Use it just for running tests or developing features &amp;amp; fixes.&lt;/p&gt; &#xA;&lt;h4&gt;Compiling Tailwind in devcontainer&lt;/h4&gt; &#xA;&lt;p&gt;The container has already a node preinstalled so it is possible to compile a new CSS. Open the terminal and run &lt;code&gt;npm install&lt;/code&gt; which will install all dependencies and will create &lt;code&gt;node_modules&lt;/code&gt; folder. Now, you can run npm commands for Tailwind as described in the previous chapter.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bhomnick/django-nonrelated-inlines&#34;&gt;django-nonrelated-inlines&lt;/a&gt; - Django admin inlines for unrelated models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;TailwindCSS&lt;/a&gt; - CSS framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://htmx.org/&#34;&gt;HTMX&lt;/a&gt; - AJAX communication with backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fonts.google.com/icons&#34;&gt;Material Icons&lt;/a&gt; - Icons from Google Fonts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trix-editor.org/&#34;&gt;Trix&lt;/a&gt; - WYSIWYG editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alpinejs.dev/&#34;&gt;Alpine.js&lt;/a&gt; - JavaScript interactions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chartjs/Chart.js/&#34;&gt;Chart.js&lt;/a&gt; - Chart components&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>