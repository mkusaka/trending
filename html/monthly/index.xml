<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub HTML Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-01T01:49:23Z</updated>
  <subtitle>Monthly Trending of HTML in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ProletRevDicta/Prolet</title>
    <updated>2025-01-01T01:49:23Z</updated>
    <id>tag:github.com,2025-01-01:/ProletRevDicta/Prolet</id>
    <link href="https://github.com/ProletRevDicta/Prolet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Historical documents (in Chinese) about the GPCR (Thanks Comrade RC MR HR etc.)&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>munificent/craftinginterpreters</title>
    <updated>2025-01-01T01:49:23Z</updated>
    <id>tag:github.com,2025-01-01:/munificent/craftinginterpreters</id>
    <link href="https://github.com/munificent/craftinginterpreters" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository for the book &#34;Crafting Interpreters&#34;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is the repo used for the in-progress book &#34;&lt;a href=&#34;http://craftinginterpreters.com&#34;&gt;Crafting Interpreters&lt;/a&gt;&#34;. It contains the Markdown text of the book, full implementations of both interpreters, as well as the build system to weave the two together into the final site.&lt;/p&gt; &#xA;&lt;p&gt;If you find an error or have a suggestion, please do file an issue here. Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;One of the absolute best things about writing a book online and putting it out there before it&#39;s done is that people like you have been kind enough to give me feedback, point out typos, and find other errors or unclear text.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to do that, great! You can just file bugs here on the repo, or send a pull request if you&#39;re so inclined. If you want to send a pull request, but don&#39;t want to get the build system set up to regenerate the HTML too, don&#39;t worry about it. I&#39;ll do that when I pull it in.&lt;/p&gt; &#xA;&lt;h2&gt;Ports and implementations&lt;/h2&gt; &#xA;&lt;p&gt;Another way to get involved is by sharing your own implementation of Lox. Ports to other languages are particularly useful since not every reader likes Java and C. Feel free to add your Lox port or implementation to the wiki:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/munificent/craftinginterpreters/wiki/Lox-implementations&#34;&gt;Lox implementations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Stuff&lt;/h2&gt; &#xA;&lt;p&gt;I am a terribly forgetful, error-prone mammal, so I automated as much as I could.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;I develop on an OS X machine, but any POSIX system should work too. With a little extra effort, you should be able to get this working on Windows as well, though I can&#39;t help you out much.&lt;/p&gt; &#xA;&lt;p&gt;Most of the work is orchestrated by make. The build scripts, test runner, and other utilities are all written in &lt;a href=&#34;https://dart.dev/&#34;&gt;Dart&lt;/a&gt;. Instructions to install Dart are &lt;a href=&#34;https://dart.dev/get-dart&#34;&gt;here&lt;/a&gt;. Once you have Dart installed and on your path, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This downloads all of the packages used by the build and test scripts.&lt;/p&gt; &#xA;&lt;p&gt;In order to compile the two interpreters, you also need a C compiler on your path as well as &lt;code&gt;javac&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve got that setup, try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything is working, that will generate the site for the book as well as compiling the two interpreters clox and jlox. You can run either interpreter right from the root of the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./clox&#xA;$ ./jlox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hacking on the book&lt;/h3&gt; &#xA;&lt;p&gt;The Markdown and snippets of source code are woven together into the final HTML using a hand-written static site generator that started out as a &lt;a href=&#34;https://github.com/munificent/game-programming-patterns/raw/master/script/format.py&#34;&gt;single tiny Python script&lt;/a&gt; for &lt;a href=&#34;http://gameprogrammingpatterns.com/&#34;&gt;my first book&lt;/a&gt; and somehow grew into something approximating a real program.&lt;/p&gt; &#xA;&lt;p&gt;The generated HTML is committed in the repo under &lt;code&gt;site/&lt;/code&gt;. It is built from a combination of Markdown for prose, which lives in &lt;code&gt;book/&lt;/code&gt;, and snippets of code that are weaved in from the Java and C implementations in &lt;code&gt;java/&lt;/code&gt; and &lt;code&gt;c/&lt;/code&gt;. (All of those funny looking comments in the source code are how it knows which snippet goes where.)&lt;/p&gt; &#xA;&lt;p&gt;The script that does all the magic is &lt;code&gt;tool/bin/build.dart&lt;/code&gt;. You can run that directly, or run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make book&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That generates the entire site in one batch. If you are incrementally working on it, you&#39;ll want to run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This runs a little HTTP server on localhost rooted at the &lt;code&gt;site/&lt;/code&gt; directory. Any time you request a page, it regenerates any files whose sources have been changed, including Markdown files, interpreter source files, templates, and assets. Just let that keep running, edit files locally, and refresh your browser to see the changes.&lt;/p&gt; &#xA;&lt;h3&gt;Building the interpreters&lt;/h3&gt; &#xA;&lt;p&gt;You can build each interpreter like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make clox&#xA;$ make jlox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds the final version of each interpreter as it appears at the end of its part in the book.&lt;/p&gt; &#xA;&lt;p&gt;You can also see what the interpreters look like at the end of each chapter. (I use this to make sure they are working even in the middle of the book.) This is driven by a script, &lt;code&gt;tool/bin/split_chapters.dart&lt;/code&gt; that uses the same comment markers for the code snippets to determine which chunks of code are present in each chapter. It takes only the snippets that have been seen by the end of each chapter and produces a new copy of the source in &lt;code&gt;gen/&lt;/code&gt;, one directory for each chapter&#39;s code. (These are also an easier way to view the source code since they have all of the distracting marker comments stripped out.)&lt;/p&gt; &#xA;&lt;p&gt;Then, each of those can be built separately. Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make c_chapters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in the &lt;code&gt;build/&lt;/code&gt; directory, you&#39;ll get an executable for each chapter, like &lt;code&gt;chap14_chunks&lt;/code&gt;, etc. Likewise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make java_chapters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This compiles the Java code to classfiles in &lt;code&gt;build/gen/&lt;/code&gt; in a subdirectory for each chapter.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;I have a full Lox test suite that I use to ensure the interpreters in the book do what they&#39;re supposed to do. The test cases live in &lt;code&gt;test/&lt;/code&gt;. The Dart program &lt;code&gt;tool/bin/test.dart&lt;/code&gt; is a test runner that runs each of those test files on a Lox interpreter, parses the result, and validates that that the test does what it&#39;s expected to do.&lt;/p&gt; &#xA;&lt;p&gt;There are various interpreters you can run the tests against:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make test       # The final versions of clox and jlox.&#xA;$ make test_clox  # The final version of clox.&#xA;$ make test_jlox  # The final version of jlox.&#xA;$ make test_c     # Every chapter&#39;s version of clox.&#xA;$ make test_java  # Every chapter&#39;s version of jlox.&#xA;$ make test_all   # All of the above.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing your implementation&lt;/h3&gt; &#xA;&lt;p&gt;You are welcome to use the test suite and the test runner to test your own Lox implementation. The test runner is at &lt;code&gt;tool/bin/test.dart&lt;/code&gt; and can be given a custom interpreter executable to run using &lt;code&gt;--interpreter&lt;/code&gt;. For example, if you had an interpreter executable at &lt;code&gt;my_code/boblox&lt;/code&gt;, you could test it like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dart tool/bin/test.dart clox --interpreter my_code/boblox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You still need to tell it which suite of tests to run because that determines the test expectations. If your interpreter should behave like jlox, use &#34;jlox&#34; as the suite name. If it behaves like clox, use &#34;clox&#34;. If your interpreter is only complete up to the end of one of the chapters in the book, you can use that chapter as the suite, like &#34;chap10_functions&#34;. See the Makefile for the names of all of the chapters.&lt;/p&gt; &#xA;&lt;p&gt;If your interpreter needs other command line arguments passed to use, pass them to the test runner using &lt;code&gt;--arguments&lt;/code&gt; and it will forward to your interpreter.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;asset/&lt;/code&gt; – Sass files and jinja2 templates used to generate the site.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;book/&lt;/code&gt; - Markdown files for the text of each chapter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build/&lt;/code&gt; - Intermediate files and other build output (except for the site itself) go here. Not committed to Git.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c/&lt;/code&gt; – Source code of clox, the interpreter written in C. Also contains an XCode project, if that&#39;s your thing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gen/&lt;/code&gt; – Java source files generated by GenerateAst.java go here. Not committed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;java/&lt;/code&gt; – Source code of jlox, the interpreter written in Java.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;note/&lt;/code&gt; – Various research, notes, TODOs, and other miscellanea.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;note/answers&lt;/code&gt; – Sample answers for the challenges. No cheating!&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;site/&lt;/code&gt; – The final generated site. The contents of this directory directly mirror craftinginterpreters.com. Most content here is generated by build.py, but fonts, images, and JS only live here. Everything is committed, even the generated content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test/&lt;/code&gt; – Test cases for the Lox implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tool/&lt;/code&gt; – Dart package containing the build, test, and other scripts.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>drduh/YubiKey-Guide</title>
    <updated>2025-01-01T01:49:23Z</updated>
    <id>tag:github.com,2025-01-01:/drduh/YubiKey-Guide</id>
    <link href="https://github.com/drduh/YubiKey-Guide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Guide to using YubiKey for GnuPG and SSH&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a guide to using &lt;a href=&#34;https://www.yubico.com/products/identifying-your-yubikey/&#34;&gt;YubiKey&lt;/a&gt; as a &lt;a href=&#34;https://security.stackexchange.com/questions/38924/how-does-storing-gpg-ssh-private-keys-on-smart-cards-compare-to-plain-usb-drives&#34;&gt;smart card&lt;/a&gt; for secure encryption, signature and authentication operations.&lt;/p&gt; &#xA;&lt;p&gt;Keys stored on YubiKey are &lt;a href=&#34;https://web.archive.org/web/20201125172759/https://support.yubico.com/hc/en-us/articles/360016614880-Can-I-Duplicate-or-Back-Up-a-YubiKey-&#34;&gt;non-exportable&lt;/a&gt;, unlike filesystem-based credentials, while remaining convenient for daily use. YubiKey can be configured to require a physical touch for cryptographic operations, reducing the risk of credential compromise.&lt;/p&gt; &#xA;&lt;p&gt;To suggest an improvement, send a pull request or open an &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#purchase-yubikey&#34;&gt;Purchase YubiKey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#prepare-environment&#34;&gt;Prepare environment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#install-software&#34;&gt;Install software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#prepare-gnupg&#34;&gt;Prepare GnuPG&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#identity&#34;&gt;Identity&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#key&#34;&gt;Key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#expiration&#34;&gt;Expiration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#passphrase&#34;&gt;Passphrase&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#create-certify-key&#34;&gt;Create Certify key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#add-additional-uids-optional&#34;&gt;Add additional uids (optional)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#create-subkeys&#34;&gt;Create Subkeys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#verify-keys&#34;&gt;Verify keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#backup-keys&#34;&gt;Backup keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#export-public-key&#34;&gt;Export public key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#configure-yubikey&#34;&gt;Configure YubiKey&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#change-pin&#34;&gt;Change PIN&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#set-attributes&#34;&gt;Set attributes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#transfer-subkeys&#34;&gt;Transfer Subkeys&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#signature-key&#34;&gt;Signature key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#encryption-key&#34;&gt;Encryption key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#authentication-key&#34;&gt;Authentication key&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#verify-transfer&#34;&gt;Verify transfer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#finish-setup&#34;&gt;Finish setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#using-yubikey&#34;&gt;Using YubiKey&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#encryption&#34;&gt;Encryption&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#signature&#34;&gt;Signature&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#configure-touch&#34;&gt;Configure touch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#ssh&#34;&gt;SSH&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#replace-agents&#34;&gt;Replace agents&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#copy-public-key&#34;&gt;Copy public key&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#import-ssh-keys&#34;&gt;Import SSH keys&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#ssh-agent-forwarding&#34;&gt;SSH agent forwarding&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#use-ssh-agent&#34;&gt;Use ssh-agent&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#use-sgpg-agentssh&#34;&gt;Use S.gpg-agent.ssh&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#chained-forwarding&#34;&gt;Chained forwarding&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#github&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#gnupg-agent-forwarding&#34;&gt;GnuPG agent forwarding&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#legacy-distributions&#34;&gt;Legacy distributions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#chained-gnupg-agent-forwarding&#34;&gt;Chained GnuPG agent forwarding&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#using-multiple-yubikeys&#34;&gt;Using multiple YubiKeys&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#email&#34;&gt;Email&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#thunderbird&#34;&gt;Thunderbird&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#mailvelope&#34;&gt;Mailvelope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#mutt&#34;&gt;Mutt&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#keyserver&#34;&gt;Keyserver&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#updating-keys&#34;&gt;Updating keys&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#renew-subkeys&#34;&gt;Renew Subkeys&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#rotate-subkeys&#34;&gt;Rotate Subkeys&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#reset-yubikey&#34;&gt;Reset YubiKey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#optional-hardening&#34;&gt;Optional hardening&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#improving-entropy&#34;&gt;Improving entropy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#enable-kdf&#34;&gt;Enable KDF&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#network-considerations&#34;&gt;Network considerations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#alternative-solutions&#34;&gt;Alternative solutions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#additional-resources&#34;&gt;Additional resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Purchase YubiKey&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.yubico.com/store/compare/&#34;&gt;Current YubiKeys&lt;/a&gt; except the FIDO-only Security Key Series and Bio Series YubiKeys are compatible with this guide.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://support.yubico.com/hc/en-us/articles/360013723419-How-to-Confirm-Your-Yubico-Device-is-Genuine&#34;&gt;Verify YubiKey&lt;/a&gt; by visiting &lt;a href=&#34;https://www.yubico.com/genuine/&#34;&gt;yubico.com/genuine&lt;/a&gt;. Select &lt;em&gt;Verify Device&lt;/em&gt; to begin the process. Touch the YubiKey when prompted and allow the site to see the make and model of the device when prompted. This device attestation may help mitigate &lt;a href=&#34;https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEF%20CON%2025%20-%20r00killah-and-securelyfitz-Secure-Tokin-and-Doobiekeys.pdf&#34;&gt;supply chain attacks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Several portable storage devices (such as microSD cards) for storing encrypted backups are also recommended.&lt;/p&gt; &#xA;&lt;h1&gt;Prepare environment&lt;/h1&gt; &#xA;&lt;p&gt;A dedicated, secure operating environment is recommended to generate cryptographic keys.&lt;/p&gt; &#xA;&lt;p&gt;The following is a general ranking of environments least to most hospitable to generating materials:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Public, shared or other computer owned by someone else&lt;/li&gt; &#xA; &lt;li&gt;Daily-use personal operating system with unrestricted network access&lt;/li&gt; &#xA; &lt;li&gt;Virtualized operating system with limited capabilities (using &lt;a href=&#34;https://virt-manager.org/&#34;&gt;virt-manager&lt;/a&gt;, VirtualBox or VMware, for example)&lt;/li&gt; &#xA; &lt;li&gt;Dedicated and hardened &lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt; or &lt;a href=&#34;https://www.openbsd.org/&#34;&gt;OpenBSD&lt;/a&gt; installation&lt;/li&gt; &#xA; &lt;li&gt;Ephemeral &lt;a href=&#34;https://www.debian.org/CD/live/&#34;&gt;Debian Live&lt;/a&gt; or &lt;a href=&#34;https://tails.boum.org/index.en.html&#34;&gt;Tails&lt;/a&gt; booted without primary storage attached&lt;/li&gt; &#xA; &lt;li&gt;Hardened hardware and firmware (&lt;a href=&#34;https://www.coreboot.org/&#34;&gt;Coreboot&lt;/a&gt;, &lt;a href=&#34;https://github.com/corna/me_cleaner&#34;&gt;Intel ME removed&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Air-gapped system without network capabilities, preferably ARM-based Raspberry Pi or other architecturally diverse equivalent&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Debian Live is used in this guide to balance usability and security, with some additional instructions for OpenBSD.&lt;/p&gt; &#xA;&lt;p&gt;Download the latest image and signature files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;curl -fLO &#34;https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/SHA512SUMS&#34;&#xA;&#xA;curl -fLO &#34;https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/SHA512SUMS.sign&#34;&#xA;&#xA;curl -fLO &#34;https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/$(awk &#39;/xfce.iso$/ {print $2}&#39; SHA512SUMS)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download the Debian signing public key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --keyserver hkps://keyring.debian.org --recv DF9B9C49EAA9298432589D76DA87E80D6294BE9B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the public key cannot be received, use a different keyserver or DNS server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --keyserver hkps://keyserver.ubuntu.com:443 --recv DF9B9C49EAA9298432589D76DA87E80D6294BE9B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify the signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --verify SHA512SUMS.sign SHA512SUMS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;gpg: Good signature from &#34;Debian CD signing key &amp;lt;debian-cd@lists.debian.org&amp;gt;&#34;&lt;/code&gt; must appear in the output.&lt;/p&gt; &#xA;&lt;p&gt;Verify the cryptographic hash of the image file matches the one in the signed file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;grep $(sha512sum debian-live-*-amd64-xfce.iso) SHA512SUMS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.debian.org/CD/verify&#34;&gt;Verifying authenticity of Debian CDs&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Connect a portable storage device and identify the disk label - this guide uses &lt;code&gt;/dev/sdc&lt;/code&gt; throughout, but this value may differ on your system:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo dmesg | tail&#xA;usb-storage 3-2:1.0: USB Mass Storage device detected&#xA;sd 2:0:0:0: [sdc] Attached SCSI removable disk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the Debian image to the device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo dd if=debian-live-*-amd64-xfce.iso of=/dev/sdc bs=4M status=progress ; sync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ dmesg | tail -n2&#xA;sd2 at scsibus4 targ 1 lun 0: &amp;lt;TS-RDF5, SD Transcend, TS3A&amp;gt; SCSI4 0/direct removable serial.0000000000000&#xA;sd2: 15193MB, 512 bytes/sector, 31116288 sectors&#xA;&#xA;$ doas dd if=debian-live-*-amd64-xfce.iso of=/dev/rsd2c bs=4m&#xA;465+1 records in&#xA;465+1 records out&#xA;1951432704 bytes transferred in 139.125 secs (14026448 bytes/sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Power off, remove internal hard drives and all unnecessary devices, such as the wireless card.&lt;/p&gt; &#xA;&lt;h1&gt;Install software&lt;/h1&gt; &#xA;&lt;p&gt;Load the operating system and configure networking. Optional hardening steps related to networking can be found &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#network-considerations&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If the screen locks on Debian Live, unlock with &lt;code&gt;user&lt;/code&gt; / &lt;code&gt;live&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open terminal and install required software packages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Debian/Ubuntu&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt update&#xA;&#xA;sudo apt -y upgrade&#xA;&#xA;sudo apt -y install \&#xA;  wget gnupg2 gnupg-agent dirmngr \&#xA;  cryptsetup scdaemon pcscd \&#xA;  yubikey-personalization yubikey-manager&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;doas pkg_add gnupg pcsc-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download and install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; and the following packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install \&#xA;  gnupg yubikey-personalization ykman pinentry-mac wget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; An additional Python package dependency may need to be installed to use &lt;a href=&#34;https://support.yubico.com/support/solutions/articles/15000012643-yubikey-manager-cli-ykman-user-guide&#34;&gt;&lt;code&gt;ykman&lt;/code&gt;&lt;/a&gt; - &lt;code&gt;pip install yubikey-manager&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NixOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build an air-gapped NixOS LiveCD image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;ref=$(git ls-remote https://github.com/drduh/Yubikey-Guide refs/heads/master | awk &#39;{print $1}&#39;)&#xA;&#xA;nix build --experimental-features &#34;nix-command flakes&#34; \&#xA;  github:drduh/YubiKey-Guide/$ref#nixosConfigurations.yubikeyLive.x86_64-linux.config.system.build.isoImage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have this repository checked out:&lt;/p&gt; &#xA;&lt;p&gt;Recommended, but optional: update &lt;code&gt;nixpkgs&lt;/code&gt; and &lt;code&gt;drduh/config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix flake update --commit-lock-file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix build --experimental-features &#34;nix-command flakes&#34; .#nixosConfigurations.yubikeyLive.x86_64-linux.config.system.build.isoImage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy it to a USB drive:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo cp -v result/iso/yubikeyLive.iso /dev/sdc ; sync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Skip steps to create a temporary working directory and a hardened configuration, as they are already part of the image.&lt;/p&gt; &#xA;&lt;p&gt;If you want to test your build before copying it into a USB stick, you can try it out on your machine using a tool like QEMU. Please keep in mind that a virtualized environment does not provide the same amount of security as an ephemeral system (see &lt;em&gt;Prepare environment&lt;/em&gt; above). Here is an example QEMU invocation after placing &lt;code&gt;yubikeyLive&lt;/code&gt; in &lt;code&gt;result/iso&lt;/code&gt; using the above &lt;code&gt;nix build&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Launch with 4G memory, 2 CPUs and KVM enabled&#xA;qemu-system-x86_64 \&#xA;    -enable-kvm \&#xA;    -m 4G \&#xA;    -smp 2 \&#xA;    -drive readonly=on,media=cdrom,format=raw,file=result/iso/yubikeyLive.iso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Arch&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo pacman -Syu gnupg pcsclite ccid yubikey-personalization&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;RHEL7&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo yum install -y gnupg2 pinentry-curses pcsc-lite pcsc-lite-libs gnupg2-smime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fedora&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo dnf install wget&#xA;&#xA;wget https://github.com/rpmsphere/noarch/raw/master/r/rpmsphere-release-38-1.noarch.rpm&#xA;&#xA;sudo rpm -Uvh rpmsphere-release*rpm&#xA;&#xA;sudo dnf install \&#xA;  gnupg2 dirmngr cryptsetup gnupg2-smime \&#xA;  pcsc-tools opensc pcsc-lite secure-delete \&#xA;  pgp-tools yubikey-personalization-gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Prepare GnuPG&lt;/h1&gt; &#xA;&lt;p&gt;Create a temporary directory which will be cleared on &lt;a href=&#34;https://en.wikipedia.org/wiki/Tmpfs&#34;&gt;reboot&lt;/a&gt; and set it as the GnuPG directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export GNUPGHOME=$(mktemp -d -t gnupg-$(date +%Y-%m-%d)-XXXXXXXXXX)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Import or create a &lt;a href=&#34;https://github.com/drduh/config/raw/master/gpg.conf&#34;&gt;hardened configuration&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd $GNUPGHOME&#xA;&#xA;wget https://raw.githubusercontent.com/drduh/config/master/gpg.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The options will look similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ grep -ve &#34;^#&#34; $GNUPGHOME/gpg.conf&#xA;personal-cipher-preferences AES256 AES192 AES&#xA;personal-digest-preferences SHA512 SHA384 SHA256&#xA;personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed&#xA;default-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed&#xA;cert-digest-algo SHA512&#xA;s2k-digest-algo SHA512&#xA;s2k-cipher-algo AES256&#xA;charset utf-8&#xA;no-comments&#xA;no-emit-version&#xA;no-greeting&#xA;keyid-format 0xlong&#xA;list-options show-uid-validity&#xA;verify-options show-uid-validity&#xA;with-fingerprint&#xA;require-cross-certification&#xA;no-symkey-cache&#xA;armor&#xA;use-agent&#xA;throw-keyids&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Networking can be disabled for the remainder of the setup.&lt;/p&gt; &#xA;&lt;h2&gt;Identity&lt;/h2&gt; &#xA;&lt;p&gt;When creating an identity with GnuPG, the default options ask for a &#34;Real name&#34;, &#34;Email address&#34; and optional &#34;Comment&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Depending on how you plan to use GnuPG, set these values respectively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export IDENTITY=&#34;YubiKey User &amp;lt;yubikey@example&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use any attribute which will uniquely identity the key (this may be incompatible with certain use cases):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export IDENTITY=&#34;My Cool YubiKey - 2024&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Key&lt;/h2&gt; &#xA;&lt;p&gt;Select the desired algorithm and key size. This guide recommends 4096-bit RSA.&lt;/p&gt; &#xA;&lt;p&gt;Set the value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export KEY_TYPE=rsa4096&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Expiration&lt;/h2&gt; &#xA;&lt;p&gt;Determine the desired Subkey validity duration.&lt;/p&gt; &#xA;&lt;p&gt;Setting a Subkey expiry forces identity and credential lifecycle management. However, setting an expiry on the Certify key is pointless, because it can just be used to extend itself. &lt;a href=&#34;https://security.stackexchange.com/questions/14718/does-openpgp-key-expiration-add-to-security/79386#79386&#34;&gt;Revocation certificates&lt;/a&gt; should instead be used to revoke an identity.&lt;/p&gt; &#xA;&lt;p&gt;This guide recommends a two year expiration for Subkeys to balance security and usability, however longer durations are possible to reduce maintenance frequency.&lt;/p&gt; &#xA;&lt;p&gt;When Subkeys expire, they may still be used to decrypt with GnuPG and authenticate with SSH, however they can &lt;strong&gt;not&lt;/strong&gt; be used to encrypt nor sign new messages.&lt;/p&gt; &#xA;&lt;p&gt;Subkeys must be renewed or rotated using the Certify key - see &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#updating-keys&#34;&gt;Updating keys&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Set the expiration date to two years:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export EXPIRATION=2y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or set the expiration date to a specific date to schedule maintenance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export EXPIRATION=2026-05-01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Passphrase&lt;/h2&gt; &#xA;&lt;p&gt;Generate a passphrase for the Certify key. It will be used infrequently to manage Subkeys and should be very strong. The passphrase is recommended to consist of only uppercase letters and numbers for improved readability. &lt;a href=&#34;https://secure.research.vt.edu/diceware&#34;&gt;Diceware&lt;/a&gt; is another method for creating memorable passphrases.&lt;/p&gt; &#xA;&lt;p&gt;The following commands will generate a strong passphrase and avoid ambiguous characters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export CERTIFY_PASS=$(LC_ALL=C tr -dc &#39;A-Z1-9&#39; &amp;lt; /dev/urandom | \&#xA;  tr -d &#34;1IOS5U&#34; | fold -w 30 | sed &#34;-es/./ /&#34;{1..26..5} | \&#xA;  cut -c2- | tr &#34; &#34; &#34;-&#34; | head -1) ; printf &#34;\n$CERTIFY_PASS\n\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write the passphrase in a secure location, ideally separate from the portable storage device used for key material, or memorize it.&lt;/p&gt; &#xA;&lt;p&gt;This repository includes a &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.html&#34;&gt;&lt;code&gt;passphrase.html&lt;/code&gt;&lt;/a&gt; template to help with credential transcription. Save the raw file, open it with a browser and print. Use a pen or permanent marker to select a letter or number on each row for each character in the passphrase. &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.csv&#34;&gt;&lt;code&gt;passphrase.csv&lt;/code&gt;&lt;/a&gt; can also be printed without a browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;lp -d Printer-Name passphrase.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Create Certify key&lt;/h1&gt; &#xA;&lt;p&gt;The primary key to generate is the Certify key, which is responsible for issuing Subkeys for encryption, signature and authentication operations.&lt;/p&gt; &#xA;&lt;p&gt;The Certify key should be kept offline at all times and only accessed from a dedicated and secure environment to issue or revoke Subkeys.&lt;/p&gt; &#xA;&lt;p&gt;Do not set an expiration date on the Certify key.&lt;/p&gt; &#xA;&lt;p&gt;Generate the Certify key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo &#34;$CERTIFY_PASS&#34; | gpg --batch --passphrase-fd 0 \&#xA;    --quick-generate-key &#34;$IDENTITY&#34; &#34;$KEY_TYPE&#34; cert never&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set and view the Certify key identifier and fingerprint for use later:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export KEYID=$(gpg -k --with-colons &#34;$IDENTITY&#34; | awk -F: &#39;/^pub:/ { print $5; exit }&#39;)&#xA;&#xA;export KEYFP=$(gpg -k --with-colons &#34;$IDENTITY&#34; | awk -F: &#39;/^fpr:/ { print $10; exit }&#39;)&#xA;&#xA;printf &#34;\nKey ID: %40s\nKey FP: %40s\n\n&#34; &#34;$KEYID&#34; &#34;$KEYFP&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Add additional uids (optional)&lt;/h1&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;p&gt;This is an optional step if you have a use case which requires &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues/445&#34;&gt;additional identities&lt;/a&gt;. Some non-exhaustive example use cases are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;different email addresses for different languages&lt;/li&gt; &#xA; &lt;li&gt;different email addresses for professional versus personal but please see alternative reason below for not tying these addresses together&lt;/li&gt; &#xA; &lt;li&gt;anonymized email addresses for different git providers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An alternative would be to have distinct keys but you would then require multiple YubiKeys, as each can only hold a single key for each type (signing, encryption, authentication). Nevertheless, there can be good reasons to have multiple YubiKeys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if you have different email addresses for professional versus personal use cases, having distinct keys allow you to disassociate the identities&lt;/li&gt; &#xA; &lt;li&gt;if you are also using the YubiKey as a U2F or FIDO2 device, having multiple YubiKeys is generally recommended as a backup measure&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Steps&lt;/h2&gt; &#xA;&lt;p&gt;Define an array containing additional uids. As this is bash syntax, each array element should be surrounded by quotes and each element should be separated by a space:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;declare -a additional_uids&#xA;additional_uids=(&#34;Super Cool YubiKey 2024&#34; &#34;uid 1 &amp;lt;uid1@example.org&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the additional uids to the key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;for uid in &#34;${additional_uids[@]}&#34; ; do \&#xA;    echo &#34;$CERTIFY_PASS&#34; | gpg --batch --passphrase-fd 0 --pinentry-mode=loopback --quick-add-uid &#34;$KEYFP&#34; &#34;$uid&#34;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adjust the trust of the additional uids to be ultimate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --command-fd=0 --pinentry-mode=loopback --edit-key &#34;$KEYID&#34; &amp;lt;&amp;lt;EOF&#xA;uid *&#xA;trust&#xA;5&#xA;y&#xA;save&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Create Subkeys&lt;/h1&gt; &#xA;&lt;p&gt;Use the following command to generate Signature, Encryption and Authentication Subkeys using the previously configured key type, passphrase and expiration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;for SUBKEY in sign encrypt auth ; do \&#xA;  echo &#34;$CERTIFY_PASS&#34; | gpg --batch --pinentry-mode=loopback --passphrase-fd 0 \&#xA;      --quick-add-key &#34;$KEYFP&#34; &#34;$KEY_TYPE&#34; &#34;$SUBKEY&#34; &#34;$EXPIRATION&#34;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Verify keys&lt;/h1&gt; &#xA;&lt;p&gt;List available secret keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg -K&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output will display &lt;strong&gt;[C]ertify, [S]ignature, [E]ncryption and [A]uthentication&lt;/strong&gt; keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sec   rsa4096/0xF0F2CFEB04341FB5 2024-01-01 [C]&#xA;      Key fingerprint = 4E2C 1FA3 372C BA96 A06A  C34A F0F2 CFEB 0434 1FB5&#xA;uid                   [ultimate] YubiKey User &amp;lt;yubikey@example&amp;gt;&#xA;ssb   rsa4096/0xB3CD10E502E19637 2024-01-01 [S] [expires: 2026-05-01]&#xA;ssb   rsa4096/0x30CBE8C4B085B9F7 2024-01-01 [E] [expires: 2026-05-01]&#xA;ssb   rsa4096/0xAD9E24E1B8CB9600 2024-01-01 [A] [expires: 2026-05-01]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Backup keys&lt;/h1&gt; &#xA;&lt;p&gt;Save a copy of the Certify key, Subkeys and public key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo &#34;$CERTIFY_PASS&#34; | gpg --output $GNUPGHOME/$KEYID-Certify.key \&#xA;    --batch --pinentry-mode=loopback --passphrase-fd 0 \&#xA;    --armor --export-secret-keys $KEYID&#xA;&#xA;echo &#34;$CERTIFY_PASS&#34; | gpg --output $GNUPGHOME/$KEYID-Subkeys.key \&#xA;    --batch --pinentry-mode=loopback --passphrase-fd 0 \&#xA;    --armor --export-secret-subkeys $KEYID&#xA;&#xA;gpg --output $GNUPGHOME/$KEYID-$(date +%F).asc \&#xA;    --armor --export $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an &lt;strong&gt;encrypted&lt;/strong&gt; backup on portable storage to be kept offline in a secure and durable location.&lt;/p&gt; &#xA;&lt;p&gt;The following process is recommended to be repeated several times on multiple portable storage devices, as they are likely to fail over time. As an additional backup measure, &lt;a href=&#34;https://www.jabberwocky.com/software/paperkey/&#34;&gt;Paperkey&lt;/a&gt; can be used to make a physical copy of key materials for improved durability.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; The &lt;a href=&#34;https://en.wikipedia.org/wiki/Ext2&#34;&gt;ext2&lt;/a&gt; filesystem without encryption can be mounted on Linux and OpenBSD. Use &lt;a href=&#34;https://en.wikipedia.org/wiki/Fat32&#34;&gt;FAT32&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Ntfs&#34;&gt;NTFS&lt;/a&gt; filesystem for macOS and Windows compatibility instead.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Attach a portable storage device and check its label, in this case &lt;code&gt;/dev/sdc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo dmesg | tail&#xA;usb-storage 3-2:1.0: USB Mass Storage device detected&#xA;sd 2:0:0:0: [sdc] Attached SCSI removable disk&#xA;&#xA;$ sudo fdisk -l /dev/sdc&#xA;Disk /dev/sdc: 14.9 GiB, 15931539456 bytes, 31116288 sectors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Confirm the destination (&lt;code&gt;of&lt;/code&gt;) before issuing the following command - it is destructive! This guide uses &lt;code&gt;/dev/sdc&lt;/code&gt; throughout, but this value may be different on your system.&lt;/p&gt; &#xA;&lt;p&gt;Zero the header to prepare for encryption:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo dd if=/dev/zero of=/dev/sdc bs=4M count=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove and re-connect the storage device.&lt;/p&gt; &#xA;&lt;p&gt;Erase and create a new partition table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo fdisk /dev/sdc &amp;lt;&amp;lt;EOF&#xA;g&#xA;w&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a small (at least 20 Mb is recommended to account for the LUKS header size) partition for storing secret materials:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo fdisk /dev/sdc &amp;lt;&amp;lt;EOF&#xA;n&#xA;&#xA;&#xA;+20M&#xA;w&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://dys2p.com/en/2023-05-luks-security.html&#34;&gt;LUKS&lt;/a&gt; to encrypt the new partition.&lt;/p&gt; &#xA;&lt;p&gt;Generate another unique &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#passphrase&#34;&gt;Passphrase&lt;/a&gt; (ideally different from the one used for the Certify key) to protect the encrypted volume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export LUKS_PASS=$(LC_ALL=C tr -dc &#39;A-Z1-9&#39; &amp;lt; /dev/urandom | \&#xA;  tr -d &#34;1IOS5U&#34; | fold -w 30 | sed &#34;-es/./ /&#34;{1..26..5} | \&#xA;  cut -c2- | tr &#34; &#34; &#34;-&#34; | head -1) ; printf &#34;\n$LUKS_PASS\n\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This passphrase will also be used infrequently to access the Certify key and should be very strong.&lt;/p&gt; &#xA;&lt;p&gt;Write the passphrase down or memorize it.&lt;/p&gt; &#xA;&lt;p&gt;Format the partition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo $LUKS_PASS | sudo cryptsetup -q luksFormat /dev/sdc1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mount the partition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo $LUKS_PASS | sudo cryptsetup -q luksOpen /dev/sdc1 gnupg-secrets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an ext2 filesystem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo mkfs.ext2 /dev/mapper/gnupg-secrets -L gnupg-$(date +%F)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mount the filesystem and copy the temporary GnuPG working directory with key materials:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo mkdir /mnt/encrypted-storage&#xA;&#xA;sudo mount /dev/mapper/gnupg-secrets /mnt/encrypted-storage&#xA;&#xA;sudo cp -av $GNUPGHOME /mnt/encrypted-storage/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unmount and close the encrypted volume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo umount /mnt/encrypted-storage&#xA;&#xA;sudo cryptsetup luksClose gnupg-secrets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Repeat the process for any additional storage devices (at least two are recommended).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Attach a USB disk and determine its label:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ dmesg | grep sd.\ at&#xA;sd2 at scsibus5 targ 1 lun 0: &amp;lt;TS-RDF5, SD Transcend, TS37&amp;gt; SCSI4 0/direct removable serial.00000000000000000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Print the existing partitions to make sure it&#39;s the right device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;doas disklabel -h sd2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initialize the disk by creating an &lt;code&gt;a&lt;/code&gt; partition with FS type &lt;code&gt;RAID&lt;/code&gt; and size of 25 Megabytes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas fdisk -giy sd2&#xA;Writing MBR at offset 0.&#xA;Writing GPT.&#xA;&#xA;$ doas disklabel -E sd2&#xA;Label editor (enter &#39;?&#39; for help at any prompt)&#xA;sd2&amp;gt; a a&#xA;offset: [64]&#xA;size: [31101776] 25M&#xA;FS type: [4.2BSD] RAID&#xA;sd2*&amp;gt; w&#xA;sd2&amp;gt; q&#xA;No label changes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Encrypt with bioctl using a unique &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#passphrase&#34;&gt;Passphrase&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas bioctl -c C -l sd2a softraid0&#xA;New passphrase:&#xA;Re-type passphrase:&#xA;softraid0: CRYPTO volume attached as sd3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an &lt;code&gt;i&lt;/code&gt; partition on the new crypto volume and the filesystem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas fdisk -giy sd3&#xA;Writing MBR at offset 0.&#xA;Writing GPT.&#xA;&#xA;$ doas disklabel -E sd3&#xA;Label editor (enter &#39;?&#39; for help at any prompt)&#xA;sd3&amp;gt; a i&#xA;offset: [64]&#xA;size: [16001]&#xA;FS type: [4.2BSD]&#xA;sd3*&amp;gt; w&#xA;sd3&amp;gt; q&#xA;No label changes.&#xA;&#xA;$ doas newfs sd3i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mount the filesystem and copy the temporary directory with the keyring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;doas mkdir /mnt/encrypted-storage&#xA;&#xA;doas mount /dev/sd3i /mnt/encrypted-storage&#xA;&#xA;doas cp -av $GNUPGHOME /mnt/encrypted-storage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unmount and remove the encrypted volume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;doas umount /mnt/encrypted-storage&#xA;&#xA;doas bioctl -d sd3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.openbsd.org/faq/faq14.html#softraidCrypto&#34;&gt;OpenBSD FAQ#14&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Export public key&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Without the public key, it will &lt;strong&gt;not&lt;/strong&gt; be possible to use GnuPG to decrypt nor sign messages. However, YubiKey can still be used for SSH authentication.&lt;/p&gt; &#xA;&lt;p&gt;Connect another portable storage device or create a new partition on the existing one.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using the same &lt;code&gt;/dev/sdc&lt;/code&gt; device as in the previous step, create a small (at least 20 Mb is recommended) partition for storing materials:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo fdisk /dev/sdc &amp;lt;&amp;lt;EOF&#xA;n&#xA;&#xA;&#xA;+20M&#xA;w&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a filesystem and export the public key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo mkfs.ext2 /dev/sdc2&#xA;&#xA;sudo mkdir /mnt/public&#xA;&#xA;sudo mount /dev/sdc2 /mnt/public&#xA;&#xA;gpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).asc&#xA;&#xA;sudo chmod 0444 /mnt/public/*.asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unmount and remove the storage device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo umount /mnt/public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas disklabel -E sd2&#xA;Label editor (enter &#39;?&#39; for help at any prompt)&#xA;sd2&amp;gt; a b&#xA;offset: [32130]&#xA;size: [31069710] 25M&#xA;FS type: [swap] 4.2BSD&#xA;sd2*&amp;gt; w&#xA;sd2&amp;gt; q&#xA;No label changes.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a filesystem and export the public key to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;doas newfs sd2b&#xA;&#xA;doas mkdir /mnt/public&#xA;&#xA;doas mount /dev/sd2b /mnt/public&#xA;&#xA;gpg --armor --export $KEYID | doas tee /mnt/public/$KEYID-$(date +%F).asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unmount and remove the storage device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;doas umount /mnt/public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configure YubiKey&lt;/h1&gt; &#xA;&lt;p&gt;Connect YubiKey and confirm its status:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --card-status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the card is locked, &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#reset-yubikey&#34;&gt;Reset&lt;/a&gt; it.&lt;/p&gt; &#xA;&lt;h2&gt;Change PIN&lt;/h2&gt; &#xA;&lt;p&gt;YubiKey&#39;s &lt;a href=&#34;https://developers.yubico.com/PGP/&#34;&gt;PGP&lt;/a&gt; interface has its own PINs separate from other modules such as &lt;a href=&#34;https://developers.yubico.com/PIV/Introduction/YubiKey_and_PIV.html&#34;&gt;PIV&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Capability&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;User PIN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;123456&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cryptographic operations (decrypt, sign, authenticate)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Admin PIN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;12345678&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;reset PIN, change Reset Code, add keys and owner information&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reset Code&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;reset PIN (&lt;a href=&#34;https://forum.yubico.com/viewtopicd01c.html?p=9055#p9055&#34;&gt;more information&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Determine the desired PIN values. They can be shorter than the Certify key passphrase due to limited brute-forcing opportunities; the User PIN should be convenient enough to remember for every-day use.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;User PIN&lt;/em&gt; must be at least 6 characters and the &lt;em&gt;Admin PIN&lt;/em&gt; must be at least 8 characters. A maximum of 127 ASCII characters are allowed. See &lt;a href=&#34;https://www.gnupg.org/howtos/card-howto/en/ch03s02.html&#34;&gt;GnuPG - Managing PINs&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Set PINs manually or generate them, for example a 6 digit User PIN and 8 digit Admin PIN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export ADMIN_PIN=$(LC_ALL=C tr -dc &#39;0-9&#39; &amp;lt; /dev/urandom | fold -w8 | head -1)&#xA;&#xA;export USER_PIN=$(LC_ALL=C tr -dc &#39;0-9&#39; &amp;lt; /dev/urandom | fold -w6 | head -1)&#xA;&#xA;printf &#34;\nAdmin PIN: %12s\nUser PIN: %13s\n\n&#34; &#34;$ADMIN_PIN&#34; &#34;$USER_PIN&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the Admin PIN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --command-fd=0 --pinentry-mode=loopback --change-pin &amp;lt;&amp;lt;EOF&#xA;3&#xA;12345678&#xA;$ADMIN_PIN&#xA;$ADMIN_PIN&#xA;q&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the User PIN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --command-fd=0 --pinentry-mode=loopback --change-pin &amp;lt;&amp;lt;EOF&#xA;1&#xA;123456&#xA;$USER_PIN&#xA;$USER_PIN&#xA;q&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove and re-insert YubiKey.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Three incorrect &lt;em&gt;User PIN&lt;/em&gt; entries will cause it to become blocked and must be unblocked with either the &lt;em&gt;Admin PIN&lt;/em&gt; or &lt;em&gt;Reset Code&lt;/em&gt;. Three incorrect &lt;em&gt;Admin PIN&lt;/em&gt; or &lt;em&gt;Reset Code&lt;/em&gt; entries will destroy data on YubiKey.&lt;/p&gt; &#xA;&lt;p&gt;The number of &lt;a href=&#34;https://docs.yubico.com/software/yubikey/tools/ykman/OpenPGP_Commands.html#ykman-openpgp-access-set-retries-options-pin-retries-reset-code-retries-admin-pin-retries&#34;&gt;retry attempts&lt;/a&gt; can be changed, for example to 5 attempts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;ykman openpgp access set-retries 5 5 5 -f -a $ADMIN_PIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Set attributes&lt;/h2&gt; &#xA;&lt;p&gt;Set the &lt;a href=&#34;https://gnupg.org/howtos/card-howto/en/smartcard-howto-single.html&#34;&gt;smart card attributes&lt;/a&gt; with &lt;code&gt;gpg --edit-card&lt;/code&gt; and &lt;code&gt;admin&lt;/code&gt; mode - use &lt;code&gt;help&lt;/code&gt; to see available options.&lt;/p&gt; &#xA;&lt;p&gt;Or use predetermined values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --command-fd=0 --pinentry-mode=loopback --edit-card &amp;lt;&amp;lt;EOF&#xA;admin&#xA;login&#xA;$IDENTITY&#xA;$ADMIN_PIN&#xA;quit&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;gpg --card-status&lt;/code&gt; to verify results (&lt;em&gt;Login data&lt;/em&gt; field).&lt;/p&gt; &#xA;&lt;h1&gt;Transfer Subkeys&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Transferring keys to YubiKey is a one-way operation which converts the on-disk key into a stub making it no longer usable to transfer to subsequent YubiKeys. Ensure a backup was made before proceeding.&lt;/p&gt; &#xA;&lt;p&gt;The Certify key passphrase and Admin PIN are required to transfer keys.&lt;/p&gt; &#xA;&lt;h2&gt;Signature key&lt;/h2&gt; &#xA;&lt;p&gt;Transfer the first key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID &amp;lt;&amp;lt;EOF&#xA;key 1&#xA;keytocard&#xA;1&#xA;$CERTIFY_PASS&#xA;$ADMIN_PIN&#xA;save&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Encryption key&lt;/h2&gt; &#xA;&lt;p&gt;Repeat the process for the second key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID &amp;lt;&amp;lt;EOF&#xA;key 2&#xA;keytocard&#xA;2&#xA;$CERTIFY_PASS&#xA;$ADMIN_PIN&#xA;save&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authentication key&lt;/h2&gt; &#xA;&lt;p&gt;Repeat the process for the third key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID &amp;lt;&amp;lt;EOF&#xA;key 3&#xA;keytocard&#xA;3&#xA;$CERTIFY_PASS&#xA;$ADMIN_PIN&#xA;save&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Verify transfer&lt;/h1&gt; &#xA;&lt;p&gt;Verify Subkeys have been moved to YubiKey with &lt;code&gt;gpg -K&lt;/code&gt; and look for &lt;code&gt;ssb&amp;gt;&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sec   rsa4096/0xF0F2CFEB04341FB5 2024-01-01 [C]&#xA;      Key fingerprint = 4E2C 1FA3 372C BA96 A06A  C34A F0F2 CFEB 0434 1FB5&#xA;uid                   [ultimate] YubiKey User &amp;lt;yubikey@example&amp;gt;&#xA;ssb&amp;gt;  rsa4096/0xB3CD10E502E19637 2024-01-01 [S] [expires: 2026-05-01]&#xA;ssb&amp;gt;  rsa4096/0x30CBE8C4B085B9F7 2024-01-01 [E] [expires: 2026-05-01]&#xA;ssb&amp;gt;  rsa4096/0xAD9E24E1B8CB9600 2024-01-01 [A] [expires: 2026-05-01]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;gt;&lt;/code&gt; after a tag indicates the key is stored on a smart card.&lt;/p&gt; &#xA;&lt;h1&gt;Finish setup&lt;/h1&gt; &#xA;&lt;p&gt;Verify you have done the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Memorized or wrote down the Certify key (identity) passphrase to a secure and durable location &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;echo $CERTIFY_PASS&lt;/code&gt; to see it again; &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.html&#34;&gt;&lt;code&gt;passphrase.html&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.csv&#34;&gt;&lt;code&gt;passphrase.csv&lt;/code&gt;&lt;/a&gt; to transcribe it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Memorized or wrote down passphrase to encrypted volume on portable storage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;echo $LUKS_PASS&lt;/code&gt; to see it again; &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.html&#34;&gt;&lt;code&gt;passphrase.html&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.csv&#34;&gt;&lt;code&gt;passphrase.csv&lt;/code&gt;&lt;/a&gt; to transcribe it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Saved the Certify key and Subkeys to encrypted portable storage, to be kept offline &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;At least two backups are recommended, stored at separate locations&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Exported a copy of the public key where is can be easily accessed later &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Separate device or non-encrypted partition was used&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Memorized or wrote down the User PIN and Admin PIN, which are unique and changed from default values &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;echo $USER_PIN $ADMIN_PIN&lt;/code&gt; to see them again; &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.html&#34;&gt;&lt;code&gt;passphrase.html&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.csv&#34;&gt;&lt;code&gt;passphrase.csv&lt;/code&gt;&lt;/a&gt; to transcribe them&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Moved Encryption, Signature and Authentication Subkeys to YubiKey &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;gpg -K&lt;/code&gt; shows &lt;code&gt;ssb&amp;gt;&lt;/code&gt; for each of the 3 Subkeys&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reboot to clear the ephemeral environment and complete setup.&lt;/p&gt; &#xA;&lt;h1&gt;Using YubiKey&lt;/h1&gt; &#xA;&lt;p&gt;Initialize GnuPG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg -k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import or create a &lt;a href=&#34;https://github.com/drduh/config/raw/master/gpg.conf&#34;&gt;hardened configuration&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd ~/.gnupg&#xA;&#xA;wget https://raw.githubusercontent.com/drduh/config/master/gpg.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the following option. This avoids the problem where GnuPG will repeatedly prompt for the insertion of an already-inserted YubiKey:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;touch scdaemon.conf&#xA;&#xA;echo &#34;disable-ccid&#34; &amp;gt;&amp;gt;scdaemon.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the required packages:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Debian/Ubuntu&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt update&#xA;&#xA;sudo apt install -y gnupg gnupg-agent scdaemon pcscd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;doas pkg_add gnupg pcsc-tools&#xA;&#xA;doas rcctl enable pcscd&#xA;&#xA;doas reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mount the non-encrypted volume with the public key:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Debian/Ubuntu&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo mkdir /mnt/public&#xA;&#xA;sudo mount /dev/sdc2 /mnt/public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;doas mkdir /mnt/public&#xA;&#xA;doas mount /dev/sd3i /mnt/public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import the public key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --import /mnt/public/*.asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download the public key from a keyserver:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --recv $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with the URL on YubiKey, retrieve the public key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg/card&amp;gt; fetch&#xA;&#xA;gpg/card&amp;gt; quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Determine the key ID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg -k&#xA;&#xA;export KEYID=0xF0F2CFEB04341FB5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assign ultimate trust by typing &lt;code&gt;trust&lt;/code&gt; and selecting option &lt;code&gt;5&lt;/code&gt; then &lt;code&gt;quit&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID &amp;lt;&amp;lt;EOF&#xA;trust&#xA;5&#xA;y&#xA;save&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove and re-insert YubiKey.&lt;/p&gt; &#xA;&lt;p&gt;Verify the status with &lt;code&gt;gpg --card-status&lt;/code&gt; which will list the available Subkeys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Reader ...........: Yubico YubiKey OTP FIDO CCID 00 00&#xA;Application ID ...: D2760001240102010006055532110000&#xA;Application type .: OpenPGP&#xA;Version ..........: 3.4&#xA;Manufacturer .....: Yubico&#xA;Serial number ....: 05553211&#xA;Name of cardholder: YubiKey User&#xA;Language prefs ...: en&#xA;Salutation .......:&#xA;URL of public key : [not set]&#xA;Login data .......: yubikey@example&#xA;Signature PIN ....: not forced&#xA;Key attributes ...: rsa4096 rsa4096 rsa4096&#xA;Max. PIN lengths .: 127 127 127&#xA;PIN retry counter : 3 3 3&#xA;Signature counter : 0&#xA;KDF setting ......: on&#xA;Signature key ....: CF5A 305B 808B 7A0F 230D  A064 B3CD 10E5 02E1 9637&#xA;      created ....: 2024-01-01 12:00:00&#xA;Encryption key....: A5FA A005 5BED 4DC9 889D  38BC 30CB E8C4 B085 B9F7&#xA;      created ....: 2024-01-01 12:00:00&#xA;Authentication key: 570E 1355 6D01 4C04 8B6D  E2A3 AD9E 24E1 B8CB 9600&#xA;      created ....: 2024-01-01 12:00:00&#xA;General key info..: sub  rsa4096/0xB3CD10E502E19637 2024-01-01 YubiKey User &amp;lt;yubikey@example&amp;gt;&#xA;sec#  rsa4096/0xF0F2CFEB04341FB5  created: 2024-01-01  expires: never&#xA;ssb&amp;gt;  rsa4096/0xB3CD10E502E19637  created: 2024-01-01  expires: 2026-05-01&#xA;                                  card-no: 0006 05553211&#xA;ssb&amp;gt;  rsa4096/0x30CBE8C4B085B9F7  created: 2024-01-01  expires: 2026-05-01&#xA;                                  card-no: 0006 05553211&#xA;ssb&amp;gt;  rsa4096/0xAD9E24E1B8CB9600  created: 2024-01-01  expires: 2026-05-01&#xA;                                  card-no: 0006 05553211&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sec#&lt;/code&gt; indicates the corresponding key is not available (the Certify key is offline).&lt;/p&gt; &#xA;&lt;p&gt;YubiKey is now ready for use!&lt;/p&gt; &#xA;&lt;h2&gt;Encryption&lt;/h2&gt; &#xA;&lt;p&gt;Encrypt a message to yourself (useful for storing credentials or protecting backups):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo &#34;\ntest message string&#34; | \&#xA;  gpg --encrypt --armor \&#xA;      --recipient $KEYID --output encrypted.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Decrypt the message - a prompt for the User PIN will appear:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --decrypt --armor encrypted.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To encrypt to multiple recipients/keys, set the preferred key ID last:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo &#34;test message string&#34; | \&#xA;  gpg --encrypt --armor \&#xA;      --recipient $KEYID_2 --recipient $KEYID_1 --recipient $KEYID \&#xA;      --output encrypted.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://github.com/drduh/config/raw/master/zshrc&#34;&gt;shell function&lt;/a&gt; to make encrypting files easier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;secret () {&#xA;  output=&#34;${1}&#34;.$(date +%s).enc&#xA;  gpg --encrypt --armor --output ${output} \&#xA;    -r $KEYID &#34;${1}&#34; &amp;amp;&amp;amp; echo &#34;${1} -&amp;gt; ${output}&#34;&#xA;}&#xA;&#xA;reveal () {&#xA;  output=$(echo &#34;${1}&#34; | rev | cut -c16- | rev)&#xA;  gpg --decrypt --output ${output} &#34;${1}&#34; &amp;amp;&amp;amp; \&#xA;    echo &#34;${1} -&amp;gt; ${output}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ secret document.pdf&#xA;document.pdf -&amp;gt; document.pdf.1580000000.enc&#xA;&#xA;$ reveal document.pdf.1580000000.enc&#xA;gpg: anonymous recipient; trying secret key 0xF0F2CFEB04341FB5 ...&#xA;gpg: okay, we are the anonymous recipient.&#xA;gpg: encrypted with RSA key, ID 0x0000000000000000&#xA;document.pdf.1580000000.enc -&amp;gt; document.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/drduh/Purse&#34;&gt;drduh/Purse&lt;/a&gt; is a password manager based on GnuPG and YubiKey to securely store and use credentials.&lt;/p&gt; &#xA;&lt;h2&gt;Signature&lt;/h2&gt; &#xA;&lt;p&gt;Sign a message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo &#34;test message string&#34; | gpg --armor --clearsign &amp;gt; signed.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify the signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --verify signed.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output will be similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg: Signature made Mon 01 Jan 2024 12:00:00 PM UTC&#xA;gpg:                using RSA key CF5A305B808B7A0F230DA064B3CD10E502E19637&#xA;gpg: Good signature from &#34;YubiKey User &amp;lt;yubikey@example&amp;gt;&#34; [ultimate]&#xA;Primary key fingerprint: 4E2C 1FA3 372C BA96 A06A  C34A F0F2 CFEB 0434 1FB5&#xA;     Subkey fingerprint: CF5A 305B 808B 7A0F 230D  A064 B3CD 10E5 02E1 9637&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure touch&lt;/h2&gt; &#xA;&lt;p&gt;By default, YubiKey will perform cryptographic operations without requiring any action from the user after the key is unlocked once with the PIN.&lt;/p&gt; &#xA;&lt;p&gt;To require a touch for each key operation, use &lt;a href=&#34;https://developers.yubico.com/yubikey-manager/&#34;&gt;YubiKey Manager&lt;/a&gt; and the Admin PIN to set key policy.&lt;/p&gt; &#xA;&lt;p&gt;Encryption:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;ykman openpgp keys set-touch dec on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Versions of YubiKey Manager before 5.1.0 use &lt;code&gt;enc&lt;/code&gt; instead of &lt;code&gt;dec&lt;/code&gt; for encryption:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;ykman openpgp keys set-touch enc on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even older versions of YubiKey Manager use &lt;code&gt;touch&lt;/code&gt; instead of &lt;code&gt;set-touch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;ykman openpgp keys set-touch sig on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Authentication:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;ykman openpgp keys set-touch aut on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view and adjust policy options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;ykman openpgp keys set-touch -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Cached&lt;/code&gt; or &lt;code&gt;Cached-Fixed&lt;/code&gt; may be desirable for YubiKey use with email clients.&lt;/p&gt; &#xA;&lt;p&gt;YubiKey will blink when it is waiting for a touch. On Linux, &lt;a href=&#34;https://github.com/maximbaz/yubikey-touch-detector&#34;&gt;maximbaz/yubikey-touch-detector&lt;/a&gt; can be used to indicate YubiKey is waiting for a touch.&lt;/p&gt; &#xA;&lt;h2&gt;SSH&lt;/h2&gt; &#xA;&lt;p&gt;Import or create a &lt;a href=&#34;https://github.com/drduh/config/raw/master/gpg-agent.conf&#34;&gt;hardened configuration&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd ~/.gnupg&#xA;&#xA;wget https://raw.githubusercontent.com/drduh/config/master/gpg-agent.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; The &lt;code&gt;cache-ttl&lt;/code&gt; options do &lt;strong&gt;not&lt;/strong&gt; apply when using YubiKey as a smart card, because the PIN is &lt;a href=&#34;https://dev.gnupg.org/T3362&#34;&gt;cached by the smart card itself&lt;/a&gt;. To clear the PIN from cache (equivalent to &lt;code&gt;default-cache-ttl&lt;/code&gt; and &lt;code&gt;max-cache-ttl&lt;/code&gt;), remove YubiKey, or set &lt;code&gt;forcesig&lt;/code&gt; when editing the card to be prompted for the PIN each time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; Set &lt;code&gt;pinentry-program&lt;/code&gt; to &lt;code&gt;/usr/bin/pinentry-gnome3&lt;/code&gt; for a GUI-based prompt.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install pinentry with &lt;code&gt;brew install pinentry-mac&lt;/code&gt; then edit &lt;code&gt;gpg-agent.conf&lt;/code&gt; to set the &lt;code&gt;pinentry-program&lt;/code&gt; path to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple Silicon Macs: &lt;code&gt;/opt/homebrew/bin/pinentry-mac&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intel Macs: &lt;code&gt;/usr/local/bin/pinentry-mac&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;MacGPG Suite: &lt;code&gt;/usr/local/MacGPG2/libexec/pinentry-mac.app/Contents/MacOS/pinentry-mac&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;gpgconf --kill gpg-agent&lt;/code&gt; for the change to take effect.&lt;/p&gt; &#xA;&lt;p&gt;To use graphical applications on macOS, &lt;a href=&#34;https://jms1.net/yubikey/make-ssh-use-gpg-agent.md&#34;&gt;additional setup is required&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create &lt;code&gt;$HOME/Library/LaunchAgents/gnupg.gpg-agent.plist&lt;/code&gt; with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34;&#xA;  &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;        &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;&#xA;        &amp;lt;string&amp;gt;gnupg.gpg-agent&amp;lt;/string&amp;gt;&#xA;        &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;&#xA;        &amp;lt;true/&amp;gt;&#xA;        &amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;&#xA;        &amp;lt;false/&amp;gt;&#xA;        &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;&#xA;        &amp;lt;array&amp;gt;&#xA;            &amp;lt;string&amp;gt;/usr/local/MacGPG2/bin/gpg-connect-agent&amp;lt;/string&amp;gt;&#xA;            &amp;lt;string&amp;gt;/bye&amp;lt;/string&amp;gt;&#xA;        &amp;lt;/array&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;launchctl load $HOME/Library/LaunchAgents/gnupg.gpg-agent.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create &lt;code&gt;$HOME/Library/LaunchAgents/gnupg.gpg-agent-symlink.plist&lt;/code&gt; with the following contens:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/ProperyList-1.0/dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;        &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;&#xA;        &amp;lt;string&amp;gt;gnupg.gpg-agent-symlink&amp;lt;/string&amp;gt;&#xA;        &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;&#xA;        &amp;lt;array&amp;gt;&#xA;            &amp;lt;string&amp;gt;/bin/sh&amp;lt;/string&amp;gt;&#xA;            &amp;lt;string&amp;gt;-c&amp;lt;/string&amp;gt;&#xA;            &amp;lt;string&amp;gt;/bin/ln -sf $HOME/.gnupg/S.gpg-agent.ssh $SSH_AUTH_SOCK&amp;lt;/string&amp;gt;&#xA;        &amp;lt;/array&amp;gt;&#xA;        &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;&#xA;        &amp;lt;true/&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;launchctl load $HOME/Library/LaunchAgents/gnupg.gpg-agent-symlink.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reboot to activate changes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Windows can already have some virtual smart card readers installed, like the one provided for Windows Hello. To verify YubiKey is the correct one used by scdaemon, add it to its configuration.&lt;/p&gt; &#xA;&lt;p&gt;Find the YubiKey label using PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS C:\WINDOWS\system32&amp;gt; Get-PnpDevice -Class SoftwareDevice | Where-Object {$_.FriendlyName -like &#34;*YubiKey*&#34;} | Select-Object -ExpandProperty FriendlyName&#xA;Yubico YubiKey OTP+FIDO+CCID 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.hanselman.com/blog/HowToSetupSignedGitCommitsWithAYubiKeyNEOAndGPGAndKeybaseOnWindows.aspx&#34;&gt;How to setup Signed Git Commits with a YubiKey NEO and GPG and Keybase on Windows (2018)&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;%APPDATA%/gnupg/scdaemon.conf&lt;/code&gt; to add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;reader-port &amp;lt;device name, e.g. Yubico YubiKey OTP+FIDO+CCID 0&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;%APPDATA%/gnupg/gpg-agent.conf&lt;/code&gt; to add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;enable-ssh-support&#xA;enable-putty-support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restart the agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg-connect-agent killagent /bye&#xA;&#xA;gpg-connect-agent /bye&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify YubiKey details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --card-status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import the public key and set ultimate trust:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --import &amp;lt;path to public key file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Retrieve the public key id:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --list-public-keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export the SSH public key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --export-ssh-key &amp;lt;public key id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the public SSH key to a file - it corresponds to the secret key on YubiKey and can be copied to SSH destination hosts.&lt;/p&gt; &#xA;&lt;p&gt;Create a shortcut that points to &lt;code&gt;gpg-connect-agent /bye&lt;/code&gt; and place it in the startup folder &lt;code&gt;shell:startup&lt;/code&gt; to make sure the agent starts after reboot. Modify the shortcut properties so it starts in a &#34;Minimized&#34; window.&lt;/p&gt; &#xA;&lt;p&gt;PuTTY can now be used for public-key SSH authentication. When the server asks for public-key verification, PuTTY will forward the request to GnuPG, which will prompt for a PIN to authorize the operation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WSL&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goal is to configure SSH client inside WSL work together with the Windows agent, such as gpg-agent.exe.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/media/schema_gpg.png&#34;&gt;WSL agent architecture&lt;/a&gt; illustration for an overview.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; GnuPG forwarding for cryptographic operations is not supported. See &lt;a href=&#34;https://github.com/vuori/weasel-pageant&#34;&gt;vuori/weasel-pageant&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;One way to forward is just &lt;code&gt;ssh -A&lt;/code&gt; (still need to eval weasel to setup local ssh-agent), and only relies on OpenSSH. In this track, &lt;code&gt;ForwardAgent&lt;/code&gt; and &lt;code&gt;AllowAgentForwarding&lt;/code&gt; in ssh/sshd config may be involved. However, when using ssh socket forwarding, do not enable &lt;code&gt;ForwardAgent&lt;/code&gt; in ssh config. See &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#ssh-agent-forwarding&#34;&gt;SSH Agent Forwarding&lt;/a&gt; for more information. This requires Ubuntu 16.04 or newer for WSL and Kleopatra.&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://github.com/vuori/weasel-pageant&#34;&gt;vuori/weasel-pageant&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;eval $(/mnt/c/&amp;lt;path of extraction&amp;gt;/weasel-pageant -r -a /tmp/S.weasel-pageant)&lt;/code&gt; to the shell rc file. Use a named socket here so it can be used in the &lt;code&gt;RemoteForward&lt;/code&gt; directive of &lt;code&gt;~/.ssh/config&lt;/code&gt;. Source it with &lt;code&gt;source ~/.bashrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Display the SSH key with &lt;code&gt;$ ssh-add -l&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;~/.ssh/config&lt;/code&gt; to add the following for each agent forwarding host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;RemoteForward &amp;lt;remote SSH socket path&amp;gt; /tmp/S.weasel-pageant&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The remote SSH socket path can be found with &lt;code&gt;gpgconf --list-dirs agent-ssh-socket&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the following to the shell rc file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;StreamLocalBindUnlink yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reload SSH daemon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo service sshd reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove YubiKey and reboot. Log back into Windows, open a WSL console and enter &lt;code&gt;ssh-add -l&lt;/code&gt; - no output should appear.&lt;/p&gt; &#xA;&lt;p&gt;Plug in YubiKey, enter the same command to display the ssh key.&lt;/p&gt; &#xA;&lt;p&gt;Connect to the remote host and use &lt;code&gt;ssh-add -l&lt;/code&gt; to confirm forwarding works.&lt;/p&gt; &#xA;&lt;p&gt;Agent forwarding may be chained through multiple hosts. Follow the same &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#remote-host-configuration&#34;&gt;protocol&lt;/a&gt; to configure each host.&lt;/p&gt; &#xA;&lt;h3&gt;Replace agents&lt;/h3&gt; &#xA;&lt;p&gt;To launch &lt;code&gt;gpg-agent&lt;/code&gt; for use by SSH, use the &lt;code&gt;gpg-connect-agent /bye&lt;/code&gt; or &lt;code&gt;gpgconf --launch gpg-agent&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to the shell rc file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export GPG_TTY=&#34;$(tty)&#34;&#xA;export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)&#xA;gpgconf --launch gpg-agent&#xA;gpg-connect-agent updatestartuptty /bye &amp;gt; /dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For fish, &lt;code&gt;config.fish&lt;/code&gt; should look like this (consider putting them into the &lt;code&gt;is-interactive&lt;/code&gt; block):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;set -x GPG_TTY (tty)&#xA;set -x SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket)&#xA;gpgconf --launch gpg-agent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;ForwardAgent&lt;/code&gt; for ssh-agent forwarding, &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; only needs to be set on the &lt;em&gt;local&lt;/em&gt; host, where YubiKey is connected. On the &lt;em&gt;remote&lt;/em&gt; host, &lt;code&gt;ssh&lt;/code&gt; will set &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; to something like &lt;code&gt;/tmp/ssh-mXzCzYT2Np/agent.7541&lt;/code&gt; upon connection. Do &lt;strong&gt;not&lt;/strong&gt; set &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; on the remote host - doing so will break &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#ssh-agent-forwarding&#34;&gt;SSH Agent Forwarding&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#ssh-agent-forwarding&#34;&gt;SSH Agent Forwarding&lt;/a&gt; for more info), &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; should also be set on the &lt;em&gt;remote&lt;/em&gt;. However, &lt;code&gt;GPG_TTY&lt;/code&gt; should not be set on the &lt;em&gt;remote&lt;/em&gt;, explanation specified in that section.&lt;/p&gt; &#xA;&lt;h3&gt;Copy public key&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; It is &lt;strong&gt;not&lt;/strong&gt; necessary to import the GnuPG public key in order to use SSH only.&lt;/p&gt; &#xA;&lt;p&gt;Copy and paste the output from &lt;code&gt;ssh-add&lt;/code&gt; to the server&#39;s &lt;code&gt;authorized_keys&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh-add -L&#xA;ssh-rsa AAAAB4NzaC1yc2EAAAADAQABAAACAz[...]zreOKM+HwpkHzcy9DQcVG2Nw== cardno:000605553211&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; Save the public key for identity file configuration. By default, SSH attempts to use all the identities available via the agent. It&#39;s often a good idea to manage exactly which keys SSH will use to connect to a server, for example to separate different roles or &lt;a href=&#34;https://words.filippo.io/ssh-whoami-filippo-io/&#34;&gt;to avoid being fingerprinted by untrusted ssh servers&lt;/a&gt;. To do this you&#39;ll need to use the command line argument &lt;code&gt;-i [identity_file]&lt;/code&gt; or the &lt;code&gt;IdentityFile&lt;/code&gt; and &lt;code&gt;IdentitiesOnly&lt;/code&gt; options in &lt;code&gt;.ssh/config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The argument provided to &lt;code&gt;IdentityFile&lt;/code&gt; is traditionally the path to the &lt;em&gt;private&lt;/em&gt; key file (for example &lt;code&gt;IdentityFile ~/.ssh/id_rsa&lt;/code&gt;). For YubiKey, &lt;code&gt;IdentityFile&lt;/code&gt; must point to the &lt;em&gt;public&lt;/em&gt; key file, and &lt;code&gt;ssh&lt;/code&gt; will select the appropriate private key from those available via ssh-agent. To prevent &lt;code&gt;ssh&lt;/code&gt; from trying all keys in the agent, use &lt;code&gt;IdentitiesOnly yes&lt;/code&gt; along with one or more &lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;IdentityFile&lt;/code&gt; options for the target host.&lt;/p&gt; &#xA;&lt;p&gt;To reiterate, with &lt;code&gt;IdentitiesOnly yes&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt; will not enumerate public keys loaded into &lt;code&gt;ssh-agent&lt;/code&gt; or &lt;code&gt;gpg-agent&lt;/code&gt;. This means public-key authentication will not proceed unless explicitly named by &lt;code&gt;ssh -i [identity_file]&lt;/code&gt; or in &lt;code&gt;.ssh/config&lt;/code&gt; on a per-host basis.&lt;/p&gt; &#xA;&lt;p&gt;In the case of YubiKey usage, to extract the public key from the ssh agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;ssh-add -L | grep &#34;cardno:000605553211&#34; &amp;gt; ~/.ssh/id_rsa_yubikey.pub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then explicitly associate this YubiKey-stored key for used with a host, &lt;code&gt;github.com&lt;/code&gt; for example, as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.ssh/config&#xA;Host github.com&#xA;    IdentitiesOnly yes&#xA;    IdentityFile ~/.ssh/id_rsa_yubikey.pub&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connect with public key authentication:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh git@github.com -vvv&#xA;[...]&#xA;debug2: key: cardno:000605553211 (0x1234567890),&#xA;debug1: Authentications that can continue: publickey&#xA;debug3: start over, passed a different list publickey&#xA;debug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password&#xA;debug3: authmethod_lookup publickey&#xA;debug3: remaining preferred: keyboard-interactive,password&#xA;debug3: authmethod_is_enabled publickey&#xA;debug1: Next authentication method: publickey&#xA;debug1: Offering RSA public key: cardno:000605553211&#xA;debug3: send_pubkey_test&#xA;debug2: we sent a publickey packet, wait for reply&#xA;debug1: Server accepts key: pkalg ssh-rsa blen 535&#xA;debug2: input_userauth_pk_ok: fp e5&lt;span&gt;🇩🇪&lt;/span&gt;a5:74:b1:3e:96:9b:85:46:e7:28:53:b4:82:c3&#xA;debug3: sign_and_send_pubkey: RSA e5&lt;span&gt;🇩🇪&lt;/span&gt;a5:74:b1:3e:96:9b:85:46:e7:28:53:b4:82:c3&#xA;debug1: Authentication succeeded (publickey).&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; To make multiple connections or securely transfer many files, use the &lt;a href=&#34;https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing&#34;&gt;ControlMaster&lt;/a&gt; ssh option.&lt;/p&gt; &#xA;&lt;h3&gt;Import SSH keys&lt;/h3&gt; &#xA;&lt;p&gt;If there are existing SSH keys to make available via &lt;code&gt;gpg-agent&lt;/code&gt;, they will need to be imported. Then, remove the original private keys. When importing the key, &lt;code&gt;gpg-agent&lt;/code&gt; uses the key filename as the label - this makes it easier to follow where the key originated from. In this example, we&#39;re starting with just the YubiKey in place and importing &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh-add -l&#xA;4096 SHA256:... cardno:00060123456 (RSA)&#xA;&#xA;$ ssh-add ~/.ssh/id_rsa &amp;amp;&amp;amp; rm ~/.ssh/id_rsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When invoking &lt;code&gt;ssh-add&lt;/code&gt;, a prompt for the SSH key passphrase will appear, then the &lt;code&gt;pinentry&lt;/code&gt; program will prompt and confirm a new passphrase to encrypt the converted key within the GnuPG key store.&lt;/p&gt; &#xA;&lt;p&gt;The migrated key will be listed in &lt;code&gt;ssh-add -l&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh-add -l&#xA;4096 SHA256:... cardno:00060123456 (RSA)&#xA;2048 SHA256:... /Users/username/.ssh/id_rsa (RSA)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To show the keys with MD5 fingerprints, as used by &lt;code&gt;gpg-connect-agent&lt;/code&gt;&#39;s &lt;code&gt;KEYINFO&lt;/code&gt; and &lt;code&gt;DELETE_KEY&lt;/code&gt; commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh-add -E md5 -l&#xA;4096 MD5:... cardno:00060123456 (RSA)&#xA;2048 MD5:... /Users/username/.ssh/id_rsa (RSA)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using the key &lt;code&gt;pinentry&lt;/code&gt; will be invoked to request the key passphrase. The passphrase will be cached for up to 10 idle minutes between uses, up to a maximum of 2 hours.&lt;/p&gt; &#xA;&lt;h3&gt;SSH agent forwarding&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; SSH Agent Forwarding can &lt;a href=&#34;https://matrix.org/blog/2019/05/08/post-mortem-and-remediations-for-apr-11-security-incident/#ssh-agent-forwarding-should-be-disabled&#34;&gt;add additional risk&lt;/a&gt; - proceed with caution!&lt;/p&gt; &#xA;&lt;p&gt;There are two methods for ssh-agent forwarding, one is provided by OpenSSH and the other is provided by GnuPG.&lt;/p&gt; &#xA;&lt;p&gt;The latter one may be more insecure as raw socket is just forwarded (not like &lt;code&gt;S.gpg-agent.extra&lt;/code&gt; with only limited functionality; if &lt;code&gt;ForwardAgent&lt;/code&gt; implemented by OpenSSH is just forwarding the raw socket, then they are insecure to the same degree). But for the latter one, one convenience is that one may forward once and use this agent everywhere in the remote. So again, proceed with caution!&lt;/p&gt; &#xA;&lt;p&gt;For example, tmux does not have environment variables such as &lt;code&gt;$SSH_AUTH_SOCK&lt;/code&gt; when connecting to remote hosts and attaching an existing session. For each shell, find the socket and &lt;code&gt;export SSH_AUTH_SOCK=/tmp/ssh-agent-xxx/xxxx.socket&lt;/code&gt;. However, with &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; in a fixed place, it can be used as the ssh-agent in shell rc files.&lt;/p&gt; &#xA;&lt;h4&gt;Use ssh-agent&lt;/h4&gt; &#xA;&lt;p&gt;You should now be able to use &lt;code&gt;ssh -A remote&lt;/code&gt; on the &lt;em&gt;local&lt;/em&gt; host to log into &lt;em&gt;remote&lt;/em&gt; host, and should then be able to use YubiKey as if it were connected to the remote host. For example, using e.g. &lt;code&gt;ssh-add -l&lt;/code&gt; on that remote host will show the public key from the YubiKey (&lt;code&gt;cardno:&lt;/code&gt;). Always use &lt;code&gt;ForwardAgent yes&lt;/code&gt; only for a single host, never for all servers.&lt;/p&gt; &#xA;&lt;h4&gt;Use S.gpg-agent.ssh&lt;/h4&gt; &#xA;&lt;p&gt;First you need to go through &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#gnupg-agent-forwarding&#34;&gt;GnuPG agent forwarding)&lt;/a&gt;, know the conditions for gpg-agent forwarding and know the location of &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; on both the local and the remote.&lt;/p&gt; &#xA;&lt;p&gt;You may use the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpgconf --list-dirs agent-ssh-socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;.ssh/config&lt;/code&gt; to add the remote host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Host&#xA;  Hostname remote-host.tld&#xA;  StreamLocalBindUnlink yes&#xA;  RemoteForward /run/user/1000/gnupg/S.gpg-agent.ssh /run/user/1000/gnupg/S.gpg-agent.ssh&#xA;  # RemoteForward [remote socket] [local socket]&#xA;  # Note that ForwardAgent is not wanted here!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After successfully ssh into the remote host, confirm &lt;code&gt;/run/user/1000/gnupg/S.gpg-agent.ssh&lt;/code&gt; exists.&lt;/p&gt; &#xA;&lt;p&gt;Then in the &lt;em&gt;remote&lt;/em&gt; you can type in command line or configure in the shell rc file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export SSH_AUTH_SOCK=&#34;/run/user/$UID/gnupg/S.gpg-agent.ssh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After sourcing the shell rc file, &lt;code&gt;ssh-add -l&lt;/code&gt; will return the correct public key.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; In this process no gpg-agent in the remote is involved, hence &lt;code&gt;gpg-agent.conf&lt;/code&gt; in the remote is of no use. Also pinentry is invoked locally.&lt;/p&gt; &#xA;&lt;h4&gt;Chained forwarding&lt;/h4&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;ssh-agent&lt;/code&gt; provided by OpenSSH and want to forward it into a &lt;em&gt;third&lt;/em&gt; box, you can just &lt;code&gt;ssh -A third&lt;/code&gt; on the &lt;em&gt;remote&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Meanwhile, if you use &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt;, assume you have gone through the steps above and have &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; on the &lt;em&gt;remote&lt;/em&gt;, and you would like to forward this agent into a &lt;em&gt;third&lt;/em&gt; box, first you may need to configure &lt;code&gt;sshd_config&lt;/code&gt; and &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; of &lt;em&gt;third&lt;/em&gt; in the same way as &lt;em&gt;remote&lt;/em&gt;, then in the ssh config of &lt;em&gt;remote&lt;/em&gt;, add the following lines&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Host third&#xA;  Hostname third-host.tld&#xA;  StreamLocalBindUnlink yes&#xA;  RemoteForward /run/user/1000/gnupg/S.gpg-agent.ssh /run/user/1000/gnupg/S.gpg-agent.ssh&#xA;  #RemoteForward [remote socket] [local socket]&#xA;  #Note that ForwardAgent is not wanted here!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The path must be set according to &lt;code&gt;gpgconf --list-dirs agent-ssh-socket&lt;/code&gt; on &lt;em&gt;remote&lt;/em&gt; and &lt;em&gt;third&lt;/em&gt; hosts.&lt;/p&gt; &#xA;&lt;h2&gt;GitHub&lt;/h2&gt; &#xA;&lt;p&gt;YubiKey can be used to sign commits and tags, and authenticate SSH to GitHub when configured in &lt;a href=&#34;https://github.com/settings/keys&#34;&gt;Settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Configure a signing key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git config --global user.signingkey $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; The &lt;code&gt;user.email&lt;/code&gt; option must match the email address associated with the PGP identity.&lt;/p&gt; &#xA;&lt;p&gt;To sign commits or tags, use the &lt;code&gt;-S&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Configure authentication:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git config --global core.sshcommand &#34;plink -agent&#34;&#xA;&#xA;git config --global gpg.program &#39;C:\Program Files (x86)\GnuPG\bin\gpg.exe&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then update the repository URL to &lt;code&gt;git@github.com:USERNAME/repository&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; For the error &lt;code&gt;gpg: signing failed: No secret key&lt;/code&gt; - run &lt;code&gt;gpg --card-status&lt;/code&gt; with YubiKey plugged in and try the git command again.&lt;/p&gt; &#xA;&lt;h2&gt;GnuPG agent forwarding&lt;/h2&gt; &#xA;&lt;p&gt;YubiKey can be used sign git commits and decrypt files on remote hosts with GnuPG Agent Forwarding. To ssh through another network, especially to push to/pull from GitHub using ssh, see &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#ssh-agent-forwarding&#34;&gt;Remote Machines (SSH Agent forwarding)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gpg-agent.conf&lt;/code&gt; is not needed on the remote host; after forwarding, remote GnuPG directly communicates with &lt;code&gt;S.gpg-agent&lt;/code&gt; without starting &lt;code&gt;gpg-agent&lt;/code&gt; on the remote host.&lt;/p&gt; &#xA;&lt;p&gt;On the remote host, edit &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; to set &lt;code&gt;StreamLocalBindUnlink yes&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; Without root access on the remote host to edit &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;, socket located at &lt;code&gt;gpgconf --list-dir agent-socket&lt;/code&gt; on the remote host will need to be removed before forwarding works. See &lt;a href=&#34;https://wiki.gnupg.org/AgentForwarding&#34;&gt;AgentForwarding GNUPG wiki page&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Import the public key on the remote host. On the local host, copy the public keyring to the remote host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;scp ~/.gnupg/pubring.kbx remote:~/.gnupg/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On modern distributions, such as Fedora 30, there is no need to set &lt;code&gt;RemoteForward&lt;/code&gt; in &lt;code&gt;~/.ssh/config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Legacy distributions&lt;/h3&gt; &#xA;&lt;p&gt;On the local host, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpgconf --list-dirs agent-extra-socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should return a path to agent-extra-socket - &lt;code&gt;/run/user/1000/gnupg/S.gpg-agent.extra&lt;/code&gt; - though on older Linux distros (and macOS) it may be &lt;code&gt;/home/&amp;lt;user&amp;gt;/.gnupg/S/gpg-agent.extra&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find the agent socket on the &lt;strong&gt;remote&lt;/strong&gt; host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpgconf --list-dirs agent-socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should return a path such as &lt;code&gt;/run/user/1000/gnupg/S.gpg-agent&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Finally, enable agent forwarding for a given host by adding the following to the local host&#39;s &lt;code&gt;~/.ssh/config&lt;/code&gt; (agent sockets may differ):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Host&#xA;  Hostname remote-host.tld&#xA;  StreamLocalBindUnlink yes&#xA;  RemoteForward /run/user/1000/gnupg/S.gpg-agent /run/user/1000/gnupg/S.gpg-agent.extra&#xA;  #RemoteForward [remote socket] [local socket]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It may be necessary to edit &lt;code&gt;gpg-agent.conf&lt;/code&gt; on the &lt;em&gt;local&lt;/em&gt; host to add the following information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pinentry-program /usr/bin/pinentry-gtk-2&#xA;extra-socket /run/user/1000/gnupg/S.gpg-agent.extra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The pinentry program starts on the &lt;em&gt;local&lt;/em&gt; host, not remote.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Any pinentry program except &lt;code&gt;pinentry-tty&lt;/code&gt; or &lt;code&gt;pinentry-curses&lt;/code&gt; may be used. This is because local &lt;code&gt;gpg-agent&lt;/code&gt; may start headlessly (by systemd without &lt;code&gt;$GPG_TTY&lt;/code&gt; set locally telling which tty it is on), thus failed to obtain the pin. Errors on the remote may be misleading saying that there is &lt;em&gt;IO Error&lt;/em&gt;. (Yes, internally there is actually an &lt;em&gt;IO Error&lt;/em&gt; since it happens when writing to/reading from tty while finding no tty to use, but for end users this is not friendly.)&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues/85&#34;&gt;Issue 85&lt;/a&gt; for more information and troubleshooting.&lt;/p&gt; &#xA;&lt;h3&gt;Chained GnuPG agent forwarding&lt;/h3&gt; &#xA;&lt;p&gt;Assume you have gone through the steps above and have &lt;code&gt;S.gpg-agent&lt;/code&gt; on the &lt;em&gt;remote&lt;/em&gt;, and you would like to forward this agent into a &lt;em&gt;third&lt;/em&gt; box, first you may need to configure &lt;code&gt;sshd_config&lt;/code&gt; of &lt;em&gt;third&lt;/em&gt; in the same way as &lt;em&gt;remote&lt;/em&gt;, then in the ssh config of &lt;em&gt;remote&lt;/em&gt;, add the following lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Host third&#xA;  Hostname third-host.tld&#xA;  StreamLocalBindUnlink yes&#xA;  RemoteForward /run/user/1000/gnupg/S.gpg-agent /run/user/1000/gnupg/S.gpg-agent&#xA;  #RemoteForward [remote socket] [local socket]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should change the path according to &lt;code&gt;gpgconf --list-dirs agent-socket&lt;/code&gt; on &lt;em&gt;remote&lt;/em&gt; and &lt;em&gt;third&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; On &lt;em&gt;local&lt;/em&gt; you have &lt;code&gt;S.gpg-agent.extra&lt;/code&gt; whereas on &lt;em&gt;remote&lt;/em&gt; and &lt;em&gt;third&lt;/em&gt;, you only have &lt;code&gt;S.gpg-agent&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using multiple YubiKeys&lt;/h2&gt; &#xA;&lt;p&gt;When a GnuPG key is added to YubiKey using &lt;code&gt;keytocard&lt;/code&gt;, the key is deleted from the keyring and a &lt;strong&gt;stub&lt;/strong&gt; is added, pointing to the YubiKey. The stub identifies the GnuPG key ID and YubiKey serial number.&lt;/p&gt; &#xA;&lt;p&gt;When a Subkey is added to an additional YubiKey, the stub is overwritten and will now point to the latest YubiKey. GnuPG will request a specific YubiKey by serial number, as referenced by the stub, and will not recognize another YubiKey with a different serial number.&lt;/p&gt; &#xA;&lt;p&gt;To scan an additional YubiKey and recreate the correct stub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg-connect-agent &#34;scd serialno&#34; &#34;learn --force&#34; /bye&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, use a script to delete the GnuPG shadowed key, where the card serial number is stored (see &lt;a href=&#34;https://dev.gnupg.org/T2291&#34;&gt;GnuPG #T2291&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cat &amp;gt;&amp;gt; ~/scripts/remove-keygrips.sh &amp;lt;&amp;lt;EOF&#xA;#!/usr/bin/env bash&#xA;(( $# )) || { echo &#34;Specify a key.&#34; &amp;gt;&amp;amp;2; exit 1; }&#xA;KEYGRIPS=$(gpg --with-keygrip --list-secret-keys &#34;$@&#34; | awk &#39;/Keygrip/ { print $3 }&#39;)&#xA;for keygrip in $KEYGRIPS&#xA;do&#xA;    rm &#34;$HOME/.gnupg/private-keys-v1.d/$keygrip.key&#34; 2&amp;gt; /dev/null&#xA;done&#xA;&#xA;gpg --card-status&#xA;EOF&#xA;&#xA;chmod +x ~/scripts/remove-keygrips.sh&#xA;&#xA;~/scripts/remove-keygrips.sh $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See discussion in Issues &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues/19&#34;&gt;#19&lt;/a&gt; and &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues/112&#34;&gt;#112&lt;/a&gt; for more information and troubleshooting steps.&lt;/p&gt; &#xA;&lt;h2&gt;Email&lt;/h2&gt; &#xA;&lt;p&gt;YubiKey can be used to decrypt and sign emails and attachments using &lt;a href=&#34;https://www.thunderbird.net/&#34;&gt;Thunderbird&lt;/a&gt;, &lt;a href=&#34;https://www.enigmail.net&#34;&gt;Enigmail&lt;/a&gt; and &lt;a href=&#34;http://www.mutt.org/&#34;&gt;Mutt&lt;/a&gt;. Thunderbird supports OAuth 2 authentication and can be used with Gmail. See &lt;a href=&#34;https://ssd.eff.org/en/module/how-use-pgp-linux&#34;&gt;this EFF guide&lt;/a&gt; for more information. Mutt has OAuth 2 support since version 2.0.&lt;/p&gt; &#xA;&lt;h3&gt;Thunderbird&lt;/h3&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://wiki.mozilla.org/Thunderbird:OpenPGP:Smartcards#Configure_an_email_account_to_use_an_external_GnuPG_key&#34;&gt;instructions on the mozilla wiki&lt;/a&gt; to setup your YubiKey with your thunderbird client using the external gpg provider.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Thunderbird &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues/448&#34;&gt;fails&lt;/a&gt; to decrypt emails if the ASCII &lt;code&gt;armor&lt;/code&gt; option is enabled in your &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt;. If you see the error &lt;code&gt;gpg: [don&#39;t know]: invalid packet (ctb=2d)&lt;/code&gt; or &lt;code&gt;message cannot be decrypted (there are unknown problems with this encrypted message)&lt;/code&gt; simply remove this option from your config file.&lt;/p&gt; &#xA;&lt;h3&gt;Mailvelope&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mailvelope.com/en&#34;&gt;Mailvelope&lt;/a&gt; allows YubiKey to be used with Gmail and others.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Mailvelope &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues/178&#34;&gt;does not work&lt;/a&gt; with the &lt;code&gt;throw-keyids&lt;/code&gt; option set in &lt;code&gt;gpg.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On macOS, install gpgme using Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install gpgme&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To allow Chrome to run gpgme, edit &lt;code&gt;~/Library/Application\ Support/Google/Chrome/NativeMessagingHosts/gpgmejson.json&lt;/code&gt; to add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;name&#34;: &#34;gpgmejson&#34;,&#xA;    &#34;description&#34;: &#34;Integration with GnuPG&#34;,&#xA;    &#34;path&#34;: &#34;/usr/local/bin/gpgme-json&#34;,&#xA;    &#34;type&#34;: &#34;stdio&#34;,&#xA;    &#34;allowed_origins&#34;: [&#xA;        &#34;chrome-extension://kajibbejlbohfaggdiogboambcijhkke/&#34;&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit the default path to allow Chrome to find GnuPG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo launchctl config user path /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, install the &lt;a href=&#34;https://chromewebstore.google.com/detail/mailvelope/kajibbejlbohfaggdiogboambcijhkke&#34;&gt;Mailvelope extension&lt;/a&gt; from the Chrome web store.&lt;/p&gt; &#xA;&lt;h3&gt;Mutt&lt;/h3&gt; &#xA;&lt;p&gt;Mutt has both CLI and TUI interfaces - the latter provides powerful functions for processing email. In addition, PGP can be integrated such that cryptographic operations can be done without leaving TUI.&lt;/p&gt; &#xA;&lt;p&gt;To enable GnuPG support, copy &lt;code&gt;/usr/share/doc/mutt/samples/gpg.rc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Edit the file to enable options &lt;code&gt;pgp_default_key&lt;/code&gt;, &lt;code&gt;pgp_sign_as&lt;/code&gt; and &lt;code&gt;pgp_autosign&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;source&lt;/code&gt; the file in &lt;code&gt;muttrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; &lt;code&gt;pinentry-tty&lt;/code&gt; set as the pinentry program in &lt;code&gt;gpg-agent.conf&lt;/code&gt; is reported to cause problems with Mutt TUI, because it uses curses. It is recommended to use &lt;code&gt;pinentry-curses&lt;/code&gt; or other graphic pinentry program instead.&lt;/p&gt; &#xA;&lt;h2&gt;Keyserver&lt;/h2&gt; &#xA;&lt;p&gt;Public keys can be uploaded to a public server for discoverability:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --send-key $KEYID&#xA;&#xA;gpg --keyserver keys.gnupg.net --send-key $KEYID&#xA;&#xA;gpg --keyserver hkps://keyserver.ubuntu.com:443 --send-key $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if &lt;a href=&#34;https://keys.openpgp.org/about/usage&#34;&gt;uploading to keys.openpgp.org&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --send-key $KEYID | curl -T - https://keys.openpgp.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The public key URL can also be added to YubiKey (based on &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-shaw-openpgp-hkp-00&#34;&gt;Shaw 2003&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;URL=&#34;hkps://keyserver.ubuntu.com:443/pks/lookup?op=get&amp;amp;search=${KEYID}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit YubiKey with &lt;code&gt;gpg --edit-card&lt;/code&gt; and the Admin PIN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg/card&amp;gt; admin&#xA;&#xA;gpg/card&amp;gt; url&#xA;URL to retrieve public key: hkps://keyserver.ubuntu.com:443/pks/lookup?op=get&amp;amp;search=0xFF00000000000000&#xA;&#xA;gpg/card&amp;gt; quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Updating keys&lt;/h1&gt; &#xA;&lt;p&gt;PGP does not provide &lt;a href=&#34;https://en.wikipedia.org/wiki/Forward_secrecy&#34;&gt;forward secrecy&lt;/a&gt;, meaning a compromised key may be used to decrypt all past messages. Although keys stored on YubiKey are more difficult to exploit, it is not impossible: the key and PIN could be physically compromised, or a vulnerability may be discovered in firmware or in the random number generator used to create keys, for example. Therefore, it is recommended practice to rotate Subkeys periodically.&lt;/p&gt; &#xA;&lt;p&gt;When a Subkey expires, it can either be renewed or replaced. Both actions require access to the Certify key.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Renewing Subkeys by updating expiration indicates continued possession of the Certify key and is more convenient.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Replacing Subkeys is less convenient but potentially more secure: the new Subkeys will &lt;strong&gt;not&lt;/strong&gt; be able to decrypt previous messages, authenticate with SSH, etc. Contacts will need to receive the updated public key and any encrypted secrets need to be decrypted and re-encrypted to new Subkeys to be usable. This process is functionally equivalent to losing the YubiKey and provisioning a new one.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Neither rotation method is superior and it is up to personal philosophy on identity management and individual threat modeling to decide which one to use, or whether to expire Subkeys at all. Ideally, Subkeys would be ephemeral: used only once for each unique encryption, signature and authentication event, however in practice that is not really practical nor worthwhile with YubiKey. Advanced users may dedicate an air-gapped machine for frequent credential rotation.&lt;/p&gt; &#xA;&lt;p&gt;To renew or rotate Subkeys, follow the same process as generating keys: boot to a secure environment, install required software and disable networking.&lt;/p&gt; &#xA;&lt;p&gt;Connect the portable storage device with the Certify key and identify the disk label.&lt;/p&gt; &#xA;&lt;p&gt;Decrypt and mount the encrypted volume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo cryptsetup luksOpen /dev/sdc1 gnupg-secrets&#xA;&#xA;sudo mkdir /mnt/encrypted-storage&#xA;&#xA;sudo mount /dev/mapper/gnupg-secrets /mnt/encrypted-storage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mount the non-encrypted public partition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo mkdir /mnt/public&#xA;&#xA;sudo mount /dev/sdc2 /mnt/public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the original private key materials to a temporary working directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export GNUPGHOME=$(mktemp -d -t gnupg-$(date +%Y-%m-%d)-XXXXXXXXXX)&#xA;&#xA;cd $GNUPGHOME&#xA;&#xA;cp -avi /mnt/encrypted-storage/gnupg-*/* $GNUPGHOME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Confirm the identity is available, set the key id and fingerprint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg -K&#xA;&#xA;export KEYID=$(gpg -k --with-colons &#34;$IDENTITY&#34; | awk -F: &#39;/^pub:/ { print $5; exit }&#39;)&#xA;&#xA;export KEYFP=$(gpg -k --with-colons &#34;$IDENTITY&#34; | awk -F: &#39;/^fpr:/ { print $10; exit }&#39;)&#xA;&#xA;echo $KEYID $KEYFP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recall the Certify key passphrase and set it, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export CERTIFY_PASS=ABCD-0123-IJKL-4567-QRST-UVWX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Renew Subkeys&lt;/h2&gt; &#xA;&lt;p&gt;Determine the updated expiration, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export EXPIRATION=2026-09-01&#xA;&#xA;export EXPIRATION=2y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Renew the Subkeys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo &#34;$CERTIFY_PASS&#34; | gpg --batch --pinentry-mode=loopback \&#xA;  --passphrase-fd 0 --quick-set-expire &#34;$KEYFP&#34; &#34;$EXPIRATION&#34; \&#xA;  $(gpg -K --with-colons | awk -F: &#39;/^fpr:/ { print $10 }&#39; | tail -n &#34;+2&#34; | tr &#34;\n&#34; &#34; &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export the updated public key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Transfer the public key to the destination host and import it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --import /mnt/public/*.asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, publish to a public key server and download it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --send-key $KEYID&#xA;&#xA;gpg --recv $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The validity of the GnuPG identity will be extended, allowing it to be used again for encryption and signature operations.&lt;/p&gt; &#xA;&lt;p&gt;The SSH public key does &lt;strong&gt;not&lt;/strong&gt; need to be updated on remote hosts.&lt;/p&gt; &#xA;&lt;h2&gt;Rotate Subkeys&lt;/h2&gt; &#xA;&lt;p&gt;Follow the original procedure to &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#create-subkeys&#34;&gt;Create Subkeys&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Previous Subkeys can be deleted from the identity.&lt;/p&gt; &#xA;&lt;p&gt;Finish by transfering new Subkeys to YubiKey.&lt;/p&gt; &#xA;&lt;p&gt;Copy the &lt;strong&gt;new&lt;/strong&gt; temporary working directory to encrypted storage, which is still mounted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo cp -avi $GNUPGHOME /mnt/encrypted-storage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unmount and close the encrypted volume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo umount /mnt/encrypted-storage&#xA;&#xA;sudo cryptsetup luksClose gnupg-secrets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export the updated public key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo mkdir /mnt/public&#xA;&#xA;sudo mount /dev/sdc2 /mnt/public&#xA;&#xA;gpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).asc&#xA;&#xA;sudo umount /mnt/public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove the storage device and follow the original steps to transfer new Subkeys (&lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;6&lt;/code&gt;) to YubiKey, replacing existing ones.&lt;/p&gt; &#xA;&lt;p&gt;Reboot or securely erase the GnuPG temporary working directory.&lt;/p&gt; &#xA;&lt;h1&gt;Reset YubiKey&lt;/h1&gt; &#xA;&lt;p&gt;If PIN attempts are exceeded, the YubiKey is locked and must be &lt;a href=&#34;https://developers.yubico.com/ykneo-openpgp/ResetApplet.html&#34;&gt;Reset&lt;/a&gt; and set up again using the encrypted backup.&lt;/p&gt; &#xA;&lt;p&gt;Copy the following to a file and run &lt;code&gt;gpg-connect-agent -r $file&lt;/code&gt; to lock and terminate the card. Then re-insert YubiKey to complete reset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;/hex&#xA;scd serialno&#xA;scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 e6 00 00&#xA;scd apdu 00 44 00 00&#xA;/echo Card has been successfully reset.&#xA;/bye&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use &lt;code&gt;ykman&lt;/code&gt; (sometimes in &lt;code&gt;~/.local/bin/&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ykman openpgp reset&#xA;WARNING! This will delete all stored OpenPGP keys and data and restore factory settings? [y/N]: y&#xA;Resetting OpenPGP data, don&#39;t remove your YubiKey...&#xA;Success! All data has been cleared and default PINs are set.&#xA;PIN:         123456&#xA;Reset code:  NOT SET&#xA;Admin PIN:   12345678&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Optional hardening&lt;/h1&gt; &#xA;&lt;p&gt;The following steps may improve the security and privacy of YubiKey.&lt;/p&gt; &#xA;&lt;h2&gt;Improving entropy&lt;/h2&gt; &#xA;&lt;p&gt;Generating cryptographic keys requires high-quality &lt;a href=&#34;https://www.random.org/randomness/&#34;&gt;randomness&lt;/a&gt;, measured as entropy. Most operating systems use software-based pseudorandom number generators or CPU-based hardware random number generators (HRNG).&lt;/p&gt; &#xA;&lt;p&gt;Optionally, a device such as &lt;a href=&#34;https://onerng.info/onerng/&#34;&gt;OneRNG&lt;/a&gt; may be used to &lt;a href=&#34;https://lwn.net/Articles/648550/&#34;&gt;increase the speed&lt;/a&gt; and possibly the quality of available entropy.&lt;/p&gt; &#xA;&lt;p&gt;Before creating keys, configure &lt;a href=&#34;https://wiki.archlinux.org/title/Rng-tools&#34;&gt;rng-tools&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt -y install at rng-tools python3-gnupg openssl&#xA;&#xA;wget https://github.com/OneRNG/onerng.github.io/raw/master/sw/onerng_3.7-1_all.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sha256sum onerng_3.7-1_all.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value must match:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;b7cda2fe07dce219a95dfeabeb5ee0f662f64ba1474f6b9dddacc3e8734d8f57&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo dpkg -i onerng_3.7-1_all.deb&#xA;&#xA;echo &#34;HRNGDEVICE=/dev/ttyACM0&#34; | sudo tee /etc/default/rng-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Insert the device and restart rng-tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo atd&#xA;&#xA;sudo service rng-tools restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Enable KDF&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; This feature may not be compatible with older GnuPG versions, especially mobile clients. These incompatible clients will not function because the PIN will always be rejected.&lt;/p&gt; &#xA;&lt;p&gt;This step must be completed before changing PINs or moving keys or an error will occur: &lt;code&gt;gpg: error for setup KDF: Conditions of use not satisfied&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Key Derived Function (KDF) enables YubiKey to store the hash of PIN, preventing the PIN from being passed as plain text.&lt;/p&gt; &#xA;&lt;p&gt;Enable KDF using the default Admin PIN of &lt;code&gt;12345678&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg --command-fd=0 --pinentry-mode=loopback --card-edit &amp;lt;&amp;lt;EOF&#xA;admin&#xA;kdf-setup&#xA;12345678&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Network considerations&lt;/h2&gt; &#xA;&lt;p&gt;This section is primarily focused on Debian / Ubuntu based systems, but the same concept applies to any system connected to a network.&lt;/p&gt; &#xA;&lt;p&gt;Whether you&#39;re using a VM, installing on dedicated hardware, or running a Live OS temporarily, start &lt;em&gt;without&lt;/em&gt; a network connection and disable any unnecessary services listening on all interfaces before connecting to the network.&lt;/p&gt; &#xA;&lt;p&gt;The reasoning for this is because services like cups or avahi can be listening by default. While this isn&#39;t an immediate problem it simply broadens the attack surface. Not everyone will have a dedicated subnet or trusted network equipment they can control, and for the purposes of this guide, these steps treat &lt;em&gt;any&lt;/em&gt; network as untrusted / hostile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disable Listening Services&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensures only essential network services are running&lt;/li&gt; &#xA; &lt;li&gt;If the service doesn&#39;t exist you&#39;ll get a &#34;Failed to stop&#34; which is fine&lt;/li&gt; &#xA; &lt;li&gt;Only disable &lt;code&gt;Bluetooth&lt;/code&gt; if you don&#39;t need it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl stop bluetooth exim4 cups avahi avahi-daemon sshd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Firewall&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enable a basic firewall policy of &lt;em&gt;deny inbound, allow outbound&lt;/em&gt;. Note that Debian does not come with a firewall, simply disabling the services in the previous step is fine. The following options have Ubuntu and similar systems in mind.&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu, &lt;code&gt;ufw&lt;/code&gt; is built in and easy to enable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ufw enable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On systems without &lt;code&gt;ufw&lt;/code&gt;, &lt;code&gt;nftables&lt;/code&gt; is replacing &lt;code&gt;iptables&lt;/code&gt;. The &lt;a href=&#34;https://wiki.nftables.org/wiki-nftables/index.php/Simple_ruleset_for_a_workstation&#34;&gt;nftables wiki has examples&lt;/a&gt; for a baseline &lt;em&gt;deny inbound, allow outbound&lt;/em&gt; policy. The &lt;code&gt;fw.inet.basic&lt;/code&gt; policy covers both IPv4 and IPv6.&lt;/p&gt; &#xA;&lt;p&gt;(Remember to download this README and any other resources to another external drive when creating the bootable media, to have this information ready to use offline)&lt;/p&gt; &#xA;&lt;p&gt;Regardless of which policy you use, write the contents to a file (e.g. &lt;code&gt;nftables.conf&lt;/code&gt;) and apply the policy with the following comand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nft -f ./nftables.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Review the System State&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;NetworkManager&lt;/code&gt; should be the only listening service on port 68/udp to obtain a DHCP lease (and 58/icmp6 if you have IPv6).&lt;/p&gt; &#xA;&lt;p&gt;If you want to look at every process&#39;s command line arguments you can use &lt;code&gt;ps axjf&lt;/code&gt;. This prints a process tree which may have a large number of lines but should be easy to read on a live image or fresh install.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ss -anp -A inet    # Dump all network state information&#xA;ps axjf                 # List all processes in a process tree&#xA;ps aux                  # BSD syntax, list all processes but no process tree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you find any additional processes listening on the network that aren&#39;t needed, take note and disable them with one of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl stop &amp;lt;process-name&amp;gt;                      # Stops services managed by systemctl&#xA;sudo pkill -f &#39;&amp;lt;process-name-or-command-line-string&amp;gt;&#39;   # Terminate the process by matching it&#39;s command line string&#xA;pgrep -f &#39;&amp;lt;process-name-or-command-line-string&amp;gt;&#39;        # Obtain the PID&#xA;sudo kill &amp;lt;pid&amp;gt;                                         # Terminate the process via its PID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now connect to a network.&lt;/p&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;YubiKey has two configurations, invoked with either a short or long press. By default, the short-press mode is configured for HID OTP; a brief touch will emit an OTP string starting with &lt;code&gt;cccccccc&lt;/code&gt;. OTP mode can be swapped to the second configuration via the YubiKey Personalization tool or disabled entirely using &lt;a href=&#34;https://developers.yubico.com/yubikey-manager&#34;&gt;YubiKey Manager&lt;/a&gt;: &lt;code&gt;ykman config usb -d OTP&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using YubiKey for GnuPG does not prevent use of &lt;a href=&#34;https://developers.yubico.com/&#34;&gt;other features&lt;/a&gt;, such as &lt;a href=&#34;https://developers.yubico.com/WebAuthn/&#34;&gt;WebAuthn&lt;/a&gt; and &lt;a href=&#34;https://developers.yubico.com/OTP/&#34;&gt;OTP&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add additional identities to a Certify key with the &lt;code&gt;adduid&lt;/code&gt; command during setup, then trust it ultimately with &lt;code&gt;trust&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; to configure for use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To switch between YubiKeys, remove the first YubiKey and restart gpg-agent, ssh-agent and pinentry with &lt;code&gt;pkill &#34;gpg-agent|ssh-agent|pinentry&#34; ; eval $(gpg-agent --daemon --enable-ssh-support)&lt;/code&gt; then insert the other YubiKey and run &lt;code&gt;gpg-connect-agent updatestartuptty /bye&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use YubiKey on multiple computers, import the corresponding public keys, then confirm YubiKey is visible with &lt;code&gt;gpg --card-status&lt;/code&gt;. Trust the imported public keys ultimately with &lt;code&gt;trust&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;, then &lt;code&gt;gpg --list-secret-keys&lt;/code&gt; will show the correct and trusted key.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;man gpg&lt;/code&gt; to understand GnuPG options and command-line flags.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get more information on potential errors, restart the &lt;code&gt;gpg-agent&lt;/code&gt; process with debug output to the console with &lt;code&gt;pkill gpg-agent; gpg-agent --daemon --no-detach -v -v --debug-level advanced --homedir ~/.gnupg&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A lot of issues can be fixed by removing and re-inserting YubiKey, or restarting the &lt;code&gt;gpg-agent&lt;/code&gt; process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Yubikey core error: no yubikey present&lt;/code&gt; - make sure the YubiKey is inserted correctly. It should blink once when plugged in.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you still receive the error, &lt;code&gt;Yubikey core error: no yubikey present&lt;/code&gt; - you likely need to install newer versions of yubikey-personalize as outlined in &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#install-software&#34;&gt;Install software&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you see &lt;code&gt;General key info..: [none]&lt;/code&gt; in card status output - import the public key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;gpg: decryption failed: secret key not available&lt;/code&gt; - you likely need to install GnuPG version 2.x. Another possibility is that there is a problem with the PIN, e.g., it is too short or blocked.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Yubikey core error: write error&lt;/code&gt; - YubiKey is likely locked. Install and run yubikey-personalization-gui to unlock it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Key does not match the card&#39;s capability&lt;/code&gt; - you likely need to use 2048-bit RSA key sizes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;sign_and_send_pubkey: signing failed: agent refused operation&lt;/code&gt; - make sure you replaced &lt;code&gt;ssh-agent&lt;/code&gt; with &lt;code&gt;gpg-agent&lt;/code&gt; as noted above.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you still receive the error, &lt;code&gt;sign_and_send_pubkey: signing failed: agent refused operation&lt;/code&gt; - &lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=835394&#34;&gt;run the command&lt;/a&gt; &lt;code&gt;gpg-connect-agent updatestartuptty /bye&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you still receive the error, &lt;code&gt;sign_and_send_pubkey: signing failed: agent refused operation&lt;/code&gt; - edit &lt;code&gt;~/.gnupg/gpg-agent.conf&lt;/code&gt; to set a valid &lt;code&gt;pinentry&lt;/code&gt; program path. &lt;code&gt;gpg: decryption failed: No secret key&lt;/code&gt; could also indicate an invalid &lt;code&gt;pinentry&lt;/code&gt; path&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you still receive the error, &lt;code&gt;sign_and_send_pubkey: signing failed: agent refused operation&lt;/code&gt; - it is a &lt;a href=&#34;https://bbs.archlinux.org/viewtopic.php?id=274571&#34;&gt;known issue&lt;/a&gt; that openssh 8.9p1 and higher has issues with YubiKey. Adding &lt;code&gt;KexAlgorithms -sntrup761x25519-sha512@openssh.com&lt;/code&gt; to &lt;code&gt;/etc/ssh/ssh_config&lt;/code&gt; often resolves the issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;The agent has no identities&lt;/code&gt; from &lt;code&gt;ssh-add -L&lt;/code&gt;, make sure you have installed and started &lt;code&gt;scdaemon&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Error connecting to agent: No such file or directory&lt;/code&gt; from &lt;code&gt;ssh-add -L&lt;/code&gt;, the UNIX file socket that the agent uses for communication with other processes may not be set up correctly. On Debian, try &lt;code&gt;export SSH_AUTH_SOCK=&#34;/run/user/$UID/gnupg/S.gpg-agent.ssh&#34;&lt;/code&gt;. Also see that &lt;code&gt;gpgconf --list-dirs agent-ssh-socket&lt;/code&gt; is returning single path, to existing &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; socket.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Permission denied (publickey)&lt;/code&gt;, increase ssh verbosity with the &lt;code&gt;-v&lt;/code&gt; flag and verify the public key from the card is being offered: &lt;code&gt;Offering public key: RSA SHA256:abcdefg... cardno:00060123456&lt;/code&gt;. If it is, verify the correct user the target system - not the user on the local system. Otherwise, be sure &lt;code&gt;IdentitiesOnly&lt;/code&gt; is not &lt;a href=&#34;https://github.com/FiloSottile/whosthere#how-do-i-stop-it&#34;&gt;enabled&lt;/a&gt; for this host.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If SSH authentication still fails - add up to 3 &lt;code&gt;-v&lt;/code&gt; flags to the &lt;code&gt;ssh&lt;/code&gt; command to increase verbosity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If it still fails, it may be useful to stop the background &lt;code&gt;sshd&lt;/code&gt; daemon process service on the server (e.g. using &lt;code&gt;sudo systemctl stop sshd&lt;/code&gt;) and instead start it in the foreground with extensive debugging output, using &lt;code&gt;/usr/sbin/sshd -eddd&lt;/code&gt;. Note that the server will not fork and will only process one connection, therefore has to be re-started after every &lt;code&gt;ssh&lt;/code&gt; test.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Please insert the card with serial number&lt;/code&gt; see &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#using-multiple-keys&#34;&gt;Using Multiple Keys&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;There is no assurance this key belongs to the named user&lt;/code&gt; or &lt;code&gt;encryption failed: Unusable public key&lt;/code&gt; or &lt;code&gt;No public key&lt;/code&gt; use &lt;code&gt;gpg --edit-key&lt;/code&gt; to set &lt;code&gt;trust&lt;/code&gt; to &lt;code&gt;5 = I trust ultimately&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If, when you try the above command, you get the error &lt;code&gt;Need the secret key to do this&lt;/code&gt; - specify trust for the key in &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt; by using the &lt;code&gt;trust-key [key ID]&lt;/code&gt; directive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If, when using a previously provisioned YubiKey on a new computer with &lt;code&gt;pass&lt;/code&gt;, you see the following error on &lt;code&gt;pass insert&lt;/code&gt;, you need to adjust the trust associated with the key. See the note above.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;gpg: 0x0000000000000000: There is no assurance this key belongs to the named user&#xA;gpg: [stdin]: encryption failed: Unusable public key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;gpg: 0x0000000000000000: skipped: Unusable public key&lt;/code&gt;, &lt;code&gt;signing failed: Unusable secret key&lt;/code&gt;, or &lt;code&gt;encryption failed: Unusable public key&lt;/code&gt; the Subkey may be expired and can no longer be used to encrypt nor sign messages. It can still be used to decrypt and authenticate, however.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the &lt;em&gt;pinentry&lt;/em&gt; graphical dialog does not show and this error appears: &lt;code&gt;sign_and_send_pubkey: signing failed: agent refused operation&lt;/code&gt;, install the &lt;code&gt;dbus-user-session&lt;/code&gt; package and restart for the &lt;code&gt;dbus&lt;/code&gt; user session to be fully inherited. This is because &lt;code&gt;pinentry&lt;/code&gt; complains about &lt;code&gt;No $DBUS_SESSION_BUS_ADDRESS found&lt;/code&gt;, falls back to &lt;code&gt;curses&lt;/code&gt; but doesn&#39;t find the expected &lt;code&gt;tty&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If, when you try the above &lt;code&gt;--card-status&lt;/code&gt; command, you get receive the error, &lt;code&gt;gpg: selecting card failed: No such device&lt;/code&gt; or &lt;code&gt;gpg: OpenPGP card not available: No such device&lt;/code&gt;, it&#39;s possible that the latest release of pcscd now requires polkit rules to operate properly. Create the following file to allow users in the &lt;code&gt;wheel&lt;/code&gt; group to use the card. Be sure to restart pcscd when you&#39;re done to allow the new rules to take effect.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cat &amp;lt;&amp;lt; EOF &amp;gt;  /etc/polkit-1/rules.d/99-pcscd.rules&#xA;polkit.addRule(function(action, subject) {&#xA;        if (action.id == &#34;org.debian.pcsc-lite.access_card&#34; &amp;amp;&amp;amp;&#xA;                subject.isInGroup(&#34;wheel&#34;)) {&#xA;                return polkit.Result.YES;&#xA;        }&#xA;});&#xA;polkit.addRule(function(action, subject) {&#xA;        if (action.id == &#34;org.debian.pcsc-lite.access_pcsc&#34; &amp;amp;&amp;amp;&#xA;                subject.isInGroup(&#34;wheel&#34;)) {&#xA;                return polkit.Result.YES;&#xA;        }&#xA;});&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If the public key is lost, follow &lt;a href=&#34;https://www.nicksherlock.com/2021/08/recovering-lost-gpg-public-keys-from-your-yubikey/&#34;&gt;this guide&lt;/a&gt; to recover it from YubiKey.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Refer to Yubico article &lt;a href=&#34;https://support.yubico.com/hc/en-us/articles/360013714479-Troubleshooting-Issues-with-GPG&#34;&gt;Troubleshooting Issues with GPG&lt;/a&gt; for additional guidance.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Alternative solutions&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vorburger/vorburger.ch-Notes/raw/develop/security/ed25519-sk.md&#34;&gt;&lt;code&gt;vorburger/ed25519-sk.md&lt;/code&gt;&lt;/a&gt; - use YubiKey for SSH without GnuPG&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smlx/piv-agent&#34;&gt;&lt;code&gt;smlx/piv-agent&lt;/code&gt;&lt;/a&gt; - SSH and GnuPG agent which can be used with PIV devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnupg.org/documentation/manuals/gnupg/OpenPGP-Key-Management.html&#34;&gt;&lt;code&gt;keytotpm&lt;/code&gt;&lt;/a&gt; - use GnuPG with TPM systems&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Additional resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.yubico.com/PGP/&#34;&gt;Yubico - PGP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.yubico.com/yubikey-personalization/&#34;&gt;Yubico - Yubikey Personalization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rgoulter.com/blog/posts/programming/2022-06-10-a-visual-explanation-of-gpg-subkeys.html&#34;&gt;A Visual Explanation of GPG Subkeys (2022)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dhess/nixos-yubikey&#34;&gt;dhess/nixos-yubikey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/lsasolutions/makegpg&#34;&gt;lsasolutions/makegpg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trmm.net/Yubikey&#34;&gt;Trammell Hudson - Yubikey (2020)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.onefellow.com/post/180065697833/yubikey-forwarding-ssh-keys&#34;&gt;Yubikey forwarding SSH keys (2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlohr.com/gpg-agent-forwarding/&#34;&gt;GPG Agent Forwarding (2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://evilmartians.com/chronicles/stick-with-security-yubikey-ssh-gnupg-macos&#34;&gt;Stick with security: YubiKey, SSH, GnuPG, macOS (2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.esev.com/blog/post/2015-01-pgp-ssh-key-on-yubikey-neo/&#34;&gt;PGP and SSH keys on a Yubikey NEO (2015)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/&#34;&gt;Offline GnuPG Master Key and Subkeys on YubiKey NEO Smartcard (2014)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alexcabal.com/creating-the-perfect-gpg-keypair/&#34;&gt;Creating the perfect GPG keypair (2013)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>