<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:56:04Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cedar2025/Xboard</title>
    <updated>2023-11-26T01:56:04Z</updated>
    <id>tag:github.com,2023-11-26:/cedar2025/Xboard</id>
    <link href="https://github.com/cedar2025/Xboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于V2board二次开发支持新协议新特性的面板&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;关于Xboard&lt;/h1&gt; &#xA;&lt;p&gt;Xborad是基于V2board二次开发，在性能上和功能上都有大部分增强的**面板&lt;/p&gt; &#xA;&lt;h1&gt;免责声明&lt;/h1&gt; &#xA;&lt;p&gt;本项目只是本人个人开发维护，本人不保证任何可用性，也不对使用本软件造成的任何后果负责。&lt;/p&gt; &#xA;&lt;h1&gt;捐赠&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果本项目帮助到了你，你可以对作者进行捐赠，感谢你的支持&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;TRC20： TLypStEWsVrj6Wz9mCxbXffqgt5yz3Y4XB&lt;/p&gt; &#xA;&lt;h1&gt;Xborad 特点&lt;/h1&gt; &#xA;&lt;p&gt;基于V2board 二次开发，增加了以下特性&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;升级Laravel10&lt;/li&gt; &#xA; &lt;li&gt;适配Laravels （提升至10+倍并发）&lt;/li&gt; &#xA; &lt;li&gt;适配Webman （比laravels快50%左右）&lt;/li&gt; &#xA; &lt;li&gt;修改配置从数据库中获取&lt;/li&gt; &#xA; &lt;li&gt;支持Docker部署、分布式部署&lt;/li&gt; &#xA; &lt;li&gt;支持根据用户IP归属地来下发订阅&lt;/li&gt; &#xA; &lt;li&gt;增加Hy2支持&lt;/li&gt; &#xA; &lt;li&gt;增加sing-box下发&lt;/li&gt; &#xA; &lt;li&gt;支持直接从cloudflare获取访问者真实IP&lt;/li&gt; &#xA; &lt;li&gt;支持根据客户端版本自动下发新协议&lt;/li&gt; &#xA; &lt;li&gt;支持线路筛选（订阅地址后面增加 &amp;amp;filter=香港｜美国）&lt;/li&gt; &#xA; &lt;li&gt;支持Sqlite安装（代替Mysql，自用用户福音）&lt;/li&gt; &#xA; &lt;li&gt;使用Vue3 + TypeScript + NaiveUI + Unocss + Pinia重构用户前端&lt;/li&gt; &#xA; &lt;li&gt;修复大量BUG&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;strong&gt;系统架构&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP8.1+&lt;/li&gt; &#xA; &lt;li&gt;Composer&lt;/li&gt; &#xA; &lt;li&gt;MySQL5.7+&lt;/li&gt; &#xA; &lt;li&gt;Redis&lt;/li&gt; &#xA; &lt;li&gt;Laravel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;性能对比 &lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/docs/%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94.md&#34;&gt;查看详情&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;xboard 无论前端还是后端性能都有巨大的提升&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;场景&lt;/th&gt; &#xA;   &lt;th&gt;php-fpm(传统)&lt;/th&gt; &#xA;   &lt;th&gt;php-fpm(传统开启opcache)&lt;/th&gt; &#xA;   &lt;th&gt;laravels&lt;/th&gt; &#xA;   &lt;th&gt;webman(docker)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;首页&lt;/td&gt; &#xA;   &lt;td&gt;6请求/秒&lt;/td&gt; &#xA;   &lt;td&gt;157请求/秒&lt;/td&gt; &#xA;   &lt;td&gt;477请求/秒&lt;/td&gt; &#xA;   &lt;td&gt;803请求/秒&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;用户订阅&lt;/td&gt; &#xA;   &lt;td&gt;6请求/秒&lt;/td&gt; &#xA;   &lt;td&gt;196请求/秒&lt;/td&gt; &#xA;   &lt;td&gt;586请求/秒&lt;/td&gt; &#xA;   &lt;td&gt;1064请求/秒&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;用户首页延迟&lt;/td&gt; &#xA;   &lt;td&gt;308ms&lt;/td&gt; &#xA;   &lt;td&gt;110ms&lt;/td&gt; &#xA;   &lt;td&gt;101ms&lt;/td&gt; &#xA;   &lt;td&gt;98ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;页面展示&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/docs/images/dashboard.png&#34; alt=&#34;示例图片&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;安装 / 更新 / 回滚&lt;/h2&gt; &#xA;&lt;p&gt;你可以点击查看下列方式的&lt;strong&gt;安装、更新&lt;/strong&gt;步骤&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/docs/docker-compose%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97.md&#34;&gt;Docker Compose 纯命令行快速部署&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/docs/aapanel+docker%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97.md&#34;&gt;aapanel + Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/docs/aapanel%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97.md&#34;&gt;aapanel 部署&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/docs/%E4%BB%8Eaapanel%E8%BF%81%E7%A7%BB%E5%88%B01panel%E6%95%99%E7%A8%8B.md&#34;&gt;从aapanel迁移到1panel教程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/docs/%E5%A4%9A%E5%BC%80Xboard%E6%95%99%E7%A8%8B.md&#34;&gt;1panel 多开Xboard教程&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;从其他版本迁移&lt;/h3&gt; &#xA;&lt;h4&gt;数据库迁移&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;根据你的版本查看对应的迁移指南进行迁移&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v2board dev 23/10/27的版本 &lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/docs/v2b_dev%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97.md&#34;&gt;点击跳转迁移指南&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;v2board 1.7.4 &lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/docs/v2b_1.7.4%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97.md&#34;&gt;点击跳转迁移指南&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;v2board 1.7.3 &lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/docs/v2b_1.7.3%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97.md&#34;&gt;点击跳转迁移指南&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;v2board wyx2685 &lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/docs/v2b_wyx2685%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97.md&#34;&gt;点击跳转迁移指南&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;注意&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;修改后台路径需要重启才能生效&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果是是aapanel安装则需要重启 webman守护进程&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>pandora-next/deploy</title>
    <updated>2023-11-26T01:56:04Z</updated>
    <id>tag:github.com,2023-11-26:/pandora-next/deploy</id>
    <link href="https://github.com/pandora-next/deploy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pandora Cloud + Pandora Server + Shared Chat + BackendAPI Proxy = PandoraNext. New GPTs(Gizmo) UI, All in one!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PandoraNext&lt;/h1&gt; &#xA;&lt;h2&gt;简单介绍&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pandora Cloud + Pandora Server + Shared Chat + BackendAPI Proxy = &lt;code&gt;PandoraNext&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;支持GPTs，最新UI。&lt;/li&gt; &#xA; &lt;li&gt;支持多种登录方式：（相当于Pandora Cloud） &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;账号/密码&lt;/li&gt; &#xA;   &lt;li&gt;Access Token&lt;/li&gt; &#xA;   &lt;li&gt;Session Token&lt;/li&gt; &#xA;   &lt;li&gt;Refresh Token&lt;/li&gt; &#xA;   &lt;li&gt;Share Token&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;可内置tokens（可使用上述所有Token），支持设置密码。（相当于Pandora Server）&lt;/li&gt; &#xA; &lt;li&gt;可配置共享的tokens，会有一个功能等同&lt;a href=&#34;https://chat-shared3.zhile.io&#34;&gt;chat-shared3.zhile.io&lt;/a&gt;的共享站（目前4331个普号、116个Plus）。&lt;/li&gt; &#xA; &lt;li&gt;为全代理模式，你的用户只需要跟你的部署网络能通即可。&lt;/li&gt; &#xA; &lt;li&gt;可启动为BackendAPI Proxy模式，直接使用&lt;code&gt;Access Token&lt;/code&gt;调用&lt;code&gt;/backend-api/&lt;/code&gt;的接口。&lt;/li&gt; &#xA; &lt;li&gt;还有疑问，那就进Telegram群让大家围观围观：&lt;a href=&#34;https://t.me/ja_netfilter_group&#34;&gt;@ja_netfilter_group&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;手动部署&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在&lt;a href=&#34;https://github.com/pandora-next/deploy/releases&#34;&gt;Releases&lt;/a&gt;中下载对应操作系统和架构的包。&lt;/li&gt; &#xA; &lt;li&gt;解压后修改同目录中的&lt;code&gt;config.json&lt;/code&gt;至你需要的参数。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pandora-next/deploy/master/#%E5%85%B3%E4%BA%8E-licensejwt-%E6%96%87%E4%BB%B6&#34;&gt;获取license.jwt文件&lt;/a&gt;放在同目录中，这是必须的前置步骤！&lt;/li&gt; &#xA; &lt;li&gt;各种Linux/Unix系统使用&lt;code&gt;./PandoraNext&lt;/code&gt;启动即可。&lt;/li&gt; &#xA; &lt;li&gt;Windows系统双击&lt;code&gt;PandoraNext.exe&lt;/code&gt;即可，当然最好在cmd中启动。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker Compose 部署&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;仓库内已包含相关文件和目录，拉到本地，&lt;a href=&#34;https://raw.githubusercontent.com/pandora-next/deploy/master/#%E5%85%B3%E4%BA%8E-licensejwt-%E6%96%87%E4%BB%B6&#34;&gt;获取license.jwt&lt;/a&gt;替换&lt;code&gt;data&lt;/code&gt;目录中的那个。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data&lt;/code&gt;目录中包含&lt;code&gt;config.json&lt;/code&gt;、&lt;code&gt;tokens.json&lt;/code&gt;示例文件、&lt;code&gt;license.jwt&lt;/code&gt;可自行修改。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt; &lt;strong&gt;原神启动！&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker 部署&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker pull pengzhile/pandora-next&#xA;$ docker run -d --restart always --name PandoraNext --net=bridge \&#xA;    -p 8181:8181 \&#xA;    -v ./data:/data \&#xA;    -v ./sessions:/root/.cache/PandoraNext \&#xA;    pengzhile/pandora-next&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;容器内默认监听&lt;code&gt;8181&lt;/code&gt;端口，映射宿主机的&lt;code&gt;8181&lt;/code&gt;端口，可自行修改。&lt;/li&gt; &#xA; &lt;li&gt;你可以映射目录到容器内的&lt;code&gt;/data&lt;/code&gt;目录，&lt;code&gt;config.json&lt;/code&gt;、&lt;code&gt;tokens.json&lt;/code&gt;和&lt;a href=&#34;https://raw.githubusercontent.com/pandora-next/deploy/master/#%E5%85%B3%E4%BA%8E-licensejwt-%E6%96%87%E4%BB%B6&#34;&gt;license.jwt文件&lt;/a&gt;放在其中。&lt;/li&gt; &#xA; &lt;li&gt;你可以映射目录到容器内的&lt;code&gt;/root/.cache/PandoraNext&lt;/code&gt;目录，保留登录的&lt;code&gt;session&lt;/code&gt;，避免重启容器登录状态丢失。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Nginx 配置&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;server {&#xA;&#x9;listen 443 ssl http2;&#xA;&#x9;server_name chat.zhile.io;&#xA;&#x9;&#xA;&#x9;charset utf-8;&#xA;&#x9;&#xA;&#x9;ssl_certificate      certs/chat.zhile.io.crt;&#xA;&#x9;ssl_certificate_key  certs/chat.zhile.io.key;&#xA;&#xA;&#x9;...省略若干其他配置...&#xA;&#x9;&#xA;&#x9;location / {&#xA;&#x9;&#x9;proxy_http_version &#x9;1.1;&#xA;&#x9;&#x9;proxy_pass &#x9;&#x9;http://127.0.0.1:8181/;&#xA;&#x9;&#x9;proxy_set_header&#x9;Connection&#x9;&#x9;&#34;&#34;;&#xA;&#x9;&#x9;proxy_set_header   &#x9;Host&#x9;&#x9;&#x9;$http_host;&#xA;&#x9;&#x9;proxy_set_header &#x9;X-Forwarded-Proto &#x9;$scheme;&#xA;&#x9;&#x9;proxy_set_header   &#x9;X-Real-IP          &#x9;$remote_addr;&#xA;&#x9;&#x9;proxy_set_header   &#x9;X-Forwarded-For    &#x9;$proxy_add_x_forwarded_for;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;proxy_buffering off;&#xA;&#x9;&#x9;proxy_cache off;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;send_timeout 600;&#xA;&#x9;&#x9;proxy_connect_timeout 600;&#xA;&#x9;&#x9;proxy_send_timeout 600;&#xA;&#x9;&#x9;proxy_read_timeout 600;&#xA;&#x9;}&#xA;&#xA;&#x9;...省略若干其他配置...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nginx建议开启&lt;code&gt;http2&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;以上仅为推荐配置，可根据具体情况进行改动。&lt;/li&gt; &#xA; &lt;li&gt;建议开启&lt;code&gt;ssl&lt;/code&gt;也即&lt;code&gt;https&lt;/code&gt;，否则浏览器限制将无法复制网页内容。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;config 配置&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;以下是一个示例&lt;code&gt;config.json&lt;/code&gt;文件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;bind&#34;: &#34;127.0.0.1:8181&#34;,&#xA;  &#34;timeout&#34;: 600,&#xA;  &#34;proxy_url&#34;: &#34;&#34;,&#xA;  &#34;public_share&#34;: false,&#xA;  &#34;site_password&#34;: &#34;&#34;,&#xA;  &#34;setup_password&#34;: &#34;&#34;,&#xA;  &#34;server_tokens&#34;: true,&#xA;  &#34;server_mode&#34;: &#34;web&#34;,&#xA;  &#34;whitelist&#34;: null&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bind&lt;/code&gt;指定绑定IP和端口，在docker内，IP只能用&lt;code&gt;0.0.0.0&lt;/code&gt;，否则映射不出来。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;如果你不打算套nginx等反代，&lt;code&gt;bind&lt;/code&gt;参数的IP请使用&lt;code&gt;0.0.0.0&lt;/code&gt;！！！&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;是请求的超时时间，单位为&lt;code&gt;秒&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_url&lt;/code&gt;指定部署服务流量走代理，如：&lt;code&gt;http://127.0.0.1:8888&lt;/code&gt;、&lt;code&gt;socks5://127.0.0.1:7980&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;public_share&lt;/code&gt;对于GPT中创建的对话分享，是否需要登录才能查看。为&lt;code&gt;true&lt;/code&gt;则无需登录即可查看。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;site_password&lt;/code&gt;设置整站密码，需要先输入这个密码，正确才能进行后续步骤。充分保障私密性。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setup_password&lt;/code&gt;定义一个设置密码，用于调用&lt;code&gt;/setup/&lt;/code&gt;开头的设置接口，为空则不可调用。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server_tokens&lt;/code&gt;设置是否在响应头中显示版本号，&lt;code&gt;true&lt;/code&gt;显示，&lt;code&gt;false&lt;/code&gt;则不显示。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server_mode&lt;/code&gt;默认为&lt;code&gt;web&lt;/code&gt;模式，新增&lt;code&gt;proxy&lt;/code&gt;模式，可以将你部署的服务当作一个&lt;code&gt;ChatGPT&lt;/code&gt;接口反代使用。会话额度消耗为&lt;code&gt;4&lt;/code&gt;倍，无并发限制。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;whitelist&lt;/code&gt;邮箱数组指定哪些用户可以登录使用，用户名/密码登录受限制，各种Token登录受限。内置tokens不受限。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;whitelist&lt;/code&gt;为&lt;code&gt;null&lt;/code&gt;则不限制，为空数组&lt;code&gt;[]&lt;/code&gt;则限制所有账号，内置tokens不受限。&lt;/li&gt; &#xA; &lt;li&gt;一个&lt;code&gt;whitelist&lt;/code&gt;的例子：&lt;code&gt;&#34;whitelist&#34;: [&#34;mail2@test.com&#34;, &#34;mail2@test.com&#34;]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;tokens 配置&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;以下是一个示例&lt;code&gt;tokens.json&lt;/code&gt;文件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;test-1&#34;: {&#xA;    &#34;token&#34;: &#34;access token / session token / refresh token&#34;,&#xA;    &#34;shared&#34;: true,&#xA;    &#34;show_user_info&#34;: false&#xA;  },&#xA;  &#34;test-2&#34;: {&#xA;    &#34;token&#34;: &#34;access token / session token / refresh token&#34;,&#xA;    &#34;shared&#34;: true,&#xA;    &#34;show_user_info&#34;: true,&#xA;    &#34;plus&#34;: true&#xA;  },&#xA;  &#34;test2&#34;: {&#xA;    &#34;token&#34;: &#34;access token / session token / refresh token / share token&#34;,&#xA;    &#34;password&#34;: &#34;12345&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;token&lt;/code&gt;支持示例文件中所写的所有类型。&lt;code&gt;session token&lt;/code&gt;和&lt;code&gt;refresh token&lt;/code&gt;可自动刷新。&lt;/li&gt; &#xA; &lt;li&gt;每个key被称为&lt;code&gt;token key&lt;/code&gt;，可在登录框作用户名输入。如上：&lt;code&gt;test-1&lt;/code&gt;、&lt;code&gt;test-2&lt;/code&gt;等，随意更改。&lt;/li&gt; &#xA; &lt;li&gt;如果设置了&lt;code&gt;password&lt;/code&gt;则输入完&lt;code&gt;token key&lt;/code&gt;进入输入密码页面输入匹配。&lt;/li&gt; &#xA; &lt;li&gt;如果设置&lt;code&gt;shared&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;，则这个账号会出现在&lt;code&gt;/shared.html&lt;/code&gt;中，登录页面会出现它的链接。&lt;/li&gt; &#xA; &lt;li&gt;如果设置&lt;code&gt;shared&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;，则这个账号不能再在用户名登录框进行登录。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/shared.html&lt;/code&gt;中的账号和共享站功能相同，可以自行设置隔离密码进行会话隔离。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plus&lt;/code&gt;用来标识&lt;code&gt;/shared.html&lt;/code&gt;上账号是否有金光，没有其他作用。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;show_user_info&lt;/code&gt;表示&lt;code&gt;/shared.html&lt;/code&gt;共享时是否显示账号邮箱信息，GPTs建议开启。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;设置接口&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;必须先在&lt;code&gt;config.json&lt;/code&gt;中设置&lt;code&gt;setup_password&lt;/code&gt;为非空！&lt;/li&gt; &#xA; &lt;li&gt;热更新&lt;code&gt;config&lt;/code&gt;、&lt;code&gt;tokens&lt;/code&gt;和&lt;code&gt;license&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;热更新不会重启服务，访问不会被中断。&lt;/li&gt; &#xA; &lt;li&gt;以下是调用示例，&lt;code&gt;&amp;lt;Base URL&amp;gt;&lt;/code&gt;是你部署服务的地址。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &#34;Authorization: Bearer &amp;lt;setup_password&amp;gt;&#34; -X POST &#34;&amp;lt;Base URL&amp;gt;/setup/reload&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;关于 license.jwt 文件&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在这里获取：&lt;a href=&#34;https://dash.pandoranext.com&#34;&gt;https://dash.pandoranext.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;通过执行&lt;code&gt;curl&lt;/code&gt;命令会在&lt;strong&gt;当前目录&lt;/strong&gt;拉下一个名为&lt;code&gt;license.jwt&lt;/code&gt;的文件。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;没有固定IP的情况&lt;/strong&gt;，IP变动后在上述服务重新拉取授权，再调用&lt;code&gt;/setup/reload&lt;/code&gt;接口即可。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;其他说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果你发现网页上不能复制，开启&lt;code&gt;https&lt;/code&gt;或者使用&lt;code&gt;127.0.0.1&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;如果你正在自定义页面元素，请保留： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Powered by PandoraNext&lt;/code&gt;文字和链接。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;About PandoraNext&lt;/code&gt;文字和链接。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;如果要抹，请在&lt;strong&gt;一百多个js&lt;/strong&gt;文件中去除若干&lt;code&gt;dom检测&lt;/code&gt;代码。&lt;/li&gt; &#xA; &lt;li&gt;抹了后果如何我不说。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PHP&lt;/code&gt;是世界上最好的编程语言。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;贡献者们&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢所有让这个项目变得更好的贡献者们！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pandora-next/deploy/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=pandora-next/deploy&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star历史&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=pandora-next/deploy&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>api-platform/core</title>
    <updated>2023-11-26T01:56:04Z</updated>
    <id>tag:github.com,2023-11-26:/api-platform/core</id>
    <link href="https://github.com/api-platform/core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The server component of API Platform: hypermedia and GraphQL APIs in minutes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;API Platform Core&lt;/h1&gt; &#xA;&lt;p&gt;API Platform Core is an easy-to-use and powerful system to create &lt;a href=&#34;https://en.wikipedia.org/wiki/HATEOAS&#34;&gt;hypermedia-driven REST&lt;/a&gt; and &lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; APIs. It is a component of the &lt;a href=&#34;https://api-platform.com&#34;&gt;API Platform framework&lt;/a&gt; and it can be integrated with &lt;a href=&#34;https://symfony.com&#34;&gt;the Symfony framework&lt;/a&gt; using the bundle distributed with the library.&lt;/p&gt; &#xA;&lt;p&gt;It natively supports popular open formats including &lt;a href=&#34;https://json-ld.org&#34;&gt;JSON for Linked Data (JSON-LD)&lt;/a&gt;, &lt;a href=&#34;https://www.hydra-cg.com&#34;&gt;Hydra Core Vocabulary&lt;/a&gt;, &lt;a href=&#34;https://www.openapis.org&#34;&gt;OpenAPI v2 (formerly Swagger) and v3&lt;/a&gt;, &lt;a href=&#34;https://jsonapi.org/&#34;&gt;JSON:API&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/draft-kelly-json-hal-08&#34;&gt;HAL&lt;/a&gt; and &lt;a href=&#34;https://tools.ietf.org/html/rfc7807&#34;&gt;Problem Details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Build a working and fully-featured web API in minutes. Leverage the awesome features of the tool to develop complex and high-performance API-first projects. Extend or override everything you want.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/api-platform/core/actions?query=workflow%3ACI+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/api-platform/core/workflows/CI/badge.svg?branch=main&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation of API Platform Core Library can be browsed &lt;a href=&#34;https://api-platform.com/docs/core&#34;&gt;on the official website&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>