<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T02:01:32Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zidansec/CloudPeler</title>
    <updated>2022-06-26T02:01:32Z</updated>
    <id>tag:github.com,2022-06-26:/zidansec/CloudPeler</id>
    <link href="https://github.com/zidansec/CloudPeler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CrimeFlare is a useful tool for bypassing websites protected by CloudFlare WAF, with this tool you can easily see the real IP of websites that have been protected by CloudFlare. The resulting information is certainly very useful for conducting further penetration testing, and analyzing websites with the same server.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://visitcount.itsvg.in&#34;&gt; &lt;img src=&#34;https://visitcount.itsvg.in/api?id=CrimeFlare&amp;amp;label=Visitors&amp;amp;color=6&amp;amp;icon=5&amp;amp;pretty=true&#34;&gt; &lt;/a&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;&lt;img width=&#34;80%&#34; src=&#34;https://readme-typing-svg.herokuapp.com?duration=03&amp;amp;font=Lalezar&amp;amp;size=30&amp;amp;color=green&amp;amp;center=true&amp;amp;vCenter=true&amp;amp;width=440&amp;amp;lines=CrimeFlare+Bypass+Hostname&#34;&gt;&lt;/h1&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;CrimeFlare is back again! This tools can help you to see the real IP behind CloudFlare protected websites&lt;/p&gt; &#xA; &lt;img src=&#34;https://i.imgur.com/1JKN2Oh.png&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://www.linux.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OS-Linux-yellow?style=flat&amp;amp;logo=linux&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://ubuntu.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Distro-Ubuntu-orange?style=flat&amp;amp;logo=ubuntu&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Web%20Application%20Firewall-CloudFlare-orange?style=flat&amp;amp;logo=cloudflare&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/zidansec&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CrimeFlare-v2.2-red?style=flat&amp;amp;logo=red%20hat&#34;&gt;&lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://github.com/zidansec&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/followers/zidansec?label=Github&amp;amp;style=social&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;mailto:zidansec@gmail.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Email-zidansec@gmail.com-e06c75?style=social&amp;amp;logo=gmail&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://youtube.com/channel/UCo6KfMw8dOZ4QGNL1RrjsBQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/YT-Exploitasi-dcdfe4?style=social&amp;amp;logo=youtube&#34;&gt;&lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://www.paypal.me/zidansec&#34;&gt;&lt;img title=&#34;Paypal Donation&#34; height=&#34;25&#34; src=&#34;https://ionicabizau.github.io/badges/paypal.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This tool serves to find the original IP behind websites that have been protected by CloudFlare, the information generated can be useful for further penetration. The information generated by this tool is as follows.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CloudFlare IP&lt;/li&gt; &#xA; &lt;li&gt;CloudFlare NS1&lt;/li&gt; &#xA; &lt;li&gt;CloudFlare NS2&lt;/li&gt; &#xA; &lt;li&gt;Real IP&lt;/li&gt; &#xA; &lt;li&gt;Hostname&lt;/li&gt; &#xA; &lt;li&gt;Organization&lt;/li&gt; &#xA; &lt;li&gt;Address (Country, City, Region, Postal Code)&lt;/li&gt; &#xA; &lt;li&gt;Location&lt;/li&gt; &#xA; &lt;li&gt;Time Zone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code Samples&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This tool is made with PHP code with very simple programming using several APIs to get maximum results, but this tool does not guarantee 100% to be able to bypass websites that have been protected by CloudFlare. Some websites sometimes cannot be detected by their original IP.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;API Used In This Tool&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crimeflare.herokuapp.com&#34;&gt;https://crimeflare.herokuapp.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ipinfo.io/2.2.2.2/json&#34;&gt;http://ipinfo.io/2.2.2.2/json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional reference tool to see the real IP behind WAF Cloudflare&lt;/p&gt; &#xA;&lt;h2&gt;OsintSec - Information Gathering Intelligence&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Simple tools for further penetration, this tool is able to visualize network from Domain, IP, Email and more.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://osinthreat.herokuapp.com/&#34;&gt;https://osinthreat.herokuapp.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://osinthreat.herokuapp.com/domain.php?domain=fbi.gov&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://i.imgur.com/QDDBUCV.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Before running CrimeFlare make sure you have &lt;code&gt;php-curl&lt;/code&gt; installed, install it with the command &lt;code&gt;sudo apt install php-curl&lt;/code&gt; and follow the next installation steps.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/zidansec/CloudPeler.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd CloudPeler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./crimeflare.php exemple.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple install CrimeFlare on Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo wget https://github.com/zidansec/CloudPeler/raw/master/crimeflare.php -O /bin/crimeflare &amp;amp;&amp;amp; sudo chmod +x /bin/crimeflare&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run command: &lt;code&gt;crimeflare&lt;/code&gt; or &lt;code&gt;crimeflare exemple.com&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Easy to run&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run crimeflare easily on linux ubuntu, follow the below command. This command will add the &lt;code&gt;crimeflare.php&lt;/code&gt; file into the &lt;code&gt;/bin/&lt;/code&gt; directory on your Ubuntu OS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd CloudPeler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cp crimeflare.php /bin/crimeflare&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run it now just type command &lt;code&gt;crimeflare&lt;/code&gt; in your linux terminal&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img width=&#34;1000px&#34; src=&#34;https://i.imgur.com/WEC9PyZ.gif&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Reference:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.xploit.my.id/2021/07/crimeflare-bypass-tools-cloudflare.html&#34;&gt;https://www.xploit.my.id/2021/07/crimeflare-bypass-tools-cloudflare.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zidan.xploit.my.id/posts/cloudpeler-crimeflare-next-generation/&#34;&gt;https://zidan.xploit.my.id/posts/cloudpeler-crimeflare-next-generation/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>woocommerce/woocommerce</title>
    <updated>2022-06-26T02:01:32Z</updated>
    <id>tag:github.com,2022-06-26:/woocommerce/woocommerce</id>
    <link href="https://github.com/woocommerce/woocommerce" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A customizable, open-source eCommerce platform built on WordPress. Build any commerce solution you can imagine.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://woocommerce.com/&#34;&gt;&lt;img src=&#34;https://woocommerce.com/wp-content/themes/woo/images/logo-woocommerce@2x.png&#34; alt=&#34;WooCommerce&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the WooCommerce Monorepo on GitHub. Here you can find all of the plugins, packages, and tools used in the development of the core WooCommerce plugin as well as WooCommerce extensions. You can browse the source, look at open issues, contribute code, and keep tracking of ongoing development.&lt;/p&gt; &#xA;&lt;p&gt;We recommend all developers to follow the &lt;a href=&#34;https://woocommerce.wordpress.com/&#34;&gt;WooCommerce development blog&lt;/a&gt; to stay up to date about everything happening in the project. You can also &lt;a href=&#34;https://twitter.com/DevelopWC&#34;&gt;follow @DevelopWC&lt;/a&gt; on Twitter for the latest development updates.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get up and running within the WooCommerce Monorepo, you will need to make sure that you have installed all of the prerequisites.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvm-sh/nvm#installing-and-updating&#34;&gt;NVM&lt;/a&gt;: While you can always install Node through other means, we recommend using NVM to ensure you&#39;re aligned with the version used by our development teams. Our repository contains &lt;a href=&#34;https://raw.githubusercontent.com/woocommerce/woocommerce/trunk/.nvmrc&#34;&gt;an &lt;code&gt;.nvmrc&lt;/code&gt; file&lt;/a&gt; which helps ensure you are using the correct version of Node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pnpm.io/installation&#34;&gt;PNPM&lt;/a&gt;: Our repository utilizes PNPM to manage project dependencies and run various scripts involved in building and testing projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/en/install.php&#34;&gt;PHP 7.2+&lt;/a&gt;: WooCommerce Core currently features a minimum PHP version of 7.2. While you don&#39;t need to use it to run a local development environment, you will need it to utilize Composer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getcomposer.org/doc/00-intro.md&#34;&gt;Composer&lt;/a&gt;: We use Composer to manage all of the dependencies for PHP packages and plugins.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you&#39;ve installed all of the prerequisites, you can run the following commands to get everything working.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Ensure that you&#39;re using the correct version of Node&#xA;nvm use&#xA;# Install the PHP and Composer dependencies for all of the plugins, packages, and tools&#xA;pnpm install&#xA;# Build all of the plugins, packages, and tools in the monorepo&#xA;pnpm -- turbo run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point you are now ready to begin developing and testing. All of the build outputs are cached running &lt;code&gt;pnpm -- turbo run build&lt;/code&gt; again will only build the plugins, packages, and tools that have changed since the last time you ran the command.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/woocommerce/woocommerce/trunk/DEVELOPMENT.md&#34;&gt;our development guide&lt;/a&gt; if you would like a more comprehensive look at working in our repository.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woocommerce/woocommerce/trunk/plugins&#34;&gt;&lt;strong&gt;Plugins&lt;/strong&gt;&lt;/a&gt;: Our repository contains plugins that relate to or otherwise aid in the development of WooCommerce. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woocommerce/woocommerce/trunk/plugins/woocommerce&#34;&gt;&lt;strong&gt;WooCommerce Core&lt;/strong&gt;&lt;/a&gt;: The core WooCommerce plugin is available in the plugins directory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woocommerce/woocommerce/trunk/packages&#34;&gt;&lt;strong&gt;Packages&lt;/strong&gt;&lt;/a&gt;: Contained within the packages directory are all of the &lt;a href=&#34;https://raw.githubusercontent.com/woocommerce/woocommerce/trunk/packages/php&#34;&gt;PHP&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/woocommerce/woocommerce/trunk/packages/js&#34;&gt;JavaScript&lt;/a&gt; provided for the community. Some of these are internal dependencies and are marked with an &lt;code&gt;internal-&lt;/code&gt; prefix.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woocommerce/woocommerce/trunk/tools&#34;&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/a&gt;: We also have a growing number of tools within our repository. Many of these are intended to be utilities and scripts for use in the monorepo, but, this directory may also contain external tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Security Issues&lt;/h2&gt; &#xA;&lt;p&gt;To disclose a security issue to our team, &lt;a href=&#34;https://hackerone.com/automattic/&#34;&gt;please submit a report via HackerOne here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;This repository is not suitable for support. Please don&#39;t use our issue tracker for support requests, but for core WooCommerce issues only. Support can take place through the appropriate channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have a problem, you may want to start with the &lt;a href=&#34;https://docs.woocommerce.com/document/woocommerce-self-service-guide/&#34;&gt;self help guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://woocommerce.com/contact-us/&#34;&gt;WooCommerce.com premium support portal&lt;/a&gt; for customers who have purchased themes or extensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wordpress.org/support/plugin/woocommerce&#34;&gt;Our community forum on wp.org&lt;/a&gt; which is available for all WooCommerce users.&lt;/li&gt; &#xA; &lt;li&gt;The WooCommerce Help and Share Facebook group.&lt;/li&gt; &#xA; &lt;li&gt;For customizations, you may want to check our list of &lt;a href=&#34;https://woocommerce.com/experts/&#34;&gt;WooExperts&lt;/a&gt; or &lt;a href=&#34;https://codeable.io/&#34;&gt;Codeable&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Support requests in issues on this repository will be closed on sight.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>squizlabs/PHP_CodeSniffer</title>
    <updated>2022-06-26T02:01:32Z</updated>
    <id>tag:github.com,2022-06-26:/squizlabs/PHP_CodeSniffer</id>
    <link href="https://github.com/squizlabs/PHP_CodeSniffer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP_CodeSniffer tokenizes PHP files and detects violations of a defined set of coding standards.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;PHP_CodeSniffer is a set of two PHP scripts; the main &lt;code&gt;phpcs&lt;/code&gt; script that tokenizes PHP, JavaScript and CSS files to detect violations of a defined coding standard, and a second &lt;code&gt;phpcbf&lt;/code&gt; script to automatically correct coding standard violations. PHP_CodeSniffer is an essential development tool that ensures your code remains clean and consistent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/actions&#34;&gt;&lt;img src=&#34;https://github.com/squizlabs/PHP_CodeSniffer/workflows/Validate/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/actions&#34;&gt;&lt;img src=&#34;https://github.com/squizlabs/PHP_CodeSniffer/workflows/Test/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://squizlabs.github.io/PHP_CodeSniffer/analysis/squizlabs/PHP_CodeSniffer&#34;&gt;&lt;img src=&#34;http://squizlabs.github.io/PHP_CodeSniffer/analysis/squizlabs/PHP_CodeSniffer/grade.svg?sanitize=true&#34; alt=&#34;Code consistency&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/squizlabs/PHP_CodeSniffer?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/squizlabs/PHP_CodeSniffer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;PHP_CodeSniffer requires PHP version 5.4.0 or greater, although individual sniffs may have additional requirements such as external applications and scripts. See the &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Configuration-Options&#34;&gt;Configuration Options manual page&lt;/a&gt; for a list of these requirements.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using PHP_CodeSniffer as part of a team, or you&#39;re running it on a &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;CI&lt;/a&gt; server, you may want to configure your project&#39;s settings &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Advanced-Usage#using-a-default-configuration-file&#34;&gt;using a configuration file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started with PHP_CodeSniffer is to download the Phar files for each of the commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Download using curl&#xA;curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar&#xA;curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar&#xA;&#xA;# Or download using wget&#xA;wget https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar&#xA;wget https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar&#xA;&#xA;# Then test the downloaded PHARs&#xA;php phpcs.phar -h&#xA;php phpcbf.phar -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Composer&lt;/h3&gt; &#xA;&lt;p&gt;If you use Composer, you can install PHP_CodeSniffer system-wide with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer global require &#34;squizlabs/php_codesniffer=*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have the composer bin dir in your PATH. The default value is &lt;code&gt;~/.composer/vendor/bin/&lt;/code&gt;, but you can check the value that you need to use by running &lt;code&gt;composer global config bin-dir --absolute&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or alternatively, include a dependency for &lt;code&gt;squizlabs/php_codesniffer&lt;/code&gt; in your &lt;code&gt;composer.json&lt;/code&gt; file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;require-dev&#34;: {&#xA;        &#34;squizlabs/php_codesniffer&#34;: &#34;3.*&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will then be able to run PHP_CodeSniffer from the vendor bin directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpcs -h&#xA;./vendor/bin/phpcbf -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Phive&lt;/h3&gt; &#xA;&lt;p&gt;If you use Phive, you can install PHP_CodeSniffer as a project tool using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phive install phpcs&#xA;phive install phpcbf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will then be able to run PHP_CodeSniffer from the tools directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./tools/phpcs -h&#xA;./tools/phpcbf -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PEAR&lt;/h3&gt; &#xA;&lt;p&gt;If you use PEAR, you can install PHP_CodeSniffer using the PEAR installer. This will make the &lt;code&gt;phpcs&lt;/code&gt; and &lt;code&gt;phpcbf&lt;/code&gt; commands immediately available for use. To install PHP_CodeSniffer using the PEAR installer, first ensure you have &lt;a href=&#34;http://pear.php.net/manual/en/installation.getting.php&#34;&gt;installed PEAR&lt;/a&gt; and then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pear install PHP_CodeSniffer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Git Clone&lt;/h3&gt; &#xA;&lt;p&gt;You can also download the PHP_CodeSniffer source and run the &lt;code&gt;phpcs&lt;/code&gt; and &lt;code&gt;phpcbf&lt;/code&gt; commands directly from the Git clone:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/squizlabs/PHP_CodeSniffer.git&#xA;cd PHP_CodeSniffer&#xA;php bin/phpcs -h&#xA;php bin/phpcbf -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The default coding standard used by PHP_CodeSniffer is the PEAR coding standard. To check a file against the PEAR coding standard, simply specify the file&#39;s location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs /path/to/code/myfile.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you wish to check an entire directory you can specify the directory location instead of a file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs /path/to/code-directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to check your code against the PSR-12 coding standard, use the &lt;code&gt;--standard&lt;/code&gt; command line argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs --standard=PSR12 /path/to/code-directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If PHP_CodeSniffer finds any coding standard errors, a report will be shown after running the command.&lt;/p&gt; &#xA;&lt;p&gt;Full usage information and example reports are available on the &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage&#34;&gt;usage page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation for PHP_CodeSniffer is available on the &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki&#34;&gt;Github wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and feature requests can be submitted on the &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/issues&#34;&gt;Github Issue Tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for information.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;PHP_CodeSniffer uses a &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; version number format.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;MAJOR&lt;/code&gt; version is incremented when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;backwards-incompatible changes are made to how the &lt;code&gt;phpcs&lt;/code&gt; or &lt;code&gt;phpcbf&lt;/code&gt; commands are used, or&lt;/li&gt; &#xA; &lt;li&gt;backwards-incompatible changes are made to the &lt;code&gt;ruleset.xml&lt;/code&gt; format, or&lt;/li&gt; &#xA; &lt;li&gt;backwards-incompatible changes are made to the API used by sniff developers, or&lt;/li&gt; &#xA; &lt;li&gt;custom PHP_CodeSniffer token types are removed, or&lt;/li&gt; &#xA; &lt;li&gt;existing sniffs are removed from PHP_CodeSniffer entirely&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;MINOR&lt;/code&gt; version is incremented when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;new backwards-compatible features are added to the &lt;code&gt;phpcs&lt;/code&gt; and &lt;code&gt;phpcbf&lt;/code&gt; commands, or&lt;/li&gt; &#xA; &lt;li&gt;backwards-compatible changes are made to the &lt;code&gt;ruleset.xml&lt;/code&gt; format, or&lt;/li&gt; &#xA; &lt;li&gt;backwards-compatible changes are made to the API used by sniff developers, or&lt;/li&gt; &#xA; &lt;li&gt;new sniffs are added to an included standard, or&lt;/li&gt; &#xA; &lt;li&gt;existing sniffs are removed from an included standard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Backwards-compatible changes to the API used by sniff developers will allow an existing sniff to continue running without producing fatal errors but may not result in the sniff reporting the same errors as it did previously without changes being required.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;PATCH&lt;/code&gt; version is incremented when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;backwards-compatible bug fixes are made&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: As PHP_CodeSniffer exists to report and fix issues, most bugs are the result of coding standard errors being incorrectly reported or coding standard errors not being reported when they should be. This means that the messages produced by PHP_CodeSniffer, and the fixes it makes, are likely to be different between PATCH versions.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>