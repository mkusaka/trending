<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-03T01:45:32Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Automattic/wordpress-mcp</title>
    <updated>2025-08-03T01:45:32Z</updated>
    <id>tag:github.com,2025-08-03:/Automattic/wordpress-mcp</id>
    <link href="https://github.com/Automattic/wordpress-mcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make your WordPress site into a simple MCP server, exposing functionality to LLMs and AI agents.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WordPress MCP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Automattic/wordpress-mcp/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Automattic/wordpress-mcp&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A comprehensive WordPress plugin that implements the &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; to expose WordPress functionality through standardized interfaces. This plugin enables AI models and applications to interact with WordPress sites securely using multiple transport protocols and enterprise-grade authentication.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dual Transport Protocols&lt;/strong&gt;: STDIO and HTTP-based (Streamable) transports&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JWT Authentication&lt;/strong&gt;: Secure token-based authentication with management UI&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Admin Interface&lt;/strong&gt;: React-based token management and settings dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI-Friendly APIs&lt;/strong&gt;: JSON-RPC 2.0 compliant endpoints for AI integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible Architecture&lt;/strong&gt;: Custom tools, resources, and prompts support&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WordPress Feature API&lt;/strong&gt;: Adapter for standardized WordPress functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Experimental REST API CRUD Tools&lt;/strong&gt;: Generic tools for any WordPress REST API endpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comprehensive Testing&lt;/strong&gt;: 200+ test cases covering all protocols and authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: Optimized routing and caching mechanisms&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enterprise Security&lt;/strong&gt;: Multi-layer authentication and audit logging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The plugin implements a dual transport architecture:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;WordPress MCP Plugin&#xA;├── Transport Layer&#xA;│   ├── McpStdioTransport (/wp/v2/wpmcp)&#xA;│   └── McpStreamableTransport (/wp/v2/wpmcp/streamable)&#xA;├── Authentication&#xA;│   └── JWT Authentication System&#xA;├── Method Handlers&#xA;│   ├── Tools, Resources, Prompts&#xA;│   └── System &amp;amp; Initialization&#xA;└── Admin Interface&#xA;    └── React-based Token Management&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Transport Protocols&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Protocol&lt;/th&gt; &#xA;   &lt;th&gt;Endpoint&lt;/th&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Authentication&lt;/th&gt; &#xA;   &lt;th&gt;Use Case&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;STDIO&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/wp/v2/wpmcp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WordPress-style&lt;/td&gt; &#xA;   &lt;td&gt;JWT + App Passwords&lt;/td&gt; &#xA;   &lt;td&gt;Legacy compatibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Streamable&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/wp/v2/wpmcp/streamable&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON-RPC 2.0&lt;/td&gt; &#xA;   &lt;td&gt;JWT only&lt;/td&gt; &#xA;   &lt;td&gt;Modern AI clients&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Quick Install&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;code&gt;wordpress-mcp.zip&lt;/code&gt; from &lt;a href=&#34;https://github.com/Automattic/wordpress-mcp/releases/&#34;&gt;releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Upload to &lt;code&gt;/wp-content/plugins/wordpress-mcp&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;Activate through WordPress admin &#39;Plugins&#39; menu&lt;/li&gt; &#xA; &lt;li&gt;Navigate to &lt;code&gt;Settings &amp;gt; WordPress MCP&lt;/code&gt; to configure&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Composer Install (Development)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd wp-content/plugins/&#xA;git clone https://github.com/Automattic/wordpress-mcp.git&#xA;cd wordpress-mcp&#xA;composer install --no-dev&#xA;npm install &amp;amp;&amp;amp; npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authentication Setup&lt;/h2&gt; &#xA;&lt;h3&gt;JWT Token Generation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Settings &amp;gt; WordPress MCP &amp;gt; Authentication Tokens&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select token duration (1-24 hours)&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Generate New Token&#34;&lt;/li&gt; &#xA; &lt;li&gt;Copy the token for use in your MCP client&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;MCP Client Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Claude Desktop Configuration using &lt;a href=&#34;https://github.com/Automattic/mcp-wordpress-remote&#34;&gt;mcp-wordpress-remote&lt;/a&gt; proxy&lt;/h4&gt; &#xA;&lt;p&gt;Add to your Claude Desktop &lt;code&gt;claude_desktop_config.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;mcpServers&#34;: {&#xA;&#x9;&#x9;&#34;wordpress-mcp&#34;: {&#xA;&#x9;&#x9;&#x9;&#34;command&#34;: &#34;npx&#34;,&#xA;&#x9;&#x9;&#x9;&#34;args&#34;: [ &#34;-y&#34;, &#34;@automattic/mcp-wordpress-remote@latest&#34; ],&#xA;&#x9;&#x9;&#x9;&#34;env&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#34;WP_API_URL&#34;: &#34;https://your-site.com/&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;JWT_TOKEN&#34;: &#34;your-jwt-token-here&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LOG_FILE&#34;: &#34;optional-path-to-log-file&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Application Passwords (Alternative)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;mcpServers&#34;: {&#xA;&#x9;&#x9;&#34;wordpress-mcp&#34;: {&#xA;&#x9;&#x9;&#x9;&#34;command&#34;: &#34;npx&#34;,&#xA;&#x9;&#x9;&#x9;&#34;args&#34;: [ &#34;-y&#34;, &#34;@automattic/mcp-wordpress-remote@latest&#34; ],&#xA;&#x9;&#x9;&#x9;&#34;env&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#34;WP_API_URL&#34;: &#34;https://your-site.com/&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;WP_API_USERNAME&#34;: &#34;your-username&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;WP_API_PASSWORD&#34;: &#34;your-application-password&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LOG_FILE&#34;: &#34;optional-path-to-log-file&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;VS Code MCP Extension (Direct Streamable Transport)&lt;/h4&gt; &#xA;&lt;p&gt;Add to your VS Code MCP settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;servers&#34;: {&#xA;&#x9;&#x9;&#34;wordpress-mcp&#34;: {&#xA;&#x9;&#x9;&#x9;&#34;type&#34;: &#34;http&#34;,&#xA;&#x9;&#x9;&#x9;&#34;url&#34;: &#34;https://your-site.com/wp-json/wp/v2/wpmcp/streamable&#34;,&#xA;&#x9;&#x9;&#x9;&#34;headers&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Authorization&#34;: &#34;Bearer your-jwt-token-here&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MCP Inspector (Development/Testing)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using JWT Token with proxy&#xA;npx @modelcontextprotocol/inspector \&#xA;  -e WP_API_URL=https://your-site.com/ \&#xA;  -e JWT_TOKEN=your-jwt-token-here \&#xA;  npx @automattic/mcp-wordpress-remote@latest&#xA;&#xA;# Using Application Password with proxy&#xA;npx @modelcontextprotocol/inspector \&#xA;  -e WP_API_URL=https://your-site.com/ \&#xA;  -e WP_API_USERNAME=your-username \&#xA;  -e WP_API_PASSWORD=your-application-password \&#xA;  npx @automattic/mcp-wordpress-remote@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Local Development Configuration&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;mcpServers&#34;: {&#xA;&#x9;&#x9;&#34;wordpress-local&#34;: {&#xA;&#x9;&#x9;&#x9;&#34;command&#34;: &#34;node&#34;,&#xA;&#x9;&#x9;&#x9;&#34;args&#34;: [ &#34;/path/to/mcp-wordpress-remote/dist/proxy.js&#34; ],&#xA;&#x9;&#x9;&#x9;&#34;env&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#34;WP_API_URL&#34;: &#34;http://localhost:8080/&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;JWT_TOKEN&#34;: &#34;your-local-jwt-token&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LOG_FILE&#34;: &#34;optional-path-to-log-file&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;With MCP Clients&lt;/h3&gt; &#xA;&lt;p&gt;This plugin works seamlessly with MCP-compatible clients in two ways:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Via Proxy:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Automattic/mcp-wordpress-remote&#34;&gt;mcp-wordpress-remote&lt;/a&gt; - Official MCP client with enhanced features&lt;/li&gt; &#xA; &lt;li&gt;Claude Desktop with proxy configuration for full WordPress and WooCommerce support&lt;/li&gt; &#xA; &lt;li&gt;Any MCP client using the STDIO transport protocol&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Direct Streamable Transport:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VS Code MCP Extension connecting directly to &lt;code&gt;/wp/v2/wpmcp/streamable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Custom HTTP-based MCP implementations using JSON-RPC 2.0&lt;/li&gt; &#xA; &lt;li&gt;Any client supporting HTTP transport with JWT authentication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The streamable transport provides a direct JSON-RPC 2.0 compliant endpoint, while the proxy offers additional features like WooCommerce integration, enhanced logging, and compatibility with legacy authentication methods.&lt;/p&gt; &#xA;&lt;h3&gt;Available MCP Methods&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Transport Support&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;initialize&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Initialize MCP session&lt;/td&gt; &#xA;   &lt;td&gt;Both&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tools/list&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List available tools&lt;/td&gt; &#xA;   &lt;td&gt;Both&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tools/call&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute a tool&lt;/td&gt; &#xA;   &lt;td&gt;Both&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resources/list&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List available resources&lt;/td&gt; &#xA;   &lt;td&gt;Both&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resources/read&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read resource content&lt;/td&gt; &#xA;   &lt;td&gt;Both&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prompts/list&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List available prompts&lt;/td&gt; &#xA;   &lt;td&gt;Both&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prompts/get&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get prompt template&lt;/td&gt; &#xA;   &lt;td&gt;Both&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Experimental REST API CRUD Tools&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;EXPERIMENTAL FEATURE&lt;/strong&gt;: This functionality is experimental and may change or be removed in future versions.&lt;/p&gt; &#xA;&lt;p&gt;When enabled via &lt;code&gt;Settings &amp;gt; WordPress MCP &amp;gt; Enable REST API CRUD Tools&lt;/code&gt;, the plugin provides three powerful generic tools that can interact with any WordPress REST API endpoint:&lt;/p&gt; &#xA;&lt;h4&gt;Available Tools&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_api_functions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Discover all available WordPress REST API endpoints&lt;/td&gt; &#xA;   &lt;td&gt;Read&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;get_function_details&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get detailed metadata for specific endpoint/method&lt;/td&gt; &#xA;   &lt;td&gt;Read&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;run_api_function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute any REST API function with CRUD operations&lt;/td&gt; &#xA;   &lt;td&gt;Action&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Usage Workflow&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Discovery&lt;/strong&gt;: Use &lt;code&gt;list_api_functions&lt;/code&gt; to see all available endpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Inspection&lt;/strong&gt;: Use &lt;code&gt;get_function_details&lt;/code&gt; to understand required parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Execution&lt;/strong&gt;: Use &lt;code&gt;run_api_function&lt;/code&gt; to perform CRUD operations&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Security &amp;amp; Permissions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Capabilities&lt;/strong&gt;: All operations respect current user permissions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Settings Control&lt;/strong&gt;: Individual CRUD operations can be disabled in settings: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enable Create Tools (POST operations)&lt;/li&gt; &#xA;   &lt;li&gt;Enable Update Tools (PATCH/PUT operations)&lt;/li&gt; &#xA;   &lt;li&gt;Enable Delete Tools (DELETE operations)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic Filtering&lt;/strong&gt;: Excludes sensitive endpoints (JWT auth, oembed, autosaves, revisions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Benefits&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Universal Access&lt;/strong&gt;: Works with any WordPress REST API endpoint, including custom post types and third-party plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI-Friendly&lt;/strong&gt;: Provides discovery and introspection capabilities for AI agents&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standards Compliant&lt;/strong&gt;: Uses standard HTTP methods (GET, POST, PATCH, DELETE)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Permission Safe&lt;/strong&gt;: Inherits WordPress user capabilities and respects endpoint permissions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Project Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;wp-content/plugins/wordpress-mcp/&#xA;├── includes/                   # PHP classes&#xA;│   ├── Core/                  # Transport and core logic&#xA;│   ├── Auth/                  # JWT authentication&#xA;│   ├── Tools/                 # MCP tools&#xA;│   ├── Resources/             # MCP resources&#xA;│   ├── Prompts/               # MCP prompts&#xA;│   └── Admin/                 # Settings interface&#xA;├── src/                       # React components&#xA;│   └── settings/              # Admin UI components&#xA;├── tests/                     # Test suite&#xA;│   └── phpunit/              # PHPUnit tests&#xA;└── docs/                      # Documentation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Custom Tools&lt;/h3&gt; &#xA;&lt;p&gt;You can extend the MCP functionality by adding custom tools through your own plugins or themes. Create a new tool class in your plugin or theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;declare(strict_types=1);&#xA;&#xA;namespace Automattic\WordpressMcp\Tools;&#xA;&#xA;class MyCustomTool {&#xA;    public function register(): void {&#xA;        add_action(&#39;wp_mcp_register_tools&#39;, [$this, &#39;register_tool&#39;]);&#xA;    }&#xA;&#xA;    public function register_tool(): void {&#xA;        WPMCP()-&amp;gt;register_tool([&#xA;            &#39;name&#39; =&amp;gt; &#39;my_custom_tool&#39;,&#xA;            &#39;description&#39; =&amp;gt; &#39;My custom tool description&#39;,&#xA;            &#39;inputSchema&#39; =&amp;gt; [&#xA;                &#39;type&#39; =&amp;gt; &#39;object&#39;,&#xA;                &#39;properties&#39; =&amp;gt; [&#xA;                    &#39;param1&#39; =&amp;gt; [&#39;type&#39; =&amp;gt; &#39;string&#39;, &#39;description&#39; =&amp;gt; &#39;Parameter 1&#39;]&#xA;                ],&#xA;                &#39;required&#39; =&amp;gt; [&#39;param1&#39;]&#xA;            ],&#xA;            &#39;callback&#39; =&amp;gt; [$this, &#39;execute&#39;],&#xA;        ]);&#xA;    }&#xA;&#xA;    public function execute(array $args): array {&#xA;        // Your tool logic here&#xA;        return [&#39;result&#39; =&amp;gt; &#39;success&#39;];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Custom Resources&lt;/h3&gt; &#xA;&lt;p&gt;You can extend the MCP functionality by adding custom resources through your own plugins or themes. Create a new resource class in your plugin or theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;declare(strict_types=1);&#xA;&#xA;namespace Automattic\WordpressMcp\Resources;&#xA;&#xA;class MyCustomResource {&#xA;    public function register(): void {&#xA;        add_action(&#39;wp_mcp_register_resources&#39;, [$this, &#39;register_resource&#39;]);&#xA;    }&#xA;&#xA;    public function register_resource(): void {&#xA;        WPMCP()-&amp;gt;register_resource([&#xA;            &#39;uri&#39; =&amp;gt; &#39;custom://my-resource&#39;,&#xA;            &#39;name&#39; =&amp;gt; &#39;My Custom Resource&#39;,&#xA;            &#39;description&#39; =&amp;gt; &#39;Custom resource description&#39;,&#xA;            &#39;mimeType&#39; =&amp;gt; &#39;application/json&#39;,&#xA;            &#39;callback&#39; =&amp;gt; [$this, &#39;get_content&#39;],&#xA;        ]);&#xA;    }&#xA;&#xA;    public function get_content(): array {&#xA;        return [&#39;contents&#39; =&amp;gt; [/* resource data */]];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;Run the comprehensive test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run all tests&#xA;vendor/bin/phpunit&#xA;&#xA;# Run specific test suites&#xA;vendor/bin/phpunit tests/phpunit/McpStdioTransportTest.php&#xA;vendor/bin/phpunit tests/phpunit/McpStreamableTransportTest.php&#xA;vendor/bin/phpunit tests/phpunit/JwtAuthTest.php&#xA;&#xA;# Run with coverage&#xA;vendor/bin/phpunit --coverage-html coverage/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building Frontend&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Development build&#xA;npm run dev&#xA;&#xA;# Production build&#xA;npm run build&#xA;&#xA;# Watch mode&#xA;npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;h3&gt;Best Practices&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Token Management&lt;/strong&gt;: Use shortest expiration time needed (1-24 hours)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Permissions&lt;/strong&gt;: Tokens inherit user capabilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Secure Storage&lt;/strong&gt;: Never commit tokens to repositories&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Regular Cleanup&lt;/strong&gt;: Revoke unused tokens promptly&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access Control&lt;/strong&gt;: Streamable transport requires admin privileges&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CRUD Operations&lt;/strong&gt;: Only enable create/update/delete tools when necessary&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Experimental Features&lt;/strong&gt;: Use REST API CRUD tools with caution in production environments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Security Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JWT signature validation&lt;/li&gt; &#xA; &lt;li&gt;Token expiration and revocation&lt;/li&gt; &#xA; &lt;li&gt;User capability inheritance&lt;/li&gt; &#xA; &lt;li&gt;Secure secret key generation&lt;/li&gt; &#xA; &lt;li&gt;Audit logging for security events&lt;/li&gt; &#xA; &lt;li&gt;Protection against malformed requests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing Coverage&lt;/h2&gt; &#xA;&lt;p&gt;The plugin includes extensive testing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transport Testing&lt;/strong&gt;: Both STDIO and Streamable protocols&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Authentication Testing&lt;/strong&gt;: JWT generation, validation, and revocation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integration Testing&lt;/strong&gt;: Cross-transport comparison&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security Testing&lt;/strong&gt;: Edge cases and malformed requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance Testing&lt;/strong&gt;: Load and stress testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;View detailed testing documentation in &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/tests/README.md&#34;&gt;&lt;code&gt;tests/README.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// wp-config.php&#xA;define(&#39;WPMCP_JWT_SECRET_KEY&#39;, &#39;your-secret-key&#39;);&#xA;define(&#39;WPMCP_DEBUG&#39;, true); // Enable debug logging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugin Settings&lt;/h3&gt; &#xA;&lt;p&gt;Access via &lt;code&gt;Settings &amp;gt; WordPress MCP&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enable/Disable MCP&lt;/strong&gt;: Toggle plugin functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transport Configuration&lt;/strong&gt;: Configure STDIO/Streamable transports&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature Toggles&lt;/strong&gt;: Enable/disable specific tools and resources&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CRUD Operation Controls&lt;/strong&gt;: Granular control over create, update, and delete operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Experimental Features&lt;/strong&gt;: Enable REST API CRUD Tools (experimental functionality)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Authentication Settings&lt;/strong&gt;: JWT token management&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CRUD Operation Settings&lt;/h4&gt; &#xA;&lt;p&gt;The plugin provides granular control over CRUD operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enable Create Tools&lt;/strong&gt;: Allow POST operations via MCP tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enable Update Tools&lt;/strong&gt;: Allow PATCH/PUT operations via MCP tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enable Delete Tools&lt;/strong&gt;: ⚠️ Allow DELETE operations via MCP tools (use with caution)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enable REST API CRUD Tools&lt;/strong&gt;: 🧪 Enable experimental generic REST API access tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Security Note&lt;/strong&gt;: Delete operations can permanently remove data. Only enable delete tools if you trust all users with MCP access.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! Please see our &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Development Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;composer install&lt;/code&gt; for PHP dependencies&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; for JavaScript dependencies&lt;/li&gt; &#xA; &lt;li&gt;Set up WordPress test environment&lt;/li&gt; &#xA; &lt;li&gt;Run tests with &lt;code&gt;vendor/bin/phpunit&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation Overview&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/docs/README.md&#34;&gt;docs/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Client Setup Guide&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/docs/client-setup.md&#34;&gt;docs/client-setup.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI Integration Guide&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/docs/for-ai.md&#34;&gt;docs/for-ai.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Registered Tools&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/docs/registered-tools.md&#34;&gt;docs/registered-tools.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Registered Resources&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/docs/registered-resources.md&#34;&gt;docs/registered-resources.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Registered Prompts&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/docs/registered-prompts.md&#34;&gt;docs/registered-prompts.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Register MCP Tools&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/docs/register-mcp-tools.md&#34;&gt;docs/register-mcp-tools.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Register MCP Prompts&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/docs/register-mcp-prompt.md&#34;&gt;docs/register-mcp-prompt.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Register MCP Resources&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/docs/register-mcp-resources.md&#34;&gt;docs/register-mcp-resources.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testing Guide&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/tests/README.md&#34;&gt;tests/README.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For support and questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/docs/README.md&#34;&gt;docs/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bug Reports&lt;/strong&gt;: &lt;a href=&#34;https://github.com/Automattic/wordpress-mcp/issues&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Discussions&lt;/strong&gt;: &lt;a href=&#34;https://github.com/Automattic/wordpress-mcp/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contact&lt;/strong&gt;: Reach out to the maintainers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/wordpress-mcp/trunk/LICENSE&#34;&gt;GPL v2 or later&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Built with ❤️ by &lt;a href=&#34;https://automattic.com&#34;&gt;Automattic&lt;/a&gt; for the WordPress and AI communities.&lt;/p&gt;</summary>
  </entry>
</feed>