<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-09T01:59:06Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>qiayue/php-openai-gpt-stream-chat-api-webui</title>
    <updated>2023-04-09T01:59:06Z</updated>
    <id>tag:github.com,2023-04-09:/qiayue/php-openai-gpt-stream-chat-api-webui</id>
    <link href="https://github.com/qiayue/php-openai-gpt-stream-chat-api-webui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;不使用任何框架，php + html + css + js 原生实现 openai gpt chat 接口对接，实现流式数据传输和接收，附带简洁网页demo。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;php-openai-gpt-stream-chat-api-webui&lt;/h1&gt; &#xA;&lt;p&gt;由 &lt;a href=&#34;https://github.com/qiayue/&#34;&gt;@qiayue&lt;/a&gt; 开源的 &lt;a href=&#34;https://github.com/qiayue/php-openai-gpt-stream-chat-api-webui&#34;&gt;纯 PHP 实现 GPT 流式调用和前端实时打印 webui &lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;h2&gt;目录结构&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;/&#xA;├─ /class&#xA;│  ├─ Class.ChatGPT.php&#xA;│  ├─ Class.DFA.php&#xA;│  ├─ Class.StreamHandler.php&#xA;├─ /static&#xA;│  ├─ css&#xA;│  │  ├─ chat.css&#xA;│  │  ├─ monokai-sublime.css&#xA;│  ├─ js&#xA;│  │  ├─ chat.js&#xA;│  │  ├─ highlight.min.js&#xA;│  │  ├─ marked.min.js&#xA;├─ /chat.php&#xA;├─ /index.html&#xA;├─ /README.md&#xA;├─ /sensitive_words.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;目录/文件&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/&lt;/td&gt; &#xA;   &lt;td&gt;程序根目录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/class&lt;/td&gt; &#xA;   &lt;td&gt;php类文件目录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/class/Class.ChatGPT.php&lt;/td&gt; &#xA;   &lt;td&gt;ChatGPT 类，用于处理前端请求，并向 OpenAI 接口提交请求&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/class/Class.DFA.php&lt;/td&gt; &#xA;   &lt;td&gt;DFA 类，用于敏感词校验和替换&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/class/Class.StreamHandler.php&lt;/td&gt; &#xA;   &lt;td&gt;StreamHandler 类，用于实时处理 OpenAI 流式返回的数据&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static&lt;/td&gt; &#xA;   &lt;td&gt;存放所有前端页面所需的静态文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/css&lt;/td&gt; &#xA;   &lt;td&gt;存放前端页面所有的 css 文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/css/chat.css&lt;/td&gt; &#xA;   &lt;td&gt;前端页面聊天样式文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/css/monokai-sublime.css&lt;/td&gt; &#xA;   &lt;td&gt;highlight 代码高亮插件的主题样式文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/js&lt;/td&gt; &#xA;   &lt;td&gt;存放前端页面所有的 js 文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/js/chat.js&lt;/td&gt; &#xA;   &lt;td&gt;前端聊天交互 js 代码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/js/highlight.min.js&lt;/td&gt; &#xA;   &lt;td&gt;代码高亮 js 库&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/js/marked.min.js&lt;/td&gt; &#xA;   &lt;td&gt;markdown 解析 js 库&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/chat.php&lt;/td&gt; &#xA;   &lt;td&gt;前端聊天请求的后端入口文件，在这里引入 php 类文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/index.html&lt;/td&gt; &#xA;   &lt;td&gt;前端页面 html 代码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/README.md&lt;/td&gt; &#xA;   &lt;td&gt;仓库描述文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/sensitive_words.txt&lt;/td&gt; &#xA;   &lt;td&gt;敏感词文件，一行一个敏感词，需要你自己收集敏感词，也可以加我微信（同 GitHub id）找我要&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;p&gt;本项目代码，没有使用任何框架，也没有引入任何第三方后端库，前端引入了代码高亮库 &lt;a href=&#34;https://github.com/highlightjs/highlight.js&#34;&gt;highlight&lt;/a&gt; 和 markdown 解析库 &lt;a href=&#34;https://github.com/markedjs/marked&#34;&gt;marked&lt;/a&gt; 都已经下载项目内了，所以拿到代码不用任何安装即可直接使用。&lt;/p&gt; &#xA;&lt;p&gt;唯二要做的就是把你自己的 api key 填进去。&lt;/p&gt; &#xA;&lt;p&gt;获取源码后，修改 &lt;code&gt;chat.php&lt;/code&gt; ，填写 OpenAI 的 api key 进去，具体请见：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$chat = new ChatGPT([&#xA;    &#39;api_key&#39; =&amp;gt; &#39;此处需要填入 openai 的 api key &#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果开启敏感词检测功能，需要把敏感词一行一个放入 &lt;code&gt;sensitive_words_sdfdsfvdfs5v56v5dfvdf.txt&lt;/code&gt; 文件中。&lt;/p&gt; &#xA;&lt;p&gt;开了一个微信群，欢迎入群交流：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://tlc.nali.net/qrcode/wxgroup/openaiqa/?v=1&#34; alt=&#34;微信答疑群&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;原理说明&lt;/h2&gt; &#xA;&lt;h3&gt;流式接收 OpenAI 的返回数据&lt;/h3&gt; &#xA;&lt;p&gt;后端 Class.ChatGPT.php 中用 curl 向 OpenAI 发起请求，使用 curl 的 &lt;code&gt;CURLOPT_WRITEFUNCTION&lt;/code&gt; 设置回调函数，同时请求参数里 &lt;code&gt;&#39;stream&#39; =&amp;gt; true&lt;/code&gt; 告诉 OpenAI 开启流式传输。&lt;/p&gt; &#xA;&lt;p&gt;我们通过 &lt;code&gt;curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this-&amp;gt;streamHandler, &#39;callback&#39;]);&lt;/code&gt; 设置使用 StreamHandler 类的实例化对象 &lt;code&gt;$this-&amp;gt;streamHandler&lt;/code&gt; 的 &lt;code&gt;callback&lt;/code&gt; 方法来处理 OpenAI 返回的数据。&lt;/p&gt; &#xA;&lt;p&gt;OpenAI 会在模型每次输出时返回 &lt;code&gt;data: {&#34;id&#34;:&#34;&#34;,&#34;object&#34;:&#34;&#34;,&#34;created&#34;:1679616251,&#34;model&#34;:&#34;&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&lt;/code&gt; 格式字符串，其中我们需要的回答就在 &lt;code&gt;choices[0][&#39;delta&#39;][&#39;content&#39;]&lt;/code&gt; 里，当然我们也要做好异常判断，不能直接这样获取数据。&lt;/p&gt; &#xA;&lt;p&gt;另外，实际因为网络传输问题，每次 &lt;code&gt;callback&lt;/code&gt; 函数收到的数据并不一定只有一条 &lt;code&gt;data: {&#34;key&#34;:&#34;value&#34;}&lt;/code&gt; 格式的数据，有可能只有半条，也有可能有多条，还有可能有N条半。&lt;/p&gt; &#xA;&lt;p&gt;所以我们在 &lt;code&gt;StreamHandler&lt;/code&gt; 类中增加了 &lt;code&gt;data_buffer&lt;/code&gt; 属性来存储无法解析的半条数据。&lt;/p&gt; &#xA;&lt;p&gt;这里根据 OpenAI 的返回数据格式，做了一些特殊处理，具体代码如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function callback($ch, $data) {&#xA;        $this-&amp;gt;counter += 1;&#xA;        file_put_contents(&#39;./log/data.&#39;.$this-&amp;gt;qmd5.&#39;.log&#39;, $this-&amp;gt;counter.&#39;==&#39;.$data.PHP_EOL.&#39;--------------------&#39;.PHP_EOL, FILE_APPEND);&#xA;&#xA;        $result = json_decode($data, TRUE);&#xA;        if(is_array($result)){&#xA;        &#x9;$this-&amp;gt;end(&#39;openai 请求错误：&#39;.json_encode($result));&#xA;        &#x9;return strlen($data);&#xA;        }&#xA;&#xA;        /*&#xA;            此处步骤仅针对 openai 接口而言&#xA;            每次触发回调函数时，里边会有多条data数据，需要分割&#xA;            如某次收到 $data 如下所示：&#xA;            data: {&#34;id&#34;:&#34;chatcmpl-6wimHHBt4hKFHEpFnNT2ryUeuRRJC&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1679453169,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;role&#34;:&#34;assistant&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}\n\ndata: {&#34;id&#34;:&#34;chatcmpl-6wimHHBt4hKFHEpFnNT2ryUeuRRJC&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1679453169,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;以下&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}\n\ndata: {&#34;id&#34;:&#34;chatcmpl-6wimHHBt4hKFHEpFnNT2ryUeuRRJC&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1679453169,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;是&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}\n\ndata: {&#34;id&#34;:&#34;chatcmpl-6wimHHBt4hKFHEpFnNT2ryUeuRRJC&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1679453169,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;使用&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&#xA;&#xA;            最后两条一般是这样的：&#xA;            data: {&#34;id&#34;:&#34;chatcmpl-6wimHHBt4hKFHEpFnNT2ryUeuRRJC&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1679453169,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{},&#34;index&#34;:0,&#34;finish_reason&#34;:&#34;stop&#34;}]}\n\ndata: [DONE]&#xA;&#xA;            根据以上 openai 的数据格式，分割步骤如下：&#xA;        */&#xA;&#xA;        // 0、把上次缓冲区内数据拼接上本次的data&#xA;        $buffer = $this-&amp;gt;data_buffer.$data;&#xA;&#xA;        //拼接完之后，要把缓冲字符串清空&#xA;        $this-&amp;gt;data_buffer = &#39;&#39;;&#xA;&#xA;        // 1、把所有的 &#39;data: {&#39; 替换为 &#39;{&#39; ，&#39;data: [&#39; 换成 &#39;[&#39;&#xA;        $buffer = str_replace(&#39;data: {&#39;, &#39;{&#39;, $buffer);&#xA;        $buffer = str_replace(&#39;data: [&#39;, &#39;[&#39;, $buffer);&#xA;&#xA;        // 2、把所有的 &#39;}\n\n{&#39; 替换维 &#39;}[br]{&#39; ， &#39;}\n\n[&#39; 替换为 &#39;}[br][&#39;&#xA;        $buffer = str_replace(&#39;}&#39;.PHP_EOL.PHP_EOL.&#39;{&#39;, &#39;}[br]{&#39;, $buffer);&#xA;        $buffer = str_replace(&#39;}&#39;.PHP_EOL.PHP_EOL.&#39;[&#39;, &#39;}[br][&#39;, $buffer);&#xA;&#xA;        // 3、用 &#39;[br]&#39; 分割成多行数组&#xA;        $lines = explode(&#39;[br]&#39;, $buffer);&#xA;&#xA;        // 4、循环处理每一行，对于最后一行需要判断是否是完整的json&#xA;        $line_c = count($lines);&#xA;        foreach($lines as $li=&amp;gt;$line){&#xA;            if(trim($line) == &#39;[DONE]&#39;){&#xA;                //数据传输结束&#xA;                $this-&amp;gt;data_buffer = &#39;&#39;;&#xA;                $this-&amp;gt;counter = 0;&#xA;                $this-&amp;gt;sensitive_check();&#xA;                $this-&amp;gt;end();&#xA;                break;&#xA;            }&#xA;            $line_data = json_decode(trim($line), TRUE);&#xA;            if( !is_array($line_data) || !isset($line_data[&#39;choices&#39;]) || !isset($line_data[&#39;choices&#39;][0]) ){&#xA;                if($li == ($line_c - 1)){&#xA;                    //如果是最后一行&#xA;                    $this-&amp;gt;data_buffer = $line;&#xA;                    break;&#xA;                }&#xA;                //如果是中间行无法json解析，则写入错误日志中&#xA;                file_put_contents(&#39;./log/error.&#39;.$this-&amp;gt;qmd5.&#39;.log&#39;, json_encode([&#39;i&#39;=&amp;gt;$this-&amp;gt;counter, &#39;line&#39;=&amp;gt;$line, &#39;li&#39;=&amp;gt;$li], JSON_UNESCAPED_UNICODE|JSON_PRETTY_PRINT).PHP_EOL.PHP_EOL, FILE_APPEND);&#xA;                continue;&#xA;            }&#xA;&#xA;            if( isset($line_data[&#39;choices&#39;][0][&#39;delta&#39;]) &amp;amp;&amp;amp; isset($line_data[&#39;choices&#39;][0][&#39;delta&#39;][&#39;content&#39;]) ){&#xA;            &#x9;$this-&amp;gt;sensitive_check($line_data[&#39;choices&#39;][0][&#39;delta&#39;][&#39;content&#39;]);&#xA;            }&#xA;        }&#xA;&#xA;        return strlen($data);&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;敏感词检测&lt;/h3&gt; &#xA;&lt;p&gt;我们使用了 DFA 算法来实现敏感词检测，按照 ChatGPT 的解释，&lt;code&gt;&#34;DFA&#34;是指“确定性有限自动机”（Deterministic Finite Automaton）&lt;/code&gt; ，&lt;code&gt;DfaFilter（确定有限自动机过滤器）通常是指一种用于文本处理和匹配的算法&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;Class.DFA.php 类代码是 GPT4 写的，具体实现代码见源码。&lt;/p&gt; &#xA;&lt;p&gt;这里介绍一下使用方法，创建一个 DFA 实例需要传入敏感词文件路径：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dfa = new DFA([&#xA;    &#39;words_file&#39; =&amp;gt; &#39;./sensitive_words_sdfdsfvdfs5v56v5dfvdf.txt&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;特别说明：这里特意用乱码字符串文件名是为了防止他人下载敏感词文件，请你部署后也自己改一个别的乱码文件名，不要使用我这里公开了的文件名&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;之后就可以用 &lt;code&gt;$dfa-&amp;gt;containsSensitiveWords($inputText)&lt;/code&gt; 来判断 &lt;code&gt;$inputText&lt;/code&gt; 是否包含敏感词，返回值是 &lt;code&gt;TRUE&lt;/code&gt; 或 &lt;code&gt;FALSE&lt;/code&gt; 的布尔值，也可以用 &lt;code&gt;$outputText = $dfa-&amp;gt;replaceWords($inputText)&lt;/code&gt; 来进行敏感词替换，所有在 &lt;code&gt;sensitive_words.txt&lt;/code&gt; 中指定的敏感词都会被替换为三个&lt;code&gt;*&lt;/code&gt;号。&lt;/p&gt; &#xA;&lt;p&gt;如果不想开启敏感词检测，把 &lt;code&gt;chat.php&lt;/code&gt; 中的以下三句注释掉即可：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dfa = new DFA([&#xA;    &#39;words_file&#39; =&amp;gt; &#39;./sensitive_words_sdfdsfvdfs5v56v5dfvdf.txt&#39;,&#xA;]);&#xA;$chat-&amp;gt;set_dfa($dfa);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果没有开启敏感词检测，那么每次 OpenAI 的返回都会实时返回给前端。&lt;/p&gt; &#xA;&lt;p&gt;如果开启了敏感词检测，会查找 OpenAI 返回中的换行符和停顿符号 &lt;code&gt;[&#39;，&#39;, &#39;。&#39;, &#39;；&#39;, &#39;？&#39;, &#39;！&#39;, &#39;……&#39;]&lt;/code&gt; 等来进行分句，每一句都使用 &lt;code&gt;$outputText = $dfa-&amp;gt;replaceWords($inputText)&lt;/code&gt; 来替换敏感词，之后整句返回给前端。&lt;/p&gt; &#xA;&lt;p&gt;开启敏感词后，加载敏感词文件需要时间，每次检测时也是逐句检测，而不是逐词检测，也会导致返回变慢。&lt;/p&gt; &#xA;&lt;p&gt;所以如果是自用，可以不开启敏感词检测，如果是部署出去给其他人用，为了保护你的域名安全和你的安全，最好开启敏感词检测。&lt;/p&gt; &#xA;&lt;h3&gt;流式返回给前端&lt;/h3&gt; &#xA;&lt;p&gt;直接看 &lt;code&gt;chat.php&lt;/code&gt; 的注释会更清楚：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/*&#xA;以下几行注释由 GPT4 生成&#xA;*/&#xA;&#xA;// 这行代码用于关闭输出缓冲。关闭后，脚本的输出将立即发送到浏览器，而不是等待缓冲区填满或脚本执行完毕。&#xA;ini_set(&#39;output_buffering&#39;, &#39;off&#39;);&#xA;&#xA;// 这行代码禁用了 zlib 压缩。通常情况下，启用 zlib 压缩可以减小发送到浏览器的数据量，但对于服务器发送事件来说，实时性更重要，因此需要禁用压缩。&#xA;ini_set(&#39;zlib.output_compression&#39;, false);&#xA;&#xA;// 这行代码使用循环来清空所有当前激活的输出缓冲区。ob_end_flush() 函数会刷新并关闭最内层的输出缓冲区，@ 符号用于抑制可能出现的错误或警告。&#xA;while (@ob_end_flush()) {}&#xA;&#xA;// 这行代码设置 HTTP 响应的 Content-Type 为 text/event-stream，这是服务器发送事件（SSE）的 MIME 类型。&#xA;header(&#39;Content-Type: text/event-stream&#39;);&#xA;&#xA;// 这行代码设置 HTTP 响应的 Cache-Control 为 no-cache，告诉浏览器不要缓存此响应。&#xA;header(&#39;Cache-Control: no-cache&#39;);&#xA;&#xA;// 这行代码设置 HTTP 响应的 Connection 为 keep-alive，保持长连接，以便服务器可以持续发送事件到客户端。&#xA;header(&#39;Connection: keep-alive&#39;);&#xA;&#xA;// 这行代码设置 HTTP 响应的自定义头部 X-Accel-Buffering 为 no，用于禁用某些代理或 Web 服务器（如 Nginx）的缓冲。&#xA;// 这有助于确保服务器发送事件在传输过程中不会受到缓冲影响。&#xA;header(&#39;X-Accel-Buffering: no&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;之后我们每次想给前端返回数据，用以下代码即可：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;echo &#39;data: &#39;.json_encode([&#39;time&#39;=&amp;gt;date(&#39;Y-m-d H:i:s&#39;), &#39;content&#39;=&amp;gt;&#39;答： &#39;]).PHP_EOL.PHP_EOL;&#xA;flush();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这里我们定义了我们自己使用的一个数据格式，里边只放了 time 和 content ，不用解释都懂，time 是时间， content 就是我们要返回给前端的内容。&lt;/p&gt; &#xA;&lt;p&gt;注意，回答全部传输完毕后，我们需要关闭连接，可以用以下代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;echo &#39;retry: 86400000&#39;.PHP_EOL; // 告诉前端如果发生错误，隔多久之后才轮询一次&#xA;echo &#39;event: close&#39;.PHP_EOL; // 告诉前端，结束了，该说再见了&#xA;echo &#39;data: Connection closed&#39;.PHP_EOL.PHP_EOL; // 告诉前端，连接已关闭&#xA;flush();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;EventSource&lt;/h3&gt; &#xA;&lt;p&gt;前端 js 通过 &lt;code&gt;const eventSource = new EventSource(url);&lt;/code&gt; 开启一个 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource&#34;&gt;EventSource &lt;/a&gt; 请求。&lt;/p&gt; &#xA;&lt;p&gt;之后服务器按照 &lt;code&gt;data: {&#34;kev1&#34;:&#34;value1&#34;,&#34;kev2&#34;:&#34;value2&#34;}&lt;/code&gt; 格式向前端发送数据，前端就可以在 EventSource 的 message 回调事件中的 &lt;code&gt;event.data&lt;/code&gt; 里获取 &lt;code&gt;{&#34;kev1&#34;:&#34;value1&#34;,&#34;kev2&#34;:&#34;value2&#34;}&lt;/code&gt; 字符串形式 json 数据，再通过 &lt;code&gt;JSON.parse(event.data)&lt;/code&gt; 就可以得到 js 对象。&lt;/p&gt; &#xA;&lt;p&gt;具体代码在 getAnswer 函数中，如下所示：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function getAnswer(inputValue){&#xA;    inputValue = inputValue.replace(&#39;+&#39;, &#39;{[$add$]}&#39;);&#xA;    const url = &#34;./chat.php?q=&#34;+inputValue;&#xA;    const eventSource = new EventSource(url);&#xA;&#xA;    eventSource.addEventListener(&#34;open&#34;, (event) =&amp;gt; {&#xA;        console.log(&#34;连接已建立&#34;, JSON.stringify(event));&#xA;    });&#xA;&#xA;    eventSource.addEventListener(&#34;message&#34;, (event) =&amp;gt; {&#xA;        //console.log(&#34;接收数据：&#34;, event);&#xA;        try {&#xA;            var result = JSON.parse(event.data);&#xA;            if(result.time &amp;amp;&amp;amp; result.content ){&#xA;                answerWords.push(result.content);&#xA;                contentIdx += 1;&#xA;            }&#xA;        } catch (error) {&#xA;            console.log(error);&#xA;        }&#xA;    });&#xA;&#xA;    eventSource.addEventListener(&#34;error&#34;, (event) =&amp;gt; {&#xA;        console.error(&#34;发生错误：&#34;, JSON.stringify(event));&#xA;    });&#xA;&#xA;    eventSource.addEventListener(&#34;close&#34;, (event) =&amp;gt; {&#xA;        console.log(&#34;连接已关闭&#34;, JSON.stringify(event.data));&#xA;        eventSource.close();&#xA;        contentEnd = true;&#xA;        console.log((new Date().getTime()), &#39;answer end&#39;);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;说明一下，原生的 &lt;code&gt;EventSource&lt;/code&gt; 请求，只能是 &lt;code&gt;GET&lt;/code&gt; 请求，所以这里演示时，直接把提问放到 &lt;code&gt;GET&lt;/code&gt; 的 &lt;code&gt;URL&lt;/code&gt; 参数里了。 如果要想用 &lt;code&gt;POST&lt;/code&gt; 请求，一般有两种办法：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;前后端一起改：【先发 &lt;code&gt;POST&lt;/code&gt; 后发 &lt;code&gt;GET&lt;/code&gt; 】用 &lt;code&gt;POST&lt;/code&gt; 向后端提问，后端根据提问和时间生成一个唯一 key 随着 &lt;code&gt;POST&lt;/code&gt; 请求返回给前端，前端拿到后，再发起一个 &lt;code&gt;GET&lt;/code&gt; 请求，在参数里携带问题 key ，获取回答，这种方式需要修改后端代码；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;只改前端：【只发一个 &lt;code&gt;POST&lt;/code&gt; 请求】后端代码不用大改，只需要把 &lt;code&gt;chat.php&lt;/code&gt; 中 &lt;code&gt;$question = urldecode($_GET[&#39;q&#39;] ?? &#39;&#39;)&lt;/code&gt; 改为 &lt;code&gt;$question = urldecode($_POST[&#39;q&#39;] ?? &#39;&#39;)&lt;/code&gt; 即可，但是前端需要改造，不能用原生 &lt;code&gt;EventSource&lt;/code&gt; 请求，需要用 fetch ，设置流式接收，具体可见下方 GPT4 给出的代码示例。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;async function fetchAiResponse(message) {&#xA;    try {&#xA;        const response = await fetch(&#34;./chat.php&#34;, {&#xA;            method: &#34;POST&#34;,&#xA;            headers: { &#34;Content-Type&#34;: &#34;application/json&#34; },&#xA;            body: JSON.stringify({ messages: [{ role: &#34;user&#34;, content: message }] }),&#xA;        });&#xA;&#xA;        if (!response.ok) {&#xA;            throw new Error(response.statusText);&#xA;        }&#xA;&#xA;        const reader = response.body.getReader();&#xA;        const decoder = new TextDecoder(&#34;utf-8&#34;);&#xA;&#xA;        while (true) {&#xA;            const { value, done } = await reader.read();&#xA;            if (value) {&#xA;                const partialResponse = decoder.decode(value, { stream: true });&#xA;                displayMessage(&#34;assistant&#34;, partialResponse);&#xA;            }&#xA;            if (done) {&#xA;                break;&#xA;            }&#xA;        }&#xA;    } catch (error) {&#xA;        console.error(&#34;Error fetching AI response:&#34;, error);&#xA;        displayMessage(&#34;assistant&#34;, &#34;Error: Failed to fetch AI response.&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;上方代码，关键点在于 &lt;code&gt;const partialResponse = decoder.decode(value, { stream: true })&lt;/code&gt; 中的 &lt;code&gt;{ stream: true }&lt;/code&gt; 。&lt;/p&gt; &#xA;&lt;h3&gt;打字机效果&lt;/h3&gt; &#xA;&lt;p&gt;对于后端返回的所有回复内容，我们需要用打字机形式打印出来。&lt;/p&gt; &#xA;&lt;p&gt;最初的方案是每次接收到后端的返回后就立即显示到页面里，后来发现这样速度太快了，眨眼就显示完了，没有打印机效果。 所以后来的方案就改成了用定时器实现定时打印，那么就需要把收到的先放进数组里缓存起来，然后定时每 50 毫秒执行一次，打印一个内容出来。 具体实现代码如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function typingWords(){&#xA;    if(contentEnd &amp;amp;&amp;amp; contentIdx==typingIdx){&#xA;        clearInterval(typingTimer);&#xA;        answerContent = &#39;&#39;;&#xA;        answerWords = [];&#xA;        answers = [];&#xA;        qaIdx += 1;&#xA;        typingIdx = 0;&#xA;        contentIdx = 0;&#xA;        contentEnd = false;&#xA;        lastWord = &#39;&#39;;&#xA;        lastLastWord = &#39;&#39;;&#xA;        input.disabled = false;&#xA;        sendButton.disabled = false;&#xA;        console.log((new Date().getTime()), &#39;typing end&#39;);&#xA;        return;&#xA;    }&#xA;    if(contentIdx&amp;lt;=typingIdx){&#xA;        return;&#xA;    }&#xA;    if(typing){&#xA;        return;&#xA;    }&#xA;    typing = true;&#xA;&#xA;    if(!answers[qaIdx]){&#xA;        answers[qaIdx] = document.getElementById(&#39;answer-&#39;+qaIdx);&#xA;    }&#xA;&#xA;    const content = answerWords[typingIdx];&#xA;    if(content.indexOf(&#39;`&#39;) != -1){&#xA;        if(content.indexOf(&#39;```&#39;) != -1){&#xA;            codeStart = !codeStart;&#xA;        }else if(content.indexOf(&#39;``&#39;) != -1 &amp;amp;&amp;amp; (lastWord + content).indexOf(&#39;```&#39;) != -1){&#xA;            codeStart = !codeStart;&#xA;        }else if(content.indexOf(&#39;`&#39;) != -1 &amp;amp;&amp;amp; (lastLastWord + lastWord + content).indexOf(&#39;```&#39;) != -1){&#xA;            codeStart = !codeStart;&#xA;        }&#xA;    }&#xA;&#xA;    lastLastWord = lastWord;&#xA;    lastWord = content;&#xA;&#xA;    answerContent += content;&#xA;    answers[qaIdx].innerHTML = marked.parse(answerContent+(codeStart?&#39;\n\n```&#39;:&#39;&#39;));&#xA;&#xA;    typingIdx += 1;&#xA;    typing = false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;代码渲染&lt;/h3&gt; &#xA;&lt;p&gt;如果严格按照输出什么打印什么的话，那么当正在打印一段代码，需要等到代码全部打完，才能被格式化为代码块，才能高亮显示代码。 那这个体验也太差了。 有什么办法能够解决这个问题呢？ 答案就在问题里，既然是因为代码块有开始标记没有结束标记，那就我们给他补全结束标记就好了，直到真的结束标记来了，才不需要补全。&lt;/p&gt; &#xA;&lt;p&gt;具体的实现就是下面几行代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if(content.indexOf(&#39;`&#39;) != -1){&#xA;    if(content.indexOf(&#39;```&#39;) != -1){&#xA;        codeStart = !codeStart;&#xA;    }else if(content.indexOf(&#39;``&#39;) != -1 &amp;amp;&amp;amp; (lastWord + content).indexOf(&#39;```&#39;) != -1){&#xA;        codeStart = !codeStart;&#xA;    }else if(content.indexOf(&#39;`&#39;) != -1 &amp;amp;&amp;amp; (lastLastWord + lastWord + content).indexOf(&#39;```&#39;) != -1){&#xA;        codeStart = !codeStart;&#xA;    }&#xA;}&#xA;&#xA;lastLastWord = lastWord;&#xA;lastWord = content;&#xA;&#xA;answerContent += content;&#xA;answers[qaIdx].innerHTML = marked.parse(answerContent+(codeStart?&#39;\n\n```&#39;:&#39;&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;其它&lt;/h3&gt; &#xA;&lt;p&gt;更多其它细节请看代码，如果对代码有疑问的，请加我微信（同 GitHub id）&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qiayue/php-openai-gpt-stream-chat-api-webui/raw/main/LICENSE&#34;&gt;BSD 2-Clause&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>uvdesk/community-skeleton</title>
    <updated>2023-04-09T01:59:06Z</updated>
    <id>tag:github.com,2023-04-09:/uvdesk/community-skeleton</id>
    <link href="https://github.com/uvdesk/community-skeleton" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UVdesk Opensource Community Helpdesk Project built for all to make a Full Ticketing Support System along with many more other features.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.uvdesk.com/en/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/cdn.uvdesk.com/uvdesk/bundles/webkuldefault/images/uvdesk-wide.svg?sanitize=true&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/uvdesk/community-skeleton&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/uvdesk/community-skeleton/v/stable.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/uvdesk/community-skeleton&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/uvdesk/community-skeleton/d/total.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/uvdesk/community-skeleton&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/uvdesk/community-skeleton/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/uvdesk/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/uvdesk/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/uvdesk/community&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/uvdesk/community-skeleton.svg?sanitize=true&#34; alt=&#34;connect on gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forums.uvdesk.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Ask%20me-anything-1abc9c.svg?sanitize=true&#34; alt=&#34;discuss on uvdesk forum&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/collections/made-in-india&#34;&gt;&lt;img src=&#34;https://badges.frapsoft.com/os/v3/open-source.png?v=103&#34; alt=&#34;Checkout us on open source projects from India&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=uvdesk&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/uvdesk?style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/channel/UCKKt4IOC7ynLwhJMP35uFeQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UCKKt4IOC7ynLwhJMP35uFeQ?style=social&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ➡️ &lt;a href=&#34;https://www.uvdesk.com/en/opensource/&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://docs.uvdesk.com/&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://www.uvdesk.com/en/blog/open-source-helpdesk-installation-on-ubuntu-uvdesk/&#34;&gt;Installation Guide&lt;/a&gt; | &lt;a href=&#34;https://forums.uvdesk.com/&#34;&gt;Forums&lt;/a&gt; | &lt;a href=&#34;https://www.facebook.com/uvdesk/&#34;&gt;Community&lt;/a&gt; ⬅️ &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; style=&#34;display: inline;&#34;&gt; &lt;img class=&#34;flag-img&#34; src=&#34;https://flagicons.lipis.dev/flags/4x3/ar.svg?sanitize=true&#34; alt=&#34;Arabic&#34; width=&#34;24&#34; height=&#34;24&#34;&gt; &lt;img class=&#34;flag-img&#34; src=&#34;https://flagicons.lipis.dev/flags/4x3/de.svg?sanitize=true&#34; alt=&#34;German&#34; width=&#34;24&#34; height=&#34;24&#34;&gt; &lt;img class=&#34;flag-img&#34; src=&#34;https://flagicons.lipis.dev/flags/4x3/us.svg?sanitize=true&#34; alt=&#34;English&#34; width=&#34;24&#34; height=&#34;24&#34;&gt; &lt;img class=&#34;flag-img&#34; src=&#34;https://flagicons.lipis.dev/flags/4x3/es.svg?sanitize=true&#34; alt=&#34;Spanish&#34; width=&#34;24&#34; height=&#34;24&#34;&gt; &lt;img class=&#34;flag-img&#34; src=&#34;https://flagicons.lipis.dev/flags/4x3/fr.svg?sanitize=true&#34; alt=&#34;French&#34; width=&#34;24&#34; height=&#34;24&#34;&gt; &lt;img class=&#34;flag-img&#34; src=&#34;https://flagicons.lipis.dev/flags/4x3/it.svg?sanitize=true&#34; alt=&#34;Italian&#34; width=&#34;24&#34; height=&#34;24&#34;&gt; &lt;img class=&#34;flag-img&#34; src=&#34;https://flagicons.lipis.dev/flags/4x3/dk.svg?sanitize=true&#34; alt=&#34;Danish&#34; width=&#34;24&#34; height=&#34;24&#34;&gt; &lt;img class=&#34;flag-img&#34; src=&#34;https://flagicons.lipis.dev/flags/4x3/pl.svg?sanitize=true&#34; alt=&#34;Polish&#34; width=&#34;24&#34; height=&#34;24&#34;&gt; &lt;img class=&#34;flag-img&#34; src=&#34;https://flagicons.lipis.dev/flags/4x3/tr.svg?sanitize=true&#34; alt=&#34;Turkish&#34; width=&#34;24&#34; height=&#34;24&#34;&gt; &lt;img class=&#34;flag-img&#34; src=&#34;https://flagicons.lipis.dev/flags/4x3/cn.svg?sanitize=true&#34; alt=&#34;Chinese&#34; width=&#34;24&#34; height=&#34;24&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.uvdesk.com/&#34;&gt;Uvdesk community helpdesk&lt;/a&gt; project skeleton packaged along with the bare essential utilities and tools to build and customize your own helpdesk solutions.&lt;/p&gt; &#xA;&lt;p&gt;Visit our official demo website to &lt;a href=&#34;https://demo.uvdesk.com/&#34;&gt;see it in action!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out UVdesk on &lt;strong&gt;Symfony Official Website&lt;/strong&gt; – &lt;a href=&#34;https://symfony.com/projects/uvdesk&#34;&gt;Symfony&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#modules&#34;&gt;Modules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#docker-runtime&#34;&gt;Docker Runtime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#security-vulnerabilities&#34;&gt;Security Vulnerabilities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#feedback&#34;&gt;Feedback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uvdesk/community-skeleton/master/#contributions&#34;&gt;Contributions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Build on top of &lt;a href=&#34;https://symfony.com/&#34;&gt;symfony&lt;/a&gt; and &lt;a href=&#34;https://backbonejs.org/&#34;&gt;backbone.js&lt;/a&gt;, uvdesk community is a service oriented, event driven extensible opensource helpdesk system that can be used by your organization to provide efficient support to your clients effortlessly whichever way you imagine.&lt;/p&gt; &#xA;&lt;p&gt;The standard distribution comes packaged along with the following helpdesk packages to cover a wide range of use-cases and requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/uvdesk/core-framework&#34;&gt;&lt;strong&gt;Core Framework&lt;/strong&gt;&lt;/a&gt; - At the heart of the helpdesk system, the core framework consists of all the necessary apis required by your project and dependent packages to keep things running smoothly&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/uvdesk/extension-framework&#34;&gt;&lt;strong&gt;Extension Framework&lt;/strong&gt;&lt;/a&gt; - Introduces support for third-party package integration and development to easily build and extend the functionalities of your helpdesk system as per your requirements&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/uvdesk/automation-bundle&#34;&gt;&lt;strong&gt;Automation Bundle&lt;/strong&gt;&lt;/a&gt; - Adds support for workflows and prepared responses to automate any specific operations within your helpdesk system&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/uvdesk/mailbox-component&#34;&gt;&lt;strong&gt;Mailbox Component&lt;/strong&gt;&lt;/a&gt; - Convert and get all your emails to support tickets on UVDesk and manage customer query easily.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/uvdesk/support-center-bundle&#34;&gt;&lt;strong&gt;Support Center Bundle&lt;/strong&gt;&lt;/a&gt; - Integrates the easily customizable support center portal to enable users to easily interact with the support staff through your helpdesk system&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reach out to us at our official &lt;a href=&#34;https://gitter.im/uvdesk/community&#34;&gt;gitter chat&lt;/a&gt; or by joining &lt;a href=&#34;https://forums.uvdesk.com/&#34;&gt;forum&lt;/a&gt; for any queries, concerns and feature request discussions.&lt;/p&gt; &#xA;&lt;p&gt;The development of the uvdesk community edition is led by the &lt;a href=&#34;https://www.uvdesk.com/en/team/&#34;&gt;uvdesk&lt;/a&gt; team and backed by &lt;a href=&#34;https://webkul.com/&#34;&gt;Webkul&lt;/a&gt;. Visit our &lt;a href=&#34;https://www.uvdesk.com/&#34;&gt;website&lt;/a&gt; to learn more about the UVDesk Helpdesk System.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.uvdesk.com/en/blog/language-translation-in-uvdesk-open-source-helpdesk/&#34;&gt;Translation Support (Multilingual)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unlimited Agents, Group, Team, Customers, Tickets etc&lt;/li&gt; &#xA; &lt;li&gt;Agent Privileges&lt;/li&gt; &#xA; &lt;li&gt;No limit on the number of Mailbox/Email integration&lt;/li&gt; &#xA; &lt;li&gt;Saved Replies for common queries&lt;/li&gt; &#xA; &lt;li&gt;Filter based on ticket status, Id, agent, customer, etc&lt;/li&gt; &#xA; &lt;li&gt;Block Spam&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.uvdesk.com/en/blog/uvdesk-agent-activity/&#34;&gt;Agent Activity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.uvdesk.com/en/blog/uvdesk-marketing-announcement/&#34;&gt;Marketing Announcement&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.uvdesk.com/es/blog/uvdesk-what-is-kudos&#34;&gt;Kudos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;reCAPTCHA option&lt;/li&gt; &#xA; &lt;li&gt;Standard automated workflows&lt;/li&gt; &#xA; &lt;li&gt;Notes for agents&lt;/li&gt; &#xA; &lt;li&gt;Custom branding&lt;/li&gt; &#xA; &lt;li&gt;Change logo &amp;amp; favicon&lt;/li&gt; &#xA; &lt;li&gt;Broadcasting message&lt;/li&gt; &#xA; &lt;li&gt;Ticket Forwarding&lt;/li&gt; &#xA; &lt;li&gt;Prepared Response&lt;/li&gt; &#xA; &lt;li&gt;Email Notification&lt;/li&gt; &#xA; &lt;li&gt;Effective search&lt;/li&gt; &#xA; &lt;li&gt;User Friendly Web Installer&lt;/li&gt; &#xA; &lt;li&gt;Add multiple attachments&lt;/li&gt; &#xA; &lt;li&gt;Powerful Knowledgebase/Faq (article, category &amp;amp; folder)&lt;/li&gt; &#xA; &lt;li&gt;Ticket types, Multiple Tags&lt;/li&gt; &#xA; &lt;li&gt;Email Templates&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uvdesk/api-bundle&#34;&gt;API&lt;/a&gt;-&lt;a href=&#34;https://github.com/uvdesk/api-bundle/wiki/Ticket-Related-APIs&#34;&gt;Doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit/delete/pinned ticket and thread&lt;/li&gt; &#xA; &lt;li&gt;Add a collaborator and much more.&lt;/li&gt; &#xA; &lt;li&gt;Check Apps &lt;a href=&#34;https://store.webkul.com/UVdesk/UVdesk-Open-Source.html&#34;&gt;here.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://docs.uvdesk.com/&#34;&gt;docs.uvdesk.com&lt;/a&gt; to read our official documentation and learn more about the uvdesk community project.&lt;/p&gt; &#xA;&lt;p&gt;We use Jekyll to develop and maintain our documentations. Consider contributing by submitting a pull request to our project&#39;s &lt;a href=&#34;https://github.com/uvdesk/uvdesk.github.io&#34;&gt;jeykll repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OS&lt;/strong&gt;: Ubuntu 16.04 LTS or higher / Windows 7 or Higher (WAMP / XAMPP).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SERVER&lt;/strong&gt;: Apache 2 or NGINX.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RAM&lt;/strong&gt;: 3 GB or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PHP&lt;/strong&gt;: 7.3 or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Processor&lt;/strong&gt;: Clock Cycle 1 Ghz or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For MySQL users&lt;/strong&gt;: 5.7.23 or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Composer&lt;/strong&gt;: 2 or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PHP IMAP&lt;/strong&gt; &lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;strong&gt;PHP Mailparse&lt;/strong&gt; for &lt;a href=&#34;https://support.uvdesk.com/en/blog/prerequisites-ubuntu&#34;&gt;Ubuntu&lt;/a&gt;, &lt;a href=&#34;https://support.uvdesk.com/en/blog/prerequisites-windows&#34;&gt;Windows&lt;/a&gt;, &lt;a href=&#34;https://support.uvdesk.com/en/blog/prerequisites-centos7&#34;&gt;Centos&lt;/a&gt;, &lt;a href=&#34;https://support.uvdesk.com/en/blog/prerequisites-mac&#34;&gt;Mac&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The installation process is broken down into two distinct steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setup&lt;/li&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setting up your helpdesk project&lt;/h3&gt; &#xA;&lt;p&gt;In this step of the installation process, you&#39;ll be downloading the helpdesk project skeleton and installing all of its dependent components.&lt;/p&gt; &#xA;&lt;p&gt;As per your convenience, you can choose to either use composer for download the project and install all its dependencies automatically or directly download the project archive that comes pre-packaged with all of the project dependencies already installed.&lt;/p&gt; &#xA;&lt;p&gt;We recommend using composer over direct download whenever possible. However, if your system does not have enough ram to execute composer operations properly (for example: installing on a shared host with limited system resources), we suggest using the direct download method instead to mitigate these kind of issues.&lt;/p&gt; &#xA;&lt;p&gt;Irrespective of the method you use, the process to configuring your helpdesk remains the same.&lt;/p&gt; &#xA;&lt;h4&gt;Composer&lt;/h4&gt; &#xA;&lt;p&gt;You can use composer to setup your project by simply running the following command from your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer create-project uvdesk/community-skeleton helpdesk-project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Direct Download&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively, you can also &lt;a href=&#34;https://cdn.uvdesk.com/uvdesk/downloads/opensource/uvdesk-community-current-stable.zip&#34;&gt;download the zip archive&lt;/a&gt; of the latest stable release and extract its content by running the following commands from your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget &#34;https://cdn.uvdesk.com/uvdesk/downloads/opensource/uvdesk-community-current-stable.zip&#34; -P /var/www/&#xA;$ unzip -q /var/www/uvdesk-community-current-stable.zip -d /var/www/ \&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring your helpdesk project&lt;/h3&gt; &#xA;&lt;p&gt;After you&#39;ve downloaded and installed all the project dependencies, you can configure your helpdesk installation using either of the following ways:&lt;/p&gt; &#xA;&lt;h4&gt;Using Terminal&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php bin/console uvdesk:configure-helpdesk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Web Installer Wizard&lt;/h4&gt; &#xA;&lt;h5&gt;Extract the contents of zip and execute the project in your browser in case of project zip download:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;http(s)://localhost/community-skeleton/public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;In case of created project using command, execute the project in your browser:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;http(s)://localhost/helpdesk-project/public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http(s)://example.com/public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After opening your project in the web browser, you will be greeted by the web installer which will guide you in configuring your project.&lt;/p&gt; &#xA;&lt;h5&gt;Run project on localhost (dev mode)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php bin/console server:run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to clear cache:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php bin/console c:c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to log in as admin/agent:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Below url is the default url for admin/agent login if you have not made any changes for /member prefix.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;http(s)://example.com/en/member/login&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to log in as customer:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Below url is the default url for customer login if you have not made any changes for /customer prefix.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;http(s)://example.com/en/customer/login&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Docker Runtime&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/uvdesk/community-skeleton/wiki/dockerize-helpdesk-project&#34;&gt;Dockerize your helpdesk project&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://store.webkul.com/UVdesk/UVdesk-Open-Source.html&#34;&gt;Available Modules/Apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Need something else ? email us at &lt;a href=&#34;mailto:support@uvdesk.com&#34;&gt;support@uvdesk.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All libraries and bundles included in the UVDesk Community Edition are released under the &lt;a href=&#34;https://github.com/uvdesk/community-skeleton/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please don&#39;t disclose any security vulnerabilities publicly. If you find any security vulnerability in our platform then please write us at &lt;a href=&#34;mailto:support@uvdesk.com&#34;&gt;support@uvdesk.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;h4&gt;Feedback (Support Community project by raising feedback)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.trustpilot.com/review/uvdesk.com&#34;&gt;Trustpilot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.capterra.com/p/158346/UVdesk/&#34;&gt;Capterra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.softwaresuggest.com/uvdesk&#34;&gt;Software suggest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;This project is hosted on &lt;a href=&#34;https://opencollective.com/uvdesk&#34;&gt;Open Collective&lt;/a&gt; and exists thanks to our contributors:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/uvdesk/community-skeleton/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/uvdesk/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Backers&lt;/h4&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/uvdesk#contributors&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/uvdesk/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Sponsors&lt;/h4&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/uvdesk/contribute/sponsor-7372/checkout&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://images.opencollective.com/static/images/become_sponsor.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aschmelyun/subvert</title>
    <updated>2023-04-09T01:59:06Z</updated>
    <id>tag:github.com,2023-04-09:/aschmelyun/subvert</id>
    <link href="https://github.com/aschmelyun/subvert" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate subtitles, summaries, and chapters from videos in seconds&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Subvert&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/v/aschmelyun/subvert?style=flat-square&#34; alt=&#34;Docker Semver&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/aschmelyun/subvert?label=pulls&amp;amp;style=flat-square&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Generate subtitles, chapters, and summaries of videos in seconds with the help of OpenAI.&lt;/p&gt; &#xA;&lt;p&gt;🚧 This is very much a work-in-progress, please &lt;a href=&#34;https://github.com/aschmelyun/subvert/issues/new&#34;&gt;create issues&lt;/a&gt; for bugs if they appear 🚧&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aschmelyun/subvert/main/media/subvert-demo.gif&#34; alt=&#34;Demo gif of Subvert converting a video&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Docker installed&lt;/a&gt; on your local machine&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI API key&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Subvert is self-contained in a single Docker image and can be started with a one-line command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -p 80:80 -e OPENAI_API_KEY=sk-123abc aschmelyun/subvert&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will boot up a server running the application and make it available to your machine at &lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;After selecting a video file to process, you have the option of choosing whether you also want to generate chapters and a summary.&lt;/p&gt; &#xA;&lt;p&gt;Your video is sent to an API where the audio is extracted from it using FFMpeg, and then sent to &lt;strong&gt;OpenAI&#39;s Whisper model&lt;/strong&gt; for transcription into the common vtt format.&lt;/p&gt; &#xA;&lt;p&gt;If you chose to select chapters or a summary, that transcript is then sent to a &lt;strong&gt;ChatGPT model&lt;/strong&gt; for processing into concise chapters of the length you wanted, and a brief summary that would fit in something like a YouTube description.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can adjust a few parameters in the container by passing in &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run/#env&#34;&gt;environment variables&lt;/a&gt; with your command using additional &lt;code&gt;-e&lt;/code&gt; flags. Here are the current ones you can add:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt; &lt;strong&gt;(required)&lt;/strong&gt; - Sets the key responsible for communication with OpenAI&#39;s APIs. No default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UPLOAD_MAX_FILESIZE&lt;/code&gt; - Changes PHP&#39;s UPLOAD_MAX_FILESIZE setting. Default: &lt;code&gt;256M&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MEMORY_LIMIT&lt;/code&gt; - Changes PHP&#39;s MEMORY_LIMIT setting. Default: &lt;code&gt;512M&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Starting from source&lt;/h2&gt; &#xA;&lt;p&gt;Alternative, if you have &lt;strong&gt;PHP 8.1+&lt;/strong&gt; and &lt;strong&gt;npm&lt;/strong&gt; installed on your local machine, you can boot the application up directly from the source code instead.&lt;/p&gt; &#xA;&lt;p&gt;First, check out this repo to your desired location. Then, navigate to the &lt;code&gt;src&lt;/code&gt; directory and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./startup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can run the commands inside of the &lt;code&gt;startup.sh&lt;/code&gt; script individually for the same result.&lt;/p&gt; &#xA;&lt;h2&gt;Deploying&lt;/h2&gt; &#xA;&lt;p&gt;Because this project is contained in a single Dockerfile, it can be deployed immediately to any server provisioned with Docker. Alternatively, the Subvert Docker image can be ran on cloud instances via AWS, Azure, GCP, Fly.io, etc.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: This image currently only exposes the insecure :80 http port.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/aschmelyun/subvert/main/LICENSE.md&#34;&gt;License File&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>