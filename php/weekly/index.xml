<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T02:01:59Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chillerlan/php-qrcode</title>
    <updated>2023-08-27T02:01:59Z</updated>
    <id>tag:github.com,2023-08-27:/chillerlan/php-qrcode</id>
    <link href="https://github.com/chillerlan/php-qrcode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A QR code generator and reader with a user friendly API. PHP 7.4+&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chillerlan/php-qrcode&lt;/h1&gt; &#xA;&lt;p&gt;A PHP QR Code generator based on the &lt;a href=&#34;https://github.com/kazuhikoarase/qrcode-generator&#34;&gt;implementation by Kazuhiko Arase&lt;/a&gt;, namespaced, cleaned up, improved and other stuff. &lt;br&gt; It also features a QR Code reader based on a &lt;a href=&#34;https://github.com/khanamiryan/php-qrcode-detector-decoder&#34;&gt;PHP port&lt;/a&gt; of the &lt;a href=&#34;https://github.com/zxing/zxing&#34;&gt;ZXing library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hi! Please check out the &lt;a href=&#34;https://github.com/chillerlan/php-qrcode/releases/tag/5.0-beta&#34;&gt;v5.0-beta release&lt;/a&gt; and leave your feedback in &lt;a href=&#34;https://github.com/chillerlan/php-qrcode/discussions/188&#34;&gt;this discussion thread&lt;/a&gt;. Thanks!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.php.net/supported-versions.php&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/php-v/chillerlan/php-qrcode?logo=php&amp;amp;color=8892BF&#34; alt=&#34;PHP Version Support&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/chillerlan/php-qrcode&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/chillerlan/php-qrcode.svg?logo=packagist&#34; alt=&#34;Packagist version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/chillerlan/php-qrcode/actions/workflows/ci.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/chillerlan/php-qrcode/ci.yml?branch=main&amp;amp;logo=github&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/chillerlan/php-qrcode/tree/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/chillerlan/php-qrcode/main?logo=codecov&#34; alt=&#34;CodeCov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/gh/chillerlan/php-qrcode/dashboard?branch=main&#34;&gt;&lt;img src=&#34;https://img.shields.io/codacy/grade/edccfc4fe5a34b74b1c53ee03f097b8d/main?logo=codacy&#34; alt=&#34;Codacy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/chillerlan/php-qrcode/stats&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/chillerlan/php-qrcode?logo=packagist&#34; alt=&#34;Packagist downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Attention:&lt;/strong&gt; there is now also a javascript port: &lt;a href=&#34;https://github.com/chillerlan/js-qrcode&#34;&gt;chillerlan/js-qrcode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creation of &lt;a href=&#34;https://www.qrcode.com/en/codes/model12.html&#34;&gt;Model 2 QR Codes&lt;/a&gt;, &lt;a href=&#34;https://www.qrcode.com/en/about/version.html&#34;&gt;Version 1 to 40&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qrcode.com/en/about/error_correction.html&#34;&gt;ECC Levels&lt;/a&gt; L/M/Q/H supported&lt;/li&gt; &#xA; &lt;li&gt;Mixed mode support (encoding modes can be combined within a QR symbol). Supported modes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;numeric&lt;/li&gt; &#xA;   &lt;li&gt;alphanumeric&lt;/li&gt; &#xA;   &lt;li&gt;8-bit binary&lt;/li&gt; &#xA;   &lt;li&gt;13-bit double-byte: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;kanji (Japanese, Shift-JIS)&lt;/li&gt; &#xA;     &lt;li&gt;hanzi (simplified Chinese, GB2312/GB18030) as &lt;a href=&#34;https://www.chinesestandard.net/PDF/English.aspx/GBT18284-2000&#34;&gt;defined in GBT18284-2000&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Flexible, easily extensible output modules, built-in support for the following output formats: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/book.image&#34;&gt;GdImage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/book.imagick&#34;&gt;ImageMagick&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Markup types: SVG, HTML, etc.&lt;/li&gt; &#xA;   &lt;li&gt;String types: JSON, plain text, etc.&lt;/li&gt; &#xA;   &lt;li&gt;Encapsulated Postscript (EPS)&lt;/li&gt; &#xA;   &lt;li&gt;PDF via &lt;a href=&#34;https://github.com/setasign/fpdf&#34;&gt;FPDF&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;QR Code reader (via GD and ImageMagick)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 7.4+ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/book.mbstring.php&#34;&gt;&lt;code&gt;ext-mbstring&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;optional: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/book.fileinfo.php&#34;&gt;&lt;code&gt;ext-fileinfo&lt;/code&gt;&lt;/a&gt; (required by &lt;code&gt;QRImagick&lt;/code&gt; output)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/book.image&#34;&gt;&lt;code&gt;ext-gd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/Imagick/imagick&#34;&gt;&lt;code&gt;ext-imagick&lt;/code&gt;&lt;/a&gt; with &lt;a href=&#34;https://imagemagick.org&#34;&gt;ImageMagick&lt;/a&gt; installed&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/setasign/fpdf&#34;&gt;&lt;code&gt;setasign/fpdf&lt;/code&gt;&lt;/a&gt; for the PDF output module&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the QRCode reader, either &lt;code&gt;ext-gd&lt;/code&gt; or &lt;code&gt;ext-imagick&lt;/code&gt; is required!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The user manual is at &lt;a href=&#34;https://php-qrcode.readthedocs.io/&#34;&gt;https://php-qrcode.readthedocs.io/&lt;/a&gt; (&lt;a href=&#34;https://github.com/chillerlan/php-qrcode/tree/main/docs&#34;&gt;sources&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;An API documentation created with &lt;a href=&#34;https://www.phpdoc.org/&#34;&gt;phpDocumentor&lt;/a&gt; can be found at &lt;a href=&#34;https://chillerlan.github.io/php-qrcode/&#34;&gt;https://chillerlan.github.io/php-qrcode/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The documentation for &lt;code&gt;QROptions&lt;/code&gt; container can be found here: &lt;a href=&#34;https://github.com/chillerlan/php-settings-container#readme&#34;&gt;chillerlan/php-settings-container&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation with &lt;a href=&#34;https://getcomposer.org&#34;&gt;composer&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://php-qrcode.readthedocs.io/en/main/Usage-Installation.html&#34;&gt;the installation guide&lt;/a&gt; for more info!&lt;/p&gt; &#xA;&lt;h3&gt;Terminal&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require chillerlan/php-qrcode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;composer.json&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;require&#34;: {&#xA;&#x9;&#x9;&#34;php&#34;: &#34;^7.4 || ^8.0&#34;,&#xA;&#x9;&#x9;&#34;chillerlan/php-qrcode&#34;: &#34;dev-main#&amp;lt;commit_hash&amp;gt;&#34;&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: replace &lt;code&gt;dev-main&lt;/code&gt; with a &lt;a href=&#34;https://getcomposer.org/doc/articles/versions.md#writing-version-constraints&#34;&gt;version constraint&lt;/a&gt;, e.g. &lt;code&gt;^4.3&lt;/code&gt; - see &lt;a href=&#34;https://github.com/chillerlan/php-qrcode/releases&#34;&gt;releases&lt;/a&gt; for valid versions.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;We want to encode this URI for a mobile authenticator into a QRcode image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$data = &#39;otpauth://totp/test?secret=B3JX4VCVJDVNXNZ5&amp;amp;issuer=chillerlan.net&#39;;&#xA;&#xA;// quick and simple:&#xA;echo &#39;&amp;lt;img src=&#34;&#39;.(new QRCode)-&amp;gt;render($data).&#39;&#34; alt=&#34;QR Code&#34; /&amp;gt;&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait, what was that? Please again, slower! See &lt;a href=&#34;https://php-qrcode.readthedocs.io/en/main/Usage-Advanced-usage.html&#34;&gt;Advanced usage&lt;/a&gt; in the manual. Also, have a look &lt;a href=&#34;https://github.com/chillerlan/php-qrcode/tree/main/examples&#34;&gt;in the examples folder&lt;/a&gt; for some more usage examples.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;QR codes are awesome!&#34; style=&#34;width: auto; height: 530px;&#34; src=&#34;https://raw.githubusercontent.com/chillerlan/php-qrcode/main/.github/images/example.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Reading QR Codes&lt;/h3&gt; &#xA;&lt;p&gt;Using the built-in QR Code reader is pretty straight-forward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// it&#39;s generally a good idea to wrap the reader in a try/catch block because it WILL throw eventually&#xA;try{&#xA;&#x9;$result = (new QRCode)-&amp;gt;readFromFile(&#39;path/to/file.png&#39;); // -&amp;gt; DecoderResult&#xA;&#xA;&#x9;// you can now use the result instance...&#xA;&#x9;$content = $result-&amp;gt;data;&#xA;&#x9;$matrix  = $result-&amp;gt;getMatrix(); // -&amp;gt; QRMatrix&#xA;&#xA;&#x9;// ...or simply cast it to string to get the content:&#xA;&#x9;$content = (string)$result;&#xA;}&#xA;catch(Throwable $e){&#xA;&#x9;// oopsies!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shameless advertising&lt;/h2&gt; &#xA;&lt;p&gt;Hi, please check out some of my other projects that are way cooler than qrcodes!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chillerlan/js-qrcode&#34;&gt;js-qrcode&lt;/a&gt; - a javascript port of this library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chillerlan/php-authenticator&#34;&gt;php-authenticator&lt;/a&gt; - a Google Authenticator implementation (see &lt;a href=&#34;https://github.com/chillerlan/php-qrcode/raw/main/examples/authenticator.php&#34;&gt;authenticator example&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chillerlan/php-httpinterface&#34;&gt;php-httpinterface&lt;/a&gt; - a PSR-7/15/17/18 implemetation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chillerlan/php-oauth-core&#34;&gt;php-oauth-core&lt;/a&gt; - an OAuth 1/2 client library along with a bunch of &lt;a href=&#34;https://github.com/chillerlan/php-oauth-providers&#34;&gt;providers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chillerlan/php-database&#34;&gt;php-database&lt;/a&gt; - a database client &amp;amp; querybuilder for MySQL, Postgres, SQLite, MSSQL, Firebird&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/php-tootbot/tootbot-template&#34;&gt;php-tootbot&lt;/a&gt; - a Mastodon bot library (see &lt;a href=&#34;https://github.com/php-tootbot/dwil&#34;&gt;@dwil&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer!&lt;/h2&gt; &#xA;&lt;p&gt;I don&#39;t take responsibility for molten CPUs, misled applications, failed log-ins etc.. Use at your own risk!&lt;/p&gt; &#xA;&lt;h3&gt;License notice&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parts of this code are &lt;a href=&#34;https://github.com/codemasher/php-qrcode-decoder&#34;&gt;ported to PHP&lt;/a&gt; from the &lt;a href=&#34;https://github.com/zxing/zxing&#34;&gt;ZXing project&lt;/a&gt; and licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/chillerlan/php-qrcode/main/NOTICE&#34;&gt;Apache License, Version 2.0&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chillerlan/php-qrcode/tree/main/docs&#34;&gt;The documentation&lt;/a&gt; is licensed under the &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons Attribution 4.0 International (CC BY 4.0) License&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Trademark Notice&lt;/h3&gt; &#xA;&lt;p&gt;The word &#34;QR Code&#34; is a registered trademark of &lt;em&gt;DENSO WAVE INCORPORATED&lt;/em&gt;&lt;br&gt; &lt;a href=&#34;https://www.qrcode.com/en/faq.html#patentH2Title&#34;&gt;https://www.qrcode.com/en/faq.html#patentH2Title&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>WordPress/WordPress-Coding-Standards</title>
    <updated>2023-08-27T02:01:59Z</updated>
    <id>tag:github.com,2023-08-27:/WordPress/WordPress-Coding-Standards</id>
    <link href="https://github.com/WordPress/WordPress-Coding-Standards" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP_CodeSniffer rules (sniffs) to enforce WordPress coding conventions&lt;/p&gt;&lt;hr&gt;&lt;div aria-hidden=&#34;true&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/wp-coding-standards/wpcs&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/wp-coding-standards/wpcs/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/WordPress/WordPress-Coding-Standards.svg?maxAge=1800&#34; alt=&#34;Release Date of the Latest Version&#34;&gt;&lt;/a&gt; &lt;span&gt;🚧&lt;/span&gt; &lt;a href=&#34;https://packagist.org/packages/wp-coding-standards/wpcs#dev-develop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/unstable-dev--develop-e68718.svg?maxAge=2419200&#34; alt=&#34;Latest Unstable Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/actions/workflows/basic-qa.yml&#34;&gt;&lt;img src=&#34;https://github.com/WordPress/WordPress-Coding-Standards/actions/workflows/basic-qa.yml/badge.svg?sanitize=true&#34; alt=&#34;Basic QA checks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/actions/workflows/unit-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/WordPress/WordPress-Coding-Standards/actions/workflows/unit-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/WordPress/WordPress-Coding-Standards?branch=develop&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/WordPress/WordPress-Coding-Standards/graph/badge.svg?token=UzFYn0RzVG&amp;amp;branch=develop&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/wp-coding-standards/wpcs&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/php-v/wp-coding-standards/wpcs.svg?maxAge=3600&#34; alt=&#34;Minimum PHP Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/actions/workflows/unit-tests.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/tested%20on-PHP%205.4%20%7C%205.5%20%7C%205.6%20%7C%207.0%20%7C%207.1%20%7C%207.2%20%7C%207.3%20%7C%207.4%20%7C%208.0%20%7C%208.1%20%7C%208.2%20%7C%208.3-green.svg?maxAge=2419200&#34; alt=&#34;Tested on PHP 5.4 to 8.3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/raw/develop/LICENSE&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/wp-coding-standards/wpcs/license&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/wp-coding-standards/wpcs/stats&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/wp-coding-standards/wpcs/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;WordPress Coding Standards for PHP_CodeSniffer&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#minimum-requirements&#34;&gt;Minimum Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#composer-project-based-installation&#34;&gt;Composer Project-based Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#composer-global-installation&#34;&gt;Composer Global Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#updating-your-wordpresscs-install-to-a-newer-version&#34;&gt;Updating your WordPressCS install to a newer version&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#using-your-wordpresscs-install&#34;&gt;Using your WordPressCS install&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#rulesets&#34;&gt;Rulesets&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#standards-subsets&#34;&gt;Standards subsets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#using-a-custom-ruleset&#34;&gt;Using a custom ruleset&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#customizing-sniff-behaviour&#34;&gt;Customizing sniff behaviour&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#recommended-additional-rulesets&#34;&gt;Recommended additional rulesets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#command-line&#34;&gt;Command line&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#using-phpcs-and-wordpresscs-from-within-your-ide&#34;&gt;Using PHPCS and WordPressCS from within your IDE&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#running-your-code-through-wordpresscs-automatically-using-continuous-integration-tools&#34;&gt;Running your code through WordPressCS automatically using Continuous Integration tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#fixing-errors-or-ignoring-them&#34;&gt;Fixing errors or ignoring them&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#tools-shipped-with-wordpresscs&#34;&gt;Tools shipped with WordPressCS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This project is a collection of &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;PHP_CodeSniffer&lt;/a&gt; rules (sniffs) to validate code developed for WordPress. It ensures code quality and adherence to coding conventions, especially the official &lt;a href=&#34;https://make.wordpress.org/core/handbook/best-practices/coding-standards/&#34;&gt;WordPress Coding Standards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Minimum Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The WordPress Coding Standards package requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 5.4 or higher with the following extensions enabled: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.php.net/book.filter&#34;&gt;Filter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.php.net/book.libxml&#34;&gt;libxml&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.php.net/book.tokenizer&#34;&gt;Tokenizer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.php.net/book.xmlreader&#34;&gt;XMLReader&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the best results, it is recommended to also ensure the following additional PHP extensions are enabled: - &lt;a href=&#34;https://www.php.net/book.iconv&#34;&gt;iconv&lt;/a&gt; - &lt;a href=&#34;https://www.php.net/book.mbstring&#34;&gt;Multibyte String&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;As of WordPressCS 3.0.0, installation via Composer using the below instructions is the only supported type of installation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; will automatically install the project dependencies and register the rulesets from WordPressCS and other external standards with PHP_CodeSniffer using the &lt;a href=&#34;https://github.com/PHPCSStandards/composer-installer&#34;&gt;Composer PHPCS plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are upgrading from an older WordPressCS version to version 3.0.0, please read the &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki/Upgrade-Guide-to-WordPressCS-3.0.0-for-ruleset-maintainers&#34;&gt;Upgrade guide for ruleset maintainers and end-users&lt;/a&gt; first!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Composer Project-based Installation&lt;/h3&gt; &#xA;&lt;p&gt;Run the following from the root of your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true&#xA;composer require --dev wp-coding-standards/wpcs:&#34;^3.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Composer Global Installation&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you may want to install this standard globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer global config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true&#xA;composer global require --dev wp-coding-standards/wpcs:&#34;^3.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating your WordPressCS install to a newer version&lt;/h3&gt; &#xA;&lt;p&gt;If you installed WordPressCS using either of the above commands, you can upgrade to a newer version as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Project local install&#xA;composer update wp-coding-standards/wpcs --with-dependencies&#xA;&#xA;# Global install&#xA;composer global update wp-coding-standards/wpcs --with-dependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using your WordPressCS install&lt;/h3&gt; &#xA;&lt;p&gt;Once you have installed WordPressCS using either of the above commands, use it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Project local install&#xA;vendor/bin/phpcs -ps . --standard=WordPress&#xA;&#xA;# Global install&#xA;%USER_DIRECTORY%/Composer/vendor/bin/phpcs -ps . --standard=WordPress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Pro-tip&lt;/strong&gt;: For the convenience of using &lt;code&gt;phpcs&lt;/code&gt; as a global command, use the &lt;em&gt;Global install&lt;/em&gt; method and add the path to the &lt;code&gt;%USER_DIRECTORY%/Composer/vendor/bin&lt;/code&gt; directory to the &lt;code&gt;PATH&lt;/code&gt; environment variable for your operating system.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Rulesets&lt;/h2&gt; &#xA;&lt;h3&gt;Standards subsets&lt;/h3&gt; &#xA;&lt;p&gt;The project encompasses a super-set of the sniffs that the WordPress community may need. If you use the &lt;code&gt;WordPress&lt;/code&gt; standard you will get all the checks.&lt;/p&gt; &#xA;&lt;p&gt;You can use the following as standard names when invoking &lt;code&gt;phpcs&lt;/code&gt; to select sniffs, fitting your needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WordPress&lt;/code&gt; - complete set with all of the sniffs in the project &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;WordPress-Core&lt;/code&gt; - main ruleset for &lt;a href=&#34;https://developer.wordpress.org/coding-standards/wordpress-coding-standards/php/&#34;&gt;WordPress core coding standards&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;WordPress-Docs&lt;/code&gt; - additional ruleset for &lt;a href=&#34;https://developer.wordpress.org/coding-standards/inline-documentation-standards/php/&#34;&gt;WordPress inline documentation standards&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;WordPress-Extra&lt;/code&gt; - extended ruleset with recommended best practices, not sufficiently covered in the WordPress core coding standards &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;includes &lt;code&gt;WordPress-Core&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using a custom ruleset&lt;/h3&gt; &#xA;&lt;p&gt;If you need to further customize the selection of sniffs for your project - you can create a custom ruleset file.&lt;/p&gt; &#xA;&lt;p&gt;When you name this file either &lt;code&gt;.phpcs.xml&lt;/code&gt;, &lt;code&gt;phpcs.xml&lt;/code&gt;, &lt;code&gt;.phpcs.xml.dist&lt;/code&gt; or &lt;code&gt;phpcs.xml.dist&lt;/code&gt;, PHP_CodeSniffer will automatically locate it as long as it is placed in the directory from which you run the CodeSniffer or in a directory above it. If you follow these naming conventions you don&#39;t have to supply a &lt;code&gt;--standard&lt;/code&gt; CLI argument.&lt;/p&gt; &#xA;&lt;p&gt;For more info, read about &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Advanced-Usage#using-a-default-configuration-file&#34;&gt;using a default configuration file&lt;/a&gt;. See also the provided WordPressCS &lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/phpcs.xml.dist.sample&#34;&gt;&lt;code&gt;phpcs.xml.dist.sample&lt;/code&gt;&lt;/a&gt; file and the &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml&#34;&gt;fully annotated example ruleset&lt;/a&gt; in the PHP_CodeSniffer documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing sniff behaviour&lt;/h3&gt; &#xA;&lt;p&gt;The WordPress Coding Standard contains a number of sniffs which are configurable. This means that you can turn parts of the sniff on or off, or change the behaviour by setting a property for the sniff in your custom &lt;code&gt;[.]phpcs.xml[.dist]&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;You can find a complete list of all the properties you can change for the WordPressCS sniffs in the &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;WordPressCS also uses sniffs from PHPCSExtra and from PHP_CodeSniffer itself. The &lt;a href=&#34;https://github.com/PHPCSStandards/PHPCSExtra&#34;&gt;README for PHPCSExtra&lt;/a&gt; contains information on the properties which can be set for the sniff from PHPCSExtra. Information on custom properties which can be set for sniffs from PHP_CodeSniffer can be found in the &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Customisable-Sniff-Properties&#34;&gt;PHP_CodeSniffer wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Recommended additional rulesets&lt;/h3&gt; &#xA;&lt;h4&gt;PHPCompatibility&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility&#34;&gt;PHPCompatibility&lt;/a&gt; ruleset and its subset &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityWP&#34;&gt;PHPCompatibilityWP&lt;/a&gt; come highly recommended. The &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility&#34;&gt;PHPCompatibility&lt;/a&gt; sniffs are designed to analyse your code for cross-version PHP compatibility.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityWP&#34;&gt;PHPCompatibilityWP&lt;/a&gt; ruleset is based on PHPCompatibility, but specifically crafted to prevent false positives for projects which expect to run within the context of WordPress, i.e. core, plugins and themes.&lt;/p&gt; &#xA;&lt;p&gt;Install either as a separate ruleset and run it separately against your code or add it to your custom ruleset, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;config name=&#34;testVersion&#34; value=&#34;7.0-&#34;/&amp;gt;&#xA;&amp;lt;rule ref=&#34;PHPCompatibilityWP&#34;&amp;gt;&#xA;    &amp;lt;include-pattern&amp;gt;*\.php$&amp;lt;/include-pattern&amp;gt;&#xA;&amp;lt;/rule&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whichever way you run it, do make sure you set the &lt;code&gt;testVersion&lt;/code&gt; to run the sniffs against. The &lt;code&gt;testVersion&lt;/code&gt; determines for which PHP versions you will receive compatibility information. The recommended setting for this at this moment is &lt;code&gt;7.0-&lt;/code&gt; to support the same PHP versions as WordPress Core supports.&lt;/p&gt; &#xA;&lt;p&gt;For more information about setting the &lt;code&gt;testVersion&lt;/code&gt;, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility#sniffing-your-code-for-compatibility-with-specific-php-versions&#34;&gt;PHPCompatibility: Sniffing your code for compatibility with specific PHP version(s)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility#using-a-custom-ruleset&#34;&gt;PHPCompatibility: Using a custom ruleset&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;VariableAnalysis&lt;/h4&gt; &#xA;&lt;p&gt;For some additional checks around (undefined/unused) variables, the &lt;a href=&#34;https://github.com/sirbrillig/phpcs-variable-analysis/&#34;&gt;&lt;code&gt;VariableAnalysis&lt;/code&gt;&lt;/a&gt; standard is a handy addition.&lt;/p&gt; &#xA;&lt;h4&gt;VIP Coding Standards&lt;/h4&gt; &#xA;&lt;p&gt;For those projects which deploy to the WordPress VIP platform, it is recommended to also use the &lt;a href=&#34;https://github.com/Automattic/VIP-Coding-Standards&#34;&gt;official WordPress VIP coding standards&lt;/a&gt; ruleset.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;Command line&lt;/h3&gt; &#xA;&lt;p&gt;Run the &lt;code&gt;phpcs&lt;/code&gt; command line tool on a given file or directory, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/phpcs --standard=WordPress wp-load.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will result in following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--------------------------------------------------------------------------------&#xA;FOUND 6 ERRORS AND 4 WARNINGS AFFECTING 5 LINES&#xA;--------------------------------------------------------------------------------&#xA;  36 | WARNING | error_reporting() can lead to full path disclosure.&#xA;  36 | WARNING | error_reporting() found. Changing configuration values at&#xA;     |         | runtime is strongly discouraged.&#xA;  52 | WARNING | Silencing errors is strongly discouraged. Use proper error&#xA;     |         | checking instead. Found: @file_exists( dirname(...&#xA;  52 | WARNING | Silencing errors is strongly discouraged. Use proper error&#xA;     |         | checking instead. Found: @file_exists( dirname(...&#xA;  75 | ERROR   | Overriding WordPress globals is prohibited. Found assignment&#xA;     |         | to $path&#xA;  78 | ERROR   | Detected usage of a possibly undefined superglobal array&#xA;     |         | index: $_SERVER[&#39;REQUEST_URI&#39;]. Use isset() or empty() to&#xA;     |         | check the index exists before using it&#xA;  78 | ERROR   | $_SERVER[&#39;REQUEST_URI&#39;] not unslashed before sanitization. Use&#xA;     |         | wp_unslash() or similar&#xA;  78 | ERROR   | Detected usage of a non-sanitized input variable:&#xA;     |         | $_SERVER[&#39;REQUEST_URI&#39;]&#xA; 104 | ERROR   | All output should be run through an escaping function (see the&#xA;     |         | Security sections in the WordPress Developer Handbooks), found&#xA;     |         | &#39;$die&#39;.&#xA; 104 | ERROR   | All output should be run through an escaping function (see the&#xA;     |         | Security sections in the WordPress Developer Handbooks), found&#xA;     |         | &#39;__&#39;.&#xA;--------------------------------------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using PHPCS and WordPressCS from within your IDE&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki&#34;&gt;wiki&lt;/a&gt; contains links to various in- and external tutorials about setting up WordPressCS to work in your IDE.&lt;/p&gt; &#xA;&lt;h2&gt;Running your code through WordPressCS automatically using Continuous Integration tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki/Running-in-GitHub-Actions&#34;&gt;Running in GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki/Running-in-Travis&#34;&gt;Running in Travis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fixing errors or ignoring them&lt;/h2&gt; &#xA;&lt;p&gt;You can find information on how to deal with some of the more frequent issues in the &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tools shipped with WordPressCS&lt;/h3&gt; &#xA;&lt;p&gt;Since version 1.2.0, WordPressCS has a special sniff category &lt;code&gt;Utils&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This sniff category contains some tools which, generally speaking, will only be needed to be run once over a codebase and for which the fixers can be considered &lt;em&gt;risky&lt;/em&gt;, i.e. very careful review by a developer is needed before accepting the fixes made by these sniffs.&lt;/p&gt; &#xA;&lt;p&gt;The sniffs in this category are disabled by default and can only be activated by adding some properties for each sniff via a custom ruleset.&lt;/p&gt; &#xA;&lt;p&gt;At this moment, WordPressCS offer the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WordPress.Utils.I18nTextDomainFixer&lt;/code&gt; - This sniff can replace the text domain used in a code-base. The sniff will fix the text domains in both I18n function calls as well as in a plugin/theme header. Passing the following properties will activate the sniff: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;old_text_domain&lt;/code&gt;: an array with one or more (old) text domain names which need to be replaced;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;new_text_domain&lt;/code&gt;: the correct (new) text domain as a string.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;, including information about &lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/.github/CONTRIBUTING.md#unit-testing&#34;&gt;unit testing&lt;/a&gt; the standard.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/LICENSE&#34;&gt;LICENSE&lt;/a&gt; (MIT).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>craftcms/cms</title>
    <updated>2023-08-27T02:01:59Z</updated>
    <id>tag:github.com,2023-08-27:/craftcms/cms</id>
    <link href="https://github.com/craftcms/cms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Craft is a flexible, extensible platform for creating bespoke digital experiences.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://craftcms.com/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;247&#34; height=&#34;60&#34; src=&#34;https://craftcms.com/craftcms.svg?sanitize=true&#34; alt=&#34;Craft CMS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;About Craft CMS&lt;/h2&gt; &#xA;&lt;p&gt;Craft is a flexible, user-friendly CMS for creating custom digital experiences on the web and beyond.&lt;/p&gt; &#xA;&lt;p&gt;It features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An intuitive, user-friendly control panel for content creation and administrative tasks.&lt;/li&gt; &#xA; &lt;li&gt;A clean-slate approach to content modeling that doesn’t make any assumptions about the content you need to manage.&lt;/li&gt; &#xA; &lt;li&gt;A fast and flexible &lt;a href=&#34;https://craftcms.com/docs/4.x/dev/twig-primer.html&#34;&gt;templating system&lt;/a&gt; based on Twig.&lt;/li&gt; &#xA; &lt;li&gt;An auto-generated &lt;a href=&#34;https://craftcms.com/docs/4.x/graphql.html&#34;&gt;GraphQL API&lt;/a&gt; for building headless applications.&lt;/li&gt; &#xA; &lt;li&gt;A powerful &lt;a href=&#34;https://craftcms.com/commerce&#34;&gt;ecommerce platform&lt;/a&gt; for building bespoke ecommerce experiences.&lt;/li&gt; &#xA; &lt;li&gt;A built-in Plugin Store with hundreds of free and commercial &lt;a href=&#34;https://plugins.craftcms.com/&#34;&gt;plugins&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A robust &lt;a href=&#34;https://craftcms.com/docs/4.x/extend/&#34;&gt;extension framework&lt;/a&gt; for advanced customization.&lt;/li&gt; &#xA; &lt;li&gt;An active, vibrant &lt;a href=&#34;https://craftcms.com/community&#34;&gt;community&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can learn more about it at &lt;a href=&#34;https://craftcms.com&#34;&gt;craftcms.com&lt;/a&gt;, or dive into the documentation at &lt;a href=&#34;https://craftcms.com/docs/4.x/&#34;&gt;craftcms.com/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tech Specs&lt;/h2&gt; &#xA;&lt;p&gt;Craft is a self-hosted PHP application. It can connect to MySQL and PostgreSQL for content storage. See &lt;a href=&#34;https://craftcms.com/docs/4.x/requirements.html&#34;&gt;Server Requirements&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Official&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://craftcms.com&#34;&gt;Website&lt;/a&gt;&lt;/strong&gt; — Welcome to Craft!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://craftcms.com/docs/getting-started-tutorial/&#34;&gt;Tutorial&lt;/a&gt;&lt;/strong&gt; — Build a blog with step-by-step instructions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://craftcms.com/docs/4.x/installation.html&#34;&gt;Installation&lt;/a&gt;&lt;/strong&gt; — Jump right in with Composer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://craftcms.com/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt; — Read the official docs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://craftcms.com/knowledge-base&#34;&gt;Knowledge Base&lt;/a&gt;&lt;/strong&gt; — Find answers to common problems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://craftcms.com/newsletter/subscribe&#34;&gt;Newsletter&lt;/a&gt;&lt;/strong&gt; — Get official news and community updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://craftcms.com/events&#34;&gt;Dot All&lt;/a&gt;&lt;/strong&gt; — Attend our annual conference.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/hashtag/craftcms&#34;&gt;#craftcms&lt;/a&gt;&lt;/strong&gt; — See the latest tweets about Craft.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://craftcms.com/discord&#34;&gt;Discord&lt;/a&gt;&lt;/strong&gt; — Meet the community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://craftcms.stackexchange.com/&#34;&gt;Stack Exchange&lt;/a&gt;&lt;/strong&gt; — Get help and help others.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://craftquest.io/&#34;&gt;CraftQuest&lt;/a&gt;&lt;/strong&gt; — Watch unlimited video lessons and courses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://nystudio107.com/blog&#34;&gt;nystudio107 Blog&lt;/a&gt;&lt;/strong&gt; — Learn Craft and modern web development.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>