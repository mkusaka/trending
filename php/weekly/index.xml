<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-28T01:40:59Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tecnickcom/TCPDF</title>
    <updated>2024-04-28T01:40:59Z</updated>
    <id>tag:github.com,2024-04-28:/tecnickcom/TCPDF</id>
    <link href="https://github.com/tecnickcom/TCPDF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official clone of PHP library to generate PDF documents and barcodes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TCPDF&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;PHP PDF Library&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;currency_code=GBP&amp;amp;business=paypal@tecnick.com&amp;amp;item_name=donation%20for%20TCPDF%20project&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-paypal-87ceeb.svg?sanitize=true&#34; alt=&#34;Donate via PayPal&#34;&gt;&lt;/a&gt; &lt;em&gt;Please consider supporting this project by making a donation via &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;currency_code=GBP&amp;amp;business=paypal@tecnick.com&amp;amp;item_name=donation%20for%20TCPDF%20project&#34;&gt;PayPal&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;category&lt;/strong&gt; Library&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;author&lt;/strong&gt; Nicola Asuni &lt;a href=&#34;mailto:info@tecnick.com&#34;&gt;info@tecnick.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;copyright&lt;/strong&gt; 2002-2024 Nicola Asuni - Tecnick.com LTD&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;license&lt;/strong&gt; &lt;a href=&#34;http://www.gnu.org/copyleft/lesser.html&#34;&gt;http://www.gnu.org/copyleft/lesser.html&lt;/a&gt; GNU-LGPL v3 (see LICENSE.TXT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;link&lt;/strong&gt; &lt;a href=&#34;http://www.tcpdf.org&#34;&gt;http://www.tcpdf.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;source&lt;/strong&gt; &lt;a href=&#34;https://github.com/tecnickcom/TCPDF&#34;&gt;https://github.com/tecnickcom/TCPDF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NOTE&lt;/h2&gt; &#xA;&lt;p&gt;A new version of this library is under development at &lt;a href=&#34;https://github.com/tecnickcom/tc-lib-pdf&#34;&gt;https://github.com/tecnickcom/tc-lib-pdf&lt;/a&gt; and as a consequence this library is in support only mode.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;PHP library for generating PDF documents on-the-fly.&lt;/p&gt; &#xA;&lt;h3&gt;Main Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no external libraries are required for the basic functions;&lt;/li&gt; &#xA; &lt;li&gt;all standard page formats, custom page formats, custom margins and units of measure;&lt;/li&gt; &#xA; &lt;li&gt;UTF-8 Unicode and Right-To-Left languages;&lt;/li&gt; &#xA; &lt;li&gt;TrueTypeUnicode, OpenTypeUnicode v1, TrueType, OpenType v1, Type1 and CID-0 fonts;&lt;/li&gt; &#xA; &lt;li&gt;font subsetting;&lt;/li&gt; &#xA; &lt;li&gt;methods to publish some XHTML + CSS code, Javascript and Forms;&lt;/li&gt; &#xA; &lt;li&gt;images, graphic (geometric figures) and transformation methods;&lt;/li&gt; &#xA; &lt;li&gt;supports JPEG, PNG and SVG images natively, all images supported by GD (GD, GD2, GD2PART, GIF, JPEG, PNG, BMP, XBM, XPM) and all images supported via ImagMagick (&lt;a href=&#34;http://www.imagemagick.org/script/formats.php&#34;&gt;http://www.imagemagick.org/script/formats.php&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;1D and 2D barcodes: CODE 39, ANSI MH10.8M-1983, USD-3, 3 of 9, CODE 93, USS-93, Standard 2 of 5, Interleaved 2 of 5, CODE 128 A/B/C, 2 and 5 Digits UPC-Based Extension, EAN 8, EAN 13, UPC-A, UPC-E, MSI, POSTNET, PLANET, RMS4CC (Royal Mail 4-state Customer Code), CBC (Customer Bar Code), KIX (Klant index - Customer index), Intelligent Mail Barcode, Onecode, USPS-B-3200, CODABAR, CODE 11, PHARMACODE, PHARMACODE TWO-TRACKS, Datamatrix, QR-Code, PDF417;&lt;/li&gt; &#xA; &lt;li&gt;JPEG and PNG ICC profiles, Grayscale, RGB, CMYK, Spot Colors and Transparencies;&lt;/li&gt; &#xA; &lt;li&gt;automatic page header and footer management;&lt;/li&gt; &#xA; &lt;li&gt;document encryption up to 256 bit and digital signature certifications;&lt;/li&gt; &#xA; &lt;li&gt;transactions to UNDO commands;&lt;/li&gt; &#xA; &lt;li&gt;PDF annotations, including links, text and file attachments;&lt;/li&gt; &#xA; &lt;li&gt;text rendering modes (fill, stroke and clipping);&lt;/li&gt; &#xA; &lt;li&gt;multiple columns mode;&lt;/li&gt; &#xA; &lt;li&gt;no-write page regions;&lt;/li&gt; &#xA; &lt;li&gt;bookmarks, named destinations and table of content;&lt;/li&gt; &#xA; &lt;li&gt;text hyphenation;&lt;/li&gt; &#xA; &lt;li&gt;text stretching and spacing (tracking);&lt;/li&gt; &#xA; &lt;li&gt;automatic page break, line break and text alignments including justification;&lt;/li&gt; &#xA; &lt;li&gt;automatic page numbering and page groups;&lt;/li&gt; &#xA; &lt;li&gt;move and delete pages;&lt;/li&gt; &#xA; &lt;li&gt;page compression (requires php-zlib extension);&lt;/li&gt; &#xA; &lt;li&gt;XOBject Templates;&lt;/li&gt; &#xA; &lt;li&gt;Layers and object visibility.&lt;/li&gt; &#xA; &lt;li&gt;PDF/A-1b support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Third party fonts:&lt;/h3&gt; &#xA;&lt;p&gt;This library may include third party font files released with different licenses.&lt;/p&gt; &#xA;&lt;p&gt;All the PHP files on the fonts directory are subject to the general TCPDF license (GNU-LGPLv3), they do not contain any binary data but just a description of the general properties of a particular font. These files can be also generated on the fly using the font utilities and TCPDF methods.&lt;/p&gt; &#xA;&lt;p&gt;All the original binary TTF font files have been renamed for compatibility with TCPDF and compressed using the gzcompress PHP function that uses the ZLIB data format (.z files).&lt;/p&gt; &#xA;&lt;p&gt;The binary files (.z) that begins with the prefix &#34;free&#34; have been extracted from the GNU FreeFont collection (GNU-GPLv3). The binary files (.z) that begins with the prefix &#34;pdfa&#34; have been derived from the GNU FreeFont, so they are subject to the same license. For the details of Copyright, License and other information, please check the files inside the directory fonts/freefont-20120503 Link : &lt;a href=&#34;http://www.gnu.org/software/freefont/&#34;&gt;http://www.gnu.org/software/freefont/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The binary files (.z) that begins with the prefix &#34;dejavu&#34; have been extracted from the DejaVu fonts 2.33 (Bitstream) collection. For the details of Copyright, License and other information, please check the files inside the directory fonts/dejavu-fonts-ttf-2.33 Link : &lt;a href=&#34;http://dejavu-fonts.org&#34;&gt;http://dejavu-fonts.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The binary files (.z) that begins with the prefix &#34;ae&#34; have been extracted from the Arabeyes.org collection (GNU-GPLv2). Link : &lt;a href=&#34;http://projects.arabeyes.org/&#34;&gt;http://projects.arabeyes.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ICC profile:&lt;/h3&gt; &#xA;&lt;p&gt;TCPDF includes the sRGB.icc profile from the icc-profiles-free Debian package: &lt;a href=&#34;https://packages.debian.org/source/stable/icc-profiles-free&#34;&gt;https://packages.debian.org/source/stable/icc-profiles-free&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developer(s) Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nicola Asuni &lt;a href=&#34;mailto:info@tecnick.com&#34;&gt;info@tecnick.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Anankke/SSPanel-UIM</title>
    <updated>2024-04-28T01:40:59Z</updated>
    <id>tag:github.com,2024-04-28:/Anankke/SSPanel-UIM</id>
    <link href="https://github.com/Anankke/SSPanel-UIM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-purpose proxy service management system&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anankke/SSPanel-UIM/dev/public/images/uim-logo-round_192x192.png&#34; alt=&#34;logo&#34; width=&#34;150&#34; height=&#34;150&#34; align=&#34;left&#34;&gt; &#xA;&lt;h1&gt;SSPanel UIM&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Across the Great Wall we can reach every corner in the world&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;TL;DR&lt;/h2&gt; &#xA;&lt;p&gt;SSPanel UIM is a multi-purpose proxy service management system designed for Shadowsocks(2022) / V2Ray / Trojan / TUIC protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrate multiple payment systems such as Alipay F2F, PayPal, Stripe, etc.&lt;/li&gt; &#xA; &lt;li&gt;Support multiple mail services, built-in mail queue function, no third-party components are required to use&lt;/li&gt; &#xA; &lt;li&gt;Built-in tabler theme based on Bootstrap 5, template engine support&lt;/li&gt; &#xA; &lt;li&gt;Support Shadowsocks 2022, TUIC, and other latest proxy protocols&lt;/li&gt; &#xA; &lt;li&gt;Universal subscription interface, one-click json/clash/sip008/sing-box format subscription distribution&lt;/li&gt; &#xA; &lt;li&gt;Custom node configuration, modular subscription system, support multiple client-specific subscription formats&lt;/li&gt; &#xA; &lt;li&gt;Refactored store system, support billing modes including but not limited to annual/monthly, pay-as-you-go, access type billing, etc.&lt;/li&gt; &#xA; &lt;li&gt;Refactored scheduled task system, one command can automatically complete all scheduled tasks&lt;/li&gt; &#xA; &lt;li&gt;Deep integration of large language models, support intelligent replies to tickets, document generation, and other functions&lt;/li&gt; &#xA; &lt;li&gt;One-click access to OpenAI, Google AI, Vertex AI, Hugging Face Hosted API, Cloudflare Workers AI, Anthropic, and other large language model services&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;SSPanel UIM requires the following programs to be installed and run normally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA; &lt;li&gt;Nginx（HTTPS is REQUIRED）&lt;/li&gt; &#xA; &lt;li&gt;PHP 8.2+ （OPcache+JIT is highly recommended）&lt;/li&gt; &#xA; &lt;li&gt;MariaDB 10.11+（Disable strict mode）&lt;/li&gt; &#xA; &lt;li&gt;Redis 7.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Developers&lt;/h2&gt; &#xA;&lt;h3&gt;Cat&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/catdev&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anankke/SSPanel-UIM/dev/.github/patreon.png&#34; width=&#34;300&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.vultr.com/?ref=8941355-8H&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anankke/SSPanel-UIM/dev/.github/vultr.png&#34; width=&#34;300&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/?refcode=50f1a3b6244c&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anankke/SSPanel-UIM/dev/.github/do.png&#34; width=&#34;300&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=SSPanel-UIM&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anankke/SSPanel-UIM/dev/.github/jetbrains.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Anankke/SSPanel-UIM/dev/blob/dev/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stripe/stripe-php</title>
    <updated>2024-04-28T01:40:59Z</updated>
    <id>tag:github.com,2024-04-28:/stripe/stripe-php</id>
    <link href="https://github.com/stripe/stripe-php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP library for the Stripe API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stripe PHP bindings&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stripe/stripe-php/actions?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/stripe/stripe-php/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/stripe/stripe-php&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/stripe/stripe-php/v/stable.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/stripe/stripe-php&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/stripe/stripe-php/downloads.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/stripe/stripe-php&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/stripe/stripe-php/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/stripe/stripe-php?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/stripe/stripe-php/badge.svg?branch=master&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Stripe PHP library provides convenient access to the Stripe API from applications written in the PHP language. It includes a pre-defined set of classes for API resources that initialize themselves dynamically from API responses which makes it compatible with a wide range of versions of the Stripe API.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;PHP 5.6.0 and later.&lt;/p&gt; &#xA;&lt;h2&gt;Composer&lt;/h2&gt; &#xA;&lt;p&gt;You can install the bindings via &lt;a href=&#34;http://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;. Run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require stripe/stripe-php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the bindings, use Composer&#39;s &lt;a href=&#34;https://getcomposer.org/doc/01-basic-usage.md#autoloading&#34;&gt;autoload&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once &#39;vendor/autoload.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you do not wish to use Composer, you can download the &lt;a href=&#34;https://github.com/stripe/stripe-php/releases&#34;&gt;latest release&lt;/a&gt;. Then, to use the bindings, include the &lt;code&gt;init.php&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once &#39;/path/to/stripe-php/init.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The bindings require the following extensions in order to work properly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://secure.php.net/manual/en/book.curl.php&#34;&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/a&gt;, although you can use your own non-cURL client if you prefer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://secure.php.net/manual/en/book.json.php&#34;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://secure.php.net/manual/en/book.mbstring.php&#34;&gt;&lt;code&gt;mbstring&lt;/code&gt;&lt;/a&gt; (Multibyte String)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use Composer, these dependencies should be handled automatically. If you install manually, you&#39;ll want to make sure that these extensions are available.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Simple usage looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$stripe = new \Stripe\StripeClient(&#39;sk_test_BQokikJOvBiI2HlWgH4olfQ2&#39;);&#xA;$customer = $stripe-&amp;gt;customers-&amp;gt;create([&#xA;    &#39;description&#39; =&amp;gt; &#39;example customer&#39;,&#xA;    &#39;email&#39; =&amp;gt; &#39;email@example.com&#39;,&#xA;    &#39;payment_method&#39; =&amp;gt; &#39;pm_card_visa&#39;,&#xA;]);&#xA;echo $customer;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Client/service patterns vs legacy patterns&lt;/h3&gt; &#xA;&lt;p&gt;You can continue to use the legacy integration patterns used prior to version &lt;a href=&#34;https://github.com/stripe/stripe-php/raw/master/CHANGELOG.md#7330---2020-05-14&#34;&gt;7.33.0&lt;/a&gt;. Review the &lt;a href=&#34;https://github.com/stripe/stripe-php/wiki/Migration-to-StripeClient-and-services-in-7.33.0&#34;&gt;migration guide&lt;/a&gt; for the backwards-compatible client/services pattern changes.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://stripe.com/docs/api/?lang=php#intro&#34;&gt;PHP API docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.youtube.com/playlist?list=PLy1nL-pvL2M6cUbiHrfMkXxZ9j9SGBxFE&#34;&gt;video demonstrations&lt;/a&gt; covering how to use the library.&lt;/p&gt; &#xA;&lt;h2&gt;Legacy Version Support&lt;/h2&gt; &#xA;&lt;h3&gt;PHP 5.4 &amp;amp; 5.5&lt;/h3&gt; &#xA;&lt;p&gt;If you are using PHP 5.4 or 5.5, you should consider upgrading your environment as those versions have been past end of life since September 2015 and July 2016 respectively. Otherwise, you can still use Stripe by downloading stripe-php v6.43.1 (&lt;a href=&#34;https://github.com/stripe/stripe-php/archive/v6.43.1.zip&#34;&gt;zip&lt;/a&gt;, &lt;a href=&#34;https://github.com/stripe/stripe-php/archive/6.43.1.tar.gz&#34;&gt;tar.gz&lt;/a&gt;) from our &lt;a href=&#34;https://github.com/stripe/stripe-php/releases&#34;&gt;releases page&lt;/a&gt;. This version will work but might not support recent features we added since the version was released and upgrading PHP is the best course of action.&lt;/p&gt; &#xA;&lt;h3&gt;PHP 5.3&lt;/h3&gt; &#xA;&lt;p&gt;If you are using PHP 5.3, you should upgrade your environment as this version has been past end of life since August 2014. Otherwise, you can download v5.9.2 (&lt;a href=&#34;https://github.com/stripe/stripe-php/archive/v5.9.2.zip&#34;&gt;zip&lt;/a&gt;, &lt;a href=&#34;https://github.com/stripe/stripe-php/archive/v5.9.2.tar.gz&#34;&gt;tar.gz&lt;/a&gt;) from our &lt;a href=&#34;https://github.com/stripe/stripe-php/releases&#34;&gt;releases page&lt;/a&gt;. This version will continue to work with new versions of the Stripe API for all common uses.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Request Timeouts&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; We do not recommend decreasing the timeout for non-read-only calls (e.g. charge creation), since even if you locally timeout, the request on Stripe&#39;s side can still complete. If you are decreasing timeouts on these calls, make sure to use &lt;a href=&#34;https://stripe.com/docs/api/?lang=php#idempotent_requests&#34;&gt;idempotency tokens&lt;/a&gt; to avoid executing the same transaction twice as a result of timeout retry logic.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To modify request timeouts (connect or total, in seconds) you&#39;ll need to tell the API client to use a CurlClient other than its default. You&#39;ll set the timeouts in that CurlClient.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// set up your tweaked Curl client&#xA;$curl = new \Stripe\HttpClient\CurlClient();&#xA;$curl-&amp;gt;setTimeout(10); // default is \Stripe\HttpClient\CurlClient::DEFAULT_TIMEOUT&#xA;$curl-&amp;gt;setConnectTimeout(5); // default is \Stripe\HttpClient\CurlClient::DEFAULT_CONNECT_TIMEOUT&#xA;&#xA;echo $curl-&amp;gt;getTimeout(); // 10&#xA;echo $curl-&amp;gt;getConnectTimeout(); // 5&#xA;&#xA;// tell Stripe to use the tweaked client&#xA;\Stripe\ApiRequestor::setHttpClient($curl);&#xA;&#xA;// use the Stripe API client as you normally would&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom cURL Options (e.g. proxies)&lt;/h2&gt; &#xA;&lt;p&gt;Need to set a proxy for your requests? Pass in the requisite &lt;code&gt;CURLOPT_*&lt;/code&gt; array to the CurlClient constructor, using the same syntax as &lt;code&gt;curl_stopt_array()&lt;/code&gt;. This will set the default cURL options for each HTTP request made by the SDK, though many more common options (e.g. timeouts; see above on how to set those) will be overridden by the client even if set here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// set up your tweaked Curl client&#xA;$curl = new \Stripe\HttpClient\CurlClient([CURLOPT_PROXY =&amp;gt; &#39;proxy.local:80&#39;]);&#xA;// tell Stripe to use the tweaked client&#xA;\Stripe\ApiRequestor::setHttpClient($curl);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternately, a callable can be passed to the CurlClient constructor that returns the above array based on request inputs. See &lt;code&gt;testDefaultOptions()&lt;/code&gt; in &lt;code&gt;tests/CurlClientTest.php&lt;/code&gt; for an example of this behavior. Note that the callable is called at the beginning of every API request, before the request is sent.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring a Logger&lt;/h3&gt; &#xA;&lt;p&gt;The library does minimal logging, but it can be configured with a &lt;a href=&#34;http://www.php-fig.org/psr/psr-3/&#34;&gt;&lt;code&gt;PSR-3&lt;/code&gt; compatible logger&lt;/a&gt; so that messages end up there instead of &lt;code&gt;error_log&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Stripe\Stripe::setLogger($logger);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing response data&lt;/h3&gt; &#xA;&lt;p&gt;You can access the data from the last API response on any object via &lt;code&gt;getLastResponse()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$customer = $stripe-&amp;gt;customers-&amp;gt;create([&#xA;    &#39;description&#39; =&amp;gt; &#39;example customer&#39;,&#xA;]);&#xA;echo $customer-&amp;gt;getLastResponse()-&amp;gt;headers[&#39;Request-Id&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSL / TLS compatibility issues&lt;/h3&gt; &#xA;&lt;p&gt;Stripe&#39;s API now requires that &lt;a href=&#34;https://stripe.com/blog/upgrading-tls&#34;&gt;all connections use TLS 1.2&lt;/a&gt;. Some systems (most notably some older CentOS and RHEL versions) are capable of using TLS 1.2 but will use TLS 1.0 or 1.1 by default. In this case, you&#39;d get an &lt;code&gt;invalid_request_error&lt;/code&gt; with the following error message: &#34;Stripe no longer supports API requests made with TLS 1.0. Please initiate HTTPS connections with TLS 1.2 or later. You can learn more about this at &lt;a href=&#34;https://stripe.com/blog/upgrading-tls&#34;&gt;https://stripe.com/blog/upgrading-tls&lt;/a&gt;.&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The recommended course of action is to &lt;a href=&#34;https://support.stripe.com/questions/how-do-i-upgrade-my-stripe-integration-from-tls-1-0-to-tls-1-2#php&#34;&gt;upgrade your cURL and OpenSSL packages&lt;/a&gt; so that TLS 1.2 is used by default, but if that is not possible, you might be able to solve the issue by setting the &lt;code&gt;CURLOPT_SSLVERSION&lt;/code&gt; option to either &lt;code&gt;CURL_SSLVERSION_TLSv1&lt;/code&gt; or &lt;code&gt;CURL_SSLVERSION_TLSv1_2&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$curl = new \Stripe\HttpClient\CurlClient([CURLOPT_SSLVERSION =&amp;gt; CURL_SSLVERSION_TLSv1]);&#xA;\Stripe\ApiRequestor::setHttpClient($curl);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Per-request Configuration&lt;/h3&gt; &#xA;&lt;p&gt;For apps that need to use multiple keys during the lifetime of a process, like one that uses &lt;a href=&#34;https://stripe.com/connect&#34;&gt;Stripe Connect&lt;/a&gt;, it&#39;s also possible to set a per-request key and/or account:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$customers = $stripe-&amp;gt;customers-&amp;gt;all([],[&#xA;    &#39;api_key&#39; =&amp;gt; &#39;sk_test_...&#39;,&#xA;    &#39;stripe_account&#39; =&amp;gt; &#39;acct_...&#39;&#xA;]);&#xA;&#xA;$stripe-&amp;gt;customers-&amp;gt;retrieve(&#39;cus_123456789&#39;, [], [&#xA;    &#39;api_key&#39; =&amp;gt; &#39;sk_test_...&#39;,&#xA;    &#39;stripe_account&#39; =&amp;gt; &#39;acct_...&#39;&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring CA Bundles&lt;/h3&gt; &#xA;&lt;p&gt;By default, the library will use its own internal bundle of known CA certificates, but it&#39;s possible to configure your own:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Stripe\Stripe::setCABundlePath(&#34;path/to/ca/bundle&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Automatic Retries&lt;/h3&gt; &#xA;&lt;p&gt;The library can be configured to automatically retry requests that fail due to an intermittent network problem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Stripe\Stripe::setMaxNetworkRetries(2);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stripe.com/docs/api/?lang=php#idempotent_requests&#34;&gt;Idempotency keys&lt;/a&gt; are added to requests to guarantee that retries are safe.&lt;/p&gt; &#xA;&lt;h3&gt;Telemetry&lt;/h3&gt; &#xA;&lt;p&gt;By default, the library sends telemetry to Stripe regarding request latency and feature usage. These numbers help Stripe improve the overall latency of its API for all users, and improve popular features.&lt;/p&gt; &#xA;&lt;p&gt;You can disable this behavior if you prefer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Stripe\Stripe::setEnableTelemetry(false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Beta SDKs&lt;/h3&gt; &#xA;&lt;p&gt;Stripe has features in the beta phase that can be accessed via the beta version of this package. We would love for you to try these and share feedback with us before these features reach the stable phase. Use the &lt;code&gt;composer require&lt;/code&gt; command with an exact version specified to install the beta version of the stripe-php pacakge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require stripe/stripe-php:v9.2.0-beta.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; There can be breaking changes between beta versions. Therefore we recommend pinning the package version to a specific beta version in your composer.json file. This way you can install the same version each time without breaking changes unless you are intentionally looking for the latest beta version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We highly recommend keeping an eye on when the beta feature you are interested in goes from beta to stable so that you can move from using a beta version of the SDK to the stable version.&lt;/p&gt; &#xA;&lt;p&gt;If your beta feature requires a &lt;code&gt;Stripe-Version&lt;/code&gt; header to be sent, set the &lt;code&gt;apiVersion&lt;/code&gt; property of &lt;code&gt;config&lt;/code&gt; object by using the function &lt;code&gt;addBetaVersion&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Stripe::addBetaVersion(&#34;feature_beta&#34;, &#34;v3&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;New features and bug fixes are released on the latest major version of the Stripe PHP library. If you are on an older major version, we recommend that you upgrade to the latest in order to use the new features and bug fixes including those for security vulnerabilities. Older major versions of the package will continue to be available for use, but will not be receiving any updates.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Get &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;. For example, on Mac OS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install composer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test suite depends on &lt;a href=&#34;https://github.com/stripe/stripe-mock&#34;&gt;stripe-mock&lt;/a&gt;, so make sure to fetch and run it from a background terminal (&lt;a href=&#34;https://github.com/stripe/stripe-mock&#34;&gt;stripe-mock&#39;s README&lt;/a&gt; also contains instructions for installing via Homebrew and other methods):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/stripe/stripe-mock@latest&#xA;stripe-mock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies as mentioned above (which will resolve &lt;a href=&#34;http://packagist.org/packages/phpunit/phpunit&#34;&gt;PHPUnit&lt;/a&gt;), then you can run the test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpunit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to run an individual test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpunit tests/Stripe/UtilTest.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update bundled CA certificates from the &lt;a href=&#34;http://curl.haxx.se/docs/caextract.html&#34;&gt;Mozilla cURL release&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./update_certs.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The library uses &lt;a href=&#34;https://github.com/FriendsOfPHP/PHP-CS-Fixer&#34;&gt;PHP CS Fixer&lt;/a&gt; for code formatting. Code must be formatted before PRs are submitted, otherwise CI will fail. Run the formatter with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/php-cs-fixer fix -v .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Attention plugin developers&lt;/h2&gt; &#xA;&lt;p&gt;Are you writing a plugin that integrates Stripe and embeds our library? Then please use the &lt;code&gt;setAppInfo&lt;/code&gt; function to identify your plugin. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Stripe\Stripe::setAppInfo(&#34;MyAwesomePlugin&#34;, &#34;1.2.34&#34;, &#34;https://myawesomeplugin.info&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The method should be called once, before any request is sent to the API. The second and third parameters are optional.&lt;/p&gt; &#xA;&lt;h3&gt;SSL / TLS configuration option&lt;/h3&gt; &#xA;&lt;p&gt;See the &#34;SSL / TLS compatibility issues&#34; paragraph above for full context. If you want to ensure that your plugin can be used on all systems, you should add a configuration option to let your users choose between different values for &lt;code&gt;CURLOPT_SSLVERSION&lt;/code&gt;: none (default), &lt;code&gt;CURL_SSLVERSION_TLSv1&lt;/code&gt; and &lt;code&gt;CURL_SSLVERSION_TLSv1_2&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>