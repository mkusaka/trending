<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-29T01:43:03Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tempestphp/tempest-framework</title>
    <updated>2025-06-29T01:43:03Z</updated>
    <id>tag:github.com,2025-06-29:/tempestphp/tempest-framework</id>
    <link href="https://github.com/tempestphp/tempest-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The PHP framework that gets out of your way&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://tempestphp.com&#34;&gt; &lt;img src=&#34;https://github.com/tempestphp/.github/raw/refs/heads/main/.github/tempest-logo.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Tempest&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Tempest is a community-driven, modern PHP framework that gets out of your way and dares to think outside the box. Read the &#xA; &lt;a href=&#34;https://tempestphp.com&#34;&gt;documentation&lt;/a&gt; to get started. &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Tempest is a PHP framework that &lt;em&gt;gets out of your way&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Its design philosophy is that developers should write as little framework-related code as possible, so that they can focus on application code instead.&lt;/p&gt; &#xA;&lt;p&gt;Zero config, zero overhead. This is Tempest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;final class BookController&#xA;{&#xA;    #[Get(&#39;/books/{book}&#39;)]&#xA;    public function show(Book $book): Response&#xA;    {&#xA;        return new Ok($book);&#xA;    }&#xA;&#xA;    #[Post(&#39;/books&#39;)]&#xA;    public function store(CreateBookRequest $request): Response&#xA;    {&#xA;        $book = map($request)-&amp;gt;to(Book::class)-&amp;gt;save();&#xA;&#xA;        return new Redirect([self::class, &#39;show&#39;], book: $book-&amp;gt;id);&#xA;    }&#xA;&#xA;    // …&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;final class MigrateUpCommand&#xA;{&#xA;    public function __construct(&#xA;        private Console $console,&#xA;        private MigrationManager $migrationManager,&#xA;    ) {}&#xA;&#xA;    #[ConsoleCommand(&#xA;        name: &#39;migrate:up&#39;,&#xA;        description: &#39;Run all new migrations&#39;,&#xA;        middleware: [ForceMiddleware::class, CautionMiddleware::class],&#xA;    )]&#xA;    public function __invoke(): void&#xA;    {&#xA;        $this-&amp;gt;migrationManager-&amp;gt;up();&#xA;&#xA;        $this-&amp;gt;console-&amp;gt;success(&#34;Everything migrated&#34;);&#xA;    }&#xA;&#xA;    #[EventHandler]&#xA;    public function onMigrationMigrated(MigrationMigrated $migrationMigrated): void&#xA;    {&#xA;        $this-&amp;gt;console-&amp;gt;writeln(&#34;- {$migrationMigrated-&amp;gt;name}&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read how to get started with Tempest &lt;a href=&#34;https://tempestphp.com&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Create a Tempest project from scratch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer create-project tempest/app &amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install Tempest in any existing project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require tempest/framework&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Continue to read how Tempest works in &lt;a href=&#34;https://tempestphp.com&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributing to Tempest! We only ask that you take a quick look at our &lt;a href=&#34;https://tempestphp.com/main/extra-topics/contributing&#34;&gt;guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An easy way to get started is to head on over to the issues page to see some ways you might help out.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;sub&gt; Check out the &lt;a href=&#34;https://tempestphp.com&#34;&gt;documentation&lt;/a&gt; &amp;nbsp; · &amp;nbsp; Join the &lt;a href=&#34;https://tempestphp.com/discord&#34;&gt;Discord&lt;/a&gt; server &lt;/sub&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>inspector-apm/neuron-ai</title>
    <updated>2025-06-29T01:43:03Z</updated>
    <id>tag:github.com,2025-06-29:/inspector-apm/neuron-ai</id>
    <link href="https://github.com/inspector-apm/neuron-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The PHP Agent Development Kit to build customizable, production-ready LLM applications. Connect components (models, vector DBs, file converters) to pipelines or agents that can interact with your data. With advanced retrieval methods, it&#39;s best suited for building RAG, question answering, semantic search or conversational agent chatbots&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Create Full-Featured AI Agents As Standalone Components In Any PHP Application&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/inspector-apm/neuron-ai&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/inspector-apm/neuron-ai/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/inspector-apm/neuron-ai&#34;&gt;&lt;img src=&#34;http://poser.pugx.org/inspector-apm/neuron-ai/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Before moving on, support the community giving a GitHub star ⭐️. Thank you!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fJSX8wWIDO8&#34;&gt;&lt;strong&gt;Video Tutorial&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fJSX8wWIDO8&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/docs/images/youtube.png&#34; alt=&#34;Neuron &amp;amp; Inspector&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP: ^8.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Official documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://neuron.inspector.dev/&#34;&gt;Go to the official documentation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Guides &amp;amp; Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;Check out the technical guides and tutorials archive to learn how to start creating your AI Agents with Neuron &lt;a href=&#34;https://docs.neuron-ai.dev/resources/guides-and-tutorials&#34;&gt;https://docs.neuron-ai.dev/resources/guides-and-tutorials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Neuron AI Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#create&#34;&gt;Create an Agent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#talk&#34;&gt;Talk to the Agent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#monitoring&#34;&gt;Monitoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#providers&#34;&gt;Supported LLM Providers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#tools&#34;&gt;Tools &amp;amp; Function Calls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#mcp&#34;&gt;MCP server connector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#rag&#34;&gt;Implement RAG systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#structured&#34;&gt;Structured Output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#documentation&#34;&gt;Official Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a name=&#34;install&#34;&gt; &lt;h2&gt;Install&lt;/h2&gt; &lt;p&gt;Install the latest version of the package:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;composer require inspector-apm/neuron-ai&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;a name=&#34;create&#34;&gt; &lt;h2&gt;Create an Agent&lt;/h2&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;create&#34;&gt;Neuron provides you with the Agent class you can extend to inherit the main features of the framework and create fully functional agents. This class automatically manages some advanced mechanisms for you, such as memory, tools and function calls, up to the RAG systems. You can go deeper into these aspects in the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev&#34;&gt;documentation&lt;/a&gt;. In the meantime, let&#39;s create the first agent, extending the &lt;code&gt;NeuronAI\Agent&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Neuron;&#xA;&#xA;use NeuronAI\Agent;&#xA;use NeuronAI\SystemPrompt;&#xA;use NeuronAI\Providers\AIProviderInterface;&#xA;use NeuronAI\Providers\Anthropic\Anthropic;&#xA;&#xA;class DataAnalystAgent extends Agent&#xA;{&#xA;    public function provider(): AIProviderInterface&#xA;    {&#xA;        return new Anthropic(&#xA;            key: &#39;ANTHROPIC_API_KEY&#39;,&#xA;            model: &#39;ANTHROPIC_MODEL&#39;,&#xA;        );&#xA;    }&#xA;&#xA;    public function instructions(): string&#xA;    {&#xA;        return new SystemPrompt(&#xA;            background: [&#xA;                &#34;You are a data analyst expert in creating reports from SQL databases.&#34;&#xA;            ]&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;SystemPrompt&lt;/code&gt; class is designed to take your base instructions and build a consistent prompt for the underlying model reducing the effort for prompt engineering.&lt;/p&gt; &#xA;&lt;a name=&#34;talk&#34;&gt; &lt;h2&gt;Talk to the Agent&lt;/h2&gt; &lt;p&gt;Send a prompt to the agent to get a response from the underlying LLM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;$agent = DataAnalystAgent::make();&#xA;&#xA;&#xA;$response = $agent-&amp;gt;chat(&#xA;    new UserMessage(&#34;Hi, I&#39;m Valerio. Who are you?&#34;)&#xA;);&#xA;echo $response-&amp;gt;getContent();&#xA;// I&#39;m a data analyst. How can I help you today?&#xA;&#xA;&#xA;$response = $agent-&amp;gt;chat(&#xA;    new UserMessage(&#34;Do you know my name?&#34;)&#xA;);&#xA;echo $response-&amp;gt;getContent();&#xA;// Your name is Valerio, as you said in your introduction.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;talk&#34;&gt;As you can see in the example above, the Agent automatically has memory of the ongoing conversation. Learn more about memory in the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev/chat-history-and-memory&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;monitoring&#34;&gt; &lt;h2&gt;Monitoring&lt;/h2&gt; &lt;p&gt;Integrating AI Agents into your application you’re not working only with functions and deterministic code, you program your agent also influencing probability distributions. Same input ≠ output. That means reproducibility, versioning, and debugging become real problems.&lt;/p&gt; &lt;p&gt;Many of the Agents you build with NeuronAI will contain multiple steps with multiple invocations of LLM calls, tool usage, access to external memories, etc. As these applications get more and more complex, it becomes crucial to be able to inspect what exactly your agent is doing and why.&lt;/p&gt; &lt;p&gt;Why is the model taking certain decisions? What data is the model reacting to? Prompting is not programming in the common sense. No static types, small changes break output, long prompts cost latency, and no two models behave exactly the same with the same prompt.&lt;/p&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;monitoring&#34;&gt;The best way to do this is with &lt;/a&gt;&lt;a href=&#34;https://inspector.dev&#34;&gt;Inspector&lt;/a&gt;. After you sign up, make sure to set the &lt;code&gt;INSPECTOR_INGESTION_KEY&lt;/code&gt; variable in the application environment file to start monitoring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dotenv&#34;&gt;INSPECTOR_INGESTION_KEY=fwe45gtxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After configuring the environment variable, you will see the agent execution timeline in your Inspector dashboard.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/docs/images/neuron-observability.avif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Learn more about Monitoring in the &lt;a href=&#34;https://docs.neuron-ai.dev/advanced/observability&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;providers&#34;&gt; &lt;h2&gt;Supported LLM Providers&lt;/h2&gt; &lt;p&gt;With NeuronAI, you can switch between LLM providers with just one line of code, without any impact on your agent implementation. Supported providers:&lt;/p&gt; &lt;/a&gt;&#xA;&lt;ul&gt;&#xA; &lt;a name=&#34;providers&#34;&gt; &lt;li&gt;Anthropic&lt;/li&gt; &lt;li&gt;Ollama (also available as an &lt;a href=&#34;https://docs.neuron-ai.dev/components/embeddings-provider#ollama&#34;&gt;embeddings provider&lt;/a&gt;)&lt;/li&gt;&lt;/a&gt; &#xA; &lt;li&gt;OpenAI (also available as an &lt;a href=&#34;https://docs.neuron-ai.dev/components/embeddings-provider#openai&#34;&gt;embeddings provider&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;OpenAI on Azure&lt;/li&gt; &#xA; &lt;li&gt;Gemini&lt;/li&gt; &#xA; &lt;li&gt;HuggingFace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a name=&#34;tools&#34;&gt; &lt;h2&gt;Tools &amp;amp; Toolkits&lt;/h2&gt; &lt;p&gt;You can add abilities to your agent to perform concrete tasks:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Neuron;&#xA;&#xA;use NeuronAI\Agent;&#xA;use NeuronAI\Providers\AIProviderInterface;&#xA;use NeuronAI\Providers\Anthropic\Anthropic;&#xA;use NeuronAI\SystemPrompt;&#xA;use NeuronAI\Tools\ToolProperty;&#xA;use NeuronAI\Tools\Tool;&#xA;use NeuronAI\Tools\Toolkits\MySQL\MySQLToolkit;&#xA;&#xA;class DataAnalystAgent extends Agent&#xA;{&#xA;    public function provider(): AIProviderInterface&#xA;    {&#xA;        return new Anthropic(&#xA;            key: &#39;ANTHROPIC_API_KEY&#39;,&#xA;            model: &#39;ANTHROPIC_MODEL&#39;,&#xA;        );&#xA;    }&#xA;&#xA;    public function instructions(): string&#xA;    {&#xA;        return new SystemPrompt(&#xA;            background: [&#xA;                &#34;You are a data analyst expert in creating reports from SQL databases.&#34;&#xA;            ]&#xA;        );&#xA;    }&#xA;&#xA;    public function tools(): array&#xA;    {&#xA;        return [&#xA;            MySQLToolkit:make(&#xA;                \DB::connection()-&amp;gt;getPdo()&#xA;            ),&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;tools&#34;&gt;Learn more about Tools in the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev/tools-and-function-calls&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;mcp&#34;&gt; &lt;h2&gt;MCP server connector&lt;/h2&gt; &lt;p&gt;Instead of implementing tools manually, you can connect tools exposed by an MCP server with the &lt;code&gt;McpConnector&lt;/code&gt; component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Neuron;&#xA;&#xA;use NeuronAI\Agent;&#xA;use NeuronAI\MCP\McpConnector;&#xA;use NeuronAI\Providers\AIProviderInterface;&#xA;use NeuronAI\Providers\Anthropic\Anthropic;&#xA;use NeuronAI\Tools\ToolProperty;&#xA;use NeuronAI\Tools\Tool;&#xA;&#xA;class DataAnalystAgent extends Agent&#xA;{&#xA;    public function provider(): AIProviderInterface&#xA;    {&#xA;        ...&#xA;    }&#xA;&#xA;    public function instructions(): string&#xA;    {&#xA;        ...&#xA;    }&#xA;&#xA;    public function tools(): array&#xA;    {&#xA;        return [&#xA;            // Connect to an MCP server&#xA;            ...McpConnector::make([&#xA;                &#39;command&#39; =&amp;gt; &#39;npx&#39;,&#xA;                &#39;args&#39; =&amp;gt; [&#39;-y&#39;, &#39;@modelcontextprotocol/server-everything&#39;],&#xA;            ])-&amp;gt;tools(),&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;mcp&#34;&gt;Learn more about MCP connector in the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev/advanced/mcp-servers-connection&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;rag&#34;&gt; &lt;h2&gt;Implement RAG systems&lt;/h2&gt; &lt;p&gt;For RAG use case, you must extend the &lt;code&gt;NeuronAI\RAG\RAG&lt;/code&gt; class instead of the default Agent class.&lt;/p&gt; &lt;p&gt;To create a RAG you need to attach some additional components other than the AI provider, such as a &lt;code&gt;vector store&lt;/code&gt;, and an &lt;code&gt;embeddings provider&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here is an example of a RAG implementation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Neuron;&#xA;&#xA;use NeuronAI\Providers\AIProviderInterface;&#xA;use NeuronAI\Providers\Anthropic\Anthropic;&#xA;use NeuronAI\RAG\Embeddings\EmbeddingsProviderInterface;&#xA;use NeuronAI\RAG\Embeddings\VoyageEmbeddingProvider;&#xA;use NeuronAI\RAG\RAG;&#xA;use NeuronAI\RAG\VectorStore\PineconeVectorStore;&#xA;use NeuronAI\RAG\VectorStore\VectorStoreInterface;&#xA;&#xA;class MyChatBot extends RAG&#xA;{&#xA;    public function provider(): AIProviderInterface&#xA;    {&#xA;        return new Anthropic(&#xA;            key: &#39;ANTHROPIC_API_KEY&#39;,&#xA;            model: &#39;ANTHROPIC_MODEL&#39;,&#xA;        );&#xA;    }&#xA;&#xA;    public function embeddings(): EmbeddingsProviderInterface&#xA;    {&#xA;        return new VoyageEmbeddingProvider(&#xA;            key: &#39;VOYAGE_API_KEY&#39;,&#xA;            model: &#39;VOYAGE_MODEL&#39;&#xA;        );&#xA;    }&#xA;&#xA;    public function vectorStore(): VectorStoreInterface&#xA;    {&#xA;        return new PineconeVectorStore(&#xA;            key: &#39;PINECONE_API_KEY&#39;,&#xA;            indexUrl: &#39;PINECONE_INDEX_URL&#39;&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;rag&#34;&gt;Learn more about RAG in the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev/rag&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;structured&#34;&gt; &lt;h2&gt;Structured Output&lt;/h2&gt; &lt;p&gt;For many applications, such as chatbots, Agents need to respond to users directly in natural language. However, there are scenarios where we need Agents to understand natural language, but output in a structured format.&lt;/p&gt; &lt;p&gt;One common use-case is extracting data from text to insert into a database or use with some other downstream system. This guide covers a few strategies for getting structured outputs from the agent.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use App\Neuron\MyAgent;&#xA;use NeuronAI\Chat\Messages\UserMessage;&#xA;use NeuronAI\StructuredOutput\SchemaProperty;&#xA;&#xA;/*&#xA; * Define the output structure as a PHP class.&#xA; */&#xA;class Person&#xA;{&#xA;    #[SchemaProperty(description: &#39;The user name&#39;)]&#xA;    public string $name;&#xA;&#xA;    #[SchemaProperty(description: &#39;What the user love to eat&#39;)]&#xA;    public string $preference;&#xA;}&#xA;&#xA;// Talk to the agent requiring the structured output&#xA;$person = MyAgent::make()-&amp;gt;structured(&#xA;    new UserMessage(&#34;I&#39;m John and I like pizza!&#34;),&#xA;    Person::class&#xA;);&#xA;&#xA;echo $person-&amp;gt;name &#39; like &#39;.$person-&amp;gt;preference;&#xA;// John like pizza&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;structured&#34;&gt;Learn more about Structured Output on the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev/advanced/structured-output&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;documentation&#34;&gt; &lt;h2&gt;Official documentation&lt;/h2&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;documentation&#34;&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&#34;https://neuron.inspector.dev/&#34;&gt;Go to the official documentation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FOGProject/fogproject</title>
    <updated>2025-06-29T01:43:03Z</updated>
    <id>tag:github.com,2025-06-29:/FOGProject/fogproject</id>
    <link href="https://github.com/FOGProject/fogproject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source computer cloning &amp; management system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FOGProject starting point&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;FOG is a free open-source cloning/imaging/rescue suite/inventory management system. FOG can be used to image Windows XP, Vista, Windows 7, Window 8/8.1, and Windows 10, Windows 11 PCs using PXE, PartClone, and a Web GUI to tie it together. Includes features like memory and disk test, disk wipe, av scan, task scheduling, inventory management, remote deployment of OS&#39;s, and remote installation of software packages. Features can be triggered through the web GUI, once the client machine has been registered with FOG.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning and branches&lt;/h2&gt; &#xA;&lt;p&gt;FOG uses a versioning schema that follows the general principles of semantic versioning with some adjustments to fit the development lifecycle. You can find the automatic release workflows in the &lt;a href=&#34;https://github.com/FOGProject/fog-workflows&#34;&gt;fog-workflows repo&lt;/a&gt; &lt;a href=&#34;https://github.com/FOGProject/fog-workflows/actions/workflows/stable-releases.yml&#34;&gt;&lt;img src=&#34;https://github.com/FOGProject/fog-workflows/actions/workflows/stable-releases.yml/badge.svg?sanitize=true&#34; alt=&#34;Stable Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default branch of &lt;code&gt;stable&lt;/code&gt; will always have the latest patch release, for most users this is where you want to install from.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;master&lt;/code&gt; branch has the baseline of the latest Minor release. You should not typically install from here as it won&#39;t include security patches released since the baseline was set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dev-branch&lt;/code&gt; is where the latest patch release changes are staged and tested. You can install from dev-branch to help test bug-fixes, security-fixes, and minor feature enhancements on a more frequent cadence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;working-*&lt;/code&gt; and &lt;code&gt;feature-named&lt;/code&gt; branches are where work on the next Major or Minor release take place. They can be used to install and test the current beta version or specific working features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This gives us a Production, Staging, and Dev branches to follow standard devops practices.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dev Cycle Stage&lt;/th&gt; &#xA;   &lt;th&gt;Branches&lt;/th&gt; &#xA;   &lt;th&gt;Version Property Associated&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Production&lt;/td&gt; &#xA;   &lt;td&gt;stable, master&lt;/td&gt; &#xA;   &lt;td&gt;Minor and Patch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Staging&lt;/td&gt; &#xA;   &lt;td&gt;dev-branch&lt;/td&gt; &#xA;   &lt;td&gt;Patch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dev&lt;/td&gt; &#xA;   &lt;td&gt;working-*, {feature-name}&lt;/td&gt; &#xA;   &lt;td&gt;Major, Minor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Version Format&lt;/h3&gt; &#xA;&lt;p&gt;Our versions are formatted in a x.x.x.x format like so:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;{CodeBaseMajor}.{Major}.{Minor}.{Patch}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version Property&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeBaseMajor&lt;/td&gt; &#xA;   &lt;td&gt;Major code baseline changes and API breaking changes, requires formal release&lt;/td&gt; &#xA;   &lt;td&gt;1.x.x.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Major&lt;/td&gt; &#xA;   &lt;td&gt;Major feature additions and UI changes, potential breaking changes within the same code base, requires formal release&lt;/td&gt; &#xA;   &lt;td&gt;1.5.x.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Minor&lt;/td&gt; &#xA;   &lt;td&gt;Non-breaking major feature enhancements, requires formal release&lt;/td&gt; &#xA;   &lt;td&gt;1.5.10.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Patch&lt;/td&gt; &#xA;   &lt;td&gt;On-going Bug and security fixes and feature enhancements, automated releases&lt;/td&gt; &#xA;   &lt;td&gt;1.5.10.41&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Install stable version&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Install and update your linux server distro&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the installation file(s)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;All that is needed to start installation is to download the files to perform the install. Choose one of the following methods you prefer;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;ZIP archive&lt;/strong&gt; &lt;code&gt;wget https://github.com/FOGProject/fogproject/archive/stable.zip; unzip stable.zip&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;TAR/GZ archive&lt;/strong&gt; &lt;code&gt;wget https://github.com/FOGProject/fogproject/archive/stable.tar.gz; tar xzf stable.tar.gz&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;git&lt;/strong&gt; &lt;code&gt;git clone https://github.com/fogproject/fogproject.git fogproject-stable&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run the install script &lt;strong&gt;as root&lt;/strong&gt; and follow all prompts accordingly&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo -i&#xA;cd /path/to/fogproject-stable/bin&#xA;./installfog.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;You should now be ready to use FOG&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Install latest development version&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Install and update your linux server distro&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the installation file(s)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;All that is needed to start the installation is to download the files to perform the install. Choose one of the following methods you prefer;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;git&lt;/strong&gt; &lt;code&gt;git clone https://github.com/fogproject/fogproject.git fogproject-dev-branch; cd fogproject-dev-branch; git checkout dev-branch&lt;/code&gt; (&lt;strong&gt;recommended if you want to keep up with current developments!&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;ZIP archive&lt;/strong&gt; &lt;code&gt;wget https://github.com/FOGProject/fogproject/archive/dev-branch.zip; unzip dev-branch.zip&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;TAR/GZ archive&lt;/strong&gt; &lt;code&gt;wget https://github.com/FOGProject/fogproject/archive/dev-branch.tar.gz; tar xzf dev-branch.tar.gz&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run the install script &lt;strong&gt;as root&lt;/strong&gt; and follow all prompts accordingly&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo -i&#xA;cd /path/to/fogproject-dev-branch/bin&#xA;./installfog.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;You should now be ready to use FOG&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;All should now be installed and you can start configuring and registering systems. Please see: &lt;a href=&#34;http://fogproject.org/wiki/index.php/Managing_FOG&#34;&gt;http://fogproject.org/wiki/index.php/Managing_FOG&lt;/a&gt; to assist you in setting up further.&lt;/p&gt; &#xA;&lt;p&gt;There are many resources for assistance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;docs:&lt;/strong&gt; &lt;a href=&#34;https://docs.fogproject.org&#34;&gt;https://docs.fogproject.org&lt;/a&gt; for documentation. (New docs, under construction)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wiki:&lt;/strong&gt; &lt;a href=&#34;http://fogproject.org/wiki&#34;&gt;http://fogproject.org/wiki&lt;/a&gt; for any information. (Legacy docs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Forum:&lt;/strong&gt; &lt;a href=&#34;http://fogproject.org/forum&#34;&gt;http://fogproject.org/forum&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; A Developer directly. If a dev permits a change, they can have themselves added on the wiki/Credits page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Download the source with git and checkout the branch &lt;code&gt;dev-branch&lt;/code&gt; for the latest code or a more specific feature branch you would like to help work on.&lt;/p&gt; &#xA;&lt;p&gt;For further details please check out the &lt;a href=&#34;https://raw.githubusercontent.com/FOGProject/fogproject/stable/CONTRIBUTING.md&#34;&gt;information on contributing to the project&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>