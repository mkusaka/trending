<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T02:02:55Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>moodle/moodle</title>
    <updated>2022-06-04T02:02:55Z</updated>
    <id>tag:github.com,2022-06-04:/moodle/moodle</id>
    <link href="https://github.com/moodle/moodle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Moodle - the world&#39;s open source learning platform&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;                             .-..-.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;_____ | || | /___&lt;em&gt;/-.---&lt;/em&gt; .---. .---. .-.| || | .---. | | _ _ |/ _ / _ / _ || |/ __ \&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;| | | | | || |&lt;em&gt;| || |&lt;/em&gt;| || |&lt;em&gt;| || || |&lt;/em&gt;&lt;em&gt;&lt;em&gt;/ |&lt;/em&gt;| |&lt;/em&gt;| |&lt;em&gt;|_&lt;/em&gt;&lt;em&gt;&lt;strong&gt;/_&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;/_&lt;/em&gt;&lt;strong&gt;&lt;em&gt;||&lt;/em&gt;|_&lt;/strong&gt;__)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Moodle - the world&#39;s open source learning platform&lt;/p&gt; &#xA;&lt;p&gt;Moodle &lt;a href=&#34;https://moodle.org&#34;&gt;https://moodle.org&lt;/a&gt; is a learning platform designed to provide educators, administrators and learners with a single robust, secure and integrated system to create personalised learning environments.&lt;/p&gt; &#xA;&lt;p&gt;You can download Moodle &lt;a href=&#34;https://download.moodle.org&#34;&gt;https://download.moodle.org&lt;/a&gt; and run it on your own web server, ask one of our Moodle Partners &lt;a href=&#34;https://moodle.com/partners/&#34;&gt;https://moodle.com/partners/&lt;/a&gt; to assist you, or have a MoodleCloud site &lt;a href=&#34;https://moodle.com/cloud/&#34;&gt;https://moodle.com/cloud/&lt;/a&gt; set up for you.&lt;/p&gt; &#xA;&lt;p&gt;Moodle is widely used around the world by universities, schools, companies and all manner of organisations and individuals.&lt;/p&gt; &#xA;&lt;p&gt;Moodle is provided freely as open source software, under the GNU General Public License &lt;a href=&#34;https://docs.moodle.org/dev/License&#34;&gt;https://docs.moodle.org/dev/License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Moodle is written in PHP and JavaScript and uses an SQL database for storing the data.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.moodle.org&#34;&gt;https://docs.moodle.org&lt;/a&gt; for details of Moodle&#39;s many features.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>briannesbitt/Carbon</title>
    <updated>2022-06-04T02:02:55Z</updated>
    <id>tag:github.com,2022-06-04:/briannesbitt/Carbon</id>
    <link href="https://github.com/briannesbitt/Carbon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple PHP API extension for DateTime.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Carbon&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/nesbot/carbon&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/nesbot/carbon.svg?style=flat-square&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/nesbot/carbon&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/nesbot/carbon.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/briannesbitt/Carbon/goto&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fbriannesbitt%2FCarbon%2Fbadge&amp;amp;style=flat-square&amp;amp;label=Build&amp;amp;logo=none&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/briannesbitt/Carbon?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/briannesbitt/Carbon.svg?style=flat-square&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tidelift.com/subscription/pkg/packagist-nesbot-carbon?utm_source=packagist-nesbot-carbon&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://tidelift.com/badges/github/briannesbitt/Carbon&#34; alt=&#34;Tidelift&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An international PHP extension for DateTime. &lt;a href=&#34;https://carbon.nesbot.com&#34;&gt;https://carbon.nesbot.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Carbon\Carbon;&#xA;&#xA;printf(&#34;Right now is %s&#34;, Carbon::now()-&amp;gt;toDateTimeString());&#xA;printf(&#34;Right now in Vancouver is %s&#34;, Carbon::now(&#39;America/Vancouver&#39;));  //implicit __toString()&#xA;$tomorrow = Carbon::now()-&amp;gt;addDay();&#xA;$lastWeek = Carbon::now()-&amp;gt;subWeek();&#xA;$nextSummerOlympics = Carbon::createFromDate(2016)-&amp;gt;addYears(4);&#xA;&#xA;$officialDate = Carbon::now()-&amp;gt;toRfc2822String();&#xA;&#xA;$howOldAmI = Carbon::createFromDate(1975, 5, 21)-&amp;gt;age;&#xA;&#xA;$noonTodayLondonTime = Carbon::createFromTime(12, 0, 0, &#39;Europe/London&#39;);&#xA;&#xA;$internetWillBlowUpOn = Carbon::create(2038, 01, 19, 3, 14, 7, &#39;GMT&#39;);&#xA;&#xA;// Don&#39;t really want this to happen so mock now&#xA;Carbon::setTestNow(Carbon::createFromDate(2000, 1, 1));&#xA;&#xA;// comparisons are always done in UTC&#xA;if (Carbon::now()-&amp;gt;gte($internetWillBlowUpOn)) {&#xA;    die();&#xA;}&#xA;&#xA;// Phew! Return to normal behaviour&#xA;Carbon::setTestNow();&#xA;&#xA;if (Carbon::now()-&amp;gt;isWeekend()) {&#xA;    echo &#39;Party!&#39;;&#xA;}&#xA;// Over 200 languages (and over 500 regional variants) supported:&#xA;echo Carbon::now()-&amp;gt;subMinutes(2)-&amp;gt;diffForHumans(); // &#39;2 minutes ago&#39;&#xA;echo Carbon::now()-&amp;gt;subMinutes(2)-&amp;gt;locale(&#39;zh_CN&#39;)-&amp;gt;diffForHumans(); // &#39;2分钟前&#39;&#xA;echo Carbon::parse(&#39;2019-07-23 14:51&#39;)-&amp;gt;isoFormat(&#39;LLLL&#39;); // &#39;Tuesday, July 23, 2019 2:51 PM&#39;&#xA;echo Carbon::parse(&#39;2019-07-23 14:51&#39;)-&amp;gt;locale(&#39;fr_FR&#39;)-&amp;gt;isoFormat(&#39;LLLL&#39;); // &#39;mardi 23 juillet 2019 14:51&#39;&#xA;&#xA;// ... but also does &#39;from now&#39;, &#39;after&#39; and &#39;before&#39;&#xA;// rolling up to seconds, minutes, hours, days, months, years&#xA;&#xA;$daysSinceEpoch = Carbon::createFromTimestamp(0)-&amp;gt;diffInDays();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tidelift.com/subscription/pkg/packagist-nesbot-carbon?utm_source=packagist-nesbot-carbon&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;Get supported nesbot/carbon with the Tidelift Subscription&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;With Composer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ composer require nesbot/carbon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;require&#34;: {&#xA;        &#34;nesbot/carbon&#34;: &#34;^2.16&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;require &#39;vendor/autoload.php&#39;;&#xA;&#xA;use Carbon\Carbon;&#xA;&#xA;printf(&#34;Now: %s&#34;, Carbon::now());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Without Composer&lt;/h3&gt; &#xA;&lt;p&gt;Why are you not using &lt;a href=&#34;https://getcomposer.org/&#34;&gt;composer&lt;/a&gt;? Download the Carbon &lt;a href=&#34;https://github.com/briannesbitt/Carbon/releases&#34;&gt;latest release&lt;/a&gt; and put the contents of the ZIP archive into a directory in your project. Then require the file &lt;code&gt;autoload.php&lt;/code&gt; to get all classes and dependencies loaded on need.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;require &#39;path-to-Carbon-directory/autoload.php&#39;;&#xA;&#xA;use Carbon\Carbon;&#xA;&#xA;printf(&#34;Now: %s&#34;, Carbon::now());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://carbon.nesbot.com/docs&#34;&gt;https://carbon.nesbot.com/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Security contact information&lt;/h2&gt; &#xA;&lt;p&gt;To report a security vulnerability, please use the &lt;a href=&#34;https://tidelift.com/security&#34;&gt;Tidelift security contact&lt;/a&gt;. Tidelift will coordinate the fix and disclosure.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/briannesbitt/Carbon/graphs/contributors&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Carbon/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Translators&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://carbon.nesbot.com/contribute/translators/&#34;&gt;Thanks to people helping us to translate Carbon in so many languages&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tidelift.com/subscription/pkg/packagist-nesbot-carbon?utm_source=packagist-nesbot-carbon&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://carbon.nesbot.com/tidelift-brand.png&#34; width=&#34;256&#34; height=&#34;64&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://onlinecasinohex.ca/?utm_source=opencollective&amp;amp;utm_medium=github&amp;amp;utm_campaign=Carbon&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://images.opencollective.com/hexcasinoca/2da3af2/logo/256.png&#34; width=&#34;85&#34; height=&#34;64&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/Carbon/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Carbon/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/Carbon/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Carbon/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/Carbon/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Carbon/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/Carbon/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Carbon/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/Carbon/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Carbon/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/Carbon/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Carbon/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/Carbon/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Carbon/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/Carbon/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Carbon/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/Carbon/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Carbon/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://opencollective.com/Carbon#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/Carbon#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Carbon/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://opencollective.com/Carbon#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h2&gt;Carbon for enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of &lt;code&gt;Carbon&lt;/code&gt; and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/packagist-nesbot-carbon?utm_source=packagist-nesbot-carbon&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nikic/PHP-Parser</title>
    <updated>2022-06-04T02:02:55Z</updated>
    <id>tag:github.com,2022-06-04:/nikic/PHP-Parser</id>
    <link href="https://github.com/nikic/PHP-Parser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PHP parser written in PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHP Parser&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/github/nikic/PHP-Parser?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/nikic/PHP-Parser/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a PHP 5.2 to PHP 8.1 parser written in PHP. Its purpose is to simplify static code analysis and manipulation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nikic/PHP-Parser/tree/master/doc&#34;&gt;&lt;strong&gt;Documentation for version 4.x&lt;/strong&gt;&lt;/a&gt; (stable; for running on PHP &amp;gt;= 7.0; for parsing PHP 5.2 to PHP 8.1).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nikic/PHP-Parser/tree/3.x/doc&#34;&gt;Documentation for version 3.x&lt;/a&gt; (unsupported; for running on PHP &amp;gt;= 5.5; for parsing PHP 5.2 to PHP 7.2).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The main features provided by this library are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parsing PHP 5, PHP 7, and PHP 8 code into an abstract syntax tree (AST). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Invalid code can be parsed into a partial AST.&lt;/li&gt; &#xA;   &lt;li&gt;The AST contains accurate location information.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dumping the AST in human-readable form.&lt;/li&gt; &#xA; &lt;li&gt;Converting an AST back to PHP code. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Experimental: Formatting can be preserved for partially changed ASTs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Infrastructure to traverse and modify ASTs.&lt;/li&gt; &#xA; &lt;li&gt;Resolution of namespaced names.&lt;/li&gt; &#xA; &lt;li&gt;Evaluation of constant expressions.&lt;/li&gt; &#xA; &lt;li&gt;Builders to simplify AST construction for code generation.&lt;/li&gt; &#xA; &lt;li&gt;Converting an AST into JSON and back.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Install the library using &lt;a href=&#34;https://getcomposer.org&#34;&gt;composer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php composer.phar require nikic/php-parser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parse some PHP code into an AST and dump the result in human-readable form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;use PhpParser\Error;&#xA;use PhpParser\NodeDumper;&#xA;use PhpParser\ParserFactory;&#xA;&#xA;$code = &amp;lt;&amp;lt;&amp;lt;&#39;CODE&#39;&#xA;&amp;lt;?php&#xA;&#xA;function test($foo)&#xA;{&#xA;    var_dump($foo);&#xA;}&#xA;CODE;&#xA;&#xA;$parser = (new ParserFactory)-&amp;gt;create(ParserFactory::PREFER_PHP7);&#xA;try {&#xA;    $ast = $parser-&amp;gt;parse($code);&#xA;} catch (Error $error) {&#xA;    echo &#34;Parse error: {$error-&amp;gt;getMessage()}\n&#34;;&#xA;    return;&#xA;}&#xA;&#xA;$dumper = new NodeDumper;&#xA;echo $dumper-&amp;gt;dump($ast) . &#34;\n&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This dumps an AST looking something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;array(&#xA;    0: Stmt_Function(&#xA;        byRef: false&#xA;        name: Identifier(&#xA;            name: test&#xA;        )&#xA;        params: array(&#xA;            0: Param(&#xA;                type: null&#xA;                byRef: false&#xA;                variadic: false&#xA;                var: Expr_Variable(&#xA;                    name: foo&#xA;                )&#xA;                default: null&#xA;            )&#xA;        )&#xA;        returnType: null&#xA;        stmts: array(&#xA;            0: Stmt_Expression(&#xA;                expr: Expr_FuncCall(&#xA;                    name: Name(&#xA;                        parts: array(&#xA;                            0: var_dump&#xA;                        )&#xA;                    )&#xA;                    args: array(&#xA;                        0: Arg(&#xA;                            value: Expr_Variable(&#xA;                                name: foo&#xA;                            )&#xA;                            byRef: false&#xA;                            unpack: false&#xA;                        )&#xA;                    )&#xA;                )&#xA;            )&#xA;        )&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s traverse the AST and perform some kind of modification. For example, drop all function bodies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use PhpParser\Node;&#xA;use PhpParser\Node\Stmt\Function_;&#xA;use PhpParser\NodeTraverser;&#xA;use PhpParser\NodeVisitorAbstract;&#xA;&#xA;$traverser = new NodeTraverser();&#xA;$traverser-&amp;gt;addVisitor(new class extends NodeVisitorAbstract {&#xA;    public function enterNode(Node $node) {&#xA;        if ($node instanceof Function_) {&#xA;            // Clean out the function body&#xA;            $node-&amp;gt;stmts = [];&#xA;        }&#xA;    }&#xA;});&#xA;&#xA;$ast = $traverser-&amp;gt;traverse($ast);&#xA;echo $dumper-&amp;gt;dump($ast) . &#34;\n&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives us an AST where the &lt;code&gt;Function_::$stmts&lt;/code&gt; are empty:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;array(&#xA;    0: Stmt_Function(&#xA;        byRef: false&#xA;        name: Identifier(&#xA;            name: test&#xA;        )&#xA;        params: array(&#xA;            0: Param(&#xA;                type: null&#xA;                byRef: false&#xA;                variadic: false&#xA;                var: Expr_Variable(&#xA;                    name: foo&#xA;                )&#xA;                default: null&#xA;            )&#xA;        )&#xA;        returnType: null&#xA;        stmts: array(&#xA;        )&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, we can convert the new AST back to PHP code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use PhpParser\PrettyPrinter;&#xA;&#xA;$prettyPrinter = new PrettyPrinter\Standard;&#xA;echo $prettyPrinter-&amp;gt;prettyPrintFile($ast);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives us our original code, minus the &lt;code&gt;var_dump()&lt;/code&gt; call inside the function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;function test($foo)&#xA;{&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more comprehensive introduction, see the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/0_Introduction.markdown&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/2_Usage_of_basic_components.markdown&#34;&gt;Usage of basic components&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Component documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/component/Walking_the_AST.markdown&#34;&gt;Walking the AST&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Node visitors&lt;/li&gt; &#xA;   &lt;li&gt;Modifying the AST from a visitor&lt;/li&gt; &#xA;   &lt;li&gt;Short-circuiting traversals&lt;/li&gt; &#xA;   &lt;li&gt;Interleaved visitors&lt;/li&gt; &#xA;   &lt;li&gt;Simple node finding API&lt;/li&gt; &#xA;   &lt;li&gt;Parent and sibling references&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/component/Name_resolution.markdown&#34;&gt;Name resolution&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Name resolver options&lt;/li&gt; &#xA;   &lt;li&gt;Name resolution context&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/component/Pretty_printing.markdown&#34;&gt;Pretty printing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Converting AST back to PHP code&lt;/li&gt; &#xA;   &lt;li&gt;Customizing formatting&lt;/li&gt; &#xA;   &lt;li&gt;Formatting-preserving code transformations&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/component/AST_builders.markdown&#34;&gt;AST builders&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fluent builders for AST nodes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/component/Lexer.markdown&#34;&gt;Lexer&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lexer options&lt;/li&gt; &#xA;   &lt;li&gt;Token and file positions for nodes&lt;/li&gt; &#xA;   &lt;li&gt;Custom attributes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/component/Error_handling.markdown&#34;&gt;Error handling&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Column information for errors&lt;/li&gt; &#xA;   &lt;li&gt;Error recovery (parsing of syntactically incorrect code)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/component/Constant_expression_evaluation.markdown&#34;&gt;Constant expression evaluation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Evaluating constant/property/etc initializers&lt;/li&gt; &#xA;   &lt;li&gt;Handling errors and unsupported expressions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/component/JSON_representation.markdown&#34;&gt;JSON representation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JSON encoding and decoding of ASTs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/component/Performance.markdown&#34;&gt;Performance&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Disabling Xdebug&lt;/li&gt; &#xA;   &lt;li&gt;Reusing objects&lt;/li&gt; &#xA;   &lt;li&gt;Garbage collection impact&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikic/PHP-Parser/master/doc/component/FAQ.markdown&#34;&gt;Frequently asked questions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parent and sibling references&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>