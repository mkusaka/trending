<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:02:38Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SpartnerNL/Laravel-Excel</title>
    <updated>2022-06-02T02:02:38Z</updated>
    <id>tag:github.com,2022-06-02:/SpartnerNL/Laravel-Excel</id>
    <link href="https://github.com/SpartnerNL/Laravel-Excel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀 Supercharged Excel exports and imports in Laravel&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- XMAS: https://user-images.githubusercontent.com/7728097/146406114-a5f5e13a-e2ee-47a2-9bf9-ad43cdbdf200.png--&gt; &lt;img width=&#34;589&#34; src=&#34;https://user-images.githubusercontent.com/7728097/143205384-af3c73a8-0253-45f3-b5ac-28a335dddb87.png&#34; alt=&#34;Laravel Excel logo&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Supercharged Excel exports and imports&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A simple, but elegant &lt;a href=&#34;https://laravel.com&#34; target=&#34;_blank&#34;&gt;Laravel&lt;/a&gt;&lt;a&gt;&lt;/a&gt; wrapper around &lt;a href=&#34;https://phpspreadsheet.readthedocs.io/&#34; target=&#34;_blank&#34;&gt;PhpSpreadsheet&lt;/a&gt; exports and imports. &lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.laravel-excel.com/3.1/exports/&#34;&gt;Quickstart&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://docs.laravel-excel.com/3.1/getting-started/&#34;&gt;Documentation&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://course.laravel-excel.com&#34;&gt;Video Course&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://github.com/SpartnerNL/Laravel-Nova-Excel&#34;&gt;Nova&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://medium.com/maatwebsite/laravel-excel/home&#34;&gt;Blog&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://docs.laravel-excel.com/3.1/getting-started/contributing.html&#34;&gt;Contributing&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://docs.laravel-excel.com/3.1/getting-started/support.html&#34;&gt;Support&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/SpartnerNL/Laravel-Excel/actions&#34;&gt; &lt;img src=&#34;https://github.com/Maatwebsite/Laravel-Excel/workflows/Run%20tests/badge.svg?branch=3.1&#34; alt=&#34;Github Actions&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://styleci.io/repos/14259390&#34;&gt; &lt;img src=&#34;https://styleci.io/repos/14259390/shield?branch=3.1&#34; alt=&#34;StyleCI&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/maatwebsite/excel&#34;&gt; &lt;img src=&#34;https://poser.pugx.org/maatwebsite/excel/v/stable.png&#34; alt=&#34;Latest Stable Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/maatwebsite/excel&#34;&gt; &lt;img src=&#34;https://poser.pugx.org/maatwebsite/excel/downloads.png&#34; alt=&#34;Total Downloads&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/maatwebsite/excel&#34;&gt; &lt;img src=&#34;https://poser.pugx.org/maatwebsite/excel/license.png&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easily export collections to Excel.&lt;/strong&gt; Supercharge your Laravel collections and export them directly to an Excel or CSV document. Exporting has never been so easy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Supercharged exports.&lt;/strong&gt; Export queries with automatic chunking for better performance. You provide us the query, we handle the performance. Exporting even larger datasets? No worries, Laravel Excel has your back. You can queue your exports so all of this happens in the background.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Supercharged imports.&lt;/strong&gt; Import workbooks and worksheets to Eloquent models with chunk reading and batch inserts! Have large files? You can queue every chunk of a file! Your entire import will happen in the background.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Export Blade views.&lt;/strong&gt; Want to have a custom layout in your spreadsheet? Use a HTML table in a Blade view and export that to Excel.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7728097/57463977-2263fc80-727c-11e9-833d-669d816fb7fb.jpg&#34; alt=&#34;banner&#34;&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎓 Learning Laravel Excel&lt;/h2&gt; &#xA;&lt;p&gt;You can find the full documentation of Laravel Excel &lt;a href=&#34;https://docs.laravel-excel.com&#34;&gt;on the website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We welcome suggestions for improving our docs. The documentation repository can be found at &lt;a href=&#34;https://github.com/SpartnerNL/laravel-excel-docs&#34;&gt;https://github.com/SpartnerNL/laravel-excel-docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some articles and tutorials can be found on our blog: &lt;a href=&#34;https://medium.com/maatwebsite/laravel-excel/home&#34;&gt;https://medium.com/maatwebsite/laravel-excel/home&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;📬&lt;/span&gt; License &amp;amp; Postcardware&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7728097/53638144-9e5f1a00-3c25-11e9-9f4a-fc71c9d94562.jpg&#34; alt=&#34;1_5nblgs68uarg0wxxejozdq&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Laravel Excel is created with love and care by Spartner (formerly known as Maatwebsite) to give back to the Laravel community. It is completely free (MIT license) to use, however the package is licensed as Postcardware. This means that if it makes it to your production environment, we would very much appreciate receiving a postcard from your hometown.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spartner&lt;/strong&gt; Markt 2 6231 LS Meerssen The Netherlands.&lt;/p&gt; &#xA;&lt;p&gt;More about the license can be found at: &lt;a href=&#34;https://docs.laravel-excel.com/3.1/getting-started/license.html&#34;&gt;https://docs.laravel-excel.com/3.1/getting-started/license.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Created by Spartner (formerly Maatwebsite)&lt;/h2&gt; &#xA;&lt;p&gt;We are a strategic development partner, creating web-based custom built software from Laravel. In need of a digital solution for your challenge? Give us a call.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spartner.software&#34;&gt;https://spartner.software&lt;/a&gt; &lt;a href=&#34;mailto:info@spartner.nl&#34;&gt;info@spartner.nl&lt;/a&gt; +31 (0) 10 - 7449312&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔧&lt;/span&gt; Supported Versions&lt;/h2&gt; &#xA;&lt;p&gt;Versions will be supported for a limited amount of time.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Laravel Version&lt;/th&gt; &#xA;   &lt;th&gt;Php Version&lt;/th&gt; &#xA;   &lt;th&gt;Support&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.1&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;=5.6&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;=7.0&lt;/td&gt; &#xA;   &lt;td&gt;Unsupported since 15-5-2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.0&lt;/td&gt; &#xA;   &lt;td&gt;^5.5&lt;/td&gt; &#xA;   &lt;td&gt;^7.0&lt;/td&gt; &#xA;   &lt;td&gt;Unsupported since 31-12-2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.1&lt;/td&gt; &#xA;   &lt;td&gt;^5.8|^6.0|^7.0|^8.0&lt;/td&gt; &#xA;   &lt;td&gt;^7.2|^8.0&lt;/td&gt; &#xA;   &lt;td&gt;New features&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>pentestmonkey/php-reverse-shell</title>
    <updated>2022-06-02T02:02:38Z</updated>
    <id>tag:github.com,2022-06-02:/pentestmonkey/php-reverse-shell</id>
    <link href="https://github.com/pentestmonkey/php-reverse-shell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;php-reverse-shell&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>PHPOffice/PHPWord</title>
    <updated>2022-06-02T02:02:38Z</updated>
    <id>tag:github.com,2022-06-02:/PHPOffice/PHPWord</id>
    <link href="https://github.com/PHPOffice/PHPWord" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A pure PHP library for reading and writing word processing documents&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://rawgit.com/PHPOffice/PHPWord/develop/docs/images/phpword.svg?sanitize=true&#34; alt=&#34;PHPWord&#34; title=&#34;PHPWord&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Master: &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpword&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpoffice/phpword/v/stable.png&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/PHPOffice/PHPWord&#34;&gt;&lt;img src=&#34;https://travis-ci.org/PHPOffice/PHPWord.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/PHPOffice/PHPWord/&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/PHPOffice/PHPWord/badges/quality-score.png?b=master&#34; alt=&#34;Code Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/PHPOffice/PHPWord?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/PHPOffice/PHPWord/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpword&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpoffice/phpword/downloads.png&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpword&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpoffice/phpword/license.png&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/PHPOffice/PHPWord&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GITTER-join%20chat-green.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/PHPOffice/PHPWord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Develop: &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpword#dev-develop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/unstable-dev--develop-orange.svg?sanitize=true&#34; alt=&#34;Latest Development Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/PHPOffice/PHPWord/branches&#34;&gt;&lt;img src=&#34;https://travis-ci.org/PHPOffice/PHPWord.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/PHPOffice/PHPWord/?branch=develop&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/PHPOffice/PHPWord/badges/quality-score.png?b=develop&#34; alt=&#34;Code Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/PHPOffice/PHPWord?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/PHPOffice/PHPWord/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PHPWord is a library written in pure PHP that provides a set of classes to write to and read from different document file formats. The current version of PHPWord supports Microsoft &lt;a href=&#34;http://en.wikipedia.org/wiki/Office_Open_XML&#34;&gt;Office Open XML&lt;/a&gt; (OOXML or OpenXML), OASIS &lt;a href=&#34;http://en.wikipedia.org/wiki/OpenDocument&#34;&gt;Open Document Format for Office Applications&lt;/a&gt; (OpenDocument or ODF), &lt;a href=&#34;http://en.wikipedia.org/wiki/Rich_Text_Format&#34;&gt;Rich Text Format&lt;/a&gt; (RTF), HTML, and PDF.&lt;/p&gt; &#xA;&lt;p&gt;PHPWord is an open source project licensed under the terms of &lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/COPYING.LESSER&#34;&gt;LGPL version 3&lt;/a&gt;. PHPWord is aimed to be a high quality software product by incorporating &lt;a href=&#34;https://travis-ci.org/PHPOffice/PHPWord&#34;&gt;continuous integration&lt;/a&gt; and &lt;a href=&#34;http://phpoffice.github.io/PHPWord/coverage/develop/&#34;&gt;unit testing&lt;/a&gt;. You can learn more about PHPWord by reading the &lt;a href=&#34;http://phpword.readthedocs.org/&#34;&gt;Developers&#39; Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, please ask on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/phpword&#34;&gt;StackOverFlow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read more about PHPWord:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://phpword.readthedocs.org/&#34;&gt;Developers&#39; Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;With PHPWord, you can create OOXML, ODF, or RTF documents dynamically using your PHP 5.3.3+ scripts. Below are some of the things that you can do with PHPWord library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set document properties, e.g. title, subject, and creator.&lt;/li&gt; &#xA; &lt;li&gt;Create document sections with different settings, e.g. portrait/landscape, page size, and page numbering&lt;/li&gt; &#xA; &lt;li&gt;Create header and footer for each sections&lt;/li&gt; &#xA; &lt;li&gt;Set default font type, font size, and paragraph style&lt;/li&gt; &#xA; &lt;li&gt;Use UTF-8 and East Asia fonts/characters&lt;/li&gt; &#xA; &lt;li&gt;Define custom font styles (e.g. bold, italic, color) and paragraph styles (e.g. centered, multicolumns, spacing) either as named style or inline in text&lt;/li&gt; &#xA; &lt;li&gt;Insert paragraphs, either as a simple text or complex one (a text run) that contains other elements&lt;/li&gt; &#xA; &lt;li&gt;Insert titles (headers) and table of contents&lt;/li&gt; &#xA; &lt;li&gt;Insert text breaks and page breaks&lt;/li&gt; &#xA; &lt;li&gt;Insert and format images, either local, remote, or as page watermarks&lt;/li&gt; &#xA; &lt;li&gt;Insert binary OLE Objects such as Excel or Visio&lt;/li&gt; &#xA; &lt;li&gt;Insert and format table with customized properties for each rows (e.g. repeat as header row) and cells (e.g. background color, rowspan, colspan)&lt;/li&gt; &#xA; &lt;li&gt;Insert list items as bulleted, numbered, or multilevel&lt;/li&gt; &#xA; &lt;li&gt;Insert hyperlinks&lt;/li&gt; &#xA; &lt;li&gt;Insert footnotes and endnotes&lt;/li&gt; &#xA; &lt;li&gt;Insert drawing shapes (arc, curve, line, polyline, rect, oval)&lt;/li&gt; &#xA; &lt;li&gt;Insert charts (pie, doughnut, bar, line, area, scatter, radar)&lt;/li&gt; &#xA; &lt;li&gt;Insert form fields (textinput, checkbox, and dropdown)&lt;/li&gt; &#xA; &lt;li&gt;Create document from templates&lt;/li&gt; &#xA; &lt;li&gt;Use XSL 1.0 style sheets to transform headers, main document part, and footers of an OOXML template&lt;/li&gt; &#xA; &lt;li&gt;... and many more features on progress&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;PHPWord requires the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 5.3.3+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.php.net/manual/en/xml.installation.php&#34;&gt;XML Parser extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.laminas.dev/laminas-escaper/intro/&#34;&gt;Laminas Escaper component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.zip.php&#34;&gt;Zip extension&lt;/a&gt; (optional, used to write OOXML and ODF)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.image.php&#34;&gt;GD extension&lt;/a&gt; (optional, used to add images)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.xmlwriter.php&#34;&gt;XMLWriter extension&lt;/a&gt; (optional, used to write OOXML and ODF)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.xsl.php&#34;&gt;XSL extension&lt;/a&gt; (optional, used to apply XSL style sheet to template )&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dompdf/dompdf&#34;&gt;dompdf library&lt;/a&gt; (optional, used to write PDF)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;PHPWord is installed via &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;. To &lt;a href=&#34;https://getcomposer.org/doc/04-schema.md#package-links&#34;&gt;add a dependency&lt;/a&gt; to PHPWord in your project, either&lt;/p&gt; &#xA;&lt;p&gt;Run the following to use the latest stable version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    composer require phpoffice/phpword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you want the latest master version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    composer require phpoffice/phpword:dev-master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can of course also manually edit your composer.json file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;require&#34;: {&#xA;       &#34;phpoffice/phpword&#34;: &#34;v0.18.*&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The following is a basic usage example of the PHPWord library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;require_once &#39;bootstrap.php&#39;;&#xA;&#xA;// Creating the new document...&#xA;$phpWord = new \PhpOffice\PhpWord\PhpWord();&#xA;&#xA;/* Note: any element you append to a document must reside inside of a Section. */&#xA;&#xA;// Adding an empty Section to the document...&#xA;$section = $phpWord-&amp;gt;addSection();&#xA;// Adding Text element to the Section having font styled by default...&#xA;$section-&amp;gt;addText(&#xA;    &#39;&#34;Learn from yesterday, live for today, hope for tomorrow. &#39;&#xA;        . &#39;The important thing is not to stop questioning.&#34; &#39;&#xA;        . &#39;(Albert Einstein)&#39;&#xA;);&#xA;&#xA;/*&#xA; * Note: it&#39;s possible to customize font style of the Text element you add in three ways:&#xA; * - inline;&#xA; * - using named font style (new font style object will be implicitly created);&#xA; * - using explicitly created font style object.&#xA; */&#xA;&#xA;// Adding Text element with font customized inline...&#xA;$section-&amp;gt;addText(&#xA;    &#39;&#34;Great achievement is usually born of great sacrifice, &#39;&#xA;        . &#39;and is never the result of selfishness.&#34; &#39;&#xA;        . &#39;(Napoleon Hill)&#39;,&#xA;    array(&#39;name&#39; =&amp;gt; &#39;Tahoma&#39;, &#39;size&#39; =&amp;gt; 10)&#xA;);&#xA;&#xA;// Adding Text element with font customized using named font style...&#xA;$fontStyleName = &#39;oneUserDefinedStyle&#39;;&#xA;$phpWord-&amp;gt;addFontStyle(&#xA;    $fontStyleName,&#xA;    array(&#39;name&#39; =&amp;gt; &#39;Tahoma&#39;, &#39;size&#39; =&amp;gt; 10, &#39;color&#39; =&amp;gt; &#39;1B2232&#39;, &#39;bold&#39; =&amp;gt; true)&#xA;);&#xA;$section-&amp;gt;addText(&#xA;    &#39;&#34;The greatest accomplishment is not in never falling, &#39;&#xA;        . &#39;but in rising again after you fall.&#34; &#39;&#xA;        . &#39;(Vince Lombardi)&#39;,&#xA;    $fontStyleName&#xA;);&#xA;&#xA;// Adding Text element with font customized using explicitly created font style object...&#xA;$fontStyle = new \PhpOffice\PhpWord\Style\Font();&#xA;$fontStyle-&amp;gt;setBold(true);&#xA;$fontStyle-&amp;gt;setName(&#39;Tahoma&#39;);&#xA;$fontStyle-&amp;gt;setSize(13);&#xA;$myTextElement = $section-&amp;gt;addText(&#39;&#34;Believe you can and you\&#39;re halfway there.&#34; (Theodor Roosevelt)&#39;);&#xA;$myTextElement-&amp;gt;setFontStyle($fontStyle);&#xA;&#xA;// Saving the document as OOXML file...&#xA;$objWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, &#39;Word2007&#39;);&#xA;$objWriter-&amp;gt;save(&#39;helloWorld.docx&#39;);&#xA;&#xA;// Saving the document as ODF file...&#xA;$objWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, &#39;ODText&#39;);&#xA;$objWriter-&amp;gt;save(&#39;helloWorld.odt&#39;);&#xA;&#xA;// Saving the document as HTML file...&#xA;$objWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, &#39;HTML&#39;);&#xA;$objWriter-&amp;gt;save(&#39;helloWorld.html&#39;);&#xA;&#xA;/* Note: we skip RTF, because it&#39;s not XML-based and requires a different example. */&#xA;/* Note: we skip PDF, because &#34;HTML-to-PDF&#34; approach is used to create PDF documents. */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples are provided in the &lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/samples/&#34;&gt;samples folder&lt;/a&gt;. For an easy access to those samples launch &lt;code&gt;php -S localhost:8000&lt;/code&gt; in the samples directory then browse to &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt; to view the samples. You can also read the &lt;a href=&#34;http://phpword.readthedocs.org/&#34;&gt;Developers&#39; Documentation&lt;/a&gt; for more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome everyone to contribute to PHPWord. Below are some of the things that you can do to contribute.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/CONTRIBUTING.md&#34;&gt;our contributing guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PHPOffice/PHPWord/fork&#34;&gt;Fork us&lt;/a&gt; and &lt;a href=&#34;https://github.com/PHPOffice/PHPWord/pulls&#34;&gt;request a pull&lt;/a&gt; to the &lt;a href=&#34;https://github.com/PHPOffice/PHPWord/tree/develop&#34;&gt;develop&lt;/a&gt; branch.&lt;/li&gt; &#xA; &lt;li&gt;Submit &lt;a href=&#34;https://github.com/PHPOffice/PHPWord/issues&#34;&gt;bug reports or feature requests&lt;/a&gt; to GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/PHPWord&#34;&gt;@PHPWord&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/PHPOffice&#34;&gt;@PHPOffice&lt;/a&gt; on Twitter.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jupeter/clean-code-php</title>
    <updated>2022-06-02T02:02:38Z</updated>
    <id>tag:github.com,2022-06-02:/jupeter/clean-code-php</id>
    <link href="https://github.com/jupeter/clean-code-php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛁 Clean Code concepts adapted for PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clean Code PHP&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#variables&#34;&gt;Variables&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-meaningful-and-pronounceable-variable-names&#34;&gt;Use meaningful and pronounceable variable names&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-the-same-vocabulary-for-the-same-type-of-variable&#34;&gt;Use the same vocabulary for the same type of variable&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-searchable-names-part-1&#34;&gt;Use searchable names (part 1)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-searchable-names-part-2&#34;&gt;Use searchable names (part 2)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-explanatory-variables&#34;&gt;Use explanatory variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-nesting-too-deeply-and-return-early-part-1&#34;&gt;Avoid nesting too deeply and return early (part 1)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-nesting-too-deeply-and-return-early-part-2&#34;&gt;Avoid nesting too deeply and return early (part 2)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-mental-mapping&#34;&gt;Avoid Mental Mapping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-add-unneeded-context&#34;&gt;Don&#39;t add unneeded context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#comparison&#34;&gt;Comparison&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-identical-comparison&#34;&gt;Use identical comparison&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#null-coalescing-operator&#34;&gt;Null coalescing operator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#functions&#34;&gt;Functions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-default-arguments-instead-of-short-circuiting-or-conditionals&#34;&gt;Use default arguments instead of short circuiting or conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#function-arguments-2-or-fewer-ideally&#34;&gt;Function arguments (2 or fewer ideally)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#function-names-should-say-what-they-do&#34;&gt;Function names should say what they do&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#functions-should-only-be-one-level-of-abstraction&#34;&gt;Functions should only be one level of abstraction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-use-flags-as-function-parameters&#34;&gt;Don&#39;t use flags as function parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-side-effects&#34;&gt;Avoid Side Effects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-write-to-global-functions&#34;&gt;Don&#39;t write to global functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-use-a-singleton-pattern&#34;&gt;Don&#39;t use a Singleton pattern&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#encapsulate-conditionals&#34;&gt;Encapsulate conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-negative-conditionals&#34;&gt;Avoid negative conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-conditionals&#34;&gt;Avoid conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-type-checking-part-1&#34;&gt;Avoid type-checking (part 1)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-type-checking-part-2&#34;&gt;Avoid type-checking (part 2)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#remove-dead-code&#34;&gt;Remove dead code&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#objects-and-data-structures&#34;&gt;Objects and Data Structures&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-object-encapsulation&#34;&gt;Use object encapsulation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#make-objects-have-privateprotected-members&#34;&gt;Make objects have private/protected members&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#classes&#34;&gt;Classes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#prefer-composition-over-inheritance&#34;&gt;Prefer composition over inheritance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-fluent-interfaces&#34;&gt;Avoid fluent interfaces&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#prefer-final-classes&#34;&gt;Prefer final classes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#solid&#34;&gt;SOLID&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;Single Responsibility Principle (SRP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#openclosed-principle-ocp&#34;&gt;Open/Closed Principle (OCP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#liskov-substitution-principle-lsp&#34;&gt;Liskov Substitution Principle (LSP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#interface-segregation-principle-isp&#34;&gt;Interface Segregation Principle (ISP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dependency-inversion-principle-dip&#34;&gt;Dependency Inversion Principle (DIP)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-repeat-yourself-dry&#34;&gt;Don’t repeat yourself (DRY)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Software engineering principles, from Robert C. Martin&#39;s book &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for PHP. This is not a style guide. It&#39;s a guide to producing readable, reusable, and refactorable software in PHP.&lt;/p&gt; &#xA;&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Inspired from &lt;a href=&#34;https://github.com/ryanmcdermott/clean-code-javascript&#34;&gt;clean-code-javascript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Although many developers still use PHP 5, most of the examples in this article only work with PHP 7.1+.&lt;/p&gt; &#xA;&lt;h2&gt;Variables&lt;/h2&gt; &#xA;&lt;h3&gt;Use meaningful and pronounceable variable names&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$ymdstr = $moment-&amp;gt;format(&#39;y-m-d&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$currentDate = $moment-&amp;gt;format(&#39;y-m-d&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;getUserInfo();&#xA;getUserData();&#xA;getUserRecord();&#xA;getUserProfile();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;getUser();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use searchable names (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;We will read more code than we will ever write. It&#39;s important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// What the heck is 448 for?&#xA;$result = $serializer-&amp;gt;serialize($data, 448);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$json = $serializer-&amp;gt;serialize($data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use searchable names (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User&#xA;{&#xA;    // What the heck is 7 for?&#xA;    public $access = 7;&#xA;}&#xA;&#xA;// What the heck is 4 for?&#xA;if ($user-&amp;gt;access &amp;amp; 4) {&#xA;    // ...&#xA;}&#xA;&#xA;// What&#39;s going on here?&#xA;$user-&amp;gt;access ^= 2;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User&#xA;{&#xA;    public const ACCESS_READ = 1;&#xA;&#xA;    public const ACCESS_CREATE = 2;&#xA;&#xA;    public const ACCESS_UPDATE = 4;&#xA;&#xA;    public const ACCESS_DELETE = 8;&#xA;&#xA;    // User as default can read, create and update something&#xA;    public $access = self::ACCESS_READ | self::ACCESS_CREATE | self::ACCESS_UPDATE;&#xA;}&#xA;&#xA;if ($user-&amp;gt;access &amp;amp; User::ACCESS_UPDATE) {&#xA;    // do edit ...&#xA;}&#xA;&#xA;// Deny access rights to create something&#xA;$user-&amp;gt;access ^= User::ACCESS_CREATE;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use explanatory variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$address = &#39;One Infinite Loop, Cupertino 95014&#39;;&#xA;$cityZipCodeRegex = &#39;/^[^,]+,\s*(.+?)\s*(\d{5})$/&#39;;&#xA;preg_match($cityZipCodeRegex, $address, $matches);&#xA;&#xA;saveCityZipCode($matches[1], $matches[2]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s better, but we are still heavily dependent on regex.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$address = &#39;One Infinite Loop, Cupertino 95014&#39;;&#xA;$cityZipCodeRegex = &#39;/^[^,]+,\s*(.+?)\s*(\d{5})$/&#39;;&#xA;preg_match($cityZipCodeRegex, $address, $matches);&#xA;&#xA;[, $city, $zipCode] = $matches;&#xA;saveCityZipCode($city, $zipCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Decrease dependence on regex by naming subpatterns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$address = &#39;One Infinite Loop, Cupertino 95014&#39;;&#xA;$cityZipCodeRegex = &#39;/^[^,]+,\s*(?&amp;lt;city&amp;gt;.+?)\s*(?&amp;lt;zipCode&amp;gt;\d{5})$/&#39;;&#xA;preg_match($cityZipCodeRegex, $address, $matches);&#xA;&#xA;saveCityZipCode($matches[&#39;city&#39;], $matches[&#39;zipCode&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid nesting too deeply and return early (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;Too many if-else statements can make your code hard to follow. Explicit is better than implicit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isShopOpen($day): bool&#xA;{&#xA;    if ($day) {&#xA;        if (is_string($day)) {&#xA;            $day = strtolower($day);&#xA;            if ($day === &#39;friday&#39;) {&#xA;                return true;&#xA;            } elseif ($day === &#39;saturday&#39;) {&#xA;                return true;&#xA;            } elseif ($day === &#39;sunday&#39;) {&#xA;                return true;&#xA;            }&#xA;            return false;&#xA;        }&#xA;        return false;&#xA;    }&#xA;    return false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isShopOpen(string $day): bool&#xA;{&#xA;    if (empty($day)) {&#xA;        return false;&#xA;    }&#xA;&#xA;    $openingDays = [&#39;friday&#39;, &#39;saturday&#39;, &#39;sunday&#39;];&#xA;&#xA;    return in_array(strtolower($day), $openingDays, true);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid nesting too deeply and return early (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function fibonacci(int $n)&#xA;{&#xA;    if ($n &amp;lt; 50) {&#xA;        if ($n !== 0) {&#xA;            if ($n !== 1) {&#xA;                return fibonacci($n - 1) + fibonacci($n - 2);&#xA;            }&#xA;            return 1;&#xA;        }&#xA;        return 0;&#xA;    }&#xA;    return &#39;Not supported&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function fibonacci(int $n): int&#xA;{&#xA;    if ($n === 0 || $n === 1) {&#xA;        return $n;&#xA;    }&#xA;&#xA;    if ($n &amp;gt;= 50) {&#xA;        throw new Exception(&#39;Not supported&#39;);&#xA;    }&#xA;&#xA;    return fibonacci($n - 1) + fibonacci($n - 2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; &#xA;&lt;p&gt;Don’t force the reader of your code to translate what the variable means. Explicit is better than implicit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$l = [&#39;Austin&#39;, &#39;New York&#39;, &#39;San Francisco&#39;];&#xA;&#xA;for ($i = 0; $i &amp;lt; count($l); $i++) {&#xA;    $li = $l[$i];&#xA;    doStuff();&#xA;    doSomeOtherStuff();&#xA;    // ...&#xA;    // ...&#xA;    // ...&#xA;    // Wait, what is `$li` for again?&#xA;    dispatch($li);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$locations = [&#39;Austin&#39;, &#39;New York&#39;, &#39;San Francisco&#39;];&#xA;&#xA;foreach ($locations as $location) {&#xA;    doStuff();&#xA;    doSomeOtherStuff();&#xA;    // ...&#xA;    // ...&#xA;    // ...&#xA;    dispatch($location);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t add unneeded context&lt;/h3&gt; &#xA;&lt;p&gt;If your class/object name tells you something, don&#39;t repeat that in your variable name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    public $carMake;&#xA;&#xA;    public $carModel;&#xA;&#xA;    public $carColor;&#xA;&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    public $make;&#xA;&#xA;    public $model;&#xA;&#xA;    public $color;&#xA;&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comparison&lt;/h2&gt; &#xA;&lt;h3&gt;Use &lt;a href=&#34;http://php.net/manual/en/language.operators.comparison.php&#34;&gt;identical comparison&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The simple comparison will convert the string in an integer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$a = &#39;42&#39;;&#xA;$b = 42;&#xA;&#xA;if ($a != $b) {&#xA;    // The expression will always pass&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comparison &lt;code&gt;$a != $b&lt;/code&gt; returns &lt;code&gt;FALSE&lt;/code&gt; but in fact it&#39;s &lt;code&gt;TRUE&lt;/code&gt;! The string &lt;code&gt;42&lt;/code&gt; is different than the integer &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The identical comparison will compare type and value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$a = &#39;42&#39;;&#xA;$b = 42;&#xA;&#xA;if ($a !== $b) {&#xA;    // The expression is verified&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comparison &lt;code&gt;$a !== $b&lt;/code&gt; returns &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Null coalescing operator&lt;/h3&gt; &#xA;&lt;p&gt;Null coalescing is a new operator &lt;a href=&#34;https://www.php.net/manual/en/migration70.new-features.php&#34;&gt;introduced in PHP 7&lt;/a&gt;. The null coalescing operator &lt;code&gt;??&lt;/code&gt; has been added as syntactic sugar for the common case of needing to use a ternary in conjunction with &lt;code&gt;isset()&lt;/code&gt;. It returns its first operand if it exists and is not &lt;code&gt;null&lt;/code&gt;; otherwise it returns its second operand.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if (isset($_GET[&#39;name&#39;])) {&#xA;    $name = $_GET[&#39;name&#39;];&#xA;} elseif (isset($_POST[&#39;name&#39;])) {&#xA;    $name = $_POST[&#39;name&#39;];&#xA;} else {&#xA;    $name = &#39;nobody&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$name = $_GET[&#39;name&#39;] ?? $_POST[&#39;name&#39;] ?? &#39;nobody&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;h3&gt;Use default arguments instead of short circuiting or conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is not good because &lt;code&gt;$breweryName&lt;/code&gt; can be &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createMicrobrewery($breweryName = &#39;Hipster Brew Co.&#39;): void&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This opinion is more understandable than the previous version, but it better controls the value of the variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createMicrobrewery($name = null): void&#xA;{&#xA;    $breweryName = $name ?: &#39;Hipster Brew Co.&#39;;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://www.php.net/manual/en/language.types.declarations.php&#34;&gt;type hinting&lt;/a&gt; and be sure that the &lt;code&gt;$breweryName&lt;/code&gt; will not be &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createMicrobrewery(string $breweryName = &#39;Hipster Brew Co.&#39;): void&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; &#xA;&lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; &#xA;&lt;p&gt;Zero arguments is the ideal case. One or two arguments is ok, and three should be avoided. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it&#39;s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Questionnaire&#xA;{&#xA;    public function __construct(&#xA;        string $firstname,&#xA;        string $lastname,&#xA;        string $patronymic,&#xA;        string $region,&#xA;        string $district,&#xA;        string $city,&#xA;        string $phone,&#xA;        string $email&#xA;    ) {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Name&#xA;{&#xA;    private $firstname;&#xA;&#xA;    private $lastname;&#xA;&#xA;    private $patronymic;&#xA;&#xA;    public function __construct(string $firstname, string $lastname, string $patronymic)&#xA;    {&#xA;        $this-&amp;gt;firstname = $firstname;&#xA;        $this-&amp;gt;lastname = $lastname;&#xA;        $this-&amp;gt;patronymic = $patronymic;&#xA;    }&#xA;&#xA;    // getters ...&#xA;}&#xA;&#xA;class City&#xA;{&#xA;    private $region;&#xA;&#xA;    private $district;&#xA;&#xA;    private $city;&#xA;&#xA;    public function __construct(string $region, string $district, string $city)&#xA;    {&#xA;        $this-&amp;gt;region = $region;&#xA;        $this-&amp;gt;district = $district;&#xA;        $this-&amp;gt;city = $city;&#xA;    }&#xA;&#xA;    // getters ...&#xA;}&#xA;&#xA;class Contact&#xA;{&#xA;    private $phone;&#xA;&#xA;    private $email;&#xA;&#xA;    public function __construct(string $phone, string $email)&#xA;    {&#xA;        $this-&amp;gt;phone = $phone;&#xA;        $this-&amp;gt;email = $email;&#xA;    }&#xA;&#xA;    // getters ...&#xA;}&#xA;&#xA;class Questionnaire&#xA;{&#xA;    public function __construct(Name $name, City $city, Contact $contact)&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function names should say what they do&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Email&#xA;{&#xA;    //...&#xA;&#xA;    public function handle(): void&#xA;    {&#xA;        mail($this-&amp;gt;to, $this-&amp;gt;subject, $this-&amp;gt;body);&#xA;    }&#xA;}&#xA;&#xA;$message = new Email(...);&#xA;// What is this? A handle for the message? Are we writing to a file now?&#xA;$message-&amp;gt;handle();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Email&#xA;{&#xA;    //...&#xA;&#xA;    public function send(): void&#xA;    {&#xA;        mail($this-&amp;gt;to, $this-&amp;gt;subject, $this-&amp;gt;body);&#xA;    }&#xA;}&#xA;&#xA;$message = new Email(...);&#xA;// Clear and obvious&#xA;$message-&amp;gt;send();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; &#xA;&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function parseBetterPHPAlternative(string $code): void&#xA;{&#xA;    $regexes = [&#xA;        // ...&#xA;    ];&#xA;&#xA;    $statements = explode(&#39; &#39;, $code);&#xA;    $tokens = [];&#xA;    foreach ($regexes as $regex) {&#xA;        foreach ($statements as $statement) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;&#xA;    $ast = [];&#xA;    foreach ($tokens as $token) {&#xA;        // lex...&#xA;    }&#xA;&#xA;    foreach ($ast as $node) {&#xA;        // parse...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad too:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We have carried out some of the functionality, but the &lt;code&gt;parseBetterPHPAlternative()&lt;/code&gt; function is still very complex and not testable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function tokenize(string $code): array&#xA;{&#xA;    $regexes = [&#xA;        // ...&#xA;    ];&#xA;&#xA;    $statements = explode(&#39; &#39;, $code);&#xA;    $tokens = [];&#xA;    foreach ($regexes as $regex) {&#xA;        foreach ($statements as $statement) {&#xA;            $tokens[] = /* ... */;&#xA;        }&#xA;    }&#xA;&#xA;    return $tokens;&#xA;}&#xA;&#xA;function lexer(array $tokens): array&#xA;{&#xA;    $ast = [];&#xA;    foreach ($tokens as $token) {&#xA;        $ast[] = /* ... */;&#xA;    }&#xA;&#xA;    return $ast;&#xA;}&#xA;&#xA;function parseBetterPHPAlternative(string $code): void&#xA;{&#xA;    $tokens = tokenize($code);&#xA;    $ast = lexer($tokens);&#xA;    foreach ($ast as $node) {&#xA;        // parse...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The best solution is move out the dependencies of &lt;code&gt;parseBetterPHPAlternative()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Tokenizer&#xA;{&#xA;    public function tokenize(string $code): array&#xA;    {&#xA;        $regexes = [&#xA;            // ...&#xA;        ];&#xA;&#xA;        $statements = explode(&#39; &#39;, $code);&#xA;        $tokens = [];&#xA;        foreach ($regexes as $regex) {&#xA;            foreach ($statements as $statement) {&#xA;                $tokens[] = /* ... */;&#xA;            }&#xA;        }&#xA;&#xA;        return $tokens;&#xA;    }&#xA;}&#xA;&#xA;class Lexer&#xA;{&#xA;    public function lexify(array $tokens): array&#xA;    {&#xA;        $ast = [];&#xA;        foreach ($tokens as $token) {&#xA;            $ast[] = /* ... */;&#xA;        }&#xA;&#xA;        return $ast;&#xA;    }&#xA;}&#xA;&#xA;class BetterPHPAlternative&#xA;{&#xA;    private $tokenizer;&#xA;    private $lexer;&#xA;&#xA;    public function __construct(Tokenizer $tokenizer, Lexer $lexer)&#xA;    {&#xA;        $this-&amp;gt;tokenizer = $tokenizer;&#xA;        $this-&amp;gt;lexer = $lexer;&#xA;    }&#xA;&#xA;    public function parse(string $code): void&#xA;    {&#xA;        $tokens = $this-&amp;gt;tokenizer-&amp;gt;tokenize($code);&#xA;        $ast = $this-&amp;gt;lexer-&amp;gt;lexify($tokens);&#xA;        foreach ($ast as $node) {&#xA;            // parse...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t use flags as function parameters&lt;/h3&gt; &#xA;&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createFile(string $name, bool $temp = false): void&#xA;{&#xA;    if ($temp) {&#xA;        touch(&#39;./temp/&#39; . $name);&#xA;    } else {&#xA;        touch($name);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createFile(string $name): void&#xA;{&#xA;    touch($name);&#xA;}&#xA;&#xA;function createTempFile(string $name): void&#xA;{&#xA;    touch(&#39;./temp/&#39; . $name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects&lt;/h3&gt; &#xA;&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; &#xA;&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don&#39;t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; &#xA;&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Global variable referenced by following function.&#xA;// If we had another function that used this name, now it&#39;d be an array and it could break it.&#xA;$name = &#39;Ryan McDermott&#39;;&#xA;&#xA;function splitIntoFirstAndLastName(): void&#xA;{&#xA;    global $name;&#xA;&#xA;    $name = explode(&#39; &#39;, $name);&#xA;}&#xA;&#xA;splitIntoFirstAndLastName();&#xA;&#xA;var_dump($name);&#xA;// [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function splitIntoFirstAndLastName(string $name): array&#xA;{&#xA;    return explode(&#39; &#39;, $name);&#xA;}&#xA;&#xA;$name = &#39;Ryan McDermott&#39;;&#xA;$newName = splitIntoFirstAndLastName($name);&#xA;&#xA;var_dump($name);&#xA;// &#39;Ryan McDermott&#39;;&#xA;&#xA;var_dump($newName);&#xA;// [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t write to global functions&lt;/h3&gt; &#xA;&lt;p&gt;Polluting globals is a bad practice in many languages because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let&#39;s think about an example: what if you wanted to have configuration array? You could write global function like &lt;code&gt;config()&lt;/code&gt;, but it could clash with another library that tried to do the same thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function config(): array&#xA;{&#xA;    return [&#xA;        &#39;foo&#39; =&amp;gt; &#39;bar&#39;,&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Configuration&#xA;{&#xA;    private $configuration = [];&#xA;&#xA;    public function __construct(array $configuration)&#xA;    {&#xA;        $this-&amp;gt;configuration = $configuration;&#xA;    }&#xA;&#xA;    public function get(string $key): ?string&#xA;    {&#xA;        // null coalescing operator&#xA;        return $this-&amp;gt;configuration[$key] ?? null;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load configuration and create instance of &lt;code&gt;Configuration&lt;/code&gt; class&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$configuration = new Configuration([&#xA;    &#39;foo&#39; =&amp;gt; &#39;bar&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now you must use instance of &lt;code&gt;Configuration&lt;/code&gt; in your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t use a Singleton pattern&lt;/h3&gt; &#xA;&lt;p&gt;Singleton is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Singleton_pattern&#34;&gt;anti-pattern&lt;/a&gt;. Paraphrased from Brian Button:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;They are generally used as a &lt;strong&gt;global instance&lt;/strong&gt;, why is that so bad? Because &lt;strong&gt;you hide the dependencies&lt;/strong&gt; of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_smell&#34;&gt;code smell&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;They violate the &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;single responsibility principle&lt;/a&gt;: by virtue of the fact that &lt;strong&gt;they control their own creation and lifecycle&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;They inherently cause code to be tightly &lt;a href=&#34;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&#34;&gt;coupled&lt;/a&gt;. This makes faking them out under &lt;strong&gt;test rather difficult&lt;/strong&gt; in many cases.&lt;/li&gt; &#xA; &lt;li&gt;They carry state around for the lifetime of the application. Another hit to testing since &lt;strong&gt;you can end up with a situation where tests need to be ordered&lt;/strong&gt; which is a big no for unit tests. Why? Because each unit test should be independent from the other.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There is also very good thoughts by &lt;a href=&#34;http://misko.hevery.com/about/&#34;&gt;Misko Hevery&lt;/a&gt; about the &lt;a href=&#34;http://misko.hevery.com/2008/08/25/root-cause-of-singletons/&#34;&gt;root of problem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class DBConnection&#xA;{&#xA;    private static $instance;&#xA;&#xA;    private function __construct(string $dsn)&#xA;    {&#xA;        // ...&#xA;    }&#xA;&#xA;    public static function getInstance(): self&#xA;    {&#xA;        if (self::$instance === null) {&#xA;            self::$instance = new self();&#xA;        }&#xA;&#xA;        return self::$instance;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;$singleton = DBConnection::getInstance();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class DBConnection&#xA;{&#xA;    public function __construct(string $dsn)&#xA;    {&#xA;        // ...&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create instance of &lt;code&gt;DBConnection&lt;/code&gt; class and configure it with &lt;a href=&#34;http://php.net/manual/en/pdo.construct.php#refsect1-pdo.construct-parameters&#34;&gt;DSN&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$connection = new DBConnection($dsn);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now you must use instance of &lt;code&gt;DBConnection&lt;/code&gt; in your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($article-&amp;gt;state === &#39;published&#39;) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($article-&amp;gt;isPublished()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isDOMNodeNotPresent(DOMNode $node): bool&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;if (! isDOMNodeNotPresent($node)) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isDOMNodePresent(DOMNode $node): bool&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;if (isDOMNodePresent($node)) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid conditionals&lt;/h3&gt; &#xA;&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, &#34;how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?&#34; The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, &#34;well that&#39;s great but why would I want to do that?&#34; The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        switch ($this-&amp;gt;type) {&#xA;            case &#39;777&#39;:&#xA;                return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getPassengerCount();&#xA;            case &#39;Air Force One&#39;:&#xA;                return $this-&amp;gt;getMaxAltitude();&#xA;            case &#39;Cessna&#39;:&#xA;                return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getFuelExpenditure();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int;&#xA;}&#xA;&#xA;class Boeing777 implements Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getPassengerCount();&#xA;    }&#xA;}&#xA;&#xA;class AirForceOne implements Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        return $this-&amp;gt;getMaxAltitude();&#xA;    }&#xA;}&#xA;&#xA;class Cessna implements Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getFuelExpenditure();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;PHP is untyped, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it becomes tempting to do type-checking in your functions. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function travelToTexas($vehicle): void&#xA;{&#xA;    if ($vehicle instanceof Bicycle) {&#xA;        $vehicle-&amp;gt;pedalTo(new Location(&#39;texas&#39;));&#xA;    } elseif ($vehicle instanceof Car) {&#xA;        $vehicle-&amp;gt;driveTo(new Location(&#39;texas&#39;));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function travelToTexas(Vehicle $vehicle): void&#xA;{&#xA;    $vehicle-&amp;gt;travelTo(new Location(&#39;texas&#39;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;If you are working with basic primitive values like strings, integers, and arrays, and you use PHP 7+ and you can&#39;t use polymorphism but you still feel the need to type-check, you should consider &lt;a href=&#34;https://www.php.net/manual/en/language.types.declarations.php&#34;&gt;type declaration&lt;/a&gt; or strict mode. It provides you with static typing on top of standard PHP syntax. The problem with manually type-checking is that doing it will require so much extra verbiage that the faux &#34;type-safety&#34; you get doesn&#39;t make up for the lost readability. Keep your PHP clean, write good tests, and have good code reviews. Otherwise, do all of that but with PHP strict type declaration or strict mode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function combine($val1, $val2): int&#xA;{&#xA;    if (! is_numeric($val1) || ! is_numeric($val2)) {&#xA;        throw new Exception(&#39;Must be of type Number&#39;);&#xA;    }&#xA;&#xA;    return $val1 + $val2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function combine(int $val1, int $val2): int&#xA;{&#xA;    return $val1 + $val2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove dead code&lt;/h3&gt; &#xA;&lt;p&gt;Dead code is just as bad as duplicate code. There&#39;s no reason to keep it in your codebase. If it&#39;s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function oldRequestModule(string $url): void&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;function newRequestModule(string $url): void&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;$request = newRequestModule($requestUrl);&#xA;inventoryTracker(&#39;apples&#39;, $request, &#39;www.inventory-awesome.io&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function requestModule(string $url): void&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;$request = requestModule($requestUrl);&#xA;inventoryTracker(&#39;apples&#39;, $request, &#39;www.inventory-awesome.io&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Objects and Data Structures&lt;/h2&gt; &#xA;&lt;h3&gt;Use object encapsulation&lt;/h3&gt; &#xA;&lt;p&gt;In PHP you can set &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; keywords for methods. Using it, you can control properties modification on an object.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When you want to do more beyond getting an object property, you don&#39;t have to look up and change every accessor in your codebase.&lt;/li&gt; &#xA; &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; &#xA; &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; &#xA; &lt;li&gt;Inheriting this class, you can override default functionality.&lt;/li&gt; &#xA; &lt;li&gt;You can lazy load your object&#39;s properties, let&#39;s say getting it from a server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, this is part of &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#openclosed-principle-ocp&#34;&gt;Open/Closed&lt;/a&gt; principle.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class BankAccount&#xA;{&#xA;    public $balance = 1000;&#xA;}&#xA;&#xA;$bankAccount = new BankAccount();&#xA;&#xA;// Buy shoes...&#xA;$bankAccount-&amp;gt;balance -= 100;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class BankAccount&#xA;{&#xA;    private $balance;&#xA;&#xA;    public function __construct(int $balance = 1000)&#xA;    {&#xA;      $this-&amp;gt;balance = $balance;&#xA;    }&#xA;&#xA;    public function withdraw(int $amount): void&#xA;    {&#xA;        if ($amount &amp;gt; $this-&amp;gt;balance) {&#xA;            throw new \Exception(&#39;Amount greater than available balance.&#39;);&#xA;        }&#xA;&#xA;        $this-&amp;gt;balance -= $amount;&#xA;    }&#xA;&#xA;    public function deposit(int $amount): void&#xA;    {&#xA;        $this-&amp;gt;balance += $amount;&#xA;    }&#xA;&#xA; &amp;nbsp; &amp;nbsp;public function getBalance(): int&#xA;    {&#xA;        return $this-&amp;gt;balance;&#xA;    }&#xA;}&#xA;&#xA;$bankAccount = new BankAccount();&#xA;&#xA;// Buy shoes...&#xA;$bankAccount-&amp;gt;withdraw($shoesPrice);&#xA;&#xA;// Get balance&#xA;$balance = $bankAccount-&amp;gt;getBalance();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Make objects have private/protected members&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;public&lt;/code&gt; methods and properties are most dangerous for changes, because some outside code may easily rely on them and you can&#39;t control what code relies on them. &lt;strong&gt;Modifications in class are dangerous for all users of class.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protected&lt;/code&gt; modifier are as dangerous as public, because they are available in scope of any child class. This effectively means that difference between public and protected is only in access mechanism, but encapsulation guarantee remains the same. &lt;strong&gt;Modifications in class are dangerous for all descendant classes.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;private&lt;/code&gt; modifier guarantees that code is &lt;strong&gt;dangerous to modify only in boundaries of single class&lt;/strong&gt; (you are safe for modifications and you won&#39;t have &lt;a href=&#34;http://www.urbandictionary.com/define.php?term=Jengaphobia&amp;amp;defid=2494196&#34;&gt;Jenga effect&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Therefore, use &lt;code&gt;private&lt;/code&gt; by default and &lt;code&gt;public/protected&lt;/code&gt; when you need to provide access for external classes.&lt;/p&gt; &#xA;&lt;p&gt;For more information you can read the &lt;a href=&#34;http://fabien.potencier.org/pragmatism-over-theory-protected-vs-private.html&#34;&gt;blog post&lt;/a&gt; on this topic written by &lt;a href=&#34;https://github.com/fabpot&#34;&gt;Fabien Potencier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    public $name;&#xA;&#xA;    public function __construct(string $name)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;    }&#xA;}&#xA;&#xA;$employee = new Employee(&#39;John Doe&#39;);&#xA;// Employee name: John Doe&#xA;echo &#39;Employee name: &#39; . $employee-&amp;gt;name;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    private $name;&#xA;&#xA;    public function __construct(string $name)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;    }&#xA;&#xA;    public function getName(): string&#xA;    {&#xA;        return $this-&amp;gt;name;&#xA;    }&#xA;}&#xA;&#xA;$employee = new Employee(&#39;John Doe&#39;);&#xA;// Employee name: John Doe&#xA;echo &#39;Employee name: &#39; . $employee-&amp;gt;getName();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Classes&lt;/h2&gt; &#xA;&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; &#xA;&lt;p&gt;As stated famously in &lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; &#xA;&lt;p&gt;You might be wondering then, &#34;when should I use inheritance?&#34; It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your inheritance represents an &#34;is-a&#34; relationship and not a &#34;has-a&#34; relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; &#xA; &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; &#xA; &lt;li&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    private $name;&#xA;&#xA;    private $email;&#xA;&#xA;    public function __construct(string $name, string $email)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;        $this-&amp;gt;email = $email;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;// Bad because Employees &#34;have&#34; tax data.&#xA;// EmployeeTaxData is not a type of Employee&#xA;&#xA;class EmployeeTaxData extends Employee&#xA;{&#xA;    private $ssn;&#xA;&#xA;    private $salary;&#xA;&#xA;    public function __construct(string $name, string $email, string $ssn, string $salary)&#xA;    {&#xA;        parent::__construct($name, $email);&#xA;&#xA;        $this-&amp;gt;ssn = $ssn;&#xA;        $this-&amp;gt;salary = $salary;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class EmployeeTaxData&#xA;{&#xA;    private $ssn;&#xA;&#xA;    private $salary;&#xA;&#xA;    public function __construct(string $ssn, string $salary)&#xA;    {&#xA;        $this-&amp;gt;ssn = $ssn;&#xA;        $this-&amp;gt;salary = $salary;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;class Employee&#xA;{&#xA;    private $name;&#xA;&#xA;    private $email;&#xA;&#xA;    private $taxData;&#xA;&#xA;    public function __construct(string $name, string $email)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;        $this-&amp;gt;email = $email;&#xA;    }&#xA;&#xA;    public function setTaxData(EmployeeTaxData $taxData): void&#xA;    {&#xA;        $this-&amp;gt;taxData = $taxData;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid fluent interfaces&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Fluent_interface&#34;&gt;Fluent interface&lt;/a&gt; is an object oriented API that aims to improve the readability of the source code by using &lt;a href=&#34;https://en.wikipedia.org/wiki/Method_chaining&#34;&gt;Method chaining&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;While there can be some contexts, frequently builder objects, where this pattern reduces the verbosity of the code (for example the &lt;a href=&#34;https://phpunit.de/manual/current/en/test-doubles.html&#34;&gt;PHPUnit Mock Builder&lt;/a&gt; or the &lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/query-builder.html&#34;&gt;Doctrine Query Builder&lt;/a&gt;), more often it comes at some costs:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Breaks &lt;a href=&#34;https://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29&#34;&gt;Encapsulation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Breaks &lt;a href=&#34;https://en.wikipedia.org/wiki/Decorator_pattern&#34;&gt;Decorators&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Is harder to &lt;a href=&#34;https://en.wikipedia.org/wiki/Mock_object&#34;&gt;mock&lt;/a&gt; in a test suite.&lt;/li&gt; &#xA; &lt;li&gt;Makes diffs of commits harder to read.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information you can read the full &lt;a href=&#34;https://ocramius.github.io/blog/fluent-interfaces-are-evil/&#34;&gt;blog post&lt;/a&gt; on this topic written by &lt;a href=&#34;https://github.com/Ocramius&#34;&gt;Marco Pivetta&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    private $make = &#39;Honda&#39;;&#xA;&#xA;    private $model = &#39;Accord&#39;;&#xA;&#xA;    private $color = &#39;white&#39;;&#xA;&#xA;    public function setMake(string $make): self&#xA;    {&#xA;        $this-&amp;gt;make = $make;&#xA;&#xA;        // NOTE: Returning this for chaining&#xA;        return $this;&#xA;    }&#xA;&#xA;    public function setModel(string $model): self&#xA;    {&#xA;        $this-&amp;gt;model = $model;&#xA;&#xA;        // NOTE: Returning this for chaining&#xA;        return $this;&#xA;    }&#xA;&#xA;    public function setColor(string $color): self&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;&#xA;        // NOTE: Returning this for chaining&#xA;        return $this;&#xA;    }&#xA;&#xA;    public function dump(): void&#xA;    {&#xA;        var_dump($this-&amp;gt;make, $this-&amp;gt;model, $this-&amp;gt;color);&#xA;    }&#xA;}&#xA;&#xA;$car = (new Car())&#xA;    -&amp;gt;setColor(&#39;pink&#39;)&#xA;    -&amp;gt;setMake(&#39;Ford&#39;)&#xA;    -&amp;gt;setModel(&#39;F-150&#39;)&#xA;    -&amp;gt;dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    private $make = &#39;Honda&#39;;&#xA;&#xA;    private $model = &#39;Accord&#39;;&#xA;&#xA;    private $color = &#39;white&#39;;&#xA;&#xA;    public function setMake(string $make): void&#xA;    {&#xA;        $this-&amp;gt;make = $make;&#xA;    }&#xA;&#xA;    public function setModel(string $model): void&#xA;    {&#xA;        $this-&amp;gt;model = $model;&#xA;    }&#xA;&#xA;    public function setColor(string $color): void&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;    }&#xA;&#xA;    public function dump(): void&#xA;    {&#xA;        var_dump($this-&amp;gt;make, $this-&amp;gt;model, $this-&amp;gt;color);&#xA;    }&#xA;}&#xA;&#xA;$car = new Car();&#xA;$car-&amp;gt;setColor(&#39;pink&#39;);&#xA;$car-&amp;gt;setMake(&#39;Ford&#39;);&#xA;$car-&amp;gt;setModel(&#39;F-150&#39;);&#xA;$car-&amp;gt;dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prefer final classes&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;final&lt;/code&gt; keyword should be used whenever possible:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It prevents an uncontrolled inheritance chain.&lt;/li&gt; &#xA; &lt;li&gt;It encourages &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#prefer-composition-over-inheritance&#34;&gt;composition&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It encourages the &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;Single Responsibility Principle&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It encourages developers to use your public methods instead of extending the class to get access to protected ones.&lt;/li&gt; &#xA; &lt;li&gt;It allows you to change your code without breaking applications that use your class.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The only condition is that your class should implement an interface and no other public methods are defined.&lt;/p&gt; &#xA;&lt;p&gt;For more informations you can read &lt;a href=&#34;https://ocramius.github.io/blog/when-to-declare-classes-final/&#34;&gt;the blog post&lt;/a&gt; on this topic written by &lt;a href=&#34;https://ocramius.github.io/&#34;&gt;Marco Pivetta (Ocramius)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;final class Car&#xA;{&#xA;    private $color;&#xA;&#xA;    public function __construct($color)&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;    }&#xA;&#xA;    /**&#xA;     * @return string The color of the vehicle&#xA;     */&#xA;    public function getColor()&#xA;    {&#xA;        return $this-&amp;gt;color;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Vehicle&#xA;{&#xA;    /**&#xA;     * @return string The color of the vehicle&#xA;     */&#xA;    public function getColor();&#xA;}&#xA;&#xA;final class Car implements Vehicle&#xA;{&#xA;    private $color;&#xA;&#xA;    public function __construct($color)&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;    }&#xA;&#xA;    public function getColor()&#xA;    {&#xA;        return $this-&amp;gt;color;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SOLID&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SOLID&lt;/strong&gt; is the mnemonic acronym introduced by Michael Feathers for the first five principles named by Robert Martin, which meant five basic principles of object-oriented programming and design.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;S: Single Responsibility Principle (SRP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#openclosed-principle-ocp&#34;&gt;O: Open/Closed Principle (OCP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#liskov-substitution-principle-lsp&#34;&gt;L: Liskov Substitution Principle (LSP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#interface-segregation-principle-isp&#34;&gt;I: Interface Segregation Principle (ISP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dependency-inversion-principle-dip&#34;&gt;D: Dependency Inversion Principle (DIP)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated in Clean Code, &#34;There should never be more than one reason for a class to change&#34;. It&#39;s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won&#39;t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It&#39;s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UserSettings&#xA;{&#xA;    private $user;&#xA;&#xA;    public function __construct(User $user)&#xA;    {&#xA;        $this-&amp;gt;user = $user;&#xA;    }&#xA;&#xA;    public function changeSettings(array $settings): void&#xA;    {&#xA;        if ($this-&amp;gt;verifyCredentials()) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;&#xA;    private function verifyCredentials(): bool&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UserAuth&#xA;{&#xA;    private $user;&#xA;&#xA;    public function __construct(User $user)&#xA;    {&#xA;        $this-&amp;gt;user = $user;&#xA;    }&#xA;&#xA;    public function verifyCredentials(): bool&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&#xA;class UserSettings&#xA;{&#xA;    private $user;&#xA;&#xA;    private $auth;&#xA;&#xA;    public function __construct(User $user)&#xA;    {&#xA;        $this-&amp;gt;user = $user;&#xA;        $this-&amp;gt;auth = new UserAuth($user);&#xA;    }&#xA;&#xA;    public function changeSettings(array $settings): void&#xA;    {&#xA;        if ($this-&amp;gt;auth-&amp;gt;verifyCredentials()) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated by Bertrand Meyer, &#34;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&#34; What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;abstract class Adapter&#xA;{&#xA;    protected $name;&#xA;&#xA;    public function getName(): string&#xA;    {&#xA;        return $this-&amp;gt;name;&#xA;    }&#xA;}&#xA;&#xA;class AjaxAdapter extends Adapter&#xA;{&#xA;    public function __construct()&#xA;    {&#xA;        parent::__construct();&#xA;&#xA;        $this-&amp;gt;name = &#39;ajaxAdapter&#39;;&#xA;    }&#xA;}&#xA;&#xA;class NodeAdapter extends Adapter&#xA;{&#xA;    public function __construct()&#xA;    {&#xA;        parent::__construct();&#xA;&#xA;        $this-&amp;gt;name = &#39;nodeAdapter&#39;;&#xA;    }&#xA;}&#xA;&#xA;class HttpRequester&#xA;{&#xA;    private $adapter;&#xA;&#xA;    public function __construct(Adapter $adapter)&#xA;    {&#xA;        $this-&amp;gt;adapter = $adapter;&#xA;    }&#xA;&#xA;    public function fetch(string $url): Promise&#xA;    {&#xA;        $adapterName = $this-&amp;gt;adapter-&amp;gt;getName();&#xA;&#xA;        if ($adapterName === &#39;ajaxAdapter&#39;) {&#xA;            return $this-&amp;gt;makeAjaxCall($url);&#xA;        } elseif ($adapterName === &#39;httpNodeAdapter&#39;) {&#xA;            return $this-&amp;gt;makeHttpCall($url);&#xA;        }&#xA;    }&#xA;&#xA;    private function makeAjaxCall(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;&#xA;    private function makeHttpCall(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Adapter&#xA;{&#xA;    public function request(string $url): Promise;&#xA;}&#xA;&#xA;class AjaxAdapter implements Adapter&#xA;{&#xA;    public function request(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&#xA;class NodeAdapter implements Adapter&#xA;{&#xA;    public function request(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&#xA;class HttpRequester&#xA;{&#xA;    private $adapter;&#xA;&#xA;    public function __construct(Adapter $adapter)&#xA;    {&#xA;        $this-&amp;gt;adapter = $adapter;&#xA;    }&#xA;&#xA;    public function fetch(string $url): Promise&#xA;    {&#xA;        return $this-&amp;gt;adapter-&amp;gt;request($url);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; &#xA;&lt;p&gt;This is a scary term for a very simple concept. It&#39;s formally defined as &#34;If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).&#34; That&#39;s an even scarier definition.&lt;/p&gt; &#xA;&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let&#39;s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the &#34;is-a&#34; relationship via inheritance, you quickly get into trouble.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Rectangle&#xA;{&#xA;    protected $width = 0;&#xA;&#xA;    protected $height = 0;&#xA;&#xA;    public function setWidth(int $width): void&#xA;    {&#xA;        $this-&amp;gt;width = $width;&#xA;    }&#xA;&#xA;    public function setHeight(int $height): void&#xA;    {&#xA;        $this-&amp;gt;height = $height;&#xA;    }&#xA;&#xA;    public function getArea(): int&#xA;    {&#xA;        return $this-&amp;gt;width * $this-&amp;gt;height;&#xA;    }&#xA;}&#xA;&#xA;class Square extends Rectangle&#xA;{&#xA;    public function setWidth(int $width): void&#xA;    {&#xA;        $this-&amp;gt;width = $this-&amp;gt;height = $width;&#xA;    }&#xA;&#xA;    public function setHeight(int $height): void&#xA;    {&#xA;        $this-&amp;gt;width = $this-&amp;gt;height = $height;&#xA;    }&#xA;}&#xA;&#xA;function printArea(Rectangle $rectangle): void&#xA;{&#xA;    $rectangle-&amp;gt;setWidth(4);&#xA;    $rectangle-&amp;gt;setHeight(5);&#xA;&#xA;    // BAD: Will return 25 for Square. Should be 20.&#xA;    echo sprintf(&#39;%s has area %d.&#39;, get_class($rectangle), $rectangle-&amp;gt;getArea()) . PHP_EOL;&#xA;}&#xA;&#xA;$rectangles = [new Rectangle(), new Square()];&#xA;&#xA;foreach ($rectangles as $rectangle) {&#xA;    printArea($rectangle);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The best way is separate the quadrangles and allocation of a more general subtype for both shapes.&lt;/p&gt; &#xA;&lt;p&gt;Despite the apparent similarity of the square and the rectangle, they are different. A square has much in common with a rhombus, and a rectangle with a parallelogram, but they are not subtypes. A square, a rectangle, a rhombus and a parallelogram are separate shapes with their own properties, albeit similar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Shape&#xA;{&#xA;    public function getArea(): int;&#xA;}&#xA;&#xA;class Rectangle implements Shape&#xA;{&#xA;    private $width = 0;&#xA;    private $height = 0;&#xA;&#xA;    public function __construct(int $width, int $height)&#xA;    {&#xA;        $this-&amp;gt;width = $width;&#xA;        $this-&amp;gt;height = $height;&#xA;    }&#xA;&#xA;    public function getArea(): int&#xA;    {&#xA;        return $this-&amp;gt;width * $this-&amp;gt;height;&#xA;    }&#xA;}&#xA;&#xA;class Square implements Shape&#xA;{&#xA;    private $length = 0;&#xA;&#xA;    public function __construct(int $length)&#xA;    {&#xA;        $this-&amp;gt;length = $length;&#xA;    }&#xA;&#xA;    public function getArea(): int&#xA;    {&#xA; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return $this-&amp;gt;length ** 2;&#xA; &amp;nbsp; &amp;nbsp;}&#xA;}&#xA;&#xA;function printArea(Shape $shape): void&#xA;{&#xA;    echo sprintf(&#39;%s has area %d.&#39;, get_class($shape), $shape-&amp;gt;getArea()).PHP_EOL;&#xA;}&#xA;&#xA;$shapes = [new Rectangle(4, 5), new Square(5)];&#xA;&#xA;foreach ($shapes as $shape) {&#xA;    printArea($shape);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; &#xA;&lt;p&gt;ISP states that &#34;Clients should not be forced to depend upon interfaces that they do not use.&#34;&lt;/p&gt; &#xA;&lt;p&gt;A good example to look at that demonstrates this principle is for classes that require large settings objects. Not requiring clients to set up huge amounts of options is beneficial, because most of the time they won&#39;t need all of the settings. Making them optional helps prevent having a &#34;fat interface&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Employee&#xA;{&#xA;    public function work(): void;&#xA;&#xA;    public function eat(): void;&#xA;}&#xA;&#xA;class HumanEmployee implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;&#xA;    public function eat(): void&#xA;    {&#xA;        // ...... eating in lunch break&#xA;    }&#xA;}&#xA;&#xA;class RobotEmployee implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;&#xA;    public function eat(): void&#xA;    {&#xA;        //.... robot can&#39;t eat, but it must implement this method&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Not every worker is an employee, but every employee is a worker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Workable&#xA;{&#xA;    public function work(): void;&#xA;}&#xA;&#xA;interface Feedable&#xA;{&#xA;    public function eat(): void;&#xA;}&#xA;&#xA;interface Employee extends Feedable, Workable&#xA;{&#xA;}&#xA;&#xA;class HumanEmployee implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;&#xA;    public function eat(): void&#xA;    {&#xA;        //.... eating in lunch break&#xA;    }&#xA;}&#xA;&#xA;// robot can only work&#xA;class RobotEmployee implements Workable&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; &#xA;&lt;p&gt;This principle states two essential things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; &#xA; &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This can be hard to understand at first, but if you&#39;ve worked with PHP frameworks (like Symfony), you&#39;ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&#xA;class Robot extends Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;}&#xA;&#xA;class Manager&#xA;{&#xA;    private $employee;&#xA;&#xA;    public function __construct(Employee $employee)&#xA;    {&#xA;        $this-&amp;gt;employee = $employee;&#xA;    }&#xA;&#xA;    public function manage(): void&#xA;    {&#xA;        $this-&amp;gt;employee-&amp;gt;work();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Employee&#xA;{&#xA;    public function work(): void;&#xA;}&#xA;&#xA;class Human implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&#xA;class Robot implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;}&#xA;&#xA;class Manager&#xA;{&#xA;    private $employee;&#xA;&#xA;    public function __construct(Employee $employee)&#xA;    {&#xA;        $this-&amp;gt;employee = $employee;&#xA;    }&#xA;&#xA;    public function manage(): void&#xA;    {&#xA;        $this-&amp;gt;employee-&amp;gt;work();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Don’t repeat yourself (DRY)&lt;/h2&gt; &#xA;&lt;p&gt;Try to observe the &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt; principle.&lt;/p&gt; &#xA;&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there&#39;s more than one place to alter something if you need to change some logic.&lt;/p&gt; &#xA;&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there&#39;s only one place to update!&lt;/p&gt; &#xA;&lt;p&gt;Often you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; &#xA;&lt;p&gt;Getting the abstraction right is critical, that&#39;s why you should follow the SOLID principles laid out in the &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#classes&#34;&gt;Classes&lt;/a&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don&#39;t repeat yourself, otherwise you&#39;ll find yourself updating multiple places any time you want to change one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function showDeveloperList(array $developers): void&#xA;{&#xA;    foreach ($developers as $developer) {&#xA;        $expectedSalary = $developer-&amp;gt;calculateExpectedSalary();&#xA;        $experience = $developer-&amp;gt;getExperience();&#xA;        $githubLink = $developer-&amp;gt;getGithubLink();&#xA;        $data = [$expectedSalary, $experience, $githubLink];&#xA;&#xA;        render($data);&#xA;    }&#xA;}&#xA;&#xA;function showManagerList(array $managers): void&#xA;{&#xA;    foreach ($managers as $manager) {&#xA;        $expectedSalary = $manager-&amp;gt;calculateExpectedSalary();&#xA;        $experience = $manager-&amp;gt;getExperience();&#xA;        $githubLink = $manager-&amp;gt;getGithubLink();&#xA;        $data = [$expectedSalary, $experience, $githubLink];&#xA;&#xA;        render($data);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function showList(array $employees): void&#xA;{&#xA;    foreach ($employees as $employee) {&#xA;        $expectedSalary = $employee-&amp;gt;calculateExpectedSalary();&#xA;        $experience = $employee-&amp;gt;getExperience();&#xA;        $githubLink = $employee-&amp;gt;getGithubLink();&#xA;        $data = [$expectedSalary, $experience, $githubLink];&#xA;&#xA;        render($data);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Very good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is better to use a compact version of the code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function showList(array $employees): void&#xA;{&#xA;    foreach ($employees as $employee) {&#xA;        render([$employee-&amp;gt;calculateExpectedSalary(), $employee-&amp;gt;getExperience(), $employee-&amp;gt;getGithubLink()]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This is also available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;🇨🇳&lt;/span&gt; &lt;strong&gt;Chinese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/php-cpm/clean-code-php&#34;&gt;php-cpm/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇷🇺&lt;/span&gt; &lt;strong&gt;Russian:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/peter-gribanov/clean-code-php&#34;&gt;peter-gribanov/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇪🇸&lt;/span&gt; &lt;strong&gt;Spanish:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/fikoborquez/clean-code-php&#34;&gt;fikoborquez/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇧🇷&lt;/span&gt; &lt;strong&gt;Portuguese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/fabioars/clean-code-php&#34;&gt;fabioars/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jeanjar/clean-code-php/tree/pt-br&#34;&gt;jeanjar/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇹🇭&lt;/span&gt; &lt;strong&gt;Thai:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/panuwizzle/clean-code-php&#34;&gt;panuwizzle/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇫🇷&lt;/span&gt; &lt;strong&gt;French:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/errorname/clean-code-php&#34;&gt;errorname/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇻🇳&lt;/span&gt; &lt;strong&gt;Vietnamese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/viethuongdev/clean-code-php&#34;&gt;viethuongdev/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇰🇷&lt;/span&gt; &lt;strong&gt;Korean:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/yujineeee/clean-code-php&#34;&gt;yujineeee/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇹🇷&lt;/span&gt; &lt;strong&gt;Turkish:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/anilozmen/clean-code-php&#34;&gt;anilozmen/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇮🇷&lt;/span&gt; &lt;strong&gt;Persian:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/amirshnll/clean-code-php&#34;&gt;amirshnll/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇧🇩&lt;/span&gt; &lt;strong&gt;Bangla:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nayeemdev/clean-code-php&#34;&gt;nayeemdev/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇪🇬&lt;/span&gt; &lt;strong&gt;Arabic:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ahmedjoda/clean-code-php&#34;&gt;ahmedjoda/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇯🇵&lt;/span&gt; &lt;strong&gt;Japanese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hayato07/clean-code-php&#34;&gt;hayato07/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pmmp/PocketMine-MP</title>
    <updated>2022-06-02T02:02:38Z</updated>
    <id>tag:github.com,2022-06-02:/pmmp/PocketMine-MP</id>
    <link href="https://github.com/pmmp/PocketMine-MP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A server software for Minecraft: Bedrock Edition in PHP&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pmmp.io&#34;&gt; &#xA;  &lt;!--[if IE]&gt;&#xA;&#x9;&#x9;&#x9;&lt;img src=&#34;https://github.com/pmmp/PocketMine-MP/blob/stable/.github/readme/pocketmine.png&#34; alt=&#34;The PocketMine-MP logo&#34; title=&#34;PocketMine&#34; loading=&#34;eager&#34; /&gt;&#xA;&#x9;&#x9;&lt;![endif]--&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source srcset=&#34;https://github.com/pmmp/PocketMine-MP/raw/stable/.github/readme/pocketmine-dark.png&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA;   &lt;img src=&#34;https://github.com/pmmp/PocketMine-MP/raw/stable/.github/readme/pocketmine.png&#34; loading=&#34;eager&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt;&lt;br&gt; &lt;b&gt;A highly customisable, open source server software for Minecraft: Bedrock Edition written in PHP&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/pmmp/PocketMine-MP/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/pmmp/PocketMine-MP/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pmmp/PocketMine-MP/releases/latest&#34;&gt;&lt;img alt=&#34;GitHub release (latest SemVer)&#34; src=&#34;https://img.shields.io/github/v/release/pmmp/PocketMine-MP?label=release&amp;amp;sort=semver&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/pmmp/pocketmine-mp&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/pmmp/pocketmine-mp?logo=docker&amp;amp;label=image&#34; alt=&#34;Docker image version (latest semver)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/bmSAZBG&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/373199722573201408?label=discord&amp;amp;color=7289DA&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/pmmp/PocketMine-MP/releases&#34;&gt;&lt;img alt=&#34;GitHub all releases&#34; src=&#34;https://img.shields.io/github/downloads/pmmp/PocketMine-MP/total?label=downloads%40total&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pmmp/PocketMine-MP/releases/latest&#34;&gt;&lt;img alt=&#34;GitHub release (latest by SemVer)&#34; src=&#34;https://img.shields.io/github/downloads/pmmp/PocketMine-MP/latest/total?sort=semver&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pmmp.readthedocs.org/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pmmp.readthedocs.io/en/rtfd/installation.html&#34;&gt;Installation instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/pmmp/pocketmine-mp&#34;&gt;Docker image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://poggit.pmmp.io/plugins&#34;&gt;Plugin repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Discussion/Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.pmmp.io/&#34;&gt;Forums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/bmSAZBG&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/tags/pocketmine&#34;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;For developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pmmp/PocketMine-MP/stable/BUILDING.md&#34;&gt;Building and running from source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devdoc.pmmp.io&#34;&gt;Developer documentation&lt;/a&gt; - General documentation for PocketMine-MP plugin developers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apidoc.pmmp.io&#34;&gt;Latest release API documentation&lt;/a&gt; - Doxygen API documentation generated for each release&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apidoc-dev.pmmp.io&#34;&gt;Latest bleeding-edge API documentation&lt;/a&gt; - Doxygen API documentation generated weekly from &lt;code&gt;next-major&lt;/code&gt; branch&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmmp/DevTools/&#34;&gt;DevTools&lt;/a&gt; - Development tools plugin for creating plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmmp/ExamplePlugin/&#34;&gt;ExamplePlugin&lt;/a&gt; - Example plugin demonstrating some basic API features&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pmmp/PocketMine-MP/stable/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bitcoin Cash (BCH): &lt;code&gt;qq3r46hn6ljnhnqnfwxt5pg3g447eq9jhvw5ddfear&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bitcoin (BTC): &lt;code&gt;171u8K9e4FtU6j3e5sqNoxKUgEw9qWQdRV&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stellar Lumens (XLM): &lt;code&gt;GAAC5WZ33HCTE3BFJFZJXONMEIBNHFLBXM2HJVAZHXXPYA3HP5XPPS7T&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.patreon.com/pocketminemp&#34;&gt;Patreon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensing information&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under LGPL-3.0. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/pmmp/PocketMine-MP/stable/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;p&gt;pmmp/PocketMine are not affiliated with Mojang. All brands and trademarks belong to their respective owners. PocketMine-MP is not a Mojang-approved software, nor is it associated with Mojang.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>composer/composer</title>
    <updated>2022-06-02T02:02:38Z</updated>
    <id>tag:github.com,2022-06-02:/composer/composer</id>
    <link href="https://github.com/composer/composer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dependency Manager for PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Composer - Dependency Management for PHP&lt;/h1&gt; &#xA;&lt;p&gt;Composer helps you declare, manage, and install dependencies of PHP projects.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://getcomposer.org/&#34;&gt;https://getcomposer.org/&lt;/a&gt; for more information and documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/composer/composer/actions&#34;&gt;&lt;img src=&#34;https://github.com/composer/composer/workflows/Continuous%20Integration/badge.svg?branch=main&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation / Usage&lt;/h2&gt; &#xA;&lt;p&gt;Download and install Composer by following the &lt;a href=&#34;https://getcomposer.org/download/&#34;&gt;official instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For usage, see &lt;a href=&#34;https://getcomposer.org/doc/&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;Find public packages on &lt;a href=&#34;https://packagist.org&#34;&gt;Packagist.org&lt;/a&gt;. For private package hosting take a look at &lt;a href=&#34;https://packagist.com&#34;&gt;Private Packagist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/packagist&#34;&gt;@packagist&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/seldaek&#34;&gt;@seldaek&lt;/a&gt; on Twitter for announcements, or check the &lt;a href=&#34;https://twitter.com/search?q=%23composerphp&amp;amp;src=typed_query&amp;amp;f=live&#34;&gt;#composerphp&lt;/a&gt; hashtag.&lt;/p&gt; &#xA;&lt;p&gt;For support, Stack Overflow offers a good collection of &lt;a href=&#34;https://stackoverflow.com/questions/tagged/composer-php&#34;&gt;Composer related questions&lt;/a&gt;, or you can use the &lt;a href=&#34;https://github.com/composer/composer/discussions&#34;&gt;GitHub discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a &lt;a href=&#34;https://www.contributor-covenant.org/version/1/4/code-of-conduct/&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project and its community you agree to abide by those terms.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h4&gt;Latest Composer&lt;/h4&gt; &#xA;&lt;p&gt;PHP 7.2.5 or above for the latest version.&lt;/p&gt; &#xA;&lt;h4&gt;Composer 2.2 LTS (Long Term Support)&lt;/h4&gt; &#xA;&lt;p&gt;PHP versions 5.3.2 - 8.1 are still supported via the LTS releases of Composer (2.2.x). If you run the installer or the &lt;code&gt;self-update&lt;/code&gt; command the appropriate Composer version for your PHP should be automatically selected.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nils Adermann | &lt;a href=&#34;https://github.com/naderman&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/naderman&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;mailto:naderman@naderman.de&#34;&gt;naderman@naderman.de&lt;/a&gt; | &lt;a href=&#34;https://naderman.de&#34;&gt;naderman.de&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jordi Boggiano | &lt;a href=&#34;https://github.com/Seldaek&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/seldaek&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;mailto:j.boggiano@seld.be&#34;&gt;j.boggiano@seld.be&lt;/a&gt; | &lt;a href=&#34;https://seld.be&#34;&gt;seld.be&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the list of &lt;a href=&#34;https://github.com/composer/composer/contributors&#34;&gt;contributors&lt;/a&gt; who participated in this project.&lt;/p&gt; &#xA;&lt;h2&gt;Security Reports&lt;/h2&gt; &#xA;&lt;p&gt;Please send any sensitive issue to &lt;a href=&#34;mailto:security@packagist.org&#34;&gt;security@packagist.org&lt;/a&gt;. Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Composer is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/composer/composer/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This project&#39;s Solver started out as a PHP port of openSUSE&#39;s &lt;a href=&#34;https://en.opensuse.org/openSUSE:Libzypp_satsolver&#34;&gt;Libzypp satsolver&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>PHPOffice/PhpSpreadsheet</title>
    <updated>2022-06-02T02:02:38Z</updated>
    <id>tag:github.com,2022-06-02:/PHPOffice/PhpSpreadsheet</id>
    <link href="https://github.com/PHPOffice/PhpSpreadsheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A pure PHP library for reading and writing spreadsheet files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PhpSpreadsheet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PHPOffice/PhpSpreadsheet/actions&#34;&gt;&lt;img src=&#34;https://github.com/PHPOffice/PhpSpreadsheet/workflows/main/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/PHPOffice/PhpSpreadsheet/?branch=master&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/PHPOffice/PhpSpreadsheet/badges/quality-score.png?b=master&#34; alt=&#34;Code Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/PHPOffice/PhpSpreadsheet/?branch=master&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/PHPOffice/PhpSpreadsheet/badges/coverage.png?b=master&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpspreadsheet&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/PHPOffice/PhpSpreadsheet&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpspreadsheet&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/PHPOffice/PhpSpreadsheet&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpspreadsheet&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/PHPOffice/PhpSpreadsheet&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/PHPOffice/PhpSpreadsheet&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GITTER-join%20chat-green.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/PHPOffice/PhpSpreadsheet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PhpSpreadsheet is a library written in pure PHP and offers a set of classes that allow you to read and write various spreadsheet file formats such as Excel and LibreOffice Calc.&lt;/p&gt; &#xA;&lt;h2&gt;PHP version support&lt;/h2&gt; &#xA;&lt;p&gt;LTS: Support for PHP versions will only be maintained for a period of six months beyond the &lt;a href=&#34;https://www.php.net/eol.php&#34;&gt;end of life of that PHP version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently the required PHP minimum version is PHP &lt;strong&gt;7.3&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;composer.json&lt;/code&gt; for other requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://getcomposer.org&#34;&gt;composer&lt;/a&gt; to install PhpSpreadsheet into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer require phpoffice/phpspreadsheet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are building your installation on a development machine that is on a different PHP version to the server where it will be deployed, or if your PHP CLI version is not the same as your run-time such as &lt;code&gt;php-fpm&lt;/code&gt; or Apache&#39;s &lt;code&gt;mod_php&lt;/code&gt;, then you might want to add the following to your &lt;code&gt;composer.json&lt;/code&gt; before installing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;require&#34;: {&#xA;        &#34;phpoffice/phpspreadsheet&#34;: &#34;^1.23&#34;&#xA;    },&#xA;    &#34;config&#34;: {&#xA;        &#34;platform&#34;: {&#xA;            &#34;php&#34;: &#34;7.3&#34;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to ensure that the correct dependencies are retrieved to match your deployment environment.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://php.watch/articles/composer-platform-check&#34;&gt;CLI vs Application run-time&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read more about it, including install instructions, in the &lt;a href=&#34;https://phpspreadsheet.readthedocs.io&#34;&gt;official documentation&lt;/a&gt;. Or check out the &lt;a href=&#34;https://phpoffice.github.io/PhpSpreadsheet&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please ask your support questions on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/phpspreadsheet&#34;&gt;StackOverflow&lt;/a&gt;, or have a quick chat on &lt;a href=&#34;https://gitter.im/PHPOffice/PhpSpreadsheet&#34;&gt;Gitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;PHPExcel vs PhpSpreadsheet ?&lt;/h2&gt; &#xA;&lt;p&gt;PhpSpreadsheet is the next version of PHPExcel. It breaks compatibility to dramatically improve the code base quality (namespaces, PSR compliance, use of latest PHP language features, etc.).&lt;/p&gt; &#xA;&lt;p&gt;Because all efforts have shifted to PhpSpreadsheet, PHPExcel will no longer be maintained. All contributions for PHPExcel, patches and new features, should target PhpSpreadsheet &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;Do you need to migrate? There is &lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PhpSpreadsheet/master/docs/topics/migration-from-PHPExcel.md&#34;&gt;an automated tool&lt;/a&gt; for that.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;PhpSpreadsheet is licensed under &lt;a href=&#34;https://github.com/PHPOffice/PhpSpreadsheet/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PHPMailer/PHPMailer</title>
    <updated>2022-06-02T02:02:38Z</updated>
    <id>tag:github.com,2022-06-02:/PHPMailer/PHPMailer</id>
    <link href="https://github.com/PHPMailer/PHPMailer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The classic email sending library for PHP&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://supportukrainenow.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg?sanitize=true&#34; alt=&#34;SWUbanner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PHPMailer/PHPMailer/master/examples/images/phpmailer.png&#34; alt=&#34;PHPMailer&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PHPMailer – A full-featured email creation and transfer class for PHP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/actions&#34;&gt;&lt;img src=&#34;https://github.com/PHPMailer/PHPMailer/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Test status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/PHPMailer/PHPMailer&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/PHPMailer/PHPMailer/branch/master/graph/badge.svg?token=iORZpwmYmM&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpmailer/phpmailer&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpmailer/phpmailer/v/stable.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpmailer/phpmailer&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpmailer/phpmailer/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpmailer/phpmailer&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpmailer/phpmailer/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://phpmailer.github.io/PHPMailer/&#34;&gt;&lt;img src=&#34;https://github.com/phpmailer/phpmailer/workflows/Docs/badge.svg?sanitize=true&#34; alt=&#34;API Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Probably the world&#39;s most popular code for sending email from PHP!&lt;/li&gt; &#xA; &lt;li&gt;Used by many open-source projects: WordPress, Drupal, 1CRM, SugarCRM, Yii, Joomla! and many more&lt;/li&gt; &#xA; &lt;li&gt;Integrated SMTP support – send without a local mail server&lt;/li&gt; &#xA; &lt;li&gt;Send emails with multiple To, CC, BCC and Reply-to addresses&lt;/li&gt; &#xA; &lt;li&gt;Multipart/alternative emails for mail clients that do not read HTML email&lt;/li&gt; &#xA; &lt;li&gt;Add attachments, including inline&lt;/li&gt; &#xA; &lt;li&gt;Support for UTF-8 content and 8bit, base64, binary, and quoted-printable encodings&lt;/li&gt; &#xA; &lt;li&gt;SMTP authentication with LOGIN, PLAIN, CRAM-MD5, and XOAUTH2 mechanisms over SMTPS and SMTP+STARTTLS transports&lt;/li&gt; &#xA; &lt;li&gt;Validates email addresses automatically&lt;/li&gt; &#xA; &lt;li&gt;Protects against header injection attacks&lt;/li&gt; &#xA; &lt;li&gt;Error messages in over 50 languages!&lt;/li&gt; &#xA; &lt;li&gt;DKIM and S/MIME signing support&lt;/li&gt; &#xA; &lt;li&gt;Compatible with PHP 5.5 and later, including PHP 8.1&lt;/li&gt; &#xA; &lt;li&gt;Namespaced to prevent name clashes&lt;/li&gt; &#xA; &lt;li&gt;Much more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why you might need it&lt;/h2&gt; &#xA;&lt;p&gt;Many PHP developers need to send email from their code. The only PHP function that supports this directly is &lt;a href=&#34;https://www.php.net/manual/en/function.mail.php&#34;&gt;&lt;code&gt;mail()&lt;/code&gt;&lt;/a&gt;. However, it does not provide any assistance for making use of popular features such as encryption, authentication, HTML messages, and attachments.&lt;/p&gt; &#xA;&lt;p&gt;Formatting email correctly is surprisingly difficult. There are myriad overlapping (and conflicting) standards, requiring tight adherence to horribly complicated formatting and encoding rules – the vast majority of code that you&#39;ll find online that uses the &lt;code&gt;mail()&lt;/code&gt; function directly is just plain wrong, if not unsafe!&lt;/p&gt; &#xA;&lt;p&gt;The PHP &lt;code&gt;mail()&lt;/code&gt; function usually sends via a local mail server, typically fronted by a &lt;code&gt;sendmail&lt;/code&gt; binary on Linux, BSD, and macOS platforms, however, Windows usually doesn&#39;t include a local mail server; PHPMailer&#39;s integrated SMTP client allows email sending on all platforms without needing a local mail server. Be aware though, that the &lt;code&gt;mail()&lt;/code&gt; function should be avoided when possible; it&#39;s both faster and &lt;a href=&#34;https://exploitbox.io/paper/Pwning-PHP-Mail-Function-For-Fun-And-RCE.html&#34;&gt;safer&lt;/a&gt; to use SMTP to localhost.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please&lt;/em&gt; don&#39;t be tempted to do it yourself – if you don&#39;t use PHPMailer, there are many other excellent libraries that you should look at before rolling your own. Try &lt;a href=&#34;https://swiftmailer.symfony.com/&#34;&gt;SwiftMailer&lt;/a&gt; , &lt;a href=&#34;https://docs.laminas.dev/laminas-mail/&#34;&gt;Laminas/Mail&lt;/a&gt;, &lt;a href=&#34;https://github.com/zetacomponents/Mail&#34;&gt;ZetaComponents&lt;/a&gt; etc.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This software is distributed under the &lt;a href=&#34;http://www.gnu.org/licenses/lgpl-2.1.html&#34;&gt;LGPL 2.1&lt;/a&gt; license, along with the &lt;a href=&#34;https://gplcc.github.io/gplcc/&#34;&gt;GPL Cooperation Commitment&lt;/a&gt;. Please read &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for information on the software availability and distribution.&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; loading&lt;/h2&gt; &#xA;&lt;p&gt;PHPMailer is available on &lt;a href=&#34;https://packagist.org/packages/phpmailer/phpmailer&#34;&gt;Packagist&lt;/a&gt; (using semantic versioning), and installation via &lt;a href=&#34;https://getcomposer.org&#34;&gt;Composer&lt;/a&gt; is the recommended way to install PHPMailer. Just add this line to your &lt;code&gt;composer.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;phpmailer/phpmailer&#34;: &#34;^6.5&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer require phpmailer/phpmailer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;vendor&lt;/code&gt; folder and the &lt;code&gt;vendor/autoload.php&lt;/code&gt; script are generated by Composer; they are not part of PHPMailer.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the Gmail XOAUTH2 authentication class, you will also need to add a dependency on the &lt;code&gt;league/oauth2-client&lt;/code&gt; package in your &lt;code&gt;composer.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you&#39;re not using Composer, you can &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/archive/master.zip&#34;&gt;download PHPMailer as a zip file&lt;/a&gt;, (note that docs and examples are not included in the zip file), then copy the contents of the PHPMailer folder into one of the &lt;code&gt;include_path&lt;/code&gt; directories specified in your PHP configuration and load each class file manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;use PHPMailer\PHPMailer\PHPMailer;&#xA;use PHPMailer\PHPMailer\Exception;&#xA;&#xA;require &#39;path/to/PHPMailer/src/Exception.php&#39;;&#xA;require &#39;path/to/PHPMailer/src/PHPMailer.php&#39;;&#xA;require &#39;path/to/PHPMailer/src/SMTP.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using the &lt;code&gt;SMTP&lt;/code&gt; class explicitly (you&#39;re probably not), you don&#39;t need a &lt;code&gt;use&lt;/code&gt; line for the SMTP class. Even if you&#39;re not using exceptions, you do still need to load the &lt;code&gt;Exception&lt;/code&gt; class as it is used internally.&lt;/p&gt; &#xA;&lt;h2&gt;Legacy versions&lt;/h2&gt; &#xA;&lt;p&gt;PHPMailer 5.2 (which is compatible with PHP 5.0 — 7.0) is no longer supported, even for security updates. You will find the latest version of 5.2 in the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/5.2-stable&#34;&gt;5.2-stable branch&lt;/a&gt;. If you&#39;re using PHP 5.5 or later (which you should be), switch to the 6.x releases.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading from 5.2&lt;/h3&gt; &#xA;&lt;p&gt;The biggest changes are that source files are now in the &lt;code&gt;src/&lt;/code&gt; folder, and PHPMailer now declares the namespace &lt;code&gt;PHPMailer\PHPMailer&lt;/code&gt;. This has several important effects – &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/UPGRADING.md&#34;&gt;read the upgrade guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Minimal installation&lt;/h3&gt; &#xA;&lt;p&gt;While installing the entire package manually or with Composer is simple, convenient, and reliable, you may want to include only vital files in your project. At the very least you will need &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/src/PHPMailer.php&#34;&gt;src/PHPMailer.php&lt;/a&gt;. If you&#39;re using SMTP, you&#39;ll need &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/src/SMTP.php&#34;&gt;src/SMTP.php&lt;/a&gt;, and if you&#39;re using POP-before SMTP (&lt;em&gt;very&lt;/em&gt; unlikely!), you&#39;ll need &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/src/POP3.php&#34;&gt;src/POP3.php&lt;/a&gt;. You can skip the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/language/&#34;&gt;language&lt;/a&gt; folder if you&#39;re not showing errors to users and can make do with English-only errors. If you&#39;re using XOAUTH2 you will need &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/src/OAuth.php&#34;&gt;src/OAuth.php&lt;/a&gt; as well as the Composer dependencies for the services you wish to authenticate with. Really, it&#39;s much easier to use Composer!&lt;/p&gt; &#xA;&lt;h2&gt;A Simple Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;//Import PHPMailer classes into the global namespace&#xA;//These must be at the top of your script, not inside a function&#xA;use PHPMailer\PHPMailer\PHPMailer;&#xA;use PHPMailer\PHPMailer\SMTP;&#xA;use PHPMailer\PHPMailer\Exception;&#xA;&#xA;//Load Composer&#39;s autoloader&#xA;require &#39;vendor/autoload.php&#39;;&#xA;&#xA;//Create an instance; passing `true` enables exceptions&#xA;$mail = new PHPMailer(true);&#xA;&#xA;try {&#xA;    //Server settings&#xA;    $mail-&amp;gt;SMTPDebug = SMTP::DEBUG_SERVER;                      //Enable verbose debug output&#xA;    $mail-&amp;gt;isSMTP();                                            //Send using SMTP&#xA;    $mail-&amp;gt;Host       = &#39;smtp.example.com&#39;;                     //Set the SMTP server to send through&#xA;    $mail-&amp;gt;SMTPAuth   = true;                                   //Enable SMTP authentication&#xA;    $mail-&amp;gt;Username   = &#39;user@example.com&#39;;                     //SMTP username&#xA;    $mail-&amp;gt;Password   = &#39;secret&#39;;                               //SMTP password&#xA;    $mail-&amp;gt;SMTPSecure = PHPMailer::ENCRYPTION_SMTPS;            //Enable implicit TLS encryption&#xA;    $mail-&amp;gt;Port       = 465;                                    //TCP port to connect to; use 587 if you have set `SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS`&#xA;&#xA;    //Recipients&#xA;    $mail-&amp;gt;setFrom(&#39;from@example.com&#39;, &#39;Mailer&#39;);&#xA;    $mail-&amp;gt;addAddress(&#39;joe@example.net&#39;, &#39;Joe User&#39;);     //Add a recipient&#xA;    $mail-&amp;gt;addAddress(&#39;ellen@example.com&#39;);               //Name is optional&#xA;    $mail-&amp;gt;addReplyTo(&#39;info@example.com&#39;, &#39;Information&#39;);&#xA;    $mail-&amp;gt;addCC(&#39;cc@example.com&#39;);&#xA;    $mail-&amp;gt;addBCC(&#39;bcc@example.com&#39;);&#xA;&#xA;    //Attachments&#xA;    $mail-&amp;gt;addAttachment(&#39;/var/tmp/file.tar.gz&#39;);         //Add attachments&#xA;    $mail-&amp;gt;addAttachment(&#39;/tmp/image.jpg&#39;, &#39;new.jpg&#39;);    //Optional name&#xA;&#xA;    //Content&#xA;    $mail-&amp;gt;isHTML(true);                                  //Set email format to HTML&#xA;    $mail-&amp;gt;Subject = &#39;Here is the subject&#39;;&#xA;    $mail-&amp;gt;Body    = &#39;This is the HTML message body &amp;lt;b&amp;gt;in bold!&amp;lt;/b&amp;gt;&#39;;&#xA;    $mail-&amp;gt;AltBody = &#39;This is the body in plain text for non-HTML mail clients&#39;;&#xA;&#xA;    $mail-&amp;gt;send();&#xA;    echo &#39;Message has been sent&#39;;&#xA;} catch (Exception $e) {&#xA;    echo &#34;Message could not be sent. Mailer Error: {$mail-&amp;gt;ErrorInfo}&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll find plenty to play with in the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/examples&#34;&gt;examples&lt;/a&gt; folder, which covers many common scenarios including sending through gmail, building contact forms, sending to mailing lists, and more.&lt;/p&gt; &#xA;&lt;p&gt;If you are re-using the instance (e.g. when sending to a mailing list), you may need to clear the recipient list to avoid sending duplicate messages. See &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/raw/master/examples/mailing_list.phps&#34;&gt;the mailing list example&lt;/a&gt; for further guidance.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it. You should now be ready to use PHPMailer!&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;PHPMailer defaults to English, but in the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/language/&#34;&gt;language&lt;/a&gt; folder you&#39;ll find many translations for PHPMailer error messages that you may encounter. Their filenames contain &lt;a href=&#34;http://en.wikipedia.org/wiki/ISO_639-1&#34;&gt;ISO 639-1&lt;/a&gt; language code for the translations, for example &lt;code&gt;fr&lt;/code&gt; for French. To specify a language, you need to tell PHPMailer which one to use, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//To load the French version&#xA;$mail-&amp;gt;setLanguage(&#39;fr&#39;, &#39;/optional/path/to/language/directory/&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We welcome corrections and new languages – if you&#39;re looking for corrections, run the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/test/PHPMailerLangTest.php&#34;&gt;PHPMailerLangTest.php&lt;/a&gt; script in the tests folder and it will show any missing translations.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Start reading at the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/wiki&#34;&gt;GitHub wiki&lt;/a&gt;. If you&#39;re having trouble, head for &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting&#34;&gt;the troubleshooting guide&lt;/a&gt; as it&#39;s frequently updated.&lt;/p&gt; &#xA;&lt;p&gt;Examples of how to use PHPMailer for common scenarios can be found in the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/examples&#34;&gt;examples&lt;/a&gt; folder. If you&#39;re looking for a good starting point, we recommend you start with &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/examples/gmail.phps&#34;&gt;the Gmail example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To reduce PHPMailer&#39;s deployed code footprint, examples are not included if you load PHPMailer via Composer or via &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/archive/master.zip&#34;&gt;GitHub&#39;s zip file download&lt;/a&gt;, so you&#39;ll need to either clone the git repository or use the above links to get to the examples directly.&lt;/p&gt; &#xA;&lt;p&gt;Complete generated API documentation is &lt;a href=&#34;https://phpmailer.github.io/PHPMailer/&#34;&gt;available online&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can generate complete API-level documentation by running &lt;code&gt;phpdoc&lt;/code&gt; in the top-level folder, and documentation will appear in the &lt;code&gt;docs&lt;/code&gt; folder, though you&#39;ll need to have &lt;a href=&#34;http://www.phpdoc.org&#34;&gt;PHPDocumentor&lt;/a&gt; installed. You may find &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/raw/master/test/PHPMailerTest.php&#34;&gt;the unit tests&lt;/a&gt; a good reference for how to do various operations such as encryption.&lt;/p&gt; &#xA;&lt;p&gt;If the documentation doesn&#39;t cover what you need, search the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/phpmailer&#34;&gt;many questions on Stack Overflow&lt;/a&gt;, and before you ask a question about &#34;SMTP Error: Could not connect to SMTP host.&#34;, &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting&#34;&gt;read the troubleshooting guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/test/&#34;&gt;PHPMailer tests&lt;/a&gt; use PHPUnit 9, with &lt;a href=&#34;https://github.com/Yoast/PHPUnit-Polyfills&#34;&gt;a polyfill&lt;/a&gt; to let 9-style tests run on older PHPUnit and PHP versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/actions&#34;&gt;&lt;img src=&#34;https://github.com/PHPMailer/PHPMailer/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Test status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If this isn&#39;t passing, is there something you can do to help?&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Please disclose any vulnerabilities found responsibly – report security issues to the maintainers privately.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/SECURITY.md&#34;&gt;SECURITY&lt;/a&gt; and &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/security&#34;&gt;PHPMailer&#39;s security advisories on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit bug reports, suggestions and pull requests to the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re particularly interested in fixing edge-cases, expanding test coverage and updating translations.&lt;/p&gt; &#xA;&lt;p&gt;If you found a mistake in the docs, or want to add something, go ahead and amend the wiki – anyone can edit it.&lt;/p&gt; &#xA;&lt;p&gt;If you have git clones from prior to the move to the PHPMailer GitHub organisation, you&#39;ll need to update any remote URLs referencing the old GitHub location with a command like this from within your clone:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote set-url upstream https://github.com/PHPMailer/PHPMailer.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please &lt;em&gt;don&#39;t&lt;/em&gt; use the SourceForge or Google Code projects any more; they are obsolete and no longer maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;Development time and resources for PHPMailer are provided by &lt;a href=&#34;https://info.smartmessages.net/&#34;&gt;Smartmessages.net&lt;/a&gt;, the world&#39;s only privacy-first email marketing system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://info.smartmessages.net/&#34;&gt;&lt;img src=&#34;https://www.smartmessages.net/img/smartmessages-logo.svg?sanitize=true&#34; width=&#34;550&#34; alt=&#34;Smartmessages.net privacy-first email marketing logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Donations are very welcome, whether in beer 🍺, T-shirts 👕, or cold, hard cash 💰. Sponsorship through GitHub is a simple and convenient way to say &#34;thank you&#34; to PHPMailer&#39;s maintainers and contributors – just click the &#34;Sponsor&#34; button &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer&#34;&gt;on the project page&lt;/a&gt;. If your company uses PHPMailer, consider taking part in Tidelift&#39;s enterprise support programme.&lt;/p&gt; &#xA;&lt;h2&gt;PHPMailer For Enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of PHPMailer and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/packagist-phpmailer-phpmailer?utm_source=packagist-phpmailer-phpmailer&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/PHPMailer/PHPMailer/master/changelog.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHPMailer was originally written in 2001 by Brent R. Matzelle as a &lt;a href=&#34;http://sourceforge.net/projects/phpmailer/&#34;&gt;SourceForge project&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Synchro&#34;&gt;Marcus Bointon&lt;/a&gt; (&lt;code&gt;coolbru&lt;/code&gt; on SF) and Andy Prevost (&lt;code&gt;codeworxtech&lt;/code&gt;) took over the project in 2004.&lt;/li&gt; &#xA; &lt;li&gt;Became an Apache incubator project on Google Code in 2010, managed by Jim Jagielski.&lt;/li&gt; &#xA; &lt;li&gt;Marcus created &lt;a href=&#34;https://github.com/Synchro/PHPMailer&#34;&gt;his fork on GitHub&lt;/a&gt; in 2008.&lt;/li&gt; &#xA; &lt;li&gt;Jim and Marcus decide to join forces and use GitHub as the canonical and official repo for PHPMailer in 2013.&lt;/li&gt; &#xA; &lt;li&gt;PHPMailer moves to &lt;a href=&#34;https://github.com/PHPMailer&#34;&gt;the PHPMailer organisation&lt;/a&gt; on GitHub in 2013.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What&#39;s changed since moving from SourceForge?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official successor to the SourceForge and Google Code projects.&lt;/li&gt; &#xA; &lt;li&gt;Test suite.&lt;/li&gt; &#xA; &lt;li&gt;Continuous integration with Github Actions.&lt;/li&gt; &#xA; &lt;li&gt;Composer support.&lt;/li&gt; &#xA; &lt;li&gt;Public development.&lt;/li&gt; &#xA; &lt;li&gt;Additional languages and language strings.&lt;/li&gt; &#xA; &lt;li&gt;CRAM-MD5 authentication support.&lt;/li&gt; &#xA; &lt;li&gt;Preserves full repo history of authors, commits and branches from the original SourceForge project.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>codeigniter4/CodeIgniter4</title>
    <updated>2022-06-02T02:02:38Z</updated>
    <id>tag:github.com,2022-06-02:/codeigniter4/CodeIgniter4</id>
    <link href="https://github.com/codeigniter4/CodeIgniter4" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source PHP Framework (originally from EllisLab)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CodeIgniter 4 Development&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/codeigniter4/CodeIgniter4/actions?query=workflow%3A%22PHPUnit%22&#34;&gt;&lt;img src=&#34;https://github.com/codeigniter4/CodeIgniter4/workflows/PHPUnit/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/codeigniter4/CodeIgniter4?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/codeigniter4/CodeIgniter4/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/codeigniter4/framework&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/codeigniter4/framework/downloads&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/codeigniter4/framework&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/codeigniter4/CodeIgniter4&#34; alt=&#34;GitHub release (latest by date)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/codeigniter4/framework&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/codeigniter4/CodeIgniter4&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/codeigniter4/CodeIgniter4/raw/develop/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/codeigniter4/CodeIgniter4&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/codeigniter4/CodeIgniter4/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34; alt=&#34;contributions welcome&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is CodeIgniter?&lt;/h2&gt; &#xA;&lt;p&gt;CodeIgniter is a PHP full-stack web framework that is light, fast, flexible and secure. More information can be found at the &lt;a href=&#34;http://codeigniter.com&#34;&gt;official site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repository holds the source code for CodeIgniter 4 only. Version 4 is a complete rewrite to bring the quality and the code into a more modern version, while still keeping as many of the things intact that has made people love the framework over the years.&lt;/p&gt; &#xA;&lt;p&gt;More information about the plans for version 4 can be found in &lt;a href=&#34;http://forum.codeigniter.com/thread-62615.html&#34;&gt;the announcement&lt;/a&gt; on the forums.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://codeigniter4.github.io/userguide/&#34;&gt;User Guide&lt;/a&gt; is the primary documentation for CodeIgniter 4.&lt;/p&gt; &#xA;&lt;p&gt;The current &lt;strong&gt;in-progress&lt;/strong&gt; User Guide can be found &lt;a href=&#34;https://codeigniter4.github.io/CodeIgniter4/&#34;&gt;here&lt;/a&gt;. As with the rest of the framework, it is a work in progress, and will see changes over time to structure, explanations, etc.&lt;/p&gt; &#xA;&lt;p&gt;You might also be interested in the &lt;a href=&#34;https://codeigniter4.github.io/api/&#34;&gt;API documentation&lt;/a&gt; for the framework components.&lt;/p&gt; &#xA;&lt;h2&gt;Important Change with index.php&lt;/h2&gt; &#xA;&lt;p&gt;index.php is no longer in the root of the project! It has been moved inside the &lt;em&gt;public&lt;/em&gt; folder, for better security and separation of components.&lt;/p&gt; &#xA;&lt;p&gt;This means that you should configure your web server to &#34;point&#34; to your project&#39;s &lt;em&gt;public&lt;/em&gt; folder, and not to the project root. A better practice would be to configure a virtual host to point there. A poor practice would be to point your web server to the project root and expect to enter &lt;em&gt;public/...&lt;/em&gt;, as the rest of your logic and the framework are exposed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please&lt;/strong&gt; read the user guide for a better explanation of how CI4 works!&lt;/p&gt; &#xA;&lt;h2&gt;Repository Management&lt;/h2&gt; &#xA;&lt;p&gt;CodeIgniter is developed completely on a volunteer basis. As such, please give up to 7 days for your issues to be reviewed. If you haven&#39;t heard from one of the team in that time period, feel free to leave a comment on the issue so that it gets brought back to our attention.&lt;/p&gt; &#xA;&lt;p&gt;We use GitHub issues to track &lt;strong&gt;BUGS&lt;/strong&gt; and to track approved &lt;strong&gt;DEVELOPMENT&lt;/strong&gt; work packages. We use our &lt;a href=&#34;http://forum.codeigniter.com&#34;&gt;forum&lt;/a&gt; to provide SUPPORT and to discuss FEATURE REQUESTS.&lt;/p&gt; &#xA;&lt;p&gt;If you raise an issue here that pertains to support or a feature request, it will be closed! If you are not sure if you have found a bug, raise a thread on the forum first - someone else may have encountered the same thing.&lt;/p&gt; &#xA;&lt;p&gt;Before raising a new GitHub issue, please check that your bug hasn&#39;t already been reported or fixed.&lt;/p&gt; &#xA;&lt;p&gt;We use pull requests (PRs) for CONTRIBUTIONS to the repository. We are looking for contributions that address one of the reported bugs or approved work packages.&lt;/p&gt; &#xA;&lt;p&gt;Do not use a PR as a form of feature request. Unsolicited contributions will only be considered if they fit nicely into the framework roadmap. Remember that some components that were part of CodeIgniter 3 are being moved to optional packages, with their own repository.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We &lt;strong&gt;are&lt;/strong&gt; accepting contributions from the community! It doesn&#39;t matter whether you can code, write documentation, or help find bugs, all contributions are welcome.&lt;/p&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://github.com/codeigniter4/CodeIgniter4/raw/develop/contributing/README.md&#34;&gt;&lt;em&gt;Contributing to CodeIgniter&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CodeIgniter has had thousands on contributions from people since its creation. This project would not be what it is without them.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/codeigniter4/CodeIgniter4/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=codeigniter4/CodeIgniter4&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Server Requirements&lt;/h2&gt; &#xA;&lt;p&gt;PHP version 7.4 or higher is required, with the following extensions installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/intl.requirements.php&#34;&gt;intl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/curl.requirements.php&#34;&gt;libcurl&lt;/a&gt; if you plan to use the HTTP\CURLRequest library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/mbstring.installation.php&#34;&gt;mbstring&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, make sure that the following extensions are enabled in your PHP:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;json (enabled by default - don&#39;t turn it off)&lt;/li&gt; &#xA; &lt;li&gt;xml (enabled by default - don&#39;t turn it off)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/mysqlnd.install.php&#34;&gt;mysqlnd&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running CodeIgniter Tests&lt;/h2&gt; &#xA;&lt;p&gt;Information on running the CodeIgniter test suite can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/codeigniter4/CodeIgniter4/develop/tests/README.md&#34;&gt;README.md&lt;/a&gt; file in the tests directory.&lt;/p&gt;</summary>
  </entry>
</feed>