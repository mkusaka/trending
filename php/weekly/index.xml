<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T01:58:09Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>laravel/passport</title>
    <updated>2023-02-19T01:58:09Z</updated>
    <id>tag:github.com,2023-02-19:/laravel/passport</id>
    <link href="https://github.com/laravel/passport" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Laravel Passport provides OAuth2 server support to Laravel.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/laravel/passport/11.x/art/logo.svg?sanitize=true&#34; alt=&#34;Logo Laravel Passport&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/laravel/passport/actions&#34;&gt;&lt;img src=&#34;https://github.com/laravel/passport/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/passport&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/laravel/passport&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/passport&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/laravel/passport&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/passport&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/l/laravel/passport&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Passport is an OAuth2 server and API authentication package that is simple and enjoyable to use.&lt;/p&gt; &#xA;&lt;h2&gt;Official Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for Passport can be found on the &lt;a href=&#34;https://laravel.com/docs/passport&#34;&gt;Laravel website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to Passport! The contribution guide can be found in the &lt;a href=&#34;https://laravel.com/docs/contributions&#34;&gt;Laravel documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;In order to ensure that the Laravel community is welcoming to all, please review and abide by the &lt;a href=&#34;https://laravel.com/docs/contributions#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://github.com/laravel/passport/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Passport is open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/laravel/passport/11.x/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>barryvdh/laravel-ide-helper</title>
    <updated>2023-02-19T01:58:09Z</updated>
    <id>tag:github.com,2023-02-19:/barryvdh/laravel-ide-helper</id>
    <link href="https://github.com/barryvdh/laravel-ide-helper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;IDE Helper for Laravel&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IDE Helper Generator for Laravel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/barryvdh/laravel-ide-helper/actions&#34;&gt;&lt;img src=&#34;https://github.com/barryvdh/laravel-ide-helper/actions/workflows/run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://choosealicense.com/licenses/mit/&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/barryvdh/laravel-ide-helper/license.png&#34; alt=&#34;Packagist License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/barryvdh/laravel-ide-helper&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/barryvdh/laravel-ide-helper/version.png&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/barryvdh/laravel-ide-helper&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/barryvdh/laravel-ide-helper/d/total.png&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fruitcake.nl/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Powered%20By-Fruitcake-b2bc35.svg?sanitize=true&#34; alt=&#34;Fruitcake&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Complete PHPDocs, directly from the source&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package generates helper files that enable your IDE to provide accurate autocompletion. Generation is done based on the files in your project, so they are always up-to-date.&lt;/p&gt; &#xA;&lt;p&gt;It supports Laravel 8+ and PHP 7.3+&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#automatic-phpdoc-generation-for-laravel-facades&#34;&gt;Automatic PHPDoc generation for Laravel Facades&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#automatic-phpdocs-for-models&#34;&gt;Automatic PHPDocs for models&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#model-directories&#34;&gt;Model Directories&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#ignore-models&#34;&gt;Ignore Models&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#model-hooks&#34;&gt;Model Hooks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#automatic-phpdocs-generation-for-laravel-fluent-methods&#34;&gt;Automatic PHPDocs generation for Laravel Fluent methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#auto-completion-for-factory-builders&#34;&gt;Auto-completion for factory builders&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#phpstorm-meta-for-container-instances&#34;&gt;PhpStorm Meta for Container instances&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#usage-with-lumen&#34;&gt;Usage with Lumen&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#enabling-facades&#34;&gt;Enabling Facades&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#adding-the-service-provider&#34;&gt;Adding the Service Provider&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#adding-additional-facades&#34;&gt;Adding Additional Facades&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Require this package with composer using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require --dev barryvdh/laravel-ide-helper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This package makes use of &lt;a href=&#34;https://medium.com/@taylorotwell/package-auto-discovery-in-laravel-5-5-ea9e3ab20518&#34;&gt;Laravels package auto-discovery mechanism&lt;/a&gt;, which means if you don&#39;t install dev dependencies in production, it also won&#39;t be loaded.&lt;/p&gt; &#xA;&lt;p&gt;If for some reason you want manually control this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add the package to the &lt;code&gt;extra.laravel.dont-discover&lt;/code&gt; key in &lt;code&gt;composer.json&lt;/code&gt;, e.g. &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;extra&#34;: {&#xA;  &#34;laravel&#34;: {&#xA;    &#34;dont-discover&#34;: [&#xA;      &#34;barryvdh/laravel-ide-helper&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the following class to the &lt;code&gt;providers&lt;/code&gt; array in &lt;code&gt;config/app.php&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class,&#xA;&lt;/code&gt;&lt;/pre&gt; If you want to manually load it only in non-production environments, instead you can add this to your &lt;code&gt;AppServiceProvider&lt;/code&gt; with the &lt;code&gt;register()&lt;/code&gt; method: &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function register()&#xA;{&#xA;    if ($this-&amp;gt;app-&amp;gt;isLocal()) {&#xA;        $this-&amp;gt;app-&amp;gt;register(\Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class);&#xA;    }&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Avoid caching the configuration in your development environment, it may cause issues after installing this package; respectively clear the cache beforehand via &lt;code&gt;php artisan cache:clear&lt;/code&gt; if you encounter problems when running the commands&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Check out &lt;a href=&#34;https://laracasts.com/series/how-to-be-awesome-in-phpstorm/episodes/15&#34;&gt;this Laracasts video&lt;/a&gt; for a quick introduction/explanation!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan ide-helper:generate&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#automatic-phpdoc-generation-for-laravel-facades&#34;&gt;PHPDoc generation for Laravel Facades &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan ide-helper:models&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#automatic-PHPDocs-for-models&#34;&gt;PHPDocs for models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan ide-helper:meta&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/barryvdh/laravel-ide-helper/master/#phpstorm-meta-for-container-instances&#34;&gt;PhpStorm Meta file&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: You do need CodeComplice for Sublime Text: &lt;a href=&#34;https://github.com/spectacles/CodeComplice&#34;&gt;https://github.com/spectacles/CodeComplice&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Automatic PHPDoc generation for Laravel Facades&lt;/h3&gt; &#xA;&lt;p&gt;You can now re-generate the docs yourself (for future updates)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan ide-helper:generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;bootstrap/compiled.php&lt;/code&gt; has to be cleared first, so run &lt;code&gt;php artisan clear-compiled&lt;/code&gt; before generating.&lt;/p&gt; &#xA;&lt;p&gt;This will generate the file &lt;code&gt;_ide_helper.php&lt;/code&gt; which is expected to be additionally parsed by your IDE for autocomplete. You can use the config &lt;code&gt;filename&lt;/code&gt; to change its name.&lt;/p&gt; &#xA;&lt;p&gt;You can configure your &lt;code&gt;composer.json&lt;/code&gt; to do this each time you update your dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;scripts&#34;: {&#xA;    &#34;post-update-cmd&#34;: [&#xA;        &#34;Illuminate\\Foundation\\ComposerScripts::postUpdate&#34;,&#xA;        &#34;@php artisan ide-helper:generate&#34;,&#xA;        &#34;@php artisan ide-helper:meta&#34;&#xA;    ]&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also publish the config file to change implementations (ie. interface to specific class) or set defaults for &lt;code&gt;--helpers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --provider=&#34;Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider&#34; --tag=config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generator tries to identify the real class, but if it cannot be found, you can define it in the config file.&lt;/p&gt; &#xA;&lt;p&gt;Some classes need a working database connection. If you do not have a default working connection, some facades will not be included. You can use an in-memory SQLite driver by adding the &lt;code&gt;-M&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;You can choose to include helper files. This is not enabled by default, but you can override it with the &lt;code&gt;--helpers (-H)&lt;/code&gt; option. The &lt;code&gt;Illuminate/Support/helpers.php&lt;/code&gt; is already set up, but you can add/remove your own files in the config file.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic PHPDoc generation for macros and mixins&lt;/h3&gt; &#xA;&lt;p&gt;This package can generate PHPDocs for macros and mixins which will be added to the &lt;code&gt;_ide_helper.php&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;But this only works if you use type hinting when declaring a macro.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Str::macro(&#39;concat&#39;, function(string $str1, string $str2) : string {&#xA;    return $str1 . $str2;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatic PHPDocs for models&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want to write your properties yourself, you can use the command &lt;code&gt;php artisan ide-helper:models&lt;/code&gt; to generate PHPDocs, based on table columns, relations and getters/setters.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: this command requires a working database connection to introspect the table of each model&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;By default, you are asked to overwrite or write to a separate file (&lt;code&gt;_ide_helper_models.php&lt;/code&gt;). You can write the comments directly to your Model file, using the &lt;code&gt;--write (-W)&lt;/code&gt; option, or force to not write with &lt;code&gt;--nowrite (-N)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively using the &lt;code&gt;--write-mixin (-M)&lt;/code&gt; option will only add a mixin tag to your Model file, writing the rest in (&lt;code&gt;_ide_helper_models.php&lt;/code&gt;). The class name will be different from the model, avoiding the IDE duplicate annoyance.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please make sure to back up your models, before writing the info.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Writing to the models should keep the existing comments and only append new properties/methods. The existing PHPDoc is replaced, or added if not found. With the &lt;code&gt;--reset (-R)&lt;/code&gt; option, the existing PHPDocs are ignored, and only the newly found columns/relations are saved as PHPDocs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan ide-helper:models &#34;App\Models\Post&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * App\Models\Post&#xA; *&#xA; * @property integer $id&#xA; * @property integer $author_id&#xA; * @property string $title&#xA; * @property string $text&#xA; * @property \Illuminate\Support\Carbon $created_at&#xA; * @property \Illuminate\Support\Carbon $updated_at&#xA; * @property-read \User $author&#xA; * @property-read \Illuminate\Database\Eloquent\Collection|\Comment[] $comments&#xA; * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Post newModelQuery()&#xA; * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Post newQuery()&#xA; * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Post query()&#xA; * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Post whereTitle($value)&#xA; * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Post forAuthors(\User ...$authors)&#xA; * …&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the &lt;code&gt;--write-mixin (-M)&lt;/code&gt; option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * …&#xA; * @mixin IdeHelperPost&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Model Directories&lt;/h4&gt; &#xA;&lt;p&gt;By default, models in &lt;code&gt;app/models&lt;/code&gt; are scanned. The optional argument tells what models to use (also outside app/models).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan ide-helper:models &#34;App\Models\Post&#34; &#34;App\Models\User&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also scan a different directory, using the &lt;code&gt;--dir&lt;/code&gt; option (relative from the base path):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan ide-helper:models --dir=&#34;path/to/models&#34; --dir=&#34;app/src/Model&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can publish the config file (&lt;code&gt;php artisan vendor:publish&lt;/code&gt;) and set the default directories.&lt;/p&gt; &#xA;&lt;h4&gt;Ignore Models&lt;/h4&gt; &#xA;&lt;p&gt;Models can be ignored using the &lt;code&gt;--ignore (-I)&lt;/code&gt; option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan ide-helper:models --ignore=&#34;App\Models\Post,App\Models\User&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or can be ignored by setting the &lt;code&gt;ignored_models&lt;/code&gt; config&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;ignored_models&#39; =&amp;gt; [&#xA;    App\Post::class,&#xA;    Api\User::class&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Magic &lt;code&gt;where*&lt;/code&gt; methods&lt;/h4&gt; &#xA;&lt;p&gt;Eloquent allows calling &lt;code&gt;where&amp;lt;Attribute&amp;gt;&lt;/code&gt; on your models, e.g. &lt;code&gt;Post::whereTitle(…)&lt;/code&gt; and automatically translates this to e.g. &lt;code&gt;Post::where(&#39;title&#39;, &#39;=&#39;, &#39;…&#39;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If for some reason it&#39;s undesired to have them generated (one for each column), you can disable this via config &lt;code&gt;write_model_magic_where&lt;/code&gt; and setting it to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Magic &lt;code&gt;*_count&lt;/code&gt; properties&lt;/h4&gt; &#xA;&lt;p&gt;You may use the &lt;a href=&#34;https://laravel.com/docs/master/eloquent-relationships#counting-related-models&#34;&gt;&lt;code&gt;::withCount&lt;/code&gt;&lt;/a&gt; method to count the number results from a relationship without actually loading them. Those results are then placed in attributes following the &lt;code&gt;&amp;lt;columname&amp;gt;_count&lt;/code&gt; convention.&lt;/p&gt; &#xA;&lt;p&gt;By default, these attributes are generated in the phpdoc. You can turn them off by setting the config &lt;code&gt;write_model_relation_count_properties&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Generics annotations&lt;/h4&gt; &#xA;&lt;p&gt;Laravel 9 introduced generics annotations in DocBlocks for collections. PhpStorm 2022.3 and above support the use of generics annotations within &lt;code&gt;@property&lt;/code&gt; and &lt;code&gt;@property-read&lt;/code&gt; declarations in DocBlocks, e.g. &lt;code&gt;Collection&amp;lt;User&amp;gt;&lt;/code&gt; instead of &lt;code&gt;Collection|User[]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These can be disabled by setting the config &lt;code&gt;use_generics_annotations&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Support &lt;code&gt;@comment&lt;/code&gt; based on DocBlock&lt;/h4&gt; &#xA;&lt;p&gt;In order to better support IDEs, relations and getters/setters can also add a comment to a property like table columns. Therefore a custom docblock &lt;code&gt;@comment&lt;/code&gt; is used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Users extends Model&#xA;{&#xA;    /**&#xA;     * @comment Get User&#39;s full name&#xA;     *&#xA;     * @return string&#xA;     */&#xA;    public function getFullNameAttribute(): string&#xA;    {&#xA;        return $this-&amp;gt;first_name . &#39; &#39; .$this-&amp;gt;last_name ;&#xA;    }&#xA;}&#xA;&#xA;// =&amp;gt; after generate models&#xA;&#xA;/**&#xA; * App\Models\Users&#xA; * &#xA; * @property-read string $full_name Get User&#39;s full name&#xA; * …&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dedicated Eloquent Builder methods&lt;/h4&gt; &#xA;&lt;p&gt;A new method to the eloquent models was added called &lt;code&gt;newEloquentBuilder&lt;/code&gt; &lt;a href=&#34;https://timacdonald.me/dedicated-eloquent-model-query-builders/&#34;&gt;Reference&lt;/a&gt; where we can add support for creating a new dedicated class instead of using local scopes in the model itself.&lt;/p&gt; &#xA;&lt;p&gt;If for some reason it&#39;s undesired to have them generated (one for each column), you can disable this via config &lt;code&gt;write_model_external_builder_methods&lt;/code&gt; and setting it to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Unsupported or custom database types&lt;/h4&gt; &#xA;&lt;p&gt;Common column types (e.g. varchar, integer) are correctly mapped to PHP types (&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;But sometimes you may want to use custom column types in your database like &lt;code&gt;geography&lt;/code&gt;, &lt;code&gt;jsonb&lt;/code&gt;, &lt;code&gt;citext&lt;/code&gt;, &lt;code&gt;bit&lt;/code&gt;, etc. which may throw an &#34;Unknown database type&#34;-Exception.&lt;/p&gt; &#xA;&lt;p&gt;For those special cases, you can map them via the config &lt;code&gt;custom_db_types&lt;/code&gt;. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;custom_db_types&#39; =&amp;gt; [&#xA;    &#39;mysql&#39; =&amp;gt; [&#xA;        &#39;geography&#39; =&amp;gt; &#39;array&#39;,&#xA;        &#39;point&#39; =&amp;gt; &#39;array&#39;,&#xA;    ],&#xA;    &#39;postgresql&#39; =&amp;gt; [&#xA;        &#39;jsonb&#39; =&amp;gt; &#39;string&#39;,&#xA;        &#39;_int4&#39; =&amp;gt; &#39;array&#39;,&#xA;    ],&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Relationship Types&lt;/h4&gt; &#xA;&lt;p&gt;If you are using relationships not built into Laravel you will need to specify the name and returning class in the config to get proper generation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;additional_relation_types&#39; =&amp;gt; [&#xA;    &#39;externalHasMany&#39; =&amp;gt; \My\Package\externalHasMany::class&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Found relationships will typically generate a return value based on the name of the relationship.&lt;/p&gt; &#xA;&lt;p&gt;If your custom relationships don&#39;t follow this traditional naming scheme you can define its return type manually. The available options are &lt;code&gt;many&lt;/code&gt; and &lt;code&gt;morphTo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;additional_relation_return_types&#39; =&amp;gt; [&#xA;    &#39;externalHasMultiple&#39; =&amp;gt; &#39;many&#39;&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Model Hooks&lt;/h4&gt; &#xA;&lt;p&gt;If you need additional information on your model from sources that are not handled by default, you can hook in to the generation process with model hooks to add extra information on the fly. Simply create a class that implements &lt;code&gt;ModelHookInterface&lt;/code&gt; and add it to the &lt;code&gt;model_hooks&lt;/code&gt; array in the config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;model_hooks&#39; =&amp;gt; [&#xA;   MyCustomHook::class,&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; method will be called during generation for every model and receives the current running &lt;code&gt;ModelsCommand&lt;/code&gt; and the current &lt;code&gt;Model&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class MyCustomHook implements ModelHookInterface&#xA;{&#xA;    public function run(ModelsCommand $command, Model $model): void&#xA;    {&#xA;        if (! $model instanceof MyModel) {&#xA;            return;&#xA;        }&#xA;&#xA;        $command-&amp;gt;setProperty(&#39;custom&#39;, &#39;string&#39;, true, false, &#39;My custom property&#39;);&#xA;        $command-&amp;gt;unsetMethod(&#39;method&#39;);&#xA;        $command-&amp;gt;setMethod(&#39;method&#39;, $command-&amp;gt;getMethodType($model, &#39;\Some\Class&#39;), [&#39;$param&#39;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * MyModel&#xA; *&#xA; * @property integer $id&#xA; * @property-read string $custom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatic PHPDocs generation for Laravel Fluent methods&lt;/h3&gt; &#xA;&lt;p&gt;If you need PHPDocs support for Fluent methods in migration, for example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$table-&amp;gt;string(&#34;somestring&#34;)-&amp;gt;nullable()-&amp;gt;index();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After publishing vendor, simply change the &lt;code&gt;include_fluent&lt;/code&gt; line in your &lt;code&gt;config/ide-helper.php&lt;/code&gt; file into:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;include_fluent&#39; =&amp;gt; true,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;php artisan ide-helper:generate&lt;/code&gt;, you will now see all Fluent methods recognized by your IDE.&lt;/p&gt; &#xA;&lt;h3&gt;Auto-completion for factory builders&lt;/h3&gt; &#xA;&lt;p&gt;If you would like the &lt;code&gt;factory()-&amp;gt;create()&lt;/code&gt; and &lt;code&gt;factory()-&amp;gt;make()&lt;/code&gt; methods to return the correct model class, you can enable custom factory builders with the &lt;code&gt;include_factory_builders&lt;/code&gt; line in your &lt;code&gt;config/ide-helper.php&lt;/code&gt; file. Deprecated for Laravel 8 or latest.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;include_factory_builders&#39; =&amp;gt; true,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For this to work, you must also publish the PhpStorm Meta file (see below).&lt;/p&gt; &#xA;&lt;h2&gt;PhpStorm Meta for Container instances&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to generate a PhpStorm meta file to &lt;a href=&#34;https://www.jetbrains.com/help/phpstorm/ide-advanced-metadata.html&#34;&gt;add support for factory design pattern&lt;/a&gt;. For Laravel, this means we can make PhpStorm understand what kind of object we are resolving from the IoC Container. For example, &lt;code&gt;events&lt;/code&gt; will return an &lt;code&gt;Illuminate\Events\Dispatcher&lt;/code&gt; object, so with the meta file you can call &lt;code&gt;app(&#39;events&#39;)&lt;/code&gt; and it will autocomplete the Dispatcher methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan ide-helper:meta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;app(&#39;events&#39;)-&amp;gt;fire();&#xA;\App::make(&#39;events&#39;)-&amp;gt;fire();&#xA;&#xA;/** @var \Illuminate\Foundation\Application $app */&#xA;$app-&amp;gt;make(&#39;events&#39;)-&amp;gt;fire();&#xA;&#xA;// When the key is not found, it uses the argument as class name&#xA;app(&#39;App\SomeClass&#39;);&#xA;// Also works with&#xA;app(App\SomeClass::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: You might need to restart PhpStorm and make sure &lt;code&gt;.phpstorm.meta.php&lt;/code&gt; is indexed.&lt;/p&gt; &#xA; &lt;p&gt;Note: When you receive a FatalException: class not found, check your config (for example, remove S3 as cloud driver when you don&#39;t have S3 configured. Remove Redis ServiceProvider when you don&#39;t use it).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can change the generated filename via the config &lt;code&gt;meta_filename&lt;/code&gt;. This can be useful for cases where you want to take advantage of PhpStorm&#39;s support of the &lt;em&gt;directory&lt;/em&gt; &lt;code&gt;.phpstorm.meta.php/&lt;/code&gt;: all files placed there are parsed, should you want to provide additional files to PhpStorm.&lt;/p&gt; &#xA;&lt;h2&gt;Usage with Lumen&lt;/h2&gt; &#xA;&lt;p&gt;This package is focused on Laravel development, but it can also be used in Lumen with some workarounds. Because Lumen works a little different, as it is like a bare bone version of Laravel and the main configuration parameters are instead located in &lt;code&gt;bootstrap/app.php&lt;/code&gt;, some alterations must be made.&lt;/p&gt; &#xA;&lt;h3&gt;Enabling Facades&lt;/h3&gt; &#xA;&lt;p&gt;While Laravel IDE Helper can generate automatically default Facades for code hinting, Lumen doesn&#39;t come with Facades activated. If you plan in using them, you must enable them under the &lt;code&gt;Create The Application&lt;/code&gt; section, uncommenting this line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// $app-&amp;gt;withFacades();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From there, you should be able to use the &lt;code&gt;create_alias()&lt;/code&gt; function to add additional Facades into your application.&lt;/p&gt; &#xA;&lt;h3&gt;Adding the Service Provider&lt;/h3&gt; &#xA;&lt;p&gt;You can install Laravel IDE Helper in &lt;code&gt;app/Providers/AppServiceProvider.php&lt;/code&gt;, and uncommenting this line that registers the App Service Providers, so it can properly load.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// $app-&amp;gt;register(App\Providers\AppServiceProvider::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not using that line, that is usually handy to manage gracefully multiple Laravel/Lumen installations, you will have to add this line of code under the &lt;code&gt;Register Service Providers&lt;/code&gt; section of your &lt;code&gt;bootstrap/app.php&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($app-&amp;gt;environment() !== &#39;production&#39;) {&#xA;    $app-&amp;gt;register(\Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, Laravel IDE Helper should work correctly. During the generation process, the script may throw exceptions saying that some Class(s) doesn&#39;t exist or there are some undefined indexes. This is normal, as Lumen has some default packages stripped away, like Cookies, Storage and Session. If you plan to add these packages, you will have to add them manually and create additional Facades if needed.&lt;/p&gt; &#xA;&lt;h3&gt;Adding Additional Facades&lt;/h3&gt; &#xA;&lt;p&gt;Currently, Lumen IDE Helper doesn&#39;t take into account additional Facades created under &lt;code&gt;bootstrap/app.php&lt;/code&gt; using &lt;code&gt;create_alias()&lt;/code&gt;, so you need to create a &lt;code&gt;config/app.php&lt;/code&gt; file and add your custom aliases under an &lt;code&gt;aliases&lt;/code&gt; array again, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return [&#xA;    &#39;aliases&#39; =&amp;gt; [&#xA;        &#39;CustomAliasOne&#39; =&amp;gt; Example\Support\Facades\CustomAliasOne::class,&#xA;        &#39;CustomAliasTwo&#39; =&amp;gt; Example\Support\Facades\CustomAliasTwo::class,&#xA;        //...&#xA;    ]&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you run &lt;code&gt;php artisan ide-helper:generate&lt;/code&gt;, it&#39;s recommended (but not mandatory) to rename &lt;code&gt;config/app.php&lt;/code&gt; to something else, until you have to re-generate the docs or after passing to production environment. Lumen 5.1+ will read this file for configuration parameters if it is present, and may overlap some configurations if it is completely populated.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Laravel IDE Helper Generator is open-sourced software licensed under the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT license&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>beerandcodeteam/olw-2</title>
    <updated>2023-02-19T01:58:09Z</updated>
    <id>tag:github.com,2023-02-19:/beerandcodeteam/olw-2</id>
    <link href="https://github.com/beerandcodeteam/olw-2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://laravel.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://banners.beyondco.de/OLW.png?theme=light&amp;amp;packageManager=&amp;amp;packageName=by+Beer+%26+Code&amp;amp;pattern=architect&amp;amp;style=style_1&amp;amp;description=OPEN+LARAVEL+WEEK&amp;amp;md=1&amp;amp;showWatermark=0&amp;amp;fontSize=100px&amp;amp;images=https%3A%2F%2Flaravel.com%2Fimg%2Flogomark.min.svg?sanitize=true&#34; width=&#34;650&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Instalando o projeto&lt;/h1&gt; &#xA;&lt;p&gt;O projeto se utiliza de contêineres Docker, através do pacote &lt;em&gt;Laravel Sail&lt;/em&gt; para facilitar a configuração do ambiente de desenvolvimento. Portanto, é necessário que já possua o Docker e o Docker Compose instalados na máquina.&lt;/p&gt; &#xA;&lt;p&gt;Você é livre para rodar o projeto em ambiente local mas esse texto não tratará essa situação.&lt;/p&gt; &#xA;&lt;p&gt;Links para instalação e configuração de Docker:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/docker-for-windows/install/&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;&gt;Linux (Debian based)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Passos para o rodar o projeto localmente:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Faça um clone do projeto para sua máquina local&lt;/li&gt; &#xA; &lt;li&gt;Crie um arquivo &lt;code&gt;.env&lt;/code&gt;, recomendamos usar &lt;code&gt;.env-example&lt;/code&gt; como base&lt;/li&gt; &#xA; &lt;li&gt;Adicione ou altere as chaves conforme sua necessidade&lt;/li&gt; &#xA; &lt;li&gt;acesse a pasta do projeto via console (terminal/PowerShell/CMD)&lt;/li&gt; &#xA; &lt;li&gt;execute o comando:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm \&#xA;    -u &#34;$(id -u):$(id -g)&#34; \&#xA;    -v &#34;$(pwd):/var/www/html&#34; \&#xA;    -w /var/www/html \&#xA;    laravelsail/php82-composer:latest \&#xA;    composer install --ignore-platform-reqs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Após finalizado processamento, execute o comando &lt;code&gt;./sail up -d&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;O primeiro comando realiza a instalação dos pacotes via composer especificados no arquivo &lt;code&gt;composer.json&lt;/code&gt; e uma vez que a instalação termina, a pasta &lt;em&gt;vendor&lt;/em&gt; passa a ficar disponível no projeto. O comando seguinte levanta os contêineres baseado na descrição de serviços feita no arquivo &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Por padrão, não é necessária nenhuma configuração no arquivo &lt;em&gt;.env&lt;/em&gt; do projeto. Caso seja necessária alguma edição na configuração padrão (relacionado a binding ports ou credenciais de banco de dados), basta editar o arquivo &lt;em&gt;.env&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Trabalhando com Contêineres&lt;/h1&gt; &#xA;&lt;p&gt;Uma vez que o projeto está rodando em cima de contêineres Docker, é clara a situação de que a máquina local não possui nenhum dos requisitos necessários para se trabalhar no projeto, assim, comandos como &lt;code&gt;php artisan&lt;/code&gt;, &lt;code&gt;composer&lt;/code&gt; ou &lt;code&gt;npm&lt;/code&gt; não funcionarão localmente. Para executar comandos dentro de um dos contêineres do projeto, um &lt;code&gt;php artisan route:list&lt;/code&gt; por exemplo, é preciso utilizar o docker para tal, como por exemplo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose exec \ #execução de um comando num contêiner existente&#xA;    -u sail \ # especifica o nome do usuário a ser utilizado dentro do contêiner&#xA;    projeto_laravel.test \ # especifica qual contêiner receberá o comando&#xA;    php artisan route:list # qual o comando a ser executado&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A execução, dessa forma, se torna muito verbosa e trabalhosa, podendo levar a potenciais erros de execução. Assim, o &lt;em&gt;Laravel Sail&lt;/em&gt; oferece um script chamado &lt;code&gt;sail&lt;/code&gt; e localizado em &lt;em&gt;vendor/bin/&lt;/em&gt;. Esse script permite que tais comandos sejam executados através de aliases para que o fluxo de desenvolvimento seja mais natural e menos complexo. Assim, para se executar o mesmo comando &lt;code&gt;php artisan route:list&lt;/code&gt; com o script &lt;code&gt;sail&lt;/code&gt; ficaria:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/sail artisan route:list&#xA;&#xA;#ou&#xA;&#xA;./vendor/bin/sail art route:list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comandos disponíveis&lt;/h3&gt; &#xA;&lt;p&gt;Para conhecer os comandos disponíveis pelo script sail, execute &lt;code&gt;./vendor/bin/sail -h&lt;/code&gt; para obter a listagem completa das opções com descrição.&lt;/p&gt; &#xA;&lt;h1&gt;Próximos passos&lt;/h1&gt; &#xA;&lt;p&gt;Migrations são uma maneira de versionar as tabelas de sua base de dados. Para estruturar o seu banco de dados&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute &lt;code&gt;./vendor/bin/sail art migrate&lt;/code&gt; para montar sua adicionar as tabelas ao seu banco&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute &lt;code&gt;./vendor/bin/sail art db:seed&lt;/code&gt; para popular o seu banco com dados fictícios&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>