<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-25T01:45:27Z</updated>
  <subtitle>Weekly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JhumanJ/OpnForm</title>
    <updated>2024-08-25T01:45:27Z</updated>
    <id>tag:github.com,2024-08-25:/JhumanJ/OpnForm</id>
    <link href="https://github.com/JhumanJ/OpnForm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Beautiful Open-Source Form Builder&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpnForm&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/JhumanJ/OpnForm/raw/main/client/public/img/social-preview.jpg?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/JhumanJ/OpnForm/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/JhumanJ/OpnForm&#34; alt=&#34;Github Stars&#34;&gt;&lt;/a&gt;  &lt;a href=&#34;https://github.com/JhumanJ/OpnForm/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/JhumanJ/OpnForm&#34; alt=&#34;Commits per month&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/jhumanj/opnform-api&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/jhumanj/opnform-api&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/JhumanJ/OpnForm/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-AGPLv3-purple&#34; alt=&#34;License&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/JhumanJ/OpnForm/issues/new&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Report%20a%20bug-Github-%25231F80C0&#34; alt=&#34;Report a bug&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JhumanJ/OpnForm/discussions/new?category=q-a&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Ask%20a%20question-Github-%25231F80C0&#34; alt=&#34;Ask a question&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://feedback.opnform.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Feature%20request-Featurebase-%25231F80C0&#34; alt=&#34;Ask a question&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YTSjU2a9TS&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/YTSjU2a9TS?style=flat&#34; alt=&#34;Ask a question&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://console.algora.io/org/OpnForm/bounties?status=open&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2FOpnForm%2Fbounties%3Fstatus%3Dopen&#34; alt=&#34;Open Bounties&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://console.algora.io/org/OpnForm/bounties?status=completed&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2FOpnForm%2Fbounties%3Fstatus%3Dcompleted&#34; alt=&#34;Rewarded Bounties&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An open-source form builder. It&#39;s an alternative to products like Typeform, JotForm, Tally etc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No-code form builder, with infinite number of fields &amp;amp; submissions&lt;/li&gt; &#xA; &lt;li&gt;Text inputs, Date inputs, URL inputs, Phone inputs, Email inputs, Checkboxes, Select and Multi-Select inputs, Number Inputs, Star-ratings, File uploads &amp;amp; more&lt;/li&gt; &#xA; &lt;li&gt;Embed anywhere (on your website, in your Notion page, etc)&lt;/li&gt; &#xA; &lt;li&gt;Email notifications (for both form owner &amp;amp; form respondents)&lt;/li&gt; &#xA; &lt;li&gt;Hidden fields&lt;/li&gt; &#xA; &lt;li&gt;Form passwords&lt;/li&gt; &#xA; &lt;li&gt;URL form pre-fill&lt;/li&gt; &#xA; &lt;li&gt;Slack integration&lt;/li&gt; &#xA; &lt;li&gt;Webhooks&lt;/li&gt; &#xA; &lt;li&gt;Form logic&lt;/li&gt; &#xA; &lt;li&gt;Customize colors, add images or even some custom code&lt;/li&gt; &#xA; &lt;li&gt;Captcha form protection&lt;/li&gt; &#xA; &lt;li&gt;Form closing date&lt;/li&gt; &#xA; &lt;li&gt;Limit the number of submissions allowed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And much more!&lt;/p&gt; &#xA;&lt;h2&gt;Bounties&lt;/h2&gt; &#xA;&lt;p&gt;Get paid for contributing to OpnForm! Here are our open bounties:&lt;/p&gt; &#xA;&lt;a href=&#34;https://console.algora.io/org/OpnForm/bounties?status=open&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://console.algora.io/api/og/OpnForm/bounties.png?p=0&amp;amp;status=open&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;img alt=&#34;Bounties of OpnForm&#34; src=&#34;https://console.algora.io/api/og/OpnForm/bounties.png?p=0&amp;amp;status=open&amp;amp;theme=light&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Getting started with OpnForm&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started with OpnForm is with the &lt;a href=&#34;https://opnform.com/&#34;&gt;official managed service in the Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It takes 1 minute to try out the builder for free. You&#39;ll have high availability, backups, security, and maintenance all managed for you.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP &amp;gt;= 8.0&lt;/li&gt; &#xA; &lt;li&gt;MySQL/MariaDB or PostgreSQL&lt;/li&gt; &#xA; &lt;li&gt;Node.js and NPM/Yarn/... to compile assets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Environment Setup&lt;/h3&gt; &#xA;&lt;p&gt;Before you can run the application, you need to set up the environment variables. We have provided a script that will automate the process of creating your &lt;code&gt;.env&lt;/code&gt; files from the provided examples.&lt;/p&gt; &#xA;&lt;p&gt;Follow these steps to set up your environment:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you have &lt;code&gt;openssl&lt;/code&gt; installed, as it is required by the setup script to generate secure keys.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the setup script from the root of the project:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x ./scripts/setup-env.sh&#xA;./scripts/setup-env.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;If you are using Docker&lt;/strong&gt; and want to prepare a Docker-specific environment, run the script with the &lt;code&gt;--docker&lt;/code&gt; flag:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/setup-env.sh --docker&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After running the script, review the &lt;code&gt;.env&lt;/code&gt; and &lt;code&gt;client/.env&lt;/code&gt; files to ensure all settings are correct for your environment.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Remember to never commit your &lt;code&gt;.env&lt;/code&gt; files to version control. They should be kept private as they contain sensitive information.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Installation üê≥&lt;/h3&gt; &#xA;&lt;p&gt;OpnForm can be easily set up using Docker. Pre-built images are available on Docker Hub, which is the recommended method for most users.&lt;/p&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;Docker Compose&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Quick Start&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository: &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/JhumanJ/OpnForm.git&#xA;cd OpnForm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up environment files:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cp .env.docker .env&#xA;cp client/.env.docker client/.env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;=======&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;```&#xA;git clone https://github.com/JhumanJ/OpnForm.git&#xA;cd OpnForm&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up environment files by running the provided setup script. For detailed instructions, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/JhumanJ/OpnForm/main/#environment-setup&#34;&gt;Environment Setup&lt;/a&gt; section above:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/setup-env.sh --docker&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;blockquote&gt; &#xA;      &lt;blockquote&gt; &#xA;       &lt;p&gt;0a9400492674212cdabcd4821ee87483b28735e5 ```&lt;/p&gt; &#xA;      &lt;/blockquote&gt; &#xA;     &lt;/blockquote&gt; &#xA;    &lt;/blockquote&gt; &#xA;   &lt;/blockquote&gt; &#xA;  &lt;/blockquote&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the application:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access OpnForm at &lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üåê &lt;strong&gt;Server Deployment Note&lt;/strong&gt;: When deploying to a server, configure the app URLs in both &lt;code&gt;.env&lt;/code&gt; and &lt;code&gt;client/.env&lt;/code&gt; files. Set &lt;code&gt;APP_URL&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt;, and both &lt;code&gt;NUXT_PUBLIC_APP_URL&lt;/code&gt; &amp;amp; &lt;code&gt;NUXT_PUBLIC_API_BASE&lt;/code&gt; in &lt;code&gt;client/.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Customization&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Environment Variables&lt;/strong&gt;: Modify &lt;code&gt;.env&lt;/code&gt; and &lt;code&gt;client/.env&lt;/code&gt; files to customize your setup. For example, to enable email features, configure a &lt;a href=&#34;https://laravel.com/docs/11.x/mail&#34;&gt;supported mail driver&lt;/a&gt; in the &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Upgrading&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check the upgrade instructions for your target version in the documentation.&lt;/li&gt; &#xA; &lt;li&gt;Update your &lt;code&gt;docker-compose.yml&lt;/code&gt; file if necessary.&lt;/li&gt; &#xA; &lt;li&gt;Apply changes: &lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Initial Login&lt;/h4&gt; &#xA;&lt;p&gt;After installation, use these credentials to access the admin panel:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;code&gt;admin@opnform.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: &lt;code&gt;password&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚ö†Ô∏è Change these credentials immediately after your first login.&lt;/p&gt; &#xA;&lt;p&gt;Note: Public registration is disabled in the self-hosted version. Use the admin account to invite additional users.&lt;/p&gt; &#xA;&lt;h4&gt;Building from Source&lt;/h4&gt; &#xA;&lt;p&gt;For development or customization, you can build the Docker images locally:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the images:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker build -t opnform-ui:local -f docker/Dockerfile.client .&#xA;docker build -t opnform-api:local -f docker/Dockerfile.api .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a docker-compose override file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cp docker-compose.override.yml.example docker-compose.override.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Edit the &lt;code&gt;docker-compose.override.yml&lt;/code&gt; file to use your locally built images:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;    api:&#xA;        image: opnform-api:local&#xA;    ui:&#xA;        image: opnform-ui:local&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the application:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This method allows you to make changes to the source code and rebuild the images as needed.&lt;/p&gt; &#xA;&lt;h4&gt;Clearing all resources&lt;/h4&gt; &#xA;&lt;p&gt;To completely remove all Docker containers, networks, and volumes created by &lt;code&gt;docker-compose&lt;/code&gt; and also remove all images used by these services, you can use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose down -v --rmi all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Laravel Valet&lt;/h3&gt; &#xA;&lt;p&gt;This section explains how to get started locally with the project. It&#39;s most likely relevant if you&#39;re trying to work on the project. First, let&#39;s work with the codebase and its dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Get the code!&#xA;git clone git@github.com:JhumanJ/OpnForm.git &amp;amp;&amp;amp; cd OpnForm&#xA;&#xA;# Install PHP dependencies&#xA;composer install&#xA;&#xA; # Install JS dependencies&#xA;cd client &amp;amp;&amp;amp; npm install&#xA;&#xA;# Compile assets (see the scripts section in package.json)&#xA;npm run dev # or build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, we can configure Laravel. We just need to prepare some vars in our &lt;code&gt;.env&lt;/code&gt; file, just create it with &lt;code&gt;cp .env.example .env&lt;/code&gt; then open it!&lt;/p&gt; &#xA;&lt;p&gt;Configure the desired database in the &lt;code&gt;DATABASE_&lt;/code&gt; section. You can fine tune your installation on the &lt;a href=&#34;https://laravel.com/docs/9.x&#34;&gt;laravel documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run these artisan commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Generate needed secrets üôà&#xA;php artisan key:generate&#xA;php artisan jwt:secret # and select yes!&#xA;&#xA;# Creates DB schemas&#xA;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, create an S3 bucket (or equivalent). Create an IAM user with access to this bucket, fill the environment variables: &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;, &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;, &lt;code&gt;AWS_DEFAULT_REGION&lt;/code&gt;, &lt;code&gt;AWS_BUCKET&lt;/code&gt;. In your AWS bucket permissions, add the following under &#34;Cross-origin resource sharing (CORS)&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;    {&#xA;        &#34;AllowedHeaders&#34;: [&#34;*&#34;],&#xA;        &#34;AllowedMethods&#34;: [&#34;PUT&#34;, &#34;POST&#34;, &#34;GET&#34;, &#34;DELETE&#34;],&#xA;        &#34;AllowedOrigins&#34;: [&#34;*&#34;],&#xA;        &#34;ExposeHeaders&#34;: []&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;üéâ Done! Enjoy your personal OpnForm instance at: &lt;a href=&#34;http://opnform.test&#34;&gt;http://opnform.test&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;One-Click Deployment&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repocloud.io/details/?app_id=294&#34;&gt;&lt;img src=&#34;https://d16t0pc4846x52.cloudfront.net/deploylobe.svg?sanitize=true&#34; alt=&#34;Deploy to RepoCloud&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tech Stack&lt;/h2&gt; &#xA;&lt;p&gt;OpnForm is a standard web application built with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://laravel.com/&#34;&gt;Laravel&lt;/a&gt; PHP framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuxt.com/&#34;&gt;NuxtJs&lt;/a&gt; Front-end SSR framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js 3&lt;/a&gt; Front-end framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;TailwindCSS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;re more than welcome to contribute to this project. We don&#39;t have guidelines on this yet, but we will soon. In the meantime, feel free to ask &lt;a href=&#34;https://github.com/JhumanJ/OpnForm/discussions&#34;&gt;any question here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpnForm is open-source under the GNU Affero General Public License Version 3 (AGPLv3) or any later version. You can find it &lt;a href=&#34;https://github.com/JhumanJ/OpnForm/raw/main/LICENSE&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dedoc/scramble</title>
    <updated>2024-08-25T01:45:27Z</updated>
    <id>tag:github.com,2024-08-25:/dedoc/scramble</id>
    <link href="https://github.com/dedoc/scramble" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern Laravel OpenAPI (Swagger) documentation generator. No PHPDoc annotations required.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;a href=&#34;https://scramble.dedoc.co&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dedoc/scramble/main/.github/gh-img.png?v=1&#34; alt=&#34;Scramble ‚Äì Laravel API documentation generator&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Scramble&lt;/h1&gt; &#xA;&lt;p&gt;Scramble generates API documentation for Laravel project. Without requiring you to manually write PHPDoc annotations. Docs are generated in OpenAPI 3.1.0 format.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Package is in early stage. It means there may be bugs and API is very likely to change. Create an issue if you spot a bug. Ideas are welcome.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find full documentation at &lt;a href=&#34;https://scramble.dedoc.co&#34;&gt;scramble.dedoc.co&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The main motto of the project is generating your API documentation without requiring you to annotate your code.&lt;/p&gt; &#xA;&lt;p&gt;This allows you to focus on code and avoid annotating every possible param/field as it may result in outdated documentation. By generating docs automatically from the code your API will always have up-to-date docs which you can trust.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer require dedoc/scramble&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After install you will have 2 routes added to your application:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/docs/api&lt;/code&gt; - UI viewer for your documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/docs/api.json&lt;/code&gt; - Open API document in JSON format describing your API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, these routes are available only in &lt;code&gt;local&lt;/code&gt; environment. You can change this behavior by defining &lt;code&gt;viewApiDocs&lt;/code&gt; gate.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://savelife.in.ua/en/donate-en/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dedoc/scramble/main/.github/gh-promo.svg?v=1&#34; alt=&#34;Donate&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PHPCompatibility/PHPCompatibility</title>
    <updated>2024-08-25T01:45:27Z</updated>
    <id>tag:github.com,2024-08-25:/PHPCompatibility/PHPCompatibility</id>
    <link href="https://github.com/PHPCompatibility/PHPCompatibility" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP Compatibility check for PHP_CodeSniffer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHP Compatibility Coding Standard for PHP CodeSniffer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/phpcompatibility/php-compatibility&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpcompatibility/php-compatibility/v/stable.png&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/php-compatibility#dev-develop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/unstable-dev--develop-e68718.svg?maxAge=2419200&#34; alt=&#34;Latest Unstable Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/awesome%3F-yes!-brightgreen.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpcompatibility/php-compatibility/license.png&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://flattr.com/submit/auto?user_id=wimg&amp;amp;url=https://github.com/PHPCompatibility/PHPCompatibility&amp;amp;title=PHPCompatibility&amp;amp;language=&amp;amp;tags=github&amp;amp;category=software&#34;&gt;&lt;img src=&#34;http://api.flattr.com/button/flattr-badge-large.png&#34; alt=&#34;Flattr this git repo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/actions?query=workflow%3ACS&#34;&gt;&lt;img src=&#34;https://github.com/PHPCompatibility/PHPCompatibility/workflows/CS/badge.svg?branch=develop&#34; alt=&#34;CS Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/actions?query=workflow%3ATest&#34;&gt;&lt;img src=&#34;https://github.com/PHPCompatibility/PHPCompatibility/workflows/Test/badge.svg?branch=develop&#34; alt=&#34;Test Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/PHPCompatibility/PHPCompatibility?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/PHPCompatibility/PHPCompatibility/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/phpcompatibility/php-compatibility&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/php-v/phpcompatibility/php-compatibility.svg?maxAge=3600&#34; alt=&#34;Minimum PHP Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/actions?query=workflow%3ATest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/tested%20on-PHP%205.4%20%7C%205.5%20%7C%205.6%20%7C%207.0%20%7C%207.1%20%7C%207.2%20%7C%207.3%20%7C%207.4%20%7C%208.0%20%7C%208.1%20%7C%208.2%20%7C%208.3%20%7C%20nightly%20-brightgreen.svg?maxAge=2419200&#34; alt=&#34;Tested on PHP 5.4 to nightly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a set of sniffs for &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer&#34;&gt;PHP CodeSniffer&lt;/a&gt; that checks for PHP cross-version compatibility. It will allow you to analyse your code for compatibility with higher and lower versions of PHP.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#php-version-support&#34;&gt;PHP Version Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#thank-you&#34;&gt;Thank you&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#warning-upgrading-to-phpcompatibility-900-warning&#34;&gt;Upgrading to PHPCompatibility 9.0.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#installation-in-a-composer-project-method-1&#34;&gt;Installation in a Composer project (method 1)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#installation-via-a-git-check-out-to-an-arbitrary-directory-method-2&#34;&gt;Installation via a git check-out to an arbitrary directory (method 2)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#sniffing-your-code-for-compatibility-with-specific-php-versions&#34;&gt;Sniffing your code for compatibility with specific PHP version(s)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#using-a-frameworkcmspolyfill-specific-ruleset&#34;&gt;Using a framework/CMS/polyfill specific ruleset&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#using-a-custom-ruleset&#34;&gt;Using a custom ruleset&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#testversion-in-the-ruleset-versus-command-line&#34;&gt;&lt;code&gt;testVersion&lt;/code&gt; in the ruleset versus command-line&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#phpcompatibility-specific-options&#34;&gt;PHPCompatibility specific options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#projects-extending-phpcompatibility&#34;&gt;Projects extending PHPCompatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PHP Version Support&lt;/h2&gt; &#xA;&lt;p&gt;The project aims to cover all PHP compatibility changes introduced since PHP 5.0 up to the latest PHP release. This is an ongoing process and coverage is not yet 100% (if, indeed, it ever could be). Progress is tracked on &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/issues&#34;&gt;our GitHub issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests that check for compatibility issues in PHP 4 code - in particular between PHP 4 and PHP 5.0 - are very welcome as there are still situations where people need help upgrading legacy systems. However, coverage for changes introduced before PHP 5.1 will remain patchy as sniffs for this are not actively being developed at this time.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 5.4+&lt;/li&gt; &#xA; &lt;li&gt;PHP CodeSniffer: 3.10.0+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The sniffs are designed to give the same results regardless of which PHP version you are using to run PHP CodeSniffer. You should get consistent results independently of the PHP version used in your test environment, though for the best results it is recommended to run the sniffs on a recent PHP version in combination with a recent PHP_CodeSniffer version.&lt;/p&gt; &#xA;&lt;p&gt;As of version 8.0.0, the PHPCompatibility standard can also be used with PHP CodeSniffer 3.x. As of version 9.0.0, support for PHP CodeSniffer 1.5.x and low 2.x versions &amp;lt; 2.3.0 has been dropped. As of version 10.0.0, support for PHP &amp;lt; 5.4 and PHP CodeSniffer &amp;lt; 3.10.0 has been dropped.&lt;/p&gt; &#xA;&lt;h2&gt;Thank you&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/graphs/contributors&#34;&gt;contributors&lt;/a&gt; for their valuable contributions.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://wpengine.com&#34;&gt;WP Engine&lt;/a&gt; for their support on the PHP 7.0 sniffs.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ö†&lt;/span&gt; Upgrading to PHPCompatibility 9.0.0 &lt;span&gt;‚ö†&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This library has been reorganized. All sniffs have been placed in categories and a significant number of sniffs have been renamed.&lt;/p&gt; &#xA;&lt;p&gt;If you use the complete &lt;code&gt;PHPCompatibility&lt;/code&gt; standard without &lt;code&gt;exclude&lt;/code&gt; directives in a custom ruleset and do not (yet) use the new-style PHP_CodeSniffer annotation as introduced in &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/releases/tag/3.2.0&#34;&gt;PHP_CodeSniffer 3.2.0&lt;/a&gt;, this will have no noticeable effect and everything should work as before.&lt;/p&gt; &#xA;&lt;p&gt;However, if you do use &lt;code&gt;exclude&lt;/code&gt; directives for PHPCompatibility sniffs in a custom ruleset or if you use the &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/releases/3.2.0&#34;&gt;new-style PHP_CodeSniffer inline annotations&lt;/a&gt;, you will need to update these when upgrading. This should be a one-time only change. The changelog contains detailed information about all the sniff renames.&lt;/p&gt; &#xA;&lt;p&gt;Please read the changelog for version &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/releases/tag/9.0.0&#34;&gt;9.0.0&lt;/a&gt; carefully before upgrading.&lt;/p&gt; &#xA;&lt;h2&gt;Installation in a Composer project (method 1)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the following lines to the &lt;code&gt;require-dev&lt;/code&gt; section of your &lt;code&gt;composer.json&lt;/code&gt; file. &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;require-dev&#34;: {&#xA;    &#34;phpcompatibility/php-compatibility&#34;: &#34;*&#34;&#xA;},&#xA;&#34;prefer-stable&#34; : true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Next, PHP CodeSniffer has to be informed of the location of the standard. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If PHPCompatibility is the &lt;strong&gt;&lt;em&gt;only&lt;/em&gt;&lt;/strong&gt; external PHP CodeSniffer standard you use, you can add the following to your &lt;code&gt;composer.json&lt;/code&gt; file to automatically run the necessary command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;scripts&#34;: {&#xA;    &#34;post-install-cmd&#34;: &#34;\&#34;vendor/bin/phpcs\&#34; --config-set installed_paths vendor/phpcompatibility/php-compatibility&#34;,&#xA;    &#34;post-update-cmd&#34; : &#34;\&#34;vendor/bin/phpcs\&#34; --config-set installed_paths vendor/phpcompatibility/php-compatibility&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Alternatively - and &lt;strong&gt;&lt;em&gt;strongly recommended&lt;/em&gt;&lt;/strong&gt; if you use more than one external PHP CodeSniffer standard - you can use any of the following Composer plugins to handle this for you.&lt;/p&gt; &lt;p&gt;Just add the Composer plugin you prefer to the &lt;code&gt;require-dev&lt;/code&gt; section of your &lt;code&gt;composer.json&lt;/code&gt; file.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/DealerDirect/phpcodesniffer-composer-installer&#34;&gt;DealerDirect/phpcodesniffer-composer-installer&lt;/a&gt;:&#34;^0.6.0&#34;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/higidi/composer-phpcodesniffer-standards-plugin&#34;&gt;higidi/composer-phpcodesniffer-standards-plugin&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/SimplyAdmire/ComposerPlugins&#34;&gt;SimplyAdmire/ComposerPlugins&lt;/a&gt;. This plugin &lt;em&gt;might&lt;/em&gt; still work, but appears to be abandoned.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;As a last alternative in case you use a custom ruleset, you can tell PHP CodeSniffer the path to the PHPCompatibility standard by adding the following snippet to your custom ruleset:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;config name=&#34;installed_paths&#34; value=&#34;vendor/phpcompatibility/php-compatibility&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;composer update --lock&lt;/code&gt; to install both PHP CodeSniffer, the PHPCompatibility coding standard and - optionally - the Composer plugin.&lt;/li&gt; &#xA; &lt;li&gt;Verify that the PHPCompatibility standard is registered correctly by running &lt;code&gt;./vendor/bin/phpcs -i&lt;/code&gt; on the command line. PHPCompatibility should be listed as one of the available standards.&lt;/li&gt; &#xA; &lt;li&gt;Now you can use the following command to inspect your code: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpcs -p . --standard=PHPCompatibility&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation via a git check-out to an arbitrary directory (method 2)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer&#34;&gt;PHP CodeSniffer&lt;/a&gt; via &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer#installation&#34;&gt;your preferred method&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;PHP CodeSniffer offers a variety of installation methods to suit your work-flow: Composer, &lt;a href=&#34;http://pear.php.net/PHP_CodeSniffer&#34;&gt;PEAR&lt;/a&gt;, a Phar file, zipped/tarred release archives or checking the repository out using Git.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Pro-tip:&lt;/strong&gt; Register the path to PHPCS in your system &lt;code&gt;$PATH&lt;/code&gt; environment variable to make the &lt;code&gt;phpcs&lt;/code&gt; command available from anywhere in your file system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/releases&#34;&gt;latest PHPCompatibility release&lt;/a&gt; and unzip/untar it into an arbitrary directory.&lt;/p&gt; &lt;p&gt;You can also choose to clone the repository using git to easily update your install regularly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the path to the directory in which you placed your copy of the PHPCompatibility repo to the PHP CodeSniffer configuration using the below command from the command line:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs --config-set installed_paths /path/to/PHPCompatibility&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I.e. if you placed the &lt;code&gt;PHPCompatibility&lt;/code&gt; repository in the &lt;code&gt;/my/custom/standards/PHPCompatibility&lt;/code&gt; directory, you will need to add that directory to the PHP CodeSniffer &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Configuration-Options#setting-the-installed-standard-paths&#34;&gt;&lt;code&gt;installed_paths&lt;/code&gt; configuration variable&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: &lt;span&gt;‚ö†&lt;/span&gt; The &lt;code&gt;installed_paths&lt;/code&gt; command overwrites any previously set &lt;code&gt;installed_paths&lt;/code&gt;. If you have previously set &lt;code&gt;installed_paths&lt;/code&gt; for other external standards, run &lt;code&gt;phpcs --config-show&lt;/code&gt; first and then run the &lt;code&gt;installed_paths&lt;/code&gt; command with all the paths you need separated by commas, i.e.:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs --config-set installed_paths /path/1,/path/2,/path/3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Pro-tip:&lt;/strong&gt; Alternatively, in case you use a custom ruleset, you can tell PHP CodeSniffer the path to the PHPCompatibility standard(s) by adding the following snippet to your custom ruleset:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;config name=&#34;installed_paths&#34; value=&#34;/path/to/PHPCompatibility&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify that the PHPCompatibility standard is registered correctly by running &lt;code&gt;phpcs -i&lt;/code&gt; on the command line. PHPCompatibility should be listed as one of the available standards.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now you can use the following command to inspect your code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs -p . --standard=PHPCompatibility&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sniffing your code for compatibility with specific PHP version(s)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the coding standard from the command-line with &lt;code&gt;phpcs -p . --standard=PHPCompatibility&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By default, you will only receive notifications about deprecated and/or removed PHP features.&lt;/li&gt; &#xA; &lt;li&gt;To get the most out of the PHPCompatibility standard, you should specify a &lt;code&gt;testVersion&lt;/code&gt; to check against. That will enable the checks for both deprecated/removed PHP features as well as the detection of code using new PHP features. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can run the checks for just one specific PHP version by adding &lt;code&gt;--runtime-set testVersion 5.5&lt;/code&gt; to your command line command.&lt;/li&gt; &#xA;   &lt;li&gt;You can also specify a range of PHP versions that your code needs to support. In this situation, compatibility issues that affect any of the PHP versions in that range will be reported: &lt;code&gt;--runtime-set testVersion 5.3-5.5&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;As of PHPCompatibility 7.1.3, you can omit one part of the range if you want to support everything above or below a particular version, i.e. use &lt;code&gt;--runtime-set testVersion 7.0-&lt;/code&gt; to run all the checks for PHP 7.0 and above.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;By default the report will be sent to the console, if you want to save the report to a file, add the following to the command line command: &lt;code&gt;--report-full=path/to/report-file&lt;/code&gt;. For more information and other reporting options, check the &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Reporting&#34;&gt;PHP CodeSniffer wiki&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using a framework/CMS/polyfill specific ruleset&lt;/h3&gt; &#xA;&lt;p&gt;As of mid 2018, a limited set of framework/CMS specific rulesets is available. These rulesets are hosted in their own repositories.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PHPCompatibilityJoomla&lt;/code&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityJoomla&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-joomla&#34;&gt;Packagist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PHPCompatibilityWP&lt;/code&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityWP&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-wp&#34;&gt;Packagist&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since the autumn of 2018, there are also a number of PHP polyfill specific rulesets available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PHPCompatibilityPasswordCompat&lt;/code&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityPasswordCompat&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-passwordcompat&#34;&gt;Packagist&lt;/a&gt;: accounts for @ircmaxell&#39;s &lt;a href=&#34;https://github.com/ircmaxell/password_compat&#34;&gt;&lt;code&gt;password_compat&lt;/code&gt;&lt;/a&gt; polyfill library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PHPCompatibilityParagonie&lt;/code&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityParagonie&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-paragonie&#34;&gt;Packagist&lt;/a&gt;: contains two rulesets which account for the Paragonie &lt;a href=&#34;https://github.com/paragonie/random_compat&#34;&gt;&lt;code&gt;random_compat&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/paragonie/sodium_compat&#34;&gt;&lt;code&gt;sodium_compat&lt;/code&gt;&lt;/a&gt; polyfill libraries respectively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PHPCompatibilitySymfony&lt;/code&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilitySymfony&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-symfony&#34;&gt;Packagist&lt;/a&gt;: contains a number of rulesets which account for various PHP polyfill libraries offered by the Symfony project. For more details about the available rulesets, please check out the &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilitySymfony/raw/master/README.md&#34;&gt;README of the PHPCompatibilitySymfony&lt;/a&gt; repository.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to make sure you have all PHPCompatibility rulesets available at any time, you can use the &lt;code&gt;PHPCompatibilityAll&lt;/code&gt; package &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityAll&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-all&#34;&gt;Packagist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Framework/CMS/Polyfill specific rulesets do not set the minimum PHP version for your project, so you will still need to pass a &lt;code&gt;testVersion&lt;/code&gt; to get the most accurate results.&lt;/p&gt; &#xA;&lt;h2&gt;Using a custom ruleset&lt;/h2&gt; &#xA;&lt;p&gt;Like with any PHP CodeSniffer standard, you can add PHPCompatibility to a custom PHP CodeSniffer ruleset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34;?&amp;gt;&#xA;&amp;lt;ruleset name=&#34;Custom ruleset&#34;&amp;gt;&#xA;    &amp;lt;description&amp;gt;My rules for PHP CodeSniffer&amp;lt;/description&amp;gt;&#xA;&#xA;    &amp;lt;!-- Run against the PHPCompatibility ruleset --&amp;gt;&#xA;    &amp;lt;rule ref=&#34;PHPCompatibility&#34;/&amp;gt;&#xA;&#xA;    &amp;lt;!-- Run against a second ruleset --&amp;gt;&#xA;    &amp;lt;rule ref=&#34;PSR2&#34;/&amp;gt;&#xA;&#xA;&amp;lt;/ruleset&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set the &lt;code&gt;testVersion&lt;/code&gt; from within the ruleset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;!-- Check for cross-version support for PHP 5.6 and higher. --&amp;gt;&#xA;    &amp;lt;config name=&#34;testVersion&#34; value=&#34;5.6-&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other advanced options, such as changing the message type or severity of select sniffs, as described in the &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Annotated-ruleset.xml&#34;&gt;PHPCS Annotated ruleset&lt;/a&gt; wiki page are, of course, also supported.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;testVersion&lt;/code&gt; in the ruleset versus command-line&lt;/h3&gt; &#xA;&lt;p&gt;In PHPCS 3.2.0 and lower, once you set the &lt;code&gt;testVersion&lt;/code&gt; in the ruleset, you could not overrule it from the command-line anymore. Starting with PHPCS 3.3.0, a &lt;code&gt;testVersion&lt;/code&gt; set via the command-line will overrule the &lt;code&gt;testVersion&lt;/code&gt; in the ruleset.&lt;/p&gt; &#xA;&lt;p&gt;This allows for more flexibility when, for instance, your project needs to comply with PHP &lt;code&gt;5.5-&lt;/code&gt;, but you have a bootstrap file which needs to be compatible with PHP &lt;code&gt;5.2-&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;PHPCompatibility specific options&lt;/h3&gt; &#xA;&lt;p&gt;At this moment, there are two sniffs which have a property which can be set via the ruleset. More custom properties may become available in the future.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;PHPCompatibility.Extensions.RemovedExtensions&lt;/code&gt; sniff checks for removed extensions based on the function prefix used for these extensions. This might clash with userland functions using the same function prefix.&lt;/p&gt; &#xA;&lt;p&gt;To whitelist userland functions, you can pass a comma-delimited list of function names to the sniff.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;!-- Whitelist the mysql_to_rfc3339() and mysql_another_function() functions. --&amp;gt;&#xA;    &amp;lt;rule ref=&#34;PHPCompatibility.Extensions.RemovedExtensions&#34;&amp;gt;&#xA;        &amp;lt;properties&amp;gt;&#xA;            &amp;lt;property name=&#34;functionWhitelist&#34; type=&#34;array&#34; value=&#34;mysql_to_rfc3339,mysql_another_function&#34;/&amp;gt;&#xA;        &amp;lt;/properties&amp;gt;&#xA;    &amp;lt;/rule&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;PHPCompatibility.Interfaces.RemovedSerializable&lt;/code&gt; sniff needs to know about all interfaces which extend the &lt;code&gt;Serializable&lt;/code&gt; interface to provide the most reliable results. The sniff will warn when it encounters an interface extending the &lt;code&gt;Serializable&lt;/code&gt; interface which is unknown to the sniff and recommend for the interface name to be added to the property.&lt;/p&gt; &#xA;&lt;p&gt;To inform the sniff about additional interfaces providing the Serializable interface, add a snippet along the lines of the below to your custom ruleset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;rule ref=&#34;PHPCompatibility.Interfaces.RemovedSerializable&#34;&amp;gt;&#xA;        &amp;lt;properties&amp;gt;&#xA;            &amp;lt;property name=&#34;serializableInterfaces&#34; type=&#34;array&#34;&amp;gt;&#xA;                &amp;lt;element value=&#34;MyCustomSerializableInterface&#34;/&amp;gt;&#xA;                &amp;lt;element value=&#34;AnotherSerializableInterface&#34;/&amp;gt;&#xA;            &amp;lt;/property&amp;gt;&#xA;        &amp;lt;/properties&amp;gt;&#xA;    &amp;lt;/rule&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Projects extending PHPCompatibility&lt;/h2&gt; &#xA;&lt;p&gt;There are hundreds of public projects using PHPCompatibility or extending on top of it. A short list of some that you might know or have a look at :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adamculp/php-code-quality&#34;&gt;adamculp/php-code-quality&lt;/a&gt; - a Docker image doing a lot of code quality checks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vfac.fr/projects/php7compatibility&#34;&gt;VFAC/PHP7Compatibility&lt;/a&gt; - a Docker container to check PHP7 Compatibility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wunderio/grumphp-php-compatibility&#34;&gt;grumphp-php-compatibility&lt;/a&gt; - A plugin for &lt;a href=&#34;https://github.com/phpro/grumphp&#34;&gt;GrumPHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHPCompatibility Checker WordPress plugin : &lt;a href=&#34;https://wordpress.org/plugins/php-compatibility-checker/&#34;&gt;Wordpress site&lt;/a&gt; and &lt;a href=&#34;https://github.com/wpengine/phpcompat/&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wptide.org/&#34;&gt;WordPress Tide project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/phpstorm/using-php-code-sniffer.html#788c81b6&#34;&gt;PHPStorm has built-in support for PHPCompatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moodlehq/moodle-local_codechecker&#34;&gt;Moodle codechecker&lt;/a&gt; - A &lt;a href=&#34;https://moodle.org/plugins/local_codechecker&#34;&gt;plugin&lt;/a&gt; for Moodle &lt;a href=&#34;https://docs.moodle.org/dev/Coding_style&#34;&gt;coding style&lt;/a&gt;, including PHPCompatibility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/php-compatibility&#34;&gt;Github Action&lt;/a&gt; - A Github Action that runs this PHPCS standard on your source code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very welcome. Please read the &lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; documentation to get started.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is released under the GNU Lesser General Public License (LGPL). For more information, visit &lt;a href=&#34;http://www.gnu.org/copyleft/lesser.html&#34;&gt;http://www.gnu.org/copyleft/lesser.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>