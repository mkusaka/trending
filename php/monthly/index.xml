<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-01T01:54:03Z</updated>
  <subtitle>Monthly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>krayin/laravel-crm</title>
    <updated>2024-08-01T01:54:03Z</updated>
    <id>tag:github.com,2024-08-01:/krayin/laravel-crm</id>
    <link href="https://github.com/krayin/laravel-crm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free &amp; Opensource Laravel CRM solution for SMEs and Enterprises for complete customer lifecycle management.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://krayincrm.com&#34;&gt;&lt;img src=&#34;https://bagisto.com/wp-content/uploads/2021/06/bagisto-logo.png&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/krayin/laravel-crm&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/krayin/laravel-crm/d/total.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/krayin/laravel-crm&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/krayin/laravel-crm/v/stable.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/krayin/laravel-crm&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/krayin/laravel-crm/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Topics&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krayin/laravel-crm/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krayin/laravel-crm/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krayin/laravel-crm/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krayin/laravel-crm/master/#installation-and-configuration&#34;&gt;Installation &amp;amp; Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krayin/laravel-crm/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krayin/laravel-crm/master/#security-vulnerabilities&#34;&gt;Security Vulnerabilities&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://krayincrm.com&#34;&gt;Krayin CRM&lt;/a&gt; is a hand tailored CRM framework built on some of the hottest opensource technologies such as &lt;a href=&#34;https://laravel.com&#34;&gt;Laravel&lt;/a&gt; (a &lt;a href=&#34;https://secure.php.net/&#34;&gt;PHP&lt;/a&gt; framework) and &lt;a href=&#34;https://vuejs.org&#34;&gt;Vue.js&lt;/a&gt; a progressive Javascript framework.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Free &amp;amp; Opensource Laravel CRM solution for SMEs and Enterprises for complete customer lifecycle management.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read our documentation: &lt;a href=&#34;https://devdocs.krayincrm.com/&#34;&gt;Krayin CRM Docs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We also have a forum for any type of concerns, feature requests, or discussions. Please visit: &lt;a href=&#34;https://forums.krayincrm.com/&#34;&gt;Krayin CRM Forums&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Visit our live &lt;a href=&#34;https://demo.krayincrm.com&#34;&gt;Demo&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;It packs in lots of features that will allow your E-Commerce business to scale in no time:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Descriptive and Simple Admin Panel.&lt;/li&gt; &#xA; &lt;li&gt;Admin Dashboard.&lt;/li&gt; &#xA; &lt;li&gt;Custom Attributes.&lt;/li&gt; &#xA; &lt;li&gt;Built on Modular Approach.&lt;/li&gt; &#xA; &lt;li&gt;Email parsing via Sendgrid.&lt;/li&gt; &#xA; &lt;li&gt;Check out &lt;a href=&#34;https://krayincrm.com/features/&#34;&gt;these features and more&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Developers&lt;/strong&gt;: Take advantage of two of the hottest frameworks used in this project -- Laravel and Vue.js -- both of which have been used in Krayin CRM.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;h4&gt;Krayin Documentation &lt;a href=&#34;https://devdocs.krayincrm.com&#34;&gt;https://devdocs.krayincrm.com&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;SERVER&lt;/strong&gt;: Apache 2 or NGINX.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RAM&lt;/strong&gt;: 3 GB or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PHP&lt;/strong&gt;: 8.1 or higher&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For MySQL users&lt;/strong&gt;: 5.7.23 or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For MariaDB users&lt;/strong&gt;: 10.2.7 or Higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Node&lt;/strong&gt;: 8.11.3 LTS or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Composer&lt;/strong&gt;: 2.5 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation and Configuration&lt;/h3&gt; &#xA;&lt;h5&gt;Execute these commands below, in order&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer create-project krayin/laravel-crm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Find &lt;strong&gt;.env&lt;/strong&gt; file in root directory and change the &lt;strong&gt;APP_URL&lt;/strong&gt; param to your &lt;strong&gt;domain&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Also, Configure the &lt;strong&gt;Mail&lt;/strong&gt; and &lt;strong&gt;Database&lt;/strong&gt; parameters inside &lt;strong&gt;.env&lt;/strong&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan krayin-crm:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To execute Krayin&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;h5&gt;On server:&lt;/h5&gt; &#xA;&lt;p&gt;Warning: Before going into production mode we recommend you uninstall developer dependencies. In order to do that, run the command below:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;composer install --no-dev&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;Open the specified entry point in your hosts file in your browser or make an entry in hosts file if not done.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;On local:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan route:clear&#xA;php artisan serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to log in as admin:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;http(s)://example.com/admin/login&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;email:admin@example.com&#xA;password:admin123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Krayin CRM is a truly opensource CRM framework which will always be free under the &lt;a href=&#34;https://github.com/krayin/laravel-crm/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Security Vulnerabilities&lt;/h3&gt; &#xA;&lt;p&gt;Please don&#39;t disclose security vulnerabilities publicly. If you find any security vulnerability in Krayin CRM then please email us: mailto:&lt;a href=&#34;mailto:sales@krayincrm.com&#34;&gt;sales@krayincrm.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pimcore/pimcore</title>
    <updated>2024-08-01T01:54:03Z</updated>
    <id>tag:github.com,2024-08-01:/pimcore/pimcore</id>
    <link href="https://github.com/pimcore/pimcore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Core Framework for the Open Source Data &amp; Experience Management Platform (PIM, MDM, CDP, DAM, DXP/CMS &amp; Digital Commerce)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pimcore/pimcore/11.x/doc/img/logo-readme.svg?sanitize=true&#34; alt=&#34;Pimcore - Own the digital World&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pimcore Core Framework - Open Source Data &amp;amp; Experience Management Platform: PIM, MDM, CDP, DAM, DXP/CMS &amp;amp; Digital Commerce&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/pimcore/pimcore&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/pimcore/pimcore.svg?sanitize=true&#34; alt=&#34;Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pimcore/pimcore/11.x/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv3-brightgreen.svg?style=flat&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/pimcore/pimcore&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter-join%20chat-brightgreen.svg?style=flat&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üì¢ &lt;strong&gt;&lt;a href=&#34;https://pimcore.com/en/careers?utm_source=github&amp;amp;utm_medium=readme-pimcore-pimcore&amp;amp;utm_campaign=careers&#34;&gt;We are hiring!&lt;/a&gt;&lt;/strong&gt; - Join us on our mission!&lt;/li&gt; &#xA; &lt;li&gt;üåç &lt;a href=&#34;https://pimcore.com/&#34;&gt;Website&lt;/a&gt; - Learn more about Pimcore&lt;/li&gt; &#xA; &lt;li&gt;üìñ &lt;a href=&#34;https://pimcore.com/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üâê &lt;strong&gt;Help translate Pimcore!&lt;/strong&gt; Start with &lt;a href=&#34;https://poeditor.com/join/project/VWmZyvFVMH&#34;&gt;Essentials&lt;/a&gt;, continue with &lt;a href=&#34;https://poeditor.com/join/project/XliCYYgILb&#34;&gt;Extended&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üëç Like us on &lt;a href=&#34;https://www.facebook.com/pimcore&#34;&gt;Facebook&lt;/a&gt;, follow us on &lt;a href=&#34;https://www.linkedin.com/company/3505853/&#34;&gt;LinkedIn&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/pimcore&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üêû &lt;a href=&#34;https://github.com/pimcore/pimcore/issues&#34;&gt;Issue Tracker&lt;/a&gt; - Report bugs or suggest new features&lt;/li&gt; &#xA; &lt;li&gt;üó® &lt;a href=&#34;https://github.com/pimcore/pimcore/discussions&#34;&gt;Forums&lt;/a&gt; - Community support and discussions&lt;/li&gt; &#xA; &lt;li&gt;üë™ &lt;a href=&#34;https://gitter.im/pimcore/pimcore&#34;&gt;Community Chat&lt;/a&gt; - Gitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bug fixes:&lt;/strong&gt; please create a pull request including a step by step description to reproduce the problem&lt;br&gt; &lt;strong&gt;Contribute features:&lt;/strong&gt; contact the core-team on our &lt;a href=&#34;https://gitter.im/pimcore/pimcore&#34;&gt;Gitter channel&lt;/a&gt; before you start developing&lt;br&gt; &lt;strong&gt;Security vulnerabilities:&lt;/strong&gt; please see our &lt;a href=&#34;https://github.com/pimcore/pimcore/security/policy&#34;&gt;security policy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For details, please have a look at our &lt;a href=&#34;https://raw.githubusercontent.com/pimcore/pimcore/11.x/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pimcore/pimcore/11.x/doc/img/pimcore-technology-architecture.svg?sanitize=true&#34; alt=&#34;Technology and Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key Benefits and Advantages&lt;/h2&gt; &#xA;&lt;h3&gt;‚öí Data Modelling and UI Design at the same Time&lt;/h3&gt; &#xA;&lt;p&gt;No matter if you&#39;re dealing with unstructured web documents or structured data for MDM/PIM, you define the UI design (web documents by a template and structured data with an intuitive graphical editor), Pimcore knows how to persist the data efficiently and optimized for fast access.&lt;/p&gt; &#xA;&lt;h3&gt;üéõ Agnostic and Universal Framework for your Data&lt;/h3&gt; &#xA;&lt;p&gt;Due to the framework approach, Pimcore is very flexible and adapts perfectly to your needs. Built on top of the well-known Symfony Framework you have a solid and modern foundation for your project.&lt;/p&gt; &#xA;&lt;h3&gt;üöÄ Extensible and huge Symfony Community&lt;/h3&gt; &#xA;&lt;p&gt;Benefit from all existing Symfony Components and Bundles provided by the community or create your own Bundles to extend your Projects with reusable components.&lt;/p&gt; &#xA;&lt;h3&gt;üíé Your Digital World consolidated in one Platform&lt;/h3&gt; &#xA;&lt;p&gt;No more API, import/export and synchronization hell between MDM/PIM, E-Commerce, DAM, and your Web-CMS. All is working seamlessly together, natively ... this is what Pimcore is built for.&lt;/p&gt; &#xA;&lt;h3&gt;‚ú®Ô∏è Modern and Intuitive UI&lt;/h3&gt; &#xA;&lt;p&gt;We love good-looking user interfaces, designed to be efficient for daily use and optimized for a great experience for editors.&lt;/p&gt; &#xA;&lt;h2&gt;Preview and Demo&lt;/h2&gt; &#xA;&lt;h3&gt;Data Objects&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pimcore/pimcore/11.x/doc/img/pimcore-screenshot-3.png&#34; alt=&#34;Pimcore Admin Interface Screenshot PIM/MDM&#34;&gt; Manage any structured data based on a predefined data model, either manually or automatically via the APIs. Define the structure and attributes of your objects by using the class editor. Manage any data ‚Äì products (PIM/MDM), categories, customers (CDP), orders (digital commerce), blog articles (DXP/CMS). Data Objects provide the possibility to manage structured data for multiple output channels from a single source. By centralizing data in one place, Pimcore&#39;s data objects enable you to achieve better data completeness and data quality, allowing you to create and maintain a consistent, up-to-date customer experience across multiple touchpoints in less time.&lt;/p&gt; &#xA;&lt;h3&gt;Digital Assets&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pimcore/pimcore/11.x/doc/img/pimcore-screenshot-2.png&#34; alt=&#34;Pimcore Admin Interface Screenshot DAM&#34;&gt; Assets are the DAM part of Pimcore. Store, manage and organize digital files such as images, videos, PDFs, Word/Excel documents in a folder structure. Preview 200+ file types directly in Pimcore, edit pictures, and enrich files with additional meta-data. Facial recognition for focal points in images is available. Editors only need to maintain one high-resolution version of a file in the system. Pimcore can automatically generate all required output formats for various channels such as commerce, apps, websites. Of course, including comprehensive user management and version control.&lt;/p&gt; &#xA;&lt;h3&gt;Documents&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pimcore/pimcore/11.x/doc/img/pimcore-screenshot-1.png&#34; alt=&#34;Pimcore Admin Interface Screenshot CMS&#34;&gt; The DXP/CMS part of Pimcore for managing unstructured content such as the pages of a website and its navigation. Based on Twig templates, documents render physical HTML/CSS pages and provide the capabilities to manage the presentation of data, exactly how customers will experience it. They can be composed by administrators by arranging predefined layout elements. Pimcore documents provide multilingual and multi-site capabilities for websites, including emails and newsletters. Total frontend flexibility enables a perfect blend of content and commerce. You can also use them to create content for offline channels, such as printed catalogs (web-to-print).&lt;/p&gt; &#xA;&lt;h4&gt;Demo (Community Edition)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Admin-URL&lt;/em&gt; (stable): &lt;a href=&#34;https://demo.pimcore.fun/admin/&#34;&gt;https://demo.pimcore.fun/admin/&lt;/a&gt;&lt;br&gt; &lt;em&gt;Admin-URL&lt;/em&gt; (dev): &lt;a href=&#34;https://11.x-dev.pimcore.fun/admin/&#34;&gt;https://11.x-dev.pimcore.fun/admin/&lt;/a&gt;&lt;br&gt; &lt;em&gt;Username&lt;/em&gt;: &lt;code&gt;admin&lt;/code&gt;&lt;br&gt; &lt;em&gt;Password&lt;/em&gt;: &lt;code&gt;demo&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Only 3 commands to start!&lt;/strong&gt;&lt;/em&gt; üòé&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;COMPOSER_MEMORY_LIMIT=-1 composer create-project pimcore/skeleton ./my-project&#xA;cd ./my-project&#xA;./vendor/bin/pimcore-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install an empty skeleton application, but we&#39;re also offering a demo package for your convenience - of course also with 3 commands üí™ &lt;a href=&#34;https://pimcore.com/docs/platform/Pimcore/Getting_Started/&#34;&gt;Click here for more installation options and a detailed guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Versions and LTS&lt;/h2&gt; &#xA;&lt;p&gt;Community support of a minor version of Pimcore packages ends with the release of the next minor version. After end of community support, long term supported is provided in combination with enterprise edition.&lt;/p&gt; &#xA;&lt;p&gt;LTS versions are based on our &lt;a href=&#34;https://pimcore.com/docs/platform/Platform_Version/&#34;&gt;Platform Version Releases&lt;/a&gt; which cover the Core Framework as well as extensions provided by Pimcore. For details on versions and their support state see our &lt;a href=&#34;https://pimcore.com/docs/platform/Platform_Version/Platform_Version_Releases/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright and License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright: &lt;a href=&#34;https://www.pimcore.org&#34;&gt;Pimcore&lt;/a&gt; GmbH For licensing details please visit &lt;a href=&#34;https://raw.githubusercontent.com/pimcore/pimcore/11.x/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>barryvdh/laravel-debugbar</title>
    <updated>2024-08-01T01:54:03Z</updated>
    <id>tag:github.com,2024-08-01:/barryvdh/laravel-debugbar</id>
    <link href="https://github.com/barryvdh/laravel-debugbar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Debugbar for Laravel (Integrates PHP Debug Bar)&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Debugbar for Laravel&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/barryvdh/laravel-debugbar/workflows/Unit%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Unit Tests&#34;&gt; &lt;a href=&#34;http://choosealicense.com/licenses/mit/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Licence-MIT-blue&#34; alt=&#34;Packagist License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/barryvdh/laravel-debugbar&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/barryvdh/laravel-debugbar?label=Stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/barryvdh/laravel-debugbar&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/barryvdh/laravel-debugbar?label=Downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fruitcake.nl/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Powered%20By-Fruitcake-b2bc35.svg?sanitize=true&#34; alt=&#34;Fruitcake&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a package to integrate &lt;a href=&#34;http://phpdebugbar.com/&#34;&gt;PHP Debug Bar&lt;/a&gt; with Laravel. It includes a ServiceProvider to register the debugbar and attach it to the output. You can publish assets and configure it through Laravel. It bootstraps some Collectors to work with Laravel and implements a couple custom DataCollectors, specific for Laravel. It is configured to display Redirects and (jQuery) Ajax Requests. (Shown in a dropdown) Read &lt;a href=&#34;http://phpdebugbar.com/docs/&#34;&gt;the documentation&lt;/a&gt; for more configuration options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/barryvdh/laravel-debugbar/assets/973269/6600837a-8b2d-4acb-ab0c-158c9ca5439c&#34; alt=&#34;Debugbar Dark Mode screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Note: Use the DebugBar only in development. Do not use Debugbar on publicly accessible websites, as it will leak information from stored requests (by design). It can also slow the application down (because it has to gather data). So when experiencing slowness, try disabling some of the collectors.&lt;/h3&gt; &#xA;&lt;p&gt;This package includes some custom collectors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QueryCollector: Show all queries, including binding + timing&lt;/li&gt; &#xA; &lt;li&gt;RouteCollector: Show information about the current Route.&lt;/li&gt; &#xA; &lt;li&gt;ViewCollector: Show the currently loaded views. (Optionally: display the shared data)&lt;/li&gt; &#xA; &lt;li&gt;EventsCollector: Show all events&lt;/li&gt; &#xA; &lt;li&gt;LaravelCollector: Show the Laravel version and Environment. (disabled by default)&lt;/li&gt; &#xA; &lt;li&gt;SymfonyRequestCollector: replaces the RequestCollector with more information about the request/response&lt;/li&gt; &#xA; &lt;li&gt;LogsCollector: Show the latest log entries from the storage logs. (disabled by default)&lt;/li&gt; &#xA; &lt;li&gt;FilesCollector: Show the files that are included/required by PHP. (disabled by default)&lt;/li&gt; &#xA; &lt;li&gt;ConfigCollector: Display the values from the config files. (disabled by default)&lt;/li&gt; &#xA; &lt;li&gt;CacheCollector: Display all cache events. (disabled by default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bootstraps the following collectors for Laravel:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LogCollector: Show all Log messages&lt;/li&gt; &#xA; &lt;li&gt;SymfonyMailCollector for Mail&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And the default collectors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PhpInfoCollector&lt;/li&gt; &#xA; &lt;li&gt;MessagesCollector&lt;/li&gt; &#xA; &lt;li&gt;TimeDataCollector (With Booting and Application timing)&lt;/li&gt; &#xA; &lt;li&gt;MemoryCollector&lt;/li&gt; &#xA; &lt;li&gt;ExceptionsCollector&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It also provides a facade interface (&lt;code&gt;Debugbar&lt;/code&gt;) for easy logging Messages, Exceptions and Time&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Require this package with composer. It is recommended to only require the package for development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer require barryvdh/laravel-debugbar --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Laravel uses Package Auto-Discovery, so doesn&#39;t require you to manually add the ServiceProvider.&lt;/p&gt; &#xA;&lt;p&gt;The Debugbar will be enabled when &lt;code&gt;APP_DEBUG&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you use a catch-all/fallback route, make sure you load the Debugbar ServiceProvider before your own App ServiceProviders.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Laravel without auto-discovery:&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t use auto-discovery, add the ServiceProvider to the providers list. For Laravel 11 or newer, add the ServiceProvider in bootstrap/providers.php. For Laravel 10 or older, add the ServiceProvider in config/app.php.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Barryvdh\Debugbar\ServiceProvider::class,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the facade to log messages, add this within the &lt;code&gt;register&lt;/code&gt; method of &lt;code&gt;app/Providers/AppServiceProvider.php&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function register(): void&#xA;{&#xA;    $loader = \Illuminate\Foundation\AliasLoader::getInstance();&#xA;    $loader-&amp;gt;alias(&#39;Debugbar&#39;, \Barryvdh\Debugbar\Facades\Debugbar::class);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The profiler is enabled by default, if you have APP_DEBUG=true. You can override that in the config (&lt;code&gt;debugbar.enabled&lt;/code&gt;) or by setting &lt;code&gt;DEBUGBAR_ENABLED&lt;/code&gt; in your &lt;code&gt;.env&lt;/code&gt;. See more options in &lt;code&gt;config/debugbar.php&lt;/code&gt; You can also set in your config if you want to include/exclude the vendor files also (FontAwesome, Highlight.js and jQuery). If you already use them in your site, set it to false. You can also only display the js or css vendors, by setting it to &#39;js&#39; or &#39;css&#39;. (Highlight.js requires both css + js, so set to &lt;code&gt;true&lt;/code&gt; for syntax highlighting)&lt;/p&gt; &#xA;&lt;h4&gt;Copy the package config to your local config with the publish command:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan vendor:publish --provider=&#34;Barryvdh\Debugbar\ServiceProvider&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Laravel with Octane:&lt;/h3&gt; &#xA;&lt;p&gt;Make sure to add LaravelDebugbar to your flush list in &lt;code&gt;config/octane.php&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    &#39;flush&#39; =&amp;gt; [&#xA;        \Barryvdh\Debugbar\LaravelDebugbar::class,&#xA;    ],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lumen:&lt;/h3&gt; &#xA;&lt;p&gt;For Lumen, register a different Provider in &lt;code&gt;bootstrap/app.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if (env(&#39;APP_DEBUG&#39;)) {&#xA; $app-&amp;gt;register(Barryvdh\Debugbar\LumenServiceProvider::class);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the configuration, copy the file to your config folder and enable it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$app-&amp;gt;configure(&#39;debugbar&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can now add messages using the Facade (when added), using the PSR-3 levels (debug, info, notice, warning, error, critical, alert, emergency):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Debugbar::info($object);&#xA;Debugbar::error(&#39;Error!&#39;);&#xA;Debugbar::warning(&#39;Watch out‚Ä¶&#39;);&#xA;Debugbar::addMessage(&#39;Another message&#39;, &#39;mylabel&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And start/stop timing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Debugbar::startMeasure(&#39;render&#39;,&#39;Time for rendering&#39;);&#xA;Debugbar::stopMeasure(&#39;render&#39;);&#xA;Debugbar::addMeasure(&#39;now&#39;, LARAVEL_START, microtime(true));&#xA;Debugbar::measure(&#39;My long operation&#39;, function() {&#xA;    // Do something‚Ä¶&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or log exceptions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;try {&#xA;    throw new Exception(&#39;foobar&#39;);&#xA;} catch (Exception $e) {&#xA;    Debugbar::addThrowable($e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also helper functions available for the most common calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// All arguments will be dumped as a debug message&#xA;debug($var1, $someString, $intValue, $object);&#xA;&#xA;// `$collection-&amp;gt;debug()` will return the collection and dump it as a debug message. Like `$collection-&amp;gt;dump()`&#xA;collect([$var1, $someString])-&amp;gt;debug();&#xA;&#xA;start_measure(&#39;render&#39;,&#39;Time for rendering&#39;);&#xA;stop_measure(&#39;render&#39;);&#xA;add_measure(&#39;now&#39;, LARAVEL_START, microtime(true));&#xA;measure(&#39;My long operation&#39;, function() {&#xA;    // Do something‚Ä¶&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want you can add your own DataCollectors, through the Container or the Facade:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Debugbar::addCollector(new DebugBar\DataCollector\MessagesCollector(&#39;my_messages&#39;));&#xA;//Or via the App container:&#xA;$debugbar = App::make(&#39;debugbar&#39;);&#xA;$debugbar-&amp;gt;addCollector(new DebugBar\DataCollector\MessagesCollector(&#39;my_messages&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the Debugbar is injected just before &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;. If you want to inject the Debugbar yourself, set the config option &#39;inject&#39; to false and use the renderer yourself and follow &lt;a href=&#34;http://phpdebugbar.com/docs/rendering.html&#34;&gt;http://phpdebugbar.com/docs/rendering.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$renderer = Debugbar::getJavascriptRenderer();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Not using the auto-inject, will disable the Request information, because that is added After the response. You can add the default_request datacollector in the config as alternative.&lt;/p&gt; &#xA;&lt;h2&gt;Enabling/Disabling on run time&lt;/h2&gt; &#xA;&lt;p&gt;You can enable or disable the debugbar during run time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Debugbar::enable();&#xA;\Debugbar::disable();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NB. Once enabled, the collectors are added (and could produce extra overhead), so if you want to use the debugbar in production, disable in the config and only enable when needed.&lt;/p&gt; &#xA;&lt;h2&gt;Storage&lt;/h2&gt; &#xA;&lt;p&gt;Debugbar remembers previous requests, which you can view using the Browse button on the right. This will only work if you enable &lt;code&gt;debugbar.storage.open&lt;/code&gt; in the config. Make sure you only do this on local development, because otherwise other people will be able to view previous requests. In general, Debugbar should only be used locally or at least restricted by IP. It&#39;s possible to pass a callback, which will receive the Request object, so you can determine access to the OpenHandler storage.&lt;/p&gt; &#xA;&lt;h2&gt;Twig Integration&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Debugbar comes with two Twig Extensions. These are tested with &lt;a href=&#34;https://github.com/rcrowe/TwigBridge&#34;&gt;rcrowe/TwigBridge&lt;/a&gt; 0.6.x&lt;/p&gt; &#xA;&lt;p&gt;Add the following extensions to your TwigBridge config/extensions.php (or register the extensions manually)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;Barryvdh\Debugbar\Twig\Extension\Debug&#39;,&#xA;&#39;Barryvdh\Debugbar\Twig\Extension\Dump&#39;,&#xA;&#39;Barryvdh\Debugbar\Twig\Extension\Stopwatch&#39;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Dump extension will replace the &lt;a href=&#34;http://twig.sensiolabs.org/doc/functions/dump.html&#34;&gt;dump function&lt;/a&gt; to output variables using the DataFormatter. The Debug extension adds a &lt;code&gt;debug()&lt;/code&gt; function which passes variables to the Message Collector, instead of showing it directly in the template. It dumps the arguments, or when empty; all context variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-twig&#34;&gt;{{ debug() }}&#xA;{{ debug(user, categories) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Stopwatch extension adds a &lt;a href=&#34;http://symfony.com/blog/new-in-symfony-2-4-a-stopwatch-tag-for-twig&#34;&gt;stopwatch tag&lt;/a&gt; similar to the one in Symfony/Silex Twigbridge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-twig&#34;&gt;{% stopwatch &#34;foo&#34; %}&#xA;    ‚Ä¶some things that gets timed&#xA;{% endstopwatch %}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>