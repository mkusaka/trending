<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-01T02:19:14Z</updated>
  <subtitle>Monthly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sebastianbergmann/phpunit</title>
    <updated>2023-07-01T02:19:14Z</updated>
    <id>tag:github.com,2023-07-01:/sebastianbergmann/phpunit</id>
    <link href="https://github.com/sebastianbergmann/phpunit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The PHP Unit Testing framework.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;ðŸ‡ºðŸ‡¦ &lt;a href=&#34;https://phpunit.de/stand-with-ukraine.html&#34;&gt;UKRAINE NEEDS YOUR HELP NOW!&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;PHPUnit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/phpunit/phpunit&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpunit/phpunit/v/stable.png&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sebastianbergmann/phpunit/actions&#34;&gt;&lt;img src=&#34;https://github.com/sebastianbergmann/phpunit/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://shepherd.dev/github/sebastianbergmann/phpunit&#34;&gt;&lt;img src=&#34;https://shepherd.dev/github/sebastianbergmann/phpunit/coverage.svg?sanitize=true&#34; alt=&#34;Type Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/sebastianbergmann/phpunit&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/sebastianbergmann/phpunit/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PHPUnit is a programmer-oriented testing framework for PHP. It is an instance of the xUnit architecture for unit testing frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We distribute a &lt;a href=&#34;https://php.net/phar&#34;&gt;PHP Archive (PHAR)&lt;/a&gt; that has all required (as well as some optional) dependencies of PHPUnit bundled in a single file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://phar.phpunit.de/phpunit-X.Y.phar&#xA;&#xA;$ php phpunit-X.Y.phar --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please replace &lt;code&gt;X.Y&lt;/code&gt; with the version of PHPUnit you are interested in.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you may use &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; to download and install PHPUnit as well as its dependencies. Please refer to the &#34;&lt;a href=&#34;https://phpunit.de/getting-started-with-phpunit.html&#34;&gt;Getting Started&lt;/a&gt;&#34; guide for details on how to install PHPUnit.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/sebastianbergmann/phpunit/raw/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for information on how to contribute to PHPUnit and its related projects.&lt;/p&gt; &#xA;&lt;h2&gt;List of Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to everyone who has contributed to PHPUnit! You can find a detailed list of contributors on every PHPUnit related package on GitHub. This list shows only the major components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sebastianbergmann/phpunit/graphs/contributors&#34;&gt;PHPUnit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sebastianbergmann/php-code-coverage/graphs/contributors&#34;&gt;php-code-coverage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A very special thanks to everyone who has contributed to the &lt;a href=&#34;https://github.com/sebastianbergmann/phpunit-documentation-english/graphs/contributors&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>danielmiessler/SecLists</title>
    <updated>2023-07-01T02:19:14Z</updated>
    <id>tag:github.com,2023-07-01:/danielmiessler/SecLists</id>
    <link href="https://github.com/danielmiessler/SecLists" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SecLists is the security tester&#39;s companion. It&#39;s a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/danielmiessler/SecLists/master/SecLists.png&#34; alt=&#34;seclists.png&#34; title=&#34;seclists.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;About SecLists&lt;/h3&gt; &#xA;&lt;p&gt;SecLists is the security tester&#39;s companion. It&#39;s a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more. The goal is to enable a security tester to pull this repository onto a new testing box and have access to every type of list that may be needed.&lt;/p&gt; &#xA;&lt;p&gt;This project is maintained by &lt;a href=&#34;https://danielmiessler.com/&#34;&gt;Daniel Miessler&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/Jhaddix&#34;&gt;Jason Haddix&lt;/a&gt;, and &lt;a href=&#34;https://blog.g0tmi1k.com/&#34;&gt;g0tmi1k&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zip&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -c https://github.com/danielmiessler/SecLists/archive/master.zip -O SecList.zip \&#xA;  &amp;amp;&amp;amp; unzip SecList.zip \&#xA;  &amp;amp;&amp;amp; rm -f SecList.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Git (Small)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth 1 \&#xA;  https://github.com/danielmiessler/SecLists.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Git (Complete)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/danielmiessler/SecLists.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kali Linux&lt;/strong&gt; (&lt;a href=&#34;https://www.kali.org/tools/seclists/&#34;&gt;Tool Page&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt -y install seclists&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Attribution&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/SecLists/master/CONTRIBUTORS.md&#34;&gt;CONTRIBUTORS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/SecLists/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Similar Projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wordlists.assetnote.io/&#34;&gt;Assetnote Wordlists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bo0oM/fuzz.txt&#34;&gt;fuzz.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fuzzdb-project/fuzzdb&#34;&gt;FuzzDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings&#34;&gt;PayloadsAllTheThings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/giteshnxtlvl/cook&#34;&gt;Cook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/the-xentropy/samlists&#34;&gt;SamLists&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Licensing&lt;/h3&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/SecLists/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://danielmiessler.com/images/mitlicense.png&#34; alt=&#34;MIT License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;â€”&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;NOTE: Downloading this repository is likely to cause a false-positive alarm by your anti-virus or anti-malware software, the filepath should be whitelisted. There is nothing in SecLists that can harm your computer as-is, however it&#39;s not recommended to store these files on a server or other important system due to the risk of local file include attacks.&lt;/sup&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>googleapis/google-api-php-client</title>
    <updated>2023-07-01T02:19:14Z</updated>
    <id>tag:github.com,2023-07-01:/googleapis/google-api-php-client</id>
    <link href="https://github.com/googleapis/google-api-php-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PHP client library for accessing Google APIs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/googleapis/google-api-php-client/workflows/.github/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Google APIs Client Library for PHP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: please check to see if the package you&#39;d like to install is available in our list of &lt;a href=&#34;https://cloud.google.com/php/docs/reference&#34;&gt;Google cloud packages&lt;/a&gt; first, as these are the recommended libraries.&lt;/p&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  Reference Docs&#xA; &lt;/dt&gt;&#xA; &lt;dd&gt;&#xA;  &lt;a href=&#34;https://googleapis.github.io/google-api-php-client/main/&#34;&gt;https://googleapis.github.io/google-api-php-client/main/&lt;/a&gt;&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  License&#xA; &lt;/dt&gt;&#xA; &lt;dd&gt;&#xA;  Apache 2.0&#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;p&gt;The Google API Client Library enables you to work with Google APIs such as Gmail, Drive or YouTube on your server.&lt;/p&gt; &#xA;&lt;p&gt;These client libraries are officially supported by Google. However, the libraries are considered complete and are in maintenance mode. This means that we will address critical bugs and security issues but will not add any new features.&lt;/p&gt; &#xA;&lt;h2&gt;Google Cloud Platform&lt;/h2&gt; &#xA;&lt;p&gt;For Google Cloud Platform APIs such as &lt;a href=&#34;https://github.com/googleapis/google-cloud-php-datastore&#34;&gt;Datastore&lt;/a&gt;, &lt;a href=&#34;https://github.com/googleapis/google-cloud-php-storage&#34;&gt;Cloud Storage&lt;/a&gt;, &lt;a href=&#34;https://github.com/googleapis/google-cloud-php-pubsub&#34;&gt;Pub/Sub&lt;/a&gt;, and &lt;a href=&#34;https://github.com/googleapis/google-cloud-php-compute&#34;&gt;Compute Engine&lt;/a&gt;, we recommend using the Google Cloud client libraries. For a complete list of supported Google Cloud client libraries, see &lt;a href=&#34;https://github.com/googleapis/google-cloud-php&#34;&gt;googleapis/google-cloud-php&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.php.net/&#34;&gt;PHP 7.4 or higher&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/docs/&#34;&gt;docs folder&lt;/a&gt; provides detailed guides for using this library.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;strong&gt;Composer&lt;/strong&gt; or simply &lt;strong&gt;Download the Release&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Composer&lt;/h3&gt; &#xA;&lt;p&gt;The preferred method is via &lt;a href=&#34;https://getcomposer.org/&#34;&gt;composer&lt;/a&gt;. Follow the &lt;a href=&#34;https://getcomposer.org/doc/00-intro.md&#34;&gt;installation instructions&lt;/a&gt; if you do not already have composer installed.&lt;/p&gt; &#xA;&lt;p&gt;Once composer is installed, execute the following command in your project root to install this library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer require google/apiclient:^2.12.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, be sure to include the autoloader:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once &#39;/path/to/your-project/vendor/autoload.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This library relies on &lt;code&gt;google/apiclient-services&lt;/code&gt;. That library provides up-to-date API wrappers for a large number of Google APIs. In order that users may make use of the latest API clients, this library does not pin to a specific version of &lt;code&gt;google/apiclient-services&lt;/code&gt;. &lt;strong&gt;In order to prevent the accidental installation of API wrappers with breaking changes&lt;/strong&gt;, it is highly recommended that you pin to the &lt;a href=&#34;https://github.com/googleapis/google-api-php-client-services/releases&#34;&gt;latest version&lt;/a&gt; yourself prior to using this library in production.&lt;/p&gt; &#xA;&lt;h4&gt;Cleaning up unused services&lt;/h4&gt; &#xA;&lt;p&gt;There are over 200 Google API services. The chances are good that you will not want them all. In order to avoid shipping these dependencies with your code, you can run the &lt;code&gt;Google\Task\Composer::cleanup&lt;/code&gt; task and specify the services you want to keep in &lt;code&gt;composer.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;require&#34;: {&#xA;        &#34;google/apiclient&#34;: &#34;^2.12.1&#34;&#xA;    },&#xA;    &#34;scripts&#34;: {&#xA;        &#34;pre-autoload-dump&#34;: &#34;Google\\Task\\Composer::cleanup&#34;&#xA;    },&#xA;    &#34;extra&#34;: {&#xA;        &#34;google/apiclient-services&#34;: [&#xA;            &#34;Drive&#34;,&#xA;            &#34;YouTube&#34;&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example will remove all services other than &#34;Drive&#34; and &#34;YouTube&#34; when &lt;code&gt;composer update&lt;/code&gt; or a fresh &lt;code&gt;composer install&lt;/code&gt; is run.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: If you add any services back in &lt;code&gt;composer.json&lt;/code&gt;, you will need to remove the &lt;code&gt;vendor/google/apiclient-services&lt;/code&gt; directory explicitly for the change you made to have effect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -r vendor/google/apiclient-services&#xA;composer update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This command performs an exact match on the service name, so to keep &lt;code&gt;YouTubeReporting&lt;/code&gt; and &lt;code&gt;YouTubeAnalytics&lt;/code&gt; as well, you&#39;d need to add each of them explicitly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;extra&#34;: {&#xA;        &#34;google/apiclient-services&#34;: [&#xA;            &#34;Drive&#34;,&#xA;            &#34;YouTube&#34;,&#xA;            &#34;YouTubeAnalytics&#34;,&#xA;            &#34;YouTubeReporting&#34;&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download the Release&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer not to use composer, you can download the package in its entirety. The &lt;a href=&#34;https://github.com/googleapis/google-api-php-client/releases&#34;&gt;Releases&lt;/a&gt; page lists all stable versions. Download any file with the name &lt;code&gt;google-api-php-client-[RELEASE_NAME].zip&lt;/code&gt; for a package including this library and its dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Uncompress the zip file you download, and include the autoloader in your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once &#39;/path/to/google-api-php-client/vendor/autoload.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional installation and setup instructions, see &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/docs/&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/examples&#34;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; directory for examples of the key client features. You can view them in your browser by running the php built-in web server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ php -S localhost:8000 -t examples/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then browsing to the host and port you specified (in the above example, &lt;code&gt;http://localhost:8000&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Basic Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// include your composer dependencies&#xA;require_once &#39;vendor/autoload.php&#39;;&#xA;&#xA;$client = new Google\Client();&#xA;$client-&amp;gt;setApplicationName(&#34;Client_Library_Examples&#34;);&#xA;$client-&amp;gt;setDeveloperKey(&#34;YOUR_APP_KEY&#34;);&#xA;&#xA;$service = new Google\Service\Books($client);&#xA;$query = &#39;Henry David Thoreau&#39;;&#xA;$optParams = [&#xA;  &#39;filter&#39; =&amp;gt; &#39;free-ebooks&#39;,&#xA;];&#xA;$results = $service-&amp;gt;volumes-&amp;gt;listVolumes($query, $optParams);&#xA;&#xA;foreach ($results-&amp;gt;getItems() as $item) {&#xA;  echo $item[&#39;volumeInfo&#39;][&#39;title&#39;], &#34;&amp;lt;br /&amp;gt; \n&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authentication with OAuth&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An example of this can be seen in &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/examples/simple-file-upload.php&#34;&gt;&lt;code&gt;examples/simple-file-upload.php&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the instructions to &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/docs/oauth-web.md#create-authorization-credentials&#34;&gt;Create Web Application Credentials&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the JSON credentials&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the path to these credentials using &lt;code&gt;Google\Client::setAuthConfig&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Google\Client();&#xA;$client-&amp;gt;setAuthConfig(&#39;/path/to/client_credentials.json&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the scopes required for the API you are going to call&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client-&amp;gt;addScope(Google\Service\Drive::DRIVE);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set your application&#39;s redirect URI&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Your redirect URI can be any registered URI, but in this example&#xA;// we redirect back to this same page&#xA;$redirect_uri = &#39;http://&#39; . $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&#39;PHP_SELF&#39;];&#xA;$client-&amp;gt;setRedirectUri($redirect_uri);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the script handling the redirect URI, exchange the authorization code for an access token:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if (isset($_GET[&#39;code&#39;])) {&#xA;    $token = $client-&amp;gt;fetchAccessTokenWithAuthCode($_GET[&#39;code&#39;]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Authentication with Service Accounts&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An example of this can be seen in &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/examples/service-account.php&#34;&gt;&lt;code&gt;examples/service-account.php&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some APIs (such as the &lt;a href=&#34;https://developers.google.com/youtube/v3/&#34;&gt;YouTube Data API&lt;/a&gt;) do not support service accounts. Check with the specific API documentation if API calls return unexpected 401 or 403 errors.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the instructions to &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/docs/oauth-server.md#creating-a-service-account&#34;&gt;Create a Service Account&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the JSON credentials&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the path to these credentials using the &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt; environment variable:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;putenv(&#39;GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tell the Google client to use your service account credentials to authenticate:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Google\Client();&#xA;$client-&amp;gt;useApplicationDefaultCredentials();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the scopes required for the API you are going to call&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client-&amp;gt;addScope(Google\Service\Drive::DRIVE);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have delegated domain-wide access to the service account and you want to impersonate a user account, specify the email address of the user account using the method setSubject:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client-&amp;gt;setSubject($user_to_impersonate);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;How to use a specific JSON key&lt;/h4&gt; &#xA;&lt;p&gt;If you want to a specific JSON key instead of using &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt; environment variable, you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$jsonKey = [&#xA;   &#39;type&#39; =&amp;gt; &#39;service_account&#39;,&#xA;   // ...&#xA;];&#xA;$client = new Google\Client();&#xA;$client-&amp;gt;setAuthConfig($jsonKey);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making Requests&lt;/h3&gt; &#xA;&lt;p&gt;The classes used to call the API in &lt;a href=&#34;https://github.com/googleapis/google-api-php-client-services&#34;&gt;google-api-php-client-services&lt;/a&gt; are autogenerated. They map directly to the JSON requests and responses found in the &lt;a href=&#34;https://developers.google.com/apis-explorer/#p/&#34;&gt;APIs Explorer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A JSON request to the &lt;a href=&#34;https://developers.google.com/apis-explorer/#p/datastore/v1beta3/datastore.projects.runQuery&#34;&gt;Datastore API&lt;/a&gt; would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;POST https://datastore.googleapis.com/v1beta3/projects/YOUR_PROJECT_ID:runQuery?key=YOUR_API_KEY&#xA;&#xA;{&#xA;    &#34;query&#34;: {&#xA;        &#34;kind&#34;: [{&#xA;            &#34;name&#34;: &#34;Book&#34;&#xA;        }],&#xA;        &#34;order&#34;: [{&#xA;            &#34;property&#34;: {&#xA;                &#34;name&#34;: &#34;title&#34;&#xA;            },&#xA;            &#34;direction&#34;: &#34;descending&#34;&#xA;        }],&#xA;        &#34;limit&#34;: 10&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using this library, the same call would look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// create the datastore service class&#xA;$datastore = new Google\Service\Datastore($client);&#xA;&#xA;// build the query - this maps directly to the JSON&#xA;$query = new Google\Service\Datastore\Query([&#xA;    &#39;kind&#39; =&amp;gt; [&#xA;        [&#xA;            &#39;name&#39; =&amp;gt; &#39;Book&#39;,&#xA;        ],&#xA;    ],&#xA;    &#39;order&#39; =&amp;gt; [&#xA;        &#39;property&#39; =&amp;gt; [&#xA;            &#39;name&#39; =&amp;gt; &#39;title&#39;,&#xA;        ],&#xA;        &#39;direction&#39; =&amp;gt; &#39;descending&#39;,&#xA;    ],&#xA;    &#39;limit&#39; =&amp;gt; 10,&#xA;]);&#xA;&#xA;// build the request and response&#xA;$request = new Google\Service\Datastore\RunQueryRequest([&#39;query&#39; =&amp;gt; $query]);&#xA;$response = $datastore-&amp;gt;projects-&amp;gt;runQuery(&#39;YOUR_DATASET_ID&#39;, $request);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, as each property of the JSON API has a corresponding generated class, the above code could also be written like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// create the datastore service class&#xA;$datastore = new Google\Service\Datastore($client);&#xA;&#xA;// build the query&#xA;$request = new Google\Service\Datastore_RunQueryRequest();&#xA;$query = new Google\Service\Datastore\Query();&#xA;//   - set the order&#xA;$order = new Google\Service\Datastore_PropertyOrder();&#xA;$order-&amp;gt;setDirection(&#39;descending&#39;);&#xA;$property = new Google\Service\Datastore\PropertyReference();&#xA;$property-&amp;gt;setName(&#39;title&#39;);&#xA;$order-&amp;gt;setProperty($property);&#xA;$query-&amp;gt;setOrder([$order]);&#xA;//   - set the kinds&#xA;$kind = new Google\Service\Datastore\KindExpression();&#xA;$kind-&amp;gt;setName(&#39;Book&#39;);&#xA;$query-&amp;gt;setKinds([$kind]);&#xA;//   - set the limit&#xA;$query-&amp;gt;setLimit(10);&#xA;&#xA;// add the query to the request and make the request&#xA;$request-&amp;gt;setQuery($query);&#xA;$response = $datastore-&amp;gt;projects-&amp;gt;runQuery(&#39;YOUR_DATASET_ID&#39;, $request);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The method used is a matter of preference, but &lt;em&gt;it will be very difficult to use this library without first understanding the JSON syntax for the API&lt;/em&gt;, so it is recommended to look at the &lt;a href=&#34;https://developers.google.com/apis-explorer/#p/&#34;&gt;APIs Explorer&lt;/a&gt; before using any of the services here.&lt;/p&gt; &#xA;&lt;h3&gt;Making HTTP Requests Directly&lt;/h3&gt; &#xA;&lt;p&gt;If Google Authentication is desired for external applications, or a Google API is not available yet in this library, HTTP requests can be made directly.&lt;/p&gt; &#xA;&lt;p&gt;If you are installing this client only to authenticate your own HTTP client requests, you should use &lt;a href=&#34;https://github.com/googleapis/google-auth-library-php#call-the-apis&#34;&gt;&lt;code&gt;google/auth&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;authorize&lt;/code&gt; method returns an authorized &lt;a href=&#34;http://docs.guzzlephp.org/&#34;&gt;Guzzle Client&lt;/a&gt;, so any request made using the client will contain the corresponding authorization.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// create the Google client&#xA;$client = new Google\Client();&#xA;&#xA;/**&#xA; * Set your method for authentication. Depending on the API, This could be&#xA; * directly with an access token, API key, or (recommended) using&#xA; * Application Default Credentials.&#xA; */&#xA;$client-&amp;gt;useApplicationDefaultCredentials();&#xA;$client-&amp;gt;addScope(Google\Service\Plus::PLUS_ME);&#xA;&#xA;// returns a Guzzle HTTP Client&#xA;$httpClient = $client-&amp;gt;authorize();&#xA;&#xA;// make an HTTP request&#xA;$response = $httpClient-&amp;gt;get(&#39;https://www.googleapis.com/plus/v1/people/me&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caching&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to use another caching library to improve performance. This can be done by passing a &lt;a href=&#34;https://www.php-fig.org/psr/psr-6/&#34;&gt;PSR-6&lt;/a&gt; compatible library to the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use League\Flysystem\Adapter\Local;&#xA;use League\Flysystem\Filesystem;&#xA;use Cache\Adapter\Filesystem\FilesystemCachePool;&#xA;&#xA;$filesystemAdapter = new Local(__DIR__.&#39;/&#39;);&#xA;$filesystem        = new Filesystem($filesystemAdapter);&#xA;&#xA;$cache = new FilesystemCachePool($filesystem);&#xA;$client-&amp;gt;setCache($cache);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example we use &lt;a href=&#34;http://www.php-cache.com/&#34;&gt;PHP Cache&lt;/a&gt;. Add this to your project with composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require cache/filesystem-adapter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating Tokens&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://developers.google.com/identity/protocols/OAuth2InstalledApp#offline&#34;&gt;Refresh Tokens&lt;/a&gt; or &lt;a href=&#34;https://developers.google.com/identity/protocols/OAuth2ServiceAccount#overview&#34;&gt;Service Account Credentials&lt;/a&gt;, it may be useful to perform some action when a new access token is granted. To do this, pass a callable to the &lt;code&gt;setTokenCallback&lt;/code&gt; method on the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$logger = new Monolog\Logger();&#xA;$tokenCallback = function ($cacheKey, $accessToken) use ($logger) {&#xA;  $logger-&amp;gt;debug(sprintf(&#39;new access token received at cache key %s&#39;, $cacheKey));&#xA;};&#xA;$client-&amp;gt;setTokenCallback($tokenCallback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging Your HTTP Request using Charles&lt;/h3&gt; &#xA;&lt;p&gt;It is often very useful to debug your API calls by viewing the raw HTTP request. This library supports the use of &lt;a href=&#34;https://www.charlesproxy.com/documentation/getting-started/&#34;&gt;Charles Web Proxy&lt;/a&gt;. Download and run Charles, and then capture all HTTP traffic through Charles with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// FOR DEBUGGING ONLY&#xA;$httpClient = new GuzzleHttp\Client([&#xA;    &#39;proxy&#39; =&amp;gt; &#39;localhost:8888&#39;, // by default, Charles runs on localhost port 8888&#xA;    &#39;verify&#39; =&amp;gt; false, // otherwise HTTPS requests will fail.&#xA;]);&#xA;&#xA;$client = new Google\Client();&#xA;$client-&amp;gt;setHttpClient($httpClient);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now all calls made by this library will appear in the Charles UI.&lt;/p&gt; &#xA;&lt;p&gt;One additional step is required in Charles to view SSL requests. Go to &lt;strong&gt;Charles &amp;gt; Proxy &amp;gt; SSL Proxying Settings&lt;/strong&gt; and add the domain you&#39;d like captured. In the case of the Google APIs, this is usually &lt;code&gt;*.googleapis.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Controlling HTTP Client Configuration Directly&lt;/h3&gt; &#xA;&lt;p&gt;Google API Client uses &lt;a href=&#34;http://docs.guzzlephp.org/&#34;&gt;Guzzle&lt;/a&gt; as its default HTTP client. That means that you can control your HTTP requests in the same manner you would for any application using Guzzle.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say, for instance, we wished to apply a referrer to each request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Client;&#xA;&#xA;$httpClient = new Client([&#xA;    &#39;headers&#39; =&amp;gt; [&#xA;        &#39;referer&#39; =&amp;gt; &#39;mysite.com&#39;&#xA;    ]&#xA;]);&#xA;&#xA;$client = new Google\Client();&#xA;$client-&amp;gt;setHttpClient($httpClient);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other Guzzle features such as &lt;a href=&#34;http://docs.guzzlephp.org/en/stable/handlers-and-middleware.html&#34;&gt;Handlers and Middleware&lt;/a&gt; offer even more control.&lt;/p&gt; &#xA;&lt;h3&gt;Partial Consent and Granted Scopes&lt;/h3&gt; &#xA;&lt;p&gt;When using OAuth2 3LO (e.g. you&#39;re a client requesting credentials from a 3rd party, such as in the &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/examples/simple-file-upload.php&#34;&gt;simple file upload example&lt;/a&gt;), you may want to take advantage of Partial Consent.&lt;/p&gt; &#xA;&lt;p&gt;To allow clients to only grant certain scopes in the OAuth2 screen, pass the querystring parameter for &lt;code&gt;enable_serial_consent&lt;/code&gt; when generating the authorization URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$authUrl = $client-&amp;gt;createAuthUrl($scope, [&#39;enable_serial_consent&#39; =&amp;gt; &#39;true&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the flow is completed, you can see which scopes were granted by calling &lt;code&gt;getGrantedScope&lt;/code&gt; on the OAuth2 object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Space-separated string of granted scopes if it exists, otherwise null.&#xA;echo $client-&amp;gt;getOAuth2Service()-&amp;gt;getGrantedScope();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Service Specific Examples&lt;/h3&gt; &#xA;&lt;p&gt;YouTube: &lt;a href=&#34;https://github.com/youtube/api-samples/tree/master/php&#34;&gt;https://github.com/youtube/api-samples/tree/master/php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How Do I Contribute?&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/.github/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; page for more information. In particular, we love pull requests - but please make sure to sign the contributor license agreement.&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h3&gt;What do I do if something isn&#39;t working?&lt;/h3&gt; &#xA;&lt;p&gt;For support with the library the best place to ask is via the google-api-php-client tag on StackOverflow: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/google-api-php-client&#34;&gt;https://stackoverflow.com/questions/tagged/google-api-php-client&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If there is a specific bug with the library, please &lt;a href=&#34;https://github.com/googleapis/google-api-php-client/issues&#34;&gt;file an issue&lt;/a&gt; in the GitHub issues tracker, including an example of the failing code and any specific errors retrieved. Feature requests can also be filed, as long as they are core library requests, and not-API specific: for those, refer to the documentation for the individual APIs for the best place to file requests. Please try to provide a clear statement of the problem that the feature would address.&lt;/p&gt; &#xA;&lt;h3&gt;I want an example of X!&lt;/h3&gt; &#xA;&lt;p&gt;If X is a feature of the library, file away! If X is an example of using a specific service, the best place to go is to the teams for those specific APIs - our preference is to link to their examples rather than add them to the library, as they can then pin to specific versions of the library. If you have any examples for other APIs, let us know and we will happily add a link to the README above!&lt;/p&gt; &#xA;&lt;h3&gt;Why do some Google\Service classes have weird names?&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;Google\Service&lt;/em&gt; classes are generally automatically generated from the API discovery documents: &lt;a href=&#34;https://developers.google.com/discovery/&#34;&gt;https://developers.google.com/discovery/&lt;/a&gt;. Sometimes new features are added to APIs with unusual names, which can cause some unexpected or non-standard style naming in the PHP classes.&lt;/p&gt; &#xA;&lt;h3&gt;How do I deal with non-JSON response types?&lt;/h3&gt; &#xA;&lt;p&gt;Some services return XML or similar by default, rather than JSON, which is what the library supports. You can request a JSON response by adding an &#39;alt&#39; argument to optional params that is normally the last argument to a method call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$opt_params = array(&#xA;  &#39;alt&#39; =&amp;gt; &#34;json&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I set a field to null?&lt;/h3&gt; &#xA;&lt;p&gt;The library strips out nulls from the objects sent to the Google APIs as it is the default value of all of the uninitialized properties. To work around this, set the field you want to null to &lt;code&gt;Google\Model::NULL_VALUE&lt;/code&gt;. This is a placeholder that will be replaced with a true null when sent over the wire.&lt;/p&gt; &#xA;&lt;h2&gt;Code Quality&lt;/h2&gt; &#xA;&lt;p&gt;Run the PHPUnit tests with PHPUnit. You can configure an API key and token in BaseTest.php to run all calls, but this will require some setup on the Google Developer Console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;phpunit tests/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Coding Style&lt;/h3&gt; &#xA;&lt;p&gt;To check for coding style violations, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vendor/bin/phpcs src --standard=style/ruleset.xml -np&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To automatically fix (fixable) coding style violations, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vendor/bin/phpcbf src --standard=style/ruleset.xml&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>