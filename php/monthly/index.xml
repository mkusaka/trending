<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T02:31:59Z</updated>
  <subtitle>Monthly Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>barryvdh/laravel-debugbar</title>
    <updated>2022-06-04T02:31:59Z</updated>
    <id>tag:github.com,2022-06-04:/barryvdh/laravel-debugbar</id>
    <link href="https://github.com/barryvdh/laravel-debugbar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Laravel Debugbar (Integrates PHP Debug Bar)&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Laravel Debugbar&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/barryvdh/laravel-debugbar/workflows/Unit%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Unit Tests&#34;&gt; &lt;a href=&#34;http://choosealicense.com/licenses/mit/&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/barryvdh/laravel-debugbar/license.png&#34; alt=&#34;Packagist License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/barryvdh/laravel-debugbar&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/barryvdh/laravel-debugbar/version.png&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/barryvdh/laravel-debugbar&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/barryvdh/laravel-debugbar/d/total.png&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fruitcake.nl/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Powered%20By-Fruitcake-b2bc35.svg?sanitize=true&#34; alt=&#34;Fruitcake&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a package to integrate &lt;a href=&#34;http://phpdebugbar.com/&#34;&gt;PHP Debug Bar&lt;/a&gt; with Laravel. It includes a ServiceProvider to register the debugbar and attach it to the output. You can publish assets and configure it through Laravel. It bootstraps some Collectors to work with Laravel and implements a couple custom DataCollectors, specific for Laravel. It is configured to display Redirects and (jQuery) Ajax Requests. (Shown in a dropdown) Read &lt;a href=&#34;http://phpdebugbar.com/docs/&#34;&gt;the documentation&lt;/a&gt; for more configuration options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/973269/79428890-196cc680-7fc7-11ea-8229-189f5eac9009.png&#34; alt=&#34;Debugbar 3.3 Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: Use the DebugBar only in development. It can slow the application down (because it has to gather data). So when experiencing slowness, try disabling some of the collectors.&lt;/p&gt; &#xA;&lt;p&gt;This package includes some custom collectors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QueryCollector: Show all queries, including binding + timing&lt;/li&gt; &#xA; &lt;li&gt;RouteCollector: Show information about the current Route.&lt;/li&gt; &#xA; &lt;li&gt;ViewCollector: Show the currently loaded views. (Optionally: display the shared data)&lt;/li&gt; &#xA; &lt;li&gt;EventsCollector: Show all events&lt;/li&gt; &#xA; &lt;li&gt;LaravelCollector: Show the Laravel version and Environment. (disabled by default)&lt;/li&gt; &#xA; &lt;li&gt;SymfonyRequestCollector: replaces the RequestCollector with more information about the request/response&lt;/li&gt; &#xA; &lt;li&gt;LogsCollector: Show the latest log entries from the storage logs. (disabled by default)&lt;/li&gt; &#xA; &lt;li&gt;FilesCollector: Show the files that are included/required by PHP. (disabled by default)&lt;/li&gt; &#xA; &lt;li&gt;ConfigCollector: Display the values from the config files. (disabled by default)&lt;/li&gt; &#xA; &lt;li&gt;CacheCollector: Display all cache events. (disabled by default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bootstraps the following collectors for Laravel:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LogCollector: Show all Log messages&lt;/li&gt; &#xA; &lt;li&gt;SwiftMailCollector and SwiftLogCollector for Mail&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And the default collectors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PhpInfoCollector&lt;/li&gt; &#xA; &lt;li&gt;MessagesCollector&lt;/li&gt; &#xA; &lt;li&gt;TimeDataCollector (With Booting and Application timing)&lt;/li&gt; &#xA; &lt;li&gt;MemoryCollector&lt;/li&gt; &#xA; &lt;li&gt;ExceptionsCollector&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It also provides a facade interface (&lt;code&gt;Debugbar&lt;/code&gt;) for easy logging Messages, Exceptions and Time&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Require this package with composer. It is recommended to only require the package for development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer require barryvdh/laravel-debugbar --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Laravel uses Package Auto-Discovery, so doesn&#39;t require you to manually add the ServiceProvider.&lt;/p&gt; &#xA;&lt;p&gt;The Debugbar will be enabled when &lt;code&gt;APP_DEBUG&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you use a catch-all/fallback route, make sure you load the Debugbar ServiceProvider before your own App ServiceProviders.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Laravel without auto-discovery:&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t use auto-discovery, add the ServiceProvider to the providers array in config/app.php&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Barryvdh\Debugbar\ServiceProvider::class,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the facade to log messages, add this to your facades in app.php:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;Debugbar&#39; =&amp;gt; Barryvdh\Debugbar\Facades\Debugbar::class,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The profiler is enabled by default, if you have APP_DEBUG=true. You can override that in the config (&lt;code&gt;debugbar.enabled&lt;/code&gt;) or by setting &lt;code&gt;DEBUGBAR_ENABLED&lt;/code&gt; in your &lt;code&gt;.env&lt;/code&gt;. See more options in &lt;code&gt;config/debugbar.php&lt;/code&gt; You can also set in your config if you want to include/exclude the vendor files also (FontAwesome, Highlight.js and jQuery). If you already use them in your site, set it to false. You can also only display the js or css vendors, by setting it to &#39;js&#39; or &#39;css&#39;. (Highlight.js requires both css + js, so set to &lt;code&gt;true&lt;/code&gt; for syntax highlighting)&lt;/p&gt; &#xA;&lt;h4&gt;Copy the package config to your local config with the publish command:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan vendor:publish --provider=&#34;Barryvdh\Debugbar\ServiceProvider&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Laravel with Octane:&lt;/h3&gt; &#xA;&lt;p&gt;Make sure to add LaravelDebugbar to your flush list in &lt;code&gt;config/octane.php&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    &#39;flush&#39; =&amp;gt; [&#xA;        \Barryvdh\Debugbar\LaravelDebugbar::class,&#xA;    ],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lumen:&lt;/h3&gt; &#xA;&lt;p&gt;For Lumen, register a different Provider in &lt;code&gt;bootstrap/app.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if (env(&#39;APP_DEBUG&#39;)) {&#xA; $app-&amp;gt;register(Barryvdh\Debugbar\LumenServiceProvider::class);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the configuration, copy the file to your config folder and enable it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$app-&amp;gt;configure(&#39;debugbar&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can now add messages using the Facade (when added), using the PSR-3 levels (debug, info, notice, warning, error, critical, alert, emergency):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Debugbar::info($object);&#xA;Debugbar::error(&#39;Error!&#39;);&#xA;Debugbar::warning(&#39;Watch out…&#39;);&#xA;Debugbar::addMessage(&#39;Another message&#39;, &#39;mylabel&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And start/stop timing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Debugbar::startMeasure(&#39;render&#39;,&#39;Time for rendering&#39;);&#xA;Debugbar::stopMeasure(&#39;render&#39;);&#xA;Debugbar::addMeasure(&#39;now&#39;, LARAVEL_START, microtime(true));&#xA;Debugbar::measure(&#39;My long operation&#39;, function() {&#xA;    // Do something…&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or log exceptions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;try {&#xA;    throw new Exception(&#39;foobar&#39;);&#xA;} catch (Exception $e) {&#xA;    Debugbar::addThrowable($e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also helper functions available for the most common calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// All arguments will be dumped as a debug message&#xA;debug($var1, $someString, $intValue, $object);&#xA;&#xA;// `$collection-&amp;gt;debug()` will return the collection and dump it as a debug message. Like `$collection-&amp;gt;dump()`&#xA;collect([$var1, $someString])-&amp;gt;debug();&#xA;&#xA;start_measure(&#39;render&#39;,&#39;Time for rendering&#39;);&#xA;stop_measure(&#39;render&#39;);&#xA;add_measure(&#39;now&#39;, LARAVEL_START, microtime(true));&#xA;measure(&#39;My long operation&#39;, function() {&#xA;    // Do something…&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want you can add your own DataCollectors, through the Container or the Facade:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Debugbar::addCollector(new DebugBar\DataCollector\MessagesCollector(&#39;my_messages&#39;));&#xA;//Or via the App container:&#xA;$debugbar = App::make(&#39;debugbar&#39;);&#xA;$debugbar-&amp;gt;addCollector(new DebugBar\DataCollector\MessagesCollector(&#39;my_messages&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the Debugbar is injected just before &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;. If you want to inject the Debugbar yourself, set the config option &#39;inject&#39; to false and use the renderer yourself and follow &lt;a href=&#34;http://phpdebugbar.com/docs/rendering.html&#34;&gt;http://phpdebugbar.com/docs/rendering.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$renderer = Debugbar::getJavascriptRenderer();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Not using the auto-inject, will disable the Request information, because that is added After the response. You can add the default_request datacollector in the config as alternative.&lt;/p&gt; &#xA;&lt;h2&gt;Enabling/Disabling on run time&lt;/h2&gt; &#xA;&lt;p&gt;You can enable or disable the debugbar during run time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Debugbar::enable();&#xA;\Debugbar::disable();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NB. Once enabled, the collectors are added (and could produce extra overhead), so if you want to use the debugbar in production, disable in the config and only enable when needed.&lt;/p&gt; &#xA;&lt;h2&gt;Twig Integration&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Debugbar comes with two Twig Extensions. These are tested with &lt;a href=&#34;https://github.com/rcrowe/TwigBridge&#34;&gt;rcrowe/TwigBridge&lt;/a&gt; 0.6.x&lt;/p&gt; &#xA;&lt;p&gt;Add the following extensions to your TwigBridge config/extensions.php (or register the extensions manually)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;Barryvdh\Debugbar\Twig\Extension\Debug&#39;,&#xA;&#39;Barryvdh\Debugbar\Twig\Extension\Dump&#39;,&#xA;&#39;Barryvdh\Debugbar\Twig\Extension\Stopwatch&#39;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Dump extension will replace the &lt;a href=&#34;http://twig.sensiolabs.org/doc/functions/dump.html&#34;&gt;dump function&lt;/a&gt; to output variables using the DataFormatter. The Debug extension adds a &lt;code&gt;debug()&lt;/code&gt; function which passes variables to the Message Collector, instead of showing it directly in the template. It dumps the arguments, or when empty; all context variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-twig&#34;&gt;{{ debug() }}&#xA;{{ debug(user, categories) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Stopwatch extension adds a &lt;a href=&#34;http://symfony.com/blog/new-in-symfony-2-4-a-stopwatch-tag-for-twig&#34;&gt;stopwatch tag&lt;/a&gt; similar to the one in Symfony/Silex Twigbridge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-twig&#34;&gt;{% stopwatch &#34;foo&#34; %}&#xA;    …some things that gets timed&#xA;{% endstopwatch %}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>hyperf/hyperf</title>
    <updated>2022-06-04T02:31:59Z</updated>
    <id>tag:github.com,2022-06-04:/hyperf/hyperf</id>
    <link href="https://github.com/hyperf/hyperf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀 A coroutine framework that focuses on hyperspeed and flexibility. Building microservice or middleware with ease.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/hyperf/hyperf/master/README-CN.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://hyperf.io&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;img width=&#34;70&#34; src=&#34;https://cdn.jsdelivr.net/gh/hyperf/hyperf/docs/logo.png&#34; alt=&#34;Hyperf Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/hyperf/hyperf/releases&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/hyperf/hyperf/v/stable&#34; alt=&#34;Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.php.net&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/php-%3E=7.4-brightgreen.svg?maxAge=2592000&#34; alt=&#34;Php Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swoole/swoole-src&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swoole-%3E=4.5-brightgreen.svg?maxAge=2592000&#34; alt=&#34;Swoole Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hyperf/hyperf/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/hyperf/hyperf.svg?maxAge=2592000&#34; alt=&#34;Hyperf License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/hyperf/hyperf/actions&#34;&gt;&lt;img src=&#34;https://github.com/hyperf/hyperf/workflows/PHPUnit%20for%20Hyperf/badge.svg?sanitize=true&#34; alt=&#34;PHPUnit for Hyperf&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/hyperf/framework&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/hyperf/framework/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/hyperf/framework&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/hyperf/framework/d/monthly&#34; alt=&#34;Monthly Downloads&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Hyperf is an extremely performant and flexible PHP CLI framework, powered by a state-of-the-art coroutine server and a large number of battle-tested components. Aside from decisively beating PHP-FPM frameworks in benchmarks, Hyperf is unique in its focus on flexibility and composition. Hyperf ships with an AOP-enabling (aspect-oriented programming) dependency injector to ensure components and classes are pluggable and meta-programmable. All of Hyperf&#39;s core components strictly follow &lt;a href=&#34;https://www.php-fig.org/psr&#34;&gt;PSR&lt;/a&gt; standards and can be used in other frameworks.&lt;/p&gt; &#xA;&lt;p&gt;Hyperf&#39;s architecture is built using a combination of &lt;code&gt;Coroutines&lt;/code&gt;, &lt;code&gt;Dependency injection&lt;/code&gt;, &lt;code&gt;Events&lt;/code&gt;, &lt;code&gt;Annotations&lt;/code&gt;, and &lt;code&gt;AOP&lt;/code&gt;. In addition to providing &lt;code&gt;MySQL&lt;/code&gt;, &lt;code&gt;Redis&lt;/code&gt; and other common coroutine clients, &lt;code&gt;Hyperf&lt;/code&gt; also provides coroutine compatible versions of &lt;code&gt;WebSocket server / client&lt;/code&gt;, &lt;code&gt;JSON RPC server / client&lt;/code&gt;, &lt;code&gt;gRPC server / client&lt;/code&gt;, &lt;code&gt;Zipkin/Jaeger (OpenTracing) client&lt;/code&gt;, &lt;code&gt;Guzzle HTTP client&lt;/code&gt;, &lt;code&gt;Elasticsearch client&lt;/code&gt;, &lt;code&gt;Consul client&lt;/code&gt;, &lt;code&gt;ETCD client&lt;/code&gt;, &lt;code&gt;AMQP component&lt;/code&gt;, &lt;code&gt;Apollo configuration center&lt;/code&gt;, &lt;code&gt;Aliyun ACM&lt;/code&gt;, &lt;code&gt;ETCD configuration center&lt;/code&gt;, &lt;code&gt;Token bucket algorithm-based limiter&lt;/code&gt;, &lt;code&gt;Universal connection pool&lt;/code&gt;, &lt;code&gt;Circuit breaker&lt;/code&gt;, &lt;code&gt;Swagger&lt;/code&gt;, &lt;code&gt;Swoole Tracker&lt;/code&gt;, &lt;code&gt;Snowflake&lt;/code&gt;, &lt;code&gt;Simply Redis MQ&lt;/code&gt;, &lt;code&gt;RabbitMQ&lt;/code&gt;, &lt;code&gt;NSQ&lt;/code&gt;, &lt;code&gt;Nats&lt;/code&gt;, &lt;code&gt;Seconds level crontab&lt;/code&gt;, &lt;code&gt;Custom Processes&lt;/code&gt;, etc. Therefore, developers can entirely avoid implementing coroutine compatible versions of these libraries.&lt;/p&gt; &#xA;&lt;p&gt;Rest assured, Hyperf is still a PHP framework. Hyperf provides all the packages you expect: &lt;code&gt;Middleware&lt;/code&gt;, &lt;code&gt;Event Manager&lt;/code&gt;, &lt;code&gt;Coroutine-optimized Eloquent ORM&lt;/code&gt; (and Model Cache!), &lt;code&gt;Translation&lt;/code&gt;, &lt;code&gt;Validation&lt;/code&gt;, &lt;code&gt;View engine (Blade/Smarty/Twig/Plates/ThinkTemplate)&lt;/code&gt; and more.&lt;/p&gt; &#xA;&lt;h1&gt;Origin&lt;/h1&gt; &#xA;&lt;p&gt;Although there are many new PHP frameworks, we still haven&#39;t found a framework that matches an elegant design with ultra-high performance, nor have we found a framework that paves the way for PHP microservices. With this vision in mind, we will continue to invest in the future of this framework, and you are welcome to join us in contributing to the open-source development of Hyperf.&lt;/p&gt; &#xA;&lt;h1&gt;Design Goals&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Hyperspeed + Flexibility = Hyperf&lt;/code&gt;. The equation hidden in our name exhibits Hyperf&#39;s founding ambition.&lt;/p&gt; &#xA;&lt;p&gt;Hyperspeed: Leveraging &lt;code&gt;Swoole&lt;/code&gt; and &lt;code&gt;Swow&lt;/code&gt; coroutines, Hyperf is capable of handling massive amounts of traffic. The Hyperf team made many optimizations to the framework to eliminate every bottleneck between the end-user and our blazing engine.&lt;/p&gt; &#xA;&lt;p&gt;Flexibility: We believe our Dependency Injection component is best in class. With the help of &lt;code&gt;Hyperf DI&lt;/code&gt;, components and classes are all pluggable and meta-programmable. Inversely, all Hyperf components are meant to be shared with the world. Our commitment to PSR standards means that you can use Hyperf components in any compatible framework.&lt;/p&gt; &#xA;&lt;p&gt;Via these traits, Hyperf has discovered the untapped potential in many fields: implementing Web servers, gateway servers, distributed middleware software, microservices architecture, game servers, and Internet-of-Things (IoT).&lt;/p&gt; &#xA;&lt;h1&gt;Production ready&lt;/h1&gt; &#xA;&lt;p&gt;Alongside our well-maintained, multilingual documentation, a large number of unit tests for each component ensure logical correctness. Before &lt;code&gt;Hyperf&lt;/code&gt; was released to the public (2019-06-20), it was used privately for multiple services in series-C and series-B Internet companies, which have been running without incident for years in harsh production environments.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hyperf.wiki&#34;&gt;https://hyperf.wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Security Vulnerabilities&lt;/h1&gt; &#xA;&lt;p&gt;If you discover a security vulnerability within Hyperf, please send an e-mail to the Hyperf Team via &lt;a href=&#34;mailto:group@hyperf.io&#34;&gt;group@hyperf.io&lt;/a&gt;. All security vulnerabilities will be promptly addressed.&lt;/p&gt; &#xA;&lt;h1&gt;Code Contributors&lt;/h1&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://github.com/hyperf/hyperf/graphs/contributors&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/hyperf/hyperf/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/hyperf/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Code Contributor over time&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apiseven.com/en/contributor-graph?chart=contributorOverTime&amp;amp;repo=hyperf/hyperf&#34;&gt;&lt;img src=&#34;https://contributor-overtime-api.apiseven.com/contributors-svg?chart=contributorOverTime&amp;amp;repo=hyperf/hyperf&#34; alt=&#34;Code Contributor over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Financial Contributors&lt;/h1&gt; &#xA;&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&#34;https://hyperf.wiki/#/en/donate&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;Support this project with your organization or company. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://hyperf.wiki/#/en/donate&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;h3&gt;Aliyun 8 cores 16G ram&lt;/h3&gt; &#xA;&lt;p&gt;command: &lt;code&gt;wrk -c 1024 -t 8 http://127.0.0.1:9501/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Running 10s test @ http://127.0.0.1:9501/&#xA;  8 threads and 1024 connections&#xA;  Thread Stats   Avg      Stdev     Max   +/- Stdevs&#xA;    Latency    10.08ms    6.82ms  56.66ms   70.19%&#xA;    Req/Sec    13.17k     5.94k   33.06k    84.12%&#xA;  1049478 requests in 10.10s, 190.16MB read&#xA;Requests/sec: 103921.49&#xA;Transfer/sec:     18.83MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;The Hyperf Ecosystem&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🧬 &lt;a href=&#34;https://github.com/hyperf/nano&#34;&gt;Nano&lt;/a&gt; is a zero-config, no skeleton, minimal Hyperf distribution that allows you to quickly build a Hyperf application with just a single PHP file.&lt;/li&gt; &#xA; &lt;li&gt;⚡️ &lt;a href=&#34;https://github.com/hyperf/gotask&#34;&gt;GoTask&lt;/a&gt; is a library to spawns a go process as a Swoole sidecar and establishes a bi-directional IPC to offload heavy-duties to Go. Think of it as a Swoole Taskworker in Go.&lt;/li&gt; &#xA; &lt;li&gt;🚀 &lt;a href=&#34;https://github.com/hyperf/jet&#34;&gt;Jet&lt;/a&gt; is a unification model RPC Client, built-in JSONRPC protocol, available to running in ALL PHP environments, including PHP-FPM and Swoole/Hyperf environments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Stargazers over time&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/hyperf/hyperf.svg&#34;&gt;&lt;img src=&#34;https://starchart.cc/hyperf/hyperf.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The Hyperf framework is open-source software licensed under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>luolongfei/freenom</title>
    <updated>2022-06-04T02:31:59Z</updated>
    <id>tag:github.com,2022-06-04:/luolongfei/freenom</id>
    <link href="https://github.com/luolongfei/freenom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Freenom 域名自动续期。Freenom domain name renews automatically.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/03/10/bhzMG9.png&#34; alt=&#34;freenom logo&#34;&gt;&lt;/p&gt; &#xA; &lt;h3&gt;Freenom：freenom域名自动续期&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://secure.php.net/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/php-%3E=7.3-brightgreen.svg?style=for-the-badge&#34; alt=&#34;PHP version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/luolongfei/freenom&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/luolongfei/freenom.svg?style=for-the-badge&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/luolongfei/freenom/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/luolongfei/freenom?color=brightgreen&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/luolongfei/freenom/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=for-the-badge&#34; alt=&#34;MIT license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Documentation: &lt;a href=&#34;https://github.com/luolongfei/freenom/raw/main/README_EN.md&#34;&gt;English version&lt;/a&gt; | 中文版&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E6%B3%A8%E6%84%8F&#34;&gt;📢 注意&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E7%89%B9%E5%88%AB%E6%84%9F%E8%B0%A2-special-thanks&#34;&gt;🌿 特别感谢 Special Thanks&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E5%BC%95%E8%A8%80&#34;&gt;📃 引言&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E6%95%88%E6%9E%9C&#34;&gt;🍭 效果&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E4%BA%8B%E5%89%8D%E5%87%86%E5%A4%87&#34;&gt;🎁 事前准备&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%85%8D%E7%BD%AE%E9%80%81%E4%BF%A1%E5%8A%9F%E8%83%BD&#34;&gt;📪 配置送信功能&lt;/a&gt;（支持 邮件送信 / Telegram Bot / 企业微信 / Server 酱 / Bark 等送信方式）&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%80%9A%E8%BF%87-docker-%E9%83%A8%E7%BD%B2&#34;&gt;🐳 通过 Docker 方式部署&lt;/a&gt;（推荐，最简单的部署方式之一）&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%80%9A%E8%BF%87-Railway-%E9%83%A8%E7%BD%B2&#34;&gt;🚈 通过 Railway 部署&lt;/a&gt;（推荐没有自己服务器的用户使用此方案）&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%80%9A%E8%BF%87-Heroku-%E9%83%A8%E7%BD%B2&#34;&gt;🧊 通过 Heroku 部署&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%80%9A%E8%BF%87%E5%90%84%E7%A7%8D%E4%BA%91%E5%87%BD%E6%95%B0%E9%83%A8%E7%BD%B2&#34;&gt;☁ 通过 各种云函数 部署&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E7%9B%B4%E6%8E%A5%E6%8B%89%E5%8F%96%E6%BA%90%E7%A0%81%E9%83%A8%E7%BD%B2&#34;&gt;🚧 直接拉取源码部署&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E8%B5%9E%E5%8A%A9%E5%90%8D%E5%8D%95-donation-list&#34;&gt;📋 赞助名单 Donation List&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E8%B5%9E%E5%8A%A9-donation&#34;&gt;❤ 赞助 Donation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E4%BF%A1%E4%BB%B0&#34;&gt;🪓 信仰&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E4%BD%9C%E8%80%85&#34;&gt;🌚 作者&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E6%89%80%E6%9C%89%E8%B4%A1%E7%8C%AE%E8%80%85&#34;&gt;💖 所有贡献者&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-TODO-List&#34;&gt;📝 TODO List&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97&#34;&gt;📰 更新日志&lt;/a&gt;（每次新版本发布，可以参考此日志决定是否更新）&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%B8%A3%E8%B0%A2&#34;&gt;🎉 鸣谢&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE&#34;&gt;🥝 开源协议&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;📢 注意&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;之前因为 GitHub Action 事件导致本项目被封禁，而后我短暂将项目转移到了 &lt;a href=&#34;https://github.com/luolongfei/next-freenom&#34;&gt;https://github.com/luolongfei/next-freenom&lt;/a&gt; 仓库，然后在 &lt;a href=&#34;https://github.com/Mattraks&#34;&gt;@Mattraks&lt;/a&gt; 的提醒下，通过特别的方式恢复了本仓库。&lt;/li&gt; &#xA; &lt;li&gt;本次封禁导致的直接后果是以前的&lt;code&gt;issues&lt;/code&gt;全部丢失，以及近&lt;code&gt;1.8k&lt;/code&gt;的&lt;code&gt;star&lt;/code&gt;数重新归零，在动力上面确实有受到影响，不过也不会有太大影响，本项目依然长期维护，如果项目有帮到你，欢迎 star。&lt;/li&gt; &#xA; &lt;li&gt;狡兔三窟，临时仓库 &lt;a href=&#34;https://github.com/luolongfei/next-freenom&#34;&gt;https://github.com/luolongfei/next-freenom&lt;/a&gt; 也是备用仓库，如若本仓库再次失联，可以移步到备用仓库获取最新消息，正常情况下以后的开发维护依然在本仓库进行。&lt;/li&gt; &#xA; &lt;li&gt;推荐 &lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%80%9A%E8%BF%87-docker-%E9%83%A8%E7%BD%B2&#34;&gt;🐳 通过 Docker 方式部署&lt;/a&gt;。如果你没有自己的服务器，可参考本文档 &lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%80%9A%E8%BF%87-Railway-%E9%83%A8%E7%BD%B2&#34;&gt;🚈 通过 Railway 部署&lt;/a&gt; 、&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%80%9A%E8%BF%87-Heroku-%E9%83%A8%E7%BD%B2&#34;&gt;🧊 通过 Heroku 部署&lt;/a&gt;、&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%80%9A%E8%BF%87%E5%90%84%E7%A7%8D%E4%BA%91%E5%87%BD%E6%95%B0%E9%83%A8%E7%BD%B2&#34;&gt;☁ 通过 各种云函数 部署&lt;/a&gt; 等相关内容。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🌿 特别感谢 Special Thanks&lt;/h3&gt; &#xA;&lt;p&gt;感谢 JetBrains 提供的非商业开源软件开发授权。&lt;/p&gt; &#xA;&lt;p&gt;Thanks for non-commercial open source development authorization by JetBrains.&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.jetbrains.com/?from=luolongfei/freenom&#34; target=&#34;_blank&#34; title=&#34;JetBrains Logo (Main) logo.&#34;&gt; &lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&#34; width=&#34;200px&#34; height=&#34;200px&#34; alt=&#34;JetBrains Logo (Main) logo.&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;📃 引言&lt;/h3&gt; &#xA;&lt;p&gt;众所周知，Freenom是地球上唯一一个提供免费顶级域名的商家，不过需要每年续期，每次续期最多一年。由于我申请了一堆域名，而且不是同一时段申请的， 所以每次续期都觉得折腾，于是就写了这个自动续期的脚本。&lt;/p&gt; &#xA;&lt;h3&gt;🍭 效果&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://s4.ax1x.com/2022/02/26/bZr7WQ.png&#34;&gt;&lt;img src=&#34;https://s4.ax1x.com/2022/02/26/bZr7WQ.png&#34; alt=&#34;邮件示例&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;无论是续期成败或者脚本执行出错，都会收到的程序发出的邮件。如果是续期成败相关的邮件，邮件会包括未续期域名的到期天数等内容。 邮件参考了微信发送的注销公众号的邮件样式。&lt;/p&gt; &#xA;&lt;h3&gt;🎁 事前准备&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VPS：随便一台服务器都行，系统推荐&lt;code&gt;Debian&lt;/code&gt;。&lt;code&gt;PHP&lt;/code&gt;版本需在&lt;code&gt;php7.3&lt;/code&gt;及以上，如果有&lt;code&gt;Docker&lt;/code&gt;环境则可无视这个限制。如果你没有服务器，可参考本文档部署到各种免费环境中。&lt;/li&gt; &#xA; &lt;li&gt;送信邮箱（可选）：为了方便理解又称机器人邮箱，用于发送通知邮件。目前针对&lt;code&gt;Gmail&lt;/code&gt;、&lt;code&gt;QQ邮箱&lt;/code&gt;、&lt;code&gt;163邮箱&lt;/code&gt;以及&lt;code&gt;Outlook邮箱&lt;/code&gt;，程序会自动判断送信邮箱类型并使用合适的配置。 如果你使用的是其它第三方邮箱或者自建邮件服务，那么请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/raw/main/.env.example&#34;&gt;.env.example&lt;/a&gt; 文件中与邮件配置相关的注释进行配置。&lt;/li&gt; &#xA; &lt;li&gt;收信邮箱（可选）：用于接收机器人发出的通知邮件。&lt;/li&gt; &#xA; &lt;li&gt;上面的&lt;code&gt;送信邮箱&lt;/code&gt;和&lt;code&gt;收信邮箱&lt;/code&gt;是可选项，因为目前程序已支持&lt;code&gt;邮件送信&lt;/code&gt; / &lt;code&gt;Telegram Bot&lt;/code&gt; / &lt;code&gt;企业微信&lt;/code&gt; / &lt;code&gt;Server 酱&lt;/code&gt; / &lt;code&gt;Bark&lt;/code&gt;等送信方式，仅当你使用&lt;code&gt;邮件送信&lt;/code&gt;的时候，&lt;code&gt;送信邮箱&lt;/code&gt;和&lt;code&gt;收信邮箱&lt;/code&gt; 才是必须的，其它送信方式所需请参考下面的 &lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%85%8D%E7%BD%AE%E9%80%81%E4%BF%A1%E5%8A%9F%E8%83%BD&#34;&gt;配置送信功能&lt;/a&gt; 。&lt;/li&gt; &#xA; &lt;li&gt;耐心。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📪 配置送信功能&lt;/h3&gt; &#xA;&lt;p&gt;此处会分别介绍&lt;code&gt;邮件送信&lt;/code&gt; / &lt;code&gt;Telegram Bot&lt;/code&gt; / &lt;code&gt;企业微信&lt;/code&gt; / &lt;code&gt;Server 酱&lt;/code&gt; / &lt;code&gt;Bark&lt;/code&gt;送信方式的配置方法，以及其所需的资料，你可以任选一种送信方式进行配置，直接跳到对应的文档查看即可。 如果你是 IOS 用户，推荐使用 &lt;code&gt;Bark&lt;/code&gt; 送信方式，其它平台的用户根据自己喜好选择可接受的送信方式即可。不太推荐使用&lt;code&gt;Server 酱&lt;/code&gt;送信，&lt;code&gt;Server 酱&lt;/code&gt;每日送信条数的限制，以及需要开会员才能直接看到送信内容，否则需要跳到 &lt;code&gt;Server 酱&lt;/code&gt; 网站才能查看内容，都是不推荐的原因。同样的配置完全可以直接使用&lt;code&gt;企业微信&lt;/code&gt;送信方式，&lt;code&gt;企业微信&lt;/code&gt;送信直接在普通微信客户端就能看到信件内容。&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;快速到文档指定位置：&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#%E9%82%AE%E4%BB%B6%E9%80%81%E4%BF%A1&#34;&gt;邮件送信&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#Telegram-Bot&#34;&gt;Telegram Bot&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1&#34;&gt;企业微信&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#Server-%E9%85%B1&#34;&gt;Server 酱&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#Bark-%E9%80%81%E4%BF%A1&#34;&gt;Bark 送信&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;邮件送信&lt;/h4&gt; &#xA;&lt;p&gt;下面分别介绍&lt;code&gt;Gmail&lt;/code&gt;、&lt;code&gt;QQ邮箱&lt;/code&gt;以及&lt;code&gt;163邮箱&lt;/code&gt;的设置，你只用看自己需要的部分。注意，&lt;code&gt;QQ邮箱&lt;/code&gt;与&lt;code&gt;163邮箱&lt;/code&gt;均使用&lt;code&gt;账户加授权码&lt;/code&gt;的方式登录， &lt;code&gt;谷歌邮箱&lt;/code&gt;使用&lt;code&gt;账户加密码&lt;/code&gt;或者&lt;code&gt;账户加授权码&lt;/code&gt;的方式登录，请知悉。另外还想吐槽一下，国产邮箱你得花一毛钱给邮箱提供方发一条短信才能拿到授权码。&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;（点击即可展开或收起）&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;设置Gmail&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;1、在&lt;code&gt;设置&amp;gt;转发和POP/IMAP&lt;/code&gt;中，勾选&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;对所有邮件启用 POP&lt;/li&gt; &#xA;  &lt;li&gt;启用 IMAP&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/31/13tKsg.png&#34; alt=&#34;gmail配置01&#34; title=&#34;gmail配置01&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;然后保存更改。&lt;/p&gt; &#xA; &lt;p&gt;2、允许不够安全的应用&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;推荐打开浏览器隐私模式后再登录 gmail 进行设置，防止当你有多个 gmail 账户时无法跳到正确的设置地址。&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;登录谷歌邮箱后，访问 &lt;a href=&#34;https://myaccount.google.com/u/0/lesssecureapps?pli=1&amp;amp;pageId=none&#34;&gt;谷歌权限设置界面&lt;/a&gt; ，启用允许不够安全的应用。&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/31/1392KH.png&#34; alt=&#34;gmail配置02&#34; title=&#34;gmail配置02&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;另外，若遇到提示&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;不允许访问账户&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;登录谷歌邮箱后，去 &lt;a href=&#34;https://accounts.google.com/b/0/DisplayUnlockCaptcha&#34;&gt;gmail的这个界面&lt;/a&gt; 点击允许。这种情况较为少见。&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意：由于直接使用 gmail 密码登录容易触发谷歌安全机制，故推荐参考官方文档启用应用专用密码：&lt;a href=&#34;https://support.google.com/mail/answer/185833?hl=zh-Hans&#34;&gt;https://support.google.com/mail/answer/185833?hl=zh-Hans&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;使用账户+应用专用密码登录，就算频繁换 ip 登录 gmail 也不会触发谷歌安全机制。&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;设置QQ邮箱&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;在&lt;code&gt;设置&amp;gt;账户&amp;gt;POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务&lt;/code&gt;下，开启&lt;code&gt;POP3/SMTP服务&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/31/13cIKA.png&#34; alt=&#34;qq邮箱配置01&#34; title=&#34;qq邮箱配置01&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;此时坑爹的QQ邮箱会要求你用手机发送一条短信给腾讯，发送完了点一下&lt;code&gt;我已发送&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/31/13c4vd.png&#34; alt=&#34;qq邮箱配置02&#34; title=&#34;qq邮箱配置02&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;然后你就能看到你的邮箱授权码了，使用邮箱账户加授权码即可登录，记下授权码&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/31/13cTbt.png&#34; alt=&#34;qq邮箱配置03&#34; title=&#34;qq邮箱配置03&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/31/13coDI.png&#34; alt=&#34;qq邮箱配置04&#34; title=&#34;qq邮箱配置04&#34;&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;设置163邮箱&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;在&lt;code&gt;设置&amp;gt;POP3/SMTP/IMAP&lt;/code&gt;下，开启&lt;code&gt;POP3/SMTP服务&lt;/code&gt;和&lt;code&gt;IMAP/SMTP服务&lt;/code&gt;并保存&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/31/13WKZn.png&#34; alt=&#34;163邮箱配置01&#34; title=&#34;163邮箱配置01&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/31/13WQI0.png&#34; alt=&#34;163邮箱配置02&#34; title=&#34;163邮箱配置02&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;现在点击侧边栏的&lt;code&gt;客户端授权密码&lt;/code&gt;，并获取授权码，你看到画面可能和我不一样，因为我已经获取了授权码，所以只有&lt;code&gt;重置授权码&lt;/code&gt;按钮，这里自己根据网站提示申请获取授权码，网易和腾讯一样恶心，需要你用手机给它发一条短信才能拿到授权码&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/31/13WMaq.png&#34; alt=&#34;163邮箱配置03&#34; title=&#34;163邮箱配置03&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;163 邮箱送信后，接收方如果没收到可以在垃圾邮件里面找一下。&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;上面的动作完成后，在&lt;code&gt;.env&lt;/code&gt;文件中，将&lt;code&gt;MAIL_USERNAME&lt;/code&gt;和&lt;code&gt;MAIL_PASSWORD&lt;/code&gt;设置为你的邮箱和密码（或令牌），将&lt;code&gt;TO&lt;/code&gt;设置为你的收信邮箱，然后将&lt;code&gt;MAIL_ENABLE&lt;/code&gt;的值设为&lt;code&gt;1&lt;/code&gt;以启用邮箱送信功能。&lt;/p&gt; &#xA;&lt;p&gt;上面介绍了三种邮箱的设置方法，如果你不想使用邮件送信，将根目录下的&lt;code&gt;.env&lt;/code&gt;文件中的&lt;code&gt;MAIL_ENABLE&lt;/code&gt;的值改为&lt;code&gt;0&lt;/code&gt;即可关闭邮件推送方式。&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;邮件 送信部分完。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Telegram Bot&lt;/h4&gt; &#xA;&lt;p&gt;有关 【Telegram Bot】 的具体配置步骤请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/wiki/Telegram-Bot&#34;&gt;此处&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;企业微信&lt;/h4&gt; &#xA;&lt;p&gt;有关 【企业微信】 的具体配置步骤请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/wiki/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1&#34;&gt;此处&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Server 酱&lt;/h4&gt; &#xA;&lt;p&gt;有关 【Server 酱】 的具体配置步骤请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/wiki/Server-%E9%85%B1&#34;&gt;此处&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Bark 送信&lt;/h4&gt; &#xA;&lt;p&gt;有关 【Bark 送信】 的具体配置步骤请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/wiki/Bark-%E9%80%81%E4%BF%A1&#34;&gt;此处&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;与 配置送信功能 相关的篇幅完。下面开始讲本项目的几种使用方式。推荐使用 Docker 方式，无需纠结环境。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;🐳 通过 Docker 部署&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;如果你有自己的服务器，这是最推荐的部署方式。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docker 仓库地址为： &lt;a href=&#34;https://hub.docker.com/r/luolongfei/freenom&#34;&gt;https://hub.docker.com/r/luolongfei/freenom&lt;/a&gt; ，同样欢迎 star 。 此镜像支持的架构为&lt;code&gt;linux/amd64&lt;/code&gt;，&lt;code&gt;linux/arm64&lt;/code&gt;，&lt;code&gt;linux/ppc64le&lt;/code&gt;，&lt;code&gt;linux/s390x&lt;/code&gt;，&lt;code&gt;linux/386&lt;/code&gt;，&lt;code&gt;linux/arm/v7&lt;/code&gt;，&lt;code&gt;linux/arm/v6&lt;/code&gt;， 理论上支持&lt;code&gt;群晖&lt;/code&gt; 、&lt;code&gt;威联通&lt;/code&gt;、&lt;code&gt;树莓派&lt;/code&gt;以及各种类型的&lt;code&gt;VPS&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h4&gt;1、安装 Docker&lt;/h4&gt; &#xA;&lt;h5&gt;1.1 以 root 用户登录，执行一键脚本安装 Docker&lt;/h5&gt; &#xA;&lt;p&gt;升级源并安装软件（下面两行命令二选一，根据你自己的系统）&lt;/p&gt; &#xA;&lt;p&gt;Debian / Ubuntu&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt-get update &amp;amp;&amp;amp; apt-get install -y wget vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CentOS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum update &amp;amp;&amp;amp; yum install -y wget vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;执行此命令等候自动安装 Docker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget -qO- get.docker.com | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;说明：请使用 KVM 架构的 VPS，OpenVZ 架构的 VPS 不支持安装 Docker，另外 CentOS 8 不支持用此脚本来安装 Docker。 更多关于 Docker 安装的内容参考 &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker 官方安装指南&lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;h5&gt;1.2 针对 Docker 执行以下命令&lt;/h5&gt; &#xA;&lt;p&gt;启动 Docker 服务&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl start docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;查看 Docker 运行状态&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl status docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将 Docker 服务加入开机自启动&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl enable docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2、通过 Docker 部署域名续期脚本&lt;/h4&gt; &#xA;&lt;h5&gt;2.1 用 Docker 创建并启动容器&lt;/h5&gt; &#xA;&lt;p&gt;命令如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name freenom --restart always -v $(pwd):/conf -v $(pwd)/logs:/app/logs luolongfei/freenom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或者，如果你想自定义脚本执行时间，则命令如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name freenom --restart always -v $(pwd):/conf -v $(pwd)/logs:/app/logs -e RUN_AT=&#34;11:24&#34; luolongfei/freenom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;上面这条命令只比上上条命令多了个&lt;code&gt; -e RUN_AT=&#34;11:24&#34;&lt;/code&gt;，其中&lt;code&gt;11:24&lt;/code&gt;表示在北京时间每天的 11:24 执行续期任务，你可以自定义这个时间。 这里的&lt;code&gt;RUN_AT&lt;/code&gt;参数同时也支持 CRON 命令里的时间形式，比如，&lt;code&gt; -e RUN_AT=&#34;9 11 * * *&#34;&lt;/code&gt;，表示每天北京时间 11:09 执行续期任务， 如果你不想每天执行任务，只想隔几天执行，只用修改&lt;code&gt;RUN_AT&lt;/code&gt;的值即可。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意：不推荐自定义脚本执行时间。因为你可能跟很多人定义的是同一个时间点，这样可能导致所有人都是同一时间向 Freenom 的服务器发起请求， 使得 Freenom 无法稳定提供服务。而如果你不自定义时间，程序会自动指定北京时间 06 ~ 23 点全时段随机的一个时间点作为执行时间， 每次重启容器都会自动重新指定。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点我查看上方 Docker 命令的参数解释&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;命令&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;含义&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;docker run&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;开始运行一个容器&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;-d 参数&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;容器以后台运行并输出容器 ID&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;--name 参数&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;给容器分配一个识别符，方便将来的启动，停止，删除等操作&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;--restart 参数&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;配置容器启动类型，always 即为 docker 服务重新启动时自动启动本容器&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;-v 参数&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;挂载卷（volume），冒号后面是容器的路径，冒号前面是宿主机的路径（只支持绝对路径），&lt;code&gt;$(pwd)&lt;/code&gt;表示当前目录，如果是 Windows 系统，则可用&lt;code&gt;${PWD}&lt;/code&gt;替换此处的&lt;code&gt;$(pwd)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;-e 参数&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;指定容器中的环境变量&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;luolongfei/freenom&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;这是从 docker hub 下载回来的镜像完整路径名&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;至此，你的自动续期容器就跑起来了，执行&lt;code&gt;ls -a&lt;/code&gt;后你就可以看到在你的当前目录下，有一个&lt;code&gt;.env&lt;/code&gt;文件和一个&lt;code&gt;logs&lt;/code&gt;目录，&lt;code&gt;logs&lt;/code&gt;目录里面存放的是程序日志， 而&lt;code&gt;.env&lt;/code&gt;则是配置文件，现在直接执行&lt;code&gt;vim .env&lt;/code&gt; 将&lt;code&gt;.env&lt;/code&gt;文件里的所有配置项改为你自己的并保存即可。然后重启容器，如果配置正确的话，便很快可以收到相关邮件。&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点我查看 .env 文件中部分配置项的含义&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;变量名&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;含义&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;默认值&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;是否必须&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;备注&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;FREENOM_USERNAME&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Freenom 账户&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;是&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;只支持邮箱账户，如果你是使用第三方社交账户登录的用户，请在 Freenom 管理页面绑定邮箱，绑定后即可使用邮箱账户登录&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;FREENOM_PASSWORD&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Freenom 密码&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;是&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;某些特殊字符可能需要转义，详见&lt;code&gt;.env&lt;/code&gt;文件内注释&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;MULTIPLE_ACCOUNTS&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;多账户支持&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;多个账户和密码的格式必须是“`&amp;lt;账户1&amp;gt;@&amp;lt;密码1&amp;gt;\&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;MAIL_USERNAME&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;机器人邮箱账户&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;支持&lt;code&gt;Gmail&lt;/code&gt;、&lt;code&gt;QQ邮箱&lt;/code&gt;、&lt;code&gt;163邮箱&lt;/code&gt;以及&lt;code&gt;Outlook邮箱&lt;/code&gt;，尽可能使用&lt;code&gt;163邮箱&lt;/code&gt;或者&lt;code&gt;QQ邮箱&lt;/code&gt;而非&lt;code&gt;Gmail&lt;/code&gt;。因为谷歌的安全机制，每次在新设备登录 &lt;code&gt;Gmail&lt;/code&gt; 都会先被限制，需要手动解除限制才行。具体的配置方法参考「 &lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#-%E9%85%8D%E7%BD%AE%E9%80%81%E4%BF%A1%E5%8A%9F%E8%83%BD&#34;&gt;配置送信功能&lt;/a&gt; 」&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;MAIL_PASSWORD&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;机器人邮箱密码&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;Gmail&lt;/code&gt;填密码，&lt;code&gt;QQ邮箱&lt;/code&gt;或&lt;code&gt;163邮箱&lt;/code&gt;填授权码&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;TO&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;接收通知的邮箱&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;你自己最常用的邮箱，用来接收机器人邮箱发出的域名相关邮件&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;MAIL_ENABLE&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;是否启用邮件推送功能&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;1&lt;/code&gt;：启用&lt;br&gt;&lt;code&gt;0&lt;/code&gt;：不启用&lt;br&gt;默认不启用，如果设为&lt;code&gt;1&lt;/code&gt;，启用邮件推送功能，则上面的&lt;code&gt;MAIL_USERNAME&lt;/code&gt;、&lt;code&gt;MAIL_PASSWORD&lt;/code&gt;、&lt;code&gt;TO&lt;/code&gt;变量变为必填项&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;TELEGRAM_CHAT_ID&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;你的&lt;code&gt;chat_id&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;通过发送&lt;code&gt;/start&lt;/code&gt;给&lt;code&gt;@userinfobot&lt;/code&gt;可以获取自己的&lt;code&gt;id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;TELEGRAM_BOT_TOKEN&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;你的&lt;code&gt;Telegram bot&lt;/code&gt;的&lt;code&gt;token&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;TELEGRAM_BOT_ENABLE&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;是否启用&lt;code&gt;Telegram Bot&lt;/code&gt;推送功能&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;1&lt;/code&gt;：启用&lt;br&gt;&lt;code&gt;0&lt;/code&gt;：不启用&lt;br&gt;默认不启用，如果设为&lt;code&gt;1&lt;/code&gt;，则必须设置上面的&lt;code&gt;TELEGRAM_CHAT_ID&lt;/code&gt;和&lt;code&gt;TELEGRAM_BOT_TOKEN&lt;/code&gt;变量&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;NOTICE_FREQ&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;通知频率&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;0&lt;/code&gt;：仅当有续期操作的时候&lt;br&gt;&lt;code&gt;1&lt;/code&gt;：每次执行&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;strong&gt;更多配置项含义，请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/raw/main/.env.example&#34;&gt;.env.example&lt;/a&gt; 文件中的注释。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如何验证你的配置是否正确呢？&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;修改并保存&lt;code&gt;.env&lt;/code&gt;文件后，执行&lt;code&gt;docker restart freenom&lt;/code&gt;重启容器，等待 5 秒钟左右，然后执行&lt;code&gt;docker logs freenom&lt;/code&gt;查看输出内容， 观察输出内容中有&lt;code&gt;执行成功&lt;/code&gt; 字样，则表示配置无误。如果你还来不及配置送信邮箱等内容，可先停用邮件功能。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如何升级到最新版或者重新部署呢？&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;在&lt;code&gt;.env&lt;/code&gt;所在目录，执行&lt;code&gt;docker rm -f freenom&lt;/code&gt;删除现有容器，然后再执行 &lt;code&gt;docker rmi -f luolongfei/freenom&lt;/code&gt; 删除旧的镜像，然后再执行上面的 &lt;code&gt;docker run -d --name freenom --restart always -v $(pwd):/conf -v $(pwd)/logs:/app/logs luolongfei/freenom&lt;/code&gt; 重新部署即可，这样部署后就是最新的代码了。当然，新版对应的&lt;code&gt;.env&lt;/code&gt;文件可能有变动，不必担心，程序会自动更新&lt;code&gt;.env&lt;/code&gt;文件内容，并将已有的配置迁移过去。&lt;/p&gt; &#xA;&lt;p&gt;一句话操作，即在&lt;code&gt;.env&lt;/code&gt;文件所在目录下执行以下命令，即可完成更新升级：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker rm -f freenom &amp;amp;&amp;amp; docker rmi -f luolongfei/freenom &amp;amp;&amp;amp; docker run -d --name freenom --restart always -v $(pwd):/conf -v $(pwd)/logs:/app/logs luolongfei/freenom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;2.2 后期容器管理以及 Docker 常用命令&lt;/h5&gt; &#xA;&lt;p&gt;查看容器在线状态及大小&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker ps -as&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;查看容器的运行输出日志&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker logs freenom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;重新启动容器&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker restart freenom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;停止容器的运行&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stop freenom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;移除容器&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker rm -f freenom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;查看 docker 容器占用 CPU，内存等信息&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stats --no-stream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;查看 Docker 安装版本等信息&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;重启 Docker（非容器）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl restart docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;有关容器部署的内容结束。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;🚈 通过 Railway 部署&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;推荐没有自己服务器的用户使用此方案。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;有关 【通过 Railway 部署】 的具体操作步骤请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/wiki/%E9%80%9A%E8%BF%87-Railway-%E9%83%A8%E7%BD%B2&#34;&gt;此处&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;🧊 通过 Heroku 部署&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;由于休眠问题以及 Cron 问题还没有比较完美的解决方案，故暂时不推荐通过这种方式部署。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;点击下方按钮，可以一键部署到 Heroku，不过由于 Heroku 免费版本每 30 分钟休眠，你可以将创建的 app 地址交给 &lt;a href=&#34;https://kaffeine.herokuapp.com/&#34;&gt;https://kaffeine.herokuapp.com&lt;/a&gt; ，让它每隔一段时间就 ping 一下你的地址，使得你的容器保持唤醒状态。而 Heroku 容器每个月最多只能清醒 500 个小时，所以还是会面临休眠问题。除非你验证信用卡以获取 1000 小时运行时长。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意，Heroku 还有个不太好处理的问题，在容器内部似乎不能正常使用 Cron 计划任务，可能跟每次由不同用户启动容器，且每次容器都位于不同的机器有关。只能使用 Heroku 提供的调度器，很不灵活，或者借助代码实现与 Cron 类似的功能。参考：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/2611936&#34;&gt;https://stackoverflow.com/a/2611936&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://medartus.medium.com/how-to-use-cron-on-heroku-for-free-778d8602a622&#34;&gt;https://medartus.medium.com/how-to-use-cron-on-heroku-for-free-778d8602a622&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;☁ 通过各种云函数部署&lt;/h3&gt; &#xA;&lt;p&gt;所有云函数使用的是同一个压缩包，已做兼容处理，下载地址： &lt;a href=&#34;https://github.com/luolongfei/freenom/releases/download/v0.5/freenom_scf.zip&#34;&gt;https://github.com/luolongfei/freenom/releases/download/v0.5/freenom_scf.zip&lt;/a&gt; 。本文档会在发布新版的时候同步更新此处的压缩包下载地址，所以不必担心，你看到的下载地址指向的包一定是最新版本。&lt;/p&gt; &#xA;&lt;p&gt;下载后你将得到一个 zip 文件，将 zip 文件放到你能找到的任意目录，后面我们将以 zip 文件的形式上传到各种云函数。&lt;/p&gt; &#xA;&lt;p&gt;有关 【通过腾讯云函数部署】 的具体操作步骤请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/wiki/%E9%80%9A%E8%BF%87%E8%85%BE%E8%AE%AF%E4%BA%91%E5%87%BD%E6%95%B0%E9%83%A8%E7%BD%B2&#34;&gt;此处&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;有关 【通过阿里云函数部署】 的具体操作步骤请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/wiki/%E9%80%9A%E8%BF%87%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E9%83%A8%E7%BD%B2&#34;&gt;此处&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;有关 【通过华为云函数部署】 的具体操作步骤请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/wiki/%E9%80%9A%E8%BF%87%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%87%BD%E6%95%B0%E9%83%A8%E7%BD%B2&#34;&gt;此处&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;🚧 直接拉取源码部署&lt;/h3&gt; &#xA;&lt;p&gt;有关 【直接拉取源码部署】 的具体操作步骤请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/wiki/%E7%9B%B4%E6%8E%A5%E6%8B%89%E5%8F%96%E6%BA%90%E7%A0%81%E9%83%A8%E7%BD%B2&#34;&gt;此处&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;遇到任何问题或 Bug 欢迎提 &lt;a href=&#34;https://github.com/luolongfei/freenom/issues&#34;&gt;issue&lt;/a&gt; （请按模板格式提&lt;code&gt;issue&lt;/code&gt;，以便我快速复现你的问题，否则问题会被忽略）， 如果&lt;code&gt;Freenom&lt;/code&gt; 改变算法导致此项目失效，请提 &lt;a href=&#34;https://github.com/luolongfei/freenom/issues&#34;&gt;issue&lt;/a&gt; 告知，我会及时修复，本项目长期维护。 欢迎&lt;code&gt;star&lt;/code&gt;~&lt;/p&gt; &#xA;&lt;h3&gt;📋 赞助名单 Donation List&lt;/h3&gt; &#xA;&lt;p&gt;非常感谢「 &lt;a href=&#34;https://github.com/luolongfei/freenom/wiki/Donation-List&#34;&gt;这些用户&lt;/a&gt; 」对本项目的赞助支持！&lt;/p&gt; &#xA;&lt;h3&gt;❤ 赞助 Donation&lt;/h3&gt; &#xA;&lt;p&gt;如果你觉得本项目对你有帮助，请考虑赞助本项目，以激励我投入更多的时间进行维护与开发。 If you find this project helpful, please consider supporting the project going forward. Your support is greatly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/X7X8CA7S1&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PayPal: &lt;a href=&#34;https://www.paypal.me/mybsdc&#34;&gt;https://www.paypal.me/mybsdc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Every time you spend money, you&#39;re casting a vote for the kind of world you want. -- Anna Lappe&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/31/1394at.png&#34; alt=&#34;pay&#34; title=&#34;Donation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/31/13P8cF.jpg&#34; alt=&#34;每一次你花的钱都是在为你想要的世界投票。&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;你的&lt;code&gt;star&lt;/code&gt;或者&lt;code&gt;赞助&lt;/code&gt;是我长期维护此项目的动力所在，由衷感谢每一位支持者，“每一次你花的钱都是在为你想要的世界投票”。 另外，将本项目推荐给更多的人，也是一种支持的方式，用的人越多更新的动力越足。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🪓 信仰&lt;/h3&gt; &#xA;&lt;p&gt;相信未来，保持“理智”。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;认真是我们参与这个社会的方式，认真是我们改变这个社会的方式。 ——李志&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/03/10/bhP7FO.jpg&#34; alt=&#34;南京市民李先生&#34; title=&#34;南京市民李先生&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🌚 作者&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;主程序以及框架：&lt;a href=&#34;https://github.com/luolongfei&#34;&gt;@luolongfei&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;英文版文档：&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#&#34;&gt;@肖阿姨&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;💖 所有贡献者&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/luolongfei/freenom/graphs/contributors&#34;&gt; &lt;img alt=&#34;All Contributors&#34; src=&#34;https://contrib.rocks/image?repo=luolongfei/freenom&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/anjumrafidofficial&#34;&gt;@anjumrafidofficial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;📝 TODO List&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持交互式安装，免去手动修改配置的繁琐操作&lt;/li&gt; &#xA; &lt;li&gt;支持自动升级&lt;/li&gt; &#xA; &lt;li&gt;多个账户的续期结果通知合并为同一条消息&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📰 更新日志&lt;/h3&gt; &#xA;&lt;p&gt;此处只含最新版本的更新日志，完整的日志记录请参考 &lt;a href=&#34;https://github.com/luolongfei/freenom/raw/main/Changelog.md&#34;&gt;Changelog.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/luolongfei/freenom/main/#&#34;&gt;Unreleased&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;解决 企业微信 因送信内容过长被截断问题&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/luolongfei/freenom/releases/tag/v0.5&#34;&gt;v0.5&lt;/a&gt; - 2022-05-15&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;增加支持 华为云函数、Railway 等部署方式&lt;/li&gt; &#xA; &lt;li&gt;支持在消息中显示服务器信息，该功能默认关闭&lt;/li&gt; &#xA; &lt;li&gt;优化部分代码逻辑&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🎉 鸣谢&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;项目依赖 &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/&#34;&gt;PHPMailer&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/guzzle/guzzle&#34;&gt;guzzle&lt;/a&gt; 等第三方库&lt;/li&gt; &#xA; &lt;li&gt;本项目 Docker 相关文档有参考 &lt;a href=&#34;https://teddysun.com/569.html&#34;&gt;秋水逸冰&lt;/a&gt; 的文章&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anjumrafidofficial&#34;&gt;@anjumrafidofficial&lt;/a&gt; 完善英文版邮件内容&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🥝 开源协议&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/mit-license.php&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>