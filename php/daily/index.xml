<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-29T01:39:04Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>abbasudo/laravel-purity</title>
    <updated>2023-10-29T01:39:04Z</updated>
    <id>tag:github.com,2023-10-29:/abbasudo/laravel-purity</id>
    <link href="https://github.com/abbasudo/laravel-purity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An elegant way to filter and sort queries in Laravel&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/abbasudo/laravel-purity/raw/master/art/purity-logo.png&#34; alt=&#34;Social Card of Laravel Purity&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Elegant way to filter and sort queries in Laravel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/abbasudo/laravel-purity/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/abbasudo/laravel-purity/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/abbasudo/laravel-purity&#34;&gt;&lt;img src=&#34;http://poser.pugx.org/abbasudo/laravel-purity/license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/abbasudo/laravel-purity&#34;&gt;&lt;img src=&#34;http://poser.pugx.org/abbasudo/laravel-purity/v&#34; alt=&#34;Latest Unstable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/abbasudo/laravel-purity&#34;&gt;&lt;img src=&#34;http://poser.pugx.org/abbasudo/laravel-purity/require/php&#34; alt=&#34;PHP Version Require&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/abbasudo/laravel-purity&#34;&gt;&lt;img src=&#34;https://github.styleci.io/repos/603931433/shield&#34; alt=&#34;StyleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![visitors](https://visitor-badge.glitch.me/badge?page_id=abbasudo.laravel-purity)](https://packagist.org/packages/abbasudo/laravel-purity) --&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If you are a front-end developer and want to make queries in an API that uses this package head to the &lt;a href=&#34;https://raw.githubusercontent.com/abbasudo/laravel-purity/master/#queries-and-javascript-examples&#34;&gt;queries&lt;/a&gt; section&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Version 2 changed filter method read more at &lt;a href=&#34;https://raw.githubusercontent.com/abbasudo/laravel-purity/master/#upgrade-guide&#34;&gt;upgrade guide&lt;/a&gt; section&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Laravel Purity is an elegant and efficient filtering and sorting package for Laravel, designed to simplify complex data filtering and sorting logic for eloquent queries. By simply adding &lt;code&gt;filter()&lt;/code&gt; to your Eloquent query, you can add the ability for frontend users to apply filters based on URL query string parameters like a breeze.&lt;/p&gt; &#xA;&lt;p&gt;Features :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Livewire support (added in v2)&lt;/li&gt; &#xA; &lt;li&gt;Rename and restrict fields (added in v2)&lt;/li&gt; &#xA; &lt;li&gt;Various filter methods&lt;/li&gt; &#xA; &lt;li&gt;Simple installation and usage&lt;/li&gt; &#xA; &lt;li&gt;Filter by relation columns&lt;/li&gt; &#xA; &lt;li&gt;Custom filters&lt;/li&gt; &#xA; &lt;li&gt;Multi-column sort&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Laravel Purity is not only developer-friendly but also front-end developer-friendly. Frontend developers can effortlessly use filtering and sorting of the APIs by using the popular &lt;a href=&#34;https://www.npmjs.com/package/qs&#34;&gt;JavaScript qs&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;The way this package handles filters is inspired by strapi&#39;s &lt;a href=&#34;https://docs.strapi.io/dev-docs/api/rest/filters-locale-publication#filtering&#34;&gt;filter&lt;/a&gt; and &lt;a href=&#34;https://docs.strapi.io/dev-docs/api/rest/sort-pagination#sorting&#34;&gt;sort&lt;/a&gt; functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;h3&gt;Video&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/nvCTEKvRdec&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/86796762/227452155-3644f431-a8ce-41bc-ad4b-95383a3209fa.png&#34; alt=&#34;youtube&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@abbasudo/the-correct-way-of-adding-filters-to-laravel-10-bb9957c2ddc6&#34;&gt;The correct way of adding filters to Laravel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/abbasudo/add-filter-to-your-laravel-10-app-4f5f&#34;&gt;Add filter to your laravel app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@abbasudo/enable-filtering-in-your-laravel-app-with-ease-a63f79b5e452&#34;&gt;Enable filtering queries in your laravel 10 app with ease&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the package via composer by this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer require abbasudo/laravel-purity &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get configs (&lt;code&gt;configs/purity.php&lt;/code&gt;) file to customize the package&#39;s behavior by this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;php artisan vendor:publish --tag=purity &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Filters&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;Filterable&lt;/code&gt; trait to your model to get filters functionalities.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Abbasudo\Purity\Traits\Filterable;&#xA;&#xA;class Post extends Model&#xA;{&#xA;    use Filterable;&#xA;    &#xA;    //&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now add &lt;code&gt;filter()&lt;/code&gt; to your model eloquent query in the controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use App\Models\Post;&#xA;&#xA;class PostController extends Controller&#xA;{&#xA;    public function index()&#xA;    {&#xA;        return Post::filter()-&amp;gt;get();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, it gives access to all filters available. here is the list of &lt;a href=&#34;https://raw.githubusercontent.com/abbasudo/laravel-purity/master/#available-filters&#34;&gt;available filters&lt;/a&gt;. if you want to explicitly specify which filters to use in this call head to &lt;a href=&#34;https://raw.githubusercontent.com/abbasudo/laravel-purity/master/#restrict-filters&#34;&gt;restrict filters&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h3&gt;Sort&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;Sortable&lt;/code&gt; trait to your model to get sorts functionalities.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Abbasudo\Purity\Traits\Sortable;&#xA;&#xA;class Post extends Model&#xA;{&#xA;    use Sortable;&#xA;    &#xA;    //&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now add &lt;code&gt;sort()&lt;/code&gt; to your eloquent query in the controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use App\Models\Post;&#xA;&#xA;class PostController extends Controller&#xA;{&#xA;    public function index()&#xA;    {&#xA;        return Post::sort()-&amp;gt;get();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now sort can be applied as instructed in &lt;a href=&#34;https://raw.githubusercontent.com/abbasudo/laravel-purity/master/#usage-examples&#34;&gt;sort usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Allowed Fields&lt;/h3&gt; &#xA;&lt;p&gt;By default, purity allows every database column and all model relations to be filtered. you can overwrite the allowed columns as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// App\Models\User&#xA;&#xA;protected $filterFields = [&#xA;  &#39;email&#39;,&#xA;  &#39;mobile&#39;,&#xA;  &#39;posts&#39;, // relation&#xA;];&#xA;    &#xA;protected $sortFields = [&#xA;  &#39;name&#39;,&#xA;  &#39;mobile&#39;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;any field other than email, mobile, or posts will be rejected when filtering.&lt;/p&gt; &#xA;&lt;h4&gt;Overwrite Allowed Fields&lt;/h4&gt; &#xA;&lt;p&gt;to overwrite allowed fields in the controller add &lt;code&gt;filterFields&lt;/code&gt; or &lt;code&gt;sortFields&lt;/code&gt; before calling filter or sort method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::filterFields(&#39;title&#39;, &#39;created_at&#39;)-&amp;gt;filter()-&amp;gt;get();&#xA;&#xA;Post::sortFields(&#39;created_at&#39;, &#39;updated_at&#39;)-&amp;gt;sort()-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; filterFields and sortFields will overwrite fields defined in the model.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Rename Fields&lt;/h3&gt; &#xA;&lt;p&gt;To rename fields simply add a value to fields defined in &lt;code&gt;$filterFields&lt;/code&gt; and &lt;code&gt;$sortFields&lt;/code&gt; arrays:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// App\Models\User&#xA;&#xA;protected $filterFields = [&#xA;  &#39;email&#39;,&#xA;  &#39;mobile&#39; =&amp;gt; &#39;phone&#39;,&#xA;  &#39;posts&#39;  =&amp;gt; &#39;writing&#39;, // relation&#xA;];&#xA;    &#xA;protected $sortFields = [&#xA;  &#39;name&#39;,&#xA;  &#39;mobile&#39; =&amp;gt; &#39;phone&#39;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the client should send phone in order to filter by mobile.&lt;/p&gt; &#xA;&lt;h4&gt;Overwrite Renamed Fields&lt;/h4&gt; &#xA;&lt;p&gt;to overwrite renamed fields in the controller you pass renamed fields to &lt;code&gt;filterFields&lt;/code&gt; and &lt;code&gt;sortFields&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::filterFields([&#39;title&#39;, &#39;created_at&#39; =&amp;gt; &#39;published_date&#39;])-&amp;gt;filter()-&amp;gt;get();&#xA;&#xA;Post::sortFields([&#xA;    &#39;created_at&#39; =&amp;gt; &#39;published_date&#39;,&#xA;    &#39;updated_at&#39;&#xA;  ])-&amp;gt;sort()-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; filterFields and sortFields will overwrite fields defined in the model.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Restrict Filters&lt;/h3&gt; &#xA;&lt;p&gt;purity validates allowed filters in the following order of priority:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filters specified in the &lt;code&gt;filters&lt;/code&gt; configuration in the &lt;code&gt;configs/purity.php&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// configs/purity.php&#xA;&#39;filters&#39; =&amp;gt; [&#xA;  EqualFilter::class,&#xA;  InFilter::class,&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filters declared in the &lt;code&gt;$filters&lt;/code&gt; variable in the model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;note that, $filters will overwrite configs filters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// App\Models\Post&#xA;&#xA;private array $filters = [&#xA;  &#39;$eq&#39;,&#xA;  &#39;$in&#39;,&#xA;];&#xA;    &#xA;// or&#xA;    &#xA;private array $filters = [&#xA;  EqualFilter::class,&#xA;  InFilter::class,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filters passed as an array to the &lt;code&gt;filterBy()&lt;/code&gt; function.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;note that, filterBy will overwrite all other defined filters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::filterBy(&#39;$eq&#39;, &#39;$in&#39;)-&amp;gt;filter()-&amp;gt;get();&#xA;// or&#xA;Post::filterBy(EqualFilter::class, InFilter::class)-&amp;gt;filter()-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changing Params Source&lt;/h3&gt; &#xA;&lt;p&gt;By Default, purity gets params from filters index in query params, overwrite this by passing params directly to filter or sort functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::filter($params)-&amp;gt;get();&#xA;&#xA;Post::filter([&#xA;            &#39;title&#39; =&amp;gt; [&#39;$eq&#39; =&amp;gt; &#39;good post&#39;]&#xA;        ])-&amp;gt;get();&#xA;&#xA;Post::sort([&#xA;            &#39;title&#39; =&amp;gt; [&#39;$in&#39; =&amp;gt; [1, 2, 3]]&#xA;        ])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Livewire&lt;/h3&gt; &#xA;&lt;p&gt;to add filter to your livewire app, first define &lt;code&gt;$filters&lt;/code&gt; variable in your component and pass it to filter or sort method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// component&#xA;&#xA;#[Url]&#xA;public $filters = [&#xA;  &#39;title&#39; =&amp;gt; [],&#xA;];&#xA;&#xA;public function render()&#xA;{&#xA;  $transactions = Transaction::filter($this-&amp;gt;filters)-&amp;gt;get();&#xA;&#xA;  return view(&#39;livewire.transacrion-table&#39;,compact(&#39;transactions&#39;));&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then bind the variable in your blade template.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;&amp;lt;!-- in blade template --&amp;gt;&#xA;&#xA;&amp;lt;input type=&#34;text&#34; wire:model.live=&#34;filters.title.$eq&#34; placeholder=&#34;title&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;read more in &lt;a href=&#34;https://livewire.laravel.com/docs/url&#34;&gt;livewire docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom Filters&lt;/h3&gt; &#xA;&lt;p&gt;Create a custom filter class by this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;php artisan make:filter EqualFilter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will generate a filter class in &lt;code&gt;Filters&lt;/code&gt; directory. By default, all classes defined in &lt;code&gt;Filters&lt;/code&gt; directory are loaded into the package. you can change scan folder location in purity config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// configs/purity.php&#xA;&#xA;&#39;custom_filters_location&#39; =&amp;gt; app_path(&#39;Filters&#39;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Silent Exceptions&lt;/h3&gt; &#xA;&lt;p&gt;By default, purity silences its own exceptions. to change that behavior change the &lt;code&gt;silent&lt;/code&gt; index to &lt;code&gt;false&lt;/code&gt; in the config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// configs/purity.php&#xA;&#xA;&#39;silent&#39; =&amp;gt; false,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Queries and javascript examples&lt;/h2&gt; &#xA;&lt;p&gt;This section is a guide for front-end developers who want to use an API that uses Laravel Purity.&lt;/p&gt; &#xA;&lt;h3&gt;Available Filters&lt;/h3&gt; &#xA;&lt;p&gt;Queries can accept a filters parameter with the following syntax:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GET /api/posts?filters[field][operator]=value&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;By Default&lt;/strong&gt; the following operators are available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$eq&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Equal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$eqc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Equal (case-sensitive)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ne&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not equal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$lt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Less than&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$lte&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Less than or equal to&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$gt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Greater than&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$gte&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Greater than or equal to&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$in&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Included in an array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$notIn&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not included in an array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$contains&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Contains&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$notContains&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Does not contain&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$containsc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Contains (case-sensitive)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$notContainsc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Does not contain (case-sensitive)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Is null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$notNull&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Is not null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$between&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Is between&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$startsWith&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Starts with&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$startsWithc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Starts with (case-sensitive)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$endsWith&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ends with&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$endsWithc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ends with (case-sensitive)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$or&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Joins the filters in an &#34;or&#34; expression&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$and&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Joins the filters in an &#34;and&#34; expression&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Simple Filtering&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; In javascript use &lt;a href=&#34;https://www.npmjs.com/package/qs&#34;&gt;qs&lt;/a&gt; directly to generate complex queries instead of creating them manually. Examples in this documentation showcase how you can use &lt;code&gt;qs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Find users having &#39;John&#39; as their first name&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GET /api/users?filters[name][$eq]=John&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const qs = require(&#39;qs&#39;);&#xA;const query = qs.stringify({&#xA;filters: {&#xA;  username: {&#xA;    $eq: &#39;John&#39;,&#xA;  },&#xA;},&#xA;}, {&#xA;encodeValuesOnly: true, // prettify URL&#xA;});&#xA;&#xA;await request(`/api/users?${query}`);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find multiple restaurants with ids 3, 6, 8&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GET /api/restaurants?filters[id][$in][0]=3&amp;amp;filters[id][$in][1]=6&amp;amp;filters[id][$in][2]=8&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const qs = require(&#39;qs&#39;);&#xA;const query = qs.stringify({&#xA;filters: {&#xA;  id: {&#xA;    $in: [3, 6, 8],&#xA;  },&#xA;},&#xA;}, {&#xA;encodeValuesOnly: true, // prettify URL&#xA;});&#xA;&#xA;await request(`/api/restaurants?${query}`);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Complex Filtering&lt;/h4&gt; &#xA;&lt;p&gt;Complex filtering is combining multiple filters using advanced methods such as combining &lt;code&gt;$and&lt;/code&gt; &amp;amp; &lt;code&gt;$or&lt;/code&gt;. This allows for more flexibility to request exactly the data needed.&lt;/p&gt; &#xA;&lt;p&gt;Find books with 2 possible dates and a specific author.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GET /api/books?filters[$or][0][date][$eq]=2020-01-01&amp;amp;filters[$or][1][date][$eq]=2020-01-02&amp;amp;filters[author][name][$eq]=Kai%20doe&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const qs = require(&#39;qs&#39;);&#xA;const query = qs.stringify({&#xA;  filters: {&#xA;    $or: [&#xA;      {&#xA;        date: {&#xA;          $eq: &#39;2020-01-01&#39;,&#xA;        },&#xA;      },&#xA;      {&#xA;        date: {&#xA;          $eq: &#39;2020-01-02&#39;,&#xA;        },&#xA;      },&#xA;    ],&#xA;    author: {&#xA;      name: {&#xA;        $eq: &#39;Kai doe&#39;,&#xA;      },&#xA;    },&#xA;  },&#xA;}, {&#xA;  encodeValuesOnly: true, // prettify URL&#xA;});&#xA;&#xA;await request(`/api/books?${query}`);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Deep Filtering&lt;/h4&gt; &#xA;&lt;p&gt;Deep filtering is filtering on a relation&#39;s fields.&lt;/p&gt; &#xA;&lt;p&gt;Find restaurants owned by a chef who belongs to a 5-star restaurant&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GET /api/restaurants?filters[chef][restaurants][stars][$eq]=5&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const qs = require(&#39;qs&#39;);&#xA;const query = qs.stringify({&#xA;  filters: {&#xA;    chef: {&#xA;      restaurants: {&#xA;        stars: {&#xA;          $eq: 5,&#xA;        },&#xA;      },&#xA;    },&#xA;  },&#xA;}, {&#xA;  encodeValuesOnly: true, // prettify URL&#xA;});&#xA;&#xA;await request(`/api/restaurants?${query}`);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Apply Sort&lt;/h3&gt; &#xA;&lt;p&gt;Queries can accept a sort parameter that allows sorting on one or multiple fields with the following syntax&#39;s:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GET /api/:pluralApiId?sort=value&lt;/code&gt; to sort on 1 field&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GET /api/:pluralApiId?sort[0]=value1&amp;amp;sort[1]=value2&lt;/code&gt; to sort on multiple fields (e.g. on 2 fields)&lt;/p&gt; &#xA;&lt;p&gt;The sorting order can be defined as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:asc&lt;/code&gt; for ascending order (default order, can be omitted)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:desc&lt;/code&gt; for descending order.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Usage Examples&lt;/h4&gt; &#xA;&lt;p&gt;Sort using 2 fields&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GET /api/articles?sort[0]=title&amp;amp;sort[1]=slug&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const qs = require(&#39;qs&#39;);&#xA;const query = qs.stringify({&#xA;  sort: [&#39;title&#39;, &#39;slug&#39;],&#xA;}, {&#xA;  encodeValuesOnly: true, // prettify URL&#xA;});&#xA;&#xA;await request(`/api/articles?${query}`);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sort using 2 fields and set the order&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GET /api/articles?sort[0]=title%3Aasc&amp;amp;sort[1]=slug%3Adesc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const qs = require(&#39;qs&#39;);&#xA;const query = qs.stringify({&#xA;  sort: [&#39;title:asc&#39;, &#39;slug:desc&#39;],&#xA;}, {&#xA;  encodeValuesOnly: true, // prettify URL&#xA;});&#xA;&#xA;await request(`/api/articles?${query}`);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrade Guide&lt;/h2&gt; &#xA;&lt;h3&gt;Version 2&lt;/h3&gt; &#xA;&lt;p&gt;changed filter function arguments. filter function no longer accepts filter methods, instead, filter function now accepts filter source as mentioned in &lt;a href=&#34;https://raw.githubusercontent.com/abbasudo/laravel-purity/master/#custom-filters&#34;&gt;Custom Filters&lt;/a&gt; section. to specify allowed filter methods use filterBy as mentioned in &lt;a href=&#34;https://raw.githubusercontent.com/abbasudo/laravel-purity/master/#restrict-filters&#34;&gt;Restrict Filters&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Purity is Licensed under The MIT License (MIT). Please see &lt;a href=&#34;https://github.com/abbasudo/laravel-purity/raw/master/LICENSE&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>