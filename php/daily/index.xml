<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-14T01:34:45Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ThingEngineer/PHP-MySQLi-Database-Class</title>
    <updated>2023-09-14T01:34:45Z</updated>
    <id>tag:github.com,2023-09-14:/ThingEngineer/PHP-MySQLi-Database-Class</id>
    <link href="https://github.com/ThingEngineer/PHP-MySQLi-Database-Class" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wrapper for a PHP MySQL class, which utilizes MySQLi and prepared statements.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;MysqliDb -- Simple MySQLi wrapper and object mapper with prepared statements&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#objects-mapping&#34;&gt;Objects mapping&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#insert-query&#34;&gt;Insert Query&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#update-query&#34;&gt;Update Query&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#select-query&#34;&gt;Select Query&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#delete-query&#34;&gt;Delete Query&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#insert-data&#34;&gt;Insert Data&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#insert-xml&#34;&gt;Insert XML&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#pagination&#34;&gt;Pagination&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#running-raw-sql-queries&#34;&gt;Running raw SQL queries&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#query-keywords&#34;&gt;Query Keywords&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#where--having-methods&#34;&gt;Where Conditions&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#ordering-method&#34;&gt;Order Conditions&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#grouping-method&#34;&gt;Group Conditions&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#properties-sharing&#34;&gt;Properties Sharing&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#join-method&#34;&gt;Joining Tables&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#subqueries&#34;&gt;Subqueries&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#exists--not-exists-condition&#34;&gt;EXISTS / NOT EXISTS condition&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#has-method&#34;&gt;Has method&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#helper-methods&#34;&gt;Helper Methods&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#transaction-helpers&#34;&gt;Transaction Helpers&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#error-helpers&#34;&gt;Error Helpers&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/#table-locking&#34;&gt;Table Locking&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support Me&lt;/h2&gt; &#xA;&lt;p&gt;This software is developed during my free time and I will be glad if somebody will support me.&lt;/p&gt; &#xA;&lt;p&gt;Everyone&#39;s time should be valuable, so please consider donating.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=a%2ebutenka%40gmail%2ecom&amp;amp;lc=DO&amp;amp;item_name=mysqlidb&amp;amp;currency_code=USD&amp;amp;bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted&#34;&gt;Donate with paypal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To utilize this class, first import MysqliDb.php into your project, and require it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once (&#39;MysqliDb.php&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation with composer&lt;/h3&gt; &#xA;&lt;p&gt;It is also possible to install library via composer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require thingengineer/mysqli-database-class:dev-master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;Simple initialization with utf8 charset set by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db = new MysqliDb (&#39;host&#39;, &#39;username&#39;, &#39;password&#39;, &#39;databaseName&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Advanced initialization:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db = new MysqliDb (Array (&#xA;                &#39;host&#39; =&amp;gt; &#39;host&#39;,&#xA;                &#39;username&#39; =&amp;gt; &#39;username&#39;, &#xA;                &#39;password&#39; =&amp;gt; &#39;password&#39;,&#xA;                &#39;db&#39;=&amp;gt; &#39;databaseName&#39;,&#xA;                &#39;port&#39; =&amp;gt; 3306,&#xA;                &#39;prefix&#39; =&amp;gt; &#39;my_&#39;,&#xA;                &#39;charset&#39; =&amp;gt; &#39;utf8&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;table prefix, port and database charset params are optional. If no charset should be set charset, set it to null&lt;/p&gt; &#xA;&lt;p&gt;Also it is possible to reuse already connected mysqli object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$mysqli = new mysqli (&#39;host&#39;, &#39;username&#39;, &#39;password&#39;, &#39;databaseName&#39;);&#xA;$db = new MysqliDb ($mysqli);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no table prefix were set during object creation its possible to set it later with a separate call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;setPrefix (&#39;my_&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If connection to mysql will be dropped Mysqlidb will try to automatically reconnect to the database once. To disable this behavoir use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;autoReconnect = false;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to get already created mysqliDb object from another class or function use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    function init () {&#xA;        // db staying private here&#xA;        $db = new MysqliDb (&#39;host&#39;, &#39;username&#39;, &#39;password&#39;, &#39;databaseName&#39;);&#xA;    }&#xA;    ...&#xA;    function myfunc () {&#xA;        // obtain db object created in init  ()&#xA;        $db = MysqliDb::getInstance();&#xA;        ...&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple database connection&lt;/h3&gt; &#xA;&lt;p&gt;If you need to connect to multiple databases use following method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;addConnection(&#39;slave&#39;, Array (&#xA;                &#39;host&#39; =&amp;gt; &#39;host&#39;,&#xA;                &#39;username&#39; =&amp;gt; &#39;username&#39;,&#xA;                &#39;password&#39; =&amp;gt; &#39;password&#39;,&#xA;                &#39;db&#39;=&amp;gt; &#39;databaseName&#39;,&#xA;                &#39;port&#39; =&amp;gt; 3306,&#xA;                &#39;prefix&#39; =&amp;gt; &#39;my_&#39;,&#xA;                &#39;charset&#39; =&amp;gt; &#39;utf8&#39;)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To select database use connection() method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = $db-&amp;gt;connection(&#39;slave&#39;)-&amp;gt;get(&#39;users&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Objects mapping&lt;/h3&gt; &#xA;&lt;p&gt;dbObject.php is an object mapping library built on top of mysqliDb to provide model representation functionality. See &lt;a href=&#34;https://raw.githubusercontent.com/ThingEngineer/PHP-MySQLi-Database-Class/master/dbObject.md&#34;&gt;dbObject manual for more information&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Insert Query&lt;/h3&gt; &#xA;&lt;p&gt;Simple example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$data = Array (&#34;login&#34; =&amp;gt; &#34;admin&#34;,&#xA;               &#34;firstName&#34; =&amp;gt; &#34;John&#34;,&#xA;               &#34;lastName&#34; =&amp;gt; &#39;Doe&#39;&#xA;);&#xA;$id = $db-&amp;gt;insert (&#39;users&#39;, $data);&#xA;if($id)&#xA;    echo &#39;user was created. Id=&#39; . $id;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Insert with functions use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$data = Array (&#xA;&#x9;&#39;login&#39; =&amp;gt; &#39;admin&#39;,&#xA;    &#39;active&#39; =&amp;gt; true,&#xA;&#x9;&#39;firstName&#39; =&amp;gt; &#39;John&#39;,&#xA;&#x9;&#39;lastName&#39; =&amp;gt; &#39;Doe&#39;,&#xA;&#x9;&#39;password&#39; =&amp;gt; $db-&amp;gt;func(&#39;SHA1(?)&#39;,Array (&#34;secretpassword+salt&#34;)),&#xA;&#x9;// password = SHA1(&#39;secretpassword+salt&#39;)&#xA;&#x9;&#39;createdAt&#39; =&amp;gt; $db-&amp;gt;now(),&#xA;&#x9;// createdAt = NOW()&#xA;&#x9;&#39;expires&#39; =&amp;gt; $db-&amp;gt;now(&#39;+1Y&#39;)&#xA;&#x9;// expires = NOW() + interval 1 year&#xA;&#x9;// Supported intervals [s]econd, [m]inute, [h]hour, [d]day, [M]onth, [Y]ear&#xA;);&#xA;&#xA;$id = $db-&amp;gt;insert (&#39;users&#39;, $data);&#xA;if ($id)&#xA;    echo &#39;user was created. Id=&#39; . $id;&#xA;else&#xA;    echo &#39;insert failed: &#39; . $db-&amp;gt;getLastError();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Insert with on duplicate key update&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$data = Array (&#34;login&#34; =&amp;gt; &#34;admin&#34;,&#xA;               &#34;firstName&#34; =&amp;gt; &#34;John&#34;,&#xA;               &#34;lastName&#34; =&amp;gt; &#39;Doe&#39;,&#xA;               &#34;createdAt&#34; =&amp;gt; $db-&amp;gt;now(),&#xA;               &#34;updatedAt&#34; =&amp;gt; $db-&amp;gt;now(),&#xA;);&#xA;$updateColumns = Array (&#34;updatedAt&#34;);&#xA;$lastInsertId = &#34;id&#34;;&#xA;$db-&amp;gt;onDuplicate($updateColumns, $lastInsertId);&#xA;$id = $db-&amp;gt;insert (&#39;users&#39;, $data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Insert multiple datasets at once&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$data = Array(&#xA;    Array (&#34;login&#34; =&amp;gt; &#34;admin&#34;,&#xA;        &#34;firstName&#34; =&amp;gt; &#34;John&#34;,&#xA;        &#34;lastName&#34; =&amp;gt; &#39;Doe&#39;&#xA;    ),&#xA;    Array (&#34;login&#34; =&amp;gt; &#34;other&#34;,&#xA;        &#34;firstName&#34; =&amp;gt; &#34;Another&#34;,&#xA;        &#34;lastName&#34; =&amp;gt; &#39;User&#39;,&#xA;        &#34;password&#34; =&amp;gt; &#34;very_cool_hash&#34;&#xA;    )&#xA;);&#xA;$ids = $db-&amp;gt;insertMulti(&#39;users&#39;, $data);&#xA;if(!$ids) {&#xA;    echo &#39;insert failed: &#39; . $db-&amp;gt;getLastError();&#xA;} else {&#xA;    echo &#39;new users inserted with following id\&#39;s: &#39; . implode(&#39;, &#39;, $ids);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If all datasets only have the same keys, it can be simplified&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$data = Array(&#xA;    Array (&#34;admin&#34;, &#34;John&#34;, &#34;Doe&#34;),&#xA;    Array (&#34;other&#34;, &#34;Another&#34;, &#34;User&#34;)&#xA;);&#xA;$keys = Array(&#34;login&#34;, &#34;firstName&#34;, &#34;lastName&#34;);&#xA;&#xA;$ids = $db-&amp;gt;insertMulti(&#39;users&#39;, $data, $keys);&#xA;if(!$ids) {&#xA;    echo &#39;insert failed: &#39; . $db-&amp;gt;getLastError();&#xA;} else {&#xA;    echo &#39;new users inserted with following id\&#39;s: &#39; . implode(&#39;, &#39;, $ids);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Replace Query&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.0/en/replace.html&#34;&gt;Replace()&lt;/a&gt; method implements same API as insert();&lt;/p&gt; &#xA;&lt;h3&gt;Update Query&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$data = Array (&#xA;&#x9;&#39;firstName&#39; =&amp;gt; &#39;Bobby&#39;,&#xA;&#x9;&#39;lastName&#39; =&amp;gt; &#39;Tables&#39;,&#xA;&#x9;&#39;editCount&#39; =&amp;gt; $db-&amp;gt;inc(2),&#xA;&#x9;// editCount = editCount + 2;&#xA;&#x9;&#39;active&#39; =&amp;gt; $db-&amp;gt;not()&#xA;&#x9;// active = !active;&#xA;);&#xA;$db-&amp;gt;where (&#39;id&#39;, 1);&#xA;if ($db-&amp;gt;update (&#39;users&#39;, $data))&#xA;    echo $db-&amp;gt;count . &#39; records were updated&#39;;&#xA;else&#xA;    echo &#39;update failed: &#39; . $db-&amp;gt;getLastError();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;update()&lt;/code&gt; also support limit parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;update (&#39;users&#39;, $data, 10);&#xA;// Gives: UPDATE users SET ... LIMIT 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Select Query&lt;/h3&gt; &#xA;&lt;p&gt;After any select/get function calls amount or returned rows is stored in $count variable&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = $db-&amp;gt;get(&#39;users&#39;); //contains an Array of all users &#xA;$users = $db-&amp;gt;get(&#39;users&#39;, 10); //contains an Array 10 users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or select with custom columns set. Functions also could be used&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$cols = Array (&#34;id&#34;, &#34;name&#34;, &#34;email&#34;);&#xA;$users = $db-&amp;gt;get (&#34;users&#34;, null, $cols);&#xA;if ($db-&amp;gt;count &amp;gt; 0)&#xA;    foreach ($users as $user) { &#xA;        print_r ($user);&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or select just one row&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where (&#34;id&#34;, 1);&#xA;$user = $db-&amp;gt;getOne (&#34;users&#34;);&#xA;echo $user[&#39;id&#39;];&#xA;&#xA;$stats = $db-&amp;gt;getOne (&#34;users&#34;, &#34;sum(id), count(*) as cnt&#34;);&#xA;echo &#34;total &#34;.$stats[&#39;cnt&#39;]. &#34;users found&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or select one column value or function result&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$count = $db-&amp;gt;getValue (&#34;users&#34;, &#34;count(*)&#34;);&#xA;echo &#34;{$count} users found&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;select one column value or function result from multiple rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$logins = $db-&amp;gt;getValue (&#34;users&#34;, &#34;login&#34;, null);&#xA;// select login from users&#xA;$logins = $db-&amp;gt;getValue (&#34;users&#34;, &#34;login&#34;, 5);&#xA;// select login from users limit 5&#xA;foreach ($logins as $login)&#xA;    echo $login;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Insert Data&lt;/h3&gt; &#xA;&lt;p&gt;You can also load .CSV or .XML data into a specific table. To insert .csv data, use the following syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$path_to_file = &#34;/home/john/file.csv&#34;;&#xA;$db-&amp;gt;loadData(&#34;users&#34;, $path_to_file);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will load a .csv file called &lt;strong&gt;file.csv&lt;/strong&gt; in the folder &lt;strong&gt;/home/john/&lt;/strong&gt; (john&#39;s home directory.) You can also attach an optional array of options. Valid options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Array(&#xA;&#x9;&#34;fieldChar&#34; =&amp;gt; &#39;;&#39;, &#x9;// Char which separates the data&#xA;&#x9;&#34;lineChar&#34; =&amp;gt; &#39;\r\n&#39;, &#x9;// Char which separates the lines&#xA;&#x9;&#34;linesToIgnore&#34; =&amp;gt; 1&#x9;// Amount of lines to ignore at the beginning of the import&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attach them using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$options = Array(&#34;fieldChar&#34; =&amp;gt; &#39;;&#39;, &#34;lineChar&#34; =&amp;gt; &#39;\r\n&#39;, &#34;linesToIgnore&#34; =&amp;gt; 1);&#xA;$db-&amp;gt;loadData(&#34;users&#34;, &#34;/home/john/file.csv&#34;, $options);&#xA;// LOAD DATA ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify to &lt;strong&gt;use LOCAL DATA&lt;/strong&gt; instead of &lt;strong&gt;DATA&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$options = Array(&#34;fieldChar&#34; =&amp;gt; &#39;;&#39;, &#34;lineChar&#34; =&amp;gt; &#39;\r\n&#39;, &#34;linesToIgnore&#34; =&amp;gt; 1, &#34;loadDataLocal&#34; =&amp;gt; true);&#xA;$db-&amp;gt;loadData(&#34;users&#34;, &#34;/home/john/file.csv&#34;, $options);&#xA;// LOAD DATA LOCAL ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Insert XML&lt;/h3&gt; &#xA;&lt;p&gt;To load XML data into a table, you can use the method &lt;strong&gt;loadXML&lt;/strong&gt;. The syntax is smillar to the loadData syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$path_to_file = &#34;/home/john/file.xml&#34;;&#xA;$db-&amp;gt;loadXML(&#34;users&#34;, $path_to_file);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add optional parameters. Valid parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Array(&#xA;&#x9;&#34;linesToIgnore&#34; =&amp;gt; 0,&#x9;&#x9;// Amount of lines / rows to ignore at the beginning of the import&#xA;&#x9;&#34;rowTag&#34;&#x9;=&amp;gt; &#34;&amp;lt;user&amp;gt;&#34;&#x9;// The tag which marks the beginning of an entry&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$options = Array(&#34;linesToIgnore&#34; =&amp;gt; 0, &#34;rowTag&#34;&#x9;=&amp;gt; &#34;&amp;lt;user&amp;gt;&#34;):&#xA;$path_to_file = &#34;/home/john/file.xml&#34;;&#xA;$db-&amp;gt;loadXML(&#34;users&#34;, $path_to_file, $options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pagination&lt;/h3&gt; &#xA;&lt;p&gt;Use paginate() instead of get() to fetch paginated result&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page = 1;&#xA;// set page limit to 2 results per page. 20 by default&#xA;$db-&amp;gt;pageLimit = 2;&#xA;$products = $db-&amp;gt;arraybuilder()-&amp;gt;paginate(&#34;products&#34;, $page);&#xA;echo &#34;showing $page out of &#34; . $db-&amp;gt;totalPages;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Result transformation / map&lt;/h3&gt; &#xA;&lt;p&gt;Instead of getting an pure array of results its possible to get result in an associative array with a needed key. If only 2 fields to fetch will be set in get(), method will return result in array($k =&amp;gt; $v) and array ($k =&amp;gt; array ($v, $v)) in rest of the cases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = $db-&amp;gt;map (&#39;login&#39;)-&amp;gt;ObjectBuilder()-&amp;gt;getOne (&#39;users&#39;, &#39;login, id&#39;);&#xA;Array&#xA;(&#xA;    [user1] =&amp;gt; 1&#xA;)&#xA;&#xA;$user = $db-&amp;gt;map (&#39;login&#39;)-&amp;gt;ObjectBuilder()-&amp;gt;getOne (&#39;users&#39;, &#39;id,login,createdAt&#39;);&#xA;Array&#xA;(&#xA;    [user1] =&amp;gt; stdClass Object&#xA;        (&#xA;            [id] =&amp;gt; 1&#xA;            [login] =&amp;gt; user1&#xA;            [createdAt] =&amp;gt; 2015-10-22 22:27:53&#xA;        )&#xA;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defining a return type&lt;/h3&gt; &#xA;&lt;p&gt;MysqliDb can return result in 3 different formats: Array of Array, Array of Objects and a Json string. To select a return type use ArrayBuilder(), ObjectBuilder() and JsonBuilder() methods. Note that ArrayBuilder() is a default return type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Array return type&#xA;$u= $db-&amp;gt;getOne(&#34;users&#34;);&#xA;echo $u[&#39;login&#39;];&#xA;// Object return type&#xA;$u = $db-&amp;gt;ObjectBuilder()-&amp;gt;getOne(&#34;users&#34;);&#xA;echo $u-&amp;gt;login;&#xA;// Json return type&#xA;$json = $db-&amp;gt;JsonBuilder()-&amp;gt;getOne(&#34;users&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running raw SQL queries&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = $db-&amp;gt;rawQuery(&#39;SELECT * from users where id &amp;gt;= ?&#39;, Array (10));&#xA;foreach ($users as $user) {&#xA;    print_r ($user);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid long if checks there are couple helper functions to work with raw query select results:&lt;/p&gt; &#xA;&lt;p&gt;Get 1 row of results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = $db-&amp;gt;rawQueryOne(&#39;SELECT * from users where id=?&#39;, Array(10));&#xA;echo $user[&#39;login&#39;];&#xA;// Object return type&#xA;$user = $db-&amp;gt;ObjectBuilder()-&amp;gt;rawQueryOne(&#39;SELECT * from users where id=?&#39;, Array(10));&#xA;echo $user-&amp;gt;login;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get 1 column value as a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$password = $db-&amp;gt;rawQueryValue(&#39;SELECT password from users where id=? limit 1&#39;, Array(10));&#xA;echo &#34;Password is {$password}&#34;;&#xA;NOTE: for a rawQueryValue() to return string instead of an array &#39;limit 1&#39; should be added to the end of the query.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get 1 column value from multiple rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$logins = $db-&amp;gt;rawQueryValue(&#39;SELECT login from users limit 10&#39;);&#xA;foreach ($logins as $login)&#xA;    echo $login;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More advanced examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$params = Array(1, &#39;admin&#39;);&#xA;$users = $db-&amp;gt;rawQuery(&#34;SELECT id, firstName, lastName FROM users WHERE id = ? AND login = ?&#34;, $params);&#xA;print_r($users); // contains Array of returned rows&#xA;&#xA;// will handle any SQL query&#xA;$params = Array(10, 1, 10, 11, 2, 10);&#xA;$q = &#34;(&#xA;    SELECT a FROM t1&#xA;        WHERE a = ? AND B = ?&#xA;        ORDER BY a LIMIT ?&#xA;) UNION (&#xA;    SELECT a FROM t2 &#xA;        WHERE a = ? AND B = ?&#xA;        ORDER BY a LIMIT ?&#xA;)&#34;;&#xA;$results = $db-&amp;gt;rawQuery ($q, $params);&#xA;print_r ($results); // contains Array of returned rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Where / Having Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;where()&lt;/code&gt;, &lt;code&gt;orWhere()&lt;/code&gt;, &lt;code&gt;having()&lt;/code&gt; and &lt;code&gt;orHaving()&lt;/code&gt; methods allows you to specify where and having conditions of the query. All conditions supported by where() are supported by having() as well.&lt;/p&gt; &#xA;&lt;p&gt;WARNING: In order to use column to column comparisons only raw where conditions should be used as column name or functions cannot be passed as a bind variable.&lt;/p&gt; &#xA;&lt;p&gt;Regular == operator with variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where (&#39;id&#39;, 1);&#xA;$db-&amp;gt;where (&#39;login&#39;, &#39;admin&#39;);&#xA;$results = $db-&amp;gt;get (&#39;users&#39;);&#xA;// Gives: SELECT * FROM users WHERE id=1 AND login=&#39;admin&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where (&#39;id&#39;, 1);&#xA;$db-&amp;gt;having (&#39;login&#39;, &#39;admin&#39;);&#xA;$results = $db-&amp;gt;get (&#39;users&#39;);&#xA;// Gives: SELECT * FROM users WHERE id=1 HAVING login=&#39;admin&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regular == operator with column to column comparison:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// WRONG&#xA;$db-&amp;gt;where (&#39;lastLogin&#39;, &#39;createdAt&#39;);&#xA;// CORRECT&#xA;$db-&amp;gt;where (&#39;lastLogin = createdAt&#39;);&#xA;$results = $db-&amp;gt;get (&#39;users&#39;);&#xA;// Gives: SELECT * FROM users WHERE lastLogin = createdAt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where (&#39;id&#39;, 50, &#34;&amp;gt;=&#34;);&#xA;// or $db-&amp;gt;where (&#39;id&#39;, Array (&#39;&amp;gt;=&#39; =&amp;gt; 50));&#xA;$results = $db-&amp;gt;get (&#39;users&#39;);&#xA;// Gives: SELECT * FROM users WHERE id &amp;gt;= 50;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;BETWEEN / NOT BETWEEN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where(&#39;id&#39;, Array (4, 20), &#39;BETWEEN&#39;);&#xA;// or $db-&amp;gt;where (&#39;id&#39;, Array (&#39;BETWEEN&#39; =&amp;gt; Array(4, 20)));&#xA;&#xA;$results = $db-&amp;gt;get(&#39;users&#39;);&#xA;// Gives: SELECT * FROM users WHERE id BETWEEN 4 AND 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;IN / NOT IN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where(&#39;id&#39;, Array(1, 5, 27, -1, &#39;d&#39;), &#39;IN&#39;);&#xA;// or $db-&amp;gt;where(&#39;id&#39;, Array( &#39;IN&#39; =&amp;gt; Array(1, 5, 27, -1, &#39;d&#39;) ) );&#xA;&#xA;$results = $db-&amp;gt;get(&#39;users&#39;);&#xA;// Gives: SELECT * FROM users WHERE id IN (1, 5, 27, -1, &#39;d&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR CASE:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where (&#39;firstName&#39;, &#39;John&#39;);&#xA;$db-&amp;gt;orWhere (&#39;firstName&#39;, &#39;Peter&#39;);&#xA;$results = $db-&amp;gt;get (&#39;users&#39;);&#xA;// Gives: SELECT * FROM users WHERE firstName=&#39;John&#39; OR firstName=&#39;peter&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NULL comparison:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where (&#34;lastName&#34;, NULL, &#39;IS NOT&#39;);&#xA;$results = $db-&amp;gt;get(&#34;users&#34;);&#xA;// Gives: SELECT * FROM users where lastName IS NOT NULL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LIKE comparison:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where (&#34;fullName&#34;, &#39;John%&#39;, &#39;like&#39;);&#xA;$results = $db-&amp;gt;get(&#34;users&#34;);&#xA;// Gives: SELECT * FROM users where fullName like &#39;John%&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also you can use raw where conditions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where (&#34;id != companyId&#34;);&#xA;$db-&amp;gt;where (&#34;DATE(createdAt) = DATE(lastLogin)&#34;);&#xA;$results = $db-&amp;gt;get(&#34;users&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or raw condition with variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where (&#34;(id = ? or id = ?)&#34;, Array(6,2));&#xA;$db-&amp;gt;where (&#34;login&#34;,&#34;mike&#34;);&#xA;$res = $db-&amp;gt;get (&#34;users&#34;);&#xA;// Gives: SELECT * FROM users WHERE (id = 6 or id = 2) and login=&#39;mike&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find the total number of rows matched. Simple pagination example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$offset = 10;&#xA;$count = 15;&#xA;$users = $db-&amp;gt;withTotalCount()-&amp;gt;get(&#39;users&#39;, Array ($offset, $count));&#xA;echo &#34;Showing {$count} from {$db-&amp;gt;totalCount}&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Query Keywords&lt;/h3&gt; &#xA;&lt;p&gt;To add LOW PRIORITY | DELAYED | HIGH PRIORITY | IGNORE and the rest of the mysql keywords to INSERT (), REPLACE (), GET (), UPDATE (), DELETE() method or FOR UPDATE | LOCK IN SHARE MODE into SELECT ():&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;setQueryOption (&#39;LOW_PRIORITY&#39;)-&amp;gt;insert ($table, $param);&#xA;// GIVES: INSERT LOW_PRIORITY INTO table ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;setQueryOption (&#39;FOR UPDATE&#39;)-&amp;gt;get (&#39;users&#39;);&#xA;// GIVES: SELECT * FROM USERS FOR UPDATE;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also you can use an array of keywords:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;setQueryOption (Array(&#39;LOW_PRIORITY&#39;, &#39;IGNORE&#39;))-&amp;gt;insert ($table,$param);&#xA;// GIVES: INSERT LOW_PRIORITY IGNORE INTO table ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same way keywords could be used in SELECT queries as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;setQueryOption (&#39;SQL_NO_CACHE&#39;);&#xA;$db-&amp;gt;get(&#34;users&#34;);&#xA;// GIVES: SELECT SQL_NO_CACHE * FROM USERS;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally you can use method chaining to call where multiple times without referencing your object over and over:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$results = $db&#xA;&#x9;-&amp;gt;where(&#39;id&#39;, 1)&#xA;&#x9;-&amp;gt;where(&#39;login&#39;, &#39;admin&#39;)&#xA;&#x9;-&amp;gt;get(&#39;users&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delete Query&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where(&#39;id&#39;, 1);&#xA;if($db-&amp;gt;delete(&#39;users&#39;)) echo &#39;successfully deleted&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ordering method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;orderBy(&#34;id&#34;,&#34;asc&#34;);&#xA;$db-&amp;gt;orderBy(&#34;login&#34;,&#34;Desc&#34;);&#xA;$db-&amp;gt;orderBy(&#34;RAND ()&#34;);&#xA;$results = $db-&amp;gt;get(&#39;users&#39;);&#xA;// Gives: SELECT * FROM users ORDER BY id ASC,login DESC, RAND ();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Order by values example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;orderBy(&#39;userGroup&#39;, &#39;ASC&#39;, array(&#39;superuser&#39;, &#39;admin&#39;, &#39;users&#39;));&#xA;$db-&amp;gt;get(&#39;users&#39;);&#xA;// Gives: SELECT * FROM users ORDER BY FIELD (userGroup, &#39;superuser&#39;, &#39;admin&#39;, &#39;users&#39;) ASC;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using setPrefix () functionality and need to use table names in orderBy() method make sure that table names are escaped with ``.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;setPrefix (&#34;t_&#34;);&#xA;$db-&amp;gt;orderBy (&#34;users.id&#34;,&#34;asc&#34;);&#xA;$results = $db-&amp;gt;get (&#39;users&#39;);&#xA;// WRONG: That will give: SELECT * FROM t_users ORDER BY users.id ASC;&#xA;&#xA;$db-&amp;gt;setPrefix (&#34;t_&#34;);&#xA;$db-&amp;gt;orderBy (&#34;`users`.id&#34;, &#34;asc&#34;);&#xA;$results = $db-&amp;gt;get (&#39;users&#39;);&#xA;// CORRECT: That will give: SELECT * FROM t_users ORDER BY t_users.id ASC;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grouping method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;groupBy (&#34;name&#34;);&#xA;$results = $db-&amp;gt;get (&#39;users&#39;);&#xA;// Gives: SELECT * FROM users GROUP BY name;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JOIN method&lt;/h3&gt; &#xA;&lt;p&gt;Join table products with table users with LEFT JOIN by tenantID&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;join(&#34;users u&#34;, &#34;p.tenantID=u.tenantID&#34;, &#34;LEFT&#34;);&#xA;$db-&amp;gt;where(&#34;u.id&#34;, 6);&#xA;$products = $db-&amp;gt;get (&#34;products p&#34;, null, &#34;u.name, p.productName&#34;);&#xA;print_r ($products);&#xA;// Gives: SELECT u.name, p.productName FROM products p LEFT JOIN users u ON p.tenantID=u.tenantID WHERE u.id = 6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Join Conditions&lt;/h3&gt; &#xA;&lt;p&gt;Add AND condition to join statement&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;join(&#34;users u&#34;, &#34;p.tenantID=u.tenantID&#34;, &#34;LEFT&#34;);&#xA;$db-&amp;gt;joinWhere(&#34;users u&#34;, &#34;u.tenantID&#34;, 5);&#xA;$products = $db-&amp;gt;get (&#34;products p&#34;, null, &#34;u.name, p.productName&#34;);&#xA;print_r ($products);&#xA;// Gives: SELECT  u.name, p.productName FROM products p LEFT JOIN users u ON (p.tenantID=u.tenantID AND u.tenantID = 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add OR condition to join statement&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;join(&#34;users u&#34;, &#34;p.tenantID=u.tenantID&#34;, &#34;LEFT&#34;);&#xA;$db-&amp;gt;joinOrWhere(&#34;users u&#34;, &#34;u.tenantID&#34;, 5);&#xA;$products = $db-&amp;gt;get (&#34;products p&#34;, null, &#34;u.name, p.productName&#34;);&#xA;print_r ($products);&#xA;// Gives: SELECT  u.login, p.productName FROM products p LEFT JOIN users u ON (p.tenantID=u.tenantID OR u.tenantID = 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Properties sharing&lt;/h3&gt; &#xA;&lt;p&gt;It is also possible to copy properties&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where (&#34;agentId&#34;, 10);&#xA;$db-&amp;gt;where (&#34;active&#34;, true);&#xA;&#xA;$customers = $db-&amp;gt;copy ();&#xA;$res = $customers-&amp;gt;get (&#34;customers&#34;, Array (10, 10));&#xA;// SELECT * FROM customers WHERE agentId = 10 AND active = 1 LIMIT 10, 10&#xA;&#xA;$cnt = $db-&amp;gt;getValue (&#34;customers&#34;, &#34;count(id)&#34;);&#xA;echo &#34;total records found: &#34; . $cnt;&#xA;// SELECT count(id) FROM customers WHERE agentId = 10 AND active = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Subqueries&lt;/h3&gt; &#xA;&lt;p&gt;Subquery init&lt;/p&gt; &#xA;&lt;p&gt;Subquery init without an alias to use in inserts/updates/where Eg. (select * from users)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sq = $db-&amp;gt;subQuery();&#xA;$sq-&amp;gt;get (&#34;users&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A subquery with an alias specified to use in JOINs . Eg. (select * from users) sq&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sq = $db-&amp;gt;subQuery(&#34;sq&#34;);&#xA;$sq-&amp;gt;get (&#34;users&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subquery in selects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$ids = $db-&amp;gt;subQuery ();&#xA;$ids-&amp;gt;where (&#34;qty&#34;, 2, &#34;&amp;gt;&#34;);&#xA;$ids-&amp;gt;get (&#34;products&#34;, null, &#34;userId&#34;);&#xA;&#xA;$db-&amp;gt;where (&#34;id&#34;, $ids, &#39;in&#39;);&#xA;$res = $db-&amp;gt;get (&#34;users&#34;);&#xA;// Gives SELECT * FROM users WHERE id IN (SELECT userId FROM products WHERE qty &amp;gt; 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subquery in inserts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$userIdQ = $db-&amp;gt;subQuery ();&#xA;$userIdQ-&amp;gt;where (&#34;id&#34;, 6);&#xA;$userIdQ-&amp;gt;getOne (&#34;users&#34;, &#34;name&#34;),&#xA;&#xA;$data = Array (&#xA;    &#34;productName&#34; =&amp;gt; &#34;test product&#34;,&#xA;    &#34;userId&#34; =&amp;gt; $userIdQ,&#xA;    &#34;lastUpdated&#34; =&amp;gt; $db-&amp;gt;now()&#xA;);&#xA;$id = $db-&amp;gt;insert (&#34;products&#34;, $data);&#xA;// Gives INSERT INTO PRODUCTS (productName, userId, lastUpdated) values (&#34;test product&#34;, (SELECT name FROM users WHERE id = 6), NOW());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subquery in joins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$usersQ = $db-&amp;gt;subQuery (&#34;u&#34;);&#xA;$usersQ-&amp;gt;where (&#34;active&#34;, 1);&#xA;$usersQ-&amp;gt;get (&#34;users&#34;);&#xA;&#xA;$db-&amp;gt;join($usersQ, &#34;p.userId=u.id&#34;, &#34;LEFT&#34;);&#xA;$products = $db-&amp;gt;get (&#34;products p&#34;, null, &#34;u.login, p.productName&#34;);&#xA;print_r ($products);&#xA;// SELECT u.login, p.productName FROM products p LEFT JOIN (SELECT * FROM t_users WHERE active = 1) u on p.userId=u.id;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;EXISTS / NOT EXISTS condition&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sub = $db-&amp;gt;subQuery();&#xA;$sub-&amp;gt;where(&#34;company&#34;, &#39;testCompany&#39;);&#xA;$sub-&amp;gt;get (&#34;users&#34;, null, &#39;userId&#39;);&#xA;$db-&amp;gt;where (null, $sub, &#39;exists&#39;);&#xA;$products = $db-&amp;gt;get (&#34;products&#34;);&#xA;// Gives SELECT * FROM products WHERE EXISTS (SELECT userId FROM users WHERE company=&#39;testCompany&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Has method&lt;/h3&gt; &#xA;&lt;p&gt;A convenient function that returns TRUE if exists at least an element that satisfy the where condition specified calling the &#34;where&#34; method before this one.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where(&#34;user&#34;, $user);&#xA;$db-&amp;gt;where(&#34;password&#34;, md5($password));&#xA;if($db-&amp;gt;has(&#34;users&#34;)) {&#xA;    return &#34;You are logged&#34;;&#xA;} else {&#xA;    return &#34;Wrong user/password&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Helper methods&lt;/h3&gt; &#xA;&lt;p&gt;Disconnect from the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    $db-&amp;gt;disconnect();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reconnect in case mysql connection died:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if (!$db-&amp;gt;ping())&#xA;    $db-&amp;gt;connect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get last executed SQL query: Please note that this method returns the SQL query only for debugging purposes as its execution most likely will fail due to missing quotes around char variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    $db-&amp;gt;get(&#39;users&#39;);&#xA;    echo &#34;Last executed query was &#34;. $db-&amp;gt;getLastQuery();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check if table exists:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    if ($db-&amp;gt;tableExists (&#39;users&#39;))&#xA;        echo &#34;hooray&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;mysqli_real_escape_string() wrapper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    $escaped = $db-&amp;gt;escape (&#34;&#39; and 1=1&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Transaction helpers&lt;/h3&gt; &#xA;&lt;p&gt;Please keep in mind that transactions are working on innoDB tables. Rollback transaction if insert fails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;startTransaction();&#xA;...&#xA;if (!$db-&amp;gt;insert (&#39;myTable&#39;, $insertData)) {&#xA;    //Error while saving, cancel new record&#xA;    $db-&amp;gt;rollback();&#xA;} else {&#xA;    //OK&#xA;    $db-&amp;gt;commit();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error helpers&lt;/h3&gt; &#xA;&lt;p&gt;After you executed a query you have options to check if there was an error. You can get the MySQL error string or the error code for the last executed query.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;where(&#39;login&#39;, &#39;admin&#39;)-&amp;gt;update(&#39;users&#39;, [&#39;firstName&#39; =&amp;gt; &#39;Jack&#39;]);&#xA;&#xA;if ($db-&amp;gt;getLastErrno() === 0)&#xA;    echo &#39;Update succesfull&#39;;&#xA;else&#xA;    echo &#39;Update failed. Error: &#39;. $db-&amp;gt;getLastError();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Query execution time benchmarking&lt;/h3&gt; &#xA;&lt;p&gt;To track query execution time setTrace() function should be called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;setTrace (true);&#xA;// As a second parameter it is possible to define prefix of the path which should be striped from filename&#xA;// $db-&amp;gt;setTrace (true, $_SERVER[&#39;SERVER_ROOT&#39;]);&#xA;$db-&amp;gt;get(&#34;users&#34;);&#xA;$db-&amp;gt;get(&#34;test&#34;);&#xA;print_r ($db-&amp;gt;trace);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;    [0] =&amp;gt; Array&#xA;        (&#xA;            [0] =&amp;gt; SELECT  * FROM t_users ORDER BY `id` ASC&#xA;            [1] =&amp;gt; 0.0010669231414795&#xA;            [2] =&amp;gt; MysqliDb-&amp;gt;get() &amp;gt;&amp;gt;  file &#34;/avb/work/PHP-MySQLi-Database-Class/tests.php&#34; line #151&#xA;        )&#xA;&#xA;    [1] =&amp;gt; Array&#xA;        (&#xA;            [0] =&amp;gt; SELECT  * FROM t_test&#xA;            [1] =&amp;gt; 0.00069189071655273&#xA;            [2] =&amp;gt; MysqliDb-&amp;gt;get() &amp;gt;&amp;gt;  file &#34;/avb/work/PHP-MySQLi-Database-Class/tests.php&#34; line #152&#xA;        )&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Table Locking&lt;/h3&gt; &#xA;&lt;p&gt;To lock tables, you can use the &lt;strong&gt;lock&lt;/strong&gt; method together with &lt;strong&gt;setLockMethod&lt;/strong&gt;. The following example will lock the table &lt;strong&gt;users&lt;/strong&gt; for &lt;strong&gt;write&lt;/strong&gt; access.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;setLockMethod(&#34;WRITE&#34;)-&amp;gt;lock(&#34;users&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling another &lt;strong&gt;-&amp;gt;lock()&lt;/strong&gt; will remove the first lock. You can also use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;unlock();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to unlock the previous locked tables. To lock multiple tables, you can use an array. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$db-&amp;gt;setLockMethod(&#34;READ&#34;)-&amp;gt;lock(array(&#34;users&#34;, &#34;log&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will lock the tables &lt;strong&gt;users&lt;/strong&gt; and &lt;strong&gt;log&lt;/strong&gt; for &lt;strong&gt;READ&lt;/strong&gt; access only. Make sure you use *&lt;em&gt;unlock()&lt;/em&gt; afterwards or your tables will remain locked!&lt;/p&gt;</summary>
  </entry>
</feed>