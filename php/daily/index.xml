<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-10T01:43:02Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>googleads/google-ads-php</title>
    <updated>2023-03-10T01:43:02Z</updated>
    <id>tag:github.com,2023-03-10:/googleads/google-ads-php</id>
    <link href="https://github.com/googleads/google-ads-php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google Ads API Client Library for PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google Ads API Client Library for PHP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.php.net/supported-versions.php&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/php-%3E%3D%207.4-8892BF.svg?sanitize=true&#34; alt=&#34;Minimum PHP Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/googleads/google-ads-php&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/googleads/google-ads-php.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/googleads/google-ads-php&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/googleads/google-ads-php/downloads.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/googleads/google-ads-php&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/googleads/google-ads-php/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/googleads/google-ads-php&#34;&gt;&lt;img src=&#34;https://travis-ci.org/googleads/google-ads-php.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/googleads/google-ads-php&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/googleads/google-ads-php/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project hosts the PHP client library for the &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/start&#34;&gt;Google Ads API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Distributed via &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; and &lt;a href=&#34;https://packagist.org/packages/googleads/google-ads-php&#34;&gt;Packagist&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Easy management of credentials.&lt;/li&gt; &#xA; &lt;li&gt;Easy creation of Google Ads API service clients.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Both 32-bit and 64-bit PHP systems are supported but we highly recommend to use 64-bit if you can. This is because many fields of the Google Ads API are typed as 64-bit integers and casting their values to &lt;code&gt;int&lt;/code&gt; instead of &lt;code&gt;float&lt;/code&gt; from 32-bit systems can lead to issues. The largest integer value supported in 32-bit PHP systems is usually 2147483647, see the predefined constant &lt;a href=&#34;https://www.php.net/manual/en/reserved.constants.php&#34;&gt;PHP_INT_MAX&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;This library depends on &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;. If you don&#39;t have it installed on your computer yet, follow the &lt;a href=&#34;https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx&#34;&gt;installation guide for Linux/Unix/OS X&lt;/a&gt; or &lt;a href=&#34;https://getcomposer.org/doc/00-intro.md#installation-windows&#34;&gt;installation guide for Windows&lt;/a&gt;. For the rest of this guide, we&#39;re assuming that you&#39;re using Linux/Unix/OS X and have Composer installed &lt;a href=&#34;https://getcomposer.org/doc/00-intro.md#globally&#34;&gt;globally&lt;/a&gt;, thus, your installed Composer is available on the command line as &lt;code&gt;composer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;System requirements and dependencies can be found in &lt;a href=&#34;https://raw.githubusercontent.com/googleads/google-ads-php/main/composer.json&#34;&gt;composer.json&lt;/a&gt; of this library. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;PHP&lt;/strong&gt;: You can find the required minimum PHP version in &lt;code&gt;&#34;php&#34;&lt;/code&gt; under the &lt;a href=&#34;https://getcomposer.org/doc/01-basic-usage.md#the-require-key&#34;&gt;&lt;strong&gt;&lt;code&gt;require&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; key of &lt;a href=&#34;https://raw.githubusercontent.com/googleads/google-ads-php/main/composer.json&#34;&gt;&lt;code&gt;composer.json&lt;/code&gt;&lt;/a&gt;. We usually set it to the minimum PHP version for which the PHP development team still provide security fixes. Whenever such a version is sunset, we&#39;ll update the composer file accordingly. Currently, the update frequency is around once a year based on the &lt;a href=&#34;https://www.php.net/supported-versions.php&#34;&gt;official schedule&lt;/a&gt;. Visit &lt;a href=&#34;https://www.php.net/manual/en/getting-started.php&#34;&gt;this page&lt;/a&gt; for introduction to PHP.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;gRPC&lt;/strong&gt;: To install the gRPC PHP extension, make sure to meet any additional requirements listed in the project&#39;s &lt;a href=&#34;https://grpc.io/docs/languages/php/quickstart/#prerequisites&#34;&gt;&lt;strong&gt;documentation&lt;/strong&gt;&lt;/a&gt;. You can learn more about how gRPC is used by this library by reading our &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/client-libs/php/transport&#34;&gt;Transport&lt;/a&gt; guide. It usually take minutes to install using &lt;code&gt;PECL&lt;/code&gt;: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Install the extension using the command &lt;code&gt;sudo pecl install grpc&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Add a line &lt;code&gt;extension=grpc.so&lt;/code&gt; to the &lt;code&gt;php.ini&lt;/code&gt; file.&lt;/li&gt; &#xA;     &lt;li&gt;Run &lt;code&gt;php -i | grep grpc&lt;/code&gt; in a terminal: it is well installed and configured if it returns something&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Protobuf&lt;/strong&gt;: To install the Protobuf PHP extension, make sure to meet any additional requirements listed in the project&#39;s &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/tree/HEAD/php#requirements&#34;&gt;&lt;strong&gt;documentation&lt;/strong&gt;&lt;/a&gt;. If you encounter any error during the installation, you can skip this step and the PHP implementation will be used instead. You can learn more about how Protobuf is used by this library by reading our &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/client-libs/php/protobuf&#34;&gt;Protobuf implementations&lt;/a&gt; guide. It usually take minutes to install using &lt;code&gt;PECL&lt;/code&gt;: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Install the extension using the command &lt;code&gt;sudo pecl install protobuf&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Add a line &lt;code&gt;extension=protobuf.so&lt;/code&gt; to the &lt;code&gt;php.ini&lt;/code&gt; file.&lt;/li&gt; &#xA;     &lt;li&gt;Run &lt;code&gt;php -i | grep protobuf&lt;/code&gt; in a terminal: it is well installed and configured if it returns something&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You need a &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/first-call/dev-token&#34;&gt;developer token&lt;/a&gt; to connect to the Google Ads API.&lt;/li&gt; &#xA; &lt;li&gt;One version of the library typically supports multiple versions of the Google Ads API. You can check the &lt;a href=&#34;https://github.com/googleads/google-ads-php/raw/HEAD/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; file to identify what versions of the library added or removed the support for a specific version of the Google Ads API. For example, the version &lt;code&gt;V7&lt;/code&gt; of the Google Ads API was added in the version &lt;code&gt;v9.0.0&lt;/code&gt; of the library as described &lt;a href=&#34;https://github.com/googleads/google-ads-php/raw/HEAD/CHANGELOG.md#900&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this project in the directory of your choice via:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/googleads/google-ads-php.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change into the &lt;code&gt;google-ads-php&lt;/code&gt; directory.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd google-ads-php&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You&#39;ll see some files and subdirectories:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;composer.json&lt;/code&gt;: the composer file, which holds the requirements of this library.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;src&lt;/code&gt;: source code of the library.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;tests&lt;/code&gt;: tests of the library code.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;examples&lt;/code&gt;: many examples that demonstrate how to use the library to execute common use cases via the Google Ads API.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;metadata&lt;/code&gt;: some metadata files used internally by the source code. They&#39;re automatically generated files, so you shouldn&#39;t modify them.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;composer install&lt;/code&gt; at the command prompt. This will install all dependencies needed for using the library and running examples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up your OAuth2 credentials.&lt;/p&gt; &lt;p&gt;The Google Ads API uses &lt;a href=&#34;http://oauth.net/2/&#34;&gt;OAuth2&lt;/a&gt; as the authentication mechanism. Choose the appropriate option below based on your use case, and read and follow the instructions that the example prints to the console.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;If you already have credentials for the AdWords API...&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If you have the &lt;code&gt;adsapi_php.ini&lt;/code&gt; file you used for the AdWords API, copy and name it as &lt;code&gt;google_ads_php.ini&lt;/code&gt;. Simply change the section name from &lt;code&gt;[ADWORDS]&lt;/code&gt; to &lt;code&gt;[GOOGLE_ADS]&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;If you don&#39;t have the file, copy the sample &lt;code&gt;google_ads_php.ini&lt;/code&gt; to your &lt;a href=&#34;https://en.wikipedia.org/wiki/Home_directory#Default_home_directory_per_operating_system&#34;&gt;home directory&lt;/a&gt;. This library determines the home directory of your computer by using &lt;a href=&#34;https://github.com/googleads/google-ads-php/raw/HEAD/src/Google/Ads/GoogleAds/Util/EnvironmentalVariables.php#L36&#34;&gt;&lt;code&gt;EnvironmentalVariables::getHome()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;If you&#39;re accessing the Google Ads API using your own credentials...&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Copy the sample &lt;a href=&#34;https://raw.githubusercontent.com/googleads/google-ads-php/main/examples/Authentication/google_ads_php.ini&#34;&gt;&lt;code&gt;google_ads_php.ini&lt;/code&gt;&lt;/a&gt; to your &lt;a href=&#34;https://en.wikipedia.org/wiki/Home_directory#Default_home_directory_per_operating_system&#34;&gt;home directory&lt;/a&gt;. This library determines the home directory of your computer by using &lt;a href=&#34;https://github.com/googleads/google-ads-php/raw/HEAD/src/Google/Ads/GoogleAds/Util/EnvironmentalVariables.php#L36&#34;&gt;&lt;code&gt;EnvironmentalVariables::getHome()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Follow the instructions at &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/oauth/cloud-project&#34;&gt;https://developers.google.com/google-ads/api/docs/oauth/cloud-project&lt;/a&gt; to create an OAuth2 client ID and secret for the &lt;strong&gt;installed application&lt;/strong&gt; OAuth2 flow.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Run the &lt;a href=&#34;https://github.com/googleads/google-ads-php/raw/HEAD/examples/Authentication/GenerateUserCredentials.php&#34;&gt;GenerateUserCredentials&lt;/a&gt; example, which will prompt you for your OAuth2 client ID and secret.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Copy the output from the last step of the example into the &lt;code&gt;google_ads_php.ini&lt;/code&gt; file in your home directory. Don&#39;t forget to fill in your developer token too.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the &lt;a href=&#34;https://raw.githubusercontent.com/googleads/google-ads-php/main/examples/BasicOperations/GetCampaigns.php&#34;&gt;GetCampaigns example&lt;/a&gt; to test if your credentials are valid. You also need to pass your Google Ads account&#39;s customer ID without dashes as a command-line parameter:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;php examples/BasicOperations/GetCampaigns.php --customerId &amp;lt;YOUR_CUSTOMER_ID&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Code examples are meant to be run from command prompt, not via the web browsers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Explore other examples.&lt;/p&gt; &lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/googleads/google-ads-php/main/examples&#34;&gt;examples&lt;/a&gt; directory contains several useful examples. Most of the examples require parameters. You can see what are required by running code examples with &lt;code&gt;--help&lt;/code&gt; as a command-line parameter.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You will find comments with the formats &lt;code&gt;[START...]&lt;/code&gt; and &lt;code&gt;[END...]&lt;/code&gt; in the source code of these examples. These are only used for technical purposes, you can completely disregard them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;h3&gt;Instantiate a client&lt;/h3&gt; &#xA;&lt;p&gt;To issue requests via the Google Ads API, you first need to create a &lt;a href=&#34;https://github.com/googleads/google-ads-php/raw/HEAD/src/Google/Ads/GoogleAds/Lib/V13/GoogleAdsClient.php&#34;&gt;GoogleAdsClient&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to configure a client when instantiating it, see the &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/client-libs/php/configuration&#34;&gt;configuration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Get a service client&lt;/h3&gt; &#xA;&lt;p&gt;Once you have an instance of &lt;code&gt;GoogleAdsClient&lt;/code&gt;, you can obtain a service client for a particular service using one of the &lt;code&gt;get...ServiceClient()&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;h2&gt;Client configuration&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/client-libs/php/configuration&#34;&gt;Configuration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Transport&lt;/h2&gt; &#xA;&lt;p&gt;There are different types of transport that can be used. See the &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/client-libs/php/transport&#34;&gt;Transport guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Protobuf&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/overview&#34;&gt;Protobuf&lt;/a&gt; is used regardless of the transport used to request the Google Ads API.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/client-libs/php/protobuf&#34;&gt;Protobuf guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Running in a Docker container&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/client-libs/php/docker&#34;&gt;Running in a Docker container guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/client-libs/php/logging&#34;&gt;Logging guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Proxy configuration&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/client-libs/php/proxy&#34;&gt;Proxy guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://developers.google.com/google-ads/api/docs/client-libs/php/performance&#34;&gt;Performance guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;h3&gt;Wiki&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/googleads/google-ads-php/wiki&#34;&gt;https://github.com/googleads/google-ads-php/wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Issue tracker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/googleads/google-ads-php/issues&#34;&gt;https://github.com/googleads/google-ads-php/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API Documentation:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.google.com/google-ads/api/docs&#34;&gt;https://developers.google.com/google-ads/api/docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support forum&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/adwords-api&#34;&gt;https://groups.google.com/forum/#!forum/adwords-api&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Authors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fiboknacky&#34;&gt;Thanet Knack Praneenararat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Raibaz&#34;&gt;Mattia Tommasone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PierrickVoulet&#34;&gt;Pierrick Voulet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>PHPCompatibility/PHPCompatibility</title>
    <updated>2023-03-10T01:43:02Z</updated>
    <id>tag:github.com,2023-03-10:/PHPCompatibility/PHPCompatibility</id>
    <link href="https://github.com/PHPCompatibility/PHPCompatibility" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP Compatibility check for PHP_CodeSniffer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHP Compatibility Coding Standard for PHP CodeSniffer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/phpcompatibility/php-compatibility&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpcompatibility/php-compatibility/v/stable.png&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/php-compatibility#dev-develop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/unstable-dev--develop-e68718.svg?maxAge=2419200&#34; alt=&#34;Latest Unstable Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/awesome%3F-yes!-brightgreen.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpcompatibility/php-compatibility/license.png&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://flattr.com/submit/auto?user_id=wimg&amp;amp;url=https://github.com/PHPCompatibility/PHPCompatibility&amp;amp;title=PHPCompatibility&amp;amp;language=&amp;amp;tags=github&amp;amp;category=software&#34;&gt;&lt;img src=&#34;http://api.flattr.com/button/flattr-badge-large.png&#34; alt=&#34;Flattr this git repo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/actions?query=workflow%3ACS&#34;&gt;&lt;img src=&#34;https://github.com/PHPCompatibility/PHPCompatibility/workflows/CS/badge.svg?branch=develop&#34; alt=&#34;CS Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/actions?query=workflow%3ATest&#34;&gt;&lt;img src=&#34;https://github.com/PHPCompatibility/PHPCompatibility/workflows/Test/badge.svg?branch=develop&#34; alt=&#34;Test Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/PHPCompatibility/PHPCompatibility?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/PHPCompatibility/PHPCompatibility/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/phpcompatibility/php-compatibility&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/php-v/phpcompatibility/php-compatibility.svg?maxAge=3600&#34; alt=&#34;Minimum PHP Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/actions?query=workflow%3ATest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/tested%20on-PHP%205.4%20%7C%205.5%20%7C%205.6%20%7C%207.0%20%7C%207.1%20%7C%207.2%20%7C%207.3%20%7C%207.4%20%7C%208.0%20%7C%20nightly%20-brightgreen.svg?maxAge=2419200&#34; alt=&#34;Tested on PHP 5.4 to nightly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a set of sniffs for &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;PHP CodeSniffer&lt;/a&gt; that checks for PHP cross-version compatibility. It will allow you to analyse your code for compatibility with higher and lower versions of PHP.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#php-version-support&#34;&gt;PHP Version Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#thank-you&#34;&gt;Thank you&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#warning-upgrading-to-phpcompatibility-900-warning&#34;&gt;Upgrading to PHPCompatibility 9.0.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#installation-in-a-composer-project-method-1&#34;&gt;Installation in a Composer project (method 1)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#installation-via-a-git-check-out-to-an-arbitrary-directory-method-2&#34;&gt;Installation via a git check-out to an arbitrary directory (method 2)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#sniffing-your-code-for-compatibility-with-specific-php-versions&#34;&gt;Sniffing your code for compatibility with specific PHP version(s)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#using-a-frameworkcmspolyfill-specific-ruleset&#34;&gt;Using a framework/CMS/polyfill specific ruleset&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#using-a-custom-ruleset&#34;&gt;Using a custom ruleset&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#testversion-in-the-ruleset-versus-command-line&#34;&gt;&lt;code&gt;testVersion&lt;/code&gt; in the ruleset versus command-line&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#phpcompatibility-specific-options&#34;&gt;PHPCompatibility specific options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#projects-extending-phpcompatibility&#34;&gt;Projects extending PHPCompatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PHP Version Support&lt;/h2&gt; &#xA;&lt;p&gt;The project aims to cover all PHP compatibility changes introduced since PHP 5.0 up to the latest PHP release. This is an ongoing process and coverage is not yet 100% (if, indeed, it ever could be). Progress is tracked on &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/issues&#34;&gt;our GitHub issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests that check for compatibility issues in PHP 4 code - in particular between PHP 4 and PHP 5.0 - are very welcome as there are still situations where people need help upgrading legacy systems. However, coverage for changes introduced before PHP 5.1 will remain patchy as sniffs for this are not actively being developed at this time.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 5.4+&lt;/li&gt; &#xA; &lt;li&gt;PHP CodeSniffer: 3.7.1+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The sniffs are designed to give the same results regardless of which PHP version you are using to run PHP CodeSniffer. You should get consistent results independently of the PHP version used in your test environment, though for the best results it is recommended to run the sniffs on a recent PHP version in combination with a recent PHP_CodeSniffer version.&lt;/p&gt; &#xA;&lt;p&gt;As of version 8.0.0, the PHPCompatibility standard can also be used with PHP CodeSniffer 3.x. As of version 9.0.0, support for PHP CodeSniffer 1.5.x and low 2.x versions &amp;lt; 2.3.0 has been dropped. As of version 10.0.0, support for PHP &amp;lt; 5.4 and PHP CodeSniffer &amp;lt; 3.7.1 has been dropped.&lt;/p&gt; &#xA;&lt;h2&gt;Thank you&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/graphs/contributors&#34;&gt;contributors&lt;/a&gt; for their valuable contributions.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://wpengine.com&#34;&gt;WP Engine&lt;/a&gt; for their support on the PHP 7.0 sniffs.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚠&lt;/span&gt; Upgrading to PHPCompatibility 9.0.0 &lt;span&gt;⚠&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This library has been reorganized. All sniffs have been placed in categories and a significant number of sniffs have been renamed.&lt;/p&gt; &#xA;&lt;p&gt;If you use the complete &lt;code&gt;PHPCompatibility&lt;/code&gt; standard without &lt;code&gt;exclude&lt;/code&gt; directives in a custom ruleset and do not (yet) use the new-style PHP_CodeSniffer annotation as introduced in &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/releases/tag/3.2.0&#34;&gt;PHP_CodeSniffer 3.2.0&lt;/a&gt;, this will have no noticeable effect and everything should work as before.&lt;/p&gt; &#xA;&lt;p&gt;However, if you do use &lt;code&gt;exclude&lt;/code&gt; directives for PHPCompatibility sniffs in a custom ruleset or if you use the &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/releases/3.2.0&#34;&gt;new-style PHP_CodeSniffer inline annotations&lt;/a&gt;, you will need to update these when upgrading. This should be a one-time only change. The changelog contains detailed information about all the sniff renames.&lt;/p&gt; &#xA;&lt;p&gt;Please read the changelog for version &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/releases/tag/9.0.0&#34;&gt;9.0.0&lt;/a&gt; carefully before upgrading.&lt;/p&gt; &#xA;&lt;h2&gt;Installation in a Composer project (method 1)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the following lines to the &lt;code&gt;require-dev&lt;/code&gt; section of your &lt;code&gt;composer.json&lt;/code&gt; file. &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;require-dev&#34;: {&#xA;    &#34;phpcompatibility/php-compatibility&#34;: &#34;*&#34;&#xA;},&#xA;&#34;prefer-stable&#34; : true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Next, PHP CodeSniffer has to be informed of the location of the standard. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If PHPCompatibility is the &lt;strong&gt;&lt;em&gt;only&lt;/em&gt;&lt;/strong&gt; external PHP CodeSniffer standard you use, you can add the following to your &lt;code&gt;composer.json&lt;/code&gt; file to automatically run the necessary command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;scripts&#34;: {&#xA;    &#34;post-install-cmd&#34;: &#34;\&#34;vendor/bin/phpcs\&#34; --config-set installed_paths vendor/phpcompatibility/php-compatibility&#34;,&#xA;    &#34;post-update-cmd&#34; : &#34;\&#34;vendor/bin/phpcs\&#34; --config-set installed_paths vendor/phpcompatibility/php-compatibility&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Alternatively - and &lt;strong&gt;&lt;em&gt;strongly recommended&lt;/em&gt;&lt;/strong&gt; if you use more than one external PHP CodeSniffer standard - you can use any of the following Composer plugins to handle this for you.&lt;/p&gt; &lt;p&gt;Just add the Composer plugin you prefer to the &lt;code&gt;require-dev&lt;/code&gt; section of your &lt;code&gt;composer.json&lt;/code&gt; file.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/DealerDirect/phpcodesniffer-composer-installer&#34;&gt;DealerDirect/phpcodesniffer-composer-installer&lt;/a&gt;:&#34;^0.6.0&#34;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/higidi/composer-phpcodesniffer-standards-plugin&#34;&gt;higidi/composer-phpcodesniffer-standards-plugin&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/SimplyAdmire/ComposerPlugins&#34;&gt;SimplyAdmire/ComposerPlugins&lt;/a&gt;. This plugin &lt;em&gt;might&lt;/em&gt; still work, but appears to be abandoned.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;As a last alternative in case you use a custom ruleset, you can tell PHP CodeSniffer the path to the PHPCompatibility standard by adding the following snippet to your custom ruleset:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;config name=&#34;installed_paths&#34; value=&#34;vendor/phpcompatibility/php-compatibility&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;composer update --lock&lt;/code&gt; to install both PHP CodeSniffer, the PHPCompatibility coding standard and - optionally - the Composer plugin.&lt;/li&gt; &#xA; &lt;li&gt;Verify that the PHPCompatibility standard is registered correctly by running &lt;code&gt;./vendor/bin/phpcs -i&lt;/code&gt; on the command line. PHPCompatibility should be listed as one of the available standards.&lt;/li&gt; &#xA; &lt;li&gt;Now you can use the following command to inspect your code: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpcs -p . --standard=PHPCompatibility&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation via a git check-out to an arbitrary directory (method 2)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;PHP CodeSniffer&lt;/a&gt; via &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer#installation&#34;&gt;your preferred method&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;PHP CodeSniffer offers a variety of installation methods to suit your work-flow: Composer, &lt;a href=&#34;http://pear.php.net/PHP_CodeSniffer&#34;&gt;PEAR&lt;/a&gt;, a Phar file, zipped/tarred release archives or checking the repository out using Git.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Pro-tip:&lt;/strong&gt; Register the path to PHPCS in your system &lt;code&gt;$PATH&lt;/code&gt; environment variable to make the &lt;code&gt;phpcs&lt;/code&gt; command available from anywhere in your file system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility/releases&#34;&gt;latest PHPCompatibility release&lt;/a&gt; and unzip/untar it into an arbitrary directory.&lt;/p&gt; &lt;p&gt;You can also choose to clone the repository using git to easily update your install regularly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the path to the directory in which you placed your copy of the PHPCompatibility repo to the PHP CodeSniffer configuration using the below command from the command line:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs --config-set installed_paths /path/to/PHPCompatibility&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I.e. if you placed the &lt;code&gt;PHPCompatibility&lt;/code&gt; repository in the &lt;code&gt;/my/custom/standards/PHPCompatibility&lt;/code&gt; directory, you will need to add that directory to the PHP CodeSniffer &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Configuration-Options#setting-the-installed-standard-paths&#34;&gt;&lt;code&gt;installed_paths&lt;/code&gt; configuration variable&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: &lt;span&gt;⚠&lt;/span&gt; The &lt;code&gt;installed_paths&lt;/code&gt; command overwrites any previously set &lt;code&gt;installed_paths&lt;/code&gt;. If you have previously set &lt;code&gt;installed_paths&lt;/code&gt; for other external standards, run &lt;code&gt;phpcs --config-show&lt;/code&gt; first and then run the &lt;code&gt;installed_paths&lt;/code&gt; command with all the paths you need separated by commas, i.e.:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs --config-set installed_paths /path/1,/path/2,/path/3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Pro-tip:&lt;/strong&gt; Alternatively, in case you use a custom ruleset, you can tell PHP CodeSniffer the path to the PHPCompatibility standard(s) by adding the following snippet to your custom ruleset:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;config name=&#34;installed_paths&#34; value=&#34;/path/to/PHPCompatibility&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify that the PHPCompatibility standard is registered correctly by running &lt;code&gt;phpcs -i&lt;/code&gt; on the command line. PHPCompatibility should be listed as one of the available standards.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now you can use the following command to inspect your code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs -p . --standard=PHPCompatibility&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sniffing your code for compatibility with specific PHP version(s)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the coding standard from the command-line with &lt;code&gt;phpcs -p . --standard=PHPCompatibility&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By default, you will only receive notifications about deprecated and/or removed PHP features.&lt;/li&gt; &#xA; &lt;li&gt;To get the most out of the PHPCompatibility standard, you should specify a &lt;code&gt;testVersion&lt;/code&gt; to check against. That will enable the checks for both deprecated/removed PHP features as well as the detection of code using new PHP features. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can run the checks for just one specific PHP version by adding &lt;code&gt;--runtime-set testVersion 5.5&lt;/code&gt; to your command line command.&lt;/li&gt; &#xA;   &lt;li&gt;You can also specify a range of PHP versions that your code needs to support. In this situation, compatibility issues that affect any of the PHP versions in that range will be reported: &lt;code&gt;--runtime-set testVersion 5.3-5.5&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;As of PHPCompatibility 7.1.3, you can omit one part of the range if you want to support everything above or below a particular version, i.e. use &lt;code&gt;--runtime-set testVersion 7.0-&lt;/code&gt; to run all the checks for PHP 7.0 and above.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;By default the report will be sent to the console, if you want to save the report to a file, add the following to the command line command: &lt;code&gt;--report-full=path/to/report-file&lt;/code&gt;. For more information and other reporting options, check the &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Reporting&#34;&gt;PHP CodeSniffer wiki&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using a framework/CMS/polyfill specific ruleset&lt;/h3&gt; &#xA;&lt;p&gt;As of mid 2018, a limited set of framework/CMS specific rulesets is available. These rulesets are hosted in their own repositories.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PHPCompatibilityJoomla&lt;/code&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityJoomla&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-joomla&#34;&gt;Packagist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PHPCompatibilityWP&lt;/code&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityWP&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-wp&#34;&gt;Packagist&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since the autumn of 2018, there are also a number of PHP polyfill specific rulesets available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PHPCompatibilityPasswordCompat&lt;/code&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityPasswordCompat&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-passwordcompat&#34;&gt;Packagist&lt;/a&gt;: accounts for @ircmaxell&#39;s &lt;a href=&#34;https://github.com/ircmaxell/password_compat&#34;&gt;&lt;code&gt;password_compat&lt;/code&gt;&lt;/a&gt; polyfill library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PHPCompatibilityParagonie&lt;/code&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityParagonie&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-paragonie&#34;&gt;Packagist&lt;/a&gt;: contains two rulesets which account for the Paragonie &lt;a href=&#34;https://github.com/paragonie/random_compat&#34;&gt;&lt;code&gt;random_compat&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/paragonie/sodium_compat&#34;&gt;&lt;code&gt;sodium_compat&lt;/code&gt;&lt;/a&gt; polyfill libraries respectively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PHPCompatibilitySymfony&lt;/code&gt; &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilitySymfony&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-symfony&#34;&gt;Packagist&lt;/a&gt;: contains a number of rulesets which account for various PHP polyfill libraries offered by the Symfony project. For more details about the available rulesets, please check out the &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilitySymfony/raw/master/README.md&#34;&gt;README of the PHPCompatibilitySymfony&lt;/a&gt; repository.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to make sure you have all PHPCompatibility rulesets available at any time, you can use the &lt;code&gt;PHPCompatibilityAll&lt;/code&gt; package &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityAll&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://packagist.org/packages/phpcompatibility/phpcompatibility-all&#34;&gt;Packagist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Framework/CMS/Polyfill specific rulesets do not set the minimum PHP version for your project, so you will still need to pass a &lt;code&gt;testVersion&lt;/code&gt; to get the most accurate results.&lt;/p&gt; &#xA;&lt;h2&gt;Using a custom ruleset&lt;/h2&gt; &#xA;&lt;p&gt;Like with any PHP CodeSniffer standard, you can add PHPCompatibility to a custom PHP CodeSniffer ruleset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34;?&amp;gt;&#xA;&amp;lt;ruleset name=&#34;Custom ruleset&#34;&amp;gt;&#xA;    &amp;lt;description&amp;gt;My rules for PHP CodeSniffer&amp;lt;/description&amp;gt;&#xA;&#xA;    &amp;lt;!-- Run against the PHPCompatibility ruleset --&amp;gt;&#xA;    &amp;lt;rule ref=&#34;PHPCompatibility&#34;/&amp;gt;&#xA;&#xA;    &amp;lt;!-- Run against a second ruleset --&amp;gt;&#xA;    &amp;lt;rule ref=&#34;PSR2&#34;/&amp;gt;&#xA;&#xA;&amp;lt;/ruleset&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set the &lt;code&gt;testVersion&lt;/code&gt; from within the ruleset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;!-- Check for cross-version support for PHP 5.6 and higher. --&amp;gt;&#xA;    &amp;lt;config name=&#34;testVersion&#34; value=&#34;5.6-&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other advanced options, such as changing the message type or severity of select sniffs, as described in the &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml&#34;&gt;PHPCS Annotated ruleset&lt;/a&gt; wiki page are, of course, also supported.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;testVersion&lt;/code&gt; in the ruleset versus command-line&lt;/h3&gt; &#xA;&lt;p&gt;In PHPCS 3.2.0 and lower, once you set the &lt;code&gt;testVersion&lt;/code&gt; in the ruleset, you could not overrule it from the command-line anymore. Starting with PHPCS 3.3.0, a &lt;code&gt;testVersion&lt;/code&gt; set via the command-line will overrule the &lt;code&gt;testVersion&lt;/code&gt; in the ruleset.&lt;/p&gt; &#xA;&lt;p&gt;This allows for more flexibility when, for instance, your project needs to comply with PHP &lt;code&gt;5.5-&lt;/code&gt;, but you have a bootstrap file which needs to be compatible with PHP &lt;code&gt;5.2-&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;PHPCompatibility specific options&lt;/h3&gt; &#xA;&lt;p&gt;At this moment, there are two sniffs which have a property which can be set via the ruleset. More custom properties may become available in the future.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;PHPCompatibility.Extensions.RemovedExtensions&lt;/code&gt; sniff checks for removed extensions based on the function prefix used for these extensions. This might clash with userland functions using the same function prefix.&lt;/p&gt; &#xA;&lt;p&gt;To whitelist userland functions, you can pass a comma-delimited list of function names to the sniff.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;!-- Whitelist the mysql_to_rfc3339() and mysql_another_function() functions. --&amp;gt;&#xA;    &amp;lt;rule ref=&#34;PHPCompatibility.Extensions.RemovedExtensions&#34;&amp;gt;&#xA;        &amp;lt;properties&amp;gt;&#xA;            &amp;lt;property name=&#34;functionWhitelist&#34; type=&#34;array&#34; value=&#34;mysql_to_rfc3339,mysql_another_function&#34;/&amp;gt;&#xA;        &amp;lt;/properties&amp;gt;&#xA;    &amp;lt;/rule&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;PHPCompatibility.Interfaces.RemovedSerializable&lt;/code&gt; sniff needs to know about all interfaces which extend the &lt;code&gt;Serializable&lt;/code&gt; interface to provide the most reliable results. The sniff will warn when it encounters an interface extending the &lt;code&gt;Serializable&lt;/code&gt; interface which is unknown to the sniff and recommend for the interface name to be added to the property.&lt;/p&gt; &#xA;&lt;p&gt;To inform the sniff about additional interfaces providing the Serializable interface, add a snippet along the lines of the below to your custom ruleset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;rule ref=&#34;PHPCompatibility.Interfaces.RemovedSerializable&#34;&amp;gt;&#xA;        &amp;lt;properties&amp;gt;&#xA;            &amp;lt;property name=&#34;serializableInterfaces&#34; type=&#34;array&#34;&amp;gt;&#xA;                &amp;lt;element value=&#34;MyCustomSerializableInterface&#34;/&amp;gt;&#xA;                &amp;lt;element value=&#34;AnotherSerializableInterface&#34;/&amp;gt;&#xA;            &amp;lt;/property&amp;gt;&#xA;        &amp;lt;/properties&amp;gt;&#xA;    &amp;lt;/rule&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Projects extending PHPCompatibility&lt;/h2&gt; &#xA;&lt;p&gt;There are hundreds of public projects using PHPCompatibility or extending on top of it. A short list of some that you might know or have a look at :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adamculp/php-code-quality&#34;&gt;adamculp/php-code-quality&lt;/a&gt; - a Docker image doing a lot of code quality checks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vfac.fr/projects/php7compatibility&#34;&gt;VFAC/PHP7Compatibility&lt;/a&gt; - a Docker container to check PHP7 Compatibility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wunderio/grumphp-php-compatibility&#34;&gt;grumphp-php-compatibility&lt;/a&gt; - A plugin for &lt;a href=&#34;https://github.com/phpro/grumphp&#34;&gt;GrumPHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHPCompatibility Checker WordPress plugin : &lt;a href=&#34;https://wordpress.org/plugins/php-compatibility-checker/&#34;&gt;Wordpress site&lt;/a&gt; and &lt;a href=&#34;https://github.com/wpengine/phpcompat/&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wptide.org/&#34;&gt;WordPress Tide project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/phpstorm/using-php-code-sniffer.html#788c81b6&#34;&gt;PHPStorm has built-in support for PHPCompatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moodlehq/moodle-local_codechecker&#34;&gt;Moodle codechecker&lt;/a&gt; - A &lt;a href=&#34;https://moodle.org/plugins/local_codechecker&#34;&gt;plugin&lt;/a&gt; for Moodle &lt;a href=&#34;https://docs.moodle.org/dev/Coding_style&#34;&gt;coding style&lt;/a&gt;, including PHPCompatibility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/php-compatibility&#34;&gt;Github Action&lt;/a&gt; - A Github Action that runs this PHPCS standard on your source code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very welcome. Please read the &lt;a href=&#34;https://raw.githubusercontent.com/PHPCompatibility/PHPCompatibility/develop/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; documentation to get started.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is released under the GNU Lesser General Public License (LGPL). For more information, visit &lt;a href=&#34;http://www.gnu.org/copyleft/lesser.html&#34;&gt;http://www.gnu.org/copyleft/lesser.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>