<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-12T01:40:26Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chrome-php/chrome</title>
    <updated>2023-03-12T01:40:26Z</updated>
    <id>tag:github.com,2023-03-12:/chrome-php/chrome</id>
    <link href="https://github.com/chrome-php/chrome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Instrument headless chrome/chromium instances from PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chrome PHP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/chrome-php/chrome&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/chrome-php/chrome/version&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/chrome-php/chrome&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/chrome-php/chrome/license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library lets you start playing with chrome/chromium in headless mode from PHP.&lt;/p&gt; &#xA;&lt;p&gt;Can be used synchronously and asynchronously!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open chrome or chromium browser from php&lt;/li&gt; &#xA; &lt;li&gt;Create pages and navigate to pages&lt;/li&gt; &#xA; &lt;li&gt;Take screenshots&lt;/li&gt; &#xA; &lt;li&gt;Evaluate javascript on the page&lt;/li&gt; &#xA; &lt;li&gt;Make PDF&lt;/li&gt; &#xA; &lt;li&gt;Emulate mouse&lt;/li&gt; &#xA; &lt;li&gt;Emulate keyboard&lt;/li&gt; &#xA; &lt;li&gt;Always IDE friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Happy browsing!&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Requires PHP 7.4-8.2 and a chrome/chromium 65+ executable.&lt;/p&gt; &#xA;&lt;p&gt;Note that the library is only tested on Linux but is compatible with macOS and Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The library can be installed with Composer and is available on packagist under &lt;a href=&#34;https://packagist.org/packages/chrome-php/chrome&#34;&gt;chrome-php/chrome&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require chrome-php/chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;It uses a simple and understandable API to start chrome, to open pages, take screenshots, crawl websites... and almost everything that you can do with chrome as a human.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use HeadlessChromium\BrowserFactory;&#xA;&#xA;$browserFactory = new BrowserFactory();&#xA;&#xA;// starts headless chrome&#xA;$browser = $browserFactory-&amp;gt;createBrowser();&#xA;&#xA;try {&#xA;    // creates a new page and navigate to an URL&#xA;    $page = $browser-&amp;gt;createPage();&#xA;    $page-&amp;gt;navigate(&#39;http://example.com&#39;)-&amp;gt;waitForNavigation();&#xA;&#xA;    // get page title&#xA;    $pageTitle = $page-&amp;gt;evaluate(&#39;document.title&#39;)-&amp;gt;getReturnValue();&#xA;&#xA;    // screenshot - Say &#34;Cheese&#34;! ðŸ˜„&#xA;    $page-&amp;gt;screenshot()-&amp;gt;saveToFile(&#39;/foo/bar.png&#39;);&#xA;&#xA;    // pdf&#xA;    $page-&amp;gt;pdf([&#39;printBackground&#39; =&amp;gt; false])-&amp;gt;saveToFile(&#39;/foo/bar.pdf&#39;);&#xA;} finally {&#xA;    // bye&#xA;    $browser-&amp;gt;close();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using different chrome executable&lt;/h3&gt; &#xA;&lt;p&gt;When starting, the factory will look for the environment variable &lt;code&gt;&#34;CHROME_PATH&#34;&lt;/code&gt; to use as the chrome executable. If the variable is not found, it will try to guess the correct executable path according to your OS or use &lt;code&gt;&#34;chrome&#34;&lt;/code&gt; as the default.&lt;/p&gt; &#xA;&lt;p&gt;You are also able to explicitly set up any executable of your choice when creating a new object. For instance &lt;code&gt;&#34;chromium-browser&#34;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use HeadlessChromium\BrowserFactory;&#xA;&#xA;// replace default &#39;chrome&#39; with &#39;chromium-browser&#39;&#xA;$browserFactory = new BrowserFactory(&#39;chromium-browser&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;The following example disables headless mode to ease debugging&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use HeadlessChromium\BrowserFactory;&#xA;&#xA;$browserFactory = new BrowserFactory();&#xA;&#xA;$browser = $browserFactory-&amp;gt;createBrowser([&#xA;    &#39;headless&#39; =&amp;gt; false, // disable headless mode&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other debug options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;[&#xA;    &#39;connectionDelay&#39; =&amp;gt; 0.8,            // add 0.8 second of delay between each instruction sent to chrome,&#xA;    &#39;debugLogger&#39;     =&amp;gt; &#39;php://stdout&#39;, // will enable verbose mode&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;About &lt;code&gt;debugLogger&lt;/code&gt;: this can be any of a resource string, a resource, or an object implementing &lt;code&gt;LoggerInterface&lt;/code&gt; from Psr\Log (such as &lt;a href=&#34;https://github.com/Seldaek/monolog&#34;&gt;monolog&lt;/a&gt; or &lt;a href=&#34;https://github.com/apix/log&#34;&gt;apix/log&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;Browser Factory&lt;/h3&gt; &#xA;&lt;p&gt;Options set directly in the &lt;code&gt;createBrowser&lt;/code&gt; method will be used only for a single browser creation. The default options will be ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use HeadlessChromium\BrowserFactory;&#xA;&#xA;$browserFactory = new BrowserFactory();&#xA;$browser = $browserFactory-&amp;gt;createBrowser([&#xA;    &#39;windowSize&#39;   =&amp;gt; [1920, 1000],&#xA;    &#39;enableImages&#39; =&amp;gt; false,&#xA;]);&#xA;&#xA;// this browser will be created without any options&#xA;$browser2 = $browserFactory-&amp;gt;createBrowser();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options set using the &lt;code&gt;setOptions&lt;/code&gt; and &lt;code&gt;addOptions&lt;/code&gt; methods will persist.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$browserFactory-&amp;gt;setOptions([&#xA;    &#39;windowSize&#39; =&amp;gt; [1920, 1000],&#xA;]);&#xA;&#xA;// both browser will have the same &#39;windowSize&#39; option&#xA;$browser1 = $browserFactory-&amp;gt;createBrowser();&#xA;$browser2 = $browserFactory-&amp;gt;createBrowser();&#xA;&#xA;$browserFactory-&amp;gt;addOptions([&#39;enableImages&#39; =&amp;gt; false]);&#xA;&#xA;// this browser will have both the &#39;windowSize&#39; and &#39;enableImages&#39; options&#xA;$browser3 = $browserFactory-&amp;gt;createBrowser();&#xA;&#xA;$browserFactory-&amp;gt;addOptions([&#39;enableImages&#39; =&amp;gt; true]);&#xA;&#xA;// this browser will have the previous &#39;windowSize&#39;, but &#39;enableImages&#39; will be true&#xA;$browser4 = $browserFactory-&amp;gt;createBrowser();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available options&lt;/h4&gt; &#xA;&lt;p&gt;Here are the options available for the browser factory:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option name&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;connectionDelay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delay to apply between each operation for debugging purposes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;customFlags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;An array of flags to pass to the command line. Eg: &lt;code&gt;[&#39;--option1&#39;, &#39;--option2=someValue&#39;]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;debugLogger&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A string (e.g &#34;php://stdout&#34;), or resource, or PSR-3 logger instance to print debug messages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enableImages&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggles loading of images&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;envVariables&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;An array of environment variables to pass to the process (example DISPLAY variable)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;An array of custom HTTP headers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;headless&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable or disable headless mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignoreCertificateErrors&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set chrome to ignore ssl errors&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;keepAlive&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; to keep alive the chrome instance when the script terminates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;noSandbox&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable no sandbox mode, useful to run in a docker container&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;noProxyServer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Don&#39;t use a proxy server, always make direct connections. Overrides other proxy settings.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proxyBypassList&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Specifies a list of hosts for whom we bypass proxy settings and use direct connections&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proxyServer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Proxy server to use. usage: &lt;code&gt;127.0.0.1:8080&lt;/code&gt; (authorisation with credentials does not work)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sendSyncDefaultTimeout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default timeout (ms) for sending sync messages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;startupTimeout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;30&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximum time in seconds to wait for chrome to start&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;userAgent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;User agent to use for the whole browser (see page API for alternative)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;userDataDir&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Chrome user data dir (default: a new empty dir is generated temporarily)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;userCrashDumpsDir&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;The directory crashpad should store dumps in (crash reporter will be enabled automatically)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;windowSize&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Size of the window. usage: &lt;code&gt;$width, $height&lt;/code&gt; - see also Page::setViewport&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Persistent Browser&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how to share a single instance of chrome for multiple scripts.&lt;/p&gt; &#xA;&lt;p&gt;The first time the script is started we use the browser factory in order to start chrome, afterwards we save the uri to connect to this browser in the file system.&lt;/p&gt; &#xA;&lt;p&gt;The next calls to the script will read the uri from that file in order to connect to the chrome instance instead of creating a new one. If chrome was closed or crashed, a new instance is started again.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use \HeadlessChromium\BrowserFactory;&#xA;use \HeadlessChromium\Exception\BrowserConnectionFailed;&#xA;&#xA;// path to the file to store websocket&#39;s uri&#xA;$socket = \file_get_contents(&#39;/tmp/chrome-php-demo-socket&#39;);&#xA;&#xA;try {&#xA;    $browser = BrowserFactory::connectToBrowser($socket);&#xA;} catch (BrowserConnectionFailed $e) {&#xA;    // The browser was probably closed, start it again&#xA;    $factory = new BrowserFactory();&#xA;    $browser = $factory-&amp;gt;createBrowser([&#xA;        &#39;keepAlive&#39; =&amp;gt; true,&#xA;    ]);&#xA;&#xA;    // save the uri to be able to connect again to browser&#xA;    \file_put_contents($socketFile, $browser-&amp;gt;getSocketUri(), LOCK_EX);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browser API&lt;/h3&gt; &#xA;&lt;h4&gt;Create a new page (tab)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page = $browser-&amp;gt;createPage();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get opened pages (tabs)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$pages = $browser-&amp;gt;getPages();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Close the browser&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$browser-&amp;gt;close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set a script to evaluate before every page created by this browser will navigate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$browser-&amp;gt;setPagePreScript(&#39;// Simulate navigator permissions;&#xA;const originalQuery = window.navigator.permissions.query;&#xA;window.navigator.permissions.query = (parameters) =&amp;gt; (&#xA;    parameters.name === &#39;notifications&#39; ?&#xA;        Promise.resolve({ state: Notification.permission }) :&#xA;        originalQuery(parameters)&#xA;);&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Page API&lt;/h3&gt; &#xA;&lt;h4&gt;Navigate to an URL&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// navigate&#xA;$navigation = $page-&amp;gt;navigate(&#39;http://example.com&#39;);&#xA;&#xA;// wait for the page to be loaded&#xA;$navigation-&amp;gt;waitForNavigation();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;$navigation-&amp;gt;waitForNavigation()&lt;/code&gt; you will wait for 30sec until the page event &#34;loaded&#34; is triggered. You can change the timeout or the event to listen for:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use HeadlessChromium\Page;&#xA;&#xA;// wait 10secs for the event &#34;DOMContentLoaded&#34; to be triggered&#xA;$navigation-&amp;gt;waitForNavigation(Page::DOM_CONTENT_LOADED, 10000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available events (in the order they trigger):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Page::DOM_CONTENT_LOADED&lt;/code&gt;: dom has completely loaded&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Page::LOAD&lt;/code&gt;: (default) page and all resources are loaded&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Page::NETWORK_IDLE&lt;/code&gt;: page has loaded, and no network activity has occurred for at least 500ms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When you want to wait for the page to navigate 2 main issues may occur. First, the page is too long to load and second, the page you were waiting to be loaded has been replaced. The good news is that you can handle those issues using a good old try-catch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use HeadlessChromium\Exception\OperationTimedOut;&#xA;use HeadlessChromium\Exception\NavigationExpired;&#xA;&#xA;try {&#xA;    $navigation-&amp;gt;waitForNavigation()&#xA;} catch (OperationTimedOut $e) {&#xA;    // too long to load&#xA;} catch (NavigationExpired $e) {&#xA;    // An other page was loaded&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Evaluate script on the page&lt;/h4&gt; &#xA;&lt;p&gt;Once the page has completed the navigation you can evaluate arbitrary script on this page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// navigate&#xA;$navigation = $page-&amp;gt;navigate(&#39;http://example.com&#39;);&#xA;&#xA;// wait for the page to be loaded&#xA;$navigation-&amp;gt;waitForNavigation();&#xA;&#xA;// evaluate script in the browser&#xA;$evaluation = $page-&amp;gt;evaluate(&#39;document.documentElement.innerHTML&#39;);&#xA;&#xA;// wait for the value to return and get it&#xA;$value = $evaluation-&amp;gt;getReturnValue();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes the script you evaluate will click a link or submit a form, in this case, the page will reload and you will want to wait for the new page to reload.&lt;/p&gt; &#xA;&lt;p&gt;You can achieve this by using &lt;code&gt;$page-&amp;gt;evaluate(&#39;some js that will reload the page&#39;)-&amp;gt;waitForPageReload()&lt;/code&gt;. An example is available in &lt;a href=&#34;https://raw.githubusercontent.com/chrome-php/chrome/1.8/examples/form-submit.php&#34;&gt;form-submit.php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Call a function&lt;/h4&gt; &#xA;&lt;p&gt;This is an alternative to &lt;code&gt;evaluate&lt;/code&gt; that allows calling a given function with the given arguments in the page context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$evaluation = $page-&amp;gt;callFunction(&#xA;    &#34;function(a, b) {\n    window.foo = a + b;\n}&#34;,&#xA;    [1, 2]&#xA;);&#xA;&#xA;$value = $evaluation-&amp;gt;getReturnValue();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add a script tag&lt;/h4&gt; &#xA;&lt;p&gt;That&#39;s useful if you want to add jQuery (or anything else) to the page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page-&amp;gt;addScriptTag([&#xA;    &#39;content&#39; =&amp;gt; file_get_contents(&#39;path/to/jquery.js&#39;)&#xA;])-&amp;gt;waitForResponse();&#xA;&#xA;$page-&amp;gt;evaluate(&#39;$(&#34;.my.element&#34;).html()&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use an URL to feed the src attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page-&amp;gt;addScriptTag([&#xA;    &#39;url&#39; =&amp;gt; &#39;https://code.jquery.com/jquery-3.3.1.min.js&#39;&#xA;])-&amp;gt;waitForResponse();&#xA;&#xA;$page-&amp;gt;evaluate(&#39;$(&#34;.my.element&#34;).html()&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set the page HTML&lt;/h4&gt; &#xA;&lt;p&gt;You can manually inject html to a page using the &lt;code&gt;setHtml&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Basic&#xA;$page-&amp;gt;setHtml(&#39;&amp;lt;p&amp;gt;text&amp;lt;/p&amp;gt;&#39;);&#xA;&#xA;// Specific timeout &amp;amp; event&#xA;$page-&amp;gt;setHtml(&#39;&amp;lt;p&amp;gt;text&amp;lt;/p&amp;gt;&#39;, 10000, Page::NETWORK_IDLE);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a page&#39;s HTML is updated, we&#39;ll wait for the page to unload. You can specify how long to wait and which event to wait for through two optional parameters. This defaults to 3000ms and the &#34;load&#34; event.&lt;/p&gt; &#xA;&lt;p&gt;Note that this method will not append to the current page HTML, it will completely replace it.&lt;/p&gt; &#xA;&lt;h4&gt;Get the page HTML&lt;/h4&gt; &#xA;&lt;p&gt;You can get the page HTML as a string using the &lt;code&gt;getHtml&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$html = $page-&amp;gt;getHtml();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add a script to evaluate upon page navigation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page-&amp;gt;addPreScript(&#39;// Simulate navigator permissions;&#xA;const originalQuery = window.navigator.permissions.query;&#xA;window.navigator.permissions.query = (parameters) =&amp;gt; (&#xA;    parameters.name === &#39;notifications&#39; ?&#xA;        Promise.resolve({ state: Notification.permission }) :&#xA;        originalQuery(parameters)&#xA;);&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your script needs the dom to be fully populated before it runs then you can use the option &#34;onLoad&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page-&amp;gt;addPreScript($script, [&#39;onLoad&#39; =&amp;gt; true]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set viewport size&lt;/h4&gt; &#xA;&lt;p&gt;This feature allows changing the size of the viewport (emulation) for the current page without affecting the size of all the browser&#39;s pages (see also option &lt;code&gt;&#34;windowSize&#34;&lt;/code&gt; of &lt;a href=&#34;https://raw.githubusercontent.com/chrome-php/chrome/1.8/#options&#34;&gt;BrowserFactory::createBrowser&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$width = 600;&#xA;$height = 300;&#xA;$page-&amp;gt;setViewport($width, $height)&#xA;    -&amp;gt;await(); // wait for the operation to complete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Make a screenshot&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// navigate&#xA;$navigation = $page-&amp;gt;navigate(&#39;http://example.com&#39;);&#xA;&#xA;// wait for the page to be loaded&#xA;$navigation-&amp;gt;waitForNavigation();&#xA;&#xA;// take a screenshot&#xA;$screenshot = $page-&amp;gt;screenshot([&#xA;    &#39;format&#39;  =&amp;gt; &#39;jpeg&#39;,  // default to &#39;png&#39; - possible values: &#39;png&#39;, &#39;jpeg&#39;,&#xA;    &#39;quality&#39; =&amp;gt; 80,      // only if format is &#39;jpeg&#39; - default 100&#xA;]);&#xA;&#xA;// save the screenshot&#xA;$screenshot-&amp;gt;saveToFile(&#39;/some/place/file.jpg&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Screenshot an area on a page&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use the option &#34;clip&#34; to choose an area on a page for the screenshot&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use HeadlessChromium\Clip;&#xA;&#xA;// navigate&#xA;$navigation = $page-&amp;gt;navigate(&#39;http://example.com&#39;);&#xA;&#xA;// wait for the page to be loaded&#xA;$navigation-&amp;gt;waitForNavigation();&#xA;&#xA;// create a rectangle by specifying to left corner coordinates + width and height&#xA;$x = 10;&#xA;$y = 10;&#xA;$width = 100;&#xA;$height = 100;&#xA;$clip = new Clip($x, $y, $width, $height);&#xA;&#xA;// take the screenshot (in memory binaries)&#xA;$screenshot = $page-&amp;gt;screenshot([&#xA;    &#39;clip&#39;  =&amp;gt; $clip,&#xA;]);&#xA;&#xA;// save the screenshot&#xA;$screenshot-&amp;gt;saveToFile(&#39;/some/place/file.jpg&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Full-page screenshot&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also take a screenshot for the full-page layout (not only the viewport) using &lt;code&gt;$page-&amp;gt;getFullPageClip&lt;/code&gt; with attribute &lt;code&gt;captureBeyondViewport = true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// navigate&#xA;$navigation = $page-&amp;gt;navigate(&#39;https://example.com&#39;);&#xA;&#xA;// wait for the page to be loaded&#xA;$navigation-&amp;gt;waitForNavigation();&#xA;&#xA;$screenshot = $page-&amp;gt;screenshot([&#xA;    &#39;captureBeyondViewport&#39; =&amp;gt; true,&#xA;    &#39;clip&#39; =&amp;gt; $page-&amp;gt;getFullPageClip(),&#xA;    &#39;format&#39; =&amp;gt; &#39;jpeg&#39;, // default to &#39;png&#39; - possible values: &#39;png&#39;, &#39;jpeg&#39;,&#xA;]);&#xA;&#xA;// save the screenshot&#xA;$screenshot-&amp;gt;saveToFile(&#39;/some/place/file.jpg&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Print as PDF&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// navigate&#xA;$navigation = $page-&amp;gt;navigate(&#39;http://example.com&#39;);&#xA;&#xA;// wait for the page to be loaded&#xA;$navigation-&amp;gt;waitForNavigation();&#xA;&#xA;$options = [&#xA;    &#39;landscape&#39;           =&amp;gt; true,             // default to false&#xA;    &#39;printBackground&#39;     =&amp;gt; true,             // default to false&#xA;    &#39;displayHeaderFooter&#39; =&amp;gt; true,             // default to false&#xA;    &#39;preferCSSPageSize&#39;   =&amp;gt; true,             // default to false (reads parameters directly from @page)&#xA;    &#39;marginTop&#39;           =&amp;gt; 0.0,              // defaults to ~0.4 (must be a float, value in inches)&#xA;    &#39;marginBottom&#39;        =&amp;gt; 1.4,              // defaults to ~0.4 (must be a float, value in inches)&#xA;    &#39;marginLeft&#39;          =&amp;gt; 5.0,              // defaults to ~0.4 (must be a float, value in inches)&#xA;    &#39;marginRight&#39;         =&amp;gt; 1.0,              // defaults to ~0.4 (must be a float, value in inches)&#xA;    &#39;paperWidth&#39;          =&amp;gt; 6.0,              // defaults to 8.5 (must be a float, value in inches)&#xA;    &#39;paperHeight&#39;         =&amp;gt; 6.0,              // defaults to 11.0 (must be a float, value in inches)&#xA;    &#39;headerTemplate&#39;      =&amp;gt; &#39;&amp;lt;div&amp;gt;foo&amp;lt;/div&amp;gt;&#39;, // see details above&#xA;    &#39;footerTemplate&#39;      =&amp;gt; &#39;&amp;lt;div&amp;gt;foo&amp;lt;/div&amp;gt;&#39;, // see details above&#xA;    &#39;scale&#39;               =&amp;gt; 1.2,              // defaults to 1.0 (must be a float)&#xA;];&#xA;&#xA;// print as pdf (in memory binaries)&#xA;$pdf = $page-&amp;gt;pdf($options);&#xA;&#xA;// save the pdf&#xA;$pdf-&amp;gt;saveToFile(&#39;/some/place/file.pdf&#39;);&#xA;&#xA;// or directly output pdf without saving&#xA;header(&#39;Content-Description: File Transfer&#39;);&#xA;header(&#39;Content-Type: application/pdf&#39;);&#xA;header(&#39;Content-Disposition: inline; filename=filename.pdf&#39;);&#xA;header(&#39;Content-Transfer-Encoding: binary&#39;);&#xA;header(&#39;Expires: 0&#39;);&#xA;header(&#39;Cache-Control: must-revalidate, post-check=0, pre-check=0&#39;);&#xA;header(&#39;Pragma: public&#39;);&#xA;&#xA;echo base64_decode($pdf-&amp;gt;getBase64());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options &lt;code&gt;headerTemplate&lt;/code&gt; and &lt;code&gt;footerTemplate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Should be valid HTML markup with the following classes used to inject printing values into them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;date: formatted print date&lt;/li&gt; &#xA; &lt;li&gt;title: document title&lt;/li&gt; &#xA; &lt;li&gt;url: document location&lt;/li&gt; &#xA; &lt;li&gt;pageNumber: current page number&lt;/li&gt; &#xA; &lt;li&gt;totalPages: total pages in the document&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Save downloads&lt;/h3&gt; &#xA;&lt;p&gt;You can set the path to save downloaded files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// After creating a page.&#xA;$page-&amp;gt;setDownloadPath(&#39;/path/to/save/downloaded/files&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mouse API&lt;/h3&gt; &#xA;&lt;p&gt;The mouse API is dependent on the page instance and allows you to control the mouse&#39;s moves, clicks and scroll.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page-&amp;gt;mouse()&#xA;    -&amp;gt;move(10, 20)                             // Moves mouse to position x=10; y=20&#xA;    -&amp;gt;click()                                  // left-click on position set above&#xA;    -&amp;gt;move(100, 200, [&#39;steps&#39; =&amp;gt; 5])           // move mouse to x=100; y=200 in 5 equal steps&#xA;    -&amp;gt;click([&#39;button&#39; =&amp;gt; Mouse::BUTTON_RIGHT]; // right-click on position set above&#xA;&#xA;// given the last click was on a link, the next step will wait&#xA;// for the page to load after the link was clicked&#xA;$page-&amp;gt;waitForReload();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can emulate the mouse wheel to scroll up and down in a page, frame, or element.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page-&amp;gt;mouse()&#xA;    -&amp;gt;scrollDown(100) // scroll down 100px&#xA;    -&amp;gt;scrollUp(50);   // scroll up 50px&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Finding elements&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; method will search for elements using &lt;a href=&#34;https://developer.mozilla.org/docs/Web/API/Document/querySelector&#34;&gt;querySelector&lt;/a&gt; and move the cursor to a random position over it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;try {&#xA;    $page-&amp;gt;mouse()-&amp;gt;find(&#39;#a&#39;)-&amp;gt;click(); // find and click at an element with id &#34;a&#34;&#xA;&#xA;    $page-&amp;gt;mouse()-&amp;gt;find(&#39;.a&#39;, 10); // find the 10th or last element with class &#34;a&#34;&#xA;} catch (ElementNotFoundException $exception) {&#xA;    // element not found&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method will attempt to scroll right and down to bring the element to the visible screen. If the element is inside an internal scrollable section, try moving the mouse to inside that section first.&lt;/p&gt; &#xA;&lt;h3&gt;Keyboard API&lt;/h3&gt; &#xA;&lt;p&gt;The keyboard API is dependent on the page instance and allows you to type like a real user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page-&amp;gt;keyboard()&#xA;    -&amp;gt;typeRawKey(&#39;Tab&#39;) // type a raw key, such as Tab&#xA;    -&amp;gt;typeText(&#39;bar&#39;);  // type the text &#34;bar&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To impersonate a real user you may want to add a delay between each keystroke using the &lt;code&gt;setKeyInterval&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page-&amp;gt;keyboard()-&amp;gt;setKeyInterval(10); // sets a delay of 10 milliseconds between keystrokes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Key combinations&lt;/h4&gt; &#xA;&lt;p&gt;The methods &lt;code&gt;press&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, and &lt;code&gt;release&lt;/code&gt; can be used to send key combinations such as &lt;code&gt;ctrl + v&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// ctrl + a to select all text&#xA;$page-&amp;gt;keyboard()&#xA;    -&amp;gt;press(&#39;control&#39;) // key names are case insensitive and trimmed&#xA;        -&amp;gt;type(&#39;a&#39;)    // press and release&#xA;    -&amp;gt;release(&#39;Control&#39;);&#xA;&#xA;// ctrl + c to copy and ctrl + v to paste it twice&#xA;$page-&amp;gt;keyboard()&#xA;    -&amp;gt;press(&#39;Ctrl&#39;) // alias for Control&#xA;        -&amp;gt;type(&#39;c&#39;)&#xA;        -&amp;gt;type(&#39;V&#39;) // upper and lower cases should behave the same way&#xA;    -&amp;gt;release();    // release all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can press the same key several times in sequence, this is the equivalent to a user pressing and holding the key. The release event, however, will be sent only once per key.&lt;/p&gt; &#xA;&lt;h4&gt;Key aliases&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Aliases&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Control&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Control&lt;/code&gt;, &lt;code&gt;Ctrl&lt;/code&gt;, &lt;code&gt;Ctr&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Alt&lt;/code&gt;, &lt;code&gt;AltGr&lt;/code&gt;, &lt;code&gt;Alt Gr&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Meta&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Meta&lt;/code&gt;, &lt;code&gt;Command&lt;/code&gt;, &lt;code&gt;Cmd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shift&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Shift&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Cookie API&lt;/h3&gt; &#xA;&lt;p&gt;You can set and get cookies for a page:&lt;/p&gt; &#xA;&lt;h4&gt;Set Cookie&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use HeadlessChromium\Cookies\Cookie;&#xA;&#xA;$page = $browser-&amp;gt;createPage();&#xA;&#xA;// example 1: set cookies for a given domain&#xA;&#xA;$page-&amp;gt;setCookies([&#xA;    Cookie::create(&#39;name&#39;, &#39;value&#39;, [&#xA;        &#39;domain&#39; =&amp;gt; &#39;example.com&#39;,&#xA;        &#39;expires&#39; =&amp;gt; time() + 3600 // expires in 1 hour&#xA;    ])&#xA;])-&amp;gt;await();&#xA;&#xA;&#xA;// example 2: set cookies for the current page&#xA;&#xA;$page-&amp;gt;navigate(&#39;http://example.com&#39;)-&amp;gt;waitForNavigation();&#xA;&#xA;$page-&amp;gt;setCookies([&#xA;    Cookie::create(&#39;name&#39;, &#39;value&#39;, [&#39;expires&#39;])&#xA;])-&amp;gt;await();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get Cookies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use HeadlessChromium\Cookies\Cookie;&#xA;&#xA;$page = $browser-&amp;gt;createPage();&#xA;&#xA;// example 1: get all cookies for the browser&#xA;&#xA;$cookies = $page-&amp;gt;getAllCookies();&#xA;&#xA;// example 2: get cookies for the current page&#xA;&#xA;$page-&amp;gt;navigate(&#39;http://example.com&#39;)-&amp;gt;waitForNavigation();&#xA;$cookies = $page-&amp;gt;getCookies();&#xA;&#xA;// filter cookies with name == &#39;foo&#39;&#xA;$cookiesFoo = $cookies-&amp;gt;filterBy(&#39;name&#39;, &#39;foo&#39;);&#xA;&#xA;// find first cookie with name == &#39;bar&#39;&#xA;$cookieBar = $cookies-&amp;gt;findOneBy(&#39;name&#39;, &#39;bar&#39;);&#xA;if ($cookieBar) {&#xA;    // do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set user agent&lt;/h3&gt; &#xA;&lt;p&gt;You can set up a user-agent per page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page-&amp;gt;setUserAgent(&#39;my user-agent&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also BrowserFactory option &lt;code&gt;userAgent&lt;/code&gt; to set up it for the whole browser.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;p&gt;The library ships with tools that hide all the communication logic but you can use the tools used internally to communicate directly with chrome debug protocol.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use HeadlessChromium\Communication\Connection;&#xA;use HeadlessChromium\Communication\Message;&#xA;&#xA;// chrome devtools URI&#xA;$webSocketUri = &#39;ws://127.0.0.1:9222/devtools/browser/xxx&#39;;&#xA;&#xA;// create a connection&#xA;$connection = new Connection($webSocketUri);&#xA;$connection-&amp;gt;connect();&#xA;&#xA;// send method &#34;Target.activateTarget&#34;&#xA;$responseReader = $connection-&amp;gt;sendMessage(new Message(&#39;Target.activateTarget&#39;, [&#39;targetId&#39; =&amp;gt; &#39;xxx&#39;]));&#xA;&#xA;// wait up to 1000ms for a response&#xA;$response = $responseReader-&amp;gt;waitForResponse(1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a session and send a message to the target&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// given a target id&#xA;$targetId = &#39;yyy&#39;;&#xA;&#xA;// create a session for this target (attachToTarget)&#xA;$session = $connection-&amp;gt;createSession($targetId);&#xA;&#xA;// send message to this target (Target.sendMessageToTarget)&#xA;$response = $session-&amp;gt;sendMessageSync(new Message(&#39;Page.reload&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;You can ease the debugging by setting a delay before each operation is made:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;  $connection-&amp;gt;setConnectionDelay(500); // wait for 500ms between each operation to ease debugging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browser (standalone)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use HeadlessChromium\Communication\Connection;&#xA;use HeadlessChromium\Browser;&#xA;&#xA;// chrome devtools URI&#xA;$webSocketUri = &#39;ws://127.0.0.1:9222/devtools/browser/xxx&#39;;&#xA;&#xA;// create connection given a WebSocket URI&#xA;$connection = new Connection($webSocketUri);&#xA;$connection-&amp;gt;connect();&#xA;&#xA;// create browser&#xA;$browser = new Browser($connection);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interacting with DOM&lt;/h3&gt; &#xA;&lt;p&gt;Find one element on a page by CSS selector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page = $browser-&amp;gt;createPage();&#xA;$page-&amp;gt;navigate(&#39;http://example.com&#39;)-&amp;gt;waitForNavigation();&#xA;&#xA;$elem = $page-&amp;gt;dom()-&amp;gt;querySelector(&#39;#index_email&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find all elements inside another element by CSS selector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$elem = $page-&amp;gt;dom()-&amp;gt;querySelector(&#39;#index_email&#39;);&#xA;$elem-&amp;gt;querySelectorAll(&#39;a.link&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find all elements on a page by XPath selector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$page = $browser-&amp;gt;createPage();&#xA;$page-&amp;gt;navigate(&#39;http://example.com&#39;)-&amp;gt;waitForNavigation();&#xA;&#xA;$elem = $page-&amp;gt;dom()-&amp;gt;search(&#39;//div/*/a&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can send out a text to an element or click on it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$elem-&amp;gt;click();&#xA;$elem-&amp;gt;sendKeys(&#39;Sample text&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can upload file to file from the input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$elem-&amp;gt;sendFile(&#39;/path/to/file&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get element text or attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$text = $elem-&amp;gt;getText();&#xA;$attr = $elem-&amp;gt;getAttribute(&#39;class&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/chrome-php/chrome/1.8/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for contribution details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/chrome-php/chrome/1.8/LICENSE&#34;&gt;The MIT License (MIT)&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>omegaup/omegaup</title>
    <updated>2023-03-12T01:40:26Z</updated>
    <id>tag:github.com,2023-03-12:/omegaup/omegaup</id>
    <link href="https://github.com/omegaup/omegaup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;omegaUp automatic programming contest evaluator &amp; arena&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://omegaup.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/omegaup/omegaup/main/frontend/www/media/omegaup.png&#34; alt=&#34;omegaUp&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/omegaup/omegaup/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/omegaup/omegaup&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/omegaup/omegaup/issues?q=is%3Aissue+is%3Aopen&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/omegaup/omegaup&#34; alt=&#34;Issues open&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/omegaup/omegaup/issues?q=is%3Aissue+is%3Aclosed&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed/omegaup/omegaup&#34; alt=&#34;Issues closed&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/omegaup/omegaup/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/omegaup/omegaup?style=social&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/omegaup/omegaup/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/omegaup/omegaup?style=social&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/omegaup&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/omegaup.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://omegaup.com&#34;&gt;omegaUp&lt;/a&gt; es una plataforma educativa gratuita que ayuda a mejorar las habilidades en programaciÃ³n, usada por decenas de miles de estudiantes y docentes en LatinoamÃ©rica.&lt;/p&gt; &#xA;&lt;h2&gt;Directorios&lt;/h2&gt; &#xA;&lt;p&gt;Directorios que se utilizan activamente en el desarrollo.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Directorio&lt;/th&gt; &#xA;   &lt;th&gt;DescripciÃ³n&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/omegaup/omegaup/tree/main/frontend/server/src/Controllers&#34;&gt;frontend/server/src/Controllers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LÃ³gica de negocio que implementa la API de omegaUp.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/omegaup/omegaup/tree/main/frontend/server/libs&#34;&gt;frontend/server/libs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bibliotecas y utilerÃ­as.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/omegaup/omegaup/tree/main/frontend/server/src/DAO&#34;&gt;frontend/server/src/DAO&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Los Data Access Objects [DAO] y Value Objects [VO]. Clases utilizadas para representar los esquemas de la base de datos y facilitar su consumo por los controladores.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/omegaup/omegaup/tree/main/frontend/templates&#34;&gt;frontend/templates&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Plantillas utilizadas para generar el HTML que se despliega a los usuarios. TambiÃ©n aquÃ­ estÃ¡n los archivos de internacionalizaciÃ³n para inglÃ©s, espaÃ±ol y portuguÃ©s.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/omegaup/omegaup/tree/main/frontend/www&#34;&gt;frontend/www&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Los contenidos completos de la pÃ¡gina de internet.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;El resto del cÃ³digo estÃ¡ en otros repositorios&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Repositorio&lt;/th&gt; &#xA;   &lt;th&gt;DescripciÃ³n&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/omegaup/quark&#34;&gt;quark&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Incluye el cÃ³digo del grader para la calificaciÃ³n de problemas y ejecutar los cÃ³digos bajo minijail, asÃ­ como el servicio utilizado en los servidores de la nube para servir la cola de envÃ­os.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/omegaup/karel.js&#34;&gt;karel.js&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;La versiÃ³n oficial de Karel utilizada por la Olimpiada Mexicana de InformÃ¡tica.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/omegaup/omegajail&#34;&gt;omegajail&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Un mecanismo de ejecuciÃ³n segura que basado en contenedores de Linux y seccomp-bpf. Utiliza &lt;a href=&#34;https://android.googlesource.com/platform/external/minijail/+/master&#34;&gt;minijail&lt;/a&gt;, escrito por el proyecto &lt;a href=&#34;https://www.chromium.org&#34;&gt;Chromium&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/omegaup/libinteractive&#34;&gt;libinteractive&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Una librerÃ­a para hacer problemas interactivos fÃ¡cilmente.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Navegadores Soportados&lt;/h2&gt; &#xA;&lt;p&gt;Los navegadores oficialmente soportados son aquellos que soportan &lt;a href=&#34;https://caniuse.com/#feat=es6&#34;&gt;ECMAScript 2015 (ES6)&lt;/a&gt;, e incluyen los siguientes:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Navegador&lt;/th&gt; &#xA;   &lt;th&gt;VersiÃ³n&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.google.com/chrome/&#34;&gt;Chrome&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;51&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://mozilla.org/firefox/releases/&#34;&gt;Firefox&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;68&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.microsoft.com/edge&#34;&gt;Edge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.apple.com/safari/&#34;&gt;Safari&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Esto tambiÃ©n incluye todos los navegadores basados en Blink / WebKit cuyas versiones sean compatibles con las de Chrome / Safari.&lt;/p&gt; &#xA;&lt;h2&gt;Licencia&lt;/h2&gt; &#xA;&lt;p&gt;BSD&lt;/p&gt;</summary>
  </entry>
</feed>