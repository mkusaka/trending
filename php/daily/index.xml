<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-23T01:32:23Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>illuminate/database</title>
    <updated>2022-07-23T01:32:23Z</updated>
    <id>tag:github.com,2022-07-23:/illuminate/database</id>
    <link href="https://github.com/illuminate/database" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[READ ONLY] Subtree split of the Illuminate Database component (see laravel/framework)&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Illuminate Database&lt;/h2&gt; &#xA;&lt;p&gt;The Illuminate Database component is a full database toolkit for PHP, providing an expressive query builder, ActiveRecord style ORM, and schema builder. It currently supports MySQL, Postgres, SQL Server, and SQLite. It also serves as the database layer of the Laravel PHP framework.&lt;/p&gt; &#xA;&lt;h3&gt;Usage Instructions&lt;/h3&gt; &#xA;&lt;p&gt;First, create a new &#34;Capsule&#34; manager instance. Capsule aims to make configuring the library for usage outside of the Laravel framework as easy as possible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;use Illuminate\Database\Capsule\Manager as Capsule;&#xA;&#xA;$capsule = new Capsule;&#xA;&#xA;$capsule-&amp;gt;addConnection([&#xA;    &#39;driver&#39; =&amp;gt; &#39;mysql&#39;,&#xA;    &#39;host&#39; =&amp;gt; &#39;localhost&#39;,&#xA;    &#39;database&#39; =&amp;gt; &#39;database&#39;,&#xA;    &#39;username&#39; =&amp;gt; &#39;root&#39;,&#xA;    &#39;password&#39; =&amp;gt; &#39;password&#39;,&#xA;    &#39;charset&#39; =&amp;gt; &#39;utf8&#39;,&#xA;    &#39;collation&#39; =&amp;gt; &#39;utf8_unicode_ci&#39;,&#xA;    &#39;prefix&#39; =&amp;gt; &#39;&#39;,&#xA;]);&#xA;&#xA;// Set the event dispatcher used by Eloquent models... (optional)&#xA;use Illuminate\Events\Dispatcher;&#xA;use Illuminate\Container\Container;&#xA;$capsule-&amp;gt;setEventDispatcher(new Dispatcher(new Container));&#xA;&#xA;// Make this Capsule instance available globally via static methods... (optional)&#xA;$capsule-&amp;gt;setAsGlobal();&#xA;&#xA;// Setup the Eloquent ORM... (optional; unless you&#39;ve used setEventDispatcher())&#xA;$capsule-&amp;gt;bootEloquent();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;composer require &#34;illuminate/events&#34;&lt;/code&gt; required when you need to use observers with Eloquent.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Once the Capsule instance has been registered. You may use it like so:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using The Query Builder&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;$users = Capsule::table(&#39;users&#39;)-&amp;gt;where(&#39;votes&#39;, &#39;&amp;gt;&#39;, 100)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other core methods may be accessed directly from the Capsule in the same manner as from the DB facade:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;$results = Capsule::select(&#39;select * from users where id = ?&#39;, [1]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using The Schema Builder&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;Capsule::schema()-&amp;gt;create(&#39;users&#39;, function ($table) {&#xA;    $table-&amp;gt;increments(&#39;id&#39;);&#xA;    $table-&amp;gt;string(&#39;email&#39;)-&amp;gt;unique();&#xA;    $table-&amp;gt;timestamps();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using The Eloquent ORM&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;class User extends Illuminate\Database\Eloquent\Model {}&#xA;&#xA;$users = User::where(&#39;votes&#39;, &#39;&amp;gt;&#39;, 1)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further documentation on using the various database facilities this library provides, consult the &lt;a href=&#34;https://laravel.com/docs&#34;&gt;Laravel framework documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Bacon/BaconQrCode</title>
    <updated>2022-07-23T01:32:23Z</updated>
    <id>tag:github.com,2022-07-23:/Bacon/BaconQrCode</id>
    <link href="https://github.com/Bacon/BaconQrCode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;QR Code Generator for PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;QR Code generator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Bacon/BaconQrCode/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Bacon/BaconQrCode/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;PHP CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Bacon/BaconQrCode&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Bacon/BaconQrCode/branch/master/graph/badge.svg?token=rD0HcAiEEx&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/bacon/bacon-qr-code&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/bacon/bacon-qr-code/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/bacon/bacon-qr-code&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/bacon/bacon-qr-code/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/bacon/bacon-qr-code&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/bacon/bacon-qr-code/license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;BaconQrCode is a port of QR code portion of the ZXing library. It currently only features the encoder part, but could later receive the decoder part as well.&lt;/p&gt; &#xA;&lt;p&gt;As the Reed Solomon codec implementation of the ZXing library performs quite slow in PHP, it was exchanged with the implementation by Phil Karn.&lt;/p&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use BaconQrCode\Renderer\ImageRenderer;&#xA;use BaconQrCode\Renderer\Image\ImagickImageBackEnd;&#xA;use BaconQrCode\Renderer\RendererStyle\RendererStyle;&#xA;use BaconQrCode\Writer;&#xA;&#xA;$renderer = new ImageRenderer(&#xA;    new RendererStyle(400),&#xA;    new ImagickImageBackEnd()&#xA;);&#xA;$writer = new Writer($renderer);&#xA;$writer-&amp;gt;writeFile(&#39;Hello World!&#39;, &#39;qrcode.png&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available image renderer back ends&lt;/h2&gt; &#xA;&lt;p&gt;BaconQrCode comes with multiple back ends for rendering images. Currently included are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ImagickImageBackEnd&lt;/code&gt;: renders raster images using the Imagick library&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SvgImageBackEnd&lt;/code&gt;: renders SVG files using XMLWriter&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EpsImageBackEnd&lt;/code&gt;: renders EPS files&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>stripe/stripe-php</title>
    <updated>2022-07-23T01:32:23Z</updated>
    <id>tag:github.com,2022-07-23:/stripe/stripe-php</id>
    <link href="https://github.com/stripe/stripe-php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP library for the Stripe API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stripe PHP bindings&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stripe/stripe-php/actions?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/stripe/stripe-php/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/stripe/stripe-php&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/stripe/stripe-php/v/stable.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/stripe/stripe-php&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/stripe/stripe-php/downloads.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/stripe/stripe-php&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/stripe/stripe-php/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Stripe PHP library provides convenient access to the Stripe API from applications written in the PHP language. It includes a pre-defined set of classes for API resources that initialize themselves dynamically from API responses which makes it compatible with a wide range of versions of the Stripe API.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;PHP 5.6.0 and later.&lt;/p&gt; &#xA;&lt;h2&gt;Composer&lt;/h2&gt; &#xA;&lt;p&gt;You can install the bindings via &lt;a href=&#34;http://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;. Run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require stripe/stripe-php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the bindings, use Composer&#39;s &lt;a href=&#34;https://getcomposer.org/doc/01-basic-usage.md#autoloading&#34;&gt;autoload&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once(&#39;vendor/autoload.php&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you do not wish to use Composer, you can download the &lt;a href=&#34;https://github.com/stripe/stripe-php/releases&#34;&gt;latest release&lt;/a&gt;. Then, to use the bindings, include the &lt;code&gt;init.php&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once(&#39;/path/to/stripe-php/init.php&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The bindings require the following extensions in order to work properly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://secure.php.net/manual/en/book.curl.php&#34;&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/a&gt;, although you can use your own non-cURL client if you prefer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://secure.php.net/manual/en/book.json.php&#34;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://secure.php.net/manual/en/book.mbstring.php&#34;&gt;&lt;code&gt;mbstring&lt;/code&gt;&lt;/a&gt; (Multibyte String)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use Composer, these dependencies should be handled automatically. If you install manually, you&#39;ll want to make sure that these extensions are available.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Simple usage looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$stripe = new \Stripe\StripeClient(&#39;sk_test_BQokikJOvBiI2HlWgH4olfQ2&#39;);&#xA;$customer = $stripe-&amp;gt;customers-&amp;gt;create([&#xA;    &#39;description&#39; =&amp;gt; &#39;example customer&#39;,&#xA;    &#39;email&#39; =&amp;gt; &#39;email@example.com&#39;,&#xA;    &#39;payment_method&#39; =&amp;gt; &#39;pm_card_visa&#39;,&#xA;]);&#xA;echo $customer;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Client/service patterns vs legacy patterns&lt;/h3&gt; &#xA;&lt;p&gt;You can continue to use the legacy integration patterns used prior to version &lt;a href=&#34;https://github.com/stripe/stripe-php/raw/master/CHANGELOG.md#7330---2020-05-14&#34;&gt;7.33.0&lt;/a&gt;. Review the &lt;a href=&#34;https://github.com/stripe/stripe-php/wiki/Migration-to-StripeClient-and-services-in-7.33.0&#34;&gt;migration guide&lt;/a&gt; for the backwards-compatible client/services pattern changes.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://stripe.com/docs/api/?lang=php#intro&#34;&gt;PHP API docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.youtube.com/playlist?list=PLy1nL-pvL2M6cUbiHrfMkXxZ9j9SGBxFE&#34;&gt;video demonstrations&lt;/a&gt; covering how to use the library.&lt;/p&gt; &#xA;&lt;h2&gt;Legacy Version Support&lt;/h2&gt; &#xA;&lt;h3&gt;PHP 5.4 &amp;amp; 5.5&lt;/h3&gt; &#xA;&lt;p&gt;If you are using PHP 5.4 or 5.5, you should consider upgrading your environment as those versions have been past end of life since September 2015 and July 2016 respectively. Otherwise, you can still use Stripe by downloading stripe-php v6.43.1 (&lt;a href=&#34;https://github.com/stripe/stripe-php/archive/v6.43.1.zip&#34;&gt;zip&lt;/a&gt;, &lt;a href=&#34;https://github.com/stripe/stripe-php/archive/6.43.1.tar.gz&#34;&gt;tar.gz&lt;/a&gt;) from our &lt;a href=&#34;https://github.com/stripe/stripe-php/releases&#34;&gt;releases page&lt;/a&gt;. This version will work but might not support recent features we added since the version was released and upgrading PHP is the best course of action.&lt;/p&gt; &#xA;&lt;h3&gt;PHP 5.3&lt;/h3&gt; &#xA;&lt;p&gt;If you are using PHP 5.3, you should upgrade your environment as this version has been past end of life since August 2014. Otherwise, you can download v5.9.2 (&lt;a href=&#34;https://github.com/stripe/stripe-php/archive/v5.9.2.zip&#34;&gt;zip&lt;/a&gt;, &lt;a href=&#34;https://github.com/stripe/stripe-php/archive/v5.9.2.tar.gz&#34;&gt;tar.gz&lt;/a&gt;) from our &lt;a href=&#34;https://github.com/stripe/stripe-php/releases&#34;&gt;releases page&lt;/a&gt;. This version will continue to work with new versions of the Stripe API for all common uses.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Request Timeouts&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; We do not recommend decreasing the timeout for non-read-only calls (e.g. charge creation), since even if you locally timeout, the request on Stripe&#39;s side can still complete. If you are decreasing timeouts on these calls, make sure to use &lt;a href=&#34;https://stripe.com/docs/api/?lang=php#idempotent_requests&#34;&gt;idempotency tokens&lt;/a&gt; to avoid executing the same transaction twice as a result of timeout retry logic.&lt;/p&gt; &#xA;&lt;p&gt;To modify request timeouts (connect or total, in seconds) you&#39;ll need to tell the API client to use a CurlClient other than its default. You&#39;ll set the timeouts in that CurlClient.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// set up your tweaked Curl client&#xA;$curl = new \Stripe\HttpClient\CurlClient();&#xA;$curl-&amp;gt;setTimeout(10); // default is \Stripe\HttpClient\CurlClient::DEFAULT_TIMEOUT&#xA;$curl-&amp;gt;setConnectTimeout(5); // default is \Stripe\HttpClient\CurlClient::DEFAULT_CONNECT_TIMEOUT&#xA;&#xA;echo $curl-&amp;gt;getTimeout(); // 10&#xA;echo $curl-&amp;gt;getConnectTimeout(); // 5&#xA;&#xA;// tell Stripe to use the tweaked client&#xA;\Stripe\ApiRequestor::setHttpClient($curl);&#xA;&#xA;// use the Stripe API client as you normally would&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom cURL Options (e.g. proxies)&lt;/h2&gt; &#xA;&lt;p&gt;Need to set a proxy for your requests? Pass in the requisite &lt;code&gt;CURLOPT_*&lt;/code&gt; array to the CurlClient constructor, using the same syntax as &lt;code&gt;curl_stopt_array()&lt;/code&gt;. This will set the default cURL options for each HTTP request made by the SDK, though many more common options (e.g. timeouts; see above on how to set those) will be overridden by the client even if set here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// set up your tweaked Curl client&#xA;$curl = new \Stripe\HttpClient\CurlClient([CURLOPT_PROXY =&amp;gt; &#39;proxy.local:80&#39;]);&#xA;// tell Stripe to use the tweaked client&#xA;\Stripe\ApiRequestor::setHttpClient($curl);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternately, a callable can be passed to the CurlClient constructor that returns the above array based on request inputs. See &lt;code&gt;testDefaultOptions()&lt;/code&gt; in &lt;code&gt;tests/CurlClientTest.php&lt;/code&gt; for an example of this behavior. Note that the callable is called at the beginning of every API request, before the request is sent.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring a Logger&lt;/h3&gt; &#xA;&lt;p&gt;The library does minimal logging, but it can be configured with a &lt;a href=&#34;http://www.php-fig.org/psr/psr-3/&#34;&gt;&lt;code&gt;PSR-3&lt;/code&gt; compatible logger&lt;/a&gt; so that messages end up there instead of &lt;code&gt;error_log&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Stripe\Stripe::setLogger($logger);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing response data&lt;/h3&gt; &#xA;&lt;p&gt;You can access the data from the last API response on any object via &lt;code&gt;getLastResponse()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$customer = $stripe-&amp;gt;customers-&amp;gt;create([&#xA;    &#39;description&#39; =&amp;gt; &#39;example customer&#39;,&#xA;]);&#xA;echo $customer-&amp;gt;getLastResponse()-&amp;gt;headers[&#39;Request-Id&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSL / TLS compatibility issues&lt;/h3&gt; &#xA;&lt;p&gt;Stripe&#39;s API now requires that &lt;a href=&#34;https://stripe.com/blog/upgrading-tls&#34;&gt;all connections use TLS 1.2&lt;/a&gt;. Some systems (most notably some older CentOS and RHEL versions) are capable of using TLS 1.2 but will use TLS 1.0 or 1.1 by default. In this case, you&#39;d get an &lt;code&gt;invalid_request_error&lt;/code&gt; with the following error message: &#34;Stripe no longer supports API requests made with TLS 1.0. Please initiate HTTPS connections with TLS 1.2 or later. You can learn more about this at &lt;a href=&#34;https://stripe.com/blog/upgrading-tls&#34;&gt;https://stripe.com/blog/upgrading-tls&lt;/a&gt;.&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The recommended course of action is to &lt;a href=&#34;https://support.stripe.com/questions/how-do-i-upgrade-my-stripe-integration-from-tls-1-0-to-tls-1-2#php&#34;&gt;upgrade your cURL and OpenSSL packages&lt;/a&gt; so that TLS 1.2 is used by default, but if that is not possible, you might be able to solve the issue by setting the &lt;code&gt;CURLOPT_SSLVERSION&lt;/code&gt; option to either &lt;code&gt;CURL_SSLVERSION_TLSv1&lt;/code&gt; or &lt;code&gt;CURL_SSLVERSION_TLSv1_2&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$curl = new \Stripe\HttpClient\CurlClient([CURLOPT_SSLVERSION =&amp;gt; CURL_SSLVERSION_TLSv1]);&#xA;\Stripe\ApiRequestor::setHttpClient($curl);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Per-request Configuration&lt;/h3&gt; &#xA;&lt;p&gt;For apps that need to use multiple keys during the lifetime of a process, like one that uses &lt;a href=&#34;https://stripe.com/connect&#34;&gt;Stripe Connect&lt;/a&gt;, it&#39;s also possible to set a per-request key and/or account:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$customers = $stripe-&amp;gt;customers-&amp;gt;all([],[&#xA;    &#39;api_key&#39; =&amp;gt; &#39;sk_test_...&#39;,&#xA;    &#39;stripe_account&#39; =&amp;gt; &#39;acct_...&#39;&#xA;]);&#xA;&#xA;$stripe-&amp;gt;customers-&amp;gt;retrieve(&#39;cus_123456789&#39;, [], [&#xA;    &#39;api_key&#39; =&amp;gt; &#39;sk_test_...&#39;,&#xA;    &#39;stripe_account&#39; =&amp;gt; &#39;acct_...&#39;&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring CA Bundles&lt;/h3&gt; &#xA;&lt;p&gt;By default, the library will use its own internal bundle of known CA certificates, but it&#39;s possible to configure your own:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Stripe\Stripe::setCABundlePath(&#34;path/to/ca/bundle&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Automatic Retries&lt;/h3&gt; &#xA;&lt;p&gt;The library can be configured to automatically retry requests that fail due to an intermittent network problem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Stripe\Stripe::setMaxNetworkRetries(2);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stripe.com/docs/api/?lang=php#idempotent_requests&#34;&gt;Idempotency keys&lt;/a&gt; are added to requests to guarantee that retries are safe.&lt;/p&gt; &#xA;&lt;h3&gt;Request latency telemetry&lt;/h3&gt; &#xA;&lt;p&gt;By default, the library sends request latency telemetry to Stripe. These numbers help Stripe improve the overall latency of its API for all users.&lt;/p&gt; &#xA;&lt;p&gt;You can disable this behavior if you prefer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Stripe\Stripe::setEnableTelemetry(false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Get &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;. For example, on Mac OS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install composer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test suite depends on &lt;a href=&#34;https://github.com/stripe/stripe-mock&#34;&gt;stripe-mock&lt;/a&gt;, so make sure to fetch and run it from a background terminal (&lt;a href=&#34;https://github.com/stripe/stripe-mock&#34;&gt;stripe-mock&#39;s README&lt;/a&gt; also contains instructions for installing via Homebrew and other methods):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u github.com/stripe/stripe-mock&#xA;stripe-mock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies as mentioned above (which will resolve &lt;a href=&#34;http://packagist.org/packages/phpunit/phpunit&#34;&gt;PHPUnit&lt;/a&gt;), then you can run the test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpunit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to run an individual test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpunit tests/Stripe/UtilTest.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update bundled CA certificates from the &lt;a href=&#34;http://curl.haxx.se/docs/caextract.html&#34;&gt;Mozilla cURL release&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./update_certs.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The library uses &lt;a href=&#34;https://github.com/FriendsOfPHP/PHP-CS-Fixer&#34;&gt;PHP CS Fixer&lt;/a&gt; for code formatting. Code must be formatted before PRs are submitted, otherwise CI will fail. Run the formatter with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/php-cs-fixer fix -v .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Attention plugin developers&lt;/h2&gt; &#xA;&lt;p&gt;Are you writing a plugin that integrates Stripe and embeds our library? Then please use the &lt;code&gt;setAppInfo&lt;/code&gt; function to identify your plugin. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Stripe\Stripe::setAppInfo(&#34;MyAwesomePlugin&#34;, &#34;1.2.34&#34;, &#34;https://myawesomeplugin.info&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The method should be called once, before any request is sent to the API. The second and third parameters are optional.&lt;/p&gt; &#xA;&lt;h3&gt;SSL / TLS configuration option&lt;/h3&gt; &#xA;&lt;p&gt;See the &#34;SSL / TLS compatibility issues&#34; paragraph above for full context. If you want to ensure that your plugin can be used on all systems, you should add a configuration option to let your users choose between different values for &lt;code&gt;CURLOPT_SSLVERSION&lt;/code&gt;: none (default), &lt;code&gt;CURL_SSLVERSION_TLSv1&lt;/code&gt; and &lt;code&gt;CURL_SSLVERSION_TLSv1_2&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>