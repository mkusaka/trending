<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-01T01:33:37Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DirectoryTree/Authorization</title>
    <updated>2024-05-01T01:33:37Z</updated>
    <id>tag:github.com,2024-05-01:/DirectoryTree/Authorization</id>
    <link href="https://github.com/DirectoryTree/Authorization" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy, native Laravel user authorization.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/DirectoryTree/Authorization/raw/master/art/logo.svg?sanitize=true&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/DirectoryTree/Authorization/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/directorytree/authorization/run-tests.yml?branch=master&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/DirectoryTree/Authorization&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/DirectoryTree/Authorization.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/DirectoryTree/Authorization&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/DirectoryTree/Authorization.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/DirectoryTree/Authorization&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/DirectoryTree/Authorization.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; An easy, native role / permission management system for Laravel. &lt;/p&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Authorization/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Authorization/master/#migration-customization&#34;&gt;Migration Customization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Authorization/master/#model-customization&#34;&gt;Model Customization&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Authorization/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Authorization/master/#checking-permissions--roles&#34;&gt;Checking Permissions &amp;amp; Roles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Authorization/master/#caching&#34;&gt;Caching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Authorization/master/#gate-registration&#34;&gt;Gate Registration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Authorization/master/#middleware&#34;&gt;Middleware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Authorization/master/#running-tests&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To get started, install Authorization via the Composer package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require directorytree/authorization&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Authorization service provider registers its own database migration directory with the framework, so you should migrate your database after installing the package. The Authorization migrations will create the tables your application needs to store roles and permissions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now insert the &lt;code&gt;DirectoryTree\Authorization\Traits\Authorizable&lt;/code&gt; onto your &lt;code&gt;App\Models\User&lt;/code&gt; model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Models;&#xA;&#xA;use DirectoryTree\Authorization\Traits\Authorizable;&#xA;use Illuminate\Foundation\Auth\User as Authenticatable;&#xA;&#xA;class User extends Authenticatable&#xA;{&#xA;    use Authorizable;&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now perform user authorization.&lt;/p&gt; &#xA;&lt;h3&gt;Migration Customization&lt;/h3&gt; &#xA;&lt;p&gt;If you would not like to use Authorization&#39;s default migrations, you should call the &lt;code&gt;Authorization::ignoreMigrations&lt;/code&gt; method in the &lt;code&gt;register&lt;/code&gt; method of your &lt;code&gt;AppServiceProvider&lt;/code&gt;. You may export the default migrations using &lt;code&gt;php artisan vendor:publish --tag=authorization-migrations&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use DirectoryTree\Authorization\Authorization;&#xA;&#xA;/**&#xA; * Register any application services.&#xA; *&#xA; * @return void&#xA; */&#xA;public function register()&#xA;{&#xA;    Authorization::ignoreMigrations();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model Customization&lt;/h3&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;App\Models\User&lt;/code&gt; class is registered as the authorizable user model.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re free to extend the models used internally by Authorization, or create your own.&lt;/p&gt; &#xA;&lt;p&gt;Instruct Authorization to use your own models via the &lt;code&gt;Authorization&lt;/code&gt; class in your &lt;code&gt;AuthServiceProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use DirectoryTree\Authorization\Authorization;&#xA;&#xA;/**&#xA; * Register any authentication / authorization services.&#xA; *&#xA; * @return void&#xA; */&#xA;public function boot()&#xA;{&#xA;    $this-&amp;gt;registerPolicies();&#xA;&#xA;    Authorization::useUserModel(\App\Models\User::class);&#xA;    Authorization::useRoleModel(\App\Models\Role::class);&#xA;    Authorization::usePermissionModel(\App\Models\Permission::class);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to add the relevant traits for each of your custom models:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Role Model&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace App\Models;&#xA;&#xA;use Illuminate\Database\Eloquent\Model;&#xA;use DirectoryTree\Authorization\Traits\ManagesPermissions;&#xA;&#xA;class Role extends Model&#xA;{&#xA;    use ManagesPermissions;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Permission Model&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace App\Models;&#xA;&#xA;use Illuminate\Database\Eloquent\Model;&#xA;use DirectoryTree\Authorization\Traits\HasUsers;&#xA;use DirectoryTree\Authorization\Traits\HasRoles;&#xA;use DirectoryTree\Authorization\Traits\ClearsCachedPermissions;&#xA;&#xA;class Permission extends Model&#xA;{&#xA;    use HasUsers, HasRoles, ClearsCachedPermissions;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Authorization uses native Laravel relationships, so there&#39;s no need to learn a new API if you don&#39;t want to.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Due to Authorization&#39;s trait based implementation, all of Authorization&#39;s functionality can be overridden or extended with you own implementation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Managing Roles &amp;amp; Permissions&lt;/h3&gt; &#xA;&lt;p&gt;Create a permission:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use DirectoryTree\Authorization\Permission;&#xA;&#xA;$createUsers = Permission::create([&#xA;    &#39;name&#39; =&amp;gt; &#39;users.create&#39;,&#xA;    &#39;label&#39; =&amp;gt; &#39;Create Users&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a role:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use DirectoryTree\Authorization\Role;&#xA;&#xA;$admin = Role::create([&#xA;    &#39;name&#39; =&amp;gt; &#39;administrator&#39;,&#xA;    &#39;label&#39; =&amp;gt; &#39;Admin&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grant the permission to a role:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$admin-&amp;gt;permissions()-&amp;gt;save($createUsers);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now assign the role to the user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;roles()-&amp;gt;save($admin);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also use the &lt;code&gt;grant()&lt;/code&gt; or &lt;code&gt;revoke()&lt;/code&gt; method on a &lt;code&gt;Role&lt;/code&gt; model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Using the permission&#39;s name:&#xA;$admin-&amp;gt;grant(&#39;users.create&#39;);&#xA;&#xA;// Using a permission model:&#xA;$admin-&amp;gt;grant($permission);&#xA;&#xA;// Granting multiple permissions:&#xA;$admin-&amp;gt;grant([&#39;users.create&#39;, &#39;users.edit&#39;]);&#xA;&#xA;// Granting a collection of models:&#xA;$admin-&amp;gt;grant(Permission::all());&#xA;&#xA;// Using a mix of models and permission name:&#xA;$admin-&amp;gt;grant([$createUsers, &#39;users.edit&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also sync a role&#39;s permissions using the &lt;code&gt;grantOnly()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// All permissions will be removed except, except for the given:&#xA;$admin-&amp;gt;grantOnly(&#39;users.create&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Using the permission&#39;s name:&#xA;$admin-&amp;gt;revoke(&#39;users.create&#39;);&#xA;&#xA;// Using a permission model:&#xA;$admin-&amp;gt;revoke($permission);&#xA;&#xA;// Revoking multiple permissions:&#xA;$admin-&amp;gt;revoke([&#39;users.create&#39;, &#39;users.edit&#39;]);&#xA;&#xA;// Revoking a collection of models:&#xA;$admin-&amp;gt;revoke(Permission::all());&#xA;&#xA;// Using a mix of models and permission name:&#xA;$admin-&amp;gt;revoke([$createUsers, &#39;users.edit&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also detach all permissions from a role using &lt;code&gt;revokeAll()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$admin-&amp;gt;revokeAll();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Managing Users &amp;amp; Permissions&lt;/h3&gt; &#xA;&lt;p&gt;You can also create user specific permissions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$createUsers = Permission::create([&#xA;    &#39;name&#39; =&amp;gt; &#39;users.create&#39;,&#xA;    &#39;label&#39; =&amp;gt; &#39;Create Users&#39;,&#xA;]);&#xA;&#xA;$user-&amp;gt;permissions()-&amp;gt;save($createUsers);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As with roles, may also use the &lt;code&gt;grant()&lt;/code&gt; or &lt;code&gt;revoke()&lt;/code&gt; method on an authorizable &lt;code&gt;User&lt;/code&gt; model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Using the permission&#39;s name:&#xA;$user-&amp;gt;grant(&#39;users.create&#39;);&#xA;&#xA;// Using a permission model:&#xA;$user-&amp;gt;grant($permission);&#xA;&#xA;// Granting multiple permissions:&#xA;$user-&amp;gt;grant([&#39;users.create&#39;, &#39;users.edit&#39;]);&#xA;&#xA;// Granting a collection of models:&#xA;$user-&amp;gt;grant(Permission::all());&#xA;&#xA;// Using a mix of models and permission name:&#xA;$user-&amp;gt;grant([$createUsers, &#39;users.edit&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also sync a users&#39; permissions using the &lt;code&gt;grantOnly()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// All permissions will be removed except, except for the given:&#xA;$user-&amp;gt;grantOnly(&#39;users.create&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Using the permission&#39;s name:&#xA;$user-&amp;gt;revoke(&#39;users.create&#39;);&#xA;&#xA;// Using a permission model:&#xA;$user-&amp;gt;revoke($permission);&#xA;&#xA;// Granting multiple permissions:&#xA;$user-&amp;gt;revoke([&#39;users.create&#39;, &#39;users.edit&#39;]);&#xA;&#xA;// Granting a collection of models:&#xA;$user-&amp;gt;revoke(Permission::all());&#xA;&#xA;// Using a mix of models and permission name:&#xA;$user-&amp;gt;revoke([$createUsers, &#39;users.edit&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking Permissions &amp;amp; Roles&lt;/h3&gt; &#xA;&lt;p&gt;Using Laravel&#39;s native &lt;code&gt;can()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if (Auth::user()-&amp;gt;can(&#39;users.create&#39;)) {&#xA;    // This user can create other users.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Laravel&#39;s native &lt;code&gt;authorize()&lt;/code&gt; method in your controllers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function create()&#xA;{&#xA;    $this-&amp;gt;authorize(&#39;users.create&#39;);&#xA;&#xA;    User::create([&#39;...&#39;]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Laravel&#39;s native &lt;code&gt;Gate&lt;/code&gt; facade:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if (Gate::allows(&#39;users.create&#39;)) {&#xA;    //&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Laravel&#39;s native &lt;code&gt;@can&lt;/code&gt; directive in your views:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;@can(&#39;users.create&#39;)&#xA;    &amp;lt;!-- This user can create other users. --&amp;gt;&#xA;@endcan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking Permissions &amp;amp; Roles (Using Authorization Package Methods)&lt;/h3&gt; &#xA;&lt;p&gt;Checking for permission:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Using the permissions name.&#xA;if ($user-&amp;gt;hasPermission(&#39;users.create&#39;)) {&#xA;    //&#xA;}&#xA;&#xA;// Using the permissions model.&#xA;if ($user-&amp;gt;hasPermission($createUsers)) {&#xA;    //&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checking for multiple permissions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;hasPermissions([&#39;users.create&#39;, &#39;users.edit&#39;])) {&#xA;    // This user has both creation and edit rights.&#xA;} else {&#xA;    // The user doesn&#39;t have one of the specified permissions.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checking if the user has any permissions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;hasAnyPermissions([&#39;users.create&#39;, &#39;users.edit&#39;, &#39;users.destroy&#39;])) {&#xA;    // This user either has create, edit or destroy permissions.&#xA;} else {&#xA;    // The user doesn&#39;t have any of the specified permissions.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checking if the user has a role:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;hasRole(&#39;administrator&#39;)) {&#xA;    // This user is an administrator.&#xA;} else {&#xA;    // The user isn&#39;t an administrator.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checking if the user has specified roles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;hasRoles([&#39;administrator&#39;, &#39;member&#39;])) {&#xA;    // This user is an administrator and a member.&#xA;} else {&#xA;    // The user isn&#39;t an administrator or member.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checking if the user has any specified roles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;hasAnyRoles([&#39;administrator&#39;, &#39;member&#39;, &#39;guest&#39;])) {&#xA;    // This user is either an administrator, member or guest.&#xA;} else {&#xA;    // The user doesn&#39;t have any of these roles.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caching&lt;/h3&gt; &#xA;&lt;p&gt;By default all permissions are cached to prevent them from being retrieved on every request.&lt;/p&gt; &#xA;&lt;p&gt;This cache is automatically flushed when permissions are created, updated, or deleted.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to disable the cache, call &lt;code&gt;Authorization::disablePermissionCache&lt;/code&gt; in your &lt;code&gt;AuthServiceProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use DirectoryTree\Authorization\Authorization;&#xA;&#xA;/**&#xA; * Register any authentication / authorization services.&#xA; *&#xA; * @return void&#xA; */&#xA;public function boot()&#xA;{&#xA;    $this-&amp;gt;registerPolicies();&#xA;&#xA;    Authorization::disablePermissionCache();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Cache Key&lt;/h4&gt; &#xA;&lt;p&gt;By default, the permission cache key is &lt;code&gt;authorization.permissions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To alter the cache key, call &lt;code&gt;Authorization::cacheKey&lt;/code&gt; in your &lt;code&gt;AuthServiceProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use DirectoryTree\Authorization\Authorization;&#xA;&#xA;/**&#xA; * Register any authentication / authorization services.&#xA; *&#xA; * @return void&#xA; */&#xA;public function boot()&#xA;{&#xA;    $this-&amp;gt;registerPolicies();&#xA;&#xA;    Authorization::cacheKey(&#39;my-key&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Cache Expiry&lt;/h4&gt; &#xA;&lt;p&gt;By default, the permission cache will expire daily.&lt;/p&gt; &#xA;&lt;p&gt;To alter this expiry date, call &lt;code&gt;Authorization::cacheExpiresIn&lt;/code&gt; in your &lt;code&gt;AuthServiceProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use DirectoryTree\Authorization\Authorization;&#xA;&#xA;/**&#xA; * Register any authentication / authorization services.&#xA; *&#xA; * @return void&#xA; */&#xA;public function boot()&#xA;{&#xA;    $this-&amp;gt;registerPolicies();&#xA;&#xA;    Authorization::cacheExpiresIn(now()-&amp;gt;addWeek());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gate Registration&lt;/h3&gt; &#xA;&lt;p&gt;By default all permissions you create are registered in Laravel&#39;s Gate.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to disable this, call &lt;code&gt;Authorization::disableGateRegistration&lt;/code&gt; in your &lt;code&gt;AuthServiceProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use DirectoryTree\Authorization\Authorization;&#xA;&#xA;/**&#xA; * Register any authentication / authorization services.&#xA; *&#xA; * @return void&#xA; */&#xA;public function boot()&#xA;{&#xA;    $this-&amp;gt;registerPolicies();&#xA;&#xA;    Authorization::disableGateRegistration();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Middleware&lt;/h3&gt; &#xA;&lt;p&gt;Authorization includes two useful middleware classes you can utilize for your routes.&lt;/p&gt; &#xA;&lt;p&gt;Insert them into your &lt;code&gt;app/Http/Kernel.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * The application&#39;s route middleware.&#xA; *&#xA; * These middleware may be assigned to groups or used individually.&#xA; *&#xA; * @var array&#xA; */&#xA;protected $routeMiddleware = [&#xA;    &#39;auth&#39; =&amp;gt; \App\Http\Middleware\Authenticate::class,&#xA;    &#39;auth.basic&#39; =&amp;gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,&#xA;    &#39;guest&#39; =&amp;gt; \App\Http\Middleware\RedirectIfAuthenticated::class,&#xA;    &#39;throttle&#39; =&amp;gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,&#xA;&#xA;    // The role middleware:&#xA;    &#39;role&#39; =&amp;gt; \DirectoryTree\Authorization\Middleware\RoleMiddleware::class,&#xA;&#xA;    // The permission middleware:&#xA;    &#39;permission&#39; =&amp;gt; \DirectoryTree\Authorization\Middleware\PermissionMiddleware::class,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve added them, you can start using them.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When a user does not meet the requirements using the middleware, a 403 HTTP exception is thrown.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To guard a route to only allow specific permissions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;users&#39;, [&#xA;    &#39;uses&#39; =&amp;gt; &#39;UsersController@index&#39;,&#xA;    &#39;middleware&#39; =&amp;gt; &#39;permission:users.index&#39;,&#xA;]);&#xA;&#xA;// Multiple permissions:&#xA;Route::get(&#39;users&#39;, [&#xA;    &#39;uses&#39; =&amp;gt; &#39;UsersController@index&#39;,&#xA;    // Users must have index **and** create rights to access this route.&#xA;    &#39;middleware&#39; =&amp;gt; &#39;permission:users.index,users.create&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To guard a route to allow a specific role:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;users&#39;, [&#xA;    &#39;uses&#39; =&amp;gt; &#39;UsersController@index&#39;,&#xA;    &#39;middleware&#39; =&amp;gt; &#39;role:administrator&#39;,&#xA;]);&#xA;&#xA;// Multiple roles:&#xA;Route::get(&#39;users&#39;, [&#xA;    &#39;uses&#39; =&amp;gt; &#39;UsersController@index&#39;,&#xA;    // Users must be an administrator **and** a member to access this route.&#xA;    &#39;middleware&#39; =&amp;gt; &#39;role:administrator,member&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;p&gt;To run your applications tests, &lt;strong&gt;you must&lt;/strong&gt; instantiate the &lt;code&gt;PermissionRegistrar&lt;/code&gt; inside your &lt;code&gt;TestCase::setUp()&lt;/code&gt; method &lt;strong&gt;before&lt;/strong&gt; running your tests for permissions to register properly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use DirectoryTree\Authorization\PermissionRegistrar;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function setUp() : void&#xA;{&#xA;    parent::setUp();&#xA;&#xA;    app(PermissionRegistrar::class)-&amp;gt;register();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>