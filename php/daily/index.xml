<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-02T01:34:25Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>laravel/wayfinder</title>
    <updated>2025-08-02T01:34:25Z</updated>
    <id>tag:github.com,2025-08-02:/laravel/wayfinder</id>
    <link href="https://github.com/laravel/wayfinder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/laravel/wayfinder/main/art/logo.svg?sanitize=true&#34; width=&#34;50%&#34; alt=&#34;Laravel Wayfinder&amp;nbsp;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Wayfinder bridges your Laravel backend and TypeScript frontend with zero friction. It automatically generates fully-typed, importable TypeScript functions for your controllers and routes â€” so you can call your Laravel endpoints directly in your client code just like any other function. No more hardcoding URLs, guessing route parameters, or syncing backend changes manually.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Wayfinder is currently in Beta, the API is subject to change prior to the v1.0.0 release. All notable changes will be documented in the &lt;a href=&#34;https://raw.githubusercontent.com/laravel/wayfinder/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To get started, install Wayfinder via the Composer package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require laravel/wayfinder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, install the &lt;a href=&#34;https://github.com/laravel/vite-plugin-wayfinder&#34;&gt;Wayfinder Vite plugin&lt;/a&gt; to ensure that your routes are generated during Vite&#39;s build step and also whenever your files change while running the Vite&#39;s dev server.&lt;/p&gt; &#xA;&lt;p&gt;First, install the plugin via NPM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm i -D @laravel/vite-plugin-wayfinder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, update your application&#39;s &lt;code&gt;vite.config.js&lt;/code&gt; file to watch for changes to your application&#39;s routes and controllers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { wayfinder } from &#34;@laravel/vite-plugin-wayfinder&#34;;&#xA;&#xA;export default defineConfig({&#xA;    plugins: [&#xA;        wayfinder(),&#xA;        // ...&#xA;    ],&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read about all of the plugin&#39;s configuration options in the &lt;a href=&#34;https://github.com/laravel/vite-plugin-wayfinder&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Generating TypeScript Definitions&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;wayfinder:generate&lt;/code&gt; command can be used to generate TypeScript definitions for your routes and controller methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan wayfinder:generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Wayfinder generates files in three directories (&lt;code&gt;wayfinder&lt;/code&gt;, &lt;code&gt;actions&lt;/code&gt;, and &lt;code&gt;routes&lt;/code&gt;) within &lt;code&gt;resources/js&lt;/code&gt;, but you can configure the base path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan wayfinder:generate --path=resources/js/wayfinder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--skip-actions&lt;/code&gt; and &lt;code&gt;--skip-routes&lt;/code&gt; options may be used to skip TypeScript definition generation for controller methods or routes, respectively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan wayfinder:generate --skip-actions&#xA;php artisan wayfinder:generate --skip-routes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can safely &lt;code&gt;.gitignore&lt;/code&gt; the &lt;code&gt;wayfinder&lt;/code&gt;, &lt;code&gt;actions&lt;/code&gt;, and &lt;code&gt;routes&lt;/code&gt; directories as they are completely re-generated on every build.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Wayfinder functions return an object that contains the resolved URL and default HTTP method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { show } from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;show(1); // { url: &#34;/posts/1&#34;, method: &#34;get&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you just need the URL, or would like to choose a method from the HTTP methods defined on the server, you can invoke additional methods on the Wayfinder generated function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { show } from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;show.url(1); // &#34;/posts/1&#34;&#xA;show.head(1); // { url: &#34;/posts/1&#34;, method: &#34;head&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wayfinder functions accept a variety of shapes for their arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { show, update } from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;// Single parameter action...&#xA;show(1);&#xA;show({ id: 1 });&#xA;&#xA;// Multiple parameter action...&#xA;update([1, 2]);&#xA;update({ post: 1, author: 2 });&#xA;update({ post: { id: 1 }, author: { id: 2 } });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you are using a JavaScript &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words&#34;&gt;reserved word&lt;/a&gt; such as &lt;code&gt;delete&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;, as a method in your controller, Wayfinder will rename it to &lt;code&gt;[method name]Method&lt;/code&gt; (&lt;code&gt;deleteMethod&lt;/code&gt;, &lt;code&gt;importMethod&lt;/code&gt;) when generating its functions. This is because these words are not allowed as variable declarations in JavaScript.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you&#39;ve specified a key for the parameter binding, Wayfinder will detect this and allow you to pass the value in as a property on an object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { show } from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;// Route is /posts/{post:slug}...&#xA;show(&#34;my-new-post&#34;);&#xA;show({ slug: &#34;my-new-post&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Invokable Controllers&lt;/h3&gt; &#xA;&lt;p&gt;If your controller is an invokable controller, you may simply invoke the imported Wayfinder function directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import StorePostController from &#34;@/actions/App/Http/Controllers/StorePostController&#34;;&#xA;&#xA;StorePostController();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Importing Controllers&lt;/h3&gt; &#xA;&lt;p&gt;You may also import the Wayfinder generated controller definition and invoke its individual methods on the imported object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import PostController from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;PostController.show(1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] In the example above, importing the entire controller prevents the &lt;code&gt;PostController&lt;/code&gt; from being tree-shaken, so all &lt;code&gt;PostController&lt;/code&gt; actions will be included in your final bundle.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Importing Named Routes&lt;/h3&gt; &#xA;&lt;p&gt;Wayfinder can also generate methods for your application&#39;s named routes as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { show } from &#34;@/routes/post&#34;;&#xA;&#xA;// Named route is `post.show`...&#xA;show(1); // { url: &#34;/posts/1&#34;, method: &#34;get&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conventional Forms&lt;/h3&gt; &#xA;&lt;p&gt;If your application uses conventional HTML form submissions, Wayfinder can help you out there as well. First, opt into form variants when generating your TypeScript definitions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan wayfinder:generate --with-form&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can use the &lt;code&gt;.form&lt;/code&gt; variant to generate &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; object attributes automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { store, update } from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;const Page = () =&amp;gt; (&#xA;    &amp;lt;form {...store.form()}&amp;gt;&#xA;        {/* &amp;lt;form action=&#34;/posts&#34; method=&#34;post&#34;&amp;gt; */}&#xA;        {/* ... */}&#xA;    &amp;lt;/form&amp;gt;&#xA;);&#xA;&#xA;const Page = () =&amp;gt; (&#xA;    &amp;lt;form {...update.form(1)}&amp;gt;&#xA;        {/* &amp;lt;form action=&#34;/posts/1?_method=PATCH&#34; method=&#34;post&#34;&amp;gt; */}&#xA;        {/* ... */}&#xA;    &amp;lt;/form&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your form action supports multiple methods and would like to specify a method, you can invoke additional methods on the &lt;code&gt;form&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { store, update } from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;const Page = () =&amp;gt; (&#xA;    &amp;lt;form {...update.form.put(1)}&amp;gt;&#xA;        {/* &amp;lt;form action=&#34;/posts/1?_method=PUT&#34; method=&#34;post&#34;&amp;gt; */}&#xA;        {/* ... */}&#xA;    &amp;lt;/form&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Query Parameters&lt;/h2&gt; &#xA;&lt;p&gt;All Wayfinder methods accept an optional, final &lt;code&gt;options&lt;/code&gt; argument to which you may pass a &lt;code&gt;query&lt;/code&gt; object. This object can be used to append query parameters onto the resulting URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { show } from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;const options = {&#xA;    query: {&#xA;        page: 1,&#xA;        sort_by: &#34;name&#34;,&#xA;    },&#xA;};&#xA;&#xA;show(1, options); // { url: &#34;/posts/1?page=1&amp;amp;sort_by=name&#34;, method: &#34;get&#34; }&#xA;show.get(1, options); // { url: &#34;/posts/1?page=1&amp;amp;sort_by=name&#34;, method: &#34;get&#34; }&#xA;show.url(1, options); // &#34;/posts/1?page=1&amp;amp;sort_by=name&#34;&#xA;show.form.head(1, options); // { action: &#34;/posts/1?page=1&amp;amp;sort_by=name&amp;amp;_method=HEAD&#34;, method: &#34;get&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also merge with the URL&#39;s existing parameters by passing a &lt;code&gt;mergeQuery&lt;/code&gt; object instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { show } from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;// window.location.search = &#34;?page=1&amp;amp;sort_by=category&amp;amp;q=shirt&#34;&#xA;&#xA;const options = {&#xA;    mergeQuery: {&#xA;        page: 2,&#xA;        sort_by: &#34;name&#34;,&#xA;    },&#xA;};&#xA;&#xA;show.url(1, options); // &#34;/posts/1?page=2&amp;amp;sort_by=name&amp;amp;q=shirt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to remove a parameter from the resulting URL, define the value as &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { show } from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;// window.location.search = &#34;?page=1&amp;amp;sort_by=category&amp;amp;q=shirt&#34;&#xA;&#xA;const options = {&#xA;    mergeQuery: {&#xA;        page: 2,&#xA;        sort_by: null,&#xA;    },&#xA;};&#xA;&#xA;show.url(1, options); // &#34;/posts/1?page=2&amp;amp;q=shirt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Wayfinder and Inertia&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://inertiajs.com&#34;&gt;Inertia&lt;/a&gt;, you can pass the result of a Wayfinder method directly to the &lt;code&gt;submit&lt;/code&gt; method of &lt;code&gt;useForm&lt;/code&gt;, it will automatically resolve the correct URL and method:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://inertiajs.com/forms#wayfinder&#34;&gt;https://inertiajs.com/forms#wayfinder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { useForm } from &#34;@inertiajs/react&#34;;&#xA;import { store } from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;const form = useForm({&#xA;    name: &#34;My Big Post&#34;,&#xA;});&#xA;&#xA;form.submit(store()); // Will POST to `/posts`...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also use Wayfinder in conjunction with Inertia&#39;s &lt;code&gt;Link&lt;/code&gt; component:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://inertiajs.com/links#wayfinder&#34;&gt;https://inertiajs.com/links#wayfinder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { Link } from &#34;@inertiajs/react&#34;;&#xA;import { show } from &#34;@/actions/App/Http/Controllers/PostController&#34;;&#xA;&#xA;const Nav = () =&amp;gt; &amp;lt;Link href={show(1)}&amp;gt;Show me the first post&amp;lt;/Link&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to Wayfinder! You can read the contribution guide &lt;a href=&#34;https://raw.githubusercontent.com/laravel/wayfinder/main/.github/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;In order to ensure that the Laravel community is welcoming to all, please review and abide by the &lt;a href=&#34;https://laravel.com/docs/contributions#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://github.com/laravel/wayfinder/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Wayfinder is open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/laravel/wayfinder/main/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>