<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-25T01:34:55Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kitbogashow/how-to-fix-paypal</title>
    <updated>2022-12-25T01:34:55Z</updated>
    <id>tag:github.com,2022-12-25:/kitbogashow/how-to-fix-paypal</id>
    <link href="https://github.com/kitbogashow/how-to-fix-paypal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Various ways to filter text emails to stop scammers from exploiting PayPal&#39;s invoice system.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;How to fix PayPal&#39;s invoice emails&lt;/h1&gt; &#xA;&lt;h3&gt;or more simply: how to search text for suspicious things&lt;/h3&gt; &#xA;&lt;p&gt;For months now, scammers have been able to exploit the PayPal invoice system to &#34;request money&#34; or invoice potential victims via email. These emails come from &lt;code&gt;service@paypal.com&lt;/code&gt; and therefore look legitimate at first glance. If the particular email user has a PayPal account, they will also see the money deducted in their account and a button to view said request or invoice.&lt;/p&gt; &#xA;&lt;p&gt;For more information regarding these types of scams follow &lt;a href=&#34;https://youtube.com/kitbogashow&#34;&gt;kitboga&lt;/a&gt; on youtube or twitter.&lt;/p&gt; &#xA;&lt;p&gt;An example invoice email looks like this: &lt;img src=&#34;https://raw.githubusercontent.com/kitbogashow/how-to-fix-paypal/master/assets/email.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kitbogashow/how-to-fix-paypal/master/#context-links&#34;&gt;Context links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kitbogashow/how-to-fix-paypal/master/#the-simple-way&#34;&gt;The &#34;easy&#34; way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kitbogashow/how-to-fix-paypal/master/#the-regular-expressions-way&#34;&gt;The regular expressions way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kitbogashow/how-to-fix-paypal/master/#the-how-suspicious-is-this-text-way&#34;&gt;The &#34;how suspicious is this text&#34; way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kitbogashow/how-to-fix-paypal/master/#the-obfuscated-way&#34;&gt;The obfuscated way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kitbogashow/how-to-fix-paypal/master/#the-java-way&#34;&gt;The Java Way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kitbogashow/how-to-fix-paypal/master/#the-rusty-way&#34;&gt;The RUSTy way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kitbogashow/how-to-fix-paypal/master/#want-to-help&#34;&gt;Want to help?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Context links:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paypal.com/us/security/learn-about-fake-messages&#34;&gt;PayPal&#39;s information on fake messages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The &#34;simple&#34; way:&lt;/h2&gt; &#xA;&lt;p&gt;Don&#39;t allow your users to include phone numbers in the &#34;message&#34; of an invoice.&lt;/p&gt; &#xA;&lt;p&gt;But if that somehow causes irreputable harm to your business, explore the other options below:&lt;/p&gt; &#xA;&lt;h2&gt;The regular expressions way:&lt;/h2&gt; &#xA;&lt;p&gt;Credit: @codecat&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-regex&#34;&gt;([0-9]{3,}|call|contact|\+1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run test: &lt;code&gt;$ python3 python/the_regex_way.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The &#34;how suspicious is this text&#34; way:&lt;/h2&gt; &#xA;&lt;p&gt;Credit @kitbogashow&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# various phrases to match against, and their &#34;weight&#34; of how bad they are.&#xA;sus_words = {&#xA;    &#39;cancel&#39;: 1,&#xA;    &#39;refund&#39;: 1,&#xA;    &#39;help desk&#39;: 0.5,&#xA;    &#39;authorized&#39;: 0.5,&#xA;    &#39;24 hours&#39;: 0.25,&#xA;    &#39;USD&#39;: 0.1&#xA;}&#xA;&#xA;for index, line in enumerate(lines):&#xA;    line_total_score = 0&#xA;    for word, score in sus_words.items():&#xA;        if word.lower() in line.lower():&#xA;            line_total_score += score&#xA;&#xA;    # decide what to do if the score is too high&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run test: &lt;code&gt;$ python python/score_text.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The obfuscated way:&lt;/h2&gt; &#xA;&lt;p&gt;Credit: @codecat&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char l[512];int c(char f[]){int i=0,m=0,c;while(c=tolower(l[i++])){char&#xA;e=tolower(f[m]);if(!e)return 1;else if(c==e){if(f[m+++1]==&#39;\0&#39;)return 1&#xA;;}else m=0;}return 0;}int main(){int s=0,t=0;FILE*fh=fopen(&#34;../invoice&#34;&#xA;&#34;s.txt&#34;,&#34;rb&#34;);while(fgets(l,512,fh))++t&amp;amp;&amp;amp;(c(&#34;suspicious&#34;)||c(&#34;unauthor&#34;&#xA;&#34;ized&#34;)||c(&#34;+1&#34;)||c(&#34;geek squad&#34;)||c(&#34; call&#34;))&amp;amp;&amp;amp;s++;printf(&#34;%d / %d\n&#34;,&#xA;s,t);}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The one line node.js way:&lt;/h2&gt; &#xA;&lt;p&gt;Credit: @Nomnivore&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import(&#34;fs&#34;).then((fs) =&amp;gt; fs.readFileSync(&#34;./invoices.txt&#34;).toString().trim().split(&#34;\n&#34;).forEach((l, n) =&amp;gt; l.search(/([0-9]{3,}|call|contact|\\+1)/) &amp;gt;= 0 ? console.log(`line ${n} is likely a scam`) : console.log(`line ${n} is likely not a scam`)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see &lt;code&gt;javascript/scamGoBye.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The Java Way:&lt;/h2&gt; &#xA;&lt;p&gt;Credit: @Gamer1120 / @datatags&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;private static final Pattern PATTERN = Pattern.compile(&#34;[0-9]{3,}|call|contact|\\\\+1&#34;);&#xA;public static void main(String[] args) {&#xA;    try (BufferedReader reader = new BufferedReader(new FileReader(&#34;invoices.txt&#34;))) {&#xA;        reader.lines().forEach(line -&amp;gt; {&#xA;            if (PATTERN.matcher(line).find()){&#xA;                System.out.println(&#34;à¶ž sus thing found: &#34; + line);&#xA;            }&#xA;        });&#xA;    } catch (IOException e) {&#xA;        e.printStackTrace();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see &lt;code&gt;java/src/main/java/FixPaypalRegex.java&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The RUSTy way:&lt;/h2&gt; &#xA;&lt;p&gt;Credit: @jasonverbeek&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fn rate_lines() -&amp;gt; Result&amp;lt;()&amp;gt; {&#xA;    let file = File::open(&#34;../../invoices.txt&#34;)&#xA;        .or_else(|_| ErrorType::IOError.as_error(&#34;Could not open invoices.txt&#34;))?;&#xA;    let lines = std::io::BufReader::new(file).lines();&#xA;&#xA;    for (i, line) in lines.enumerate() {&#xA;        let mut score = 0;&#xA;        if let Ok(line_str) = line {&#xA;            for sussy in SUSSY_WUSSY {&#xA;                if line_str.to_lowercase().contains(sussy) {&#xA;                    score += 1;&#xA;                }&#xA;            }&#xA;        }&#xA;        println!(&#34;line {} has a sussy wussy score of {}&#34;, i, score);&#xA;    }&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see &lt;code&gt;rust/sussy-wussy-meter&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The GO way:&lt;/h2&gt; &#xA;&lt;p&gt;Credit: @McChronicle&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;regex := regexp.MustCompile(`([0-9]{3,}|call|contact|\+1)`)&#xA;for _, message := range messages {&#xA;    if regex.MatchString(message) {&#xA;        matches++&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see &lt;code&gt;go/the_regex_way.go&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The Lua way:&lt;/h2&gt; &#xA;&lt;p&gt;Credit: @not-optikk&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for word in text:gmatch(&#39;%w+&#39;) do&#xA;    if flagged_words[word] then&#xA;        sus_score = sus_score + flagged_words[word]&#xA;    elseif word:match(&#39;%d+&#39;) == word and not whitelisted_numbers[word] then&#xA;        table.insert(numbers, word)&#xA;    end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see &lt;code&gt;lua/main.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The Bash way:&lt;/h2&gt; &#xA;&lt;p&gt;Credit: @emp500&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/bash&#xA;&#xA;count=0&#xA;while IFS= read -r line&#xA;do&#xA;  if echo $line | grep -Piq &#34;([0-9]{3,}|call|contact|\+1)&#34;; then&#xA;    echo &#34;sus line found&#34;&#xA;    let count++&#xA;  fi&#xA;done &amp;lt; &#34;../invoices.txt&#34;&#xA;&#xA;echo &#34;sus lines: $count&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see &lt;code&gt;bash/run.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Want to help?&lt;/h3&gt; &#xA;&lt;p&gt;There are currently (12/22/22) 12 sample invoices in text form in &lt;code&gt;invoices.txt&lt;/code&gt;. If you have some code that could solve this task, please let me know and I will try to keep this up to date.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doctrine/migrations</title>
    <updated>2022-12-25T01:34:55Z</updated>
    <id>tag:github.com,2022-12-25:/doctrine/migrations</id>
    <link href="https://github.com/doctrine/migrations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Doctrine Database Migrations Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Doctrine Migrations&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/doctrine/migrations/actions&#34;&gt;&lt;img src=&#34;https://github.com/doctrine/migrations/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/doctrine/migrations/branch/3.1.x&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/doctrine/migrations/branch/3.1.x/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/doctrine/migrations&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dm/doctrine/migrations&#34; alt=&#34;Packagist Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/doctrine/migrations&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/doctrine/migrations&#34; alt=&#34;Packagist Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/doctrine/migrations/3.5.x/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/doctrine/migrations&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All available documentation can be found &lt;a href=&#34;https://www.doctrine-project.org/projects/migrations.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>inertiajs/inertia-laravel</title>
    <updated>2022-12-25T01:34:55Z</updated>
    <id>tag:github.com,2022-12-25:/inertiajs/inertia-laravel</id>
    <link href="https://github.com/inertiajs/inertia-laravel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Laravel adapter for Inertia.js.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Inertia.js Laravel Adapter&lt;/h1&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://github.com/inertiajs/inertia-laravel/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/inertiajs/inertia-laravel.svg?style=flat-square&#34; alt=&#34;Latest Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/inertiajs/inertia-laravel/actions?query=workflow%3Atests+branch%3Amaster&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/inertiajs/inertia-laravel/tests/master.svg?style=flat-square&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://styleci.io/repos/174395905&#34;&gt;&lt;img src=&#34;https://styleci.io/repos/174395905/shield&#34; alt=&#34;StyleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/inertiajs/inertia-laravel&#34;&gt; &lt;img src=&#34;https://img.shields.io/packagist/dt/inertiajs/inertia-laravel.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://inertiajs.com/&#34;&gt;inertiajs.com&lt;/a&gt; to learn more.&lt;/p&gt;</summary>
  </entry>
</feed>