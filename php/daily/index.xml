<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-10T01:32:15Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>statix-php/server</title>
    <updated>2022-08-10T01:32:15Z</updated>
    <id>tag:github.com,2022-08-10:/statix-php/server</id>
    <link href="https://github.com/statix-php/server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An object oriented wrapper around PHP&#39;s built-in server.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Statix Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/statix-php/server/main/.art/banner.jpg&#34; alt=&#34;Banner image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 8 minumum&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require statix/server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;To get started, ensure the vendor autoload script is required and then create an instance of the &lt;code&gt;Server&lt;/code&gt; class, once you have set any &lt;a href=&#34;https://raw.githubusercontent.com/statix-php/server/main/#advanced-usage&#34;&gt;configuration options&lt;/a&gt;, you should call the &lt;code&gt;start&lt;/code&gt; method to start the server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Statix\Server\Server;&#xA;&#xA;require_once &#39;./vendor/autoload.php&#39;;&#xA;&#xA;Server::new()-&amp;gt;start();&#xA;&#xA;// or &#xA;&#xA;(new Server)-&amp;gt;start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can configure the several options with the server, such as the host, the port, the root directory and more. Please read more below for a detailed explanation of each configuration method.&lt;/p&gt; &#xA;&lt;h3&gt;Passing configuration via the constructor or Server::new()&lt;/h3&gt; &#xA;&lt;p&gt;You may pass most configuration options via the constructor. For example we are setting the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt; options in the code below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;use Statix\Server\Server;&#xA;&#xA;Server::new([&#xA;    &#39;host&#39; =&amp;gt; &#39;localhost&#39;,&#xA;    &#39;port&#39; =&amp;gt; 8000,&#xA;    &#39;root&#39; =&amp;gt; __DIR__ . &#39;/content&#39;&#xA;]);&#xA;&#xA;// or &#xA;&#xA;new Server([&#xA;    &#39;host&#39; =&amp;gt; &#39;localhost&#39;,&#xA;    &#39;port&#39; =&amp;gt; 8000,&#xA;    &#39;root&#39; =&amp;gt; __DIR__ . &#39;/content&#39;&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The complete list of configuration items that can be passed via the constructor can be found below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;$optionsSettableViaContructor = [&#xA;    &#39;host&#39; =&amp;gt; &#39;string&#39;, // default: localhost&#xA;    &#39;port&#39; =&amp;gt; &#39;string|int&#39;, // default: 8000&#xA;    &#39;root&#39; =&amp;gt; &#39;string&#39;, // default: getcwd()&#xA;    &#39;router&#39; =&amp;gt; &#39;string&#39;, // path to your routing script&#xA;    &#39;executable&#39; =&amp;gt; &#39;string&#39;, // path to the desired PHP binary to use for the server&#xA;    &#39;withEnvVars&#39; =&amp;gt; [&#xA;        &#39;APP_DYNAMIC_ENV&#39; =&amp;gt; &#39;server&#39;&#xA;    ],&#xA;    &#39;withoutEnvVars&#39; =&amp;gt; [ &#xA;        &#39;APP_KEY&#39;&#xA;    ]&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting configuration via the named methods&lt;/h3&gt; &#xA;&lt;p&gt;You also have the option of calling named methods to set the configuration options as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;use Statix\Server\Server;&#xA;&#xA;Server::new()&#xA;    -&amp;gt;php(&#39;path&#39;) &#xA;    -&amp;gt;host(&#39;localhost&#39;) &#xA;    -&amp;gt;port(&#39;8080&#39;) &#xA;    -&amp;gt;root(&#39;./content&#39;)&#xA;    -&amp;gt;router(&#39;./router.php&#39;)&#xA;    -&amp;gt;withEnvVars([&#xA;        &#39;APP_DYNAMIC_ENV&#39; =&amp;gt; &#39;server&#39;&#xA;    ])-&amp;gt;withoutEnvVars([&#xA;        &#39;APP_KEY&#39;,&#xA;    ])-&amp;gt;withEnvFile(&#39;path/to/.env&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Capturing the output from the server process&lt;/h3&gt; &#xA;&lt;p&gt;If you want to show the output from the server process as it recieves and handles requests, you may call the &lt;code&gt;output&lt;/code&gt; method and pass a callback function that will be called and passed any output of the process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;Server::new()&#xA;    -&amp;gt;output(function($output) {&#xA;        echo $output;&#xA;    })-&amp;gt;start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running the process in the background&lt;/h3&gt; &#xA;&lt;p&gt;You may find it useful to run the server process in the background, you may call &lt;code&gt;runInBackground()&lt;/code&gt;. The process will run as long as the parent script is running.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;Server::new()-&amp;gt;runInBackground();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking whether the process is running&lt;/h3&gt; &#xA;&lt;p&gt;You may check whether or not the server is currently running by calling the &lt;code&gt;isRunning&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;$server = Server::new()-&amp;gt;withEnvVars([&#xA;    &#39;APP_NAME&#39; =&amp;gt; &#39;statix/server&#39;,&#xA;]);&#xA;&#xA;$server-&amp;gt;isRunning(); // false&#xA;&#xA;$server-&amp;gt;runInBackground();&#xA;&#xA;$server-&amp;gt;isRunning(); // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stopping the server&lt;/h3&gt; &#xA;&lt;p&gt;You may stop the process running the sever by calling the stop command on an instance of the server class. If the server is not currently running this method will return &lt;code&gt;null&lt;/code&gt; otherwise it will return an array container first the process exit code and second the process exit text. Note this command can only be called when the server is running in the background.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;$server = Server::new()-&amp;gt;runInBackground();&#xA;&#xA;// do work&#xA;&#xA;$server-&amp;gt;stop();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Restarting the server&lt;/h3&gt; &#xA;&lt;p&gt;You can restart the server by calling the &lt;code&gt;restart&lt;/code&gt; method on an instance of the server class. An example of why you might need to restart the server is detecting when your &lt;code&gt;.env&lt;/code&gt; file is changed, you could restart the server and ensure the env vars are loaded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;$server = Server::new()-&amp;gt;runInBackground();&#xA;&#xA;// do work&#xA;&#xA;$server-&amp;gt;restart();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone repo&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/statix-php/server.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install php dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://pestphp.com/&#34;&gt;Pest PHP&lt;/a&gt; for the test suite, please ensure before pushing changes you confirm there are no breaking changes by running the command below. Additionally, tests for new features are highly encouraged, changes will be considered without tests but it will increase the time to accept / merge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bin&#34;&gt;./vendor/bin/pest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Style&lt;/h4&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/laravel/pint&#34;&gt;Laravel Pint&lt;/a&gt; to automatically standardize code styling, before pushing changes please run &lt;code&gt;pint&lt;/code&gt; using the command below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bin&#34;&gt;./vendor/bin/pint&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>