<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-05T01:39:11Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>calebporzio/sushi</title>
    <updated>2023-08-05T01:39:11Z</updated>
    <id>tag:github.com,2023-08-05:/calebporzio/sushi</id>
    <link href="https://github.com/calebporzio/sushi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Eloquent&#39;s missing &#34;array&#34; driver.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sushi üç£&lt;/h1&gt; &#xA;&lt;p&gt;Eloquent&#39;s missing &#34;array&#34; driver.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes you want to use Eloquent, but without dealing with a database.&lt;/p&gt; &#xA;&lt;h2&gt;This Package Is Sponsorware üí∞üí∞üí∞&lt;/h2&gt; &#xA;&lt;p&gt;Originally, this package was only available to my sponsors on GitHub Sponsors until I reached 75 sponsors.&lt;/p&gt; &#xA;&lt;p&gt;Now that we&#39;ve reached the goal, the package is fully open source.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy, and thanks for the support! ‚ù§Ô∏è&lt;/p&gt; &#xA;&lt;p&gt;Learn more about &lt;strong&gt;Sponsorware&lt;/strong&gt; at &lt;a href=&#34;https://github.com/sponsorware/docs&#34;&gt;github.com/sponsorware/docs&lt;/a&gt; üí∞.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require calebporzio/sushi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;p&gt;Using this package consists of two steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;Sushi&lt;/code&gt; trait to a model.&lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;$rows&lt;/code&gt; property to the model.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class State extends Model&#xA;{&#xA;    use \Sushi\Sushi;&#xA;&#xA;    protected $rows = [&#xA;        [&#xA;            &#39;abbr&#39; =&amp;gt; &#39;NY&#39;,&#xA;            &#39;name&#39; =&amp;gt; &#39;New York&#39;,&#xA;        ],&#xA;        [&#xA;            &#39;abbr&#39; =&amp;gt; &#39;CA&#39;,&#xA;            &#39;name&#39; =&amp;gt; &#39;California&#39;,&#xA;        ],&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can use this model anywhere you like, and it will behave as if you created a table with the rows you provided.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$stateName = State::whereAbbr(&#39;NY&#39;)-&amp;gt;first()-&amp;gt;name;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is really useful for &#34;Fixture&#34; data, like states, countries, zip codes, user_roles, sites_settings, etc...&lt;/p&gt; &#xA;&lt;h3&gt;Relationships&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you created a &lt;code&gt;Role&lt;/code&gt; model, based on an array using Sushi, that looked like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Role extends Model&#xA;{&#xA;    use \Sushi\Sushi;&#xA;&#xA;    protected $rows = [&#xA;        [&#39;id&#39; =&amp;gt; 1, &#39;label&#39; =&amp;gt; &#39;admin&#39;],&#xA;        [&#39;id&#39; =&amp;gt; 2, &#39;label&#39; =&amp;gt; &#39;manager&#39;],&#xA;        [&#39;id&#39; =&amp;gt; 3, &#39;label&#39; =&amp;gt; &#39;user&#39;],&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add a relationship to another standard model, just like you normally would:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User extends Model&#xA;{&#xA;    ...&#xA;&#xA;    public function role()&#xA;    {&#xA;        return $this-&amp;gt;belongsTo(Role::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assuming the &lt;code&gt;users&lt;/code&gt; table has a &lt;code&gt;role_id&lt;/code&gt; column, you can do things like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Grab a User.&#xA;$user = User::first();&#xA;// Grab a Role.&#xA;$role = Role::whereLabel(&#39;admin&#39;)-&amp;gt;first();&#xA;&#xA;// Associate them.&#xA;$user-&amp;gt;role()-&amp;gt;associate($role);&#xA;&#xA;// Access like normal.&#xA;$user-&amp;gt;role;&#xA;&#xA;// Eager load.&#xA;$user-&amp;gt;load(&#39;role&#39;);&#xA;User::with(&#39;role&#39;)-&amp;gt;first();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: There is one caveat when dealing with Sushi model relationships. The &lt;code&gt;whereHas&lt;/code&gt; method will NOT work. This is because the two models are spread across two separate databases.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Using database-checking validation rules&lt;/h3&gt; &#xA;&lt;p&gt;You can even use Laravel&#39;s &lt;code&gt;exists:table,column&lt;/code&gt; database checking request validation rule.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$data = request()-&amp;gt;validate([&#xA;    &#39;state&#39; =&amp;gt; [&#39;required&#39;, &#39;exists:App\Model\State,abbr&#39;],&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Be aware that you must use the fully-qualified namespace of the model instead of a table name. This ensures that Laravel will correctly resolve the model&#39;s connection.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Custom Schema&lt;/h3&gt; &#xA;&lt;p&gt;If Sushi&#39;s schema auto-detection system doesn&#39;t meet your specific requirements for the supplied row data, you can customize them with the &lt;code&gt;$schema&lt;/code&gt; property or the &lt;code&gt;getSchema()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Products extends Model&#xA;{&#xA;    use \Sushi\Sushi;&#xA;&#xA;    protected $rows = [&#xA;        [&#39;name&#39; =&amp;gt; &#39;Lawn Mower&#39;, &#39;price&#39; =&amp;gt; &#39;226.99&#39;],&#xA;        [&#39;name&#39; =&amp;gt; &#39;Leaf Blower&#39;, &#39;price&#39; =&amp;gt; &#39;134.99&#39;],&#xA;        [&#39;name&#39; =&amp;gt; &#39;Rake&#39;, &#39;price&#39; =&amp;gt; &#39;9.99&#39;],&#xA;    ];&#xA;&#xA;    protected $schema = [&#xA;        &#39;price&#39; =&amp;gt; &#39;float&#39;,&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;Under the hood, this package creates and caches a SQLite database JUST for this model. It creates a table and populates the rows. If, for whatever reason, it can&#39;t cache a .sqlite file, it will default to using an in-memory sqlite database.&lt;/p&gt; &#xA;&lt;h2&gt;Using -&amp;gt;getRows()&lt;/h2&gt; &#xA;&lt;p&gt;You can optionally opt out of using the &lt;code&gt;protected $rows&lt;/code&gt; property, and directly implement your own &lt;code&gt;getRows()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;This will allow you to determine the rows for the model at runtime. You can even generate the model&#39;s rows from an external source like a third-party API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Role extends Model&#xA;{&#xA;    use \Sushi\Sushi;&#xA;&#xA;    public function getRows()&#xA;    {&#xA;        return [&#xA;            [&#39;id&#39; =&amp;gt; 1, &#39;label&#39; =&amp;gt; &#39;admin&#39;],&#xA;            [&#39;id&#39; =&amp;gt; 2, &#39;label&#39; =&amp;gt; &#39;manager&#39;],&#xA;            [&#39;id&#39; =&amp;gt; 3, &#39;label&#39; =&amp;gt; &#39;user&#39;],&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caching -&amp;gt;getRows()&lt;/h3&gt; &#xA;&lt;p&gt;If you choose to use your own -&amp;gt;getRows() method, the rows will NOT be cached between requests by default.&lt;/p&gt; &#xA;&lt;p&gt;You can force Sushi to cache your dataset with the following method: &lt;code&gt;sushiShouldCache()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s look at a configuration where &lt;code&gt;-&amp;gt;getRows()&lt;/code&gt; datasets would be cached as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Role extends Model&#xA;{&#xA;    use \Sushi\Sushi;&#xA;&#xA;    public function getRows()&#xA;    {&#xA;        return [&#xA;            [&#39;id&#39; =&amp;gt; 1, &#39;label&#39; =&amp;gt; &#39;admin&#39;],&#xA;            [&#39;id&#39; =&amp;gt; 2, &#39;label&#39; =&amp;gt; &#39;manager&#39;],&#xA;            [&#39;id&#39; =&amp;gt; 3, &#39;label&#39; =&amp;gt; &#39;user&#39;],&#xA;        ];&#xA;    }&#xA;&#xA;    protected function sushiShouldCache()&#xA;    {&#xA;        return true;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Sushi looks at the &#34;last modified&#34; timestamp of your model PHP file and compares it with its internal &lt;code&gt;.sqlite&lt;/code&gt; cache file. If the model file has been changed more recently than the &lt;code&gt;.sqlite&lt;/code&gt; cache file, then Sushi will destroy and rebuild the &lt;code&gt;.sqlite&lt;/code&gt; cache. Additionally, you can configure an external file for Sushi to reference when determining if the cache is up to date or needs to be refreshed.&lt;/p&gt; &#xA;&lt;p&gt;If, for example, you are using Sushi to provide an Eloquent model for an external data source file like an &lt;code&gt;.csv&lt;/code&gt; file, you can use &lt;code&gt;sushiCacheReferencePath&lt;/code&gt; to force Sushi to reference the &lt;code&gt;.csv&lt;/code&gt; file when determining if the cache is stale.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Role extends Model&#xA;{&#xA;    use \Sushi\Sushi;&#xA;&#xA;    public function getRows()&#xA;    {&#xA;        return CSV::fromFile(__DIR__.&#39;/roles.csv&#39;)-&amp;gt;toArray();&#xA;    }&#xA;&#xA;    protected function sushiShouldCache()&#xA;    {&#xA;        return true;&#xA;    }&#xA;&#xA;    protected function sushiCacheReferencePath()&#xA;    {&#xA;        return __DIR__.&#39;/roles.csv&#39;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, Sushi will only &#34;bust&#34; its internal cache if &lt;code&gt;roles.csv&lt;/code&gt; changes, rather than looking at the &lt;code&gt;Role.php&lt;/code&gt; model.&lt;/p&gt; &#xA;&lt;h3&gt;Handling Empty Datasets&lt;/h3&gt; &#xA;&lt;p&gt;Sushi reads the first row in your dataset to work out the scheme of the SQLite table. If you are using &lt;code&gt;getRows()&lt;/code&gt; and this returns an empty array (e.g an API returns nothing back) then Sushi would throw an error.&lt;/p&gt; &#xA;&lt;p&gt;If you would like Sushi to work even if the dataset is empty, you can define your schema in the optional &lt;code&gt;protected $schema&lt;/code&gt; array.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you choose to use your own -&amp;gt;getRows() method, the rows will NOT be cached between requests.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Currency extends Model&#xA;{&#xA;    use \Sushi\Sushi;&#xA;&#xA;    protected $schema = [&#xA;        &#39;id&#39; =&amp;gt; &#39;integer&#39;,&#xA;        &#39;name&#39; =&amp;gt; &#39;string&#39;,&#xA;        &#39;symbol&#39; =&amp;gt; &#39;string&#39;,&#xA;        &#39;precision&#39; =&amp;gt; &#39;float&#39;&#xA;    ];&#xA;&#xA;    public function getRows()&#xA;    {&#xA;        return [];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling String-based Primary Keys&lt;/h3&gt; &#xA;&lt;p&gt;Sushi requires you to add two properties to your model, if it uses a string-based primary key - &lt;code&gt;$incrementing&lt;/code&gt; and &lt;code&gt;$keyType&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Role extends Model&#xA;{&#xA;    use \Sushi\Sushi;&#xA;    &#xA;    public $incrementing = false;&#xA;&#xA;    protected $keyType = &#39;string&#39;;&#xA;&#xA;    protected $rows = [&#xA;        [&#39;id&#39; =&amp;gt; &#39;admin&#39;, &#39;label&#39; =&amp;gt; &#39;Admin&#39;],&#xA;        [&#39;id&#39; =&amp;gt; &#39;manager&#39;, &#39;label&#39; =&amp;gt; &#39;Manager&#39;],&#xA;        [&#39;id&#39; =&amp;gt; &#39;user&#39;, &#39;label&#39; =&amp;gt; &#39;User&#39;],&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Troubleshoot&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ERROR:&lt;/strong&gt; &lt;code&gt;SQLSTATE[HY000]: General error: 1 too many SQL variables&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default Sushi uses chunks of &lt;code&gt;100&lt;/code&gt; to insert your data in the SQLite database. In some scenarios this might hit some SQLite limits. You can configure the chunk size in the model: &lt;code&gt;public $sushiInsertChunkSize = 50;&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>