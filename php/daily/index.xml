<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-30T01:41:47Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pdphilip/laravel-elasticsearch</title>
    <updated>2023-01-30T01:41:47Z</updated>
    <id>tag:github.com,2023-01-30:/pdphilip/laravel-elasticsearch</id>
    <link href="https://github.com/pdphilip/laravel-elasticsearch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Elasticsearch implementation of Laravel&#39;s Eloquent ORM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Laravel x Elasticsearch&lt;/h1&gt; &#xA;&lt;p&gt;This package extends Laravel&#39;s Eloquent model and query builder for Elasticsearch. The goal of this package is to use Elasticsearch in laravel as if it were native to Laravel, meaning:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Work with your &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#eloquent&#34;&gt;Eloquent&lt;/a&gt; models the way you&#39;re used to, including:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Standard query building: &lt;code&gt;Model::where(&#39;status&#39;,&#39;&amp;gt;&#39;,3)-&amp;gt;orderByDesc(&#39;created_at&#39;)-&amp;gt;get()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Model &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#relationships&#34;&gt;Relationships&lt;/a&gt; (Including cross-database)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#mutators--casting&#34;&gt;Mutators &amp;amp; Casting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Data returned as Collections&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#soft-deletes&#34;&gt;Soft Deletes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#aggregation&#34;&gt;Aggregations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#migrations&#34;&gt;Migrations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;ES features like &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#geo&#34;&gt;Geo Filtering&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#regex-in-where&#34;&gt;Regular Expressions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#dynamic-indies&#34;&gt;Dynamic Indices&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No need to write your own DSL queries (&lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#raw-dsl&#34;&gt;unless you want to&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#elasticsearching&#34;&gt;Eloquent style searching&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;[Known] Elasticsearch compatible versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;7.16&lt;/li&gt; &#xA; &lt;li&gt;8.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install the package via Composer:&lt;/p&gt; &#xA;&lt;p&gt;Laravel 9.x:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require pdphilip/elasticsearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Laravel 8.x:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require pdphilip/elasticsearch:~0.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Laravel 7.x:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require pdphilip/elasticsearch:~0.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Laravel 6.x (and 5.8):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require pdphilip/elasticsearch:~0.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Proposed .env settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dotenv&#34;&gt;ES_AUTH_TYPE=http&#xA;ES_HOSTS=&#34;http://localhost:9200&#34;&#xA;ES_USERNAME=&#xA;ES_PASSWORD=&#xA;ES_CLOUD_ID=&#xA;ES_API_ID=&#xA;ES_API_KEY=&#xA;ES_SSL_CERT=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example cloud config .env: (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-dotenv&#34;&gt;ES_AUTH_TYPE=cloud&#xA;ES_HOSTS=&#34;https://xxxxx-xxxxxx.es.europe-west1.gcp.cloud.es.io:9243&#34;&#xA;ES_USERNAME=elastic&#xA;ES_PASSWORD=XXXXXXXXXXXXXXXXXXXX&#xA;ES_CLOUD_ID=XXXXX:ZXVyb3BlLXdl.........SQwYzM1YzU5ODI5MTE0NjQ3YmEyNDZlYWUzOGNkN2Q1Yg==&#xA;ES_API_ID=&#xA;ES_API_KEY=&#xA;ES_SSL_CERT=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;For multiple nodes, pass in as comma separated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dotenv&#34;&gt;ES_HOSTS=&#34;http://es01:9200,http://es02:9200,http://es03:9200&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;elasticsearch&lt;/code&gt; connection in &lt;code&gt;config/database.php&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;connections&#39; =&amp;gt; [&#xA;    &#39;elasticsearch&#39; =&amp;gt; [&#xA;            &#39;driver&#39;       =&amp;gt; &#39;elasticsearch&#39;,&#xA;            &#39;auth_type&#39;    =&amp;gt; env(&#39;ES_AUTH_TYPE&#39;, &#39;http&#39;), //http, cloud or api&#xA;            &#39;hosts&#39;        =&amp;gt; explode(&#39;,&#39;, env(&#39;ES_HOSTS&#39;, &#39;http://localhost:9200&#39;)),&#xA;            &#39;username&#39;     =&amp;gt; env(&#39;ES_USERNAME&#39;, &#39;&#39;),&#xA;            &#39;password&#39;     =&amp;gt; env(&#39;ES_PASSWORD&#39;, &#39;&#39;),&#xA;            &#39;cloud_id&#39;     =&amp;gt; env(&#39;ES_CLOUD_ID&#39;, &#39;&#39;),&#xA;            &#39;api_id&#39;       =&amp;gt; env(&#39;ES_API_ID&#39;, &#39;&#39;),&#xA;            &#39;api_key&#39;      =&amp;gt; env(&#39;ES_API_KEY&#39;, &#39;&#39;),&#xA;            &#39;ssl_cert&#39;     =&amp;gt; env(&#39;ES_SSL_CERT&#39;, &#39;&#39;),&#xA;            &#39;index_prefix&#39; =&amp;gt; false, //prefix all Laravel administered indices&#xA;            &#39;query_log&#39;    =&amp;gt; [&#xA;                &#39;index&#39;      =&amp;gt; &#39;laravel_query_logs&#39;, //Or false to disable query logging&#xA;                &#39;error_only&#39; =&amp;gt; true, //If false, the all queries are logged&#xA;            ],&#xA;        ],&#xA;    .....&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the service provider to &lt;code&gt;config/app.php&lt;/code&gt; (If your Laravel version does not autoload packages)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;providers&#39; =&amp;gt; [&#xA;    ...&#xA;    ...&#xA;    PDPhilip\Elasticsearch\ElasticServiceProvider::class,&#xA;    ...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Eloquent&lt;/h1&gt; &#xA;&lt;h3&gt;Extending the base model&lt;/h3&gt; &#xA;&lt;p&gt;Define your Eloquent models by extending the &lt;code&gt;PDPhilip\Elasticsearch\Eloquent\Model&lt;/code&gt; class;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use PDPhilip\Elasticsearch\Eloquent\Model;&#xA;/**&#xA; * @mixin \Eloquent&#xA; */&#xA;class Product extends Model&#xA;{&#xA;    protected $connection = &#39;elasticsearch&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the corresponding index for &lt;code&gt;Product&lt;/code&gt; is &lt;code&gt;products&lt;/code&gt;. In most cases, the &lt;code&gt;elasticsearch&lt;/code&gt; connection won&#39;t be the default connection. In that case you&#39;ll need to include &lt;code&gt;protected $connection = &#39;elasticsearch&#39;&lt;/code&gt; in your model.&lt;/p&gt; &#xA;&lt;p&gt;To change the inferred index name, pass the &lt;code&gt;$index&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use PDPhilip\Elasticsearch\Eloquent\Model;&#xA;/**&#xA; * @mixin \Eloquent&#xA; */&#xA;class Product extends Model&#xA;{&#xA;    protected $index = &#39;my_products&#39;;&#x9;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Querying Models&lt;/h2&gt; &#xA;&lt;h4&gt;ALL&lt;/h4&gt; &#xA;&lt;p&gt;Retrieving all records for a model&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::all();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Find&lt;/h4&gt; &#xA;&lt;p&gt;Retrieving a record by primary key** (_id)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$product = Product::find(&#39;IiLKG38BCOXW3U9a4zcn&#39;);&#xA;$product = Product::findOrFail(&#39;IiLKG38BCOXW3U9a4zcn&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;First&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$product = Product::where(&#39;status&#39;,1)-&amp;gt;first();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Where&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::where(&#39;status&#39;,1)-&amp;gt;take(10)-&amp;gt;get();&#xA;$products = Product::where(&#39;manufacturer.country&#39;, &#39;England&#39;)-&amp;gt;take(10)-&amp;gt;get();&#xA;$products = Product::where(&#39;status&#39;,&#39;&amp;gt;=&#39;, 3)-&amp;gt;take(10)-&amp;gt;get();  &#xA;$products = Product::where(&#39;color&#39;,&#39;!=&#39;, &#39;red&#39;)-&amp;gt;take(10)-&amp;gt;get(); //*See notes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*Note: this query will also include collections where the color field does not exist, to exclude these, use &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#whereNotNull&#34;&gt;whereNotNull()&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Where LIKE&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::where(&#39;color&#39;, &#39;like&#39;, &#39;bl&#39;)-&amp;gt;orderBy(&#39;color.keyword&#39;)-&amp;gt;get();&#xA;// Will find blue and black&#xA;// No need to use SQL LIKE %bl%&#xA;// Text field is used for searching, keyword is used for ordering&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OR Statements&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::where(&#39;is_active&#39;, true)-&amp;gt;orWhere(&#39;in_stock&#39;, &#39;&amp;gt;=&#39;, 50)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Chaining OR/AND statements&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::where(&#39;type&#39;, &#39;coffee&#39;)&#xA;                -&amp;gt;where(&#39;is_approved&#39;, true)&#xA;                -&amp;gt;orWhere(&#39;type&#39;, &#39;tea&#39;)&#xA;                -&amp;gt;where(&#39;is_approved&#39;, true)&#xA;                -&amp;gt;get(); //Returns approved coffee or approved tea&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;strong&gt;Order of chaining matters&lt;/strong&gt; , It reads naturally from left to write having &lt;code&gt;where() as AND where &lt;/code&gt; &amp;amp; &lt;code&gt;orWhere() as OR where &lt;/code&gt;. In the above example, the query would be:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&#34;((name:&#34;coffee&#34;) AND (is_approved:&#34;1&#34;)) OR ((name:&#34;tea&#34;) AND (is_approved:&#34;1&#34;))&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;WhereIn&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::whereIn(&#39;status&#39;, [1,5,11])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;WhereNotIn&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::whereNotIn(&#39;color&#39;, [&#39;red&#39;,&#39;green&#39;])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;WhereNotNull&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Can be read as Where {field} Exists&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When using &lt;code&gt;whereNotIn&lt;/code&gt; objects will be returned if the field is non-existent. Combine with &lt;code&gt;whereNotNull(&#39;status&#39;)&lt;/code&gt; to leave out those documents. Ex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::whereNotIn(&#39;color&#39;, [&#39;red&#39;,&#39;green&#39;])-&amp;gt;whereNotNull(&#39;color&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;WhereNull&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Can be read as Where {field} does not exist&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::whereNull(&#39;color&#39;)-&amp;gt;get(); //Return all collections that doesn&#39;t have a &#39;color&#39; field&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;WhereBetween&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::whereBetween(&#39;in_stock&#39;, [10, 100])-&amp;gt;get();&#xA;$products = Product::whereBetween(&#39;orders&#39;, [1, 20])-&amp;gt;orWhereBetween(&#39;orders&#39;, [100, 200])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dates&lt;/h3&gt; &#xA;&lt;p&gt;Elasticsearch by default converts a date into a timestamp, and applies the &lt;code&gt;strict_date_optional_time||epoch_millis&lt;/code&gt; format. If you have not changed the format at the index then acceptable values are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2022-01-29&lt;/li&gt; &#xA; &lt;li&gt;2022-01-29T13:05:59&lt;/li&gt; &#xA; &lt;li&gt;2022-01-29T13:05:59+0:00&lt;/li&gt; &#xA; &lt;li&gt;2022-01-29T12:10:30Z&lt;/li&gt; &#xA; &lt;li&gt;1643500799 (timestamp)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With Carbon&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Carbon::now()-&amp;gt;modify(&#39;-1 week&#39;)-&amp;gt;toIso8601String()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use these values in a normal &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#where&#34;&gt;where&lt;/a&gt; clause, or use the built-in date clause, ie:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WhereDate&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::whereDate(&#39;created_at&#39;, &#39;2022-01-29&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The usage for &lt;code&gt;whereMonth&lt;/code&gt; / &lt;code&gt;whereDay&lt;/code&gt; / &lt;code&gt;whereYear&lt;/code&gt; / &lt;code&gt;whereTime&lt;/code&gt; has disabled for the current version of this plugin&lt;/p&gt; &#xA;&lt;h3&gt;Aggregation&lt;/h3&gt; &#xA;&lt;p&gt;The usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$totalSales = Sale::count();&#xA;$highestPrice = Sale::max(&#39;price&#39;);&#xA;$lowestPrice = Sale::min(&#39;price&#39;);&#xA;$averagePricePerSale = Sale::avg(&#39;price&#39;);&#xA;$totalEarnings = Sale::sum(&#39;price&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Combined with where clauses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$averagePrice = Product::whereNotIn(&#39;color&#39;, [&#39;red&#39;,&#39;green&#39;])-&amp;gt;avg(&#39;price&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Elasticsearch &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-matrix-stats-aggregation.html&#34;&gt;Matrix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$stats = Product::whereNotIn(&#39;color&#39;, [&#39;red&#39;,&#39;green&#39;])-&amp;gt;matrix(&#39;price&#39;);&#xA;$stats = Product::whereNotIn(&#39;color&#39;, [&#39;red&#39;, &#39;green&#39;])-&amp;gt;matrix([&#39;price&#39;, &#39;orders&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Matrix results return as: (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;matrix&#34;: {&#xA;        &#34;doc_count&#34;: 24,&#xA;        &#34;fields&#34;: [&#xA;            {&#xA;                &#34;name&#34;: &#34;price&#34;,&#xA;                &#34;count&#34;: 24,&#xA;                &#34;mean&#34;: 944.1987476348877,&#xA;                &#34;variance&#34;: 392916.60523541126,&#xA;                &#34;skewness&#34;: 0.1301389603055256,&#xA;                &#34;kurtosis&#34;: 1.6419181162499876,&#xA;                &#34;covariance&#34;: {&#xA;                    &#34;price&#34;: 392916.60523541126,&#xA;                    &#34;orders&#34;: 5569.635773119718&#xA;                },&#xA;                &#34;correlation&#34;: {&#xA;                    &#34;price&#34;: 1,&#xA;                    &#34;orders&#34;: 0.03421141805225852&#xA;                }&#xA;            },&#xA;            {&#xA;                &#34;name&#34;: &#34;orders&#34;,&#xA;                &#34;count&#34;: 24,&#xA;                &#34;mean&#34;: 501.79166666666663,&#xA;                &#34;variance&#34;: 67454.5199275362,&#xA;                &#34;skewness&#34;: 0.31085136523548346,&#xA;                &#34;kurtosis&#34;: 1.9897405370026835,&#xA;                &#34;covariance&#34;: {&#xA;                    &#34;price&#34;: 5569.635773119718,&#xA;                    &#34;orders&#34;: 67454.5199275362&#xA;                },&#xA;                &#34;correlation&#34;: {&#xA;                    &#34;price&#34;: 0.03421141805225852,&#xA;                    &#34;orders&#34;: 1&#xA;                }&#xA;            }&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Ordering&lt;/h3&gt; &#xA;&lt;p&gt;When searching text fields Elasticsearch uses an internal scoring to rank and sort by the most relevant results as a default return ordering. You can override this by ordering by and fields you like (&lt;strong&gt;except for Text fields&lt;/strong&gt;, see: &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#ordering-by-text-field&#34;&gt;Ordering by Text field&lt;/a&gt; )&lt;/p&gt; &#xA;&lt;h4&gt;OrderBy&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::orderBy(&#39;status&#39;)-&amp;gt;get();&#xA;$products = Product::orderBy(&#39;created_at&#39;,&#39;desc&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OrderByDesc&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::orderByDesc(&#39;created_at&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Offset &amp;amp; Limit (skip &amp;amp; take)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::skip(10)-&amp;gt;take(5)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pagination&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$products = Product::where(&#39;is_active&#39;,true)&#xA;$products = $products-&amp;gt;paginate(50)  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pagination links (Blade)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php+HTML&#34;&gt;{{ $products-&amp;gt;appends(request()-&amp;gt;query())-&amp;gt;links() }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Elasticsearch specific queries&lt;/h2&gt; &#xA;&lt;h4&gt;Geo:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;GeoBox&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Filters results of all geo points that fall within a box drawn from &lt;code&gt;topleft[lat,lon]&lt;/code&gt; to &lt;code&gt;bottomRight[lat,lon]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Method&lt;/strong&gt;: &lt;code&gt;filterGeoBox($field,$topleft,$bottomRight)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$topleft&lt;/code&gt; and &lt;code&gt;$bottomRight&lt;/code&gt; are arrays that hold [$lat,$lon] coordinates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserLog::where(&#39;status&#39;,7)-&amp;gt;filterGeoBox(&#39;agent.geo&#39;,[-10,10],[10,-10])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;GeoPoint&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Filters results that fall within a radius distance from a &lt;code&gt;point[lat,lon]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Method&lt;/strong&gt;: &lt;code&gt;filterGeoPoint($field,$distance,$point)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$distance&lt;/code&gt; is a string value of distance and distance-unit, see [https://www.elastic.co/guide/en/elasticsearch/reference/current/api-conventions.html#distance-units](distance units)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserLog::where(&#39;status&#39;,7)-&amp;gt;filterGeoPoint(&#39;agent.geo&#39;,&#39;20km&#39;,[0,0])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the field **must be of type geo otherwise your &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#error-all-shards-failed&#34;&gt;shards will fail&lt;/a&gt; **, make sure to set the geo field in your &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#migrations&#34;&gt;migration&lt;/a&gt;, ex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Schema::create(&#39;user_logs&#39;,function (IndexBlueprint $index){&#xA;&#x9;$index-&amp;gt;geo(&#39;agent.geo&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Regex (in where)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/regexp-syntax.html&#34;&gt;Syntax&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Product::whereRegex(&#39;color&#39;,&#39;bl(ue)?(ack)?&#39;)-&amp;gt;get();   //Returns blue or black&#xA;Product::whereRegex(&#39;color&#39;,&#39;bl...*&#39;)-&amp;gt;get();           //Returns blue or black or blond or blush etc..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving Models&lt;/h2&gt; &#xA;&lt;p&gt;The same as you always have with Laravel:&lt;/p&gt; &#xA;&lt;h4&gt;Save&lt;/h4&gt; &#xA;&lt;p&gt;[Option A] Attribute assigning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$log = new UserLog;&#xA;$log-&amp;gt;user_id = $userId;&#xA;$log-&amp;gt;title = $title;&#xA;$log-&amp;gt;status = 1;&#xA;$log-&amp;gt;save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create&lt;/h4&gt; &#xA;&lt;p&gt;[Option B] via &lt;code&gt;create()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$log = UserLog::create([&#xA;    &#39;user_id&#39; =&amp;gt; $userId,&#xA;    &#39;title&#39;   =&amp;gt; $title,&#xA;    &#39;status&#39;  =&amp;gt; 1,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Keep in mind, the &lt;code&gt;$fillable&lt;/code&gt; and &lt;code&gt;$guarded&lt;/code&gt; attributes are honored when using &lt;code&gt;create()&lt;/code&gt; or &lt;code&gt;update()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Update&lt;/h4&gt; &#xA;&lt;p&gt;Same goes for updating&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$log = UserLog::where(&#39;status&#39;,1)-&amp;gt;first();&#xA;$log-&amp;gt;status = 2;&#xA;$log-&amp;gt;save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mass updating&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$updates = Product::where(&#39;status&#39;, 1)-&amp;gt;update([&#39;status&#39; =&amp;gt; 4]); //Updates all statuses from 1 to 4&#xA;// $updates =&amp;gt; int (number of affected collections)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fast Saves&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Saving &#39;without refresh&#39;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Elasticsearch will write a new document and return the &lt;code&gt;_id&lt;/code&gt; before it has been indexed. This means that there could be a delay in looking up the document that has just been created. To keep the indexed data consistent, the default is to * write a new document and wait until it has been indexed* - If you know that you won&#39;t need to look up or manipulate the new document immediately, then you can leverage the speed benefit of &lt;code&gt;write and move on&lt;/code&gt; with &lt;code&gt;saveWithoutRefresh()&lt;/code&gt; and &lt;code&gt;createWithoutRefresh()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$log-&amp;gt;saveWithoutRefresh();&#xA;//and&#xA;UserLog::createWithoutRefresh($attributes);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example with undesired outcome:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//BAD, AVOID:&#xA;$log = new UserLog;&#xA;$log-&amp;gt;user_id = $userId;&#xA;$log-&amp;gt;title = $title;&#xA;$log-&amp;gt;status = 1;&#xA;$log-&amp;gt;saveWithoutRefresh();&#xA;$log-&amp;gt;company_id = &#39;ABC-123&#39;&#xA;$log-&amp;gt;saveWithoutRefresh();&#xA;//Will result in two separate records&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deleting&lt;/h3&gt; &#xA;&lt;h4&gt;Delete&lt;/h4&gt; &#xA;&lt;p&gt;The same as you always have with Laravel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$product = Product::find(&#39;IiLKG38BCOXW3U9a4zcn&#39;);&#xA;$product-&amp;gt;delete();&#xA;//Or by mass&#xA;$product = Product::whereNull(&#39;color&#39;)-&amp;gt;delete(); //Delete all records that doesn&#39;t have a color field&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Truncate&lt;/h4&gt; &#xA;&lt;p&gt;Removes all records in index, &lt;em&gt;but keeps the index&lt;/em&gt;, to remove index completely use &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#index-delete&#34;&gt;Schema: Index Delete&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Product::truncate(); &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Destroy by ID&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Product::destroy(&#39;9iKKHH8BCOXW3U9ag1_4&#39;); //as single _id &#xA;Product::destroy(&#39;4yKKHH8BCOXW3U9ag1-8&#39;, &#39;_iKKHH8BCOXW3U9ahF8Q&#39;); //as multiple _ids&#xA;Product::destroy([&#39;7CKKHH8BCOXW3U9ag1_a&#39;, &#39;7iKKHH8BCOXW3U9ag1_h&#39;]); //as array of _ids&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Soft Deletes&lt;/h3&gt; &#xA;&lt;p&gt;When soft deleting a model, it is not actually removed from the index. Instead, a deleted_at timestamp is set on the record and is excluded from any queries unless explicitly called on.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use PDPhilip\Elasticsearch\Eloquent\Model;&#xA;use PDPhilip\Elasticsearch\Eloquent\SoftDeletes;&#xA;&#xA;class Product extends Model&#xA;{&#xA;    use SoftDeletes;&#xA;&#x9;&#x9;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//With soft delete enabled&#xA;Product::destroy(&#39;wCIfHX8BCOXW3U9ahWH9&#39;);&#xA;Product::withTrashed()-&amp;gt;where(&#39;_id&#39;, &#39;wCIfHX8BCOXW3U9ahWH9&#39;)-&amp;gt;get();&#xA;Product::withTrashed()-&amp;gt;where(&#39;_id&#39;, &#39;wCIfHX8BCOXW3U9ahWH9&#39;)-&amp;gt;restore(); //restore by query&#xA;&#xA;//Force delete&#xA;$product = Product::find(&#39;wCIfHX8BCOXW3U9ahWH9&#39;);&#xA;$product-&amp;gt;forceDelete();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Elasticsearching&lt;/h1&gt; &#xA;&lt;h2&gt;The Search Query&lt;/h2&gt; &#xA;&lt;p&gt;The search query is different from the &lt;code&gt;where()-&amp;gt;get()&lt;/code&gt; methods as search is performed over all (or selected) fields in the index. Building a search query is easy and intuitive to seasoned Eloquenters with a slight twist; simply static call off your model with &lt;code&gt;term()&lt;/code&gt;, chain your ORM clauses, then end your chain with &lt;code&gt;search()&lt;/code&gt; to perform your search, ie:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;MyModel::term(&#39;XYZ&#39;)-&amp;gt;.........-&amp;gt;search()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.Term:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.1 Simple example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To search across all the fields in the &lt;strong&gt;books&lt;/strong&gt; index for &#39;&lt;strong&gt;eric&lt;/strong&gt;&#39; (case-insensitive if the default analyser is set),&lt;/li&gt; &#xA; &lt;li&gt;Results ordered by most relevant first (score in desc order)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Book::term(&#39;Eric&#39;)-&amp;gt;search();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.2 Multiple terms&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To search across all the fields in the &lt;strong&gt;books&lt;/strong&gt; index for: &lt;strong&gt;eric OR (lean AND startup)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;*&lt;strong&gt;Note&lt;/strong&gt;: You can&#39;t start a search query chain with and/or and you can&#39;t have subsequent chained terms without and/or &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;ordering matters&lt;/strong&gt;*&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Book::term(&#39;Eric&#39;)-&amp;gt;orTerm(&#39;Lean&#39;)-&amp;gt;andTerm(&#39;Startup&#39;)-&amp;gt;search();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.3 Boosting Terms&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Boosting terms: &lt;code&gt;term(string $term, int $boostFactor)&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;To search across all fields for &lt;strong&gt;eric OR lean OR startup&lt;/strong&gt; but &#39;eric&#39; is boosted by a factor of 2; &lt;strong&gt;(eric)^2&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Boosting affects the score and thus the ordering of the results for relevance&lt;/li&gt; &#xA; &lt;li&gt;Also note, spaces in terms are treated as OR&#39;s between each word&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Book::term(&#39;Eric&#39;,2)-&amp;gt;orTerm(&#39;Lean Startup&#39;)-&amp;gt;search();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.4 Searching over selected fields&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To search across fields [&lt;strong&gt;title, author and description&lt;/strong&gt;] for &lt;strong&gt;eric&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Book::term(&#39;Eric&#39;)-&amp;gt;fields([&#39;title&#39;,&#39;author&#39;,&#39;description&#39;])-&amp;gt;search();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.5 Boosting fields&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To search across fields [&lt;strong&gt;title, author and description&lt;/strong&gt;] for &lt;strong&gt;eric&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; is boosted by a factor of 3, search hits here will be the most relevant&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;author&lt;/strong&gt; is boosted by a factor of 2, search hits here will be the second most relevant&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;description&lt;/strong&gt; has no boost, search hits here will be the least relevant&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;The results, as per the default, are ordered by most relevant first (score in desc order)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Book::term(&#39;Eric&#39;)-&amp;gt;field(&#39;title&#39;,3)-&amp;gt;field(&#39;author&#39;,2)-&amp;gt;field(&#39;description&#39;)-&amp;gt;search();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.6 Minimum should match&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Controls how many &#39;should&#39; clauses the query should match&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Caveats:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fields must be specified in your query&lt;/li&gt; &#xA;   &lt;li&gt;You can have no standard clauses in your query (ex &lt;code&gt;where()&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Won&#39;t work on SoftDelete enabled models&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-minimum-should-match.html&#34;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-minimum-should-match.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Match at least 2 of the 3 terms:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Book::term(&#39;Eric&#39;)-&amp;gt;orTerm(&#39;Lean&#39;)-&amp;gt;orTerm(&#39;Startup&#39;)-&amp;gt;field(&#39;title&#39;)-&amp;gt;field(&#39;author&#39;)-&amp;gt;minShouldMatch(2)-&amp;gt;search();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.7 Min Score&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sets a min_score filter for the search&lt;/li&gt; &#xA; &lt;li&gt;(Optional, float) Minimum &#39;relevance score&#39; for matching documents. Documents with a lower &#39;score&#39; are not included in the search results.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Book::term(&#39;Eric&#39;)-&amp;gt;field(&#39;title&#39;,3)-&amp;gt;field(&#39;author&#39;,2)-&amp;gt;field(&#39;description&#39;)-&amp;gt;minScore(2.1)-&amp;gt;search();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.8 Blend Search with [most] standard eloquent queries&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search for &#39;david&#39; where field &lt;code&gt;is_active&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Book::term(&#39;David&#39;)-&amp;gt;field(&#39;title&#39;,3)-&amp;gt;field(&#39;author&#39;,2)-&amp;gt;field(&#39;description&#39;)-&amp;gt;minScore(2.1)-&amp;gt;where(&#39;is_active&#39;,true)-&amp;gt;search();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. FuzzyTerm:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Same usage as &lt;code&gt;term()&lt;/code&gt; &lt;code&gt;andTerm()&lt;/code&gt; &lt;code&gt;orTerm()&lt;/code&gt; but as &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;fuzzyTerm()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;orFuzzyTerm()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;andFuzzyTerm()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Book::fuzzyTerm(&#39;quikc&#39;)-&amp;gt;orFuzzyTerm(&#39;brwn&#39;)-&amp;gt;andFuzzyTerm(&#39;foks&#39;)-&amp;gt;search();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. RegEx in Search:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/regexp-syntax.html&#34;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/regexp-syntax.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Same usage as &lt;code&gt;term()&lt;/code&gt; &lt;code&gt;andTerm()&lt;/code&gt; &lt;code&gt;orTerm()&lt;/code&gt; but as &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;regEx()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;orRegEx()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;andRegEx()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Book::regEx(&#39;joh?n(ath[oa]n)&#39;)-&amp;gt;andRegEx(&#39;doey*&#39;)-&amp;gt;search();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mutators &amp;amp; Casting&lt;/h2&gt; &#xA;&lt;p&gt;All Laravel&#39;s Mutating and casting features are inherited:&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://laravel.com/docs/8.x/eloquent-mutators&#34;&gt;https://laravel.com/docs/8.x/eloquent-mutators&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cool!&lt;/p&gt; &#xA;&lt;h1&gt;Relationships&lt;/h1&gt; &#xA;&lt;p&gt;Model Relationships are the lifeblood of any Laravel App, for that you can use them with &lt;code&gt;belongsTo&lt;/code&gt; , &lt;code&gt;hasMany&lt;/code&gt; , &lt;code&gt;hasOne&lt;/code&gt;, &lt;code&gt;morphOne&lt;/code&gt; and &lt;code&gt;morphMany&lt;/code&gt; as you have before:&lt;/p&gt; &#xA;&lt;h4&gt;Elasticsearch &amp;lt;-&amp;gt; Elasticsearch&lt;/h4&gt; &#xA;&lt;p&gt;Full Example:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Company: (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * App\Models\Company&#xA; *&#xA; ******Fields*******&#xA; * @property string $_id&#xA; * @property string $name&#xA; * @property integer $status&#xA; * @property \Illuminate\Support\Carbon|null $created_at&#xA; * @property \Illuminate\Support\Carbon|null $updated_at&#xA; * &#xA; ******Relationships*******&#xA; * @property-read CompanyLog $companyLogs&#xA; * @property-read CompanyProfile $companyProfile&#xA; * @property-read Avatar $avatar&#xA; * @property-read Photos $photos&#xA; *&#xA; * @mixin \Eloquent&#xA; *&#xA; */&#xA;class Company extends Model&#xA;{&#xA;    protected $connection = &#39;elasticsearch&#39;;&#xA;&#xA;    //Relationships  =====================================&#xA;&#xA;    public function companyLogs()&#xA;    {&#xA;        return $this-&amp;gt;hasMany(CompanyLog::class);&#xA;    }&#xA;&#xA;    public function companyProfile()&#xA;    {&#xA;        return $this-&amp;gt;hasOne(CompanyProfile::class);&#xA;    }&#xA;&#xA;    public function avatar()&#xA;    {&#xA;        return $this-&amp;gt;morphOne(Avatar::class, &#39;imageable&#39;);&#xA;    }&#xA;&#xA;    public function photos()&#xA;    {&#xA;        return $this-&amp;gt;morphMany(Photo::class, &#39;photoable&#39;);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;CompanyLog: (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * App\Models\CompanyLog&#xA; *&#xA; ******Fields*******&#xA; * @property string $_id&#xA; * @property string $company_id&#xA; * @property string $title&#xA; * @property integer $code&#xA; * @property mixed $meta&#xA; * @property Carbon|null $created_at&#xA; * @property Carbon|null $updated_at&#xA; * &#xA; ******Relationships*******&#xA; * @property-read Company $company&#xA; *&#xA; * @mixin \Eloquent&#xA; *&#xA; */&#xA;class CompanyLog extends Model&#xA;{&#xA;    protected $connection = &#39;elasticsearch&#39;;&#xA;&#xA;    //Relationships  =====================================&#xA;  &#xA;    public function company()&#xA;    {&#xA;        return $this-&amp;gt;belongsTo(Company::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;CompanyProfile: (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * App\Models\CompanyProfile&#xA; *&#xA; ******Fields*******&#xA; * @property string $_id&#xA; * @property string $company_id&#xA; * @property string $address&#xA; * @property string $website&#xA; * @property \Illuminate\Support\Carbon|null $created_at&#xA; * @property \Illuminate\Support\Carbon|null $updated_at&#xA; * &#xA; ******Relationships*******&#xA; * @property-read Company $company&#xA; *&#xA; * @mixin \Eloquent&#xA; *&#xA; */&#xA;class CompanyProfile extends Model&#xA;{&#xA;    protected $connection = &#39;elasticsearch&#39;;&#xA;&#xA;    //Relationships  =====================================&#xA;  &#xA;    public function company()&#xA;    {&#xA;        return $this-&amp;gt;belongsTo(Company::class);&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Avatar: (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * App\Models\Avatar&#xA; *&#xA; ******Fields*******&#xA; * @property string $_id&#xA; * @property string $url&#xA; * @property string $imageable_id&#xA; * @property string $imageable_type&#xA; * @property \Illuminate\Support\Carbon|null $created_at&#xA; * @property \Illuminate\Support\Carbon|null $updated_at&#xA; * &#xA; ******Relationships*******&#xA; * @property-read Company $company&#xA; *&#xA; * @mixin \Eloquent&#xA; *&#xA; */&#xA;class Avatar extends Model&#xA;{&#xA;    protected $connection = &#39;elasticsearch&#39;;&#xA;&#xA;    //Relationships  =====================================&#xA;&#xA;    public function imageable()&#xA;    {&#xA;        return $this-&amp;gt;morphTo();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Photo: (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * App\Models\Photo&#xA; * &#xA; ******Fields*******&#xA; * @property string $_id&#xA; * @property string $url&#xA; * @property string $photoable_id&#xA; * @property string $photoable_type&#xA; * @property \Illuminate\Support\Carbon|null $created_at&#xA; * @property \Illuminate\Support\Carbon|null $updated_at&#xA; * &#xA; ******Relationships*******&#xA; * @property-read Company $company&#xA; *&#xA; * @mixin \Eloquent&#xA; *&#xA; */&#xA;class Photo extends Model&#xA;{&#xA;    protected $connection = &#39;elasticsearch&#39;;&#xA;&#xA;    //Relationships  =====================================&#xA;&#xA;    public function photoable()&#xA;    {&#xA;        return $this-&amp;gt;morphTo();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Example Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$company = Company::first();&#xA;$company-&amp;gt;companyLogs-&amp;gt;toArray(); //Shows all company logs (has many)&#xA;$company-&amp;gt;companyProfile-&amp;gt;toArray(); //Shows the company profile (has one)&#xA;$company-&amp;gt;avatar-&amp;gt;toArray(); //Shows the company avatar (morph one)&#xA;$company-&amp;gt;photos-&amp;gt;toArray(); //Shows the company photos (morph many)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Elasticsearch &amp;lt;-&amp;gt; MySQL&lt;/h4&gt; &#xA;&lt;p&gt;Since it&#39;s unlikely that you will use Elasticsearch exclusively in your App; we&#39;ve ensured that you can have hybrid relationships between Elasticsearch and MySQL (Or any native Laravel datasource) models.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For the MySQL(or similar) model that you wish to bind to Elasticsearch relationships, please use&lt;/strong&gt;: &lt;code&gt;use PDPhilip\Elasticsearch\Eloquent\HybridRelations&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example, mysql User model:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;MySQL =&amp;gt; User: (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Foundation\Auth\User as Authenticatable;&#xA;use PDPhilip\Elasticsearch\Eloquent\HybridRelations;&#xA;&#xA;/**&#xA; * App\Models\User&#xA; *&#xA; * *****Relationships*******&#xA; * @property-read UserLog $userLogs&#xA; * @property-read UserProfile $userProfile&#xA; * @property-read Company $company&#xA; * @property-read Avatar $avatar&#xA; * @property-read Photo $photos&#xA; */&#xA;class User extends Authenticatable&#xA;{&#xA;    use HybridRelations;&#xA;    &#xA;    protected $connection = &#39;mysql&#39;; &#xA;    &#xA;    //Relationships  =====================================&#xA;    // With Elasticsearch models&#xA;    &#xA;    public function userLogs()&#xA;    {&#xA;        return $this-&amp;gt;hasMany(UserLog::class);&#xA;    }&#xA;    &#xA;    public function userProfile()&#xA;    {&#xA;        return $this-&amp;gt;hasOne(UserProfile::class);&#xA;    }&#xA;    &#xA;    public function company()&#xA;    {&#xA;        return $this-&amp;gt;belongsTo(Company::class);&#xA;    }&#xA;    &#xA;    public function avatar()&#xA;    {&#xA;        return $this-&amp;gt;morphOne(Avatar::class, &#39;imageable&#39;);&#xA;    }&#xA;    &#xA;    public function photos()&#xA;    {&#xA;        return $this-&amp;gt;morphMany(Photo::class, &#39;photoable&#39;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;ES =&amp;gt; UserLog: (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * App\Models\UserLog&#xA; * &#xA; ******Fields*******&#xA; * @property string $_id&#xA; * @property string $company_id&#xA; * @property string $title&#xA; * @property integer $code&#xA; * @property mixed $meta&#xA; * @property Carbon|null $created_at&#xA; * @property Carbon|null $updated_at&#xA; * &#xA; ******Relationships*******&#xA; * @property-read User $user&#xA; *&#xA; * @mixin \Eloquent&#xA; */&#xA;class UserLog extends Model&#xA;{&#xA;&#xA;    protected $connection = &#39;elasticsearch&#39;;&#xA;    &#xA;    public function user()&#xA;    {&#xA;        return $this-&amp;gt;belongsTo(User::class);&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;ES =&amp;gt; UserProfile: (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * App\Models\UserProfile&#xA; *&#xA; ******Fields*******&#xA; * @property string $_id&#xA; * @property string $user_id&#xA; * @property string $twitter&#xA; * @property string $facebook&#xA; * @property string $address&#xA; * @property \Illuminate\Support\Carbon|null $created_at&#xA; * @property \Illuminate\Support\Carbon|null $updated_at&#xA; *&#xA; ******Relationships*******&#xA; * @property-read User $user&#xA; *&#xA; * @mixin \Eloquent&#xA; *&#xA; */&#xA;class UserProfile extends Model&#xA;{&#xA;&#xA;    protected $connection = &#39;elasticsearch&#39;;&#xA;    &#xA;    //Relationships  =====================================&#xA;    &#xA;    public function user()&#xA;    {&#xA;        return $this-&amp;gt;belongsTo(User::class);&#xA;    }&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Company (as example before) where user has the field &lt;code&gt;company_id&lt;/code&gt; as $company-&amp;gt;_id&lt;/li&gt; &#xA; &lt;li&gt;Avatar: (as before) having &lt;code&gt;imageable_id&lt;/code&gt; as $user-&amp;gt;id and &lt;code&gt;imageable_type&lt;/code&gt; as &#39;App\Models\User&#39;&lt;/li&gt; &#xA; &lt;li&gt;Photo: (as before) having &lt;code&gt;photoable_id&lt;/code&gt; as $user-&amp;gt;id and &lt;code&gt;photoable_type&lt;/code&gt; as &#39;App\Models\User&#39;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::first();&#xA;$user-&amp;gt;company-&amp;gt;name; //Company name for the user&#xA;$user-&amp;gt;userProfile-&amp;gt;twitter;&#xA;$user-&amp;gt;avatar-&amp;gt;url; //Link to Avatar&#xA;$user-&amp;gt;photos-&amp;gt;toArray(); //Array of photos&#xA;&#xA;$userLog = UserLog::first();&#xA;$userLog-&amp;gt;user-&amp;gt;name; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Schema/Index&lt;/h1&gt; &#xA;&lt;h2&gt;Migrations&lt;/h2&gt; &#xA;&lt;p&gt;Since there is very little overlap with how Elasticsearch handles index management to how MySQL and related technologies handle Schema manipulation; the schema feature of this plugin has been written from the ground up to work 100% with Elasticsearch.&lt;/p&gt; &#xA;&lt;p&gt;You can still create a migration class as normal (and it&#39;s recommended that you do), however the &lt;code&gt;up()&lt;/code&gt; and &lt;code&gt;down()&lt;/code&gt; methods will need to encapsulate the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Schema&lt;/strong&gt; via &lt;code&gt;PDPhilip\Elasticsearch\Schema\Schema&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IndexBlueprint&lt;/strong&gt; via &lt;code&gt;PDPhilip\Elasticsearch\Schema\IndexBlueprint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AnalyzerBlueprint&lt;/strong&gt; via &lt;code&gt;PDPhilip\Elasticsearch\Schema\AnalyzerBlueprint&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Full example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Illuminate\Database\Migrations\Migration;&#xA;use PDPhilip\Elasticsearch\Schema\Schema;&#xA;use PDPhilip\Elasticsearch\Schema\IndexBlueprint;&#xA;use PDPhilip\Elasticsearch\Schema\AnalyzerBlueprint;&#xA;&#xA;class MyIndexes extends Migration&#xA;{&#xA;    public function up()&#xA;    {&#xA;        Schema::create(&#39;contacts&#39;, function (IndexBlueprint $index) {&#xA;          //first_name &amp;amp; last_name is automatically added to this field, &#xA;          //you can search by full_name without ever writing to full_name  &#xA;          $index-&amp;gt;text(&#39;first_name&#39;)-&amp;gt;copyTo(&#39;full_name&#39;);&#xA;          $index-&amp;gt;text(&#39;last_name&#39;)-&amp;gt;copyTo(&#39;full_name&#39;);&#xA;          $index-&amp;gt;text(&#39;full_name&#39;);&#xA;&#xA;          //Multiple types =&amp;gt; Order matters ::&#xA;          //Top level `email` will be a searchable text field&#xA;          //Sub Property will be a keyword type which can be sorted using orderBy(&#39;email.keyword&#39;)            &#xA;          $index-&amp;gt;text(&#39;email&#39;);&#xA;          $index-&amp;gt;keyword(&#39;email&#39;);&#xA;&#xA;          //Dates have an optional formatting as second parameter&#xA;          $index-&amp;gt;date(&#39;first_contact&#39;, &#39;epoch_second&#39;);&#xA;            &#xA;          //Objects are defined with dot notation:&#xA;          $index-&amp;gt;text(&#39;products.name&#39;);&#xA;          $index-&amp;gt;float(&#39;products.price&#39;)-&amp;gt;coerce(false);&#xA;&#xA;          //Disk space considerations ::&#xA;          //Not indexed and not searchable:&#xA;          $index-&amp;gt;text(&#39;internal_notes&#39;)-&amp;gt;docValues(false);  &#xA;          //Remove scoring for search:&#xA;          $index-&amp;gt;array(&#39;tags&#39;)-&amp;gt;norms(false);  &#xA;          //Remove from index, can&#39;t search by this field but can still use for aggregations:&#xA;          $index-&amp;gt;integer(&#39;score&#39;)-&amp;gt;index(false);  &#xA;&#xA;          //If null is passed as value, then it will be saved as &#39;NA&#39; which is searchable&#xA;          $index-&amp;gt;keyword(&#39;favorite_color&#39;)-&amp;gt;nullValue(&#39;NA&#39;);  &#xA;&#xA;          //Alias Example&#xA;          $index-&amp;gt;text(&#39;notes&#39;);&#xA;          $index-&amp;gt;alias(&#39;comments&#39;, &#39;notes&#39;);&#xA;&#xA;          $index-&amp;gt;geo(&#39;last_login&#39;);&#xA;          $index-&amp;gt;date(&#39;created_at&#39;);&#xA;          $index-&amp;gt;date(&#39;updated_at&#39;);&#xA;&#xA;          //Settings&#xA;          $index-&amp;gt;settings(&#39;number_of_shards&#39;, 3);&#xA;          $index-&amp;gt;settings(&#39;number_of_replicas&#39;, 2);&#xA;&#xA;          //Other Mappings&#xA;          $index-&amp;gt;map(&#39;dynamic&#39;, false);&#xA;          $index-&amp;gt;map(&#39;date_detection&#39;, false);&#xA;        });&#xA;        &#xA;        //Example analyzer builder&#xA;        Schema::setAnalyser(&#39;contacts&#39;, function (AnalyzerBlueprint $settings) {&#xA;            $settings-&amp;gt;analyzer(&#39;my_custom_analyzer&#39;)&#xA;                -&amp;gt;type(&#39;custom&#39;)&#xA;                -&amp;gt;tokenizer(&#39;punctuation&#39;)&#xA;                -&amp;gt;filter([&#39;lowercase&#39;, &#39;english_stop&#39;])&#xA;                -&amp;gt;charFilter([&#39;emoticons&#39;]);&#xA;            $settings-&amp;gt;tokenizer(&#39;punctuation&#39;)&#xA;                -&amp;gt;type(&#39;pattern&#39;)&#xA;                -&amp;gt;pattern(&#39;[ .,!?]&#39;);&#xA;            $settings-&amp;gt;charFilter(&#39;emoticons&#39;)&#xA;                -&amp;gt;type(&#39;mapping&#39;)&#xA;                -&amp;gt;mappings([&#34;:) =&amp;gt; _happy_&#34;, &#34;:( =&amp;gt; _sad_&#34;]);&#xA;            $settings-&amp;gt;filter(&#39;english_stop&#39;)&#xA;                -&amp;gt;type(&#39;stop&#39;)&#xA;                -&amp;gt;stopwords(&#39;_english_&#39;);&#xA;        });&#xA;    }&#xA;    &#xA;    public function down()&#xA;    {&#xA;        Schema::deleteIfExists(&#39;contacts&#39;);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All methods&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Schema::getIndices();&#xA;Schema::getMappings(&#39;my_index&#39;)&#xA;Schema::getSettings(&#39;my_index&#39;)&#xA;Schema::create(&#39;my_index&#39;,function (IndexBlueprint $index) {&#xA;    //......&#xA;})&#xA;Schema::createIfNotExists(&#39;my_index&#39;,function (IndexBlueprint $index) {&#xA;    //......&#xA;})&#xA;Schema::reIndex(&#39;from_index&#39;,&#39;to_index&#39;) {&#xA;    //......&#xA;})&#xA;Schema::modify(&#39;my_index&#39;,function (IndexBlueprint $index) {&#xA;    //......&#xA;});&#xA;Schema::delete(&#39;my_index&#39;)&#xA;Schema::deleteIfExists(&#39;my_index&#39;)&#xA;Schema::setAnalyser(&#39;my_index&#39;,function (AnalyzerBlueprint $settings) {&#xA;&#x9;//......&#xA;});&#xA;//Booleans&#xA;Schema::hasField(&#39;my_index&#39;,&#39;my_field&#39;)&#xA;Schema::hasFields(&#39;my_index&#39;,[&#39;field_a&#39;,&#39;field_b&#39;,&#39;field_c&#39;])&#xA;Schema::hasIndex(&#39;my_index&#39;)&#xA;//DIY&#xA;Schema::dsl(&#39;indexMethod&#39;,$dslParams)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example manual DSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Schema::dsl(&#39;close&#39;,[&#39;index&#39; =&amp;gt; &#39;my_index&#39;])&#xA;$dslParams = [&#xA;  &#39;index&#39; =&amp;gt; &#39;my_index&#39;,&#xA;  &#39;body&#39; =&amp;gt; .........&#xA;];&#xA;Schema::dsl(&#39;putSettings&#39;,$dslParams)&#xA;Schema::dsl(&#39;open&#39;,[&#39;index&#39; =&amp;gt; &#39;my_index&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Behind the scenes it uses the official elasticsearch PHP client, it will call &lt;code&gt;$client-&amp;gt;indices()-&amp;gt;{$method}($params);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Queues&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;[Coming]&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Dynamic Indies&lt;/h1&gt; &#xA;&lt;p&gt;In some cases you will need to split a model into different indices. There are limits to this to keep within reasonable Laravel ORM bounds, but if you keep the index prefix consistent then the plugin can manage the rest.&lt;/p&gt; &#xA;&lt;p&gt;For example, let&#39;s imagine we&#39;re tracking page hits, the &lt;code&gt;PageHit.php&lt;/code&gt; model could be&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Models;&#xA;&#xA;use PDPhilip\Elasticsearch\Eloquent\Model as Eloquent;&#xA;&#xA;class PageHit extends Eloquent&#xA;{&#xA;    protected $connection = &#39;elasticsearch&#39;;&#xA;    protected $index = &#39;page_hits_*&#39;; //Dynamic index&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you set a dynamic index you can read/search across all the indices that match the prefix &lt;code&gt;page_hits_&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$pageHits = PageHit::where(&#39;page_id&#39;,1)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need to set the record&#39;s actual index when creating a new record, with &lt;code&gt;setIndex(&#39;value&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$pageHit = new PageHit&#xA;$pageHit-&amp;gt;page_id = 4;&#xA;$pageHit-&amp;gt;ip = $someIp;&#xA;$pageHit-&amp;gt;setIndex(&#39;page_hits_&#39;.date(&#39;Y-m-d&#39;));&#xA;$pageHit-&amp;gt;save(); &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each eloquent model will have the current record&#39;s index embedded into it, to retrieve it simply call &lt;code&gt;getRecordIndex()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$pageHit-&amp;gt;getRecordIndex();  //returns page_hits_2021-01-01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;RAW DSL&lt;/h1&gt; &#xA;&lt;p&gt;BYO query, sure! We&#39;ll get out the way and try to return the values in a collection for you:&lt;/p&gt; &#xA;&lt;p&gt;Searching Models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$bodyParams = [&#xA;  &#39;query&#39; =&amp;gt; [&#xA;    &#39;match&#39; =&amp;gt; [&#xA;      &#39;color&#39; =&amp;gt; &#39;silver&#39;,&#xA;    ],&#xA;  ],&#xA;];&#xA;&#xA;return Product::rawSearch($bodyParams); //Will search within the products index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Elasticsearchisms&lt;/h1&gt; &#xA;&lt;h4&gt;[A] Error: all shards failed&lt;/h4&gt; &#xA;&lt;p&gt;This error usually points to an index mapping issue, ex:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trying to order on a TEXT field&lt;/li&gt; &#xA; &lt;li&gt;Trying a get filter on a field that is not explicitly set as one&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;[B] Elasticsearch&#39;s default search limit is to return 10 collections&lt;/h4&gt; &#xA;&lt;p&gt;This plugin sets the default limit to 1000, however you can set your own with &lt;code&gt;MAX_SIZE&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use PDPhilip\Elasticsearch\Eloquent\Model;&#xA;/**&#xA; * @mixin \Eloquent&#xA; */&#xA;class Product extends Model&#xA;{&#xA;    const MAX_SIZE = 10000;&#xA;    protected $connection = &#39;elasticsearch&#39;;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remember, you can use chunking if you need to cycle through all the records&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;[C] Empty Text Fields&lt;/h4&gt; &#xA;&lt;p&gt;By default, empty text fields are not searchable as they are not indexed. If you need to be able to search for empty values you have two options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Exclude the field on Saving/Updating , then use &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#wherenull&#34;&gt;#wherenull&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create an index where the field is set to have a null value see &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#Schema/index&#34;&gt;Schema&lt;/a&gt; where &lt;code&gt;$index-&amp;gt;keyword(&#39;favorite_color&#39;)-&amp;gt;nullValue(&#39;NA&#39;); &lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;[D] Ordering by Text field&lt;/h4&gt; &#xA;&lt;p&gt;Elasticsearch can not order by text fields due to how the values are indexed and tokenized. If you do not define a string value upfront in your &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#Schema/index&#34;&gt;Schema&lt;/a&gt; then Elasticsearch will default to saving the field as a &lt;code&gt;text&lt;/code&gt; field. If you try to sort by that field the database engine will fail with the error: &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#a-error-all-shards-failed&#34;&gt;all shards failed&lt;/a&gt;. Options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you do not need to search the text within the field and ordering is important, then use a &lt;code&gt;keyword&lt;/code&gt; field type: To do so define your index upfront in the &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#Schema/index&#34;&gt;Schema&lt;/a&gt; and set &lt;code&gt;$index-&amp;gt;keyword(&#39;email&#39;)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you need to have the field both searchable and sortable, then you&#39;ll need to have a multi type definition upfront in your &lt;a href=&#34;https://raw.githubusercontent.com/pdphilip/laravel-elasticsearch/main/#Schema/index&#34;&gt;Schema&lt;/a&gt; , ex:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$index-&amp;gt;text(&#39;description&#39;)&#xA;$index-&amp;gt;keyword(&#39;description&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The order matters, the field will primarily be a text field, required for searching with a keyword sub-type. To be able to order by this field you would have to use &lt;code&gt;orderBy(&#39;description.keyword&#39;)&lt;/code&gt; to tell elasticsearch which type to use.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;[E] Saving and refresh&lt;/h4&gt; &#xA;&lt;p&gt;Refresh requests are synchronous and do not return a response until the refresh operation completes.&lt;/p&gt; &#xA;&lt;p&gt;All saves are by default done with &lt;code&gt;refresh=wait_for&lt;/code&gt; parameter - this is to ensure that the data is available immediately after it has been written. However, there is response delay which may not be optimal. If you intend to write once and not update immediately or won&#39;t need to search for the record immediately, then do &lt;code&gt;saveWithoutRefresh()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Unsupported Eloquent methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;upsert()&lt;/code&gt;, &lt;code&gt;distinct()&lt;/code&gt;, &lt;code&gt;groupBy()&lt;/code&gt;, &lt;code&gt;groupByRaw()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This package was inspired by &lt;a href=&#34;https://github.com/jenssegers/laravel-mongodb&#34;&gt;jenssegers/laravel-mongodb&lt;/a&gt;, a MongoDB implementation of Laravel&#39;s Eloquent ORM - Thank you!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spatie/laravel-help-space</title>
    <updated>2023-01-30T01:41:47Z</updated>
    <id>tag:github.com,2023-01-30:/spatie/laravel-help-space</id>
    <link href="https://github.com/spatie/laravel-help-space" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Integrate HelpSpace in your Laravel app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Integrate HelpSpace in your Laravel app&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/spatie/laravel-help-space&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/spatie/laravel-help-space.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/spatie/laravel-help-space/actions?query=workflow%3Arun-tests+branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/spatie/laravel-help-space/run-tests.yml?branch=main&amp;amp;label=tests&amp;amp;style=flat-square&#34; alt=&#34;GitHub Tests Action Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/spatie/laravel-help-space/actions?query=workflow%3A%22Fix+PHP+code+style+issues%22+branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/spatie/laravel-help-space/fix-php-code-style-issues.yml?branch=main&amp;amp;label=code%20style&amp;amp;style=flat-square&#34; alt=&#34;GitHub Code Style Action Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/spatie/laravel-help-space&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/spatie/laravel-help-space.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://helpspace.com&#34;&gt;HelpSpace&lt;/a&gt; is a beautiful help desk service. On of its features is that it can display a sidebar with extra information about the person that opened a ticket.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/spatie/laravel-help-space/raw/main/docs/sidebar.jpg?raw=true&#34; alt=&#34;sidebar&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;HelpSpace sends a request to your app to get the HTML content to populate that sidebar. Our package makes it easy to validate if an incoming request from HelpSpace is valid and allows you to respond to it.&lt;/p&gt; &#xA;&lt;p&gt;When installed, this is how you can respond to an incoming request from HelpSpace.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\HelpSpace\Http\Requests\HelpSpaceRequest;&#xA;&#xA;HelpSpace::sidebar(function(HelpSpaceRequest $request) {&#xA;    $user = User::firstWhere(&#39;email&#39;, $request-&amp;gt;email())&#xA;    &#xA;    if (! $user) {&#xA;        return &#39;No user found&#39;;&#xA;    }&#xA;    &#xA;    // any view of your own in which you render the html&#xA;    // to be displayed at HelpSpace&#xA;    return view(&#39;help-space.sidebar&#39;, compact(&#39;user&#39;));&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support us&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spatie.be/github-ad-click/laravel-help-space&#34;&gt;&lt;img src=&#34;https://github-ads.s3.eu-central-1.amazonaws.com/laravel-help-space.jpg?t=1&#34; width=&#34;419px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We invest a lot of resources into creating &lt;a href=&#34;https://spatie.be/open-source&#34;&gt;best in class open source packages&lt;/a&gt;. You can support us by &lt;a href=&#34;https://spatie.be/open-source/support-us&#34;&gt;buying one of our paid products&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You&#39;ll find our address on &lt;a href=&#34;https://spatie.be/about-us&#34;&gt;our contact page&lt;/a&gt;. We publish all received postcards on &lt;a href=&#34;https://spatie.be/open-source/postcards&#34;&gt;our virtual postcard wall&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require spatie/laravel-help-space&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To publish the config file and to create the &lt;code&gt;app/Providers/HelpSpaceServiceProvider.app&lt;/code&gt; class in your app, run this command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan help-space:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the contents of the published config file at &lt;code&gt;config/help-space.php&lt;/code&gt; app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return [&#xA;    /*&#xA;     * The secret used to verify if the incoming HelpSpace secret is valid&#xA;     */&#xA;    &#39;secret&#39; =&amp;gt; env(&#39;HELP_SPACE_SECRET&#39;),&#xA;&#xA;    /*&#xA;     * The package will automatically register this route to handle incoming&#xA;     * requests from HelpSpace.&#xA;     *&#xA;     * You can set this to `null` if you prefer to register your route manually.&#xA;     */&#xA;    &#39;url&#39; =&amp;gt; &#39;/help-space&#39;,&#xA;&#xA;    /*&#xA;     * These middleware will be applied on the automatically registered route.&#xA;     */&#xA;    &#39;middleware&#39; =&amp;gt; [&#xA;        Spatie\HelpSpace\Http\Middleware\IsValidHelpSpaceRequest::class,&#xA;        &#39;api&#39;,&#xA;    ],&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, In your &lt;code&gt;.env&lt;/code&gt; file, you must set a new env-variable called &lt;code&gt;HELP_SPACE_SECRET&lt;/code&gt; to a random string. At &lt;a href=&#34;https://helpspace.com&#34;&gt;HelpSpace&lt;/a&gt; you must navigate to the &#34;Custom Ticket sidebar&#34; in the integration settings. There you must input that random string. This secret will be used to verify if an incoming request is really coming from HelpSpace.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/spatie/laravel-help-space/raw/main/docs/settings.jpg?raw=true&#34; alt=&#34;settings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The package will automatically register a route at &lt;code&gt;/help-space&lt;/code&gt;. This route &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-help-space/main/#customizing-the-registered-route&#34;&gt;can be customized&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;If you ran the install command from the section above, then your application a &lt;code&gt;HelpSpaceServiceProvider.php&lt;/code&gt; service provider in &lt;code&gt;app/Providers&lt;/code&gt;. This is the content.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace App\Providers;&#xA;&#xA;use Illuminate\Support\ServiceProvider;&#xA;use Spatie\HelpSpace\Facades\HelpSpace;&#xA;use Spatie\HelpSpace\Http\Requests\HelpSpaceRequest;&#xA;&#xA;class HelpSpaceServiceProvider extends ServiceProvider&#xA;{&#xA;    public function register()&#xA;    {&#xA;        HelpSpace::sidebar(function(HelpSpaceRequest $request) {        &#xA;            return &#34;HTML about {$request-&amp;gt;email()}&#34;;&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The callable in &lt;code&gt;sidebar&lt;/code&gt; will be executed whenever HelpSpace sends a request to your app. The &lt;code&gt;email()&lt;/code&gt; method of the given &lt;code&gt;HelpSpaceRequest&lt;/code&gt; will contain the email address of the person that opened the ticket.&lt;/p&gt; &#xA;&lt;p&gt;Instead of returning a string, you can also return a view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;HelpSpace::sidebar(function(HelpSpaceRequest $request) {&#xA;    $user = User::firstWhere(&#39;email&#39;, $request-&amp;gt;email());&#xA;    &#xA;    return view(&#39;your-own-view&#39;, compact(&#39;user&#39;));        &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preview the content of the sidebar&lt;/h2&gt; &#xA;&lt;p&gt;When working on the view that returns the HTML of the sidebar, it can be handy to preview it locally, instead of letting HelpScout sending requests.&lt;/p&gt; &#xA;&lt;p&gt;To see the HTML for a given email address, you can use the &lt;code&gt;help-space:render-sidebar&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# returns the HTML for the given email address&#xA;php artisan help-space:render-sidebar --email=john@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customizing the registered route&lt;/h2&gt; &#xA;&lt;p&gt;The package will automatically register a route at &lt;code&gt;/help-space&lt;/code&gt;. You can change this value in the &lt;code&gt;help-space.php&lt;/code&gt; config file.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can register your own route.&lt;/p&gt; &#xA;&lt;p&gt;First, you must set the &lt;code&gt;url&lt;/code&gt; key in the &lt;code&gt;help-space.php&lt;/code&gt; config file to &lt;code&gt;null&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next, you must add this to your routes file, preferably &lt;code&gt;routes/api.php&lt;/code&gt; so that your app doesn&#39;t start a session when a new request comes in from HelpSpace.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// in a routes file, preferable in routes/api.php&#xA;&#xA;Route::helpSpaceSidebar(&#39;your-custom-segment&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above route will register a route with URL &lt;code&gt;https://yourdomain.com/api/your-custom-segment&lt;/code&gt; (when you registered it in the api.php routes file.)&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-help-space/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information on what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-help-space/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://raw.githubusercontent.com/spatie/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freekmurze&#34;&gt;Freek Van der Herten&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spatie/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-help-space/main/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>