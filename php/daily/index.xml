<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-12T01:32:27Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>crater-invoice/crater</title>
    <updated>2022-06-12T01:32:27Z</updated>
    <id>tag:github.com,2022-06-12:/crater-invoice/crater</id>
    <link href="https://github.com/crater-invoice/crater" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Invoicing Solution for Individuals &amp; Businesses&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://res.cloudinary.com/bytefury/image/upload/v1574149856/Crater/craterframe.png&#34;&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Crater is an open-source web &amp;amp; mobile app that helps you track expenses, payments &amp;amp; create professional invoices &amp;amp; estimates.&lt;/p&gt; &#xA;&lt;p&gt;Web Application is made using Laravel &amp;amp; VueJS while the Mobile Apps are built using React Native.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crater-invoice/crater/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crater-invoice/crater/master/#download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crater-invoice/crater/master/#mobile-apps&#34;&gt;Mobile Apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crater-invoice/crater/master/#discord&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crater-invoice/crater/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crater-invoice/crater/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crater-invoice/crater/master/#translate&#34;&gt;Help us translate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crater-invoice/crater/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.craterapp.com/installation.html&#34;&gt;Installation Steps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.craterapp.com/&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.craterapp.com/developer-guide.html&#34;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api-docs.craterapp.com&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://craterapp.com/downloads&#34;&gt;Download Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mobile Apps&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.craterapp.app&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/app/id1489169767&#34;&gt;IOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bytefury/crater-mobile&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Discord&lt;/h2&gt; &#xA;&lt;p&gt;Join the Crater discord server to discuss: &lt;a href=&#34;https://discord.gg/nyTstm6&#34;&gt;Invite Link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;~~Here&#39;s a rough roadmap of things to come (not in any specific order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatic Update&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Email Configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Installation Wizard&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Address Customisation &amp;amp; Default notes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Edit Email before Sending Invoice&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Available as a docker image&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Performance Improvements&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customer View page&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add and Use Custom Fields on Invoices &amp;amp; Estimates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple Companies&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Recurring Invoices&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customer Portal&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Accept Payments (Stripe Integration)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; White Labeling (Easy Invoice, Email &amp;amp; Consumer Portal Theme customisation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Modules API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Blockchain Integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Web 3.0 Accounting&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Vendors &amp;amp; Bills&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inventory Management&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Payment Reminders&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve Accessibility&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Debit &amp;amp; Credit Notes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Time Tracking&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Full service Payroll&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;¬© 2022 Crater Invoice, Inc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Special thanks to:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BirkhoffLee&#34;&gt;Birkhoff Lee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akaunting/akaunting&#34;&gt;Akaunting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MakerLab-Dev&#34;&gt;MakerLab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sebastiancretu&#34;&gt;Sebastian Cretu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheZoker&#34;&gt;Florian Gareis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translate&lt;/h2&gt; &#xA;&lt;p&gt;Help us translate on &lt;a href=&#34;https://crowdin.com/project/crater-invoice&#34;&gt;https://crowdin.com/project/crater-invoice&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thanks to Translation Contributors:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hsnapps&#34;&gt;Hassan A. Ba Abdullah (Arabic)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PHClement&#34;&gt;Cl√©ment de Louvencourt (French)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RobinDev&#34;&gt;Robin Delattre (French)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Loosie94&#34;&gt;Ren√© Loos (Dutch)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/azaricstefan&#34;&gt;Stefan Azariƒá (Serbian)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rexlManu&#34;&gt;Emmanuel Lampe (German)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edevrob&#34;&gt;edevrob (Latvian)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Crater is released under the GNU AFFERO GENERAL PUBLIC LICENSE Version 3. See &lt;a href=&#34;https://raw.githubusercontent.com/crater-invoice/crater/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jupeter/clean-code-php</title>
    <updated>2022-06-12T01:32:27Z</updated>
    <id>tag:github.com,2022-06-12:/jupeter/clean-code-php</id>
    <link href="https://github.com/jupeter/clean-code-php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üõÅ Clean Code concepts adapted for PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clean Code PHP&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#variables&#34;&gt;Variables&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-meaningful-and-pronounceable-variable-names&#34;&gt;Use meaningful and pronounceable variable names&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-the-same-vocabulary-for-the-same-type-of-variable&#34;&gt;Use the same vocabulary for the same type of variable&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-searchable-names-part-1&#34;&gt;Use searchable names (part 1)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-searchable-names-part-2&#34;&gt;Use searchable names (part 2)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-explanatory-variables&#34;&gt;Use explanatory variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-nesting-too-deeply-and-return-early-part-1&#34;&gt;Avoid nesting too deeply and return early (part 1)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-nesting-too-deeply-and-return-early-part-2&#34;&gt;Avoid nesting too deeply and return early (part 2)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-mental-mapping&#34;&gt;Avoid Mental Mapping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-add-unneeded-context&#34;&gt;Don&#39;t add unneeded context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#comparison&#34;&gt;Comparison&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-identical-comparison&#34;&gt;Use identical comparison&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#null-coalescing-operator&#34;&gt;Null coalescing operator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#functions&#34;&gt;Functions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-default-arguments-instead-of-short-circuiting-or-conditionals&#34;&gt;Use default arguments instead of short circuiting or conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#function-arguments-2-or-fewer-ideally&#34;&gt;Function arguments (2 or fewer ideally)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#function-names-should-say-what-they-do&#34;&gt;Function names should say what they do&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#functions-should-only-be-one-level-of-abstraction&#34;&gt;Functions should only be one level of abstraction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-use-flags-as-function-parameters&#34;&gt;Don&#39;t use flags as function parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-side-effects&#34;&gt;Avoid Side Effects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-write-to-global-functions&#34;&gt;Don&#39;t write to global functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-use-a-singleton-pattern&#34;&gt;Don&#39;t use a Singleton pattern&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#encapsulate-conditionals&#34;&gt;Encapsulate conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-negative-conditionals&#34;&gt;Avoid negative conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-conditionals&#34;&gt;Avoid conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-type-checking-part-1&#34;&gt;Avoid type-checking (part 1)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-type-checking-part-2&#34;&gt;Avoid type-checking (part 2)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#remove-dead-code&#34;&gt;Remove dead code&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#objects-and-data-structures&#34;&gt;Objects and Data Structures&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-object-encapsulation&#34;&gt;Use object encapsulation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#make-objects-have-privateprotected-members&#34;&gt;Make objects have private/protected members&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#classes&#34;&gt;Classes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#prefer-composition-over-inheritance&#34;&gt;Prefer composition over inheritance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-fluent-interfaces&#34;&gt;Avoid fluent interfaces&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#prefer-final-classes&#34;&gt;Prefer final classes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#solid&#34;&gt;SOLID&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;Single Responsibility Principle (SRP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#openclosed-principle-ocp&#34;&gt;Open/Closed Principle (OCP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#liskov-substitution-principle-lsp&#34;&gt;Liskov Substitution Principle (LSP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#interface-segregation-principle-isp&#34;&gt;Interface Segregation Principle (ISP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dependency-inversion-principle-dip&#34;&gt;Dependency Inversion Principle (DIP)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-repeat-yourself-dry&#34;&gt;Don‚Äôt repeat yourself (DRY)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Software engineering principles, from Robert C. Martin&#39;s book &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for PHP. This is not a style guide. It&#39;s a guide to producing readable, reusable, and refactorable software in PHP.&lt;/p&gt; &#xA;&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Inspired from &lt;a href=&#34;https://github.com/ryanmcdermott/clean-code-javascript&#34;&gt;clean-code-javascript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Although many developers still use PHP 5, most of the examples in this article only work with PHP 7.1+.&lt;/p&gt; &#xA;&lt;h2&gt;Variables&lt;/h2&gt; &#xA;&lt;h3&gt;Use meaningful and pronounceable variable names&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$ymdstr = $moment-&amp;gt;format(&#39;y-m-d&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$currentDate = $moment-&amp;gt;format(&#39;y-m-d&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;getUserInfo();&#xA;getUserData();&#xA;getUserRecord();&#xA;getUserProfile();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;getUser();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use searchable names (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;We will read more code than we will ever write. It&#39;s important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// What the heck is 448 for?&#xA;$result = $serializer-&amp;gt;serialize($data, 448);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$json = $serializer-&amp;gt;serialize($data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use searchable names (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User&#xA;{&#xA;    // What the heck is 7 for?&#xA;    public $access = 7;&#xA;}&#xA;&#xA;// What the heck is 4 for?&#xA;if ($user-&amp;gt;access &amp;amp; 4) {&#xA;    // ...&#xA;}&#xA;&#xA;// What&#39;s going on here?&#xA;$user-&amp;gt;access ^= 2;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User&#xA;{&#xA;    public const ACCESS_READ = 1;&#xA;&#xA;    public const ACCESS_CREATE = 2;&#xA;&#xA;    public const ACCESS_UPDATE = 4;&#xA;&#xA;    public const ACCESS_DELETE = 8;&#xA;&#xA;    // User as default can read, create and update something&#xA;    public $access = self::ACCESS_READ | self::ACCESS_CREATE | self::ACCESS_UPDATE;&#xA;}&#xA;&#xA;if ($user-&amp;gt;access &amp;amp; User::ACCESS_UPDATE) {&#xA;    // do edit ...&#xA;}&#xA;&#xA;// Deny access rights to create something&#xA;$user-&amp;gt;access ^= User::ACCESS_CREATE;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use explanatory variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$address = &#39;One Infinite Loop, Cupertino 95014&#39;;&#xA;$cityZipCodeRegex = &#39;/^[^,]+,\s*(.+?)\s*(\d{5})$/&#39;;&#xA;preg_match($cityZipCodeRegex, $address, $matches);&#xA;&#xA;saveCityZipCode($matches[1], $matches[2]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s better, but we are still heavily dependent on regex.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$address = &#39;One Infinite Loop, Cupertino 95014&#39;;&#xA;$cityZipCodeRegex = &#39;/^[^,]+,\s*(.+?)\s*(\d{5})$/&#39;;&#xA;preg_match($cityZipCodeRegex, $address, $matches);&#xA;&#xA;[, $city, $zipCode] = $matches;&#xA;saveCityZipCode($city, $zipCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Decrease dependence on regex by naming subpatterns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$address = &#39;One Infinite Loop, Cupertino 95014&#39;;&#xA;$cityZipCodeRegex = &#39;/^[^,]+,\s*(?&amp;lt;city&amp;gt;.+?)\s*(?&amp;lt;zipCode&amp;gt;\d{5})$/&#39;;&#xA;preg_match($cityZipCodeRegex, $address, $matches);&#xA;&#xA;saveCityZipCode($matches[&#39;city&#39;], $matches[&#39;zipCode&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid nesting too deeply and return early (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;Too many if-else statements can make your code hard to follow. Explicit is better than implicit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isShopOpen($day): bool&#xA;{&#xA;    if ($day) {&#xA;        if (is_string($day)) {&#xA;            $day = strtolower($day);&#xA;            if ($day === &#39;friday&#39;) {&#xA;                return true;&#xA;            } elseif ($day === &#39;saturday&#39;) {&#xA;                return true;&#xA;            } elseif ($day === &#39;sunday&#39;) {&#xA;                return true;&#xA;            }&#xA;            return false;&#xA;        }&#xA;        return false;&#xA;    }&#xA;    return false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isShopOpen(string $day): bool&#xA;{&#xA;    if (empty($day)) {&#xA;        return false;&#xA;    }&#xA;&#xA;    $openingDays = [&#39;friday&#39;, &#39;saturday&#39;, &#39;sunday&#39;];&#xA;&#xA;    return in_array(strtolower($day), $openingDays, true);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid nesting too deeply and return early (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function fibonacci(int $n)&#xA;{&#xA;    if ($n &amp;lt; 50) {&#xA;        if ($n !== 0) {&#xA;            if ($n !== 1) {&#xA;                return fibonacci($n - 1) + fibonacci($n - 2);&#xA;            }&#xA;            return 1;&#xA;        }&#xA;        return 0;&#xA;    }&#xA;    return &#39;Not supported&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function fibonacci(int $n): int&#xA;{&#xA;    if ($n === 0 || $n === 1) {&#xA;        return $n;&#xA;    }&#xA;&#xA;    if ($n &amp;gt;= 50) {&#xA;        throw new Exception(&#39;Not supported&#39;);&#xA;    }&#xA;&#xA;    return fibonacci($n - 1) + fibonacci($n - 2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; &#xA;&lt;p&gt;Don‚Äôt force the reader of your code to translate what the variable means. Explicit is better than implicit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$l = [&#39;Austin&#39;, &#39;New York&#39;, &#39;San Francisco&#39;];&#xA;&#xA;for ($i = 0; $i &amp;lt; count($l); $i++) {&#xA;    $li = $l[$i];&#xA;    doStuff();&#xA;    doSomeOtherStuff();&#xA;    // ...&#xA;    // ...&#xA;    // ...&#xA;    // Wait, what is `$li` for again?&#xA;    dispatch($li);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$locations = [&#39;Austin&#39;, &#39;New York&#39;, &#39;San Francisco&#39;];&#xA;&#xA;foreach ($locations as $location) {&#xA;    doStuff();&#xA;    doSomeOtherStuff();&#xA;    // ...&#xA;    // ...&#xA;    // ...&#xA;    dispatch($location);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t add unneeded context&lt;/h3&gt; &#xA;&lt;p&gt;If your class/object name tells you something, don&#39;t repeat that in your variable name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    public $carMake;&#xA;&#xA;    public $carModel;&#xA;&#xA;    public $carColor;&#xA;&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    public $make;&#xA;&#xA;    public $model;&#xA;&#xA;    public $color;&#xA;&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comparison&lt;/h2&gt; &#xA;&lt;h3&gt;Use &lt;a href=&#34;http://php.net/manual/en/language.operators.comparison.php&#34;&gt;identical comparison&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The simple comparison will convert the string in an integer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$a = &#39;42&#39;;&#xA;$b = 42;&#xA;&#xA;if ($a != $b) {&#xA;    // The expression will always pass&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comparison &lt;code&gt;$a != $b&lt;/code&gt; returns &lt;code&gt;FALSE&lt;/code&gt; but in fact it&#39;s &lt;code&gt;TRUE&lt;/code&gt;! The string &lt;code&gt;42&lt;/code&gt; is different than the integer &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The identical comparison will compare type and value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$a = &#39;42&#39;;&#xA;$b = 42;&#xA;&#xA;if ($a !== $b) {&#xA;    // The expression is verified&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comparison &lt;code&gt;$a !== $b&lt;/code&gt; returns &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Null coalescing operator&lt;/h3&gt; &#xA;&lt;p&gt;Null coalescing is a new operator &lt;a href=&#34;https://www.php.net/manual/en/migration70.new-features.php&#34;&gt;introduced in PHP 7&lt;/a&gt;. The null coalescing operator &lt;code&gt;??&lt;/code&gt; has been added as syntactic sugar for the common case of needing to use a ternary in conjunction with &lt;code&gt;isset()&lt;/code&gt;. It returns its first operand if it exists and is not &lt;code&gt;null&lt;/code&gt;; otherwise it returns its second operand.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if (isset($_GET[&#39;name&#39;])) {&#xA;    $name = $_GET[&#39;name&#39;];&#xA;} elseif (isset($_POST[&#39;name&#39;])) {&#xA;    $name = $_POST[&#39;name&#39;];&#xA;} else {&#xA;    $name = &#39;nobody&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$name = $_GET[&#39;name&#39;] ?? $_POST[&#39;name&#39;] ?? &#39;nobody&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;h3&gt;Use default arguments instead of short circuiting or conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is not good because &lt;code&gt;$breweryName&lt;/code&gt; can be &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createMicrobrewery($breweryName = &#39;Hipster Brew Co.&#39;): void&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This opinion is more understandable than the previous version, but it better controls the value of the variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createMicrobrewery($name = null): void&#xA;{&#xA;    $breweryName = $name ?: &#39;Hipster Brew Co.&#39;;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://www.php.net/manual/en/language.types.declarations.php&#34;&gt;type hinting&lt;/a&gt; and be sure that the &lt;code&gt;$breweryName&lt;/code&gt; will not be &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createMicrobrewery(string $breweryName = &#39;Hipster Brew Co.&#39;): void&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; &#xA;&lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; &#xA;&lt;p&gt;Zero arguments is the ideal case. One or two arguments is ok, and three should be avoided. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it&#39;s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Questionnaire&#xA;{&#xA;    public function __construct(&#xA;        string $firstname,&#xA;        string $lastname,&#xA;        string $patronymic,&#xA;        string $region,&#xA;        string $district,&#xA;        string $city,&#xA;        string $phone,&#xA;        string $email&#xA;    ) {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Name&#xA;{&#xA;    private $firstname;&#xA;&#xA;    private $lastname;&#xA;&#xA;    private $patronymic;&#xA;&#xA;    public function __construct(string $firstname, string $lastname, string $patronymic)&#xA;    {&#xA;        $this-&amp;gt;firstname = $firstname;&#xA;        $this-&amp;gt;lastname = $lastname;&#xA;        $this-&amp;gt;patronymic = $patronymic;&#xA;    }&#xA;&#xA;    // getters ...&#xA;}&#xA;&#xA;class City&#xA;{&#xA;    private $region;&#xA;&#xA;    private $district;&#xA;&#xA;    private $city;&#xA;&#xA;    public function __construct(string $region, string $district, string $city)&#xA;    {&#xA;        $this-&amp;gt;region = $region;&#xA;        $this-&amp;gt;district = $district;&#xA;        $this-&amp;gt;city = $city;&#xA;    }&#xA;&#xA;    // getters ...&#xA;}&#xA;&#xA;class Contact&#xA;{&#xA;    private $phone;&#xA;&#xA;    private $email;&#xA;&#xA;    public function __construct(string $phone, string $email)&#xA;    {&#xA;        $this-&amp;gt;phone = $phone;&#xA;        $this-&amp;gt;email = $email;&#xA;    }&#xA;&#xA;    // getters ...&#xA;}&#xA;&#xA;class Questionnaire&#xA;{&#xA;    public function __construct(Name $name, City $city, Contact $contact)&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function names should say what they do&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Email&#xA;{&#xA;    //...&#xA;&#xA;    public function handle(): void&#xA;    {&#xA;        mail($this-&amp;gt;to, $this-&amp;gt;subject, $this-&amp;gt;body);&#xA;    }&#xA;}&#xA;&#xA;$message = new Email(...);&#xA;// What is this? A handle for the message? Are we writing to a file now?&#xA;$message-&amp;gt;handle();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Email&#xA;{&#xA;    //...&#xA;&#xA;    public function send(): void&#xA;    {&#xA;        mail($this-&amp;gt;to, $this-&amp;gt;subject, $this-&amp;gt;body);&#xA;    }&#xA;}&#xA;&#xA;$message = new Email(...);&#xA;// Clear and obvious&#xA;$message-&amp;gt;send();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; &#xA;&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function parseBetterPHPAlternative(string $code): void&#xA;{&#xA;    $regexes = [&#xA;        // ...&#xA;    ];&#xA;&#xA;    $statements = explode(&#39; &#39;, $code);&#xA;    $tokens = [];&#xA;    foreach ($regexes as $regex) {&#xA;        foreach ($statements as $statement) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;&#xA;    $ast = [];&#xA;    foreach ($tokens as $token) {&#xA;        // lex...&#xA;    }&#xA;&#xA;    foreach ($ast as $node) {&#xA;        // parse...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad too:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We have carried out some of the functionality, but the &lt;code&gt;parseBetterPHPAlternative()&lt;/code&gt; function is still very complex and not testable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function tokenize(string $code): array&#xA;{&#xA;    $regexes = [&#xA;        // ...&#xA;    ];&#xA;&#xA;    $statements = explode(&#39; &#39;, $code);&#xA;    $tokens = [];&#xA;    foreach ($regexes as $regex) {&#xA;        foreach ($statements as $statement) {&#xA;            $tokens[] = /* ... */;&#xA;        }&#xA;    }&#xA;&#xA;    return $tokens;&#xA;}&#xA;&#xA;function lexer(array $tokens): array&#xA;{&#xA;    $ast = [];&#xA;    foreach ($tokens as $token) {&#xA;        $ast[] = /* ... */;&#xA;    }&#xA;&#xA;    return $ast;&#xA;}&#xA;&#xA;function parseBetterPHPAlternative(string $code): void&#xA;{&#xA;    $tokens = tokenize($code);&#xA;    $ast = lexer($tokens);&#xA;    foreach ($ast as $node) {&#xA;        // parse...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The best solution is move out the dependencies of &lt;code&gt;parseBetterPHPAlternative()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Tokenizer&#xA;{&#xA;    public function tokenize(string $code): array&#xA;    {&#xA;        $regexes = [&#xA;            // ...&#xA;        ];&#xA;&#xA;        $statements = explode(&#39; &#39;, $code);&#xA;        $tokens = [];&#xA;        foreach ($regexes as $regex) {&#xA;            foreach ($statements as $statement) {&#xA;                $tokens[] = /* ... */;&#xA;            }&#xA;        }&#xA;&#xA;        return $tokens;&#xA;    }&#xA;}&#xA;&#xA;class Lexer&#xA;{&#xA;    public function lexify(array $tokens): array&#xA;    {&#xA;        $ast = [];&#xA;        foreach ($tokens as $token) {&#xA;            $ast[] = /* ... */;&#xA;        }&#xA;&#xA;        return $ast;&#xA;    }&#xA;}&#xA;&#xA;class BetterPHPAlternative&#xA;{&#xA;    private $tokenizer;&#xA;    private $lexer;&#xA;&#xA;    public function __construct(Tokenizer $tokenizer, Lexer $lexer)&#xA;    {&#xA;        $this-&amp;gt;tokenizer = $tokenizer;&#xA;        $this-&amp;gt;lexer = $lexer;&#xA;    }&#xA;&#xA;    public function parse(string $code): void&#xA;    {&#xA;        $tokens = $this-&amp;gt;tokenizer-&amp;gt;tokenize($code);&#xA;        $ast = $this-&amp;gt;lexer-&amp;gt;lexify($tokens);&#xA;        foreach ($ast as $node) {&#xA;            // parse...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t use flags as function parameters&lt;/h3&gt; &#xA;&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createFile(string $name, bool $temp = false): void&#xA;{&#xA;    if ($temp) {&#xA;        touch(&#39;./temp/&#39; . $name);&#xA;    } else {&#xA;        touch($name);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createFile(string $name): void&#xA;{&#xA;    touch($name);&#xA;}&#xA;&#xA;function createTempFile(string $name): void&#xA;{&#xA;    touch(&#39;./temp/&#39; . $name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects&lt;/h3&gt; &#xA;&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; &#xA;&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don&#39;t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; &#xA;&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Global variable referenced by following function.&#xA;// If we had another function that used this name, now it&#39;d be an array and it could break it.&#xA;$name = &#39;Ryan McDermott&#39;;&#xA;&#xA;function splitIntoFirstAndLastName(): void&#xA;{&#xA;    global $name;&#xA;&#xA;    $name = explode(&#39; &#39;, $name);&#xA;}&#xA;&#xA;splitIntoFirstAndLastName();&#xA;&#xA;var_dump($name);&#xA;// [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function splitIntoFirstAndLastName(string $name): array&#xA;{&#xA;    return explode(&#39; &#39;, $name);&#xA;}&#xA;&#xA;$name = &#39;Ryan McDermott&#39;;&#xA;$newName = splitIntoFirstAndLastName($name);&#xA;&#xA;var_dump($name);&#xA;// &#39;Ryan McDermott&#39;;&#xA;&#xA;var_dump($newName);&#xA;// [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t write to global functions&lt;/h3&gt; &#xA;&lt;p&gt;Polluting globals is a bad practice in many languages because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let&#39;s think about an example: what if you wanted to have configuration array? You could write global function like &lt;code&gt;config()&lt;/code&gt;, but it could clash with another library that tried to do the same thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function config(): array&#xA;{&#xA;    return [&#xA;        &#39;foo&#39; =&amp;gt; &#39;bar&#39;,&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Configuration&#xA;{&#xA;    private $configuration = [];&#xA;&#xA;    public function __construct(array $configuration)&#xA;    {&#xA;        $this-&amp;gt;configuration = $configuration;&#xA;    }&#xA;&#xA;    public function get(string $key): ?string&#xA;    {&#xA;        // null coalescing operator&#xA;        return $this-&amp;gt;configuration[$key] ?? null;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load configuration and create instance of &lt;code&gt;Configuration&lt;/code&gt; class&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$configuration = new Configuration([&#xA;    &#39;foo&#39; =&amp;gt; &#39;bar&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now you must use instance of &lt;code&gt;Configuration&lt;/code&gt; in your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t use a Singleton pattern&lt;/h3&gt; &#xA;&lt;p&gt;Singleton is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Singleton_pattern&#34;&gt;anti-pattern&lt;/a&gt;. Paraphrased from Brian Button:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;They are generally used as a &lt;strong&gt;global instance&lt;/strong&gt;, why is that so bad? Because &lt;strong&gt;you hide the dependencies&lt;/strong&gt; of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_smell&#34;&gt;code smell&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;They violate the &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;single responsibility principle&lt;/a&gt;: by virtue of the fact that &lt;strong&gt;they control their own creation and lifecycle&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;They inherently cause code to be tightly &lt;a href=&#34;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&#34;&gt;coupled&lt;/a&gt;. This makes faking them out under &lt;strong&gt;test rather difficult&lt;/strong&gt; in many cases.&lt;/li&gt; &#xA; &lt;li&gt;They carry state around for the lifetime of the application. Another hit to testing since &lt;strong&gt;you can end up with a situation where tests need to be ordered&lt;/strong&gt; which is a big no for unit tests. Why? Because each unit test should be independent from the other.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There is also very good thoughts by &lt;a href=&#34;http://misko.hevery.com/about/&#34;&gt;Misko Hevery&lt;/a&gt; about the &lt;a href=&#34;http://misko.hevery.com/2008/08/25/root-cause-of-singletons/&#34;&gt;root of problem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class DBConnection&#xA;{&#xA;    private static $instance;&#xA;&#xA;    private function __construct(string $dsn)&#xA;    {&#xA;        // ...&#xA;    }&#xA;&#xA;    public static function getInstance(): self&#xA;    {&#xA;        if (self::$instance === null) {&#xA;            self::$instance = new self();&#xA;        }&#xA;&#xA;        return self::$instance;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;$singleton = DBConnection::getInstance();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class DBConnection&#xA;{&#xA;    public function __construct(string $dsn)&#xA;    {&#xA;        // ...&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create instance of &lt;code&gt;DBConnection&lt;/code&gt; class and configure it with &lt;a href=&#34;http://php.net/manual/en/pdo.construct.php#refsect1-pdo.construct-parameters&#34;&gt;DSN&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$connection = new DBConnection($dsn);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now you must use instance of &lt;code&gt;DBConnection&lt;/code&gt; in your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($article-&amp;gt;state === &#39;published&#39;) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($article-&amp;gt;isPublished()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isDOMNodeNotPresent(DOMNode $node): bool&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;if (! isDOMNodeNotPresent($node)) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isDOMNodePresent(DOMNode $node): bool&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;if (isDOMNodePresent($node)) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid conditionals&lt;/h3&gt; &#xA;&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, &#34;how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?&#34; The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, &#34;well that&#39;s great but why would I want to do that?&#34; The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        switch ($this-&amp;gt;type) {&#xA;            case &#39;777&#39;:&#xA;                return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getPassengerCount();&#xA;            case &#39;Air Force One&#39;:&#xA;                return $this-&amp;gt;getMaxAltitude();&#xA;            case &#39;Cessna&#39;:&#xA;                return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getFuelExpenditure();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int;&#xA;}&#xA;&#xA;class Boeing777 implements Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getPassengerCount();&#xA;    }&#xA;}&#xA;&#xA;class AirForceOne implements Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        return $this-&amp;gt;getMaxAltitude();&#xA;    }&#xA;}&#xA;&#xA;class Cessna implements Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getFuelExpenditure();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;PHP is untyped, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it becomes tempting to do type-checking in your functions. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function travelToTexas($vehicle): void&#xA;{&#xA;    if ($vehicle instanceof Bicycle) {&#xA;        $vehicle-&amp;gt;pedalTo(new Location(&#39;texas&#39;));&#xA;    } elseif ($vehicle instanceof Car) {&#xA;        $vehicle-&amp;gt;driveTo(new Location(&#39;texas&#39;));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function travelToTexas(Vehicle $vehicle): void&#xA;{&#xA;    $vehicle-&amp;gt;travelTo(new Location(&#39;texas&#39;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;If you are working with basic primitive values like strings, integers, and arrays, and you use PHP 7+ and you can&#39;t use polymorphism but you still feel the need to type-check, you should consider &lt;a href=&#34;https://www.php.net/manual/en/language.types.declarations.php&#34;&gt;type declaration&lt;/a&gt; or strict mode. It provides you with static typing on top of standard PHP syntax. The problem with manually type-checking is that doing it will require so much extra verbiage that the faux &#34;type-safety&#34; you get doesn&#39;t make up for the lost readability. Keep your PHP clean, write good tests, and have good code reviews. Otherwise, do all of that but with PHP strict type declaration or strict mode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function combine($val1, $val2): int&#xA;{&#xA;    if (! is_numeric($val1) || ! is_numeric($val2)) {&#xA;        throw new Exception(&#39;Must be of type Number&#39;);&#xA;    }&#xA;&#xA;    return $val1 + $val2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function combine(int $val1, int $val2): int&#xA;{&#xA;    return $val1 + $val2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove dead code&lt;/h3&gt; &#xA;&lt;p&gt;Dead code is just as bad as duplicate code. There&#39;s no reason to keep it in your codebase. If it&#39;s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function oldRequestModule(string $url): void&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;function newRequestModule(string $url): void&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;$request = newRequestModule($requestUrl);&#xA;inventoryTracker(&#39;apples&#39;, $request, &#39;www.inventory-awesome.io&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function requestModule(string $url): void&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;$request = requestModule($requestUrl);&#xA;inventoryTracker(&#39;apples&#39;, $request, &#39;www.inventory-awesome.io&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Objects and Data Structures&lt;/h2&gt; &#xA;&lt;h3&gt;Use object encapsulation&lt;/h3&gt; &#xA;&lt;p&gt;In PHP you can set &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; keywords for methods. Using it, you can control properties modification on an object.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When you want to do more beyond getting an object property, you don&#39;t have to look up and change every accessor in your codebase.&lt;/li&gt; &#xA; &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; &#xA; &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; &#xA; &lt;li&gt;Inheriting this class, you can override default functionality.&lt;/li&gt; &#xA; &lt;li&gt;You can lazy load your object&#39;s properties, let&#39;s say getting it from a server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, this is part of &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#openclosed-principle-ocp&#34;&gt;Open/Closed&lt;/a&gt; principle.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class BankAccount&#xA;{&#xA;    public $balance = 1000;&#xA;}&#xA;&#xA;$bankAccount = new BankAccount();&#xA;&#xA;// Buy shoes...&#xA;$bankAccount-&amp;gt;balance -= 100;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class BankAccount&#xA;{&#xA;    private $balance;&#xA;&#xA;    public function __construct(int $balance = 1000)&#xA;    {&#xA;      $this-&amp;gt;balance = $balance;&#xA;    }&#xA;&#xA;    public function withdraw(int $amount): void&#xA;    {&#xA;        if ($amount &amp;gt; $this-&amp;gt;balance) {&#xA;            throw new \Exception(&#39;Amount greater than available balance.&#39;);&#xA;        }&#xA;&#xA;        $this-&amp;gt;balance -= $amount;&#xA;    }&#xA;&#xA;    public function deposit(int $amount): void&#xA;    {&#xA;        $this-&amp;gt;balance += $amount;&#xA;    }&#xA;&#xA; &amp;nbsp; &amp;nbsp;public function getBalance(): int&#xA;    {&#xA;        return $this-&amp;gt;balance;&#xA;    }&#xA;}&#xA;&#xA;$bankAccount = new BankAccount();&#xA;&#xA;// Buy shoes...&#xA;$bankAccount-&amp;gt;withdraw($shoesPrice);&#xA;&#xA;// Get balance&#xA;$balance = $bankAccount-&amp;gt;getBalance();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Make objects have private/protected members&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;public&lt;/code&gt; methods and properties are most dangerous for changes, because some outside code may easily rely on them and you can&#39;t control what code relies on them. &lt;strong&gt;Modifications in class are dangerous for all users of class.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protected&lt;/code&gt; modifier are as dangerous as public, because they are available in scope of any child class. This effectively means that difference between public and protected is only in access mechanism, but encapsulation guarantee remains the same. &lt;strong&gt;Modifications in class are dangerous for all descendant classes.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;private&lt;/code&gt; modifier guarantees that code is &lt;strong&gt;dangerous to modify only in boundaries of single class&lt;/strong&gt; (you are safe for modifications and you won&#39;t have &lt;a href=&#34;http://www.urbandictionary.com/define.php?term=Jengaphobia&amp;amp;defid=2494196&#34;&gt;Jenga effect&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Therefore, use &lt;code&gt;private&lt;/code&gt; by default and &lt;code&gt;public/protected&lt;/code&gt; when you need to provide access for external classes.&lt;/p&gt; &#xA;&lt;p&gt;For more information you can read the &lt;a href=&#34;http://fabien.potencier.org/pragmatism-over-theory-protected-vs-private.html&#34;&gt;blog post&lt;/a&gt; on this topic written by &lt;a href=&#34;https://github.com/fabpot&#34;&gt;Fabien Potencier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    public $name;&#xA;&#xA;    public function __construct(string $name)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;    }&#xA;}&#xA;&#xA;$employee = new Employee(&#39;John Doe&#39;);&#xA;// Employee name: John Doe&#xA;echo &#39;Employee name: &#39; . $employee-&amp;gt;name;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    private $name;&#xA;&#xA;    public function __construct(string $name)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;    }&#xA;&#xA;    public function getName(): string&#xA;    {&#xA;        return $this-&amp;gt;name;&#xA;    }&#xA;}&#xA;&#xA;$employee = new Employee(&#39;John Doe&#39;);&#xA;// Employee name: John Doe&#xA;echo &#39;Employee name: &#39; . $employee-&amp;gt;getName();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Classes&lt;/h2&gt; &#xA;&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; &#xA;&lt;p&gt;As stated famously in &lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; &#xA;&lt;p&gt;You might be wondering then, &#34;when should I use inheritance?&#34; It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your inheritance represents an &#34;is-a&#34; relationship and not a &#34;has-a&#34; relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; &#xA; &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; &#xA; &lt;li&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    private $name;&#xA;&#xA;    private $email;&#xA;&#xA;    public function __construct(string $name, string $email)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;        $this-&amp;gt;email = $email;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;// Bad because Employees &#34;have&#34; tax data.&#xA;// EmployeeTaxData is not a type of Employee&#xA;&#xA;class EmployeeTaxData extends Employee&#xA;{&#xA;    private $ssn;&#xA;&#xA;    private $salary;&#xA;&#xA;    public function __construct(string $name, string $email, string $ssn, string $salary)&#xA;    {&#xA;        parent::__construct($name, $email);&#xA;&#xA;        $this-&amp;gt;ssn = $ssn;&#xA;        $this-&amp;gt;salary = $salary;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class EmployeeTaxData&#xA;{&#xA;    private $ssn;&#xA;&#xA;    private $salary;&#xA;&#xA;    public function __construct(string $ssn, string $salary)&#xA;    {&#xA;        $this-&amp;gt;ssn = $ssn;&#xA;        $this-&amp;gt;salary = $salary;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;class Employee&#xA;{&#xA;    private $name;&#xA;&#xA;    private $email;&#xA;&#xA;    private $taxData;&#xA;&#xA;    public function __construct(string $name, string $email)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;        $this-&amp;gt;email = $email;&#xA;    }&#xA;&#xA;    public function setTaxData(EmployeeTaxData $taxData): void&#xA;    {&#xA;        $this-&amp;gt;taxData = $taxData;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid fluent interfaces&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Fluent_interface&#34;&gt;Fluent interface&lt;/a&gt; is an object oriented API that aims to improve the readability of the source code by using &lt;a href=&#34;https://en.wikipedia.org/wiki/Method_chaining&#34;&gt;Method chaining&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;While there can be some contexts, frequently builder objects, where this pattern reduces the verbosity of the code (for example the &lt;a href=&#34;https://phpunit.de/manual/current/en/test-doubles.html&#34;&gt;PHPUnit Mock Builder&lt;/a&gt; or the &lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/query-builder.html&#34;&gt;Doctrine Query Builder&lt;/a&gt;), more often it comes at some costs:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Breaks &lt;a href=&#34;https://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29&#34;&gt;Encapsulation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Breaks &lt;a href=&#34;https://en.wikipedia.org/wiki/Decorator_pattern&#34;&gt;Decorators&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Is harder to &lt;a href=&#34;https://en.wikipedia.org/wiki/Mock_object&#34;&gt;mock&lt;/a&gt; in a test suite.&lt;/li&gt; &#xA; &lt;li&gt;Makes diffs of commits harder to read.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information you can read the full &lt;a href=&#34;https://ocramius.github.io/blog/fluent-interfaces-are-evil/&#34;&gt;blog post&lt;/a&gt; on this topic written by &lt;a href=&#34;https://github.com/Ocramius&#34;&gt;Marco Pivetta&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    private $make = &#39;Honda&#39;;&#xA;&#xA;    private $model = &#39;Accord&#39;;&#xA;&#xA;    private $color = &#39;white&#39;;&#xA;&#xA;    public function setMake(string $make): self&#xA;    {&#xA;        $this-&amp;gt;make = $make;&#xA;&#xA;        // NOTE: Returning this for chaining&#xA;        return $this;&#xA;    }&#xA;&#xA;    public function setModel(string $model): self&#xA;    {&#xA;        $this-&amp;gt;model = $model;&#xA;&#xA;        // NOTE: Returning this for chaining&#xA;        return $this;&#xA;    }&#xA;&#xA;    public function setColor(string $color): self&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;&#xA;        // NOTE: Returning this for chaining&#xA;        return $this;&#xA;    }&#xA;&#xA;    public function dump(): void&#xA;    {&#xA;        var_dump($this-&amp;gt;make, $this-&amp;gt;model, $this-&amp;gt;color);&#xA;    }&#xA;}&#xA;&#xA;$car = (new Car())&#xA;    -&amp;gt;setColor(&#39;pink&#39;)&#xA;    -&amp;gt;setMake(&#39;Ford&#39;)&#xA;    -&amp;gt;setModel(&#39;F-150&#39;)&#xA;    -&amp;gt;dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    private $make = &#39;Honda&#39;;&#xA;&#xA;    private $model = &#39;Accord&#39;;&#xA;&#xA;    private $color = &#39;white&#39;;&#xA;&#xA;    public function setMake(string $make): void&#xA;    {&#xA;        $this-&amp;gt;make = $make;&#xA;    }&#xA;&#xA;    public function setModel(string $model): void&#xA;    {&#xA;        $this-&amp;gt;model = $model;&#xA;    }&#xA;&#xA;    public function setColor(string $color): void&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;    }&#xA;&#xA;    public function dump(): void&#xA;    {&#xA;        var_dump($this-&amp;gt;make, $this-&amp;gt;model, $this-&amp;gt;color);&#xA;    }&#xA;}&#xA;&#xA;$car = new Car();&#xA;$car-&amp;gt;setColor(&#39;pink&#39;);&#xA;$car-&amp;gt;setMake(&#39;Ford&#39;);&#xA;$car-&amp;gt;setModel(&#39;F-150&#39;);&#xA;$car-&amp;gt;dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prefer final classes&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;final&lt;/code&gt; keyword should be used whenever possible:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It prevents an uncontrolled inheritance chain.&lt;/li&gt; &#xA; &lt;li&gt;It encourages &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#prefer-composition-over-inheritance&#34;&gt;composition&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It encourages the &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;Single Responsibility Principle&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It encourages developers to use your public methods instead of extending the class to get access to protected ones.&lt;/li&gt; &#xA; &lt;li&gt;It allows you to change your code without breaking applications that use your class.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The only condition is that your class should implement an interface and no other public methods are defined.&lt;/p&gt; &#xA;&lt;p&gt;For more informations you can read &lt;a href=&#34;https://ocramius.github.io/blog/when-to-declare-classes-final/&#34;&gt;the blog post&lt;/a&gt; on this topic written by &lt;a href=&#34;https://ocramius.github.io/&#34;&gt;Marco Pivetta (Ocramius)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;final class Car&#xA;{&#xA;    private $color;&#xA;&#xA;    public function __construct($color)&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;    }&#xA;&#xA;    /**&#xA;     * @return string The color of the vehicle&#xA;     */&#xA;    public function getColor()&#xA;    {&#xA;        return $this-&amp;gt;color;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Vehicle&#xA;{&#xA;    /**&#xA;     * @return string The color of the vehicle&#xA;     */&#xA;    public function getColor();&#xA;}&#xA;&#xA;final class Car implements Vehicle&#xA;{&#xA;    private $color;&#xA;&#xA;    public function __construct($color)&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;    }&#xA;&#xA;    public function getColor()&#xA;    {&#xA;        return $this-&amp;gt;color;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SOLID&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SOLID&lt;/strong&gt; is the mnemonic acronym introduced by Michael Feathers for the first five principles named by Robert Martin, which meant five basic principles of object-oriented programming and design.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;S: Single Responsibility Principle (SRP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#openclosed-principle-ocp&#34;&gt;O: Open/Closed Principle (OCP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#liskov-substitution-principle-lsp&#34;&gt;L: Liskov Substitution Principle (LSP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#interface-segregation-principle-isp&#34;&gt;I: Interface Segregation Principle (ISP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dependency-inversion-principle-dip&#34;&gt;D: Dependency Inversion Principle (DIP)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated in Clean Code, &#34;There should never be more than one reason for a class to change&#34;. It&#39;s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won&#39;t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It&#39;s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UserSettings&#xA;{&#xA;    private $user;&#xA;&#xA;    public function __construct(User $user)&#xA;    {&#xA;        $this-&amp;gt;user = $user;&#xA;    }&#xA;&#xA;    public function changeSettings(array $settings): void&#xA;    {&#xA;        if ($this-&amp;gt;verifyCredentials()) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;&#xA;    private function verifyCredentials(): bool&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UserAuth&#xA;{&#xA;    private $user;&#xA;&#xA;    public function __construct(User $user)&#xA;    {&#xA;        $this-&amp;gt;user = $user;&#xA;    }&#xA;&#xA;    public function verifyCredentials(): bool&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&#xA;class UserSettings&#xA;{&#xA;    private $user;&#xA;&#xA;    private $auth;&#xA;&#xA;    public function __construct(User $user)&#xA;    {&#xA;        $this-&amp;gt;user = $user;&#xA;        $this-&amp;gt;auth = new UserAuth($user);&#xA;    }&#xA;&#xA;    public function changeSettings(array $settings): void&#xA;    {&#xA;        if ($this-&amp;gt;auth-&amp;gt;verifyCredentials()) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated by Bertrand Meyer, &#34;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&#34; What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;abstract class Adapter&#xA;{&#xA;    protected $name;&#xA;&#xA;    public function getName(): string&#xA;    {&#xA;        return $this-&amp;gt;name;&#xA;    }&#xA;}&#xA;&#xA;class AjaxAdapter extends Adapter&#xA;{&#xA;    public function __construct()&#xA;    {&#xA;        parent::__construct();&#xA;&#xA;        $this-&amp;gt;name = &#39;ajaxAdapter&#39;;&#xA;    }&#xA;}&#xA;&#xA;class NodeAdapter extends Adapter&#xA;{&#xA;    public function __construct()&#xA;    {&#xA;        parent::__construct();&#xA;&#xA;        $this-&amp;gt;name = &#39;nodeAdapter&#39;;&#xA;    }&#xA;}&#xA;&#xA;class HttpRequester&#xA;{&#xA;    private $adapter;&#xA;&#xA;    public function __construct(Adapter $adapter)&#xA;    {&#xA;        $this-&amp;gt;adapter = $adapter;&#xA;    }&#xA;&#xA;    public function fetch(string $url): Promise&#xA;    {&#xA;        $adapterName = $this-&amp;gt;adapter-&amp;gt;getName();&#xA;&#xA;        if ($adapterName === &#39;ajaxAdapter&#39;) {&#xA;            return $this-&amp;gt;makeAjaxCall($url);&#xA;        } elseif ($adapterName === &#39;httpNodeAdapter&#39;) {&#xA;            return $this-&amp;gt;makeHttpCall($url);&#xA;        }&#xA;    }&#xA;&#xA;    private function makeAjaxCall(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;&#xA;    private function makeHttpCall(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Adapter&#xA;{&#xA;    public function request(string $url): Promise;&#xA;}&#xA;&#xA;class AjaxAdapter implements Adapter&#xA;{&#xA;    public function request(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&#xA;class NodeAdapter implements Adapter&#xA;{&#xA;    public function request(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&#xA;class HttpRequester&#xA;{&#xA;    private $adapter;&#xA;&#xA;    public function __construct(Adapter $adapter)&#xA;    {&#xA;        $this-&amp;gt;adapter = $adapter;&#xA;    }&#xA;&#xA;    public function fetch(string $url): Promise&#xA;    {&#xA;        return $this-&amp;gt;adapter-&amp;gt;request($url);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; &#xA;&lt;p&gt;This is a scary term for a very simple concept. It&#39;s formally defined as &#34;If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).&#34; That&#39;s an even scarier definition.&lt;/p&gt; &#xA;&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let&#39;s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the &#34;is-a&#34; relationship via inheritance, you quickly get into trouble.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Rectangle&#xA;{&#xA;    protected $width = 0;&#xA;&#xA;    protected $height = 0;&#xA;&#xA;    public function setWidth(int $width): void&#xA;    {&#xA;        $this-&amp;gt;width = $width;&#xA;    }&#xA;&#xA;    public function setHeight(int $height): void&#xA;    {&#xA;        $this-&amp;gt;height = $height;&#xA;    }&#xA;&#xA;    public function getArea(): int&#xA;    {&#xA;        return $this-&amp;gt;width * $this-&amp;gt;height;&#xA;    }&#xA;}&#xA;&#xA;class Square extends Rectangle&#xA;{&#xA;    public function setWidth(int $width): void&#xA;    {&#xA;        $this-&amp;gt;width = $this-&amp;gt;height = $width;&#xA;    }&#xA;&#xA;    public function setHeight(int $height): void&#xA;    {&#xA;        $this-&amp;gt;width = $this-&amp;gt;height = $height;&#xA;    }&#xA;}&#xA;&#xA;function printArea(Rectangle $rectangle): void&#xA;{&#xA;    $rectangle-&amp;gt;setWidth(4);&#xA;    $rectangle-&amp;gt;setHeight(5);&#xA;&#xA;    // BAD: Will return 25 for Square. Should be 20.&#xA;    echo sprintf(&#39;%s has area %d.&#39;, get_class($rectangle), $rectangle-&amp;gt;getArea()) . PHP_EOL;&#xA;}&#xA;&#xA;$rectangles = [new Rectangle(), new Square()];&#xA;&#xA;foreach ($rectangles as $rectangle) {&#xA;    printArea($rectangle);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The best way is separate the quadrangles and allocation of a more general subtype for both shapes.&lt;/p&gt; &#xA;&lt;p&gt;Despite the apparent similarity of the square and the rectangle, they are different. A square has much in common with a rhombus, and a rectangle with a parallelogram, but they are not subtypes. A square, a rectangle, a rhombus and a parallelogram are separate shapes with their own properties, albeit similar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Shape&#xA;{&#xA;    public function getArea(): int;&#xA;}&#xA;&#xA;class Rectangle implements Shape&#xA;{&#xA;    private $width = 0;&#xA;    private $height = 0;&#xA;&#xA;    public function __construct(int $width, int $height)&#xA;    {&#xA;        $this-&amp;gt;width = $width;&#xA;        $this-&amp;gt;height = $height;&#xA;    }&#xA;&#xA;    public function getArea(): int&#xA;    {&#xA;        return $this-&amp;gt;width * $this-&amp;gt;height;&#xA;    }&#xA;}&#xA;&#xA;class Square implements Shape&#xA;{&#xA;    private $length = 0;&#xA;&#xA;    public function __construct(int $length)&#xA;    {&#xA;        $this-&amp;gt;length = $length;&#xA;    }&#xA;&#xA;    public function getArea(): int&#xA;    {&#xA; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return $this-&amp;gt;length ** 2;&#xA; &amp;nbsp; &amp;nbsp;}&#xA;}&#xA;&#xA;function printArea(Shape $shape): void&#xA;{&#xA;    echo sprintf(&#39;%s has area %d.&#39;, get_class($shape), $shape-&amp;gt;getArea()).PHP_EOL;&#xA;}&#xA;&#xA;$shapes = [new Rectangle(4, 5), new Square(5)];&#xA;&#xA;foreach ($shapes as $shape) {&#xA;    printArea($shape);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; &#xA;&lt;p&gt;ISP states that &#34;Clients should not be forced to depend upon interfaces that they do not use.&#34;&lt;/p&gt; &#xA;&lt;p&gt;A good example to look at that demonstrates this principle is for classes that require large settings objects. Not requiring clients to set up huge amounts of options is beneficial, because most of the time they won&#39;t need all of the settings. Making them optional helps prevent having a &#34;fat interface&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Employee&#xA;{&#xA;    public function work(): void;&#xA;&#xA;    public function eat(): void;&#xA;}&#xA;&#xA;class HumanEmployee implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;&#xA;    public function eat(): void&#xA;    {&#xA;        // ...... eating in lunch break&#xA;    }&#xA;}&#xA;&#xA;class RobotEmployee implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;&#xA;    public function eat(): void&#xA;    {&#xA;        //.... robot can&#39;t eat, but it must implement this method&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Not every worker is an employee, but every employee is a worker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Workable&#xA;{&#xA;    public function work(): void;&#xA;}&#xA;&#xA;interface Feedable&#xA;{&#xA;    public function eat(): void;&#xA;}&#xA;&#xA;interface Employee extends Feedable, Workable&#xA;{&#xA;}&#xA;&#xA;class HumanEmployee implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;&#xA;    public function eat(): void&#xA;    {&#xA;        //.... eating in lunch break&#xA;    }&#xA;}&#xA;&#xA;// robot can only work&#xA;class RobotEmployee implements Workable&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; &#xA;&lt;p&gt;This principle states two essential things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; &#xA; &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This can be hard to understand at first, but if you&#39;ve worked with PHP frameworks (like Symfony), you&#39;ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&#xA;class Robot extends Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;}&#xA;&#xA;class Manager&#xA;{&#xA;    private $employee;&#xA;&#xA;    public function __construct(Employee $employee)&#xA;    {&#xA;        $this-&amp;gt;employee = $employee;&#xA;    }&#xA;&#xA;    public function manage(): void&#xA;    {&#xA;        $this-&amp;gt;employee-&amp;gt;work();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Employee&#xA;{&#xA;    public function work(): void;&#xA;}&#xA;&#xA;class Human implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&#xA;class Robot implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;}&#xA;&#xA;class Manager&#xA;{&#xA;    private $employee;&#xA;&#xA;    public function __construct(Employee $employee)&#xA;    {&#xA;        $this-&amp;gt;employee = $employee;&#xA;    }&#xA;&#xA;    public function manage(): void&#xA;    {&#xA;        $this-&amp;gt;employee-&amp;gt;work();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Don‚Äôt repeat yourself (DRY)&lt;/h2&gt; &#xA;&lt;p&gt;Try to observe the &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt; principle.&lt;/p&gt; &#xA;&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there&#39;s more than one place to alter something if you need to change some logic.&lt;/p&gt; &#xA;&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there&#39;s only one place to update!&lt;/p&gt; &#xA;&lt;p&gt;Often you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; &#xA;&lt;p&gt;Getting the abstraction right is critical, that&#39;s why you should follow the SOLID principles laid out in the &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#classes&#34;&gt;Classes&lt;/a&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don&#39;t repeat yourself, otherwise you&#39;ll find yourself updating multiple places any time you want to change one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function showDeveloperList(array $developers): void&#xA;{&#xA;    foreach ($developers as $developer) {&#xA;        $expectedSalary = $developer-&amp;gt;calculateExpectedSalary();&#xA;        $experience = $developer-&amp;gt;getExperience();&#xA;        $githubLink = $developer-&amp;gt;getGithubLink();&#xA;        $data = [$expectedSalary, $experience, $githubLink];&#xA;&#xA;        render($data);&#xA;    }&#xA;}&#xA;&#xA;function showManagerList(array $managers): void&#xA;{&#xA;    foreach ($managers as $manager) {&#xA;        $expectedSalary = $manager-&amp;gt;calculateExpectedSalary();&#xA;        $experience = $manager-&amp;gt;getExperience();&#xA;        $githubLink = $manager-&amp;gt;getGithubLink();&#xA;        $data = [$expectedSalary, $experience, $githubLink];&#xA;&#xA;        render($data);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function showList(array $employees): void&#xA;{&#xA;    foreach ($employees as $employee) {&#xA;        $expectedSalary = $employee-&amp;gt;calculateExpectedSalary();&#xA;        $experience = $employee-&amp;gt;getExperience();&#xA;        $githubLink = $employee-&amp;gt;getGithubLink();&#xA;        $data = [$expectedSalary, $experience, $githubLink];&#xA;&#xA;        render($data);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Very good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is better to use a compact version of the code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function showList(array $employees): void&#xA;{&#xA;    foreach ($employees as $employee) {&#xA;        render([$employee-&amp;gt;calculateExpectedSalary(), $employee-&amp;gt;getExperience(), $employee-&amp;gt;getGithubLink()]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This is also available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;üá®üá≥&lt;/span&gt; &lt;strong&gt;Chinese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/php-cpm/clean-code-php&#34;&gt;php-cpm/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üá∑üá∫&lt;/span&gt; &lt;strong&gt;Russian:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/peter-gribanov/clean-code-php&#34;&gt;peter-gribanov/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üá™üá∏&lt;/span&gt; &lt;strong&gt;Spanish:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/fikoborquez/clean-code-php&#34;&gt;fikoborquez/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üáßüá∑&lt;/span&gt; &lt;strong&gt;Portuguese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/fabioars/clean-code-php&#34;&gt;fabioars/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jeanjar/clean-code-php/tree/pt-br&#34;&gt;jeanjar/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üáπüá≠&lt;/span&gt; &lt;strong&gt;Thai:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/panuwizzle/clean-code-php&#34;&gt;panuwizzle/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üá´üá∑&lt;/span&gt; &lt;strong&gt;French:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/errorname/clean-code-php&#34;&gt;errorname/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üáªüá≥&lt;/span&gt; &lt;strong&gt;Vietnamese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/viethuongdev/clean-code-php&#34;&gt;viethuongdev/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üá∞üá∑&lt;/span&gt; &lt;strong&gt;Korean:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/yujineeee/clean-code-php&#34;&gt;yujineeee/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üáπüá∑&lt;/span&gt; &lt;strong&gt;Turkish:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/anilozmen/clean-code-php&#34;&gt;anilozmen/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üáÆüá∑&lt;/span&gt; &lt;strong&gt;Persian:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/amirshnll/clean-code-php&#34;&gt;amirshnll/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üáßüá©&lt;/span&gt; &lt;strong&gt;Bangla:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nayeemdev/clean-code-php&#34;&gt;nayeemdev/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üá™üá¨&lt;/span&gt; &lt;strong&gt;Arabic:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ahmedjoda/clean-code-php&#34;&gt;ahmedjoda/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üáØüáµ&lt;/span&gt; &lt;strong&gt;Japanese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hayato07/clean-code-php&#34;&gt;hayato07/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nunomaduro/larastan</title>
    <updated>2022-06-12T01:32:27Z</updated>
    <id>tag:github.com,2022-06-12:/nunomaduro/larastan</id>
    <link href="https://github.com/nunomaduro/larastan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚öóÔ∏è Adds code analysis to Laravel improving developer productivity and code quality.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://supportukrainenow.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner-direct.svg?sanitize=true&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nunomaduro/larastan/master/docs/logo.png&#34; alt=&#34;Larastan Logo&#34; width=&#34;300&#34;&gt; &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nunomaduro/larastan/master/docs/example.png&#34; alt=&#34;Larastan Example&#34; height=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/nunomaduro/larastan/actions&#34;&gt;&lt;img src=&#34;https://github.com/nunomaduro/larastan/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/nunomaduro/larastan/stats&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/nunomaduro/larastan/d/total.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/nunomaduro/larastan&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/nunomaduro/larastan/v/stable.svg?sanitize=true&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nunomaduro/larastan/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/nunomaduro/larastan/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚öóÔ∏è About Larastan&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are using a Laravel version older than 9.x, please refer to &lt;a href=&#34;https://github.com/nunomaduro/larastan/tree/1.x&#34;&gt;Larastan v1.x&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Larastan was created by &lt;a href=&#34;https://github.com/canvural&#34;&gt;Can Vural&lt;/a&gt; and &lt;a href=&#34;https://github.com/nunomaduro&#34;&gt;Nuno Maduro&lt;/a&gt;, got artwork designed by &lt;a href=&#34;http://github.com/caneco&#34;&gt;@Caneco&lt;/a&gt;, is maintained by &lt;a href=&#34;https://github.com/canvural&#34;&gt;Can Vural&lt;/a&gt;, &lt;a href=&#34;https://github.com/nunomaduro&#34;&gt;Nuno Maduro&lt;/a&gt;, and &lt;a href=&#34;https://github.com/szepeviktor&#34;&gt;Viktor Sz√©pe&lt;/a&gt;, and is a &lt;a href=&#34;https://phpstan.org/&#34;&gt;PHPStan&lt;/a&gt; wrapper for Laravel. Larastan focuses on &lt;strong&gt;finding errors in your code&lt;/strong&gt;. It catches whole classes of bugs even &lt;strong&gt;before you write tests&lt;/strong&gt; for the code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adds static typing to Laravel to improve developer productivity and &lt;strong&gt;code quality&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports most of &lt;a href=&#34;https://laravel.com&#34;&gt;Laravel&lt;/a&gt;&#39;s &lt;strong&gt;beautiful magic&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discovers bugs in your code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;While by definition, &#34;static analysis&#34; doesn&#39;t load any of your application&#39;s code. Larastan boots your application&#39;s container, so it can resolve types that are only possible to compute at runtime. That&#39;s why we use the term &#34;code analysis&#34; instead of &#34;static analysis&#34;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;‚ú® Getting Started In 3 Steps&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Requires:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://php.net/releases/&#34;&gt;PHP 8.0+&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/laravel/laravel&#34;&gt;Laravel 9.0+&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;: First, you may use &lt;a href=&#34;https://getcomposer.org&#34;&gt;Composer&lt;/a&gt; to install Larastan as a development dependency into your Laravel project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require nunomaduro/larastan:^2.0 --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Using Larastan for analysing Laravel packages? You may need to install &lt;code&gt;orchestra/testbench&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;: Then, create a &lt;code&gt;phpstan.neon&lt;/code&gt; or &lt;code&gt;phpstan.neon.dist&lt;/code&gt; file in the root of your application. It might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;includes:&#xA;    - ./vendor/nunomaduro/larastan/extension.neon&#xA;&#xA;parameters:&#xA;&#xA;    paths:&#xA;        - app&#xA;&#xA;    # The level 9 is the highest level&#xA;    level: 5&#xA;&#xA;    ignoreErrors:&#xA;        - &#39;#PHPDoc tag @var#&#39;&#xA;&#xA;    excludePaths:&#xA;        - ./*/*/FileToBeExcluded.php&#xA;&#xA;    checkMissingIterableValueType: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For all available options, please take a look at the PHPStan documentation: &lt;strong&gt;&lt;a href=&#34;https://phpstan.org/config-reference&#34;&gt;https://phpstan.org/config-reference&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;: Finally, you may start analyzing your code using the phpstan console command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpstan analyse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are getting the error &lt;code&gt;Allowed memory size exhausted&lt;/code&gt;, then you can use the &lt;code&gt;--memory-limit&lt;/code&gt; option fix the problem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpstan analyse --memory-limit=2G&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ignoring errors&lt;/h2&gt; &#xA;&lt;p&gt;Ignoring a specific error can be done either with a php comment or in the configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// @phpstan-ignore-next-line&#xA;$test-&amp;gt;badMethod();&#xA;&#xA;$test-&amp;gt;badMethod(); // @phpstan-ignore-line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When ignoring errors in PHPStan&#39;s configuration file, they are ignored by writing a regex based on error messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;parameters:&#xA;    ignoreErrors:&#xA;        - &#39;#Call to an undefined method .*badMethod\(\)#&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Baseline file&lt;/h3&gt; &#xA;&lt;p&gt;In older codebases it might be hard to spend the time fixing all the code to pass a high PHPStan Level.&lt;/p&gt; &#xA;&lt;p&gt;To get around this a baseline file can be generated. The baseline file will create a configuration file with all of the current errors, so new code can be written following a higher standard than the old code. (&lt;a href=&#34;https://phpstan.org/user-guide/baseline&#34;&gt;PHPStan Docs&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpstan analyse --generate-baseline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;p&gt;A list of configurable rules specific to Laravel can be found &lt;a href=&#34;https://raw.githubusercontent.com/nunomaduro/larastan/master/docs/rules.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom PHPDoc types&lt;/h2&gt; &#xA;&lt;p&gt;A list of PHPDoc types specific to Larastan can be found &lt;a href=&#34;https://raw.githubusercontent.com/nunomaduro/larastan/master/docs/custom-types.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom PHPStan config parameters&lt;/h2&gt; &#xA;&lt;p&gt;A list of custom config parameters that you can use in your PHPStan config file can be found &lt;a href=&#34;https://raw.githubusercontent.com/nunomaduro/larastan/master/docs/custom-config-parameters.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Errors To Ignore&lt;/h2&gt; &#xA;&lt;p&gt;Some parts of Laravel are currently too magical for Larastan/PHPStan to understand. We listed common &lt;a href=&#34;https://raw.githubusercontent.com/nunomaduro/larastan/master/docs/errors-to-ignore.md&#34;&gt;errors to ignore&lt;/a&gt;, add them as needed&lt;/p&gt; &#xA;&lt;h2&gt;üëäüèª Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to Larastan. All the contribution guidelines are mentioned &lt;a href=&#34;https://raw.githubusercontent.com/nunomaduro/larastan/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/nunomaduro/larastan/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for constant updates &amp;amp; detailed information about the changes. You can also follow the Twitter account for the latest announcements or just come say hi!: &lt;a href=&#34;https://twitter.com/enunomaduro&#34;&gt;@enunomaduro&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/can__vural&#34;&gt;@can__vural&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìñ License&lt;/h2&gt; &#xA;&lt;p&gt;Larastan is an open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/nunomaduro/larastan/master/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>