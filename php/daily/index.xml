<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-11T01:37:42Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kuaifan/dootask</title>
    <updated>2022-06-11T01:37:42Z</updated>
    <id>tag:github.com,2022-06-11:/kuaifan/dootask</id>
    <link href="https://github.com/kuaifan/dootask" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DooTask是一款轻量级的开源在线项目任务管理工具，提供各类文档协作工具、在线思维导图、在线流程图、项目管理、任务分发、即时IM，文件管理等工具。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Install (Docker)&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kuaifan/dootask/master/README_CN.md&#34;&gt;中文文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kuaifan/dootask/master/README_PREVIEW.md&#34;&gt;Screenshot Preview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.dootask.com/&#34;&gt;Demo site&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;QQ Group&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Group No.: &lt;code&gt;546574618&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Docker&lt;/code&gt; &amp;amp; &lt;code&gt;Docker Compose v2.0+&lt;/code&gt; must be installed&lt;/li&gt; &#xA; &lt;li&gt;System: &lt;code&gt;Centos/Debian/Ubuntu/macOS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hardware suggestion: 2 cores and above 4G memory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deployment project&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1、Clone the repository&#xA;&#xA;# Clone projects on github&#xA;git clone --depth=1 https://github.com/kuaifan/dootask.git&#xA;# Or you can use gitee&#xA;git clone --depth=1 https://gitee.com/aipaw/dootask.git&#xA;&#xA;# 2、Enter directory&#xA;cd dootask&#xA;&#xA;# 3、Installation（Custom port installation: ./cmd install --port 2222）&#xA;./cmd install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reset password&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Reset default account password&#xA;./cmd repassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Change port&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./cmd port 2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stop server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./cmd stop&#xA;&#xA;# P.S: Once application is set up, whenever you want to start the server (if it is stopped) run below command&#xA;./cmd start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development compilation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Development mode, Mac OS only&#xA;./cmd dev&#xA;   &#xA;# Production projects, macOS only&#xA;./cmd prod  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shortcuts for running command&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# You can do this using the following command&#xA;./cmd artisan &#34;your command&#34;          # To run a artisan command&#xA;./cmd php &#34;your command&#34;              # To run a php command&#xA;./cmd nginx &#34;your command&#34;            # To run a nginx command&#xA;./cmd redis &#34;your command&#34;            # To run a redis command&#xA;./cmd composer &#34;your command&#34;         # To run a composer command&#xA;./cmd supervisorctl &#34;your command&#34;    # To run a supervisorctl command&#xA;./cmd test &#34;your command&#34;             # To run a phpunit command&#xA;./cmd mysql &#34;your command&#34;            # To run a mysql command (backup: Backup database, recovery: Restore database)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NGINX PROXY SSL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1、Nginx config add&#xA;proxy_set_header X-Forwarded-Host $http_host;&#xA;proxy_set_header X-Forwarded-Proto $scheme;&#xA;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#xA;&#xA;# 2、Running commands in a project&#xA;./cmd https&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrade&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: Please back up your data before upgrading!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Method 1: Running commands in a project&#xA;./cmd update&#xA;&#xA;# Or method 2: use this method if method 1 fails&#xA;git pull&#xA;./cmd mysql backup&#xA;./cmd uninstall&#xA;./cmd install&#xA;./cmd mysql recovery&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If 502 after the upgrade please run &lt;code&gt;./cmd restart&lt;/code&gt; restart the service.&lt;/p&gt; &#xA;&lt;h2&gt;Transfer&lt;/h2&gt; &#xA;&lt;p&gt;Follow these steps to complete the project migration after the new project is installed:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Backup original database&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run command under old project&#xA;./cmd mysql backup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy &lt;code&gt;database backup file&lt;/code&gt; and &lt;code&gt;public/uploads&lt;/code&gt; directory to the new project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restore database to new project&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run command under new project&#xA;./cmd mysql recovery&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Uninstall&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Running commands in a project&#xA;./cmd uninstall&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>daledavies/jump</title>
    <updated>2022-06-11T01:37:42Z</updated>
    <id>tag:github.com,2022-06-11:/daledavies/jump</id>
    <link href="https://github.com/daledavies/jump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jump is yet another self-hosted startpage for your server designed to be simple, stylish, fast and secure.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jump&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/daledavies/jump&#34; alt=&#34;GitHub release (latest by date)&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PHP-%3E%3D8.0-blue?style=flat&#34; alt=&#34;PHP Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/image-size/daledavies/jump?sort=date&#34; alt=&#34;Docker Image Size (latest by date)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Jump is yet another self-hosted startpage for your server designed to be simple, stylish, fast and secure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/daledavies/jump/main/screenshots/screenshot-demo.gif&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast, easy to deploy, secure&lt;/li&gt; &#xA; &lt;li&gt;Custom sites and icons&lt;/li&gt; &#xA; &lt;li&gt;Categorise sites with tags&lt;/li&gt; &#xA; &lt;li&gt;Custom background images&lt;/li&gt; &#xA; &lt;li&gt;Unsplash integration (background images)&lt;/li&gt; &#xA; &lt;li&gt;Search sites added to Jump, plus custom list of search engines&lt;/li&gt; &#xA; &lt;li&gt;Fetch favicons for sites without custom icons&lt;/li&gt; &#xA; &lt;li&gt;Open Weather Map integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Get the container image from Docker Hub (&lt;a href=&#34;https://hub.docker.com/r/daledavies/jump&#34;&gt;https://hub.docker.com/r/daledavies/jump&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The following will start Jump and serve the page at &lt;a href=&#34;http://localhost:8123&#34;&gt;http://localhost:8123&lt;/a&gt; with a custom site name, Open Weather Map support, and volumes to map Jump&#39;s &#34;backgrounds&#34; and &#34;sites&#34; directories to local directories on your machine (&lt;code&gt;OWMAPIKEY&lt;/code&gt; and &lt;code&gt;LATLONG&lt;/code&gt; values below are just for example)...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3&#39;&#xA;services:&#xA;    web:&#xA;        image: daledavies/jump&#xA;        ports:&#xA;            - 8123:8080&#xA;        volumes:&#xA;            - ./backgrounds:/backgrounds&#xA;            - ./search:/search&#xA;            - ./sites:/sites&#xA;        environment:&#xA;            SITENAME: &#39;Custom site name&#39;&#xA;            OWMAPIKEY: &#39;0a1b2c3d4e5f6a7b8c9d0a1b&#39;&#xA;            LATLONG: &#39;51.509865,-0.118092&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the following optional environment variables to configure/customise your Jump site...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SITENAME&lt;/code&gt; - Custom site name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHOWCLOCK: &#39;false&#39;&lt;/code&gt; - Hide the clock.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AMPMCLOCK: &#39;true&#39;&lt;/code&gt; - Show 12 hour clock format if true.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHOWGREETING: &#39;false&#39;&lt;/code&gt; - Show the label &#34;#home&#34; instead of a friendly greeting message.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHOWSEARCH : &#39;false&#39;&lt;/code&gt; - Hide the search button (disable search).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALTLAYOUT: &#39;true&#39;&lt;/code&gt; - Display list of sites using an &lt;a href=&#34;https://raw.githubusercontent.com/daledavies/jump/main/screenshots/screenshot-altlayout.png&#34;&gt;alternative layout&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BGBLUR: 50&lt;/code&gt; - Background image blur percentage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BGBRIGHT: 90&lt;/code&gt; - Background image brightness percentage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UNSPLASHAPIKEY&lt;/code&gt; - An API key for Unsplash, enables fetching random background images from Unsplash.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UNSPLASHCOLLECTIONS&lt;/code&gt; - List of Unsplash collection ID&#39;s (separated by commas) to select random images from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OWMAPIKEY&lt;/code&gt; - An API key for Open Weather Map, LATLONG (below) must also be defined.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LATLONG&lt;/code&gt; - A latitude and longitude for the default location (e.g. &#34;51.509865,-0.118092&#34;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;METRICTEMP: &#39;true&#39;&lt;/code&gt; - Metric (C) or imperial (F) temperature units.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NOINDEX: &#39;true&#39;&lt;/code&gt; - Include a robots noindex meta tag in site header&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CACHEBYPASS: &#39;true&#39;&lt;/code&gt; - Bypass all caches, useful for testing changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;OWMAPIKEY&lt;/code&gt; and &lt;code&gt;LATLONG&lt;/code&gt; config options must be defined together.&lt;/p&gt; &#xA;&lt;h4&gt;Volume Mapping&lt;/h4&gt; &#xA;&lt;p&gt;You can map the &#34;backgrounds&#34;, &#34;search&#34; and &#34;sites&#34; directories to local directories as shown in the Docker Compose example above. Your local directories will be populated with Jump&#39;s default files when the container is next started unless the local directories already contain files, in which case the local files will be used by Jump instead.&lt;/p&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;The same can be achieved just using Docker CLI...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 8123:8080 \&#xA;--volume &amp;lt;path/to/backgrounds&amp;gt;:/backgrounds \&#xA;--volume &amp;lt;path/to/sites&amp;gt;:/sites \&#xA;--volume &amp;lt;path/to/search&amp;gt;:/search \&#xA;--env SITENAME=&#39;Custom site name&#39; \&#xA;--env OWMAPIKEY=&#39;&amp;lt;open weather api key&amp;gt;&#39; \&#xA;--env LATLONG=&#39;&amp;lt;lat,long&amp;gt;&#39; \&#xA;--name jump docker.io/daledavies/jump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Without Docker&lt;/h3&gt; &#xA;&lt;p&gt;Clone this repository and copy everything within the &lt;code&gt;jumpapp&lt;/code&gt; directory to your server, edit &lt;code&gt;config.php&lt;/code&gt; accordingly.&lt;/p&gt; &#xA;&lt;p&gt;Install dependencies via composer by running the following command within the web root...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer install --no-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have created a cache directory and given the web user permission to write to it, the cache directory should match your &lt;code&gt;config.php&lt;/code&gt; entry for &lt;code&gt;cachedir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Open Weather Map&lt;/h3&gt; &#xA;&lt;p&gt;You can configure Jump to get local time and weather updates by adding an Open Weather Map API key to &lt;code&gt;config.php&lt;/code&gt; or passing the &lt;code&gt;OWMAPIKEY &lt;/code&gt; environment variable to the Docker container (as described above).&lt;/p&gt; &#xA;&lt;p&gt;You will also need to provide a default &lt;code&gt;LATLONG&lt;/code&gt; string (e.g. &#34;51.509865,-0.118092&#34;), Jump will use this until you press the location button and allow permission to get your location from the web browser.&lt;/p&gt; &#xA;&lt;h3&gt;Sites&lt;/h3&gt; &#xA;&lt;p&gt;Edit the &lt;code&gt;/sites/sites.json&lt;/code&gt; file to include your own sites on the startpage...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;default&#34;: {&#xA;        &#34;nofollow&#34;: true,&#xA;        &#34;icon&#34;: &#34;my-default-icon.png&#34;,&#xA;        &#34;newtab&#34;: false&#xA;    },&#xA;    &#34;sites&#34;: [&#xA;        {&#xA;            &#34;name&#34;: &#34;Github&#34;,&#xA;            &#34;url&#34; : &#34;https://github.com/daledavies/jump&#34;,&#xA;            &#34;nofollow&#34;: false,&#xA;            &#34;newtab&#34;: true&#xA;        },&#xA;        {&#xA;            &#34;name&#34;: &#34;Bitwarden&#34;,&#xA;            &#34;url&#34; : &#34;https://bitwarden.example.com&#34;,&#xA;            &#34;icon&#34;: &#34;bitwarden.png&#34;,&#xA;            &#34;tags&#34;: [&#34;stuff&#34;]&#xA;        },&#xA;        {&#xA;            &#34;name&#34;: &#34;Gitea&#34;,&#xA;            &#34;url&#34; : &#34;https://git.example.com&#34;,&#xA;            &#34;icon&#34;: &#34;gitea.png&#34;,&#xA;            &#34;tags&#34;: [&#34;stuff&#34;]&#xA;        },&#xA;        {&#xA;            &#34;name&#34;: &#34;Nextcloud&#34;,&#xA;            &#34;url&#34; : &#34;https://cloud.example.com&#34;,&#xA;            &#34;icon&#34;: &#34;nextcloud.png&#34;,&#xA;            &#34;tags&#34;: [&#34;home&#34;, &#34;stuff&#34;, &#34;things&#34;]&#xA;        },&#xA;        {&#xA;            &#34;name&#34;: &#34;Paperless&#34;,&#xA;            &#34;url&#34; : &#34;https://paperless.example.com&#34;,&#xA;            &#34;icon&#34;: &#34;paperless.jpg&#34;,&#xA;            &#34;tags&#34;: [&#34;things&#34;, &#34;home&#34;]&#xA;        },&#xA;        {&#xA;            &#34;name&#34;: &#34;Google&#34;,&#xA;            &#34;url&#34; : &#34;https://www.google.com&#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mandatory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tags&lt;/code&gt;, &lt;code&gt;nofollow&lt;/code&gt;, &lt;code&gt;newtab&lt;/code&gt; and &lt;code&gt;icon&lt;/code&gt; are optional.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Tags&lt;/h4&gt; &#xA;&lt;p&gt;Sites can be categorised using tags, for each site in your &lt;code&gt;sites.json&lt;/code&gt; file you can list multiple tags as shown in the example above. Sites that have no tags are included on the home screen, however for sites with multiple tags you can specify the &#34;home&#34; tag to include them on the home screen.&lt;/p&gt; &#xA;&lt;p&gt;The tag selector button will only appear in the top right of the page if you have tagged sites, clicking this will open a popup menu showing all the tags referenced in your &lt;code&gt;sites.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h4&gt;Default Options&lt;/h4&gt; &#xA;&lt;p&gt;Jump has a built-in default icon for sites that do not specify their own although you can override this and specify your own as shown above in the &lt;code&gt;default&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;You can also override &lt;code&gt;nofollow&lt;/code&gt; and &lt;code&gt;newtab&lt;/code&gt; to be &lt;code&gt;true&lt;/code&gt; for all sites.&lt;/p&gt; &#xA;&lt;h4&gt;Icons&lt;/h4&gt; &#xA;&lt;p&gt;You can provide custom icons for your sites by placing them in the &lt;code&gt;/sites/icons/&lt;/code&gt; directory and referencing the filename in &lt;code&gt;sites.json&lt;/code&gt; using the &lt;code&gt;icon&lt;/code&gt; option. If you do not provide a custom icon for a site then Jump will attempt to retrieve that site&#39;s favicon, if it can&#39;t find one then the default icon will be shown.&lt;/p&gt; &#xA;&lt;h4&gt;nofollow&lt;/h4&gt; &#xA;&lt;p&gt;On a per-site basis use &lt;code&gt;&#34;nofollow&#34;: true&lt;/code&gt; to include &lt;code&gt;rel=&#34;nofollow&#34;&lt;/code&gt; on specific site links, if this is set as a global default then &lt;code&gt;&#34;nofollow&#34;: false&lt;/code&gt; can be used to remove &lt;code&gt;rel=&#34;nofollow&#34;&lt;/code&gt; for individual sites.&lt;/p&gt; &#xA;&lt;h4&gt;newtab&lt;/h4&gt; &#xA;&lt;p&gt;On a per-site basis use &lt;code&gt;&#34;newtab&#34;: true&lt;/code&gt; to open specific site links in a new browser tab.&lt;/p&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;p&gt;Edit the &lt;code&gt;/search/searchengines.json&lt;/code&gt; file to customise the list of search engines available from the search dropdown, the first search engine in the list will be the default...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;    {&#xA;        &#34;name&#34;: &#34;Google&#34;,&#xA;        &#34;url&#34;: &#34;https://www.google.co.uk/search?q=&#34;&#xA;    },&#xA;    {&#xA;        &#34;name&#34;: &#34;DuckDuckGo&#34;,&#xA;        &#34;url&#34;: &#34;https://duckduckgo.com/?q=&#34;&#xA;    },&#xA;    {&#xA;        &#34;name&#34;: &#34;Bing&#34;,&#xA;        &#34;url&#34;: &#34;https://www.bing.com/search?q=&#34;&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For quick access to the search from the keyboard you can open the search bar using the &lt;code&gt;ctrl-shift-/&lt;/code&gt; keyboard shortcut and start typing straight away.&lt;/p&gt; &#xA;&lt;h3&gt;Background Images&lt;/h3&gt; &#xA;&lt;p&gt;To use your own background images just copy them to the &lt;code&gt;/backgrounds/&lt;/code&gt; directory, Jump will pick up on them automatically ans show a random image every time the page loads.&lt;/p&gt; &#xA;&lt;p&gt;If instead you want to use Unsplash for random background images add an Unsplash API key to &lt;code&gt;config.php&lt;/code&gt; or pass the &lt;code&gt;UNSPLASHAPIKEY &lt;/code&gt; environment variable to the Docker container. You can provide a comma separated list of collection ID&#39;s using the &lt;code&gt;unsplashcollections&lt;/code&gt; option in &lt;code&gt;config.php&lt;/code&gt; or by passing them to the Docker container via the &lt;code&gt;UNSPLASHCOLLECTIONS&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Patches, improvements and feature requests are welcomed although I want to avoid anything that requires an admin interface or user accounts.&lt;/p&gt; &#xA;&lt;p&gt;For development you will need to install composer dependencies by running &lt;code&gt;composer install&lt;/code&gt; from within the &lt;code&gt;jumpapp&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Javascript is bundled using Webpack, so you will need to have installed Node.js. Then within the root project directory (the same level as webpack.config.js) you should run &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before starting development you can run &lt;code&gt;npm run dev&lt;/code&gt;, this will watch for changes to files within the &lt;code&gt;/jumpapp/assets/js/src/&lt;/code&gt;, &lt;code&gt;/jumpapp/assets/css/src/&lt;/code&gt; and &lt;code&gt;/jumpapp/templates/src/&lt;/code&gt; directories and bundle them on the fly. Javascript and CSS bundles created in development mode will not be minified and will contain source maps for debugging.&lt;/p&gt; &#xA;&lt;p&gt;You can test a production build using &lt;code&gt;npm run build&lt;/code&gt; which will bundle and minify the javascript and CSS source files without source maps, header and footer templates will be created containing the correct links to newly created javascript and CSS bundles.&lt;/p&gt; &#xA;&lt;p&gt;Please do not commit any generated files however, only commit the patched source files.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>predis/predis</title>
    <updated>2022-06-11T01:37:42Z</updated>
    <id>tag:github.com,2022-06-11:/predis/predis</id>
    <link href="https://github.com/predis/predis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A flexible and feature-complete Redis client for PHP.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Predis&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/predis/predis.svg?style=flat-square&#34; alt=&#34;Software license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/predis/predis&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/predis/predis.svg?style=flat-square&#34; alt=&#34;Latest stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/predis/predis&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/vpre/predis/predis.svg?style=flat-square&#34; alt=&#34;Latest development&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/predis/predis/stats&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dm/predis/predis.svg?style=flat-square&#34; alt=&#34;Monthly installs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/predis/predis/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/predis/predis/Tests/main?style=flat-square&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A flexible and feature-complete &lt;a href=&#34;http://redis.io&#34;&gt;Redis&lt;/a&gt; client for PHP 7.2 and newer.&lt;/p&gt; &#xA;&lt;p&gt;More details about this project can be found on the &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/FAQ.md&#34;&gt;frequently asked questions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Redis from &lt;strong&gt;3.0&lt;/strong&gt; to &lt;strong&gt;7.0&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support for clustering using client-side sharding and pluggable keyspace distributors.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;http://redis.io/topics/cluster-tutorial&#34;&gt;redis-cluster&lt;/a&gt; (Redis &amp;gt;= 3.0).&lt;/li&gt; &#xA; &lt;li&gt;Support for master-slave replication setups and &lt;a href=&#34;http://redis.io/topics/sentinel&#34;&gt;redis-sentinel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Transparent key prefixing of keys using a customizable prefix strategy.&lt;/li&gt; &#xA; &lt;li&gt;Command pipelining on both single nodes and clusters (client-side sharding only).&lt;/li&gt; &#xA; &lt;li&gt;Abstraction for Redis transactions (Redis &amp;gt;= 2.0) and CAS operations (Redis &amp;gt;= 2.2).&lt;/li&gt; &#xA; &lt;li&gt;Abstraction for Lua scripting (Redis &amp;gt;= 2.6) and automatic switching between &lt;code&gt;EVALSHA&lt;/code&gt; or &lt;code&gt;EVAL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Abstraction for &lt;code&gt;SCAN&lt;/code&gt;, &lt;code&gt;SSCAN&lt;/code&gt;, &lt;code&gt;ZSCAN&lt;/code&gt; and &lt;code&gt;HSCAN&lt;/code&gt; (Redis &amp;gt;= 2.8) based on PHP iterators.&lt;/li&gt; &#xA; &lt;li&gt;Connections are established lazily by the client upon the first command and can be persisted.&lt;/li&gt; &#xA; &lt;li&gt;Connections can be established via TCP/IP (also TLS/SSL-encrypted) or UNIX domain sockets.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;http://webd.is&#34;&gt;Webdis&lt;/a&gt; (requires both &lt;code&gt;ext-curl&lt;/code&gt; and &lt;code&gt;ext-phpiredis&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Support for custom connection classes for providing different network or protocol backends.&lt;/li&gt; &#xA; &lt;li&gt;Flexible system for defining custom commands and override the default ones.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to &lt;em&gt;install&lt;/em&gt; and use Predis&lt;/h2&gt; &#xA;&lt;p&gt;This library can be found on &lt;a href=&#34;http://packagist.org/packages/predis/predis&#34;&gt;Packagist&lt;/a&gt; for an easier management of projects dependencies using &lt;a href=&#34;http://packagist.org/about-composer&#34;&gt;Composer&lt;/a&gt;. Compressed archives of each release are &lt;a href=&#34;https://github.com/predis/predis/releases&#34;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Loading the library&lt;/h3&gt; &#xA;&lt;p&gt;Predis relies on the autoloading features of PHP to load its files when needed and complies with the &lt;a href=&#34;https://github.com/php-fig/fig-standards/raw/master/accepted/PSR-4-autoloader.md&#34;&gt;PSR-4 standard&lt;/a&gt;. Autoloading is handled automatically when dependencies are managed through Composer, but it is also possible to leverage its own autoloader in projects or scripts lacking any autoload facility:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Prepend a base path if Predis is not available in your &#34;include_path&#34;.&#xA;require &#39;Predis/Autoloader.php&#39;;&#xA;&#xA;Predis\Autoloader::register();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connecting to Redis&lt;/h3&gt; &#xA;&lt;p&gt;When creating a client instance without passing any connection parameter, Predis assumes &lt;code&gt;127.0.0.1&lt;/code&gt; and &lt;code&gt;6379&lt;/code&gt; as default host and port. The default timeout for the &lt;code&gt;connect()&lt;/code&gt; operation is 5 seconds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client();&#xA;$client-&amp;gt;set(&#39;foo&#39;, &#39;bar&#39;);&#xA;$value = $client-&amp;gt;get(&#39;foo&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connection parameters can be supplied either in the form of URI strings or named arrays. The latter is the preferred way to supply parameters, but URI strings can be useful when parameters are read from non-structured or partially-structured sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Parameters passed using a named array:&#xA;$client = new Predis\Client([&#xA;    &#39;scheme&#39; =&amp;gt; &#39;tcp&#39;,&#xA;    &#39;host&#39;   =&amp;gt; &#39;10.0.0.1&#39;,&#xA;    &#39;port&#39;   =&amp;gt; 6379,&#xA;]);&#xA;&#xA;// Same set of parameters, passed using an URI string:&#xA;$client = new Predis\Client(&#39;tcp://10.0.0.1:6379&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Password protected servers can be accessed by adding &lt;code&gt;password&lt;/code&gt; to the parameters set. When ACLs are enabled on Redis &amp;gt;= 6.0, both &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; are required for user authentication.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to connect to local instances of Redis using UNIX domain sockets, in this case the parameters must use the &lt;code&gt;unix&lt;/code&gt; scheme and specify a path for the socket file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client([&#39;scheme&#39; =&amp;gt; &#39;unix&#39;, &#39;path&#39; =&amp;gt; &#39;/path/to/redis.sock&#39;]);&#xA;$client = new Predis\Client(&#39;unix:/path/to/redis.sock&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The client can leverage TLS/SSL encryption to connect to secured remote Redis instances without the need to configure an SSL proxy like stunnel. This can be useful when connecting to nodes running on various cloud hosting providers. Encryption can be enabled with using the &lt;code&gt;tls&lt;/code&gt; scheme and an array of suitable &lt;a href=&#34;http://php.net/manual/context.ssl.php&#34;&gt;options&lt;/a&gt; passed via the &lt;code&gt;ssl&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Named array of connection parameters:&#xA;$client = new Predis\Client([&#xA;  &#39;scheme&#39; =&amp;gt; &#39;tls&#39;,&#xA;  &#39;ssl&#39;    =&amp;gt; [&#39;cafile&#39; =&amp;gt; &#39;private.pem&#39;, &#39;verify_peer&#39; =&amp;gt; true],&#xA;]);&#xA;&#xA;// Same set of parameters, but using an URI string:&#xA;$client = new Predis\Client(&#39;tls://127.0.0.1?ssl[cafile]=private.pem&amp;amp;ssl[verify_peer]=1&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The connection schemes &lt;a href=&#34;http://www.iana.org/assignments/uri-schemes/prov/redis&#34;&gt;&lt;code&gt;redis&lt;/code&gt;&lt;/a&gt; (alias of &lt;code&gt;tcp&lt;/code&gt;) and &lt;a href=&#34;http://www.iana.org/assignments/uri-schemes/prov/rediss&#34;&gt;&lt;code&gt;rediss&lt;/code&gt;&lt;/a&gt; (alias of &lt;code&gt;tls&lt;/code&gt;) are also supported, with the difference that URI strings containing these schemes are parsed following the rules described on their respective IANA provisional registration documents.&lt;/p&gt; &#xA;&lt;p&gt;The actual list of supported connection parameters can vary depending on each connection backend so it is recommended to refer to their specific documentation or implementation for details.&lt;/p&gt; &#xA;&lt;p&gt;Predis can aggregate multiple connections when providing an array of connection parameters and the appropriate option to instruct the client about how to aggregate them (clustering, replication or a custom aggregation logic). Named arrays and URI strings can be mixed when providing configurations for each node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client([&#xA;    &#39;tcp://10.0.0.1?alias=first-node&#39;, [&#39;host&#39; =&amp;gt; &#39;10.0.0.2&#39;, &#39;alias&#39; =&amp;gt; &#39;second-node&#39;],&#xA;], [&#xA;    &#39;cluster&#39; =&amp;gt; &#39;predis&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/#aggregate-connections&#34;&gt;aggregate connections&lt;/a&gt; section of this document for more details.&lt;/p&gt; &#xA;&lt;p&gt;Connections to Redis are lazy meaning that the client connects to a server only if and when needed. While it is recommended to let the client do its own stuff under the hood, there may be times when it is still desired to have control of when the connection is opened or closed: this can easily be achieved by invoking &lt;code&gt;$client-&amp;gt;connect()&lt;/code&gt; and &lt;code&gt;$client-&amp;gt;disconnect()&lt;/code&gt;. Please note that the effect of these methods on aggregate connections may differ depending on each specific implementation.&lt;/p&gt; &#xA;&lt;h3&gt;Client configuration&lt;/h3&gt; &#xA;&lt;p&gt;Many aspects and behaviors of the client can be configured by passing specific client options to the second argument of &lt;code&gt;Predis\Client::__construct()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client($parameters, [&#39;prefix&#39; =&amp;gt; &#39;sample:&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options are managed using a mini DI-alike container and their values can be lazily initialized only when needed. The client options supported by default in Predis are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix&lt;/code&gt;: prefix string applied to every key found in commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exceptions&lt;/code&gt;: whether the client should throw or return responses upon Redis errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;connections&lt;/code&gt;: list of connection backends or a connection factory instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cluster&lt;/code&gt;: specifies a cluster backend (&lt;code&gt;predis&lt;/code&gt;, &lt;code&gt;redis&lt;/code&gt; or callable).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;replication&lt;/code&gt;: specifies a replication backend (&lt;code&gt;predis&lt;/code&gt;, &lt;code&gt;sentinel&lt;/code&gt; or callable).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aggregate&lt;/code&gt;: configures the client with a custom aggregate connection (callable).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parameters&lt;/code&gt;: list of default connection parameters for aggregate connections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;commands&lt;/code&gt;: specifies a command factory instance to use through the library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Users can also provide custom options with values or callable objects (for lazy initialization) that are stored in the options container for later use through the library.&lt;/p&gt; &#xA;&lt;h3&gt;Aggregate connections&lt;/h3&gt; &#xA;&lt;p&gt;Aggregate connections are the foundation upon which Predis implements clustering and replication and they are used to group multiple connections to single Redis nodes and hide the specific logic needed to handle them properly depending on the context. Aggregate connections usually require an array of connection parameters along with the appropriate client option when creating a new client instance.&lt;/p&gt; &#xA;&lt;h4&gt;Cluster&lt;/h4&gt; &#xA;&lt;p&gt;Predis can be configured to work in clustering mode with a traditional client-side sharding approach to create a cluster of independent nodes and distribute the keyspace among them. This approach needs some sort of external health monitoring of nodes and requires the keyspace to be rebalanced manually when nodes are added or removed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$parameters = [&#39;tcp://10.0.0.1&#39;, &#39;tcp://10.0.0.2&#39;, &#39;tcp://10.0.0.3&#39;];&#xA;$options    = [&#39;cluster&#39; =&amp;gt; &#39;predis&#39;];&#xA;&#xA;$client = new Predis\Client($parameters);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Along with Redis 3.0, a new supervised and coordinated type of clustering was introduced in the form of &lt;a href=&#34;http://redis.io/topics/cluster-tutorial&#34;&gt;redis-cluster&lt;/a&gt;. This kind of approach uses a different algorithm to distribute the keyspaces, with Redis nodes coordinating themselves by communicating via a gossip protocol to handle health status, rebalancing, nodes discovery and request redirection. In order to connect to a cluster managed by redis-cluster, the client requires a list of its nodes (not necessarily complete since it will automatically discover new nodes if necessary) and the &lt;code&gt;cluster&lt;/code&gt; client options set to &lt;code&gt;redis&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$parameters = [&#39;tcp://10.0.0.1&#39;, &#39;tcp://10.0.0.2&#39;, &#39;tcp://10.0.0.3&#39;];&#xA;$options    = [&#39;cluster&#39; =&amp;gt; &#39;redis&#39;];&#xA;&#xA;$client = new Predis\Client($parameters, $options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Replication&lt;/h4&gt; &#xA;&lt;p&gt;The client can be configured to operate in a single master / multiple slaves setup to provide better service availability. When using replication, Predis recognizes read-only commands and sends them to a random slave in order to provide some sort of load-balancing and switches to the master as soon as it detects a command that performs any kind of operation that would end up modifying the keyspace or the value of a key. Instead of raising a connection error when a slave fails, the client attempts to fall back to a different slave among the ones provided in the configuration.&lt;/p&gt; &#xA;&lt;p&gt;The basic configuration needed to use the client in replication mode requires one Redis server to be identified as the master (this can be done via connection parameters by setting the &lt;code&gt;role&lt;/code&gt; parameter to &lt;code&gt;master&lt;/code&gt;) and one or more slaves (in this case setting &lt;code&gt;role&lt;/code&gt; to &lt;code&gt;slave&lt;/code&gt; for slaves is optional):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$parameters = [&#39;tcp://10.0.0.1?role=master&#39;, &#39;tcp://10.0.0.2&#39;, &#39;tcp://10.0.0.3&#39;];&#xA;$options    = [&#39;replication&#39; =&amp;gt; &#39;predis&#39;];&#xA;&#xA;$client = new Predis\Client($parameters, $options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above configuration has a static list of servers and relies entirely on the client&#39;s logic, but it is possible to rely on &lt;a href=&#34;http://redis.io/topics/sentinel&#34;&gt;&lt;code&gt;redis-sentinel&lt;/code&gt;&lt;/a&gt; for a more robust HA environment with sentinel servers acting as a source of authority for clients for service discovery. The minimum configuration required by the client to work with redis-sentinel is a list of connection parameters pointing to a bunch of sentinel instances, the &lt;code&gt;replication&lt;/code&gt; option set to &lt;code&gt;sentinel&lt;/code&gt; and the &lt;code&gt;service&lt;/code&gt; option set to the name of the service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sentinels = [&#39;tcp://10.0.0.1&#39;, &#39;tcp://10.0.0.2&#39;, &#39;tcp://10.0.0.3&#39;];&#xA;$options   = [&#39;replication&#39; =&amp;gt; &#39;sentinel&#39;, &#39;service&#39; =&amp;gt; &#39;mymaster&#39;];&#xA;&#xA;$client = new Predis\Client($sentinels, $options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the master and slave nodes are configured to require an authentication from clients, a password must be provided via the global &lt;code&gt;parameters&lt;/code&gt; client option. This option can also be used to specify a different database index. The client options array would then look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$options = [&#xA;    &#39;replication&#39; =&amp;gt; &#39;sentinel&#39;,&#xA;    &#39;service&#39; =&amp;gt; &#39;mymaster&#39;,&#xA;    &#39;parameters&#39; =&amp;gt; [&#xA;        &#39;password&#39; =&amp;gt; $secretpassword,&#xA;        &#39;database&#39; =&amp;gt; 10,&#xA;    ],&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While Predis is able to distinguish commands performing write and read-only operations, &lt;code&gt;EVAL&lt;/code&gt; and &lt;code&gt;EVALSHA&lt;/code&gt; represent a corner case in which the client switches to the master node because it cannot tell when a Lua script is safe to be executed on slaves. While this is indeed the default behavior, when certain Lua scripts do not perform write operations it is possible to provide an hint to tell the client to stick with slaves for their execution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$parameters = [&#39;tcp://10.0.0.1?role=master&#39;, &#39;tcp://10.0.0.2&#39;, &#39;tcp://10.0.0.3&#39;];&#xA;$options    = [&#39;replication&#39; =&amp;gt; function () {&#xA;    // Set scripts that won&#39;t trigger a switch from a slave to the master node.&#xA;    $strategy = new Predis\Replication\ReplicationStrategy();&#xA;    $strategy-&amp;gt;setScriptReadOnly($LUA_SCRIPT);&#xA;&#xA;    return new Predis\Connection\Replication\MasterSlaveReplication($strategy);&#xA;}];&#xA;&#xA;$client = new Predis\Client($parameters, $options);&#xA;$client-&amp;gt;eval($LUA_SCRIPT, 0);             // Sticks to slave using `eval`...&#xA;$client-&amp;gt;evalsha(sha1($LUA_SCRIPT), 0);    // ... and `evalsha`, too.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/examples/&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; directory contains a few scripts that demonstrate how the client can be configured and used to leverage replication in both basic and complex scenarios.&lt;/p&gt; &#xA;&lt;h3&gt;Command pipelines&lt;/h3&gt; &#xA;&lt;p&gt;Pipelining can help with performances when many commands need to be sent to a server by reducing the latency introduced by network round-trip timings. Pipelining also works with aggregate connections. The client can execute the pipeline inside a callable block or return a pipeline instance with the ability to chain commands thanks to its fluent interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Executes a pipeline inside the given callable block:&#xA;$responses = $client-&amp;gt;pipeline(function ($pipe) {&#xA;    for ($i = 0; $i &amp;lt; 1000; $i++) {&#xA;        $pipe-&amp;gt;set(&#34;key:$i&#34;, str_pad($i, 4, &#39;0&#39;, 0));&#xA;        $pipe-&amp;gt;get(&#34;key:$i&#34;);&#xA;    }&#xA;});&#xA;&#xA;// Returns a pipeline that can be chained thanks to its fluent interface:&#xA;$responses = $client-&amp;gt;pipeline()-&amp;gt;set(&#39;foo&#39;, &#39;bar&#39;)-&amp;gt;get(&#39;foo&#39;)-&amp;gt;execute();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Transactions&lt;/h3&gt; &#xA;&lt;p&gt;The client provides an abstraction for Redis transactions based on &lt;code&gt;MULTI&lt;/code&gt; and &lt;code&gt;EXEC&lt;/code&gt; with a similar interface to command pipelines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Executes a transaction inside the given callable block:&#xA;$responses = $client-&amp;gt;transaction(function ($tx) {&#xA;    $tx-&amp;gt;set(&#39;foo&#39;, &#39;bar&#39;);&#xA;    $tx-&amp;gt;get(&#39;foo&#39;);&#xA;});&#xA;&#xA;// Returns a transaction that can be chained thanks to its fluent interface:&#xA;$responses = $client-&amp;gt;transaction()-&amp;gt;set(&#39;foo&#39;, &#39;bar&#39;)-&amp;gt;get(&#39;foo&#39;)-&amp;gt;execute();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This abstraction can perform check-and-set operations thanks to &lt;code&gt;WATCH&lt;/code&gt; and &lt;code&gt;UNWATCH&lt;/code&gt; and provides automatic retries of transactions aborted by Redis when &lt;code&gt;WATCH&lt;/code&gt;ed keys are touched. For an example of a transaction using CAS you can see &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/examples/transaction_using_cas.php&#34;&gt;the following example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new commands&lt;/h3&gt; &#xA;&lt;p&gt;While we try to update Predis to stay up to date with all the commands available in Redis, you might prefer to stick with an old version of the library or provide a different way to filter arguments or parse responses for specific commands. To achieve that, Predis provides the ability to implement new command classes to define or override commands in the default command factory used by the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Define a new command by extending Predis\Command\Command:&#xA;class BrandNewRedisCommand extends Predis\Command\Command&#xA;{&#xA;    public function getId()&#xA;    {&#xA;        return &#39;NEWCMD&#39;;&#xA;    }&#xA;}&#xA;&#xA;// Inject your command in the current command factory:&#xA;$client = new Predis\Client($parameters, [&#xA;    &#39;commands&#39; =&amp;gt; [&#xA;        &#39;newcmd&#39; =&amp;gt; &#39;BrandNewRedisCommand&#39;,&#xA;    ],&#xA;]);&#xA;&#xA;$response = $client-&amp;gt;newcmd();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a method to send raw commands without filtering their arguments or parsing responses. Users must provide the list of arguments for the command as an array, following the signatures as defined by the &lt;a href=&#34;http://redis.io/commands&#34;&gt;Redis documentation for commands&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$response = $client-&amp;gt;executeRaw([&#39;SET&#39;, &#39;foo&#39;, &#39;bar&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Script commands&lt;/h3&gt; &#xA;&lt;p&gt;While it is possible to leverage &lt;a href=&#34;http://redis.io/commands/eval&#34;&gt;Lua scripting&lt;/a&gt; on Redis 2.6+ using directly &lt;a href=&#34;http://redis.io/commands/eval&#34;&gt;&lt;code&gt;EVAL&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://redis.io/commands/evalsha&#34;&gt;&lt;code&gt;EVALSHA&lt;/code&gt;&lt;/a&gt;, Predis offers script commands as an higher level abstraction built upon them to make things simple. Script commands can be registered in the command factory used by the client and are accessible as if they were plain Redis commands, but they define Lua scripts that get transmitted to the server for remote execution. Internally they use &lt;a href=&#34;http://redis.io/commands/evalsha&#34;&gt;&lt;code&gt;EVALSHA&lt;/code&gt;&lt;/a&gt; by default and identify a script by its SHA1 hash to save bandwidth, but &lt;a href=&#34;http://redis.io/commands/eval&#34;&gt;&lt;code&gt;EVAL&lt;/code&gt;&lt;/a&gt; is used as a fall back when needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Define a new script command by extending Predis\Command\ScriptCommand:&#xA;class ListPushRandomValue extends Predis\Command\ScriptCommand&#xA;{&#xA;    public function getKeysCount()&#xA;    {&#xA;        return 1;&#xA;    }&#xA;&#xA;    public function getScript()&#xA;    {&#xA;        return &amp;lt;&amp;lt;&amp;lt;LUA&#xA;math.randomseed(ARGV[1])&#xA;local rnd = tostring(math.random())&#xA;redis.call(&#39;lpush&#39;, KEYS[1], rnd)&#xA;return rnd&#xA;LUA;&#xA;    }&#xA;}&#xA;&#xA;// Inject the script command in the current command factory:&#xA;$client = new Predis\Client($parameters, [&#xA;    &#39;commands&#39; =&amp;gt; [&#xA;        &#39;lpushrand&#39; =&amp;gt; &#39;ListPushRandomValue&#39;,&#xA;    ],&#xA;]);&#xA;&#xA;$response = $client-&amp;gt;lpushrand(&#39;random_values&#39;, $seed = mt_rand());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizable connection backends&lt;/h3&gt; &#xA;&lt;p&gt;Predis can use different connection backends to connect to Redis. Two of them leverage a third party extension such as &lt;a href=&#34;https://github.com/nrk/phpiredis&#34;&gt;phpiredis&lt;/a&gt; resulting in major performance gains especially when dealing with big multibulk responses. While one is based on PHP streams, the other is based on socket resources provided by &lt;code&gt;ext-socket&lt;/code&gt;. Both support TCP/IP and UNIX domain sockets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client(&#39;tcp://127.0.0.1&#39;, [&#xA;    &#39;connections&#39; =&amp;gt; [&#xA;        &#39;tcp&#39;  =&amp;gt; &#39;Predis\Connection\PhpiredisStreamConnection&#39;,  // PHP stream resources&#xA;        &#39;unix&#39; =&amp;gt; &#39;Predis\Connection\PhpiredisSocketConnection&#39;,  // ext-socket resources&#xA;    ],&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The client can also be configured to rely on a &lt;a href=&#34;https://github.com/nrk/phpiredis&#34;&gt;phpiredis&lt;/a&gt;-backend by specifying a descriptive string for the &lt;code&gt;connections&lt;/code&gt; client option. Supported string values are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;phpiredis-stream&lt;/code&gt; maps &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;redis&lt;/code&gt; and &lt;code&gt;unix&lt;/code&gt; to &lt;code&gt;Predis\Connection\PhpiredisStreamConnection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;phpiredis-socket&lt;/code&gt; maps &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;redis&lt;/code&gt; and &lt;code&gt;unix&lt;/code&gt; to &lt;code&gt;Predis\Connection\PhpiredisSocketConnection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;phpiredis&lt;/code&gt; is simply an alias of &lt;code&gt;phpiredis-stream&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client(&#39;tcp://127.0.0.1&#39;, [&#39;connections&#39; =&amp;gt; &#39;phpiredis&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Developers can create their own connection classes to support whole new network backends, extend existing classes or provide completely different implementations. Connection classes must implement &lt;code&gt;Predis\Connection\NodeConnectionInterface&lt;/code&gt; or extend &lt;code&gt;Predis\Connection\AbstractConnection&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class MyConnectionClass implements Predis\Connection\NodeConnectionInterface&#xA;{&#xA;    // Implementation goes here...&#xA;}&#xA;&#xA;// Use MyConnectionClass to handle connections for the `tcp` scheme:&#xA;$client = new Predis\Client(&#39;tcp://127.0.0.1&#39;, [&#xA;    &#39;connections&#39; =&amp;gt; [&#39;tcp&#39; =&amp;gt; &#39;MyConnectionClass&#39;],&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more in-depth insight on how to create new connection backends you can refer to the actual implementation of the standard connection classes available in the &lt;code&gt;Predis\Connection&lt;/code&gt; namespace.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Reporting bugs and contributing code&lt;/h3&gt; &#xA;&lt;p&gt;Contributions to Predis are highly appreciated either in the form of pull requests for new features, bug fixes, or just bug reports. We only ask you to adhere to a &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/CONTRIBUTING.md&#34;&gt;basic set of rules&lt;/a&gt; before submitting your changes or filing bugs on the issue tracker to make it easier for everyone to stay consistent while working on the project.&lt;/p&gt; &#xA;&lt;h3&gt;Test suite&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ATTENTION&lt;/strong&gt;: Do not ever run the test suite shipped with Predis against instances of Redis running in production environments or containing data you are interested in!&lt;/p&gt; &#xA;&lt;p&gt;Predis has a comprehensive test suite covering every aspect of the library and that can optionally perform integration tests against a running instance of Redis (required &amp;gt;= 2.4.0 in order to verify the correct behavior of the implementation of each command. Integration tests for unsupported Redis commands are automatically skipped. If you do not have Redis up and running, integration tests can be disabled. See &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/tests/README.md&#34;&gt;the tests README&lt;/a&gt; for more details about testing this library.&lt;/p&gt; &#xA;&lt;p&gt;Predis uses GitHub Actions for continuous integration and the history for past and current builds can be found &lt;a href=&#34;https://github.com/predis/predis/actions&#34;&gt;on its actions page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;h3&gt;Project related links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/predis/predis&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/predis/predis/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/predis/predis/issues&#34;&gt;Issue tracker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Author&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:suppakilla@gmail.com&#34;&gt;Daniele Alessandri&lt;/a&gt; (&lt;a href=&#34;http://twitter.com/JoL1hAHN&#34;&gt;twitter&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://till.im&#34;&gt;Till Krüss&lt;/a&gt; (&lt;a href=&#34;http://twitter.com/tillkruss&#34;&gt;Twitter&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;The code for Predis is distributed under the terms of the MIT license (see &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
</feed>