<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-06T01:33:13Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Propaganistas/Laravel-Phone</title>
    <updated>2024-03-06T01:33:13Z</updated>
    <id>tag:github.com,2024-03-06:/Propaganistas/Laravel-Phone</id>
    <link href="https://github.com/Propaganistas/Laravel-Phone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Phone number functionality for Laravel&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Laravel Phone&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Propaganistas/Laravel-Phone/workflows/Tests/badge.svg?branch=master&#34; alt=&#34;Tests&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/propaganistas/laravel-phone&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/propaganistas/laravel-phone/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/propaganistas/laravel-phone&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/propaganistas/laravel-phone/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/propaganistas/laravel-phone&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/propaganistas/laravel-phone/license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Adds phone number functionality to Laravel based on the &lt;a href=&#34;https://github.com/giggsey/libphonenumber-for-php&#34;&gt;PHP port&lt;/a&gt; of &lt;a href=&#34;https://github.com/googlei18n/libphonenumber&#34;&gt;libphonenumber by Google&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Propaganistas/Laravel-Phone/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Propaganistas/Laravel-Phone/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Propaganistas/Laravel-Phone/master/#validation&#34;&gt;Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Propaganistas/Laravel-Phone/master/#attribute-casting&#34;&gt;Attribute casting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Propaganistas/Laravel-Phone/master/#utility-phonenumber-class&#34;&gt;Utility class&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Propaganistas/Laravel-Phone/master/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Propaganistas/Laravel-Phone/master/#number-information&#34;&gt;Number information&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Propaganistas/Laravel-Phone/master/#equality-comparison&#34;&gt;Equality comparison&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Propaganistas/Laravel-Phone/master/#helper-function&#34;&gt;Helper function&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Propaganistas/Laravel-Phone/master/#database-considerations&#34;&gt;Database considerations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Check out the behavior of this package in the &lt;a href=&#34;https://laravel-phone.herokuapp.com&#34;&gt;demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command to install the latest applicable version of the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require propaganistas/laravel-phone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Service Provider gets discovered automatically by Laravel.&lt;/p&gt; &#xA;&lt;p&gt;In your languages directory, add an extra translation in every &lt;code&gt;validation.php&lt;/code&gt; language file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;phone&#39; =&amp;gt; &#39;The :attribute field must be a valid number.&#39;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validation&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;phone&lt;/code&gt; keyword in your validation rules array or use the &lt;code&gt;Propaganistas\LaravelPhone\Rules\Phone&lt;/code&gt; rule class to define the rule in an expressive way.&lt;/p&gt; &#xA;&lt;p&gt;To put constraints on the allowed originating countries, you can explicitly specify the allowed country codes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;phonefield&#39;       =&amp;gt; &#39;phone:US,BE&#39;,&#xA;// &#39;phonefield&#39;    =&amp;gt; (new Phone)-&amp;gt;country([&#39;US&#39;, &#39;BE&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to make things more dynamic, you can also match against another data field holding a country code. For example, to require a phone number to match the provided country of residence. Make sure the country field has the same name as the phone field but with &lt;code&gt;_country&lt;/code&gt; appended for automatic discovery, or provide your custom country field name as a parameter to the validator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;phonefield&#39;            =&amp;gt; &#39;phone&#39;,&#xA;// &#39;phonefield&#39;         =&amp;gt; (new Phone)&#xA;&#39;phonefield_country&#39;    =&amp;gt; &#39;required_with:phonefield&#39;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;phonefield&#39;            =&amp;gt; &#39;phone:custom_country_field&#39;,&#xA;// &#39;phonefield&#39;         =&amp;gt; (new Phone)-&amp;gt;countryField(&#39;custom_country_field&#39;)&#xA;&#39;custom_country_field&#39;  =&amp;gt; &#39;required_with:phonefield&#39;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: country codes should be &lt;a href=&#34;http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements&#34;&gt;&lt;em&gt;ISO 3166-1 alpha-2 compliant&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To support &lt;em&gt;any valid internationally formatted&lt;/em&gt; phone number next to the whitelisted countries, use the &lt;code&gt;INTERNATIONAL&lt;/code&gt; parameter. This can be useful when you&#39;re expecting locally formatted numbers from a specific country but also want to accept any other foreign number entered properly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;phonefield&#39;            =&amp;gt; &#39;phone:INTERNATIONAL,BE&#39;,&#xA;// &#39;phonefield&#39;         =&amp;gt; (new Phone)-&amp;gt;international()-&amp;gt;country(&#39;BE&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To specify constraints on the number type, just append the allowed types to the end of the parameters, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;phonefield&#39;       =&amp;gt; &#39;phone:mobile&#39;,&#xA;// &#39;phonefield&#39;    =&amp;gt; (new Phone)-&amp;gt;type(&#39;mobile&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The most common types are &lt;code&gt;mobile&lt;/code&gt; and &lt;code&gt;fixed_line&lt;/code&gt;, but feel free to use any of the types defined &lt;a href=&#34;https://github.com/giggsey/libphonenumber-for-php/raw/master/src/PhoneNumberType.php&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Prepend a type with an exclamation mark to blacklist it instead. Note that you can never use whitelisted &lt;em&gt;and&lt;/em&gt; blacklisted types at the same time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;phonefield&#39;       =&amp;gt; &#39;phone:!mobile&#39;,&#xA;// &#39;phonefield&#39;    =&amp;gt; (new Phone)-&amp;gt;notType(&#39;mobile&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also enable lenient validation by using the &lt;code&gt;LENIENT&lt;/code&gt; parameter. With leniency enabled, only the length of the number is checked instead of actual carrier patterns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;phonefield&#39;       =&amp;gt; &#39;phone:LENIENT&#39;,&#xA;// &#39;phonefield&#39;    =&amp;gt; (new Phone)-&amp;gt;lenient()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Attribute casting&lt;/h2&gt; &#xA;&lt;p&gt;Two cast classes are provided for automatic casting of Eloquent model attributes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Database\Eloquent\Model;&#xA;use Propaganistas\LaravelPhone\Casts\RawPhoneNumberCast;&#xA;use Propaganistas\LaravelPhone\Casts\E164PhoneNumberCast;&#xA;&#xA;class User extends Model&#xA;{&#xA;    public $casts = [&#xA;        &#39;phone_1&#39; =&amp;gt; RawPhoneNumberCast::class.&#39;:BE&#39;,&#xA;        &#39;phone_2&#39; =&amp;gt; E164PhoneNumberCast::class.&#39;:BE&#39;,&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both classes automatically cast the database value to a PhoneNumber object for further use in your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;phone // PhoneNumber object or null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When setting a value, they both accept a string value or a PhoneNumber object. The &lt;code&gt;RawPhoneNumberCast&lt;/code&gt; mutates the database value to the raw input number, while the &lt;code&gt;E164PhoneNumberCast&lt;/code&gt; writes a formatted E.164 phone number to the database.&lt;/p&gt; &#xA;&lt;p&gt;In case of &lt;code&gt;RawPhoneNumberCast&lt;/code&gt;, the cast needs to be hinted about the phone country in order to properly parse the raw number into a phone object. In case of &lt;code&gt;E164PhoneNumberCast&lt;/code&gt; and the value to be set is not already in some international format, the cast needs to be hinted about the phone country in order to properly mutate the value.&lt;/p&gt; &#xA;&lt;p&gt;Both classes accept cast parameters in the same way:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When a similar named attribute exists, but suffixed with &lt;code&gt;_country&lt;/code&gt; (e.g. phone_country), the cast will detect and use it automatically.&lt;/li&gt; &#xA; &lt;li&gt;Provide another attribute&#39;s name as a cast parameter&lt;/li&gt; &#xA; &lt;li&gt;Provide one or several country codes as cast parameters&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public $casts = [&#xA;    &#39;phone_1&#39; =&amp;gt; RawPhoneNumberCast::class.&#39;:country_field&#39;,&#xA;    &#39;phone_2&#39; =&amp;gt; E164PhoneNumberCast::class.&#39;:BE&#39;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; Both casts expect &lt;strong&gt;valid&lt;/strong&gt; phone numbers in order to smoothly convert from/to PhoneNumber objects. Please validate phone numbers before setting them on a model. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/Propaganistas/Laravel-Phone/master/#validation&#34;&gt;validation documentation&lt;/a&gt; to learn how to validate phone numbers.&lt;/p&gt; &#xA;&lt;h4&gt;⚠️ Attribute assignment and &lt;code&gt;E164PhoneNumberCast&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Due to the nature of &lt;code&gt;E164PhoneNumberCast&lt;/code&gt; a valid country attribute is expected if the number is not passed in international format. Since casts are applied in the order of the given values, be sure to set the country attribute &lt;em&gt;before&lt;/em&gt; setting the phone number attribute. Otherwise &lt;code&gt;E164PhoneNumberCast&lt;/code&gt; will encounter an empty country value and throw an unexpected exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Wrong&#xA;$model-&amp;gt;fill([&#xA;    &#39;phone&#39; =&amp;gt; &#39;012 34 56 78&#39;,&#xA;    &#39;phone_country&#39; =&amp;gt; &#39;BE&#39;,&#xA;]);&#xA;&#xA;// Correct&#xA;$model-&amp;gt;fill([&#xA;    &#39;phone_country&#39; =&amp;gt; &#39;BE&#39;,&#xA;    &#39;phone&#39; =&amp;gt; &#39;012 34 56 78&#39;,&#xA;]);&#xA;&#xA;// Wrong&#xA;$model-&amp;gt;phone = &#39;012 34 56 78&#39;;&#xA;$model-&amp;gt;phone_country = &#39;BE&#39;;&#xA;&#xA;// Correct&#xA;$model-&amp;gt;phone_country = &#39;BE&#39;;&#xA;$model-&amp;gt;phone = &#39;012 34 56 78&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Utility PhoneNumber class&lt;/h2&gt; &#xA;&lt;p&gt;A phone number can be wrapped in the &lt;code&gt;Propaganistas\LaravelPhone\PhoneNumber&lt;/code&gt; class to enhance it with useful utility methods. It&#39;s safe to directly reference these objects in views or when saving to the database as they will degrade gracefully to the E.164 format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Propaganistas\LaravelPhone\PhoneNumber;&#xA;&#xA;(string) new PhoneNumber(&#39;+3212/34.56.78&#39;);                // +3212345678&#xA;(string) new PhoneNumber(&#39;012 34 56 78&#39;, &#39;BE&#39;);            // +3212345678&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;p&gt;A PhoneNumber can be formatted in various ways:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$phone = new PhoneNumber(&#39;012/34.56.78&#39;, &#39;BE&#39;);&#xA;&#xA;$phone-&amp;gt;format($format);       // See libphonenumber\PhoneNumberFormat&#xA;$phone-&amp;gt;formatE164();          // +3212345678&#xA;$phone-&amp;gt;formatInternational(); // +32 12 34 56 78&#xA;$phone-&amp;gt;formatRFC3966();       // +32-12-34-56-78&#xA;$phone-&amp;gt;formatNational();      // 012 34 56 78&#xA;&#xA;// Formats so the number can be called straight from the provided country.&#xA;$phone-&amp;gt;formatForCountry(&#39;BE&#39;); // 012 34 56 78&#xA;$phone-&amp;gt;formatForCountry(&#39;NL&#39;); // 00 32 12 34 56 78&#xA;$phone-&amp;gt;formatForCountry(&#39;US&#39;); // 011 32 12 34 56 78&#xA;&#xA;// Formats so the number can be clicked on and called straight from the provided country using a cellphone.&#xA;$phone-&amp;gt;formatForMobileDialingInCountry(&#39;BE&#39;); // 012345678&#xA;$phone-&amp;gt;formatForMobileDialingInCountry(&#39;NL&#39;); // +3212345678&#xA;$phone-&amp;gt;formatForMobileDialingInCountry(&#39;US&#39;); // +3212345678&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Number information&lt;/h3&gt; &#xA;&lt;p&gt;Get some information about the phone number:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$phone = new PhoneNumber(&#39;012 34 56 78&#39;, &#39;BE&#39;);&#xA;&#xA;$phone-&amp;gt;getType();              // &#39;fixed_line&#39;&#xA;$phone-&amp;gt;isOfType(&#39;fixed_line&#39;); // true&#xA;$phone-&amp;gt;getCountry();           // &#39;BE&#39;&#xA;$phone-&amp;gt;isOfCountry(&#39;BE&#39;);      // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Equality comparison&lt;/h3&gt; &#xA;&lt;p&gt;Check if a given phone number is (not) equal to another one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$phone = new PhoneNumber(&#39;012 34 56 78&#39;, &#39;BE&#39;);&#xA;&#xA;$phone-&amp;gt;equals(&#39;012/34.56.76&#39;, &#39;BE&#39;)       // true&#xA;$phone-&amp;gt;equals(&#39;+32 12 34 56 78&#39;)          // true&#xA;$phone-&amp;gt;equals( $anotherPhoneObject )      // true/false&#xA;&#xA;$phone-&amp;gt;notEquals(&#39;045 67 89 10&#39;, &#39;BE&#39;)    // true&#xA;$phone-&amp;gt;notEquals(&#39;+32 45 67 89 10&#39;)       // true&#xA;$phone-&amp;gt;notEquals( $anotherPhoneObject )   // true/false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Helper function&lt;/h3&gt; &#xA;&lt;p&gt;The package exposes the &lt;code&gt;phone()&lt;/code&gt; helper function that returns a &lt;code&gt;Propaganistas\LaravelPhone\PhoneNumber&lt;/code&gt; instance or the formatted string if &lt;code&gt;$format&lt;/code&gt; was provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;phone($number, $country = [], $format = null)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Database considerations&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Disclaimer: Phone number handling is quite different in each application. The topics mentioned below are therefore meant as a set of thought starters; support will &lt;strong&gt;not&lt;/strong&gt; be provided.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Storing phone numbers in a database has always been a speculative topic and there&#39;s simply no silver bullet. It all depends on your application&#39;s requirements. Here are some things to take into account, along with an implementation suggestion. Your ideal database setup will probably be a combination of some of the pointers detailed below.&lt;/p&gt; &#xA;&lt;h3&gt;Uniqueness&lt;/h3&gt; &#xA;&lt;p&gt;The E.164 format globally and uniquely identifies a phone number across the world. It also inherently implies a specific country and can be supplied as-is to the &lt;code&gt;phone()&lt;/code&gt; helper.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One column to store the phone number&lt;/li&gt; &#xA; &lt;li&gt;To format the phone number to E.164 before persisting it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User input = &lt;code&gt;012/45.65.78&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Database column &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;phone&lt;/code&gt; (varchar) = &lt;code&gt;+3212456578&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Presenting the phone number the way it was inputted&lt;/h3&gt; &#xA;&lt;p&gt;If you store formatted phone numbers the raw user input will unretrievably get lost. It may be beneficial to present your users with their very own inputted phone number, for example in terms of improved user experience.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Two columns to store the raw input and the correlated country&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User input = &lt;code&gt;012/34.56.78&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Database columns &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;phone&lt;/code&gt; (varchar) = &lt;code&gt;012/34.56.78&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;phone_country&lt;/code&gt; (varchar) = &lt;code&gt;BE&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supporting searches&lt;/h3&gt; &#xA;&lt;p&gt;Searching through phone numbers can quickly become ridiculously complex and will always require deep understanding of the context and extent of your application. Here&#39;s &lt;em&gt;a&lt;/em&gt; possible approach covering quite a lot of &#34;natural&#34; use cases.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Three additional columns to store searchable variants of the phone number: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Normalized input (raw input with all non-alpha characters stripped)&lt;/li&gt; &#xA;   &lt;li&gt;National formatted phone number (with all non-alpha characters stripped)&lt;/li&gt; &#xA;   &lt;li&gt;E.164 formatted phone number&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Probably a &lt;code&gt;saving()&lt;/code&gt; observer (or equivalent) to prefill the variants before persistence&lt;/li&gt; &#xA; &lt;li&gt;An extensive search query utilizing the searchable variants&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User input = &lt;code&gt;12/34.56.78&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Observer method: &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function saving(User $user)&#xA;{&#xA;    if ($user-&amp;gt;isDirty(&#39;phone&#39;) &amp;amp;&amp;amp; $user-&amp;gt;phone) {&#xA;        $user-&amp;gt;phone_normalized = preg_replace(&#39;/[^0-9]/&#39;, &#39;&#39;, $user-&amp;gt;phone);&#xA;        $user-&amp;gt;phone_national = preg_replace(&#39;/[^0-9]/&#39;, &#39;&#39;, phone($user-&amp;gt;phone, $user-&amp;gt;phone_country)-&amp;gt;formatNational());&#xA;        $user-&amp;gt;phone_e164 = phone($user-&amp;gt;phone, $user-&amp;gt;phone_country)-&amp;gt;formatE164();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Database columns &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;phone_normalized&lt;/code&gt; (varchar) = &lt;code&gt;12345678&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;phone_national&lt;/code&gt; (varchar) = &lt;code&gt;012345678&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;phone_e164&lt;/code&gt; (varchar) = &lt;code&gt;+3212345678&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Search query: &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// $search holds the search term&#xA;User::where(function($query) use ($search) {&#xA;  $query-&amp;gt;where(&#39;phone_normalized&#39;, &#39;LIKE&#39;, preg_replace(&#39;/[^0-9]/&#39;, &#39;&#39;, $search) . &#39;%&#39;)&#xA;        -&amp;gt;orWhere(&#39;phone_national&#39;, &#39;LIKE&#39;, preg_replace(&#39;/[^0-9]/&#39;, &#39;&#39;, $search) . &#39;%&#39;)&#xA;        -&amp;gt;orWhere(&#39;phone_e164&#39;, &#39;LIKE&#39;, preg_replace(&#39;/[^+0-9]/&#39;, &#39;&#39;, $search) . &#39;%&#39;)&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>