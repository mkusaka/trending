<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-01T01:34:04Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>symfony-cmf/Routing</title>
    <updated>2024-07-01T01:34:04Z</updated>
    <id>tag:github.com,2024-07-01:/symfony-cmf/Routing</id>
    <link href="https://github.com/symfony-cmf/Routing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Routing component building on the Symfony Routing component&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Symfony CMF Routing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/symfony-cmf/Routing/actions/workflows/test-application.yaml&#34;&gt;&lt;img src=&#34;https://github.com/symfony-cmf/Routing/actions/workflows/test-application.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/symfony-cmf/routing&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/symfony-cmf/routing/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/symfony-cmf/routing&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/symfony-cmf/routing/v/unstable&#34; alt=&#34;Latest Unstable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/symfony-cmf/routing&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/symfony-cmf/routing/license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/symfony-cmf/routing&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/symfony-cmf/routing/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/symfony-cmf/routing&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/symfony-cmf/routing/d/monthly&#34; alt=&#34;Monthly Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/symfony-cmf/routing&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/symfony-cmf/routing/d/daily&#34; alt=&#34;Daily Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package is part of the Symfony Content Management Framework (CMF) and licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/symfony-cmf/Routing/3.x/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Symfony CMF Routing component extends the Symfony routing component with additional features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A ChainRouter to run several routers in parallel&lt;/li&gt; &#xA; &lt;li&gt;A DynamicRouter that can load routes from any database and can generate additional information in the route match.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The CMF Routing component does not need the Symfony full stack framework. It is also useful in applications not using the full Symfony framework.&lt;/p&gt; &#xA;&lt;p&gt;For the best integration into the Symfony full stack framework, it is recommended to use the &lt;a href=&#34;https://github.com/symfony-cmf/RoutingBundle&#34;&gt;RoutingBundle&lt;/a&gt; when building Symfony full stack applications.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;require&lt;/code&gt; section of &lt;a href=&#34;https://raw.githubusercontent.com/symfony-cmf/Routing/3.x/composer.json&#34;&gt;composer.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For the install guide and reference, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/bundles/CMFRoutingBundle/current/routing-component/index.html&#34;&gt;symfony-cmf/routing Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/bundles/CMFRoutingBundle/current/index.html&#34;&gt;All Symfony CMF documentation&lt;/a&gt; - complete Symfony CMF reference&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For general support and questions, please use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/symfony-cmf&#34;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. Please see our &lt;a href=&#34;https://github.com/symfony-cmf/Routing/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://raw.githubusercontent.com/symfony-cmf/Routing/3.x/contributors&#34;&gt;everyone who has contributed&lt;/a&gt; already.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This package is available under the &lt;a href=&#34;https://raw.githubusercontent.com/symfony-cmf/Routing/3.x/src/Resources/meta/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stecman/symfony-console-completion</title>
    <updated>2024-07-01T01:34:04Z</updated>
    <id>tag:github.com,2024-07-01:/stecman/symfony-console-completion</id>
    <link href="https://github.com/stecman/symfony-console-completion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatic tab-key completion for Symfony console application options, arguments and parameters&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BASH/ZSH auto-complete for Symfony Console applications&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/stecman/symfony-console-completion&#34;&gt;&lt;img src=&#34;https://travis-ci.org/stecman/symfony-console-completion.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/stecman/symfony-console-completion/?branch=master&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/stecman/symfony-console-completion/badges/quality-score.png?b=master&#34; alt=&#34;Scrutinizer Code Quality&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/stecman/symfony-console-completion&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/stecman/symfony-console-completion/v/stable.png&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/stecman/symfony-console-completion&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/stecman/symfony-console-completion/downloads.png&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/stecman/symfony-console-completion&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/stecman/symfony-console-completion/v/unstable.svg?sanitize=true&#34; alt=&#34;Latest Unstable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/stecman/symfony-console-completion&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/stecman/symfony-console-completion/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package provides automatic (tab) completion in BASH and ZSH for Symfony Console Component based applications. With zero configuration, this package allows completion of available command names and the options they provide. User code can define custom completion behaviour for argument and option values.&lt;/p&gt; &#xA;&lt;p&gt;Example of zero-config use with Composer:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/MoDWkby.gif&#34; alt=&#34;Composer BASH completion&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Zero-config use&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t need any custom completion behaviour, you can simply add the completion command to your application:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;stecman/symfony-console-completion&lt;/code&gt; using &lt;a href=&#34;https://getcomposer.org/&#34;&gt;composer&lt;/a&gt; by running:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ composer require stecman/symfony-console-completion&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For standalone Symfony Console applications, add an instance of &lt;code&gt;CompletionCommand&lt;/code&gt; to your application&#39;s &lt;code&gt;Application::getDefaultCommands()&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function getDefaultCommands()&#xA;{&#xA;   //...&#xA;    $commands[] = new \Stecman\Component\Symfony\Console\BashCompletion\CompletionCommand();&#xA;   //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For Symfony Framework applications, register the &lt;code&gt;CompletionCommand&lt;/code&gt; as a service in &lt;code&gt;app/config/services.yml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;#...&#xA;    console.completion_command:&#xA;      class: Stecman\Component\Symfony\Console\BashCompletion\CompletionCommand&#xA;      tags:&#xA;          -  { name: console.command }&#xA;#...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Register completion for your application by running one of the following in a terminal, replacing &lt;code&gt;[program]&lt;/code&gt; with the command you use to run your application (eg. &#39;composer&#39;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# BASH ~4.x, ZSH&#xA;source &amp;lt;([program] _completion --generate-hook)&#xA;&#xA;# BASH ~3.x, ZSH&#xA;[program] _completion --generate-hook | source /dev/stdin&#xA;&#xA;# BASH (any version)&#xA;eval $([program] _completion --generate-hook)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default this registers completion for the absolute path to you application, which will work if the program is accessible on your PATH. You can specify a program name to complete for instead using the &lt;code&gt;--program&lt;/code&gt; option, which is required if you&#39;re using an alias to run the program.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want the completion to apply automatically for all new shell sessions, add the command from step 3 to your shell&#39;s profile (eg. &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: The type of shell (ZSH/BASH) is automatically detected using the &lt;code&gt;SHELL&lt;/code&gt; environment variable at run time. In some circumstances, you may need to explicitly specify the shell type with the &lt;code&gt;--shell-type&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;The current version supports Symfony 6 and PHP 8.x only, due to backwards compatibility breaks in Symfony 6. For older versions of Symfony and PHP, use &lt;a href=&#34;https://github.com/stecman/symfony-console-completion/releases/tag/0.11.0&#34;&gt;version 0.11.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;--generate-hook&lt;/code&gt; option of &lt;code&gt;CompletionCommand&lt;/code&gt; generates a small shell script that registers a function with your shell&#39;s completion system to act as a bridge between the shell and the completion command in your application. When you request completion for your program (by pressing tab with your program name as the first word on the command line), the bridge function is run; passing the current command line contents and cursor position to &lt;code&gt;[program] _completion&lt;/code&gt;, and feeding the resulting output back to the shell.&lt;/p&gt; &#xA;&lt;h2&gt;Defining value completions&lt;/h2&gt; &#xA;&lt;p&gt;By default, no completion results will be returned for option and argument values. There are two ways of defining custom completion values for values: extend &lt;code&gt;CompletionCommand&lt;/code&gt;, or implement &lt;code&gt;CompletionAwareInterface&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Implementing &lt;code&gt;CompletionAwareInterface&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;CompletionAwareInterface&lt;/code&gt; allows a command to be responsible for completing its own option and argument values. When completion is run with a command name specified (eg. &lt;code&gt;myapp mycommand ...&lt;/code&gt;) and the named command implements this interface, the appropriate interface method is called automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class MyCommand extends Command implements CompletionAwareInterface&#xA;{&#xA;    ...&#xA;&#xA;    public function completeOptionValues($optionName, CompletionContext $context)&#xA;    {&#xA;        if ($optionName == &#39;some-option&#39;) {&#xA;            return [&#39;myvalue&#39;, &#39;other-value&#39;, &#39;word&#39;];&#xA;        }&#xA;    }&#xA;&#xA;    public function completeArgumentValues($argumentName, CompletionContext $context)&#xA;    {&#xA;        if ($argumentName == &#39;package&#39;) {&#xA;            return $this-&amp;gt;getPackageNamesFromDatabase($context-&amp;gt;getCurrentWord());&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method of generating completions doesn&#39;t support use of &lt;code&gt;CompletionInterface&lt;/code&gt; implementations at the moment, which make it easy to share completion behaviour between commands. To use this functionality, you&#39;ll need write your value completions by extending &lt;code&gt;CompletionCommand&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Extending &lt;code&gt;CompletionCommand&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Argument and option value completions can also be defined by extending &lt;code&gt;CompletionCommand&lt;/code&gt; and overriding the &lt;code&gt;configureCompletion&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class MyCompletionCommand extends CompletionCommand&#xA;{&#xA;    protected function configureCompletion(CompletionHandler $handler)&#xA;    {&#xA;        $handler-&amp;gt;addHandlers([&#xA;            // Instances of Completion go here.&#xA;            // See below for examples.&#xA;        ]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;The &lt;code&gt;Completion&lt;/code&gt; class&lt;/h4&gt; &#xA;&lt;p&gt;The following snippets demonstrate how the &lt;code&gt;Completion&lt;/code&gt; class works with &lt;code&gt;CompletionHandler&lt;/code&gt;, and some possible configurations. The examples are for an application with the signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;`myapp (walk|run) [-w|--weather=&#34;&#34;] direction`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Command-specific argument completion with an array&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$handler-&amp;gt;addHandler(&#xA;    new Completion(&#xA;        &#39;walk&#39;,                    // match command name&#xA;        &#39;direction&#39;,               // match argument/option name&#xA;        Completion::TYPE_ARGUMENT, // match definition type (option/argument)&#xA;        [                     // array or callback for results&#xA;            &#39;north&#39;,&#xA;            &#39;east&#39;,&#xA;            &#39;south&#39;,&#xA;            &#39;west&#39;&#xA;        ]&#xA;    )&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will complete the &lt;code&gt;direction&lt;/code&gt; argument for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ myapp walk [tab]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but not this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ myapp run [tab]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Non-command-specific (global) argument completion with a function&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$handler-&amp;gt;addHandler(&#xA;    new Completion(&#xA;        Completion::ALL_COMMANDS,&#xA;        &#39;direction&#39;,&#xA;        Completion::TYPE_ARGUMENT,&#xA;        function() {&#xA;            return range(1, 10);&#xA;        }&#xA;    )&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will complete the &lt;code&gt;direction&lt;/code&gt; argument for both commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ myapp walk [tab]&#xA;$ myapp run [tab]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Option completion&lt;/h5&gt; &#xA;&lt;p&gt;Option handlers work the same way as argument handlers, except you use &lt;code&gt;Completion::TYPE_OPTION&lt;/code&gt; for the type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$handler-&amp;gt;addHandler(&#xA;    new Completion(&#xA;        Completion::ALL_COMMANDS,&#xA;        &#39;weather&#39;,&#xA;        Completion::TYPE_OPTION,&#xA;        [&#xA;            &#39;raining&#39;,&#xA;            &#39;sunny&#39;,&#xA;            &#39;everything is on fire!&#39;&#xA;        ]&#xA;    )&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Completing the for both arguments and options&lt;/h5&gt; &#xA;&lt;p&gt;To have a completion run for both options and arguments matching the specified name, you can use the type &lt;code&gt;Completion::ALL_TYPES&lt;/code&gt;. Combining this with &lt;code&gt;Completion::ALL_COMMANDS&lt;/code&gt; and consistent option/argument naming throughout your application, it&#39;s easy to share completion behaviour between commands, options and arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$handler-&amp;gt;addHandler(&#xA;    new Completion(&#xA;        Completion::ALL_COMMANDS,&#xA;        &#39;package&#39;,&#xA;        Completion::ALL_TYPES,&#xA;        function() {&#xA;            // ...&#xA;        }&#xA;    )&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example completions&lt;/h2&gt; &#xA;&lt;h3&gt;Completing references from a Git repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;new Completion(&#xA;    Completion::ALL_COMMANDS,&#xA;    &#39;ref&#39;,&#xA;    Completion::TYPE_OPTION,&#xA;    function () {&#xA;        $raw = shell_exec(&#39;git show-ref --abbr&#39;);&#xA;        if (preg_match_all(&#39;/refs\/(?:heads|tags)?\/?(.*)/&#39;, $raw, $matches)) {&#xA;            return $matches[1];&#xA;        }&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Completing filesystem paths&lt;/h3&gt; &#xA;&lt;p&gt;This library provides the completion implementation &lt;code&gt;ShellPathCompletion&lt;/code&gt; which defers path completion to the shell&#39;s built-in path completion behaviour rather than implementing it in PHP, so that users get the path completion behaviour they expect from their shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;new Completion\ShellPathCompletion(&#xA;    Completion::ALL_COMMANDS,&#xA;    &#39;path&#39;,&#xA;    Completion::TYPE_OPTION&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Behaviour notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option shortcuts are not offered as completion options, however requesting completion (ie. pressing tab) on a valid option shortcut will complete.&lt;/li&gt; &#xA; &lt;li&gt;Completion is not implemented for the &lt;code&gt;--option=&#34;value&#34;&lt;/code&gt; style of passing a value to an option, however &lt;code&gt;--option value&lt;/code&gt; and &lt;code&gt;--option &#34;value&#34;&lt;/code&gt; work and are functionally identical.&lt;/li&gt; &#xA; &lt;li&gt;Value completion is always run for options marked as &lt;code&gt;InputOption::VALUE_OPTIONAL&lt;/code&gt; since there is currently no way to determine the desired behaviour from the command line contents (ie. skip the optional value or complete for it)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>alchemy-fr/Zippy</title>
    <updated>2024-07-01T01:34:04Z</updated>
    <id>tag:github.com,2024-07-01:/alchemy-fr/Zippy</id>
    <link href="https://github.com/alchemy-fr/Zippy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP zip/tar/bz2 archives (de)compression library with commandline or extensions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zippy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alchemy-fr/Zippy/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/l/alchemy/zippy.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/alchemy/zippy&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/alchemy/zippy.svg?style=flat-square&#34; alt=&#34;Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/alchemy-fr/Zippy&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/alchemy-fr/Zippy.svg?style=flat-square&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/alchemy-fr/Zippy/&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/g/alchemy-fr/Zippy.svg?style=flat-square&#34; alt=&#34;Scrutinizer&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/alchemy/zippy/stats&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/alchemy/zippy.svg?style=flat-square&#34; alt=&#34;Packagist&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A PHP library to read, create, and extract archives in various formats via command line utilities or PHP extensions&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The only supported installation method is via &lt;a href=&#34;https://getcomposer.org&#34;&gt;Composer&lt;/a&gt;. Run the following command to require Zippy in your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require alchemy/zippy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adapters&lt;/h2&gt; &#xA;&lt;p&gt;Zippy currently supports the following drivers and file formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;zip &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.zip&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PHP zip extension &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.zip&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GNU tar &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.tar&lt;/li&gt; &#xA;   &lt;li&gt;.tar.gz&lt;/li&gt; &#xA;   &lt;li&gt;.tar.bz2&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;BSD tar &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.tar&lt;/li&gt; &#xA;   &lt;li&gt;.tar.gz&lt;/li&gt; &#xA;   &lt;li&gt;.tar.bz2&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;All the following code samples assume that Zippy is loaded and available as &lt;code&gt;$zippy&lt;/code&gt;. You need the following code (or variation of) to load Zippy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;&#xA;use Alchemy\Zippy\Zippy;&#xA;&#xA;// Require Composer&#39;s autoloader&#xA;require __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;&#xA;// Load Zippy&#xA;$zippy = Zippy::load();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List an archive&#39;s contents:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Open an archive&#xA;$archive = $zippy-&amp;gt;open(&#39;build.tar&#39;);&#xA;&#xA;// Iterate through members&#xA;foreach ($archive as $member) {&#xA;    echo &#34;Archive contains $member&#34; . PHP_EOL;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extract an archive to a specific directory:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Open an archive&#xA;$archive = $zippy-&amp;gt;open(&#39;build.tar&#39;);&#xA;&#xA;// Extract archive contents to `/tmp`&#xA;$archive-&amp;gt;extract(&#39;/tmp&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a new archive&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Creates an archive.zip that contains a directory &#34;folder&#34; that contains&#xA;// files contained in &#34;/path/to/directory&#34; recursively&#xA;$archive = $zippy-&amp;gt;create(&#39;archive.zip&#39;, array(&#xA;    &#39;folder&#39; =&amp;gt; &#39;/path/to/directory&#39;&#xA;), true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize file and directory names inside archive&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$archive = $zippy-&amp;gt;create(&#39;archive.zip&#39;, array(&#xA;    &#39;folder&#39; =&amp;gt; &#39;/path/to/directory&#39;,            // will create a folder at root&#xA;    &#39;http://www.google.com/logo.jpg&#39;,            // will create a logo.jpg file at root&#xA;    fopen(&#39;https://www.facebook.com/index.php&#39;), // will create an index.php at root&#xA;    &#39;directory/image.jpg&#39; =&amp;gt; &#39;image.jpg&#39;,        // will create a image.jpg in &#39;directory&#39; folder&#xA;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation hosted at &lt;a href=&#34;https://zippy.readthedocs.org/&#34;&gt;read the docs&lt;/a&gt; !&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>