<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-18T01:41:14Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mcamara/laravel-localization</title>
    <updated>2023-02-18T01:41:14Z</updated>
    <id>tag:github.com,2023-02-18:/mcamara/laravel-localization</id>
    <link href="https://github.com/mcamara/laravel-localization" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy localization for Laravel&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Laravel Localization&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/mcamara/laravel-localization?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/mcamara/laravel-localization&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/mcamara/laravel-localization&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/mcamara/laravel-localization/version.png&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/mcamara/laravel-localization&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/mcamara/laravel-localization/d/total.png&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/mcamara/laravel-localization&#34;&gt;&lt;img src=&#34;https://travis-ci.org/mcamara/laravel-localization.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/mcamara/laravel-localization&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/mcamara/laravel-localization/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Easy i18n localization for Laravel, an useful tool to combine with Laravel localization classes.&lt;/p&gt; &#xA;&lt;p&gt;The package offers the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Detect language from browser&lt;/li&gt; &#xA; &lt;li&gt;Smart redirects (Save locale in session/cookie)&lt;/li&gt; &#xA; &lt;li&gt;Smart routing (Define your routes only once, no matter how many languages you use)&lt;/li&gt; &#xA; &lt;li&gt;Translatable Routes&lt;/li&gt; &#xA; &lt;li&gt;Supports caching &amp;amp; testing&lt;/li&gt; &#xA; &lt;li&gt;Option to hide default locale in url&lt;/li&gt; &#xA; &lt;li&gt;Many snippets and helpers (like language selector)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#redirect-middleware&#34;&gt;Redirect Middleware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#helpers&#34;&gt;Helpers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#translated-routes&#34;&gt;Translated Routes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#caching-routes&#34;&gt;Caching routes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#common-issues&#34;&gt;Common Issues&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#post-is-not-working&#34;&gt;POST is not working&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#methodnotallowedhttpexception&#34;&gt;MethodNotAllowedHttpException&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#validation-message-is-only-in-default-locale&#34;&gt;Validation message is always in default locale&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#collaborators&#34;&gt;Collaborators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Laravel compatibility&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Laravel&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;laravel-localization&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.0.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.13.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.1.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.13.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.2.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.15.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.0.x/5.1.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.0.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.2.x-5.4.x (PHP 7 not required)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.2.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.2.x-5.8.x (PHP version &amp;gt;= 7 required)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.3.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.2.0-6.x (PHP version &amp;gt;= 7 required)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.4.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.2.0-9.x (PHP version &amp;gt;= 7 required)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.7.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the package via composer: &lt;code&gt;composer require mcamara/laravel-localization&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Laravel 5.4 and below it necessary to &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/ADDITIONS.md#for-laravel-5.4-and-below&#34;&gt;register the service provider&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Config Files&lt;/h3&gt; &#xA;&lt;p&gt;In order to edit the default configuration you may execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan vendor:publish --provider=&#34;Mcamara\LaravelLocalization\LaravelLocalizationServiceProvider&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, &lt;code&gt;config/laravellocalization.php&lt;/code&gt; will be created.&lt;/p&gt; &#xA;&lt;p&gt;The configuration options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;supportedLocales&lt;/strong&gt; Languages of your app (Default: English &amp;amp; Spanish).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;useAcceptLanguageHeader&lt;/strong&gt; If true, then automatically detect language from browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;hideDefaultLocaleInURL&lt;/strong&gt; If true, then do not show default locale in url.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;localesOrder&lt;/strong&gt; Sort languages in custom order.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;localesMapping&lt;/strong&gt; Rename url locales.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;utf8suffix&lt;/strong&gt; Allow changing utf8suffix for CentOS etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;urlsIgnored&lt;/strong&gt; Ignore specific urls.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Register Middleware&lt;/h3&gt; &#xA;&lt;p&gt;You may register the package middleware in the &lt;code&gt;app/Http/Kernel.php&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php namespace App\Http;&#xA;&#xA;use Illuminate\Foundation\Http\Kernel as HttpKernel;&#xA;&#xA;class Kernel extends HttpKernel {&#xA;    /**&#xA;    * The application&#39;s route middleware.&#xA;    *&#xA;    * @var array&#xA;    */&#xA;    protected $routeMiddleware = [&#xA;        /**** OTHER MIDDLEWARE ****/&#xA;        &#39;localize&#39;                =&amp;gt; \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationRoutes::class,&#xA;        &#39;localizationRedirect&#39;    =&amp;gt; \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationRedirectFilter::class,&#xA;        &#39;localeSessionRedirect&#39;   =&amp;gt; \Mcamara\LaravelLocalization\Middleware\LocaleSessionRedirect::class,&#xA;        &#39;localeCookieRedirect&#39;    =&amp;gt; \Mcamara\LaravelLocalization\Middleware\LocaleCookieRedirect::class,&#xA;        &#39;localeViewPath&#39;          =&amp;gt; \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationViewPath::class&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your routes file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// routes/web.php&#xA;&#xA;Route::group([&#39;prefix&#39; =&amp;gt; LaravelLocalization::setLocale()], function()&#xA;{&#xA;&#x9;/** ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP **/&#xA;&#x9;Route::get(&#39;/&#39;, function()&#xA;&#x9;{&#xA;&#x9;&#x9;return View::make(&#39;hello&#39;);&#xA;&#x9;});&#xA;&#xA;&#x9;Route::get(&#39;test&#39;,function(){&#xA;&#x9;&#x9;return View::make(&#39;test&#39;);&#xA;&#x9;});&#xA;});&#xA;&#xA;/** OTHER PAGES THAT SHOULD NOT BE LOCALIZED **/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once this route group is added to the routes file, a user can access all locales added into &lt;code&gt;supportedLocales&lt;/code&gt; (&lt;code&gt;en&lt;/code&gt; and &lt;code&gt;es&lt;/code&gt; by default). For example, the above route file creates the following addresses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Set application language to English&#xA;http://url-to-laravel/en&#xA;http://url-to-laravel/en/test&#xA;&#xA;// Set application language to Spanish&#xA;http://url-to-laravel/es&#xA;http://url-to-laravel/es/test&#xA;&#xA;// Set application language to English or Spanish (depending on browsers default locales)&#xA;// if nothing found set to default locale&#xA;http://url-to-laravel&#xA;http://url-to-laravel/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The package sets your application locale &lt;code&gt;App::getLocale()&lt;/code&gt; according to your url. The locale may then be used for &lt;a href=&#34;http://laravel.com/docs/localization&#34;&gt;Laravel&#39;s localization features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may add middleware to your group like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::group(&#xA;[&#xA;&#x9;&#39;prefix&#39; =&amp;gt; LaravelLocalization::setLocale(),&#xA;&#x9;&#39;middleware&#39; =&amp;gt; [ &#39;localeSessionRedirect&#39;, &#39;localizationRedirect&#39;, &#39;localeViewPath&#39; ]&#xA;], function(){ //...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Recommendations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/em&gt;: It is &lt;strong&gt;strongly&lt;/strong&gt; recommended to use a &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#redirect-middleware&#34;&gt;redirecting middleware&lt;/a&gt;. Urls without locale should only be used to determine browser/default locale and to redirect to the &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#localized-urls&#34;&gt;localized url&lt;/a&gt;. Otherwise, when search engine robots crawl for example &lt;code&gt;http://url-to-laravel/test&lt;/code&gt; they may get different language content for each visit. Also having multiple urls for the same content creates a SEO duplicate-content issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/em&gt;: It is &lt;strong&gt;strongly&lt;/strong&gt; recommended to &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#localized-urls&#34;&gt;localize your links&lt;/a&gt;, even if you use a redirect middleware. Otherwise, you will cause at least one redirect each time a user clicks on a link. Also, any action url from a post form must be localized, to prevent that it gets redirected to a get request.&lt;/p&gt; &#xA;&lt;h2&gt;Redirect Middleware&lt;/h2&gt; &#xA;&lt;p&gt;The following redirection middleware depends on the settings of &lt;code&gt;hideDefaultLocaleInURL&lt;/code&gt; and &lt;code&gt;useAcceptLanguageHeader&lt;/code&gt; in &lt;code&gt;config/laravellocalization.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;LocaleSessionRedirect&lt;/h3&gt; &#xA;&lt;p&gt;Whenever a locale is present in the url, it will be stored in the session by this middleware.&lt;/p&gt; &#xA;&lt;p&gt;If there is no locale present in the url, then this middleware will check the following&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If no locale is saved in session and &lt;code&gt;useAcceptLanguageHeader&lt;/code&gt; is set to true, compute locale from browser and redirect to url with locale.&lt;/li&gt; &#xA; &lt;li&gt;If a locale is saved in session redirect to url with locale, unless its the default locale and &lt;code&gt;hideDefaultLocaleInURL&lt;/code&gt; is set to true.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, if a user navigates to &lt;a href=&#34;http://url-to-laravel/test&#34;&gt;http://url-to-laravel/test&lt;/a&gt; and &lt;code&gt;en&lt;/code&gt; is the current locale, it would redirect him automatically to &lt;a href=&#34;http://url-to-laravel/en/test&#34;&gt;http://url-to-laravel/en/test&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;LocaleCookieRedirect&lt;/h3&gt; &#xA;&lt;p&gt;Similar to LocaleSessionRedirect, but it stores value in a cookie instead of a session.&lt;/p&gt; &#xA;&lt;p&gt;Whenever a locale is present in the url, it will be stored in the cookie by this middleware.&lt;/p&gt; &#xA;&lt;p&gt;In there is no locale present in the url, then this middleware will check the following&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If no locale is saved in cookie and &lt;code&gt;useAcceptLanguageHeader&lt;/code&gt; is set to true, compute locale from browser and redirect to url with locale.&lt;/li&gt; &#xA; &lt;li&gt;If a locale is saved in cookie redirect to url with locale, unless its the default locale and &lt;code&gt;hideDefaultLocaleInURL&lt;/code&gt; is set to true.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, if a user navigates to &lt;a href=&#34;http://url-to-laravel/test&#34;&gt;http://url-to-laravel/test&lt;/a&gt; and &lt;code&gt;de&lt;/code&gt; is the current locale, it would redirect him automatically to &lt;a href=&#34;http://url-to-laravel/de/test&#34;&gt;http://url-to-laravel/de/test&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;LaravelLocalizationRedirectFilter&lt;/h3&gt; &#xA;&lt;p&gt;When the default locale is present in the url and &lt;code&gt;hideDefaultLocaleInURL&lt;/code&gt; is set to true, then the middleware redirects to the url without locale.&lt;/p&gt; &#xA;&lt;p&gt;For example, if &lt;code&gt;es&lt;/code&gt; is the default locale, then &lt;a href=&#34;http://url-to-laravel/es/test&#34;&gt;http://url-to-laravel/es/test&lt;/a&gt; would be redirected to &lt;a href=&#34;http://url-to-laravel/test&#34;&gt;http://url-to-laravel/test&lt;/a&gt; and the&lt;code&gt;App::getLocale()&lt;/code&gt; would be set to &lt;code&gt;es&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Helpers&lt;/h2&gt; &#xA;&lt;p&gt;This package comes with a bunch of helpers.&lt;/p&gt; &#xA;&lt;h3&gt;Localized URLs&lt;/h3&gt; &#xA;&lt;p&gt;Localized URLS taken into account &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/%5Bhttps://laravel.com/docs/master/routing#route-model-binding%5D&#34;&gt;route model binding&lt;/a&gt; when generating the localized route, aswell as the &lt;code&gt;hideDefaultLocaleInURL&lt;/code&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#translated-routes&#34;&gt;Translated Routes&lt;/a&gt; settings.&lt;/p&gt; &#xA;&lt;h4&gt;Get localized URL&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    // If current locale is Spanish, it returns `/es/test`&#xA;    &amp;lt;a href=&#34;{{ LaravelLocalization::localizeUrl(&#39;/test&#39;) }}&#34;&amp;gt;@lang(&#39;Follow this link&#39;)&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get localized URL for an specific locale&lt;/h4&gt; &#xA;&lt;p&gt;Get current URL in specific locale:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Returns current url with English locale.&#xA;{{ LaravelLocalization::getLocalizedURL(&#39;en&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Clean routes&lt;/h3&gt; &#xA;&lt;p&gt;Returns a URL clean of any localization.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Returns /about&#xA;{{ LaravelLocalization::getNonLocalizedURL(&#39;/es/about&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get URL for an specific translation key&lt;/h3&gt; &#xA;&lt;p&gt;Returns a route, &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#translated-routes&#34;&gt;localized&lt;/a&gt; to the desired locale. If the translation key does not exist in the locale given, this function will return false.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Returns /es/acerca&#xA;{{ LaravelLocalization::getURLFromRouteNameTranslated(&#39;es&#39;, &#39;routes.about&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Supported Locales&lt;/h3&gt; &#xA;&lt;p&gt;Return all supported locales and their properties as an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;{{ LaravelLocalization::getSupportedLocales() }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Supported Locales Custom Order&lt;/h3&gt; &#xA;&lt;p&gt;Return all supported locales but in the order specified in the configuration file. You can use this function to print locales in the language selector.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;{{ LaravelLocalization::getLocalesOrder() }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Supported Locales Keys&lt;/h3&gt; &#xA;&lt;p&gt;Return an array with all the keys for the supported locales.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;{{ LaravelLocalization::getSupportedLanguagesKeys() }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Current Locale&lt;/h3&gt; &#xA;&lt;p&gt;Return the key of the current locale.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;{{ LaravelLocalization::getCurrentLocale() }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Current Locale Name&lt;/h3&gt; &#xA;&lt;p&gt;Return current locale&#39;s name as string (English/Spanish/Arabic/ ..etc).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;{{ LaravelLocalization::getCurrentLocaleName() }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Current Locale Native Name&lt;/h3&gt; &#xA;&lt;p&gt;Return current locale&#39;s native name as string (English/Español/عربى/ ..etc).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;{{ LaravelLocalization::getCurrentLocaleNative() }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Current Locale Regional Name&lt;/h3&gt; &#xA;&lt;p&gt;Return current locale&#39;s regional name as string (en_GB/en_US/fr_FR/ ..etc).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;{{ LaravelLocalization::getCurrentLocaleRegional() }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Current Locale Direction&lt;/h3&gt; &#xA;&lt;p&gt;Return current locale&#39;s direction as string (ltr/rtl).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;{{ LaravelLocalization::getCurrentLocaleDirection() }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Current Locale Script&lt;/h3&gt; &#xA;&lt;p&gt;Return the &lt;a href=&#34;http://www.unicode.org/iso15924&#34;&gt;ISO 15924&lt;/a&gt; code for the current locale script as a string; &#34;Latn&#34;, &#34;Cyrl&#34;, &#34;Arab&#34;, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;{{ LaravelLocalization::getCurrentLocaleScript() }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set view-base-path to current locale&lt;/h3&gt; &#xA;&lt;p&gt;Register the middleware &lt;code&gt;LaravelLocalizationViewPath&lt;/code&gt; to set current locale as view-base-path.&lt;/p&gt; &#xA;&lt;p&gt;Now you can wrap your views in language-based folders like the translation files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;resources/views/en/&lt;/code&gt;, &lt;code&gt;resources/views/fr&lt;/code&gt;, ...&lt;/p&gt; &#xA;&lt;h3&gt;Map your own custom lang url segments&lt;/h3&gt; &#xA;&lt;p&gt;As you can modify the supportedLocales even by renaming their keys, it is possible to use the string &lt;code&gt;uk&lt;/code&gt; instead of &lt;code&gt;en-GB&lt;/code&gt; to provide custom lang url segments. Of course, you need to prevent any collisions with already existing keys and should stick to the convention as long as possible. But if you are using such a custom key, you have to store your mapping to the &lt;code&gt;localesMapping&lt;/code&gt; array. This &lt;code&gt; localesMapping&lt;/code&gt; is needed to enable the LanguageNegotiator to correctly assign the desired locales based on HTTP Accept Language Header. Here is a quick example how to map HTTP Accept Language Header &#39;en-GB&#39; to url segment &#39;uk&#39;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// config/laravellocalization.php&#xA;&#xA;&#39;localesMapping&#39; =&amp;gt; [&#xA;&#x9;&#39;en-GB&#39; =&amp;gt; &#39;uk&#39;&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that &lt;code&gt;http://url-to-laravel/en-GB/a/b/c&lt;/code&gt; becomes &lt;code&gt;http://url-to-laravel/uk/a/b/c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;LaravelLocalization::getLocalizedURL(&#39;en-GB&#39;, &#39;a/b/c&#39;); // http://url-to-laravel/uk/a/b/c&#xA;LaravelLocalization::getLocalizedURL(&#39;uk&#39;, &#39;a/b/c&#39;); // http://url-to-laravel/uk/a/b/c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating a language selector&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re supporting multiple locales in your project you will probably want to provide the users with a way to change language. Below is a simple example of blade template code you can use to create your own language selector.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;&amp;lt;ul&amp;gt;&#xA;    @foreach(LaravelLocalization::getSupportedLocales() as $localeCode =&amp;gt; $properties)&#xA;        &amp;lt;li&amp;gt;&#xA;            &amp;lt;a rel=&#34;alternate&#34; hreflang=&#34;{{ $localeCode }}&#34; href=&#34;{{ LaravelLocalization::getLocalizedURL($localeCode, null, [], true) }}&#34;&amp;gt;&#xA;                {{ $properties[&#39;native&#39;] }}&#xA;            &amp;lt;/a&amp;gt;&#xA;        &amp;lt;/li&amp;gt;&#xA;    @endforeach&#xA;&amp;lt;/ul&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here default language will be forced in getLocalizedURL() to be present in the URL even &lt;code&gt;hideDefaultLocaleInURL = true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that Route Model Binding is supported.&lt;/p&gt; &#xA;&lt;h2&gt;Translated Routes&lt;/h2&gt; &#xA;&lt;p&gt;You may translate your routes. For example, &lt;a href=&#34;http://url/en/about&#34;&gt;http://url/en/about&lt;/a&gt; and &lt;a href=&#34;http://url/es/acerca&#34;&gt;http://url/es/acerca&lt;/a&gt; (acerca is about in spanish) or &lt;a href=&#34;http://url/en/article/important-article&#34;&gt;http://url/en/article/important-article&lt;/a&gt; and &lt;a href=&#34;http://url/es/articulo/important-article&#34;&gt;http://url/es/articulo/important-article&lt;/a&gt; (article is articulo in spanish) would be redirected to the same controller/view as follows:&lt;/p&gt; &#xA;&lt;p&gt;It is necessary that at least the &lt;code&gt;localize&lt;/code&gt; middleware in loaded in your &lt;code&gt;Route::group&lt;/code&gt; middleware (See &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#LaravelLocalizationRoutes&#34;&gt;installation instruction&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For each language, add a &lt;code&gt;routes.php&lt;/code&gt; into &lt;code&gt;resources/lang/**/routes.php&lt;/code&gt; folder. The file contains an array with all translatable routes. For example, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;// resources/lang/en/routes.php&#xA;return [&#xA;    &#34;about&#34;    =&amp;gt;  &#34;about&#34;,&#xA;    &#34;article&#34;  =&amp;gt;  &#34;article/{article}&#34;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;// resources/lang/es/routes.php&#xA;return [&#xA;    &#34;about&#34;    =&amp;gt;  &#34;acerca&#34;,&#xA;    &#34;article&#34;  =&amp;gt;  &#34;articulo/{article}&#34;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may add the routes in &lt;code&gt;routes/web.php&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::group([&#39;prefix&#39; =&amp;gt; LaravelLocalization::setLocale(),&#xA;              &#39;middleware&#39; =&amp;gt; [ &#39;localize&#39; ]], function () {&#xA;&#xA;    Route::get(LaravelLocalization::transRoute(&#39;routes.about&#39;), function () {&#xA;        return view(&#39;about&#39;);&#xA;    });&#xA;&#xA;    Route::get(LaravelLocalization::transRoute(&#39;routes.article&#39;), function (\App\Article $article) {&#xA;        return $article;&#xA;    });&#xA;&#xA;    //,...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once files are saved, you can access &lt;a href=&#34;http://url/en/about&#34;&gt;http://url/en/about&lt;/a&gt; , &lt;a href=&#34;http://url/es/acerca&#34;&gt;http://url/es/acerca&lt;/a&gt; , &lt;a href=&#34;http://url/en/article/important-article&#34;&gt;http://url/en/article/important-article&lt;/a&gt; and &lt;a href=&#34;http://url/es/articulo/important-article&#34;&gt;http://url/es/articulo/important-article&lt;/a&gt; without any problem.&lt;/p&gt; &#xA;&lt;h3&gt;Translatable route parameters&lt;/h3&gt; &#xA;&lt;p&gt;Maybe you noticed in the previous example the English slug in the Spanish url:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://url/es/articulo/important-article&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to have translated slugs, for example like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://url/en/article/important-change&#xA;http://url/es/articulo/cambio-importante&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, in order to do this, each article must have many slugs (one for each locale). Its up to you how you want to implement this relation. The only requirement for translatable route parameters is, that the relevant model implements the interface &lt;code&gt;LocalizedUrlRoutable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Implementing LocalizedUrlRoutable&lt;/h4&gt; &#xA;&lt;p&gt;To implement &lt;code&gt;\Mcamara\LaravelLocalization\Interfaces\LocalizedUrlRoutable&lt;/code&gt;, one has to create the function &lt;code&gt;getLocalizedRouteKey($locale)&lt;/code&gt;, which must return for a given locale the translated slug. In the above example, inside the model article, &lt;code&gt;getLocalizedRouteKey(&#39;en&#39;)&lt;/code&gt; should return &lt;code&gt;important-change&lt;/code&gt; and &lt;code&gt;getLocalizedRouteKey(&#39;es&#39;)&lt;/code&gt; should return &lt;code&gt;cambio-importante&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Route Model Binding&lt;/h4&gt; &#xA;&lt;p&gt;To use &lt;a href=&#34;https://laravel.com/docs/routing#route-model-binding&#34;&gt;route-model-binding&lt;/a&gt;, one should overwrite the function &lt;code&gt;resolveRouteBinding($slug)&lt;/code&gt; in the model. The function should return the model that belongs to the translated slug &lt;code&gt;$slug&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function resolveRouteBinding($slug)&#xA;{&#xA;        return static::findByLocalizedSlug($slug)-&amp;gt;first() ?? abort(404);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tutorial Video&lt;/h4&gt; &#xA;&lt;p&gt;You may want to checkout this &lt;a href=&#34;https://youtu.be/B1AUqCdizgc&#34;&gt;video&lt;/a&gt; which demonstrates how one may set up translatable route parameters.&lt;/p&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;p&gt;You can capture the URL parameters during translation if you wish to translate them too. To do so, just create an event listener for the &lt;code&gt;routes.translation&lt;/code&gt; event like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Event::listen(&#39;routes.translation&#39;, function($locale, $attributes)&#xA;{&#xA;&#x9;// Do your magic&#xA;&#xA;&#x9;return $attributes;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to pass the locale and the attributes as parameters to the closure. You may also use Event Subscribers, see: &lt;a href=&#34;http://laravel.com/docs/events#event-subscribers&#34;&gt;http://laravel.com/docs/events#event-subscribers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Caching routes&lt;/h2&gt; &#xA;&lt;p&gt;To cache your routes, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan route:trans:cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... instead of the normal &lt;code&gt;route:cache&lt;/code&gt; command. Using &lt;code&gt;artisan route:cache&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; work correctly!&lt;/p&gt; &#xA;&lt;p&gt;For the route caching solution to work, it is required to make a minor adjustment to your application route provision.&lt;/p&gt; &#xA;&lt;p&gt;In your App&#39;s &lt;code&gt;RouteServiceProvider&lt;/code&gt;, use the &lt;code&gt;LoadsTranslatedCachedRoutes&lt;/code&gt; trait:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;class RouteServiceProvider extends ServiceProvider&#xA;{&#xA;    use \Mcamara\LaravelLocalization\Traits\LoadsTranslatedCachedRoutes;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details see &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/CACHING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Common Issues&lt;/h2&gt; &#xA;&lt;h3&gt;POST is not working&lt;/h3&gt; &#xA;&lt;p&gt;This may happen if you do not localize your action route that is inside your &lt;code&gt;Routes::group&lt;/code&gt;. This may cause a redirect, which then changes the post request into a get request. To prevent that, simply use the &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#get-localized-url&#34;&gt;localize helper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you use &lt;code&gt;Auth::routes()&lt;/code&gt; and put them into your &lt;code&gt;Route::group&lt;/code&gt; Then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&#34;/logout&#34; method=&#34;POST&#34;&amp;gt;&#xA;&amp;lt;button&amp;gt;Logout&amp;lt;/button&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will not work. Instead, one has to use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;form action=&#34;{{  \LaravelLocalization::localizeURL(&#39;/logout&#39;) }} &#34; method=&#34;POST&#34;&amp;gt;&#xA;&amp;lt;button&amp;gt;Logout&amp;lt;/button&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way to solve this is to put http method to config to &#39;laravellocalization.httpMethodsIgnored&#39; to prevent of processing this type of requests&lt;/p&gt; &#xA;&lt;h3&gt;MethodNotAllowedHttpException&lt;/h3&gt; &#xA;&lt;p&gt;If you do not localize your post url and use a redirect middleware, then the post request gets redirected as a get request. If you have not defined such a get route, you will cause this exception.&lt;/p&gt; &#xA;&lt;p&gt;To localize your post url see the example in &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#post-is-not-working&#34;&gt;POST is not working&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Validation message is only in default locale&lt;/h3&gt; &#xA;&lt;p&gt;This also happens if you did not localize your post url. If you don&#39;t localize your post url, the default locale is set while validating, and when returning to &lt;code&gt;back()&lt;/code&gt; it shows the validation message in default locale.&lt;/p&gt; &#xA;&lt;p&gt;To localize your post url see the example in &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/#post-is-not-working&#34;&gt;POST is not working&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;During the test setup, the called route is not yet known. This means no language can be set. When a request is made during a test, this results in a 404 - without the prefix set the localized route does not seem to exist.&lt;/p&gt; &#xA;&lt;p&gt;To fix this, you can use this function to manually set the language prefix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// TestCase.php&#xA;protected function refreshApplicationWithLocale($locale)&#xA;{&#xA;    self::tearDown();&#xA;    putenv(LaravelLocalization::ENV_ROUTE_KEY . &#39;=&#39; . $locale);&#xA;    self::setUp();&#xA;}&#xA;&#xA;protected function tearDown(): void&#xA;{&#xA;    putenv(LaravelLocalization::ENV_ROUTE_KEY);&#xA;    parent::tearDown();&#xA;}&#xA;&#xA;// YourTest.php&#xA;public function testBasicTest()&#xA;{&#xA;    $this-&amp;gt;refreshApplicationWithLocale(&#39;en&#39;);&#xA;    // Testing code&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Collaborators&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iwasherefirst2&#34;&gt;Adam Nielsen (iwasherefirst2)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ask &lt;a href=&#34;https://github.com/mcamara&#34;&gt;mcamara&lt;/a&gt; if you want to be one of them!&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;View changelog here -&amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/mcamara/laravel-localization/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Localization is an open-sourced laravel package licensed under the MIT license&lt;/p&gt;</summary>
  </entry>
</feed>