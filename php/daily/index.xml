<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-18T01:36:25Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>msr5464/QA-Dashboard</title>
    <updated>2022-12-18T01:36:25Z</updated>
    <id>tag:github.com,2022-12-18:/msr5464/QA-Dashboard</id>
    <link href="https://github.com/msr5464/QA-Dashboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;For Live Demo of QA Dashboard, please refer to the attached screenshots in the ReadMe!&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msr5464/BasicFramework/master/Drivers/ThanosLogo.png&#34; title=&#34;Powered by Thanos and created by Mukesh Rajput&#34; height=&#34;50&#34;&gt; &#xA;&lt;h1&gt;QUALITY DASHBOARD&lt;/h1&gt; &#xA;&lt;p&gt;The purpose of creating this dashboard is to track the overall Quality Metrics of any product/service within any organization which has a lot of teams and so it&#39;s difficult to track each team manually.&lt;/p&gt; &#xA;&lt;h3&gt;QA Dashboard can help to track:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Progress in terms of &lt;code&gt;Test Coverage&lt;/code&gt; like how many total testcases we have, distribution in terms of priority like P0, P1, P2 etc, Automation coverage and many more&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Progress report of &lt;code&gt;Automation Stability&lt;/code&gt; and Execution time for each stream/project and other relevant trend charts around it&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Bugs Metrics&lt;/code&gt; ie. data around total tickets tested, numbers of Bugs found in production or staging environment, what is their priority and other relevant trend charts around it&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Code Coverage&lt;/code&gt; data is helpful to track the code coverage for developer&#39;s code via Unit Tests (written by devs). It supports not only Line Coverage but also Statement Coverage, Branch Coverage &amp;amp; Function Coverage (default is line coverage)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Documentation:&lt;/h3&gt; &#xA;&lt;p&gt;To know each and everything about this QA-Dashboard, refer to this &lt;a href=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Documentation/QA-Dashboard-ppt.pdf&#34;&gt;presentation document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots:&lt;/h2&gt; &#xA;&lt;h3&gt;Home Page of QA Dashboard:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Documentation/homePage.png&#34; alt=&#34;Home Page&#34; title=&#34;Home Page&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Test Coverage Data for all the Projects:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Documentation/testrailPage1.png&#34; alt=&#34;Testrail Page&#34; title=&#34;Testrail Numbers Page for all the Projects&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Test Coverage Data for a selected Project:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Documentation/testrailPage2.png&#34; alt=&#34;Testrail Page&#34; title=&#34;Testrail Numbers Page for one Project&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Automation Stability Data for all the Projects:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Documentation/resultsPage1.png&#34; alt=&#34;Results Page&#34; title=&#34;Automation Result Numbers for all the Projects&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Automation Stability Data for a selected Project:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Documentation/resultsPage2.png&#34; alt=&#34;Results Page&#34; title=&#34;Automation Result Numbers for one Project&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Bug Metrics Data for all the Projects:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Documentation/bugsPage1.png&#34; alt=&#34;Bugs Page&#34; title=&#34;Bug Metrics Page for all the Projects&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Bug Metrics Data for a selected Project:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Documentation/bugsPage2.png&#34; alt=&#34;Bugs Page&#34; title=&#34;Bug Metrics Page for one Project&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Code Coverage Data for all the Projects:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Documentation/unitTestsPage1.png&#34; alt=&#34;Bugs Page&#34; title=&#34;Unit Tests Coverage Page for all the Projects&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Code Coverage Data for selected Project:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Documentation/unitTestsPage2.png&#34; alt=&#34;Bugs Page&#34; title=&#34;Unit Tests Coverage Page for one Project&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Lets talk about some of the hidden features:&lt;/h3&gt; &#xA;&lt;h5&gt;1. Dark &amp;amp; Light Mode View:&lt;/h5&gt; &#xA;&lt;p&gt;To enable or disable the darkmode use query param as &lt;a href=&#34;http://localhost:8282/testrail.php?darkmode=1&#34;&gt;&lt;code&gt;darkmode=1&lt;/code&gt;&lt;/a&gt; (by default its &lt;code&gt;darkmode=1&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h5&gt;2. Pod View for bigger teams:&lt;/h5&gt; &#xA;&lt;p&gt;In case your Group or Vertical is quite big then you can convert the dashboard to only show high-level data for bigger teams ie. pods (1 pod = 2 or more smaller teams). Use query param as &lt;a href=&#34;http://localhost:8282/testrail.php?podview=1&#34;&gt;&lt;code&gt;podview=1&lt;/code&gt;&lt;/a&gt; (by default its &lt;code&gt;podview=0&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All query params get stored in &lt;strong&gt;cookies&lt;/strong&gt; so that you don&#39;t need to pass them in URL every time, this means make sure to use &lt;code&gt;darkmode=1&lt;/code&gt; or&lt;code&gt;podview=0&lt;/code&gt; to turn off these views accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Tools/Languages Used:&lt;/h2&gt; &#xA;&lt;h4&gt;For Web Portal:&lt;/h4&gt; &#xA;&lt;h5&gt;HTML&lt;/h5&gt; &#xA;&lt;h5&gt;PHP&lt;/h5&gt; &#xA;&lt;h5&gt;JavaScript&lt;/h5&gt; &#xA;&lt;h5&gt;MYSQL&lt;/h5&gt; &#xA;&lt;h4&gt;For Data Populator:&lt;/h4&gt; &#xA;&lt;h5&gt;JAVA&lt;/h5&gt; &#xA;&lt;h5&gt;TESTNG&lt;/h5&gt; &#xA;&lt;h5&gt;GRADLE&lt;/h5&gt; &#xA;&lt;h2&gt;Prerequisites:&lt;/h2&gt; &#xA;&lt;h4&gt;1. Install php server in your machine&lt;/h4&gt; &#xA;&lt;p&gt;If its Mac, php server comes installed by default, just run this cmd to start server: &lt;code&gt;php -S localhost:8282&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;2. Install mysql server&lt;/h4&gt; &#xA;&lt;p&gt;And then start the server using: &lt;code&gt;mysql.server start&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;3. Setup Database and tables&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Documentation//db-dump.sql&#34; title=&#34;db-dump.sql&#34;&gt;this basic db dump file&lt;/a&gt; to create database and insert few dummy entries, on the successful execution of this script you should get minimum 5 tables (&lt;code&gt;&amp;lt;entityName&amp;gt;_results&lt;/code&gt;, &lt;code&gt;&amp;lt;entityName&amp;gt;_jira&lt;/code&gt;, &lt;code&gt;&amp;lt;entityName&amp;gt;_testrail&lt;/code&gt;, &lt;code&gt;&amp;lt;entityName&amp;gt;_bugs&lt;/code&gt;, &lt;code&gt;&amp;lt;entityName&amp;gt;_units&lt;/code&gt;) along with configurations table created inside a database named as &lt;code&gt;thanos&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;4. Run these queries to change createdAt of dummy data:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;set global sql_mode=&#39;&#39;;&#xA;Update payment_gateway_testrail set createdAt=DATE_ADD(createdAt, INTERVAL (Select DATEDIFF(now(),createdAt) from (Select createdAt from payment_gateway_testrail order by id desc limit 1) as X) DAY) where id &amp;gt; 0;&#xA;Update payment_gateway_results set createdAt=DATE_ADD(createdAt, INTERVAL (Select DATEDIFF(now(),createdAt) from (Select createdAt from payment_gateway_results order by id desc limit 1) as X) DAY) where id &amp;gt; 0;&#xA;Update payment_gateway_jira set createdAt=DATE_ADD(createdAt, INTERVAL (Select DATEDIFF(now(),createdAt) from (Select createdAt from payment_gateway_jira order by id desc limit 1) as X) DAY) where id &amp;gt; 0;&#xA;Update payment_gateway_bugs set createdAt=DATE_ADD(createdAt, INTERVAL (Select DATEDIFF(now(),createdAt) from (Select createdAt from payment_gateway_bugs order by id desc limit 1) as X) DAY) where id &amp;gt; 0;&#xA;Update payment_gateway_units set createdAt=DATE_ADD(createdAt, INTERVAL (Select DATEDIFF(now(),createdAt) from (Select createdAt from payment_gateway_units order by id desc limit 1) as X) DAY) where id &amp;gt; 0;&#xA;Update all_entities_testrail set createdAt=DATE_ADD(createdAt, INTERVAL (Select DATEDIFF(now(),createdAt) from (Select createdAt from all_entities_testrail order by id desc limit 1) as X) DAY) where id &amp;gt; 0;&#xA;Update all_entities_results set createdAt=DATE_ADD(createdAt, INTERVAL (Select DATEDIFF(now(),createdAt) from (Select createdAt from all_entities_results order by id desc limit 1) as X) DAY) where id &amp;gt; 0;&#xA;Update all_entities_jira set createdAt=DATE_ADD(createdAt, INTERVAL (Select DATEDIFF(now(),createdAt) from (Select createdAt from all_entities_jira order by id desc limit 1) as X) DAY) where id &amp;gt; 0;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Clone this repo in your machine&lt;/h4&gt; &#xA;&lt;p&gt;After cloning the repo, navigate to the &lt;code&gt;Website/utils&lt;/code&gt; folder and update database credentials in &lt;a href=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Website/utils/constants.php&#34; title=&#34;constants.php&#34;&gt;this file&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Start Web Server:&lt;/h2&gt; &#xA;&lt;p&gt;Now, go to &lt;code&gt;Website&lt;/code&gt; folder via terminal and Start the php server using cmd: &lt;code&gt;php -S localhost:8282&lt;/code&gt;, then navigate to &lt;code&gt;http://localhost:8282&lt;/code&gt;, you should see the home page as shown in the screenshots above.&lt;/p&gt; &#xA;&lt;h2&gt;How I am populating data:&lt;/h2&gt; &#xA;&lt;p&gt;For this, please refer to &lt;code&gt;src&lt;/code&gt; folder in the root directory, it contains whole framework for poulating data into these tables (using Testrail &amp;amp; Jira apis).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;code&gt;&amp;lt;entityName&amp;gt;_results table&lt;/code&gt; - I have updated my automation frameworks to insert required data in &lt;code&gt;results&lt;/code&gt; table at the end of each automation execution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;code&gt;&amp;lt;entityName&amp;gt;_testrail table&lt;/code&gt; - Please don&#39;t be confused with the table name, it is not only limited to testrail numbers, but these numbers can also be fetched from any&amp;nbsp;testcase management tool. I have used APIs of Testrail to fetch all the required numbers from Testrail and then inserting them in the &lt;code&gt;testrail&lt;/code&gt; table twice a week.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;code&gt;&amp;lt;entityName&amp;gt;_jira&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;lt;entityName&amp;gt;_bugs table&lt;/code&gt;- Again don&#39;t be confused with the table name, it is not only limited to jira numbers, but these numbers can also be fetched from any&amp;nbsp;ticket management tool. I have used APIs of Jira to fetch all the required numbers from Jira and then inserting them in the &lt;code&gt;jira&lt;/code&gt; table twice a week.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;code&gt;&amp;lt;entityName&amp;gt;_units table&lt;/code&gt; - This table is used to store the code coverage data sent by developer&#39;s pipeline into GCP bucket and from ther our worker read csv files and populate data into this table every day.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Point is, no matter if you insert data manually or via automation scripts, till the time you are able to add data in these 5 tables daily/weekly, your dashboard will keep showing updated data and graphs.&lt;/p&gt; &#xA;&lt;h2&gt;Steps for onboarding your Organization to QA Dashboard:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new Test class file with syntax: &lt;code&gt;&amp;lt;entityName&amp;gt;Numbers.java&lt;/code&gt; at path &lt;code&gt;src/test/java/thanos/&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update &lt;code&gt;entityName&lt;/code&gt; variable as per your Entity Name in test class file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create directory inside &lt;code&gt;parameters/&lt;/code&gt; path with &lt;code&gt;entityName&lt;/code&gt; variable&#39;s name.&lt;/p&gt; &lt;h4&gt;For Test Coverage:&lt;/h4&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Take reference from existing test class files like: &lt;a href=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/src/test/java/thanos/PaymentGatewayNumbers.java&#34; title=&#34;PaymentGatewayNumbers.java&#34;&gt;PaymentGatewayNumbers.java&lt;/a&gt; and add a new test method &lt;code&gt;fetchTestCoverageData&lt;/code&gt; in your test class.&lt;/li&gt; &#xA;   &lt;li&gt;Inside newly created directory &lt;code&gt;parameters/&amp;lt;Entity Name&amp;gt;&lt;/code&gt;, add new json file with name &lt;code&gt;TestRailConfig.json&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;In &lt;code&gt;TestRailConfig.json&lt;/code&gt;, list out all the TestRail suite names of your Entity along with suite id and project id. Refer: &lt;a href=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/parameters/PaymentGateway/TestRailConfig.json&#34; title=&#34;TestRailConfig.json&#34;&gt;TestRailConfig.json&lt;/a&gt; for more details.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;h4&gt;For Automation Results:&lt;/h4&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Create the jar file of this repo &amp;amp; put in your automation framework repo as a dependency.&lt;/li&gt; &#xA;   &lt;li&gt;Thereafter call this function &lt;code&gt;ResultsHelper.createAutomationResultsCsvAndUploadToGcpBucket&lt;/code&gt; and pass all the necessary parameters, this will help to put your automation results data in GCP bucket in the form of csv file.&lt;/li&gt; &#xA;   &lt;li&gt;Then in this (QA Dashbaord) repo, create new json file with name &lt;code&gt;AutomationConfig.json&lt;/code&gt;, list out all the automation project names of your Entity along with platform type &amp;amp; pod name . Refer: &lt;a href=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/parameters/PaymentGateway/AutomationConfig.json&#34; title=&#34;AutomationConfig.json&#34;&gt;AutomationConfig.json&lt;/a&gt; for more details.&lt;/li&gt; &#xA;   &lt;li&gt;Finally, add 1 more testcase (in above created your Entity test class) to fetch the automation reports from GCP bucket and insert to Thanos DB, you can take reference from &lt;code&gt;fetchAutomationStabilityData&lt;/code&gt; testcase present in &lt;a href=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/src/test/java/thanos/PaymentGatewayNumbers.java&#34; title=&#34;PaymentGatewayNumbers.java&#34;&gt;PaymentGatewayNumbers.java&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;h4&gt;For Unit Tests Coverage&lt;/h4&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Unit test coverage data is generated using the developer&#39;s pipeline, if this data in not available then ask developers to have code coverage numbers for each repo.&lt;/li&gt; &#xA;   &lt;li&gt;Developer&#39;s Repo will upload data to GCP bucket (as csv file) by doing 1 time integration with GCP bucket(using ci/cd pipelines). File format and sample code &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1SjmPT591qUQzld6syw8jynKNDixrwdXdjcyD7TvjdBw/edit#gid=120821750&#34;&gt;can be found here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Once this integration is done &amp;amp; csv files start uploading to bucket on every dev code build, add 1 more testcase (in above created your Entity test class) to fetch the unit test coverage reports from GCP bucket and insert to Thanos DB, you can take reference from &lt;code&gt;fetchCodeCoverageData&lt;/code&gt; testcase present in &lt;a href=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/src/test/java/thanos/PaymentGatewayNumbers.java&#34; title=&#34;PaymentGatewayNumbers.java&#34;&gt;PaymentGatewayNumbers.java&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;h4&gt;For Bug Metrics&lt;/h4&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Take reference from existing test class files for eg: &lt;a href=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/src/test/java/thanos/PaymentGatewayNumbers.java&#34; title=&#34;PaymentGatewayNumbers.java&#34;&gt;PaymentGatewayNumbers.java&lt;/a&gt; and add a new test method &lt;code&gt;fetchBugMetricsData&lt;/code&gt; in your test class.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Define the filters in code, as shown in the &lt;code&gt;fetchBugMetricsData&lt;/code&gt; method, like from which data you want to fetch numbers, what all Jira ticket types you want to capture along with statuses.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Then create, custom fields in Jira (you will require admin access of Jira for this) so that people can start filling variour data points again every bug found like - environment (staging/production), bugFoundBy (manual/automation/crashes/actual users etc) and bugCategory (android/ios/backend/web/mweb etc) and attach these new fields in Jira bug screen.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Now, put custom field IDs of these new fields in the java code&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Inside newly created directory &lt;code&gt;parameters/&amp;lt;Entity Name&amp;gt;&lt;/code&gt;, add new json file with name &lt;code&gt;JiraConfig.json&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;In &lt;code&gt;JiraConfig.json&lt;/code&gt;, list out all the Jira project names of your Entity along with project key. Refer: &lt;a href=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/parameters/PaymentGateway/JiraConfig.json&#34; title=&#34;JiraConfig.json&#34;&gt;JiraConfig.json&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;After this, add new entry for your entity into &lt;code&gt;configurations&lt;/code&gt; table present in thanos DB.&lt;/li&gt; &#xA; &lt;li&gt;Once all the steps are done, data will start populating into respective DB tables and you can schedule to run this code everyday or multiple times a day as per requirements.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Debugging:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In case your mysql server is not able to execute some of the queries and showing error something like: &lt;code&gt;Error Code: 1055. Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#39;thanos.a.totalTicketsTested&#39; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by&lt;/code&gt;.&lt;br&gt; Then run this query in the mysql terminal or UI: &lt;code&gt;set global sql_mode=&#39;&#39;;&lt;/code&gt; and start the sql connection again, please remember that if you restart the mysql server or your laptop then you might need to execute this cmd again.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are seeing &lt;code&gt;Error!: SQLSTATE[HY000] [1045] Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: NO)&lt;/code&gt; on the dashboard it means your db credentials are incorrect, you need to modify them in &lt;a href=&#34;https://raw.githubusercontent.com/msr5464/QA-Dashboard/master/Website/utils/constants.php&#34; title=&#34;constants.php&#34;&gt;this file&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In case there are some more bugs/issues, you can report them to the &lt;code&gt;Issues&lt;/code&gt; section of this repo.&lt;/p&gt; &#xA;&lt;h2&gt;References:&lt;/h2&gt; &#xA;&lt;p&gt;This dashboard has been created by using the public services of &lt;a href=&#34;https://www.fusioncharts.com/&#34;&gt;Fusion Charts&lt;/a&gt;. A big Thanks to the Fusion Charts team for putting such wonderful documentation which helped me in swift integration.&lt;/p&gt; &#xA;&lt;h2&gt;Creator:&lt;/h2&gt; &#xA;&lt;p&gt;Mukesh Rajput, For any further help or queries, contact &lt;a href=&#34;https://www.linkedin.com/in/mukesh-rajput&#34;&gt;@mukesh.rajput&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>