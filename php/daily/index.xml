<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-20T01:38:01Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>erusev/parsedown</title>
    <updated>2022-09-20T01:38:01Z</updated>
    <id>tag:github.com,2022-09-20:/erusev/parsedown</id>
    <link href="https://github.com/erusev/parsedown" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Better Markdown Parser in PHP&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;Parsedown&#34; src=&#34;https://i.imgur.com/fKVY6Kz.png&#34; width=&#34;240&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Parsedown&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/erusev/parsedown&#34;&gt;&lt;img src=&#34;https://travis-ci.org/erusev/parsedown.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/erusev/parsedown&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/erusev/parsedown/d/total.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/erusev/parsedown&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/erusev/parsedown/v/stable.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/erusev/parsedown&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/erusev/parsedown/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Better Markdown Parser in PHP - &lt;a href=&#34;http://parsedown.org/demo&#34;&gt;Demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One File&lt;/li&gt; &#xA; &lt;li&gt;No Dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://parsedown.org/speed&#34;&gt;Super Fast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extensible&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.github.com/gfm&#34;&gt;GitHub flavored&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://parsedown.org/tests/&#34;&gt;Tested&lt;/a&gt; in 5.3 to 7.3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/erusev/parsedown-extra&#34;&gt;Markdown Extra extension&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the &lt;a href=&#34;https://packagist.org/packages/erusev/parsedown&#34; title=&#34;The Parsedown package on packagist.org&#34;&gt;composer package&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require erusev/parsedown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download the &lt;a href=&#34;https://github.com/erusev/parsedown/releases/latest&#34; title=&#34;The latest release of Parsedown&#34;&gt;latest release&lt;/a&gt; and include &lt;code&gt;Parsedown.php&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$Parsedown = new Parsedown();&#xA;&#xA;echo $Parsedown-&amp;gt;text(&#39;Hello _Parsedown_!&#39;); # prints: &amp;lt;p&amp;gt;Hello &amp;lt;em&amp;gt;Parsedown&amp;lt;/em&amp;gt;!&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also parse inline markdown only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;echo $Parsedown-&amp;gt;line(&#39;Hello _Parsedown_!&#39;); # prints: Hello &amp;lt;em&amp;gt;Parsedown&amp;lt;/em&amp;gt;!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples in &lt;a href=&#34;https://github.com/erusev/parsedown/wiki/&#34;&gt;the wiki&lt;/a&gt; and in &lt;a href=&#34;http://youtu.be/wYZBY8DEikI&#34;&gt;this video tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Parsedown is capable of escaping user-input within the HTML that it generates. Additionally Parsedown will apply sanitisation to additional scripting vectors (such as scripting link destinations) that are introduced by the markdown syntax itself.&lt;/p&gt; &#xA;&lt;p&gt;To tell Parsedown that it is processing untrusted user-input, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$Parsedown-&amp;gt;setSafeMode(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If instead, you wish to allow HTML within untrusted user-input, but still want output to be free from XSS it is recommended that you make use of a HTML sanitiser that allows HTML tags to be whitelisted, like &lt;a href=&#34;http://htmlpurifier.org/&#34;&gt;HTML Purifier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In both cases you should strongly consider employing defence-in-depth measures, like &lt;a href=&#34;https://scotthelme.co.uk/content-security-policy-an-introduction/&#34;&gt;deploying a Content-Security-Policy&lt;/a&gt; (a browser security feature) so that your page is likely to be safe even if an attacker finds a vulnerability in one of the first lines of defence above.&lt;/p&gt; &#xA;&lt;h4&gt;Security of Parsedown Extensions&lt;/h4&gt; &#xA;&lt;p&gt;Safe mode does not necessarily yield safe results when using extensions to Parsedown. Extensions should be evaluated on their own to determine their specific safety against XSS.&lt;/p&gt; &#xA;&lt;h2&gt;Escaping HTML&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This method isn&#39;t safe from XSS!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you wish to escape HTML &lt;strong&gt;in trusted input&lt;/strong&gt;, you can use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$Parsedown-&amp;gt;setMarkupEscaped(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Beware that this still allows users to insert unsafe scripting vectors, such as links like &lt;code&gt;[xss](javascript:alert%281%29)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Questions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;How does Parsedown work?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It tries to read Markdown like a human. First, it looks at the lines. It’s interested in how the lines start. This helps it recognise blocks. It knows, for example, that if a line starts with a &lt;code&gt;-&lt;/code&gt; then perhaps it belongs to a list. Once it recognises the blocks, it continues to the content. As it reads, it watches out for special characters. This helps it recognise inline elements (or inlines).&lt;/p&gt; &#xA;&lt;p&gt;We call this approach &#34;line based&#34;. We believe that Parsedown is the first Markdown parser to use it. Since the release of Parsedown, other developers have used the same approach to develop other Markdown parsers in PHP and in other languages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Is it compliant with CommonMark?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It passes most of the CommonMark tests. Most of the tests that don&#39;t pass deal with cases that are quite uncommon. Still, as CommonMark matures, compliance should improve.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Who uses it?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://laravel.com/&#34;&gt;Laravel Framework&lt;/a&gt;, &lt;a href=&#34;http://bolt.cm/&#34;&gt;Bolt CMS&lt;/a&gt;, &lt;a href=&#34;http://getgrav.org/&#34;&gt;Grav CMS&lt;/a&gt;, &lt;a href=&#34;http://www.getherbie.org/&#34;&gt;Herbie CMS&lt;/a&gt;, &lt;a href=&#34;http://getkirby.com/&#34;&gt;Kirby CMS&lt;/a&gt;, &lt;a href=&#34;http://octobercms.com/&#34;&gt;October CMS&lt;/a&gt;, &lt;a href=&#34;http://picocms.org&#34;&gt;Pico CMS&lt;/a&gt;, &lt;a href=&#34;http://www.statamic.com/&#34;&gt;Statamic CMS&lt;/a&gt;, &lt;a href=&#34;http://www.phpdoc.org/&#34;&gt;phpDocumentor&lt;/a&gt;, &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;RaspberryPi.org&lt;/a&gt;, &lt;a href=&#34;https://github.com/symfony/demo&#34;&gt;Symfony Demo&lt;/a&gt; and &lt;a href=&#34;https://packagist.org/packages/erusev/parsedown/dependents&#34;&gt;more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How can I help?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use it, star it, share it and if you feel generous, &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=528P3NZQMP8N2&#34;&gt;donate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What else should I know?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I also make &lt;a href=&#34;https://nota.md/&#34;&gt;Nota&lt;/a&gt; — a writing app designed for Markdown files :)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jwjjgs/ylgy</title>
    <updated>2022-09-20T01:38:01Z</updated>
    <id>tag:github.com,2022-09-20:/jwjjgs/ylgy</id>
    <link href="https://github.com/jwjjgs/ylgy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;仅供学习交流,不得用于商业或者其他非法用途,否则一切后果请用户自负&lt;/h1&gt; &#xA;&lt;h1&gt;留个star叭&lt;/h1&gt; &#xA;&lt;h1&gt;主要看看后端思路就行了，懂了可以自己实现&lt;/h1&gt; &#xA;&lt;h1&gt;思路很简单&lt;/h1&gt; &#xA;&lt;p&gt;部署教程&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;编译环境：&#xA;node + composer&#xA;运行环境：&#xA;nginx + php8.1&#xA;&#xA;react编译：&#xA;cd react&#xA;tyarn &amp;amp;&amp;amp; tyarn build&#xA;&#xA;thinkphp编译：&#xA;composer install&#xA;&#xA;部署到服务器任意位置&#xA;项目为前后端分离&#xA;前端请求带有/api前缀&#xA;可以自行修改&#xA;需要一个用于请求信息的固定token 在thinkphp文件夹.env里面 可自行更改&#xA;&#xA;上传 react/dist 和 thinkphp 文件夹内容即可&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>hotmeteor/receiver</title>
    <updated>2022-09-20T01:38:01Z</updated>
    <id>tag:github.com,2022-09-20:/hotmeteor/receiver</id>
    <link href="https://github.com/hotmeteor/receiver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Receiver is a drop-in webhook handling library for Laravel.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Receiver&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Receiver is a drop-in webhook handling library for Laravel.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Webhooks are a powerful part of any API lifecycle. &lt;strong&gt;Receiver&lt;/strong&gt; aims to make handling incoming webhooks in your Laravel app a consistent and easy process.&lt;/p&gt; &#xA;&lt;p&gt;Out of the box, Receiver has built in support for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhooks&#34;&gt;GitHub Webhooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.hubspot.com/docs/api/webhooks&#34;&gt;Hubspot Webhooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://postmarkapp.com/developer/webhooks/webhooks-overview&#34;&gt;Postmark Webhooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.slack.com/apis/connections/events-api&#34;&gt;Slack Events API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stripe.com/docs/webhooks&#34;&gt;Stripe Webhooks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Of course, Receiver can receive webhooks from any source using &lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#extending-receiver&#34;&gt;custom providers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/hotmeteor/receiver/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/hotmeteor/receiver&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/vpre/hotmeteor/receiver.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/packagist/php-v/hotmeteor/receiver&#34; alt=&#34;PHP from Packagist&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#receiving-webhooks&#34;&gt;Receiving Webhooks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#the-basics&#34;&gt;The Basics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#receiving-from-multiple-apps&#34;&gt;Receiving from multiple apps&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#handling-webhooks&#34;&gt;Handling Webhooks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#the-basics-1&#34;&gt;The Basics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#queueing-handlers&#34;&gt;Queueing handlers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#extending-receiver&#34;&gt;Extending Receiver&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#adding-custom-providers&#34;&gt;Adding custom providers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#defining-attributes&#34;&gt;Defining attributes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#securing-webhooks&#34;&gt;Securing webhooks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#handshakes&#34;&gt;Handshakes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP ^8.0&lt;/li&gt; &#xA; &lt;li&gt;Laravel 8+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer require hotmeteor/receiver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stripe&lt;/strong&gt; support requires &lt;a href=&#34;https://github.com/stripe/stripe-php&#34;&gt;&lt;code&gt;stripe/stripe-php&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Receiving Webhooks&lt;/h2&gt; &#xA;&lt;h3&gt;The Basics&lt;/h3&gt; &#xA;&lt;p&gt;Webhooks require an exposed endpoint to POST to. Receiver aims to make this a one-time setup that supports any of your incoming webhooks.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a controller and route for the webhooks you expect to receive.&lt;/li&gt; &#xA; &lt;li&gt;Receive the webhook and handle it, as necessary: &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Http\Controllers\Webhooks;&#xA;&#xA;use App\Http\Controllers\Controller;&#xA;use Illuminate\Http\Request;&#xA;&#xA;class WebhooksController extends Controller&#xA;{&#xA;   public function store(Request $request)&#xA;   {&#xA;       Receiver::driver(&#39;slack&#39;)&#xA;           -&amp;gt;receive($request)&#xA;           -&amp;gt;ok();&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The methods being used are simple:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define the &lt;code&gt;driver&lt;/code&gt; that should process the webhook&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;receive&lt;/code&gt; the request for handling&lt;/li&gt; &#xA; &lt;li&gt;Respond back to the sender with a &lt;code&gt;200&lt;/code&gt; &lt;code&gt;ok&lt;/code&gt; response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Receiving from multiple apps&lt;/h3&gt; &#xA;&lt;p&gt;Maybe you have webhooks coming in from multiple services -- handle them all from one controller with a driver variable from your route.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Http\Controllers\Webhooks;&#xA;&#xA;use App\Http\Controllers\Controller;&#xA;use Illuminate\Http\Request;&#xA;&#xA;class WebhooksController extends Controller&#xA;{&#xA;   public function store(Request $request, string $driver)&#xA;   {&#xA;       Receiver::driver($driver)&#xA;           -&amp;gt;receive($request)&#xA;           -&amp;gt;ok();&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The provided &lt;code&gt;ReceivesWebhooks&lt;/code&gt; trait will take care of this for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: you&#39;ll still need to create the route to this action.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Http\Controllers\Webhooks;&#xA;&#xA;use App\Http\Controllers\Controller;&#xA;use Illuminate\Http\Request;&#xA;use Receiver\ReceivesWebhooks;&#xA;&#xA;class WebhooksController extends Controller&#xA;{&#xA;   use ReceivesWebhooks;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Handling Webhooks&lt;/h2&gt; &#xA;&lt;h3&gt;The Basics&lt;/h3&gt; &#xA;&lt;p&gt;Now that webhooks are being received they need to be handled. Receiver will look for designated &lt;code&gt;Handler&lt;/code&gt; classes for each event type that comes in in the &lt;code&gt;App\Http\Handlers\[Driver]&lt;/code&gt; namespace. Receiver &lt;em&gt;does not&lt;/em&gt; provide these handlers -- they are up to you to provide as needed. If Receiver doesn&#39;t find a matching handler it simplies ignores the event and responds with a 200 status code.&lt;/p&gt; &#xA;&lt;p&gt;For example, a Stripe webhook handler would be &lt;code&gt;App\Http\Handlers\Stripe\CustomerCreated&lt;/code&gt; for the incoming &lt;a href=&#34;https://stripe.com/docs/api/events/types#event_types-customer.created&#34;&gt;&lt;code&gt;customer.created&lt;/code&gt;&lt;/a&gt; event.&lt;/p&gt; &#xA;&lt;p&gt;Each handler is constructed with the &lt;code&gt;event&lt;/code&gt; (name of the webhook event) and &lt;code&gt;data&lt;/code&gt; properties.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Http\Handlers\Stripe;&#xA;&#xA;class CustomerCreated&#xA;{&#xA;    public function __construct(public string $event, public array $data)&#xA;    {&#xA;    }&#xA;&#xA;    public function handle()&#xA;    {&#xA;        // Your code here&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Queueing Handlers&lt;/h3&gt; &#xA;&lt;p&gt;Of course, since your app may be receiving a lot of webhooks it might be better practice to queue these handlers. That way your app can efficiently respond back to the service that the webhook was received and requests aren&#39;t being blocked as events are handled.&lt;/p&gt; &#xA;&lt;p&gt;Receiver attempts to &lt;code&gt;dispatch&lt;/code&gt; every handled event, so queueing handlers is simply a matter of setting them up like any &lt;a href=&#34;https://laravel.com/docs/9.x/queues&#34;&gt;Laravel queued job&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Http\Handlers\Stripe;&#xA;&#xA;use Illuminate\Bus\Queueable;&#xA;use Illuminate\Contracts\Queue\ShouldQueue;&#xA;use Illuminate\Foundation\Bus\Dispatchable;&#xA;use Illuminate\Queue\InteractsWithQueue;&#xA;use Illuminate\Queue\SerializesModels;&#xA;&#xA;class CustomerCreated implements ShouldQueue&#xA;{&#xA;    use Dispatchable;&#xA;    use InteractsWithQueue;&#xA;    use Queueable;&#xA;    use SerializesModels;&#xA;&#xA;    public function __construct(public string $event, public array $data)&#xA;    {&#xA;    }&#xA;&#xA;    public function handle()&#xA;    {&#xA;        // Your code here&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extending Receiver&lt;/h2&gt; &#xA;&lt;p&gt;As mentioned previously, Receiver can handle webhooks from any source. Even though there are a few providers distributed with the package, Receiver can easily be extended to work with other apps.&lt;/p&gt; &#xA;&lt;h3&gt;Adding Custom Providers&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to add a new provider is to use the included Artisan command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan receiver:make &amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will generate a new provider with the name you defined. This class will be created in the &lt;code&gt;App\Http\Receivers&lt;/code&gt; namespace.&lt;/p&gt; &#xA;&lt;p&gt;If your provider needs to be able to verify webhook signatures simply add the &lt;code&gt;--verified&lt;/code&gt; flag to the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan receiver:make &amp;lt;name&amp;gt; --verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve created your new provider you can simply extend Receiver in your &lt;code&gt;AppServiceProvider&lt;/code&gt; so that Receiver can use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Providers;&#xA;&#xA;use App\Http\Receivers\MailchimpProvider;&#xA;use App\Http\Receivers\MailgunProvider;&#xA;use Illuminate\Support\ServiceProvider;&#xA;&#xA;class AppServiceProvider extends ServiceProvider&#xA;{&#xA;    /**&#xA;     * Register any application services.&#xA;     *&#xA;     * @return void&#xA;     */&#xA;    public function register()&#xA;    {&#xA;        // &#xA;    }&#xA;&#xA;    /**&#xA;     * Bootstrap any application services.&#xA;     *&#xA;     * @return void&#xA;     */&#xA;    public function boot()&#xA;    {&#xA;        $receiver = app(&#39;receiver&#39;);&#xA;&#xA;        $receiver-&amp;gt;extend(&#39;mailchimp&#39;, function ($app) {&#xA;            return new MailchimpProvider(&#xA;                config(&#39;services.mailchimp.webhook_secret&#39;)&#xA;            );&#xA;        });&#xA;        &#xA;        $receiver-&amp;gt;extend(&#39;mailgun&#39;, function ($app) {&#xA;            return new MailgunProvider(&#xA;                config(&#39;services.mailgun.webhook_secret&#39;)&#xA;            );&#xA;        });&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defining Attributes&lt;/h3&gt; &#xA;&lt;p&gt;Receiver needs two pieces of information to receive and handle webhook events:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The event &lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The event &lt;code&gt;data&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since these are found in different attributes or headers depending on the webhook, Receiver makes it simple ways to define them in your provider.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace Receiver\Providers;&#xA;&#xA;use Illuminate\Http\Request;&#xA;use Illuminate\Support\Facades\Auth;&#xA;&#xA;class CustomProvider extends AbstractProvider&#xA;{&#xA;    /**&#xA;     * @param Request $request&#xA;     * @return string&#xA;     */&#xA;    public function getEvent(Request $request): string&#xA;    {&#xA;        return $request-&amp;gt;input(&#39;event.name&#39;);&#xA;    }&#xA;    &#xA;    /**&#xA;     * @param Request $request&#xA;     * @return array&#xA;     */&#xA;    public function getData(Request $request): array&#xA;    {&#xA;        return $request-&amp;gt;all();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;code&gt;getEvent()&lt;/code&gt;&lt;/em&gt; method is used to return the name of the webhook event, ie. &lt;code&gt;customer.created&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;code&gt;getData()&lt;/code&gt;&lt;/em&gt; method is used to return the payload of data that can be used within your handler. By default this is set to &lt;code&gt;$request-&amp;gt;all()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Securing Webhooks&lt;/h3&gt; &#xA;&lt;p&gt;Many webhooks have ways of verifying their authenticity as they are received, most commonly through signatures or basic authentication. No matter the strategy, Receiver allows you to write custom verification code as necessary. Simply implement the &lt;code&gt;verify&lt;/code&gt; method in your provider and return true or false if it passes.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;false&lt;/code&gt; return will result in a 401 response being returned to the webhook sender.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Http\Controllers\Webhooks;&#xA;&#xA;use App\Http\Controllers\Controller;&#xA;use Illuminate\Http\Request;&#xA;&#xA;class WebhooksController extends Controller&#xA;{&#xA;    public function verify(Request $request): bool&#xA;    {&#xA;        // return result of verification&#xA;    }&#xA;&#xA;    public function store(Request $request, string $driver)&#xA;    {&#xA;        Receiver::driver($driver)&#xA;            -&amp;gt;receive($request)&#xA;            -&amp;gt;ok();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handshakes&lt;/h3&gt; &#xA;&lt;p&gt;Some webhooks want to perform a &#34;handshake&#34; to check if your endpoint exists and returns a valid response when it&#39;s first set up. To facilitate this, implement the &lt;code&gt;handshake&lt;/code&gt; method in your provider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Http\Controllers\Webhooks;&#xA;&#xA;use App\Http\Controllers\Controller;&#xA;use Illuminate\Http\Request;&#xA;&#xA;class WebhooksController extends Controller&#xA;{&#xA;    public function handshake(Request $request): array&#xA;    {&#xA;        // return result of handshake&#xA;    }&#xA;&#xA;    public function store(Request $request, string $driver)&#xA;    {&#xA;        Receiver::driver($driver)&#xA;            -&amp;gt;receive($request)&#xA;            -&amp;gt;ok();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlike the &lt;code&gt;verify&lt;/code&gt; method, &lt;code&gt;handshake&lt;/code&gt; expects an array to be returned, since many times the webhook sender is expecting a specific &#34;challenge&#34; response. The return of the handshake method is sent back to the webhook sender.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hotmeteor&#34;&gt;Adam Campbell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://github.com/hotmeteor/receiver/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=hotmeteor/receiver&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contributors-img&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/hotmeteor/receiver/main/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/LoCDk7fecj2dwCtSB3/giphy.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>