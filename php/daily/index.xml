<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-26T01:31:22Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rajkumardusad/IP-Tracer</title>
    <updated>2022-07-26T01:31:22Z</updated>
    <id>tag:github.com,2022-07-26:/rajkumardusad/IP-Tracer</id>
    <link href="https://github.com/rajkumardusad/IP-Tracer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Track any ip address with IP-Tracer. IP-Tracer is developed for Linux and Termux. you can retrieve any ip address information using IP-Tracer.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is IP-Tracer ?&lt;/h2&gt; &#xA;&lt;p&gt;IP-Tracer is used to track an ip address. IP-Tracer is developed for Termux and Linux based systems. you can easily retrieve ip address information using IP-Tracer. IP-Tracer use ip-api to track ip address.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;47%&#34; src=&#34;https://raw.githubusercontent.com/rajkumardusad/IP-Tracer/master/src/Screenshot_2018-08-06-15-32-17-1.png&#34;&gt; &lt;img width=&#34;40%&#34; src=&#34;https://raw.githubusercontent.com/rajkumardusad/IP-Tracer/master/src/Screenshot_2020-05-17-20-52-59-1.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;How to install IP-Tracer ?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;apt update&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;apt install git -y&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/rajkumardusad/IP-Tracer.git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cd IP-Tracer&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;chmod +x install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sh install&lt;/code&gt; or &lt;code&gt;./install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use IP-Tracer&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trace -m&lt;/code&gt; to track your own ip address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trace -t target-ip&lt;/code&gt; to track other&#39;s ip address for example &lt;code&gt;ip-tracer -t 127.0.0.1&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trace&lt;/code&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ip-tracer -m&lt;/code&gt; to track your own ip address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ip-tracer -t target-ip&lt;/code&gt; to track other&#39;s ip address for example &lt;code&gt;ip-tracer -t 127.0.0.1&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ip-tracer&lt;/code&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>the-benchmarker/web-frameworks</title>
    <updated>2022-07-26T01:31:22Z</updated>
    <id>tag:github.com,2022-07-26:/the-benchmarker/web-frameworks</id>
    <link href="https://github.com/the-benchmarker/web-frameworks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Which is the fastest web framework?&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Which is the fastest ?&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Simple framework comparison&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/status-beta-green?style=for-the-badge&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://the-benchmarker.semaphoreci.com/badges/web-frameworks/branches/master.svg&#34;&gt; &lt;img src=&#34;https://the-benchmarker.semaphoreci.com/badges/web-frameworks/branches/master.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/thebenchmarker/shared_invite/zt-fcyy1ybq-A7T1SedewiVMEtJQGEyQYw&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/slack-chat_with_us-green&#34; alt=&#34;Chat with us&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/the-benchmarker/web-frameworks/raw/master/LICENSE&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/the-benchmarker/web-frameworks&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;There are many frameworks, each one comes with its own advantages and drawbacks. The purpose of this project is to identify them and attempt to measure their differences (performance is only one metric).&lt;/p&gt; &#xA;&lt;h4&gt;What is a framework ?&lt;/h4&gt; &#xA;&lt;p&gt;A framework is a set of components working together. The main intention behind a framework is to facilitate (app or service) creation. The way a framework helps any developer may vary from one to another.&lt;/p&gt; &#xA;&lt;p&gt;A majority of frameworks could be split in 2 parts :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;full-stack&lt;/strong&gt; meaning it provides all aspects (-stacks-) from data layer to sometimes deployment&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;micro&lt;/strong&gt; meaning it provides only the routing part, and let the developer choose any other component for the others&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ruby&lt;/code&gt;, all tools are made in &lt;code&gt;ruby&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wrk&lt;/code&gt;, results are collected using &lt;code&gt;wrk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;postgresql&lt;/code&gt;, results are stored in &lt;code&gt;postgresql&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker&lt;/code&gt;, each implementation is implemented in an isolated &lt;strong&gt;container&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jq&lt;/code&gt;, processing &lt;code&gt;docker&lt;/code&gt; metadata&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-machine&lt;/code&gt; if you are on &lt;code&gt;macos&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;bundle exec rake config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; On &lt;code&gt;macos&lt;/code&gt;, you need to use &lt;code&gt;docker-machine&lt;/code&gt; to allow &lt;code&gt;docker&lt;/code&gt; usage for each framework &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-machine rm default --force&#xA;docker-machine create default&#xA;eval $(docker-machine env default)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;export FRAMEWORK=php/lumen&#xA;cd ${FRAMEWORK} &#xA;make -f .Makefile build &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;make -f ${FRAMEWORK}/.Makefile collect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; You need to be on the project main directory &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;p&gt;Please take a look at &lt;a href=&#34;https://web-frameworks-benchmark.netlify.app/result&#34;&gt;https://web-frameworks-benchmark.netlify.app/result&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sebastianbergmann/exporter</title>
    <updated>2022-07-26T01:31:22Z</updated>
    <id>tag:github.com,2022-07-26:/sebastianbergmann/exporter</id>
    <link href="https://github.com/sebastianbergmann/exporter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provides the functionality to export PHP variables for visualization&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sebastian/exporter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sebastianbergmann/exporter/actions&#34;&gt;&lt;img src=&#34;https://github.com/sebastianbergmann/exporter/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://shepherd.dev/github/sebastianbergmann/exporter&#34;&gt;&lt;img src=&#34;https://shepherd.dev/github/sebastianbergmann/exporter/coverage.svg?sanitize=true&#34; alt=&#34;Type Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This component provides the functionality to export PHP variables for visualization.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can add this library as a local, per-project dependency to your project using &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require sebastian/exporter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you only need this library during development, for instance to run your project&#39;s test suite, then you should add it as a development-time dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require --dev sebastian/exporter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Exporting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;use SebastianBergmann\Exporter\Exporter;&#xA;&#xA;$exporter = new Exporter;&#xA;&#xA;/*&#xA;Exception Object &amp;amp;0000000078de0f0d000000002003a261 (&#xA;    &#39;message&#39; =&amp;gt; &#39;&#39;&#xA;    &#39;string&#39; =&amp;gt; &#39;&#39;&#xA;    &#39;code&#39; =&amp;gt; 0&#xA;    &#39;file&#39; =&amp;gt; &#39;/home/sebastianbergmann/test.php&#39;&#xA;    &#39;line&#39; =&amp;gt; 34&#xA;    &#39;previous&#39; =&amp;gt; null&#xA;)&#xA;*/&#xA;&#xA;print $exporter-&amp;gt;export(new Exception);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Types&lt;/h2&gt; &#xA;&lt;p&gt;Exporting simple types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;use SebastianBergmann\Exporter\Exporter;&#xA;&#xA;$exporter = new Exporter;&#xA;&#xA;// 46&#xA;print $exporter-&amp;gt;export(46);&#xA;&#xA;// 4.0&#xA;print $exporter-&amp;gt;export(4.0);&#xA;&#xA;// &#39;hello, world!&#39;&#xA;print $exporter-&amp;gt;export(&#39;hello, world!&#39;);&#xA;&#xA;// false&#xA;print $exporter-&amp;gt;export(false);&#xA;&#xA;// NAN&#xA;print $exporter-&amp;gt;export(acos(8));&#xA;&#xA;// -INF&#xA;print $exporter-&amp;gt;export(log(0));&#xA;&#xA;// null&#xA;print $exporter-&amp;gt;export(null);&#xA;&#xA;// resource(13) of type (stream)&#xA;print $exporter-&amp;gt;export(fopen(&#39;php://stderr&#39;, &#39;w&#39;));&#xA;&#xA;// Binary String: 0x000102030405&#xA;print $exporter-&amp;gt;export(chr(0) . chr(1) . chr(2) . chr(3) . chr(4) . chr(5));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exporting complex types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;use SebastianBergmann\Exporter\Exporter;&#xA;&#xA;$exporter = new Exporter;&#xA;&#xA;/*&#xA;Array &amp;amp;0 (&#xA;    0 =&amp;gt; Array &amp;amp;1 (&#xA;        0 =&amp;gt; 1&#xA;        1 =&amp;gt; 2&#xA;        2 =&amp;gt; 3&#xA;    )&#xA;    1 =&amp;gt; Array &amp;amp;2 (&#xA;        0 =&amp;gt; &#39;&#39;&#xA;        1 =&amp;gt; 0&#xA;        2 =&amp;gt; false&#xA;    )&#xA;)&#xA;*/&#xA;&#xA;print $exporter-&amp;gt;export(array(array(1,2,3), array(&#34;&#34;,0,FALSE)));&#xA;&#xA;/*&#xA;Array &amp;amp;0 (&#xA;    &#39;self&#39; =&amp;gt; Array &amp;amp;1 (&#xA;        &#39;self&#39; =&amp;gt; Array &amp;amp;1&#xA;    )&#xA;)&#xA;*/&#xA;&#xA;$array = array();&#xA;$array[&#39;self&#39;] = &amp;amp;$array;&#xA;print $exporter-&amp;gt;export($array);&#xA;&#xA;/*&#xA;stdClass Object &amp;amp;0000000003a66dcc0000000025e723e2 (&#xA;    &#39;self&#39; =&amp;gt; stdClass Object &amp;amp;0000000003a66dcc0000000025e723e2&#xA;)&#xA;*/&#xA;&#xA;$obj = new stdClass();&#xA;$obj-&amp;gt;self = $obj;&#xA;print $exporter-&amp;gt;export($obj);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compact exports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;use SebastianBergmann\Exporter\Exporter;&#xA;&#xA;$exporter = new Exporter;&#xA;&#xA;// Array ()&#xA;print $exporter-&amp;gt;shortenedExport(array());&#xA;&#xA;// Array (...)&#xA;print $exporter-&amp;gt;shortenedExport(array(1,2,3,4,5));&#xA;&#xA;// stdClass Object ()&#xA;print $exporter-&amp;gt;shortenedExport(new stdClass);&#xA;&#xA;// Exception Object (...)&#xA;print $exporter-&amp;gt;shortenedExport(new Exception);&#xA;&#xA;// this\nis\na\nsuper\nlong\nstring\nt...\nspace&#xA;print $exporter-&amp;gt;shortenedExport(&#xA;&amp;lt;&amp;lt;&amp;lt;LONG_STRING&#xA;this&#xA;is&#xA;a&#xA;super&#xA;long&#xA;string&#xA;that&#xA;wraps&#xA;a&#xA;lot&#xA;and&#xA;eats&#xA;up&#xA;a&#xA;lot&#xA;of&#xA;space&#xA;LONG_STRING&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>