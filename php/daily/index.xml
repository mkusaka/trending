<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-03T01:37:47Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mongodb/laravel-mongodb</title>
    <updated>2023-09-03T01:37:47Z</updated>
    <id>tag:github.com,2023-09-03:/mongodb/laravel-mongodb</id>
    <link href="https://github.com/mongodb/laravel-mongodb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A MongoDB based Eloquent model and Query builder for Laravel (Moloquent)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Laravel MongoDB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/mongodb/laravel-mongodb&#34;&gt;&lt;img src=&#34;http://img.shields.io/github/release/mongodb/laravel-mongodb.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/mongodb/laravel-mongodb&#34;&gt;&lt;img src=&#34;http://img.shields.io/packagist/dm/mongodb/laravel-mongodb.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mongodb/laravel-mongodb/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/mongodb/laravel-mongodb/CI&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/mongodb/laravel-mongodb/branch/master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/mongodb/laravel-mongodb/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package adds functionalities to the Eloquent model and Query builder for MongoDB, using the original Laravel API. &lt;em&gt;This library extends the original Laravel classes, so it uses exactly the same methods.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package was renamed to &lt;code&gt;mongodb/laravel-mongodb&lt;/code&gt; because of a transfer of ownership to MongoDB, Inc. It is compatible with Laravel 10.x. For older versions of Laravel, please refer to the &lt;a href=&#34;https://github.com/mongodb/laravel-mongodb/tree/3.9#laravel-version-compatibility&#34;&gt;old versions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#laravel-mongodb&#34;&gt;Laravel MongoDB&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#database-testing&#34;&gt;Database Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#eloquent&#34;&gt;Eloquent&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#extending-the-base-model&#34;&gt;Extending the base model&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#extending-the-authenticable-base-model&#34;&gt;Extending the Authenticable base model&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#soft-deletes&#34;&gt;Soft Deletes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#guarding-attributes&#34;&gt;Guarding attributes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#dates&#34;&gt;Dates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#basic-usage&#34;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#mongodb-specific-operators&#34;&gt;MongoDB-specific operators&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#mongodb-specific-geo-operations&#34;&gt;MongoDB-specific Geo operations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#inserts-updates-and-deletes&#34;&gt;Inserts, updates and deletes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#mongodb-specific-operations&#34;&gt;MongoDB specific operations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#relationships&#34;&gt;Relationships&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#basic-usage-1&#34;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#belongstomany-and-pivots&#34;&gt;belongsToMany and pivots&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#embedsmany-relationship&#34;&gt;EmbedsMany Relationship&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#embedsone-relationship&#34;&gt;EmbedsOne Relationship&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#query-builder&#34;&gt;Query Builder&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#basic-usage-2&#34;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#available-operations&#34;&gt;Available operations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#transactions&#34;&gt;Transactions&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#basic-usage-3&#34;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#schema&#34;&gt;Schema&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#basic-usage-4&#34;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#geospatial-indexes&#34;&gt;Geospatial indexes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#extending&#34;&gt;Extending&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#cross-database-relationships&#34;&gt;Cross-Database Relationships&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#authentication&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#queues&#34;&gt;Queues&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#upgrading&#34;&gt;Upgrading&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#upgrading-from-version-2-to-3&#34;&gt;Upgrading from version 2 to 3&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#security-contact-information&#34;&gt;Security contact information&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have the MongoDB PHP driver installed. You can find installation instructions at &lt;a href=&#34;https://php.net/manual/en/mongodb.installation.php&#34;&gt;https://php.net/manual/en/mongodb.installation.php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install the package via Composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require mongodb/laravel-mongodb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case your Laravel version does NOT autoload the packages, add the service provider to &lt;code&gt;config/app.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;MongoDB\Laravel\MongodbServiceProvider::class,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;To run the test for this package, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Database Testing&lt;/h2&gt; &#xA;&lt;p&gt;To reset the database after each test, add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Foundation\Testing\DatabaseMigrations;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also inside each test classes, add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use DatabaseMigrations;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that these traits are not yet supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;use Database Transactions;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use RefreshDatabase;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;To configure a new MongoDB connection, add a new connection entry to &lt;code&gt;config/database.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;mongodb&#39; =&amp;gt; [&#xA;    &#39;driver&#39; =&amp;gt; &#39;mongodb&#39;,&#xA;    &#39;dsn&#39; =&amp;gt; env(&#39;DB_DSN&#39;),&#xA;    &#39;database&#39; =&amp;gt; env(&#39;DB_DATABASE&#39;, &#39;homestead&#39;),&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;dsn&lt;/code&gt; key contains the connection string used to connect to your MongoDB deployment. The format and available options are documented in the &lt;a href=&#34;https://docs.mongodb.com/manual/reference/connection-string/&#34;&gt;MongoDB documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead of using a connection string, you can also use the &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; configuration options to have the connection string created for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;mongodb&#39; =&amp;gt; [&#xA;    &#39;driver&#39; =&amp;gt; &#39;mongodb&#39;,&#xA;    &#39;host&#39; =&amp;gt; env(&#39;DB_HOST&#39;, &#39;127.0.0.1&#39;),&#xA;    &#39;port&#39; =&amp;gt; env(&#39;DB_PORT&#39;, 27017),&#xA;    &#39;database&#39; =&amp;gt; env(&#39;DB_DATABASE&#39;, &#39;homestead&#39;),&#xA;    &#39;username&#39; =&amp;gt; env(&#39;DB_USERNAME&#39;, &#39;homestead&#39;),&#xA;    &#39;password&#39; =&amp;gt; env(&#39;DB_PASSWORD&#39;, &#39;secret&#39;),&#xA;    &#39;options&#39; =&amp;gt; [&#xA;        &#39;appname&#39; =&amp;gt; &#39;homestead&#39;,&#xA;    ],&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; key in the connection configuration corresponds to the &lt;a href=&#34;https://www.php.net/manual/en/mongodb-driver-manager.construct.php#mongodb-driver-manager.construct-urioptions&#34;&gt;&lt;code&gt;uriOptions&lt;/code&gt; parameter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Eloquent&lt;/h2&gt; &#xA;&lt;h3&gt;Extending the base model&lt;/h3&gt; &#xA;&lt;p&gt;This package includes a MongoDB enabled Eloquent class that you can use to define models for corresponding collections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class Book extends Model&#xA;{&#xA;    //&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like a normal model, the MongoDB model class will know which collection to use based on the model name. For &lt;code&gt;Book&lt;/code&gt;, the collection &lt;code&gt;books&lt;/code&gt; will be used.&lt;/p&gt; &#xA;&lt;p&gt;To change the collection, pass the &lt;code&gt;$collection&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class Book extends Model&#xA;{&#xA;    protected $collection = &#39;my_books_collection&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; MongoDB documents are automatically stored with a unique ID that is stored in the &lt;code&gt;_id&lt;/code&gt; property. If you wish to use your own ID, substitute the &lt;code&gt;$primaryKey&lt;/code&gt; property and set it to your own primary key attribute name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class Book extends Model&#xA;{&#xA;    protected $primaryKey = &#39;id&#39;;&#xA;}&#xA;&#xA;// MongoDB will also create _id, but the &#39;id&#39; property will be used for primary key actions like find().&#xA;Book::create([&#39;id&#39; =&amp;gt; 1, &#39;title&#39; =&amp;gt; &#39;The Fault in Our Stars&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Likewise, you may define a &lt;code&gt;connection&lt;/code&gt; property to override the name of the database connection that should be used when utilizing the model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class Book extends Model&#xA;{&#xA;    protected $connection = &#39;mongodb&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extending the Authenticatable base model&lt;/h3&gt; &#xA;&lt;p&gt;This package includes a MongoDB Authenticatable Eloquent class &lt;code&gt;MongoDB\Laravel\Auth\User&lt;/code&gt; that you can use to replace the default Authenticatable class &lt;code&gt;Illuminate\Foundation\Auth\User&lt;/code&gt; for your &lt;code&gt;User&lt;/code&gt; model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Auth\User as Authenticatable;&#xA;&#xA;class User extends Authenticatable&#xA;{&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Soft Deletes&lt;/h3&gt; &#xA;&lt;p&gt;When soft deleting a model, it is not actually removed from your database. Instead, a deleted_at timestamp is set on the record.&lt;/p&gt; &#xA;&lt;p&gt;To enable soft deletes for a model, apply the &lt;code&gt;MongoDB\Laravel\Eloquent\SoftDeletes&lt;/code&gt; Trait to the model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\SoftDeletes;&#xA;&#xA;class User extends Model&#xA;{&#xA;    use SoftDeletes;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information check &lt;a href=&#34;http://laravel.com/docs/eloquent#soft-deleting&#34;&gt;Laravel Docs about Soft Deleting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Guarding attributes&lt;/h3&gt; &#xA;&lt;p&gt;When choosing between guarding attributes or marking some as fillable, Taylor Otwell prefers the fillable route. This is in light of &lt;a href=&#34;https://blog.laravel.com/security-release-laravel-61835-7240&#34;&gt;recent security issues described here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind guarding still works, but you may experience unexpected behavior.&lt;/p&gt; &#xA;&lt;h3&gt;Dates&lt;/h3&gt; &#xA;&lt;p&gt;Eloquent allows you to work with Carbon or DateTime objects instead of MongoDate objects. Internally, these dates will be converted to MongoDate objects when saved to the database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class User extends Model&#xA;{&#xA;    protected $casts = [&#39;birthday&#39; =&amp;gt; &#39;datetime&#39;];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows you to execute queries like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = User::where(&#xA;    &#39;birthday&#39;, &#39;&amp;gt;&#39;,&#xA;    new DateTime(&#39;-18 years&#39;)&#xA;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Retrieving all models&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = User::all();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Retrieving a record by primary key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::find(&#39;517c43667db388101e00000f&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Where&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$posts =&#xA;    Post::where(&#39;author.name&#39;, &#39;John&#39;)&#xA;        -&amp;gt;take(10)&#xA;        -&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OR Statements&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$posts =&#xA;    Post::where(&#39;votes&#39;, &#39;&amp;gt;&#39;, 0)&#xA;        -&amp;gt;orWhere(&#39;is_approved&#39;, true)&#xA;        -&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;AND statements&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users =&#xA;    User::where(&#39;age&#39;, &#39;&amp;gt;&#39;, 18)&#xA;        -&amp;gt;where(&#39;name&#39;, &#39;!=&#39;, &#39;John&#39;)&#xA;        -&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOT statements&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = User::whereNot(&#39;age&#39;, &#39;&amp;gt;&#39;, 18)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;whereIn&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = User::whereIn(&#39;age&#39;, [16, 18, 20])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;whereNotIn&lt;/code&gt; objects will be returned if the field is non-existent. Combine with &lt;code&gt;whereNotNull(&#39;age&#39;)&lt;/code&gt; to leave out those documents.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;whereBetween&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$posts = Post::whereBetween(&#39;votes&#39;, [1, 100])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;whereNull&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = User::whereNull(&#39;age&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;whereDate&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = User::whereDate(&#39;birthday&#39;, &#39;2021-5-12&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The usage is the same as &lt;code&gt;whereMonth&lt;/code&gt; / &lt;code&gt;whereDay&lt;/code&gt; / &lt;code&gt;whereYear&lt;/code&gt; / &lt;code&gt;whereTime&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advanced wheres&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users =&#xA;    User::where(&#39;name&#39;, &#39;John&#39;)&#xA;        -&amp;gt;orWhere(function ($query) {&#xA;            return $query&#xA;                -&amp;gt;where(&#39;votes&#39;, &#39;&amp;gt;&#39;, 100)&#xA;                -&amp;gt;where(&#39;title&#39;, &#39;&amp;lt;&amp;gt;&#39;, &#39;Admin&#39;);&#xA;        })-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;orderBy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = User::orderBy(&#39;age&#39;, &#39;desc&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Offset &amp;amp; Limit (skip &amp;amp; take)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users =&#xA;    User::skip(10)&#xA;        -&amp;gt;take(5)&#xA;        -&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;groupBy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selected columns that are not grouped will be aggregated with the &lt;code&gt;$last&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users =&#xA;    Users::groupBy(&#39;title&#39;)&#xA;        -&amp;gt;get([&#39;title&#39;, &#39;name&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Distinct&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Distinct requires a field for which to return the distinct values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = User::distinct()-&amp;gt;get([&#39;name&#39;]);&#xA;&#xA;// Equivalent to:&#xA;$users = User::distinct(&#39;name&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Distinct can be combined with &lt;strong&gt;where&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users =&#xA;    User::where(&#39;active&#39;, true)&#xA;        -&amp;gt;distinct(&#39;name&#39;)&#xA;        -&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Like&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$spamComments = Comment::where(&#39;body&#39;, &#39;like&#39;, &#39;%spam%&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Aggregation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Aggregations are only available for MongoDB versions greater than 2.2.x&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$total = Product::count();&#xA;$price = Product::max(&#39;price&#39;);&#xA;$price = Product::min(&#39;price&#39;);&#xA;$price = Product::avg(&#39;price&#39;);&#xA;$total = Product::sum(&#39;price&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Aggregations can be combined with &lt;strong&gt;where&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sold = Orders::where(&#39;sold&#39;, true)-&amp;gt;sum(&#39;price&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Aggregations can be also used on sub-documents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$total = Order::max(&#39;suborder.price&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This aggregation only works with single sub-documents (like &lt;code&gt;EmbedsOne&lt;/code&gt;) not subdocument arrays (like &lt;code&gt;EmbedsMany&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Incrementing/Decrementing the value of a column&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Perform increments or decrements (default 1) on specified attributes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Cat::where(&#39;name&#39;, &#39;Kitty&#39;)-&amp;gt;increment(&#39;age&#39;);&#xA;&#xA;Car::where(&#39;name&#39;, &#39;Toyota&#39;)-&amp;gt;decrement(&#39;weight&#39;, 50);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The number of updated objects is returned:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$count = User::increment(&#39;age&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also specify additional columns to update:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Cat::where(&#39;age&#39;, 3)&#xA;    -&amp;gt;increment(&#39;age&#39;, 1, [&#39;group&#39; =&amp;gt; &#39;Kitty Club&#39;]);&#xA;&#xA;Car::where(&#39;weight&#39;, 300)&#xA;    -&amp;gt;decrement(&#39;weight&#39;, 100, [&#39;latest_change&#39; =&amp;gt; &#39;carbon fiber&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MongoDB-specific operators&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the Laravel Eloquent operators, all available MongoDB query operators can be used with &lt;code&gt;where&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::where($fieldName, $operator, $value)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It generates the following MongoDB filter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;{ $fieldName: { $operator: $value } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Exists&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Matches documents that have the specified field.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::where(&#39;age&#39;, &#39;exists&#39;, true)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;All&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Matches arrays that contain all elements specified in the query.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::where(&#39;roles&#39;, &#39;all&#39;, [&#39;moderator&#39;, &#39;author&#39;])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selects documents if the array field is a specified size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::where(&#39;tags&#39;, &#39;size&#39;, 3)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Regex&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selects documents where values match a specified regular expression.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\BSON\Regex;&#xA;&#xA;User::where(&#39;name&#39;, &#39;regex&#39;, new Regex(&#39;.*doe&#39;, &#39;i&#39;))-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; you can also use the Laravel regexp operations. These are a bit more flexible and will automatically convert your regular expression string to a &lt;code&gt;MongoDB\BSON\Regex&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::where(&#39;name&#39;, &#39;regexp&#39;, &#39;/.*doe/i&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The inverse of regexp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::where(&#39;name&#39;, &#39;not regexp&#39;, &#39;/.*doe/i&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selects documents if a field is of the specified type. For more information check: &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query/type/#op._S_type&#34;&gt;http://docs.mongodb.org/manual/reference/operator/query/type/#op._S_type&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::where(&#39;age&#39;, &#39;type&#39;, 2)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mod&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Performs a modulo operation on the value of a field and selects documents with a specified result.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::where(&#39;age&#39;, &#39;mod&#39;, [10, 0])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MongoDB-specific Geo operations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Near&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$bars = Bar::where(&#39;location&#39;, &#39;near&#39;, [&#xA;    &#39;$geometry&#39; =&amp;gt; [&#xA;        &#39;type&#39; =&amp;gt; &#39;Point&#39;,&#xA;        &#39;coordinates&#39; =&amp;gt; [&#xA;            -0.1367563, // longitude&#xA;            51.5100913, // latitude&#xA;        ],&#xA;    ],&#xA;    &#39;$maxDistance&#39; =&amp;gt; 50,&#xA;])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;GeoWithin&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$bars = Bar::where(&#39;location&#39;, &#39;geoWithin&#39;, [&#xA;    &#39;$geometry&#39; =&amp;gt; [&#xA;        &#39;type&#39; =&amp;gt; &#39;Polygon&#39;,&#xA;        &#39;coordinates&#39; =&amp;gt; [&#xA;            [&#xA;                [-0.1450383, 51.5069158],&#xA;                [-0.1367563, 51.5100913],&#xA;                [-0.1270247, 51.5013233],&#xA;                [-0.1450383, 51.5069158],&#xA;            ],&#xA;        ],&#xA;    ],&#xA;])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;GeoIntersects&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$bars = Bar::where(&#39;location&#39;, &#39;geoIntersects&#39;, [&#xA;    &#39;$geometry&#39; =&amp;gt; [&#xA;        &#39;type&#39; =&amp;gt; &#39;LineString&#39;,&#xA;        &#39;coordinates&#39; =&amp;gt; [&#xA;            [-0.144044, 51.515215],&#xA;            [-0.129545, 51.507864],&#xA;        ],&#xA;    ],&#xA;])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;GeoNear&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You are able to make a &lt;code&gt;geoNear&lt;/code&gt; query on mongoDB. You don&#39;t need to specify the automatic fields on the model. The returned instance is a collection. So you&#39;re able to make the &lt;a href=&#34;https://laravel.com/docs/9.x/collections&#34;&gt;Collection&lt;/a&gt; operations. Just make sure that your model has a &lt;code&gt;location&lt;/code&gt; field, and a &lt;a href=&#34;https://www.mongodb.com/docs/manual/core/2dsphere&#34;&gt;2ndSphereIndex&lt;/a&gt;. The data in the &lt;code&gt;location&lt;/code&gt; field must be saved as &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/geojson/&#34;&gt;GeoJSON&lt;/a&gt;. The &lt;code&gt;location&lt;/code&gt; points must be saved as &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/glossary/#std-term-WGS84&#34;&gt;WGS84&lt;/a&gt; reference system for geometry calculation. That means, basically, you need to save &lt;code&gt;longitude and latitude&lt;/code&gt;, in that order specifically, and to find near with calculated distance, you &lt;code&gt;need to do the same way&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Bar::find(&#34;63a0cd574d08564f330ceae2&#34;)-&amp;gt;update(&#xA;    [&#xA;        &#39;location&#39; =&amp;gt; [&#xA;            &#39;type&#39; =&amp;gt; &#39;Point&#39;,&#xA;            &#39;coordinates&#39; =&amp;gt; [&#xA;                -0.1367563,&#xA;                51.5100913&#xA;            ]&#xA;        ]&#xA;    ]&#xA;);&#xA;$bars = Bar::raw(function ($collection) {&#xA;    return $collection-&amp;gt;aggregate([&#xA;        [&#xA;            &#39;$geoNear&#39; =&amp;gt; [&#xA;                &#34;near&#34; =&amp;gt; [ &#34;type&#34; =&amp;gt;  &#34;Point&#34;, &#34;coordinates&#34; =&amp;gt;  [-0.132239, 51.511874] ],&#xA;                &#34;distanceField&#34; =&amp;gt;  &#34;dist.calculated&#34;,&#xA;                &#34;minDistance&#34; =&amp;gt;  0,&#xA;                &#34;maxDistance&#34; =&amp;gt;  6000,&#xA;                &#34;includeLocs&#34; =&amp;gt;  &#34;dist.location&#34;,&#xA;                &#34;spherical&#34; =&amp;gt;  true,&#xA;            ]&#xA;        ]&#xA;    ]);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inserts, updates and deletes&lt;/h3&gt; &#xA;&lt;p&gt;Inserting, updating and deleting records works just like the original Eloquent. Please check &lt;a href=&#34;https://laravel.com/docs/6.x/eloquent&#34;&gt;Laravel Docs&#39; Eloquent section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here, only the MongoDB-specific operations are specified.&lt;/p&gt; &#xA;&lt;h3&gt;MongoDB specific operations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Raw Expressions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;These expressions will be injected directly into the query.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::whereRaw([&#xA;    &#39;age&#39; =&amp;gt; [&#39;$gt&#39; =&amp;gt; 30, &#39;$lt&#39; =&amp;gt; 40],&#xA;])-&amp;gt;get();&#xA;&#xA;User::whereRaw([&#xA;    &#39;$where&#39; =&amp;gt; &#39;/.*123.*/.test(this.field)&#39;,&#xA;])-&amp;gt;get();&#xA;&#xA;User::whereRaw([&#xA;    &#39;$where&#39; =&amp;gt; &#39;/.*123.*/.test(this[&#34;hyphenated-field&#34;])&#39;,&#xA;])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also perform raw expressions on the internal MongoCollection object. If this is executed on the model class, it will return a collection of models.&lt;/p&gt; &#xA;&lt;p&gt;If this is executed on the query builder, it will return the original response.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cursor timeout&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To prevent &lt;code&gt;MongoCursorTimeout&lt;/code&gt; exceptions, you can manually set a timeout value that will be applied to the cursor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;DB::collection(&#39;users&#39;)-&amp;gt;timeout(-1)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Upsert&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Update or insert a document. Additional options for the update method are passed directly to the native update method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Query Builder&#xA;DB::collection(&#39;users&#39;)&#xA;    -&amp;gt;where(&#39;name&#39;, &#39;John&#39;)&#xA;    -&amp;gt;update($data, [&#39;upsert&#39; =&amp;gt; true]);&#xA;&#xA;// Eloquent&#xA;$user-&amp;gt;update($data, [&#39;upsert&#39; =&amp;gt; true]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Projections&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can apply projections to your queries using the &lt;code&gt;project&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;DB::collection(&#39;items&#39;)&#xA;    -&amp;gt;project([&#39;tags&#39; =&amp;gt; [&#39;$slice&#39; =&amp;gt; 1]])&#xA;    -&amp;gt;get();&#xA;&#xA;DB::collection(&#39;items&#39;)&#xA;    -&amp;gt;project([&#39;tags&#39; =&amp;gt; [&#39;$slice&#39; =&amp;gt; [3, 7]]])&#xA;    -&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Projections with Pagination&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$limit = 25;&#xA;$projections = [&#39;id&#39;, &#39;name&#39;];&#xA;&#xA;DB::collection(&#39;items&#39;)&#xA;    -&amp;gt;paginate($limit, $projections);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Push&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add items to an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;DB::collection(&#39;users&#39;)&#xA;    -&amp;gt;where(&#39;name&#39;, &#39;John&#39;)&#xA;    -&amp;gt;push(&#39;items&#39;, &#39;boots&#39;);&#xA;&#xA;$user-&amp;gt;push(&#39;items&#39;, &#39;boots&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;DB::collection(&#39;users&#39;)&#xA;    -&amp;gt;where(&#39;name&#39;, &#39;John&#39;)&#xA;    -&amp;gt;push(&#39;messages&#39;, [&#xA;        &#39;from&#39; =&amp;gt; &#39;Jane Doe&#39;,&#xA;        &#39;message&#39; =&amp;gt; &#39;Hi John&#39;,&#xA;    ]);&#xA;&#xA;$user-&amp;gt;push(&#39;messages&#39;, [&#xA;    &#39;from&#39; =&amp;gt; &#39;Jane Doe&#39;,&#xA;    &#39;message&#39; =&amp;gt; &#39;Hi John&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you &lt;strong&gt;DON&#39;T&lt;/strong&gt; want duplicate items, set the third parameter to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;DB::collection(&#39;users&#39;)&#xA;    -&amp;gt;where(&#39;name&#39;, &#39;John&#39;)&#xA;    -&amp;gt;push(&#39;items&#39;, &#39;boots&#39;, true);&#xA;&#xA;$user-&amp;gt;push(&#39;items&#39;, &#39;boots&#39;, true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pull&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Remove an item from an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;DB::collection(&#39;users&#39;)&#xA;    -&amp;gt;where(&#39;name&#39;, &#39;John&#39;)&#xA;    -&amp;gt;pull(&#39;items&#39;, &#39;boots&#39;);&#xA;&#xA;$user-&amp;gt;pull(&#39;items&#39;, &#39;boots&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;DB::collection(&#39;users&#39;)&#xA;    -&amp;gt;where(&#39;name&#39;, &#39;John&#39;)&#xA;    -&amp;gt;pull(&#39;messages&#39;, [&#xA;        &#39;from&#39; =&amp;gt; &#39;Jane Doe&#39;,&#xA;        &#39;message&#39; =&amp;gt; &#39;Hi John&#39;,&#xA;    ]);&#xA;&#xA;$user-&amp;gt;pull(&#39;messages&#39;, [&#xA;    &#39;from&#39; =&amp;gt; &#39;Jane Doe&#39;,&#xA;    &#39;message&#39; =&amp;gt; &#39;Hi John&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unset&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Remove one or more fields from a document.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;DB::collection(&#39;users&#39;)&#xA;    -&amp;gt;where(&#39;name&#39;, &#39;John&#39;)&#xA;    -&amp;gt;unset(&#39;note&#39;);&#xA;&#xA;$user-&amp;gt;unset(&#39;note&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Relationships&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;p&gt;The only available relationships are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hasOne&lt;/li&gt; &#xA; &lt;li&gt;hasMany&lt;/li&gt; &#xA; &lt;li&gt;belongsTo&lt;/li&gt; &#xA; &lt;li&gt;belongsToMany&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The MongoDB-specific relationships are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;embedsOne&lt;/li&gt; &#xA; &lt;li&gt;embedsMany&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is a small example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class User extends Model&#xA;{&#xA;    public function items()&#xA;    {&#xA;        return $this-&amp;gt;hasMany(Item::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The inverse relation of &lt;code&gt;hasMany&lt;/code&gt; is &lt;code&gt;belongsTo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class Item extends Model&#xA;{&#xA;    public function user()&#xA;    {&#xA;        return $this-&amp;gt;belongsTo(User::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;belongsToMany and pivots&lt;/h3&gt; &#xA;&lt;p&gt;The belongsToMany relation will not use a pivot &#34;table&#34; but will push id&#39;s to a &lt;strong&gt;related_ids&lt;/strong&gt; attribute instead. This makes the second parameter for the belongsToMany method useless.&lt;/p&gt; &#xA;&lt;p&gt;If you want to define custom keys for your relation, set it to &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class User extends Model&#xA;{&#xA;    public function groups()&#xA;    {&#xA;        return $this-&amp;gt;belongsToMany(&#xA;            Group::class, null, &#39;user_ids&#39;, &#39;group_ids&#39;&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;EmbedsMany Relationship&lt;/h3&gt; &#xA;&lt;p&gt;If you want to embed models, rather than referencing them, you can use the &lt;code&gt;embedsMany&lt;/code&gt; relation. This relation is similar to the &lt;code&gt;hasMany&lt;/code&gt; relation but embeds the models inside the parent object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;REMEMBER&lt;/strong&gt;: These relations return Eloquent collections, they don&#39;t return query builder objects!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class User extends Model&#xA;{&#xA;    public function books()&#xA;    {&#xA;        return $this-&amp;gt;embedsMany(Book::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access the embedded models through the dynamic property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::first();&#xA;&#xA;foreach ($user-&amp;gt;books as $book) {&#xA;    //&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The inverse relation is auto&lt;em&gt;magically&lt;/em&gt; available. You don&#39;t need to define this reverse relation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$book = Book::first();&#xA;&#xA;$user = $book-&amp;gt;user;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inserting and updating embedded models works similar to the &lt;code&gt;hasMany&lt;/code&gt; relation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$book = $user-&amp;gt;books()-&amp;gt;save(&#xA;    new Book([&#39;title&#39; =&amp;gt; &#39;A Game of Thrones&#39;])&#xA;);&#xA;&#xA;// or&#xA;$book =&#xA;    $user-&amp;gt;books()&#xA;         -&amp;gt;create([&#39;title&#39; =&amp;gt; &#39;A Game of Thrones&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can update embedded models using their &lt;code&gt;save&lt;/code&gt; method (available since release 2.0.0):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$book = $user-&amp;gt;books()-&amp;gt;first();&#xA;&#xA;$book-&amp;gt;title = &#39;A Game of Thrones&#39;;&#xA;$book-&amp;gt;save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can remove an embedded model by using the &lt;code&gt;destroy&lt;/code&gt; method on the relation, or the &lt;code&gt;delete&lt;/code&gt; method on the model (available since release 2.0.0):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$book-&amp;gt;delete();&#xA;&#xA;// Similar operation&#xA;$user-&amp;gt;books()-&amp;gt;destroy($book);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to add or remove an embedded model, without touching the database, you can use the &lt;code&gt;associate&lt;/code&gt; and &lt;code&gt;dissociate&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;To eventually write the changes to the database, save the parent object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;books()-&amp;gt;associate($book);&#xA;$user-&amp;gt;save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like other relations, embedsMany assumes the local key of the relationship based on the model name. You can override the default local key by passing a second argument to the embedsMany method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class User extends Model&#xA;{&#xA;    public function books()&#xA;    {&#xA;        return $this-&amp;gt;embedsMany(Book::class, &#39;local_key&#39;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Embedded relations will return a Collection of embedded items instead of a query builder. Check out the available operations here: &lt;a href=&#34;https://laravel.com/docs/master/collections&#34;&gt;https://laravel.com/docs/master/collections&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;EmbedsOne Relationship&lt;/h3&gt; &#xA;&lt;p&gt;The embedsOne relation is similar to the embedsMany relation, but only embeds a single model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class Book extends Model&#xA;{&#xA;    public function author()&#xA;    {&#xA;        return $this-&amp;gt;embedsOne(Author::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access the embedded models through the dynamic property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$book = Book::first();&#xA;$author = $book-&amp;gt;author;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inserting and updating embedded models works similar to the &lt;code&gt;hasOne&lt;/code&gt; relation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$author = $book-&amp;gt;author()-&amp;gt;save(&#xA;    new Author([&#39;name&#39; =&amp;gt; &#39;John Doe&#39;])&#xA;);&#xA;&#xA;// Similar&#xA;$author =&#xA;    $book-&amp;gt;author()&#xA;         -&amp;gt;create([&#39;name&#39; =&amp;gt; &#39;John Doe&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can update the embedded model using the &lt;code&gt;save&lt;/code&gt; method (available since release 2.0.0):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$author = $book-&amp;gt;author;&#xA;&#xA;$author-&amp;gt;name = &#39;Jane Doe&#39;;&#xA;$author-&amp;gt;save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can replace the embedded model with a new model like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$newAuthor = new Author([&#39;name&#39; =&amp;gt; &#39;Jane Doe&#39;]);&#xA;&#xA;$book-&amp;gt;author()-&amp;gt;save($newAuthor);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Query Builder&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;p&gt;The database driver plugs right into the original query builder.&lt;/p&gt; &#xA;&lt;p&gt;When using MongoDB connections, you will be able to build fluent queries to perform database operations.&lt;/p&gt; &#xA;&lt;p&gt;For your convenience, there is a &lt;code&gt;collection&lt;/code&gt; alias for &lt;code&gt;table&lt;/code&gt; as well as some additional MongoDB specific operators/operations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$books = DB::collection(&#39;books&#39;)-&amp;gt;get();&#xA;&#xA;$hungerGames =&#xA;    DB::collection(&#39;books&#39;)&#xA;        -&amp;gt;where(&#39;name&#39;, &#39;Hunger Games&#39;)&#xA;        -&amp;gt;first();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are familiar with &lt;a href=&#34;http://laravel.com/docs/queries&#34;&gt;Eloquent Queries&lt;/a&gt;, there is the same functionality.&lt;/p&gt; &#xA;&lt;h3&gt;Available operations&lt;/h3&gt; &#xA;&lt;p&gt;To see the available operations, check the &lt;a href=&#34;https://raw.githubusercontent.com/mongodb/laravel-mongodb/master/#eloquent&#34;&gt;Eloquent&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Transactions&lt;/h2&gt; &#xA;&lt;p&gt;Transactions require MongoDB version ^4.0 as well as deployment of replica set or sharded clusters. You can find more information &lt;a href=&#34;https://docs.mongodb.com/manual/core/transactions/&#34;&gt;in the MongoDB docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;DB::transaction(function () {&#xA;    User::create([&#39;name&#39; =&amp;gt; &#39;john&#39;, &#39;age&#39; =&amp;gt; 19, &#39;title&#39; =&amp;gt; &#39;admin&#39;, &#39;email&#39; =&amp;gt; &#39;john@example.com&#39;]);&#xA;    DB::collection(&#39;users&#39;)-&amp;gt;where(&#39;name&#39;, &#39;john&#39;)-&amp;gt;update([&#39;age&#39; =&amp;gt; 20]);&#xA;    DB::collection(&#39;users&#39;)-&amp;gt;where(&#39;name&#39;, &#39;john&#39;)-&amp;gt;delete();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// begin a transaction&#xA;DB::beginTransaction();&#xA;User::create([&#39;name&#39; =&amp;gt; &#39;john&#39;, &#39;age&#39; =&amp;gt; 19, &#39;title&#39; =&amp;gt; &#39;admin&#39;, &#39;email&#39; =&amp;gt; &#39;john@example.com&#39;]);&#xA;DB::collection(&#39;users&#39;)-&amp;gt;where(&#39;name&#39;, &#39;john&#39;)-&amp;gt;update([&#39;age&#39; =&amp;gt; 20]);&#xA;DB::collection(&#39;users&#39;)-&amp;gt;where(&#39;name&#39;, &#39;john&#39;)-&amp;gt;delete();&#xA;&#xA;// commit changes&#xA;DB::commit();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To abort a transaction, call the &lt;code&gt;rollBack&lt;/code&gt; method at any point during the transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;DB::beginTransaction();&#xA;User::create([&#39;name&#39; =&amp;gt; &#39;john&#39;, &#39;age&#39; =&amp;gt; 19, &#39;title&#39; =&amp;gt; &#39;admin&#39;, &#39;email&#39; =&amp;gt; &#39;john@example.com&#39;]);&#xA;&#xA;// Abort the transaction, discarding any data created as part of it&#xA;DB::rollBack();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Transactions in MongoDB cannot be nested. DB::beginTransaction() function will start new transactions in a new created or existing session and will raise the RuntimeException when transactions already exist. See more in MongoDB official docs &lt;a href=&#34;https://www.mongodb.com/docs/manual/core/transactions/#transactions-and-sessions&#34;&gt;Transactions and Sessions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;DB::beginTransaction();&#xA;User::create([&#39;name&#39; =&amp;gt; &#39;john&#39;, &#39;age&#39; =&amp;gt; 20, &#39;title&#39; =&amp;gt; &#39;admin&#39;]);&#xA;&#xA;// This call to start a nested transaction will raise a RuntimeException&#xA;DB::beginTransaction();&#xA;DB::collection(&#39;users&#39;)-&amp;gt;where(&#39;name&#39;, &#39;john&#39;)-&amp;gt;update([&#39;age&#39; =&amp;gt; 20]);&#xA;DB::commit();&#xA;DB::rollBack();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Schema&lt;/h2&gt; &#xA;&lt;p&gt;The database driver also has (limited) schema builder support. You can easily manipulate collections and set indexes.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Schema::create(&#39;users&#39;, function ($collection) {&#xA;    $collection-&amp;gt;index(&#39;name&#39;);&#xA;    $collection-&amp;gt;unique(&#39;email&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass all the parameters specified &lt;a href=&#34;https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#options-for-all-index-types&#34;&gt;in the MongoDB docs&lt;/a&gt; to the &lt;code&gt;$options&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Schema::create(&#39;users&#39;, function ($collection) {&#xA;    $collection-&amp;gt;index(&#xA;        &#39;username&#39;,&#xA;        null,&#xA;        null,&#xA;        [&#xA;            &#39;sparse&#39; =&amp;gt; true,&#xA;            &#39;unique&#39; =&amp;gt; true,&#xA;            &#39;background&#39; =&amp;gt; true,&#xA;        ]&#xA;    );&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inherited operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;create and drop&lt;/li&gt; &#xA; &lt;li&gt;collection&lt;/li&gt; &#xA; &lt;li&gt;hasCollection&lt;/li&gt; &#xA; &lt;li&gt;index and dropIndex (compound indexes supported as well)&lt;/li&gt; &#xA; &lt;li&gt;unique&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MongoDB specific operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;background&lt;/li&gt; &#xA; &lt;li&gt;sparse&lt;/li&gt; &#xA; &lt;li&gt;expire&lt;/li&gt; &#xA; &lt;li&gt;geospatial&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All other (unsupported) operations are implemented as dummy pass-through methods because MongoDB does not use a predefined schema.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the schema builder on &lt;a href=&#34;https://laravel.com/docs/10.x/migrations#tables&#34;&gt;Laravel Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Geospatial indexes&lt;/h3&gt; &#xA;&lt;p&gt;Geospatial indexes are handy for querying location-based documents.&lt;/p&gt; &#xA;&lt;p&gt;They come in two forms: &lt;code&gt;2d&lt;/code&gt; and &lt;code&gt;2dsphere&lt;/code&gt;. Use the schema builder to add these to a collection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Schema::create(&#39;bars&#39;, function ($collection) {&#xA;    $collection-&amp;gt;geospatial(&#39;location&#39;, &#39;2d&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add a &lt;code&gt;2dsphere&lt;/code&gt; index:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Schema::create(&#39;bars&#39;, function ($collection) {&#xA;    $collection-&amp;gt;geospatial(&#39;location&#39;, &#39;2dsphere&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extending&lt;/h2&gt; &#xA;&lt;h3&gt;Cross-Database Relationships&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using a hybrid MongoDB and SQL setup, you can define relationships across them.&lt;/p&gt; &#xA;&lt;p&gt;The model will automatically return a MongoDB-related or SQL-related relation based on the type of the related model.&lt;/p&gt; &#xA;&lt;p&gt;If you want this functionality to work both ways, your SQL-models will need to use the &lt;code&gt;MongoDB\Laravel\Eloquent\HybridRelations&lt;/code&gt; trait.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This functionality only works for &lt;code&gt;hasOne&lt;/code&gt;, &lt;code&gt;hasMany&lt;/code&gt; and &lt;code&gt;belongsTo&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The MySQL model should use the &lt;code&gt;HybridRelations&lt;/code&gt; trait:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\HybridRelations;&#xA;&#xA;class User extends Model&#xA;{&#xA;    use HybridRelations;&#xA;&#xA;    protected $connection = &#39;mysql&#39;;&#xA;&#xA;    public function messages()&#xA;    {&#xA;        return $this-&amp;gt;hasMany(Message::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Within your MongoDB model, you should define the relationship:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use MongoDB\Laravel\Eloquent\Model;&#xA;&#xA;class Message extends Model&#xA;{&#xA;    protected $connection = &#39;mongodb&#39;;&#xA;&#xA;    public function user()&#xA;    {&#xA;        return $this-&amp;gt;belongsTo(User::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authentication&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use Laravel&#39;s native Auth functionality, register this included service provider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;MongoDB\Laravel\Auth\PasswordResetServiceProvider::class,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This service provider will slightly modify the internal DatabaseReminderRepository to add support for MongoDB based password reminders.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t use password reminders, you don&#39;t have to register this service provider and everything else should work just fine.&lt;/p&gt; &#xA;&lt;h3&gt;Queues&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use MongoDB as your database backend, change the driver in &lt;code&gt;config/queue.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;connections&#39; =&amp;gt; [&#xA;    &#39;database&#39; =&amp;gt; [&#xA;        &#39;driver&#39; =&amp;gt; &#39;mongodb&#39;,&#xA;        // You can also specify your jobs specific database created on config/database.php&#xA;        &#39;connection&#39; =&amp;gt; &#39;mongodb-job&#39;,&#xA;        &#39;table&#39; =&amp;gt; &#39;jobs&#39;,&#xA;        &#39;queue&#39; =&amp;gt; &#39;default&#39;,&#xA;        &#39;expire&#39; =&amp;gt; 60,&#xA;    ],&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use MongoDB to handle failed jobs, change the database in &lt;code&gt;config/queue.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;failed&#39; =&amp;gt; [&#xA;    &#39;driver&#39; =&amp;gt; &#39;mongodb&#39;,&#xA;    // You can also specify your jobs specific database created on config/database.php&#xA;    &#39;database&#39; =&amp;gt; &#39;mongodb-job&#39;,&#xA;    &#39;table&#39; =&amp;gt; &#39;failed_jobs&#39;,&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the service provider in &lt;code&gt;config/app.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;MongoDB\Laravel\MongodbQueueServiceProvider::class,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;h4&gt;Upgrading from version 3 to 4&lt;/h4&gt; &#xA;&lt;p&gt;Change project name in composer.json to &lt;code&gt;mongodb/laravel&lt;/code&gt; and run &lt;code&gt;composer update&lt;/code&gt;. Change namespace from &lt;code&gt;Jenssegers\Mongodb&lt;/code&gt; to &lt;code&gt;MongoDB\Laravel&lt;/code&gt; in your models and config.&lt;/p&gt; &#xA;&lt;h2&gt;Security contact information&lt;/h2&gt; &#xA;&lt;p&gt;To report a security vulnerability, follow &lt;a href=&#34;https://tidelift.com/security&#34;&gt;these steps&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>