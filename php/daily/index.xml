<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-30T01:39:01Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>facebook/facebook-php-business-sdk</title>
    <updated>2022-10-30T01:39:01Z</updated>
    <id>tag:github.com,2022-10-30:/facebook/facebook-php-business-sdk</id>
    <link href="https://github.com/facebook/facebook-php-business-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An SDK built to facilitate application development for Facebook Ads API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Facebook Business SDK for PHP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/facebook/php-business-sdk&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/facebook/php-business-sdk.svg?style=flat-square&#34; alt=&#34;Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/facebook/facebook-php-business-sdk/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Facebook%20Platform-blue.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/facebook/facebook-php-business-sdk/goto?ref=main&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Ffacebook%2Ffacebook-php-business-sdk%2Fbadge%3Fref%3Dmaster&amp;amp;style=flat&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/facebook/facebook-php-business-sdk&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/g/facebook/facebook-php-business-sdk.svg?style=flat-square&#34; alt=&#34;Scrutinizer&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/facebook/facebook-php-business-sdk&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/coverage/g/facebook/facebook-php-business-sdk.svg?style=flat-square&#34; alt=&#34;Scrutinizer Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The Facebook &lt;a href=&#34;https://developers.facebook.com/docs/business-sdk&#34; target=&#34;_blank&#34;&gt;Business SDK&lt;/a&gt; is a one-stop shop to help our partners better serve their businesses. Partners are using multiple Facebook API&#39;s to server the needs of their clients. Adopting all these API&#39;s and keeping them up to date across the various platforms can be time consuming and ultimately prohibitive. For this reason Facebook has developed the Business SDK bundling many of its APIs into one SDK to ease implementation and upkeep. The Business SDK is an upgraded version of the Marketing API SDK that includes the Marketing API as well as many Facebook APIs from different platforms such as Pages, Business Manager, Instagram, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Business SDK &lt;a href=&#34;https://developers.facebook.com/docs/business-sdk/getting-started&#34; target=&#34;_blank&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Pre-requisites&lt;/h2&gt; &#xA;&lt;h3&gt;Register An App&lt;/h3&gt; &#xA;&lt;p&gt;To get started with the SDK, you must have an app registered on &lt;a href=&#34;https://developers.facebook.com/&#34; target=&#34;_blank&#34;&gt;developers.facebook.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To manage the Marketing API, please visit your &lt;a href=&#34;https://developers.facebook.com/apps/&lt;YOUR APP ID&gt;/dashboard&#34;&gt; App Dashboard &lt;/a&gt; and add the &lt;b&gt;Marketing API&lt;/b&gt; product to your app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: For security, it is recommended that you turn on &#39;Require App Secret&#39; in your app&#39;s Settings-&amp;gt;Advanced page.&lt;/p&gt; &#xA;&lt;h3&gt;Obtain An Access Token&lt;/h3&gt; &#xA;&lt;p&gt;When someone connects with an app using Facebook Login and approves the request for permissions, the app obtains an access token that provides temporary, secure access to Facebook APIs.&lt;/p&gt; &#xA;&lt;p&gt;An access token is an opaque string that identifies a User, app, or Page.&lt;/p&gt; &#xA;&lt;p&gt;For example, to access the Marketing API, you need to generate a User access token for your app and ask for the &lt;code&gt;ads_management&lt;/code&gt; permission; to access Pages API, you need to generate a Page access token for your app and ask for the &lt;code&gt;manage_page&lt;/code&gt; permission.&lt;/p&gt; &#xA;&lt;p&gt;Refer to our &lt;a href=&#34;https://developers.facebook.com/docs/facebook-login/access-tokens&#34; target=&#34;_blank&#34;&gt; Access Token Guide&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;p&gt;For now, we can use the &lt;a href=&#34;https://developers.facebook.com/tools/explorer&#34; target=&#34;_blank&#34;&gt;Graph Explorer&lt;/a&gt; to get an access token.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The Facebook Business SDK requires PHP 5.6 or greater.&lt;/p&gt; &#xA;&lt;h3&gt;Composer&lt;/h3&gt; &#xA;&lt;p&gt;The Facebook Business SDK uses composer to manage dependencies. Visit the &lt;a href=&#34;https://getcomposer.org/download/&#34; target=&#34;_blank&#34;&gt;composer documentation&lt;/a&gt; to learn how to install composer.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;composer.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;require&#34;: {&#xA;        &#34;facebook/php-business-sdk&#34;: &#34;12.0.*&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then install it through composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php composer.phar install --no-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This SDK and its dependencies will be installed under &lt;code&gt;./vendor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Alternatives&lt;/h3&gt; &#xA;&lt;p&gt;This repository is written following the &lt;a href=&#34;http://www.php-fig.org/psr/psr-4/&#34;&gt;psr-4 autoloading standard&lt;/a&gt;. Any psr-4 compatible autoloader can be used.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Api main class&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;FacebookAds\Api&lt;/code&gt; object is the foundation of the Business SDK which encapsulates a &lt;code&gt;FacebookAds\Session&lt;/code&gt; and is used to execute requests against the Graph API.&lt;/p&gt; &#xA;&lt;p&gt;To instantiate an Api object you will need a valid access token:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use FacebookAds\Api;&#xA;&#xA;// Initialize a new Session and instantiate an Api object&#xA;Api::init($app_id, $app_secret, $access_token);&#xA;&#xA;// The Api object is now available through singleton&#xA;$api = Api::instance();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once instantiated, the Api object will allow you to start making requests to the Graph API.&lt;/p&gt; &#xA;&lt;h3&gt;Fields names&lt;/h3&gt; &#xA;&lt;p&gt;Due to the high number of field names in the Graph API existing objects, in order to facilitate your code maintainability, enum-like classes are provided. These files are stored under the &lt;code&gt;FacebookAds/Object/Fields&lt;/code&gt; directory. You can access object properties in the same manner you would usually do in php:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use FacebookAds\Object\AdAccount;&#xA;&#xA;$account = new AdAccount();&#xA;$account-&amp;gt;name = &#39;My account name&#39;;&#xA;echo $account-&amp;gt;name;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using the enums:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use FacebookAds\Object\AdAccount;&#xA;use FacebookAds\Object\Fields\AdAccountFields;&#xA;&#xA;$account = new AdAccount();&#xA;$account-&amp;gt;{AdAccountFields::NAME} = &#39;My account name&#39;;&#xA;echo $account-&amp;gt;{AdAccountFields::NAME};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Object classes&lt;/h3&gt; &#xA;&lt;p&gt;Facebook Ads entities are defined as classes under the &lt;code&gt;FacebookAds/Object&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;Read Objects&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use FacebookAds\Object\AdAccount;&#xA;&#xA;$account = (new AdAccount($account_id))-&amp;gt;getSelf();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For some objects, the Ads API doesn&#39;t return all available fields by default. The first argument of the object&#39;s read method is an array of field names to be requested.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use FacebookAds\Object\AdAccount;&#xA;use FacebookAds\Object\Fields\AdAccountFields;&#xA;&#xA;$fields = array(&#xA;  AdAccountFields::ID,&#xA;  AdAccountFields::NAME,&#xA;);&#xA;&#xA;$account = (new AdAccount($account_id))-&amp;gt;getSelf($fields);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requesting an high number of fields may cause the response time to visibly increase, you should always request only the fields you really need.&lt;/p&gt; &#xA;&lt;h4&gt;Create Objects&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use FacebookAds\Object\AdSet;&#xA;use FacebookAds\Object\AdAccount;&#xA;use FacebookAds\Object\Fields\AdSetFields;&#xA;&#xA;$account_id = &#39;act_123123&#39;;&#xA;$campaign_id = &#39;123456&#39;;&#xA;&#xA;$account = new AdAccount($account_id);&#xA;$adset = $account-&amp;gt;createAdSet(&#xA;    array(),&#xA;    array(&#xA;      AdSetFields::NAME =&amp;gt; &#39;My Test AdSet&#39;,&#xA;      AdSetFields::CAMPAIGN_ID =&amp;gt; campaign_id,&#xA;      AdSetFields::DAILY_BUDGET =&amp;gt; 150,&#xA;      AdSetFields::START_TIME =&amp;gt; (new \DateTime(&#34;+1 week&#34;))-&amp;gt;format(\DateTime::ISO8601),&#xA;      AdSetFields::END_TIME =&amp;gt; (new \DateTime(&#34;+2 week&#34;))-&amp;gt;format(\DateTime::ISO8601),&#xA;      AdSetFields::BILLING_EVENT =&amp;gt; &#39;IMPRESSIONS&#39;,&#xA;      AdSetFields::TARGETING =&amp;gt; array(&#39;geo_locations&#39; =&amp;gt; array(&#39;countries&#39; =&amp;gt; array(&#39;US&#39;))),&#xA;      AdSetFields::BID_AMOUNT =&amp;gt; &#39;1000&#39;,&#xA;    )&#xA;);&#xA;&#xA;echo $adset-&amp;gt;id;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Update Objects&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use FacebookAds\Object\AdSet;&#xA;use FacebookAds\Object\Fields\AdSetFields;&#xA;&#xA;$ad_set_id = &#39;123456&#39;;&#xA;&#xA;$set = new AdSet($ad_set_id);&#xA;$fields = array(&#xA;);&#xA;$params = array(&#xA;  AdSetFields::NAME =&amp;gt; &#39;My new AdSet name&#39;,&#xA;);&#xA;$set-&amp;gt;updateSelf($fields, $params);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Delete Objects&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use FacebookAds\Object\AdSet;&#xA;&#xA;$ad_set_id = &#39;123456&#39;;&#xA;&#xA;$set = new AdSet($ad_set_id);&#xA;$set-&amp;gt;deleteSelf();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cursors&lt;/h3&gt; &#xA;&lt;p&gt;Since the release of the Facebook Graph API 2.0, pagination is handled through &lt;a href=&#34;https://developers.facebook.com/docs/graph-api/using-graph-api/v2.2#paging&#34;&gt;cursors&lt;/a&gt;. Here cursors are defined as in &lt;code&gt;\FacebookAds\Cursor&lt;/code&gt;. Cursors are generally returned from connection methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use FacebookAds\Object\AdAccount;&#xA;use FacebookAds\Object\Fields\CampaignFields;&#xA;&#xA;$account = new AdAccount(&#39;&amp;lt;ACT_ID&amp;gt;&#39;);&#xA;$cursor = $account-&amp;gt;getCampaigns([&#39;id&#39;,&#39;name&#39;]);&#xA;&#xA;// Loop over objects&#xA;foreach ($cursor as $campaign) {&#xA;  echo $campaign-&amp;gt;{CampaignFields::NAME}.PHP_EOL;&#xA;}&#xA;&#xA;// Access objects by index&#xA;if ($cursor-&amp;gt;count() &amp;gt; 0) {&#xA;  echo &#34;The first campaign in the cursor is: &#34;.$cursor[0]-&amp;gt;{CampaignFields::NAME}.PHP_EOL;&#xA;}&#xA;&#xA;// Fetch the next page&#xA;$cursor-&amp;gt;fetchAfter();&#xA;// New Objects will be appended to the cursor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Implicit Fetching&lt;/h4&gt; &#xA;&lt;p&gt;Whenever all object connected to a parent are required (carelessly from the number of HTTP requests) implicit fetching can help reducing the amount of code required. If cursor has Implicit Fetching enabled, while iterating (foreach, Cursor::next(), Cursor::prev()) the page end is reached, the SDK will automatically fetch and append a new page, until cursor end. Implicit Fetching will make you lose control of the number of HTTP request that will be sent and, for this reason, is disabled by default. Implicit Fetching can be enabled for a specific cursor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$cursor-&amp;gt;setUseImplicitFetch(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use FacebookAds\Cursor;&#xA;&#xA;Cursor::setDefaultUseImplicitFetch(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Reverse Iterations&lt;/h4&gt; &#xA;&lt;p&gt;Cursors are bi-directional, and can be iterated in reverse order:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use FacebookAds\Object\AbstractCrudObject;&#xA;&#xA;/** @var \FacebookAds\Cursor $cursor */&#xA;$cursor-&amp;gt;setUseImplicitFetch(true);&#xA;&#xA;$cursor-&amp;gt;end();&#xA;while ($cursor-&amp;gt;valid()) {&#xA;  echo $cursor-&amp;gt;current()-&amp;gt;{AbstractCrudObject::FIELD_ID}.PHP_EOL;&#xA;  $cursor-&amp;gt;prev();&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;The &#39;test&#39; folder contains the test cases. These are logically divided in unit and integration tests. Integration tests require an active Facebook Ad Account, a Facebook Application and a valid Access Token.&lt;/p&gt; &#xA;&lt;p&gt;Note: we are currently unable to securely and reliably run integration tests on a public CI system. Our integrations with Travis and Scrutinizer (including badges at the top of this file) include only unit tests.&lt;/p&gt; &#xA;&lt;h3&gt;Install dependencies&lt;/h3&gt; &#xA;&lt;p&gt;From the root folder run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php composer.phar install --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Execute unit tests only&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./vendor/bin/phpunit -c test/phpunit-travis.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests individually (be sure not to be pointing to an integration test file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./vendor/bin/phpunit -c test/phpunit-travis.xml path/to/class/file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Execute all tests (unit + integration)&lt;/h3&gt; &#xA;&lt;p&gt;Setup your integration config:&lt;/p&gt; &#xA;&lt;p&gt;1 - Copy the config file template.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp test/config.php.dist test/config.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2 - Edit &lt;code&gt;test/config.php&lt;/code&gt; with your informations.&lt;/p&gt; &#xA;&lt;p&gt;Execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./vendor/bin/phpunit -c test/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests individually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./vendor/bin/phpunit -c test/ path/to/class/file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debug&lt;/h2&gt; &#xA;&lt;p&gt;If this SDK is not working as expected, it may be either a SDK issue or API issue.&lt;/p&gt; &#xA;&lt;p&gt;This can be identified by constructing a raw cURL request and seeing if the response is as expected&lt;/p&gt; &#xA;&lt;p&gt;for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;use FacebookAds\Api;&#xA;use FacebookAds\Object\AdAccount;&#xA;&#xA;Api::init($app_id, $app_secret, $access_token);&#xA;$api = Api::instance();&#xA;&#xA;use FacebookAds\Logger\CurlLogger;&#xA;$api-&amp;gt;setLogger(new CurlLogger());&#xA;$account = new AdAccount($account_id);&#xA;$account-&amp;gt;read(array(&#39;id&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When running this code, this cURL request will be printed to the console as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -G \&#xA;  -d &#39;fields=id&#39; \&#xA;  -d &#39;access_token=&amp;lt;access_token&amp;gt;&#39; \&#xA;  https://graph.facebook.com/v3.1/&amp;lt;act_accountid&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SDK Codegen&lt;/h2&gt; &#xA;&lt;p&gt;Our SDK is autogenerated from &lt;a href=&#34;https://github.com/facebook/facebook-business-sdk-codegen&#34;&gt;SDK Codegen&lt;/a&gt;. If you want to learn more about how our SDK code is generated, please check this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Issue&lt;/h2&gt; &#xA;&lt;p&gt;Since we want to handle bugs more efficiently, we&#39;ve decided to close issue reporting in Github and move to our dedicated bug reporting channel. If you encounter a bug with Business SDK (PHP), please report the issue at &lt;a href=&#34;https://developers.facebook.com/support/bugs/&#34;&gt;our developer bug reporting channel&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>php-curl-class/php-curl-class</title>
    <updated>2022-10-30T01:39:01Z</updated>
    <id>tag:github.com,2022-10-30:/php-curl-class/php-curl-class</id>
    <link href="https://github.com/php-curl-class/php-curl-class" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP Curl Class makes it easy to send HTTP requests and integrate with web APIs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHP Curl Class: HTTP requests made easy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/php-curl-class/php-curl-class/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/php-curl-class/php-curl-class.svg?style=flat-square&amp;amp;sort=semver&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/php-curl-class/php-curl-class/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/php-curl-class/php-curl-class.svg?style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/php-curl-class/php-curl-class/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/php-curl-class/php-curl-class/ci?style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/php-curl-class/php-curl-class/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/php-curl-class/php-curl-class/release?style=flat-square&amp;amp;label=release&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/php-curl-class/php-curl-class/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/php-curl-class/php-curl-class.svg?style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PHP Curl Class makes it easy to send HTTP requests and integrate with web APIs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/php-curl-class/php-curl-class/master/www/img/screencast.gif&#34; alt=&#34;PHP Curl Class screencast&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php-curl-class/php-curl-class/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php-curl-class/php-curl-class/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php-curl-class/php-curl-class/master/#quick-start-and-examples&#34;&gt;Quick Start and Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php-curl-class/php-curl-class/master/#available-methods&#34;&gt;Available Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php-curl-class/php-curl-class/master/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php-curl-class/php-curl-class/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php-curl-class/php-curl-class/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php-curl-class/php-curl-class/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To install PHP Curl Class, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require php-curl-class/php-curl-class&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the latest commit version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require php-curl-class/php-curl-class @dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installation instructions to use the &lt;code&gt;composer&lt;/code&gt; command can be found on &lt;a href=&#34;https://github.com/composer/composer&#34;&gt;https://github.com/composer/composer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;PHP Curl Class works with PHP 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, and 8.1.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Start and Examples&lt;/h3&gt; &#xA;&lt;p&gt;More examples are available under &lt;a href=&#34;https://github.com/php-curl-class/php-curl-class/tree/master/examples&#34;&gt;/examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;&#xA;use Curl\Curl;&#xA;&#xA;$curl = new Curl();&#xA;$curl-&amp;gt;get(&#39;https://www.example.com/&#39;);&#xA;&#xA;if ($curl-&amp;gt;error) {&#xA;    echo &#39;Error: &#39; . $curl-&amp;gt;errorMessage . &#34;\n&#34;;&#xA;} else {&#xA;    echo &#39;Response:&#39; . &#34;\n&#34;;&#xA;    var_dump($curl-&amp;gt;response);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// https://www.example.com/search?q=keyword&#xA;$curl = new Curl();&#xA;$curl-&amp;gt;get(&#39;https://www.example.com/search&#39;, [&#xA;    &#39;q&#39; =&amp;gt; &#39;keyword&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$curl = new Curl();&#xA;$curl-&amp;gt;post(&#39;https://www.example.com/login/&#39;, [&#xA;    &#39;username&#39; =&amp;gt; &#39;myusername&#39;,&#xA;    &#39;password&#39; =&amp;gt; &#39;mypassword&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$curl = new Curl();&#xA;$curl-&amp;gt;setBasicAuthentication(&#39;username&#39;, &#39;password&#39;);&#xA;$curl-&amp;gt;setUserAgent(&#39;MyUserAgent/0.0.1 (+https://www.example.com/bot.html)&#39;);&#xA;$curl-&amp;gt;setReferrer(&#39;https://www.example.com/url?url=https%3A%2F%2Fwww.example.com%2F&#39;);&#xA;$curl-&amp;gt;setHeader(&#39;X-Requested-With&#39;, &#39;XMLHttpRequest&#39;);&#xA;$curl-&amp;gt;setCookie(&#39;key&#39;, &#39;value&#39;);&#xA;$curl-&amp;gt;get(&#39;https://www.example.com/&#39;);&#xA;&#xA;if ($curl-&amp;gt;error) {&#xA;    echo &#39;Error: &#39; . $curl-&amp;gt;errorMessage . &#34;\n&#34;;&#xA;} else {&#xA;    echo &#39;Response:&#39; . &#34;\n&#34;;&#xA;    var_dump($curl-&amp;gt;response);&#xA;}&#xA;&#xA;var_dump($curl-&amp;gt;requestHeaders);&#xA;var_dump($curl-&amp;gt;responseHeaders);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$curl = new Curl();&#xA;$curl-&amp;gt;setFollowLocation();&#xA;$curl-&amp;gt;get(&#39;https://shortn.example.com/bHbVsP&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$curl = new Curl();&#xA;$curl-&amp;gt;put(&#39;https://api.example.com/user/&#39;, [&#xA;    &#39;first_name&#39; =&amp;gt; &#39;Zach&#39;,&#xA;    &#39;last_name&#39; =&amp;gt; &#39;Borboa&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$curl = new Curl();&#xA;$curl-&amp;gt;patch(&#39;https://api.example.com/profile/&#39;, [&#xA;    &#39;image&#39; =&amp;gt; &#39;@path/to/file.jpg&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$curl = new Curl();&#xA;$curl-&amp;gt;patch(&#39;https://api.example.com/profile/&#39;, [&#xA;    &#39;image&#39; =&amp;gt; new CURLFile(&#39;path/to/file.jpg&#39;),&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$curl = new Curl();&#xA;$curl-&amp;gt;delete(&#39;https://api.example.com/user/&#39;, [&#xA;    &#39;id&#39; =&amp;gt; &#39;1234&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Enable all supported encoding types and download a file.&#xA;$curl = new Curl();&#xA;$curl-&amp;gt;setOpt(CURLOPT_ENCODING , &#39;&#39;);&#xA;$curl-&amp;gt;download(&#39;https://www.example.com/file.bin&#39;, &#39;/tmp/myfile.bin&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Case-insensitive access to headers.&#xA;$curl = new Curl();&#xA;$curl-&amp;gt;download(&#39;https://www.example.com/image.png&#39;, &#39;/tmp/myimage.png&#39;);&#xA;echo $curl-&amp;gt;responseHeaders[&#39;Content-Type&#39;] . &#34;\n&#34;; // image/png&#xA;echo $curl-&amp;gt;responseHeaders[&#39;CoNTeNT-TyPE&#39;] . &#34;\n&#34;; // image/png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Manual clean up.&#xA;$curl-&amp;gt;close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Example access to curl object.&#xA;curl_set_opt($curl-&amp;gt;curl, CURLOPT_USERAGENT, &#39;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1&#39;);&#xA;curl_close($curl-&amp;gt;curl);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;&#xA;use Curl\MultiCurl;&#xA;&#xA;// Requests in parallel with callback functions.&#xA;$multi_curl = new MultiCurl();&#xA;&#xA;$multi_curl-&amp;gt;success(function($instance) {&#xA;    echo &#39;call to &#34;&#39; . $instance-&amp;gt;url . &#39;&#34; was successful.&#39; . &#34;\n&#34;;&#xA;    echo &#39;response:&#39; . &#34;\n&#34;;&#xA;    var_dump($instance-&amp;gt;response);&#xA;});&#xA;$multi_curl-&amp;gt;error(function($instance) {&#xA;    echo &#39;call to &#34;&#39; . $instance-&amp;gt;url . &#39;&#34; was unsuccessful.&#39; . &#34;\n&#34;;&#xA;    echo &#39;error code: &#39; . $instance-&amp;gt;errorCode . &#34;\n&#34;;&#xA;    echo &#39;error message: &#39; . $instance-&amp;gt;errorMessage . &#34;\n&#34;;&#xA;});&#xA;$multi_curl-&amp;gt;complete(function($instance) {&#xA;    echo &#39;call completed&#39; . &#34;\n&#34;;&#xA;});&#xA;&#xA;$multi_curl-&amp;gt;addGet(&#39;https://www.google.com/search&#39;, [&#xA;    &#39;q&#39; =&amp;gt; &#39;hello world&#39;,&#xA;]);&#xA;$multi_curl-&amp;gt;addGet(&#39;https://duckduckgo.com/&#39;, [&#xA;    &#39;q&#39; =&amp;gt; &#39;hello world&#39;,&#xA;]);&#xA;$multi_curl-&amp;gt;addGet(&#39;https://www.bing.com/search&#39;, [&#xA;    &#39;q&#39; =&amp;gt; &#39;hello world&#39;,&#xA;]);&#xA;&#xA;$multi_curl-&amp;gt;start(); // Blocks until all items in the queue have been processed.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples are available under &lt;a href=&#34;https://github.com/php-curl-class/php-curl-class/tree/master/examples&#34;&gt;/examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Available Methods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Curl::__construct($base_url = null)&#xA;Curl::__destruct()&#xA;Curl::__get($name)&#xA;Curl::_fastDownload($url, $filename, $connections = 4) {&#xA;Curl::attemptRetry()&#xA;Curl::beforeSend($callback)&#xA;Curl::buildPostData($data)&#xA;Curl::call()&#xA;Curl::close()&#xA;Curl::complete($callback)&#xA;Curl::delete($url, $query_parameters = [], $data = [])&#xA;Curl::diagnose($return = false)&#xA;Curl::disableTimeout()&#xA;Curl::download($url, $mixed_filename)&#xA;Curl::error($callback)&#xA;Curl::exec($ch = null)&#xA;Curl::execDone()&#xA;Curl::get($url, $data = [])&#xA;Curl::getAttempts()&#xA;Curl::getBeforeSendCallback()&#xA;Curl::getCompleteCallback()&#xA;Curl::getCookie($key)&#xA;Curl::getCurl()&#xA;Curl::getCurlErrorCode()&#xA;Curl::getCurlErrorMessage()&#xA;Curl::getDownloadCompleteCallback()&#xA;Curl::getDownloadFileName()&#xA;Curl::getErrorCallback()&#xA;Curl::getErrorCode()&#xA;Curl::getErrorMessage()&#xA;Curl::getFileHandle()&#xA;Curl::getHttpErrorMessage()&#xA;Curl::getHttpStatusCode()&#xA;Curl::getId()&#xA;Curl::getInfo($opt = null)&#xA;Curl::getJsonDecoder()&#xA;Curl::getOpt($option)&#xA;Curl::getRawResponse()&#xA;Curl::getRawResponseHeaders()&#xA;Curl::getRemainingRetries()&#xA;Curl::getRequestHeaders()&#xA;Curl::getResponse()&#xA;Curl::getResponseCookie($key)&#xA;Curl::getResponseCookies()&#xA;Curl::getResponseHeaders()&#xA;Curl::getRetries()&#xA;Curl::getRetryDecider()&#xA;Curl::getSuccessCallback()&#xA;Curl::getUrl()&#xA;Curl::getXmlDecoder()&#xA;Curl::head($url, $data = [])&#xA;Curl::isChildOfMultiCurl()&#xA;Curl::isCurlError()&#xA;Curl::isError()&#xA;Curl::isHttpError()&#xA;Curl::options($url, $data = [])&#xA;Curl::patch($url, $data = [])&#xA;Curl::post($url, $data = &#39;&#39;, $follow_303_with_post = false)&#xA;Curl::progress($callback)&#xA;Curl::put($url, $data = [])&#xA;Curl::removeHeader($key)&#xA;Curl::reset()&#xA;Curl::search($url, $data = [])&#xA;Curl::setAutoReferer($auto_referer = true)&#xA;Curl::setAutoReferrer($auto_referrer = true)&#xA;Curl::setBasicAuthentication($username, $password = &#39;&#39;)&#xA;Curl::setConnectTimeout($seconds)&#xA;Curl::setCookie($key, $value)&#xA;Curl::setCookieFile($cookie_file)&#xA;Curl::setCookieJar($cookie_jar)&#xA;Curl::setCookieString($string)&#xA;Curl::setCookies($cookies)&#xA;Curl::setDefaultDecoder($mixed = &#39;json&#39;)&#xA;Curl::setDefaultJsonDecoder()&#xA;Curl::setDefaultTimeout()&#xA;Curl::setDefaultUserAgent()&#xA;Curl::setDefaultXmlDecoder()&#xA;Curl::setDigestAuthentication($username, $password = &#39;&#39;)&#xA;Curl::setFile($file)&#xA;Curl::setFollowLocation($follow_location = true)&#xA;Curl::setForbidReuse($forbid_reuse = true)&#xA;Curl::setHeader($key, $value)&#xA;Curl::setHeaders($headers)&#xA;Curl::setInterface($interface)&#xA;Curl::setJsonDecoder($mixed)&#xA;Curl::setMaxFilesize($bytes)&#xA;Curl::setMaximumRedirects($maximum_redirects)&#xA;Curl::setOpt($option, $value)&#xA;Curl::setOpts($options)&#xA;Curl::setPort($port)&#xA;Curl::setProxy($proxy, $port = null, $username = null, $password = null)&#xA;Curl::setProxyAuth($auth)&#xA;Curl::setProxyTunnel($tunnel = true)&#xA;Curl::setProxyType($type)&#xA;Curl::setRange($range)&#xA;Curl::setReferer($referer)&#xA;Curl::setReferrer($referrer)&#xA;Curl::setRetry($mixed)&#xA;Curl::setStop($callback = null)&#xA;Curl::setTimeout($seconds)&#xA;Curl::setUrl($url, $mixed_data = &#39;&#39;)&#xA;Curl::setUserAgent($user_agent)&#xA;Curl::setXmlDecoder($mixed)&#xA;Curl::stop()&#xA;Curl::success($callback)&#xA;Curl::unsetHeader($key)&#xA;Curl::unsetProxy()&#xA;Curl::verbose($on = true, $output = &#39;STDERR&#39;)&#xA;MultiCurl::__construct($base_url = null)&#xA;MultiCurl::__destruct()&#xA;MultiCurl::addCurl(Curl $curl)&#xA;MultiCurl::addDelete($url, $query_parameters = [], $data = [])&#xA;MultiCurl::addDownload($url, $mixed_filename)&#xA;MultiCurl::addGet($url, $data = [])&#xA;MultiCurl::addHead($url, $data = [])&#xA;MultiCurl::addOptions($url, $data = [])&#xA;MultiCurl::addPatch($url, $data = [])&#xA;MultiCurl::addPost($url, $data = &#39;&#39;, $follow_303_with_post = false)&#xA;MultiCurl::addPut($url, $data = [])&#xA;MultiCurl::addSearch($url, $data = [])&#xA;MultiCurl::beforeSend($callback)&#xA;MultiCurl::close()&#xA;MultiCurl::complete($callback)&#xA;MultiCurl::disableTimeout()&#xA;MultiCurl::error($callback)&#xA;MultiCurl::getOpt($option)&#xA;MultiCurl::removeHeader($key)&#xA;MultiCurl::setAutoReferer($auto_referer = true)&#xA;MultiCurl::setAutoReferrer($auto_referrer = true)&#xA;MultiCurl::setBasicAuthentication($username, $password = &#39;&#39;)&#xA;MultiCurl::setConcurrency($concurrency)&#xA;MultiCurl::setConnectTimeout($seconds)&#xA;MultiCurl::setCookie($key, $value)&#xA;MultiCurl::setCookieFile($cookie_file)&#xA;MultiCurl::setCookieJar($cookie_jar)&#xA;MultiCurl::setCookieString($string)&#xA;MultiCurl::setCookies($cookies)&#xA;MultiCurl::setDigestAuthentication($username, $password = &#39;&#39;)&#xA;MultiCurl::setFile($file)&#xA;MultiCurl::setFollowLocation($follow_location = true)&#xA;MultiCurl::setForbidReuse($forbid_reuse = true)&#xA;MultiCurl::setHeader($key, $value)&#xA;MultiCurl::setHeaders($headers)&#xA;MultiCurl::setInterface($interface)&#xA;MultiCurl::setJsonDecoder($mixed)&#xA;MultiCurl::setMaximumRedirects($maximum_redirects)&#xA;MultiCurl::setOpt($option, $value)&#xA;MultiCurl::setOpts($options)&#xA;MultiCurl::setPort($port)&#xA;MultiCurl::setProxies($proxies)&#xA;MultiCurl::setProxy($proxy, $port = null, $username = null, $password = null)&#xA;MultiCurl::setProxyAuth($auth)&#xA;MultiCurl::setProxyTunnel($tunnel = true)&#xA;MultiCurl::setProxyType($type)&#xA;MultiCurl::setRange($range)&#xA;MultiCurl::setRateLimit($rate_limit)&#xA;MultiCurl::setReferer($referer)&#xA;MultiCurl::setReferrer($referrer)&#xA;MultiCurl::setRequestTimeAccuracy()&#xA;MultiCurl::setRetry($mixed)&#xA;MultiCurl::setTimeout($seconds)&#xA;MultiCurl::setUrl($url, $mixed_data = &#39;&#39;)&#xA;MultiCurl::setUserAgent($user_agent)&#xA;MultiCurl::setXmlDecoder($mixed)&#xA;MultiCurl::start()&#xA;MultiCurl::stop()&#xA;MultiCurl::success($callback)&#xA;MultiCurl::unsetHeader($key)&#xA;MultiCurl::unsetProxy()&#xA;MultiCurl::verbose($on = true, $output = STDERR)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Security&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/php-curl-class/php-curl-class/raw/master/SECURITY.md&#34;&gt;SECURITY&lt;/a&gt; for security considerations.&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/php-curl-class/php-curl-class/raw/master/TROUBLESHOOTING.md&#34;&gt;TROUBLESHOOTING&lt;/a&gt; for help troubleshooting.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/php-curl-class/php-curl-class/raw/master/TESTING.md&#34;&gt;TESTING&lt;/a&gt; for testing information.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check for open issues or open a new issue to start a discussion around a bug or feature.&lt;/li&gt; &#xA; &lt;li&gt;Fork the repository on GitHub to start making your changes.&lt;/li&gt; &#xA; &lt;li&gt;Write one or more tests for the new feature or that expose the bug.&lt;/li&gt; &#xA; &lt;li&gt;Make code changes to implement the feature or fix the bug.&lt;/li&gt; &#xA; &lt;li&gt;Send a pull request to get your changes merged and published.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>