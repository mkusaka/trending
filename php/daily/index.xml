<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-27T01:41:45Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>laravel-liberu/php-gedcom</title>
    <updated>2023-06-27T01:41:45Z</updated>
    <id>tag:github.com,2023-06-27:/laravel-liberu/php-gedcom</id>
    <link href="https://github.com/laravel-liberu/php-gedcom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gedcom reading and writing for PHP 8.2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;php-gedcom&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/release/familytree365/php-gedcom.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/familytree365/php-gedcom/?branch=master&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/familytree365/php-gedcom/badges/quality-score.png?b=master&#34; alt=&#34;Scrutinizer Code Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/familytree365/php-gedcom/build-status/master&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/familytree365/php-gedcom/badges/build.png?b=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/code-intelligence&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/familytree365/php-gedcom/badges/code-intelligence.svg?b=master&#34; alt=&#34;Code Intelligence Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.styleci.io/repos/262784020&#34;&gt;&lt;img src=&#34;https://github.styleci.io/repos/262784020/shield?branch=master&#34; alt=&#34;StyleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/familytree365/php-gedcom/overview/master&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/familytree365/php-gedcom/badge/master&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-modularphp-gedcom-php-gedcom-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/911f9e33-212a-4dfa-a860-751cdbbacff7&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/familytree365/php-gedcom&#34;&gt;&lt;img src=&#34;https://travis-ci.org/familytree365/php-gedcom.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;php-gedcom 1.0+ requires PHP 8.0 (or later).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways of installing php-gedcom.&lt;/p&gt; &#xA;&lt;h3&gt;Composer&lt;/h3&gt; &#xA;&lt;p&gt;To install php-gedcom in your project using composer, simply add the following require line to your project&#39;s &lt;code&gt;composer.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;require&#34;: {&#xA;        &#34;familytree365/php-gedcom&#34;: &#34;1.0.*&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download and __autoload&lt;/h3&gt; &#xA;&lt;p&gt;If you are not using composer, you can download an archive of the source from GitHub and extract it into your project. You&#39;ll need to setup an autoloader for the files, unless you go through the painstaking process if requiring all the needed files one-by-one. Something like the following should suffice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;spl_autoload_register(function ($class) {&#xA;    $pathToGedcom = __DIR__ . &#39;/library/&#39;; // TODO FIXME&#xA;&#xA;    if (!substr(ltrim($class, &#39;\\&#39;), 0, 7) == &#39;Gedcom\\&#39;) {&#xA;        return;&#xA;    }&#xA;&#xA;    $class = str_replace(&#39;\\&#39;, DIRECTORY_SEPARATOR, $class) . &#39;.php&#39;;&#xA;    if (file_exists($pathToGedcom . $class)) {&#xA;        require_once($pathToGedcom . $class);&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;To parse a GEDCOM file and load it into a collection of PHP Objects, simply instantiate a new Parser object and pass it the file name to parse. The resulting Gedcom object will contain all the information stored within the supplied GEDCOM file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$parser = new \Gedcom\Parser();&#xA;$gedcom = $parser-&amp;gt;parse(&#39;tmp.ged&#39;);&#xA;&#xA;foreach ($gedcom-&amp;gt;getIndi() as $individual) {&#xA;    echo $individual-&amp;gt;getId() . &#39;: &#39; . current($individual-&amp;gt;getName())-&amp;gt;getSurn() .&#xA;        &#39;, &#39; . current($indi-&amp;gt;$individual())-&amp;gt;getGivn();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>