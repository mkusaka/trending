<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-17T01:36:42Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>inspector-apm/neuron-ai</title>
    <updated>2025-06-17T01:36:42Z</updated>
    <id>tag:github.com,2025-06-17:/inspector-apm/neuron-ai</id>
    <link href="https://github.com/inspector-apm/neuron-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The PHP Agent Development Kit to build customizable, production-ready LLM applications. Connect components (models, vector DBs, file converters) to pipelines or agents that can interact with your data. With advanced retrieval methods, it&#39;s best suited for building RAG, question answering, semantic search or conversational agent chatbots.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Create Full-Featured AI Agents As Standalone Components In Any PHP Application&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/inspector-apm/neuron-ai&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/inspector-apm/neuron-ai/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/inspector-apm/neuron-ai&#34;&gt;&lt;img src=&#34;http://poser.pugx.org/inspector-apm/neuron-ai/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Before moving on, support the community giving a GitHub star ⭐️. Thank you!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fJSX8wWIDO8&#34;&gt;&lt;strong&gt;Video Tutorial&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fJSX8wWIDO8&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/docs/images/youtube.png&#34; alt=&#34;Neuron &amp;amp; Inspector&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP: ^8.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Official documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://neuron.inspector.dev/&#34;&gt;Go to the official documentation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Guides &amp;amp; Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;Check out the technical guides and tutorials archive to learn how to start creating your AI Agents with Neuron &lt;a href=&#34;https://docs.neuron-ai.dev/resources/guides-and-tutorials&#34;&gt;https://docs.neuron-ai.dev/resources/guides-and-tutorials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Neuron AI Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#create&#34;&gt;Create an Agent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#talk&#34;&gt;Talk to the Agent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#providers&#34;&gt;Supported LLM Providers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#tools&#34;&gt;Tools &amp;amp; Function Calls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#mcp&#34;&gt;MCP server connector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#rag&#34;&gt;Implement RAG systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#structured&#34;&gt;Structured Output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#monitoring&#34;&gt;Monitoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/#documentation&#34;&gt;Official Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a name=&#34;install&#34;&gt; &lt;h2&gt;Install&lt;/h2&gt; &lt;p&gt;Install the latest version of the package:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;composer require inspector-apm/neuron-ai&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;a name=&#34;create&#34;&gt; &lt;h2&gt;Create an Agent&lt;/h2&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;create&#34;&gt;Neuron provides you with the Agent class you can extend to inherit the main features of the framework and create fully functional agents. This class automatically manages some advanced mechanisms for you, such as memory, tools and function calls, up to the RAG systems. You can go deeper into these aspects in the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev&#34;&gt;documentation&lt;/a&gt;. In the meantime, let&#39;s create the first agent, extending the &lt;code&gt;NeuronAI\Agent&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Neuron;&#xA;&#xA;use NeuronAI\Agent;&#xA;use NeuronAI\SystemPrompt;&#xA;use NeuronAI\Providers\AIProviderInterface;&#xA;use NeuronAI\Providers\Anthropic\Anthropic;&#xA;&#xA;class DataAnalystAgent extends Agent&#xA;{&#xA;    public function provider(): AIProviderInterface&#xA;    {&#xA;        return new Anthropic(&#xA;            key: &#39;ANTHROPIC_API_KEY&#39;,&#xA;            model: &#39;ANTHROPIC_MODEL&#39;,&#xA;        );&#xA;    }&#xA;&#xA;    public function instructions(): string&#xA;    {&#xA;        return new SystemPrompt(&#xA;            background: [&#xA;                &#34;You are a data analyst expert in creating reports from SQL databases.&#34;&#xA;            ]&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;SystemPrompt&lt;/code&gt; class is designed to take your base instructions and build a consistent prompt for the underlying model reducing the effort for prompt engineering.&lt;/p&gt; &#xA;&lt;a name=&#34;talk&#34;&gt; &lt;h2&gt;Talk to the Agent&lt;/h2&gt; &lt;p&gt;Send a prompt to the agent to get a response from the underlying LLM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use NeuronAI\Observability\AgentMonitoring;&#xA;&#xA;// https://docs.neuron-ai.dev/advanced/observability&#xA;$inspector = new \Inspector\Inspector(&#xA;    new \Inspector\Configuration(&#39;INSPECTOR_INGESTION_KEY&#39;)&#xA;);&#xA;&#xA;$agent = DataAnalystAgent::make()-&amp;gt;observe(new AgentMonitoring($inspector));&#xA;&#xA;&#xA;$response = $agent-&amp;gt;chat(&#xA;    new UserMessage(&#34;Hi, I&#39;m Valerio. Who are you?&#34;)&#xA;);&#xA;echo $response-&amp;gt;getContent();&#xA;// I&#39;m a data analyst. How can I help you today?&#xA;&#xA;&#xA;$response = $agent-&amp;gt;chat(&#xA;    new UserMessage(&#34;Do you know my name?&#34;)&#xA;);&#xA;echo $response-&amp;gt;getContent();&#xA;// Your name is Valerio, as you said in your introduction.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;talk&#34;&gt;As you can see in the example above, the Agent automatically has memory of the ongoing conversation. Learn more about memory in the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev/chat-history-and-memory&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;providers&#34;&gt; &lt;h2&gt;Supported LLM Providers&lt;/h2&gt; &lt;p&gt;With NeuronAI, you can switch between LLM providers with just one line of code, without any impact on your agent implementation. Supported providers:&lt;/p&gt; &lt;/a&gt;&#xA;&lt;ul&gt;&#xA; &lt;a name=&#34;providers&#34;&gt; &lt;li&gt;Anthropic&lt;/li&gt; &lt;li&gt;Ollama (also available as an &lt;a href=&#34;https://docs.neuron-ai.dev/components/embeddings-provider#ollama&#34;&gt;embeddings provider&lt;/a&gt;)&lt;/li&gt;&lt;/a&gt; &#xA; &lt;li&gt;OpenAI (also available as an &lt;a href=&#34;https://docs.neuron-ai.dev/components/embeddings-provider#openai&#34;&gt;embeddings provider&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Gemini&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a name=&#34;tools&#34;&gt; &lt;h2&gt;Tools &amp;amp; Toolkits&lt;/h2&gt; &lt;p&gt;You can add abilities to your agent to perform concrete tasks:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Neuron;&#xA;&#xA;use NeuronAI\Agent;&#xA;use NeuronAI\Providers\AIProviderInterface;&#xA;use NeuronAI\Providers\Anthropic\Anthropic;&#xA;use NeuronAI\SystemPrompt;&#xA;use NeuronAI\Tools\ToolProperty;&#xA;use NeuronAI\Tools\Tool;&#xA;use NeuronAI\Tools\Toolkits\MySQL\MySQLToolkit;&#xA;&#xA;class DataAnalystAgent extends Agent&#xA;{&#xA;    public function provider(): AIProviderInterface&#xA;    {&#xA;        return new Anthropic(&#xA;            key: &#39;ANTHROPIC_API_KEY&#39;,&#xA;            model: &#39;ANTHROPIC_MODEL&#39;,&#xA;        );&#xA;    }&#xA;&#xA;    public function instructions(): string&#xA;    {&#xA;        return new SystemPrompt(&#xA;            background: [&#xA;                &#34;You are a data analyst expert in creating reports from SQL databases.&#34;&#xA;            ]&#xA;        );&#xA;    }&#xA;&#xA;    public function tools(): array&#xA;    {&#xA;        return [&#xA;            MySQLToolkit:make(&#xA;                \DB::connection()-&amp;gt;getPdo()&#xA;            ),&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;tools&#34;&gt;Learn more about Tools in the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev/tools-and-function-calls&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;mcp&#34;&gt; &lt;h2&gt;MCP server connector&lt;/h2&gt; &lt;p&gt;Instead of implementing tools manually, you can connect tools exposed by an MCP server with the &lt;code&gt;McpConnector&lt;/code&gt; component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Neuron;&#xA;&#xA;use NeuronAI\Agent;&#xA;use NeuronAI\MCP\McpConnector;&#xA;use NeuronAI\Providers\AIProviderInterface;&#xA;use NeuronAI\Providers\Anthropic\Anthropic;&#xA;use NeuronAI\Tools\ToolProperty;&#xA;use NeuronAI\Tools\Tool;&#xA;&#xA;class DataAnalystAgent extends Agent&#xA;{&#xA;    public function provider(): AIProviderInterface&#xA;    {&#xA;        ...&#xA;    }&#xA;&#xA;    public function instructions(): string&#xA;    {&#xA;        ...&#xA;    }&#xA;&#xA;    public function tools(): array&#xA;    {&#xA;        return [&#xA;            // Connect to an MCP server&#xA;            ...McpConnector::make([&#xA;                &#39;command&#39; =&amp;gt; &#39;npx&#39;,&#xA;                &#39;args&#39; =&amp;gt; [&#39;-y&#39;, &#39;@modelcontextprotocol/server-everything&#39;],&#xA;            ])-&amp;gt;tools(),&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;mcp&#34;&gt;Learn more about MCP connector in the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev/advanced/mcp-servers-connection&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;rag&#34;&gt; &lt;h2&gt;Implement RAG systems&lt;/h2&gt; &lt;p&gt;For RAG use case, you must extend the &lt;code&gt;NeuronAI\RAG\RAG&lt;/code&gt; class instead of the default Agent class.&lt;/p&gt; &lt;p&gt;To create a RAG you need to attach some additional components other than the AI provider, such as a &lt;code&gt;vector store&lt;/code&gt;, and an &lt;code&gt;embeddings provider&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here is an example of a RAG implementation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Neuron;&#xA;&#xA;use NeuronAI\Providers\AIProviderInterface;&#xA;use NeuronAI\Providers\Anthropic\Anthropic;&#xA;use NeuronAI\RAG\Embeddings\EmbeddingsProviderInterface;&#xA;use NeuronAI\RAG\Embeddings\VoyageEmbeddingProvider;&#xA;use NeuronAI\RAG\RAG;&#xA;use NeuronAI\RAG\VectorStore\PineconeVectorStore;&#xA;use NeuronAI\RAG\VectorStore\VectorStoreInterface;&#xA;&#xA;class MyChatBot extends RAG&#xA;{&#xA;    public function provider(): AIProviderInterface&#xA;    {&#xA;        return new Anthropic(&#xA;            key: &#39;ANTHROPIC_API_KEY&#39;,&#xA;            model: &#39;ANTHROPIC_MODEL&#39;,&#xA;        );&#xA;    }&#xA;&#xA;    public function embeddings(): EmbeddingsProviderInterface&#xA;    {&#xA;        return new VoyageEmbeddingProvider(&#xA;            key: &#39;VOYAGE_API_KEY&#39;,&#xA;            model: &#39;VOYAGE_MODEL&#39;&#xA;        );&#xA;    }&#xA;&#xA;    public function vectorStore(): VectorStoreInterface&#xA;    {&#xA;        return new PineconeVectorStore(&#xA;            key: &#39;PINECONE_API_KEY&#39;,&#xA;            indexUrl: &#39;PINECONE_INDEX_URL&#39;&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;rag&#34;&gt;Learn more about RAG in the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev/rag&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;structured&#34;&gt; &lt;h2&gt;Structured Output&lt;/h2&gt; &lt;p&gt;For many applications, such as chatbots, Agents need to respond to users directly in natural language. However, there are scenarios where we need Agents to understand natural language, but output in a structured format.&lt;/p&gt; &lt;p&gt;One common use-case is extracting data from text to insert into a database or use with some other downstream system. This guide covers a few strategies for getting structured outputs from the agent.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use App\Neuron\MyAgent;&#xA;use NeuronAI\Chat\Messages\UserMessage;&#xA;use NeuronAI\StructuredOutput\SchemaProperty;&#xA;use NeuronAI\Observability\AgentMonitoring;&#xA;&#xA;/*&#xA; * Define the output structure as a PHP class.&#xA; */&#xA;class Person&#xA;{&#xA;    #[SchemaProperty(description: &#39;The user name&#39;)]&#xA;    public string $name;&#xA;&#xA;    #[SchemaProperty(description: &#39;What the user love to eat&#39;)]&#xA;    public string $preference;&#xA;}&#xA;&#xA;// https://docs.neuron-ai.dev/advanced/observability&#xA;$inspector = new \Inspector\Inspector(&#xA;    new \Inspector\Configuration(&#39;INSPECTOR_INGESTION_KEY&#39;)&#xA;);&#xA;&#xA;// Talk to the agent requiring the structured output&#xA;$person = MyAgent::make()&#xA;    -&amp;gt;observe(new AgentMonitoring($inspector))&#xA;    -&amp;gt;structured(&#xA;        new UserMessage(&#34;I&#39;m John and I like pizza!&#34;),&#xA;        Person::class&#xA;    );&#xA;&#xA;echo $person-&amp;gt;name &#39; like &#39;.$person-&amp;gt;preference;&#xA;// John like pizza&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;structured&#34;&gt;Learn more about Structured Output on the &lt;/a&gt;&lt;a href=&#34;https://docs.neuron-ai.dev/advanced/structured-output&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;monitoring&#34;&gt; &lt;h2&gt;Monitoring&lt;/h2&gt; &lt;p&gt;Integrating AI Agents into your application you’re not working only with functions and deterministic code, you program your agent also influencing probability distributions. Same input ≠ output. That means reproducibility, versioning, and debugging become real problems.&lt;/p&gt; &lt;p&gt;Many of the Agents you build with NeuronAI will contain multiple steps with multiple invocations of LLM calls, tool usage, access to external memories, etc. As these applications get more and more complex, it becomes crucial to be able to inspect what exactly your agent is doing and why.&lt;/p&gt; &lt;p&gt;Why is the model taking certain decisions? What data is the model reacting to? Prompting is not programming in the common sense. No static types, small changes break output, long prompts cost latency, and no two models behave exactly the same with the same prompt.&lt;/p&gt; &lt;p&gt;The Inspector team designed NeuronAI with built-in observability features, so you can monitor AI agents were running, helping you maintain production-grade implementations with confidence.&lt;/p&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;monitoring&#34;&gt;You have to install the Inspector package based on your development environment. We provide integration packages for &lt;/a&gt;&lt;a href=&#34;https://github.com/inspector-apm/inspector-php&#34;&gt;PHP&lt;/a&gt;, &lt;a href=&#34;https://github.com/inspector-apm/inspector-laravel&#34;&gt;Laravel&lt;/a&gt;, &lt;a href=&#34;https://github.com/inspector-apm/inspector-symfony&#34;&gt;Symfony&lt;/a&gt;, &lt;a href=&#34;https://github.com/inspector-apm/inspector-codeigniter&#34;&gt;CodeIgniter&lt;/a&gt;, &lt;a href=&#34;https://git.drupalcode.org/project/inspector_monitoring&#34;&gt;Drupal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Attach the &lt;code&gt;AgentMonitoring&lt;/code&gt; component to the agent to monitor the internal execution timeline in the Inspector dashboard. If the agent fires an error, you will be alerted in real-time. You can connect several notification channels like email, slack, discord, telegram, and more. Here is a code example in a legacy PHP script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use NeuronAI\Observability\AgentMonitoring;&#xA;&#xA;// https://docs.neuron-ai.dev/advanced/observability&#xA;$inspector = new \Inspector\Inspector(&#xA;    new \Inspector\Configuration(&#39;INSPECTOR_INGESTION_KEY&#39;)&#xA;);&#xA;&#xA;// Attach monitoring to the Agent&#xA;$response = MyAgent::make()&#xA;    -&amp;gt;observe(new AgentMonitoring($inspector))&#xA;    -&amp;gt;chat(...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/inspector-apm/neuron-ai/main/docs/img/neuron-observability.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you use a framework like Laravel, Symfony, or CodeIgniter, the connection is even easier, since you already have the Inspector instance in the container.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Learn more about Monitoring in the &lt;a href=&#34;https://docs.neuron-ai.dev/advanced/observability&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a name=&#34;documentation&#34;&gt; &lt;h2&gt;Official documentation&lt;/h2&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;documentation&#34;&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&#34;https://neuron.inspector.dev/&#34;&gt;Go to the official documentation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>