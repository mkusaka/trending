<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-25T01:38:14Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alexjustesen/speedtest-tracker</title>
    <updated>2022-10-25T01:38:14Z</updated>
    <id>tag:github.com,2022-10-25:/alexjustesen/speedtest-tracker</id>
    <link href="https://github.com/alexjustesen/speedtest-tracker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Speedtest Tracker is a self-hosted internet performance tracking application that runs speedtest checks against Ookla&#39;s Speedtest service. Build using Laravel and the Speedtest CLI.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Speedtest Tracker&lt;/h2&gt; &#xA;&lt;p&gt;Speedtest Tracker is a self-hosted internet performance tracking application that runs speedtest checks against Ookla&#39;s Speedtest service.&lt;/p&gt; &#xA;&lt;h3&gt;Why might I use this?&lt;/h3&gt; &#xA;&lt;p&gt;The main use case for Speedtest Tracker is to build a history of your internet&#39;s performance so that you can be informed when you&#39;re not receiving your ISP&#39;s advertised rates.&lt;/p&gt; &#xA;&lt;h3&gt;What about that other Speedtest Tracker?&lt;/h3&gt; &#xA;&lt;p&gt;As far as I can tell &lt;a href=&#34;https://github.com/henrywhitaker3/Speedtest-Tracker&#34;&gt;https://github.com/henrywhitaker3/Speedtest-Tracker&lt;/a&gt; was abandoned. This version is meant to be an actively maintained replacement with an improved UI and feature set.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation and Features&lt;/h3&gt; &#xA;&lt;p&gt;The docs can be found here &lt;a href=&#34;https://docs.speedtest-tracker.dev&#34;&gt;https://docs.speedtest-tracker.dev&lt;/a&gt; to help you get started and also contains a full list of features.&lt;/p&gt; &#xA;&lt;h3&gt;Screenshots&lt;/h3&gt; &#xA;&lt;h4&gt;Dashboard&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alexjustesen/speedtest-tracker/main/.github/screenshots/dashboard_screenshot.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Results page&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alexjustesen/speedtest-tracker/main/.github/screenshots/results_screenshot.png&#34; alt=&#34;Results page&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;General Settings page&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alexjustesen/speedtest-tracker/main/.github/screenshots/general_settings_screenshot.png&#34; alt=&#34;General Settings page&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>surgiie/transformer</title>
    <updated>2022-10-25T01:38:14Z</updated>
    <id>tag:github.com,2022-10-25:/surgiie/transformer</id>
    <link href="https://github.com/surgiie/transformer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A package for sanitizing/formatting data, powered by Laravel&#39;s validation components.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;transformer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/surgiie/transformer/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;transformer&lt;/code&gt; is a php package for transforming values or input. Powered by the &lt;a href=&#34;https://laravel.com&#34;&gt;Laravel&lt;/a&gt; framework&#39;s validation components.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require surgiie/transformer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;p&gt;The most basic use is simple, just pass your data and array of callable functions that your data should be called against:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Closure;&#xA;&#xA;// example available functions at runtime:&#xA;function to_carbon($value)&#xA;{&#xA;    return new Carbon\Carbon($value);&#xA;}&#xA;&#xA;function only_numbers($value)&#xA;{&#xA;    return preg_replace(&#34;/[^0-9]/&#34;,&#39;&#39;,$value);&#xA;}&#xA;&#xA;$input = [&#xA;  &#39;first_name&#39;=&amp;gt;&#39;    jim    &#39;,&#xA;  &#39;last_name&#39;=&amp;gt;&#39;   thompson&#39;,&#xA;  &#39;phone_number&#39;=&amp;gt;&#39;123-456-7890&#39;,&#xA;  &#39;date_of_birth&#39;=&amp;gt;&#34;1991-05-01&#34;,&#xA;];&#xA;&#xA;$transformers = [&#xA;    &#39;first_name&#39;=&amp;gt;&#39;trim|ucfirst&#39;,&#xA;    &#39;last_name&#39;=&amp;gt;&#39;trim|ucfirst&#39;,&#xA;    &#39;phone_number&#39;=&amp;gt;&#39;only_numbers&#39;,&#xA;    &#39;date_of_birth&#39;=&amp;gt;&#39;to_carbon|-&amp;gt;format:m/d/y&#39;, // more on &#34;object values and method chaining below:&#34;&#xA;];&#xA;&#xA;$transformer = new DataTransformer($input, $transformers);&#xA;&#xA;$newData = $transformer-&amp;gt;transform();&#xA;// Returns:&#xA;// [&#xA;//     &#34;first_name&#34; =&amp;gt; &#34;Jim&#34;,&#xA;//     &#34;last_name&#34; =&amp;gt; &#34;Thompson&#34;,&#xA;//     &#34;phone_number&#34; =&amp;gt; &#34;1234567890&#34;,&#xA;//     &#34;date_of_birth&#34; =&amp;gt; &#34;05/01/91&#34;,&#xA;// ]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the syntax is very similiar to the &lt;a href=&#34;https://laravel.com/docs/9.x/validation&#34;&gt;laravel validation&lt;/a&gt; syntax. Again, this is because this package is powered by the same components, so when writing code that is combined with validation, the syntax and code is consistent and fluent.&lt;/p&gt; &#xA;&lt;h3&gt;Passing Arguments/Specifying Value Argument Order&lt;/h3&gt; &#xA;&lt;p&gt;Arguments can be specified to your functions using a &lt;code&gt;&amp;lt;function&amp;gt;:&amp;lt;comma-delimited-list&amp;gt;&lt;/code&gt; syntax. An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;$transformers = [&#xA;    &#39;example&#39;=&amp;gt;&#39;your_function:arg1,arg2&#39;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, your function will be passed the value being formatted as the first argument then will pass the arguments in the order you specify them. However, if your function does not accept the value as the first argument, you may use the &lt;code&gt;:value:&lt;/code&gt; placeholder to specify order. For example, &lt;code&gt;preg_replace&lt;/code&gt; accepts the value to change as the 3rd argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;$input = [&#39;phone_number&#39;=&amp;gt;&#39;123-456-3235&#39;];&#xA;$transformers = [&#xA;    &#39;example&#39;=&amp;gt;&#39;preg_replace:/[^0-9]/,,:value:&#39;,&#xA;];&#xA;&#xA;$transformer = new DataTransformer($input, $transformers);&#xA;$transformer-&amp;gt;transform();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional Transformation/Blank Input&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you may only want to transform a value if the value isnt null or &#34;blank&#34;. You can specify a &lt;code&gt;?&lt;/code&gt; anywhere in the chain of functions to specify if we should break out of processing functions when the input is blank. Often times, this should be defined in front of all your functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$input = [&#39;first_name&#39;=&amp;gt;null];&#xA;&#xA;$transformers = [&#xA;    &#39;example&#39;=&amp;gt;&#39;?|function_one|function_two&#39;,&#xA;];&#xA;// no functions will be processed because first_name is null.&#xA;$transformer = new DataTransformer($input, $transformers);&#xA;$transformer-&amp;gt;transform();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This packages uses Laravel&#39;s &lt;a href=&#34;https://laravel.com/docs/8.x/helpers#method-blank&#34;&gt;blank&lt;/a&gt; helper to determine blank/empty values. If you have more complicated logic to break out of rules, use a closure or a &lt;code&gt;\Surgiie\Transformer\Contracts\Transformable&lt;/code&gt; class and call the 2nd argument exit callback:&lt;/p&gt; &#xA;&lt;h3&gt;Closures/Transformable Classes&lt;/h3&gt; &#xA;&lt;p&gt;You can use closures for transforming your value as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;$input = [&#39;first_name&#39;=&amp;gt;&#39; Bob&#39;];&#xA;$transformers = [&#xA;    &#39;first_name&#39;=&amp;gt;[&#39;trim&#39;, function ($value) {&#xA;        // change the value.&#xA;        return $value;&#xA;    }],&#xA;]&#xA;&#xA;$transformer = new DataTransformer($input, $transformers);&#xA;$transformer-&amp;gt;transform();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can also implement the &lt;code&gt;Surgiie\Transformer\Contracts\Transformable&lt;/code&gt; contract and use class instances:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Surgiie\Transformer\DataTransformer;&#xA;use Surgiie\Transformer\Contracts\Transformable;&#xA;&#xA;class TransformValue implements Transformable&#xA;{&#xA;&#xA;    public function transform($value, Closure $exit)&#xA;    {&#xA;        // quit transforming value(s)&#xA;        if($someCondition){&#xA;            $exit(); // equivalent to ? documented above&#xA;        }&#xA;&#xA;        // or change the $value&#xA;        $value = &#34;Changed&#34;;&#xA;&#xA;        return $value;&#xA;    }&#xA;}&#xA;&#xA;$input = [&#39;first_name&#39; =&amp;gt; &#39; Bob&#39;];&#xA;$transformers = [&#xA;    &#39;first_name&#39; =&amp;gt; [&#39;trim&#39;, new TransformValue],&#xA;];&#xA;$transformer = new DataTransformer($input, $transformers);&#xA;$transformer-&amp;gt;transform();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Array Input&lt;/h3&gt; &#xA;&lt;p&gt;You may also format nested array data using dot notation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;$input = [&#xA;    &#39;contact_info&#39;=&amp;gt;[&#xA;        &#39;first_name&#39;=&amp;gt;&#39;    jim    &#39;,&#xA;        &#39;last_name&#39;=&amp;gt;&#39;   thompson&#39;,&#xA;        &#39;phone_number&#39;=&amp;gt;&#39;123-456-7890&#39;,&#xA;        &#39;address&#39;=&amp;gt;&#39;123 some lane.&#39;&#xA;    ]&#xA;];&#xA;&#xA;$transformers = [&#xA;    &#39;contact_info.first_name&#39;=&amp;gt;&#39;trim|ucwords&#39;,&#xA;    &#39;contact_info.last_name&#39;=&amp;gt;&#39;trim|ucwords&#39;,&#xA;    &#39;contact_info.phone_number&#39;=&amp;gt;&#39;preg_replace:/[^0-9]/,,:value:&#39;,&#xA;    &#39;contact_info.address&#39;=&amp;gt;[function ($address) {&#xA;        return &#39;Address Is: &#39;.$address;&#xA;    }],&#xA;];&#xA;&#xA;$transformer = new DataTransformer($input, $transformers);&#xA;&#xA;$transformer-&amp;gt;transform();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wildcards&lt;/h3&gt; &#xA;&lt;p&gt;Wildcards are also supported, for applying functions on keys that match a wildcard pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;$input = [&#xA;    &#39;first_name&#39;=&amp;gt;&#39;    jim    &#39;,&#xA;    &#39;last_name&#39;=&amp;gt;&#39;   thompson&#39;,&#xA;    &#39;ignored&#39;=&amp;gt;&#39; i-will-be-the-same&#39;&#xA;];&#xA;$transformers = [&#xA;    //apply to all keys that contain &#34;name&#34;&#xA;    &#39;*name*&#39;=&amp;gt;&#39;trim|ucwords&#39;,&#xA;];&#xA;&#xA;$transformer = new DataTransformer($input, $transformers);&#xA;$transformer-&amp;gt;transform();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Object Values/Method Delegation&lt;/h3&gt; &#xA;&lt;p&gt;In our first example above, we used an example of passing a value that creates a &lt;a href=&#34;https://carbon.nesbot.com/docs/&#34;&gt;Carbon&lt;/a&gt; instance then calls the &lt;code&gt;format&lt;/code&gt; method on that instance.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to delegate a function call to the value if it has been converted to instance. Using a &lt;code&gt;-&amp;gt;&amp;lt;methodName&amp;gt;&lt;/code&gt; convention you can specify method chaining on that instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;&amp;lt;?php&#xA;&#xA;use Closure;&#xA;&#xA;// example available functions at runtime:&#xA;function to_carbon($value)&#xA;{&#xA;    return new Carbon\Carbon($value);&#xA;}&#xA;&#xA;$input = [&#xA;  &#39;some_date&#39;=&amp;gt;&#34;1991-05-01&#34;,&#xA;];&#xA;&#xA;$transformers = [&#xA;    &#39;some_date&#39;=&amp;gt;&#39;to_carbon|-&amp;gt;addDay:1|-&amp;gt;format:m/d/y&#39;,&#xA;];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to use class constants that accept a single value as it&#39;s constructor, for example, the above example, can also be written as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;&amp;lt;?php&#xA;&#xA;$input = [&#xA;  &#39;some_date&#39;=&amp;gt;&#34;1991-05-01&#34;,&#xA;];&#xA;&#xA;$transformers = [&#xA;    &#39;some_date&#39;=&amp;gt;[Carbon\Carbon::class, &#39;-&amp;gt;addDay:1&#39;, &#39;-&amp;gt;format:m/d/y&#39;],&#xA;];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Guard Layer Over Execution&lt;/h3&gt; &#xA;&lt;p&gt;By default, all available functions that are callable at runtime will be executed but if you have concerns about this or want to add a protection/security layer that prevents certain methods from being called, you may easily add a guard callback that checks if a method should be called by returning true:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Surgiie\Transformer\DataTransformer;&#xA;use Surgiie\Transformer\Transformer;&#xA;&#xA;// accepts the function name being executed and the key/name of the input being processed:&#xA;Transformer::guard(function($method, $key){&#xA;    // only &#34;trim&#34; is allowed to be executed&#xA;    return in_array($method, [&#39;trim&#39;]);&#xA;});&#xA;&#xA;$input = [&#xA;    &#39;first_name&#39;=&amp;gt;&#39;    jim    &#39;,&#xA;];&#xA;&#xA;$transformers = [&#xA;    &#39;first_name&#39;=&amp;gt;&#39;trim|ucwords&#39;,&#xA;];&#xA;&#xA;&#xA;$transformer = new DataTransformer($input, $transformers);&#xA;&#xA;// throws a Surgiie\Transformer\Exceptions\ExecutionNotAllowedException once it gets to ucwords due to the guard method.&#xA;$transformer-&amp;gt;transform();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually Transforming Values/Single Values&lt;/h3&gt; &#xA;&lt;p&gt;If you have a simple one off value to format, you can use the &lt;code&gt;Transformer&lt;/code&gt; class manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;&#xA;use Surgiie\Transformer\Transformer;&#xA;&#xA;$transformer = new Transformer(&#34;   uncle bob   &#34;, [&#39;trim&#39;, &#39;ucwords&#39;]);&#xA;&#xA;$transformer-&amp;gt;transform(); // returns &#34;Uncle Bob&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use Traits&lt;/h3&gt; &#xA;&lt;p&gt;If you want to transform data and values on the fly quickly in your classes, you can utilize the &lt;code&gt;\Surgiie\Transformer\Concerns\UsesTransformer&lt;/code&gt; trait:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use App\Http\Controllers\Controller;&#xA;use Illuminate\Http\Request;&#xA;use Surgiie\Transformer\Concerns\UsesTransformer;&#xA;&#xA;class ExampleController extends Controller&#xA;{&#xA;    use UsesTransfomer;&#xA;&#xA;    public function store(Request $request)&#xA;    {&#xA;        //...&#xA;&#xA;        // transform a single value&#xA;        $newValue = $this-&amp;gt;transform(&#34; example  &#34;, [&#39;trim|ucwords&#39;])&#xA;        // or transform an array of data&#xA;        $newData = $this-&amp;gt;transformData([&#39;example&#39;=&amp;gt; &#39;datat    &#39;], [&#34;example&#34;=&amp;gt;&#39;trim|ucwords&#39;]);&#xA;&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use the Request macro&lt;/h3&gt; &#xA;&lt;p&gt;You can also utilize a macro on a &lt;code&gt;Illuminate\Http\Request&lt;/code&gt; object instance by calling the &lt;code&gt;transform()&lt;/code&gt; function on the request itself, returning the resulting transform.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function store(Request $request)&#xA;{&#xA;    // Using the data that is in the request object (i.e. `$request-&amp;gt;all()`)&#xA;    $transformedData = $request-&amp;gt;transform([&#xA;        &#39;first_name&#39; =&amp;gt; [&#39;strtoupper&#39;],&#xA;    ]);&#xA;&#xA;    // $transformedData[&#39;first_name&#39;] will be all uppercase&#xA;    // all other data will be included from the request&#xA;&#xA;    // You can also customize the input that is transformed,&#xA;    // in this case $transformedData will only have the `first_name` key.&#xA;    $transformedData = $request-&amp;gt;transform($request-&amp;gt;only([&#39;first_name&#39;]), [&#xA;        &#39;first_name&#39; =&amp;gt; [&#39;strtoupper&#39;],&#xA;    ]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If calling on a &lt;code&gt;FormRequest&lt;/code&gt; object, it will use the &lt;code&gt;validated()&lt;/code&gt; function to retrieve the input data. &lt;strong&gt;Note&lt;/strong&gt; that this does require the data you are targeting to be defined as a validation rule in your form request&#39;s &lt;code&gt;rules&lt;/code&gt; function, otherwise the data will be omitted from transformation.&lt;/p&gt; &#xA;&lt;h4&gt;Package Discovery/Dont Discover&lt;/h4&gt; &#xA;&lt;p&gt;Laravel by default will automatically register the package service provider, but if you don&#39;t want to include the macro, you can ignore package discovery for the service provider by including the following in your &lt;code&gt;composer.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;extra&#34;: {&#xA;    &#34;laravel&#34;: {&#xA;        &#34;dont-discover&#34;: [&#xA;            &#34;surgiie/transformer&#34;&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome in the following manner:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Issue Tracker&lt;/li&gt; &#xA; &lt;li&gt;Pull Requests&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>