<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-09T01:38:41Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>leokhoa/laragon</title>
    <updated>2022-09-09T01:38:41Z</updated>
    <id>tag:github.com,2022-09-09:/leokhoa/laragon</id>
    <link href="https://github.com/leokhoa/laragon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Laragon is a portable, isolated, fast &amp; powerful universal development environment for PHP, Node.js, Python, Java, Go, Ruby. It is fast, lightweight, easy-to-use and easy-to-extend.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Laragon - The Dev Environment for Web Artisans&lt;/h1&gt; &#xA;&lt;h2&gt;What is Laragon?&lt;/h2&gt; &#xA;&lt;p&gt;Laragon is a portable, isolated, fast &amp;amp; powerful universal development environment for PHP, Node.js, Python, Java, Go, Ruby. It is fast, lightweight, easy-to-use and easy-to-extend.&lt;/p&gt; &#xA;&lt;p&gt;Laragon is great for building and managing modern web applications. It is focused on performance - designed around stability, simplicity, flexibility and freedom.&lt;/p&gt; &#xA;&lt;p&gt;Laragon is very lightweight and will stay as lean as possible. The core binary itself is less than 2MB and uses less than 4MB RAM when running.&lt;/p&gt; &#xA;&lt;p&gt;Laragon doesn&#39;t use Windows services. It has its own &lt;code&gt;service orchestration&lt;/code&gt; which manages services asynchronously and non-blocking so you&#39;ll find things run fast &amp;amp; smoothly with Laragon.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pretty URLs&lt;/strong&gt; Use &lt;code&gt;app.test&lt;/code&gt; instead of &lt;code&gt;localhost/app&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portable&lt;/strong&gt; You can move Laragon folder around (to another disks, to another laptops, sync to Cloud,...) without any worries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Isolated&lt;/strong&gt; Laragon has an isolated environment with your OS - it will keep your system clean.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy Operation&lt;/strong&gt; Unlike others which pre-config for you, Laragon &lt;strong&gt;&lt;code&gt;auto-configs&lt;/code&gt;&lt;/strong&gt; all the complicated things. That why you can add another versions of PHP, Python, Ruby, Java, Go, Apache, Nginx, MySQL, PostgreSQL, MongoDB,... effortlessly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modern &amp;amp; Powerful&lt;/strong&gt; Laragon comes with modern architect which is suitable to build modern web apps. You can work with both Apache &amp;amp; Nginx as they are fully-managed. Also, Laragon makes things a lot easier: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Wanna have a Wordpress CMS? Just 1 click.&lt;/li&gt; &#xA;   &lt;li&gt;Wanna show your local project to customers? Just 1 click.&lt;/li&gt; &#xA;   &lt;li&gt;Wanna enable/disable a PHP extension? Just 1 click.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Laragon is trully isolated &amp;amp; portable. However, you may need to use the installer as it will detect and install missing run-time components that are required to run C++ applications built using Visual Studio such as &lt;code&gt;PHP, Apache&lt;/code&gt; for you.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How fast?&lt;/h2&gt; &#xA;&lt;p&gt;Laragon starts instantly. You can set Laragon autorun when Windows starts. When running, Laragon uses just a little amount of your RAM. Here is the GUI of Laragon: &lt;img src=&#34;https://i.imgur.com/f8rBqSU.png&#34; alt=&#34;0_1513173700919_01-dashboard.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How easy?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Laragon is very easy to install &amp;amp; upgrade. Just download the latest version and click &lt;code&gt;Next, Next, Next...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Laragon is very easy to use. Most of the time it will work out-of-the-box without the need to touch any configuration files.&lt;/li&gt; &#xA; &lt;li&gt;Laragon is very easy to extend. You can add other services to your current stack by just extracting them to &lt;code&gt;Laragon&#39;s bin&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>EasyCorp/EasyAdminBundle</title>
    <updated>2022-09-09T01:38:41Z</updated>
    <id>tag:github.com,2022-09-09:/EasyCorp/EasyAdminBundle</id>
    <link href="https://github.com/EasyCorp/EasyAdminBundle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EasyAdmin is a fast, beautiful and modern admin generator for Symfony applications.&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Due to the overwhelming amount of pending issues and pull requests, users can no longer interact with this repository (add comments, open issues, or create pull requests) during the entire month of July 2022. Users who committed to this repository in the past can still interact with it. We&#39;re sorry but we had to do this to take care of the mental health our maintainers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;EasyAdmin&lt;/h1&gt; &#xA;&lt;p&gt;EasyAdmin is a fast, beautiful and modern admin generator for Symfony applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EasyCorp/EasyAdminBundle/4.x/doc/images/easyadmin-promo.jpg&#34; alt=&#34;EasyAdmin, a fast, beautiful and modern admin generator for Symfony applications&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;EasyAdmin 4 requires PHP 8.0.2 or higher and Symfony 5.4 or higher. Run the following command to install it in your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ composer require easycorp/easyadmin-bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://symfony.com/doc/4.x/bundles/EasyAdminBundle/index.html&#34;&gt;EasyAdmin Docs&lt;/a&gt; on the official Symfony website&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://symfonycasts.com/screencast/easyadminbundle&#34;&gt;EasyAdmin video tutorial&lt;/a&gt; on SymfonyCasts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Repository Branch&lt;/th&gt; &#xA;   &lt;th&gt;EasyAdmin Version&lt;/th&gt; &#xA;   &lt;th&gt;Symfony Compatibility&lt;/th&gt; &#xA;   &lt;th&gt;PHP Compatibility&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Docs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;4.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;4.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5.4&lt;/code&gt;, and &lt;code&gt;6.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;8.0.2&lt;/code&gt; or higher&lt;/td&gt; &#xA;   &lt;td&gt;New features and bug fixes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://symfony.com/bundles/EasyAdminBundle/master/index.html&#34;&gt;Read Docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;3.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;3.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;4.4&lt;/code&gt;, and &lt;code&gt;5.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;7.2.5&lt;/code&gt; or higher&lt;/td&gt; &#xA;   &lt;td&gt;Bug fixes only; no new features&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://symfony.com/bundles/EasyAdminBundle/3.x/index.html&#34;&gt;Read Docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;2.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;4.x&lt;/code&gt;, and &lt;code&gt;5.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;7.1.3&lt;/code&gt; or higher&lt;/td&gt; &#xA;   &lt;td&gt;No longer maintained&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://symfony.com/bundles/EasyAdminBundle/2.x/index.html&#34;&gt;Read Docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2.x&lt;/code&gt;, &lt;code&gt;3.x&lt;/code&gt; and &lt;code&gt;4.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5.3.0&lt;/code&gt; or higher&lt;/td&gt; &#xA;   &lt;td&gt;No longer maintained&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Demo Application&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/EasyCorp/easyadmin-demo&#34;&gt;easyadmin-demo&lt;/a&gt; is a complete Symfony application that showcases EasyAdmin features. It&#39;s based on the &lt;a href=&#34;https://github.com/symfony/demo&#34;&gt;Symfony Demo&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This software is published under the &lt;a href=&#34;https://raw.githubusercontent.com/EasyCorp/EasyAdminBundle/4.x/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spatie/laravel-package-tools</title>
    <updated>2022-09-09T01:38:41Z</updated>
    <id>tag:github.com,2022-09-09:/spatie/laravel-package-tools</id>
    <link href="https://github.com/spatie/laravel-package-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for creating Laravel packages&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://supportukrainenow.org&#34;&gt;&lt;img src=&#34;https://github-ads.s3.eu-central-1.amazonaws.com/support-ukraine.svg?t=1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tools for creating Laravel packages&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/spatie/laravel-package-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/spatie/laravel-package-tools.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/spatie/laravel-package-tools/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/spatie/laravel-package-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/spatie/laravel-package-tools.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package contains a &lt;code&gt;PackageServiceProvider&lt;/code&gt; that you can use in your packages to easily register config files, migrations, and more.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how it can be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\LaravelPackageTools\PackageServiceProvider;&#xA;use Spatie\LaravelPackageTools\Package;&#xA;use MyPackage\ViewComponents\Alert;&#xA;use Spatie\LaravelPackageTools\Commands\InstallCommand;&#xA;&#xA;class YourPackageServiceProvider extends PackageServiceProvider&#xA;{&#xA;    public function configurePackage(Package $package): void&#xA;    {&#xA;        $package&#xA;            -&amp;gt;name(&#39;your-package-name&#39;)&#xA;            -&amp;gt;hasConfigFile()&#xA;            -&amp;gt;hasViews()&#xA;            -&amp;gt;hasViewComponent(&#39;spatie&#39;, Alert::class)&#xA;            -&amp;gt;hasViewComposer(&#39;*&#39;, MyViewComposer::class)&#xA;            -&amp;gt;sharesDataWithAllViews(&#39;downloads&#39;, 3)&#xA;            -&amp;gt;hasTranslations()&#xA;            -&amp;gt;hasAssets()&#xA;            -&amp;gt;publishesServiceProvider(&#39;MyProviderName&#39;)&#xA;            -&amp;gt;hasRoute(&#39;web&#39;)&#xA;            -&amp;gt;hasMigration(&#39;create_package_tables&#39;)&#xA;            -&amp;gt;hasCommand(YourCoolPackageCommand::class)&#xA;            -&amp;gt;hasInstallCommand(function(InstallCommand $command) {&#xA;                $command&#xA;                    -&amp;gt;publishConfigFile()&#xA;                    -&amp;gt;publishMigrations()&#xA;                    -&amp;gt;copyAndRegisterServiceProviderInApp()&#xA;                    -&amp;gt;askToStarRepoOnGitHub()&#xA;            });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Under the hood it will do the necessary work to register the necessary things and make all sorts of files publishable.&lt;/p&gt; &#xA;&lt;h2&gt;Support us&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spatie.be/github-ad-click/laravel-package-tools&#34;&gt;&lt;img src=&#34;https://github-ads.s3.eu-central-1.amazonaws.com/laravel-package-tools.jpg?t=1&#34; width=&#34;419px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We invest a lot of resources into creating &lt;a href=&#34;https://spatie.be/open-source&#34;&gt;best in class open source packages&lt;/a&gt;. You can support us by &lt;a href=&#34;https://spatie.be/open-source/support-us&#34;&gt;buying one of our paid products&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You&#39;ll find our address on &lt;a href=&#34;https://spatie.be/about-us&#34;&gt;our contact page&lt;/a&gt;. We publish all received postcards on &lt;a href=&#34;https://spatie.be/open-source/postcards&#34;&gt;our virtual postcard wall&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;This package is opinionated on how you should structure your package. To get started easily, consider using &lt;a href=&#34;https://github.com/spatie/package-skeleton-laravel&#34;&gt;our package-skeleton repo&lt;/a&gt; to start your package. The skeleton is structured perfectly to work perfectly with the &lt;code&gt;PackageServiceProvider&lt;/code&gt; in this package.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In your package you should let your service provider extend &lt;code&gt;Spatie\LaravelPackageTools\PackageServiceProvider&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\LaravelPackageTools\PackageServiceProvider;&#xA;use Spatie\LaravelPackageTools\Package;&#xA;&#xA;class YourPackageServiceProvider extends PackageServiceProvider&#xA;{&#xA;    public function configurePackage(Package $package) : void&#xA;    {&#xA;        $package-&amp;gt;name(&#39;your-package-name&#39;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Passing the package name to &lt;code&gt;name&lt;/code&gt; is mandatory.&lt;/p&gt; &#xA;&lt;h3&gt;Working with a config file&lt;/h3&gt; &#xA;&lt;p&gt;To register a config file, you should create a php file with your package name in the &lt;code&gt;config&lt;/code&gt; directory of your package. In this example it should be at &lt;code&gt;&amp;lt;package root&amp;gt;/config/your-package-name.php&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your package name starts with &lt;code&gt;laravel-&lt;/code&gt;, we expect that your config file does not contain that prefix. So if your package name is &lt;code&gt;laravel-cool-package&lt;/code&gt;, the config file should be named &lt;code&gt;cool-package.php&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To register that config file, call &lt;code&gt;hasConfigFile()&lt;/code&gt; on &lt;code&gt;$package&lt;/code&gt; in the &lt;code&gt;configurePackage&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasConfigFile();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;hasConfigFile&lt;/code&gt; method will also make the config file publishable. Users of your package will be able to publish the config file with this command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=your-package-name-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Should your package have multiple config files, you can pass their names as an array to &lt;code&gt;hasConfigFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasConfigFile([&#39;my-config-file&#39;, &#39;another-config-file&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with views&lt;/h3&gt; &#xA;&lt;p&gt;Any views your package provides, should be placed in the &lt;code&gt;&amp;lt;package root&amp;gt;/resources/views&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;You can register these views with the &lt;code&gt;hasViews&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasViews();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will register your views with Laravel.&lt;/p&gt; &#xA;&lt;p&gt;If you have a view &lt;code&gt;&amp;lt;package root&amp;gt;/resources/views/myView.blade.php&lt;/code&gt;, you can use it like this: &lt;code&gt;view(&#39;your-package-name::myView&#39;)&lt;/code&gt;. Of course, you can also use subdirectories to organise your views. A view located at &lt;code&gt;&amp;lt;package root&amp;gt;/resources/views/subdirectory/myOtherView.blade.php&lt;/code&gt; can be used with &lt;code&gt;view(&#39;your-package-name::subdirectory.myOtherView&#39;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Using a custom view namespace&lt;/h4&gt; &#xA;&lt;p&gt;You can pass a custom view namespace to the &lt;code&gt;hasViews&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasViews(&#39;custom-view-namespace&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now use the views of the package like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;view(&#39;custom-view-namespace::myView&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Publishing the views&lt;/h4&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;hasViews&lt;/code&gt; will also make views publishable. Users of your package will be able to publish the views with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=your-package-name-views&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sharing global data with views&lt;/h3&gt; &#xA;&lt;p&gt;You can share data with all views using the &lt;code&gt;sharesDataWithAllViews&lt;/code&gt; method. This will make the shared variable available to all views.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;sharesDataWithAllViews(&#39;companyName&#39;, &#39;Spatie&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with Blade view components&lt;/h3&gt; &#xA;&lt;p&gt;Any Blade view components that your package provides should be placed in the &lt;code&gt;&amp;lt;package root&amp;gt;/src/Components&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;You can register these views with the &lt;code&gt;hasViewComponents&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasViewComponents(&#39;spatie&#39;, Alert::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will register your view components with Laravel. In the case of &lt;code&gt;Alert::class&lt;/code&gt;, it can be referenced in views as &lt;code&gt;&amp;lt;x-spatie-alert /&amp;gt;&lt;/code&gt;, where &lt;code&gt;spatie&lt;/code&gt; is the prefix you provided during registration.&lt;/p&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;hasViewComponents&lt;/code&gt; will also make view components publishable, and will be published to &lt;code&gt;app/Views/Components/vendor/&amp;lt;package name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Users of your package will be able to publish the view components with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=your-package-name-components&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with view composers&lt;/h3&gt; &#xA;&lt;p&gt;You can register any view composers that your project uses with the &lt;code&gt;hasViewComposers&lt;/code&gt; method. You may also register a callback that receives a &lt;code&gt;$view&lt;/code&gt; argument instead of a classname.&lt;/p&gt; &#xA;&lt;p&gt;To register a view composer with all views, use an asterisk as the view name &lt;code&gt;&#39;*&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasViewComposer(&#39;viewName&#39;, MyViewComposer::class)&#xA;    -&amp;gt;hasViewComposer(&#39;*&#39;, function($view) { &#xA;        $view-&amp;gt;with(&#39;sharedVariable&#39;, 123); &#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with translations&lt;/h3&gt; &#xA;&lt;p&gt;Any translations your package provides, should be placed in the &lt;code&gt;&amp;lt;package root&amp;gt;/resources/lang/&amp;lt;language-code&amp;gt;&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;You can register these translations with the &lt;code&gt;hasTranslations&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasTranslations();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will register the translations with Laravel.&lt;/p&gt; &#xA;&lt;p&gt;Assuming you save this translation file at &lt;code&gt;&amp;lt;package root&amp;gt;/resources/lang/en/translations.php&lt;/code&gt;...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return [&#xA;    &#39;translatable&#39; =&amp;gt; &#39;translation&#39;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... your package and users will be able to retrieve the translation with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;trans(&#39;your-package-name::translations.translatable&#39;); // returns &#39;translation&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your package name starts with &lt;code&gt;laravel-&lt;/code&gt; then you should leave that off in the example above.&lt;/p&gt; &#xA;&lt;p&gt;Coding with translation strings as keys, you should create JSON files in &lt;code&gt;&amp;lt;package root&amp;gt;/resources/lang/&amp;lt;language-code&amp;gt;.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, creating &lt;code&gt;&amp;lt;package root&amp;gt;/resources/lang/it.json&lt;/code&gt; file like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;Hello!&#34;: &#34;Ciao!&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...the output of...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;trans(&#39;Hello!&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...will be &lt;code&gt;Ciao!&lt;/code&gt; if the application uses the Italian language.&lt;/p&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;hasTranslations&lt;/code&gt; will also make translations publishable. Users of your package will be able to publish the translations with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=your-package-name-translations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with assets&lt;/h3&gt; &#xA;&lt;p&gt;Any assets your package provides, should be placed in the &lt;code&gt;&amp;lt;package root&amp;gt;/resources/dist/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;You can make these assets publishable the &lt;code&gt;hasAssets&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasAssets();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users of your package will be able to publish the assets with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=your-package-name-assets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will copy over the assets to the &lt;code&gt;public/vendor/&amp;lt;your-package-name&amp;gt;&lt;/code&gt; directory in the app where your package is installed in.&lt;/p&gt; &#xA;&lt;h3&gt;Working with migrations&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;PackageServiceProvider&lt;/code&gt; assumes that any migrations are placed in this directory: &lt;code&gt;&amp;lt;package root&amp;gt;/database/migrations&lt;/code&gt;. Inside that directory you can put any migrations.&lt;/p&gt; &#xA;&lt;p&gt;To register your migration, you should pass its name without the extension to the &lt;code&gt;hasMigration&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;p&gt;If your migration file is called &lt;code&gt;create_my_package_tables.php.stub&lt;/code&gt; you can register them like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasMigration(&#39;create_my_package_tables&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Should your package contain multiple migration files, you can just call &lt;code&gt;hasMigration&lt;/code&gt; multiple times or use &lt;code&gt;hasMigrations&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasMigrations([&#39;my_package_tables&#39;, &#39;some_other_migration&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;hasMigration&lt;/code&gt; will also make migrations publishable. Users of your package will be able to publish the migrations with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=your-package-name-migrations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like you might expect, published migration files will be prefixed with the current datetime.&lt;/p&gt; &#xA;&lt;p&gt;You can also enable the migrations to be registered without needing the users of your package to publish them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasMigrations([&#39;my_package_tables&#39;, &#39;some_other_migration&#39;])&#xA;    -&amp;gt;runsMigrations();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with a publishable service provider&lt;/h3&gt; &#xA;&lt;p&gt;Some packages need an example service provider to be copied into the &lt;code&gt;app\Providers&lt;/code&gt; directory of the Laravel app. Think of for instance, the &lt;code&gt;laravel/horizon&lt;/code&gt; package that copies an &lt;code&gt;HorizonServiceProvider&lt;/code&gt; into your app with some sensible defaults.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;publishesServiceProvider($nameOfYourServiceProvider);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The file that will be copied to the app should be stored in your package in &lt;code&gt;/resources/stubs/{$nameOfYourServiceProvider}.php.stub&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When your package is installed into an app, running this command...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=your-package-name-provider&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... will copy &lt;code&gt;/resources/stubs/{$nameOfYourServiceProvider}.php&lt;/code&gt; in your package to &lt;code&gt;app/Providers/{$nameOfYourServiceProvider}.php&lt;/code&gt; in the app of the user.&lt;/p&gt; &#xA;&lt;h3&gt;Registering commands&lt;/h3&gt; &#xA;&lt;p&gt;You can register any command you package provides with the &lt;code&gt;hasCommand&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasCommand(YourCoolPackageCommand::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your package provides multiple commands, you can either use &lt;code&gt;hasCommand&lt;/code&gt; multiple times, or pass an array to &lt;code&gt;hasCommands&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasCommands([&#xA;        YourCoolPackageCommand::class,&#xA;        YourOtherCoolPackageCommand::class,&#xA;    ]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding an installer command&lt;/h3&gt; &#xA;&lt;p&gt;Instead of letting your users manually publishing config files, migrations, and other files manually, you could opt to add an install command that does all this work in one go. Packages like Laravel Horizon and Livewire provide such commands.&lt;/p&gt; &#xA;&lt;p&gt;When using Laravel Package Tools, you don&#39;t have to write an &lt;code&gt;InstallCommand&lt;/code&gt; yourself. Instead, you can simply call, &lt;code&gt;hasInstallCommand&lt;/code&gt; and configure it using a closure. Here&#39;s an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\LaravelPackageTools\PackageServiceProvider;&#xA;use Spatie\LaravelPackageTools\Package;&#xA;use Spatie\LaravelPackageTools\Commands\InstallCommand;&#xA;&#xA;class YourPackageServiceProvider extends PackageServiceProvider&#xA;{&#xA;    public function configurePackage(Package $package): void&#xA;    {&#xA;        $package&#xA;            -&amp;gt;name(&#39;your-package-name&#39;)&#xA;            -&amp;gt;hasConfigFile()&#xA;            -&amp;gt;hasMigration(&#39;create_package_tables&#39;)&#xA;            -&amp;gt;publishesServiceProvider(&#39;MyServiceProviderName&#39;)&#xA;            -&amp;gt;hasInstallCommand(function(InstallCommand $command) {&#xA;                $command&#xA;                    -&amp;gt;publishConfigFile()&#xA;                    -&amp;gt;publishMigrations()&#xA;                     -&amp;gt;askToRunMigrations()&#xA;                    -&amp;gt;copyAndRegisterServiceProviderInApp()&#xA;                    -&amp;gt;askToStarRepoOnGitHub(&#39;your-vendor/your-repo-name&#39;)&#xA;            });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this in place, the package user can call this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan your-package-name:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the code above, that command will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;publish the config file&lt;/li&gt; &#xA; &lt;li&gt;publish the migrations&lt;/li&gt; &#xA; &lt;li&gt;copy the &lt;code&gt;/resources/stubs/MyProviderName.php.stub&lt;/code&gt; from your package to &lt;code&gt;app/Providers/MyServiceProviderName.php&lt;/code&gt;, and also register that provider in &lt;code&gt;config/app.php&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;ask if migrations should be run now&lt;/li&gt; &#xA; &lt;li&gt;prompt the user to open up &lt;code&gt;https://github.com/&#39;your-vendor/your-repo-name&#39;&lt;/code&gt; in the browser in order to star it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also call &lt;code&gt;startWith&lt;/code&gt; and &lt;code&gt;endWith&lt;/code&gt; on the &lt;code&gt;InstallCommand&lt;/code&gt;. They will respectively be executed at the start and end when running &lt;code&gt;php artisan your-package-name:install&lt;/code&gt;. You can use this to perform extra work or display extra output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use use Spatie\LaravelPackageTools\Commands\InstallCommand;&#xA;&#xA;public function configurePackage(Package $package): void&#xA;{&#xA;    $package&#xA;        // ... configure package&#xA;        -&amp;gt;hasInstallCommand(function(InstallCommand $command) {&#xA;            $command&#xA;                -&amp;gt;startWith(function(InstallCommand $command) {&#xA;                    $command-&amp;gt;info(&#39;Hello, and welcome to my great new package!&#39;)&#xA;                })&#xA;                -&amp;gt;publishConfigFile()&#xA;                -&amp;gt;publishMigrations()&#xA;               -&amp;gt;askToRunMigrations()&#xA;                -&amp;gt;copyAndRegisterServiceProviderInApp()&#xA;                -&amp;gt;askToStarRepoOnGitHub(&#39;your-vendor/your-repo-name&#39;)&#xA;                -&amp;gt;endWith(function(InstallCommand $command) {&#xA;                    $command-&amp;gt;info(&#39;Have a great day!&#39;);&#xA;                })&#xA;        });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with routes&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;PackageServiceProvider&lt;/code&gt; assumes that any route files are placed in this directory: &lt;code&gt;&amp;lt;package root&amp;gt;/routes&lt;/code&gt;. Inside that directory you can put any route files.&lt;/p&gt; &#xA;&lt;p&gt;To register your route, you should pass its name without the extension to the &lt;code&gt;hasRoute&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;If your route file is called &lt;code&gt;web.php&lt;/code&gt; you can register them like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasRoute(&#39;web&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Should your package contain multiple route files, you can just call &lt;code&gt;hasRoute&lt;/code&gt; multiple times or use &lt;code&gt;hasRoutes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$package&#xA;    -&amp;gt;name(&#39;your-package-name&#39;)&#xA;    -&amp;gt;hasRoutes([&#39;web&#39;, &#39;admin&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using lifecycle hooks&lt;/h3&gt; &#xA;&lt;p&gt;You can put any custom logic your package needs while starting up in one of these methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;registeringPackage&lt;/code&gt;: will be called at the start of the &lt;code&gt;register&lt;/code&gt; method of &lt;code&gt;PackageServiceProvider&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packageRegistered&lt;/code&gt;: will be called at the end of the &lt;code&gt;register&lt;/code&gt; method of &lt;code&gt;PackageServiceProvider&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bootingPackage&lt;/code&gt;: will be called at the start of the &lt;code&gt;boot&lt;/code&gt; method of &lt;code&gt;PackageServiceProvider&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packageBooted&lt;/code&gt;: will be called at the end of the &lt;code&gt;boot&lt;/code&gt; method of &lt;code&gt;PackageServiceProvider&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-package-tools/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information on what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/spatie/.github/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://raw.githubusercontent.com/spatie/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freekmurze&#34;&gt;Freek Van der Herten&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spatie/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-package-tools/main/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>