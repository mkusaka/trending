<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-12T01:42:46Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>acikkaynak/deprem-yardim-com</title>
    <updated>2023-02-12T01:42:46Z</updated>
    <id>tag:github.com,2023-02-12:/acikkaynak/deprem-yardim-com</id>
    <link href="https://github.com/acikkaynak/deprem-yardim-com" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Projeye destek olmak için&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acikkaynak/deprem-yardim-com/main/README_ENG.md&#34;&gt;For English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;İletişim kanalları:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/invite/itdepremyardim&#34;&gt;Discord Kanalı&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Katkıda bulunmak için:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acikkaynak/deprem-yardim-com/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Kullanılan Teknoloji ve Sistemler&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://laravel.com/&#34;&gt;Laravel 9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL 10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/&#34;&gt;aws Amazon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Başlangıç&lt;/h2&gt; &#xA;&lt;h4&gt;1. Gerekli ortamı kurun: Laravel, PHP ve veritabanı (örneğin MySQL) gibi gerekli araçları kurmanız gerekir.&lt;/h4&gt; &#xA;&lt;h4&gt;2. Projeyi klonlayın: GitHub&#39;daki Laravel projesi depolarını klonlamanız gerekir.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/acikkaynak/deprem-yardim-com.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Bağımlılıkları kurun: Projenin kurulumu için gerekli olan bağımlılıkları yüklemek için aşağıdaki komutu kullanın:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Konfigürasyon ayarlarını yapın: Laravel projesi için gerekli olan konfigürasyon ayarlarını .env dosyası üzerinden yapabilirsiniz. Veritabanı, e-posta ve API anahtarları gibi önemli bilgileri burada tanımlayın.&lt;/h4&gt; &#xA;&lt;h4&gt;5. Anahtar oluşturun: Laravel projesi için güvenlik anahtarını oluşturmak için aşağıdaki komutu kullanın:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan key:generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6. Veritabanını yapılandırın: Laravel projesi için veritabanı yapılandırmasını yapmak için aşağıdaki komutu kullanın:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;7. Sunucuyu başlatın: Laravel projesini çalıştırmak için aşağıdaki komutu kullanın:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000&#34;&gt;http://127.0.0.1:8000&lt;/a&gt; adresini tarayıcınızda açıp sonucu görebilirsiniz..&lt;/p&gt; &#xA;&lt;h1&gt;Docker ile çalıştırmak için&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;.env&lt;/code&gt; dosyasını düzenleyin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DB_HOST=mysql&#xA;DB_CONNECTION=mysql&#xA;DB_USERNAME=sail&#xA;DB_PASSWORD=password&#xA;&#xA;REDIS_HOST=redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker ile çalıştırmak için aşağıdaki komutu kullanın:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/sail up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Database oluşturmak ve örnek verileri eklemek için aşağıdaki komutu kullanın:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/sail artisan migrate --seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt; adresini tarayıcınızda açıp sonucu görebilirsiniz..&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;API Kullanımı:&lt;/h3&gt; &#xA;&lt;p&gt;Data giren takımların ihtiyacı olan key&#39;ler, team lead&#39;lere tarafımızca gönderilir.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>beerandcodeteam/olw-2</title>
    <updated>2023-02-12T01:42:46Z</updated>
    <id>tag:github.com,2023-02-12:/beerandcodeteam/olw-2</id>
    <link href="https://github.com/beerandcodeteam/olw-2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://laravel.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://banners.beyondco.de/OLW.png?theme=light&amp;amp;packageManager=&amp;amp;packageName=by+Beer+%26+Code&amp;amp;pattern=architect&amp;amp;style=style_1&amp;amp;description=OPEN+LARAVEL+WEEK&amp;amp;md=1&amp;amp;showWatermark=0&amp;amp;fontSize=100px&amp;amp;images=https%3A%2F%2Flaravel.com%2Fimg%2Flogomark.min.svg?sanitize=true&#34; width=&#34;650&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Instalando o projeto&lt;/h1&gt; &#xA;&lt;p&gt;O projeto se utiliza de contêineres Docker, através do pacote &lt;em&gt;Laravel Sail&lt;/em&gt; para facilitar a configuração do ambiente de desenvolvimento. Portanto, é necessário que já possua o Docker e o Docker Compose instalados na máquina.&lt;/p&gt; &#xA;&lt;p&gt;Você é livre para rodar o projeto em ambiente local mas esse texto não tratará essa situação.&lt;/p&gt; &#xA;&lt;p&gt;Links para instalação e configuração de Docker:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/docker-for-windows/install/&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;&gt;Linux (Debian based)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Passos para o rodar o projeto localmente:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Faça um clone do projeto para sua máquina local&lt;/li&gt; &#xA; &lt;li&gt;Crie um arquivo &lt;code&gt;.env&lt;/code&gt;, recomendamos usar &lt;code&gt;.env-example&lt;/code&gt; como base&lt;/li&gt; &#xA; &lt;li&gt;Adicione ou altere as chaves conforme sua necessidade&lt;/li&gt; &#xA; &lt;li&gt;acesse a pasta do projeto via console (terminal/PowerShell/CMD)&lt;/li&gt; &#xA; &lt;li&gt;execute o comando:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm \&#xA;    -u &#34;$(id -u):$(id -g)&#34; \&#xA;    -v &#34;$(pwd):/var/www/html&#34; \&#xA;    -w /var/www/html \&#xA;    laravelsail/php82-composer:latest \&#xA;    composer install --ignore-platform-reqs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Após finalizado processamento, execute o comando &lt;code&gt;./sail up -d&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;O primeiro comando realiza a instalação dos pacotes via composer especificados no arquivo &lt;code&gt;composer.json&lt;/code&gt; e uma vez que a instalação termina, a pasta &lt;em&gt;vendor&lt;/em&gt; passa a ficar disponível no projeto. O comando seguinte levanta os contêineres baseado na descrição de serviços feita no arquivo &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Por padrão, não é necessária nenhuma configuração no arquivo &lt;em&gt;.env&lt;/em&gt; do projeto. Caso seja necessária alguma edição na configuração padrão (relacionado a binding ports ou credenciais de banco de dados), basta editar o arquivo &lt;em&gt;.env&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Trabalhando com Contêineres&lt;/h1&gt; &#xA;&lt;p&gt;Uma vez que o projeto está rodando em cima de contêineres Docker, é clara a situação de que a máquina local não possui nenhum dos requisitos necessários para se trabalhar no projeto, assim, comandos como &lt;code&gt;php artisan&lt;/code&gt;, &lt;code&gt;composer&lt;/code&gt; ou &lt;code&gt;npm&lt;/code&gt; não funcionarão localmente. Para executar comandos dentro de um dos contêineres do projeto, um &lt;code&gt;php artisan route:list&lt;/code&gt; por exemplo, é preciso utilizar o docker para tal, como por exemplo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose exec \ #execução de um comando num contêiner existente&#xA;    -u sail \ # especifica o nome do usuário a ser utilizado dentro do contêiner&#xA;    projeto_laravel.test \ # especifica qual contêiner receberá o comando&#xA;    php artisan route:list # qual o comando a ser executado&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A execução, dessa forma, se torna muito verbosa e trabalhosa, podendo levar a potenciais erros de execução. Assim, o &lt;em&gt;Laravel Sail&lt;/em&gt; oferece um script chamado &lt;code&gt;sail&lt;/code&gt; e localizado em &lt;em&gt;vendor/bin/&lt;/em&gt;. Esse script permite que tais comandos sejam executados através de aliases para que o fluxo de desenvolvimento seja mais natural e menos complexo. Assim, para se executar o mesmo comando &lt;code&gt;php artisan route:list&lt;/code&gt; com o script &lt;code&gt;sail&lt;/code&gt; ficaria:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/sail artisan route:list&#xA;&#xA;#ou&#xA;&#xA;./vendor/bin/sail art route:list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comandos disponíveis&lt;/h3&gt; &#xA;&lt;p&gt;Para conhecer os comandos disponíveis pelo script sail, execute &lt;code&gt;./vendor/bin/sail -h&lt;/code&gt; para obter a listagem completa das opções com descrição.&lt;/p&gt; &#xA;&lt;h1&gt;Próximos passos&lt;/h1&gt; &#xA;&lt;p&gt;Migrations são uma maneira de versionar as tabelas de sua base de dados. Para estruturar o seu banco de dados&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute &lt;code&gt;./vendor/bin/sail art migrate&lt;/code&gt; para montar sua adicionar as tabelas ao seu banco&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute &lt;code&gt;./vendor/bin/sail art db:seed&lt;/code&gt; para popular o seu banco com dados fictícios&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>php-http/discovery</title>
    <updated>2023-02-12T01:42:46Z</updated>
    <id>tag:github.com,2023-02-12:/php-http/discovery</id>
    <link href="https://github.com/php-http/discovery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Finds installed clients and message factories&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HTTPlug Discovery&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/php-http/discovery/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/php-http/discovery.svg?style=flat-square&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/php-http/discovery/1.x/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/php-http/discovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/php-http/discovery/master.svg?style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/php-http/discovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/coverage/g/php-http/discovery.svg?style=flat-square&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/php-http/discovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/g/php-http/discovery.svg?style=flat-square&#34; alt=&#34;Quality Score&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/php-http/discovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/php-http/discovery.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Find installed PSR-17 factories, PSR-18 clients and HTTPlug factories.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since 1.15.0, this library also provides a composer plugin that automatically installs well-known PSR implementations if composer dependencies require a PSR implementation but do not specify which implementation to install.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Via Composer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require php-http/discovery&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;http://php-http.readthedocs.org/en/latest/discovery.html&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;http://docs.php-http.org/en/latest/development/contributing.html&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover any security related issues, please contact us at &lt;a href=&#34;mailto:security@php-http.org&#34;&gt;security@php-http.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/php-http/discovery/1.x/LICENSE&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>