<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-05T01:32:34Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>msafadi/laravel-eloquent-join-with</title>
    <updated>2024-06-05T01:32:34Z</updated>
    <id>tag:github.com,2024-06-05:/msafadi/laravel-eloquent-join-with</id>
    <link href="https://github.com/msafadi/laravel-eloquent-join-with" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Laravel Eloquent JoinWith Relationships&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Laravel Eloquent JoinWith&lt;/h1&gt; &#xA;&lt;p&gt;Laravel Eloquent Join With is a package that simplifies performing efficient database joins on existing Eloquent relationships of type &lt;code&gt;HasOne&lt;/code&gt; and &lt;code&gt;BelongsTo&lt;/code&gt;. By utilizing these relationships, JoinWith optimizes performance by executing a single query instead of the two separate queries typically required with the standard &lt;code&gt;with&lt;/code&gt; method. This translates to faster and more efficient data retrieval.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;composer require msafadi/laravel-eloquent-join-with&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways to use Laravel JoinWith in your application models:&lt;/p&gt; &#xA;&lt;h3&gt;1. Use &lt;code&gt;JoinWith&lt;/code&gt; Trait&lt;/h3&gt; &#xA;&lt;p&gt;Include the &lt;code&gt;JoinWith&lt;/code&gt; trait provided by the package in your application models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Models;&#xA;&#xA;use Illuminate\Database\Eloquent\Model;&#xA;use Safadi\EloquentJoinWith\Database\Concerns\JoinWith;&#xA;&#xA;class User extends Model&#xA;{&#xA;    use JoinWith;&#xA;&#xA;    // ... other model properties and methods&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the trait included, you can then use the &lt;code&gt;joinWith&lt;/code&gt; method directly on your model queries.&lt;/p&gt; &#xA;&lt;h3&gt;2. Extend the Model Class&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can extend your model classes with &lt;code&gt;Safadi\EloquentJoinWith\Database\Eloquent\Model&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Models;&#xA;&#xA;use Illuminate\Database\Eloquent\Model;&#xA;use Safadi\EloquentJoinWith\Database\Eloquent\Model as JoinWithModel;&#xA;&#xA;class User extends JoinWithModel&#xA;{&#xA;    // ... other model properties and methods&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This approach also grants access to the &lt;code&gt;joinWith&lt;/code&gt; method on your model queries.&lt;/p&gt; &#xA;&lt;h3&gt;Usage Examples&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve integrated Laravel JoinWith into your models, you can use the &lt;code&gt;joinWith&lt;/code&gt; method on your Eloquent model queries.&lt;/p&gt; &#xA;&lt;p&gt;The defintion and usage of &lt;code&gt;joinWith&lt;/code&gt; is exactly the same as using the standard &lt;code&gt;with&lt;/code&gt; method. But it will execute a single query joining the parent model and the realted model tables instead of fetching realted models with executing an extra database query. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::joinWith(&#39;profile&#39;)&#xA;            -&amp;gt;select(&#39;users.id&#39;, &#39;users.name&#39;)&#xA;            -&amp;gt;first();&#xA;&#xA;// This will execute a single query joining the users and profiles tables&#xA;// based on the defined HasOne relationship between User and Profile models.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code retrieves the user information along with the associated profile&#39;s avatar in a single query.&lt;/p&gt; &#xA;&lt;p&gt;As the standard &lt;code&gt;with&lt;/code&gt; method, you can also use nested relations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::joinWith(&#39;profile.country&#39;)&#xA;            -&amp;gt;first();&#xA;&#xA;// This will execute a single query joining the users, profiles, and countries tables&#xA;// based on the defined HasOne relationship between User and Profile and between Profile and Country models.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more complex scenarios, you can pass a closure to the &lt;code&gt;joinWith&lt;/code&gt; method to customize the join conditions, similar to the standard &lt;code&gt;with&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$orders = Orders::joinWith([&#39;user&#39; =&amp;gt; function ($query) {&#xA;    $query-&amp;gt;where(&#39;users.status&#39;, &#39;=&#39;, &#39;verified&#39;);&#xA;}])&#xA;-&amp;gt;get();&#xA;&#xA;// This will execute a single query joining orders and users tables&#xA;// based on the BelongsTo relationship and the additional where clause.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example retrieves orders that belongs to a verified user, combining the user and order information in a single query.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Laravel JoinWith currently works with &lt;code&gt;HasOne&lt;/code&gt; and &lt;code&gt;BelongsTo&lt;/code&gt; relationships. Support for other relationship types might be added in future versions.&lt;/li&gt; &#xA; &lt;li&gt;Specifying which columns of the relationship you would like to retrieve is not supported yet but might be added in future versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to this package! If you&#39;d like to contribute, please feel free to open a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This package is distributed under the MIT License. Please see the LICENSE file for more information.&lt;/p&gt;</summary>
  </entry>
</feed>