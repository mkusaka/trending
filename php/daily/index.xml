<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-21T01:42:58Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TimoKoerber/laravel-one-time-operations</title>
    <updated>2023-03-21T01:42:58Z</updated>
    <id>tag:github.com,2023-03-21:/TimoKoerber/laravel-one-time-operations</id>
    <link href="https://github.com/TimoKoerber/laravel-one-time-operations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run operations once after deployment - just like you do it with migrations!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65356688/225704995-ec7f54fb-a5b8-4d73-898f-2ebeed9ee733.jpg&#34; alt=&#34;One-Time Operations for Laravel&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;One-Time Operations for Laravel&lt;/h1&gt; &#xA;&lt;p&gt;Run operations once after deployment - just like you do it with migrations!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Take your CI/CD to the next Level with One-Time Operations for Laravel&lt;/strong&gt;! ðŸš€&lt;/p&gt; &#xA;&lt;p&gt;Create specific classes for a one-time usage, that can be executed automatically after each deployment. Same as migrations they get processed once and then never again. Perfect for seeding or updating some data instantly after some database changes or feature updates.&lt;/p&gt; &#xA;&lt;p&gt;This package is for you if...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you regularly need to &lt;strong&gt;update specific data&lt;/strong&gt; after you deployed new code&lt;/li&gt; &#xA; &lt;li&gt;you often execute jobs just &lt;strong&gt;only one single time&lt;/strong&gt; after a deployment&lt;/li&gt; &#xA; &lt;li&gt;you sometimes &lt;strong&gt;forget to execute&lt;/strong&gt; that one specific job and stuff gets crazy&lt;/li&gt; &#xA; &lt;li&gt;your code gets &lt;strong&gt;cluttered with jobs&lt;/strong&gt;, that are not being used anymore&lt;/li&gt; &#xA; &lt;li&gt;your co-workers always need to be reminded to &lt;strong&gt;execute that one job&lt;/strong&gt; after some database changes&lt;/li&gt; &#xA; &lt;li&gt;you often seed or process data &lt;strong&gt;in a migration file&lt;/strong&gt; (which is a big no-no!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Require this package with composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer require timokoerber/laravel-one-time-operations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the required table in your database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you&#39;re all set!&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Create operation files&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan operations:make &amp;lt;operation_name&amp;gt; // create operation file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Process operations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan operations:process                   // process operation files&#xA;php artisan operations:process --sync            // force syncronously execution&#xA;php artisan operations:process --async           // force asyncronously execution&#xA;php artisan operations:process --test            // dont flag operations as processed&#xA;php artisan operations:process &amp;lt;operation_name&amp;gt;  // re-run one specific operation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Show operations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan operations:show            // show all operations &#xA;php artisan operations:show pending    // show pending operations &#xA;php artisan operations:show processed  // show processed operations &#xA;php artisan operations:show disposed   // show disposed operations &#xA;&#xA;php artisan operations:show pending processed disposed  // use multiple filters &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;h3&gt;CI/CD &amp;amp; Deployment-Process&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;One-Time Operations&lt;/em&gt; work exactly like &lt;a href=&#34;https://laravel.com/docs/9.x/migrations&#34;&gt;Laravel Migrations&lt;/a&gt;. Just process the operations &lt;em&gt;after your code was deployed and the migrations were migrated&lt;/em&gt;. You can make it part of your deployment script like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;...&#xA; - php artisan migrate&#xA; - php artisan operations:process&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Edit config&lt;/h3&gt; &#xA;&lt;p&gt;By default, the following elements will be created in your project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the table &lt;code&gt;operations&lt;/code&gt; in your database&lt;/li&gt; &#xA; &lt;li&gt;the directory &lt;code&gt;operations&lt;/code&gt; in your project root directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to use a different settings just publish and edit the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan vendor:publish --provider=&#34;TimoKoerber\LaravelOneTimeOperations\Providers\OneTimeOperationsServiceProvider&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the file &lt;code&gt;config/one-time-operations.php&lt;/code&gt; with the following content.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// config/one-time-operation.php&#xA;&#xA;return [&#xA;    &#39;directory&#39; =&amp;gt; &#39;operations&#39;,&#xA;    &#39;table&#39; =&amp;gt; &#39;operations&#39;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make changes as you like.&lt;/p&gt; &#xA;&lt;h3&gt;Create One-Time Operation files&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65356688/224433928-721b1261-b7ad-40c6-a512-d0f5b5fa0cbf.png&#34; alt=&#34;One-Time Operations for Laravel - Create One-Time Operation files&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65356688/224433323-96b23e84-e22e-4333-8749-ae61cc866cd1.png&#34; alt=&#34;One-Time Operations for Laravel - Create One-Time Operation files&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To create a new operation file execute the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan operations:make AwesomeOperation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a file like &lt;code&gt;operations/XXXX_XX_XX_XXXXXX_awesome_operation.php&lt;/code&gt; with the following content.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;// operations/XXXX_XX_XX_XXXXXX_awesome_operation.php&#xA;&#xA;use TimoKoerber\LaravelOneTimeOperations\OneTimeOperation;&#xA;&#xA;return new class extends OneTimeOperation&#xA;{&#xA;    /**&#xA;     * Determine if the operation is being processed asyncronously.&#xA;     */&#xA;    protected bool $async = true;&#xA;&#xA;    /**&#xA;     * Process the operation.&#xA;     */&#xA;    public function process(): void&#xA;    {&#xA;        //&#xA;    }&#xA;};&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Provide your code in the &lt;code&gt;process()&lt;/code&gt; method, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// operations/XXXX_XX_XX_XXXXXX_awesome_operation.php&#xA;&#xA;public function process(): void&#xA;{&#xA;    User::where(&#39;active&#39;, 1)-&amp;gt;update([&#39;status&#39; =&amp;gt; &#39;awesome&#39;]) // make active users awesome&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the operation is being processed &lt;em&gt;&lt;strong&gt;asyncronously&lt;/strong&gt;&lt;/em&gt; (based on your configuration) by dispatching the job &lt;code&gt;OneTimeOperationProcessJob&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also execute the code syncronously by setting the &lt;code&gt;$async&lt;/code&gt; flag to &lt;code&gt;false&lt;/code&gt;. &lt;em&gt;(this is only recommended for small operations, since the processing of these operations should be part of the deployment process)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Processing the operations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65356688/224434129-43082402-6077-4043-8e97-c44786e60a59.png&#34; alt=&#34;One-Time Operations for Laravel - Processing the operations&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use the following call to process all new operation files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan operations:process&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your code will be executed, and you will find all the processed operations in the &lt;code&gt;operations&lt;/code&gt; table:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;id&lt;/th&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;dispatched&lt;/th&gt; &#xA;   &lt;th&gt;processed_at&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;XXXX_XX_XX_XXXXXX_awesome_operation&lt;/td&gt; &#xA;   &lt;td&gt;async&lt;/td&gt; &#xA;   &lt;td&gt;2015-10-21 07:28:00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;After that, this operation will not be processed anymore.&lt;/p&gt; &#xA;&lt;h3&gt;Dispatching Jobs syncronously or asyncronously&lt;/h3&gt; &#xA;&lt;p&gt;For each operation a &lt;code&gt;OneTimeOperationProcessJob&lt;/code&gt; is being dispatched, either with &lt;code&gt;dispatch()&lt;/code&gt; oder &lt;code&gt;dispatchSync()&lt;/code&gt; based on the &lt;code&gt;$async&lt;/code&gt; attribute in the operation file.&lt;/p&gt; &#xA;&lt;p&gt;By providing the &lt;code&gt;--sync&lt;/code&gt; or &lt;code&gt;--async&lt;/code&gt; option with the &lt;code&gt;operations:process&lt;/code&gt; command, you can force a syncronously/asyncronously execution and ignore the attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan operations:process --async  // force dispatch()&#xA;php artisan operations:process --sync   // force dispatchSync()  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hint!&lt;/strong&gt; If &lt;code&gt;operation:process&lt;/code&gt; is part of your deployment process, it is &lt;strong&gt;not recommended&lt;/strong&gt; to process the operations syncronously, since an error in your operation could make your whole deployment fail.&lt;/p&gt; &#xA;&lt;h3&gt;Re-run an operation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65356688/224440344-3d095730-12c3-4a2c-b4c3-42a8b6d60767.png&#34; alt=&#34;One-Time Operations for Laravel - Re-run an operation manually&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If something went wrong (or if you just feel like it), you can process an operation again by providing the &lt;strong&gt;name of the operation&lt;/strong&gt; as parameter in &lt;code&gt;operations:process&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan operations:process XXXX_XX_XX_XXXXXX_awesome_operation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing the operation&lt;/h3&gt; &#xA;&lt;p&gt;You might want to test your code a couple of times before flagging the operation as &#34;processed&#34;. Provide the &lt;code&gt;--test&lt;/code&gt; flag to run the command again and again.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan operations:process --test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Showing all operations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65356688/224432952-49009531-8946-4d19-8cee-70ca12605038.png&#34; alt=&#34;One-Time Operations for Laravel - Showing all operations&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;So you don&#39;t have to check the database or the directory for the existing operations, you can show a list with &lt;code&gt;operations:show&lt;/code&gt;. Filter the list with the available filters &lt;code&gt;pending&lt;/code&gt;, &lt;code&gt;processed&lt;/code&gt; and &lt;code&gt;disposed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pending&lt;/code&gt; - Operations, that have not been processed yet&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;processed&lt;/code&gt; - Operations, that have been processed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disposed&lt;/code&gt; - Operations, that have been processed and the files were already deleted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan operations:show pending           // show only pending operations&#xA;php artisan operations:show pending disposed  // show only pending and disposed operations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deleting operations&lt;/h3&gt; &#xA;&lt;p&gt;The whole idea of this package is, that you can dispose the operations once they were executed, so your project won&#39;t be cluttered with files and code, you won&#39;t be using anymore.&lt;/p&gt; &#xA;&lt;p&gt;So you just need to &lt;strong&gt;delete the files from your repository&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The deleted operations will be shown as &lt;code&gt;DISPOSED&lt;/code&gt; when you call &lt;code&gt;operations:show&lt;/code&gt;, so you still have a history on all the processed operations.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright Â© Timo KÃ¶rber | &lt;a href=&#34;https://www.timokoerber.com&#34;&gt;www.timokoerber.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;One-Time Operations for Laravel&#34; is open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/TimoKoerber/laravel-one-time-operations/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>orhanerday/ChatGPT</title>
    <updated>2023-03-21T01:42:58Z</updated>
    <id>tag:github.com,2023-03-21:/orhanerday/ChatGPT</id>
    <link href="https://github.com/orhanerday/ChatGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT AI Supported - ChatGPT clone is a simple web application powered by the OpenAI library and built with PHP. It allows users to chat with an AI language model that responds in real-time. Chat history is saved using cookies, and the project requires the use of an API key and enabled SQLite3.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT Clone&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22305274/220125119-ccbdb855-bdb9-476f-8f5f-f5d5530f0a24.gif&#34; alt=&#34;ezgif-1-92e240a6d3&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;This project is a ChatGPT clone that allows users to chat with an AI language model trained by OpenAI. It&#39;s powered by the github.com/orhanerday/OpenAI php library, which provides an easy-to-use interface for communicating with the OpenAI API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22305274/219878523-6d8be435-35df-4cce-b2cd-52334f9e7f12.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Live Demo Video&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/22305274/219877050-e5237734-4635-46f8-bf49-71a26356e0db.mp4&#34;&gt;https://user-images.githubusercontent.com/22305274/219877050-e5237734-4635-46f8-bf49-71a26356e0db.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Important Notice&lt;/h1&gt; &#xA;&lt;p&gt;This project was created to highlight the &lt;a href=&#34;https://github.com/orhanerday/open-ai#stream-example&#34;&gt;Stream Example&lt;/a&gt; feature of &lt;a href=&#34;https://github.com/orhanerday/open-ai&#34;&gt;OpenAI GPT-3 Api Client in PHP by Orhan Erday&lt;/a&gt;, please don&#39;t have too high expectations about the project.&lt;/p&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/orhane&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Join our discord server&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1047074572488417330/widget.png?style=banner2&#34; alt=&#34;Discord Banner 2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/xpGUD528XJ&#34;&gt;Click here to join the Discord server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using Docker&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h4&gt;Method I&lt;/h4&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Clone this repository to your local machine&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/orhanerday/ChatGPT.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Navigate to the project directory&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ChatGPT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build the image&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -t chatgpt .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run the app&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -p 8000:8000 -e OPENAI_API_KEY=sk-o7hL4nCDcjw chatgpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Open your web browser and go&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h4&gt;Method II&lt;/h4&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;em&gt;Or&lt;/em&gt; you can use docker hub without cloning or building;&lt;/h3&gt; &#xA;&lt;h4&gt;Pull the image from Docker Hub&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull orhan55555/chatgpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run the app&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -p 8000:8000 -e OPENAI_API_KEY=sk-o7hL4nCDcjw orhan55555/chatgpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Open your web browser and go&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Environment Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;API key for the OpenAI API.&lt;/td&gt; &#xA;   &lt;td&gt;None (required)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_MODEL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Name of the OpenAI model to use.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gpt-3.5-turbo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_TEMPERATURE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Temperature value for generating text using the OpenAI API.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_MAX_TOKENS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximum number of tokens to generate when using the OpenAI API.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_FREQUENCY_PENALTY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Frequency penalty value when generating text using the OpenAI API.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_PRESENCE_PENALTY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Presence penalty value when generating text using the OpenAI API.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DB_FILE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to the SQLite database file.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;db.sqlite&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Before running this project, you should have the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 7.4 or later with SQLite3 enabled&lt;/li&gt; &#xA; &lt;li&gt;Composer&lt;/li&gt; &#xA; &lt;li&gt;An OpenAI API key (which should be set to the $open_ai_key variable in event-stream.php) Getting Started&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;h3&gt;Enable sqlite3&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the php.ini file. This file is usually located in the PHP installation directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Find the following line: ;extension=php_sqlite3.dll&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove the semicolon at the beginning of the line to uncomment it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Save the file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart the web server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;Clone this repository to your local machine&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/orhanerday/ChatGPT.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Navigate to the project directory&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ChatGPT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Install OrhanErday/OpenAI&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer require orhanerday/open-ai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Set your OpenAI API key as the &lt;code&gt;$open_ai_key&lt;/code&gt; variable in &lt;code&gt;event-stream.php&lt;/code&gt;&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$open_ai_key = &#34;&#34;; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Start the PHP built-in web server&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;php -S localhost:8000 -t .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Open your web browser and go to &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;You should now see the ChatGPT clone interface, where you can chat with the OpenAI language model.&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Chat History&lt;/h2&gt; &#xA;&lt;p&gt;This project saves chat history using cookies by default. If you want to change this to use authentication instead, you can modify the code in index.php to save chat history in a database or other storage mechanism.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project is powered by the github.com/orhanerday/OpenAI php library, which provides an easy-to-use interface for communicating with the OpenAI API.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vueschool/laravel-course-backend</title>
    <updated>2023-03-21T01:42:58Z</updated>
    <id>tag:github.com,2023-03-21:/vueschool/laravel-course-backend</id>
    <link href="https://github.com/vueschool/laravel-course-backend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is the Laravel backend for the course &#34;Laravel Backends for Vue.js 3&#34;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Laravel Backend for the course &#34;Laravel Backends for Vue.js 3&#34;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vueschool.io/courses/laravel-backends-for-vue-js-3&#34;&gt;&lt;img src=&#34;https://vueschool.io/media/1b4b17d7dfaf4a708fbd160ba767b6d8/laravel-backends-for-vue-js-3-not-transparent.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the source code for the backend that&#39;s used in the course &#34;Laravel Backends for Vue.js 3&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Pair this respository with the front end SPA to power a URL Shortener app.&lt;/p&gt; &#xA;&lt;h2&gt;Setup Instructions&lt;/h2&gt; &#xA;&lt;p&gt;To run the backend, clone this repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:vueschool/laravel-course-backend.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the dependencies with composer (make sure to &lt;a href=&#34;https://getcomposer.org/&#34;&gt;have composer installed&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the development server with Laravel Sail (requires &lt;a href=&#34;https://www.docker.com/&#34;&gt;docker&lt;/a&gt; to be installed and running)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./vendor/bin/sail up&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>