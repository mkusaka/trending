<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-03T01:34:13Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RetroAchievements/RAWeb</title>
    <updated>2024-03-03T01:34:13Z</updated>
    <id>tag:github.com,2024-03-03:/RetroAchievements/RAWeb</id>
    <link href="https://github.com/RetroAchievements/RAWeb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RetroAchievements.org Platform&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34; dir=&#34;auto&#34;&gt;&lt;a href=&#34;https://retroachievements.org&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RetroAchievements/RAWeb/master/public/assets/images/ra-icon.webp&#34; width=&#34;200&#34; alt=&#34;RetroAchievements Logo&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;RAWeb&lt;/strong&gt; is &lt;a href=&#34;https://retroachievements.org&#34;&gt;RetroAchievements.org&lt;/a&gt;&#39;s platform application. It is a Laravel application (&lt;a href=&#34;https://tallstack.dev/&#34;&gt;TALL stack&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Local web server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/&#34;&gt;PHP 8.2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; PHP dependency manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mariadb.com/docs/server/&#34;&gt;MariaDB 10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js 20&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Validated to run on Windows, macOS, and Linux with any of the setup options below (Docker via Laravel Sail, VM with either nginx or Apache, Laravel Valet on macOS).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker Compose&lt;/a&gt;&lt;/strong&gt; (Windows, Linux, macOS)&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://laravel.com/docs/sail&#34;&gt;Laravel Sail documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;&lt;a href=&#34;https://www.apachefriends.org/download.html&#34;&gt;XAMPP&lt;/a&gt;&lt;/strong&gt; (Windows, Linux, macOS)&lt;/h3&gt; &#xA;&lt;p&gt;Install the XAMPP version packaged with PHP 8.2 to run an Apache web server, MySQL/MariaDB, and PHP on your system.&lt;/p&gt; &#xA;&lt;p&gt;You might have to enable some extensions in &lt;code&gt;php.ini&lt;/code&gt; (see the &lt;code&gt;ext-*&lt;/code&gt; requirements in &lt;a href=&#34;https://raw.githubusercontent.com/RetroAchievements/RAWeb/master/composer.json&#34;&gt;composer.json&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;extension=curl&#xA;extension=gmp&#xA;extension=mysqli&#xA;extension=pdo_mysql&#xA;extension=gd&#xA;extension=intl&#xA;extension=sockets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;&lt;a href=&#34;https://laravel.com/docs/valet&#34;&gt;Laravel Valet&lt;/a&gt;&lt;/strong&gt; (macOS only)&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/RetroAchievements/RAWeb/master/LocalValetDriver.php&#34;&gt;local valet driver&lt;/a&gt; is provided.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrade&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/RetroAchievements/RAWeb/master/docs/upgrade&#34;&gt;upgrade guides&lt;/a&gt; to upgrade your existing installation.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run setup script&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; In case you want to rely on the shipped &lt;code&gt;composer.phar&lt;/code&gt; instead of a global installation read all mentions of &lt;code&gt;composer&lt;/code&gt; within commands as &lt;code&gt;php composer.phar&lt;/code&gt;. I.e. run &lt;code&gt;php composer.phar setup&lt;/code&gt; if you haven&#39;t aliased it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configure&lt;/h3&gt; &#xA;&lt;p&gt;The environment configuration file (&lt;code&gt;.env&lt;/code&gt;) contains a sensible set of default values.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Docker/Laravel Sail&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;No additional configuration is needed; the configuration automatically detects whether it&#39;s running the application via the Laravel Sail application container and adjusts hosts and ports accordingly.&lt;/p&gt; &#xA;&lt;p&gt;However, you might want to adjust the forwarded container port numbers to your liking (&lt;code&gt;APP_PORT&lt;/code&gt;, &lt;code&gt;FORWARD_*&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Now is a good time to create the containers. Sail forwards commands to Docker Compose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sail up&#xA;# Daemonize:&#xA;sail up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Mentions of &lt;code&gt;sail&lt;/code&gt; commands assume that it has been aliased to the &lt;code&gt;./sail&lt;/code&gt; executable according to Sail&#39;s docs. I.e. run &lt;code&gt;./sail up&lt;/code&gt; if you haven&#39;t aliased it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;XAMPP/Valet&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Adjust the local environment configuration (&lt;code&gt;.env&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enter the credentials of your local database instance (&lt;code&gt;DB_*&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Change the application URL (&lt;code&gt;APP_URL&lt;/code&gt;) - static assets URL (&lt;code&gt;ASSET_URL&lt;/code&gt;) should be the same as &lt;code&gt;APP_URL&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;code&gt;APP_URL&lt;/code&gt; varies depending on your setup. By default it&#39;s configured to use the forwarded application Docker container port. E.g. using an Apache vhost or linking a domain via Laravel Valet this should be adjusted accordingly:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dotenv&#34;&gt;APP_URL=https://raweb.test&#xA;ASSET_URL=https://raweb.test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hybrid Docker setup&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When running the application locally (i.e. web server and PHP via XAMPP/Valet) it&#39;s possible to use the provided Docker services, too.&lt;/p&gt; &#xA;&lt;p&gt;Use database and redis services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dotenv&#34;&gt;DB_PORT=${FORWARD_DB_PORT}&#xA;REDIS_PORT=${FORWARD_REDIS_PORT}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Connect with a database client of you choice using the forwarded ports or use phpMyAdmin which runs at &lt;a href=&#34;http://localhost:64080&#34;&gt;http://localhost:64080&lt;/a&gt; by default.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Use mailpit as SMTP server for local mails testing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dotenv&#34;&gt;MAIL_MAILER=smtp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Runs at &lt;a href=&#34;http://localhost:64050&#34;&gt;http://localhost:64050&lt;/a&gt; by default.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Use minio as an AWS S3 drop-in replacement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dotenv&#34;&gt;AWS_MINIO=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; In order to use S3 features you&#39;ll have to create a &lt;code&gt;local&lt;/code&gt; bucket manually first. Runs at &lt;a href=&#34;http://localhost:64041/buckets/add-bucket&#34;&gt;http://localhost:64041/buckets/add-bucket&lt;/a&gt; by default.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Build frontend assets&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install&#xA;npm run build&#xA;# Using Sail:&#xA;sail npm install&#xA;sail npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create filesystem symlinks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan ra:storage:link --relative&#xA;# Using Sail:&#xA;sail artisan ra:storage:link --relative&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup database&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan migrate&#xA;# Using Sail:&#xA;sail artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Seed your database with additional test data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan db:seed&#xA;# Using Sail:&#xA;sail artisan db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Open the application in your browser.&lt;/h3&gt; &#xA;&lt;p&gt;Depending on the setup you chose the application should run.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker: &lt;a href=&#34;http://localhost:64000&#34;&gt;http://localhost:64000&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;XAMPP: depending on Apache vhost configuration&lt;/li&gt; &#xA; &lt;li&gt;Laravel Valet: e.g. &lt;a href=&#34;https://raweb.test&#34;&gt;https://raweb.test&lt;/a&gt; - depending on link / parked location and whether you chose to secure it or not&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Developing achievements locally&lt;/h3&gt; &#xA;&lt;p&gt;Add a &lt;code&gt;host.txt&lt;/code&gt; file next to &lt;code&gt;RAIntegration.dll&lt;/code&gt; in your local RALibRetro&#39;s directory. The file should contain the URL to your local RAServer instance. Any of the following will work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;http://localhost:64000&lt;/code&gt; when running the server via Docker, &lt;code&gt;composer start&lt;/code&gt; or &lt;code&gt;artisan serve&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;https://raweb.test&lt;/code&gt; (example) when running the server via Valet&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://raweb.test&lt;/code&gt; (example) as a configured vhost&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/RetroAchievements/RAWeb/master/docs/SECURITY.md&#34;&gt;Security Policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/RetroAchievements/RAWeb/master/docs/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/RetroAchievements/RAWeb/master/docs/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;RAWeb is open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/RetroAchievements/RAWeb/master/LICENSE&#34;&gt;GPL-3.0 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Console Icons by &lt;a href=&#34;http://yspixel.jpn.org/icon/game/index.htm&#34;&gt;yspixel.jpn.org&lt;/a&gt; and &lt;a href=&#34;https://github.com/Tatohead/Console-Iconset&#34;&gt;Tatohead&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stechstudio/laravel-jwt</title>
    <updated>2024-03-03T01:34:13Z</updated>
    <id>tag:github.com,2024-03-03:/stechstudio/laravel-jwt</id>
    <link href="https://github.com/stechstudio/laravel-jwt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Helper package that makes it easy to generate, consume, and protect routes with JWT tokens in Laravel&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/203749/218332026-c858a5c5-357a-4cbb-bbfd-a6397b24a4c3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Laravel JWT Tools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/stechstudio/laravel-jwt&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/stechstudio/laravel-jwt.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stechstudio/laravel-jwt/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https://app.chipperci.com/projects/dc325ad7-6039-4345-8e77-828492ba0bf1/status/v2&amp;amp;style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package wraps the excellent &lt;a href=&#34;https://github.com/lcobucci/jwt&#34;&gt;lcobucci/jwt&lt;/a&gt; library with the following benefits:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;JWT&lt;/code&gt; facade with helper methods to quickly generate and parse tokens.&lt;/li&gt; &#xA; &lt;li&gt;Enforces a minimal set of claims for generated tokens, like &lt;code&gt;aud&lt;/code&gt;, &lt;code&gt;iss&lt;/code&gt;, and &lt;code&gt;exp&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Validate parsed tokens to ensure our required claims are set properly with signature present and valid.&lt;/li&gt; &#xA; &lt;li&gt;HTTP Middleware to validate a route-specific JWT&lt;/li&gt; &#xA; &lt;li&gt;Request macro to easily access route-specific JWT claims&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;composer require stechstudio/laravel-jwt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Simple example&lt;/h3&gt; &#xA;&lt;p&gt;You can generate a simple JWT with the &lt;code&gt;get&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$jwt = JWT::get(&#39;token-id&#39;, [&#39;myclaim&#39; =&amp;gt; &#39;somevalue&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a token with the ID provided and an array of claims, returning the string token.&lt;/p&gt; &#xA;&lt;h3&gt;Lifetime&lt;/h3&gt; &#xA;&lt;p&gt;The default token expiration is set to 10 minutes which you can configure, or you can specify a custom lifetime value as a third parameter when creating the token:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$jwt = JWT::get(&#39;token-id&#39;, [&#39;anything&#39; =&amp;gt; &#39;here&#39;], 3600);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This token will expire in one hour. You can also specify the lifetime with Carbon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$jwt = JWT::get(&#39;token-id&#39;, [&#39;anything&#39; =&amp;gt; &#39;here&#39;], now()-&amp;gt;addMinutes(60));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Signing key&lt;/h3&gt; &#xA;&lt;p&gt;If you are generating a JWT that will be consumed by a different app (very common use case in our company) you can specify the signing key as the fourth parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$jwt = JWT::get(&#39;token-id&#39;, [&#39;anything&#39; =&amp;gt; &#39;here&#39;], 3600, config(&#39;services.otherapp.key&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;This package tries to pick sane defaults, while also allowing you to change configs through your .env file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Signature key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Every token is signed. The &lt;code&gt;JWT_SIGNING_KEY&lt;/code&gt; value is used is available, otherwise &lt;code&gt;APP_KEY&lt;/code&gt; will be used as the signing key.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Lifetime&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default lifetime is 600 seconds / 10 minutes. You can change the default by specifying the number of seconds as &lt;code&gt;JWT_LIFETIME&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Issuer&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The default token issuer (&lt;code&gt;iss&lt;/code&gt; claim) is your &lt;code&gt;APP_NAME&lt;/code&gt; lowercase. You can specify a different issuer name via &lt;code&gt;JWT_ISSUER&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Audience&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The default token audience (&lt;code&gt;aud&lt;/code&gt; claim) is your &lt;code&gt;APP_NAME&lt;/code&gt; lowercase. You can specify a different issuer name via &lt;code&gt;JWT_AUDIENCE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building tokens fluently&lt;/h2&gt; &#xA;&lt;p&gt;So far we&#39;ve looked at the &lt;code&gt;JWT::get()&lt;/code&gt; helper method which is super quick for simple needs.&lt;/p&gt; &#xA;&lt;p&gt;For more control over your token you can create it fluently instead.&lt;/p&gt; &#xA;&lt;p&gt;You can use any of the methods provided by the &lt;a href=&#34;https://lcobucci-jwt.readthedocs.io/en/latest/issuing-tokens/&#34;&gt;underlying &lt;code&gt;Builder&lt;/code&gt; class&lt;/a&gt;, along with a few new ones like &lt;code&gt;signWith&lt;/code&gt; and &lt;code&gt;lifetime&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$token = JWT::setId(&#39;my-token-id&#39;)&#xA;   -&amp;gt;lifetime(3600)&#xA;   -&amp;gt;signWith(&#39;custom-signing-key-with-256-bits&#39;)&#xA;   -&amp;gt;issuedBy(&#34;my-app&#34;)&#xA;   -&amp;gt;permittedFor(&#34;receiving-app&#34;)&#xA;   -&amp;gt;withClaim(&#39;myclaim&#39;, &#39;any value&#39;)&#xA;   -&amp;gt;getToken()&#xA;   -&amp;gt;toString();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parsing&lt;/h2&gt; &#xA;&lt;p&gt;You can parse a JWT string into a token:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$token = JWT::parse(&#34;... JWT string ...&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An exception will be thrown if the JWT cannot be parsed.&lt;/p&gt; &#xA;&lt;h2&gt;Validate received tokens&lt;/h2&gt; &#xA;&lt;p&gt;Just as this package has opinions on what a generated token should include, we want to ensure those minimums are set appropriately on any received tokens.&lt;/p&gt; &#xA;&lt;p&gt;After parsing a received token, simply call &lt;code&gt;isValid&lt;/code&gt; or &lt;code&gt;validate&lt;/code&gt;, depending on whether you want a boolean result or exceptions thrown. Make sure to pass in the expected token ID.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$token = JWT::parse(&#34;... JWT string ...&#34;);&#xA;&#xA;$token-&amp;gt;isValid(&#39;expected-token-id&#39;); // Returns true or false&#xA;&#xA;$token-&amp;gt;validate(&#39;expected-token-id&#39;); // Throws exceptions for any validation failure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point you can be certain that the token:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Is signed, and the signature is verified (using the configured signature key)&lt;/li&gt; &#xA; &lt;li&gt;Is within the permitted timeframe (has not expired)&lt;/li&gt; &#xA; &lt;li&gt;Is intended for your app (&lt;code&gt;aud&lt;/code&gt; claim matches the configured audience)&lt;/li&gt; &#xA; &lt;li&gt;Has the expected ID&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Validation exceptions&lt;/h3&gt; &#xA;&lt;p&gt;When calling &lt;code&gt;validate(&#39;expected-token-id&#39;)&lt;/code&gt; the following exceptions will be thrown depending on the validation failure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;STS\JWT\Exceptions\InvalidSignature&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STS\JWT\Exceptions\TokenExpired&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STS\JWT\Exceptions\InvalidAudience&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STS\JWT\Exceptions\InvalidID&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STS\JWT\Exceptions\ValidationException&lt;/code&gt; will be used for any other types of validation failures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Retrieving claims&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve parsed and validated a token, you can retrieve all token claims with &lt;code&gt;getClaims&lt;/code&gt; or simply &lt;code&gt;toArray&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to just retrieve your custom payload claims, use &lt;code&gt;getPayload&lt;/code&gt;;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Make our string token&#xA;$jwt = JWT::get(&#39;token-id&#39;, [&#39;foo&#39; =&amp;gt; &#39;bar&#39;]);&#xA;&#xA;// Parse it and validate&#xA;$token = JWT::parse($jwt)-&amp;gt;validate(&#39;token-id&#39;);&#xA;&#xA;// Ignore registered claims, just get our custom claims&#xA;$token-&amp;gt;getPayload(); // [ foo =&amp;gt; bar ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to retrieve just one claim, use &lt;code&gt;get&lt;/code&gt; passing in the name of the claim. You can optionally pass in a default value as the second parameter;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$token-&amp;gt;get(&#34;foo&#34;); // bar&#xA;&#xA;$token-&amp;gt;get(&#34;invalid&#34;); // null&#xA;&#xA;$token-&amp;gt;get(&#34;invalid&#34;, &#34;quz&#34;); // quz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Route middleware&lt;/h2&gt; &#xA;&lt;p&gt;We frequently use JWTs to authorize a request. These are sometimes generated and consumed by the same app, but more frequently they are for cross-app authorization.&lt;/p&gt; &#xA;&lt;p&gt;You can use the included &lt;code&gt;jwt&lt;/code&gt; middleware to validate a JWT request. The middleware will look for the JWT in a number of places:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;As a request parameter named &lt;code&gt;jwt&lt;/code&gt; or &lt;code&gt;token&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;As a route paramater named &lt;code&gt;jwt&lt;/code&gt; or &lt;code&gt;token&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the Authorization header either as &lt;code&gt;Token JWT&lt;/code&gt; or &lt;code&gt;Bearer :base64encodedJWT&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If a token is found in any of these locations it will be parsed and validated.&lt;/p&gt; &#xA;&lt;h3&gt;Token ID&lt;/h3&gt; &#xA;&lt;p&gt;By default, the token ID will be expected to match the route name.&lt;/p&gt; &#xA;&lt;p&gt;For example, with this following route the token will need an ID of &lt;code&gt;my.home&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;/home&#39;, [Controller::class, &#39;home&#39;])-&amp;gt;name(&#39;my.home&#39;)-&amp;gt;middleware(&#39;jwt&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify the required ID by passing it as a middleware parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;/home&#39;, [Controller::class, &#39;home&#39;])-&amp;gt;middleware(&#39;jwt:expected-id&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Access claims on request&lt;/h2&gt; &#xA;&lt;h3&gt;All token claims&lt;/h3&gt; &#xA;&lt;p&gt;The Laravel &lt;code&gt;Request&lt;/code&gt; has a &lt;code&gt;getClaim&lt;/code&gt; macro on it, so you can grab claims from anywhere.&lt;/p&gt; &#xA;&lt;p&gt;Example when injecting &lt;code&gt;$request&lt;/code&gt; into a controller method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Http\Request;&#xA;&#xA;class Controller {&#xA;    public function home(Request $request)&#xA;    {&#xA;        echo $request-&amp;gt;getClaim(&#39;aud&#39;); // The token audience    &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom payload merged&lt;/h3&gt; &#xA;&lt;p&gt;The token payload (custom claims added to the JWT, not part of the core registered claim set) is merged onto the request attributes, so you can access these just like any other request attribute.&lt;/p&gt; &#xA;&lt;p&gt;If the JWT has a &lt;code&gt;foo&lt;/code&gt; claim, you can directly access &lt;code&gt;$request-&amp;gt;foo&lt;/code&gt; or &lt;code&gt;$request-&amp;gt;input(&#39;foo&#39;)&lt;/code&gt; or even &lt;code&gt;request(&#39;foo&#39;)&lt;/code&gt; using the global request helper.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: When the payload is merged onto the request, there is a chance that we are stomping on some existing request attributes. Because we &lt;strong&gt;really&lt;/strong&gt; trust the payload in a validated JWT, we prefer this behavior. However if you want to disable set &lt;code&gt;JWT_MERGE_PAYLOAD=false&lt;/code&gt; in your .env file.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>