<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-30T01:35:33Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WPDrill/framework</title>
    <updated>2024-03-30T01:35:33Z</updated>
    <id>tag:github.com,2024-03-30:/WPDrill/framework</id>
    <link href="https://github.com/WPDrill/framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A WordPress Plugin development framework for human&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WPDrill - WordPress Plugin Development Framework&lt;/h1&gt; &#xA;&lt;p&gt;WPDrill is a WordPress Plugin Development Framework for humans. It&#39;s designed to simplify the process of creating and managing WordPress plugins.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Caution: This package is in the alpha stage. Expect bugs and changes. Test thoroughly before use.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Menu Management&lt;/strong&gt;: WPDrill provides an easy way to add and manage menus in your WordPress plugin. You can easily add a new menu with an icon and position. For example, in &lt;code&gt;menu.php&lt;/code&gt;, a new menu &#39;WPDrill&#39; is added with a smiley icon and positioned at 3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Routing&lt;/strong&gt;: WPDrill provides a simple and intuitive way to manage routes in your WordPress plugin. You can define GET routes, apply middleware, and even group routes with a common prefix or middleware. For example, in &lt;code&gt;api.php&lt;/code&gt;, a GET route &#39;/wpdrill&#39; is defined with a middleware.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Middleware&lt;/strong&gt;: WPDrill allows you to add middleware to your routes, providing a way to perform actions before the route handler is executed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WPDrill CLI Tools&lt;/strong&gt;: WPDrill comes with a set of command-line tools that help in automating tasks such as scaffolding, migrations, and testing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ServiceProvider&lt;/strong&gt;: WPDrill uses a service provider pattern for managing class dependencies and performing dependency injection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Config&lt;/strong&gt;: WPDrill provides a central place to manage configuration settings for your plugin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Migrations&lt;/strong&gt;: WPDrill supports database migrations, allowing you to version control your database schema and apply changes incrementally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;View&lt;/strong&gt;: WPDrill provides a simple way to manage views in your WordPress plugin. You can easily create, edit, and manage views for your plugin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Query Builder&lt;/strong&gt;: WPDrill provides a simple way to manage database operations in your WordPress plugin. You can easily create, read, update, and delete records in your database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Shortcode&lt;/strong&gt;: The Shortcode feature in WPDrill allows developers to create reusable pieces of content that can be inserted into posts or pages using a simple tag. This feature is implemented using a combination of PHP classes and views.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The installation and configuration process of WPDrill can be done in the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Download WPDrill&lt;/strong&gt;: You can download WPDrill from its official GitHub repository into the &lt;code&gt;plugins&lt;/code&gt; directory. Use the following command in your terminal to clone the repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/WPDrill/framework.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Navigate to the WPDrill directory&lt;/strong&gt;: After cloning the repository, navigate to the WPDrill directory using the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd wpdrill&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install Dependencies&lt;/strong&gt;: WPDrill uses Composer for managing PHP dependencies. Run the following command to install these dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugin Initiate&lt;/h2&gt; &#xA;&lt;p&gt;After installing the necessary dependencies, the next step is to initialize the plugin. Execute the following command in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./wpdrill plugin:init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all! Now, proceed to your WordPress admin dashboard and activate your freshly created plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Add Admin Menu&lt;/h2&gt; &#xA;&lt;p&gt;To add a new menu in WPDrill, you need to follow the steps below: Open the Menu Configuration File: Navigate to the &lt;code&gt;bootstrap/menu.php&lt;/code&gt; file in your WPDrill plugin directory. Define the New Menu: In the menu.php file, use the &lt;code&gt;Menu::add()&lt;/code&gt; method to define a new menu. Here&#39;s an example of how you can create a new menu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use WPDrill\Facades\Menu;&#xA;use App\Handlers\ReviewXDashboardMenu;&#xA;&#xA;Menu::add(&#39;ReviewX Dashboard&#39;, new ReviewXDashboardMenu(), &#39;manage_options&#39;)&#xA;        -&amp;gt;icon(&#39;dashicons-smiley&#39;)&#xA;        -&amp;gt;position(3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use different types of approaches to bind handlers, the previous example was an invokable handler instance(That means it should contain &lt;code&gt;__invoke()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;h4&gt;Direct invokable class binding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use WPDrill\Facades\Menu;&#xA;use App\Handlers\ReviewXDashboardMenu;&#xA;&#xA;Menu::add(&#39;ReviewX Dashboard&#39;, ReviewXDashboardMenu::class , &#39;manage_options&#39;)&#xA;        -&amp;gt;icon(&#39;dashicons-smiley&#39;)&#xA;        -&amp;gt;position(3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Class and method mapping&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use WPDrill\Facades\Menu;&#xA;use App\Handlers\ReviewXDashboardMenu;&#xA;&#xA;Menu::add(&#39;ReviewX Dashboard&#39;, [ReviewXDashboardMenu::class, &#39;dashboard&#39;] , &#39;manage_options&#39;)&#xA;        -&amp;gt;icon(&#39;dashicons-smiley&#39;)&#xA;        -&amp;gt;position(3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Closure&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use WPDrill\Facades\Menu;&#xA;use App\Handlers\ReviewXDashboardMenu;&#xA;&#xA;Menu::add(&#39;ReviewX Dashboard&#39;, function() {&#xA;    echo &#34;Dashboard&#34;;&#xA;} , &#39;manage_options&#39;)&#xA;        -&amp;gt;icon(&#39;dashicons-smiley&#39;)&#xA;        -&amp;gt;position(3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;REST Routing&lt;/h2&gt; &#xA;&lt;p&gt;To create a route in WPDrill, you need to define it in the &lt;code&gt;routes/api.php&lt;/code&gt; file. Here is an example of how you can do it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use WPDrill\Routing\Router;&#xA;&#xA;Router::get(&#39;/wpdrill&#39;, [\App\Rest\Controllers\WPDrillController::class, &#39;show&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, a GET route &#39;/wpdrill&#39; is defined. When this route is accessed, the &lt;code&gt;show&lt;/code&gt; method of the &lt;code&gt;WPDrillController&lt;/code&gt; class is executed. Please replace the &lt;code&gt;WPDrillController&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt; with the actual controller and method that should handle the request for this route.&lt;/p&gt; &#xA;&lt;p&gt;The route controller supports the following&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Invokable Controller Instance (should contains &lt;code&gt;__invoke()&lt;/code&gt; method in the class instance)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Invokable class binding, ex: &lt;code&gt;\App\Rest\Controllers\WPDrillController::class&lt;/code&gt;) (should contains &lt;code&gt;__invoke()&lt;/code&gt; method in the class)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Class and method mapping, ex: &lt;code&gt;[\App\Rest\Controllers\WPDrillController::class, &#39;method_name&#39;&lt;/code&gt;]`&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Closure&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Route Group&lt;/h3&gt; &#xA;&lt;p&gt;WPDrill also supports route grouping, here is the example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::group([&#39;prefix&#39; =&amp;gt; &#39;/info&#39;], function() {&#xA;    Route::get(&#39;/about&#39;, function () {&#xA;        return [&#xA;            &#39;title&#39; =&amp;gt; &#39;About WPDrill&#39;,&#xA;            &#39;content&#39; =&amp;gt; &#39;A WordPress Plugin development framework for humans&#39;,&#xA;        ];&#xA;    });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;View&lt;/h2&gt; &#xA;&lt;p&gt;WPDrill helps you to develop a high-level templating option, it comes with a Twig template engine by default. Here is an example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// app/Handlers&#xA;&#xA;use WPDrill\Contracts\InvokableContract;&#xA;use WPDrill\Facades\View;&#xA;&#xA;class WPDrillMenuHandler implements InvokableContract&#xA;{&#xA;    public function __invoke()&#xA;    {&#xA;        View::output(&#39;wpdrill&#39;, [&#xA;            &#39;title&#39; =&amp;gt; &#39;Welcome to WPDrill&#39;,&#xA;            &#39;content&#39; =&amp;gt; &#39;A WordPress Plugin development framework for humans&#39;,&#xA;        ]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the view(twig) file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-twig&#34;&gt;&amp;lt;!-- resources/views/wpdrill.html --&amp;gt;&#xA;&amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;&#xA;&#xA;&amp;lt;p&amp;gt;&#xA;    {{ content }}&#xA;&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shortcode&lt;/h2&gt; &#xA;&lt;p&gt;To add a new shortcode in WPDrill, you need to follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create a new Shortcode Class&lt;/strong&gt;: Create a new PHP class that implements the &lt;code&gt;ShortcodeContract&lt;/code&gt;. This class should define a &lt;code&gt;render&lt;/code&gt; method that returns the output of the shortcode. Here&#39;s an example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace App\Shortcodes;&#xA;&#xA;use WPDrill\Contracts\ShortcodeContract;&#xA;use WPDrill\Facades\View;&#xA;&#xA;class MyNewShortcode implements ShortcodeContract&#xA;{&#xA;    public function render(array $attrs, string $content = null): string&#xA;    {&#xA;        // Default attributes can be defined here&#xA;        $attrs = shortcode_atts(&#xA;            [&#xA;                &#39;title&#39; =&amp;gt; &#39;Default Title&#39;,&#xA;            ],&#xA;            $attrs&#xA;        );&#xA;&#xA;        // Use the View facade to render a view for this shortcode&#xA;        return View::render(&#39;shortcode/mynewshortcode&#39;, [&#xA;            &#39;title&#39; =&amp;gt; $attrs[&#39;title&#39;],&#xA;            &#39;content&#39; =&amp;gt; $content,&#xA;        ]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Register the Shortcode&lt;/strong&gt;: In the &lt;code&gt;bootstrap/shortcodes.php&lt;/code&gt; file, use the &lt;code&gt;Shortcode::add&lt;/code&gt; method to register the new shortcode. Here&#39;s how you can do it:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use WPDrill\Facades\Shortcode;&#xA;use WPDrill\Plugin;&#xA;&#xA;return function(Plugin $plugin) {&#xA;    Shortcode::add(&#39;mynewshortcode&#39;, \App\Shortcodes\MyNewShortcode::class);&#xA;    // Existing shortcodes...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, a new shortcode &lt;code&gt;[mynewshortcode]&lt;/code&gt; is registered. When this shortcode is used in a post or page, the &lt;code&gt;render&lt;/code&gt; method of the &lt;code&gt;MyNewShortcode&lt;/code&gt; class is executed.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create the View&lt;/strong&gt;: Create a new PHP file in the &lt;code&gt;views/shortcode&lt;/code&gt; directory for the view of this shortcode. This file should return the HTML that you want to display when the shortcode is used.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please replace &lt;code&gt;MyNewShortcode&lt;/code&gt;, &lt;code&gt;mynewshortcode&lt;/code&gt;, and &lt;code&gt;shortcode/mynewshortcode&lt;/code&gt; with the actual class name, shortcode tag, and view file path for your shortcode.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with WPDrill, you need to have a basic understanding of WordPress plugin development as well as familiarity with PHP, JavaScript, Composer, and NPM.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For more detailed information on how to use WPDrill, refer to the individual PHP files in the &lt;code&gt;wp-content/plugins/reviewx&lt;/code&gt; directory. Each file contains code that demonstrates how to use various features of WPDrill.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to WPDrill are welcome. Please ensure that you follow the coding standards and guidelines of the project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;WPDrill is open-source software.&lt;/p&gt;</summary>
  </entry>
</feed>