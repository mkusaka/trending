<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-11T01:34:23Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>symfony-orchestra/view-bundle</title>
    <updated>2024-04-11T01:34:23Z</updated>
    <id>tag:github.com,2024-04-11:/symfony-orchestra/view-bundle</id>
    <link href="https://github.com/symfony-orchestra/view-bundle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The `view-bundle` is a simple and highly efficient Symfony bundle designed to replace Symfony Responses when working with the JSON API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;view-bundle&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;view-bundle&lt;/code&gt; is a simple and highly efficient Symfony bundle designed to replace Symfony Responses when working with the JSON API.&lt;/p&gt; &#xA;&lt;p&gt;The goal of the bundle is to separate the response views from the app&#39;s business logic, making them typed, configurable, and reusable across the app.&lt;/p&gt; &#xA;&lt;p&gt;As a result, you will have a set of simple &lt;code&gt;View&lt;/code&gt; classes with an internal hierarchy that is easily understandable by everybody in a team.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 8.3&lt;/li&gt; &#xA; &lt;li&gt;Symfony 7.0.*&lt;/li&gt; &#xA; &lt;li&gt;Doctrine common ^3.4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;php&#34;: &#34;^8.3&#34;,&#xA;  &#34;symfony/http-kernel&#34;: &#34;7.0.*&#34;,&#xA;  &#34;symfony/serializer&#34;: &#34;7.0.*&#34;,&#xA;  &#34;symfony/property-access&#34;: &#34;7.0.*&#34;,&#xA;  &#34;symfony/dependency-injection&#34;: &#34;7.0.*&#34;,&#xA;  &#34;symfony/config&#34;: &#34;7.0.*&#34;,&#xA;  &#34;doctrine/common&#34;: &#34;^3.4.3&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example&lt;/h1&gt; &#xA;&lt;p&gt;Let&#39;s consider the code below as an example. We have an entity &lt;code&gt;User&lt;/code&gt; with some fields and with the joined collection of &lt;code&gt;Image&lt;/code&gt; images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;declare(strict_types=1);&#xA;&#xA;class User&#xA;{&#xA;    public Uuid $id;&#xA;    public string|null $firstName = null;&#xA;    public string|null $lastName = null;&#xA;    public iterable $images = [];&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;declare(strict_types=1);&#xA;&#xA;class Image&#xA;{&#xA;    public Uuid $id;&#xA;    private User $user;&#xA;    private string $path;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The possible views for our scenario could be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;declare(strict_types=1);&#xA;&#xA;use SymfonyOrchestra\ViewBundle\Attribute\Type;&#xA;&#xA;class UserView extends BindView&#xA;{&#xA;    public Uuid $id;&#xA;    public string|null $firstName;&#xA;    public string|null $lastName;&#xA;    &#xA;    /** It will be transformed into array of ImageViews */&#xA;    #[Type(ImageView::class)]&#xA;    public IterableView $images;&#xA;    &#xA;    /** It&#39;s a custom property which does not exist in the User class */&#xA;    public \DateTimeImmutable $notBoundField;&#xA;&#xA;    public function __construct(User $user)&#xA;    {&#xA;        parent::__construct($user);&#xA;        $this-&amp;gt;notBoundField = $user-&amp;gt;getCreatedDatetime();&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;declare(strict_types=1);&#xA;&#xA;class ImageView extends BindView&#xA;{&#xA;    public Uuid $id;&#xA;    public string $path;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a result, the following request for the current user with the name &#34;Andrew&#34;, an empty last name, and some pictures of the orchestra&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;declare(strict_types=1);&#xA;&#xA;#[Route(&#39;/user/me&#39;, methods: [&#39;GET&#39;], priority: 1)]&#xA;#[IsGranted(&#39;ROLE_USER&#39;)]&#xA;class GetMeAction extends GetAction&#xA;{&#xA;    public function __invoke(Request $request): ViewInterface&#xA;    {&#xA;        return new UserView($this-&amp;gt;getUser());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will produce the following 200 response&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;data&#34;: {&#xA;    &#34;id&#34;: &#34;92c7c4d4-2ce0-4353-a9e2-6a3794c60d8f&#34;,&#xA;    &#34;firstName&#34;: &#34;Andrew&#34;,&#xA;    &#34;images&#34;: [&#xA;      {&#xA;        &#34;id&#34;: &#34;eb9fa57e-3d8f-44c5-80d4-7f33220f1a48&#34;,&#xA;        &#34;path&#34;: &#34;/grand-piano.png&#34;&#xA;      },&#xA;      {&#xA;        &#34;id&#34;: &#34;16d01967-9066-4dc9-9d82-028419ba0ed5&#34;,&#xA;        &#34;path&#34;: &#34;/violin.png&#34;&#xA;      }&#xA;    ],&#xA;    &#34;notBoundField&#34;: &#34;1685-03-31&#34;&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The response is fully controllable, you can still add different headers to the response using the stack of provided internal View classes (&lt;code&gt;ResponseView&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The main payload is placed under the &lt;code&gt;data&lt;/code&gt; key in the JSON array.&lt;/p&gt; &#xA;&lt;p&gt;As you can see, the last name is omitted because &lt;code&gt;null&lt;/code&gt; values were removed from the response to match with &lt;code&gt;undefined&lt;/code&gt; properties while working with a &lt;code&gt;Typescript&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer install symfony-orchestra/view-bundle:7.0.*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the bundle to &lt;code&gt;config/bundles.php&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;return [&#xA;    /** ... */&#xA;    SymfonyOrchestra\ViewBundle\DevViewBundle::class =&amp;gt; [&#39;all&#39; =&amp;gt; true],&#xA;];&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make it work your controller should return an object of instance of &lt;code&gt;SymfonyOrchestra\ViewBundle\View\ViewInterface&lt;/code&gt; instead of &lt;code&gt;Symfony\Component\HttpFoundation\Response&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Cache&lt;/h1&gt; &#xA;&lt;p&gt;The most usable &lt;code&gt;SymfonyOrchestra\ViewBundle\View\BindView&lt;/code&gt; which maps the properties of the class with the properties of the view comes with the cache support. See &lt;code&gt;SymfonyOrchestra\ViewBundle\EventSubscriber\SetVersionSubscriber&lt;/code&gt; for more details. It uses &lt;code&gt;Symfony\Component\PropertyAccess\PropertyAccessor::createCache&lt;/code&gt; when the env parameter &lt;code&gt;APP_DEBUG&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Internal views&lt;/h1&gt; &#xA;&lt;p&gt;The bundle comes with the several internal core views.&lt;/p&gt; &#xA;&lt;h3&gt;\SymfonyOrchestra\ViewBundle\View\ResponseView&lt;/h3&gt; &#xA;&lt;p&gt;The main view that can be considered as a response. Contains headers and http status that can be overridden. See &lt;code&gt;SymfonyOrchestra\EventSubscriber\ViewSubscriber&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;\SymfonyOrchestra\ViewBundle\View\DataView&lt;/h3&gt; &#xA;&lt;p&gt;The inherited view of the &lt;code&gt;ResponseView&lt;/code&gt;, that wraps all the data into &lt;code&gt;data&lt;/code&gt; JSON key. See &lt;code&gt;SymfonyOrchestra\EventSubscriber\ViewSubscriber&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;\SymfonyOrchestra\ViewBundle\View\BindView&lt;/h3&gt; &#xA;&lt;p&gt;The helper View that maps the properties of the underlined object to the view as one to one. The most powerful one. It uses &lt;code&gt;SymfonyOrchestra\ViewBundle\Utils\BindUtils&lt;/code&gt; internally to map the properties.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User {&#xA;    private int $int;&#xA;    private string $string;&#xA;    private iterable $collection&#xA;}&#xA;&#xA;class UserView extends \SymfonyOrchestra\ViewBundle\View\BindView {&#xA;    /** will take all the properties from the User class */&#xA;    private int $int;&#xA;    private string $string;&#xA;    private array $collection&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;\SymfonyOrchestra\ViewBundle\View\IterableView&lt;/h3&gt; &#xA;&lt;p&gt;The view for the iterable objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;class GetOptions  extends GetAction&#xA;{&#xA;    public function __invoke(Request $request): ViewInterface&#xA;    {&#xA;        $option1 = new Option();&#xA;        $option2 = new Option();&#xA;        return new \SymfonyOrchestra\ViewBundle\View\IterableView(&#xA;            [$option1, $option2],&#xA;            OptionView::class,&#xA;        );&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can be used together with the &lt;code&gt;\SymfonyOrchestra\ViewBundle\Attribute\Type&lt;/code&gt; and &lt;code&gt;\SymfonyOrchestra\ViewBundle\View\BindView&lt;/code&gt; attribute to simplify the workflow. In this case the underlined iterable objects will be automatically constructed based on the configured type.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enjoy the orchestra! ðŸŽ»&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>