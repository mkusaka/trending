<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-30T01:41:18Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>billabear/billabear</title>
    <updated>2023-06-30T01:41:18Z</updated>
    <id>tag:github.com,2023-06-30:/billabear/billabear</id>
    <link href="https://github.com/billabear/billabear" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SaaS Subscription Management and Billing System&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;450px&#34; src=&#34;https://ha-static-data.s3.eu-central-1.amazonaws.com/github-readme-logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 style=&#34;text-align: center&#34;&gt;BillaBear&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;BillaBear is a standalone Subscription Management and Billing System that integrates with Stripe. It provides a REST API allowing you to integrate it easily.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Watch the video on youtube.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/cbInyGtqLCs&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/cbInyGtqLCs/mqdefault.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.billabear.com/user/&#34;&gt;User Documentation&lt;/a&gt; - How to use BillaBear as a user&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.billabear.com/technical/&#34;&gt;Technical Documentation&lt;/a&gt; - Technical information for hosting and integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swagger.billabear.com&#34;&gt;Swagger&lt;/a&gt; - The REST API docs for integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully customisable Invoice, Receipt, and Email templates&lt;/li&gt; &#xA; &lt;li&gt;White Label Billing - Handle multiple brands&lt;/li&gt; &#xA; &lt;li&gt;Voucher Management&lt;/li&gt; &#xA; &lt;li&gt;REST API for integration&lt;/li&gt; &#xA; &lt;li&gt;Multiple Email Integrations - SendGrid, MailGun, and Postmark&lt;/li&gt; &#xA; &lt;li&gt;Expired Card Notifications - including the ability to offer incentives to add a card.&lt;/li&gt; &#xA; &lt;li&gt;Multiple Subscriptions per customer - Add add-ons.&lt;/li&gt; &#xA; &lt;li&gt;Ability to have Custom Plans and Custom pricing&lt;/li&gt; &#xA; &lt;li&gt;Stripe Billing Data Import&lt;/li&gt; &#xA; &lt;li&gt;Stripe Billing Integration&lt;/li&gt; &#xA; &lt;li&gt;Ability to Migrate away from Stripe Billing&lt;/li&gt; &#xA; &lt;li&gt;Invoice payment type for Enterprise customers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lifetime Deal&lt;/h2&gt; &#xA;&lt;p&gt;Until the 1st of July we&#39;re offering a lifetime upgrade license for a one-off fee of 250 GBP. &lt;a href=&#34;https://buy.stripe.com/4gweY33GnaNP8daeUU&#34;&gt;Buy a lifetime upgrade license here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This offer must end on the 1st of July as we&#39;ll start approaching companies asking for thousands per year so this offer must end.&lt;/p&gt; &#xA;&lt;p&gt;What do you get? A license to use BillaBear in production and priority customer support forever.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://buy.stripe.com/4gweY33GnaNP8daeUU&#34;&gt;Buy now&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;RoadMap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webhooks to listen for billing events&lt;/li&gt; &#xA; &lt;li&gt;Tax Software Integrations&lt;/li&gt; &#xA; &lt;li&gt;Better Reports&lt;/li&gt; &#xA; &lt;li&gt;Slack/etc integration for internal communications&lt;/li&gt; &#xA; &lt;li&gt;Per Seat billing&lt;/li&gt; &#xA; &lt;li&gt;Metric and Usage Based Billing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/billabear/billabear/discussions/categories/ideas&#34;&gt;And you can add more here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Integrate&lt;/h2&gt; &#xA;&lt;p&gt;To start integrating with BillaBear you can use the REST API.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swagger.billabear.com&#34;&gt;Swagger Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.billabear.com/technical/api/&#34;&gt;Technical Documentation For API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started using this repository you can get up and running using Docker and Docker compose.&lt;/p&gt; &#xA;&lt;h3&gt;Host on DigitalOcean&lt;/h3&gt; &#xA;&lt;p&gt;You can deploy to DigitalOcean with just a click of the button below and it&#39;ll deploy using the DigitalOcean App Platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.digitalocean.com/apps/new?repo=https://github.com/billabear/billabear/tree/main&#34;&gt;&lt;img src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34; alt=&#34;Deploy to DO&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Billabear is deployable using docker-compose using the docker-compose.yaml found in &lt;a href=&#34;https://github.com/billabear/hosting-docker-compose&#34;&gt;https://github.com/billabear/hosting-docker-compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then go to &lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt; and follow the install instructions.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Is BillaBear Open Source?&lt;/h3&gt; &#xA;&lt;p&gt;No. BillaBear is released under the source-available license Business Source License. You can find it in the license.md. This is the same license as used by Sentry, CoackroachDB, and many more.&lt;/p&gt; &#xA;&lt;p&gt;After 3-years from the release date of a version, it will then become open-source.&lt;/p&gt; &#xA;&lt;h3&gt;How does the licensing work?&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;re able to use BillaBear for free in non-production environments. Any use of a production Stripe API key would be considered a production environment.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re able to use BillaBear for free if you&#39;re generating less than 5,000 USD a month. Otherwise, a paid license is required.&lt;/p&gt; &#xA;&lt;p&gt;We sell perpetual licenses for the version that was released on the date of purchase as well as upgrade licenses that allow upgrading to newer versions. If you buy a license and never wish to upgrade then you pay once and never again.&lt;/p&gt; &#xA;&lt;h3&gt;How much does BillaBear cost?&lt;/h3&gt; &#xA;&lt;p&gt;To get pricing email &lt;a href=&#34;mailto:sales@billabear.com&#34;&gt;sales@billabear.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Until the 1st of July we&#39;re offering a lifetime upgrade license for a one-off fee of 250 GBP. &lt;a href=&#34;https://buy.stripe.com/4gweY33GnaNP8daeUU&#34;&gt;Buy a lifetime upgrade license here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This offer must end on the 1st of July as we&#39;ll start approaching companies asking for thousands per year so this offer must end.&lt;/p&gt; &#xA;&lt;p&gt;What do you get? A license to use BillaBear in production and priority customer support forever.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://buy.stripe.com/4gweY33GnaNP8daeUU&#34;&gt;Buy now&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>blinq-dev/laravel-synth</title>
    <updated>2023-06-30T01:41:18Z</updated>
    <id>tag:github.com,2023-06-30:/blinq-dev/laravel-synth</id>
    <link href="https://github.com/blinq-dev/laravel-synth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate Laravel code with ChatGPT&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Synth for Laravel&lt;/h1&gt; &#xA;&lt;p&gt;(Not a official laravel package)&lt;/p&gt; &#xA;&lt;img width=&#34;693&#34; alt=&#34;Synth for Laravel&#34; src=&#34;https://github.com/blinq-dev/laravel-synth/assets/168357/7dccb9ba-1db5-4d6f-9a41-fde6f99a2446&#34;&gt; &#xA;&lt;p&gt;Synth is a Laravel tool that helps you generate code and perform various tasks in your Laravel application. It leverages the power of OpenAI&#39;s GPT language model to provide an interactive and intelligent development experience.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;h3&gt;Architect -&amp;gt; create a todo app üòéüèóÔ∏èüìù&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/blinq-dev/laravel-synth/assets/168357/78116a9a-1f37-4410-9f20-f9fe6573196b&#34;&gt;https://github.com/blinq-dev/laravel-synth/assets/168357/78116a9a-1f37-4410-9f20-f9fe6573196b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Attach files and create a readme.md üìéüìÑ‚úçÔ∏è&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/blinq-dev/laravel-synth/assets/168357/70bc57a5-0aa8-439f-95af-fb02685e3756&#34;&gt;https://github.com/blinq-dev/laravel-synth/assets/168357/70bc57a5-0aa8-439f-95af-fb02685e3756&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the Synth package using Composer:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require blinq/synth&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Publish the Synth configuration file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=synth-config&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set your OpenAI API key in the &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; &lt;p&gt;&lt;code&gt; OPENAI_KEY=YOUR_API_KEY &lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use Synth, simply run the &lt;code&gt;synth&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan synth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will open the Synth CLI, where you can interact with the GPT model and perform various tasks.&lt;/p&gt; &#xA;&lt;h3&gt;Features üåü&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically switch from small to large model when needed (gpt-3.5-turbo vs gpt-3.5-turbo-16k) üîÑ&lt;/li&gt; &#xA; &lt;li&gt;Uses the functions API of OpenAI üë®‚Äçüíª&lt;/li&gt; &#xA; &lt;li&gt;Cancel generation with Ctrl+C üö´‚å®&lt;/li&gt; &#xA; &lt;li&gt;Attachments: Attach files to the conversation with GPT. üóÇÔ∏è&lt;/li&gt; &#xA; &lt;li&gt;Architect: Brainstorm and generate a new application architecture. üí°üèõ&lt;/li&gt; &#xA; &lt;li&gt;Chat: Chat with GPT to get responses and perform actions. üí¨&lt;/li&gt; &#xA; &lt;li&gt;Make: Forces GPT to generate files for the question asked. üìÇ&lt;/li&gt; &#xA; &lt;li&gt;Migrations: Generate migrations for your application. üì¶&lt;/li&gt; &#xA; &lt;li&gt;Models: Generate models for your application. üìà&lt;/li&gt; &#xA; &lt;li&gt;Files: Write files to the filesystem. üñäÔ∏è&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can select a module from the main menu and follow the prompts to perform the desired actions.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Some modules require a previous step to be completed, such as creating an architecture before generating migrations or models.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Writing Your Own Modules&lt;/h2&gt; &#xA;&lt;p&gt;Synth allows you to extend its functionality by writing your own modules. A module is a class that implements the necessary methods to register and handle specific actions.&lt;/p&gt; &#xA;&lt;p&gt;To create a new module, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new PHP class that extends the &lt;code&gt;Module&lt;/code&gt; class.&lt;/li&gt; &#xA; &lt;li&gt;Implement the &lt;code&gt;name&lt;/code&gt; method to define the name of your module.&lt;/li&gt; &#xA; &lt;li&gt;Implement the &lt;code&gt;register&lt;/code&gt; method to define the actions provided by your module.&lt;/li&gt; &#xA; &lt;li&gt;Implement the &lt;code&gt;onSelect&lt;/code&gt; method to handle the selected action.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here is an example of a custom module implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Blinq\Synth\Modules\Module;&#xA;&#xA;/**&#xA; * Class MyModule&#xA; * &#xA; * @propery \Blinq\Synth\Commands\SynthCommand $cmd&#xA; */&#xA;class MyModule extends Module&#xA;{&#xA;    public function name(): string&#xA;    {&#xA;        return &#39;MyModule&#39;;&#xA;    }&#xA;&#xA;    public function register(): arraya&#xA;    {&#xA;        return [&#xA;            &#39;action1&#39; =&amp;gt; &#39;Perform Action 1&#39;,&#xA;            &#39;action2&#39; =&amp;gt; &#39;Perform Action 2&#39;,&#xA;        ];&#xA;    }&#xA;&#xA;    public function onSelect(?string $key = null)&#xA;    {&#xA;        $this-&amp;gt;cmd-&amp;gt;info(&#34;You selected: {$key}&#34;);&#xA;&#xA;        $synth = $this-&amp;gt;cmd-&amp;gt;synth;&#xA;&#xA;        if ($key === &#39;action1&#39;) {&#xA;            // Handle Action 1&#xA;            while (true) {&#xA;                $input = $this-&amp;gt;cmd-&amp;gt;ask(&#34;You&#34;);&#xA;&#xA;                // Send the input to GPT&#xA;                $synth-&amp;gt;chat($input, [&#xA;                    // ... The OpenAI Chat options&#xA;&#xA;                    // If you want a function to be called by GPT&#xA;                    &#39;function_call&#39; =&amp;gt; [&#39;name&#39; =&amp;gt; &#39;some_function&#39;], // Forces the function call&#xA;                    &#39;functions&#39; =&amp;gt; [&#xA;                        [&#xA;                            &#39;name&#39; =&amp;gt; &#39;some_function&#39;,&#xA;                            &#39;description&#39; =&amp;gt; &#39;Description of the function&#39;,&#xA;                            &#39;parameters&#39; =&amp;gt; [&#xA;                                // ..schema&#xA;                            ]&#xA;                        ]&#xA;                    ]&#xA;                ]);&#xA;&#xA;                Functions::register(&#39;some_function&#39;, function (SynthCommand $cmd, $args, $asSpecified, $inSchema) { // etc..&#xA;                    // Do something with the call&#xA;                });&#xA;&#xA;                // This will parse the json result and call the function if needed&#xA;                $synth-&amp;gt;handleFunctionsForLastMessage();&#xA;&#xA;                // Just retrieve the last message&#xA;                $lastMessage = $synth-&amp;gt;getLastMessage();&#xA;&#xA;                // Echo it&#39;s contents&#xA;                echo $lastMessage-&amp;gt;content;&#xA;&#xA;                // Or it&#39;s raw function_call&#xA;                dump($lastMessage-&amp;gt;function_call);&#xA;&#xA;                if (!$input || $input == &#39;exit&#39;) {&#xA;                    break;&#xA;                }&#xA;            }&#xA;        }&#xA;        if ($key === &#39;action2&#39;) {&#xA;            // Handle Action 2&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then register your custom module in the &lt;code&gt;Modules&lt;/code&gt; class within the Synth package and use it in the CLI interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Blinq\Synth\Modules;&#xA;&#xA;Modules::register(MyModule::class);&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>dokuwiki/dokuwiki</title>
    <updated>2023-06-30T01:41:18Z</updated>
    <id>tag:github.com,2023-06-30:/dokuwiki/dokuwiki</id>
    <link href="https://github.com/dokuwiki/dokuwiki" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The DokuWiki Open Source Wiki Engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;All documentation for DokuWiki is available online at &lt;a href=&#34;https://www.dokuwiki.org/&#34;&gt;https://www.dokuwiki.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Installation Instructions see &lt;a href=&#34;https://www.dokuwiki.org/install&#34;&gt;https://www.dokuwiki.org/install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DokuWiki - 2004-2023 (c) Andreas Gohr &lt;a href=&#34;mailto:andi@splitbrain.org&#34;&gt;andi@splitbrain.org&lt;/a&gt; and the DokuWiki Community See COPYING and file headers for license info&lt;/p&gt;</summary>
  </entry>
</feed>