<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-06T01:41:12Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lmsqueezy/laravel</title>
    <updated>2023-05-06T01:41:12Z</updated>
    <id>tag:github.com,2023-05-06:/lmsqueezy/laravel</id>
    <link href="https://github.com/lmsqueezy/laravel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A package to easily integrate your Laravel application with Lemon Squeezy.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/lmsqueezy/laravel/raw/HEAD/art/readme-header.png&#34; alt=&#34;Readme header&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Lemon Squeezy for Laravel&lt;/h1&gt; &#xA;&lt;a href=&#34;https://github.com/lmsqueezy/laravel/actions&#34;&gt; &lt;img src=&#34;https://github.com/lmsqueezy/laravel/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/lmsqueezy/laravel/actions/workflows/coding-standards.yml&#34;&gt; &lt;img src=&#34;https://github.com/lmsqueezy/laravel/actions/workflows/coding-standards.yml/badge.svg?sanitize=true&#34; alt=&#34;Coding Standards&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://packagist.org/packages/lemonsqueezy/laravel&#34;&gt; &lt;img src=&#34;https://img.shields.io/packagist/v/lemonsqueezy/laravel&#34; alt=&#34;Latest Stable Version&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://packagist.org/packages/lemonsqueezy/laravel&#34;&gt; &lt;img src=&#34;https://img.shields.io/packagist/dt/lemonsqueezy/laravel&#34; alt=&#34;Total Downloads&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;A package to easily integrate your &lt;a href=&#34;https://laravel.com&#34;&gt;Laravel&lt;/a&gt; application with Lemon Squeezy. It takes the pain out of setting up a checkout experience. Easily set up payments for your products or let your customers subscribe to your product plans. Handle grace periods, pause subscriptions, or offer free trials.&lt;/p&gt; &#xA;&lt;p&gt;This package drew inspiration from &lt;a href=&#34;https://github.com/laravel/cashier-stripe&#34;&gt;Cashier&lt;/a&gt; which was created by &lt;a href=&#34;https://twitter.com/taylorotwell&#34;&gt;Taylor Otwell&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lemon Squeezy for Laravel is maintained by &lt;a href=&#34;https://twitter.com/driesvints&#34;&gt;Dries Vints&lt;/a&gt;. Any sponsorship to &lt;a href=&#34;https://github.com/sponsors/driesvints&#34;&gt;help fund development off this package&lt;/a&gt; is greatly appreciated ❤️&lt;/p&gt; &#xA;&lt;p&gt;We also recommend to read the Lemon Squeezy &lt;a href=&#34;https://docs.lemonsqueezy.com/help&#34;&gt;docs&lt;/a&gt; and &lt;a href=&#34;https://docs.lemonsqueezy.com/guides/developer-guide&#34;&gt;developer guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This package is a work in progress. As long as there is no v1.0.0, breaking changes may occur in v0.x releases. No upgrade path between v0.x versions will be provided.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The below features are not yet in this package but are planned to be added in the future:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Subscription invoices&lt;/li&gt; &#xA; &lt;li&gt;License keys&lt;/li&gt; &#xA; &lt;li&gt;Marketing emails check&lt;/li&gt; &#xA; &lt;li&gt;Product &amp;amp; variant listing&lt;/li&gt; &#xA; &lt;li&gt;Custom priced checkouts&lt;/li&gt; &#xA; &lt;li&gt;Create discount codes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 8.1 or higher&lt;/li&gt; &#xA; &lt;li&gt;Laravel 10.0 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are a few steps you&#39;ll need to take to install the package:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Requiring the package through Composer&lt;/li&gt; &#xA; &lt;li&gt;Creating an API Key&lt;/li&gt; &#xA; &lt;li&gt;Connecting your store&lt;/li&gt; &#xA; &lt;li&gt;Configuring the Billable Model&lt;/li&gt; &#xA; &lt;li&gt;Connecting to Lemon JS&lt;/li&gt; &#xA; &lt;li&gt;Setting up webhooks&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We&#39;ll go over each of these below.&lt;/p&gt; &#xA;&lt;h3&gt;Composer&lt;/h3&gt; &#xA;&lt;p&gt;Install the package with composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require lemonsqueezy/laravel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API Key&lt;/h3&gt; &#xA;&lt;p&gt;Next, configure your API key. Create a new key in testing mode in &lt;a href=&#34;https://app.lemonsqueezy.com/settings/api&#34;&gt;the Lemon Squeezy dashboard&lt;/a&gt; and paste them in your &lt;code&gt;.env&lt;/code&gt; file as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;LEMON_SQUEEZY_API_KEY=your-lemon-squeezy-api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you&#39;re deploying your app to production, you&#39;ll have to create a new key in production mode to work with live data.&lt;/p&gt; &#xA;&lt;h3&gt;Store Identifier&lt;/h3&gt; &#xA;&lt;p&gt;Your store identifier will be used when creating checkouts for your products. Go to &lt;a href=&#34;https://app.lemonsqueezy.com/settings/general&#34;&gt;your Lemon Squeezy general settings&lt;/a&gt; and copy the Store ID (the part after the &lt;code&gt;#&lt;/code&gt; sign) into the env value below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;LEMON_SQUEEZY_STORE=your-lemon-squeezy-store-id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Billable Model&lt;/h3&gt; &#xA;&lt;p&gt;To make sure we can actually create checkouts for our customers, we&#39;ll need to configure a model to be our &#34;billable&#34; model. This is typical the &lt;code&gt;User&lt;/code&gt; model of your app. To do this, import and use the &lt;code&gt;Billable&lt;/code&gt; trait on your model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use LemonSqueezy\Laravel\Billable;&#xA; &#xA;class User extends Authenticatable&#xA;{&#xA;    use Billable;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now your user model will have access to methods from our package to create checkouts in Lemon Squeezy for your products.&lt;/p&gt; &#xA;&lt;h3&gt;Lemon JS&lt;/h3&gt; &#xA;&lt;p&gt;Lemon Squeezy uses its own JavaScript library to initiate its checkout widget. We can make use of it by loading it through the Blade directive in the &lt;code&gt;head&lt;/code&gt; section of our app, right before the closing &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;&amp;lt;head&amp;gt;&#xA;    ...&#xA; &#xA;    @lemonJS&#xA;&amp;lt;/head&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Webhooks&lt;/h3&gt; &#xA;&lt;p&gt;Finally, make sure to set up incoming webhooks. This is both needed in development as in production. Go to &lt;a href=&#34;https://app.lemonsqueezy.com/settings/webhooks&#34;&gt;your Lemon Squeezy&#39;s webhook settings&lt;/a&gt; and point the url to your exposed local app. You can use &lt;a href=&#34;https://ngrok.com/&#34;&gt;Ngrok&lt;/a&gt;, &lt;a href=&#34;https://github.com/beyondcode/expose&#34;&gt;Expose&lt;/a&gt; or another tool of your preference for this.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to select all event types. The path you should point to is &lt;code&gt;/lemon-squeezy/webhook&lt;/code&gt; by default. &lt;strong&gt;We also very much recommend to &lt;a href=&#34;https://raw.githubusercontent.com/lmsqueezy/laravel/main/#verifying-webhook-signatures&#34;&gt;verify webhook signatures&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Webhooks &amp;amp; CSRF Protection&lt;/h4&gt; &#xA;&lt;p&gt;Incoming webhooks should not be affected by &lt;a href=&#34;https://laravel.com/docs/csrf&#34;&gt;CSRF protection&lt;/a&gt;. To prevent this, add your webhook path to the except list of your &lt;code&gt;App\Http\Middleware\VerifyCsrfToken&lt;/code&gt; middleware:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected $except = [&#xA;    &#39;lemon-squeezy/*&#39;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://raw.githubusercontent.com/lmsqueezy/laravel/main/UPGRADE.md&#34;&gt;our upgrade guide&lt;/a&gt; when upgrading to a new version.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The package offers various way to configure your experience with integrating with Lemon Squeezy.&lt;/p&gt; &#xA;&lt;h3&gt;Verifying Webhook Signatures&lt;/h3&gt; &#xA;&lt;p&gt;In order to make sure that incoming webhooks are actually from Lemon Squeezy, we can configure a signing secret for them. Go to your webhook settings in the Lemon Squeezy dashboard, click on the webhook of your app and copy the signing secret into the environment variable below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;LEMON_SQUEEZY_SIGNING_SECRET=your-webhook-signing-secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any incoming webhook will now first be verified before being executed.&lt;/p&gt; &#xA;&lt;h2&gt;Checkouts&lt;/h2&gt; &#xA;&lt;p&gt;With this package, you can easily create checkouts for your customers.&lt;/p&gt; &#xA;&lt;h3&gt;Single Payments&lt;/h3&gt; &#xA;&lt;p&gt;For example, to create a checkout for a single-payment, use a variant ID of a product variant you want to sell and create a checkout using the snippet below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Http\Request;&#xA; &#xA;Route::get(&#39;/buy&#39;, function (Request $request) {&#xA;    return $request-&amp;gt;user()-&amp;gt;checkout(&#39;variant-id&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will automatically redirect your customer to a Lemon Squeezy checkout where the customer can buy your product.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; When creating a checkout for your store, each time you redirect a checkout object or call &lt;code&gt;url&lt;/code&gt; on the checkout object, an API call to Lemon Squeezy will be made. These calls are expensive and can be time and resource consuming for your app. If you are creating the same session over and over again you may want to cache these urls.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Overlay Widget&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; the overlay widget currently has &lt;a href=&#34;https://github.com/lmsqueezy/laravel/issues/4&#34;&gt;a pending issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Instead of redirecting your customer to a checkout screen, you can also create a checkout button which will render a checkout overlay on your page. To do this, pass the &lt;code&gt;$checkout&lt;/code&gt; object to a view:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Http\Request;&#xA; &#xA;Route::get(&#39;/buy&#39;, function (Request $request) {&#xA;    $checkout = $request-&amp;gt;user()-&amp;gt;checkout(&#39;variant-id&#39;);&#xA;&#xA;    return view(&#39;billing&#39;, [&#39;checkout&#39; =&amp;gt; $checkout]);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, create the button using the shipped Laravel Blade component from the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;&amp;lt;x-lemon-button :href=&#34;$checkout&#34; class=&#34;px-8 py-4&#34;&amp;gt;&#xA;    Buy Product&#xA;&amp;lt;/x-lemon-button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a user clicks this button, it&#39;ll trigger the Lemon Squeezy checkout overlay. You can also, optionally request it to be rendered in dark mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;&amp;lt;x-lemon-button :href=&#34;$checkout&#34; class=&#34;px-8 py-4&#34; dark&amp;gt;&#xA;    Buy Product&#xA;&amp;lt;/x-lemon-button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re checking out subscriptions, and you don&#39;t want to to show the &#34;You will be charged...&#34; text, you may disable this by calling the &lt;code&gt;withoutSubscriptionPreview&lt;/code&gt; method on the checkout object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$request-&amp;gt;user()-&amp;gt;subscribe(&#39;variant-id&#39;)&#xA;    -&amp;gt;withoutSubscriptionPreview();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to set a different color for the checkout button you may pass a hex color code (with the leading &lt;code&gt;#&lt;/code&gt; sign) through &lt;code&gt;withButtonColor&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$request-&amp;gt;user()-&amp;gt;checkout(&#39;variant-id&#39;)&#xA;    -&amp;gt;withButtonColor(&#39;#FF2E1F&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prefill User Data&lt;/h3&gt; &#xA;&lt;p&gt;You can easily prefill user data for checkouts by overwriting the following methods on your billable model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function lemonSqueezyName(): ?string; // name&#xA;public function lemonSqueezyEmail(): ?string; // email&#xA;public function lemonSqueezyCountry(): ?string; // country&#xA;public function lemonSqueezyZip(): ?string; // zip&#xA;public function lemonSqueezyTaxNumber(): ?string; // tax_number&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the attributes displayed in a comment on the right of the methods will be used.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you may also pass this data on the fly by using the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Http\Request;&#xA; &#xA;Route::get(&#39;/buy&#39;, function (Request $request) {&#xA;    return $request-&amp;gt;user()-&amp;gt;checkout(&#39;variant-id&#39;)&#xA;        -&amp;gt;withName(&#39;John Doe&#39;)&#xA;        -&amp;gt;withEmail(&#39;john@example.com&#39;)&#xA;        -&amp;gt;withBillingAddress(&#39;US&#39;, &#39;10038&#39;) // Country &amp;amp; Zip Code&#xA;        -&amp;gt;withTaxNumber(&#39;123456679&#39;)&#xA;        -&amp;gt;withDiscountCode(&#39;PROMO&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Redirects After Purchase&lt;/h3&gt; &#xA;&lt;p&gt;To redirect customers back to your app after purchase, you may use the &lt;code&gt;redirectTo&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$request-&amp;gt;user()-&amp;gt;checkout(&#39;variant-id&#39;)&#xA;    -&amp;gt;redirectTo(url(&#39;/&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also set a default url for this by configuring the &lt;code&gt;lemon-squeezy.redirect_url&lt;/code&gt; in your config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;redirect_url&#39; =&amp;gt; &#39;https://my-app.com/dashboard&#39;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expire Checkouts&lt;/h3&gt; &#xA;&lt;p&gt;You can indicate how long a checkout session should stay active by calling the &lt;code&gt;expiresAt&lt;/code&gt; method on it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$request-&amp;gt;user()-&amp;gt;checkout(&#39;variant-id&#39;)&#xA;    -&amp;gt;expiresAt(now()-&amp;gt;addDays(3));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Data&lt;/h3&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://docs.lemonsqueezy.com/help/checkout/passing-custom-data&#34;&gt;pass along custom data with your checkouts&lt;/a&gt;. To do this, send along key/value pairs with the checkout method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Http\Request;&#xA; &#xA;Route::get(&#39;/buy&#39;, function (Request $request) {&#xA;    return $request-&amp;gt;user()-&amp;gt;checkout(&#39;variant-id&#39;, custom: [&#39;foo&#39; =&amp;gt; &#39;bar&#39;]);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These will then later be available in the related webhooks for you.&lt;/p&gt; &#xA;&lt;h4&gt;Reserved Keywords&lt;/h4&gt; &#xA;&lt;p&gt;When working with custom data there are a few reserved keywords for this library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;billable_id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;billable_type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;subscription_type&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Attempting to use any of these will result in an exception being thrown.&lt;/p&gt; &#xA;&lt;h2&gt;Subscriptions&lt;/h2&gt; &#xA;&lt;h3&gt;Setting Up Subscription Products&lt;/h3&gt; &#xA;&lt;p&gt;Setting up subscription products with different plans and intervals needs to be done in a specific way. Lemon Squeezy has &lt;a href=&#34;https://docs.lemonsqueezy.com/guides/tutorials/saas-subscription-plans&#34;&gt;a good guide&lt;/a&gt; on how to do this.&lt;/p&gt; &#xA;&lt;p&gt;Although you&#39;re free to choose how you set up products and plans, it&#39;s easier to go for option two and create a product for each plan type. So for example, when you have a &#34;Basic&#34; and &#34;Pro&#34; plan and both have monthly and yearly prices, it&#39;s wiser to create two separate products for these and then add two variants for each for their monthly and yearly prices.&lt;/p&gt; &#xA;&lt;p&gt;This gives you the advantage later on to make use of the &lt;code&gt;hasProduct&lt;/code&gt; method on a subscription which allows you to just check if a subscription is on a specific plan type and don&#39;t worry if it&#39;s on a monthly or yearly schedule.&lt;/p&gt; &#xA;&lt;h3&gt;Creating Subscriptions&lt;/h3&gt; &#xA;&lt;p&gt;Starting subscriptions is easy. For this, we need the variant id from our product. Copy the variant id and initiate a new subscription checkout from your billable model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Http\Request;&#xA; &#xA;Route::get(&#39;/subscribe&#39;, function (Request $request) {&#xA;    return $request-&amp;gt;user()-&amp;gt;subscribe(&#39;variant-id&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the customer has finished their checkout, the incoming &lt;code&gt;SubscriptionCreated&lt;/code&gt; webhook will couple it to your billable model in the database. You can then retrieve the subscription from your billable model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$subscription = $user-&amp;gt;subscription();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking Subscription Status&lt;/h3&gt; &#xA;&lt;p&gt;Once a customer is subscribed to your services, you can use a variety of methods to check for various states on the subscription. The most basic example, is to check if a customer is subscribed to a valid subscription:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscribed()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may use this in various places in your app like middleware, policies, etc, to offer your services. To check if an individual subscription is valid, you may use the &lt;code&gt;valid&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscription()-&amp;gt;valid()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method, as well as the &lt;code&gt;subscribed&lt;/code&gt; method, will return true if your subscription is active, on trial, past due, paused for free or on its cancelled grace period.&lt;/p&gt; &#xA;&lt;p&gt;You can also check if a subscription is on a specific product:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscription()-&amp;gt;hasProduct(&#39;your-product-id&#39;)) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or on a specific variant:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscription()-&amp;gt;hasVariant(&#39;your-variant-id&#39;)) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to check if a subscription is on a specific variant and at the same valid you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscribedToVariant(&#39;your-variant-id&#39;)) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you&#39;re using &lt;a href=&#34;https://raw.githubusercontent.com/lmsqueezy/laravel/main/#multiple-subscriptions&#34;&gt;multiple subscription types&lt;/a&gt;, you can pass a type as an extra parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscribed(&#39;swimming&#39;)) {&#xA;    // ...&#xA;}&#xA;&#xA;if ($user-&amp;gt;subscribedToVariant(&#39;your-variant-id&#39;, &#39;swimming&#39;)) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Cancelled Status&lt;/h4&gt; &#xA;&lt;p&gt;To check if a user has cancelled their subscription you may use the &lt;code&gt;cancelled&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscription()-&amp;gt;cancelled()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When they&#39;re on their grace period, you can use the &lt;code&gt;onGracePeriod&lt;/code&gt; check:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscription()-&amp;gt;onGracePeriod()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a subscription is fully cancelled and no longer on its grace period, you may use the &lt;code&gt;expired&lt;/code&gt; check:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscription()-&amp;gt;expired()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Past Due Status&lt;/h4&gt; &#xA;&lt;p&gt;If a recurring payment for a subscription fails, the subscription will transition in a past due state. This means it&#39;s still a valid subscription but your customer will have a 2 weeks period where their payments will be retried.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscription()-&amp;gt;pastDue()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this state, you should instruct your customer to &lt;a href=&#34;https://raw.githubusercontent.com/lmsqueezy/laravel/main/#updating-payment-information&#34;&gt;update their payment info&lt;/a&gt;. Failed payments in Lemon Squeezy are retried a couple of times. For more information on that, as well as the dunning process, head over to &lt;a href=&#34;https://docs.lemonsqueezy.com/help/online-store/recovery-dunning&#34;&gt;the Lemon Squeezy documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Subscription Scopes&lt;/h4&gt; &#xA;&lt;p&gt;Various subscriptions scopes are available to query subscriptions in specific states:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Get all active subscriptions...&#xA;$subscriptions = Subscription::query()-&amp;gt;active()-&amp;gt;get();&#xA; &#xA;// Get all of the cancelled subscriptions for a specific user...&#xA;$subscriptions = $user-&amp;gt;subscriptions()-&amp;gt;cancelled()-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s all available scopes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Subscription::query()-&amp;gt;onTrial();&#xA;Subscription::query()-&amp;gt;active();&#xA;Subscription::query()-&amp;gt;paused();&#xA;Subscription::query()-&amp;gt;pastDue();&#xA;Subscription::query()-&amp;gt;unpaid();&#xA;Subscription::query()-&amp;gt;cancelled();&#xA;Subscription::query()-&amp;gt;expired();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating Payment Information&lt;/h3&gt; &#xA;&lt;p&gt;To allow your customer to &lt;a href=&#34;https://docs.lemonsqueezy.com/guides/developer-guide/managing-subscriptions#updating-billing-details&#34;&gt;update their payment details&lt;/a&gt;, like their credit card info, you can redirect them with the following method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Http\Request;&#xA; &#xA;Route::get(&#39;/update-payment-info&#39;, function (Request $request) {&#xA;    $subscription = $request-&amp;gt;user()-&amp;gt;subscription();&#xA;&#xA;    return redirect(&#xA;        $subscription-&amp;gt;updatePaymentMethodUrl()&#xA;    );&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make the URL open in a more seamless overlay on top of your app (similar to the checkout overlay), you may use &lt;a href=&#34;https://docs.lemonsqueezy.com/help/lemonjs/opening-overlays#updating-payment-details-overlay&#34;&gt;Lemon.js&lt;/a&gt; to open the URL with the &lt;code&gt;LemonSqueezy.Url.Open()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;h3&gt;Changing Plans&lt;/h3&gt; &#xA;&lt;p&gt;When a customer is subscribed to a monthly plan, they might want to upgrade to a better plan, change their payments to a yearly plan or downgrade to a cheaper plan. For these situations, you can allow them to swap plans by passing a different variant id to the &lt;code&gt;swap&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use App\Models\User;&#xA;&#xA;$user = User::find(1);&#xA;&#xA;$user-&amp;gt;subscription()-&amp;gt;swap(&#39;variant-id&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will swap the customer to their new subscription plan but billing will only be done on the next billing cycle. If you&#39;d like to immediately invoice the customer you may use the &lt;code&gt;swapAndInvoice&lt;/code&gt; method instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::find(1);&#xA;&#xA;$user-&amp;gt;subscription()-&amp;gt;swapAndInvoice(&#39;variant-id&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Prorations&lt;/h4&gt; &#xA;&lt;p&gt;By default, Lemon Squeezy will prorate amounts when changing plans. If you want to prevent this, you may use the &lt;code&gt;noProrate&lt;/code&gt; method before executing the swap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::find(1);&#xA;&#xA;$user-&amp;gt;subscription()-&amp;gt;noProrate()-&amp;gt;swap(&#39;variant-id&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Subscriptions&lt;/h3&gt; &#xA;&lt;p&gt;In some situation you may find yourself wanting to allow your customer to subscribe to multiple subscription types. For example, a gym may offer a swimming and weight lifting subscription. You can allow your customer to subscribe to either or both.&lt;/p&gt; &#xA;&lt;p&gt;To handle the different subscriptions you may provide a &lt;code&gt;type&lt;/code&gt; of subscription as the second argument when starting a new one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::find(1);&#xA;&#xA;$checkout = $user-&amp;gt;subscribe(&#39;variant-id&#39;, &#39;swimming&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you may always refer this specific subscription type by providing the &lt;code&gt;type&lt;/code&gt; argument when retrieving it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::find(1);&#xA;&#xA;// Swap plans...&#xA;$user-&amp;gt;subscription(&#39;swimming&#39;)-&amp;gt;swap(&#39;variant-id&#39;);&#xA;&#xA;// Cancel...&#xA;$user-&amp;gt;subscription(&#39;swimming&#39;)-&amp;gt;cancel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pausing Subscriptions&lt;/h3&gt; &#xA;&lt;p&gt;To &lt;a href=&#34;https://docs.lemonsqueezy.com/guides/developer-guide/managing-subscriptions#pausing-and-unpausing-subscriptions&#34;&gt;pause subscriptions&lt;/a&gt;, call the &lt;code&gt;pause&lt;/code&gt; method on it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::find(1);&#xA;&#xA;$user-&amp;gt;subscription()-&amp;gt;pause();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, provide a date when the subscription can resume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::find(1);&#xA;&#xA;$user-&amp;gt;subscription()-&amp;gt;pause(&#xA;    now()-&amp;gt;addDays(5)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will fill in the &lt;code&gt;resumes_at&lt;/code&gt; timestamp on your customer. To know if your subscription is within its paused period you can use the &lt;code&gt;onPausedPeriod&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscription()-&amp;gt;onPausedPeriod()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To unpause, simply call that method on the subscription:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;subscription()-&amp;gt;unpause();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pause State&lt;/h4&gt; &#xA;&lt;p&gt;By default, pausing a subscription will void its usage for the remainder of the pause period. If you instead would like your customers to use your services for free, you may use the &lt;code&gt;pauseForFree&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;subscription()-&amp;gt;pauseForFree();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cancelling Subscriptions&lt;/h3&gt; &#xA;&lt;p&gt;To &lt;a href=&#34;https://docs.lemonsqueezy.com/guides/developer-guide/managing-subscriptions#cancelling-and-resuming-subscriptions&#34;&gt;cancel a subscription&lt;/a&gt;, call the &lt;code&gt;cancel&lt;/code&gt; method on it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = User::find(1);&#xA;&#xA;$user-&amp;gt;subscription()-&amp;gt;cancel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will set your subscription to be cancelled. If your subscription is cancelled mid-cycle, it&#39;ll enter a grace period and the &lt;code&gt;ends_at&lt;/code&gt; column will be set. The customer will still have access to the services provided for the remainder of the period. You can check for its grace period by calling the &lt;code&gt;onGracePeriod&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;subscription()-&amp;gt;onGracePeriod()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Immediate cancellation with Lemon Squeezy is not possible. To resume a subscription while it&#39;s still on its grace period, call the &lt;code&gt;resume&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;subscription()-&amp;gt;resume();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a cancelled subscription reaches the end of its grace period it&#39;ll transition to a state of expired and won&#39;t be able to resume any longer.&lt;/p&gt; &#xA;&lt;h3&gt;Subscription Trials&lt;/h3&gt; &#xA;&lt;p&gt;For a thorough read on trialing in Lemon Squeezy, &lt;a href=&#34;https://docs.lemonsqueezy.com/guides/tutorials/saas-free-trials&#34;&gt;have a look at their guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;No Payment Required&lt;/h3&gt; &#xA;&lt;p&gt;To allow people to signup for your product without having them to fill out their payment details, you may set the &lt;code&gt;trial_ends_at&lt;/code&gt; column when creating them as a customer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use App\Models\User;&#xA; &#xA;$user = User::create([&#xA;    // ...&#xA;]);&#xA; &#xA;$user-&amp;gt;createAsCustomer([&#xA;    &#39;trial_ends_at&#39; =&amp;gt; now()-&amp;gt;addDays(10)&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is what&#39;s called &#34;a generic trial&#34; because it&#39;s not attached to any subscription. You can use the &lt;code&gt;onTrial&lt;/code&gt; method to check if a customer is currently trialing your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;onTrial()) {&#xA;    // User is within their trial period...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you specifically also want to make sure it&#39;s a generic trial, you can use the &lt;code&gt;onGenericTrial&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;onGenericTrial()) {&#xA;    // User is within their &#34;generic&#34; trial period...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also retrieve the ending date of the trial by calling the &lt;code&gt;trialEndsAt&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;onTrial()) {&#xA;    $trialEndsAt = $user-&amp;gt;trialEndsAt();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As soon as your customer is ready, or after their trial has expired, they may start their subscription:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Http\Request;&#xA;&#xA;Route::get(&#39;/buy&#39;, function (Request $request) {&#xA;    return $request-&amp;gt;user()-&amp;gt;subscribe(&#39;variant-id&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that when a customer starts their subscription when they&#39;re still on their generic trial, their trial will be cancelled because they have started to pay for your product.&lt;/p&gt; &#xA;&lt;h3&gt;Payment required&lt;/h3&gt; &#xA;&lt;p&gt;Another option is to require payment details when people want to trial your products. This means that after the trial expires, they&#39;ll immediately be subscribed to your product. To get started with this, you&#39;ll need to &lt;a href=&#34;https://docs.lemonsqueezy.com/guides/tutorials/saas-free-trials#1-create-subscription-products-with-trials&#34;&gt;configure a trial period in your product&#39;s settings&lt;/a&gt;. Then, let a customer start a subscription:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Http\Request;&#xA;&#xA;Route::get(&#39;/buy&#39;, function (Request $request) {&#xA;    return $request-&amp;gt;user()-&amp;gt;subscribe(&#39;variant-id&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After your customer is subscribed, they&#39;ll enter their trial period which you configured and won&#39;t be charged until after this date. You&#39;ll need to give them the option to cancel their subscription before this time if they want.&lt;/p&gt; &#xA;&lt;p&gt;To check if your customer is currently on their free trial, you may use the &lt;code&gt;onTrial&lt;/code&gt; method on both the billable or an individual subscription:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;onTrial(&#39;default&#39;)) {&#xA;    // ...&#xA;}&#xA; &#xA;if ($user-&amp;gt;subscription(&#39;default&#39;)-&amp;gt;onTrial()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To determine if a trial has expired, you may use the &lt;code&gt;hasExpiredTrial&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($user-&amp;gt;hasExpiredTrial(&#39;default&#39;)) {&#xA;    // ...&#xA;}&#xA; &#xA;if ($user-&amp;gt;subscription(&#39;default&#39;)-&amp;gt;hasExpiredTrial()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Handling Webhooks&lt;/h2&gt; &#xA;&lt;p&gt;Lemon Squeezy can send your app webhooks which you can react on. By default, this package alread does the bulk of the work for you. &lt;a href=&#34;https://raw.githubusercontent.com/lmsqueezy/laravel/main/#webhooks&#34;&gt;If you&#39;ve properly set up webhooks&lt;/a&gt;, it&#39;ll listen to any incoming events and update your database accordingly. We recommend enabling all event types so it&#39;s easy for you to upgrade in the future.&lt;/p&gt; &#xA;&lt;p&gt;To listen to incoming webhooks, we have two events that will be fired:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;LemonSqueezy\Laravel\Events\WebhookReceived&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LemonSqueezy\Laravel\Events\WebhookHandled&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;WebhookReceived&lt;/code&gt; will be fired as soon as a webhook comes in but has not been handled by the package&#39;s &lt;code&gt;WebhookController&lt;/code&gt;. The &lt;code&gt;WebhookHandled&lt;/code&gt; event will be fired as soon as the webhook has been processed by the package. Both events will contain the full payload of the incoming webhook.&lt;/p&gt; &#xA;&lt;p&gt;If you want to react to these events, you&#39;ll have to create listeners for them. For example, you may want to react to a subscription being updated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA; &#xA;namespace App\Listeners;&#xA; &#xA;use LemonSqueezy\Laravel\Events\WebhookHandled;&#xA; &#xA;class LemonSqueezyEventListener&#xA;{&#xA;    /**&#xA;     * Handle received Lemon Squeezy webhooks.&#xA;     */&#xA;    public function handle(WebhookHandled $event): void&#xA;    {&#xA;        if ($event-&amp;gt;payload[&#39;meta&#39;][&#39;event_name&#39;] === &#39;subscription_updated&#39;) {&#xA;            // Handle the incoming event...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an example payload, &lt;a href=&#34;https://docs.lemonsqueezy.com/api/webhooks#webhook-requests&#34;&gt;take a look at the Lemon Squeezy API docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you have a listener, wire it up in your app&#39;s &lt;code&gt;EventServiceProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA; &#xA;namespace App\Providers;&#xA; &#xA;use App\Listeners\LemonSqueezyEventListener;&#xA;use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;&#xA;use LemonSqueezy\Laravel\Events\WebhookHandled;&#xA; &#xA;class EventServiceProvider extends ServiceProvider&#xA;{&#xA;    protected $listen = [&#xA;        WebhookHandled::class =&amp;gt; [&#xA;            LemonSqueezyEventListener::class,&#xA;        ],&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Webhook Events&lt;/h3&gt; &#xA;&lt;p&gt;Instead of listening to the &lt;code&gt;WebhookHandled&lt;/code&gt; event, you may also subscribe to one of the following, dedicated package events that are fired after a webhook has been handled:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;LemonSqueezy\Laravel\Events\SubscriptionCreated&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LemonSqueezy\Laravel\Events\SubscriptionUpdated&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LemonSqueezy\Laravel\Events\SubscriptionCancelled&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LemonSqueezy\Laravel\Events\SubscriptionResumed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LemonSqueezy\Laravel\Events\SubscriptionExpired&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LemonSqueezy\Laravel\Events\SubscriptionPaused&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LemonSqueezy\Laravel\Events\SubscriptionUnpaused&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these events contain a billable &lt;code&gt;$model&lt;/code&gt; instance, a &lt;code&gt;$subscription&lt;/code&gt; object and the event &lt;code&gt;$payload&lt;/code&gt;. These can be access through their public properties.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/lmsqueezy/laravel/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; in this repository for all the recent changes.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Lemon Squeezy for Laravel is open-sourced software licensed under &lt;a href=&#34;https://raw.githubusercontent.com/lmsqueezy/laravel/main/LICENSE.md&#34;&gt;the MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BiosNod/GIO-docker-braindead</title>
    <updated>2023-05-06T01:41:12Z</updated>
    <id>tag:github.com,2023-05-06:/BiosNod/GIO-docker-braindead</id>
    <link href="https://github.com/BiosNod/GIO-docker-braindead" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Long start&lt;/h2&gt; &#xA;&lt;p&gt;Read the full detailed guide in file &lt;code&gt;GIO guide book for braindead&lt;/code&gt; or read the quick start below if you are very skilled&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Put server bins to the &lt;code&gt;server&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Put server data (json, lua, txt, xml, version.txt) to the &lt;code&gt;server/data&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Run docker using &lt;code&gt;bootstrap.bat&lt;/code&gt; for Windows or &lt;code&gt;bootstrap.sh&lt;/code&gt; for Linux. Please don&#39;t use commands like &lt;code&gt;docker-compose up -d&lt;/code&gt; or &lt;code&gt;docker compose up -d&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run fiddler, set up the fiddler script (&lt;code&gt;fiddler-script.txt&lt;/code&gt;), use &lt;code&gt;bat&lt;/code&gt;/&lt;code&gt;sh&lt;/code&gt; only&lt;/li&gt; &#xA; &lt;li&gt;Make sure you patched the game using UserAssembly.dll for Grasscutter (or RSA Patch since 3.3). Read the full guide if you dunno how to patch it&lt;/li&gt; &#xA; &lt;li&gt;Wait for 15-30 minutes (Yes, it isn&#39;t a joke)&lt;/li&gt; &#xA; &lt;li&gt;Run the game, play&lt;/li&gt; &#xA; &lt;li&gt;If you want to make a public server - change &lt;code&gt;OUTER_IP&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt; file to your server ip, delete &lt;code&gt;.bootstrap.lock&lt;/code&gt; file and rerun &lt;code&gt;bootstrap&lt;/code&gt; &lt;code&gt;bat&lt;/code&gt;/&lt;code&gt;sh&lt;/code&gt; script (this action will erase all your database with the game progress). If you don&#39;t want to loose your progress - search &lt;code&gt;%OUTER_IP%&lt;/code&gt; in &lt;code&gt;xml.tmpl&lt;/code&gt; files and open related &lt;code&gt;xml&lt;/code&gt; files without &lt;code&gt;.tmpl&lt;/code&gt; extension and replace old IP to new IP in &lt;code&gt;.xml&lt;/code&gt; files (not in &lt;code&gt;.xml.tmpl&lt;/code&gt; - DON&#39;T replace &lt;code&gt;%OUTER_IP%&lt;/code&gt; in &lt;code&gt;.xml.tmpl&lt;/code&gt;, edit only &lt;code&gt;.xml&lt;/code&gt; files). Also search &lt;code&gt;%OUTER_IP%&lt;/code&gt; in &lt;code&gt;.sql.tmpl&lt;/code&gt; and see where you should change IP in real database (use phpmyadmin/adminer). DON&#39;T replace &lt;code&gt;%OUTER_IP%&lt;/code&gt; in &lt;code&gt;.sql.tmpl&lt;/code&gt; - replace only in real database.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;General information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All services use network with subnet &lt;code&gt;172.10.3.0/24&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Following services are masked (disabled) by using profile &lt;code&gt;donotstart&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;oaserver&lt;/li&gt; &#xA;   &lt;li&gt;pathfindingserver&lt;/li&gt; &#xA;   &lt;li&gt;tothemoonserver&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Following ports need to be open if you plan to expose your server to public: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;21081/udp&lt;/code&gt; for &lt;code&gt;gateserver&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;21000/tcp&lt;/code&gt; for SDK server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;R/W MySQL user is set to &lt;code&gt;hk4e_work&lt;/code&gt; and R/O to &lt;code&gt;hk4e_readonly&lt;/code&gt;; both accounts have their password set to &lt;code&gt;miHoYo2012&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Redis password is set to &lt;code&gt;miHoYo2012&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;muipserver&lt;/code&gt;&#39;s signing key is set to &lt;code&gt;9H2UrJ5J4yZJf95FqMkqi628snEmzvyV9oAp&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Passwords&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All passwords in .env file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Administration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adminer instance is available on &lt;code&gt;127.0.0.1:8085&lt;/code&gt;, use root as login and see password in .env file&lt;/li&gt; &#xA; &lt;li&gt;PHPMyAdmin instance is available on &lt;code&gt;127.0.0.1:8087&lt;/code&gt;, use root as login and see password in .env file&lt;/li&gt; &#xA; &lt;li&gt;SDK server has password verification &lt;em&gt;disabled&lt;/em&gt; by default; use &lt;code&gt;enable_password_verify&lt;/code&gt; option in &lt;code&gt;config.json&lt;/code&gt; to control it&lt;/li&gt; &#xA; &lt;li&gt;SDK server has guest accounts &lt;em&gt;enabled&lt;/em&gt; by default; use &lt;code&gt;enable_server_guest&lt;/code&gt; option in &lt;code&gt;config.json&lt;/code&gt; to control it&lt;/li&gt; &#xA; &lt;li&gt;Services have &lt;code&gt;DEBUG&lt;/code&gt; logs masked (disabled) by default; use &lt;code&gt;Root.LogConf.LogLevelMask&lt;/code&gt; option to control it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RSA keys&lt;/h2&gt; &#xA;&lt;p&gt;Use patched &lt;code&gt;UserAssembly.dll&lt;/code&gt;/&lt;code&gt;RSAPatch.dll&lt;/code&gt;/&lt;code&gt;Metadata&lt;/code&gt; for Grusscutter because these patches have same RSA keys as in the current database, see table: &lt;code&gt;hk4e_db.hk4e_db_deploy_config.t_rsakey_config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;All RSA keys at the beginning are added to the database through a file &lt;code&gt;data.sql&lt;/code&gt; (will be generated from &lt;code&gt;data.sql.tmpl&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Also you can you special RSA patcher by &lt;code&gt;Hotaru&lt;/code&gt; and add key for password too, for example:&lt;/p&gt; &#xA;&lt;h3&gt;Dispatch&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;RSAKeyValue&amp;gt;&amp;lt;Modulus&amp;gt;x6DXVi3/8v/9W0kbDjAi/96yoZG30Fydk7hWxdR4dpqKP0M58aLScwmd49c1i+uUGmGNmSSP0yqH2gFr6QS3yhBTnvQ3cs1UYG/j1PAHUs263pQy5gZay7RW41G+Vm2cL1AzuXpoEQ9JXDpTbOlGwl8pin+enVSYjXAwLrOQKSVRC6vrlnjDX8ozf7mPCC8h7w2XfBfsmuL+K8UvE6KDKQshQYppjDSGi8AtsFScIUmTMmXYPjWdP+gN/iD2M/vjXQAvlunSvXkHgWJ2bo/45cfFbXlxrRfStdri3SC16yFaTR6FbPh+cwci1RSZE/G1yA4hjB4UdYrb/hsYfMpK7w==&amp;lt;/Modulus&amp;gt;&amp;lt;Exponent&amp;gt;AQAB&amp;lt;/Exponent&amp;gt;&amp;lt;/RSAKeyValue&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Password&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;RSAKeyValue&amp;gt;&amp;lt;Modulus&amp;gt;yeF8n3X+VkwIhAdEK6Mp9ZGMW37N9tLWAlRnLkQ/7XccC7fim0LtK4FqEZLgnRvoPj0kWEhi6lWiY8v2gPdkKXhLqyTu/Cc2Ug+Let7U9t6Ez3gIdt3m5p499mbRFhx8ZuvZb6Q9I4++UXYWEfNisWADGOBl5qJD23FnMcTzjis=&amp;lt;/Modulus&amp;gt;&amp;lt;Exponent&amp;gt;AQAB&amp;lt;/Exponent&amp;gt;&amp;lt;/RSAKeyValue&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>