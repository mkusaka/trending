<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T01:33:14Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JosephSilber/bouncer</title>
    <updated>2022-06-26T01:33:14Z</updated>
    <id>tag:github.com,2022-06-26:/JosephSilber/bouncer</id>
    <link href="https://github.com/JosephSilber/bouncer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Eloquent roles and abilities.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1403741/39606419-587dbb1e-4f03-11e8-8e54-1bb2f39fb0f5.jpg&#34;&gt; &#xA;&lt;h1&gt;Bouncer&lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/JosephSilber/bouncer/actions&#34;&gt;&lt;img src=&#34;https://github.com/JosephSilber/bouncer/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/silber/bouncer&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/silber/bouncer/d/total.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JosephSilber/bouncer/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/silber/bouncer/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Bouncer is an elegant, framework-agnostic approach to managing roles and abilities for any app using Eloquent models.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Click to expand&lt;/summary&gt;&#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#installing-bouncer-in-a-laravel-app&#34;&gt;Installing Bouncer in a Laravel app&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#installing-bouncer-in-a-non-laravel-app&#34;&gt;Installing Bouncer in a non-Laravel app&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#enabling-cache&#34;&gt;Enabling cache&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#creating-roles-and-abilities&#34;&gt;Creating roles and abilities&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#assigning-roles-to-a-user&#34;&gt;Assigning roles to a user&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#giving-a-user-an-ability-directly&#34;&gt;Giving a user an ability directly&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#restricting-an-ability-to-a-model&#34;&gt;Restricting an ability to a model&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#allowing-a-user-or-role-to-own-a-model&#34;&gt;Allowing a user or role to &#34;own&#34; a model&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#retracting-a-role-from-a-user&#34;&gt;Retracting a role from a user&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#removing-an-ability&#34;&gt;Removing an ability&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#forbidding-an-ability&#34;&gt;Forbidding an ability&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#unforbidding-an-ability&#34;&gt;Unforbidding an ability&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#checking-a-users-roles&#34;&gt;Checking a user&#39;s roles&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#querying-users-by-their-roles&#34;&gt;Querying users by their roles&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#getting-all-roles-for-a-user&#34;&gt;Getting all roles for a user&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#getting-all-abilities-for-a-user&#34;&gt;Getting all abilities for a user&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#authorizing-users&#34;&gt;Authorizing users&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#blade-directives&#34;&gt;Blade directives&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#refreshing-the-cache&#34;&gt;Refreshing the cache&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#multi-tenancy&#34;&gt;Multi-tenancy&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#the-scope-middleware&#34;&gt;The scope middleware&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#customizing-bouncers-scope&#34;&gt;Customizing Bouncer&#39;s scope&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#cache&#34;&gt;Cache&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#tables&#34;&gt;Tables&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#custom-models&#34;&gt;Custom models&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#user-model&#34;&gt;User Model&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#ownership&#34;&gt;Ownership&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#where-do-i-set-up-my-apps-roles-and-abilities&#34;&gt;Where do I set up my app&#39;s roles and abilities?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#can-i-use-a-different-set-of-roles--abilities-for-the-public--dashboard-sections-of-my-site-respectively&#34;&gt;Can I use a different set of roles &amp;amp; abilities for the public &amp;amp; dashboard sections of my site, respectively?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#im-trying-to-run-the-migration-but-im-getting-a-sql-error-that-the-specified-key-was-too-long&#34;&gt;I&#39;m trying to run the migration, but I&#39;m getting a SQL error that the &#34;specified key was too long&#34;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#im-trying-to-run-the-migration-but-im-getting-a-sql-error-that-there-is-a-syntax-error-or-access-violation-1064--to-use-near-json-not-null&#34;&gt;I&#39;m trying to run the migration, but I&#39;m getting a SQL error that there is a &#34;Syntax error or access violation: 1064 ... to use near json not null)&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#console-commands&#34;&gt;Console commands&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#bouncerclean&#34;&gt;&lt;code&gt;bouncer:clean&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#cheat-sheet&#34;&gt;Cheat sheet&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#alternative&#34;&gt;Alternative&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;/p&gt;&#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Bouncer is an elegant, framework-agnostic approach to managing roles and abilities for any app using Eloquent models. With an expressive and fluent syntax, it stays out of your way as much as possible: use it when you want, ignore it when you don&#39;t.&lt;/p&gt; &#xA;&lt;p&gt;For a quick, glanceable list of Bouncer&#39;s features, check out &lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#cheat-sheet&#34;&gt;the cheat sheet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bouncer works well with other abilities you have hard-coded in your own app. Your code always takes precedence: if your code allows an action, Bouncer will not interfere.&lt;/p&gt; &#xA;&lt;p&gt;Once installed, you can simply tell the bouncer what you want to allow at the gate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Give a user the ability to create posts&#xA;Bouncer::allow($user)-&amp;gt;to(&#39;create&#39;, Post::class);&#xA;&#xA;// Alternatively, do it through a role&#xA;Bouncer::allow(&#39;admin&#39;)-&amp;gt;to(&#39;create&#39;, Post::class);&#xA;Bouncer::assign(&#39;admin&#39;)-&amp;gt;to($user);&#xA;&#xA;// You can also grant an ability only to a specific model&#xA;Bouncer::allow($user)-&amp;gt;to(&#39;edit&#39;, $post);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you check abilities at Laravel&#39;s gate, Bouncer will automatically be consulted. If Bouncer sees an ability that has been granted to the current user (whether directly, or through a role) it&#39;ll authorize the check.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Bouncer requires PHP 7.2+ and Laravel/Eloquent 6.0+&lt;/p&gt; &#xA; &lt;p&gt;If you&#39;re not up to date, use &lt;a href=&#34;https://github.com/JosephSilber/bouncer/tree/v1.0.0-rc.6&#34;&gt;Bouncer RC6&lt;/a&gt;. It supports all the way back to PHP 5.5 &amp;amp; Laravel 5.1, and has no known bugs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installing Bouncer in a Laravel app&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Bouncer with &lt;a href=&#34;https://getcomposer.org/doc/00-intro.md&#34;&gt;composer&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;composer require silber/bouncer&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Bouncer&#39;s trait to your user model:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Silber\Bouncer\Database\HasRolesAndAbilities;&#xA;&#xA;class User extends Model&#xA;{&#xA;    use HasRolesAndAbilities;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, to run Bouncer&#39;s migrations. First publish the migrations into your app&#39;s &lt;code&gt;migrations&lt;/code&gt; directory, by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;php artisan vendor:publish --tag=&#34;bouncer.migrations&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, run the migrations:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Facade&lt;/h4&gt; &#xA;&lt;p&gt;Whenever you use the &lt;code&gt;Bouncer&lt;/code&gt; facade in your code, remember to add this line to your namespace imports at the top of the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bouncer;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about Laravel Facades, refer to &lt;a href=&#34;https://laravel.com/docs/9.x/facades&#34;&gt;the Laravel documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Bouncer in a non-Laravel app&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Bouncer with &lt;a href=&#34;https://getcomposer.org/doc/00-intro.md&#34;&gt;composer&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;composer require silber/bouncer&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up the database with &lt;a href=&#34;https://github.com/illuminate/database/raw/master/README.md&#34;&gt;the Eloquent Capsule component&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Database\Capsule\Manager as Capsule;&#xA;&#xA;$capsule = new Capsule;&#xA;&#xA;$capsule-&amp;gt;addConnection([/* connection config */]);&#xA;&#xA;$capsule-&amp;gt;setAsGlobal();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to &lt;a href=&#34;https://github.com/illuminate/database/raw/master/README.md&#34;&gt;the Eloquent Capsule documentation&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the migrations by either of the following methods:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use a tool such as &lt;a href=&#34;https://github.com/michaeldyrynda/vagabond&#34;&gt;vagabond&lt;/a&gt; to run Laravel migrations outside of a Laravel app. You&#39;ll find the necessary migrations in &lt;a href=&#34;https://github.com/JosephSilber/bouncer/raw/master/migrations/create_bouncer_tables.php#L18-L79&#34;&gt;the migrations stub file&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Alternatively, you can run &lt;a href=&#34;https://github.com/JosephSilber/bouncer/raw/master/migrations/sql/MySQL.sql&#34;&gt;the raw SQL&lt;/a&gt; directly in your database.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Bouncer&#39;s trait to your user model:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Database\Eloquent\Model;&#xA;use Silber\Bouncer\Database\HasRolesAndAbilities;&#xA;&#xA;class User extends Model&#xA;{&#xA;    use HasRolesAndAbilities;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create an instance of Bouncer:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Silber\Bouncer\Bouncer;&#xA;&#xA;$bouncer = Bouncer::create();&#xA;&#xA;// If you are in a request with a current user&#xA;// that you&#39;d wish to check permissions for,&#xA;// pass that user to the &#34;create&#34; method:&#xA;$bouncer = Bouncer::create($user);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;re using dependency injection in your app, you may register the &lt;code&gt;Bouncer&lt;/code&gt; instance as a singleton in the container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Silber\Bouncer\Bouncer;&#xA;use Illuminate\Container\Container;&#xA;&#xA;Container::getInstance()-&amp;gt;singleton(Bouncer::class, function () {&#xA;    return Bouncer::create();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can now inject &lt;code&gt;Bouncer&lt;/code&gt; into any class that needs it.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create&lt;/code&gt; method creates a &lt;code&gt;Bouncer&lt;/code&gt; instance with sensible defaults. To fully customize it, use the &lt;code&gt;make&lt;/code&gt; method to get a factory instance. Call &lt;code&gt;create()&lt;/code&gt; on the factory to create the &lt;code&gt;Bouncer&lt;/code&gt; instance:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Silber\Bouncer\Bouncer;&#xA;&#xA;$bouncer = Bouncer::make()&#xA;         -&amp;gt;withCache($customCacheInstance)&#xA;         -&amp;gt;create();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Check out &lt;a href=&#34;https://github.com/JosephSilber/bouncer/raw/c974953a0b1d8d187023002cdfae1800f3ccdb02/src/Factory.php&#34;&gt;the &lt;code&gt;Factory&lt;/code&gt; class&lt;/a&gt; to see all the customizations available.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set which model is used as the user model throughout your app:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$bouncer-&amp;gt;useUserModel(User::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For additional configuration, check out &lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#configuration&#34;&gt;the Configuration section&lt;/a&gt; below.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Enabling cache&lt;/h3&gt; &#xA;&lt;p&gt;By default, Bouncer&#39;s queries are cached for the current request. For better performance, you may want to &lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#cache&#34;&gt;enable cross-request caching&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Adding roles and abilities to users is made extremely easy. You do not have to create a role or an ability in advance. Simply pass the name of the role/ability, and Bouncer will create it if it doesn&#39;t exist.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the examples below all use the &lt;code&gt;Bouncer&lt;/code&gt; facade. If you don&#39;t use facades, you can instead inject an instance of &lt;code&gt;Silber\Bouncer\Bouncer&lt;/code&gt; into your class.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Creating roles and abilities&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s create a role called &lt;code&gt;admin&lt;/code&gt; and give it the ability to &lt;code&gt;ban-users&lt;/code&gt; from our site:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::allow(&#39;admin&#39;)-&amp;gt;to(&#39;ban-users&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it. Behind the scenes, Bouncer will create both a &lt;code&gt;Role&lt;/code&gt; model and an &lt;code&gt;Ability&lt;/code&gt; model for you.&lt;/p&gt; &#xA;&lt;p&gt;If you want to add additional attributes to the role/ability, such as a human-readable title, you can manually create them using the &lt;code&gt;role&lt;/code&gt; and &lt;code&gt;ability&lt;/code&gt; methods on the &lt;code&gt;Bouncer&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$admin = Bouncer::role()-&amp;gt;firstOrCreate([&#xA;    &#39;name&#39; =&amp;gt; &#39;admin&#39;,&#xA;    &#39;title&#39; =&amp;gt; &#39;Administrator&#39;,&#xA;]);&#xA;&#xA;$ban = Bouncer::ability()-&amp;gt;firstOrCreate([&#xA;    &#39;name&#39; =&amp;gt; &#39;ban-users&#39;,&#xA;    &#39;title&#39; =&amp;gt; &#39;Ban users&#39;,&#xA;]);&#xA;&#xA;Bouncer::allow($admin)-&amp;gt;to($ban);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Assigning roles to a user&lt;/h3&gt; &#xA;&lt;p&gt;To now give the &lt;code&gt;admin&lt;/code&gt; role to a user, simply tell the bouncer that the given user should be assigned the admin role:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::assign(&#39;admin&#39;)-&amp;gt;to($user);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can call the &lt;code&gt;assign&lt;/code&gt; method directly on the user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;assign(&#39;admin&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Giving a user an ability directly&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you might want to give a user an ability directly, without using a role:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::allow($user)-&amp;gt;to(&#39;ban-users&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here too you can accomplish the same directly off of the user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;allow(&#39;ban-users&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Restricting an ability to a model&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you might want to restrict an ability to a specific model type. Simply pass the model name as a second argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::allow($user)-&amp;gt;to(&#39;edit&#39;, Post::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to restrict the ability to a specific model instance, pass in the actual model instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::allow($user)-&amp;gt;to(&#39;edit&#39;, $post);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Allowing a user or role to &#34;own&#34; a model&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;toOwn&lt;/code&gt; method to allow users to manage &lt;em&gt;their own&lt;/em&gt; models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::allow($user)-&amp;gt;toOwn(Post::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, when checking at the gate whether the user may perform an action on a given post, the post&#39;s &lt;code&gt;user_id&lt;/code&gt; will be compared to the logged-in user&#39;s &lt;code&gt;id&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#ownership&#34;&gt;this can be customized&lt;/a&gt;). If they match, the gate will allow the action.&lt;/p&gt; &#xA;&lt;p&gt;The above will grant all abilities on a user&#39;s &#34;owned&#34; models. You can restrict the abilities by following it up with a call to the &lt;code&gt;to&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::allow($user)-&amp;gt;toOwn(Post::class)-&amp;gt;to(&#39;view&#39;);&#xA;&#xA;// Or pass it an array of abilities:&#xA;Bouncer::allow($user)-&amp;gt;toOwn(Post::class)-&amp;gt;to([&#39;view&#39;, &#39;update&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also allow users to own all &lt;em&gt;types&lt;/em&gt; of models in your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::allow($user)-&amp;gt;toOwnEverything();&#xA;&#xA;// And to restrict ownership to a given ability&#xA;Bouncer::allow($user)-&amp;gt;toOwnEverything()-&amp;gt;to(&#39;view&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Retracting a role from a user&lt;/h3&gt; &#xA;&lt;p&gt;The bouncer can also retract a previously-assigned role from a user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::retract(&#39;admin&#39;)-&amp;gt;from($user);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or do it directly on the user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;retract(&#39;admin&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Removing an ability&lt;/h3&gt; &#xA;&lt;p&gt;The bouncer can also remove an ability previously granted to a user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::disallow($user)-&amp;gt;to(&#39;ban-users&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or directly on the user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;disallow(&#39;ban-users&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if the user has a role that allows them to &lt;code&gt;ban-users&lt;/code&gt;, they will still have that ability. To disallow it, either remove the ability from the role or retract the role from the user.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If the ability has been granted through a role, tell the bouncer to remove the ability from the role instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::disallow(&#39;admin&#39;)-&amp;gt;to(&#39;ban-users&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remove an ability for a specific model type, pass in its name as a second argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::disallow($user)-&amp;gt;to(&#39;delete&#39;, Post::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; if the user has an ability to &lt;code&gt;delete&lt;/code&gt; a specific &lt;code&gt;$post&lt;/code&gt; instance, the code above will &lt;em&gt;not&lt;/em&gt; remove that ability. You will have to remove the ability separately - by passing in the actual &lt;code&gt;$post&lt;/code&gt; as a second argument - as shown below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To remove an ability for a specific model instance, pass in the actual model instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::disallow($user)-&amp;gt;to(&#39;delete&#39;, $post);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;disallow&lt;/code&gt; method only removes abilities that were previously given to this user/role. If you want to disallow a subset of what a more-general ability has allowed, use &lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#forbidding-an-ability&#34;&gt;the &lt;code&gt;forbid&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Forbidding an ability&lt;/h3&gt; &#xA;&lt;p&gt;Bouncer also allows you to &lt;code&gt;forbid&lt;/code&gt; a given ability, for more fine-grained control. At times you may wish to grant a user/role an ability that covers a wide range of actions, but then restrict a small subset of those actions.&lt;/p&gt; &#xA;&lt;p&gt;Here are some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You might allow a user to generally view all documents, but have a specific highly-classified document that they should not be allowed to view:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::allow($user)-&amp;gt;to(&#39;view&#39;, Document::class);&#xA;&#xA;Bouncer::forbid($user)-&amp;gt;to(&#39;view&#39;, $classifiedDocument);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You may wish to allow your &lt;code&gt;superadmin&lt;/code&gt;s to do everything in your app, including adding/removing users. Then you may have an &lt;code&gt;admin&lt;/code&gt; role that can do everything &lt;em&gt;besides&lt;/em&gt; managing users:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::allow(&#39;superadmin&#39;)-&amp;gt;everything();&#xA;&#xA;Bouncer::allow(&#39;admin&#39;)-&amp;gt;everything();&#xA;Bouncer::forbid(&#39;admin&#39;)-&amp;gt;toManage(User::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You may wish to occasionally ban users, removing their permission to all abilities. However, actually removing all of their roles &amp;amp; abilities would mean that when the ban is removed we&#39;ll have to figure out what their original roles and abilities were.&lt;/p&gt; &lt;p&gt;Using a forbidden ability means that they can keep all their existing roles and abilities, but still not be authorized for anything. We can accomplish this by creating a special &lt;code&gt;banned&lt;/code&gt; role, for which we&#39;ll forbid everything:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::forbid(&#39;banned&#39;)-&amp;gt;everything();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then, whenever we want to ban a user, we&#39;ll assign them the &lt;code&gt;banned&lt;/code&gt; role:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::assign(&#39;banned&#39;)-&amp;gt;to($user);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To remove the ban, we&#39;ll simply retract the role from the user:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::retract(&#39;banned&#39;)-&amp;gt;from($user);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As you can see, Bouncer&#39;s forbidden abilities gives you a lot of granular control over the permissions in your app.&lt;/p&gt; &#xA;&lt;h3&gt;Unforbidding an ability&lt;/h3&gt; &#xA;&lt;p&gt;To remove a forbidden ability, use the &lt;code&gt;unforbid&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::unforbid($user)-&amp;gt;to(&#39;view&#39;, $classifiedDocument);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this will remove any previously-forbidden ability. It will &lt;em&gt;not&lt;/em&gt; authomatically allow the ability if it&#39;s not already allowed by a different regular ability granted to this user/role.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Checking a user&#39;s roles&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Generally speaking, you should not have a need to check roles directly. It is better to allow a role certain abilities, then check for those abilities instead. If what you need is very general, you can create very broad abilities. For example, an &lt;code&gt;access-dashboard&lt;/code&gt; ability is always better than checking for &lt;code&gt;admin&lt;/code&gt; or &lt;code&gt;editor&lt;/code&gt; roles directly. For the rare occasion that you do want to check a role, that functionality is available here.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The bouncer can check if a user has a specific role:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::is($user)-&amp;gt;a(&#39;moderator&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the role you&#39;re checking starts with a vowel, you might want to use the &lt;code&gt;an&lt;/code&gt; alias method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::is($user)-&amp;gt;an(&#39;admin&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the inverse, you can also check if a user &lt;em&gt;doesn&#39;t&lt;/em&gt; have a specific role:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::is($user)-&amp;gt;notA(&#39;moderator&#39;);&#xA;&#xA;Bouncer::is($user)-&amp;gt;notAn(&#39;admin&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check if a user has one of many roles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::is($user)-&amp;gt;a(&#39;moderator&#39;, &#39;editor&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also check if the user has all of the given roles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::is($user)-&amp;gt;all(&#39;editor&#39;, &#39;moderator&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also check if a user has none of the given roles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::is($user)-&amp;gt;notAn(&#39;editor&#39;, &#39;moderator&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These checks can also be done directly on the user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;isAn(&#39;admin&#39;);&#xA;$user-&amp;gt;isA(&#39;subscriber&#39;);&#xA;&#xA;$user-&amp;gt;isNotAn(&#39;admin&#39;);&#xA;$user-&amp;gt;isNotA(&#39;subscriber&#39;);&#xA;&#xA;$user-&amp;gt;isAll(&#39;editor&#39;, &#39;moderator&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Querying users by their roles&lt;/h3&gt; &#xA;&lt;p&gt;You can query your users by whether they have a given role:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = User::whereIs(&#39;admin&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also pass in multiple roles, to query for users that have &lt;em&gt;any&lt;/em&gt; of the given roles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = User::whereIs(&#39;superadmin&#39;, &#39;admin&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To query for users who have &lt;em&gt;all&lt;/em&gt; of the given roles, use the &lt;code&gt;whereIsAll&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = User::whereIsAll(&#39;sales&#39;, &#39;marketing&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting all roles for a user&lt;/h3&gt; &#xA;&lt;p&gt;You can get all roles for a user directly from the user model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$roles = $user-&amp;gt;getRoles();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting all abilities for a user&lt;/h3&gt; &#xA;&lt;p&gt;You can get all abilities for a user directly from the user model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$abilities = $user-&amp;gt;getAbilities();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will return a collection of the user&#39;s allowed abilities, including any abilities granted to the user through their roles.&lt;/p&gt; &#xA;&lt;p&gt;You can also get a list of abilities that have been &lt;em&gt;explicitly&lt;/em&gt; forfidden:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$forbiddenAbilities = $user-&amp;gt;getForbiddenAbilities();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authorizing users&lt;/h3&gt; &#xA;&lt;p&gt;Authorizing users is handled directly at &lt;a href=&#34;https://laravel.com/docs/9.x/authorization#gates&#34;&gt;Laravel&#39;s &lt;code&gt;Gate&lt;/code&gt;&lt;/a&gt;, or on the user model (&lt;code&gt;$user-&amp;gt;can($ability)&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For convenience, the &lt;code&gt;Bouncer&lt;/code&gt; class provides these passthrough methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::can($ability);&#xA;Bouncer::can($ability, $model);&#xA;&#xA;Bouncer::canAny($abilities);&#xA;Bouncer::canAny($abilities, $model);&#xA;&#xA;Bouncer::cannot($ability);&#xA;Bouncer::cannot($ability, $model);&#xA;&#xA;Bouncer::authorize($ability);&#xA;Bouncer::authorize($ability, $model);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These call directly into their equivalent methods on the &lt;code&gt;Gate&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;h3&gt;Blade directives&lt;/h3&gt; &#xA;&lt;p&gt;Bouncer does not add its own blade directives. Since Bouncer works directly with Laravel&#39;s gate, simply use its &lt;code&gt;@can&lt;/code&gt; directive to check for the current user&#39;s abilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;@can (&#39;update&#39;, $post)&#xA;    &amp;lt;a href=&#34;{{ route(&#39;post.update&#39;, $post) }}&#34;&amp;gt;Edit Post&amp;lt;/a&amp;gt;&#xA;@endcan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since checking for roles directly is generally &lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#checking-a-users-roles&#34;&gt;not recommended&lt;/a&gt;, Bouncer does not ship with a separate directive for that. If you still insist on checking for roles, you can do so using the general &lt;code&gt;@if&lt;/code&gt; directive:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;@if ($user-&amp;gt;isAn(&#39;admin&#39;))&#xA;    //&#xA;@endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Refreshing the cache&lt;/h3&gt; &#xA;&lt;p&gt;All queries executed by Bouncer are cached for the current request. If you enable &lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#cache&#34;&gt;cross-request caching&lt;/a&gt;, the cache will persist across different requests.&lt;/p&gt; &#xA;&lt;p&gt;Whenever you need, you can fully refresh the bouncer&#39;s cache:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::refresh();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; fully refreshing the cache for all users uses &lt;a href=&#34;https://laravel.com/docs/9.x/cache#cache-tags&#34;&gt;cache tags&lt;/a&gt; if they&#39;re available. Not all cache drivers support this. Refer to &lt;a href=&#34;https://laravel.com/docs/9.x/cache#cache-tags&#34;&gt;Laravel&#39;s documentation&lt;/a&gt; to see if your driver supports cache tags. If your driver does not support cache tags, calling &lt;code&gt;refresh&lt;/code&gt; might be a little slow, depending on the amount of users in your system.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alternatively, you can refresh the cache only for a specific user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::refreshFor($user);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Multi-tenancy&lt;/h2&gt; &#xA;&lt;p&gt;Bouncer fully supports multi-tenant apps, allowing you to seamlessly integrate Bouncer&#39;s roles and abilities for all tenants within the same app.&lt;/p&gt; &#xA;&lt;h3&gt;The scope middleware&lt;/h3&gt; &#xA;&lt;p&gt;To get started, first publish &lt;a href=&#34;https://github.com/JosephSilber/bouncer/raw/master/middleware/ScopeBouncer.php&#34;&gt;the scope middleware&lt;/a&gt; into your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan vendor:publish --tag=&#34;bouncer.middleware&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The middleware will now be published to &lt;code&gt;app/Http/Middleware/ScopeBouncer.php&lt;/code&gt;. This middleware is where you tell Bouncer which tenant to use for the current request. For example, assuming your users all have an &lt;code&gt;account_id&lt;/code&gt; attribute, this is what your middleware would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function handle($request, Closure $next)&#xA;{&#xA;    $tenantId = $request-&amp;gt;user()-&amp;gt;account_id;&#xA;&#xA;    Bouncer::scope()-&amp;gt;to($tenantId);&#xA;&#xA;    return $next($request);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You are of course free to modify this middleware to fit your app&#39;s needs, such as pulling the tenant information from a subdomain et al.&lt;/p&gt; &#xA;&lt;p&gt;Now with the middleware in place, be sure to register it in your &lt;a href=&#34;https://github.com/laravel/laravel/raw/73cff166c79cdeaef1c6b7ec6e71a33a7ea3012d/app/Http/Kernel.php#L30-L38&#34;&gt;HTTP Kernel&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected $middlewareGroups = [&#xA;    &#39;web&#39; =&amp;gt; [&#xA;        // Keep the existing middleware here, and add this:&#xA;        \App\Http\Middleware\ScopeBouncer::class,&#xA;    ]&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of Bouncer&#39;s queries will now be scoped to the given tenant.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing Bouncer&#39;s scope&lt;/h3&gt; &#xA;&lt;p&gt;Depending on your app&#39;s setup, you may not actually want &lt;em&gt;all&lt;/em&gt; of the queries to be scoped to the current tenant. For example, you may have a fixed set of roles/abilities that are the same for all tenants, and only allow your users to control which users are assigned which roles, and which roles have which abilities. To achieve this, you can tell Bouncer&#39;s scope to only scope the relationships between Bouncer&#39;s models, but not the models themselves:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::scope()-&amp;gt;to($tenantId)-&amp;gt;onlyRelations();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Furthermore, your app might not even allow its users to control which abilities a given role has. In that case, tell Bouncer&#39;s scope to exclude role abilities from the scope, so that those relationships stay global across all tenants:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::scope()-&amp;gt;to($tenantId)-&amp;gt;onlyRelations()-&amp;gt;dontScopeRoleAbilities();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your needs are even more specialized than what&#39;s outlined above, you can create your own &lt;a href=&#34;https://github.com/JosephSilber/bouncer/raw/ab2b92d4d2379be3220daaf0d4185ea10237ff2b/src/Contracts/Scope.php&#34;&gt;&lt;code&gt;Scope&lt;/code&gt;&lt;/a&gt; with whatever custom logic you need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Silber\Bouncer\Contracts\Scope;&#xA;&#xA;class MyScope implements Scope&#xA;{&#xA;    // Whatever custom logic your app needs&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in a service provider, register your custom scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::scope(new MyScope);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bouncer will call the methods on the &lt;code&gt;Scope&lt;/code&gt; interface at various points in its execution. You are free to handle them according to your specific needs.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Bouncer ships with sensible defaults, so most of the time there should be no need for any configuration. For finer-grained control, Bouncer can be customized by calling various configuration methods on the &lt;code&gt;Bouncer&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;If you only use one or two of these config options, you can stick them into your &lt;a href=&#34;https://github.com/laravel/laravel/raw/e077976680bdb2644698fb8965a1e2a8710b5d4b/app/Providers/AppServiceProvider.php#L24-L27&#34;&gt;main &lt;code&gt;AppServiceProvider&lt;/code&gt;&#39;s &lt;code&gt;boot&lt;/code&gt; method&lt;/a&gt;. If they start growing, you may create a separate &lt;code&gt;BouncerServiceProvider&lt;/code&gt; class in &lt;a href=&#34;https://github.com/laravel/laravel/tree/e077976680bdb2644698fb8965a1e2a8710b5d4b/app/Providers&#34;&gt;your &lt;code&gt;app/Providers&lt;/code&gt; directory&lt;/a&gt; (remember to register it in &lt;a href=&#34;https://github.com/laravel/laravel/raw/e077976680bdb2644698fb8965a1e2a8710b5d4b/config/app.php#L171-L178&#34;&gt;the &lt;code&gt;providers&lt;/code&gt; config array&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Cache&lt;/h3&gt; &#xA;&lt;p&gt;By default, all queries executed by Bouncer are cached for the current request. For better performance, you may want to use cross-request caching:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::cache();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; if you enable cross-request caching, you are responsible to refresh the cache whenever you make changes to user&#39;s roles/abilities. For how to refresh the cache, read &lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#refreshing-the-cache&#34;&gt;refreshing the cache&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;On the contrary, you may at times wish to &lt;em&gt;completely disable&lt;/em&gt; the cache, even within the same request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::dontCache();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is particularly useful in unit tests, when you want to run assertions against roles/abilities that have just been granted.&lt;/p&gt; &#xA;&lt;h3&gt;Tables&lt;/h3&gt; &#xA;&lt;p&gt;To change the database table names used by Bouncer, pass an associative array to the &lt;code&gt;tables&lt;/code&gt; method. The keys should be Bouncer&#39;s default table names, and the values should be the table names you wish to use. You do not have to pass in all tables names; only the ones you wish to change.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::tables([&#xA;    &#39;abilities&#39; =&amp;gt; &#39;my_abilities&#39;,&#xA;    &#39;permissions&#39; =&amp;gt; &#39;granted_abilities&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bouncer&#39;s published migration uses the table names from this configuration, so be sure to have these in place before actually running the migration.&lt;/p&gt; &#xA;&lt;h3&gt;Custom models&lt;/h3&gt; &#xA;&lt;p&gt;You can easily extend Bouncer&#39;s built-in &lt;code&gt;Role&lt;/code&gt; and &lt;code&gt;Ability&lt;/code&gt; models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Silber\Bouncer\Database\Ability;&#xA;&#xA;class MyAbility extends Ability&#xA;{&#xA;    // custom code&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Silber\Bouncer\Database\Role;&#xA;&#xA;class MyRole extends Role&#xA;{&#xA;    // custom code&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use Bouncer&#39;s &lt;code&gt;IsAbility&lt;/code&gt; and &lt;code&gt;IsRole&lt;/code&gt; traits without actually extending any of Bouncer&#39;s models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Database\Eloquent\Model;&#xA;use Silber\Bouncer\Database\Concerns\IsAbility;&#xA;&#xA;class MyAbility extends Model&#xA;{&#xA;    use IsAbility;&#xA;&#xA;    // custom code&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Database\Eloquent\Model;&#xA;use Silber\Bouncer\Database\Concerns\IsRole;&#xA;&#xA;class MyRole extends Model&#xA;{&#xA;    use IsRole;&#xA;&#xA;    // custom code&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the traits instead of extending Bouncer&#39;s models, be sure to set the proper &lt;code&gt;$table&lt;/code&gt; name and &lt;code&gt;$fillable&lt;/code&gt; fields yourself.&lt;/p&gt; &#xA;&lt;p&gt;Regardless of which method you use, the next step is to actually tell Bouncer to use your custom models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::useAbilityModel(MyAbility::class);&#xA;Bouncer::useRoleModel(MyRole::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;User Model&lt;/h3&gt; &#xA;&lt;p&gt;By default, Bouncer automatically &lt;a href=&#34;https://github.com/JosephSilber/bouncer/raw/462f312/src/BouncerServiceProvider.php#L171-L190&#34;&gt;uses the user model of the default auth guard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Bouncer with a non-default guard, and it uses a different user model, you should let Bouncer know about the user model you want to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::useUserModel(\App\Admin::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ownership&lt;/h3&gt; &#xA;&lt;p&gt;In Bouncer, the concept of ownership is used to &lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#allowing-a-user-or-role-to-own-a-model&#34;&gt;allow users to perform actions on models they &#34;own&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, Bouncer will check the model&#39;s &lt;code&gt;user_id&lt;/code&gt; against the current user&#39;s primary key. If needed, this can be set to a different attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::ownedVia(&#39;userId&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If different models use different columns for ownership, you can register them separately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::ownedVia(Post::class, &#39;created_by&#39;);&#xA;Bouncer::ownedVia(Order::class, &#39;entered_by&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For greater control, you can pass a closure with your custom logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::ownedVia(Game::class, function ($game, $user) {&#xA;    return $game-&amp;gt;team_id == $user-&amp;gt;team_id;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;There are some concepts in Bouncer that people keep on asking about, so here&#39;s a short list of some of those topics:&lt;/p&gt; &#xA;&lt;h3&gt;Where do I set up my app&#39;s roles and abilities?&lt;/h3&gt; &#xA;&lt;p&gt;Seeding the initial roles and abilities can be done in a regular &lt;a href=&#34;https://laravel.com/docs/9.x/seeding&#34;&gt;Laravel seeder&lt;/a&gt; class. Start by creating a specific seeder file for Bouncer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan make:seeder BouncerSeeder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Place all of your seeding roles &amp;amp; abilities code in &lt;a href=&#34;https://github.com/laravel/framework/raw/f50e2004dfa40de895cd841a0a94acef5b417900/src/Illuminate/Database/Console/Seeds/stubs/seeder.stub#L12-L15&#34;&gt;the seeder&#39;s &lt;code&gt;run&lt;/code&gt; method&lt;/a&gt;. Here&#39;s an example of what that might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bouncer;&#xA;use Illuminate\Database\Seeder;&#xA;&#xA;class BouncerSeeder extends Seeder&#xA;{&#xA;    public function run()&#xA;    {&#xA;        Bouncer::allow(&#39;superadmin&#39;)-&amp;gt;everything();&#xA;&#xA;        Bouncer::allow(&#39;admin&#39;)-&amp;gt;everything();&#xA;        Bouncer::forbid(&#39;admin&#39;)-&amp;gt;toManage(User::class);&#xA;&#xA;        Bouncer::allow(&#39;editor&#39;)-&amp;gt;to(&#39;create&#39;, Post::class);&#xA;        Bouncer::allow(&#39;editor&#39;)-&amp;gt;toOwn(Post::class);&#xA;&#xA;        // etc.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To actually run it, pass the seeder&#39;s class name to the &lt;code&gt;class&lt;/code&gt; option of the &lt;code&gt;db:seed&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan db:seed --class=BouncerSeeder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Can I use a different set of roles &amp;amp; abilities for the public &amp;amp; dashboard sections of my site, respectively?&lt;/h3&gt; &#xA;&lt;p&gt;Bouncer&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#the-scope-middleware&#34;&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; can be used to section off different parts of the site, creating a silo for each one of them with its own set of roles &amp;amp; abilities:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;ScopeBouncer&lt;/code&gt; &lt;a href=&#34;https://laravel.com/docs/9.x/middleware#defining-middleware&#34;&gt;middleware&lt;/a&gt; that takes an &lt;code&gt;$identifier&lt;/code&gt; and sets it as the current scope:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bouncer, Closure;&#xA;&#xA;class ScopeBouncer&#xA;{&#xA;    public function handle($request, Closure $next, $identifier)&#xA;    {&#xA;        Bouncer::scope()-&amp;gt;to($identifier);&#xA;&#xA;        return $next($request);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Register this new middleware as a route middleware in your &lt;a href=&#34;https://github.com/laravel/laravel/raw/73cff166c79cdeaef1c6b7ec6e71a33a7ea3012d/app/Http/Kernel.php#L53-L60&#34;&gt;HTTP Kernel class&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected $routeMiddleware = [&#xA;    // Keep the other route middleware, and add this:&#xA;    &#39;scope-bouncer&#39; =&amp;gt; \App\Http\Middleware\ScopeBouncer::class,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your &lt;a href=&#34;https://github.com/laravel/laravel/raw/73cff166c79cdeaef1c6b7ec6e71a33a7ea3012d/app/Providers/RouteServiceProvider.php&#34;&gt;route service provider&lt;/a&gt;, apply this middleware with a different identifier for the public routes and the dashboard routes, respectively:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::middleware([&#39;web&#39;, &#39;scope-bouncer:1&#39;])&#xA;     -&amp;gt;namespace($this-&amp;gt;namespace)&#xA;     -&amp;gt;group(base_path(&#39;routes/public.php&#39;));&#xA;&#xA;Route::middleware([&#39;web&#39;, &#39;scope-bouncer:2&#39;])&#xA;     -&amp;gt;namespace($this-&amp;gt;namespace)&#xA;     -&amp;gt;group(base_path(&#39;routes/dashboard.php&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it. All roles and abilities will now be separately scoped for each section of your site. To fine-tune the extent of the scope, see &lt;a href=&#34;https://raw.githubusercontent.com/JosephSilber/bouncer/master/#customizing-bouncers-scope&#34;&gt;Customizing Bouncer&#39;s scope&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;I&#39;m trying to run the migration, but I&#39;m getting a SQL error that the &#34;specified key was too long&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Starting with Laravel 5.4, the default database character set is now &lt;code&gt;utf8mb4&lt;/code&gt;. If you&#39;re using older versions of some databases (MySQL below 5.7.7, or MariaDB below 10.2.2) with Laravel 5.4+, you&#39;ll get a SQL error when trying to create an index on a string column. To fix this, change Laravel&#39;s default string length in your &lt;code&gt;AppServiceProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Support\Facades\Schema;&#xA;&#xA;public function boot()&#xA;{&#xA;    Schema::defaultStringLength(191);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read more in &lt;a href=&#34;https://laravel-news.com/laravel-5-4-key-too-long-error&#34;&gt;this Laravel News article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;I&#39;m trying to run the migration, but I&#39;m getting a SQL error that there is a &#34;Syntax error or access violation: 1064 ... to use near json not null)&#34;&lt;/h2&gt; &#xA;&lt;p&gt;JSON columns are a relatively new addition to MySQL (5.7.8) and MariaDB (10.2.7). If you&#39;re using an older version of these databases, you cannot use JSON columns.&lt;/p&gt; &#xA;&lt;p&gt;The best solution would be to upgrade your DB. If that&#39;s not currently possible, you can change &lt;a href=&#34;https://github.com/JosephSilber/bouncer/raw/2e31b84e9c1f6c2b86084df2af9d05299ba73c62/migrations/create_bouncer_tables.php#L25&#34;&gt;your published migration file&lt;/a&gt; to use a &lt;code&gt;text&lt;/code&gt; column instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- $table-&amp;gt;json(&#39;options&#39;)-&amp;gt;nullable();&#xA;+ $table-&amp;gt;text(&#39;options&#39;)-&amp;gt;nullable();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Console commands&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;bouncer:clean&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;bouncer:clean&lt;/code&gt; command deletes unused abilities. Running this command will delete 2 types of unused abilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unassigned abilities&lt;/strong&gt; - abilities that are not assigned to anyone. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::allow($user)-&amp;gt;to(&#39;view&#39;, Plan::class);&#xA;&#xA;Bouncer::disallow($user)-&amp;gt;to(&#39;view&#39;, Plan::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;At this point, the &#34;view plans&#34; ability is not assigned to anyone, so it&#39;ll get deleted.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: depending on the context of your app, you may not want to delete these. If you let your users manage abilities in your app&#39;s UI, you probably &lt;em&gt;don&#39;t&lt;/em&gt; want to delete unassigned abilities. See below.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Orphaned abilities&lt;/strong&gt; - model abilities whose models have been deleted:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Bouncer::allow($user)-&amp;gt;to(&#39;delete&#39;, $plan);&#xA;&#xA;$plan-&amp;gt;delete();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since the plan no longer exists, the ability is no longer of any use, so it&#39;ll get deleted.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you only want to delete one type of unused ability, run it with one of the following flags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan bouncer:clean --unassigned&#xA;php artisan bouncer:clean --orphaned&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t pass it any flags, it will delete both types of unused abilities.&lt;/p&gt; &#xA;&lt;p&gt;To automatically run this command periodically, add it to &lt;a href=&#34;https://laravel.com/docs/9.x/scheduling#defining-schedules&#34;&gt;your console kernel&#39;s schedule&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$schedule-&amp;gt;command(&#39;bouncer:clean&#39;)-&amp;gt;weekly();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cheat Sheet&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Adding abilities for users&#xA;Bouncer::allow($user)-&amp;gt;to(&#39;ban-users&#39;);&#xA;Bouncer::allow($user)-&amp;gt;to(&#39;edit&#39;, Post::class);&#xA;Bouncer::allow($user)-&amp;gt;to(&#39;delete&#39;, $post);&#xA;&#xA;Bouncer::allow($user)-&amp;gt;everything();&#xA;Bouncer::allow($user)-&amp;gt;toManage(Post::class);&#xA;Bouncer::allow($user)-&amp;gt;toManage($post);&#xA;Bouncer::allow($user)-&amp;gt;to(&#39;view&#39;)-&amp;gt;everything();&#xA;&#xA;Bouncer::allow($user)-&amp;gt;toOwn(Post::class);&#xA;Bouncer::allow($user)-&amp;gt;toOwnEverything();&#xA;&#xA;// Removing abilities uses the same syntax, e.g.&#xA;Bouncer::disallow($user)-&amp;gt;to(&#39;delete&#39;, $post);&#xA;Bouncer::disallow($user)-&amp;gt;toManage(Post::class);&#xA;Bouncer::disallow($user)-&amp;gt;toOwn(Post::class);&#xA;&#xA;// Adding &amp;amp; removing abilities for roles&#xA;Bouncer::allow(&#39;admin&#39;)-&amp;gt;to(&#39;ban-users&#39;);&#xA;Bouncer::disallow(&#39;admin&#39;)-&amp;gt;to(&#39;ban-users&#39;);&#xA;&#xA;// You can also forbid specific abilities with the same syntax...&#xA;Bouncer::forbid($user)-&amp;gt;to(&#39;delete&#39;, $post);&#xA;&#xA;// And also remove a forbidden ability with the same syntax...&#xA;Bouncer::unforbid($user)-&amp;gt;to(&#39;delete&#39;, $post);&#xA;&#xA;// Re-syncing a user&#39;s abilities&#xA;Bouncer::sync($user)-&amp;gt;abilities($abilities);&#xA;&#xA;// Assigning &amp;amp; retracting roles from users&#xA;Bouncer::assign(&#39;admin&#39;)-&amp;gt;to($user);&#xA;Bouncer::retract(&#39;admin&#39;)-&amp;gt;from($user);&#xA;&#xA;// Assigning roles to multiple users by ID&#xA;Bouncer::assign(&#39;admin&#39;)-&amp;gt;to([1, 2, 3]);&#xA;&#xA;// Re-syncing a user&#39;s roles&#xA;Bouncer::sync($user)-&amp;gt;roles($roles);&#xA;&#xA;// Checking the current user&#39;s abilities&#xA;$boolean = Bouncer::can(&#39;ban-users&#39;);&#xA;$boolean = Bouncer::can(&#39;edit&#39;, Post::class);&#xA;$boolean = Bouncer::can(&#39;delete&#39;, $post);&#xA;&#xA;$boolean = Bouncer::cannot(&#39;ban-users&#39;);&#xA;$boolean = Bouncer::cannot(&#39;edit&#39;, Post::class);&#xA;$boolean = Bouncer::cannot(&#39;delete&#39;, $post);&#xA;&#xA;// Checking a user&#39;s roles&#xA;$boolean = Bouncer::is($user)-&amp;gt;a(&#39;subscriber&#39;);&#xA;$boolean = Bouncer::is($user)-&amp;gt;an(&#39;admin&#39;);&#xA;$boolean = Bouncer::is($user)-&amp;gt;notA(&#39;subscriber&#39;);&#xA;$boolean = Bouncer::is($user)-&amp;gt;notAn(&#39;admin&#39;);&#xA;$boolean = Bouncer::is($user)-&amp;gt;a(&#39;moderator&#39;, &#39;editor&#39;);&#xA;$boolean = Bouncer::is($user)-&amp;gt;all(&#39;moderator&#39;, &#39;editor&#39;);&#xA;&#xA;Bouncer::cache();&#xA;Bouncer::dontCache();&#xA;&#xA;Bouncer::refresh();&#xA;Bouncer::refreshFor($user);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some of this functionality is also available directly on the user model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;allow(&#39;ban-users&#39;);&#xA;$user-&amp;gt;allow(&#39;edit&#39;, Post::class);&#xA;$user-&amp;gt;allow(&#39;delete&#39;, $post);&#xA;&#xA;$user-&amp;gt;disallow(&#39;ban-users&#39;);&#xA;$user-&amp;gt;disallow(&#39;edit&#39;, Post::class);&#xA;$user-&amp;gt;disallow(&#39;delete&#39;, $post);&#xA;&#xA;$user-&amp;gt;assign(&#39;admin&#39;);&#xA;$user-&amp;gt;retract(&#39;admin&#39;);&#xA;&#xA;$boolean = $user-&amp;gt;isAn(&#39;admin&#39;);&#xA;$boolean = $user-&amp;gt;isAn(&#39;editor&#39;, &#39;moderator&#39;);&#xA;$boolean = $user-&amp;gt;isAll(&#39;moderator&#39;, &#39;editor&#39;);&#xA;$boolean = $user-&amp;gt;isNotAn(&#39;admin&#39;, &#39;moderator&#39;);&#xA;&#xA;// Querying users by their roles&#xA;$users = User::whereIs(&#39;superadmin&#39;)-&amp;gt;get();&#xA;$users = User::whereIs(&#39;superadmin&#39;, &#39;admin&#39;)-&amp;gt;get();&#xA;$users = User::whereIsAll(&#39;sales&#39;, &#39;marketing&#39;)-&amp;gt;get();&#xA;&#xA;$abilities = $user-&amp;gt;getAbilities();&#xA;$forbidden = $user-&amp;gt;getForbiddenAbilities();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternative&lt;/h2&gt; &#xA;&lt;p&gt;Among the bajillion packages that &lt;a href=&#34;https://spatie.be&#34;&gt;Spatie&lt;/a&gt; has so graciously bestowed upon the community, you&#39;ll find the excellent &lt;a href=&#34;https://github.com/spatie/laravel-permission&#34;&gt;laravel-permission&lt;/a&gt; package. Like Bouncer, it nicely integrates with Laravel&#39;s built-in gate and permission checks, but has a different set of design choices when it comes to syntax, DB structure &amp;amp; features.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Bouncer is open-sourced software licensed under the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT license&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>laravel/pint</title>
    <updated>2022-06-26T01:33:14Z</updated>
    <id>tag:github.com,2022-06-26:/laravel/pint</id>
    <link href="https://github.com/laravel/pint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Laravel Pint is an opinionated PHP code style fixer for minimalists.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/laravel/pint/raw/HEAD/art/logo.svg?sanitize=true&#34; width=&#34;50%&#34; alt=&#34;Logo Laravel Pint&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/laravel/pint/main/art/overview.png&#34; alt=&#34;Overview Laravel Pint&#34; style=&#34;width:70%;&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/laravel/pint/actions&#34;&gt;&lt;img src=&#34;https://github.com/laravel/pint/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/pint&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/laravel/pint&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/pint&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/laravel/pint&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/pint&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/l/laravel/pint&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;introduction&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Laravel Pint&lt;/strong&gt; is an opinionated PHP code style fixer for minimalists. Pint is built on top of &lt;strong&gt;&lt;a href=&#34;https://github.com/FriendsOfPHP/PHP-CS-Fixer&#34;&gt;PHP-CS-Fixer&lt;/a&gt;&lt;/strong&gt; and makes it simple to ensure that your code style stays &lt;strong&gt;clean&lt;/strong&gt; and &lt;strong&gt;consistent&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;installation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Laravel Pint requires &lt;a href=&#34;https://php.net/releases/&#34;&gt;PHP 8.0+&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You may use Composer to install Pint into your PHP project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require laravel/pint --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Pint has been installed, the &lt;code&gt;pint&lt;/code&gt; binary will be available in your project&#39;s &lt;code&gt;vendor/bin&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/pint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;running&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running Pint&lt;/h2&gt; &#xA;&lt;p&gt;When running Pint, it will output a list of files that have been fixed. It is possible to see the changes made in more detail using the &lt;code&gt;-v&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/pint -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, if you would like Pint to simply inspect your code for style errors without actually changing the files, you may use the &lt;code&gt;--test&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/pint --test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;configuring&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuring Pint&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;By default, Pint does not require any configuration&lt;/strong&gt; and will fix code style issues in your code by following the opinionated coding style of Laravel.&lt;/p&gt; &#xA;&lt;p&gt;However, if you wish to customize the presets, rules, or inspected folders, you may do so by creating a &lt;code&gt;pint.json&lt;/code&gt; file in your project&#39;s root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;preset&#34;: &#34;laravel&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, if you wish to use a &lt;code&gt;pint.json&lt;/code&gt; from a specific directory, you may use the &lt;code&gt;--config&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pint --config vendor/my-company/coding-style/pint.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;presets&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Presets&lt;/h3&gt; &#xA;&lt;p&gt;Presets define a set of rules that can be used to fix code style issues in your code. By default, Pint uses the &lt;code&gt;laravel&lt;/code&gt; preset, which fixes issues by following the opinionated coding style of Laravel.&lt;/p&gt; &#xA;&lt;p&gt;However, you can use a different preset by passing the &lt;code&gt;--preset&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pint --preset psr12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish, you may also set the preset in your project&#39;s &lt;code&gt;pint.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;preset&#34;: &#34;psr12&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The currently supported presets are: &lt;code&gt;laravel&lt;/code&gt;, &lt;code&gt;psr12&lt;/code&gt;, and &lt;code&gt;symfony&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;rules&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Rules&lt;/h3&gt; &#xA;&lt;p&gt;Rules are style guidelines that Pint will use to fix code style issues in your code. As mentioned above, presets are predefined groups of rules that should be perfect for most PHP projects, so you typically will not need to worry about the individual rules they contain.&lt;/p&gt; &#xA;&lt;p&gt;However, if you wish, you may enable or disable specific rules in your &lt;code&gt;pint.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;preset&#34;: &#34;laravel&#34;,&#xA;    &#34;rules&#34;: {&#xA;        &#34;simplified_null_return&#34;: true,&#xA;        &#34;braces&#34;: false,&#xA;        &#34;new_with_braces&#34;: {&#xA;            &#34;anonymous_class&#34;: false,&#xA;            &#34;named_class&#34;: false&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pint is built on top of &lt;a href=&#34;https://github.com/FriendsOfPHP/PHP-CS-Fixer&#34;&gt;PHP-CS-Fixer&lt;/a&gt;. Therefore, you may use any of its rules to fix code style issues in your project: &lt;a href=&#34;https://mlocati.github.io/php-cs-fixer-configurator/&#34;&gt;PHP-CS-Fixer Configurator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;exclude-folders&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Exclude Folders&lt;/h3&gt; &#xA;&lt;p&gt;By default, Pint will inspect all &lt;code&gt;.php&lt;/code&gt; files in your project except those in the &lt;code&gt;vendor&lt;/code&gt; folder. If you wish to exclude more folders, you may do so by using the &lt;code&gt;exclude&lt;/code&gt; configuration option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;exclude&#34;: [&#xA;        &#34;my-specific/folder&#34;&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;exclude-files&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Exclude Files&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to exclude file with specified name, you may do so by using the &lt;code&gt;notName&lt;/code&gt; configuration option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;notName&#34;: [&#xA;        &#34;*-my-file.php&#34;&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to exclude file from exact path, you may do so by using the &lt;code&gt;notPath&lt;/code&gt; configuration option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;notPath&#34;: [&#xA;        &#34;path/to/excluded-file.php&#34;&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;contributing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to Pint! You can read the contribution guide &lt;a href=&#34;https://raw.githubusercontent.com/laravel/pint/main/.github/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;code-of-conduct&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;In order to ensure that the Laravel community is welcoming to all, please review and abide by the &lt;a href=&#34;https://laravel.com/docs/contributions#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;security-vulnerabilities&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://github.com/laravel/pint/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Pint is open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/laravel/pint/main/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>swagkarna/Rafel-Rat</title>
    <updated>2022-06-26T01:33:14Z</updated>
    <id>tag:github.com,2022-06-26:/swagkarna/Rafel-Rat</id>
    <link href="https://github.com/swagkarna/Rafel-Rat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;-------&gt; RAFEL&lt;------ Android Rat Written in Java With WebPanel For Controlling Victims...Hack Android Devices&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;250&#34; height=&#34;250&#34; src=&#34;https://media.tenor.com/images/2c3668f83f251c47fe4319ed58961898/tenor.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Rafel&lt;/h1&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Rafel&lt;/b&gt; is &lt;b&gt;Remote Access Tool&lt;/b&gt; Used to Control Victims Using &lt;b&gt;WebPanel&lt;/b&gt; With More Advance Features.. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/swagkarna&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Author-Swagkarna-red.svg?style=for-the-badge&amp;amp;label=Author&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Version-1.0-brightgreen?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/swagkarna/Rafel-Rat?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/followers/swagkarna?label=Followers&amp;amp;style=for-the-badge&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;If you like the tool and for my personal motivation so as to develop other tools please leave a +1 star&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Main Features :&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Admin Permission&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add App To White List(Ignore Battery Optimisation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Looks Like Legit Mod App&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Runs In Background Even App is Closed(May not work on some Devices)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Accessibility Feature(Cause Erros in some device --&amp;gt; ignore it)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support Android v5 - v11&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; No Port Forwarding Needed&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Acquire Wakelock&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fully Undetectable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bypass PlayProtect&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; WipeSdcard&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Lock Device Screen&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Change Wallpaper&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ransomware&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Vibrate Device&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Delete Calls Logs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Notify Victims Via Discord&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; steal notifications(send through discord)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Added AutoStart For (poco,xiaomi,oppo,vivo,LetV,Honor)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android Studio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.xda-developers.com/android/software-hacking/tool-apk-easy-tool-v1-02-windows-gui-t3333960&#34;&gt;ApkEasyTool&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Building Apk With Android Studio&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open Project &lt;em&gt;&lt;strong&gt;BlackMart&lt;/strong&gt;&lt;/em&gt; in Android Studio&lt;/li&gt; &#xA; &lt;li&gt;Put the &lt;code&gt;command.php&lt;/code&gt; link of server in InternalService.class class&lt;/li&gt; &#xA; &lt;li&gt;Now open &lt;code&gt;NotificationListener.java&lt;/code&gt; and enter replace with your discord webhook url&lt;/li&gt; &#xA; &lt;li&gt;Build the Project&lt;/li&gt; &#xA; &lt;li&gt;Zipalign and sign the Apk...&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Building Apk with ApkEasyTool:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/swagkarna/Rafel-Rat/releases/download/release/BlackMart.apk&#34;&gt;BlackMartapk&lt;/a&gt; and decompile with &lt;code&gt;Apktool&lt;/code&gt; and navigate to &lt;code&gt;smali_classes2\com\velociraptor\raptor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;InternalService.smali&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replace this with your Panel Url &lt;em&gt;&lt;strong&gt;const-string v0, &#34;&lt;a href=&#34;https://your-webpanel-url/public/commands.php&#34;&gt;https://your-webpanel-url/public/commands.php&lt;/a&gt;&#34;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now open &lt;code&gt;NotificationListener.smali&lt;/code&gt; and enter replace with your discord webhook url&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Building Server&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Upload Files in server Folder to Your HostingPanel&lt;/li&gt; &#xA; &lt;li&gt;Now Open login.php&lt;/li&gt; &#xA; &lt;li&gt;Enter Username &lt;em&gt;&lt;strong&gt;Hande&lt;/strong&gt;&lt;/em&gt; Password &lt;em&gt;&lt;strong&gt;Ercel&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Note : Make Sure your webhosting site uses Https and should have valid connection...I recommend 000webhost.com&lt;/li&gt; &#xA; &lt;li&gt;You can now use panel to send commands and also refresh after it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Rafel-Rat in Action [OLD] :&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/46685308/120080601-603c5380-c0d7-11eb-82b2-345d0bff7581.mp4&#34;&gt;https://user-images.githubusercontent.com/46685308/120080601-603c5380-c0d7-11eb-82b2-345d0bff7581.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Watch Video in Full Screen For Better Quality&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Screenshots[New]&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/swagkarna/Rafel-Rat/raw/main/Screenshots/Screenshot%20(70).png?raw=true&#34;&gt; &lt;img width=&#34;2000&#34; src=&#34;https://github.com/swagkarna/Rafel-Rat/raw/main/Screenshots/Screenshot%20(70).png?raw=true&#34;&gt; Panel-1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/swagkarna/Rafel-Rat/raw/main/Screenshots/Screenshot%20(71).png?raw=true&#34;&gt; &lt;img width=&#34;2000&#34; src=&#34;https://github.com/swagkarna/Rafel-Rat/raw/main/Screenshots/Screenshot%20(71).png?raw=true&#34;&gt; Panel-2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/swagkarna/Rafel-Rat/raw/main/Screenshots/Screenshot%20(72).png?raw=trueg&#34;&gt; &lt;img width=&#34;2000&#34; src=&#34;https://github.com/swagkarna/Rafel-Rat/raw/main/Screenshots/Screenshot%20(72).png?raw=true&#34;&gt; Panel-3 &lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Check this Article&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dontkillmyapp.com/&#34;&gt;https://dontkillmyapp.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;b&gt;Swagkarna Provides no warranty and will not be responsible for any direct or indirect damage caused by this tool.&lt;br&gt; Rafel-Rat is built for Educational and Internal use ONLY.&lt;/b&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contact :&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:swagkarna@gmail.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gmail-swagkarna-green?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/swagkarna&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-@swagkarna-blue?style=for-the-badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/46685308/113503828-f88fdf00-9551-11eb-9815-7371515655c1.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Inspired From Raptor-Rat&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;❤️Supporters❤️&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/swagkarna/Rafel-Rat/stargazers&#34;&gt;&lt;img src=&#34;https://reporoster.com/stars/swagkarna/Rafel-Rat&#34; alt=&#34;Stargazers repo roster for @swagkarna/Rafel-Rat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swagkarna/Rafel-Rat/network/members&#34;&gt;&lt;img src=&#34;https://reporoster.com/forks/swagkarna/Rafel-Rat&#34; alt=&#34;Forkers repo roster for @swagkarna/Rafel-Rat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
</feed>