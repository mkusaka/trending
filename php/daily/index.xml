<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-26T01:43:32Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WordPress/WordPress-Coding-Standards</title>
    <updated>2022-08-26T01:43:32Z</updated>
    <id>tag:github.com,2022-08-26:/WordPress/WordPress-Coding-Standards</id>
    <link href="https://github.com/WordPress/WordPress-Coding-Standards" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP_CodeSniffer rules (sniffs) to enforce WordPress coding conventions&lt;/p&gt;&lt;hr&gt;&lt;div aria-hidden=&#34;true&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/wp-coding-standards/wpcs&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/wp-coding-standards/wpcs/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/WordPress/WordPress-Coding-Standards.svg?maxAge=1800&#34; alt=&#34;Release Date of the Latest Version&#34;&gt;&lt;/a&gt; &lt;span&gt;ðŸš§&lt;/span&gt; &lt;a href=&#34;https://packagist.org/packages/wp-coding-standards/wpcs#dev-develop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/unstable-dev--develop-e68718.svg?maxAge=2419200&#34; alt=&#34;Latest Unstable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/commits/develop&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/WordPress/WordPress-Coding-Standards/develop.svg?sanitize=true&#34; alt=&#34;Last Commit to Unstable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/wp-coding-standards/wpcs&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/php-v/wp-coding-standards/wpcs.svg?maxAge=3600&#34; alt=&#34;Minimum PHP Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/actions/workflows/unit-tests.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/tested%20on-PHP%205.4%20%7C%205.5%20%7C%205.6%20%7C%207.0%20%7C%207.1%20%7C%207.2%20%7C%207.3%20%7C%207.4snapshot-green.svg?maxAge=2419200&#34; alt=&#34;Tested on PHP 5.4 to 7.4 snapshot&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/actions/workflows/ruleset-checks-sniffs.yml&#34;&gt;&lt;img src=&#34;https://github.com/WordPress/WordPress-Coding-Standards/actions/workflows/ruleset-checks-sniffs.yml/badge.svg?sanitize=true&#34; alt=&#34;Basic QA checks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/actions/workflows/unit-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/WordPress/WordPress-Coding-Standards/actions/workflows/unit-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/raw/develop/LICENSE&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/wp-coding-standards/wpcs/license&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/wp-coding-standards/wpcs/stats&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/wp-coding-standards/wpcs/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/WordPress/WordPress-Coding-Standards.svg?maxAge=3600&#34; alt=&#34;Number of Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;WordPress Coding Standards for PHP_CodeSniffer&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#project-history&#34;&gt;Project history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#composer&#34;&gt;Composer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#standalone&#34;&gt;Standalone&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#rulesets&#34;&gt;Rulesets&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#standards-subsets&#34;&gt;Standards subsets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#using-a-custom-ruleset&#34;&gt;Using a custom ruleset&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#customizing-sniff-behaviour&#34;&gt;Customizing sniff behaviour&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#recommended-additional-rulesets&#34;&gt;Recommended additional rulesets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#command-line&#34;&gt;Command line&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#using-phpcs-and-wpcs-from-within-your-ide&#34;&gt;Using PHPCS and WPCS from within your IDE&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#running-your-code-through-wpcs-automatically-using-ci-tools&#34;&gt;Running your code through WPCS automatically using CI tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#fixing-errors-or-ignoring-them&#34;&gt;Fixing errors or ignoring them&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#tools-shipped-with-wpcs&#34;&gt;Tools shipped with WPCS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This project is a collection of &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;PHP_CodeSniffer&lt;/a&gt; rules (sniffs) to validate code developed for WordPress. It ensures code quality and adherence to coding conventions, especially the official &lt;a href=&#34;https://make.wordpress.org/core/handbook/best-practices/coding-standards/&#34;&gt;WordPress Coding Standards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project history&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On 22nd April 2009, the original project from &lt;a href=&#34;https://urbangiraffe.com/articles/wordpress-codesniffer-standard/&#34;&gt;Urban Giraffe&lt;/a&gt; was packaged and published.&lt;/li&gt; &#xA; &lt;li&gt;In May 2011 the project was forked and &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/commit/04fd547c691ca2baae3fa8e195a46b0c9dd671c5&#34;&gt;added&lt;/a&gt; to GitHub by &lt;a href=&#34;https://chrisadams.me.uk/&#34;&gt;Chris Adams&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In April 2012 &lt;a href=&#34;https://xwp.co/&#34;&gt;XWP&lt;/a&gt; started to dedicate resources to develop and lead the creation of the sniffs and rulesets for &lt;code&gt;WordPress-Core&lt;/code&gt;, &lt;code&gt;WordPress-VIP&lt;/code&gt; (WordPress.com VIP), and &lt;code&gt;WordPress-Extra&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In May 2015, an initial documentation ruleset was &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/commit/b1a4bf8232a22563ef66f8a529357275a49f47dc#diff-a17c358c3262a26e9228268eb0a7b8c8&#34;&gt;added&lt;/a&gt; as &lt;code&gt;WordPress-Docs&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In 2015, &lt;a href=&#34;https://github.com/JDGrimes&#34;&gt;J.D. Grimes&lt;/a&gt; began significant contributions, along with maintenance from &lt;a href=&#34;https://github.com/GaryJones&#34;&gt;Gary Jones&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In 2016, &lt;a href=&#34;https://github.com/jrfnl&#34;&gt;Juliette Reinders Folmer&lt;/a&gt; began contributing heavily, adding more commits in a year than anyone else in the five years since the project was added to GitHub.&lt;/li&gt; &#xA; &lt;li&gt;In July 2018, version &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/releases/tag/1.0.0&#34;&gt;&lt;code&gt;1.0.0&lt;/code&gt;&lt;/a&gt; of the project was released.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;The WordPress Coding Standards require PHP 5.4 or higher and &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;PHP_CodeSniffer&lt;/a&gt; version &lt;strong&gt;3.7.0&lt;/strong&gt; or higher.&lt;/p&gt; &#xA;&lt;h3&gt;Composer&lt;/h3&gt; &#xA;&lt;p&gt;Standards can be installed with the &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer create-project wp-coding-standards/wpcs --no-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running this command will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install WordPress standards into &lt;code&gt;wpcs&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Install PHP_CodeSniffer.&lt;/li&gt; &#xA; &lt;li&gt;Register WordPress standards in PHP_CodeSniffer configuration.&lt;/li&gt; &#xA; &lt;li&gt;Make &lt;code&gt;phpcs&lt;/code&gt; command available from &lt;code&gt;wpcs/vendor/bin&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For the convenience of using &lt;code&gt;phpcs&lt;/code&gt; as a global command, you may want to add the path to the &lt;code&gt;wpcs/vendor/bin&lt;/code&gt; directory to a &lt;code&gt;PATH&lt;/code&gt; environment variable for your operating system.&lt;/p&gt; &#xA;&lt;h4&gt;Installing WPCS as a dependency&lt;/h4&gt; &#xA;&lt;p&gt;When installing the WordPress Coding Standards as a dependency in a larger project, the above mentioned step 3 will not be executed automatically.&lt;/p&gt; &#xA;&lt;p&gt;There are two actively maintained Composer plugins which can handle the registration of standards with PHP_CodeSniffer for you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/higidi/composer-phpcodesniffer-standards-plugin&#34;&gt;composer-phpcodesniffer-standards-plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DealerDirect/phpcodesniffer-composer-installer&#34;&gt;phpcodesniffer-composer-installer&lt;/a&gt;:&#34;^0.6&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is strongly suggested to &lt;code&gt;require&lt;/code&gt; one of these plugins in your project to handle the registration of external standards with PHPCS for you.&lt;/p&gt; &#xA;&lt;h3&gt;Standalone&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install PHP_CodeSniffer by following its &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer#installation&#34;&gt;installation instructions&lt;/a&gt; (via Composer, Phar file, PEAR, or Git checkout).&lt;/p&gt; &lt;p&gt;Do ensure that PHP_CodeSniffer&#39;s version matches our &lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/#requirements&#34;&gt;requirements&lt;/a&gt;, if, for example, you&#39;re using &lt;a href=&#34;https://github.com/Varying-Vagrant-Vagrants/VVV&#34;&gt;VVV&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the WordPress standards repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; git clone -b master https://github.com/WordPress/WordPress-Coding-Standards.git wpcs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add its path to the PHP_CodeSniffer configuration:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; phpcs --config-set installed_paths /path/to/wpcs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Pro-tip:&lt;/strong&gt; Alternatively, you can tell PHP_CodeSniffer the path to the WordPress standards by adding the following snippet to your custom ruleset:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;config name=&#34;installed_paths&#34; value=&#34;/path/to/wpcs&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To summarize:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/projects&#xA;git clone https://github.com/squizlabs/PHP_CodeSniffer.git phpcs&#xA;git clone -b master https://github.com/WordPress/WordPress-Coding-Standards.git wpcs&#xA;cd phpcs&#xA;./bin/phpcs --config-set installed_paths ../wpcs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then add the &lt;code&gt;~/projects/phpcs/bin&lt;/code&gt; directory to your &lt;code&gt;PATH&lt;/code&gt; environment variable via your &lt;code&gt;.bashrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should then see &lt;code&gt;WordPress-Core&lt;/code&gt; et al listed when you run &lt;code&gt;phpcs -i&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Rulesets&lt;/h2&gt; &#xA;&lt;h3&gt;Standards subsets&lt;/h3&gt; &#xA;&lt;p&gt;The project encompasses a super-set of the sniffs that the WordPress community may need. If you use the &lt;code&gt;WordPress&lt;/code&gt; standard you will get all the checks.&lt;/p&gt; &#xA;&lt;p&gt;You can use the following as standard names when invoking &lt;code&gt;phpcs&lt;/code&gt; to select sniffs, fitting your needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WordPress&lt;/code&gt; - complete set with all of the sniffs in the project &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;WordPress-Core&lt;/code&gt; - main ruleset for &lt;a href=&#34;https://make.wordpress.org/core/handbook/best-practices/coding-standards/&#34;&gt;WordPress core coding standards&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;WordPress-Docs&lt;/code&gt; - additional ruleset for &lt;a href=&#34;https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/&#34;&gt;WordPress inline documentation standards&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;WordPress-Extra&lt;/code&gt; - extended ruleset for recommended best practices, not sufficiently covered in the WordPress core coding standards &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;includes &lt;code&gt;WordPress-Core&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The WPCS package used to include a &lt;code&gt;WordPress-VIP&lt;/code&gt; ruleset and associated sniffs, prior to WPCS 2.0.0. The &lt;code&gt;WordPress-VIP&lt;/code&gt; ruleset was originally intended to aid with the &lt;a href=&#34;https://vip.wordpress.com/documentation/vip-go/code-review-blockers-warnings-notices/&#34;&gt;WordPress.com VIP coding requirements&lt;/a&gt;, but has been superseded. It is recommended to use the &lt;a href=&#34;https://github.com/Automattic/VIP-Coding-Standards&#34;&gt;official VIP coding standards&lt;/a&gt; ruleset instead for checking code against the VIP platform requirements.&lt;/p&gt; &#xA;&lt;h3&gt;Using a custom ruleset&lt;/h3&gt; &#xA;&lt;p&gt;If you need to further customize the selection of sniffs for your project - you can create a custom ruleset file. When you name this file either &lt;code&gt;.phpcs.xml&lt;/code&gt;, &lt;code&gt;phpcs.xml&lt;/code&gt;, &lt;code&gt;.phpcs.xml.dist&lt;/code&gt; or &lt;code&gt;phpcs.xml.dist&lt;/code&gt;, PHP_CodeSniffer will automatically locate it as long as it is placed in the directory from which you run the CodeSniffer or in a directory above it. If you follow these naming conventions you don&#39;t have to supply a &lt;code&gt;--standard&lt;/code&gt; arg. For more info, read about &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Advanced-Usage#using-a-default-configuration-file&#34;&gt;using a default configuration file&lt;/a&gt;. See also provided &lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/phpcs.xml.dist.sample&#34;&gt;&lt;code&gt;phpcs.xml.dist.sample&lt;/code&gt;&lt;/a&gt; file and &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml&#34;&gt;fully annotated example&lt;/a&gt; in the PHP_CodeSniffer documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing sniff behaviour&lt;/h3&gt; &#xA;&lt;p&gt;The WordPress Coding Standard contains a number of sniffs which are configurable. This means that you can turn parts of the sniff on or off, or change the behaviour by setting a property for the sniff in your custom &lt;code&gt;.phpcs.xml.dist&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;You can find a complete list of all the properties you can change in the &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Recommended additional rulesets&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility&#34;&gt;PHPCompatibility&lt;/a&gt; ruleset and its subset &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityWP&#34;&gt;PHPCompatibilityWP&lt;/a&gt; come highly recommended. The &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility&#34;&gt;PHPCompatibility&lt;/a&gt; sniffs are designed to analyse your code for cross-PHP version compatibility.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibilityWP&#34;&gt;PHPCompatibilityWP&lt;/a&gt; ruleset is based on PHPCompatibility, but specifically crafted to prevent false positives for projects which expect to run within the context of WordPress, i.e. core, plugins and themes.&lt;/p&gt; &#xA;&lt;p&gt;Install either as a separate ruleset and run it separately against your code or add it to your custom ruleset, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;config name=&#34;testVersion&#34; value=&#34;5.6-&#34;/&amp;gt;&#xA;&amp;lt;rule ref=&#34;PHPCompatibilityWP&#34;&amp;gt;&#xA;    &amp;lt;include-pattern&amp;gt;*\.php$&amp;lt;/include-pattern&amp;gt;&#xA;&amp;lt;/rule&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whichever way you run it, do make sure you set the &lt;code&gt;testVersion&lt;/code&gt; to run the sniffs against. The &lt;code&gt;testVersion&lt;/code&gt; determines for which PHP versions you will receive compatibility information. The recommended setting for this at this moment is &lt;code&gt;5.6-&lt;/code&gt; to support the same PHP versions as WordPress Core supports.&lt;/p&gt; &#xA;&lt;p&gt;For more information about setting the &lt;code&gt;testVersion&lt;/code&gt;, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility#sniffing-your-code-for-compatibility-with-specific-php-versions&#34;&gt;PHPCompatibility: Sniffing your code for compatibility with specific PHP version(s)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PHPCompatibility/PHPCompatibility#using-a-custom-ruleset&#34;&gt;PHPCompatibility: Using a custom ruleset&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;Command line&lt;/h3&gt; &#xA;&lt;p&gt;Run the &lt;code&gt;phpcs&lt;/code&gt; command line tool on a given file or directory, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;phpcs --standard=WordPress wp-load.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will result in following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;------------------------------------------------------------------------------------------&#xA;FOUND 8 ERRORS AND 10 WARNINGS AFFECTING 11 LINES&#xA;------------------------------------------------------------------------------------------&#xA; 24 | WARNING | [ ] error_reporting() can lead to full path disclosure.&#xA; 24 | WARNING | [ ] error_reporting() found. Changing configuration at runtime is rarely&#xA;    |         |     necessary.&#xA; 37 | WARNING | [x] &#34;require_once&#34; is a statement not a function; no parentheses are&#xA;    |         |     required&#xA; 39 | WARNING | [ ] Silencing errors is discouraged&#xA; 39 | WARNING | [ ] Silencing errors is discouraged&#xA; 42 | WARNING | [x] &#34;require_once&#34; is a statement not a function; no parentheses are&#xA;    |         |     required&#xA; 46 | ERROR   | [ ] Inline comments must end in full-stops, exclamation marks, or&#xA;    |         |     question marks&#xA; 46 | ERROR   | [x] There must be no blank line following an inline comment&#xA; 49 | WARNING | [x] &#34;require_once&#34; is a statement not a function; no parentheses are&#xA;    |         |     required&#xA; 54 | WARNING | [x] &#34;require_once&#34; is a statement not a function; no parentheses are&#xA;    |         |     required&#xA; 63 | WARNING | [ ] Detected access of super global var $_SERVER, probably needs manual&#xA;    |         |     inspection.&#xA; 63 | ERROR   | [ ] Detected usage of a non-validated input variable: $_SERVER&#xA; 63 | ERROR   | [ ] Missing wp_unslash() before sanitization.&#xA; 63 | ERROR   | [ ] Detected usage of a non-sanitized input variable: $_SERVER&#xA; 69 | WARNING | [x] &#34;require_once&#34; is a statement not a function; no parentheses are&#xA;    |         |     required&#xA; 74 | ERROR   | [ ] Inline comments must end in full-stops, exclamation marks, or&#xA;    |         |     question marks&#xA; 92 | ERROR   | [ ] All output should be run through an escaping function (see the&#xA;    |         |     Security sections in the WordPress Developer Handbooks), found&#xA;    |         |     &#39;$die&#39;.&#xA; 92 | ERROR   | [ ] All output should be run through an escaping function (see the&#xA;    |         |     Security sections in the WordPress Developer Handbooks), found &#39;__&#39;.&#xA;------------------------------------------------------------------------------------------&#xA;PHPCBF CAN FIX THE 6 MARKED SNIFF VIOLATIONS AUTOMATICALLY&#xA;------------------------------------------------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using PHPCS and WPCS from within your IDE&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PhpStorm&lt;/strong&gt; : Please see &#34;&lt;a href=&#34;https://confluence.jetbrains.com/display/PhpStorm/WordPress+Development+using+PhpStorm#WordPressDevelopmentusingPhpStorm-PHPCodeSnifferwithWordPressCodingStandardsIntegrationinPhpStorm&#34;&gt;PHP Code Sniffer with WordPress Coding Standards Integration&lt;/a&gt;&#34; in the PhpStorm documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sublime Text&lt;/strong&gt; : Please see &#34;&lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki/Setting-up-WPCS-to-work-in-Sublime-Text&#34;&gt;Setting up WPCS to work in Sublime Text&lt;/a&gt;&#34; in the wiki.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Atom&lt;/strong&gt;: Please see &#34;&lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki/Setting-up-WPCS-to-work-in-Atom&#34;&gt;Setting up WPCS to work in Atom&lt;/a&gt;&#34; in the wiki.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visual Studio&lt;/strong&gt;: Please see &#34;&lt;a href=&#34;https://tommcfarlin.com/php-codesniffer-in-visual-studio-code/&#34;&gt;Setting up PHP CodeSniffer in Visual Studio Code&lt;/a&gt;&#34;, a tutorial by Tom McFarlin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Eclipse with XAMPP&lt;/strong&gt;: Please see &#34;&lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki/How-to-use-WPCS-with-Eclipse-and-XAMPP&#34;&gt;Setting up WPCS when using Eclipse with XAMPP&lt;/a&gt;&#34; in the wiki.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running your code through WPCS automatically using CI tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki/Running-in-GitHub-Actions&#34;&gt;Running in GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki/Running-in-Travis&#34;&gt;Running in Travis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fixing errors or ignoring them&lt;/h2&gt; &#xA;&lt;p&gt;You can find information on how to deal with some of the more frequent issues in the &lt;a href=&#34;https://github.com/WordPress/WordPress-Coding-Standards/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tools shipped with WPCS&lt;/h3&gt; &#xA;&lt;p&gt;Since version 1.2.0, WPCS has a special sniff category &lt;code&gt;Utils&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This sniff category contains some tools which, generally speaking, will only be needed to be run once over a codebase and for which the fixers can be considered &lt;em&gt;risky&lt;/em&gt;, i.e. very careful review by a developer is needed before accepting the fixes made by these sniffs.&lt;/p&gt; &#xA;&lt;p&gt;The sniffs in this category are disabled by default and can only be activated by adding some properties for each sniff via a custom ruleset.&lt;/p&gt; &#xA;&lt;p&gt;At this moment, WPCS offer the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WordPress.Utils.I18nTextDomainFixer&lt;/code&gt; - This sniff can replace the text domain used in a code-base. The sniff will fix the text domains in both I18n function calls as well as in a plugin/theme header. Passing the following properties will activate the sniff: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;old_text_domain&lt;/code&gt;: an array with one or more (old) text domain names which need to be replaced;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;new_text_domain&lt;/code&gt;: the correct (new) text domain as a string.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;, including information about &lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/.github/CONTRIBUTING.md#unit-testing&#34;&gt;unit testing&lt;/a&gt; the standard.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/WordPress/WordPress-Coding-Standards/develop/LICENSE&#34;&gt;LICENSE&lt;/a&gt; (MIT).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spatie/laravel-sitemap</title>
    <updated>2022-08-26T01:43:32Z</updated>
    <id>tag:github.com,2022-08-26:/spatie/laravel-sitemap</id>
    <link href="https://github.com/spatie/laravel-sitemap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create and generate sitemaps with ease&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://supportukrainenow.org&#34;&gt;&lt;img src=&#34;https://github-ads.s3.eu-central-1.amazonaws.com/support-ukraine.svg?t=1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Generate sitemaps with ease&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/spatie/laravel-sitemap&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/spatie/laravel-sitemap.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-sitemap/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/spatie/laravel-sitemap/run-tests?label=tests&#34; alt=&#34;Test Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/spatie/laravel-sitemap/Check%20&amp;amp;%20fix%20styling?label=code%20style&#34; alt=&#34;Code Style Status&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/spatie/laravel-sitemap&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/spatie/laravel-sitemap.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package can generate a sitemap without you having to add urls to it manually. This works by crawling your entire site.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\SitemapGenerator;&#xA;&#xA;SitemapGenerator::create(&#39;https://example.com&#39;)-&amp;gt;writeToFile($path);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create your sitemap manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Carbon\Carbon;&#xA;use Spatie\Sitemap\Sitemap;&#xA;use Spatie\Sitemap\Tags\Url;&#xA;&#xA;Sitemap::create()&#xA;&#xA;    -&amp;gt;add(Url::create(&#39;/home&#39;)&#xA;        -&amp;gt;setLastModificationDate(Carbon::yesterday())&#xA;        -&amp;gt;setChangeFrequency(Url::CHANGE_FREQUENCY_YEARLY)&#xA;        -&amp;gt;setPriority(0.1))&#xA;&#xA;   -&amp;gt;add(...)&#xA;&#xA;   -&amp;gt;writeToFile($path);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can have the best of both worlds by generating a sitemap and then adding more links to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;SitemapGenerator::create(&#39;https://example.com&#39;)&#xA;   -&amp;gt;getSitemap()&#xA;   -&amp;gt;add(Url::create(&#39;/extra-page&#39;)&#xA;        -&amp;gt;setLastModificationDate(Carbon::yesterday())&#xA;        -&amp;gt;setChangeFrequency(Url::CHANGE_FREQUENCY_YEARLY)&#xA;        -&amp;gt;setPriority(0.1))&#xA;&#xA;    -&amp;gt;add(...)&#xA;&#xA;    -&amp;gt;writeToFile($path);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also control the maximum depth of the sitemap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;SitemapGenerator::create(&#39;https://example.com&#39;)&#xA;    -&amp;gt;configureCrawler(function (Crawler $crawler) {&#xA;        $crawler-&amp;gt;setMaximumDepth(3);&#xA;    })&#xA;    -&amp;gt;writeToFile($path);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generator has &lt;a href=&#34;https://github.com/spatie/laravel-sitemap#executing-javascript&#34;&gt;the ability to execute JavaScript&lt;/a&gt; on each page so links injected into the dom by JavaScript will be crawled as well.&lt;/p&gt; &#xA;&lt;p&gt;You can also use one of your available filesystem disks to write the sitemap to.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;SitemapGenerator::create(&#39;https://example.com&#39;)-&amp;gt;getSitemap()-&amp;gt;writeToDisk(&#39;public&#39;, &#39;sitemap.xml&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add your models directly by implementing the &lt;code&gt;\Spatie\Sitemap\Contracts\Sitemapable&lt;/code&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\Contracts\Sitemapable;&#xA;use Spatie\Sitemap\Tags\Url;&#xA;&#xA;class Post extends Model implements Sitemapable&#xA;{&#xA;    public function toSitemapTag(): Url | string | array&#xA;    {&#xA;        return route(&#39;blog.post.show&#39;, $this);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can add a single post model to the sitemap or even a whole collection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\Sitemap;&#xA;&#xA;Sitemap::create()&#xA;    -&amp;gt;add($post)&#xA;    -&amp;gt;add(Post::all());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way you can add all your pages super fast without the need to crawl them all.&lt;/p&gt; &#xA;&lt;h2&gt;Support us&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spatie.be/github-ad-click/laravel-sitemap&#34;&gt;&lt;img src=&#34;https://github-ads.s3.eu-central-1.amazonaws.com/laravel-sitemap.jpg?t=1&#34; width=&#34;419px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We invest a lot of resources into creating &lt;a href=&#34;https://spatie.be/open-source&#34;&gt;best in class open source packages&lt;/a&gt;. You can support us by &lt;a href=&#34;https://spatie.be/open-source/support-us&#34;&gt;buying one of our paid products&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You&#39;ll find our address on &lt;a href=&#34;https://spatie.be/about-us&#34;&gt;our contact page&lt;/a&gt;. We publish all received postcards on &lt;a href=&#34;https://spatie.be/open-source/postcards&#34;&gt;our virtual postcard wall&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First, install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require spatie/laravel-sitemap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The package will automatically register itself.&lt;/p&gt; &#xA;&lt;p&gt;If you want to update your sitemap automatically and frequently you need to perform &lt;a href=&#34;https://github.com/spatie/laravel-sitemap#generating-the-sitemap-frequently&#34;&gt;some extra steps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can override the default options for the crawler. First publish the configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --provider=&#34;Spatie\Sitemap\SitemapServiceProvider&#34; --tag=sitemap-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will copy the default config to &lt;code&gt;config/sitemap.php&lt;/code&gt; where you can edit it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\RequestOptions;&#xA;use Spatie\Sitemap\Crawler\Profile;&#xA;&#xA;return [&#xA;&#xA;    /*&#xA;     * These options will be passed to GuzzleHttp\Client when it is created.&#xA;     * For in-depth information on all options see the Guzzle docs:&#xA;     *&#xA;     * http://docs.guzzlephp.org/en/stable/request-options.html&#xA;     */&#xA;    &#39;guzzle_options&#39; =&amp;gt; [&#xA;&#xA;        /*&#xA;         * Whether or not cookies are used in a request.&#xA;         */&#xA;        RequestOptions::COOKIES =&amp;gt; true,&#xA;&#xA;        /*&#xA;         * The number of seconds to wait while trying to connect to a server.&#xA;         * Use 0 to wait indefinitely.&#xA;         */&#xA;        RequestOptions::CONNECT_TIMEOUT =&amp;gt; 10,&#xA;&#xA;        /*&#xA;         * The timeout of the request in seconds. Use 0 to wait indefinitely.&#xA;         */&#xA;        RequestOptions::TIMEOUT =&amp;gt; 10,&#xA;&#xA;        /*&#xA;         * Describes the redirect behavior of a request.&#xA;         */&#xA;        RequestOptions::ALLOW_REDIRECTS =&amp;gt; false,&#xA;    ],&#xA;    &#xA;    /*&#xA;     * The sitemap generator can execute JavaScript on each page so it will&#xA;     * discover links that are generated by your JS scripts. This feature&#xA;     * is powered by headless Chrome.&#xA;     */&#xA;    &#39;execute_javascript&#39; =&amp;gt; false,&#xA;    &#xA;    /*&#xA;     * The package will make an educated guess as to where Google Chrome is installed. &#xA;     * You can also manually pass it&#39;s location here.&#xA;     */&#xA;    &#39;chrome_binary_path&#39; =&amp;gt; &#39;&#39;,&#xA;&#xA;    /*&#xA;     * The sitemap generator uses a CrawlProfile implementation to determine&#xA;     * which urls should be crawled for the sitemap.&#xA;     */&#xA;    &#39;crawl_profile&#39; =&amp;gt; Profile::class,&#xA;    &#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Generating a sitemap&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way is to crawl the given domain and generate a sitemap with all found links. The destination of the sitemap should be specified by &lt;code&gt;$path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;SitemapGenerator::create(&#39;https://example.com&#39;)-&amp;gt;writeToFile($path);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated sitemap will look similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;urlset xmlns=&#34;http://www.sitemaps.org/schemas/sitemap/0.9&#34;&amp;gt;&#xA;    &amp;lt;url&amp;gt;&#xA;        &amp;lt;loc&amp;gt;https://example.com&amp;lt;/loc&amp;gt;&#xA;        &amp;lt;lastmod&amp;gt;2016-01-01T00:00:00+00:00&amp;lt;/lastmod&amp;gt;&#xA;        &amp;lt;changefreq&amp;gt;daily&amp;lt;/changefreq&amp;gt;&#xA;        &amp;lt;priority&amp;gt;0.8&amp;lt;/priority&amp;gt;&#xA;    &amp;lt;/url&amp;gt;&#xA;    &amp;lt;url&amp;gt;&#xA;        &amp;lt;loc&amp;gt;https://example.com/page&amp;lt;/loc&amp;gt;&#xA;        &amp;lt;lastmod&amp;gt;2016-01-01T00:00:00+00:00&amp;lt;/lastmod&amp;gt;&#xA;        &amp;lt;changefreq&amp;gt;daily&amp;lt;/changefreq&amp;gt;&#xA;        &amp;lt;priority&amp;gt;0.8&amp;lt;/priority&amp;gt;&#xA;    &amp;lt;/url&amp;gt;&#xA;&#xA;    ...&#xA;&amp;lt;/urlset&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizing the sitemap generator&lt;/h3&gt; &#xA;&lt;h4&gt;Define a custom Crawl Profile&lt;/h4&gt; &#xA;&lt;p&gt;You can create a custom crawl profile by implementing the &lt;code&gt;Spatie\Crawler\CrawlProfiles\CrawlProfile&lt;/code&gt; interface and by customizing the &lt;code&gt;shouldCrawl()&lt;/code&gt; method for full control over what url/domain/sub-domain should be crawled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Crawler\CrawlProfiles\CrawlProfile;&#xA;use Psr\Http\Message\UriInterface;&#xA;&#xA;class CustomCrawlProfile extends CrawlProfile&#xA;{&#xA;    public function shouldCrawl(UriInterface $url): bool&#xA;    {&#xA;        if ($url-&amp;gt;getHost() !== &#39;localhost&#39;) {&#xA;            return false;&#xA;        }&#xA;        &#xA;        return $url-&amp;gt;getPath() === &#39;/&#39;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and register your &lt;code&gt;CustomCrawlProfile::class&lt;/code&gt; in &lt;code&gt;config/sitemap.php&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return [&#xA;    ...&#xA;    /*&#xA;     * The sitemap generator uses a CrawlProfile implementation to determine&#xA;     * which urls should be crawled for the sitemap.&#xA;     */&#xA;    &#39;crawl_profile&#39; =&amp;gt; CustomCrawlProfile::class,&#xA;    &#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Changing properties&lt;/h4&gt; &#xA;&lt;p&gt;To change the &lt;code&gt;lastmod&lt;/code&gt;, &lt;code&gt;changefreq&lt;/code&gt; and &lt;code&gt;priority&lt;/code&gt; of the contact page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Carbon\Carbon;&#xA;use Spatie\Sitemap\SitemapGenerator;&#xA;use Spatie\Sitemap\Tags\Url;&#xA;&#xA;SitemapGenerator::create(&#39;https://example.com&#39;)&#xA;   -&amp;gt;hasCrawled(function (Url $url) {&#xA;       if ($url-&amp;gt;segment(1) === &#39;contact&#39;) {&#xA;           $url-&amp;gt;setPriority(0.9)&#xA;               -&amp;gt;setLastModificationDate(Carbon::create(&#39;2016&#39;, &#39;1&#39;, &#39;1&#39;));&#xA;       }&#xA;&#xA;       return $url;&#xA;   })&#xA;   -&amp;gt;writeToFile($sitemapPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Leaving out some links&lt;/h4&gt; &#xA;&lt;p&gt;If you don&#39;t want a crawled link to appear in the sitemap, just don&#39;t return it in the callable you pass to &lt;code&gt;hasCrawled &lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\SitemapGenerator;&#xA;use Spatie\Sitemap\Tags\Url;&#xA;&#xA;SitemapGenerator::create(&#39;https://example.com&#39;)&#xA;   -&amp;gt;hasCrawled(function (Url $url) {&#xA;       if ($url-&amp;gt;segment(1) === &#39;contact&#39;) {&#xA;           return;&#xA;       }&#xA;&#xA;       return $url;&#xA;   })&#xA;   -&amp;gt;writeToFile($sitemapPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Preventing the crawler from crawling some pages&lt;/h4&gt; &#xA;&lt;p&gt;You can also instruct the underlying crawler to not crawl some pages by passing a &lt;code&gt;callable&lt;/code&gt; to &lt;code&gt;shouldCrawl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;shouldCrawl&lt;/code&gt; will only work with the default crawl &lt;code&gt;Profile&lt;/code&gt; or custom crawl profiles that implement a &lt;code&gt;shouldCrawlCallback&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\SitemapGenerator;&#xA;use Psr\Http\Message\UriInterface;&#xA;&#xA;SitemapGenerator::create(&#39;https://example.com&#39;)&#xA;   -&amp;gt;shouldCrawl(function (UriInterface $url) {&#xA;       // All pages will be crawled, except the contact page.&#xA;       // Links present on the contact page won&#39;t be added to the&#xA;       // sitemap unless they are present on a crawlable page.&#xA;       &#xA;       return strpos($url-&amp;gt;getPath(), &#39;/contact&#39;) === false;&#xA;   })&#xA;   -&amp;gt;writeToFile($sitemapPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring the crawler&lt;/h4&gt; &#xA;&lt;p&gt;The crawler itself can be &lt;a href=&#34;https://github.com/spatie/crawler#usage&#34;&gt;configured&lt;/a&gt; to do a few different things.&lt;/p&gt; &#xA;&lt;p&gt;You can configure the crawler used by the sitemap generator, for example: to ignore robot checks; like so.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;SitemapGenerator::create(&#39;http://localhost:4020&#39;)&#xA;    -&amp;gt;configureCrawler(function (Crawler $crawler) {&#xA;        $crawler-&amp;gt;ignoreRobots();&#xA;    })&#xA;    -&amp;gt;writeToFile($file);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Limiting the amount of pages crawled&lt;/h4&gt; &#xA;&lt;p&gt;You can limit the amount of pages crawled by calling &lt;code&gt;setMaximumCrawlCount&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\SitemapGenerator;&#xA;&#xA;SitemapGenerator::create(&#39;https://example.com&#39;)&#xA;    -&amp;gt;setMaximumCrawlCount(500) // only the 500 first pages will be crawled&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Executing Javascript&lt;/h4&gt; &#xA;&lt;p&gt;The sitemap generator can execute JavaScript on each page so it will discover links that are generated by your JS scripts. You can enable this feature by setting &lt;code&gt;execute_javascript&lt;/code&gt; in the config file to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, &lt;a href=&#34;https://github.com/spatie/browsershot&#34;&gt;headless Chrome&lt;/a&gt; is used to execute JavaScript. Here are some pointers on &lt;a href=&#34;https://github.com/spatie/browsershot#requirements&#34;&gt;how to install it on your system&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The package will make an educated guess as to where Chrome is installed on your system. You can also manually pass the location of the Chrome binary to &lt;code&gt;executeJavaScript()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Manually adding links&lt;/h4&gt; &#xA;&lt;p&gt;You can manually add links to a sitemap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\SitemapGenerator;&#xA;use Spatie\Sitemap\Tags\Url;&#xA;&#xA;SitemapGenerator::create(&#39;https://example.com&#39;)&#xA;    -&amp;gt;getSitemap()&#xA;    // here we add one extra link, but you can add as many as you&#39;d like&#xA;    -&amp;gt;add(Url::create(&#39;/extra-page&#39;)-&amp;gt;setPriority(0.5))&#xA;    -&amp;gt;writeToFile($sitemapPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adding alternates to links&lt;/h4&gt; &#xA;&lt;p&gt;Multilingual sites may have several alternate versions of the same page (one per language). Based on the previous example adding an alternate can be done as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\SitemapGenerator;&#xA;use Spatie\Sitemap\Tags\Url;&#xA;&#xA;SitemapGenerator::create(&#39;https://example.com&#39;)&#xA;    -&amp;gt;getSitemap()&#xA;    // here we add one extra link, but you can add as many as you&#39;d like&#xA;    -&amp;gt;add(Url::create(&#39;/extra-page&#39;)-&amp;gt;setPriority(0.5)-&amp;gt;addAlternate(&#39;/extra-pagina&#39;, &#39;nl&#39;))&#xA;    -&amp;gt;writeToFile($sitemapPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the &lt;code&gt;addAlternate&lt;/code&gt; function which takes an alternate URL and the locale it belongs to.&lt;/p&gt; &#xA;&lt;h4&gt;Adding images to links&lt;/h4&gt; &#xA;&lt;p&gt;Urls can also have images. See also &lt;a href=&#34;https://developers.google.com/search/docs/advanced/sitemaps/image-sitemaps&#34;&gt;https://developers.google.com/search/docs/advanced/sitemaps/image-sitemaps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\Sitemap;&#xA;use Spatie\Sitemap\Tags\Url;&#xA;&#xA;Sitemap::create()&#xA;    // here we add an image to a URL&#xA;    -&amp;gt;add(Url::create(&#39;https://example.com&#39;)-&amp;gt;addImage(&#39;https://example.com/images/home.jpg&#39;, &#39;Home page image&#39;))&#xA;    -&amp;gt;writeToFile($sitemapPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually creating a sitemap&lt;/h3&gt; &#xA;&lt;p&gt;You can also create a sitemap fully manual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Carbon\Carbon;&#xA;&#xA;Sitemap::create()&#xA;   -&amp;gt;add(&#39;/page1&#39;)&#xA;   -&amp;gt;add(&#39;/page2&#39;)&#xA;   -&amp;gt;add(Url::create(&#39;/page3&#39;)-&amp;gt;setLastModificationDate(Carbon::create(&#39;2016&#39;, &#39;1&#39;, &#39;1&#39;)))&#xA;   -&amp;gt;writeToFile($sitemapPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a sitemap index&lt;/h3&gt; &#xA;&lt;p&gt;You can create a sitemap index:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\SitemapIndex;&#xA;&#xA;SitemapIndex::create()&#xA;    -&amp;gt;add(&#39;/pages_sitemap.xml&#39;)&#xA;    -&amp;gt;add(&#39;/posts_sitemap.xml&#39;)&#xA;    -&amp;gt;writeToFile($sitemapIndexPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass a &lt;code&gt;Spatie\Sitemap\Tags\Sitemap&lt;/code&gt; object to manually set the &lt;code&gt;lastModificationDate&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\SitemapIndex;&#xA;use Spatie\Sitemap\Tags\Sitemap;&#xA;&#xA;SitemapIndex::create()&#xA;    -&amp;gt;add(&#39;/pages_sitemap.xml&#39;)&#xA;    -&amp;gt;add(Sitemap::create(&#39;/posts_sitemap.xml&#39;)&#xA;        -&amp;gt;setLastModificationDate(Carbon::yesterday()))&#xA;    -&amp;gt;writeToFile($sitemapIndexPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the generated sitemap index will look similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;sitemapindex xmlns=&#34;http://www.sitemaps.org/schemas/sitemap/0.9&#34;&amp;gt;&#xA;   &amp;lt;sitemap&amp;gt;&#xA;      &amp;lt;loc&amp;gt;http://www.example.com/pages_sitemap.xml&amp;lt;/loc&amp;gt;&#xA;      &amp;lt;lastmod&amp;gt;2016-01-01T00:00:00+00:00&amp;lt;/lastmod&amp;gt;&#xA;   &amp;lt;/sitemap&amp;gt;&#xA;   &amp;lt;sitemap&amp;gt;&#xA;      &amp;lt;loc&amp;gt;http://www.example.com/posts_sitemap.xml&amp;lt;/loc&amp;gt;&#xA;      &amp;lt;lastmod&amp;gt;2015-12-31T00:00:00+00:00&amp;lt;/lastmod&amp;gt;&#xA;   &amp;lt;/sitemap&amp;gt;&#xA;&amp;lt;/sitemapindex&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a sitemap index with sub-sequent sitemaps&lt;/h3&gt; &#xA;&lt;p&gt;You can call the &lt;code&gt;maxTagsPerSitemap&lt;/code&gt; method to generate a sitemap that only contains the given amount of tags&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\Sitemap\SitemapGenerator;&#xA;&#xA;SitemapGenerator::create(&#39;https://example.com&#39;)&#xA;    -&amp;gt;maxTagsPerSitemap(20000)&#xA;    -&amp;gt;writeToFile(public_path(&#39;sitemap.xml&#39;));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generating the sitemap frequently&lt;/h2&gt; &#xA;&lt;p&gt;Your site will probably be updated from time to time. In order to let your sitemap reflect these changes, you can run the generator periodically. The easiest way of doing this is to make use of Laravel&#39;s default scheduling capabilities.&lt;/p&gt; &#xA;&lt;p&gt;You could set up an artisan command much like this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace App\Console\Commands;&#xA;&#xA;use Illuminate\Console\Command;&#xA;use Spatie\Sitemap\SitemapGenerator;&#xA;&#xA;class GenerateSitemap extends Command&#xA;{&#xA;    /**&#xA;     * The console command name.&#xA;     *&#xA;     * @var string&#xA;     */&#xA;    protected $signature = &#39;sitemap:generate&#39;;&#xA;&#xA;    /**&#xA;     * The console command description.&#xA;     *&#xA;     * @var string&#xA;     */&#xA;    protected $description = &#39;Generate the sitemap.&#39;;&#xA;&#xA;    /**&#xA;     * Execute the console command.&#xA;     *&#xA;     * @return mixed&#xA;     */&#xA;    public function handle()&#xA;    {&#xA;        // modify this to your own needs&#xA;        SitemapGenerator::create(config(&#39;app.url&#39;))&#xA;            -&amp;gt;writeToFile(public_path(&#39;sitemap.xml&#39;));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That command should then be scheduled in the console kernel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// app/Console/Kernel.php&#xA;protected function schedule(Schedule $schedule)&#xA;{&#xA;    ...&#xA;    $schedule-&amp;gt;command(&#39;sitemap:generate&#39;)-&amp;gt;daily();&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-sitemap/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;First start the test server in a separate terminal session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd tests/server&#xA;./start_server.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the server running you can execute the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/spatie/.github/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve found a bug regarding security please mail &lt;a href=&#34;mailto:security@spatie.be&#34;&gt;security@spatie.be&lt;/a&gt; instead of using the issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freekmurze&#34;&gt;Freek Van der Herten&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spatie/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support us&lt;/h2&gt; &#xA;&lt;p&gt;Spatie is a webdesign agency based in Antwerp, Belgium. You&#39;ll find an overview of all our open source projects &lt;a href=&#34;https://spatie.be/opensource&#34;&gt;on our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Does your business depend on our contributions? Reach out and support us on &lt;a href=&#34;https://www.patreon.com/spatie&#34;&gt;Patreon&lt;/a&gt;. All pledges will be dedicated to allocating workforce on maintenance and new awesome stuff.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-sitemap/main/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>laravel/passport</title>
    <updated>2022-08-26T01:43:32Z</updated>
    <id>tag:github.com,2022-08-26:/laravel/passport</id>
    <link href="https://github.com/laravel/passport" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Laravel Passport provides OAuth2 server support to Laravel.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/laravel/passport/11.x/art/logo.svg?sanitize=true&#34; alt=&#34;Logo Laravel Passport&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/laravel/passport/actions&#34;&gt;&lt;img src=&#34;https://github.com/laravel/passport/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/passport&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/laravel/passport&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/passport&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/laravel/passport&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/passport&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/l/laravel/passport&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Passport is an OAuth2 server and API authentication package that is simple and enjoyable to use.&lt;/p&gt; &#xA;&lt;h2&gt;Official Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for Passport can be found on the &lt;a href=&#34;https://laravel.com/docs/passport&#34;&gt;Laravel website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to Passport! The contribution guide can be found in the &lt;a href=&#34;https://laravel.com/docs/contributions&#34;&gt;Laravel documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;In order to ensure that the Laravel community is welcoming to all, please review and abide by the &lt;a href=&#34;https://laravel.com/docs/contributions#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://github.com/laravel/passport/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Passport is open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/laravel/passport/11.x/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>