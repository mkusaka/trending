<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:37:34Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>USTC-Hackergame/hackergame2022-writeups</title>
    <updated>2022-11-01T01:37:34Z</updated>
    <id>tag:github.com,2022-11-01:/USTC-Hackergame/hackergame2022-writeups</id>
    <link href="https://github.com/USTC-Hackergame/hackergame2022-writeups" rel="alternate"></link>
    <summary type="html">&lt;p&gt;中国科学技术大学第九届信息安全大赛的官方与非官方题解&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hackergame2022-writeups&lt;/h1&gt; &#xA;&lt;p&gt;本文档收集整理了中国科学技术大学第九届信息安全大赛的官方与非官方题解。&lt;/p&gt; &#xA;&lt;p&gt;该仓库仍在活跃更新中，欢迎各位选手以 Pull Request 的形式提交自己的 write-up（players 目录下以自己的昵称创建新文件夹，并在本文件的「来自选手」部分增加一行）。&lt;/p&gt; &#xA;&lt;p&gt;若大家对本题解有任何疑问或改进建议，欢迎 &lt;a href=&#34;https://github.com/USTC-Hackergame/hackergame2022-writeups/issues/new&#34;&gt;提 issue&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;比赛平台：&lt;a href=&#34;https://hack.lug.ustc.edu.cn/&#34;&gt;https://hack.lug.ustc.edu.cn/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;比赛时间：北京时间 2022 年 10 月 22 日 中午 12:00 ～ 10 月 29 日 中午 12:00（共七天）&lt;/p&gt; &#xA;&lt;h2&gt;目录&lt;/h2&gt; &#xA;&lt;h3&gt;官方题解&lt;/h3&gt; &#xA;&lt;p&gt;部分题目需要使用 token。Token 可以从比赛平台注册获取，也可以使用 &lt;code&gt;1:MEUCIQC24dB6B24/LDr2O+4cifbzOEFDbkXg3hJIqTXuuvpa1QIgbzMM/F0uUmYIudtM6qEDvOpEHbtTZjSjTWMcA5zhnos=&lt;/code&gt; 作为测试 token。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;题目描述与 write-up&lt;/th&gt; &#xA;   &lt;th&gt;文件、源代码&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%AD%BE%E5%88%B0/README.md&#34;&gt;签到&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%8C%AB%E5%92%AA%E9%97%AE%E7%AD%94%E5%96%B5/README.md&#34;&gt;猫咪问答喵&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%AE%B6%E7%9B%AE%E5%BD%95%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/README.md&#34;&gt;家目录里的秘密&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%AE%B6%E7%9B%AE%E5%BD%95%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/HeiLang/README.md&#34;&gt;HeiLang&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/HeiLang/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/Xcaptcha/README.md&#34;&gt;Xcaptcha&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/Xcaptcha/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%202.0/README.md&#34;&gt;旅行照片 2.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%202.0/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%8C%9C%E6%95%B0%E5%AD%97/README.md&#34;&gt;猜数字&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%8C%9C%E6%95%B0%E5%AD%97/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/LaTeX%20%E6%9C%BA%E5%99%A8%E4%BA%BA/README.md&#34;&gt;LaTeX 机器人&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/LaTeX%20%E6%9C%BA%E5%99%A8%E4%BA%BA/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/Flag%20%E7%9A%84%E7%97%95%E8%BF%B9/README.md&#34;&gt;Flag 的痕迹&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/Flag%20%E7%9A%84%E7%97%95%E8%BF%B9/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%AE%89%E5%85%A8%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%B5%8B%E8%AF%84/README.md&#34;&gt;安全的在线测评&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%AE%89%E5%85%A8%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%B5%8B%E8%AF%84/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%BA%BF%E8%B7%AF%E6%9D%BF/README.md&#34;&gt;线路板&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%BA%BF%E8%B7%AF%E6%9D%BF/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/Flag%20%E8%87%AA%E5%8A%A8%E6%9C%BA/README.md&#34;&gt;Flag 自动机&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/Flag%20%E8%87%AA%E5%8A%A8%E6%9C%BA/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%BE%AE%E7%A7%AF%E5%88%86%E8%AE%A1%E7%AE%97%E5%B0%8F%E7%BB%83%E4%B9%A0/README.md&#34;&gt;微积分计算小练习&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%BE%AE%E7%A7%AF%E5%88%86%E8%AE%A1%E7%AE%97%E5%B0%8F%E7%BB%83%E4%B9%A0/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E6%9D%AF%E7%AA%97%E9%B9%85%E5%BD%B1/README.md&#34;&gt;杯窗鹅影&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E6%9D%AF%E7%AA%97%E9%B9%85%E5%BD%B1/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97%E8%BD%AE%E7%9B%98%E8%B5%8C/README.md&#34;&gt;蒙特卡罗轮盘赌&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97%E8%BD%AE%E7%9B%98%E8%B5%8C/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E4%BA%8C%E6%AC%A1%E5%85%83%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/README.md&#34;&gt;二次元神经网络&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E4%BA%8C%E6%AC%A1%E5%85%83%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E6%83%9C%E5%AD%97%E5%A6%82%E9%87%91/README.md&#34;&gt;惜字如金&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E6%83%9C%E5%AD%97%E5%A6%82%E9%87%91/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E4%B8%8D%E5%8F%AF%E5%8A%A0%E5%AF%86%E7%9A%84%E5%BC%82%E4%B8%96%E7%95%8C/README.md&#34;&gt;不可加密的异世界&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E4%B8%8D%E5%8F%AF%E5%8A%A0%E5%AF%86%E7%9A%84%E5%BC%82%E4%B8%96%E7%95%8C/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%BD%AE%E6%8D%A2%E9%AD%94%E7%BE%A4/README.md&#34;&gt;置换魔群&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%BD%AE%E6%8D%A2%E9%AD%94%E7%BE%A4/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%85%89%E4%B8%8E%E5%BD%B1/README.md&#34;&gt;光与影&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%85%89%E4%B8%8E%E5%BD%B1/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%9F%A9%E9%98%B5%E4%B9%8B%E5%9B%B0/README.md&#34;&gt;矩阵之困&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%9F%A9%E9%98%B5%E4%B9%8B%E5%9B%B0/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E4%BD%A0%E5%85%88%E5%88%AB%E6%80%A5/README.md&#34;&gt;你先别急&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E4%BD%A0%E5%85%88%E5%88%AB%E6%80%A5/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E9%93%BE%E4%B8%8A%E8%AE%B0%E5%BF%86%E5%A4%A7%E5%B8%88/README.md&#34;&gt;链上记忆大师&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E9%93%BE%E4%B8%8A%E8%AE%B0%E5%BF%86%E5%A4%A7%E5%B8%88/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%89%87%E4%B8%8A%E7%B3%BB%E7%BB%9F/README.md&#34;&gt;片上系统&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%89%87%E4%B8%8A%E7%B3%BB%E7%BB%9F/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E4%BC%A0%E8%BE%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E6%96%87%E4%BB%B6/README.md&#34;&gt;传达不到的文件&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E4%BC%A0%E8%BE%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E6%96%87%E4%BB%B6/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E5%BD%BC%E6%96%B9/README.md&#34;&gt;看不见的彼方&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E5%BD%BC%E6%96%B9/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E9%87%8F%E5%AD%90%E8%97%8F%E5%AE%9D%E5%9B%BE/README.md&#34;&gt;量子藏宝图&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E9%87%8F%E5%AD%90%E8%97%8F%E5%AE%9D%E5%9B%BE/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E3%80%8A%E5%85%B3%E4%BA%8E%20RoboGame%20%E7%9A%84%E8%BD%AE%E5%AD%90%E6%B0%B8%E8%BF%9C%E8%B0%83%E4%B8%8D%E5%87%86%E9%80%9F%E5%BA%A6%E8%BF%99%E4%BB%B6%E4%BA%8B%E3%80%8B/README.md&#34;&gt;《关于 RoboGame 的轮子永远调不准速度这件事》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E3%80%8A%E5%85%B3%E4%BA%8E%20RoboGame%20%E7%9A%84%E8%BD%AE%E5%AD%90%E6%B0%B8%E8%BF%9C%E8%B0%83%E4%B8%8D%E5%87%86%E9%80%9F%E5%BA%A6%E8%BF%99%E4%BB%B6%E4%BA%8B%E3%80%8B/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%A3%B9...%E5%A3%B9%E5%AD%97%E8%8A%82%EF%BC%9F/README.md&#34;&gt;壹...壹字节？&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%A3%B9...%E5%A3%B9%E5%AD%97%E8%8A%82%EF%BC%9F/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E4%BC%81%E9%B9%85%E6%8B%BC%E7%9B%98/README.md&#34;&gt;企鹅拼盘&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E4%BC%81%E9%B9%85%E6%8B%BC%E7%9B%98/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%B0%8F%20Z%20%E7%9A%84%E9%9D%93%E5%8F%B7%E9%92%B1%E5%8C%85/README.md&#34;&gt;小 Z 的靓号钱包&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E5%B0%8F%20Z%20%E7%9A%84%E9%9D%93%E5%8F%B7%E9%92%B1%E5%8C%85/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%81%AB%E7%9C%BC%E9%87%91%E7%9D%9B%E7%9A%84%E5%B0%8F%20E/README.md&#34;&gt;火眼金睛的小 E&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/%E7%81%AB%E7%9C%BC%E9%87%91%E7%9D%9B%E7%9A%84%E5%B0%8F%20E/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/evilCallback/README.md&#34;&gt;evilCallback&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/official/evilCallback/src&#34;&gt;文件、源代码&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;来自选手&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;write-up&lt;/th&gt; &#xA;   &lt;th&gt;备注&lt;/th&gt; &#xA;   &lt;th&gt;包含题目&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/mcfx/wp.md&#34;&gt;mcfx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 2 名&lt;/td&gt; &#xA;   &lt;td&gt;除壹...壹字节？和 evilCallback 以外的全部题目&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.tonycrane.cc/p/630bfdd5.html&#34;&gt;TonyCrane 博客&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 80 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、LaTeX 机器人、链上记忆大师-1、旅行照片 2.0、猜数字、Flag 的痕迹、安全的在线测评-1、线路板、Flag 自动机、杯窗鹅影-1、微积分计算小练习、蒙特卡罗轮盘赌、二次元神经网络、光与影、片上系统-1、企鹅拼盘-1/2、火眼金睛的小 E-1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.huggy.moe/posts/2022/14-ustclug-ctf-writeup/&#34;&gt;huggy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 112 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片2.0、LaTeX 机器人、Flag 的痕迹、安全的在线测评、线路板、Flag 自动机、微积分计算小练习、惜字如金、光与影、片上系统、传达不到的文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/lyq1996/wp.md&#34;&gt;lyq1996&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 77 名&lt;/td&gt; &#xA;   &lt;td&gt;片上系统、 猜数字、杯窗鹅影、看不见的彼方、安全的在线测评第1问、企鹅拼盘第1和2问、家目录里的秘密、微积分计算小练习&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/Misaka13514/wp.md&#34;&gt;Misaka13514&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 70 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评-无法 AC 的题目、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影、蒙特卡罗轮盘赌、惜字如金-HS384、光与影、片上系统-引导扇区、量子藏宝图、企鹅拼盘-这么简单我闭眼都可以！&amp;amp;大力当然出奇迹啦~、火眼金睛的小 E-有手就行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/rb_tree/README.md&#34;&gt;std::_Rb_tree&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 25 名&lt;/td&gt; &#xA;   &lt;td&gt;签到题, 猫咪问答喵, 家目录里的秘密, HeiLang, Xcaptcha, 旅行照片 2.0, 猜数字, LaTeX 机器人, Flag 的痕迹, 安全的在线测评, 线路板, Flag 自动机, 微积分计算小练习, 杯窗鹅影, 蒙特卡罗轮盘赌, 惜字如金, 置换魔群, 光与影, 片上系统, 看不见的彼方, 量子藏宝图, 企鹅拼盘, 火眼金睛的小 E&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.kxxt.dev/blog/my-first-ctf-hackergame-2022/&#34;&gt;kxxt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 34 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片2.0(照片分析)、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影、二次元神经网络、光与影、链上记忆大师(记忆练习)、片上系统(引导扇区)、传达不到的文件、看不到的彼方、量子藏宝图、企鹅拼盘(这么简单我闭眼都可以, 大力当然出奇迹啦~)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/Mufanc/README.md&#34;&gt;Mufanc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 58 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、加目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影、蒙特卡洛轮盘赌、光与影、传达不到的文件、看不见的彼方、企鹅拼盘（前两问）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/monad.md&#34;&gt;monad&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 98 名&lt;/td&gt; &#xA;   &lt;td&gt;看不见的彼方（共享内存）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/atxy/README.md&#34;&gt;atxy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;一般路过（&lt;/td&gt; &#xA;   &lt;td&gt;LaTeX 机器人&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://xtexx.ml/blog/2022/10/28/ustc-hackergame2022/&#34;&gt;xtex&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 185 名&lt;/td&gt; &#xA;   &lt;td&gt;签到, 猫咪问答喵1，家目录里的秘密， HeiLang, Xcaptcha, 旅行照片 2.0-1，Latex机器人-1, Flag 的痕迹，线路板， Flag 自动机，微积分计算小练习，杯窗鹅影， 光与影&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/liuly/hackergame.md&#34;&gt;liuly&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 14 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评、微积分计算小练习、杯窗鹅影、蒙特卡罗轮盘赌、不可加密的异世界、光与影、片上系统、传达不到的文件、看不见的彼方、量子藏宝图、《关于 RoboGame 的轮子永远调不准速度这件事》、企鹅拼盘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yezhiyi9670/hackergame2022-writeup&#34;&gt;yezhiyi9670&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 50 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、Xcapthca、HeiLang、家目录里的秘密、旅行照片 2.0（部分）、猫咪问答喵、微积分计算小练习、LaTeX 机器人（部分）、Flag 自动机、Flag 的痕迹、线路板、光与影、猜数字、蒙特卡罗轮盘赌、企鹅拼盘（部分）、你先别急、杯窗鹅影、惜字如金（部分）、片上系统（部分）、安全的在线评测、看不见的彼方&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://baka.studio/p/hackergame-2022-writeup/&#34;&gt;晴猫&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 42 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、LaTeX 机器人、Flag 的痕迹、安全的在线测评-1、线路板、微积分计算小练习、杯窗鹅影-1、二次元神经网络、光与影、链上记忆大师-1、传达不到的文件、企鹅拼盘前两道题&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/LetianYuan/writeup.pdf&#34;&gt;LetianYuan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第54名&lt;/td&gt; &#xA;   &lt;td&gt;Flag的痕迹（rev解）、LaTeX机器人（catcode解）、看不见的彼方（消息队列解）三个非官方预期解以及一些其他题目&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/lxdlam/writeups.md&#34;&gt;lxdlam&lt;/a&gt;, &lt;a href=&#34;https://blog.lxdlam.com/post/6918ebb9/&#34;&gt;Blog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 30 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影、蒙特卡罗轮盘赌、惜字如金 - 1、置换魔群 - {1, 2}、光与影、链上记忆大师 - 1、片上系统 - 1、看不见的彼方、量子藏宝图、企鹅拼盘 - {1, 2}、火眼金睛的小 E - 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/zqm/README.md&#34;&gt;zqm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 90 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、LaTeX 机器人、Flag 的痕迹、 安全的在线测评-1、 线路板、 Flag 自动机、 微积分计算小练习、 杯窗鹅影-1、 蒙特卡罗轮盘赌、 光与影、 片上系统-1、 量子藏宝图、 企鹅拼盘(1/2)、 火眼金睛的小 E-1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://txtxj.top/posts/hackergame2022/&#34;&gt;txtxj&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 79 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0-1、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影、蒙特卡罗轮盘赌、置换魔群-1、光与影、量子藏宝图、企鹅拼盘-1、火眼金睛的小 E-1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/Ciel/README.md&#34;&gt;Ciel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 59 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评、线路板、微积分计算小练习、杯窗鹅影、蒙特卡罗轮盘赌、惜字如金 HS384、光与影、传达不到的文件、量子藏宝图、企鹅拼盘1-2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/CSL/README.md&#34;&gt;CSL&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 23 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、安全的在线测评、Latex 机器人、Flag 的痕迹、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影、蒙特卡罗轮盘赌、惜字如金 (1/2)、置换魔群、光与影、片上系统 (1/2)、传达不到的文件、看不见的彼方、量子藏宝图、企鹅拼盘 (2/3)、火眼金睛的小 E (1/3)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://benpigchu.github.io/pikanote/article/ustc-hackergame-2022-writeup.html&#34;&gt;Ben &#34;Pig&#34; Chu&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 16 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、HeiLang、Xcaptcha、猫咪问答喵、家目录里的秘密、旅行照片 2.0、猜数字、LaTeX 机器人、安全的在线测评 - 无法 AC 的题目、线路板、Flag 自动机、微积分计算小练习、企鹅拼盘、光与影、杯窗鹅影、置换魔群、链上记忆大师 - 记忆练习、蒙特卡罗轮盘赌、看不见的彼方、片上系统、你先别急、Flag 的痕迹、惜字如金 - HS384、量子藏宝图、置换魔群、不可加密的异世界&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/Lasius/Lasius_alienus.md&#34;&gt;Lasius&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 242 名&lt;/td&gt; &#xA;   &lt;td&gt;猜数字&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/silentReason/silentReason_writeup.md&#34;&gt;silentReason&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 11 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、LaTeX 机器人、猜数字、Flag 的痕迹、安全的在线测评、线路板、Flag 自动机、光与影、杯窗鹅影、微积分计算小练习、蒙特卡罗轮盘赌、二次元神经网络、不可加密的异世界、置换魔群、传达不到的文件、看不见的彼方、量子藏宝图、《关于 RoboGame 的轮子永远调不准速度这件事》、企鹅拼盘、火眼金睛的小 E-1/2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/USHIO/README.md&#34;&gt;USHIO&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 91 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评-无法 AC 的题目、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影-flag1、蒙特卡罗轮盘赌、惜字如金-HS384、置换魔群-置换群上的RSA、光与影、片上系统-引导扇区、企鹅拼盘-这么简单我闭眼都可以！、火眼金睛的小 E-有手就行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://yuri.bond/hg2022.html&#34;&gt;Hanako&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 47 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评-无法 AC 的题目、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影、蒙特卡罗轮盘赌、惜字如金-HS384、光与影、片上系统-引导扇区、传达不到的文件、量子藏宝图、企鹅拼盘-这么简单我闭眼都可以！/大力当然出奇迹啦~、火眼金睛的小 E-有手就行/唯快不破&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/fumarase/README.md&#34;&gt;fumarase&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第161名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、猜数字、Flag 的痕迹、线路板、Flag 自动机、微积分计算小练习&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/Tanix/wp.md&#34;&gt;Tanix&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 24 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片2.0、猜数字、LaTex机器人、Flag的痕迹、安全的在线测评、线路板、Flag自动机、微积分计算小练习、杯窗鹅影、蒙特卡洛轮盘赌、置换魔群、光与影、传达不到的文件、企鹅拼盘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/courier/HackerGame-2022-WP.md&#34;&gt;courier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 97 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、LaTeX机器人、Flag 的痕迹、安全的在线测评 - 1、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影、蒙特卡罗轮盘赌、光与影、片上系统 - 1、火眼金睛的小E - 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/mariodon/README.md&#34;&gt;mariodon&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 19 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影、蒙特卡罗轮盘赌、二次元神经网络、惜字如金 - 1、置换魔群 - 1、光与影、链上记忆大师 - 1、片上系统、传达不到的文件、看不见的彼方、量子藏宝图、企鹅拼盘 - 1/2、火眼金睛的小 E - 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/EarthCompass/README.md&#34;&gt;EarthCompass&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 8 名&lt;/td&gt; &#xA;   &lt;td&gt;传达不到的文件、置换魔群、你先别急、看不见的彼方&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/nbnbnb/README.md&#34;&gt;���&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 1 名&lt;/td&gt; &#xA;   &lt;td&gt;壹...壹字节？、evilCallback、安全的在线测评、不可加密的异世界、置换魔群、你先别急、链上记忆大师、看不见的彼方、火眼金睛的小 E&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.pppane.com/archives/hackergame-2022-wp&#34;&gt;Panedioic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 96 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、LaTeX 机器人、旅行照片 2.0、猜数字、Flag 的痕迹、安全的在线测评-1、线路板、Flag 自动机、微积分计算小练习、蒙特卡罗轮盘赌、惜字如金-1、置换魔群-1/2、光与影、片上系统-1、企鹅拼盘-1/2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/cvhc/README.md&#34;&gt;cvhc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 9 名&lt;/td&gt; &#xA;   &lt;td&gt;家目录里的秘密、旅行照片 2.0、Flag 自动机、二次元神经网络、不可加密的异世界、置换魔群（部分）、链上记忆大师（部分）、传达不到的文件、看不见的彼方、量子藏宝图、《关于 RoboGame 的轮子永远调不准速度这件事》、壹...壹字节？、火眼金睛的小 E（部分）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://xyx.moe/019-USTC-Hackergame-2022-writeup.html&#34;&gt;星野 みなと&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 39 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影、蒙特卡罗轮盘赌、二次元神经网络、惜字如金 - HS384、光与影、片上系统 - 引导扇区、企鹅拼盘 - 前两问&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/SuperSodaSea/README.md&#34;&gt;SuperSodaSea&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 4 名&lt;/td&gt; &#xA;   &lt;td&gt;除 惜字如金/2、矩阵之困、链上记忆大师/3、企鹅拼盘/3、小 Z 的靓号钱包、火眼金睛的小 E/3 外全部题目&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/players/GWDx&#34;&gt;GWDx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;总排名第 15 名&lt;/td&gt; &#xA;   &lt;td&gt;签到、猫咪问答喵、家目录里的秘密、HeiLang、Xcaptcha、旅行照片 2.0、猜数字、LaTeX 机器人、Flag 的痕迹、安全的在线测评、线路板、Flag 自动机、微积分计算小练习、杯窗鹅影、蒙特卡罗轮盘赌、二次元神经网络、惜字如金 - 1、不可加密的异世界 - 1/2、置换魔群、光与影、链上记忆大师 - 1/2、片上系统 - 1、传达不到的文件、看不见的彼方、量子藏宝图、《关于 RoboGame 的轮子永远调不准速度这件事》、企鹅拼盘 - 1/2、火眼金睛的小 E - 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;其他资源&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hack.lug.ustc.edu.cn/credits/&#34;&gt;Hackergame 2022 幕后工作人员&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/behind-the-scenes/README.md&#34;&gt;搞笑 Flag &amp;amp; 花絮&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/USTC-Hackergame/hackergame2022-writeups/master/T-shirt/README.md&#34;&gt;纪念衫（暂缺）&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;历年题解&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/USTC-Hackergame/hackergame2021-writeups&#34;&gt;中国科学技术大学第八届信息安全大赛（Hackergame 2021）题解&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/USTC-Hackergame/hackergame2020-writeups&#34;&gt;中国科学技术大学第七届信息安全大赛（Hackergame 2020）题解&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ustclug/hackergame2019-writeups&#34;&gt;中国科学技术大学第六届信息安全大赛（Hackergame 2019）题解&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ustclug/hackergame2018-writeups&#34;&gt;中国科学技术大学第五届信息安全大赛（Hackergame 2018）题解&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://volltin.gitbooks.io/hackergame2017-writeup/&#34;&gt;中国科学技术大学第四届信息安全大赛（Hackergame 2017）题解&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;知乎问题&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/561919414&#34;&gt;知乎：参加中国科学技术大学第九届信息安全大赛（Hackergame 2022）是怎样一种体验？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/492960717&#34;&gt;知乎：参加中国科学技术大学第八届信息安全大赛（Hackergame 2021）是怎样一种体验？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/428140079&#34;&gt;知乎：参加中国科学技术大学第七届信息安全大赛（Hackergame 2020）是怎样一种体验？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/351947330&#34;&gt;知乎：参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/297850153&#34;&gt;知乎：参加中国科学技术大学第五届信息安全大赛（Hackergame 2018）是怎样一种体验？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/67050288&#34;&gt;知乎：参加中科大第四届信息安全大赛是一种怎样的体验？&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;版权声明&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) USTC Hackergame 2022（中国科学技术大学第九届信息安全大赛组委会）. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;知识共享许可协议&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34;&gt;&lt;/a&gt;&lt;br&gt;本作品题解部分与未特别标注的源代码部分采用&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可，特别标注的部分以标注的许可协议进行许可。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>guzzle/promises</title>
    <updated>2022-11-01T01:37:34Z</updated>
    <id>tag:github.com,2022-11-01:/guzzle/promises</id>
    <link href="https://github.com/guzzle/promises" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Promises/A+ library for PHP with synchronous support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Guzzle Promises&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://promisesaplus.com/&#34;&gt;Promises/A+&lt;/a&gt; implementation that handles promise chaining and resolution iteratively, allowing for &#34;infinite&#34; promise chaining while keeping the stack size constant. Read &lt;a href=&#34;https://blog.domenic.me/youre-missing-the-point-of-promises/&#34;&gt;this blog post&lt;/a&gt; for a general introduction to promises.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guzzle/promises/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guzzle/promises/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guzzle/promises/master/#synchronous-wait&#34;&gt;Synchronous wait&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guzzle/promises/master/#cancellation&#34;&gt;Cancellation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guzzle/promises/master/#api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guzzle/promises/master/#promise&#34;&gt;Promise&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guzzle/promises/master/#fulfilledpromise&#34;&gt;FulfilledPromise&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guzzle/promises/master/#rejectedpromise&#34;&gt;RejectedPromise&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guzzle/promises/master/#promise-interop&#34;&gt;Promise interop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guzzle/promises/master/#implementation-notes&#34;&gt;Implementation notes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://promisesaplus.com/&#34;&gt;Promises/A+&lt;/a&gt; implementation.&lt;/li&gt; &#xA; &lt;li&gt;Promise resolution and chaining is handled iteratively, allowing for &#34;infinite&#34; promise chaining.&lt;/li&gt; &#xA; &lt;li&gt;Promises have a synchronous &lt;code&gt;wait&lt;/code&gt; method.&lt;/li&gt; &#xA; &lt;li&gt;Promises can be cancelled.&lt;/li&gt; &#xA; &lt;li&gt;Works with any object that has a &lt;code&gt;then&lt;/code&gt; function.&lt;/li&gt; &#xA; &lt;li&gt;C# style async/await coroutine promises using &lt;code&gt;GuzzleHttp\Promise\Coroutine::of()&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;em&gt;promise&lt;/em&gt; represents the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its &lt;code&gt;then&lt;/code&gt; method, which registers callbacks to receive either a promise&#39;s eventual value or the reason why the promise cannot be fulfilled.&lt;/p&gt; &#xA;&lt;h3&gt;Callbacks&lt;/h3&gt; &#xA;&lt;p&gt;Callbacks are registered with the &lt;code&gt;then&lt;/code&gt; method by providing an optional &lt;code&gt;$onFulfilled&lt;/code&gt; followed by an optional &lt;code&gt;$onRejected&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Promise\Promise;&#xA;&#xA;$promise = new Promise();&#xA;$promise-&amp;gt;then(&#xA;    // $onFulfilled&#xA;    function ($value) {&#xA;        echo &#39;The promise was fulfilled.&#39;;&#xA;    },&#xA;    // $onRejected&#xA;    function ($reason) {&#xA;        echo &#39;The promise was rejected.&#39;;&#xA;    }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Resolving&lt;/em&gt; a promise means that you either fulfill a promise with a &lt;em&gt;value&lt;/em&gt; or reject a promise with a &lt;em&gt;reason&lt;/em&gt;. Resolving a promise triggers callbacks registered with the promise&#39;s &lt;code&gt;then&lt;/code&gt; method. These callbacks are triggered only once and in the order in which they were added.&lt;/p&gt; &#xA;&lt;h3&gt;Resolving a Promise&lt;/h3&gt; &#xA;&lt;p&gt;Promises are fulfilled using the &lt;code&gt;resolve($value)&lt;/code&gt; method. Resolving a promise with any value other than a &lt;code&gt;GuzzleHttp\Promise\RejectedPromise&lt;/code&gt; will trigger all of the onFulfilled callbacks (resolving a promise with a rejected promise will reject the promise and trigger the &lt;code&gt;$onRejected&lt;/code&gt; callbacks).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Promise\Promise;&#xA;&#xA;$promise = new Promise();&#xA;$promise&#xA;    -&amp;gt;then(function ($value) {&#xA;        // Return a value and don&#39;t break the chain&#xA;        return &#34;Hello, &#34; . $value;&#xA;    })&#xA;    // This then is executed after the first then and receives the value&#xA;    // returned from the first then.&#xA;    -&amp;gt;then(function ($value) {&#xA;        echo $value;&#xA;    });&#xA;&#xA;// Resolving the promise triggers the $onFulfilled callbacks and outputs&#xA;// &#34;Hello, reader.&#34;&#xA;$promise-&amp;gt;resolve(&#39;reader.&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Promise Forwarding&lt;/h3&gt; &#xA;&lt;p&gt;Promises can be chained one after the other. Each then in the chain is a new promise. The return value of a promise is what&#39;s forwarded to the next promise in the chain. Returning a promise in a &lt;code&gt;then&lt;/code&gt; callback will cause the subsequent promises in the chain to only be fulfilled when the returned promise has been fulfilled. The next promise in the chain will be invoked with the resolved value of the promise.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Promise\Promise;&#xA;&#xA;$promise = new Promise();&#xA;$nextPromise = new Promise();&#xA;&#xA;$promise&#xA;    -&amp;gt;then(function ($value) use ($nextPromise) {&#xA;        echo $value;&#xA;        return $nextPromise;&#xA;    })&#xA;    -&amp;gt;then(function ($value) {&#xA;        echo $value;&#xA;    });&#xA;&#xA;// Triggers the first callback and outputs &#34;A&#34;&#xA;$promise-&amp;gt;resolve(&#39;A&#39;);&#xA;// Triggers the second callback and outputs &#34;B&#34;&#xA;$nextPromise-&amp;gt;resolve(&#39;B&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Promise Rejection&lt;/h3&gt; &#xA;&lt;p&gt;When a promise is rejected, the &lt;code&gt;$onRejected&lt;/code&gt; callbacks are invoked with the rejection reason.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Promise\Promise;&#xA;&#xA;$promise = new Promise();&#xA;$promise-&amp;gt;then(null, function ($reason) {&#xA;    echo $reason;&#xA;});&#xA;&#xA;$promise-&amp;gt;reject(&#39;Error!&#39;);&#xA;// Outputs &#34;Error!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rejection Forwarding&lt;/h3&gt; &#xA;&lt;p&gt;If an exception is thrown in an &lt;code&gt;$onRejected&lt;/code&gt; callback, subsequent &lt;code&gt;$onRejected&lt;/code&gt; callbacks are invoked with the thrown exception as the reason.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Promise\Promise;&#xA;&#xA;$promise = new Promise();&#xA;$promise-&amp;gt;then(null, function ($reason) {&#xA;    throw new Exception($reason);&#xA;})-&amp;gt;then(null, function ($reason) {&#xA;    assert($reason-&amp;gt;getMessage() === &#39;Error!&#39;);&#xA;});&#xA;&#xA;$promise-&amp;gt;reject(&#39;Error!&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also forward a rejection down the promise chain by returning a &lt;code&gt;GuzzleHttp\Promise\RejectedPromise&lt;/code&gt; in either an &lt;code&gt;$onFulfilled&lt;/code&gt; or &lt;code&gt;$onRejected&lt;/code&gt; callback.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Promise\Promise;&#xA;use GuzzleHttp\Promise\RejectedPromise;&#xA;&#xA;$promise = new Promise();&#xA;$promise-&amp;gt;then(null, function ($reason) {&#xA;    return new RejectedPromise($reason);&#xA;})-&amp;gt;then(null, function ($reason) {&#xA;    assert($reason === &#39;Error!&#39;);&#xA;});&#xA;&#xA;$promise-&amp;gt;reject(&#39;Error!&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an exception is not thrown in a &lt;code&gt;$onRejected&lt;/code&gt; callback and the callback does not return a rejected promise, downstream &lt;code&gt;$onFulfilled&lt;/code&gt; callbacks are invoked using the value returned from the &lt;code&gt;$onRejected&lt;/code&gt; callback.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Promise\Promise;&#xA;&#xA;$promise = new Promise();&#xA;$promise&#xA;    -&amp;gt;then(null, function ($reason) {&#xA;        return &#34;It&#39;s ok&#34;;&#xA;    })&#xA;    -&amp;gt;then(function ($value) {&#xA;        assert($value === &#34;It&#39;s ok&#34;);&#xA;    });&#xA;&#xA;$promise-&amp;gt;reject(&#39;Error!&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Synchronous Wait&lt;/h2&gt; &#xA;&lt;p&gt;You can synchronously force promises to complete using a promise&#39;s &lt;code&gt;wait&lt;/code&gt; method. When creating a promise, you can provide a wait function that is used to synchronously force a promise to complete. When a wait function is invoked it is expected to deliver a value to the promise or reject the promise. If the wait function does not deliver a value, then an exception is thrown. The wait function provided to a promise constructor is invoked when the &lt;code&gt;wait&lt;/code&gt; function of the promise is called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$promise = new Promise(function () use (&amp;amp;$promise) {&#xA;    $promise-&amp;gt;resolve(&#39;foo&#39;);&#xA;});&#xA;&#xA;// Calling wait will return the value of the promise.&#xA;echo $promise-&amp;gt;wait(); // outputs &#34;foo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an exception is encountered while invoking the wait function of a promise, the promise is rejected with the exception and the exception is thrown.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$promise = new Promise(function () use (&amp;amp;$promise) {&#xA;    throw new Exception(&#39;foo&#39;);&#xA;});&#xA;&#xA;$promise-&amp;gt;wait(); // throws the exception.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;wait&lt;/code&gt; on a promise that has been fulfilled will not trigger the wait function. It will simply return the previously resolved value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$promise = new Promise(function () { die(&#39;this is not called!&#39;); });&#xA;$promise-&amp;gt;resolve(&#39;foo&#39;);&#xA;echo $promise-&amp;gt;wait(); // outputs &#34;foo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;wait&lt;/code&gt; on a promise that has been rejected will throw an exception. If the rejection reason is an instance of &lt;code&gt;\Exception&lt;/code&gt; the reason is thrown. Otherwise, a &lt;code&gt;GuzzleHttp\Promise\RejectionException&lt;/code&gt; is thrown and the reason can be obtained by calling the &lt;code&gt;getReason&lt;/code&gt; method of the exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$promise = new Promise();&#xA;$promise-&amp;gt;reject(&#39;foo&#39;);&#xA;$promise-&amp;gt;wait();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;PHP Fatal error: Uncaught exception &#39;GuzzleHttp\Promise\RejectionException&#39; with message &#39;The promise was rejected with value: foo&#39;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Unwrapping a Promise&lt;/h3&gt; &#xA;&lt;p&gt;When synchronously waiting on a promise, you are joining the state of the promise into the current state of execution (i.e., return the value of the promise if it was fulfilled or throw an exception if it was rejected). This is called &#34;unwrapping&#34; the promise. Waiting on a promise will by default unwrap the promise state.&lt;/p&gt; &#xA;&lt;p&gt;You can force a promise to resolve and &lt;em&gt;not&lt;/em&gt; unwrap the state of the promise by passing &lt;code&gt;false&lt;/code&gt; to the first argument of the &lt;code&gt;wait&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$promise = new Promise();&#xA;$promise-&amp;gt;reject(&#39;foo&#39;);&#xA;// This will not throw an exception. It simply ensures the promise has&#xA;// been resolved.&#xA;$promise-&amp;gt;wait(false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When unwrapping a promise, the resolved value of the promise will be waited upon until the unwrapped value is not a promise. This means that if you resolve promise A with a promise B and unwrap promise A, the value returned by the wait function will be the value delivered to promise B.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: when you do not unwrap the promise, no value is returned.&lt;/p&gt; &#xA;&lt;h2&gt;Cancellation&lt;/h2&gt; &#xA;&lt;p&gt;You can cancel a promise that has not yet been fulfilled using the &lt;code&gt;cancel()&lt;/code&gt; method of a promise. When creating a promise you can provide an optional cancel function that when invoked cancels the action of computing a resolution of the promise.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;Promise&lt;/h3&gt; &#xA;&lt;p&gt;When creating a promise object, you can provide an optional &lt;code&gt;$waitFn&lt;/code&gt; and &lt;code&gt;$cancelFn&lt;/code&gt;. &lt;code&gt;$waitFn&lt;/code&gt; is a function that is invoked with no arguments and is expected to resolve the promise. &lt;code&gt;$cancelFn&lt;/code&gt; is a function with no arguments that is expected to cancel the computation of a promise. It is invoked when the &lt;code&gt;cancel()&lt;/code&gt; method of a promise is called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Promise\Promise;&#xA;&#xA;$promise = new Promise(&#xA;    function () use (&amp;amp;$promise) {&#xA;        $promise-&amp;gt;resolve(&#39;waited&#39;);&#xA;    },&#xA;    function () {&#xA;        // do something that will cancel the promise computation (e.g., close&#xA;        // a socket, cancel a database query, etc...)&#xA;    }&#xA;);&#xA;&#xA;assert(&#39;waited&#39; === $promise-&amp;gt;wait());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A promise has the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;then(callable $onFulfilled, callable $onRejected) : PromiseInterface&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Appends fulfillment and rejection handlers to the promise, and returns a new promise resolving to the return value of the called handler.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;otherwise(callable $onRejected) : PromiseInterface&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Appends a rejection handler callback to the promise, and returns a new promise resolving to the return value of the callback if it is called, or to its original fulfillment value if the promise is instead fulfilled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;wait($unwrap = true) : mixed&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Synchronously waits on the promise to complete.&lt;/p&gt; &lt;p&gt;&lt;code&gt;$unwrap&lt;/code&gt; controls whether or not the value of the promise is returned for a fulfilled promise or if an exception is thrown if the promise is rejected. This is set to &lt;code&gt;true&lt;/code&gt; by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cancel()&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Attempts to cancel the promise if possible. The promise being cancelled and the parent most ancestor that has not yet been resolved will also be cancelled. Any promises waiting on the cancelled promise to resolve will also be cancelled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;getState() : string&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Returns the state of the promise. One of &lt;code&gt;pending&lt;/code&gt;, &lt;code&gt;fulfilled&lt;/code&gt;, or &lt;code&gt;rejected&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;resolve($value)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Fulfills the promise with the given &lt;code&gt;$value&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reject($reason)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Rejects the promise with the given &lt;code&gt;$reason&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;FulfilledPromise&lt;/h3&gt; &#xA;&lt;p&gt;A fulfilled promise can be created to represent a promise that has been fulfilled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Promise\FulfilledPromise;&#xA;&#xA;$promise = new FulfilledPromise(&#39;value&#39;);&#xA;&#xA;// Fulfilled callbacks are immediately invoked.&#xA;$promise-&amp;gt;then(function ($value) {&#xA;    echo $value;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RejectedPromise&lt;/h3&gt; &#xA;&lt;p&gt;A rejected promise can be created to represent a promise that has been rejected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Promise\RejectedPromise;&#xA;&#xA;$promise = new RejectedPromise(&#39;Error&#39;);&#xA;&#xA;// Rejected callbacks are immediately invoked.&#xA;$promise-&amp;gt;then(null, function ($reason) {&#xA;    echo $reason;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Promise Interoperability&lt;/h2&gt; &#xA;&lt;p&gt;This library works with foreign promises that have a &lt;code&gt;then&lt;/code&gt; method. This means you can use Guzzle promises with &lt;a href=&#34;https://github.com/reactphp/promise&#34;&gt;React promises&lt;/a&gt; for example. When a foreign promise is returned inside of a then method callback, promise resolution will occur recursively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Create a React promise&#xA;$deferred = new React\Promise\Deferred();&#xA;$reactPromise = $deferred-&amp;gt;promise();&#xA;&#xA;// Create a Guzzle promise that is fulfilled with a React promise.&#xA;$guzzlePromise = new GuzzleHttp\Promise\Promise();&#xA;$guzzlePromise-&amp;gt;then(function ($value) use ($reactPromise) {&#xA;    // Do something something with the value...&#xA;    // Return the React promise&#xA;    return $reactPromise;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that wait and cancel chaining is no longer possible when forwarding a foreign promise. You will need to wrap a third-party promise with a Guzzle promise in order to utilize wait and cancel functions with foreign promises.&lt;/p&gt; &#xA;&lt;h3&gt;Event Loop Integration&lt;/h3&gt; &#xA;&lt;p&gt;In order to keep the stack size constant, Guzzle promises are resolved asynchronously using a task queue. When waiting on promises synchronously, the task queue will be automatically run to ensure that the blocking promise and any forwarded promises are resolved. When using promises asynchronously in an event loop, you will need to run the task queue on each tick of the loop. If you do not run the task queue, then promises will not be resolved.&lt;/p&gt; &#xA;&lt;p&gt;You can run the task queue using the &lt;code&gt;run()&lt;/code&gt; method of the global task queue instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Get the global task queue&#xA;$queue = GuzzleHttp\Promise\Utils::queue();&#xA;$queue-&amp;gt;run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, you could use Guzzle promises with React using a periodic timer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$loop = React\EventLoop\Factory::create();&#xA;$loop-&amp;gt;addPeriodicTimer(0, [$queue, &#39;run&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO&lt;/em&gt;: Perhaps adding a &lt;code&gt;futureTick()&lt;/code&gt; on each tick would be faster?&lt;/p&gt; &#xA;&lt;h2&gt;Implementation Notes&lt;/h2&gt; &#xA;&lt;h3&gt;Promise Resolution and Chaining is Handled Iteratively&lt;/h3&gt; &#xA;&lt;p&gt;By shuffling pending handlers from one owner to another, promises are resolved iteratively, allowing for &#34;infinite&#34; then chaining.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;require &#39;vendor/autoload.php&#39;;&#xA;&#xA;use GuzzleHttp\Promise\Promise;&#xA;&#xA;$parent = new Promise();&#xA;$p = $parent;&#xA;&#xA;for ($i = 0; $i &amp;lt; 1000; $i++) {&#xA;    $p = $p-&amp;gt;then(function ($v) {&#xA;        // The stack size remains constant (a good thing)&#xA;        echo xdebug_get_stack_depth() . &#39;, &#39;;&#xA;        return $v + 1;&#xA;    });&#xA;}&#xA;&#xA;$parent-&amp;gt;resolve(0);&#xA;var_dump($p-&amp;gt;wait()); // int(1000)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a promise is fulfilled or rejected with a non-promise value, the promise then takes ownership of the handlers of each child promise and delivers values down the chain without using recursion.&lt;/p&gt; &#xA;&lt;p&gt;When a promise is resolved with another promise, the original promise transfers all of its pending handlers to the new promise. When the new promise is eventually resolved, all of the pending handlers are delivered the forwarded value.&lt;/p&gt; &#xA;&lt;h3&gt;A Promise is the Deferred&lt;/h3&gt; &#xA;&lt;p&gt;Some promise libraries implement promises using a deferred object to represent a computation and a promise object to represent the delivery of the result of the computation. This is a nice separation of computation and delivery because consumers of the promise cannot modify the value that will be eventually delivered.&lt;/p&gt; &#xA;&lt;p&gt;One side effect of being able to implement promise resolution and chaining iteratively is that you need to be able for one promise to reach into the state of another promise to shuffle around ownership of handlers. In order to achieve this without making the handlers of a promise publicly mutable, a promise is also the deferred value, allowing promises of the same parent class to reach into and modify the private properties of promises of the same type. While this does allow consumers of the value to modify the resolution or rejection of the deferred, it is a small price to pay for keeping the stack size constant.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$promise = new Promise();&#xA;$promise-&amp;gt;then(function ($value) { echo $value; });&#xA;// The promise is the deferred value, so you can deliver a value to it.&#xA;$promise-&amp;gt;resolve(&#39;foo&#39;);&#xA;// prints &#34;foo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading from Function API&lt;/h2&gt; &#xA;&lt;p&gt;A static API was first introduced in 1.4.0, in order to mitigate problems with functions conflicting between global and local copies of the package. The function API will be removed in 2.0.0. A migration table has been provided here for your convenience:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Original Function&lt;/th&gt; &#xA;   &lt;th&gt;Replacement Method&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Utils::queue&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;task&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Utils::task&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;promise_for&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Create::promiseFor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rejection_for&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Create::rejectionFor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;exception_for&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Create::exceptionFor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;iter_for&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Create::iterFor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;inspect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Utils::inspect&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;inspect_all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Utils::inspectAll&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;unwrap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Utils::unwrap&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Utils::all&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;some&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Utils::some&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;any&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Utils::any&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;settle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Utils::settle&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;each&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Each::of&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;each_limit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Each::ofLimit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;each_limit_all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Each::ofLimitAll&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!is_fulfilled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Is::pending&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;is_fulfilled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Is::fulfilled&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;is_rejected&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Is::rejected&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;is_settled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Is::settled&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coroutine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Coroutine::of&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a security vulnerability within this package, please send an email to &lt;a href=&#34;mailto:security@tidelift.com&#34;&gt;security@tidelift.com&lt;/a&gt;. All security vulnerabilities will be promptly addressed. Please do not disclose security-related issues publicly until a fix has been announced. Please see &lt;a href=&#34;https://github.com/guzzle/promises/security/policy&#34;&gt;Security Policy&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Guzzle is made available under the MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/guzzle/promises/master/LICENSE&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;For Enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of Guzzle and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/packagist-guzzlehttp-promises?utm_source=packagist-guzzlehttp-promises&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Demotivacija/smanjivac_plate</title>
    <updated>2022-11-01T01:37:34Z</updated>
    <id>tag:github.com,2022-11-01:/Demotivacija/smanjivac_plate</id>
    <link href="https://github.com/Demotivacija/smanjivac_plate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Program namenjen smanjenju plate zaposlenih&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/116382051?s=200&amp;amp;v=4&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DEMOTIVACIJA SOFTWARES INC. GMBH. DOO.&lt;/h1&gt; &#xA;&lt;h1&gt;Smanjivač plate&lt;/h1&gt; &#xA;&lt;p&gt;Program namenjen smanjenju plate zaposlenih&lt;/p&gt; &#xA;&lt;h1&gt;Da se ne smarate ovde sam vam pobrojao najvažnije&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open sors, može da se kontributuje al ako gazda Goran potvrdi&lt;/li&gt; &#xA; &lt;li&gt;Nemate nikakva prava, mi imamo sva prava&lt;/li&gt; &#xA; &lt;li&gt;Aj uzdravlje 🍻🍻&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instalacija&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;composer install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Testovi&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./vendor/bin/phpunit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Kontribucija&lt;/h3&gt; &#xA;&lt;p&gt;Ako hoćeš da kontributuješ, bez testova možeš samo da sediš i plačeš. Smanjivanje plata je umetnost kojom vladaju samo najiskusniji hasleri i stoga očekujemo samo izvrsnost u kontribuciji&lt;/p&gt;</summary>
  </entry>
</feed>