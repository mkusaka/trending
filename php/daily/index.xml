<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-31T01:45:15Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>worksome/request-factories</title>
    <updated>2023-01-31T01:45:15Z</updated>
    <id>tag:github.com,2023-01-31:/worksome/request-factories</id>
    <link href="https://github.com/worksome/request-factories" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Test requests in Laravel without all the boilerplate.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Request Factories&lt;/h1&gt; &#xA;&lt;p&gt;Test requests in Laravel without all the boilerplate.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/worksome/request-factories/actions/workflows/run-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/worksome/request-factories/actions/workflows/run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/worksome/request-factories/actions/workflows/phpstan.yml&#34;&gt;&lt;img src=&#34;https://github.com/worksome/request-factories/actions/workflows/phpstan.yml/badge.svg?sanitize=true&#34; alt=&#34;PHPStan&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸ’¡ Psst. Although our examples use Pest PHP, this works just as well in PHPUnit.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Take a look at the following test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;it(&#39;can sign up a user with an international phone number&#39;, function () {&#xA;    $this-&amp;gt;put(&#39;/users&#39;, [&#xA;        &#39;phone&#39; =&amp;gt; &#39;+375 154 767 1088&#39;,&#xA;        &#39;email&#39; =&amp;gt; &#39;foo@bar.com&#39;, ðŸ™„&#xA;        &#39;name&#39; =&amp;gt; &#39;Luke Downing&#39;, ðŸ˜›&#xA;        &#39;company&#39; =&amp;gt; &#39;Worksome&#39;, ðŸ˜’&#xA;        &#39;bio&#39; =&amp;gt; &#39;Blah blah blah&#39;, ðŸ˜«&#xA;        &#39;profile_picture&#39; =&amp;gt; UploadedFile::fake()-&amp;gt;image(&#39;luke.png&#39;, 200, 200), ðŸ˜­&#xA;        &#39;accepts_terms_and_conditions&#39; =&amp;gt; true, ðŸ¤¬&#xA;    ]);&#xA;    &#xA;    expect(User::latest()-&amp;gt;first()-&amp;gt;phone)-&amp;gt;toBe(&#39;+375 154 767 1088&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Oof. See, all we wanted to test was the phone number, but because our route&#39;s FormRequest has validation rules, we have to send all of these additional fields at the same time. This approach has a few downsides:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;It muddies the test.&lt;/em&gt; Tests are supposed to be terse and easy to read. This is anything but.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;It makes writing tests annoying.&lt;/em&gt; You probably have more than one test for each route. Every test you write requires all of these fields over and over again.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;It requires knowledge of the FormRequest.&lt;/em&gt; You&#39;d need to understand what each field in this form does before being able to write a passing test. If you don&#39;t, you&#39;re likely going to be caught in a trial-and-error loop, or worse, a false positive, whilst creating the test.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We think this experience can be vastly improved. Take a look:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;it(&#39;can sign up a user with an international phone number&#39;, function () {&#xA;    SignupRequest::fake();&#xA;&#xA;    $this-&amp;gt;put(&#39;/users&#39;, [&#39;phone&#39; =&amp;gt; &#39;+375 154 767 1088&#39;]);&#xA;&#xA;    expect(User::latest()-&amp;gt;first()-&amp;gt;phone)-&amp;gt;toBe(&#39;+375 154 767 1088&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Soooooo much nicer. And all thanks to Request Factories. Let&#39;s dive in...&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package as a developer dependency via Composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require --dev worksome/request-factories &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, let&#39;s create a new &lt;code&gt;RequestFactory&lt;/code&gt;. A &lt;code&gt;RequestFactory&lt;/code&gt; usually complements a &lt;code&gt;FormRequest&lt;/code&gt; in your application (&lt;a href=&#34;https://raw.githubusercontent.com/worksome/request-factories/main/#using-factories-without-form-requests&#34;&gt;request factories work with standard requests too!&lt;/a&gt;). You can create a &lt;code&gt;RequestFactory&lt;/code&gt; using the &lt;code&gt;make:request-factory&lt;/code&gt; Artisan command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan make:request-factory &#34;App\Http\Requests\SignupRequest&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we&#39;ve passed the &lt;code&gt;SignupRequest&lt;/code&gt; FQCN as an argument. This will create a new request factory at &lt;code&gt;tests/RequestFactories/SignupRequestFactory.php&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also pass your desired request factory name as an argument instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan make:request-factory SignupRequestFactory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whilst you&#39;re free to name your request factories as you please, we recommend two defaults for a seamless experience:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Place them in &lt;code&gt;tests/RequestFactories&lt;/code&gt;. The Artisan command will do this for you.&lt;/li&gt; &#xA; &lt;li&gt;Use a &lt;code&gt;Factory&lt;/code&gt; suffix. So &lt;code&gt;SignupRequest&lt;/code&gt; becomes &lt;code&gt;SignupRequestFactory&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Factory basics&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s take a look at our newly created &lt;code&gt;SignupRequestFactory&lt;/code&gt;. You&#39;ll see something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace Tests\RequestFactories;&#xA;&#xA;use Worksome\RequestFactories;&#xA;&#xA;class SignupRequestFactory extends RequestFactory&#xA;{&#xA;    public function definition(): array&#xA;    {&#xA;        return [&#xA;            // &#39;email&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;email,&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;ve used Laravel&#39;s &lt;a href=&#34;https://laravel.com/docs/database-testing#defining-model-factories&#34;&gt;model factories&lt;/a&gt; before, this will look pretty familiar. That&#39;s because the basic concept is the same: a model factory is designed to generate data for eloquent models, a request factory is designed to generate data for form requests.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;definition&lt;/code&gt; method should return an array of valid data that can be used when submitting your form. Let&#39;s fill it out for our example &lt;code&gt;SignupRequestFactory&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace Tests\RequestFactories;&#xA;&#xA;use Worksome\RequestFactories;&#xA;&#xA;class SignupRequestFactory extends RequestFactory&#xA;{&#xA;    public function definition(): array&#xA;    {&#xA;        return [&#xA;            &#39;phone&#39; =&amp;gt; &#39;01234567890&#39;,&#xA;            &#39;email&#39; =&amp;gt; &#39;foo@bar.com&#39;,&#xA;            &#39;name&#39; =&amp;gt; &#39;Luke Downing&#39;,&#xA;            &#39;company&#39; =&amp;gt; &#39;Worksome&#39;,&#xA;            &#39;bio&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;words(300, true),&#xA;            &#39;accepts_terms_and_conditions&#39; =&amp;gt; true,&#xA;        ];&#xA;    }&#xA;    &#xA;    public function files(): array&#xA;    {&#xA;        return [&#xA;            &#39;profile_picture&#39; =&amp;gt; $this-&amp;gt;file()-&amp;gt;image(&#39;luke.png&#39;, 200, 200),&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we have access to a &lt;code&gt;faker&lt;/code&gt; property for easily generating fake content, such as a paragraph for our bio, along with a &lt;code&gt;files&lt;/code&gt; method we can declare to segregate files from other request data.&lt;/p&gt; &#xA;&lt;h3&gt;Usage in tests&lt;/h3&gt; &#xA;&lt;p&gt;So how do we use this factory in our tests? There are a few options, depending on your preferred style.&lt;/p&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;create&lt;/code&gt; on the factory&lt;/h4&gt; &#xA;&lt;p&gt;This method is most similar to Laravel&#39;s model factories. The &lt;code&gt;create&lt;/code&gt; method returns an array, which you can then pass as data to &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt; or any other request testing method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;it(&#39;can sign up a user with an international phone number&#39;, function () {&#xA;    $data = SignupRequest::factory()-&amp;gt;create([&#39;phone&#39; =&amp;gt; &#39;+44 1234 567890&#39;]);&#xA;    &#xA;    $this-&amp;gt;put(&#39;/users&#39;, $data)-&amp;gt;assertValid();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;fake&lt;/code&gt; on the request factory&lt;/h4&gt; &#xA;&lt;p&gt;Seeing as you only normally make a single request per test, we support registering your factory globally with &lt;code&gt;fake&lt;/code&gt;. If you&#39;re using this approach, make sure that it&#39;s the &lt;em&gt;last method you call on the factory&lt;/em&gt;, and that you call it before making a request to the relevant endpoint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;it(&#39;can sign up a user with an international phone number&#39;, function () {&#xA;    SignupRequestFactory::new()-&amp;gt;fake();&#xA;    &#xA;    $this-&amp;gt;put(&#39;/users&#39;)-&amp;gt;assertValid();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;fake&lt;/code&gt; on the form request&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;ve used Laravel model factories, you&#39;ll likely be used to calling &lt;code&gt;::factory()&lt;/code&gt; on eloquent models to get a new factory instance. Request factories have similar functionality available. You don&#39;t need to do anything to enable this; we automatically register the &lt;code&gt;::fake()&lt;/code&gt; and &lt;code&gt;::factory()&lt;/code&gt; method on all FormRequests via macros!&lt;/p&gt; &#xA;&lt;p&gt;You can use these methods in your tests instead of instantiating the request factory directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;it(&#39;can sign up a user with an international phone number&#39;, function () {&#xA;    // Using the factory method...&#xA;    SignupRequest::factory()-&amp;gt;fake();&#xA;    &#xA;    // ...or using the fake method&#xA;    SignupRequest::fake();&#xA;    &#xA;    $this-&amp;gt;put(&#39;/users&#39;)-&amp;gt;assertValid();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;fakeRequest&lt;/code&gt; in Pest PHP&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using Pest, we provide a higher order method that you can chain onto your tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// You can provide the form request FQCN...&#xA;it(&#39;can sign up a user with an international phone number&#39;, function () {&#xA;    $this-&amp;gt;put(&#39;/users&#39;)-&amp;gt;assertValid();&#xA;})-&amp;gt;fakeRequest(SignupRequest::class);&#xA;&#xA;// Or the request factory FQCN...&#xA;it(&#39;can sign up a user with an international phone number&#39;, function () {&#xA;    $this-&amp;gt;put(&#39;/users&#39;)-&amp;gt;assertValid();&#xA;})-&amp;gt;fakeRequest(SignupRequestFactory::class);&#xA;&#xA;// Or even a closure that returns a request factory...&#xA;it(&#39;can sign up a user with an international phone number&#39;, function () {&#xA;    $this-&amp;gt;put(&#39;/users&#39;)-&amp;gt;assertValid();&#xA;})-&amp;gt;fakeRequest(fn () =&amp;gt; SignupRequest::factory());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can even chain factory methods onto the end of the &lt;code&gt;fakeRequest&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;it(&#39;can sign up a user with an international phone number&#39;, function () {&#xA;    $this-&amp;gt;put(&#39;/users&#39;)-&amp;gt;assertValid();&#xA;})&#xA;    -&amp;gt;fakeRequest(SignupRequest::class)&#xA;    -&amp;gt;state([&#39;name&#39; =&amp;gt; &#39;Jane Bloggs&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Overriding request factory data&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s important to note the order of importance request factories take when injecting data into your request.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Any data passed to &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt; or similar methods will always take precedence.&lt;/li&gt; &#xA; &lt;li&gt;Data defined using &lt;code&gt;state&lt;/code&gt;, or methods called on a factory that alter state will be next in line.&lt;/li&gt; &#xA; &lt;li&gt;Data defined in the factory &lt;code&gt;definition&lt;/code&gt; and &lt;code&gt;files&lt;/code&gt; methods come last, only filling out missing properties from the request.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Let&#39;s take a look at an example to illustrate this order of importance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;it(&#39;can sign up a user with an international phone number&#39;, function () {&#xA;    SignupRequest::factory()-&amp;gt;state([&#39;name&#39; =&amp;gt; &#39;Oliver Nybroe&#39;, &#39;email&#39; =&amp;gt; &#39;oliver@worksome.com&#39;])-&amp;gt;fake();&#xA;    &#xA;    $this-&amp;gt;put(&#39;/users&#39;, [&#39;email&#39; =&amp;gt; &#39;luke@worksome.com&#39;])-&amp;gt;assertValid();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default email defined in &lt;code&gt;SignupRequestFactory&lt;/code&gt; is &lt;code&gt;foo@bar.com&lt;/code&gt;. The default name is &lt;code&gt;Luke Downing&lt;/code&gt;. Because we override the &lt;code&gt;name&lt;/code&gt; property using the &lt;code&gt;state&lt;/code&gt; method before calling &lt;code&gt;fake&lt;/code&gt;, the name used in the form request will actually be &lt;code&gt;Oliver Nybroe&lt;/code&gt;, not &lt;code&gt;Luke Downing&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, because we pass &lt;code&gt;luke@worksome.com&lt;/code&gt; as data to the &lt;code&gt;put&lt;/code&gt; method, that will take priority over &lt;em&gt;all other defined data&lt;/em&gt;, both &lt;code&gt;foo@bar.com&lt;/code&gt; and &lt;code&gt;oliver@worksome.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The power of factories&lt;/h3&gt; &#xA;&lt;p&gt;Factories are really cool, because they allow us to create a domain-specific-language for our feature tests. Because factories are classes, we can add declarative methods that serve as state transformers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// In our factory...&#xA;class SignupRequestFactory extends RequestFactory&#xA;{&#xA;    // After the definition...&#xA;    public function withOversizedProfilePicture(): static&#xA;    {&#xA;        return $this-&amp;gt;state([&#39;profile_picture&#39; =&amp;gt; $this-&amp;gt;file()-&amp;gt;image(&#39;profile.png&#39;, 2001, 2001)])&#xA;    }&#xA;}&#xA;&#xA;// In our test...&#xA;it(&#39;does not allow profile pictures larger than 2000 pixels&#39;, function () {&#xA;    SignupRequest::factory()-&amp;gt;withOversizedProfilePicture()-&amp;gt;fake();&#xA;    &#xA;    $this-&amp;gt;put(&#39;/users&#39;)-&amp;gt;assertInvalid([&#39;profile_picture&#39; =&amp;gt; &#39;size&#39;]);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use dot-notation in the &lt;code&gt;state&lt;/code&gt; method to alter deeply nested keys in your request data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;it(&#39;requires a postcode with the first line of an address&#39;, function () {&#xA;    SignupRequest::factory()-&amp;gt;state([&#39;address.line_one&#39; =&amp;gt; &#39;1 Test Street&#39;])-&amp;gt;fake();&#xA;    &#xA;    $this-&amp;gt;put(&#39;/users&#39;)-&amp;gt;assertInvalid([&#39;address.postcode&#39; =&amp;gt; &#39;required&#39;]);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;state&lt;/code&gt; method is your friend for any data you want to add or change on your factory. What about if you&#39;d like to omit a property from the request? Try the &lt;code&gt;without&lt;/code&gt; method!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;it(&#39;requires an email address&#39;, function () {&#xA;    SignupRequest::factory()-&amp;gt;without(&#39;email&#39;)-&amp;gt;fake();&#xA;    &#xA;    $this-&amp;gt;put(&#39;/users&#39;)-&amp;gt;assertInvalid([&#39;email&#39; =&amp;gt; &#39;required&#39;]);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸ’¡ You can use dot syntax in the &lt;code&gt;without&lt;/code&gt; method to unset deeply nested keys&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can also pass an array to &lt;code&gt;without&lt;/code&gt; to unset multiple properties at once.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes, you&#39;ll have a property that you want to be based on the value of other properties. In that case, you can provide a closure as the property value, which receives an array of all other parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class SignupRequestFactory extends RequestFactory&#xA;{&#xA;    public function definition(): array&#xA;    {&#xA;        return [&#xA;            &#39;name&#39; =&amp;gt; &#39;Luke Downing&#39;,&#xA;            &#39;company&#39; =&amp;gt; &#39;Worksome&#39;,&#xA;            &#39;email&#39; =&amp;gt; fn ($properties) =&amp;gt; Str::of($properties[&#39;name&#39;])&#xA;                -&amp;gt;replace(&#39; &#39;, &#39;.&#39;)&#xA;                -&amp;gt;append(&#34;@{$properties[&#39;company&#39;]}.com&#34;)&#xA;                -&amp;gt;lower()&#xA;                -&amp;gt;__toString(), // luke.downing@worksome.com&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Occasionally, you&#39;ll notice that multiple requests across your application share a similar subset of fields. For example, a signup form and a payment form might both contain an address array. Rather than duplicating these fields in your factory, you can nest factories inside factories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class SignupRequestFactory extends RequestFactory&#xA;{&#xA;    public function definition(): array&#xA;    {&#xA;        return [&#xA;            &#39;name&#39; =&amp;gt; &#39;Luke Downing&#39;,&#xA;            &#39;company&#39; =&amp;gt; &#39;Worksome&#39;,&#xA;            &#39;address&#39; =&amp;gt; AddressRequestFactory::new(),&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, when the &lt;code&gt;SignupRequestFactory&lt;/code&gt; is created, it will resolve the &lt;code&gt;AddressRequestFactory&lt;/code&gt; for you and fill the &lt;code&gt;address&lt;/code&gt; property with all fields contained in the &lt;code&gt;AddressRequestFactory&lt;/code&gt; definition. Pretty cool hey?&lt;/p&gt; &#xA;&lt;p&gt;Request factories work hand in hand with model factories too. Imagine that you want to pass a &lt;code&gt;User&lt;/code&gt; ID to your form request, but you need to create the user in the database in order to do so. It&#39;s as simple as instantiating the &lt;code&gt;UserFactory&lt;/code&gt; in your request factory definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class StoreMovieController extends RequestFactory&#xA;{&#xA;    public function definition(): array&#xA;    {&#xA;        return [&#xA;            &#39;name&#39; =&amp;gt; &#39;My Cool Movie&#39;&#xA;            &#39;owner_id&#39; =&amp;gt; User::factory(),&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because the &lt;code&gt;UserFactory&lt;/code&gt; isn&#39;t created until compile time, we avoid any unexpected models being persisted to your test database when you manually override the &lt;code&gt;owner_id&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;h3&gt;Using factories without form requests&lt;/h3&gt; &#xA;&lt;p&gt;Not every controller in your app requires a backing form request. Thankfully, we also support faking a generic request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;it(&#39;lets a guest sign up to the newsletter&#39;, function () {&#xA;    NewsletterSignupFactory::new()-&amp;gt;fake();&#xA;    &#xA;    post(&#39;/newsletter&#39;, [&#39;email&#39; =&amp;gt; &#39;foo@bar.com&#39;])-&amp;gt;assertRedirect(&#39;/thanks&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Solving common issues&lt;/h2&gt; &#xA;&lt;h3&gt;I&#39;m getting a &lt;code&gt;CouldNotLocateRequestFactoryException&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When using the &lt;code&gt;::fake()&lt;/code&gt; or &lt;code&gt;::factory()&lt;/code&gt; methods on a &lt;code&gt;FormRequest&lt;/code&gt;, we attempt to auto-locate the relevant request factory for you. If your directory structure doesn&#39;t match for whatever reason, this exception will be thrown.&lt;/p&gt; &#xA;&lt;p&gt;It can easily be resolved by adding a &lt;code&gt;public static $factory&lt;/code&gt; property to your form request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class SignupRequest extends FormRequest&#xA;{&#xA;    public static $factory = SignupRequestFactory::class; &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;I call multiple routes in a single test and want to fake both&lt;/h3&gt; &#xA;&lt;p&gt;No sweat. Just place a call to &lt;code&gt;fake&lt;/code&gt; on the relevant request factory before making each request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;it(&#39;allows a user to sign up and update their profile&#39;, function () {&#xA;    SignupRequest::fake();&#xA;    post(&#39;/signup&#39;);&#xA;    &#xA;    ProfileRequest::fake();&#xA;    post(&#39;/profile&#39;)-&amp;gt;assertValid();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;I don&#39;t want to use the default location for storing request factories&lt;/h3&gt; &#xA;&lt;p&gt;Not a problem. We provide a config file you may publish where you can edit the path and namespace of request factories. First, publish the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=request-factories&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, in the newly created &lt;code&gt;config/request-factories.php&lt;/code&gt;, alter the &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;namespace&lt;/code&gt; keys to suit your requirements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return [&#xA;    &#39;path&#39; =&amp;gt; base_path(&#39;request_factories&#39;),&#xA;    &#39;namespace&#39; =&amp;gt; &#39;App\\RequestFactories&#39;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;We pride ourselves on a thorough test suite and strict static analysis. You can run all of our checks via a composer script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make it incredibly easy to contribute, we also provide a docker-compose file that will spin up a container with all the necessary dependencies installed. Assuming you have docker installed, just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose run --rm composer install # Only needed the first time&#xA;docker-compose run --rm composer test # Run tests and static analysis &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/worksome/request-factories/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information on what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukeraymonddowning&#34;&gt;Luke Downing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/worksome/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/worksome/request-factories/main/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>