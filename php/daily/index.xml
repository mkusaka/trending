<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-18T01:39:57Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mailgun/mailgun-php</title>
    <updated>2022-09-18T01:39:57Z</updated>
    <id>tag:github.com,2022-09-18:/mailgun/mailgun-php</id>
    <link href="https://github.com/mailgun/mailgun-php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mailgun&#39;s Official SDK for PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mailgun PHP client&lt;/h1&gt; &#xA;&lt;p&gt;This is the Mailgun PHP SDK. This SDK contains methods for easily interacting with the Mailgun API. Below are examples to get you started. For additional examples, please see our official documentation at &lt;a href=&#34;http://documentation.mailgun.com&#34;&gt;http://documentation.mailgun.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mailgun/mailgun-php/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/mailgun/mailgun-php.svg?style=flat-square&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/mailgun/mailgun-php&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/mailgun/mailgun-php.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/mailgun/mailgun-php?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/mailgun/mailgun-php.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/mailgun/mailgun-php&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the SDK, you will need to be using &lt;a href=&#34;http://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; in your project. If you aren&#39;t using Composer yet, it&#39;s really simple! Here&#39;s how to install composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sS https://getcomposer.org/installer | php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Mailgun API Client is not hard coupled to Guzzle, Buzz or any other library that sends HTTP messages. Instead, it uses the &lt;a href=&#34;https://www.php-fig.org/psr/psr-18/&#34;&gt;PSR-18&lt;/a&gt; client abstraction. This will give you the flexibility to choose what &lt;a href=&#34;https://packagist.org/providers/psr/http-message-implementation&#34;&gt;PSR-7 implementation&lt;/a&gt; and &lt;a href=&#34;https://packagist.org/providers/psr/http-client-implementation&#34;&gt;HTTP client&lt;/a&gt; you want to use.&lt;/p&gt; &#xA;&lt;p&gt;If you just want to get started quickly you should run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require mailgun/mailgun-php symfony/http-client nyholm/psr7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You should always use Composer autoloader in your application to automatically load your dependencies. All the examples below assume you&#39;ve already included this in your file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require &#39;vendor/autoload.php&#39;;&#xA;use Mailgun\Mailgun;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s how to send a message using the SDK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// First, instantiate the SDK with your API credentials&#xA;$mg = Mailgun::create(&#39;key-example&#39;); // For US servers&#xA;$mg = Mailgun::create(&#39;key-example&#39;, &#39;https://api.eu.mailgun.net&#39;); // For EU servers&#xA;&#xA;// Now, compose and send your message.&#xA;// $mg-&amp;gt;messages()-&amp;gt;send($domain, $params);&#xA;$mg-&amp;gt;messages()-&amp;gt;send(&#39;example.com&#39;, [&#xA;  &#39;from&#39;    =&amp;gt; &#39;bob@example.com&#39;,&#xA;  &#39;to&#39;      =&amp;gt; &#39;sally@example.com&#39;,&#xA;  &#39;subject&#39; =&amp;gt; &#39;The PHP SDK is awesome!&#39;,&#xA;  &#39;text&#39;    =&amp;gt; &#39;It is so simple to send a message.&#39;&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attention: &lt;code&gt;$domain&lt;/code&gt; must match to the domain you have configured on &lt;a href=&#34;https://app.mailgun.com/app/domains&#34;&gt;app.mailgun.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage of new method for updating web scheme&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;# Include the Autoloader (see &#34;Libraries&#34; for install instructions)&#xA;require &#39;vendor/autoload.php&#39;;&#xA;use Mailgun\Mailgun;&#xA;&#xA;# Instantiate the client.&#xA;$mgClient = Mailgun::create(&#39;KEY&#39;, &#39;FULL_DOMAIN_URL&#39;);&#xA;$domain = &#34;DOMAIN&#34;;&#xA;&#xA;# Issue the call to the client.&#xA;$result = $mgClient-&amp;gt;domains()-&amp;gt;updateWebScheme($domain, &#39;https&#39;);&#xA;&#xA;print_r($result);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom http request to the API&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;# Include the Autoloader (see &#34;Libraries&#34; for install instructions)&#xA;require &#39;vendor/autoload.php&#39;;&#xA;use Mailgun\Mailgun;&#xA;&#xA;# Instantiate the client.&#xA;$mgClient = Mailgun::create(&#39;KEY&#39;, &#39;ENDPOINT&#39;);&#xA;$domain = &#34;DOMAIN&#34;;&#xA;&#xA;$path = &#39;some path&#39;;&#xA;$params = [];&#xA;&#xA;# Issue the call to the client.&#xA;$resultPost = $mgClient-&amp;gt;httpClient()-&amp;gt;httpPost($path, $params);&#xA;&#xA;$resultGet = $mgClient-&amp;gt;httpClient()-&amp;gt;httpGet($path, $params);&#xA;&#xA;$resultPut = $mgClient-&amp;gt;httpClient()-&amp;gt;httpPut($path, $params);&#xA;&#xA;$resultDelete = $mgClient-&amp;gt;httpClient()-&amp;gt;httpDelete($path, $params);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;All usage examples&lt;/h3&gt; &#xA;&lt;p&gt;You will find more detailed documentation at &lt;a href=&#34;https://raw.githubusercontent.com/mailgun/mailgun-php/master/doc/index.md&#34;&gt;/doc&lt;/a&gt; and on &lt;a href=&#34;https://documentation.mailgun.com/en/latest/api_reference.html&#34;&gt;https://documentation.mailgun.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Response&lt;/h3&gt; &#xA;&lt;p&gt;The result of an API call is, by default, a domain object. This will make it easy to understand the response without reading the documentation. One can just read the doc blocks on the response classes. This provides an excellent IDE integration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$mg = Mailgun::create(&#39;key-example&#39;);&#xA;$dns = $mg-&amp;gt;domains()-&amp;gt;show(&#39;example.com&#39;)-&amp;gt;getInboundDNSRecords();&#xA;&#xA;foreach ($dns as $record) {&#xA;  echo $record-&amp;gt;getType();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d rather work with an array than an object you can inject the &lt;code&gt;ArrayHydrator&lt;/code&gt; to the Mailgun class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Mailgun\Hydrator\ArrayHydrator;&#xA;&#xA;$configurator = new HttpClientConfigurator();&#xA;$configurator-&amp;gt;setApiKey(&#39;key-example&#39;);&#xA;&#xA;$mg = new Mailgun($configurator, new ArrayHydrator());&#xA;$data = $mg-&amp;gt;domains()-&amp;gt;show(&#39;example.com&#39;);&#xA;&#xA;foreach ($data[&#39;receiving_dns_records&#39;] as $record) {&#xA;  echo isset($record[&#39;record_type&#39;]) ? $record[&#39;record_type&#39;] : null;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;NoopHydrator&lt;/code&gt; to get a PSR7 Response returned from the API calls.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning: When using &lt;code&gt;NoopHydrator&lt;/code&gt; there will be no exceptions on a non-200 response.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Debugging the PHP SDK can be helpful when things aren&#39;t working quite right. To debug the SDK, here are some suggestions:&lt;/p&gt; &#xA;&lt;p&gt;Set the endpoint to Mailgun&#39;s Postbin. A Postbin is a web service that allows you to post data, which then you can display it through a browser. Using Postbin is an easy way to quickly determine what data you&#39;re transmitting to Mailgun&#39;s API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1 - Create a new Postbin.&lt;/strong&gt; Go to &lt;a href=&#34;http://bin.mailgun.net&#34;&gt;http://bin.mailgun.net&lt;/a&gt;. The Postbin will generate a special URL. Save that URL.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2 - Instantiate the Mailgun client using Postbin.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip: The bin id will be the URL part after bin.mailgun.net. It will be random generated letters and numbers. For example, the bin id in this URL (&lt;a href=&#34;http://bin.mailgun.net/aecf68de&#34;&gt;http://bin.mailgun.net/aecf68de&lt;/a&gt;) is &lt;code&gt;aecf68de&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Mailgun\HttpClient\HttpClientConfigurator;&#xA;use Mailgun\Hydrator\NoopHydrator;&#xA;&#xA;$configurator = new HttpClientConfigurator();&#xA;$configurator-&amp;gt;setEndpoint(&#39;http://bin.mailgun.net/aecf68de&#39;);&#xA;$configurator-&amp;gt;setApiKey(&#39;key-example&#39;);&#xA;$configurator-&amp;gt;setDebug(true);&#xA;&#xA;$mg = new Mailgun($configurator, new NoopHydrator());&#xA;&#xA;# Now, compose and send your message.&#xA;$mg-&amp;gt;messages()-&amp;gt;send(&#39;example.com&#39;, [&#xA;  &#39;from&#39;    =&amp;gt; &#39;bob@example.com&#39;,&#xA;  &#39;to&#39;      =&amp;gt; &#39;sally@example.com&#39;,&#xA;  &#39;subject&#39; =&amp;gt; &#39;The PHP SDK is awesome!&#39;,&#xA;  &#39;text&#39;    =&amp;gt; &#39;It is so simple to send a message.&#39;&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Additional Info&lt;/h3&gt; &#xA;&lt;p&gt;For usage examples on each API endpoint, head over to our official documentation pages.&lt;/p&gt; &#xA;&lt;p&gt;This SDK includes a &lt;a href=&#34;https://raw.githubusercontent.com/mailgun/mailgun-php/master/src/Message/README.md&#34;&gt;Message Builder&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mailgun/mailgun-php/master/src/Message/README.md&#34;&gt;Batch Message&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Message Builder allows you to quickly create the array of parameters, required to send a message, by calling a methods for each parameter. Batch Message is an extension of Message Builder, and allows you to easily send a batch message job within a few seconds. The complexity of batch messaging is eliminated!&lt;/p&gt; &#xA;&lt;h2&gt;Framework integration&lt;/h2&gt; &#xA;&lt;p&gt;If you are using a framework you might consider these composer packages to make the framework integration easier.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tehplague/swiftmailer-mailgun-bundle&#34;&gt;tehplague/swiftmailer-mailgun-bundle&lt;/a&gt; for Symfony&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/katanyoo/yii2-mailgun-mailer&#34;&gt;katanyoo/yii2-mailgun-mailer&lt;/a&gt; for Yii2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/narendravaghela/cakephp-mailgun&#34;&gt;narendravaghela/cakephp-mailgun&lt;/a&gt; for CakePHP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.drupal.org/project/mailgun&#34;&gt;drupal/mailgun&lt;/a&gt; for Drupal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://laravel.com/docs/8.x/mail#mailgun-driver&#34;&gt;Laravel&lt;/a&gt; Mail comes with Mailgun driver support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;This SDK is an Open Source under the MIT license. It is, thus, maintained by collaborators and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to contribute in any way. As an example you may:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trying out the &lt;code&gt;dev-master&lt;/code&gt; code&lt;/li&gt; &#xA; &lt;li&gt;Create issues if you find problems&lt;/li&gt; &#xA; &lt;li&gt;Reply to other people&#39;s issues&lt;/li&gt; &#xA; &lt;li&gt;Review PRs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the test code&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run the tests you should run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;git clone git@github.com:mailgun/mailgun-php.git&#xA;cd mailgun-php&#xA;composer update&#xA;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support and Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Be sure to visit the Mailgun official &lt;a href=&#34;http://documentation.mailgun.com/&#34;&gt;documentation website&lt;/a&gt; for additional information about our API.&lt;/p&gt; &#xA;&lt;p&gt;If you find a bug, please submit the issue in Github directly. &lt;a href=&#34;https://github.com/mailgun/mailgun-php/issues&#34;&gt;Mailgun-PHP Issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As always, if you need additional assistance, drop us a note through your account at &lt;a href=&#34;https://app.mailgun.com/app/support/list&#34;&gt;https://app.mailgun.com/app/support/list&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>