<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-17T01:32:13Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yungifez/skuul</title>
    <updated>2022-07-17T01:32:13Z</updated>
    <id>tag:github.com,2022-07-17:/yungifez/skuul</id>
    <link href="https://github.com/yungifez/skuul" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A school management system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Skuul school management system&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In search of good school management systems written in laravel, I tried so many although most were quite remarkably good they lacked some essential features that I would have loved in a school management system.This made me passionate in building my own school management system. Although it has been difficult, it&#39;s actually forming up into a quite useable project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/63137056/178576517-412251e7-d272-469f-8a98-ec407b599c7a.png&#34; alt=&#34;schooldash-dahboard-page&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Skuul is a multi school management system that aims to make school administration and activities a breeze by using the power of the internet and increased connectinity&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Php 8.0 and above&lt;/li&gt; &#xA; &lt;li&gt;Composer&lt;/li&gt; &#xA; &lt;li&gt;Since this project is running laravel 9, we suggest checking out the official requirements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repository by running the following command in your comamand line below (Or you can dowload zip file from github)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/yungifez/skuul ./skuul&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Head to the projects directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd skuul&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install composer dependancies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy .env.example file into .env file and configure based on your environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate encryption key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan key:generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Migrate the database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Seed database&lt;/p&gt; &lt;p&gt;You can seed the database in 2 ways&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For production ie in your live server &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan db:seed --class RunInProductionSeeder&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;For testing or development purposes &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Seed database to populate countries (takes approximately 10 minutes)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan db:seed --class=WorldSeeder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set application logo by adding it in the public img folder and edit the .env logo path appropriately&lt;/li&gt; &#xA; &lt;li&gt;For development or testing purposes, you can use the laravel built in server by running&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are running on production, visit your domain to verify it is working&lt;/p&gt; &#xA;&lt;p&gt;After running the above commands, you should be able to access the application at http::/localhost or your designated domain name depending on configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Log in to the application with the following credentials&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Email: &lt;a href=&#34;mailto:super@admin.com&#34;&gt;super@admin.com&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Password: password&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You would be prompted to change your password, change your passsword in the profile page to continue&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if you are on production&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When you log in, you would be redirected to a page with error message at the top right corner that says &#34;Please set your school of operation first&#34;. At the menu, click on create schools&lt;/li&gt; &#xA;   &lt;li&gt;On the page to create schools, provide a name, address and initial for your school and click on create school&lt;/li&gt; &#xA;   &lt;li&gt;Click on view schools, select the current school and click on the button set scvhool&lt;/li&gt; &#xA;   &lt;li&gt;You can now head over to the dashboard&lt;/li&gt; &#xA;   &lt;li&gt;You can begin to add classes, students, teachers etc. Some operations would not work specifically all links under the academics section&lt;/li&gt; &#xA;   &lt;li&gt;Head over to academic years, create a new academic year and a new semester then set the academic year and semester&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if you are on dev or testing, data is preset to test and use the application.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add class groups to the school&lt;/li&gt; &#xA; &lt;li&gt;Add classes to class groups&lt;/li&gt; &#xA; &lt;li&gt;Add sections to classes&lt;/li&gt; &#xA; &lt;li&gt;Add students to sections (You must have created a class and a section before you can add students)&lt;/li&gt; &#xA; &lt;li&gt;Add teachers to school&lt;/li&gt; &#xA; &lt;li&gt;Add subjects to school&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Super Admin&lt;/h3&gt; &#xA;&lt;p&gt;By default super admin can manage all activities in each school, some super admin exclusive features are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ability to create, edit and delete schools &#34; Ability to set school of operation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Admin&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ability to manage own school settings&lt;/li&gt; &#xA; &lt;li&gt;Ability to create, edit, view and delete class groups in assigned school&lt;/li&gt; &#xA; &lt;li&gt;Ability to create, edit, view and delete classes&lt;/li&gt; &#xA; &lt;li&gt;Ability to create, edit, view and delete sections&lt;/li&gt; &#xA; &lt;li&gt;Ability to create, edit, view and delete classes&lt;/li&gt; &#xA; &lt;li&gt;Ability to create, edit, view and delete subjects&lt;/li&gt; &#xA; &lt;li&gt;Ability to create, edit, view and delete academic years&lt;/li&gt; &#xA; &lt;li&gt;Ability to set Academic years&lt;/li&gt; &#xA; &lt;li&gt;Ability to admit students, view student profiles, edit student profile, print student profile and delete student&lt;/li&gt; &#xA; &lt;li&gt;Ability to create teachers, edit teacher profile and delete teacher&lt;/li&gt; &#xA; &lt;li&gt;Ability to create, edit, manage, view and delete timetables&lt;/li&gt; &#xA; &lt;li&gt;Ability to create, edit, view and delete sylabii&lt;/li&gt; &#xA; &lt;li&gt;Ability to create, edit, view and delete semester&lt;/li&gt; &#xA; &lt;li&gt;Ability to set own school academic year and semester&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Teachers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ability to create, edit, view and delete sylabii&lt;/li&gt; &#xA; &lt;li&gt;Ability to create, edit, manage, view and delete timetables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project was highly inspired by 4jean/lavSMS&lt;/p&gt; &#xA;&lt;p&gt;Do you like the current state of this project?, you can support me or hire me for work&lt;/p&gt; &#xA;&lt;p&gt;Todo&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create demo site (for now, go to yungifez.xyz might be a mess but worth it)&lt;/li&gt; &#xA; &lt;li&gt;Create logo&lt;/li&gt; &#xA; &lt;li&gt;Need help creating demo video&lt;/li&gt; &#xA; &lt;li&gt;Write docs using a tool like larecipe&lt;/li&gt; &#xA; &lt;li&gt;Write issue and contribution template file etc&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>thephpleague/oauth2-client</title>
    <updated>2022-07-17T01:32:13Z</updated>
    <id>tag:github.com,2022-07-17:/thephpleague/oauth2-client</id>
    <link href="https://github.com/thephpleague/oauth2-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy integration with OAuth 2.0 service providers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OAuth 2.0 Client&lt;/h1&gt; &#xA;&lt;p&gt;This package provides a base for integrating with &lt;a href=&#34;http://oauth.net/2/&#34;&gt;OAuth 2.0&lt;/a&gt; service providers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/thephpleague/oauth2-client&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter-join_chat-brightgreen.svg?style=flat-square&#34; alt=&#34;Gitter Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thephpleague/oauth2-client&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/source-thephpleague/oauth2--client-blue.svg?style=flat-square&#34; alt=&#34;Source Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thephpleague/oauth2-client/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/thephpleague/oauth2-client.svg?style=flat-square&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thephpleague/oauth2-client/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thephpleague/oauth2-client/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/thephpleague/oauth2-client/CI?label=CI&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/thephpleague/oauth2-client&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/thephpleague/oauth2-client?label=codecov&amp;amp;logo=codecov&amp;amp;style=flat-square&#34; alt=&#34;Codecov Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/league/oauth2-client&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/league/oauth2-client.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The OAuth 2.0 login flow, seen commonly around the web in the form of &#34;Connect with Facebook/Google/etc.&#34; buttons, is a common integration added to web applications, but it can be tricky and tedious to do right. To help, we&#39;ve created the &lt;code&gt;league/oauth2-client&lt;/code&gt; package, which provides a base for integrating with various OAuth 2.0 providers, without overburdening your application with the concerns of &lt;a href=&#34;http://tools.ietf.org/html/rfc6749&#34;&gt;RFC 6749&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This OAuth 2.0 client library will work with any OAuth 2.0 provider that conforms to the OAuth 2.0 Authorization Framework. Out-of-the-box, we provide a &lt;code&gt;GenericProvider&lt;/code&gt; class to connect to any service provider that uses &lt;a href=&#34;http://tools.ietf.org/html/rfc6750&#34;&gt;Bearer tokens&lt;/a&gt;. See our &lt;a href=&#34;https://oauth2-client.thephpleague.com/usage/&#34;&gt;basic usage guide&lt;/a&gt; for examples using &lt;code&gt;GenericProvider&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Many service providers provide additional functionality above and beyond the OAuth 2.0 specification. For this reason, you may extend and wrap this library to support additional behavior. There are already many &lt;a href=&#34;https://oauth2-client.thephpleague.com/providers/league/&#34;&gt;official&lt;/a&gt; and &lt;a href=&#34;https://oauth2-client.thephpleague.com/providers/thirdparty/&#34;&gt;third-party&lt;/a&gt; provider clients available (e.g., Facebook, GitHub, Google, Instagram, LinkedIn, etc.). If your provider isn&#39;t in the list, feel free to add it.&lt;/p&gt; &#xA;&lt;p&gt;This package is compliant with &lt;a href=&#34;https://github.com/php-fig/fig-standards/raw/master/accepted/PSR-1-basic-coding-standard.md&#34;&gt;PSR-1&lt;/a&gt;, &lt;a href=&#34;https://github.com/php-fig/fig-standards/raw/master/accepted/PSR-2-coding-style-guide.md&#34;&gt;PSR-2&lt;/a&gt;, &lt;a href=&#34;https://github.com/php-fig/fig-standards/raw/master/accepted/PSR-4-autoloader.md&#34;&gt;PSR-4&lt;/a&gt;, and &lt;a href=&#34;https://github.com/php-fig/fig-standards/raw/master/accepted/PSR-7-http-message.md&#34;&gt;PSR-7&lt;/a&gt;. If you notice compliance oversights, please send a patch via pull request. If you&#39;re interested in contributing to this library, please take a look at our &lt;a href=&#34;https://github.com/thephpleague/oauth2-client/raw/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;We support the following versions of PHP:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 8.1&lt;/li&gt; &#xA; &lt;li&gt;PHP 8.0&lt;/li&gt; &#xA; &lt;li&gt;PHP 7.4&lt;/li&gt; &#xA; &lt;li&gt;PHP 7.3&lt;/li&gt; &#xA; &lt;li&gt;PHP 7.2&lt;/li&gt; &#xA; &lt;li&gt;PHP 7.1&lt;/li&gt; &#xA; &lt;li&gt;PHP 7.0&lt;/li&gt; &#xA; &lt;li&gt;PHP 5.6&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Provider Clients&lt;/h2&gt; &#xA;&lt;p&gt;We provide a list of &lt;a href=&#34;https://oauth2-client.thephpleague.com/providers/league/&#34;&gt;official PHP League provider clients&lt;/a&gt;, as well as &lt;a href=&#34;https://oauth2-client.thephpleague.com/providers/thirdparty/&#34;&gt;third-party provider clients&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build your own provider client, please refer to &#34;&lt;a href=&#34;https://oauth2-client.thephpleague.com/providers/implementing/&#34;&gt;Implementing a Provider Client&lt;/a&gt;.&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For usage and code examples, check out our &lt;a href=&#34;https://oauth2-client.thephpleague.com/usage/&#34;&gt;basic usage guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/thephpleague/oauth2-client/raw/master/CONTRIBUTING.md&#34;&gt;our contributing guidelines&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://github.com/thephpleague/oauth2-client/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cjmellor/approval</title>
    <updated>2022-07-17T01:32:13Z</updated>
    <id>tag:github.com,2022-07-17:/cjmellor/approval</id>
    <link href="https://github.com/cjmellor/approval" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Approve new Model data before it is persisted&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Approve new Model data before it is persisted&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/cjmellor/approval&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/cjmellor/approval.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cjmellor/approval/actions?query=workflow%3Arun-tests+branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/cjmellor/approval/run-tests?label=tests&#34; alt=&#34;GitHub Tests Action Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cjmellor/approval/actions?query=workflow%3A%22Check+%26+fix+styling%22+branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/cjmellor/approval/Check%20&amp;amp;%20fix%20styling?label=code%20style&#34; alt=&#34;GitHub Code Style Action Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/cjmellor/approval&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/cjmellor/approval.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Approval is a Laravel package that provides a simple way to approve new Model data before it is persisted.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://banners.beyondco.de/Approval.png?theme=light&amp;amp;packageManager=composer+require&amp;amp;packageName=cjmellor%2Fapproval&amp;amp;pattern=brickWall&amp;amp;style=style_2&amp;amp;description=Approve+new+Model+data+before+it+is+persisted&amp;amp;md=1&amp;amp;showWatermark=0&amp;amp;fontSize=100px&amp;amp;images=check-circle&amp;amp;widths=300&amp;amp;heights=300&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require cjmellor/approval&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can publish and run the migrations with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=&#34;approval-migrations&#34;&#xA;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can publish the config file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=&#34;approval-config&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the contents of the published config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return [&#xA;    &#39;approval&#39; =&amp;gt; [&#xA;        /**&#xA;         * The approval polymorphic pivot name&#xA;         *&#xA;         * Default: &#39;approvalable&#39;&#xA;         */&#xA;        &#39;approval_pivot&#39; =&amp;gt; &#39;approvalable&#39;,&#xA;    ],&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The config allows you to change the polymorphic pivot name. It should end with &lt;code&gt;able&lt;/code&gt; though.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This packages utilises Enums, so both PHP 8.1 and Laravel 9 must be used.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; This package does not approve/deny the data for you, it just stores the new/amended data into the database. It is up to you to decide how you implement a function to approve or deny the Model.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;MustBeApproved&lt;/code&gt; trait to your Model and now the data will be stored in an &lt;code&gt;approvals&lt;/code&gt; table, ready for you to approve or deny.&lt;/p&gt; &#xA;&lt;p&gt;For example, you add it to a &lt;code&gt;Post&lt;/code&gt; Model and each time a Post is created or updated, all the &lt;em&gt;dirty&lt;/em&gt; data will be stored in the database as JSON for you to do something with it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Cjmellor\Approval\Concerns\MustBeApproved;&#xA;&#xA;class Post extends Model&#xA;{&#xA;    use MustBeApproved;&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All Models using the Trait will now be stored in a new table -- &lt;code&gt;approvals&lt;/code&gt;. This is a polymorphic relationship.&lt;/p&gt; &#xA;&lt;p&gt;Here is some info about the columns in the &lt;code&gt;approvals&lt;/code&gt; table:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;approvalable_type&lt;/code&gt; =&amp;gt; The class name of the Model that the approval is for&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;approvalable_id&lt;/code&gt; =&amp;gt; The ID of the Model that the approval is for&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;state&lt;/code&gt; =&amp;gt; The state of the approval. This uses an Enum class. This column is cast to an &lt;code&gt;ApprovalStatus&lt;/code&gt; Enum class&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;new_data&lt;/code&gt; =&amp;gt; All the fields created or updated in the Model. This is a JSON column. This column is cast to the &lt;code&gt;AsArrayObject&lt;/code&gt; &lt;a href=&#34;https://laravel.com/docs/9.x/eloquent-mutators#array-object-and-collection-casting&#34;&gt;Cast&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;original_data&lt;/code&gt; =&amp;gt; All the fields in the Model before they were updated. This is a JSON column. This column is cast to the &lt;code&gt;AsArrayObject&lt;/code&gt; &lt;a href=&#34;https://laravel.com/docs/9.x/eloquent-mutators#array-object-and-collection-casting&#34;&gt;Cast&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to check if the Model data will be bypassed, use the &lt;code&gt;isApprovalBypassed&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return $model-&amp;gt;isApprovalBypassed();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scopes&lt;/h2&gt; &#xA;&lt;p&gt;The package comes with some helper methods for the Builder, utilising a custom scope - &lt;code&gt;ApprovalStateScope&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, all queries to the &lt;code&gt;approvals&lt;/code&gt; table will return all the Models&#39; no matter the state.&lt;/p&gt; &#xA;&lt;p&gt;There are three methods to help you retrieve the state of an Approval.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use App\Models\Approval;&#xA;&#xA;Approval::approved()-&amp;gt;get();&#xA;Approval::rejected()-&amp;gt;get();&#xA;Approval::pending()-&amp;gt;count();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set a state for an approval:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use App\Models\Approval;&#xA;&#xA;Approval::where(&#39;id&#39;, 1)-&amp;gt;approve();&#xA;Approval::where(&#39;id&#39;, 2)-&amp;gt;reject();&#xA;Approval::where(&#39;id&#39;, 3)-&amp;gt;postpone();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the event you need to reset a state, you can use the &lt;code&gt;withAnyState&lt;/code&gt; helper.&lt;/p&gt; &#xA;&lt;h2&gt;Disable Approvals&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want Model data to be approved, you can bypass it with the &lt;code&gt;withoutApproval&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$model-&amp;gt;withoutApproval()-&amp;gt;update([&#39;title&#39; =&amp;gt; &#39;Some Title&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/cjmellor/approval/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information on what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please open a PR with as much detail as possible about what you&#39;re trying to achieve.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cjmellor&#34;&gt;Chris Mellor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/cjmellor/approval/main/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>