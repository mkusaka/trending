<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-27T01:31:58Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>InterNACHI/modular</title>
    <updated>2024-02-27T01:31:58Z</updated>
    <id>tag:github.com,2024-02-27:/InterNACHI/modular</id>
    <link href="https://github.com/InterNACHI/modular" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modularize your Laravel application&lt;/p&gt;&lt;hr&gt;&lt;img alt=&#34;Modular&#34; src=&#34;https://raw.githubusercontent.com/InterNACHI/modular/main/art/modular.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h1&gt;&lt;code&gt;internachi/modular&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;div&gt; &#xA; &lt;a href=&#34;https://github.com/InterNACHI/modular/actions/workflows/phpunit.yml&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/InterNACHI/modular/actions/workflows/phpunit.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://codeclimate.com/github/InterNACHI/modular/test_coverage&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://api.codeclimate.com/v1/badges/dd927802d52f4f75ea6c/test_coverage&#34; alt=&#34;Coverage Status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://packagist.org/packages/internachi/modular&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://poser.pugx.org/internachi/modular/v/stable&#34; alt=&#34;Latest Stable Release&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/InterNACHI/modular/main/LICENSE&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://poser.pugx.org/internachi/modular/license&#34; alt=&#34;MIT Licensed&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://twitter.com/inxilpro&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/inxilpro?style=social&#34; alt=&#34;Follow @inxilpro on Twitter&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://any.dev/@chris&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/mastodon/follow/109584001693739813?domain=https%3A%2F%2Fany.dev&amp;amp;style=social&#34; alt=&#34;Follow @chris@any.dev on Mastodon&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;code&gt;internachi/modular&lt;/code&gt; is a module system for Laravel applications. It uses &lt;a href=&#34;https://getcomposer.org/doc/05-repositories.md#path&#34;&gt;Composer path repositories&lt;/a&gt; for autoloading, and &lt;a href=&#34;https://laravel.com/docs/7.x/packages#package-discovery&#34;&gt;Laravel package discovery&lt;/a&gt; for module initialization, and then provides minimal tooling to fill in any gaps.&lt;/p&gt; &#xA;&lt;p&gt;This project is as much a set of conventions as it is a package. The fundamental idea is that you can create “modules” in a separate &lt;code&gt;app-modules/&lt;/code&gt; directory, which allows you to better organize large projects. These modules use the existing &lt;a href=&#34;https://laravel.com/docs/7.x/packages&#34;&gt;Laravel package system&lt;/a&gt;, and follow existing Laravel conventions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/InterNACHI/modular/main/#walkthrough-video&#34;&gt;Walkthrough Video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/InterNACHI/modular/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/InterNACHI/modular/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/InterNACHI/modular/main/#comparison-to-nwidartlaravel-modules&#34;&gt;Comparison to &lt;code&gt;nwidart/laravel-modules&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Walkthrough Video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://internachi.wistia.com/medias/pivaxithl7?wvideo=pivaxithl7&#34;&gt;&lt;img src=&#34;https://embed-ssl.wistia.com/deliveries/98ebc7e01537a644df2d3af93d928257.jpg?image_crop_resized=1600x900&amp;amp;image_play_button=true&amp;amp;image_play_button_size=2x&amp;amp;image_play_button_color=1e71e7e0&#34; alt=&#34;Intro video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To get started, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer require internachi/modular&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Laravel will auto-discover the package and everything will be automatically set up for you.&lt;/p&gt; &#xA;&lt;h3&gt;Publish the config&lt;/h3&gt; &#xA;&lt;p&gt;While not required, it&#39;s highly recommended that you customize your default namespace for modules. By default, this is set to &lt;code&gt;Modules\&lt;/code&gt;, which works just fine but makes it harder to extract your module to a separate package should you ever choose to.&lt;/p&gt; &#xA;&lt;p&gt;We recommend configuring a organization namespace (we use &lt;code&gt;&#34;InterNACHI&#34;&lt;/code&gt;, for example). To do this, you&#39;ll need to publish the package config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan vendor:publish --tag=modular-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a module&lt;/h3&gt; &#xA;&lt;p&gt;Next, let&#39;s create a module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan make:module my-module &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modular will scaffold up a new module for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;app-modules/&#xA;  my-module/&#xA;    composer.json&#xA;    src/&#xA;    tests/&#xA;    routes/&#xA;    resources/&#xA;    database/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will also add two new entries to your app&#39;s &lt;code&gt;composer.json&lt;/code&gt; file. The first entry registers &lt;code&gt;./app-modules/my-module/&lt;/code&gt; as a &lt;a href=&#34;https://getcomposer.org/doc/05-repositories.md#path&#34;&gt;path repository&lt;/a&gt;, and the second requires &lt;code&gt;modules/my-module:*&lt;/code&gt; (like any other Composer dependency).&lt;/p&gt; &#xA;&lt;p&gt;Modular will then remind you to perform a Composer update, so let&#39;s do that now:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer update modules/my-module&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional: Config synchronization&lt;/h3&gt; &#xA;&lt;p&gt;You can run the sync command to make sure that your project is set up for module support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan modules:sync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add a &lt;code&gt;Modules&lt;/code&gt; test suite to your &lt;code&gt;phpunit.xml&lt;/code&gt; file (if one exists) and update your &lt;a href=&#34;https://plugins.jetbrains.com/plugin/7532-laravel&#34;&gt;PhpStorm Laravel plugin&lt;/a&gt; configuration (if it exists) to properly find your module&#39;s views.&lt;/p&gt; &#xA;&lt;p&gt;It is safe to run this command at any time, as it will only add missing configurations. You may even want to add it to your &lt;code&gt;post-autoload-dump&lt;/code&gt; scripts in your application&#39;s &lt;code&gt;composer.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;All modules follow existing Laravel conventions, and auto-discovery should work as expected in most cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Commands are auto-registered with Artisan&lt;/li&gt; &#xA; &lt;li&gt;Migrations will be run by the Migrator&lt;/li&gt; &#xA; &lt;li&gt;Factories are auto-loaded for &lt;code&gt;factory()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Policies are auto-discovered for your Models&lt;/li&gt; &#xA; &lt;li&gt;Blade components will be auto-discovered&lt;/li&gt; &#xA; &lt;li&gt;Event listeners will be auto-discovered&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;h4&gt;Package Commands&lt;/h4&gt; &#xA;&lt;p&gt;We provide a few helper commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:module&lt;/code&gt; — scaffold a new module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan modules:cache&lt;/code&gt; — cache the loaded modules for slightly faster auto-discovery&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan modules:clear&lt;/code&gt; — clear the module cache&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan modules:sync&lt;/code&gt; — update project configs (like &lt;code&gt;phpunit.xml&lt;/code&gt;) with module settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan modules:list&lt;/code&gt; — list all modules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Laravel “&lt;code&gt;make:&lt;/code&gt;” Commands&lt;/h4&gt; &#xA;&lt;p&gt;We also add a &lt;code&gt;--module=&lt;/code&gt; option to most Laravel &lt;code&gt;make:&lt;/code&gt; commands so that you can use all the existing tooling that you know. The commands themselves are exactly the same, which means you can use your &lt;a href=&#34;https://laravel.com/docs/7.x/artisan#stub-customization&#34;&gt;custom stubs&lt;/a&gt; and everything else Laravel provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:cast MyModuleCast --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:controller MyModuleController --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:command MyModuleCommand --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:component MyModuleComponent --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:channel MyModuleChannel --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:event MyModuleEvent --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:exception MyModuleException --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:factory MyModuleFactory --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:job MyModuleJob --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:listener MyModuleListener --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:mail MyModuleMail --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:middleware MyModuleMiddleware --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:model MyModule --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:notification MyModuleNotification --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:observer MyModuleObserver --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:policy MyModulePolicy --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:provider MyModuleProvider --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:request MyModuleRequest --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:resource MyModule --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:rule MyModuleRule --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:seeder MyModuleSeeder --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:test MyModuleTest --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other Laravel Commands&lt;/h4&gt; &#xA;&lt;p&gt;In addition to adding a &lt;code&gt;--module&lt;/code&gt; option to most &lt;code&gt;make:&lt;/code&gt; commands, we’ve also added the same option to the &lt;code&gt;db:seed&lt;/code&gt; command. If you pass the &lt;code&gt;--module&lt;/code&gt; option to &lt;code&gt;db:seed&lt;/code&gt;, it will look for your seeder within your module namespace:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan db:seed --module=[module name]&lt;/code&gt; will try to call &lt;code&gt;Modules\MyModule\Database\Seeders\DatabaseSeeder&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan db:seed --class=MySeeder --module=[module name]&lt;/code&gt; will try to call &lt;code&gt;Modules\MyModule\Database\Seeders\MySeeder&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Vendor Commands&lt;/h4&gt; &#xA;&lt;p&gt;We can also add the &lt;code&gt;--module&lt;/code&gt; option to commands in 3rd-party packages. The first package that we support is Livewire. If you have Livewire installed, you can run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;php artisan make:livewire counter --module=[module name]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Blade Components&lt;/h4&gt; &#xA;&lt;p&gt;Your &lt;a href=&#34;https://laravel.com/docs/blade#components&#34;&gt;Laravel Blade components&lt;/a&gt; will be automatically registered for you under a &lt;a href=&#34;https://laravel.com/docs/9.x/blade#manually-registering-package-components&#34;&gt;component namespace&lt;/a&gt;. A few examples:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;app-modules/demo/src/View/Components/Basic.php&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x-demo::basic /&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;app-modules/demo/src/View/Components/Nested/One.php&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x-demo::nested.one /&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;app-modules/demo/src/View/Components/Nested/Two.php&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x-demo::nested.two /&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;app-modules/demo/resources/components/anonymous.blade.php&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x-demo::anonymous /&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;app-modules/demo/resources/components/anonymous/index.blade.php&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x-demo::anonymous /&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;app-modules/demo/resources/components/anonymous/nested.blade.php&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x-demo::anonymous.nested /&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Customizing the Default Module Structure&lt;/h4&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;make:module&lt;/code&gt;, Modular will scaffold some basic boilerplate for you. If you would like to customize this behavior, you can do so by publishing the &lt;code&gt;app-modules.php&lt;/code&gt; config file and adding your own stubs.&lt;/p&gt; &#xA;&lt;p&gt;Both filenames and file contents support a number of placeholders. These include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;StubBasePath&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StubModuleNamespace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StubComposerNamespace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StubModuleNameSingular&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StubModuleNamePlural&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StubModuleName&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StubClassNamePrefix&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StubComposerName&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StubMigrationPrefix&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StubFullyQualifiedTestCaseBase&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StubTestCaseBase&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Comparison to &lt;code&gt;nwidart/laravel-modules&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nwidart.com/laravel-modules&#34;&gt;Laravel Modules&lt;/a&gt; is a great package that’s been around since 2016 and is used by 1000&#39;s of projects. The main reason we decided to build our own module system rather than using &lt;code&gt;laravel-modules&lt;/code&gt; comes down to two decisions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We wanted something that followed Laravel conventions rather than using its own directory structure/etc.&lt;/li&gt; &#xA; &lt;li&gt;We wanted something that felt “lighter weight”&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you are building a CMS that needs to support 3rd-party modules that can be dynamically enabled and disabled, Laravel Modules will be a better fit.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, if you&#39;re mostly interested in modules for organization, and want to stick closely to Laravel conventions, we’d highly recommend giving InterNACHI/Modular a try!&lt;/p&gt;</summary>
  </entry>
</feed>