<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-07T01:43:24Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hammerstonedev/flaky</title>
    <updated>2023-03-07T01:43:24Z</updated>
    <id>tag:github.com,2023-03-07:/hammerstonedev/flaky</id>
    <link href="https://github.com/hammerstonedev/flaky" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Handle intermittent failures caused by unreliable third parties&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Flaky for Laravel&lt;/h2&gt; &#xA;&lt;p&gt;Flaky for Laravel is a package that helps you handle operations that may have intermittent failures due to unreliable third-parties.&lt;/p&gt; &#xA;&lt;p&gt;This is very much in beta! Please open issues / PRs for any problems.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via Composer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;composer require hammerstone/flaky&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s say you have a flaky piece of code that fails 20% of the time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if (Lottery::odds(1 / 5)-&amp;gt;choose()) {&#xA;    throw new Exception(&#34;Oops&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But you don&#39;t care if it fails, as long as it doesn&#39;t fail for more than an hour. Then you could wrap that code up in Flaky protections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Flaky::make(&#39;my-flaky-code&#39;)&#xA;    -&amp;gt;allowFailuresForAnHour()&#xA;    -&amp;gt;run(function() {&#xA;        if (Lottery::odds(1 / 5)-&amp;gt;choose()) {&#xA;            throw new Exception(&#34;Oops&#34;);&#xA;        }&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, exceptions will be silenced unless the operation hasn&#39;t succeeded in an hour.&lt;/p&gt; &#xA;&lt;p&gt;Each instance of flaky code requires a unique ID passed through to the &lt;code&gt;make&lt;/code&gt; method. This is how we keep track of failures over time. You can make up whatever you want, it&#39;s just a cache key.&lt;/p&gt; &#xA;&lt;p&gt;Flaky uses your default cache store. That may need to be configurable in the future.&lt;/p&gt; &#xA;&lt;h2&gt;Throwing Exceptions&lt;/h2&gt; &#xA;&lt;p&gt;You have several different ways to control when exceptions are thrown:&lt;/p&gt; &#xA;&lt;h3&gt;Time Based&lt;/h3&gt; &#xA;&lt;p&gt;If you want to throw an exception after a certain period of time, you have several methods available to you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;allowFailuresForAMinute()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowFailuresForMinutes($minutes)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowFailuresForAnHour()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowFailuresForHours($hours)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowFailuresForADay()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowFailuresForDays($days)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowFailuresFor($seconds = 0, $minutes = 0, $hours = 0, $days = 0)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your callback throws an exception, Flaky will check to see if it&#39;s still within the grace period. If it is, the exception will be captured.&lt;/p&gt; &#xA;&lt;p&gt;If your callback succeeds, the deadline will be reset.&lt;/p&gt; &#xA;&lt;h3&gt;Consecutive Failures&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d prefer to take a numeric approach instead of a time-based approach, you can use the &lt;code&gt;consecutiveFailures&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Flaky::make(&#39;my-flaky-code&#39;)&#xA;    // It can fail ten times in a row. &#xA;    -&amp;gt;allowConsecutiveFailures(10)&#xA;    -&amp;gt;run(function() {&#xA;        //&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now your function can fail 10 times in a row without alerting you, but on the 11th failure the exception will be thrown. If the callback succeeds, the consecutive failure counter will be reset.&lt;/p&gt; &#xA;&lt;h3&gt;Total Failures&lt;/h3&gt; &#xA;&lt;p&gt;If you want to throw an exception after a total number of failures, regardless of successes, you can use the &lt;code&gt;totalFailures&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Flaky::make(&#39;my-flaky-code&#39;)&#xA;    // It can fail ten times total. &#xA;    -&amp;gt;totalFailures(10)&#xA;    -&amp;gt;run(function() {&#xA;        //&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the 11th failure, the exception will be thrown. The counter will be reset only after the exception has been thrown, but not for successful invocations. You can think of this as &#34;Throw every 11th exception, regardless of successes.&#34;&lt;/p&gt; &#xA;&lt;h3&gt;Combining&lt;/h3&gt; &#xA;&lt;p&gt;You can combine the three methods in any way you like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Flaky::make(&#39;my-flaky-code&#39;)&#xA;    // Alert after an hour. &#xA;    -&amp;gt;allowFailuresForAnHour()&#xA;    // Alert after the third consecutive failure.&#xA;    -&amp;gt;consecutiveFailures(3)&#xA;    // Alert after the tenth failure. &#xA;    -&amp;gt;totalFailures(10)&#xA;    -&amp;gt;run(function() {&#xA;        //&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reporting instead of throwing&lt;/h2&gt; &#xA;&lt;p&gt;By default, Flaky will actually &lt;code&gt;throw&lt;/code&gt; the exception if it occurs outside of the bounds you have define. You can choose to &lt;code&gt;report&lt;/code&gt; that exception instead of throw it, using Laravel&#39;s &lt;code&gt;report&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Flaky::make(&#39;my-flaky-code&#39;)&#xA;    -&amp;gt;allowFailuresForAnHour()&#xA;    // Don&#39;t throw, but use `report()` instead.&#xA;    -&amp;gt;reportFailures()&#xA;    -&amp;gt;run(function() {&#xA;        //&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows you to still get the alert, but carry on processing if you need to. (This is helpful for loops or long-running processes.)&lt;/p&gt; &#xA;&lt;h2&gt;Retrying&lt;/h2&gt; &#xA;&lt;p&gt;If you want to immediately retry a bit of flaky code, you can use the &lt;code&gt;retry&lt;/code&gt; method, which uses Laravel&#39;s &lt;code&gt;retry&lt;/code&gt; helper under the hood. Any failures that happen as a part of the retry process don&#39;t count toward the total or consecutive failures. If your function is retried the maximum times and does not succeed, then that counts as one failure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Flaky::make(&#39;my-flaky-code&#39;)&#xA;    -&amp;gt;allowFailuresForAnHour()&#xA;    // Retry 3 times, with 500ms between.&#xA;    -&amp;gt;retry(3, 500)&#xA;    -&amp;gt;run(function() {&#xA;        //&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also choose to retry a &lt;em&gt;single type&lt;/em&gt; of exception&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Flaky::make(&#39;my-flaky-code&#39;)&#xA;    -&amp;gt;allowFailuresForAnHour()&#xA;    // Only retry TimeoutExceptions&#xA;    -&amp;gt;retry(3, 500, TimeoutException::class)&#xA;    -&amp;gt;run(function() {&#xA;        //&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or multiple types of exceptions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Flaky::make(&#39;my-flaky-code&#39;)&#xA;    -&amp;gt;allowFailuresForAnHour()&#xA;    // Only retry TimeoutExceptions and FooBarExceptions&#xA;    -&amp;gt;retry(3, 500, [TimeoutException::class, FooBarException::class])&#xA;    -&amp;gt;run(function() {&#xA;        //&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or pass through your own method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Flaky::make(&#39;my-flaky-code&#39;)&#xA;    -&amp;gt;allowFailuresForAnHour()&#xA;    // Pass through your own $when callback&#xA;    -&amp;gt;retry(3, 500, function($exception) {&#xA;        // &#xA;    })&#xA;    -&amp;gt;run(function() {&#xA;        //&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessing the result&lt;/h2&gt; &#xA;&lt;p&gt;Flaky will return a &lt;code&gt;Result&lt;/code&gt; class for your use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$result = Flaky::make(&#39;my-flaky-code&#39;)&#xA;    -&amp;gt;allowFailuresForAnHour()&#xA;    -&amp;gt;run(function() {&#xA;        return 1;&#xA;    });&#xA;&#xA;$result-&amp;gt;value; // 1&#xA;$result-&amp;gt;failed; // false&#xA;$result-&amp;gt;succeeded; // true&#xA;$result-&amp;gt;exception; // null. Would be populated if an exception was thrown.&#xA;$result-&amp;gt;throw(); // Throws an exception if present. Is a noop if not.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flaky Commands&lt;/h2&gt; &#xA;&lt;p&gt;If you have entire commands that are Flaky, you can use the &lt;code&gt;FlakyCommand&lt;/code&gt; class as a convenience.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class FlakyTestCommand extends Command&#xA;{&#xA;    protected $signature = &#39;flaky {--arg=} {--flag}&#39;;&#xA;&#xA;    public function handle()&#xA;    {&#xA;        FlakyCommand::make($this)&#xA;            -&amp;gt;allowFailuresForAnHour()&#xA;            -&amp;gt;run([$this, &#39;process&#39;]);&#xA;    }&#xA;&#xA;    public function process()&#xA;    {&#xA;        throw new Exception(&#39;oops&#39;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will now have Flaky protections, but &lt;em&gt;only&lt;/em&gt; when invoked by the scheduler. If you run this command manually, Flaky is not engaged and you&#39;ll get all the exceptions as you would have otherwise.&lt;/p&gt; &#xA;&lt;h3&gt;Flaky Command IDs&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;FlakyCommand::make($this)&lt;/code&gt; call will set the unique Flaky ID for you, based on the command&#39;s signature. By default, every invocation of an command is treated under the same key. If you want to vary that based on user input, you can use the &lt;code&gt;varyOnInput&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class FlakyTestCommand extends Command&#xA;{&#xA;    protected $signature = &#39;flaky {--arg=} {--flag}&#39;;&#xA;&#xA;    public function handle()&#xA;    {&#xA;        FlakyCommand::make($this)&#xA;            -&amp;gt;allowFailuresForAnHour()&#xA;            // Consider the `arg` and `flag` input when creating the unique ID.&#xA;            -&amp;gt;varyOnInput()&#xA;            -&amp;gt;run([$this, &#39;process&#39;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to vary on particular input instead of all the input, you can pass an array of keys. This is useful for when each &lt;code&gt;--arg&lt;/code&gt; should have its own flaky protections, but varying the &lt;code&gt;--flag&lt;/code&gt; shouldn&#39;t create a unique set of protections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class FlakyTestCommand extends Command&#xA;{&#xA;    protected $signature = &#39;flaky {--arg=} {--flag}&#39;;&#xA;&#xA;    public function handle()&#xA;    {&#xA;        FlakyCommand::make($this)&#xA;            -&amp;gt;allowFailuresForAnHour()&#xA;            // Consider only the `arg` input when creating the unique ID.&#xA;            -&amp;gt;varyOnInput([&#39;arg&#39;])&#xA;            -&amp;gt;run([$this, &#39;process&#39;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>lacodix/laravel-model-filter</title>
    <updated>2023-03-07T01:43:24Z</updated>
    <id>tag:github.com,2023-03-07:/lacodix/laravel-model-filter</id>
    <link href="https://github.com/lacodix/laravel-model-filter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Offers an simple way to filter and search eloquent models by array parameters and query strings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;laravel-model-filter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/lacodix/laravel-model-filter&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/lacodix/laravel-model-filter.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lacodix/laravel-model-filter/actions?query=workflow%3Atest+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/lacodix/laravel-model-filter/test.yaml?branch=master&amp;amp;label=tests&amp;amp;style=flat-square&#34; alt=&#34;GitHub Tests Action Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lacodix/laravel-model-filter/actions?query=workflow%3Astyle+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/lacodix/laravel-model-filter/style.yaml?branch=master&amp;amp;label=code%20style&amp;amp;style=flat-square&#34; alt=&#34;GitHub Code Style Action Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/lacodix/laravel-model-filter&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/lacodix/laravel-model-filter.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package allows you to filter, search and sort models while fetching from database with ease. It contains additional functionality to use query strings to filter, search and sort.&lt;/p&gt; &#xA;&lt;p&gt;Once installed you can filter, search and sort Models. You can create own filters based on our base filters, create individual filters, or use one of the predefined ready to use filters like TrashedFilter.&lt;/p&gt; &#xA;&lt;p&gt;Additionally you can use the visualisation functionality of filters.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the entire documentation for this package on &lt;a href=&#34;https://www.lacodix.de/docs/laravel-model-filter&#34;&gt;our documentation site&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require lacodix/laravel-model-filter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Filter&lt;/h3&gt; &#xA;&lt;p&gt;Create your first filter&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan make:filter CreatedAfterFilter --type=date --field=created_at&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Set the filter mode&#xA;// App\Models\Filters\CreatedAfterFilter&#xA;public FilterMode $mode = FilterMode::GREATER_OR_EQUAL;&#xA;&#xA;// Apply this filter and the HasFilters trait to a Model&#xA;// App\Models\Post&#xA;use HasFilters;&#xA;protected array $filters = [&#xA;    CreatedAfterFilter::class,&#xA;];&#xA;&#xA;// Somwhere in a controller, select all posts created after 1st of January 2023&#xA;Post::filter([&#39;created_after_filter&#39; =&amp;gt; &#39;2023-01-01&#39;])-&amp;gt;get();&#xA;&#xA;// Do the same via query string by calling&#xA;// this url: https://.../posts?created_after_filter=2023-01-01&#xA;Post::filterByQueryString()-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// add searchable fields and the IsSearchable trait to Model:&#xA;// App\Models\Post&#xA;use IsSearchable;&#xA;protected array $searchable = [&#xA;    &#39;title&#39;,&#xA;    &#39;content&#39;,&#xA;];&#xA;&#xA;// Somewhere in controller, find all posts that contain &#34;test&#34; in title or content&#xA;Post::search(&#39;test&#39;)-&amp;gt;get();&#xA;&#xA;// Do the same via query string by calling&#xA;// this url: https://.../posts?search=test&#xA;Post::searchByQueryString()-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Visualize&lt;/h3&gt; &#xA;&lt;p&gt;All filters have a blade template that can visualize the filter with one or multiple input fields. To visualize all filters of a dedicated model you can use a blade component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;x-lacodix-filter::model-filters :model=&#34;Post::class&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grouping&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you don&#39;t need all of the filters for all parts of a web application. Maybe there shall be different filters be available to the backend as in the frontend, or different user types shall be able to use different filters.&lt;/p&gt; &#xA;&lt;p&gt;For such cases this package offers filter grouping when adding filters to models&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected array $filters = [&#xA;    &#39;frontend&#39; =&amp;gt; [&#xA;        HotFilter::class,&#xA;    ],&#xA;    &#39;backend&#39; =&amp;gt; [&#xA;        CreatedAfterFilter::class,&#xA;        PublishedFilter::class,&#xA;    ]&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The groups can be used in the scopes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::filterByQueryString(&#39;frontend&#39;)-&amp;gt;get()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::filter([&#39;hot_filter&#39; =&amp;gt; &#39;hot&#39;], &#39;frontend&#39;)-&amp;gt;get();&#xA;Post::filter([&#39;created_after_filter&#39; =&amp;gt; &#39;2023-01-01&#39;], &#39;backend&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please run the following commands and solve potential problems before committing and think about adding tests for new functionality.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer csfixer:test&#xA;composer rector:test&#xA;composer phpstan:test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/lacodix/laravel-model-filter/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information on what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lacodix&#34;&gt;lacodix&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/lacodix/laravel-model-filter/master/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>