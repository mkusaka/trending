<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-06T01:36:01Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>filp/whoops</title>
    <updated>2023-10-06T01:36:01Z</updated>
    <id>tag:github.com,2023-10-06:/filp/whoops</id>
    <link href="https://github.com/filp/whoops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP errors for cool kids&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;whoops&lt;/h1&gt; &#xA;&lt;p&gt;PHP errors for cool kids&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/filp/whoops&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dm/filp/whoops.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/filp/whoops&#34;&gt;&lt;img src=&#34;http://img.shields.io/packagist/v/filp/whoops.svg?sanitize=true&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/filp/whoops/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/filp/whoops/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status on newer versions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/filp/whoops&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/filp/whoops/badges/quality-score.png?s=6225c36f2a2dd1fdca11ecc7b10b29105c8c62bd&#34; alt=&#34;Scrutinizer Quality Score&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/filp/whoops&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/filp/whoops/badges/coverage.png?s=711feb2069144d252d111b211965ffb19a7d09a8&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/0VQpe96.png&#34; alt=&#34;Whoops!&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;whoops&lt;/strong&gt; is an error handler framework for PHP. Out-of-the-box, it provides a pretty error interface that helps you debug your web projects, but at heart it&#39;s a simple yet powerful stacked error handling system.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flexible, stack-based error handling&lt;/li&gt; &#xA; &lt;li&gt;Stand-alone library with (currently) no required dependencies&lt;/li&gt; &#xA; &lt;li&gt;Simple API for dealing with exceptions, trace frames &amp;amp; their data&lt;/li&gt; &#xA; &lt;li&gt;Includes a pretty rad error page for your webapp projects&lt;/li&gt; &#xA; &lt;li&gt;Includes the ability to &lt;a href=&#34;https://raw.githubusercontent.com/filp/whoops/master/docs/Open%20Files%20In%20An%20Editor.md&#34;&gt;open referenced files directly in your editor and IDE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Includes handlers for different response formats (JSON, XML, SOAP)&lt;/li&gt; &#xA; &lt;li&gt;Easy to extend and integrate with existing libraries&lt;/li&gt; &#xA; &lt;li&gt;Clean, well-structured &amp;amp; tested code-base&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blackfire.io/docs/introduction?utm_source=whoops&amp;amp;utm_medium=github_readme&amp;amp;utm_campaign=logo&#34;&gt;&lt;img src=&#34;https://i.imgur.com/zR8rsqk.png&#34; alt=&#34;Blackfire.io&#34; width=&#34;254&#34; height=&#34;64&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;If you use Laravel 4, Laravel 5.5+ or &lt;a href=&#34;https://docs.mezzio.dev/mezzio/&#34;&gt;Mezzio&lt;/a&gt;, you already have Whoops. There are also community-provided instructions on how to integrate Whoops into &lt;a href=&#34;https://github.com/whoops-php/silex-1&#34;&gt;Silex 1&lt;/a&gt;, &lt;a href=&#34;https://github.com/texthtml/whoops-silex&#34;&gt;Silex 2&lt;/a&gt;, &lt;a href=&#34;https://github.com/whoops-php/phalcon&#34;&gt;Phalcon&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/hugomrdias/5169713#file-start-php&#34;&gt;Laravel 3&lt;/a&gt;, &lt;a href=&#34;https://github.com/GrahamCampbell/Laravel-Exceptions&#34;&gt;Laravel 5&lt;/a&gt;, &lt;a href=&#34;https://github.com/dereuromark/cakephp-whoops/tree/cake3&#34;&gt;CakePHP 3&lt;/a&gt;, &lt;a href=&#34;https://github.com/dereuromark/cakephp-whoops&#34;&gt;CakePHP 4&lt;/a&gt;, &lt;a href=&#34;https://github.com/ghislainf/zf2-whoops&#34;&gt;Zend 2&lt;/a&gt;, &lt;a href=&#34;https://github.com/Ppito/zf3-whoops&#34;&gt;Zend 3&lt;/a&gt;, &lt;a href=&#34;https://github.com/igorsantos07/yii-whoops&#34;&gt;Yii 1&lt;/a&gt;, &lt;a href=&#34;https://github.com/indigophp/fuel-whoops&#34;&gt;FuelPHP&lt;/a&gt;, &lt;a href=&#34;https://github.com/zeuxisoo/php-slim-whoops/&#34;&gt;Slim&lt;/a&gt;, &lt;a href=&#34;https://github.com/texthtml/whoops-pimple&#34;&gt;Pimple&lt;/a&gt;, &lt;a href=&#34;https://github.com/Ppito/laminas-whoops&#34;&gt;Laminas&lt;/a&gt;, or any framework consuming &lt;a href=&#34;https://github.com/thecodingmachine/whoops-stackphp&#34;&gt;StackPHP middlewares&lt;/a&gt; or &lt;a href=&#34;https://github.com/franzliedke/whoops-middleware&#34;&gt;PSR-7 middlewares&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are not using any of these frameworks, here&#39;s a very simple way to install:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;a href=&#34;http://getcomposer.org&#34;&gt;Composer&lt;/a&gt; to install Whoops into your project:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require filp/whoops&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Register the pretty handler in your code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$whoops = new \Whoops\Run;&#xA;$whoops-&amp;gt;pushHandler(new \Whoops\Handler\PrettyPageHandler);&#xA;$whoops-&amp;gt;register();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more options, have a look at the &lt;strong&gt;example files&lt;/strong&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/filp/whoops/master/examples&#34;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; to get a feel for how things work. Also take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/filp/whoops/master/docs/API%20Documentation.md&#34;&gt;API Documentation&lt;/a&gt; and the list of available handlers below.&lt;/p&gt; &#xA;&lt;p&gt;You may also want to override some system calls Whoops does. To do that, extend &lt;code&gt;Whoops\Util\SystemFacade&lt;/code&gt;, override functions that you want and pass it as the argument to the &lt;code&gt;Run&lt;/code&gt; constructor.&lt;/p&gt; &#xA;&lt;p&gt;You may also collect the HTML generated to process it yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$whoops = new \Whoops\Run;&#xA;$whoops-&amp;gt;allowQuit(false);&#xA;$whoops-&amp;gt;writeToOutput(false);&#xA;$whoops-&amp;gt;pushHandler(new \Whoops\Handler\PrettyPageHandler);&#xA;$html = $whoops-&amp;gt;handleException($e);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available Handlers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;whoops&lt;/strong&gt; currently ships with the following built-in handlers, available in the &lt;code&gt;Whoops\Handler&lt;/code&gt; namespace:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/filp/whoops/raw/master/src/Whoops/Handler/PrettyPageHandler.php&#34;&gt;&lt;code&gt;PrettyPageHandler&lt;/code&gt;&lt;/a&gt; - Shows a pretty error page when something goes pants-up&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/filp/whoops/raw/master/src/Whoops/Handler/PlainTextHandler.php&#34;&gt;&lt;code&gt;PlainTextHandler&lt;/code&gt;&lt;/a&gt; - Outputs plain text message for use in CLI applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/filp/whoops/raw/master/src/Whoops/Handler/CallbackHandler.php&#34;&gt;&lt;code&gt;CallbackHandler&lt;/code&gt;&lt;/a&gt; - Wraps a closure or other callable as a handler. You do not need to use this handler explicitly, &lt;strong&gt;whoops&lt;/strong&gt; will automatically wrap any closure or callable you pass to &lt;code&gt;Whoops\Run::pushHandler&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/filp/whoops/raw/master/src/Whoops/Handler/JsonResponseHandler.php&#34;&gt;&lt;code&gt;JsonResponseHandler&lt;/code&gt;&lt;/a&gt; - Captures exceptions and returns information on them as a JSON string. Can be used to, for example, play nice with AJAX requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/filp/whoops/raw/master/src/Whoops/Handler/XmlResponseHandler.php&#34;&gt;&lt;code&gt;XmlResponseHandler&lt;/code&gt;&lt;/a&gt; - Captures exceptions and returns information on them as a XML string. Can be used to, for example, play nice with AJAX requests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use pluggable handlers, such as &lt;a href=&#34;https://github.com/whoops-php/soap&#34;&gt;SOAP handler&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;This library was primarily developed by &lt;a href=&#34;https://github.com/filp&#34;&gt;Filipe Dobreira&lt;/a&gt;, and is currently maintained by &lt;a href=&#34;https://github.com/denis-sokolov&#34;&gt;Denis Sokolov&lt;/a&gt;. A lot of awesome fixes and enhancements were also sent in by &lt;a href=&#34;https://github.com/filp/whoops/contributors&#34;&gt;various contributors&lt;/a&gt;. Special thanks to &lt;a href=&#34;https://github.com/GrahamCampbell&#34;&gt;Graham Campbell&lt;/a&gt; and &lt;a href=&#34;https://github.com/staabm&#34;&gt;Markus Staab&lt;/a&gt; for continuous participation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>endroid/qr-code</title>
    <updated>2023-10-06T01:36:01Z</updated>
    <id>tag:github.com,2023-10-06:/endroid/qr-code</id>
    <link href="https://github.com/endroid/qr-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;QR Code Generator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;QR Code&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;By &lt;a href=&#34;https://endroid.nl/&#34;&gt;endroid&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/endroid/qr-code&#34;&gt;&lt;img src=&#34;http://img.shields.io/packagist/v/endroid/qr-code.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/endroid/qr-code/actions&#34;&gt;&lt;img src=&#34;https://github.com/endroid/qr-code/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/endroid/qr-code&#34;&gt;&lt;img src=&#34;http://img.shields.io/packagist/dt/endroid/qr-code.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/endroid/qr-code&#34;&gt;&lt;img src=&#34;http://img.shields.io/packagist/dm/endroid/qr-code.svg?sanitize=true&#34; alt=&#34;Monthly Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/endroid/qr-code&#34;&gt;&lt;img src=&#34;http://img.shields.io/packagist/l/endroid/qr-code.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library helps you generate QR codes in a jiffy. Makes use of &lt;a href=&#34;https://github.com/Bacon/BaconQrCode&#34;&gt;bacon/bacon-qr-code&lt;/a&gt; to generate the matrix and &lt;a href=&#34;https://github.com/khanamiryan/php-qrcode-detector-decoder&#34;&gt;khanamiryan/qrcode-detector-decoder&lt;/a&gt; for validating generated QR codes. Further extended with Twig extensions, generation routes, a factory and a Symfony bundle for easy installation and configuration. Different writers are provided to generate the QR code as PNG, SVG, EPS or in binary format.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsored by&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.blackfire.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/endroid/qr-code/master/assets/blackfire.png&#34; alt=&#34;Blackfire.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; to install the library. Also make sure you have enabled and configured the &lt;a href=&#34;https://www.php.net/manual/en/book.image.php&#34;&gt;GD extension&lt;/a&gt; if you want to generate images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; composer require endroid/qr-code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage: using the builder&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Endroid\QrCode\Builder\Builder;&#xA;use Endroid\QrCode\Encoding\Encoding;&#xA;use Endroid\QrCode\ErrorCorrectionLevel;&#xA;use Endroid\QrCode\Label\LabelAlignment;&#xA;use Endroid\QrCode\Label\Font\NotoSans;&#xA;use Endroid\QrCode\RoundBlockSizeMode;&#xA;use Endroid\QrCode\Writer\PngWriter;&#xA;&#xA;$result = Builder::create()&#xA;    -&amp;gt;writer(new PngWriter())&#xA;    -&amp;gt;writerOptions([])&#xA;    -&amp;gt;data(&#39;Custom QR code contents&#39;)&#xA;    -&amp;gt;encoding(new Encoding(&#39;UTF-8&#39;))&#xA;    -&amp;gt;errorCorrectionLevel(ErrorCorrectionLevel::High)&#xA;    -&amp;gt;size(300)&#xA;    -&amp;gt;margin(10)&#xA;    -&amp;gt;roundBlockSizeMode(RoundBlockSizeMode::Margin)&#xA;    -&amp;gt;logoPath(__DIR__.&#39;/assets/symfony.png&#39;)&#xA;    -&amp;gt;logoResizeToWidth(50)&#xA;    -&amp;gt;logoPunchoutBackground(true)&#xA;    -&amp;gt;labelText(&#39;This is the label&#39;)&#xA;    -&amp;gt;labelFont(new NotoSans(20))&#xA;    -&amp;gt;labelAlignment(LabelAlignment::Center)&#xA;    -&amp;gt;validateResult(false)&#xA;    -&amp;gt;build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage: without using the builder&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Endroid\QrCode\Color\Color;&#xA;use Endroid\QrCode\Encoding\Encoding;&#xA;use Endroid\QrCode\ErrorCorrectionLevel;&#xA;use Endroid\QrCode\QrCode;&#xA;use Endroid\QrCode\Label\Label;&#xA;use Endroid\QrCode\Logo\Logo;&#xA;use Endroid\QrCode\RoundBlockSizeMode;&#xA;use Endroid\QrCode\Writer\PngWriter;&#xA;use Endroid\QrCode\Writer\ValidationException;&#xA;&#xA;$writer = new PngWriter();&#xA;&#xA;// Create QR code&#xA;$qrCode = QrCode::create(&#39;Life is too short to be generating QR codes&#39;)&#xA;    -&amp;gt;setEncoding(new Encoding(&#39;UTF-8&#39;))&#xA;    -&amp;gt;setErrorCorrectionLevel(ErrorCorrectionLevel::Low)&#xA;    -&amp;gt;setSize(300)&#xA;    -&amp;gt;setMargin(10)&#xA;    -&amp;gt;setRoundBlockSizeMode(RoundBlockSizeMode::Margin)&#xA;    -&amp;gt;setForegroundColor(new Color(0, 0, 0))&#xA;    -&amp;gt;setBackgroundColor(new Color(255, 255, 255));&#xA;&#xA;// Create generic logo&#xA;$logo = Logo::create(__DIR__.&#39;/assets/symfony.png&#39;)&#xA;    -&amp;gt;setResizeToWidth(50)&#xA;    -&amp;gt;setPunchoutBackground(true)&#xA;;&#xA;&#xA;// Create generic label&#xA;$label = Label::create(&#39;Label&#39;)&#xA;    -&amp;gt;setTextColor(new Color(255, 0, 0));&#xA;&#xA;$result = $writer-&amp;gt;write($qrCode, $logo, $label);&#xA;&#xA;// Validate the result&#xA;$writer-&amp;gt;validateResult($result, &#39;Life is too short to be generating QR codes&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage: working with results&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;// Directly output the QR code&#xA;header(&#39;Content-Type: &#39;.$result-&amp;gt;getMimeType());&#xA;echo $result-&amp;gt;getString();&#xA;&#xA;// Save it to a file&#xA;$result-&amp;gt;saveToFile(__DIR__.&#39;/qrcode.png&#39;);&#xA;&#xA;// Generate a data URI to include image data inline (i.e. inside an &amp;lt;img&amp;gt; tag)&#xA;$dataUri = $result-&amp;gt;getDataUri();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/endroid/qr-code/master/assets/example.png&#34; alt=&#34;QR Code&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Writer options&lt;/h3&gt; &#xA;&lt;p&gt;Some writers provide writer options. Each available writer option is can be found as a constant prefixed with WRITER_OPTION_ in the writer class.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PdfWriter&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;unit&lt;/code&gt;: unit of measurement (default: mm)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;fpdf&lt;/code&gt;: PDF to place the image in (default: new PDF)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;x&lt;/code&gt;: image offset (default: 0)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;y&lt;/code&gt;: image offset (default: 0)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;link&lt;/code&gt;: a URL or an identifier returned by &lt;code&gt;AddLink()&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PngWriter&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;compression_level&lt;/code&gt;: compression level (0-9, default: -1 = zlib default)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SvgWriter&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;block_id&lt;/code&gt;: id of the block element for external reference (default: block)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;exclude_xml_declaration&lt;/code&gt;: exclude XML declaration (default: false)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;exclude_svg_width_and_height&lt;/code&gt;: exclude width and height (default: false)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;force_xlink_href&lt;/code&gt;: forces xlink namespace in case of compatibility issues (default: false)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WebPWriter&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;quality&lt;/code&gt;: image quality (0-100, default: 80)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can provide any writer options like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Endroid\QrCode\Writer\SvgWriter;&#xA;&#xA;$builder-&amp;gt;writerOptions([&#xA;    SvgWriter::WRITER_OPTION_EXCLUDE_XML_DECLARATION =&amp;gt; true&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encoding&lt;/h3&gt; &#xA;&lt;p&gt;If you use a barcode scanner you can have some troubles while reading the generated QR codes. Depending on the encoding you chose you will have an extra amount of data corresponding to the ECI block. Some barcode scanner are not programmed to interpret this block of information. To ensure a maximum compatibility you can use the &lt;code&gt;ISO-8859-1&lt;/code&gt; encoding that is the default encoding used by barcode scanners (if your character set supports it, i.e. no Chinese characters are present).&lt;/p&gt; &#xA;&lt;h3&gt;Round block size mode&lt;/h3&gt; &#xA;&lt;p&gt;By default block sizes are rounded to guarantee sharp images and improve readability. However some other rounding variants are available.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;margin (default)&lt;/code&gt;: the size of the QR code is shrunk if necessary but the size of the final image remains unchanged due to additional margin being added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enlarge&lt;/code&gt;: the size of the QR code and the final image are enlarged when rounding differences occur.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shrink&lt;/code&gt;: the size of the QR code and the final image are shrunk when rounding differences occur.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;none&lt;/code&gt;: No rounding. This mode can be used when blocks don&#39;t need to be rounded to pixels (for instance SVG).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Readability&lt;/h2&gt; &#xA;&lt;p&gt;The readability of a QR code is primarily determined by the size, the input length, the error correction level and any possible logo over the image so you can tweak these parameters if you are looking for optimal results. You can also check $qrCode-&amp;gt;getRoundBlockSize() value to see if block dimensions are rounded so that the image is more sharp and readable. Please note that rounding block size can result in additional padding to compensate for the rounding difference. And finally the encoding (default UTF-8 to support large character sets) can be set to &lt;code&gt;ISO-8859-1&lt;/code&gt; if possible to improve readability.&lt;/p&gt; &#xA;&lt;h2&gt;Validating the generated QR code&lt;/h2&gt; &#xA;&lt;p&gt;If you need to be extra sure the QR code you generated is readable and contains the exact data you requested you can enable the validation reader, which is disabled by default. You can do this either via the builder or directly on any writer that supports validation. See the examples above.&lt;/p&gt; &#xA;&lt;p&gt;Please note that validation affects performance so only use it in case of problems.&lt;/p&gt; &#xA;&lt;h2&gt;Symfony integration&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/endroid/qr-code-bundle&#34;&gt;endroid/qr-code-bundle&lt;/a&gt; integrates the QR code library in Symfony for an even better experience.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configure your defaults (like image size, default writer etc.)&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple configurations and injection via aliases&lt;/li&gt; &#xA; &lt;li&gt;Generate QR codes for defined configurations via URL like /qr-code/&#xA;  &lt;config&gt;&#xA;   /Hello&#xA;  &lt;/config&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generate QR codes or URLs directly from Twig using dedicated functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://github.com/endroid/qr-code-bundle&#34;&gt;bundle documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Version numbers follow the MAJOR.MINOR.PATCH scheme. Backwards compatibility breaking changes will be kept to a minimum but be aware that these can occur. Lock your dependencies for production and test your code when upgrading.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This bundle is under the MIT license. For the full copyright and license information please view the LICENSE file that was distributed with this source code.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>phpmd/phpmd</title>
    <updated>2023-10-06T01:36:01Z</updated>
    <id>tag:github.com,2023-10-06:/phpmd/phpmd</id>
    <link href="https://github.com/phpmd/phpmd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHPMD is a spin-off project of PHP Depend and aims to be a PHP equivalent of the well known Java tool PMD. PHPMD can be seen as an user friendly frontend application for the raw metrics stream measured by PHP Depend.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHPMD&lt;/h1&gt; &#xA;&lt;p&gt;PHPMD is a spin-off project of PHP Depend and aims to be a PHP equivalent of the well known Java tool PMD. PHPMD can be seen as an user friendly frontend application for the raw metrics stream measured by PHP Depend.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://phpmd.org&#34;&gt;https://phpmd.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://poser.pugx.org/phpmd/phpmd/v/stable.svg&#34;&gt;https://poser.pugx.org/phpmd/phpmd/v/stable.svg&lt;/a&gt; :target: &lt;a href=&#34;https://packagist.org/packages/phpmd/phpmd&#34;&gt;https://packagist.org/packages/phpmd/phpmd&lt;/a&gt; :alt: Latest Stable Version&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://poser.pugx.org/phpmd/phpmd/license.svg&#34;&gt;https://poser.pugx.org/phpmd/phpmd/license.svg&lt;/a&gt; :target: &lt;a href=&#34;https://packagist.org/packages/phpmd/phpmd&#34;&gt;https://packagist.org/packages/phpmd/phpmd&lt;/a&gt; :alt: License&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://ci.appveyor.com/api/projects/status/pc08owbun2y00kwk?svg=true&#34;&gt;https://ci.appveyor.com/api/projects/status/pc08owbun2y00kwk?svg=true&lt;/a&gt; :target: &lt;a href=&#34;https://ci.appveyor.com/project/phpmd/phpmd&#34;&gt;https://ci.appveyor.com/project/phpmd/phpmd&lt;/a&gt; :alt: AppVeyor Build Status&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://codecov.io/gh/phpmd/phpmd/branch/master/graph/badge.svg?token=XrBrvTLJeE&#34;&gt;https://codecov.io/gh/phpmd/phpmd/branch/master/graph/badge.svg?token=XrBrvTLJeE&lt;/a&gt; :target: &lt;a href=&#34;https://codecov.io/gh/phpmd/phpmd&#34;&gt;https://codecov.io/gh/phpmd/phpmd&lt;/a&gt; :alt: Codecov Status&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://scrutinizer-ci.com/g/phpmd/phpmd/badges/build.png?b=master&#34;&gt;https://scrutinizer-ci.com/g/phpmd/phpmd/badges/build.png?b=master&lt;/a&gt; :target: &lt;a href=&#34;https://scrutinizer-ci.com/g/phpmd/phpmd/build-status/master&#34;&gt;https://scrutinizer-ci.com/g/phpmd/phpmd/build-status/master&lt;/a&gt; :alt: Scrutinizer Build Status&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://scrutinizer-ci.com/g/phpmd/phpmd/badges/quality-score.png?b=master&#34;&gt;https://scrutinizer-ci.com/g/phpmd/phpmd/badges/quality-score.png?b=master&lt;/a&gt; :target: &lt;a href=&#34;https://scrutinizer-ci.com/g/phpmd/phpmd/?branch=master&#34;&gt;https://scrutinizer-ci.com/g/phpmd/phpmd/?branch=master&lt;/a&gt; :alt: Scrutinizer Code Quality&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://badges.gitter.im/phpmd/community.svg&#34;&gt;https://badges.gitter.im/phpmd/community.svg&lt;/a&gt; :target: &lt;a href=&#34;https://gitter.im/phpmd/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;https://gitter.im/phpmd/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&lt;/a&gt; :alt: Chat with us on Gitter&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://poser.pugx.org/phpmd/phpmd/d/monthly&#34;&gt;https://poser.pugx.org/phpmd/phpmd/d/monthly&lt;/a&gt; :target: &lt;a href=&#34;https://packagist.org/packages/phpmd/phpmd&#34;&gt;https://packagist.org/packages/phpmd/phpmd&lt;/a&gt; :alt: Monthly downloads&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://poser.pugx.org/phpmd/phpmd/downloads&#34;&gt;https://poser.pugx.org/phpmd/phpmd/downloads&lt;/a&gt; :target: &lt;a href=&#34;https://packagist.org/packages/phpmd/phpmd&#34;&gt;https://packagist.org/packages/phpmd/phpmd&lt;/a&gt; :alt: Total downloads&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://phpmd.org/download/index.html&#34;&gt;https://phpmd.org/download/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Command line usage&lt;/h2&gt; &#xA;&lt;p&gt;Type &lt;code&gt;phpmd [filename|directory[,filename|directory[,...]]] [report format] [ruleset file]&lt;/code&gt;, i.e: ::&lt;/p&gt; &#xA;&lt;p&gt;mapi@arwen ~ $ phpmd php/PDepend/DbusUI/ xml rulesets.xml&lt;/p&gt; &#xA;&lt;p&gt;While the &lt;code&gt;rulesets.xml&lt;/code&gt; ruleset file could look like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: xml&lt;/p&gt; &#xA;&lt;!--?xml version=&#34;1.0&#34;?--&gt; &#xA;&lt;p&gt;&#xA; &lt;ruleset name=&#34;My first PHPMD rule set&#34; xmlns=&#34;http://pmd.sf.net/ruleset/1.0.0&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:schemalocation=&#34;http://pmd.sf.net/ruleset/1.0.0&#xA;http://pmd.sf.net/ruleset_xml_schema.xsd&#34; xsi:nonamespaceschemalocation=&#34;&#xA;http://pmd.sf.net/ruleset_xml_schema.xsd&#34;&gt; &#xA;  &lt;description&gt;&#xA;    My custom rule set that checks my code... &#xA;  &lt;/description&gt;&#xA; &lt;/ruleset&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;rule ref=&#34;rulesets/codesize.xml&#34; /&amp;gt;&#xA;&amp;lt;rule ref=&#34;rulesets/cleancode.xml&#34; /&amp;gt;&#xA;&amp;lt;rule ref=&#34;rulesets/controversial.xml&#34; /&amp;gt;&#xA;&amp;lt;rule ref=&#34;rulesets/design.xml&#34; /&amp;gt;&#xA;&amp;lt;rule ref=&#34;rulesets/naming.xml&#34; /&amp;gt;&#xA;&amp;lt;rule ref=&#34;rulesets/unusedcode.xml&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;  &#xA;&lt;p&gt;The xml report would like like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: xml&lt;/p&gt; &#xA;&lt;!--?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?--&gt; &#xA;&lt;pmd version=&#34;0.0.1&#34; timestamp=&#34;2009-12-19T22:17:18+01:00&#34;&gt; &#xA; &lt;file name=&#34;/projects/pdepend/PHP/Depend/DbusUI/ResultPrinter.php&#34;&gt; &#xA;  &lt;violation beginline=&#34;81&#34; endline=&#34;81&#34; rule=&#34;UnusedFormalParameter&#34; ruleset=&#34;Unused Code Rules&#34; externalinfourl=&#34;https://phpmd.org/rules/unusedcode.html#unusedformalparameter&#34; priority=&#34;3&#34;&gt;&#xA;    Avoid unused parameters such as &#39;$builder&#39;. &#xA;  &lt;/violation&gt; &#xA; &lt;/file&gt; &#xA;&lt;/pmd&gt; &#xA;&lt;p&gt;You can pass a comma-separated string with list of file names or a directory names, containing PHP source code to PHPMD.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;PHPMD Phar distribution&lt;/code&gt;__ includes the rule set files inside its archive, even if the &#34;rulesets/codesize.xml&#34; parameter above looks like a filesystem reference.&lt;/p&gt; &#xA;&lt;p&gt;__ &lt;a href=&#34;https://phpmd.org/download/index.html&#34;&gt;https://phpmd.org/download/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Command line options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Notice that the default output is in XML, so you can redirect it to a file and XSLT it or whatever&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also use shortened names to refer to the built-in rule sets, like this: ::&lt;/p&gt; &lt;p&gt;phpmd PHP/Depend/DbusUI/ xml codesize&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The command line interface also accepts the following optional arguments:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--verbose, -v, -vv, -vvv&lt;/code&gt; - The output verbosity level. Will print more information what is being processed or cached. Will be send to &lt;code&gt;STDERR&lt;/code&gt; to not interfere with report output. &lt;code&gt;text&lt;/code&gt; output will also have under each error a link to the documentation of the rule and format the location in a way that most IDEs will convert into a link to open the file at the line of the error when clicked.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--minimumpriority&lt;/code&gt; - The rule priority threshold; rules with lower priority than they will not be used.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--reportfile&lt;/code&gt; - Sends the report output to the specified file, instead of the default output target &lt;code&gt;STDOUT&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--suffixes&lt;/code&gt; - Comma-separated string of valid source code filename extensions, e.g. php,phtml.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--exclude&lt;/code&gt; - Comma-separated string of patterns that are used to ignore directories. Use asterisks to exclude by pattern. For example &lt;code&gt;*src/foo/*.php&lt;/code&gt; or &lt;code&gt;*src/foo/*&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--strict&lt;/code&gt; - Also report those nodes with a @SuppressWarnings annotation.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--ignore-errors-on-exit&lt;/code&gt; - will exit with a zero code, even on error.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--ignore-violations-on-exit&lt;/code&gt; - will exit with a zero code, even if any violations are found.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--cache&lt;/code&gt; - will enable the result cache. Will default to &lt;code&gt;.phpmd.result-cache.php&lt;/code&gt; in the current working directory.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--cache-file&lt;/code&gt; - in cooperation with &lt;code&gt;--cache&lt;/code&gt; will override the default result cache file path of &lt;code&gt;.phpmd.result-cache.php&lt;/code&gt; to the given file path.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--cache-strategy&lt;/code&gt; - sets the caching strategy to determine if a file is still fresh. Either &lt;code&gt;content&lt;/code&gt; to base it on the file contents, or &lt;code&gt;timestamp&lt;/code&gt; to base it on the file modified timestamp.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--generate-baseline&lt;/code&gt; - will generate a &lt;code&gt;phpmd.baseline.xml&lt;/code&gt; for existing violations next to the ruleset definition file. The file paths of the violations will be relative to the current working directory.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--update-baseline&lt;/code&gt; - will remove all violations from an existing &lt;code&gt;phpmd.baseline.xml&lt;/code&gt; that no longer exist. New violations will &lt;em&gt;not&lt;/em&gt; be added. The file path of the violations will be relative to the current working directory.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--baseline-file&lt;/code&gt; - the filepath to a custom baseline xml file. If absent will default to &lt;code&gt;phpmd.baseline.xml&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--color&lt;/code&gt; - enable color in output, for instance text renderer will show rule name in yellow and error description in red.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;--extra-line-in-excerpt&lt;/code&gt; - specify how many extra lines are added to a code snippet in html format&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;An example command line: ::&lt;/p&gt; &lt;p&gt;phpmd PHP/Depend/DbusUI xml codesize --reportfile phpmd.xml --suffixes php,phtml&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using multiple rule sets&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;PHPMD uses so called rule sets that configure/define a set of rules which will&#xA;be applied against the source under test. The default distribution of PHPMD is&#xA;already shipped with a few default sets, that can be used out-of-box. You can&#xA;call PHPMD&#39;s cli tool with a set&#39;s name to apply this configuration: ::&#xA;&#xA;  ~ $ phpmd /path/to/source text codesize&#xA;&#xA;But what if you would like to apply more than one rule set against your source?&#xA;You can also pass a list of rule set names, separated by comma to PHPMD&#39;s cli&#xA;tool: ::&#xA;&#xA;  ~ $ phpmd /path/to/source text codesize,unusedcode,naming&#xA;&#xA;You can also mix custom `rule set files`__ with build-in rule sets: ::&#xA;&#xA;  ~ $ phpmd /path/to/source text codesize,/my/rules.xml&#xA;&#xA;__ https://phpmd.org/documentation/creating-a-ruleset.html&#xA;&#xA;That&#39;s it. With this behavior you can specify you own combination of rule sets&#xA;that will check the source code.&#xA;&#xA;Using multiple source files and folders&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PHPMD also allows you to specify multiple source directories in case you want to create one output for certain parts of your code ::&lt;/p&gt; &#xA;&lt;p&gt;~ $ phpmd /path/to/code,index.php,/another/place/with/code text codesize&lt;/p&gt; &#xA;&lt;p&gt;Or use glob pattern: ::&lt;/p&gt; &#xA;&lt;p&gt;~ $ phpmd src/main/php/&lt;em&gt;/&lt;/em&gt;/*{Renderer,Node}.php text my/rules.xml&lt;/p&gt; &#xA;&lt;p&gt;Scan input&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;PHPMD can also read the standard input `stdin`: ::&#xA;&#xA;  ~ $ cat src/MyService.php | phpmd - text my/rules.xml&#xA;&#xA;So the PHP code to be scanned may be generated by an other program&#xA;not necessarily to be store in file.&#xA;&#xA;Exit codes&#xA;----------&#xA;&#xA;PHPMD&#39;s command line tool currently defines four different exit codes.&#xA;&#xA;- *0*, This exit code indicates that everything worked as expected. This means&#xA;  there was no error/exception and PHPMD hasn&#39;t detected any rule violation&#xA;  in the code under test.&#xA;- *1*, This exit code indicates that an exception occurred which has&#xA;  interrupted PHPMD during execution.&#xA;- *2*, This exit code means that PHPMD has processed the code under test&#xA;  without the occurrence of an error/exception, but it has detected rule&#xA;  violations in the analyzed source code. You can also prevent this behaviour&#xA;  with the ``--ignore-violations-on-exit`` flag, which will result to a *0*&#xA;  even if any violations are found.&#xA;- *3*, This exit code means that one or multiple files under test could not&#xA;   be processed because of an error. There may also be violations in other&#xA;   files that could be processed correctly.&#xA;&#xA;Renderers&#xA;---------&#xA;&#xA;At the moment PHPMD comes with the following renderers:&#xA;&#xA;- *xml*, which formats the report as XML.&#xA;- *text*, simple textual format.&#xA;- *html*, single HTML file with possible problems.&#xA;- *json*, formats JSON report.&#xA;- *ansi*, a command line friendly format.&#xA;- *github*, a format that GitHub Actions understands.&#xA;- *gitlab*, a format that GitLab CI understands.&#xA;- *sarif*, the Static Analysis Results Interchange Format.&#xA;- *checkstyle*, language and tool agnostic XML format&#xA;&#xA;Baseline&#xA;--------&#xA;&#xA;For existing projects a violation baseline can be generated. All violations in this baseline will be ignored in further inspections.&#xA;&#xA;The recommended approach would be a ``phpmd.xml`` in the root of the project. To generate the ``phpmd.baseline.xml`` next to it::&#xA;&#xA;  ~ $ phpmd /path/to/source text phpmd.xml --generate-baseline&#xA;&#xA;To specify a custom baseline filepath for export::&#xA;&#xA;  ~ $ phpmd /path/to/source text phpmd.xml --generate-baseline --baseline-file /path/to/source/phpmd.baseline.xml&#xA;&#xA;By default PHPMD will look next to ``phpmd.xml`` for ``phpmd.baseline.xml``. To overwrite this behaviour::&#xA;&#xA;  ~ $ phpmd /path/to/source text phpmd.xml --baseline-file /path/to/source/phpmd.baseline.xml&#xA;&#xA;To clean up an existing baseline file and *only remove* no longer existing violations::&#xA;&#xA;  ~ $ phpmd /path/to/source text phpmd.xml --update-baseline&#xA;&#xA;PHPMD for enterprise&#xA;--------------------&#xA;&#xA;Available as part of the Tidelift Subscription.&#xA;&#xA;The maintainers of ``PHPMD`` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. `Learn more.`__&#xA;&#xA;__ https://tidelift.com/subscription/pkg/packagist-phpmd-phpmd?utm_source=packagist-phpmd-phpmd&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#xA;&#xA;Contributing&#xA;------------&#xA;&#xA;If you want to contribute to PHPMD, please consult the `contribution guide`__.&#xA;&#xA;__ ./.github/CONTRIBUTING.md&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>