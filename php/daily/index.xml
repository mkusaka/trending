<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-19T01:42:25Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bakame-php/http-structured-fields</title>
    <updated>2023-04-19T01:42:25Z</updated>
    <id>tag:github.com,2023-04-19:/bakame-php/http-structured-fields</id>
    <link href="https://github.com/bakame-php/http-structured-fields" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Structured Field Values for HTTP manipulation in PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HTTP Structured Fields for PHP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/nyamsprod&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/author-@nyamsprod-blue.svg?style=flat-square&#34; alt=&#34;Author&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bakame-php/http-structured-fields/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bakame-php/http-structured-fields/actions?query=workflow%3A%22build%22&#34;&gt;&lt;img src=&#34;https://github.com/bakame-php/http-structured-fields/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bakame-php/http-structured-fields/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/bakame-php/http-structured-fields.svg?style=flat-square&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/bakame/http-structured-fields&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/bakame/http-structured-fields.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/nyamsprod&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/sponsor%20this%20package-%E2%9D%A4-ff69b4.svg?style=flat-square&#34; alt=&#34;Sponsor development of this project&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bakame/http-structured-fields&lt;/code&gt; is a framework-agnostic PHP library that allows you to parse, serialize build and update HTTP Structured Fields in PHP according to the &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc8941.html&#34;&gt;RFC8941&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once installed you will be able to do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\InnerList;&#xA;use Bakame\Http\StructuredFields\Item;&#xA;use Bakame\Http\StructuredFields\OuterList;&#xA;use Bakame\Http\StructuredFields\Token;&#xA;&#xA;//1 - parsing an Accept Header&#xA;$headerValue = &#39;text/html, application/xhtml+xml, application/xml;q=0.9, image/webp, */*;q=0.8&#39;;&#xA;$field = OuterList::fromHttpValue($headerValue);&#xA;$field[2]-&amp;gt;value()-&amp;gt;toString(); // returns &#39;application/xml&#39;&#xA;$field[2]-&amp;gt;parameter(&#39;q&#39;);      // returns (float) 0.9&#xA;$field[0]-&amp;gt;value()-&amp;gt;toString(); // returns &#39;text/html&#39;&#xA;$field[0]-&amp;gt;parameter(&#39;q&#39;);      // returns null&#xA;&#xA;//2 - building a Retrofit Cookie Header&#xA;echo OuterList::new(&#xA;        InnerList::fromAssociative([&#39;foo&#39;, &#39;bar&#39;], [&#xA;            &#39;expire&#39; =&amp;gt; $expire,&#xA;            &#39;path&#39; =&amp;gt; &#39;/&#39;,&#xA;            &#39;max-age&#39; =&amp;gt; 2500,&#xA;            &#39;secure&#39; =&amp;gt; true,&#xA;            &#39;httponly&#39; =&amp;gt; true,&#xA;            &#39;samesite&#39; =&amp;gt; BakameToken::fromString(&#39;lax&#39;),&#xA;        ])&#xA;    )&#xA;    -&amp;gt;toHttpValue();&#xA;// returns (&#34;foo&#34; &#34;bar&#34;);expire=@1681504328;path=&#34;/&#34;;max-age=2500;secure;httponly=?0;samesite=lax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PHP &amp;gt;= 8.1&lt;/strong&gt; is required but the latest stable version of PHP is recommended.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require bakame/http-structured-fields&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Foreword&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;While this package parses and serializes the header value, it does not validate its content. It is still required to validate the parsed data against the constraints of the corresponding header. Content validation is out of scope for this library.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Parsing and Serializing Structured Fields&lt;/h3&gt; &#xA;&lt;p&gt;Parsing the header value is done via the &lt;code&gt;fromHttpValue&lt;/code&gt; named constructor. The method is attached to each library&#39;s structured fields representation as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;declare(strict_types=1);&#xA;&#xA;require &#39;vendor/autoload.php&#39;;&#xA;&#xA;use Bakame\Http\StructuredFields\Item;&#xA;&#xA;// the raw HTTP field value is given by your application&#xA;// via any given framework, package or super global.&#xA;&#xA;$headerLine = &#39;bar;baz=42&#39;; //the raw header line is a structured field item&#xA;$field = Item::fromHttpValue($headerLine);&#xA;$field-&amp;gt;value();          // returns Token::fromString(&#39;bar); the found token value &#xA;$field-&amp;gt;parameter(&#39;baz&#39;); // returns 42; the value of the parameter or null if the parameter is not defined.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;fromHttpValue&lt;/code&gt; method returns an instance which implements the &lt;code&gt;StructuredField&lt;/code&gt; interface. The interface provides the &lt;code&gt;toHttpValue&lt;/code&gt; method that serializes it into a normalized RFC compliant HTTP field string value. To ease integration, the &lt;code&gt;__toString&lt;/code&gt; method is implemented as an alias to the &lt;code&gt;toHttpValue&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Item;&#xA;&#xA;$field = Item::fromHttpValue(&#39;bar;    baz=42;     secure=?1&#39;);&#xA;echo $field-&amp;gt;toHttpValue(); // return &#39;bar;baz=42;secure&#39;&#xA;// on serialization the field has been normalized&#xA;&#xA;// the HTTP response is build by your application&#xA;// via any given framework, package or PHP native function.&#xA;&#xA;header(&#39;foo: &#39;. $field-&amp;gt;toHttpValue());&#xA;//or&#xA;header(&#39;foo: &#39;. $field);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All five (5) structured data type as defined in the RFC are provided inside the &lt;code&gt;Bakame\Http\StructuredFields&lt;/code&gt; namespace. They all implement the &lt;code&gt;StructuredField&lt;/code&gt; interface and expose a &lt;code&gt;fromHttpValue&lt;/code&gt; named constructor:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Item&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Parameters&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dictionary&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OuterList&lt;/code&gt; (named &lt;code&gt;List&lt;/code&gt; in the RFC but renamed in the package because &lt;code&gt;list&lt;/code&gt; is a reserved word in PHP.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;InnerList&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Accessing Structured Fields Values&lt;/h3&gt; &#xA;&lt;h4&gt;RFC Value type&lt;/h4&gt; &#xA;&lt;p&gt;Per the RFC, items can have different types that are translated to PHP using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;native type where possible&lt;/li&gt; &#xA; &lt;li&gt;specific classes defined in the package namespace to represent non-native type&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The table below summarizes the item value type.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;RFC Type&lt;/th&gt; &#xA;   &lt;th&gt;PHP Type&lt;/th&gt; &#xA;   &lt;th&gt;Package Enum Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Integer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type::Integer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Decimal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type::Decimal&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type::String&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type::Boolean&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Token&lt;/td&gt; &#xA;   &lt;td&gt;class &lt;code&gt;Token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type::Token&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Byte Sequence&lt;/td&gt; &#xA;   &lt;td&gt;class &lt;code&gt;ByteSequence&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type::ByteSequence&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Date&lt;/td&gt; &#xA;   &lt;td&gt;class &lt;code&gt;DateTimeImmutable&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type::Date&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The RFC define two (2) specific data types that can not be represented by PHP default type system, for them, we have defined two classes &lt;code&gt;Token&lt;/code&gt; and &lt;code&gt;ByteSequence&lt;/code&gt; to help with their representation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Token;&#xA;use Bakame\Http\StructuredFields\ByteSequence;&#xA;&#xA;Token::fromString(string|Stringable $value): Token&#xA;ByteSequence::fromDecoded(string|Stringable $value): ByteSequence;&#xA;ByteSequence::fromEncoded(string|Stringable $value): ByteSequence;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both classes are final and immutable; their value can not be modified once instantiated. To access their value, they expose the following API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Token;&#xA;use Bakame\Http\StructuredFields\ByteSequence;&#xA;&#xA;$token = Token::fromString(&#39;application/text+xml&#39;);&#xA;echo $token-&amp;gt;toString(); // returns &#39;application/text+xml&#39;&#xA;&#xA;$byte = ByteSequence::fromDecoded(&#39;Hello world!&#39;);&#xA;$byte-&amp;gt;decoded(); // returns &#39;Hello world!&#39;&#xA;$byte-&amp;gt;encoded(); // returns &#39;SGVsbG8gd29ybGQh&#39;&#xA;&#xA;$token-&amp;gt;equals($byte); // will return false;&#xA;$byte-&amp;gt;equals(ByteSequence::fromEncoded(&#39;SGVsbG8gd29ybGQh&#39;)); // will return true&#xA;&#xA;$token-&amp;gt;type(); // returns Type::Token enum&#xA;$byte-&amp;gt;type();  // returns Type::ByteSequence&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Both classes DO NOT expose the &lt;code&gt;Stringable&lt;/code&gt; interface to distinguish them from a string or a string like object&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Item&lt;/h4&gt; &#xA;&lt;p&gt;The defined types are all attached to an &lt;code&gt;Item&lt;/code&gt; object where their value and type are accessible using the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Item;&#xA;use Bakame\Http\StructuredFields\Type;&#xA;&#xA;$item = Item::fromHttpValue(&#39;@1234567890&#39;);&#xA;$item-&amp;gt;type();  // return Type::Date;&#xA;$item-&amp;gt;value()  // return the equivalent to DateTimeImmutable(&#39;@1234567890&#39;);&#xA;// you can also do &#xA;Type::Date-&amp;gt;equals($item); // returns true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Containers&lt;/h4&gt; &#xA;&lt;p&gt;All containers objects implement PHP &lt;code&gt;IteratorAggregate&lt;/code&gt;, &lt;code&gt;Countable&lt;/code&gt; and &lt;code&gt;ArrayAccess&lt;/code&gt; interfaces. Their members can be accessed using the following shared methods&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$container-&amp;gt;keys(): array&amp;lt;string|int&amp;gt;;&#xA;$container-&amp;gt;has(string|int ...$offsets): bool;&#xA;$container-&amp;gt;get(string|int $offset): StrucuredField;&#xA;$container-&amp;gt;hasMembers(): bool;&#xA;$container-&amp;gt;hasNoMembers(): bool;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;get&lt;/code&gt; method will throw an &lt;code&gt;InvalidOffset&lt;/code&gt; exception if no member exists for the given &lt;code&gt;$offset&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To avoid invalid states, &lt;code&gt;ArrayAccess&lt;/code&gt; modifying methods throw a &lt;code&gt;ForbiddenOperation&lt;/code&gt; if you try to use them on any container object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Parameters;&#xA;&#xA;$value = Parameters::fromHttpValue(&#39;;a=foobar&#39;]);&#xA;$value-&amp;gt;has(&#39;b&#39;);     // return false&#xA;$value[&#39;a&#39;]-&amp;gt;value(); // return &#39;foobar&#39;&#xA;$value[&#39;b&#39;];          // triggers a SyntaxError exception, the index does not exist&#xA;$value[&#39;a&#39;] = 23      // triggers a ForbiddenOperation exception&#xA;unset($value[&#39;a&#39;]);   // triggers a ForbiddenOperation exception&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Dictionary&lt;/code&gt; and &lt;code&gt;Parameters&lt;/code&gt; classes also allow accessing its members as pairs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$container-&amp;gt;hasPair(int ...$offsets): bool;&#xA;$container-&amp;gt;pair(int $offset): array{0:string, 1:StructuredField};&#xA;$container-&amp;gt;toPairs(): iterable&amp;lt;array{0:string, 1:StructuredField}&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;pair&lt;/code&gt; method will throw an &lt;code&gt;InvalidOffset&lt;/code&gt; exception if no member exists for the given &lt;code&gt;$offset&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Accessing the parameters values&lt;/h4&gt; &#xA;&lt;p&gt;Accessing the associated &lt;code&gt;Parameters&lt;/code&gt; instance attached to an &lt;code&gt;InnerList&lt;/code&gt; or a &lt;code&gt;Item&lt;/code&gt; instances is done using the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\InnerList;&#xA;use Bakame\Http\StructuredFields\Item;&#xA;use Bakame\Http\StructuredFields\Parameters;&#xA;&#xA;$field-&amp;gt;parameter(string $key): ByteSequence|Token|DateTimeImmutable|Stringable|string|int|float|bool|null;&#xA;$field-&amp;gt;parameters(): Parameters;&#xA;InnerList::toPair(): array{0:list&amp;lt;Item&amp;gt;, 1:Parameters}&amp;gt;};&#xA;Item::toPair(): array{0:ByteSequence|Token|DateTimeImmutable|Stringable|string|int|float|bool, 1:Parameters}&amp;gt;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;parameter&lt;/code&gt; method will return &lt;code&gt;null&lt;/code&gt; if no value is found for the given index.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building and Updating Structured Fields Values&lt;/h3&gt; &#xA;&lt;p&gt;Every value object can be used as a builder to create an HTTP field value. Because we are using immutable value objects any change to the value object will return a new instance with the changes applied and leave the original instance unchanged.&lt;/p&gt; &#xA;&lt;h4&gt;Items value&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;Item&lt;/code&gt; value object exposes the following named constructors to instantiate bare items (ie: item without parameters attached to them).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\ByteSequence;&#xA;use Bakame\Http\StructuredFields\Item;&#xA;use Bakame\Http\StructuredFields\Token;&#xA;&#xA;Item:new(DateTimeInterface|ByteSequence|Token|string|int|float|bool $value): self&#xA;Item::fromDecodedByteSequence(Stringable|string $value): self;&#xA;Item::fromEncodedByteSequence(Stringable|string $value): self;&#xA;Item::fromToken(Stringable|string $value): self;&#xA;Item::fromString(Stringable|string $value): self;&#xA;Item::fromDate(DateTimeInterface $datetime): self;&#xA;Item::fromDateFormat(string $format, string $datetime): self;&#xA;Item::fromDateString(string $datetime, DateTimeZone|string|null $timezone = null): self;&#xA;Item::fromTimestamp(int $value): self;&#xA;Item::fromDecimal(int|float $value): self;&#xA;Item::fromInteger(int|float $value): self;&#xA;Item::true(): self;&#xA;Item::false(): self;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update the &lt;code&gt;Item&lt;/code&gt; instance value, use the &lt;code&gt;withValue&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Item;&#xA;&#xA;Item::withValue(DateTimeInterface|ByteSequence|Token|string|int|float|bool $value): static&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dictionaries&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;Dictionary&lt;/code&gt; and &lt;code&gt;Parameters&lt;/code&gt; instances can be build with an associative iterable structure as shown below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Dictionary;&#xA;&#xA;$value = Dictionary::fromAssociative([&#xA;    &#39;b&#39; =&amp;gt; Item::false(),&#xA;    &#39;a&#39; =&amp;gt; Item::fromToken(&#39;bar&#39;),&#xA;    &#39;c&#39; =&amp;gt; new DateTimeImmutable(&#39;2022-12-23 13:00:23&#39;),&#xA;]);&#xA;&#xA;echo $value-&amp;gt;toHttpValue(); //&#34;b=?0, a=bar, c=@1671800423&#34;&#xA;echo $value;                //&#34;b=?0, a=bar, c=@1671800423&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with an iterable structure of pairs (tuple) as defined in the RFC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Parameters;&#xA;use Bakame\Http\StructuredFields\Item;&#xA;&#xA;$value = Parameters::fromPairs(new ArrayIterator([&#xA;    [&#39;b&#39;, Item::false()],&#xA;    [&#39;a&#39;, Item::fromToken(&#39;bar&#39;)],&#xA;    [&#39;c&#39;, new DateTime(&#39;2022-12-23 13:00:23&#39;)]&#xA;]));&#xA;&#xA;echo $value-&amp;gt;toHttpValue(); //;b=?0;a=bar;c=@1671800423&#xA;echo $value;                //;b=?0;a=bar;c=@1671800423&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the preference is to use the builder pattern, the same result can be achieved with the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First create a &lt;code&gt;Parameters&lt;/code&gt; or a &lt;code&gt;Dictionary&lt;/code&gt; instance using the &lt;code&gt;new&lt;/code&gt; named constructor which returns a new instance with no members.&lt;/li&gt; &#xA; &lt;li&gt;And then, use any of the following modifying methods to populate it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$map-&amp;gt;add(string $key, $value): static;&#xA;$map-&amp;gt;append(string $key, $value): static;&#xA;$map-&amp;gt;prepend(string $key, $value): static;&#xA;$map-&amp;gt;mergeAssociative(...$others): static;&#xA;$map-&amp;gt;mergePairs(...$others): static;&#xA;$map-&amp;gt;remove(string ...$key): static;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As shown below: `&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Dictionary;&#xA;use Bakame\Http\StructuredFields\Item;&#xA;use Bakame\Http\StructuredFields\Token;&#xA;&#xA;$value = Dictionary::new()&#xA;    -&amp;gt;add(&#39;a&#39;, InnerList::new(&#xA;        Item::fromToken(&#39;bar&#39;),&#xA;        Item::fromString(&#39;42&#39;),&#xA;        Item::fromInteger(42),&#xA;        Item::fromDecimal(42)&#xA;     ))&#xA;    -&amp;gt;prepend(&#39;b&#39;, Item::false())&#xA;    -&amp;gt;append(&#39;c&#39;, Item::fromDateString(&#39;2022-12-23 13:00:23&#39;))&#xA;;&#xA;&#xA;echo $value-&amp;gt;toHttpValue(); //b=?0, a=(bar &#34;42&#34; 42 42.0), c=@1671800423&#xA;echo $value;                //b=?0, a=(bar &#34;42&#34; 42 42.0), c=@1671800423&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Automatic conversion&lt;/h4&gt; &#xA;&lt;p&gt;For all containers, to ease instantiation the following automatic conversion are applied on the member argument of each modifying methods.&lt;/p&gt; &#xA;&lt;p&gt;If the submitted type is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;code&gt;StructuredField&lt;/code&gt; implementing object, it will be passed as is&lt;/li&gt; &#xA; &lt;li&gt;an iterable structure, it will be converted to an &lt;code&gt;InnerList&lt;/code&gt; instance using &lt;code&gt;InnerList::new&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;otherwise, it is converted into an &lt;code&gt;Item&lt;/code&gt; using &lt;code&gt;Item::new&lt;/code&gt; following the conversion rules explained in the table above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If no conversion is possible an &lt;code&gt;InvalidArgument&lt;/code&gt; exception will be thrown.&lt;/p&gt; &#xA;&lt;p&gt;This means that the previous example can be rewritten like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Dictionary;&#xA;use Bakame\Http\StructuredFields\Item;&#xA;use Bakame\Http\StructuredFields\Token;&#xA;&#xA;$value = Dictionary::new()&#xA;    -&amp;gt;add(&#39;a&#39;, [Token::fromString(&#39;bar&#39;), &#39;42&#39;, 42, 42.0])&#xA;    -&amp;gt;prepend(&#39;b&#39;, false)&#xA;    -&amp;gt;append(&#39;c&#39;, new DateTimeImmutable(&#39;2022-12-23 13:00:23&#39;))&#xA;;&#xA;&#xA;echo $value-&amp;gt;toHttpValue(); //b=?0, a=(bar &#34;42&#34; 42 42.0), c=@1671800423&#xA;echo $value;                //b=?0, a=(bar &#34;42&#34; 42 42.0), c=@1671800423&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, it is possible to mix both notation as shown in the example.&lt;/p&gt; &#xA;&lt;h4&gt;Lists&lt;/h4&gt; &#xA;&lt;p&gt;To create &lt;code&gt;OuterList&lt;/code&gt; and &lt;code&gt;InnerList&lt;/code&gt; instances you can use the &lt;code&gt;new&lt;/code&gt; named constructor which takes a single variadic parameter &lt;code&gt;$members&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\InnerList;&#xA;use Bakame\Http\StructuredFields\ByteSequence;&#xA;&#xA;$list = InnerList::new(&#xA;    ByteSequence::fromDecoded(&#39;Hello World&#39;),&#xA;    42.0,&#xA;    42&#xA;);&#xA;&#xA;echo $list-&amp;gt;toHttpValue(); //&#39;(:SGVsbG8gV29ybGQ=: 42.0 42)&#39;&#xA;echo $list;                //&#39;(:SGVsbG8gV29ybGQ=: 42.0 42)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once again, the builder pattern can be used via a combination of the &lt;code&gt;new&lt;/code&gt; named constructor and the use any of the following modifying methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$list-&amp;gt;unshift(...$members): static;&#xA;$list-&amp;gt;push(...$members): static;&#xA;$list-&amp;gt;insert(int $key, ...$members): static;&#xA;$list-&amp;gt;replace(int $key, $member): static;&#xA;$list-&amp;gt;remove(int ...$key): static;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as shown below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\ByteSequence;&#xA;use Bakame\Http\StructuredFields\InnerList;&#xA;&#xA;$list = InnerList::new()&#xA;    -&amp;gt;unshift(&#39;42&#39;)&#xA;    -&amp;gt;push(42)&#xA;    -&amp;gt;insert(1, 42.0)&#xA;    -&amp;gt;replace(0, ByteSequence::fromDecoded(&#39;Hello World&#39;));&#xA;&#xA;echo $list-&amp;gt;toHttpValue(); //&#39;(:SGVsbG8gV29ybGQ=: 42.0 42)&#39;&#xA;echo $list;                //&#39;(:SGVsbG8gV29ybGQ=: 42.0 42)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adding and updating parameters&lt;/h4&gt; &#xA;&lt;p&gt;To ease working with instances that have a &lt;code&gt;Parameters&lt;/code&gt; object attached to, the following methods are added:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\ByteSequence;&#xA;use Bakame\Http\StructuredFields\InnerList;&#xA;use Bakame\Http\StructuredFields\Item;&#xA;use Bakame\Http\StructuredFields\Token;&#xA;&#xA;//@type SfItemInput ByteSequence|Token|DateTimeInterface|string|int|float|bool&#xA;&#xA;Item::fromAssociative(SfItemInput $value, Parameters|iterable&amp;lt;string, SfItemInput&amp;gt; $parameters): self;&#xA;Item::fromPair(array{0:SfItemInput, 1:Parameters|iterable&amp;lt;array{0:string, 1:SfItemInput}&amp;gt;} $pair): self;&#xA;&#xA;InnerList::fromAssociative(iterable&amp;lt;SfItemInput&amp;gt; $value, Parameters|iterable&amp;lt;string, SfItemInput&amp;gt; $parameters): self;&#xA;InnerList::fromPair(array{0:iterable&amp;lt;SfItemInput&amp;gt;, Parameters|iterable&amp;lt;array{0:string, 1:SfItemInput}&amp;gt;} $pair): self;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following example illustrate how to use those methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Dictionary;&#xA;use Bakame\Http\StructuredFields\Item;&#xA;&#xA;echo Item::fromAssociative(&#xA;        Token::fromString(&#39;bar&#39;),&#xA;        [&#39;baz&#39; =&amp;gt; 42]&#xA;    )-&amp;gt;toHttpValue(), PHP_EOL;&#xA;&#xA;echo Item::fromPair([&#xA;        Token::fromString(&#39;bar&#39;),&#xA;        [[&#39;baz&#39;, 42]],&#xA;    ])-&amp;gt;toHttpValue(), PHP_EOL;&#xA;&#xA;//both methods return `bar;baz=42`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both objects provide additional modifying methods to help deal with parameters. You can attach and update the associated &lt;code&gt;Parameters&lt;/code&gt; instance using the following methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\Parameters;&#xA;&#xA;$field-&amp;gt;addParameter(string $key, mixed $value): static;&#xA;$field-&amp;gt;appendParameter(string $key, mixed $value): static;&#xA;$field-&amp;gt;prependParameter(string $key, mixed $value): static;&#xA;$field-&amp;gt;withoutParameters(string ...$keys): static;&#xA;$field-&amp;gt;withoutAnyParameter(): static;&#xA;$field-&amp;gt;withParameters(Parameters $parameters): static;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The return value will be the parent class an NOT a &lt;code&gt;Parameters&lt;/code&gt; instance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Bakame\Http\StructuredFields\InnerList;&#xA;use Bakame\Http\StructuredFields\Item;&#xA;&#xA;echo InnerList::new(&#39;foo&#39;, &#39;bar&#39;)&#xA;    -&amp;gt;addParameter(&#39;expire&#39;, Item::fromDateString(&#39;+30 minutes&#39;))&#xA;    -&amp;gt;addParameter(&#39;path&#39;, &#39;/&#39;)&#xA;    -&amp;gt;addParameter(&#39;max-age&#39;, 2500)&#xA;    -&amp;gt;toHttpValue();&#xA;&#xA;// return the InnerList HTTP value &#xA;// (&#34;foo&#34; &#34;bar&#34;);expire=@1681538756;path=&#34;/&#34;;max-age=2500&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome and will be fully credited. Please see &lt;a href=&#34;https://raw.githubusercontent.com/bakame-php/http-structured-fields/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/bakame-php/http-structured-fields/master/.github/CODE_OF_CONDUCT.md&#34;&gt;CODE OF CONDUCT&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;has a &lt;a href=&#34;https://phpunit.de&#34;&gt;PHPUnit&lt;/a&gt; test suite&lt;/li&gt; &#xA; &lt;li&gt;has a coding style compliance test suite using &lt;a href=&#34;https://cs.sensiolabs.org/&#34;&gt;PHP CS Fixer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;has a code analysis compliance test suite using &lt;a href=&#34;https://github.com/phpstan/phpstan&#34;&gt;PHPStan&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;is compliant with &lt;a href=&#34;https://github.com/httpwg/structured-field-tests&#34;&gt;the language agnostic HTTP Structured Fields Test suite&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run the tests, run the following command from the project folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover any security related issues, please email &lt;a href=&#34;mailto:nyamsprod@gmail.com&#34;&gt;nyamsprod@gmail.com&lt;/a&gt; instead of using the issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nyamsprod&#34;&gt;ignace nyamagana butera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bakame-php/http-structured-fields/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attribution&lt;/h2&gt; &#xA;&lt;p&gt;The package internal parser is heavily inspired by previous work done by &lt;a href=&#34;https://twitter.com/gappleca&#34;&gt;Gapple&lt;/a&gt; on &lt;a href=&#34;https://github.com/gapple/structured-fields/&#34;&gt;Structured Field Values for PHP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/bakame-php/http-structured-fields/master/LICENSE&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>laravel-zero/laravel-zero</title>
    <updated>2023-04-19T01:42:25Z</updated>
    <id>tag:github.com,2023-04-19:/laravel-zero/laravel-zero</id>
    <link href="https://github.com/laravel-zero/laravel-zero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PHP framework for console artisans&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://supportukrainenow.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner-direct.svg?sanitize=true&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img title=&#34;Laravel Zero&#34; height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/laravel-zero/docs/master/images/logo/laravel-zero-readme.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/laravel-zero/framework/actions&#34;&gt;&lt;img src=&#34;https://github.com/laravel-zero/laravel-zero/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel-zero/framework&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/laravel-zero/framework.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel-zero/framework&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/laravel-zero/framework.svg?label=stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel-zero/framework&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/l/laravel-zero/framework.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h4&gt; &#xA; &lt;center&gt;&#xA;  This is a &#xA;  &lt;bold&gt;&#xA;   community project&#xA;  &lt;/bold&gt; and not an official Laravel one &#xA; &lt;/center&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Laravel Zero was created by &lt;a href=&#34;https://github.com/nunomaduro&#34;&gt;Nuno Maduro&lt;/a&gt; and &lt;a href=&#34;https://github.com/owenvoke&#34;&gt;Owen Voke&lt;/a&gt;, and is a micro-framework that provides an elegant starting point for your console application. It is an &lt;strong&gt;unofficial&lt;/strong&gt; and customized version of Laravel optimized for building command-line applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built on top of the &lt;a href=&#34;https://laravel.com&#34;&gt;Laravel&lt;/a&gt; components.&lt;/li&gt; &#xA; &lt;li&gt;Optional installation of Laravel &lt;a href=&#34;https://laravel-zero.com/docs/database/&#34;&gt;Eloquent&lt;/a&gt;, Laravel &lt;a href=&#34;https://laravel-zero.com/docs/logging/&#34;&gt;Logging&lt;/a&gt; and many others.&lt;/li&gt; &#xA; &lt;li&gt;Supports interactive &lt;a href=&#34;https://laravel-zero.com/docs/build-interactive-menus/&#34;&gt;menus&lt;/a&gt; and &lt;a href=&#34;https://laravel-zero.com/docs/send-desktop-notifications/&#34;&gt;desktop notifications&lt;/a&gt; on Linux, Windows &amp;amp; MacOS.&lt;/li&gt; &#xA; &lt;li&gt;Ships with a &lt;a href=&#34;https://laravel-zero.com/docs/task-scheduling/&#34;&gt;Scheduler&lt;/a&gt; and a &lt;a href=&#34;https://laravel-zero.com/docs/build-a-standalone-application/&#34;&gt;Standalone Compiler&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://github.com/nunomaduro/collision&#34;&gt;Collision&lt;/a&gt; - Beautiful error reporting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For full documentation, visit &lt;a href=&#34;https://laravel-zero.com/&#34;&gt;laravel-zero.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support the development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do you like this project? Support it by donating&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PayPal: &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=66BYDWAT92N6L&#34;&gt;Donate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Patreon: &lt;a href=&#34;https://www.patreon.com/nunomaduro&#34;&gt;Donate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Zero is an open-source software licensed under the MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>