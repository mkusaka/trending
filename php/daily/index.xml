<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-25T01:32:00Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rectorphp/rector</title>
    <updated>2022-06-25T01:32:00Z</updated>
    <id>tag:github.com,2022-06-25:/rectorphp/rector</id>
    <link href="https://github.com/rectorphp/rector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Instant Upgrades and Automated Refactoring of any PHP 5.3+ code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rector - Instant Upgrades and Automated Refactoring&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/rector/rector&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/rector/rector.svg?style=flat-square&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Rector instantly upgrades and refactors the PHP code of your application. It can help you in 2 major areas:&lt;/p&gt; &#xA;&lt;h3&gt;1. Instant Upgrades&lt;/h3&gt; &#xA;&lt;p&gt;Rector now supports upgrades from PHP 5.3 to 8.1 and major open-source projects like &lt;a href=&#34;https://github.com/rectorphp/rector-symfony&#34;&gt;Symfony&lt;/a&gt;, &lt;a href=&#34;https://github.com/rectorphp/rector-phpunit&#34;&gt;PHPUnit&lt;/a&gt;, &lt;a href=&#34;https://github.com/rectorphp/rector-nette&#34;&gt;Nette&lt;/a&gt;, &lt;a href=&#34;https://github.com/rectorphp/rector-laravel&#34;&gt;Laravel&lt;/a&gt;, &lt;a href=&#34;https://github.com/rectorphp/rector-cakephp&#34;&gt;CakePHP&lt;/a&gt; and &lt;a href=&#34;https://github.com/rectorphp/rector-doctrine&#34;&gt;Doctrine&lt;/a&gt;. Do you want to &lt;strong&gt;be constantly on the latest PHP and Framework without effort&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;p&gt;Use Rector to handle &lt;strong&gt;instant upgrades&lt;/strong&gt; for you.&lt;/p&gt; &#xA;&lt;h3&gt;2. Automated Refactoring&lt;/h3&gt; &#xA;&lt;p&gt;Do you have code quality you need, but struggle to keep it with new developers in your team? Do you want to see smart code-reviews even when every senior developers sleeps?&lt;/p&gt; &#xA;&lt;p&gt;Add Rector to your CI and let it &lt;strong&gt;continuously refactor your code&lt;/strong&gt; and keep the code quality high.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Read a First Book About Rector&lt;/h2&gt; &#xA;&lt;p&gt;Are you curious, how Rector works internally, how to create your own rules and test them and why Rector was born? In May 2021 we&#39;ve released the very first book: &lt;em&gt;Rector - The Power of Automated Refactoring&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://leanpub.com/rector-the-power-of-automated-refactoring&#34;&gt; &lt;img src=&#34;https://github.com/rectorphp/the-power-of-automated-refactoring-feedback/raw/main/images/book_title.png&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;By &lt;a href=&#34;https://leanpub.com/rector-the-power-of-automated-refactoring&#34;&gt;buying a book&lt;/a&gt; you directly support maintainers who are working on Rector.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/rector_rules_overview.md&#34;&gt;Explore 500+ Rector Rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/how_to_ignore_rule_or_paths.md&#34;&gt;How to Ignore Rule or Paths&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/static_reflection_and_autoload.md&#34;&gt;Static Reflection and Autoload&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/how_to_configure_rules.md&#34;&gt;How to Configure Rule&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/auto_import_names.md&#34;&gt;Auto Import Names&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Rule Developers and Contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/how_to_add_test_for_rector_rule.md&#34;&gt;How to add Test for Rector Rule&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/how_it_works.md&#34;&gt;How Does Rector Work?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rectorphp/php-parser-nodes-docs/&#34;&gt;PHP Parser Nodes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/how_to_work_with_doc_block_and_comments.md&#34;&gt;How to Work with Doc Block and Comments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/create_own_rule.md&#34;&gt;How to Generate New Rector Rule&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs&#34;&gt;the full documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require rector/rector --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Running Rector&lt;/h2&gt; &#xA;&lt;p&gt;There are 2 main ways to use Rector:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;em&gt;single rule&lt;/em&gt;, to have the change under control&lt;/li&gt; &#xA; &lt;li&gt;or group of rules called &lt;em&gt;sets&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use them, create a &lt;code&gt;rector.php&lt;/code&gt; in your root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/rector init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And modify it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Rector\Php74\Rector\Property\TypedPropertyRector;&#xA;use Rector\Set\ValueObject\SetList;&#xA;use Rector\Config\RectorConfig;&#xA;&#xA;return static function (RectorConfig $rectorConfig): void {&#xA;    // here we can define, what sets of rules will be applied&#xA;    // tip: use &#34;SetList&#34; class to autocomplete sets&#xA;    $rectorConfig-&amp;gt;sets([&#xA;        SetList::CODE_QUALITY&#xA;    ]);&#xA;&#xA;    // register single rule&#xA;    $rectorConfig-&amp;gt;rule(TypedPropertyRector::class);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then dry run Rector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/rector process src --dry-run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rector will show you diff of files that it &lt;em&gt;would&lt;/em&gt; change. To &lt;em&gt;make&lt;/em&gt; the changes, drop &lt;code&gt;--dry-run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/rector process src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;rector.php&lt;/code&gt; is loaded by default. For different location, use &lt;code&gt;--config&lt;/code&gt; option.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Rector will only update legacy code to utilize new features which are supported by the PHP version defined in your &lt;code&gt;composer.json&lt;/code&gt; file. For instance, if require.php is &lt;code&gt;&amp;gt;=7.2.5&lt;/code&gt;, Rector will not make changes which are only available for PHP versions after 7.2.5.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// rector.php&#xA;use Rector\Core\ValueObject\PhpVersion;&#xA;use Rector\Config\RectorConfig;&#xA;&#xA;return static function (RectorConfig $rectorConfig): void {&#xA;    // paths to refactor; solid alternative to CLI arguments&#xA;    $rectorConfig-&amp;gt;paths([__DIR__ . &#39;/src&#39;, __DIR__ . &#39;/tests&#39;]);&#xA;&#xA;    // is your PHP version different from the one you refactor to? [default: your PHP version], uses PHP_VERSION_ID format&#xA;    $rectorConfig-&amp;gt;phpVersion(PhpVersion::PHP_72);&#xA;&#xA;    // Path to PHPStan with extensions, that PHPStan in Rector uses to determine types&#xA;    $rectorConfig-&amp;gt;phpstanConfig(__DIR__ . &#39;/phpstan-for-config.neon&#39;);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Rector is a tool that &lt;a href=&#34;https://getrector.org/&#34;&gt;we develop&lt;/a&gt; and share for free, so anyone can automate their refactoring. But not everyone has dozens of hours to understand complexity of abstract-syntax-tree in their own time. &lt;strong&gt;That&#39;s why we provide commercial support - to save your time&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Would you like to apply Rector on your code base but don&#39;t have time for the struggle with your project? &lt;a href=&#34;https://getrector.org/contact&#34;&gt;Hire us&lt;/a&gt; to get there faster.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/CONTRIBUTING.md&#34;&gt;the contribution guide&lt;/a&gt; or go to development repository &lt;a href=&#34;https://github.com/rectorphp/rector-src&#34;&gt;rector/rector-src&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Projects using Rector&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/codito/rector-money&#34;&gt;&lt;code&gt;codito/rector-money&lt;/code&gt;&lt;/a&gt;: set of rules related to &lt;code&gt;moneyphp/money&lt;/code&gt; library. It can help you with upgrading to v4.0 or make your codebase compatible for future upgrade.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/laminas/laminas-servicemanager-migration&#34;&gt;&lt;code&gt;laminas/laminas-servicemanager-migration&lt;/code&gt;&lt;/a&gt;: set of rules related to &lt;code&gt;laminas-servicemanager&lt;/code&gt; library. It can help migrate your code to laminas-servicemanager 4.x compatibility.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;--debug&lt;/code&gt; option, that will print nested exceptions output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/rector process src/Controller --dry-run --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with Xdebug:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;https://xdebug.org/&#34;&gt;Xdebug&lt;/a&gt; is installed and configured&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;--xdebug&lt;/code&gt; option when running Rector&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/rector process src/Controller --dry-run --xdebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To assist with simple debugging Rector provides 2 helpers to pretty-print AST-nodes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use PhpParser\Node\Scalar\String_;&#xA;&#xA;$node = new String_(&#39;hello world!&#39;);&#xA;&#xA;// prints node to string, as PHP code displays it&#xA;print_node($node);&#xA;&#xA;// dump nested node object with nested properties&#xA;dump_node($node);&#xA;// 2nd argument is how deep the nesting is - this makes sure the dump is short and useful&#xA;dump_node($node, 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Known Drawbacks&lt;/h2&gt; &#xA;&lt;h3&gt;How to Apply Coding Standards?&lt;/h3&gt; &#xA;&lt;p&gt;Rector uses &lt;a href=&#34;https://github.com/nikic/PHP-Parser/&#34;&gt;nikic/php-parser&lt;/a&gt;, built on technology called an &lt;em&gt;abstract syntax tree&lt;/em&gt; (AST). An AST doesn&#39;t know about spaces and when written to a file it produces poorly formatted code in both PHP and docblock annotations. &lt;strong&gt;That&#39;s why your project needs to have a coding standard tool&lt;/strong&gt; and a set of formatting rules, so it can make Rector&#39;s output code nice and shiny again.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re using &lt;a href=&#34;https://github.com/symplify/easy-coding-standard&#34;&gt;ECS&lt;/a&gt; with &lt;a href=&#34;https://github.com/rectorphp/rector-src/raw/main/ecs.php&#34;&gt;this setup&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doctrine/lexer</title>
    <updated>2022-06-25T01:32:00Z</updated>
    <id>tag:github.com,2022-06-25:/doctrine/lexer</id>
    <link href="https://github.com/doctrine/lexer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Base library for a lexer that can be used in Top-Down, Recursive Descent Parsers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Doctrine Lexer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/doctrine/lexer/actions&#34;&gt;&lt;img src=&#34;https://github.com/doctrine/lexer/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Base library for a lexer that can be used in Top-Down, Recursive Descent Parsers.&lt;/p&gt; &#xA;&lt;p&gt;This lexer is used in Doctrine Annotations and in Doctrine ORM (DQL).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.doctrine-project.org/projects/lexer.html&#34;&gt;https://www.doctrine-project.org/projects/lexer.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>symfony/dependency-injection</title>
    <updated>2022-06-25T01:32:00Z</updated>
    <id>tag:github.com,2022-06-25:/symfony/dependency-injection</id>
    <link href="https://github.com/symfony/dependency-injection" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The DependencyInjection component allows you to standardize and centralize the way objects are constructed in your application.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DependencyInjection Component&lt;/h1&gt; &#xA;&lt;p&gt;The DependencyInjection component allows you to standardize and centralize the way objects are constructed in your application.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/doc/current/components/dependency_injection.html&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/doc/current/contributing/index.html&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/symfony/symfony/issues&#34;&gt;Report issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/symfony/symfony/pulls&#34;&gt;send Pull Requests&lt;/a&gt; in the &lt;a href=&#34;https://github.com/symfony/symfony&#34;&gt;main Symfony repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>