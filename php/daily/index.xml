<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-27T01:42:15Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hitrov/oci-arm-host-capacity</title>
    <updated>2023-03-27T01:42:15Z</updated>
    <id>tag:github.com,2023-03-27:/hitrov/oci-arm-host-capacity</id>
    <link href="https://github.com/hitrov/oci-arm-host-capacity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This script allows to bypass Oracle Cloud Infrastructure &#39;Out of host capacity&#39; error immediately when additional OCI capacity will appear in your Home Region / Availability domain.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Resolving Oracle Cloud &#34;Out of Capacity&#34; issue and getting free VPS with 4 ARM cores / 24GB of memory&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/hitrov/oci-arm-host-capacity/actions&#34;&gt;&lt;img src=&#34;https://github.com/hitrov/oci-arm-host-capacity/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/fKZQQStjMN&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/893301913662148658?label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Very neat and useful configuration was recently &lt;a href=&#34;https://blogs.oracle.com/cloud-infrastructure/post/moving-to-ampere-a1-compute-instances-on-oracle-cloud-infrastructure-oci&#34;&gt;announced&lt;/a&gt; at Oracle Cloud Infrastructure (OCI) blog as a part of Always Free tier. Unfortunately, as of July 2021, it&#39;s very complicated to launch an instance due to the &#34;Out of Capacity&#34; error. Here we&#39;re solving that issue as Oracle constantly adds capacity from time to time.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Each tenancy gets the first 3,000 OCPU hours and 18,000 GB hours per month for free to create Ampere A1 Compute instances using the VM.Standard.A1.Flex shape (equivalent to 4 OCPUs and 24 GB of memory).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This approach requires &lt;strong&gt;PHP 7.4 | 8.0 | 8.1 | 8.2&lt;/strong&gt; and &lt;strong&gt;composer&lt;/strong&gt; installed and will call &#34;LaunchInstance&#34; OCI API &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/Instance/LaunchInstance&#34;&gt;endpoint&lt;/a&gt;. We&#39;ll utilise the &lt;a href=&#34;https://packagist.org/packages/hitrov/oci-api-php-request-sign&#34;&gt;package&lt;/a&gt; which I&#39;ve written (and &lt;a href=&#34;https://github.com/hitrov/oci-api-php-request-sign&#34;&gt;published&lt;/a&gt;) some time ago, here&#39;s the &lt;a href=&#34;https://hitrov.medium.com/creating-mini-php-sdk-to-sign-oracle-cloud-infrastructure-api-requests-d91a224c7008?sk=5b4405c1124bfeac30a370630fd94126&#34;&gt;article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer article style, here&#39;s a link to &lt;a href=&#34;https://hitrov.medium.com/resolving-oracle-cloud-out-of-capacity-issue-and-getting-free-vps-with-4-arm-cores-24gb-of-6ecd5ede6fcc?sk=01d761f7cd80c77e0fed773972f4d1a8&#34;&gt;Medium&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;YouTube video instruction &lt;a href=&#34;https://youtu.be/uzAqgjElc64&#34;&gt;https://youtu.be/uzAqgjElc64&lt;/a&gt; is a bit outdated regarding &lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#configuration&#34;&gt;Configuration&lt;/a&gt; but still can be useful for the rest.&lt;/p&gt; &#xA;&lt;p&gt;If you appreciate what I did please consider supporting me on &lt;a href=&#34;https://www.patreon.com/hitrov&#34;&gt;Patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#generating-api-key&#34;&gt;Generating API key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#createcopy-env-file&#34;&gt;Create/copy .env file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#general&#34;&gt;General&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#private-key&#34;&gt;Private key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#instance-parameters&#34;&gt;Instance parameters&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#mandatory&#34;&gt;Mandatory&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#oci_subnet_id-and-oci_image_id&#34;&gt;OCI_SUBNET_ID and OCI_IMAGE_ID&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#oci_ssh_public_key-ssh-access&#34;&gt;OCI_SSH_PUBLIC_KEY (SSH access)&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#running-the-script&#34;&gt;Running the script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#periodic-job-setup-cron&#34;&gt;Periodic job setup (cron)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#linux--wsl&#34;&gt;Linux / WSL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#github-actions-workflows&#34;&gt;GitHub actions (workflows)&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#read-this-carefully&#34;&gt;Read This Carefully&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#how-it-works&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#assigning-public-ip-address&#34;&gt;Assigning public IP address&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#private-key-issues&#34;&gt;Private key issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#ssh-key-issues&#34;&gt;SSH key issues&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#multiple-configuration-support&#34;&gt;Multiple configuration support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Generating API key&lt;/h2&gt; &#xA;&lt;p&gt;After logging in to &lt;a href=&#34;http://cloud.oracle.com/&#34;&gt;OCI Console&lt;/a&gt;, click profile icon and then &#34;User Settings&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/user-settings.png&#34; alt=&#34;User Settings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go to Resources -&amp;gt; API keys, click &#34;Add API Key&#34; button&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/add-api-key.png&#34; alt=&#34;Add API Key&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure &#34;Generate API Key Pair&#34; radio button is selected, click &#34;Download Private Key&#34; and then &#34;Add&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/download-private-key.png&#34; alt=&#34;Download Private Key&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copy the contents from textarea and save it to file with a name &#34;config&#34;. I put it together with *.pem file in newly created directory /home/ubuntu/.oci&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/config-file-preview.png&#34; alt=&#34;Configuration File Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repository&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/hitrov/oci-arm-host-capacity.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd oci-arm-host-capacity/&#xA;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Create/copy .env file&lt;/h3&gt; &#xA;&lt;p&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; as &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must modify &lt;code&gt;.env&lt;/code&gt; file below. &lt;strong&gt;Don&#39;t push/share it as it possibly contains sensitive information.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;All parameters except &lt;code&gt;OCI_AVAILABILITY_DOMAIN&lt;/code&gt; are mandatory to be set. Please read the comments in &lt;code&gt;.env&lt;/code&gt; file as well.&lt;/p&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;p&gt;Region, user, tenancy, fingerprint should be taken from textarea during API key generation step. Adjust these values in &lt;code&gt;.env&lt;/code&gt; file accordingly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OCI_REGION&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OCI_USER_ID&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OCI_TENANCY_ID&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OCI_KEY_FINGERPRINT&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Private key&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;OCI_PRIVATE_KEY_FILENAME&lt;/code&gt; is an absolute path (including directories) or direct public accessible URL to your *.pem private key file.&lt;/p&gt; &#xA;&lt;h3&gt;Instance parameters&lt;/h3&gt; &#xA;&lt;h4&gt;Mandatory&lt;/h4&gt; &#xA;&lt;h5&gt;OCI_SUBNET_ID and OCI_IMAGE_ID&lt;/h5&gt; &#xA;&lt;p&gt;You must start instance creation process from the OCI Console in the browser (Menu -&amp;gt; Compute -&amp;gt; Instances -&amp;gt; Create Instance)&lt;/p&gt; &#xA;&lt;p&gt;Change image and shape. For Always free AMD x64 - make sure that &#34;Always Free Eligible&#34; availabilityDomain label is there:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/create-compute-instance.png&#34; alt=&#34;Changing image and shape&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ARMs can be created anywhere within your home region.&lt;/p&gt; &#xA;&lt;p&gt;Adjust Networking section, set &#34;Do not assign a public IPv4 address&#34; checkbox. If you don&#39;t have existing VNIC/subnet, please create VM.Standard.E2.1.Micro instance before doing everything.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/networking.png&#34; alt=&#34;Networking&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;Add SSH keys&#34; section does not matter for us right now. Before clicking &#34;Create&#34;…&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/add-ssh-keys.png&#34; alt=&#34;Add SSH Keys&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;…open browser&#39;s dev tools -&amp;gt; network tab. Click &#34;Create&#34; and wait a bit most probably you&#39;ll get &#34;Out of capacity&#34; error. Now find /instances API call (red one)…&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/dev-tools.png&#34; alt=&#34;Dev Tools&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;…and right click on it -&amp;gt; copy as curl. Paste the clipboard contents in any text editor and review the data-binary parameter. Find &lt;code&gt;subnetId&lt;/code&gt;, &lt;code&gt;imageId&lt;/code&gt; and set &lt;code&gt;OCI_SUBNET_ID&lt;/code&gt;, &lt;code&gt;OCI_IMAGE_ID&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Note &lt;code&gt;availabilityDomain&lt;/code&gt; for yourself, then read the corresponding comment in &lt;code&gt;.env&lt;/code&gt; file regarding &lt;code&gt;OCI_AVAILABILITY_DOMAIN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;OCI_SSH_PUBLIC_KEY (SSH access)&lt;/h5&gt; &#xA;&lt;p&gt;In order to have secure shell (SSH) access to the instance you need to have a keypair, besically 2 files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;~/.ssh/id_rsa&lt;/li&gt; &#xA; &lt;li&gt;~/.ssh/id_rsa.pub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Second one (public key) contents (string) should be provided to a command below. The are plenty of tutorials on how to generate them (if you don&#39;t have them yet), we won&#39;t cover this part here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat ~/.ssh/id_rsa.pub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output should be similar to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFwZVQa+F41Jrb4X+p9gFMrrcAqh9ks8ATrcGRitK+R/ github.com@hitrov.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change &lt;code&gt;OCI_SSH_PUBLIC_KEY&lt;/code&gt; inside double quotes - paste the contents above (or you won&#39;t be able to login into the newly created instance). &lt;strong&gt;NB!&lt;/strong&gt; No new lines allowed!&lt;/p&gt; &#xA;&lt;h4&gt;Optional&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;OCI_OCPUS&lt;/code&gt; and &lt;code&gt;OCI_MEMORY_IN_GBS&lt;/code&gt; are set &lt;code&gt;4&lt;/code&gt; and &lt;code&gt;24&lt;/code&gt; by default. Of course, you can safely adjust them. Possible values are 1/6, 2/12, 3/18 and 4/24, respectively. Please notice that &#34;Oracle Linux Cloud Developer&#34; image can be created with at least 8GB of RAM (&lt;code&gt;OCI_MEMORY_IN_GBS&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If for some reason your home region is running out of Always free AMD x64 (1/8 OPCU + 1GB RAM), replace values below. &lt;strong&gt;NB!&lt;/strong&gt; Setting the &lt;code&gt;OCI_AVAILABILITY_DOMAIN&lt;/code&gt; to &lt;code&gt;Always Free Eligible&lt;/code&gt; is mandatory for non-ARM architecture!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OCI_SHAPE=VM.Standard.E2.1.Micro&#xA;OCI_OCPUS=1&#xA;OCI_MEMORY_IN_GBS=1&#xA;OCI_AVAILABILITY_DOMAIN=FeVO:EU-FRANKFURT-1-AD-2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have instances of selected shape at all, and need only one, leave the value of &lt;code&gt;OCI_MAX_INSTANCES=1&lt;/code&gt;. When you managed to launch one and need more (or 2 from scratch), set to &lt;code&gt;OCI_MAX_INSTANCES=2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running the script&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php ./index.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I bet that the output (error) will be similar to the one in a browser a few minutes ago&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;code&#34;: &#34;InternalError&#34;,&#xA;    &#34;message&#34;: &#34;Out of host capacity.&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you already have instances:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;code&#34;: &#34;LimitExceeded&#34;,&#xA;    &#34;message&#34;: &#34;The following service limits were exceeded: standard-a1-memory-count, standard-a1-core-count. Request a service limit increase from the service limits page in the console. &#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Periodic job setup (cron)&lt;/h2&gt; &#xA;&lt;h3&gt;Linux / WSL&lt;/h3&gt; &#xA;&lt;p&gt;You can now setup periodic job to run the command&lt;/p&gt; &#xA;&lt;p&gt;Create log file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch /path/to/oci-arm-host-capacity/oci.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set permissions for PHP script to modify it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 777 /path/to/oci-arm-host-capacity/oci.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get full path to PHP binary&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;which php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usually that&#39;s &lt;code&gt;/usr/bin/php&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setup itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;EDITOR=nano crontab -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add new line to execute the script every minute and append log the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;* * * * * /usr/bin/php /path/to/oci-arm-host-capacity/index.php &amp;gt;&amp;gt; /path/to/oci-arm-host-capacity/oci.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; Use absolute paths wherever possible&lt;/p&gt; &#xA;&lt;p&gt;...and save the file (F2, press Y to confirm overwrite, then Enter).&lt;/p&gt; &#xA;&lt;p&gt;There could be cases when cron user won&#39;t have some permissions, there&#39;re ways to solve it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Setup job for root user by executing &lt;code&gt;EDITOR=nano sudo crontab -e&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Move this directory (&lt;code&gt;oci-arm-host-capacity&lt;/code&gt;) into web server&#39;s one e.g. /usr/share/nginx/html and setup cron this way:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;* * * * * curl http://server.add.re.ss/oci-arm-host-capacity/index.php &amp;gt;&amp;gt; /path/to/oci-arm-host-capacity/oci.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also visit the URL above and see the same command output as by running from the shell.&lt;/p&gt; &#xA;&lt;h3&gt;GitHub actions (workflows)&lt;/h3&gt; &#xA;&lt;p&gt;In order to test the script using GitHub runners (their virtual machines) please complete &lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#setup&#34;&gt;Setup&lt;/a&gt;. &lt;strong&gt;NB!&lt;/strong&gt; To avoid the ban of your Github account &lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#read-this-carefully&#34;&gt;Read This Carefully&lt;/a&gt; &lt;strong&gt;!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Setup&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repository&lt;/li&gt; &#xA; &lt;li&gt;Never push &lt;code&gt;.env&lt;/code&gt; file, it&#39;s in &lt;code&gt;.gitignore&lt;/code&gt; for a reason&lt;/li&gt; &#xA; &lt;li&gt;Instead of copying/modifying &lt;code&gt;.env&lt;/code&gt; file, use &lt;code&gt;Secrets&lt;/code&gt; in your own repository &lt;code&gt;Settings&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;https://github.com/{your-username}/oci-arm-host-capacity/settings/secrets/actions&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Click &lt;code&gt;New repository secret&lt;/code&gt; and set all the values (&lt;strong&gt;one by one&lt;/strong&gt;) that you&#39;d set in &lt;code&gt;.env&lt;/code&gt; file e.g.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/new-repository-secret.png&#34; alt=&#34;New Repository Secret&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NB!&lt;/em&gt; No need to double quote any value here!&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;As for the private key, you have 2 options. Either:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;upload to any web server accessible from the Internet by using just URL or...&lt;/li&gt; &#xA; &lt;li&gt;upload in the &lt;a href=&#34;https://cloud.oracle.com/object-storage/buckets&#34;&gt;bucket&lt;/a&gt; and &lt;code&gt;Create Pre-Authenticated Request&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/create-par.png&#34; alt=&#34;Create Pre-Authenticated Request&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Copy and save the URL from (5) as &lt;code&gt;OCI_PRIVATE_KEY_FILENAME&lt;/code&gt; GitHub secret.&lt;/li&gt; &#xA; &lt;li&gt;Go to any other directory e.g. &lt;code&gt;cd /Users/hitrov&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/{your-username}/oci-arm-host-capacity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adjust the file &lt;code&gt;.github/workflows/tests.yml&lt;/code&gt; according to &lt;a href=&#34;https://github.com/hitrov/oci-arm-host-capacity/commit/67fe41ebfb9f385ae1614c97b74195ea318c8db7&#34;&gt;this commit&lt;/a&gt;, just execute:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout 67fe41ebfb9f385ae1614c97b74195ea318c8db7 -- .github/workflows/tests.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;10&#34;&gt; &#xA; &lt;li&gt;Commit and push this file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -m &#34;Modify workflow to test out periodic job&#34; .github/workflows/tests.yml&#xA;git push origin main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;11&#34;&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;https://github.com/{your-username}/oci-arm-host-capacity/actions&lt;/code&gt; and check how &lt;code&gt;Run script&lt;/code&gt; job.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here&#39;s the example &lt;a href=&#34;https://github.com/hitrov/oci-arm-host-capacity/runs/4727904401?check_suite_focus=true&#34;&gt;https://github.com/hitrov/oci-arm-host-capacity/runs/4727904401?check_suite_focus=true&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/github-workflow-cron.png&#34; alt=&#34;GitHub Worflow cron&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/test-periodic-job-cron.png&#34; alt=&#34;Test Periodic Job (cron)&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Read This Carefully&lt;/h4&gt; &#xA;&lt;p&gt;Specific GitHub Workflows &lt;a href=&#34;https://github.com/hitrov/oci-arm-host-capacity/commit/67fe41ebfb9f385ae1614c97b74195ea318c8db7&#34;&gt;commit&lt;/a&gt; used in the &lt;a href=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/#setup&#34;&gt;Setup&lt;/a&gt; take an advantage of &lt;a href=&#34;https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#scheduled-events&#34;&gt;Scheduled events&lt;/a&gt;&lt;br&gt; and &lt;strong&gt;will endlessly run the script every 5-20 minutes&lt;/strong&gt; (how exactly often - depends on runners&#39; availability).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt; After you&#39;re done with testing, &lt;strong&gt;immediately delete .github/workflows/tests.yml&lt;/strong&gt; (because you don&#39;t need integration tests - they&#39;re written taking into account instances that I have) and push to the &lt;code&gt;main&lt;/code&gt; branch because infinite run actually violates the &lt;a href=&#34;https://docs.github.com/en/github/site-policy/github-terms-for-additional-products-and-features#actions&#34;&gt;Terms of Use&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Actions should not be used for:&#xA;...&#xA;- if using GitHub-hosted runners, any other activity unrelated to the production, testing, deployment, or publication &#xA;of the software project associated with the repository where GitHub Actions are used.&#xA;...&#xA;GitHub may monitor your use...&#xA;Misuse of GitHub Actions may result in termination of jobs, restrictions in your ability to use GitHub Actions, &#xA;or the disabling of repositories created to run Actions in a way that violates these Terms.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is how you do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git rm .github/workflows/tests.yml&#xA;git commit -m &#34;Delete workflow file&#34; .github/workflows/tests.yml&#xA;git push origin main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Before the instance creation, script will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Call &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/api/#/en/identity/20160918/AvailabilityDomain/ListAvailabilityDomains&#34;&gt;ListAvailabilityDomains&lt;/a&gt; OCI API method&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;a href=&#34;https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/Instance/ListInstances&#34;&gt;ListInstances&lt;/a&gt; OCI API method and check whether there&#39;re already existing instances with the same &lt;code&gt;OCI_SHAPE&lt;/code&gt;, as well as number of them &lt;code&gt;OCI_MAX_INSTANCES&lt;/code&gt; (you can safely adjust the last one if you wanna e.g. two &lt;code&gt;VM.Standard.A1.Flex&lt;/code&gt; with 2/12 - 2 OCPUs and 12GB RAM - each).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Script won&#39;t create new instance if current (actual) number return from the API exceeds the one from &lt;code&gt;OCI_MAX_INSTANCES&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;In case of success the JSON output will be similar to&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/launch-output-1.png&#34; alt=&#34;Launch success 1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/launch-output-2.png&#34; alt=&#34;Launch success 2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Assigning public IP address&lt;/h2&gt; &#xA;&lt;p&gt;We are not doing this during the command run due to the default limitation (2 ephemeral addresses per compartment). That&#39;s how you can achieve this. When you&#39;ll succeed with creating an instance, open OCI Console, go to Instance Details -&amp;gt; Resources -&amp;gt; Attached VNICs by selecting it&#39;s name&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/attached-vnics.png&#34; alt=&#34;Attached VNICs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then Resources -&amp;gt; IPv4 Addresses -&amp;gt; Edit&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/ipv4-addresses.png&#34; alt=&#34;IPv4 Addresses&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Choose ephemeral and click &#34;Update&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hitrov/oci-arm-host-capacity/main/images/edit-ip-address.png&#34; alt=&#34;Edit IP Address&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Private key issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OCI_PRIVATE_KEY_FILENAME&lt;/code&gt; doesn&#39;t exist.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PHP Fatal error:  Uncaught Hitrov\OCI\Exception\PrivateKeyFileNotFoundException: Private key file does not exist: /path/to/oracleidentitycloudservice_***-07-14-10-35.pem in /Users/hitrov/Sites/oci-arm-host-capacity/vendor/hitrov/oci-api-php-request-sign/src/Hitrov/OCI/Signer.php:346&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure path is absolute (full including directories), you should see it&#39;s content by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /path/to/oracleidentitycloudservice_***-07-14-10-35.pem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If that&#39;s URL make sure it&#39;s inside double quotes, and opens without redirections or additional actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl &#34;https://url.to/oracleidentitycloudservice_***-07-14-10-35.pem&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Permission denied - private key file is inaccessible for this PHP script:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PHP Warning:  file_get_contents(/path/to/oracleidentitycloudservice_***-07-14-10-35.pem): failed to open stream: Permission denied in /Users/hitrov/Sites/oci-arm-host-capacity/vendor/hitrov/oci-api-php-request-sign/src/Hitrov/OCI/Signer.php on line 225&#xA;PHP Fatal error:  Uncaught TypeError: Return value of Hitrov\OCI\Signer::getPrivateKey() must be of the type string or null, bool returned in /Users/hitrov/Sites/oci-arm-host-capacity/vendor/hitrov/oci-api-php-request-sign/src/Hitrov/OCI/Signer.php:225&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fastest way to resolve:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 777 /path/to/oracleidentitycloudservice_***-07-14-10-35.pem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSH key issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have new line(s) / line ending(s) in &lt;code&gt;OCI_SSH_PUBLIC_KEY&lt;/code&gt; you will encounter:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;code&#34;: &#34;InvalidParameter&#34;,&#xA;  &#34;message&#34;: &#34;Unable to parse message body&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If public key is incorrect:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;code&#34;: &#34;InvalidParameter&#34;,&#xA;    &#34;message&#34;: &#34;Invalid ssh public key; must be in base64 format&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the proper contents of &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt; again and make sure it&#39;s inside double quotes. Or re-generate pair of keys. Make sure you won&#39;t unintentionally overwrite your existing ones.&lt;/p&gt; &#xA;&lt;h2&gt;Multiple configuration support&lt;/h2&gt; &#xA;&lt;p&gt;If you need 2+ &lt;code&gt;.env&lt;/code&gt; files (or you have multiple Oracle Cloud Infrastructure accounts), run the script in a way when you pass argument with environment filename e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php index.php .env.my_acc1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom env filenames are supported only for CLI (command line interface). If you call this script with browser/curl using web sapi (Apache, nginx), find the best way to pass the 2nd argument here (e.g. &lt;code&gt;$_GET&lt;/code&gt; parameter):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv = Dotenv::createUnsafeImmutable(__DIR__, $envFilename);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as I don&#39;t want to overcomplicate this script for rare use cases.&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;That&#39;s how you will login when instance will be created (notice opc default username)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -i ~/.ssh/id_rsa opc@ip.add.re.ss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you didn&#39;t assign public IP, you can still copy internal FQDN or private IP (10.x.x.x) from the instance details page and connect from your other instance in the same VNIC. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -i ~/.ssh/id_rsa opc@instance-20210714-xxxx.subnet.vcn.oraclevcn.com&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>qiayue/php-openai-gpt-stream-chat-api-webui</title>
    <updated>2023-03-27T01:42:15Z</updated>
    <id>tag:github.com,2023-03-27:/qiayue/php-openai-gpt-stream-chat-api-webui</id>
    <link href="https://github.com/qiayue/php-openai-gpt-stream-chat-api-webui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;不使用任何框架，php + html + css + js 原生实现 openai gpt chat 接口对接，实现流式数据传输和接收，附带简洁网页demo。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;php-openai-gpt-stream-chat-api-webui&lt;/h1&gt; &#xA;&lt;p&gt;由 &lt;a href=&#34;https://github.com/qiayue/&#34;&gt;@qiayue&lt;/a&gt; 开源的 &lt;a href=&#34;https://github.com/qiayue/php-openai-gpt-stream-chat-api-webui&#34;&gt;纯 PHP 实现 GPT 流式调用和前端实时打印 webui &lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;h2&gt;目录结构&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;/&#xA;├─ /class&#xA;│  ├─ Class.ChatGPT.php&#xA;│  ├─ Class.DFA.php&#xA;│  ├─ Class.StreamHandler.php&#xA;├─ /static&#xA;│  ├─ css&#xA;│  │  ├─ chat.css&#xA;│  │  ├─ monokai-sublime.css&#xA;│  ├─ js&#xA;│  │  ├─ chat.js&#xA;│  │  ├─ highlight.min.js&#xA;│  │  ├─ marked.min.js&#xA;├─ /chat.php&#xA;├─ /index.html&#xA;├─ /README.md&#xA;├─ /sensitive_words.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;目录/文件&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/&lt;/td&gt; &#xA;   &lt;td&gt;程序根目录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/class&lt;/td&gt; &#xA;   &lt;td&gt;php类文件目录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/class/Class.ChatGPT.php&lt;/td&gt; &#xA;   &lt;td&gt;ChatGPT 类，用于处理前端请求，并向 OpenAI 接口提交请求&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/class/Class.DFA.php&lt;/td&gt; &#xA;   &lt;td&gt;DFA 类，用于敏感词校验和替换&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/class/Class.StreamHandler.php&lt;/td&gt; &#xA;   &lt;td&gt;StreamHandler 类，用于实时处理 OpenAI 流式返回的数据&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static&lt;/td&gt; &#xA;   &lt;td&gt;存放所有前端页面所需的静态文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/css&lt;/td&gt; &#xA;   &lt;td&gt;存放前端页面所有的 css 文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/css/chat.css&lt;/td&gt; &#xA;   &lt;td&gt;前端页面聊天样式文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/css/monokai-sublime.css&lt;/td&gt; &#xA;   &lt;td&gt;highlight 代码高亮插件的主题样式文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/js&lt;/td&gt; &#xA;   &lt;td&gt;存放前端页面所有的 js 文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/js/chat.js&lt;/td&gt; &#xA;   &lt;td&gt;前端聊天交互 js 代码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/js/highlight.min.js&lt;/td&gt; &#xA;   &lt;td&gt;代码高亮 js 库&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/static/js/marked.min.js&lt;/td&gt; &#xA;   &lt;td&gt;markdown 解析 js 库&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/chat.php&lt;/td&gt; &#xA;   &lt;td&gt;前端聊天请求的后端入口文件，在这里引入 php 类文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/index.html&lt;/td&gt; &#xA;   &lt;td&gt;前端页面 html 代码&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/README.md&lt;/td&gt; &#xA;   &lt;td&gt;仓库描述文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/sensitive_words.txt&lt;/td&gt; &#xA;   &lt;td&gt;敏感词文件，一行一个敏感词，需要你自己收集敏感词，也可以加我微信（同 GitHub id）找我要&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;p&gt;本项目代码，没有使用任何框架，也没有引入任何第三方后端库，前端引入了代码高亮库 &lt;a href=&#34;https://github.com/highlightjs/highlight.js&#34;&gt;highlight&lt;/a&gt; 和 markdown 解析库 &lt;a href=&#34;https://github.com/markedjs/marked&#34;&gt;marked&lt;/a&gt; 都已经下载项目内了，所以拿到代码不用任何安装即可直接使用。&lt;/p&gt; &#xA;&lt;p&gt;唯二要做的就是把你自己的 api key 填进去。&lt;/p&gt; &#xA;&lt;p&gt;获取源码后，修改 &lt;code&gt;chat.php&lt;/code&gt; ，填写 OpenAI 的 api key 进去，具体请见：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$chat = new ChatGPT([&#xA;    &#39;api_key&#39; =&amp;gt; &#39;此处需要填入 openai 的 api key &#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果开启敏感词检测功能，需要把敏感词一行一个放入 &lt;code&gt;sensitive_words_sdfdsfvdfs5v56v5dfvdf.txt&lt;/code&gt; 文件中。&lt;/p&gt; &#xA;&lt;p&gt;开了一个微信群，欢迎入群交流：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/qiayue/php-openai-gpt-stream-chat-api-webui/raw/main/static/img/WechatIMG197.jpeg&#34; alt=&#34;释疑微信群&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;原理说明&lt;/h2&gt; &#xA;&lt;h3&gt;流式接收 OpenAI 的返回数据&lt;/h3&gt; &#xA;&lt;p&gt;后端 Class.ChatGPT.php 中用 curl 向 OpenAI 发起请求，使用 curl 的 &lt;code&gt;CURLOPT_WRITEFUNCTION&lt;/code&gt; 设置回调函数，同时请求参数里 &lt;code&gt;&#39;stream&#39; =&amp;gt; true&lt;/code&gt; 告诉 OpenAI 开启流式传输。&lt;/p&gt; &#xA;&lt;p&gt;我们通过 &lt;code&gt;curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this-&amp;gt;streamHandler, &#39;callback&#39;]);&lt;/code&gt; 设置使用 StreamHandler 类的实例化对象 &lt;code&gt;$this-&amp;gt;streamHandler&lt;/code&gt; 的 &lt;code&gt;callback&lt;/code&gt; 方法来处理 OpenAI 返回的数据。&lt;/p&gt; &#xA;&lt;p&gt;OpenAI 会在模型每次输出时返回 &lt;code&gt;data: {&#34;id&#34;:&#34;&#34;,&#34;object&#34;:&#34;&#34;,&#34;created&#34;:1679616251,&#34;model&#34;:&#34;&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&lt;/code&gt; 格式字符串，其中我们需要的回答就在 &lt;code&gt;choices[0][&#39;delta&#39;][&#39;content&#39;]&lt;/code&gt; 里，当然我们也要做好异常判断，不能直接这样获取数据。&lt;/p&gt; &#xA;&lt;p&gt;另外，实际因为网络传输问题，每次 &lt;code&gt;callback&lt;/code&gt; 函数收到的数据并不一定只有一条 &lt;code&gt;data: {&#34;key&#34;:&#34;value&#34;}&lt;/code&gt; 格式的数据，有可能只有半条，也有可能有多条，还有可能有N条半。&lt;/p&gt; &#xA;&lt;p&gt;所以我们在 &lt;code&gt;StreamHandler&lt;/code&gt; 类中增加了 &lt;code&gt;data_buffer&lt;/code&gt; 属性来存储无法解析的半条数据。&lt;/p&gt; &#xA;&lt;p&gt;这里根据 OpenAI 的返回数据格式，做了一些特殊处理，具体代码如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function callback($ch, $data) {&#xA;        $this-&amp;gt;counter += 1;&#xA;        file_put_contents(&#39;./log/data.&#39;.$this-&amp;gt;qmd5.&#39;.log&#39;, $this-&amp;gt;counter.&#39;==&#39;.$data.PHP_EOL.&#39;--------------------&#39;.PHP_EOL, FILE_APPEND);&#xA;&#xA;        $result = json_decode($data, TRUE);&#xA;        if(is_array($result)){&#xA;        &#x9;$this-&amp;gt;end(&#39;openai 请求错误：&#39;.json_encode($result));&#xA;        &#x9;return strlen($data);&#xA;        }&#xA;&#xA;        /*&#xA;            此处步骤仅针对 openai 接口而言&#xA;            每次触发回调函数时，里边会有多条data数据，需要分割&#xA;            如某次收到 $data 如下所示：&#xA;            data: {&#34;id&#34;:&#34;chatcmpl-6wimHHBt4hKFHEpFnNT2ryUeuRRJC&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1679453169,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;role&#34;:&#34;assistant&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}\n\ndata: {&#34;id&#34;:&#34;chatcmpl-6wimHHBt4hKFHEpFnNT2ryUeuRRJC&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1679453169,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;以下&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}\n\ndata: {&#34;id&#34;:&#34;chatcmpl-6wimHHBt4hKFHEpFnNT2ryUeuRRJC&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1679453169,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;是&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}\n\ndata: {&#34;id&#34;:&#34;chatcmpl-6wimHHBt4hKFHEpFnNT2ryUeuRRJC&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1679453169,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;使用&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&#xA;&#xA;            最后两条一般是这样的：&#xA;            data: {&#34;id&#34;:&#34;chatcmpl-6wimHHBt4hKFHEpFnNT2ryUeuRRJC&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1679453169,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{},&#34;index&#34;:0,&#34;finish_reason&#34;:&#34;stop&#34;}]}\n\ndata: [DONE]&#xA;&#xA;            根据以上 openai 的数据格式，分割步骤如下：&#xA;        */&#xA;&#xA;        // 0、把上次缓冲区内数据拼接上本次的data&#xA;        $buffer = $this-&amp;gt;data_buffer.$data;&#xA;&#xA;        // 1、把所有的 &#39;data: {&#39; 替换为 &#39;{&#39; ，&#39;data: [&#39; 换成 &#39;[&#39;&#xA;        $buffer = str_replace(&#39;data: {&#39;, &#39;{&#39;, $buffer);&#xA;        $buffer = str_replace(&#39;data: [&#39;, &#39;[&#39;, $buffer);&#xA;&#xA;        // 2、把所有的 &#39;}\n\n{&#39; 替换维 &#39;}[br]{&#39; ， &#39;}\n\n[&#39; 替换为 &#39;}[br][&#39;&#xA;        $buffer = str_replace(&#39;}&#39;.PHP_EOL.PHP_EOL.&#39;{&#39;, &#39;}[br]{&#39;, $buffer);&#xA;        $buffer = str_replace(&#39;}&#39;.PHP_EOL.PHP_EOL.&#39;[&#39;, &#39;}[br][&#39;, $buffer);&#xA;&#xA;        // 3、用 &#39;[br]&#39; 分割成多行数组&#xA;        $lines = explode(&#39;[br]&#39;, $buffer);&#xA;&#xA;        // 4、循环处理每一行，对于最后一行需要判断是否是完整的json&#xA;        $line_c = count($lines);&#xA;        foreach($lines as $li=&amp;gt;$line){&#xA;            if(trim($line) == &#39;[DONE]&#39;){&#xA;                //数据传输结束&#xA;                $this-&amp;gt;data_buffer = &#39;&#39;;&#xA;                $this-&amp;gt;counter = 0;&#xA;                $this-&amp;gt;sensitive_check();&#xA;                $this-&amp;gt;end();&#xA;                break;&#xA;            }&#xA;            $line_data = json_decode(trim($line), TRUE);&#xA;            if( !is_array($line_data) || !isset($line_data[&#39;choices&#39;]) || !isset($line_data[&#39;choices&#39;][0]) ){&#xA;                if($li == ($line_c - 1)){&#xA;                    //如果是最后一行&#xA;                    $this-&amp;gt;data_buffer = $line;&#xA;                    break;&#xA;                }&#xA;                //如果是中间行无法json解析，则写入错误日志中&#xA;                file_put_contents(&#39;./log/error.&#39;.$this-&amp;gt;qmd5.&#39;.log&#39;, json_encode([&#39;i&#39;=&amp;gt;$this-&amp;gt;counter, &#39;line&#39;=&amp;gt;$line, &#39;li&#39;=&amp;gt;$li], JSON_UNESCAPED_UNICODE|JSON_PRETTY_PRINT).PHP_EOL.PHP_EOL, FILE_APPEND);&#xA;                continue;&#xA;            }&#xA;&#xA;            if( isset($line_data[&#39;choices&#39;][0][&#39;delta&#39;]) &amp;amp;&amp;amp; isset($line_data[&#39;choices&#39;][0][&#39;delta&#39;][&#39;content&#39;]) ){&#xA;            &#x9;$this-&amp;gt;sensitive_check($line_data[&#39;choices&#39;][0][&#39;delta&#39;][&#39;content&#39;]);&#xA;            }&#xA;        }&#xA;&#xA;        return strlen($data);&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;敏感词检测&lt;/h3&gt; &#xA;&lt;p&gt;我们使用了 DFA 算法来实现敏感词检测，按照 ChatGPT 的解释，&lt;code&gt;&#34;DFA&#34;是指“确定性有限自动机”（Deterministic Finite Automaton）&lt;/code&gt; ，&lt;code&gt;DfaFilter（确定有限自动机过滤器）通常是指一种用于文本处理和匹配的算法&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;Class.DFA.php 类代码是 GPT4 写的，具体实现代码见源码。&lt;/p&gt; &#xA;&lt;p&gt;这里介绍一下使用方法，创建一个 DFA 实例需要传入敏感词文件路径：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dfa = new DFA([&#xA;    &#39;words_file&#39; =&amp;gt; &#39;./sensitive_words_sdfdsfvdfs5v56v5dfvdf.txt&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;特别说明：这里特意用乱码字符串文件名是为了防止他人下载敏感词文件，请你部署后也自己改一个别的乱码文件名，不要使用我这里公开了的文件名&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;之后就可以用 &lt;code&gt;$dfa-&amp;gt;containsSensitiveWords($inputText)&lt;/code&gt; 来判断 &lt;code&gt;$inputText&lt;/code&gt; 是否包含敏感词，返回值是 &lt;code&gt;TRUE&lt;/code&gt; 或 &lt;code&gt;FALSE&lt;/code&gt; 的布尔值，也可以用 &lt;code&gt;$outputText = $dfa-&amp;gt;replaceWords($inputText)&lt;/code&gt; 来进行敏感词替换，所有在 &lt;code&gt;sensitive_words.txt&lt;/code&gt; 中指定的敏感词都会被替换为三个&lt;code&gt;*&lt;/code&gt;号。&lt;/p&gt; &#xA;&lt;p&gt;如果不想开启敏感词检测，把 &lt;code&gt;chat.php&lt;/code&gt; 中的以下三句注释掉即可：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dfa = new DFA([&#xA;    &#39;words_file&#39; =&amp;gt; &#39;./sensitive_words_sdfdsfvdfs5v56v5dfvdf.txt&#39;,&#xA;]);&#xA;$chat-&amp;gt;set_dfa($dfa);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果没有开启敏感词检测，那么每次 OpenAI 的返回都会实时返回给前端。&lt;/p&gt; &#xA;&lt;p&gt;如果开启了敏感词检测，会查找 OpenAI 返回中的换行符和停顿符号 &lt;code&gt;[&#39;，&#39;, &#39;。&#39;, &#39;；&#39;, &#39;？&#39;, &#39;！&#39;, &#39;……&#39;]&lt;/code&gt; 等来进行分句，每一句都使用 &lt;code&gt;$outputText = $dfa-&amp;gt;replaceWords($inputText)&lt;/code&gt; 来替换敏感词，之后整句返回给前端。&lt;/p&gt; &#xA;&lt;p&gt;开启敏感词后，加载敏感词文件需要时间，每次检测时也是逐句检测，而不是逐词检测，也会导致返回变慢。&lt;/p&gt; &#xA;&lt;p&gt;所以如果是自用，可以不开启敏感词检测，如果是部署出去给其他人用，为了保护你的域名安全和你的安全，最好开启敏感词检测。&lt;/p&gt; &#xA;&lt;h3&gt;流式返回给前端&lt;/h3&gt; &#xA;&lt;p&gt;直接看 &lt;code&gt;chat.php&lt;/code&gt; 的注释会更清楚：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/*&#xA;以下几行注释由 GPT4 生成&#xA;*/&#xA;&#xA;// 这行代码用于关闭输出缓冲。关闭后，脚本的输出将立即发送到浏览器，而不是等待缓冲区填满或脚本执行完毕。&#xA;ini_set(&#39;output_buffering&#39;, &#39;off&#39;);&#xA;&#xA;// 这行代码禁用了 zlib 压缩。通常情况下，启用 zlib 压缩可以减小发送到浏览器的数据量，但对于服务器发送事件来说，实时性更重要，因此需要禁用压缩。&#xA;ini_set(&#39;zlib.output_compression&#39;, false);&#xA;&#xA;// 这行代码使用循环来清空所有当前激活的输出缓冲区。ob_end_flush() 函数会刷新并关闭最内层的输出缓冲区，@ 符号用于抑制可能出现的错误或警告。&#xA;while (@ob_end_flush()) {}&#xA;&#xA;// 这行代码设置 HTTP 响应的 Content-Type 为 text/event-stream，这是服务器发送事件（SSE）的 MIME 类型。&#xA;header(&#39;Content-Type: text/event-stream&#39;);&#xA;&#xA;// 这行代码设置 HTTP 响应的 Cache-Control 为 no-cache，告诉浏览器不要缓存此响应。&#xA;header(&#39;Cache-Control: no-cache&#39;);&#xA;&#xA;// 这行代码设置 HTTP 响应的 Connection 为 keep-alive，保持长连接，以便服务器可以持续发送事件到客户端。&#xA;header(&#39;Connection: keep-alive&#39;);&#xA;&#xA;// 这行代码设置 HTTP 响应的自定义头部 X-Accel-Buffering 为 no，用于禁用某些代理或 Web 服务器（如 Nginx）的缓冲。&#xA;// 这有助于确保服务器发送事件在传输过程中不会受到缓冲影响。&#xA;header(&#39;X-Accel-Buffering: no&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;之后我们每次想给前端返回数据，用以下代码即可：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;echo &#39;data: &#39;.json_encode([&#39;time&#39;=&amp;gt;date(&#39;Y-m-d H:i:s&#39;), &#39;content&#39;=&amp;gt;&#39;答： &#39;]).PHP_EOL.PHP_EOL;&#xA;flush();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这里我们定义了我们自己使用的一个数据格式，里边只放了 time 和 content ，不用解释都懂，time 是时间， content 就是我们要返回给前端的内容。&lt;/p&gt; &#xA;&lt;p&gt;注意，回答全部传输完毕后，我们需要关闭连接，可以用以下代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;echo &#39;retry: 86400000&#39;.PHP_EOL; // 告诉前端如果发生错误，隔多久之后才轮询一次&#xA;echo &#39;event: close&#39;.PHP_EOL; // 告诉前端，结束了，该说再见了&#xA;echo &#39;data: Connection closed&#39;.PHP_EOL.PHP_EOL; // 告诉前端，连接已关闭&#xA;flush();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;EventSource&lt;/h3&gt; &#xA;&lt;p&gt;前端 js 通过 &lt;code&gt;const eventSource = new EventSource(url);&lt;/code&gt; 开启一个 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource&#34;&gt;EventSource &lt;/a&gt; 请求。&lt;/p&gt; &#xA;&lt;p&gt;之后服务器按照 &lt;code&gt;data: {&#34;kev1&#34;:&#34;value1&#34;,&#34;kev2&#34;:&#34;value2&#34;}&lt;/code&gt; 格式向前端发送数据，前端就可以在 EventSource 的 message 回调事件中的 &lt;code&gt;event.data&lt;/code&gt; 里获取 &lt;code&gt;{&#34;kev1&#34;:&#34;value1&#34;,&#34;kev2&#34;:&#34;value2&#34;}&lt;/code&gt; 字符串形式 json 数据，再通过 &lt;code&gt;JSON.parse(event.data)&lt;/code&gt; 就可以得到 js 对象。&lt;/p&gt; &#xA;&lt;p&gt;具体代码在 getAnswer 函数中，如下所示：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function getAnswer(inputValue){&#xA;    inputValue = inputValue.replace(&#39;+&#39;, &#39;{[$add$]}&#39;);&#xA;    const url = &#34;./chat.php?q=&#34;+inputValue;&#xA;    const eventSource = new EventSource(url);&#xA;&#xA;    eventSource.addEventListener(&#34;open&#34;, (event) =&amp;gt; {&#xA;        console.log(&#34;连接已建立&#34;, JSON.stringify(event));&#xA;    });&#xA;&#xA;    eventSource.addEventListener(&#34;message&#34;, (event) =&amp;gt; {&#xA;        //console.log(&#34;接收数据：&#34;, event);&#xA;        try {&#xA;            var result = JSON.parse(event.data);&#xA;            if(result.time &amp;amp;&amp;amp; result.content ){&#xA;                answerWords.push(result.content);&#xA;                contentIdx += 1;&#xA;            }&#xA;        } catch (error) {&#xA;            console.log(error);&#xA;        }&#xA;    });&#xA;&#xA;    eventSource.addEventListener(&#34;error&#34;, (event) =&amp;gt; {&#xA;        console.error(&#34;发生错误：&#34;, JSON.stringify(event));&#xA;    });&#xA;&#xA;    eventSource.addEventListener(&#34;close&#34;, (event) =&amp;gt; {&#xA;        console.log(&#34;连接已关闭&#34;, JSON.stringify(event.data));&#xA;        eventSource.close();&#xA;        contentEnd = true;&#xA;        console.log((new Date().getTime()), &#39;answer end&#39;);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;说明一下，原生的 &lt;code&gt;EventSource&lt;/code&gt; 请求，只能是 &lt;code&gt;GET&lt;/code&gt; 请求，所以这里演示时，直接把提问放到 &lt;code&gt;GET&lt;/code&gt; 的 &lt;code&gt;URL&lt;/code&gt; 参数里了。 如果要想用 &lt;code&gt;POST&lt;/code&gt; 请求，一般有两种办法：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;前后端一起改：【先发 &lt;code&gt;POST&lt;/code&gt; 后发 &lt;code&gt;GET&lt;/code&gt; 】用 &lt;code&gt;POST&lt;/code&gt; 向后端提问，后端根据提问和时间生成一个唯一 key 随着 &lt;code&gt;POST&lt;/code&gt; 请求返回给前端，前端拿到后，再发起一个 &lt;code&gt;GET&lt;/code&gt; 请求，在参数里携带问题 key ，获取回答，这种方式需要修改后端代码；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;只改前端：【只发一个 &lt;code&gt;POST&lt;/code&gt; 请求】后端代码不用大改，只需要把 &lt;code&gt;chat.php&lt;/code&gt; 中 &lt;code&gt;$question = urldecode($_GET[&#39;q&#39;] ?? &#39;&#39;)&lt;/code&gt; 改为 &lt;code&gt;$question = urldecode($_POST[&#39;q&#39;] ?? &#39;&#39;)&lt;/code&gt; 即可，但是前端需要改造，不能用原生 &lt;code&gt;EventSource&lt;/code&gt; 请求，需要用 fetch ，设置流式接收，具体可见下方 GPT4 给出的代码示例。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;async function fetchAiResponse(message) {&#xA;    try {&#xA;        const response = await fetch(&#34;./chat.php&#34;, {&#xA;            method: &#34;POST&#34;,&#xA;            headers: { &#34;Content-Type&#34;: &#34;application/json&#34; },&#xA;            body: JSON.stringify({ messages: [{ role: &#34;user&#34;, content: message }] }),&#xA;        });&#xA;&#xA;        if (!response.ok) {&#xA;            throw new Error(response.statusText);&#xA;        }&#xA;&#xA;        const reader = response.body.getReader();&#xA;        const decoder = new TextDecoder(&#34;utf-8&#34;);&#xA;&#xA;        while (true) {&#xA;            const { value, done } = await reader.read();&#xA;            if (value) {&#xA;                const partialResponse = decoder.decode(value, { stream: true });&#xA;                displayMessage(&#34;assistant&#34;, partialResponse);&#xA;            }&#xA;            if (done) {&#xA;                break;&#xA;            }&#xA;        }&#xA;    } catch (error) {&#xA;        console.error(&#34;Error fetching AI response:&#34;, error);&#xA;        displayMessage(&#34;assistant&#34;, &#34;Error: Failed to fetch AI response.&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;上方代码，关键点在于 &lt;code&gt;const partialResponse = decoder.decode(value, { stream: true })&lt;/code&gt; 中的 &lt;code&gt;{ stream: true }&lt;/code&gt; 。&lt;/p&gt; &#xA;&lt;h3&gt;打字机效果&lt;/h3&gt; &#xA;&lt;p&gt;对于后端返回的所有回复内容，我们需要用打字机形式打印出来。&lt;/p&gt; &#xA;&lt;p&gt;最初的方案是每次接收到后端的返回后就立即显示到页面里，后来发现这样速度太快了，眨眼就显示完了，没有打印机效果。 所以后来的方案就改成了用定时器实现定时打印，那么就需要把收到的先放进数组里缓存起来，然后定时每 50 毫秒执行一次，打印一个内容出来。 具体实现代码如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function typingWords(){&#xA;    if(contentEnd &amp;amp;&amp;amp; contentIdx==typingIdx){&#xA;        clearInterval(typingTimer);&#xA;        answerContent = &#39;&#39;;&#xA;        answerWords = [];&#xA;        answers = [];&#xA;        qaIdx += 1;&#xA;        typingIdx = 0;&#xA;        contentIdx = 0;&#xA;        contentEnd = false;&#xA;        lastWord = &#39;&#39;;&#xA;        lastLastWord = &#39;&#39;;&#xA;        input.disabled = false;&#xA;        sendButton.disabled = false;&#xA;        console.log((new Date().getTime()), &#39;typing end&#39;);&#xA;        return;&#xA;    }&#xA;    if(contentIdx&amp;lt;=typingIdx){&#xA;        return;&#xA;    }&#xA;    if(typing){&#xA;        return;&#xA;    }&#xA;    typing = true;&#xA;&#xA;    if(!answers[qaIdx]){&#xA;        answers[qaIdx] = document.getElementById(&#39;answer-&#39;+qaIdx);&#xA;    }&#xA;&#xA;    const content = answerWords[typingIdx];&#xA;    if(content.indexOf(&#39;`&#39;) != -1){&#xA;        if(content.indexOf(&#39;```&#39;) != -1){&#xA;            codeStart = !codeStart;&#xA;        }else if(content.indexOf(&#39;``&#39;) != -1 &amp;amp;&amp;amp; (lastWord + content).indexOf(&#39;```&#39;) != -1){&#xA;            codeStart = !codeStart;&#xA;        }else if(content.indexOf(&#39;`&#39;) != -1 &amp;amp;&amp;amp; (lastLastWord + lastWord + content).indexOf(&#39;```&#39;) != -1){&#xA;            codeStart = !codeStart;&#xA;        }&#xA;    }&#xA;&#xA;    lastLastWord = lastWord;&#xA;    lastWord = content;&#xA;&#xA;    answerContent += content;&#xA;    answers[qaIdx].innerHTML = marked.parse(answerContent+(codeStart?&#39;\n\n```&#39;:&#39;&#39;));&#xA;&#xA;    typingIdx += 1;&#xA;    typing = false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;代码渲染&lt;/h3&gt; &#xA;&lt;p&gt;如果严格按照输出什么打印什么的话，那么当正在打印一段代码，需要等到代码全部打完，才能被格式化为代码块，才能高亮显示代码。 那这个体验也太差了。 有什么办法能够解决这个问题呢？ 答案就在问题里，既然是因为代码块有开始标记没有结束标记，那就我们给他补全结束标记就好了，直到真的结束标记来了，才不需要补全。&lt;/p&gt; &#xA;&lt;p&gt;具体的实现就是下面几行代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if(content.indexOf(&#39;`&#39;) != -1){&#xA;    if(content.indexOf(&#39;```&#39;) != -1){&#xA;        codeStart = !codeStart;&#xA;    }else if(content.indexOf(&#39;``&#39;) != -1 &amp;amp;&amp;amp; (lastWord + content).indexOf(&#39;```&#39;) != -1){&#xA;        codeStart = !codeStart;&#xA;    }else if(content.indexOf(&#39;`&#39;) != -1 &amp;amp;&amp;amp; (lastLastWord + lastWord + content).indexOf(&#39;```&#39;) != -1){&#xA;        codeStart = !codeStart;&#xA;    }&#xA;}&#xA;&#xA;lastLastWord = lastWord;&#xA;lastWord = content;&#xA;&#xA;answerContent += content;&#xA;answers[qaIdx].innerHTML = marked.parse(answerContent+(codeStart?&#39;\n\n```&#39;:&#39;&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;其它&lt;/h3&gt; &#xA;&lt;p&gt;更多其它细节请看代码，如果对代码有疑问的，请加我微信（同 GitHub id）&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qiayue/php-openai-gpt-stream-chat-api-webui/raw/main/LICENSE&#34;&gt;BSD 2-Clause&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pulsejet/memories</title>
    <updated>2023-03-27T01:42:15Z</updated>
    <id>tag:github.com,2023-03-27:/pulsejet/memories</id>
    <link href="https://github.com/pulsejet/memories" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, modern and advanced photo management suite. Runs as a Nextcloud app.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pulsejet/memories/master/appinfo/screenshot.jpg&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Memories: Photo Management for Nextcloud&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/pulsejet/memories&#34; alt=&#34;GitHub&#34;&gt; &lt;a href=&#34;https://github.com/pulsejet/memories/actions/workflows/e2e.yaml&#34;&gt;&lt;img src=&#34;https://github.com/pulsejet/memories/actions/workflows/e2e.yaml/badge.svg?sanitize=true&#34; alt=&#34;e2e&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://memories-demo.radialapps.com/apps/memories/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/demo-online-blue&#34; alt=&#34;Demo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/pulsejet/memories&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/pulsejet/memories&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pulsejet/memories/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/pulsejet/memories&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/pulsejet&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/pulsejet?logo=GitHub&#34; alt=&#34;GitHub Sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Memories is a &lt;em&gt;batteries-included&lt;/em&gt; photo management solution for Nextcloud with advanced features&lt;/p&gt; &#xA;&lt;h2&gt;🎁 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;📸 Timeline&lt;/strong&gt;: Sort photos and videos by date taken, parsed from Exif data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;⏪ Rewind&lt;/strong&gt;: Jump to any time in the past instantly and relive your memories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🤖 AI Tagging&lt;/strong&gt;: Group photos by people and objects, powered by &lt;a href=&#34;https://github.com/nextcloud/recognize&#34;&gt;recognize&lt;/a&gt; and &lt;a href=&#34;https://github.com/matiasdelellis/facerecognition&#34;&gt;facerecognition&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🖼️ Albums&lt;/strong&gt;: Create albums to group photos and videos together. Then share these albums with others.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🫱🏻‍🫲🏻 External Sharing&lt;/strong&gt;: Share photos and videos with people outside of your Nextcloud instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;📱 Mobile Support&lt;/strong&gt;: Work from any device, of any shape and size through the web app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;✏️ Edit Metadata&lt;/strong&gt;: Edit dates and other metadata on photos quickly and in bulk.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;📦 Archive&lt;/strong&gt;: Store photos you don&#39;t want to see in your timeline in a separate folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;📹 Video Transcoding&lt;/strong&gt;: Transcode videos and use HLS for maximal performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🗺️ Map&lt;/strong&gt;: View your photos on a map, tagged with accurate reverse geocoding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;📦 Migration&lt;/strong&gt;: Migrate easily from Nextcloud Photos and Google Takeout.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;⚡️ Performance&lt;/strong&gt;: Do all this very fast.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the app from the Nextcloud app store.&lt;/li&gt; &#xA; &lt;li&gt;Perform the recommended &lt;a href=&#34;https://github.com/pulsejet/memories/wiki/Configuration&#34;&gt;configuration steps&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;php occ memories:index&lt;/code&gt; to generate metadata indices for existing photos.&lt;/li&gt; &#xA; &lt;li&gt;Open the 📷 Memories app in Nextcloud and set the directory containing your photos.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🏗 Development Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;☁ Clone this into your &lt;code&gt;custom_apps&lt;/code&gt; folder of your Nextcloud.&lt;/li&gt; &#xA; &lt;li&gt;👩‍💻 In a terminal, run the command &lt;code&gt;make dev-setup&lt;/code&gt; to install the dependencies.&lt;/li&gt; &#xA; &lt;li&gt;🏗 To build/watch the UI, run &lt;code&gt;make watch-js&lt;/code&gt;. Lint-fix PHP with &lt;code&gt;make php-lint&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;✅ Enable the app through the app management of your Nextcloud.&lt;/li&gt; &#xA; &lt;li&gt;⚒️ (Strongly recommended) use VS Code and install Vetur and Prettier.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🤝 Support the project&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;🌟 Star this repository&lt;/strong&gt;: This is the easiest way to support Memories and costs nothing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🪲 Report bugs&lt;/strong&gt;: Report any bugs you find on the issue tracker.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;📝 Contribute&lt;/strong&gt;: Read and file or comment on an issue and ask for guidance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🪙 Sponsorship&lt;/strong&gt;: You can support the project financially at &lt;a href=&#34;https://github.com/sponsors/pulsejet&#34;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A shout out to the current and past financial backers of Memories! See the sponsors page for a full list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mpodshivalin&#34;&gt;&lt;img src=&#34;https://github.com/mpodshivalin.png&#34; width=&#34;42&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/k1l1&#34;&gt;&lt;img src=&#34;https://github.com/k1l1.png&#34; width=&#34;42&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ChickenTarm&#34;&gt;&lt;img src=&#34;https://github.com/ChickenTarm.png&#34; width=&#34;42&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📝 Changelog&lt;/h2&gt; &#xA;&lt;p&gt;For the full changelog, see &lt;a href=&#34;https://raw.githubusercontent.com/pulsejet/memories/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🙏 Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Nextcloud team. A lot of this work is based on &lt;a href=&#34;https://github.com/nextcloud/photos&#34;&gt;Photos&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>