<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-13T01:40:08Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tighten/duster</title>
    <updated>2023-03-13T01:40:08Z</updated>
    <id>tag:github.com,2023-03-13:/tighten/duster</id>
    <link href="https://github.com/tighten/duster" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatic configuration for Laravel apps to apply Tighten&#39;s standard linting &amp; code standards.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tighten/duster/main/banner.png&#34; alt=&#34;Project Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Duster&lt;/h1&gt; &#xA;&lt;p&gt;Automatically apply Tighten&#39;s default code style for Laravel apps.&lt;/p&gt; &#xA;&lt;p&gt;Duster is built on top of the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TLint: lints Laravel and PHP code for issues not covered by other tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;using the default &lt;code&gt;Tighten&lt;/code&gt; preset&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PHP_CodeSniffer: sniffs issues that can&#39;t be fixed automatically &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;using the &lt;code&gt;Tighten&lt;/code&gt; preset which is mostly PSR1 with some Tighten-specific rules&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PHP CS Fixer: adds custom rules not supported by Laravel Pint &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;CustomOrderedClassElementsFixer&lt;/code&gt; Tighten-specific order of class elements&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pint: Laravel&#39;s code style rules (with a few Tighten specific customizations) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;using the default &lt;code&gt;Laravel&lt;/code&gt; preset with some Tighten-specific rules&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can view a list of the compiled rules and examples of what they do in the &lt;a href=&#34;https://raw.githubusercontent.com/tighten/duster/main/style-guide.md&#34;&gt;style guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require tightenco/duster --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally you can publish a GitHub Actions config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/duster github-actions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To lint everything at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/duster lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To fix everything at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/duster fix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To dust only files that have uncommitted changes according to Git, you may use the &lt;code&gt;--dirty&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/duster lint --dirty&#xA;#or&#xA;./vendor/bin/duster fix --dirty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view all available commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/duster&#xA;#or&#xA;./vendor/bin/duster commands&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customizing&lt;/h2&gt; &#xA;&lt;p&gt;If you need to include or exclude files or directories for each tool you can create a &lt;code&gt;duster.json&lt;/code&gt; config file in your project root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;include&#34;: [&#xA;        &#34;bin&#34;,&#xA;        &#34;scripts&#34;,&#xA;        &#34;src&#34;,&#xA;        &#34;tests&#34;&#xA;    ],&#xA;    &#34;exclude&#34;: [&#xA;        &#34;tests/fixtures&#34;&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run additional scripts as part of Duster first add them to &lt;code&gt;duster.json&lt;/code&gt; as part of &lt;code&gt;scripts&lt;/code&gt; separated into &lt;code&gt;lint&lt;/code&gt; and &lt;code&gt;fix&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The key is the name of the command (used with the &lt;code&gt;--using&lt;/code&gt; flag), and the value is an array of arguments passed to &lt;a href=&#34;https://symfony.com/doc/current/components/process.html&#34;&gt;&lt;code&gt;Symfony\Component\Process\Process&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;scripts&#34;: {&#xA;        &#34;lint&#34;: {&#xA;            &#34;phpstan&#34;: [&#34;./vendor/bin/phpstan&#34;, &#34;analyse&#34;]&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Duster will pick these up automatically when running either &lt;code&gt;lint&lt;/code&gt; or &lt;code&gt;fix&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To customize which tools Duster runs, or the order in which they are executed you can use the &lt;code&gt;--using&lt;/code&gt; flag and supply a comma-separated list of commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/duster lint --using=&#34;phpstan,tlint,pint&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TLint&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;tlint.json&lt;/code&gt; file in your project root. Learn more in the &lt;a href=&#34;https://github.com/tighten/tlint#configuration&#34;&gt;TLint documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;PHP_CodeSniffer&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;.phpcs.xml.dist&lt;/code&gt; file in your project root with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34;?&amp;gt;&#xA;&amp;lt;ruleset&amp;gt;&#xA;    &amp;lt;file&amp;gt;app&amp;lt;/file&amp;gt;&#xA;    &amp;lt;file&amp;gt;config&amp;lt;/file&amp;gt;&#xA;    &amp;lt;file&amp;gt;database&amp;lt;/file&amp;gt;&#xA;    &amp;lt;file&amp;gt;public&amp;lt;/file&amp;gt;&#xA;    &amp;lt;file&amp;gt;resources&amp;lt;/file&amp;gt;&#xA;    &amp;lt;file&amp;gt;routes&amp;lt;/file&amp;gt;&#xA;    &amp;lt;file&amp;gt;tests&amp;lt;/file&amp;gt;&#xA;&#xA;    &amp;lt;rule ref=&#34;Tighten&#34;/&amp;gt;&#xA;&amp;lt;/ruleset&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can add customizations below the &lt;code&gt;&amp;lt;rule ref=&#34;Tighten&#34;/&amp;gt;&lt;/code&gt; line or even disable the Tighten rule to use your own ruleset. Learn more in this &lt;a href=&#34;https://ncona.com/2012/12/creating-your-own-phpcs-standard/&#34;&gt;introductory article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;PHP CS Fixer&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;.php-cs-fixer.dist.php&lt;/code&gt; file in your project root with the contents from &lt;a href=&#34;https://raw.githubusercontent.com/tighten/duster/main/standards/.php-cs-fixer.dist.php&#34;&gt;Duster&#39;s &lt;code&gt;.php-cs-fixer.dist.php&lt;/code&gt;&lt;/a&gt; file. Learn more in the &lt;a href=&#34;https://cs.symfony.com/doc/config.html&#34;&gt;PHP CS Fixer documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Pint&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;pint.json&lt;/code&gt; file in your project root, you can use &lt;a href=&#34;https://raw.githubusercontent.com/tighten/duster/main/standards/pint.json&#34;&gt;Duster&#39;s &lt;code&gt;pint.json&lt;/code&gt;&lt;/a&gt; file as a starting point. Learn more in the &lt;a href=&#34;https://laravel.com/docs/pint#configuring-pint&#34;&gt;Pint documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GitHub Action&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a &lt;a href=&#34;https://github.com/tighten/duster-action&#34;&gt;GitHub Action&lt;/a&gt; you use to clean-up your workflows.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Heads Up! Workflows that commit to your repo will stop any currently running workflows and not trigger another workflow run.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;One solution is to run your other workflows after Duster has completed by updating the trigger on those workflows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;on:&#xA;  # Commits made in Duster Fix will not trigger any workflows&#xA;  # This workflow is configured to run after Duster finishes&#xA;  workflow_run:&#xA;    workflows: [&#34;Duster Fix&#34;]&#xA;    types:&#xA;      - completed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/tighten/duster/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover any security-related issues, please email &lt;a href=&#34;mailto:hello@tighten.co&#34;&gt;hello@tighten.co&lt;/a&gt; instead of using the issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattstauffer&#34;&gt;Matt Stauffer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/driftingly&#34;&gt;Anthony Clark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devgummibeer&#34;&gt;Tom Witkowski&lt;/a&gt; - much of the original idea and syntax for this was inspired by his &lt;a href=&#34;https://github.com/elbgoods/ci-test-tools&#34;&gt;&lt;code&gt;elbgoods/ci-test-tools&lt;/code&gt;&lt;/a&gt; package&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tighten/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/tighten/duster/main/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>