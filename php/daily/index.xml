<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-28T01:39:04Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>php-amqplib/php-amqplib</title>
    <updated>2022-09-28T01:39:04Z</updated>
    <id>tag:github.com,2022-09-28:/php-amqplib/php-amqplib</id>
    <link href="https://github.com/php-amqplib/php-amqplib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The most widely used PHP client for RabbitMQ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;php-amqplib&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/php-amqplib/php-amqplib/workflows/PHPUnit%20tests/badge.svg?sanitize=true&#34; alt=&#34;PHPUnit tests&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/php-amqplib/php-amqplib&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/php-amqplib/php-amqplib.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/php-amqplib/php-amqplib&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/php-amqplib/php-amqplib.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/php-amqplib/php-amqplib/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-LGPL_2.1-brightgreen.svg?style=flat-square&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/php-amqplib/php-amqplib&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/php-amqplib/php-amqplib/branch/master/graph/badge.svg?token=tgeYkUsaDM&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/php-amqplib/php-amqplib/code-structure&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/coverage/g/php-amqplib/php-amqplib.svg?style=flat-square&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/php-amqplib/php-amqplib&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/g/php-amqplib/php-amqplib.svg?style=flat-square&#34; alt=&#34;Quality Score&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library is a &lt;em&gt;pure PHP&lt;/em&gt; implementation of the &lt;a href=&#34;http://www.rabbitmq.com/tutorials/amqp-concepts.html&#34;&gt;AMQP 0-9-1 protocol&lt;/a&gt;. It&#39;s been tested against &lt;a href=&#34;http://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The library was used for the PHP examples of &lt;a href=&#34;http://manning.com/videla/&#34;&gt;RabbitMQ in Action&lt;/a&gt; and the &lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-one-php.html&#34;&gt;official RabbitMQ tutorials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a &lt;a href=&#34;https://raw.githubusercontent.com/php-amqplib/php-amqplib/master/.github/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;Project Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/videlalvaro&#34;&gt;videlalvaro&lt;/a&gt; and &lt;a href=&#34;https://github.com/postalservice14&#34;&gt;postalservice14&lt;/a&gt; for creating &lt;code&gt;php-amqplib&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The package is now maintained by &lt;a href=&#34;https://github.com/ramunasd&#34;&gt;RamÅ«nas Dronga&lt;/a&gt;, &lt;a href=&#34;https://github.com/lukebakken&#34;&gt;Luke Bakken&lt;/a&gt; and several VMware engineers working on RabbitMQ.&lt;/p&gt; &#xA;&lt;h2&gt;Supported RabbitMQ Versions&lt;/h2&gt; &#xA;&lt;p&gt;Starting with version 2.0 this library uses &lt;code&gt;AMQP 0.9.1&lt;/code&gt; by default and thus requires &lt;a href=&#34;http://www.rabbitmq.com/download.html&#34;&gt;RabbitMQ 2.0 or later version&lt;/a&gt;. Usually server upgrades do not require any application code changes since the protocol changes very infrequently but please conduct your own testing before upgrading.&lt;/p&gt; &#xA;&lt;h2&gt;Supported RabbitMQ Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Since the library uses &lt;code&gt;AMQP 0.9.1&lt;/code&gt; we added support for the following RabbitMQ extensions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exchange to Exchange Bindings&lt;/li&gt; &#xA; &lt;li&gt;Basic Nack&lt;/li&gt; &#xA; &lt;li&gt;Publisher Confirms&lt;/li&gt; &#xA; &lt;li&gt;Consumer Cancel Notify&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Extensions that modify existing methods like &lt;code&gt;alternate exchanges&lt;/code&gt; are also supported.&lt;/p&gt; &#xA;&lt;h3&gt;Related libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/php-enqueue/amqp-lib&#34;&gt;enqueue/amqp-lib&lt;/a&gt; is a &lt;a href=&#34;https://github.com/queue-interop/queue-interop#amqp-interop&#34;&gt;amqp interop&lt;/a&gt; compatible wrapper.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cloudamqp/amqproxy&#34;&gt;AMQProxy&lt;/a&gt; is a proxy library with connection and channel pooling/reusing. This allows for lower connection and channel churn when using php-amqplib, leading to less CPU usage of RabbitMQ.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Ensure you have &lt;a href=&#34;http://getcomposer.org&#34;&gt;composer&lt;/a&gt; installed, then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require php-amqplib/php-amqplib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That will fetch the library and its dependencies inside your vendor folder. Then you can add the following to your .php files in order to use the library&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once __DIR__.&#39;/vendor/autoload.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you need to &lt;code&gt;use&lt;/code&gt; the relevant classes, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use PhpAmqpLib\Connection\AMQPStreamConnection;&#xA;use PhpAmqpLib\Message\AMQPMessage;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;With RabbitMQ running open two Terminals and on the first one execute the following commands to start the consumer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd php-amqplib/demo&#xA;$ php amqp_consumer.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then on the other Terminal do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd php-amqplib/demo&#xA;$ php amqp_publisher.php some text to publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see the message arriving to the process on the other Terminal&lt;/p&gt; &#xA;&lt;p&gt;Then to stop the consumer, send to it the &lt;code&gt;quit&lt;/code&gt; message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php amqp_publisher.php quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to listen to the sockets used to connect to RabbitMQ then see the example in the non blocking consumer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php amqp_consumer_non_blocking.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/php-amqplib/php-amqplib/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://php-amqplib.github.io/php-amqplib/&#34;&gt;http://php-amqplib.github.io/php-amqplib/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;To not repeat ourselves, if you want to learn more about this library, please refer to the &lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-one-php.html&#34;&gt;official RabbitMQ tutorials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;amqp_ha_consumer.php&lt;/code&gt;: demos the use of mirrored queues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;amqp_consumer_exclusive.php&lt;/code&gt; and &lt;code&gt;amqp_publisher_exclusive.php&lt;/code&gt;: demos fanout exchanges using exclusive queues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;amqp_consumer_fanout_{1,2}.php&lt;/code&gt; and &lt;code&gt;amqp_publisher_fanout.php&lt;/code&gt;: demos fanout exchanges with named queues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;amqp_consumer_pcntl_heartbeat.php&lt;/code&gt;: demos signal-based heartbeat sender usage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;basic_get.php&lt;/code&gt;: demos obtaining messages from the queues by using the &lt;em&gt;basic get&lt;/em&gt; AMQP call.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Multiple hosts connections&lt;/h2&gt; &#xA;&lt;p&gt;If you have a cluster of multiple nodes to which your application can connect, you can start a connection with an array of hosts. To do that you should use the &lt;code&gt;create_connection&lt;/code&gt; static method.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$connection = AMQPStreamConnection::create_connection([&#xA;    [&#39;host&#39; =&amp;gt; HOST1, &#39;port&#39; =&amp;gt; PORT, &#39;user&#39; =&amp;gt; USER, &#39;password&#39; =&amp;gt; PASS, &#39;vhost&#39; =&amp;gt; VHOST],&#xA;    [&#39;host&#39; =&amp;gt; HOST2, &#39;port&#39; =&amp;gt; PORT, &#39;user&#39; =&amp;gt; USER, &#39;password&#39; =&amp;gt; PASS, &#39;vhost&#39; =&amp;gt; VHOST]&#xA;],&#xA;$options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code will try to connect to &lt;code&gt;HOST1&lt;/code&gt; first, and connect to &lt;code&gt;HOST2&lt;/code&gt; if the first connection fails. The method returns a connection object for the first successful connection. Should all connections fail it will throw the exception from the last connection attempt.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;demo/amqp_connect_multiple_hosts.php&lt;/code&gt; for more examples.&lt;/p&gt; &#xA;&lt;h2&gt;Batch Publishing&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s say you have a process that generates a bunch of messages that are going to be published to the same &lt;code&gt;exchange&lt;/code&gt; using the same &lt;code&gt;routing_key&lt;/code&gt; and options like &lt;code&gt;mandatory&lt;/code&gt;. Then you could make use of the &lt;code&gt;batch_basic_publish&lt;/code&gt; library feature. You can batch messages like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$msg = new AMQPMessage($msg_body);&#xA;$ch-&amp;gt;batch_basic_publish($msg, $exchange);&#xA;&#xA;$msg2 = new AMQPMessage($msg_body);&#xA;$ch-&amp;gt;batch_basic_publish($msg2, $exchange);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then send the batch like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$ch-&amp;gt;publish_batch();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When do we publish the message batch?&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say our program needs to read from a file and then publish one message per line. Depending on the message size, you will have to decide when it&#39;s better to send the batch. You could send it every 50 messages, or every hundred. That&#39;s up to you.&lt;/p&gt; &#xA;&lt;h2&gt;Optimized Message Publishing&lt;/h2&gt; &#xA;&lt;p&gt;Another way to speed up your message publishing is by reusing the &lt;code&gt;AMQPMessage&lt;/code&gt; message instances. You can create your new message like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$properties = array(&#39;content_type&#39; =&amp;gt; &#39;text/plain&#39;, &#39;delivery_mode&#39; =&amp;gt; AMQPMessage::DELIVERY_MODE_PERSISTENT);&#xA;$msg = new AMQPMessage($body, $properties);&#xA;$ch-&amp;gt;basic_publish($msg, $exchange);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now let&#39;s say that while you want to change the message body for future messages, you will keep the same properties, that is, your messages will still be &lt;code&gt;text/plain&lt;/code&gt; and the &lt;code&gt;delivery_mode&lt;/code&gt; will still be &lt;code&gt;AMQPMessage::DELIVERY_MODE_PERSISTENT&lt;/code&gt;. If you create a new &lt;code&gt;AMQPMessage&lt;/code&gt; instance for every published message, then those properties would have to be re-encoded in the AMQP binary format. You could avoid all that by just reusing the &lt;code&gt;AMQPMessage&lt;/code&gt; and then resetting the message body like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$msg-&amp;gt;setBody($body2);&#xA;$ch-&amp;gt;basic_publish($msg, $exchange);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Truncating Large Messages&lt;/h2&gt; &#xA;&lt;p&gt;AMQP imposes no limit on the size of messages; if a very large message is received by a consumer, PHP&#39;s memory limit may be reached within the library before the callback passed to &lt;code&gt;basic_consume&lt;/code&gt; is called.&lt;/p&gt; &#xA;&lt;p&gt;To avoid this, you can call the method &lt;code&gt;AMQPChannel::setBodySizeLimit(int $bytes)&lt;/code&gt; on your Channel instance. Body sizes exceeding this limit will be truncated, and delivered to your callback with a &lt;code&gt;AMQPMessage::$is_truncated&lt;/code&gt; flag set to &lt;code&gt;true&lt;/code&gt;. The property &lt;code&gt;AMQPMessage::$body_size&lt;/code&gt; will reflect the true body size of a received message, which will be higher than &lt;code&gt;strlen(AMQPMessage::getBody())&lt;/code&gt; if the message has been truncated.&lt;/p&gt; &#xA;&lt;p&gt;Note that all data above the limit is read from the AMQP Channel and immediately discarded, so there is no way to retrieve it within your callback. If you have another consumer which can handle messages with larger payloads, you can use &lt;code&gt;basic_reject&lt;/code&gt; or &lt;code&gt;basic_nack&lt;/code&gt; to tell the server (which still has a complete copy) to forward it to a Dead Letter Exchange.&lt;/p&gt; &#xA;&lt;p&gt;By default, no truncation will occur. To disable truncation on a Channel that has had it enabled, pass &lt;code&gt;0&lt;/code&gt; (or &lt;code&gt;null&lt;/code&gt;) to &lt;code&gt;AMQPChannel::setBodySizeLimit()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Connection recovery&lt;/h2&gt; &#xA;&lt;p&gt;Some RabbitMQ clients using automated connection recovery mechanisms to reconnect and recover channels and consumers in case of network errors.&lt;/p&gt; &#xA;&lt;p&gt;Since this client is using a single-thread, you can set up connection recovery using exception handling mechanism.&lt;/p&gt; &#xA;&lt;p&gt;Exceptions which might be thrown in case of connection errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;PhpAmqpLib\Exception\AMQPConnectionClosedException&#xA;PhpAmqpLib\Exception\AMQPIOException&#xA;\RuntimeException&#xA;\ErrorException&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some other exceptions might be thrown, but connection can still be there. It&#39;s always a good idea to clean up an old connection when handling an exception before reconnecting.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to set up a recovering connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$connection = null;&#xA;$channel = null;&#xA;while(true){&#xA;    try {&#xA;        $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);&#xA;        // Your application code goes here.&#xA;        do_something_with_connection($connection);&#xA;    } catch(AMQPRuntimeException $e) {&#xA;        echo $e-&amp;gt;getMessage();&#xA;        cleanup_connection($connection);&#xA;        usleep(WAIT_BEFORE_RECONNECT_uS);&#xA;    } catch(\RuntimeException $e) {&#xA;        cleanup_connection($connection);&#xA;        usleep(WAIT_BEFORE_RECONNECT_uS);&#xA;    } catch(\ErrorException $e) {&#xA;        cleanup_connection($connection);&#xA;        usleep(WAIT_BEFORE_RECONNECT_uS);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A full example is in &lt;code&gt;demo/connection_recovery_consume.php&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This code will reconnect and retry the application code every time the exception occurs. Some exceptions can still be thrown and should not be handled as a part of reconnection process, because they might be application errors.&lt;/p&gt; &#xA;&lt;p&gt;This approach makes sense mostly for consumer applications, producers will require some additional application code to avoid publishing the same message multiple times.&lt;/p&gt; &#xA;&lt;p&gt;This was a simplest example, in a real-life application you might want to control retr count and maybe gracefully degrade wait time to reconnection.&lt;/p&gt; &#xA;&lt;p&gt;You can find a more excessive example in &lt;a href=&#34;https://github.com/php-amqplib/php-amqplib/issues/444&#34;&gt;#444&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;UNIX Signals&lt;/h2&gt; &#xA;&lt;p&gt;If you have installed &lt;a href=&#34;http://www.php.net/manual/en/book.pcntl.php&#34;&gt;PCNTL extension&lt;/a&gt; dispatching of signal will be handled when consumer is not processing message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$pcntlHandler = function ($signal) {&#xA;    switch ($signal) {&#xA;        case \SIGTERM:&#xA;        case \SIGUSR1:&#xA;        case \SIGINT:&#xA;            // some stuff before stop consumer e.g. delete lock etc&#xA;            pcntl_signal($signal, SIG_DFL); // restore handler&#xA;            posix_kill(posix_getpid(), $signal); // kill self with signal, see https://www.cons.org/cracauer/sigint.html&#xA;        case \SIGHUP:&#xA;            // some stuff to restart consumer&#xA;            break;&#xA;        default:&#xA;            // do nothing&#xA;    }&#xA;};&#xA;&#xA;pcntl_signal(\SIGTERM, $pcntlHandler);&#xA;pcntl_signal(\SIGINT,  $pcntlHandler);&#xA;pcntl_signal(\SIGUSR1, $pcntlHandler);&#xA;pcntl_signal(\SIGHUP,  $pcntlHandler);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable this feature just define constant &lt;code&gt;AMQP_WITHOUT_SIGNALS&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;define(&#39;AMQP_WITHOUT_SIGNALS&#39;, true);&#xA;&#xA;... more code&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Signal-based Heartbeat&lt;/h2&gt; &#xA;&lt;p&gt;If you have installed &lt;a href=&#34;http://www.php.net/manual/en/book.pcntl.php&#34;&gt;PCNTL extension&lt;/a&gt; and are using PHP 7.1 or greater, you can register a signal-based heartbeat sender.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;$sender = new PCNTLHeartbeatSender($connection);&#xA;$sender-&amp;gt;register();&#xA;... code&#xA;$sender-&amp;gt;unregister();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;If you want to know what&#39;s going on at a protocol level then add the following constant to your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;define(&#39;AMQP_DEBUG&#39;, true);&#xA;&#xA;... more code&#xA;&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;To run the publishing/consume benchmark type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make benchmark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;To successfully run the tests you need to first have a stock RabbitMQ broker running locally.Then, run tests like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/php-amqplib/php-amqplib/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Using AMQP 0.8&lt;/h2&gt; &#xA;&lt;p&gt;If you still want to use the old version of the protocol then you can do it by setting the following constant in your configuration code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;define(&#39;AMQP_PROTOCOL&#39;, &#39;0.8&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value is &lt;code&gt;&#39;0.9.1&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Providing your own autoloader&lt;/h2&gt; &#xA;&lt;p&gt;If for some reason you don&#39;t want to use composer, then you need to have an autoloader in place fo the library classes. People have &lt;a href=&#34;https://github.com/videlalvaro/php-amqplib/issues/61#issuecomment-37855050&#34;&gt;reported&lt;/a&gt; to use this &lt;a href=&#34;https://gist.github.com/jwage/221634&#34;&gt;autoloader&lt;/a&gt; with success.&lt;/p&gt; &#xA;&lt;h2&gt;Original README:&lt;/h2&gt; &#xA;&lt;p&gt;Below is the original README file content. Credits goes to the original authors.&lt;/p&gt; &#xA;&lt;p&gt;PHP library implementing Advanced Message Queuing Protocol (AMQP).&lt;/p&gt; &#xA;&lt;p&gt;The library is port of python code of py-amqplib &lt;a href=&#34;http://barryp.org/software/py-amqplib/&#34;&gt;http://barryp.org/software/py-amqplib/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It have been tested with RabbitMQ server.&lt;/p&gt; &#xA;&lt;p&gt;Project home page: &lt;a href=&#34;http://code.google.com/p/php-amqplib/&#34;&gt;http://code.google.com/p/php-amqplib/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For discussion, please join the group:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://groups.google.com/group/php-amqplib-devel&#34;&gt;http://groups.google.com/group/php-amqplib-devel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For bug reports, please use bug tracking system at the project page.&lt;/p&gt; &#xA;&lt;p&gt;Patches are very welcome!&lt;/p&gt; &#xA;&lt;p&gt;Author: Vadim Zaliva &lt;a href=&#34;mailto:lord@crocodile.org&#34;&gt;lord@crocodile.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>