<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-15T01:39:23Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eraporsmk/erapor7</title>
    <updated>2023-12-15T01:39:23Z</updated>
    <id>tag:github.com,2023-12-15:/eraporsmk/erapor7</id>
    <link href="https://github.com/eraporsmk/erapor7" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Aplikasi Penilaian Direktorat SMK Kemdikbudristek Republik Indonesia&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;http://app.erapor-smk.net/logo.png&#34; width=&#34;600&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Server Requirements&lt;/h2&gt; &#xA;&lt;p&gt;PHP &amp;gt;= 8.1.0&lt;/p&gt; &#xA;&lt;p&gt;Ctype PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;cURL PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;DOM PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;Fileinfo PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;Filter PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;Hash PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;Mbstring PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;OpenSSL PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;PCRE PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;PDO PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;Session PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;Tokenizer PHP Extension&lt;/p&gt; &#xA;&lt;p&gt;XML PHP Extension&lt;/p&gt; &#xA;&lt;h2&gt;Cara Install (Untuk Pengguna Baru)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone Repositori ini&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/eraporsmk/erapor7.git dataweb&#xA;cd dataweb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Membuat file .env&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;nano .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Koneksi Database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DB_HOST=127.0.0.1&#xA;DB_PORT=5432&#xA;DB_DATABASE=db_name&#xA;DB_USERNAME=db_user&#xA;DB_PASSWORD=db_pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generate App Key&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan key:generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Migration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Membuat struktur table&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jalankan seeder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Untuk pengguna windows:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Panduan aplikasi &amp;amp; installer. silahkan download &lt;a href=&#34;http://erapor.ditpsmk.net/pusat-unduhan&#34;&gt;disini&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cara Install (Untuk Pengguna Lama)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone Repositori ini&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/eraporsmk/erapor7.git dataweb&#xA;cd dataweb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copy file .env&lt;/h2&gt; &#xA;&lt;p&gt;Copy file .env dari root folder aplikasi versi 6xx ke root folder aplikasi versi 7xx&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Update Versi Aplikasi&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan erapor:update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Edit file .env untuk menampilkan foto profile&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;APP_URL=http://localhost:8154&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sesuaikan dengan alamat/domain yang dipakai&lt;/p&gt; &#xA;&lt;p&gt;Kemudian tambah kode dibawah ini agar laman register tidak tersedia&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;REGISTRATION=false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Catatan khusus pengguna windows:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Konfigurasi koneksi database seperti dibawah ini&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;DB_CONNECTION=pgsql&#xA;DB_HOST=127.0.0.1&#xA;&#xA;DB_PORT=58154&#xA;DB_DATABASE=windows&#xA;DB_USERNAME=windows&#xA;DB_PASSWORD=windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Catatan khusus untuk pengguna lama (ALL OS):&lt;/h2&gt; &#xA;&lt;p&gt;Untuk mengambil gambar/foto/logo yang telah di upload di aplikasi versi sebelumnya, silahkan copy dari aplikasi lama di folder storage/public, kemudian paste di aplikasi baru di folder storage/public&lt;/p&gt; &#xA;&lt;h2&gt;Fitur Reset Password:&lt;/h2&gt; &#xA;&lt;p&gt;Untuk mengaktifkan fitur reset password, silahkan edit file .env, cari kode dibawah ini:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MAIL_MAILER=smtp&#xA;MAIL_HOST=mailhog&#xA;MAIL_PORT=1025&#xA;MAIL_USERNAME=null&#xA;MAIL_PASSWORD=null&#xA;MAIL_ENCRYPTION=null&#xA;MAIL_FROM_ADDRESS=&#34;hello@example.com&#34;&#xA;MAIL_FROM_NAME=&#34;${APP_NAME}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kemudian ganti dengan kode ini:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MAIL_MAILER=smtp&#xA;MAIL_HOST=smtp.gmail.com&#xA;MAIL_PORT=587&#xA;MAIL_USERNAME=eraporsmk@gmail.com&#xA;MAIL_PASSWORD=&#34;twvv dabv jimx mykw&#34;&#xA;MAIL_ENCRYPTION=ssl&#xA;MAIL_FROM_ADDRESS=eraporsmk@gmail.com&#xA;MAIL_FROM_NAME=&#34;${APP_NAME}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kemudian simpan perubahan file .env lalu jalankan:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan config:clear&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Catatan: Tidak perlu merubah apapun, copy paste sesuai yang tertera di deskripsi&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it (&lt;a href=&#34;https://github.com/eraporsmk/erapor7/fork&#34;&gt;https://github.com/eraporsmk/erapor7/fork&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b feature/fooBar&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Add some fooBar&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin feature/fooBar&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create a new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>staudenmeir/eloquent-has-many-deep</title>
    <updated>2023-12-15T01:39:23Z</updated>
    <id>tag:github.com,2023-12-15:/staudenmeir/eloquent-has-many-deep</id>
    <link href="https://github.com/staudenmeir/eloquent-has-many-deep" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Laravel Eloquent HasManyThrough relationships with unlimited levels&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eloquent HasManyDeep&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/staudenmeir/eloquent-has-many-deep/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/staudenmeir/eloquent-has-many-deep/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/staudenmeir/eloquent-has-many-deep/?branch=master&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/staudenmeir/eloquent-has-many-deep/badges/coverage.png?b=master&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/staudenmeir/eloquent-has-many-deep/?branch=master&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/staudenmeir/eloquent-has-many-deep/badges/quality-score.png?b=master&#34; alt=&#34;Scrutinizer Code Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/staudenmeir/eloquent-has-many-deep&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/staudenmeir/eloquent-has-many-deep/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/staudenmeir/eloquent-has-many-deep/stats&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/staudenmeir/eloquent-has-many-deep/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/staudenmeir/eloquent-has-many-deep/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/staudenmeir/eloquent-has-many-deep/license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This extended version of &lt;code&gt;HasManyThrough&lt;/code&gt; allows relationships with unlimited intermediate models.&lt;br&gt; It supports &lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#manytomany&#34;&gt;many-to-many&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#morphmany&#34;&gt;polymorphic&lt;/a&gt; relationships and all their possible combinations. It also supports some &lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#third-party-packages&#34;&gt;third-party packages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Supports Laravel 5.5.29+.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require staudenmeir/eloquent-has-many-deep:&#34;^1.7&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use this command if you are in PowerShell on Windows (e.g. in VS Code):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require staudenmeir/eloquent-has-many-deep:&#34;^^^^1.7&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Laravel&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.18&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.17&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.5–5.7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The package offers two ways of defining deep relationships:&lt;br&gt; You can concatenate &lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#concatenating-existing-relationships&#34;&gt;existing relationships&lt;/a&gt; or specify the intermediate models, foreign and local keys &lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#defining-relationships-manually&#34;&gt;manually&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#concatenating-existing-relationships&#34;&gt;Concatenating Existing Relationships&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#constraints&#34;&gt;Constraints&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#third-party-packages&#34;&gt;Third-Party Packages&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#defining-relationships-manually&#34;&gt;Defining Relationships Manually&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#hasmany&#34;&gt;HasMany&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#manytomany&#34;&gt;ManyToMany&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#morphmany&#34;&gt;MorphMany&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#morphtomany&#34;&gt;MorphToMany&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#morphedbymany&#34;&gt;MorphedByMany&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#belongsto&#34;&gt;BelongsTo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#hasonedeep&#34;&gt;HasOneDeep&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#composite-keys&#34;&gt;Composite Keys&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#intermediate-and-pivot-data&#34;&gt;Intermediate and Pivot Data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#intermediate-and-pivot-constraints&#34;&gt;Intermediate and Pivot Constraints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#table-aliases&#34;&gt;Table Aliases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#soft-deleting&#34;&gt;Soft Deleting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#reversing-relationships&#34;&gt;Reversing Relationships&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#ide-helper&#34;&gt;IDE Helper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Concatenating Existing Relationships&lt;/h3&gt; &#xA;&lt;p&gt;Consider this &lt;a href=&#34;https://laravel.com/docs/eloquent-relationships#has-many-through&#34;&gt;example&lt;/a&gt; from the Laravel documentation with an additional level:&lt;br&gt; &lt;code&gt;Country&lt;/code&gt; → has many → &lt;code&gt;User&lt;/code&gt; → has many → &lt;code&gt;Post&lt;/code&gt; → has many → &lt;code&gt;Comment&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can define a &lt;code&gt;HasManyDeep&lt;/code&gt; relationship by concatenating existing relationships:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Country extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function comments()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeepFromRelations($this-&amp;gt;posts(), (new Post())-&amp;gt;comments());&#xA;    }&#xA;&#xA;    public function posts()&#xA;    {&#xA;        return $this-&amp;gt;hasManyThrough(Post::class, User::class);&#xA;    }&#xA;}&#xA;&#xA;class Post extends Model&#xA;{&#xA;    public function comments()&#xA;    {&#xA;        return $this-&amp;gt;hasMany(Comment::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Define a &lt;code&gt;HasOneDeep&lt;/code&gt; relationship with &lt;code&gt;hasOneDeepFromRelations()&lt;/code&gt; if you only want to retrieve a single related instance.&lt;/p&gt; &#xA;&lt;h4&gt;Constraints&lt;/h4&gt; &#xA;&lt;p&gt;By default, constraints from the concatenated relationships are not transferred to the new deep relationship. Use &lt;code&gt;hasManyDeepFromRelationsWithConstraints()&lt;/code&gt; with the relationships as callable arrays to apply these constraints:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Country extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function comments()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeepFromRelationsWithConstraints([$this, &#39;posts&#39;], [new Post(), &#39;comments&#39;]);&#xA;    }&#xA;&#xA;    public function posts()&#xA;    {&#xA;        return $this-&amp;gt;hasManyThrough(Post::class, User::class)-&amp;gt;where(&#39;posts.published&#39;, true);&#xA;    }&#xA;}&#xA;&#xA;class Post extends Model&#xA;{&#xA;    public function comments()&#xA;    {&#xA;        return $this-&amp;gt;hasMany(Comment::class)-&amp;gt;withTrashed();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to qualify the constraints&#39; column names if they appear in multiple tables:&lt;br&gt; &lt;code&gt;-&amp;gt;where(&#39;posts.published&#39;, true)&lt;/code&gt; instead of &lt;code&gt;-&amp;gt;where(&#39;published&#39;, true)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Third-Party Packages&lt;/h4&gt; &#xA;&lt;p&gt;Besides native Laravel relationships, you can also concatenate relationships from these third-party packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/korridor/laravel-has-many-merged&#34;&gt;https://github.com/korridor/laravel-has-many-merged&lt;/a&gt;: &lt;code&gt;HasManyMerged&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/staudenmeir/eloquent-json-relations&#34;&gt;https://github.com/staudenmeir/eloquent-json-relations&lt;/a&gt;: &lt;code&gt;BelongsToJson&lt;/code&gt;, &lt;code&gt;HasManyJson&lt;/code&gt;, &lt;code&gt;HasManyThroughJson&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/staudenmeir/laravel-adjacency-list&#34;&gt;https://github.com/staudenmeir/laravel-adjacency-list&lt;/a&gt;: &lt;a href=&#34;https://github.com/staudenmeir/laravel-adjacency-list#concatenation&#34;&gt;Tree relationships&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/topclaudy/compoships&#34;&gt;https://github.com/topclaudy/compoships&lt;/a&gt;: &lt;code&gt;BelongsTo&lt;/code&gt;, &lt;code&gt;HasMany&lt;/code&gt;, &lt;code&gt;HasOne&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Defining Relationships Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have all the necessary existing relationships to concatenate them, you can also define a deep relationship manually by specifying the intermediate models, foreign and local keys.&lt;/p&gt; &#xA;&lt;h4&gt;HasMany&lt;/h4&gt; &#xA;&lt;p&gt;Consider this &lt;a href=&#34;https://laravel.com/docs/eloquent-relationships#has-many-through&#34;&gt;example&lt;/a&gt; from the Laravel documentation with an additional level:&lt;br&gt; &lt;code&gt;Country&lt;/code&gt; → has many → &lt;code&gt;User&lt;/code&gt; → has many → &lt;code&gt;Post&lt;/code&gt; → has many → &lt;code&gt;Comment&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Country extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function comments()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(Comment::class, [User::class, Post::class]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like with &lt;code&gt;hasManyThrough()&lt;/code&gt;, the first argument of &lt;code&gt;hasManyDeep()&lt;/code&gt; is the related model. The second argument is an array of intermediate models, from the far parent (the model where the relationship is defined) to the related model.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;hasManyDeep()&lt;/code&gt; uses the Eloquent conventions for foreign and local keys. You can also specify custom foreign keys as the third argument and custom local keys as the fourth argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Country extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function comments()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(&#xA;            Comment::class,&#xA;            [User::class, Post::class], // Intermediate models, beginning at the far parent (Country).&#xA;            [&#xA;               &#39;country_id&#39;, // Foreign key on the &#34;users&#34; table.&#xA;               &#39;user_id&#39;,    // Foreign key on the &#34;posts&#34; table.&#xA;               &#39;post_id&#39;     // Foreign key on the &#34;comments&#34; table.&#xA;            ],&#xA;            [&#xA;              &#39;id&#39;, // Local key on the &#34;countries&#34; table.&#xA;              &#39;id&#39;, // Local key on the &#34;users&#34; table.&#xA;              &#39;id&#39;  // Local key on the &#34;posts&#34; table.&#xA;            ]&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;null&lt;/code&gt; placeholders for default keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Country extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function comments()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(Comment::class, [User::class, Post::class], [null, &#39;custom_user_id&#39;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ManyToMany&lt;/h4&gt; &#xA;&lt;p&gt;You can include &lt;code&gt;ManyToMany&lt;/code&gt; relationships in the intermediate path.&lt;/p&gt; &#xA;&lt;h5&gt;ManyToMany → HasMany&lt;/h5&gt; &#xA;&lt;p&gt;Consider this &lt;a href=&#34;https://laravel.com/docs/eloquent-relationships#many-to-many&#34;&gt;example&lt;/a&gt; from the Laravel documentation with an additional &lt;code&gt;HasMany&lt;/code&gt; level:&lt;br&gt; &lt;code&gt;User&lt;/code&gt; → many to many → &lt;code&gt;Role&lt;/code&gt; → has many → &lt;code&gt;Permission&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the pivot tables to the intermediate models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function permissions()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(Permission::class, [&#39;role_user&#39;, Role::class]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you specify custom keys, remember to swap the foreign and local key on the &#34;right&#34; side of the pivot table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function permissions()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(&#xA;            Permission::class,&#xA;            [&#39;role_user&#39;, Role::class], // Intermediate models and tables, beginning at the far parent (User).&#xA;            [           &#xA;               &#39;user_id&#39;, // Foreign key on the &#34;role_user&#34; table.&#xA;               &#39;id&#39;,      // Foreign key on the &#34;roles&#34; table (local key).&#xA;               &#39;role_id&#39;  // Foreign key on the &#34;permissions&#34; table.&#xA;            ],&#xA;            [          &#xA;              &#39;id&#39;,      // Local key on the &#34;users&#34; table.&#xA;              &#39;role_id&#39;, // Local key on the &#34;role_user&#34; table (foreign key).&#xA;              &#39;id&#39;       // Local key on the &#34;roles&#34; table.&#xA;            ]&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;ManyToMany → ManyToMany&lt;/h5&gt; &#xA;&lt;p&gt;Consider this &lt;a href=&#34;https://laravel.com/docs/eloquent-relationships#many-to-many&#34;&gt;example&lt;/a&gt; from the Laravel documentation with an additional &lt;code&gt;ManyToMany&lt;/code&gt; level:&lt;br&gt; &lt;code&gt;User&lt;/code&gt; → many to many → &lt;code&gt;Role&lt;/code&gt; → many to many → &lt;code&gt;Permission&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the pivot table to the intermediate models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function permissions()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(Permission::class, [&#39;role_user&#39;, Role::class, &#39;permission_role&#39;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MorphMany&lt;/h4&gt; &#xA;&lt;p&gt;You can include &lt;code&gt;MorphMany&lt;/code&gt; relationships in the intermediate path.&lt;/p&gt; &#xA;&lt;p&gt;Consider this &lt;a href=&#34;https://laravel.com/docs/eloquent-relationships#polymorphic-relations&#34;&gt;example&lt;/a&gt; from the Laravel documentation with an additional level:&lt;br&gt; &lt;code&gt;User&lt;/code&gt; → has many → &lt;code&gt;Post&lt;/code&gt; → morph many → &lt;code&gt;Comment&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specify the polymorphic foreign keys as an array, starting with the &lt;code&gt;*_type&lt;/code&gt; column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function postComments()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(&#xA;            Comment::class,&#xA;            [Post::class],&#xA;            [null, [&#39;commentable_type&#39;, &#39;commentable_id&#39;]]&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MorphToMany&lt;/h4&gt; &#xA;&lt;p&gt;You can include &lt;code&gt;MorphToMany&lt;/code&gt; relationships in the intermediate path.&lt;/p&gt; &#xA;&lt;p&gt;Consider this &lt;a href=&#34;https://laravel.com/docs/eloquent-relationships#many-to-many-polymorphic-relations&#34;&gt;example&lt;/a&gt; from the Laravel documentation with an additional level:&lt;br&gt; &lt;code&gt;User&lt;/code&gt; → has many → &lt;code&gt;Post&lt;/code&gt; → morph to many → &lt;code&gt;Tag&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the pivot table to the intermediate models and specify the polymorphic foreign keys as an array, starting with the &lt;code&gt;*_type&lt;/code&gt; column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function postTags()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(&#xA;            Tag::class,&#xA;            [Post::class, &#39;taggables&#39;],&#xA;            [null, [&#39;taggable_type&#39;, &#39;taggable_id&#39;], &#39;id&#39;],&#xA;            [null, null, &#39;tag_id&#39;]&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember to swap the foreign and local key on the &#34;right&#34; side of the pivot table:&lt;/p&gt; &#xA;&lt;h4&gt;MorphedByMany&lt;/h4&gt; &#xA;&lt;p&gt;You can include &lt;code&gt;MorphedByMany&lt;/code&gt; relationships in the intermediate path.&lt;/p&gt; &#xA;&lt;p&gt;Consider this &lt;a href=&#34;https://laravel.com/docs/eloquent-relationships#many-to-many-polymorphic-relations&#34;&gt;example&lt;/a&gt; from the Laravel documentation with an additional level:&lt;br&gt; &lt;code&gt;Tag&lt;/code&gt; → morphed by many → &lt;code&gt;Post&lt;/code&gt; → has many → &lt;code&gt;Comment&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the pivot table to the intermediate models and specify the polymorphic local keys as an array, starting with the &lt;code&gt;*_type&lt;/code&gt; column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Tag extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function postComments()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(&#xA;            Comment::class,&#xA;            [&#39;taggables&#39;, Post::class],&#xA;            [null, &#39;id&#39;],&#xA;            [null, [&#39;taggable_type&#39;, &#39;taggable_id&#39;]]&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;BelongsTo&lt;/h4&gt; &#xA;&lt;p&gt;You can include &lt;code&gt;BelongsTo&lt;/code&gt; relationships in the intermediate path:&lt;br&gt; &lt;code&gt;Tag&lt;/code&gt; → morphed by many → &lt;code&gt;Post&lt;/code&gt; → belongs to → &lt;code&gt;User&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swap the foreign and local key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Tag extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function postAuthors()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(&#xA;            User::class,&#xA;            [&#39;taggables&#39;, Post::class],&#xA;            [null, &#39;id&#39;, &#39;id&#39;],&#xA;            [null, [&#39;taggable_type&#39;, &#39;taggable_id&#39;], &#39;user_id&#39;]&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HasOneDeep&lt;/h4&gt; &#xA;&lt;p&gt;Define a &lt;code&gt;HasOneDeep&lt;/code&gt; relationship if you only want to retrieve a single related instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Country extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function latestComment()&#xA;    {&#xA;        return $this-&amp;gt;hasOneDeep(Comment::class, [User::class, Post::class])&#xA;            -&amp;gt;latest(&#39;comments.created_at&#39;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Composite Keys&lt;/h4&gt; &#xA;&lt;p&gt;If multiple columns need to match between two tables, you can define a composite key with the &lt;code&gt;CompositeKey&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;Consider this &lt;a href=&#34;https://github.com/topclaudy/compoships#example&#34;&gt;example&lt;/a&gt; from the &lt;code&gt;compoships&lt;/code&gt; documentation with an additional level:&lt;br&gt; &lt;code&gt;User&lt;/code&gt; → has many (matching &lt;code&gt;team_id&lt;/code&gt; &amp;amp; &lt;code&gt;category_id&lt;/code&gt;) → &lt;code&gt;Task&lt;/code&gt; → belongs to → &lt;code&gt;Project&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Staudenmeir\EloquentHasManyDeep\Eloquent\CompositeKey;&#xA;&#xA;class User extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function projects()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(&#xA;            Project::class,&#xA;            [Task::class],&#xA;            [new CompositeKey(&#39;team_id&#39;, &#39;category_id&#39;), &#39;id&#39;],&#xA;            [new CompositeKey(&#39;team_id&#39;, &#39;category_id&#39;), &#39;project_id&#39;]&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Intermediate and Pivot Data&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;withIntermediate()&lt;/code&gt; to retrieve attributes from intermediate tables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function comments()&#xA;{&#xA;    return $this-&amp;gt;hasManyDeep(Comment::class, [User::class, Post::class])&#xA;        -&amp;gt;withIntermediate(Post::class);&#xA;}&#xA;&#xA;foreach ($country-&amp;gt;comments as $comment) {&#xA;    // $comment-&amp;gt;post-&amp;gt;title&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this will retrieve all the table&#39;s columns. Be aware that this executes a separate query to get the list of columns.&lt;/p&gt; &#xA;&lt;p&gt;You can specify the selected columns as the second argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function comments()&#xA;{&#xA;    return $this-&amp;gt;hasManyDeep(Comment::class, [User::class, Post::class])&#xA;        -&amp;gt;withIntermediate(Post::class, [&#39;id&#39;, &#39;title&#39;]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As the third argument, you can specify a custom accessor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function comments()&#xA;{&#xA;    return $this-&amp;gt;hasManyDeep(Comment::class, [User::class, Post::class])&#xA;        -&amp;gt;withIntermediate(Post::class, [&#39;id&#39;, &#39;title&#39;], &#39;accessor&#39;);&#xA;}&#xA;&#xA;foreach ($country-&amp;gt;comments as $comment) {&#xA;    // $comment-&amp;gt;accessor-&amp;gt;title&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you retrieve data from multiple tables, you can use nested accessors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function comments()&#xA;{&#xA;    return $this-&amp;gt;hasManyDeep(Comment::class, [User::class, Post::class])&#xA;        -&amp;gt;withIntermediate(Post::class)&#xA;        -&amp;gt;withIntermediate(User::class, [&#39;*&#39;], &#39;post.user&#39;);&#xA;}&#xA;&#xA;foreach ($country-&amp;gt;comments as $comment) {&#xA;    // $comment-&amp;gt;post-&amp;gt;title&#xA;    // $comment-&amp;gt;post-&amp;gt;user-&amp;gt;name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;withPivot()&lt;/code&gt; for the pivot tables of &lt;code&gt;BelongsToMany&lt;/code&gt; and &lt;code&gt;MorphToMany&lt;/code&gt;/&lt;code&gt;MorphedByMany&lt;/code&gt; relationships:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function permissions()&#xA;{&#xA;    return $this-&amp;gt;hasManyDeep(Permission::class, [&#39;role_user&#39;, Role::class])&#xA;        -&amp;gt;withPivot(&#39;role_user&#39;, [&#39;expires_at&#39;]);&#xA;}&#xA;&#xA;foreach ($user-&amp;gt;permissions as $permission) {&#xA;    // $permission-&amp;gt;role_user-&amp;gt;expires_at&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify a custom pivot model as the third argument and a custom accessor as the fourth:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function permissions()&#xA;{&#xA;    return $this-&amp;gt;hasManyDeep(Permission::class, [&#39;role_user&#39;, Role::class])&#xA;        -&amp;gt;withPivot(&#39;role_user&#39;, [&#39;expires_at&#39;], RoleUser::class, &#39;pivot&#39;);&#xA;}&#xA;&#xA;foreach ($user-&amp;gt;permissions as $permission) {&#xA;    // $permission-&amp;gt;pivot-&amp;gt;expires_at&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Intermediate and Pivot Constraints&lt;/h3&gt; &#xA;&lt;p&gt;You can apply constraints on intermediate and pivot tables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Country extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function comments()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(Comment::class, [User::class, Post::class]);&#xA;    }&#xA;}&#xA;&#xA;$commentsFromActiveUsers = $country-&amp;gt;comments()-&amp;gt;where(&#39;users.active&#39;, true)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Table Aliases&lt;/h3&gt; &#xA;&lt;p&gt;If your relationship path contains the same model multiple times, you can specify a table alias:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Post extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function commentReplies()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(Comment::class, [&#39;App\Comment as alias&#39;], [null, &#39;parent_id&#39;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;HasTableAlias&lt;/code&gt; trait in the models you are aliasing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Comment extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasTableAlias;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For pivot tables, this requires custom models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function permissions()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(Permission::class, [&#39;App\RoleUser as alias&#39;, Role::class]);&#xA;    }&#xA;}&#xA;&#xA;class RoleUser extends Pivot&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasTableAlias;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;setAlias()&lt;/code&gt; to specify a table alias when concatenating existing relationships (Laravel 6+):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Post extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function commentReplies()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeepFromRelations(&#xA;            $this-&amp;gt;comments(),&#xA;            (new Comment())-&amp;gt;setAlias(&#39;alias&#39;)-&amp;gt;replies()&#xA;        );&#xA;    }&#xA;&#xA;    public function comments()&#xA;    {&#xA;        return $this-&amp;gt;hasMany(Comment::class);&#xA;    }&#xA;}&#xA;&#xA;class Comment extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasTableAlias;&#xA;&#xA;    public function replies()&#xA;    {&#xA;        return $this-&amp;gt;hasMany(self::class, &#39;parent_id&#39;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Soft Deleting&lt;/h3&gt; &#xA;&lt;p&gt;By default, soft-deleted intermediate models will be excluded from the result. Use &lt;code&gt;withTrashed()&lt;/code&gt; to include them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Country extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function comments()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(Comment::class, [User::class, Post::class])&#xA;            -&amp;gt;withTrashed(&#39;users.deleted_at&#39;);&#xA;    }&#xA;}&#xA;&#xA;class User extends Model&#xA;{&#xA;    use SoftDeletes;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reversing Relationships&lt;/h3&gt; &#xA;&lt;p&gt;You can define a &lt;code&gt;HasManyDeep&lt;/code&gt;/&lt;code&gt;HasOneDeep&lt;/code&gt; relationship by reversing an existing deep relationship using &lt;code&gt;hasManyDeepFromReverse()&lt;/code&gt;/&lt;code&gt;hasOneDeepFromReverse()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Country extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function comments()&#xA;    {&#xA;        return $this-&amp;gt;hasManyDeep(Comment::class, [User::class, Post::class]);&#xA;    }&#xA;}&#xA;&#xA;class Comment extends Model&#xA;{&#xA;    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;&#xA;&#xA;    public function country()&#xA;    {&#xA;        return $this-&amp;gt;hasOneDeepFromReverse(&#xA;            (new Country())-&amp;gt;comments()&#xA;        );&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IDE Helper&lt;/h3&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://github.com/barryvdh/laravel-ide-helper&#34;&gt;barryvdh/laravel-ide-helper&lt;/a&gt;, this package provides a model hook that will correctly add relations when generating the type hints. The model hook is &lt;strong&gt;enabled by default&lt;/strong&gt; using &lt;a href=&#34;https://laravel.com/docs/packages#package-discovery&#34;&gt;Package Discovery&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enable it manually, add &lt;a href=&#34;https://github.com/barryvdh/laravel-ide-helper#model-hooks&#34;&gt;model hook&lt;/a&gt; to the model_hooks array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    // File: config/ide-helper.php&#xA;&#xA;    /*&#xA;    |--------------------------------------------------------------------------&#xA;    | Models hooks&#xA;    |--------------------------------------------------------------------------&#xA;    |&#xA;    | Define which hook classes you want to run for models to add custom information&#xA;    |&#xA;    | Hooks should implement Barryvdh\LaravelIdeHelper\Contracts\ModelHookInterface.&#xA;    |&#xA;    */&#xA;&#xA;    &#39;model_hooks&#39; =&amp;gt; [&#xA;        \Staudenmeir\EloquentHasManyDeep\IdeHelper\DeepRelationsHook::class,&#xA;    ],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable the model hook you have 3 options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#disable-using-env&#34;&gt;Disable using .env&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#disable-using-config&#34;&gt;Disable using config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/#disable-by-opting-out-of-package-discovery&#34;&gt;Disable by option out of Package Discovery&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Disable using .env&lt;/h4&gt; &#xA;&lt;p&gt;Update your &lt;code&gt;.env&lt;/code&gt; file to include:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dotenv&#34;&gt;ELOQUENT_HAS_MANY_DEEP_IDE_HELPER_ENABLED=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disable using config&lt;/h4&gt; &#xA;&lt;p&gt;Publish the config and disable the setting directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan vendor:publish --tag=eloquent-has-many-deep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    // File: config/eloquent-has-many-deep.php&#xA;    &#xA;    /*&#xA;    |--------------------------------------------------------------------------&#xA;    | IDE Helper&#xA;    |--------------------------------------------------------------------------&#xA;    |&#xA;    | Automatically register the model hook to receive correct type hints&#xA;    |&#xA;    */&#xA;    &#39;ide_helper_enabled&#39; =&amp;gt; false,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disable by opting out of Package Discovery&lt;/h4&gt; &#xA;&lt;p&gt;Update your &lt;code&gt;composer.json&lt;/code&gt; with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;extra&#34;: {&#xA;    &#34;laravel&#34;: {&#xA;        &#34;dont-discover&#34;: [&#xA;            &#34;staudenmeir/eloquent-has-many-deep&#34;&#xA;        ]&#xA;    }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/staudenmeir/eloquent-has-many-deep/master/.github/CODE_OF_CONDUCT.md&#34;&gt;CODE OF CONDUCT&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>