<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-24T01:37:03Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>walkor/workerman</title>
    <updated>2022-09-24T01:37:03Z</updated>
    <id>tag:github.com,2022-09-24:/walkor/workerman</id>
    <link href="https://github.com/walkor/workerman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An asynchronous event driven PHP socket framework. Supports HTTP, Websocket, SSL and other custom protocols. PHP&gt;=7.0.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Workerman&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/walkor/Workerman?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=body_badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/walkor/Workerman.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/workerman/workerman&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/workerman/workerman/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/workerman/workerman&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/workerman/workerman/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/workerman/workerman&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/workerman/workerman/d/monthly&#34; alt=&#34;Monthly Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/workerman/workerman&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/workerman/workerman/d/daily&#34; alt=&#34;Daily Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/workerman/workerman&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/workerman/workerman/license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is it&lt;/h2&gt; &#xA;&lt;p&gt;Workerman is an asynchronous event-driven PHP framework with high performance to build fast and scalable network applications. Workerman supports HTTP, Websocket, SSL and other custom protocols. Workerman supports event extension.&lt;/p&gt; &#xA;&lt;h2&gt;Requires&lt;/h2&gt; &#xA;&lt;p&gt;PHP 7.0 or Higher&lt;br&gt; A POSIX compatible operating system (Linux, OSX, BSD)&lt;br&gt; POSIX and PCNTL extensions required&lt;br&gt; Event extension recommended for better performance&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require workerman/workerman&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;h3&gt;A websocket server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Workerman\Worker;&#xA;&#xA;require_once __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;&#xA;// Create a Websocket server&#xA;$ws_worker = new Worker(&#39;websocket://0.0.0.0:2346&#39;);&#xA;&#xA;// Emitted when new connection come&#xA;$ws_worker-&amp;gt;onConnect = function ($connection) {&#xA;    echo &#34;New connection\n&#34;;&#xA;};&#xA;&#xA;// Emitted when data received&#xA;$ws_worker-&amp;gt;onMessage = function ($connection, $data) {&#xA;    // Send hello $data&#xA;    $connection-&amp;gt;send(&#39;Hello &#39; . $data);&#xA;};&#xA;&#xA;// Emitted when connection closed&#xA;$ws_worker-&amp;gt;onClose = function ($connection) {&#xA;    echo &#34;Connection closed\n&#34;;&#xA;};&#xA;&#xA;// Run worker&#xA;Worker::runAll();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;An http server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Workerman\Worker;&#xA;&#xA;require_once __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;&#xA;// #### http worker ####&#xA;$http_worker = new Worker(&#39;http://0.0.0.0:2345&#39;);&#xA;&#xA;// 4 processes&#xA;$http_worker-&amp;gt;count = 4;&#xA;&#xA;// Emitted when data received&#xA;$http_worker-&amp;gt;onMessage = function ($connection, $request) {&#xA;    //$request-&amp;gt;get();&#xA;    //$request-&amp;gt;post();&#xA;    //$request-&amp;gt;header();&#xA;    //$request-&amp;gt;cookie();&#xA;    //$request-&amp;gt;session();&#xA;    //$request-&amp;gt;uri();&#xA;    //$request-&amp;gt;path();&#xA;    //$request-&amp;gt;method();&#xA;&#xA;    // Send data to client&#xA;    $connection-&amp;gt;send(&#34;Hello World&#34;);&#xA;};&#xA;&#xA;// Run all workers&#xA;Worker::runAll();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;A tcp server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Workerman\Worker;&#xA;&#xA;require_once __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;&#xA;// #### create socket and listen 1234 port ####&#xA;$tcp_worker = new Worker(&#39;tcp://0.0.0.0:1234&#39;);&#xA;&#xA;// 4 processes&#xA;$tcp_worker-&amp;gt;count = 4;&#xA;&#xA;// Emitted when new connection come&#xA;$tcp_worker-&amp;gt;onConnect = function ($connection) {&#xA;    echo &#34;New Connection\n&#34;;&#xA;};&#xA;&#xA;// Emitted when data received&#xA;$tcp_worker-&amp;gt;onMessage = function ($connection, $data) {&#xA;    // Send data to client&#xA;    $connection-&amp;gt;send(&#34;Hello $data \n&#34;);&#xA;};&#xA;&#xA;// Emitted when connection is closed&#xA;$tcp_worker-&amp;gt;onClose = function ($connection) {&#xA;    echo &#34;Connection closed\n&#34;;&#xA;};&#xA;&#xA;Worker::runAll();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enable SSL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Workerman\Worker;&#xA;&#xA;require_once __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;&#xA;// SSL context.&#xA;$context = [&#xA;    &#39;ssl&#39; =&amp;gt; [&#xA;        &#39;local_cert&#39;  =&amp;gt; &#39;/your/path/of/server.pem&#39;,&#xA;        &#39;local_pk&#39;    =&amp;gt; &#39;/your/path/of/server.key&#39;,&#xA;        &#39;verify_peer&#39; =&amp;gt; false,&#xA;    ]&#xA;];&#xA;&#xA;// Create a Websocket server with ssl context.&#xA;$ws_worker = new Worker(&#39;websocket://0.0.0.0:2346&#39;, $context);&#xA;&#xA;// Enable SSL. WebSocket+SSL means that Secure WebSocket (wss://). &#xA;// The similar approaches for Https etc.&#xA;$ws_worker-&amp;gt;transport = &#39;ssl&#39;;&#xA;&#xA;$ws_worker-&amp;gt;onMessage = function ($connection, $data) {&#xA;    // Send hello $data&#xA;    $connection-&amp;gt;send(&#39;Hello &#39; . $data);&#xA;};&#xA;&#xA;Worker::runAll();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom protocol&lt;/h3&gt; &#xA;&lt;p&gt;Protocols/MyTextProtocol.php&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;namespace Protocols;&#xA;&#xA;/**&#xA; * User defined protocol&#xA; * Format Text+&#34;\n&#34;&#xA; */&#xA;class MyTextProtocol&#xA;{&#xA;    public static function input($recv_buffer)&#xA;    {&#xA;        // Find the position of the first occurrence of &#34;\n&#34;&#xA;        $pos = strpos($recv_buffer, &#34;\n&#34;);&#xA;&#xA;        // Not a complete package. Return 0 because the length of package can not be calculated&#xA;        if ($pos === false) {&#xA;            return 0;&#xA;        }&#xA;&#xA;        // Return length of the package&#xA;        return $pos + 1;&#xA;    }&#xA;&#xA;    public static function decode($recv_buffer)&#xA;    {&#xA;        return trim($recv_buffer);&#xA;    }&#xA;&#xA;    public static function encode($data)&#xA;    {&#xA;        return $data . &#34;\n&#34;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Workerman\Worker;&#xA;&#xA;require_once __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;&#xA;// #### MyTextProtocol worker ####&#xA;$text_worker = new Worker(&#39;MyTextProtocol://0.0.0.0:5678&#39;);&#xA;&#xA;$text_worker-&amp;gt;onConnect = function ($connection) {&#xA;    echo &#34;New connection\n&#34;;&#xA;};&#xA;&#xA;$text_worker-&amp;gt;onMessage = function ($connection, $data) {&#xA;    // Send data to client&#xA;    $connection-&amp;gt;send(&#34;Hello world\n&#34;);&#xA;};&#xA;&#xA;$text_worker-&amp;gt;onClose = function ($connection) {&#xA;    echo &#34;Connection closed\n&#34;;&#xA;};&#xA;&#xA;// Run all workers&#xA;Worker::runAll();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Timer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;use Workerman\Worker;&#xA;use Workerman\Timer;&#xA;&#xA;require_once __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;&#xA;$task = new Worker();&#xA;$task-&amp;gt;onWorkerStart = function ($task) {&#xA;    // 2.5 seconds&#xA;    $time_interval = 2.5; &#xA;    $timer_id = Timer::add($time_interval, function () {&#xA;        echo &#34;Timer run\n&#34;;&#xA;    });&#xA;};&#xA;&#xA;// Run all workers&#xA;Worker::runAll();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AsyncTcpConnection (tcp/ws/text/frame etc...)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;use Workerman\Worker;&#xA;use Workerman\Connection\AsyncTcpConnection;&#xA;&#xA;require_once __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;&#xA;$worker = new Worker();&#xA;$worker-&amp;gt;onWorkerStart = function () {&#xA;    // Websocket protocol for client.&#xA;    $ws_connection = new AsyncTcpConnection(&#39;ws://echo.websocket.org:80&#39;);&#xA;    $ws_connection-&amp;gt;onConnect = function ($connection) {&#xA;        $connection-&amp;gt;send(&#39;Hello&#39;);&#xA;    };&#xA;    $ws_connection-&amp;gt;onMessage = function ($connection, $data) {&#xA;        echo &#34;Recv: $data\n&#34;;&#xA;    };&#xA;    $ws_connection-&amp;gt;onError = function ($connection, $code, $msg) {&#xA;        echo &#34;Error: $msg\n&#34;;&#xA;    };&#xA;    $ws_connection-&amp;gt;onClose = function ($connection) {&#xA;        echo &#34;Connection closed\n&#34;;&#xA;    };&#xA;    $ws_connection-&amp;gt;connect();&#xA;};&#xA;&#xA;Worker::runAll();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available commands&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;php start.php start &lt;/code&gt;&lt;br&gt; &lt;code&gt;php start.php start -d &lt;/code&gt;&lt;br&gt; &lt;code&gt;php start.php status &lt;/code&gt;&lt;br&gt; &lt;code&gt;php start.php status -d &lt;/code&gt;&lt;br&gt; &lt;code&gt;php start.php connections&lt;/code&gt;&lt;br&gt; &lt;code&gt;php start.php stop &lt;/code&gt;&lt;br&gt; &lt;code&gt;php start.php stop -g &lt;/code&gt;&lt;br&gt; &lt;code&gt;php start.php restart &lt;/code&gt;&lt;br&gt; &lt;code&gt;php start.php reload &lt;/code&gt;&lt;br&gt; &lt;code&gt;php start.php reload -g &lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;中文主页: &lt;a href=&#34;https://www.workerman.net&#34;&gt;http://www.workerman.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;中文文档: &lt;a href=&#34;https://www.workerman.net/doc/workerman/&#34;&gt;http://doc.workerman.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation: &lt;a href=&#34;https://github.com/walkor/workerman-manual/raw/master/english/SUMMARY.md&#34;&gt;https://github.com/walkor/workerman-manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.techempower.com/benchmarks/#section=data-r19&amp;amp;hw=ph&amp;amp;test=plaintext&amp;amp;l=zik073-1r&#34;&gt;https://www.techempower.com/benchmarks/#section=data-r19&amp;amp;hw=ph&amp;amp;test=plaintext&amp;amp;l=zik073-1r&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other links with workerman&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/walkor/webman&#34;&gt;webman&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/walkor/phpsocket.io&#34;&gt;PHPSocket.IO&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/walkor/php-socks5&#34;&gt;php-socks5&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/walkor/php-http-proxy&#34;&gt;php-http-proxy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=UQGGS9UB35WWG&#34;&gt;&lt;img src=&#34;http://donate.workerman.net/img/donate.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Workerman is released under the &lt;a href=&#34;https://github.com/walkor/workerman/raw/master/MIT-LICENSE.txt&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>