<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-04T01:39:27Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PHPCSStandards/PHP_CodeSniffer</title>
    <updated>2023-12-04T01:39:27Z</updated>
    <id>tag:github.com,2023-12-04:/PHPCSStandards/PHP_CodeSniffer</id>
    <link href="https://github.com/PHPCSStandards/PHP_CodeSniffer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP_CodeSniffer tokenizes PHP files and detects violations of a defined set of coding standards.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHP_CodeSniffer&lt;/h1&gt; &#xA;&lt;div aria-hidden=&#34;true&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/releases&#34;&gt;&lt;img src=&#34;http://poser.pugx.org/phpcsstandards/php_codesniffer/v&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/actions/workflows/validate.yml&#34;&gt;&lt;img src=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/actions/workflows/validate.yml/badge.svg?branch=master&#34; alt=&#34;Validate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/actions/workflows/test.yml/badge.svg?branch=master&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/raw/master/licence.txt&#34;&gt;&lt;img src=&#34;http://poser.pugx.org/phpcsstandards/php_codesniffer/license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/packagist/php-v/phpcsstandards/php_codesniffer.svg?maxAge=3600&#34; alt=&#34;Minimum PHP Version&#34;&gt; &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/tested%20on-PHP%205.4%20%7C%205.5%20%7C%205.6%20%7C%207.0%20%7C%207.1%20%7C%207.2%20%7C%207.3%20%7C%207.4%20%7C%208.0%20%7C%208.1%20%7C%208.2-brightgreen.svg?maxAge=2419200&#34; alt=&#34;Tested on PHP 5.4 to 8.2&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This package is the continuation of the now abandoned &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;PHP_CodeSniffer package which was created by Squizlabs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;PHP_CodeSniffer is a set of two PHP scripts; the main &lt;code&gt;phpcs&lt;/code&gt; script that tokenizes PHP, JavaScript and CSS files to detect violations of a defined coding standard, and a second &lt;code&gt;phpcbf&lt;/code&gt; script to automatically correct coding standard violations. PHP_CodeSniffer is an essential development tool that ensures your code remains clean and consistent.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;PHP_CodeSniffer requires PHP version 5.4.0 or greater, although individual sniffs may have additional requirements such as external applications and scripts. See the &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Configuration-Options&#34;&gt;Configuration Options manual page&lt;/a&gt; for a list of these requirements.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using PHP_CodeSniffer as part of a team, or you&#39;re running it on a &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;CI&lt;/a&gt; server, you may want to configure your project&#39;s settings &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Advanced-Usage#using-a-default-configuration-file&#34;&gt;using a configuration file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started with PHP_CodeSniffer is to download the Phar files for each of the commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Download using curl&#xA;curl -OL https://phars.phpcodesniffer.com/phpcs.phar&#xA;curl -OL https://phars.phpcodesniffer.com/phpcbf.phar&#xA;&#xA;# Or download using wget&#xA;wget https://phars.phpcodesniffer.com/phpcs.phar&#xA;wget https://phars.phpcodesniffer.com/phpcbf.phar&#xA;&#xA;# Then test the downloaded PHARs&#xA;php phpcs.phar -h&#xA;php phpcbf.phar -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Composer&lt;/h3&gt; &#xA;&lt;p&gt;If you use Composer, you can install PHP_CodeSniffer system-wide with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer global require &#34;phpcsstandards/php_codesniffer=*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have the composer bin dir in your PATH. The default value is &lt;code&gt;~/.composer/vendor/bin/&lt;/code&gt;, but you can check the value that you need to use by running &lt;code&gt;composer global config bin-dir --absolute&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or alternatively, include a dependency for &lt;code&gt;phpcsstandards/php_codesniffer&lt;/code&gt; in your &lt;code&gt;composer.json&lt;/code&gt; file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;require-dev&#34;: {&#xA;        &#34;phpcsstandards/php_codesniffer&#34;: &#34;^3.0&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will then be able to run PHP_CodeSniffer from the vendor bin directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpcs -h&#xA;./vendor/bin/phpcbf -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Phive&lt;/h3&gt; &#xA;&lt;p&gt;If you use Phive, you can install PHP_CodeSniffer as a project tool using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phive install phpcs&#xA;phive install phpcbf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will then be able to run PHP_CodeSniffer from the tools directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./tools/phpcs -h&#xA;./tools/phpcbf -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Git Clone&lt;/h3&gt; &#xA;&lt;p&gt;You can also download the PHP_CodeSniffer source and run the &lt;code&gt;phpcs&lt;/code&gt; and &lt;code&gt;phpcbf&lt;/code&gt; commands directly from the Git clone:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/PHPCSStandards/PHP_CodeSniffer.git&#xA;cd PHP_CodeSniffer&#xA;php bin/phpcs -h&#xA;php bin/phpcbf -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The default coding standard used by PHP_CodeSniffer is the PEAR coding standard. To check a file against the PEAR coding standard, simply specify the file&#39;s location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs /path/to/code/myfile.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you wish to check an entire directory you can specify the directory location instead of a file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs /path/to/code-directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to check your code against the PSR-12 coding standard, use the &lt;code&gt;--standard&lt;/code&gt; command line argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpcs --standard=PSR12 /path/to/code-directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If PHP_CodeSniffer finds any coding standard errors, a report will be shown after running the command.&lt;/p&gt; &#xA;&lt;p&gt;Full usage information and example reports are available on the &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Usage&#34;&gt;usage page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation for PHP_CodeSniffer is available on the &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki&#34;&gt;Github wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and feature requests can be submitted on the &lt;a href=&#34;https://github.com/PHPCSStandards/PHP_CodeSniffer/issues&#34;&gt;Github Issue Tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/PHPCSStandards/PHP_CodeSniffer/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for information.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;PHP_CodeSniffer uses a &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; version number format.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;MAJOR&lt;/code&gt; version is incremented when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;backwards-incompatible changes are made to how the &lt;code&gt;phpcs&lt;/code&gt; or &lt;code&gt;phpcbf&lt;/code&gt; commands are used, or&lt;/li&gt; &#xA; &lt;li&gt;backwards-incompatible changes are made to the &lt;code&gt;ruleset.xml&lt;/code&gt; format, or&lt;/li&gt; &#xA; &lt;li&gt;backwards-incompatible changes are made to the API used by sniff developers, or&lt;/li&gt; &#xA; &lt;li&gt;custom PHP_CodeSniffer token types are removed, or&lt;/li&gt; &#xA; &lt;li&gt;existing sniffs are removed from PHP_CodeSniffer entirely&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;MINOR&lt;/code&gt; version is incremented when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;new backwards-compatible features are added to the &lt;code&gt;phpcs&lt;/code&gt; and &lt;code&gt;phpcbf&lt;/code&gt; commands, or&lt;/li&gt; &#xA; &lt;li&gt;backwards-compatible changes are made to the &lt;code&gt;ruleset.xml&lt;/code&gt; format, or&lt;/li&gt; &#xA; &lt;li&gt;backwards-compatible changes are made to the API used by sniff developers, or&lt;/li&gt; &#xA; &lt;li&gt;new sniffs are added to an included standard, or&lt;/li&gt; &#xA; &lt;li&gt;existing sniffs are removed from an included standard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Backwards-compatible changes to the API used by sniff developers will allow an existing sniff to continue running without producing fatal errors but may not result in the sniff reporting the same errors as it did previously without changes being required.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;PATCH&lt;/code&gt; version is incremented when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;backwards-compatible bug fixes are made&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: As PHP_CodeSniffer exists to report and fix issues, most bugs are the result of coding standard errors being incorrectly reported or coding standard errors not being reported when they should be. This means that the messages produced by PHP_CodeSniffer, and the fixes it makes, are likely to be different between PATCH versions.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>laravel/pulse</title>
    <updated>2023-12-04T01:39:27Z</updated>
    <id>tag:github.com,2023-12-04:/laravel/pulse</id>
    <link href="https://github.com/laravel/pulse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Laravel Pulse is a real-time application performance monitoring tool and dashboard for your Laravel application.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/laravel/pulse/1.x/art/logo.svg?sanitize=true&#34; alt=&#34;Laravel Pulse Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/laravel/pulse/actions&#34;&gt;&lt;img src=&#34;https://github.com/laravel/pulse/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/laravel/pulse&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/laravel/pulse&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/l/laravel/pulse&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Pulse is a real-time application performance monitoring tool and dashboard for your Laravel application.&lt;/p&gt; &#xA;&lt;h2&gt;Official Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for Pulse can be found on the &lt;a href=&#34;https://laravel.com/docs/pulse&#34;&gt;Laravel website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to Pulse! The contribution guide can be found in the &lt;a href=&#34;https://laravel.com/docs/contributions&#34;&gt;Laravel documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;In order to ensure that the Laravel community is welcoming to all, please review and abide by the &lt;a href=&#34;https://laravel.com/docs/contributions#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://github.com/laravel/pulse/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Pulse is open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/laravel/pulse/1.x/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>