<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T01:35:03Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vlucas/phpdotenv</title>
    <updated>2022-07-31T01:35:03Z</updated>
    <id>tag:github.com,2022-07-31:/vlucas/phpdotenv</id>
    <link href="https://github.com/vlucas/phpdotenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHP dotenv&lt;/h1&gt; &#xA;&lt;p&gt;Loads environment variables from &lt;code&gt;.env&lt;/code&gt; to &lt;code&gt;getenv()&lt;/code&gt;, &lt;code&gt;$_ENV&lt;/code&gt; and &lt;code&gt;$_SERVER&lt;/code&gt; automagically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2829600/71564012-31105580-2a91-11ea-9ad7-ef1278411b35.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/vlucas/phpdotenv/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD%203--Clause-brightgreen.svg?style=flat-square&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/vlucas/phpdotenv&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/vlucas/phpdotenv.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vlucas/phpdotenv/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/vlucas/phpdotenv.svg?style=flat-square&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Why .env?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You should never store sensitive credentials in your code&lt;/strong&gt;. Storing &lt;a href=&#34;https://www.12factor.net/config&#34;&gt;configuration in the environment&lt;/a&gt; is one of the tenets of a &lt;a href=&#34;https://www.12factor.net/&#34;&gt;twelve-factor app&lt;/a&gt;. Anything that is likely to change between deployment environments – such as database credentials or credentials for 3rd party services – should be extracted from the code into environment variables.&lt;/p&gt; &#xA;&lt;p&gt;Basically, a &lt;code&gt;.env&lt;/code&gt; file is an easy way to load custom configuration variables that your application needs without having to modify .htaccess files or Apache/nginx virtual hosts. This means you won&#39;t have to edit any files outside the project, and all the environment variables are always set no matter how you run your project - Apache, Nginx, CLI, and even PHP&#39;s built-in webserver. It&#39;s WAY easier than all the other ways you know of to set environment variables, and you&#39;re going to love it!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NO editing virtual hosts in Apache or Nginx&lt;/li&gt; &#xA; &lt;li&gt;NO adding &lt;code&gt;php_value&lt;/code&gt; flags to .htaccess files&lt;/li&gt; &#xA; &lt;li&gt;EASY portability and sharing of required ENV values&lt;/li&gt; &#xA; &lt;li&gt;COMPATIBLE with PHP&#39;s built-in web server and CLI runner&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PHP dotenv is a PHP version of the original &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;Ruby dotenv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installation is super-easy via &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require vlucas/phpdotenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or add it by hand to your &lt;code&gt;composer.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;We follow &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;, which means breaking changes may occur between major releases. We have upgrading guides available for V2 to V3, V3 to V4 and V4 to V5 available &lt;a href=&#34;https://raw.githubusercontent.com/vlucas/phpdotenv/master/UPGRADING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;.env&lt;/code&gt; file is generally kept out of version control since it can contain sensitive API keys and passwords. A separate &lt;code&gt;.env.example&lt;/code&gt; file is created with all the required environment variables defined except for the sensitive ones, which are either user-supplied for their own development environments or are communicated elsewhere to project collaborators. The project collaborators then independently copy the &lt;code&gt;.env.example&lt;/code&gt; file to a local &lt;code&gt;.env&lt;/code&gt; and ensure all the settings are correct for their local environment, filling in the secret keys or providing their own values when necessary. In this usage, the &lt;code&gt;.env&lt;/code&gt; file should be added to the project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file so that it will never be committed by collaborators. This usage ensures that no sensitive passwords or API keys will ever be in the version control history so there is less risk of a security breach, and production values will never have to be shared with all project collaborators.&lt;/p&gt; &#xA;&lt;p&gt;Add your application configuration to a &lt;code&gt;.env&lt;/code&gt; file in the root of your project. &lt;strong&gt;Make sure the &lt;code&gt;.env&lt;/code&gt; file is added to your &lt;code&gt;.gitignore&lt;/code&gt; so it is not checked-in the code&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;S3_BUCKET=&#34;dotenv&#34;&#xA;SECRET_KEY=&#34;souper_seekret_key&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now create a file named &lt;code&gt;.env.example&lt;/code&gt; and check this into the project. This should have the ENV variables you need to have set, but the values should either be blank or filled with dummy data. The idea is to let people know what variables are required, but not give them the sensitive production values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;S3_BUCKET=&#34;devbucket&#34;&#xA;SECRET_KEY=&#34;abc123&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then load &lt;code&gt;.env&lt;/code&gt; in your application with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);&#xA;$dotenv-&amp;gt;load();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To suppress the exception that is thrown when there is no &lt;code&gt;.env&lt;/code&gt; file, you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);&#xA;$dotenv-&amp;gt;safeLoad();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally you can pass in a filename as the second parameter, if you would like to use something other than &lt;code&gt;.env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv = Dotenv\Dotenv::createImmutable(__DIR__, &#39;myconfig&#39;);&#xA;$dotenv-&amp;gt;load();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of the defined variables are now available in the &lt;code&gt;$_ENV&lt;/code&gt; and &lt;code&gt;$_SERVER&lt;/code&gt; super-globals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$s3_bucket = $_ENV[&#39;S3_BUCKET&#39;];&#xA;$s3_bucket = $_SERVER[&#39;S3_BUCKET&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Putenv and Getenv&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;getenv()&lt;/code&gt; and &lt;code&gt;putenv()&lt;/code&gt; is strongly discouraged due to the fact that these functions are not thread safe, however it is still possible to instruct PHP dotenv to use these functions. Instead of calling &lt;code&gt;Dotenv::createImmutable&lt;/code&gt;, one can call &lt;code&gt;Dotenv::createUnsafeImmutable&lt;/code&gt;, which will add the &lt;code&gt;PutenvAdapter&lt;/code&gt; behind the scenes. Your environment variables will now be available using the &lt;code&gt;getenv&lt;/code&gt; method, as well as the super-globals:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$s3_bucket = getenv(&#39;S3_BUCKET&#39;);&#xA;$s3_bucket = $_ENV[&#39;S3_BUCKET&#39;];&#xA;$s3_bucket = $_SERVER[&#39;S3_BUCKET&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nesting Variables&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to nest an environment variable within another, useful to cut down on repetition.&lt;/p&gt; &#xA;&lt;p&gt;This is done by wrapping an existing environment variable in &lt;code&gt;${…}&lt;/code&gt; e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;BASE_DIR=&#34;/var/webroot/project-root&#34;&#xA;CACHE_DIR=&#34;${BASE_DIR}/cache&#34;&#xA;TMP_DIR=&#34;${BASE_DIR}/tmp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Immutability and Repository Customization&lt;/h3&gt; &#xA;&lt;p&gt;Immutability refers to if Dotenv is allowed to overwrite existing environment variables. If you want Dotenv to overwrite existing environment variables, use &lt;code&gt;createMutable&lt;/code&gt; instead of &lt;code&gt;createImmutable&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv = Dotenv\Dotenv::createMutable(__DIR__);&#xA;$dotenv-&amp;gt;load();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Behind the scenes, this is instructing the &#34;repository&#34; to allow immutability or not. By default, the repository is configured to allow overwriting existing values by default, which is relevant if one is calling the &#34;create&#34; method using the &lt;code&gt;RepositoryBuilder&lt;/code&gt; to construct a more custom repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$repository = Dotenv\Repository\RepositoryBuilder::createWithNoAdapters()&#xA;    -&amp;gt;addAdapter(Dotenv\Repository\Adapter\EnvConstAdapter::class)&#xA;    -&amp;gt;addWriter(Dotenv\Repository\Adapter\PutenvAdapter::class)&#xA;    -&amp;gt;immutable()&#xA;    -&amp;gt;make();&#xA;&#xA;$dotenv = Dotenv\Dotenv::create($repository, __DIR__);&#xA;$dotenv-&amp;gt;load();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example will write loaded values to &lt;code&gt;$_ENV&lt;/code&gt; and &lt;code&gt;putenv&lt;/code&gt;, but when interpolating environment variables, we&#39;ll only read from &lt;code&gt;$_ENV&lt;/code&gt;. Moreover, it will never replace any variables already set before loading the file.&lt;/p&gt; &#xA;&lt;p&gt;By means of another example, one can also specify a set of variables to be allow listed. That is, only the variables in the allow list will be loaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$repository = Dotenv\Repository\RepositoryBuilder::createWithDefaultAdapters()&#xA;    -&amp;gt;allowList([&#39;FOO&#39;, &#39;BAR&#39;])&#xA;    -&amp;gt;make();&#xA;&#xA;$dotenv = Dotenv\Dotenv::create($repository, __DIR__);&#xA;$dotenv-&amp;gt;load();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Requiring Variables to be Set&lt;/h3&gt; &#xA;&lt;p&gt;PHP dotenv has built in validation functionality, including for enforcing the presence of an environment variable. This is particularly useful to let people know any explicit required variables that your app will not work without.&lt;/p&gt; &#xA;&lt;p&gt;You can use a single string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv-&amp;gt;required(&#39;DATABASE_DSN&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or an array of strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv-&amp;gt;required([&#39;DB_HOST&#39;, &#39;DB_NAME&#39;, &#39;DB_USER&#39;, &#39;DB_PASS&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If any ENV vars are missing, Dotenv will throw a &lt;code&gt;RuntimeException&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;One or more environment variables failed assertions: DATABASE_DSN is missing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Empty Variables&lt;/h3&gt; &#xA;&lt;p&gt;Beyond simply requiring a variable to be set, you might also need to ensure the variable is not empty:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv-&amp;gt;required(&#39;DATABASE_DSN&#39;)-&amp;gt;notEmpty();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the environment variable is empty, you&#39;d get an Exception:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;One or more environment variables failed assertions: DATABASE_DSN is empty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integer Variables&lt;/h3&gt; &#xA;&lt;p&gt;You might also need to ensure that the variable is of an integer value. You may do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv-&amp;gt;required(&#39;FOO&#39;)-&amp;gt;isInteger();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the environment variable is not an integer, you&#39;d get an Exception:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;One or more environment variables failed assertions: FOO is not an integer.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One may only want to enforce validation rules when a variable is set. We support this too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv-&amp;gt;ifPresent(&#39;FOO&#39;)-&amp;gt;isInteger();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Boolean Variables&lt;/h3&gt; &#xA;&lt;p&gt;You may need to ensure a variable is in the form of a boolean, accepting &#34;true&#34;, &#34;false&#34;, &#34;On&#34;, &#34;1&#34;, &#34;Yes&#34;, &#34;Off&#34;, &#34;0&#34; and &#34;No&#34;. You may do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv-&amp;gt;required(&#39;FOO&#39;)-&amp;gt;isBoolean();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the environment variable is not a boolean, you&#39;d get an Exception:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;One or more environment variables failed assertions: FOO is not a boolean.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, one may write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv-&amp;gt;ifPresent(&#39;FOO&#39;)-&amp;gt;isBoolean();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Allowed Values&lt;/h3&gt; &#xA;&lt;p&gt;It is also possible to define a set of values that your environment variable should be. This is especially useful in situations where only a handful of options or drivers are actually supported by your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv-&amp;gt;required(&#39;SESSION_STORE&#39;)-&amp;gt;allowedValues([&#39;Filesystem&#39;, &#39;Memcached&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the environment variable wasn&#39;t in this list of allowed values, you&#39;d get a similar Exception:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;One or more environment variables failed assertions: SESSION_STORE is not an allowed value.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to define a regex that your environment variable should be.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dotenv-&amp;gt;required(&#39;FOO&#39;)-&amp;gt;allowedRegexValues(&#39;([[:lower:]]{3})&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comments&lt;/h3&gt; &#xA;&lt;p&gt;You can comment your &lt;code&gt;.env&lt;/code&gt; file using the &lt;code&gt;#&lt;/code&gt; character. E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# this is a comment&#xA;VAR=&#34;value&#34; # comment&#xA;VAR=value # comment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parsing Without Loading&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you just wanna parse the file and resolve the nested environment variables, by giving us a string, and have an array returned back to you. While this is already possible, it is a little fiddly, so we have provided a direct way to do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// [&#39;FOO&#39; =&amp;gt; &#39;Bar&#39;, &#39;BAZ&#39; =&amp;gt; &#39;Hello Bar&#39;]&#xA;Dotenv\Dotenv::parse(&#34;FOO=Bar\nBAZ=\&#34;Hello \${FOO}\&#34;&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is exactly the same as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Dotenv\Dotenv::createArrayBacked(__DIR__)-&amp;gt;load();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;only, instead of providing the directory to find the file, you have directly provided the file contents.&lt;/p&gt; &#xA;&lt;h3&gt;Usage Notes&lt;/h3&gt; &#xA;&lt;p&gt;When a new developer clones your codebase, they will have an additional one-time step to manually copy the &lt;code&gt;.env.example&lt;/code&gt; file to &lt;code&gt;.env&lt;/code&gt; and fill-in their own values (or get any sensitive values from a project co-worker).&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a security vulnerability within this package, please send an email to &lt;a href=&#34;mailto:security@tidelift.com&#34;&gt;security@tidelift.com&lt;/a&gt;. All security vulnerabilities will be promptly addressed. You may view our full security policy &lt;a href=&#34;https://github.com/vlucas/phpdotenv/security/policy&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;PHP dotenv is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/vlucas/phpdotenv/master/LICENSE&#34;&gt;The BSD 3-Clause License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;For Enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of &lt;code&gt;vlucas/phpdotenv&lt;/code&gt; and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/packagist-vlucas-phpdotenv?utm_source=packagist-vlucas-phpdotenv&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>laravel/sanctum</title>
    <updated>2022-07-31T01:35:03Z</updated>
    <id>tag:github.com,2022-07-31:/laravel/sanctum</id>
    <link href="https://github.com/laravel/sanctum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Laravel Sanctum provides a featherweight authentication system for SPAs and simple APIs.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/laravel/sanctum/3.x/art/logo.svg?sanitize=true&#34; alt=&#34;Logo Laravel Sanctum&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/laravel/sanctum/actions&#34;&gt;&lt;img src=&#34;https://github.com/laravel/sanctum/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/sanctum&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/laravel/sanctum&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/sanctum&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/laravel/sanctum&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/sanctum&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/l/laravel/sanctum&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Sanctum provides a featherweight authentication system for SPAs and simple APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Official Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for Sanctum can be found on the &lt;a href=&#34;https://laravel.com/docs/sanctum&#34;&gt;Laravel website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to Sanctum! The contribution guide can be found in the &lt;a href=&#34;https://laravel.com/docs/contributions&#34;&gt;Laravel documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;In order to ensure that the Laravel community is welcoming to all, please review and abide by the &lt;a href=&#34;https://laravel.com/docs/contributions#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://github.com/laravel/sanctum/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Sanctum is open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/laravel/sanctum/3.x/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PHPOffice/PHPExcel</title>
    <updated>2022-07-31T01:35:03Z</updated>
    <id>tag:github.com,2022-07-31:/PHPOffice/PHPExcel</id>
    <link href="https://github.com/PHPOffice/PHPExcel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ARCHIVED&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHPExcel - DEAD&lt;/h1&gt; &#xA;&lt;p&gt;PHPExcel last version, 1.8.1, was released in 2015. The project was officially deprecated in 2017 and permanently archived in 2019.&lt;/p&gt; &#xA;&lt;p&gt;The project has not be maintained for years and must not be used anymore. &lt;strong&gt;All users must migrate&lt;/strong&gt; to its direct successor &lt;a href=&#34;https://github.com/PHPOffice/PhpSpreadsheet&#34;&gt;PhpSpreadsheet&lt;/a&gt;, or another alternative.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;PHPExcel is licensed under &lt;a href=&#34;https://github.com/PHPOffice/PHPExcel/raw/master/license.md&#34;&gt;LGPL (GNU LESSER GENERAL PUBLIC LICENSE)&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>