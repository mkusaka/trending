<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-23T01:39:59Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Laravel-Backpack/basset</title>
    <updated>2024-04-23T01:39:59Z</updated>
    <id>tag:github.com,2024-04-23:/Laravel-Backpack/basset</id>
    <link href="https://github.com/Laravel-Backpack/basset" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Better asset helpers for Laravel apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Basset üê∂ - the better &lt;code&gt;asset()&lt;/code&gt; helper for Laravel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/backpack/basset&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/backpack/basset.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/backpack/basset&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/backpack/basset.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://styleci.io/repos/421785142&#34;&gt;&lt;img src=&#34;https://styleci.io/repos/421785142/shield&#34; alt=&#34;StyleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Easily use your CSS/JS/etc assets from wherever they are, not just your public directory:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;{{-- if you&#39;re used to Laravel&#39;s asset helper: --}}&#xA;&amp;lt;link href=&#34;{{ asset(&#39;path/to/public/file.css&#39;) }}&#34;&amp;gt;&#xA;&#xA;{{-- just change asset() to basset() and you can point to non-public files too, for example: --}}&#xA;&amp;lt;script src=&#34;{{ basset(storage_path(&#39;file.js&#39;)) }}&#34;&amp;gt;&#xA;&amp;lt;script src=&#34;{{ basset(base_path(&#39;vendor/org/package/assets/file.js&#39;)) }}&#34;&amp;gt;&#xA;&amp;lt;script src=&#34;{{ basset(&#39;https://cdn.com/path/to/file.js&#39;) }}&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all you need to do. &lt;strong&gt;Basset will download the file to &lt;code&gt;storage/app/public/bassets&lt;/code&gt; from wherever it is, then output the now-public path to your asset.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using Basset, you easily internalize and use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;files from external URLs (like CDNs)&lt;/li&gt; &#xA; &lt;li&gt;files from internal, but non-public URLs (like the vendor directory)&lt;/li&gt; &#xA; &lt;li&gt;entire archives from external URLs (like Github)&lt;/li&gt; &#xA; &lt;li&gt;entire directories from local, non-public paths (like other local projects)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;No more publishing package files. No more using NPM just to download some files. It&#39;s a simple yet effective solution in the age of &lt;code&gt;HTTP/2&lt;/code&gt; and &lt;code&gt;HTTP/3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require backpack/basset&#xA;php artisan basset:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; publish the config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --provider=&#34;Backpack\Basset\BassetServiceProvider&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt; Basset is disabled by default on local environment. If you want to change it, please set &lt;code&gt;BASSET_DEV_MODE=false&lt;/code&gt; in your env file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Storage Symlink&lt;/h4&gt; &#xA;&lt;p&gt;Basset uses the &lt;code&gt;public&lt;/code&gt; disk to store cached assets in a directory that is publicly-accesible. So it needs you to run &lt;code&gt;php artisan storage:link&lt;/code&gt; to create the symlink. The installation command will create ask to run that, and to add that command to your &lt;code&gt;composer.json&lt;/code&gt;. That will most likely make it work on your development/staging/production servers. If that&#39;s not the case, make sure you create the links manually wherever you need them, with the command &lt;code&gt;php artisan storage:link&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Disk&lt;/h4&gt; &#xA;&lt;p&gt;By default Basset uses the &lt;code&gt;public&lt;/code&gt; disk. If you&#39;re having trouble with the assets not showing up on page, you might have an old Laravel configuration for it. Please make sure your disk is properly setup on &lt;code&gt;config/filsystems.php&lt;/code&gt; - it should look like &lt;a href=&#34;https://github.com/laravel/laravel/raw/10.x/config/filesystems.php#L39-L45&#34;&gt;the default one&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;The &lt;code&gt;basset()&lt;/code&gt; Helper&lt;/h3&gt; &#xA;&lt;p&gt;You can just use the &lt;code&gt;basset()&lt;/code&gt; helper instead of Laravel&#39;s &lt;code&gt;asset()&lt;/code&gt; helper, and point to CDNs and non-public files too. Use &lt;a href=&#34;https://laravel.com/docs/10.x/helpers#paths-method-list&#34;&gt;Laravel&#39;s path helpers&lt;/a&gt; to construct the absolute path to your file, then Basset will take care of the rest.&lt;/p&gt; &#xA;&lt;p&gt;For local from CDNs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;{{-- instead of --}}&#xA;&amp;lt;link href=&#34;{{ asset(&#39;path/to/public/file.css&#39;) }}&#34;&amp;gt;&#xA;&#xA;{{-- you can do --}}&#xA;&amp;lt;link href=&#34;{{ basset(&#39;path/to/public/file.css&#39; }}&#34;&amp;gt;&#xA;&amp;lt;link href=&#34;{{ basset(&#39;https://cdn.com/path/to/file.css&#39;) }}&#34;&amp;gt;&#xA;&amp;lt;link href=&#34;{{ basset(base_path(&#39;vendor/org/package/assets/file.css&#39;)) }}&#34;&amp;gt;&#xA;&amp;lt;link href=&#34;{{ basset(storage_path(&#39;file.css&#39;)) }}&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basset will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;copy that file from the vendor directory to your &lt;code&gt;storage&lt;/code&gt; directory (aka. internalize the file)&lt;/li&gt; &#xA; &lt;li&gt;use the internalized file on all requests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The &lt;code&gt;@basset()&lt;/code&gt; Directive&lt;/h3&gt; &#xA;&lt;p&gt;For known asset types like CSS, JS, images and videos, among others, Basset makes it even shorter to load assets. No need to write the HTML for your &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, just use the &lt;code&gt;@basset()&lt;/code&gt; directive and all of the needed HTML will be output for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;{{-- instead of --}}&#xA;&amp;lt;script src=&#34;{{ asset(&#39;path/to/public/file.js&#39;) }}&#34;&amp;gt;&#xA;&amp;lt;link href=&#34;{{ asset(&#39;path/to/public/file.css&#39;) }}&#34;&amp;gt;&#xA;&amp;lt;img src=&#34;{{ asset(&#39;path/to/public/file.jpg&#39;) }}&#34;&amp;gt;&#xA;&amp;lt;object data=&#34;{{ asset(&#39;path/to/public/file.pdf&#39;) }}&#34;&amp;gt;&amp;lt;/object&amp;gt;&#xA;&#xA;{{-- you can do --}}&#xA;@basset(&#39;https://cdn.com/path/to/file.js&#39;)&#xA;@basset(&#39;https://cdn.com/path/to/file.css&#39;)&#xA;@basset(resource_path(&#39;/path/to/file.jpg&#39;))&#xA;@basset(resource_path(&#39;/path/to/file.pdf&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are the know file types;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File extension&lt;/th&gt; &#xA;   &lt;th&gt;HTML element&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.js&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.css&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.jpg&lt;/code&gt; &lt;code&gt;.jpeg&lt;/code&gt; &lt;code&gt;.png&lt;/code&gt; &lt;code&gt;.webp&lt;/code&gt; &lt;code&gt;.gif&lt;/code&gt; &lt;code&gt;.svg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.mp4&lt;/code&gt; &lt;code&gt;.webm&lt;/code&gt; &lt;code&gt;.avi&lt;/code&gt; &lt;code&gt;.mp3&lt;/code&gt; &lt;code&gt;.ogg&lt;/code&gt; &lt;code&gt;.wav&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.ico&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.pdf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.vtt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Basset will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;copy that file from the vendor directory to your &lt;code&gt;storage&lt;/code&gt; directory (aka. internalize the file)&lt;/li&gt; &#xA; &lt;li&gt;use the internalized file on all requests&lt;/li&gt; &#xA; &lt;li&gt;make sure that file is only loaded once per pageload&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The &lt;code&gt;@bassetBlock()&lt;/code&gt; Directive&lt;/h3&gt; &#xA;&lt;p&gt;Easily move code blocks to files, so they&#39;re cached&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+   @bassetBlock(&#39;path/or/name-i-choose-to-give-this&#39;)&#xA;    &amp;lt;script&amp;gt;&#xA;      alert(&#39;Do stuff!&#39;);&#xA;    &amp;lt;/script&amp;gt;&#xA;+   @endBassetBlock()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basset will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;create a file with that JS code in your &lt;code&gt;storage/app/public/basset&lt;/code&gt; directory (aka. internalize the code)&lt;/li&gt; &#xA; &lt;li&gt;on all requests, use the local file (using &lt;code&gt;&amp;lt;script src=&#34;&#34;&amp;gt;&lt;/code&gt;) instead of having the JS inline&lt;/li&gt; &#xA; &lt;li&gt;make sure that file is only loaded once per pageload&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The &lt;code&gt;@bassetArchive()&lt;/code&gt; Directive&lt;/h3&gt; &#xA;&lt;p&gt;Easily use archived assets (.zip &amp;amp; .tar.gz):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+    @bassetArchive(&#39;https://github.com/author/package-dist/archive/refs/tags/1.0.0.zip&#39;, &#39;package-1.0.0&#39;)&#xA;+    @basset(&#39;package-1.0.0/plugin.min.js&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basset will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download the archive to your &lt;code&gt;storage/app/public/basset&lt;/code&gt; directory (aka. internalize the code)&lt;/li&gt; &#xA; &lt;li&gt;unarchive it&lt;/li&gt; &#xA; &lt;li&gt;on all requests, use the local file (using &lt;code&gt;&amp;lt;script src=&#34;&#34;&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;make sure that file is only loaded once per pageload&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; when referencing &lt;code&gt;.zip&lt;/code&gt; archives, the &lt;a href=&#34;https://www.php.net/manual/en/book.zip.php&#34;&gt;PHP zip extension&lt;/a&gt; is required.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;@bassetDirectory()&lt;/code&gt; Directive&lt;/h3&gt; &#xA;&lt;p&gt;Easily internalize and use entire non-public directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+    @bassetDirectory(resource_path(&#39;package-1.0.0/&#39;), &#39;package-1.0.0&#39;)&#xA;+    @basset(&#39;package-1.0.0/plugin.min.js&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basset will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;copy the directory to your &lt;code&gt;storage/app/public/basset&lt;/code&gt; directory (aka. internalize the code)&lt;/li&gt; &#xA; &lt;li&gt;on all requests, use the internalized file (using &lt;code&gt;&amp;lt;script src=&#34;&#34;&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;make sure that file is only loaded once per pageload&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The &lt;code&gt;basset&lt;/code&gt; Commands&lt;/h3&gt; &#xA;&lt;p&gt;Copying an asset from CDNs to your server could take a bit of time, depending on the asset size. For large pages, that could even take entire seconds. You can easily prevent that from happening, by internalizing all assets in one go. You can use &lt;code&gt;php artisan basset:cache&lt;/code&gt; to go through all your blade files, and internalize everything that&#39;s possible. If you ever need it, &lt;code&gt;basset:clear&lt;/code&gt; will delete all the files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan basset:cache         # internalizes all @bassets&#xA;php artisan basset:clear         # clears the basset directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to speed up the first page load on production, we recommend you to add &lt;code&gt;php artisan basset:cache&lt;/code&gt; command to your deploy script.&lt;/p&gt; &#xA;&lt;h3&gt;Basset Cached Event&lt;/h3&gt; &#xA;&lt;p&gt;If you require customized behavior after each asset is cached, you can set up a listener for the &lt;code&gt;BassetCachedEvent&lt;/code&gt; in your &lt;code&gt;EventServiceProvider&lt;/code&gt;. This event will be triggered each time an asset is cached.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at &lt;a href=&#34;https://github.com/Laravel-Backpack/basset/raw/main/src/config/backpack/basset.php&#34;&gt;the config file&lt;/a&gt; for all configuration options. Notice some of those configs also have ENV variables, so you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;enable/disable dev mode using &lt;code&gt;BASSET_DEV_MODE=false&lt;/code&gt; - this will force Basset to internalize assets even on localhost&lt;/li&gt; &#xA; &lt;li&gt;change the disk where assets get internalized using &lt;code&gt;BASSET_DISK=yourdiskname&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;disable the cache map using &lt;code&gt;BASSET_CACHE_MAP=false&lt;/code&gt; (needed on serverless like Laravel Vapor)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;There are a lot of deployment options for Laravel apps, but we&#39;ll try to cover the gotchas of the most popular ones here:&lt;/p&gt; &#xA;&lt;h3&gt;VPS / SSH / Composer available&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;it is mandatory to run &lt;code&gt;php artisan storage:link&lt;/code&gt; in production, for Basset to work; so it&#39;s recommended you add that to your &lt;code&gt;composer.json&lt;/code&gt;&#39;s scripts section, either under &lt;code&gt;post-composer-install&lt;/code&gt; or &lt;code&gt;post-composer-update&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;it is recommended to run &lt;code&gt;php artisan basset:fresh&lt;/code&gt; after each deployment; so it&#39;s recommended you add that to your &lt;code&gt;composer.json&lt;/code&gt;&#39;s scripts section, either under &lt;code&gt;post-composer-update&lt;/code&gt;;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Laravel Forge&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s just a managed VPS, so please see the above.&lt;/p&gt; &#xA;&lt;h3&gt;Laravel Vapor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; In your &lt;code&gt;vapor.yml&lt;/code&gt; include &lt;code&gt;storage: yourbucketname&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; In your Vapor &lt;code&gt;.ENV&lt;/code&gt; file make sure you have&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BASSET_DISK=s3&#xA;BASSET_CACHE_MAP=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(optional) Before you deploy to Vapor, you might want to set up S3 on localhost to test that it&#39;s working. If you do, &lt;a href=&#34;https://github.com/Laravel-Backpack/basset/pull/58#issuecomment-1622125991&#34;&gt;the steps here&lt;/a&gt; might help. If you encounter problems with deployment on Vapor (particularly through Github actions) there are some &lt;a href=&#34;https://github.com/Laravel-Backpack/basset/pull/58#issuecomment-1622125991&#34;&gt;tips here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;FTP / SFTP / ZIP&lt;/h3&gt; &#xA;&lt;p&gt;If you deploy your project by uploading it from localhost (either manually or automatically), you should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make sure the alias exists that would have been created by &lt;code&gt;php artisan storage:link&lt;/code&gt;; otherwise your alias might point to an inexisting localhost path; alternatively you can change the disk that Basset is using, in its config;&lt;/li&gt; &#xA; &lt;li&gt;before each deployment, make sure to disable dev mode (&lt;code&gt;do BASSET_DEV_MODE=false&lt;/code&gt; in your &lt;code&gt;.ENV&lt;/code&gt; file) then run &lt;code&gt;php artisan basset:fresh&lt;/code&gt;; that will make sure your localhost downloads all assets, then you upload them in your zip;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why does this package exist?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Keep a copy of the CDN dependencies on your side.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For many reasons you may want to avoid CDNs, CDNs may fail sometimes, the uptime is not 100%, or your app may need to work offline.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Forget about compiling your assets.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Most of the times backend developers end up messing around with npm and compiling dependencies. Backpack has been there, at some point we had almost 100Mb of assets on our main repo. Basset will keep all that mess away from backend developers.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Avoid multiple loads of the same assets.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In Laravel, if your CSS or JS assets are loaded inside a blade file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// card.blade.php&#xA;&#xA;&amp;lt;div class=&#34;card&#34;&amp;gt;&#xA;  Lorem ipsum&#xA;&amp;lt;/div&amp;gt;&#xA;&#xA;&amp;lt;script src=&#34;path/to/script.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you load that blade file multiple times per page (eg. include &lt;code&gt;card.blade.php&lt;/code&gt; multiple times per page), you&#39;ll end up with that &lt;code&gt;script&lt;/code&gt; tag being loaded multiple times, on the same page. To avoid that, Larvel 8 provides &lt;a href=&#34;https://laravel.com/docs/8.x/blade#the-once-directive&#34;&gt;the &lt;code&gt;@once&lt;/code&gt; directive&lt;/a&gt;, which will echo the thing only once, no matter how many times that blade file loaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// card.blade.php&#xA;&#xA;&amp;lt;div class=&#34;card&#34;&amp;gt;&#xA;  Lorem ipsum&#xA;&amp;lt;/div&amp;gt;&#xA;&#xA;@once&#xA;&amp;lt;script src=&#34;path/to/script.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;@endonce&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But what if your &lt;code&gt;script.js&lt;/code&gt; file is not only loaded by &lt;code&gt;card.blade.php&lt;/code&gt;, but also by other blade templates (eg. &lt;code&gt;hero.blade.php&lt;/code&gt;, loaded on the same page? If you&#39;re using the &lt;code&gt;@once&lt;/code&gt; directive, you will have the same problem all over again - that same script loaded multiple times.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s where this package comes to the rescue. It will load the asset just ONCE, even if it&#39;s loaded from multiple blade files.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;Basset is not working, what may be wrong?&lt;/h4&gt; &#xA;&lt;p&gt;Before making any changes, you can run the command &lt;code&gt;php artisan basset:check&lt;/code&gt;. It will perform a basic test to initialize, write, and read an asset, giving you better insights into any errors.&lt;/p&gt; &#xA;&lt;p&gt;The most common reasons for Basset to fail are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Incorrect APP_URL in the &lt;code&gt;.env&lt;/code&gt; file.&lt;/strong&gt;&lt;br&gt; Ensure that APP_URL in your &lt;code&gt;.env&lt;/code&gt; matches your server configuration, including the hostname, protocol, and port number. Incorrect settings can lead to asset loading issues.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Improperly configured disk.&lt;/strong&gt;&lt;br&gt; By default, Basset uses the Laravel &lt;code&gt;public&lt;/code&gt; disk. For new Laravel projects, the configuration is usually correct. If you&#39;re upgrading a project and/or changed the &lt;code&gt;public&lt;/code&gt; disk configuration, it&#39;s advised that you change the basset disk in &lt;code&gt;config/backpack/basset.php&lt;/code&gt; to &lt;code&gt;basset&lt;/code&gt;. The &lt;code&gt;basset&lt;/code&gt; disk is a copy of the original Laravel &lt;code&gt;public&lt;/code&gt; with working configurations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Missing or broken storage symlink.&lt;/strong&gt;&lt;br&gt; If you use the default &lt;code&gt;public&lt;/code&gt; disk, Basset requires that the symlink between the storage and the public accessible folder to be created with &lt;code&gt;php artisan storage:link&lt;/code&gt; command. During installation, Basset attempts to create the symlink. If it fails, you will need to manually create it with &lt;code&gt;php artisan storage:link&lt;/code&gt;. If you encounter issues (e.g., after moving the project), recreating the symlink should resolve them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note for Homestead users: the symlink can&#39;t be created inside the virtual machine. You should stop your instance with: &lt;code&gt;vagrant down&lt;/code&gt;, create the symlink in your local application folder and then &lt;code&gt;vagrant up&lt;/code&gt; to bring the system back up.&lt;/p&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/Laravel-Backpack/basset/releases&#34;&gt;releases tab&lt;/a&gt; for more information on what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/Laravel-Backpack/basset/main/contributing.md&#34;&gt;contributing.md&lt;/a&gt; for details and a todolist.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover any security related issues, please email &lt;a href=&#34;mailto:hello@backpackforlaravel.com&#34;&gt;hello@backpackforlaravel.com&lt;/a&gt; instead of using the issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/promatik&#34;&gt;Antonio Almeida&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Laravel-Backpack&#34;&gt;Cristian Tabacitu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Laravel-Backpack/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/Laravel-Backpack/basset/main/license.md&#34;&gt;license file&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>