<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-16T01:36:50Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dustin10/VichUploaderBundle</title>
    <updated>2022-11-16T01:36:50Z</updated>
    <id>tag:github.com,2022-11-16:/dustin10/VichUploaderBundle</id>
    <link href="https://github.com/dustin10/VichUploaderBundle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple Symfony bundle to ease file uploads with ORM entities and ODM documents.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VichUploaderBundle&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dustin10/VichUploaderBundle/actions&#34;&gt;&lt;img src=&#34;https://github.com/dustin10/VichUploaderBundle/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/vich/uploader-bundle&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/vich/uploader-bundle/downloads.png&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/vich/uploader-bundle&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/vich/uploader-bundle/v/unstable.png&#34; alt=&#34;Latest Unstable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/vich/uploader-bundle&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/vich/uploader-bundle/v/stable.png&#34; alt=&#34;Latest stable Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The VichUploaderBundle is a Symfony bundle that attempts to ease file uploads that are attached to ORM entities, MongoDB ODM documents, or PHPCR ODM documents.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically name and save a file to a configured directory&lt;/li&gt; &#xA; &lt;li&gt;Inject the file back into the entity or document when it is loaded from the datastore as an instance of &lt;code&gt;Symfony\Component\HttpFoundation\File\File&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the file from the file system upon removal of the entity or document from the datastore&lt;/li&gt; &#xA; &lt;li&gt;Templating helpers to generate public URLs to the file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of this functionality is fully configurable to allow for app-specific customization.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For usage documentation, see:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dustin10/VichUploaderBundle/raw/master/docs/index.md&#34;&gt;docs/index.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If upgrading from a previous version, also check:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dustin10/VichUploaderBundle/raw/master/UPGRADE.md&#34;&gt;UPGRADE.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/dustin10/VichUploaderBundle/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the bundled &lt;a href=&#34;https://github.com/dustin10/VichUploaderBundle/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kolossal-io/laravel-multiplex</title>
    <updated>2022-11-16T01:36:50Z</updated>
    <id>tag:github.com,2022-11-16:/kolossal-io/laravel-multiplex</id>
    <link href="https://github.com/kolossal-io/laravel-multiplex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Laravel package to attach time-sliced meta data to Eloquent models.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/kolossal-io/laravel-multiplex&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/HEAD/.github/logo-dark.svg&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/HEAD/.github/logo-light.svg&#34;&gt; &#xA;   &lt;img alt=&#34;Multiplex&#34; src=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/HEAD/.github/logo-light.svg?sanitize=true&#34; width=&#34;316&#34; height=&#34;72&#34; style=&#34;max-width: 100%;&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A Laravel package to attach time-sliced meta data to Eloquent models. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/kolossal-io/laravel-multiplex&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Laravel-^9.0-green.svg?style=flat-square&#34; alt=&#34;Laravel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/kolossal-io/laravel-multiplex&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/kolossal-io/laravel-multiplex.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/kolossal-io/laravel-multiplex&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/kolossal-io/laravel-multiplex/branch/main/graph/badge.svg?token=330354GI30&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/kolossal-io/laravel-multiplex/actions/workflows/run-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/kolossal-io/laravel-multiplex/actions/workflows/run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Tests Action Status&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#table-of-contents&#34;&gt;View Table of Contents&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;What it Does&lt;/h2&gt; &#xA;&lt;p&gt;Multiplex allows you to attach time-sliced metadata to Eloquent models in a convenient way.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$post = \App\Models\Post::first();&#xA;&#xA;// Set meta fluently for any key – `likes` is no column of `Post`.&#xA;$post-&amp;gt;likes = 24;&#xA;&#xA;// Or use the `setMeta` method.&#xA;$post-&amp;gt;setMeta(&#39;likes&#39;, 24);&#xA;&#xA;// You may also schedule changes, for example change the meta in 2&amp;nbsp;years:&#xA;$post-&amp;gt;setMetaAt(&#39;likes&#39;, 6000, &#39;+2 years&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Metadata is saved in versions: Schedule changes to metadata, change history or retrieve metadata for a specific point in time.&lt;/li&gt; &#xA; &lt;li&gt;Supports fluent syntax: Use your model’s metadata as if they were properties.&lt;/li&gt; &#xA; &lt;li&gt;Polymorphic relationship allows adding metadata to any Eloquent model without worrying about the database schema.&lt;/li&gt; &#xA; &lt;li&gt;Easy to try: Extend existing database columns of your model with versionable metadata without touching or deleting your original columns.&lt;/li&gt; &#xA; &lt;li&gt;Type conversion system heavily based on &lt;a href=&#34;https://github.com/plank/laravel-metable&#34;&gt;Laravel-Metable&lt;/a&gt; allows data of numerous different scalar and object types to be stored and retrieved.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#attaching-metadata&#34;&gt;Attaching Metadata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#retrieving-metadata&#34;&gt;Retrieving Metadata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#query-by-metadata&#34;&gt;Query by Metadata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#events&#34;&gt;Events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#time-traveling&#34;&gt;Time Traveling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#limit-meta-keys&#34;&gt;Limit Meta Keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#extending-database-columns&#34;&gt;Extending Database Columns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#deleting-metadata&#34;&gt;Deleting Metadata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require kolossal-io/laravel-multiplex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Publish the migrations to create the &lt;code&gt;meta&lt;/code&gt; table where metadata will be stored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attach the &lt;code&gt;HasMeta&lt;/code&gt; trait to any Eloquent model that needs meta attached.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Database\Eloquent\Model;&#xA;use Kolossal\Multiplex\HasMeta;&#xA;&#xA;class Post extends Model&#xA;{&#xA;    use HasMeta;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Attaching Metadata&lt;/h2&gt; &#xA;&lt;p&gt;By default you can use any &lt;code&gt;key&lt;/code&gt; for attaching metadata. You can &lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#limit-meta-keys&#34;&gt;limit which keys can be used&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$model-&amp;gt;setMeta(&#39;foo&#39;, &#39;bar&#39;);&#xA;// or&#xA;$model-&amp;gt;foo = &#39;bar&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also set multiple meta values by passing an &lt;code&gt;array&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$model-&amp;gt;setMeta([&#xA;    &#39;hide&#39; =&amp;gt; true,&#xA;    &#39;color&#39; =&amp;gt; &#39;#000&#39;,&#xA;    &#39;likes&#39; =&amp;gt; 24,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All metadata will be stored automatically when saving your model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$model-&amp;gt;foo = &#39;bar&#39;;&#xA;&#xA;$model-&amp;gt;isMetaDirty(); // true&#xA;&#xA;$model-&amp;gt;save();&#xA;&#xA;$model-&amp;gt;isMetaDirty(); // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also save your model without saving metadata.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$model-&amp;gt;saveWithoutMeta();&#xA;&#xA;$model-&amp;gt;isMetaDirty(); // true&#xA;&#xA;$model-&amp;gt;saveMeta();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can reset metadata changes that were not yet saved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$model-&amp;gt;resetMeta();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Metadata can be stored right away without waiting for the parent model to be saved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Save the given meta value right now.&#xA;$model-&amp;gt;saveMeta(&#39;foo&#39;, 123.45);&#xA;&#xA;// Save only specific keys of the changed meta.&#xA;$model-&amp;gt;setMeta([&#39;color&#39; =&amp;gt; &#39;#fff&#39;, &#39;hide&#39; =&amp;gt; false]);&#xA;$model-&amp;gt;saveMeta(&#39;color&#39;);&#xA;$model-&amp;gt;isMetaDirty(&#39;hide&#39;); // true&#xA;&#xA;// Save multiple meta values at once.&#xA;$model-&amp;gt;saveMeta([&#xA;    &#39;color&#39; =&amp;gt; &#39;#fff&#39;,&#xA;    &#39;hide&#39; =&amp;gt; true,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiplex will take care of serializing and unserializing datatypes for you. The underlying polymorphic &lt;code&gt;meta&lt;/code&gt; table may look something like this:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;metable_type&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;metable_id&lt;/th&gt; &#xA;   &lt;th&gt;key&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;value&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;…&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;App\Models\Post&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;#000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;App\Models\Post&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;likes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;24&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;App\Models\Post&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;#fff&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;App\Models\Post&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hide&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The corresponding meta values would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::find(1)-&amp;gt;color; // string(4) &#34;#000&#34;&#xA;Post::find(1)-&amp;gt;likes; // int(24)&#xA;&#xA;Post::find(2)-&amp;gt;color; // string(4) &#34;#fff&#34;&#xA;Post::find(2)-&amp;gt;hide; // bool(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Schedule Metadata&lt;/h3&gt; &#xA;&lt;p&gt;You can save metadata for a specific publishing date.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = Auth::user();&#xA;&#xA;$user-&amp;gt;saveMeta(&#39;favorite_band&#39;, &#39;The Mars Volta&#39;);&#xA;$user-&amp;gt;saveMetaAt(&#39;favorite_band&#39;, &#39;Portishead&#39;, &#39;+1 week&#39;);&#xA;&#xA;// Changing taste in music: This will return `The Mars Volta` now but `Portishead` in a week.&#xA;$user-&amp;gt;favorite_band;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way you can change historic data as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;saveMetaAt(&#39;favorite_band&#39;, &#39;Arctic Monkeys&#39;, &#39;-5 years&#39;);&#xA;$user-&amp;gt;saveMetaAt(&#39;favorite_band&#39;, &#39;Tool&#39;, &#39;-1 year&#39;);&#xA;&#xA;// This will return `Tool` – which is true since this is indeed a good band.&#xA;$user-&amp;gt;favorite_band;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Retrieving Metadata&lt;/h2&gt; &#xA;&lt;p&gt;You can access metadata as if they were properties on your model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$post-&amp;gt;likes; // (int) 24&#xA;$post-&amp;gt;color; // (string) &#39;#000&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the &lt;code&gt;getMeta()&lt;/code&gt; method to specify a fallback value for non-existent meta.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$post-&amp;gt;getMeta(&#39;likes&#39;, 0); // Use `0` as a fallback.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also retrieve the &lt;code&gt;meta&lt;/code&gt; relation on your model. This will only retrieve the most recent value per &lt;code&gt;key&lt;/code&gt; that is released yet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$post-&amp;gt;saveMeta([&#xA;    &#39;author&#39; =&amp;gt; &#39;Anthony Kiedis&#39;,&#xA;    &#39;color&#39; =&amp;gt; &#39;black&#39;,&#xA;]);&#xA;&#xA;$post-&amp;gt;saveMetaAt(&#39;author&#39;, &#39;Jimi Hendrix&#39;, &#39;1970-01-01&#39;);&#xA;$post-&amp;gt;saveMetaAt(&#39;author&#39;, &#39;Omar Rodriguez&#39;, &#39;+1 year&#39;);&#xA;&#xA;$post-&amp;gt;meta-&amp;gt;pluck(&#39;value&#39;, &#39;key&#39;);&#xA;&#xA;/**&#xA; * Illuminate\Support\Collection {&#xA; *   all: [&#xA; *     &#34;author&#34; =&amp;gt; &#34;Anthony Kiedis&#34;,&#xA; *     &#34;color&#34; =&amp;gt; &#34;black&#34;,&#xA; *   ],&#xA; * }&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a shorthand to pluck all the current meta data attached to the model. This will include all &lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#limit-meta-keys&#34;&gt;explicitly defined meta keys&lt;/a&gt; with a default of &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Allow any meta key and explicitly allow `foo` and `bar`.&#xA;$post-&amp;gt;metaKeys([&#39;*&#39;, &#39;foo&#39;, &#39;bar&#39;]);&#xA;&#xA;$post-&amp;gt;saveMeta(&#39;foo&#39;, &#39;a value&#39;);&#xA;$post-&amp;gt;saveMeta(&#39;another&#39;, true);&#xA;&#xA;$post-&amp;gt;pluckMeta();&#xA;/**&#xA; * Illuminate\Support\Collection {&#xA; *   all: [&#xA; *     &#34;foo&#34; =&amp;gt; &#34;a value&#34;,&#xA; *     &#34;bar&#34; =&amp;gt; null,&#xA; *     &#34;another&#34; =&amp;gt; true,&#xA; *   ],&#xA; * }&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you instead want to retrieve all meta that was published yet, use the &lt;code&gt;publishedMeta&lt;/code&gt; relation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// This array will also include `Jimi Hendrix´.&#xA;$post-&amp;gt;publishedMeta-&amp;gt;toArray();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to inspect &lt;em&gt;all&lt;/em&gt; metadata including unpublished records, use the &lt;code&gt;allMeta&lt;/code&gt; relation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$post-&amp;gt;allMeta-&amp;gt;toArray();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can determine if a &lt;code&gt;Meta&lt;/code&gt; instance is the most recent published record for the related model or if it is not yet released.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$meta = $post-&amp;gt;allMeta-&amp;gt;first();&#xA;&#xA;$meta-&amp;gt;is_current; // (bool)&#xA;$meta-&amp;gt;is_planned; // (bool)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Querying &lt;code&gt;Meta&lt;/code&gt; Model&lt;/h3&gt; &#xA;&lt;p&gt;There are also some query scopes on the &lt;code&gt;Meta&lt;/code&gt; model itself that may be helpful.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Meta::published()-&amp;gt;get(); // Only current and historic meta.&#xA;&#xA;Meta::planned()-&amp;gt;get(); // Only meta not yet published.&#xA;&#xA;Meta::publishedBefore(&#39;+1 week&#39;)-&amp;gt;get(); // Only meta published by next week.&#xA;&#xA;Meta::publishedAfter(&#39;+1 week&#39;)-&amp;gt;get(); // Only meta still unpublished in a week.&#xA;&#xA;Meta::onlyCurrent()-&amp;gt;get(); // Only current meta without planned or historic data.&#xA;&#xA;Meta::withoutHistory()-&amp;gt;get(); // Query without stale records.&#xA;&#xA;Meta::withoutCurrent()-&amp;gt;get(); // Query without current records.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default these functions will use &lt;code&gt;Carbon::now()&lt;/code&gt; to determine what metadata is considered the most recent, but you can also pass a datetime to look from.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Get records that have been current a month ago.&#xA;Meta::onlyCurrent(&#39;-1 month&#39;)-&amp;gt;get();&#xA;&#xA;// Get records that will not be history by tommorow.&#xA;Meta::withoutHistory(Carbon::now()-&amp;gt;addDay())-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Query by Metadata&lt;/h2&gt; &#xA;&lt;h3&gt;Querying Metadata Existence&lt;/h3&gt; &#xA;&lt;p&gt;You can query records having meta data for the given key(s).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Find posts having at least one meta records for `color` key.&#xA;Post::whereHasMeta(&#39;color&#39;)-&amp;gt;get();&#xA;&#xA;// Or pass an array to find records having meta for at least one of the given keys.&#xA;Post::whereHasMeta([&#39;color&#39;, &#39;background_color&#39;])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Querying Metadata Absence&lt;/h3&gt; &#xA;&lt;p&gt;You can query records not having meta data for the given key(s).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Find posts not having any meta records for `color` key.&#xA;Post::whereDoesntHaveMeta(&#39;color&#39;)-&amp;gt;get();&#xA;&#xA;// Or find records not having meta for any of the given keys.&#xA;Post::whereDoesntHaveMeta([&#39;color&#39;, &#39;background_color&#39;])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Querying Metadata by Value&lt;/h3&gt; &#xA;&lt;p&gt;You can retrieve models having meta with the given key and value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Find posts where the current attached color is `black`.&#xA;Post::whereMeta(&#39;color&#39;, &#39;black&#39;)-&amp;gt;get();&#xA;&#xA;// Find posts where the current attached color is not `black`.&#xA;Post::whereMeta(&#39;color&#39;, &#39;!=&#39;, &#39;black&#39;)-&amp;gt;get();&#xA;&#xA;// Find posts that are `visible`.&#xA;Post::whereMeta(&#39;visible&#39;, true)-&amp;gt;get();&#xA;&#xA;// There are alternatives for building `or` clauses for all scopes.&#xA;Post::whereMeta(&#39;visible&#39;, true)-&amp;gt;orWhere(&#39;hidden&#39;, false)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiplex will take care of finding the right datatype for the passed query.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Matches only meta records with type `boolean`.&#xA;Post::whereMeta(&#39;hidden&#39;, false)-&amp;gt;get();&#xA;&#xA;// Matches only meta records with type `datetime`.&#xA;Post::whereMeta(&#39;release_at&#39;, &#39;&amp;lt;=&#39;, Carbon::now())-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also query by an array if values. Each array value will be typecasted individually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Find posts where `color` is `black` (string) or `false` (boolean).&#xA;Post::whereMetaIn(&#39;color&#39;, [&#39;black&#39;, false])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to query without typecasting use &lt;code&gt;whereRawMeta()&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::whereRawMeta(&#39;hidden&#39;, &#39;&#39;)-&amp;gt;get();&#xA;&#xA;Post::whereRawMeta(&#39;likes&#39;, &#39;&amp;gt;&#39;, &#39;100&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also define which &lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/config/multiplex.php&#34;&gt;datatype&lt;/a&gt; to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::whereMetaOfType(&#39;integer&#39;, &#39;count&#39;, &#39;0&#39;)-&amp;gt;get();&#xA;&#xA;Post::whereMetaOfType(&#39;null&#39;, &#39;foo&#39;, &#39;&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Querying empty or non-empty Metadata&lt;/h3&gt; &#xA;&lt;p&gt;You can query for empty or non-empty metadata where &lt;code&gt;null&lt;/code&gt; or empty strings would be considered being empty.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::whereMetaEmpty(&#39;favorite_band&#39;)-&amp;gt;get();&#xA;&#xA;// Get all posts having meta names `likes` and `comments` where *both* of them are not empty.&#xA;Post::whereMetaNotEmpty([&#39;likes&#39;, &#39;comments&#39;])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;p&gt;You can listen for the following events that will be fired by Multiplex.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;MetaHasBeenAdded&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This event will be fired once a new version of meta is saved to the model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Kolossal\Multiplex\Events\MetaHasBeenAdded;&#xA;&#xA;class SomeListener&#xA;{&#xA;    public function handle(MetaHasBeenAdded $event)&#xA;    {&#xA;        $event-&amp;gt;meta; // The Meta model that was added.&#xA;        $event-&amp;gt;model; // The parent model, same as $event-&amp;gt;meta-&amp;gt;metable.&#xA;        $event-&amp;gt;type; // The class name of the parent model.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;MetaHasBeenRemoved&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This event will be fired once metadata is removed by using &lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#deleting-metadata&#34;&gt;&lt;code&gt;deleteMeta&lt;/code&gt;&lt;/a&gt;. The event will fire only once per key and the &lt;code&gt;$meta&lt;/code&gt; property on the event will contain the latest meta only.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Kolossal\Multiplex\Events\MetaHasBeenRemoved;&#xA;&#xA;class SomeListener&#xA;{&#xA;    public function handle(MetaHasBeenRemoved $event)&#xA;    {&#xA;        $event-&amp;gt;meta; // The Meta model that was removed.&#xA;        $event-&amp;gt;model; // The parent model, same as $event-&amp;gt;meta-&amp;gt;metable.&#xA;        $event-&amp;gt;type; // The class name of the parent model.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Time Traveling&lt;/h2&gt; &#xA;&lt;p&gt;You can get the metadata for a model at a specific point in time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = Auth::user()-&amp;gt;withMetaAt(&#39;-1 week&#39;);&#xA;$user-&amp;gt;favorite_band; // Tool&#xA;$user-&amp;gt;withMetaAt(Carbon::now())-&amp;gt;favorite_band; // The Mars Volta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way you can inspect the whole set of metadata that was valid at the time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::first()-&amp;gt;withMetaAt(&#39;2022-10-01 15:00:00&#39;)-&amp;gt;meta-&amp;gt;pluck(&#39;value&#39;, &#39;key&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also query by meta for a specific point in time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::travelTo(&#39;-14 days&#39;)-&amp;gt;whereMetaIn(&#39;foo&#39;, [false, 0])-&amp;gt;get();&#xA;&#xA;Post::travelTo(&#39;+2 years&#39;)-&amp;gt;where(&#39;category&#39;, &#39;tech&#39;)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember to travel back if you want to perform further actions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Post::travelTo(&#39;-1 year&#39;)-&amp;gt;where(&#39;category&#39;, &#39;tech&#39;)-&amp;gt;get();&#xA;Post::where(&#39;category&#39;, &#39;tech&#39;)-&amp;gt;get(); // Will still look for meta published last year.&#xA;&#xA;Post::travelBack();&#xA;Post::where(&#39;category&#39;, &#39;tech&#39;)-&amp;gt;get(); // Find current meta.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limit Meta Keys&lt;/h2&gt; &#xA;&lt;p&gt;You can limit which keys can be used for metadata by setting &lt;code&gt;$metaKeys&lt;/code&gt; on the model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Post extends Model&#xA;{&#xA;    use HasMeta;&#xA;&#xA;    protected array $metaKeys = [&#xA;        &#39;color&#39;,&#xA;        &#39;hide&#39;,&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default all keys are allowed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected array $metaKeys = [&#39;*&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the allowed meta keys dynamically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$model-&amp;gt;metaKeys([&#39;color&#39;, &#39;hide&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might as well cast your attributes using the &lt;code&gt;MetaAttribute&lt;/code&gt; cast which will automatically allow the attribute being used as a meta key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Kolossal\Multiplex\MetaAttribute;&#xA;&#xA;class Post extends Model&#xA;{&#xA;    use HasMeta;&#xA;&#xA;    protected $metaKeys = [];&#xA;&#xA;    protected $casts = [&#xA;        &#39;body&#39; =&amp;gt; MetaAttribute::class,&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Trying to assign a value to a meta key that is not allowed will throw a &lt;code&gt;Kolossal\Multiplex\Exceptions\MetaException&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Typecast Meta Keys&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you may wish to force typecasting of meta attributes. You can bypass guessing the correct type and define which type should be used for specific meta keys.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected array $metaKeys = [&#xA;    &#39;foo&#39;,&#xA;    &#39;count&#39; =&amp;gt; &#39;integer&#39;,&#xA;    &#39;color&#39; =&amp;gt; &#39;string&#39;,&#xA;    &#39;hide&#39; =&amp;gt; &#39;boolean&#39;,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extending Database Columns&lt;/h2&gt; &#xA;&lt;p&gt;By default Multiplex will not touch columns of your model. But sometimes it might be useful to have meta records as an extension for your existing table columns.&lt;/p&gt; &#xA;&lt;p&gt;Consider having an existing &lt;code&gt;Post&lt;/code&gt; model with only a &lt;code&gt;title&lt;/code&gt; and a &lt;code&gt;body&lt;/code&gt; column. By explicitely adding &lt;code&gt;body&lt;/code&gt; to our array of meta keys &lt;code&gt;body&lt;/code&gt; will be handled by Multiplex from now on – not touching the &lt;code&gt;posts&lt;/code&gt; table, but using the database column as a fallback.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Post extends Model&#xA;{&#xA;    use HasMeta;&#xA;&#xA;    protected $metaKeys = [&#xA;        &#39;*&#39;,&#xA;        &#39;body&#39;,&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\DB::table(&#39;posts&#39;)-&amp;gt;create([&#39;title&#39; =&amp;gt; &#39;A title&#39;, &#39;body&#39; =&amp;gt; &#39;A body.&#39;]);&#xA;&#xA;$post = Post::first();&#xA;&#xA;$post-&amp;gt;body; // A body.&#xA;&#xA;$post-&amp;gt;body = &#39;This. Is. Meta.&#39;;&#xA;$post-&amp;gt;save();&#xA;&#xA;$post-&amp;gt;body; // This. Is. Meta.&#xA;$post-&amp;gt;deleteMeta(&#39;body&#39;);&#xA;&#xA;$post-&amp;gt;body; // A body.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case of using Multiplex for extending table columns, Multiplex will remove the original column when retrieving models from the database so you don’t get stale data.&lt;/p&gt; &#xA;&lt;h2&gt;Deleting Metadata&lt;/h2&gt; &#xA;&lt;p&gt;You can delete any metadata associated with the model from the database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Delete all meta records for the `color` key.&#xA;$post-&amp;gt;deleteMeta(&#39;color&#39;);&#xA;&#xA;// Or delete all meta records associated with the model.&#xA;$post-&amp;gt;purgeMeta();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Since Multiplex stores metadata in a polymorphic &lt;a href=&#34;https://laravel.com/docs/9.x/eloquent-relationships#one-to-many-polymorphic-relations&#34;&gt;One To Many&lt;/a&gt; relationship querying your models could easily result in a &lt;a href=&#34;https://laravel.com/docs/9.x/eloquent-relationships#eager-loading&#34;&gt;&lt;code&gt;N+1&lt;/code&gt; query problem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your use case you should consider eager loading the &lt;code&gt;meta&lt;/code&gt; relation, for example using &lt;code&gt;$with&lt;/code&gt; on your model. This might be especially useful if you are &lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/#extending-database-columns&#34;&gt;extending database columns&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Worst case: 26 queries if `color` is a meta value.&#xA;$colors = Post::take(25)-&amp;gt;get()-&amp;gt;map(&#xA;    fn ($post) =&amp;gt; $post-&amp;gt;color;&#xA;);&#xA;&#xA;// Same result with only 2 queries.&#xA;$colors = Post::with(&#39;meta&#39;)-&amp;gt;take(25)-&amp;gt;get()-&amp;gt;map(&#xA;    fn ($post) =&amp;gt; $post-&amp;gt;color;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;There is no need to configure anything but if you like, you can publish the config file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=&#34;multiplex-config&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This package is heavily based on and inspired by &lt;a href=&#34;https://github.com/plank/laravel-metable&#34;&gt;Laravel-Metable&lt;/a&gt; by &lt;a href=&#34;https://github.com/frasmage&#34;&gt;Sean Fraser&lt;/a&gt; as well as &lt;a href=&#34;https://github.com/kodeine/laravel-meta&#34;&gt;laravel-meta&lt;/a&gt; by &lt;a href=&#34;https://github.com/kodeine&#34;&gt;Kodeine&lt;/a&gt;. The &lt;a href=&#34;https://github.com/spatie/package-skeleton-laravel&#34;&gt;Package Skeleton&lt;/a&gt; by the great &lt;a href=&#34;https://spatie.be/&#34;&gt;Spatie&lt;/a&gt; was used as a starting point.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt; &lt;br&gt; &lt;a href=&#34;https://kolossal.io&#34; target=&#34;_blank&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/HEAD/.github/kolossal-logo-dark.svg&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/HEAD/.github/kolossal-logo-light.svg&#34;&gt; &#xA;   &lt;img alt=&#34;Multiplex&#34; src=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/HEAD/.github/kolossal-log-light.svg?sanitize=true&#34; width=&#34;138&#34; height=&#34;32&#34; style=&#34;max-width: 100%;&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;Copyright © &lt;a href=&#34;https://kolossal.io&#34;&gt;kolossal&lt;/a&gt;. Released under &lt;a href=&#34;https://raw.githubusercontent.com/kolossal-io/laravel-multiplex/main/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>