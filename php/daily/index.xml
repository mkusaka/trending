<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-24T01:37:15Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ClickCyber/cve-2022-42889</title>
    <updated>2022-10-24T01:37:15Z</updated>
    <id>tag:github.com,2022-10-24:/ClickCyber/cve-2022-42889</id>
    <link href="https://github.com/ClickCyber/cve-2022-42889" rel="alternate"></link>
    <summary type="html">&lt;p&gt;cve-2022-42889 Text4Shell CVE-2022-42889 affects Apache Commons Text versions 1.5 through 1.9. It has been patched as of Commons Text version 1.10.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cve-2022-42889&lt;/h1&gt; &#xA;&lt;p&gt;cve-2022-42889 Text4Shell affects Apache Commons Text versions 1.5 through 1.9. It has been patched as of Commons Text version 1.10.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ClickCyber/cve-2022-42889/main/poc.png&#34;&gt; references: &#xA;&lt;p&gt;&lt;a href=&#34;https://securitylab.github.com/advisories/GHSL-2022-018_Apache_Commons_Text/&#34;&gt;https://securitylab.github.com/advisories/GHSL-2022-018_Apache_Commons_Text/&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/karthikuj/cve-2022-42889-text4shell-docker&#34;&gt;https://github.com/karthikuj/cve-2022-42889-text4shell-docker&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spatie/laravel-model-flags</title>
    <updated>2022-10-24T01:37:15Z</updated>
    <id>tag:github.com,2022-10-24:/spatie/laravel-model-flags</id>
    <link href="https://github.com/spatie/laravel-model-flags" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add flags to Eloquent models&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spatie/laravel-model-flags/main/art/socialcard.png&#34; alt=&#34;Social Card of Laravel Permission&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Add flags to Eloquent models&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/spatie/laravel-model-flags&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/spatie/laravel-model-flags.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/spatie/laravel-model-flags/actions?query=workflow%3Arun-tests+branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/spatie/laravel-model-flags/run-tests?label=tests&#34; alt=&#34;GitHub Tests Action Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/spatie/laravel-model-flags/actions?query=workflow%3A%22Fix+PHP+code+style+issues%22+branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/spatie/laravel-model-flags/Fix%20PHP%20code%20style%20issues?label=code%20style&#34; alt=&#34;GitHub Code Style Action Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/spatie/laravel-model-flags&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/spatie/laravel-model-flags.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package offers a trait that allows you to add flags to an Eloquent model. These can be used to quickly save the state of a process, update, migration, etc... to a model, without having to add an additional column using migrations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user-&amp;gt;hasFlag(&#39;receivedMail&#39;); // returns false&#xA;&#xA;$user-&amp;gt;flag(&#39;receivedMail&#39;); // flag the user as having received the mail&#xA;&#xA;$user-&amp;gt;hasFlag(&#39;receivedMail&#39;); // returns true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also provides scopes to quickly query all models with a certain flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::flagged(&#39;myFlag&#39;)-&amp;gt;get(); // returns all models with the given flag&#xA;User::notFlagged(&#39;myFlag&#39;)-&amp;gt;get(); // returns all models without the given flag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Though there are other usages, the primary use case of this package is to easily build idempotent (aka restartable) pieces of code. For example, when writing an Artisan command that sends a mail to each user. Using flags, you can make sure that when the command is cancelled (or fails) half-way through, in the second invocation, a mail will only be sent to users that haven&#39;t received one yet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// in an Artisan command&#xA;&#xA;User::notFlagged(&#39;wasSentPromotionMail&#39;)&#xA;    -&amp;gt;each(function(User $user) {&#xA;        Mail::to($user-&amp;gt;email)-&amp;gt;send(new PromotionMail())&#xA;&#xA;        $user-&amp;gt;flag(&#39;wasSentPromotionMail&#39;);&#xA;    });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No matter how many times you would execute this command, users would only get the mail once.&lt;/p&gt; &#xA;&lt;h2&gt;Support us&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spatie.be/github-ad-click/laravel-model-flags&#34;&gt;&lt;img src=&#34;https://github-ads.s3.eu-central-1.amazonaws.com/laravel-model-flags.jpg?t=1&#34; width=&#34;419px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We invest a lot of resources into creating &lt;a href=&#34;https://spatie.be/open-source&#34;&gt;best in class open source packages&lt;/a&gt;. You can support us by &lt;a href=&#34;https://spatie.be/open-source/support-us&#34;&gt;buying one of our paid products&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You&#39;ll find our address on &lt;a href=&#34;https://spatie.be/about-us&#34;&gt;our contact page&lt;/a&gt;. We publish all received postcards on &lt;a href=&#34;https://spatie.be/open-source/postcards&#34;&gt;our virtual postcard wall&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via Composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require spatie/laravel-model-flags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Behind the scenes, the flags and the relation to a model will be stored in the &lt;code&gt;flags&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;p&gt;To create that &lt;code&gt;flags&lt;/code&gt; table, you must publish and run the migrations once with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=&#34;model-flags-migrations&#34;&#xA;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can publish the config file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=&#34;model-flags-config&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the contents of the published config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return [&#xA;    /*&#xA;     * The model used as the flag model.&#xA;     */&#xA;    &#39;flag_model&#39; =&amp;gt; Spatie\ModelFlags\Models\Flag::class,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To add flaggable behaviour to a model, simply make it use the &lt;code&gt;Spatie\ModelFlags\Models\Concerns\HasFlags&lt;/code&gt; trait&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Illuminate\Database\Eloquent\Model;&#xA;use Spatie\ModelFlags\Models\Concerns\HasFlags;&#xA;&#xA;class YourModel extends Model&#xA;{&#xA;    use HasFlags;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These functions will become available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// add a flag&#xA;$model-&amp;gt;flag(&#39;myFlag&#39;);&#xA;&#xA;// returns true if the model has a flag with the given name&#xA;$model-&amp;gt;hasFlag(&#39;myFlag&#39;);&#xA;&#xA;// remove a flag&#xA;$model-&amp;gt;unflag(&#39;myFlag&#39;);&#xA;&#xA; // returns an array with the name of all flags on the model&#xA;$model-&amp;gt;flagNames();&#xA;&#xA;// use the `flags` relation to delete all flags on a model&#xA;$user-&amp;gt;flags()-&amp;gt;delete();&#xA;&#xA;// use the `flags` relation to delete a particular flag on a model&#xA;$user-&amp;gt;flags()-&amp;gt;where(&#39;name&#39;, &#39;myFlag&#39;)-&amp;gt;delete();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also get these scopes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query all models that have a flag with the given name&#xA;YourModel::flagged(&#39;myFlag&#39;);&#xA;&#xA;// query all models that have do not have a flag with the given name&#xA;YourModel::notFlagged(&#39;myFlag&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remove a flag from all models in one go, you can delete the flag using the &lt;code&gt;Spatie\ModelFlags\Models\Flag&lt;/code&gt; model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Spatie\ModelFlags\Models\Flag;&#xA;&#xA;// remove myFlag from all models&#xA;Flag::where(&#39;name&#39;, &#39;myFlag&#39;)-&amp;gt;delete();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-model-flags/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information on what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-model-flags/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://raw.githubusercontent.com/spatie/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freekmurze&#34;&gt;Freek Van der Herten&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spatie/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And a special thanks to &lt;a href=&#34;https://twitter.com/caneco&#34;&gt;Caneco&lt;/a&gt; for the logo ✨&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/laravel-model-flags/main/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FriendsOfPHP/well-known-implementations</title>
    <updated>2022-10-24T01:37:15Z</updated>
    <id>tag:github.com,2022-10-24:/FriendsOfPHP/well-known-implementations</id>
    <link href="https://github.com/FriendsOfPHP/well-known-implementations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Help reduce the proliferation of same-abstraction implementations in vendor directories.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FriendsOfPHP / Well-Known Implementations&lt;/h1&gt; &#xA;&lt;p&gt;This package helps reduce the proliferation of same-abstraction implementations in vendor directories.&lt;/p&gt; &#xA;&lt;p&gt;It is targeted at SDK maintainers that write their code in a decoupled way but still need an actual implementation to provide a nice experience out of the box.&lt;/p&gt; &#xA;&lt;p&gt;Without this package, one would e.g. require the &#34;php-http/client-implementation&#34; virtual package to signal that a given SDK uses HTTPlug to make API calls, and would also require &#34;php-http/guzzle7-adapter&#34; to install an actual implementation in case none is wired by the consuming app when calling the SDK.&lt;/p&gt; &#xA;&lt;p&gt;But imagine that the consuming app already has a dependency on another &#34;php-http/client-implementation&#34;: the SDK should ideally reuse that implementation and &#34;php-http/guzzle7-adapter&#34; should be removed from vendor/ with all its transitive dependencies. This would help with dependency-management and might enable better integration in debugging panels for example.&lt;/p&gt; &#xA;&lt;p&gt;By requiring &#34;friendsofphp/well-known-implementations&#34; instead of &#34;php-http/guzzle7-adapter&#34;, SDK maintainers can provide ideal experiences: because this package is also a composer-plugin, it will auto-install an actual implementation of the required abstraction when none is already installed, or reuse it if one is found.&lt;/p&gt; &#xA;&lt;p&gt;In their constructors, SDKs should then reference the provided &#34;well-known&#34; classes and they will get whatever implementation is available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class MySdk&#xA;{&#xA;    public function __construct(&#xA;        private HttpClient $client = new WellKnownHttplugClient(),&#xA;    )&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All provided &lt;code&gt;WellKnown*&lt;/code&gt; classes have standardized constructor signatures so that you don&#39;t need to care about which exact implementation is available to instantiate them.&lt;/p&gt; &#xA;&lt;p&gt;Althought not required most of the time, you can check which implementation is used by using the &lt;code&gt;ConcreteImplementation::*_VENDOR&lt;/code&gt; constants.&lt;/p&gt; &#xA;&lt;p&gt;The logic to decide which implementation should be installed relies on the packages that are already found in a project. For example, if one is using &lt;code&gt;react/event-loop&lt;/code&gt;, the plugin will select &lt;code&gt;php-http/react-adapter&lt;/code&gt; (the rules are declared in &lt;code&gt;ComposerPlugin&lt;/code&gt;; they&#39;re open for discussion.) The missing packages will be added to the project&#39;s composer.json file. This makes it easy to override the choices of the plugin by explicitly requiring the preferred implementations.&lt;/p&gt; &#xA;&lt;p&gt;As of now, the following abstractions are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;php-http/async-client-implementation&lt;/li&gt; &#xA; &lt;li&gt;php-http/client-implementation&lt;/li&gt; &#xA; &lt;li&gt;psr/http-client-implementation&lt;/li&gt; &#xA; &lt;li&gt;psr/http-factory-implementation&lt;/li&gt; &#xA; &lt;li&gt;psr/http-message-implementation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And the following vendors are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Guzzle&lt;/li&gt; &#xA; &lt;li&gt;HTTPlug&lt;/li&gt; &#xA; &lt;li&gt;Laminas&lt;/li&gt; &#xA; &lt;li&gt;Nyholm&lt;/li&gt; &#xA; &lt;li&gt;React&lt;/li&gt; &#xA; &lt;li&gt;Slim&lt;/li&gt; &#xA; &lt;li&gt;Symfony&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More abstractions / vendors can be added by contributions.&lt;/p&gt; &#xA;&lt;p&gt;If your favorite SDK does not use this package yet, please let them know about it or better: send them a PR!&lt;/p&gt;</summary>
  </entry>
</feed>