<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:33:15Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phpDocumentor/ReflectionDocBlock</title>
    <updated>2022-08-02T01:33:15Z</updated>
    <id>tag:github.com,2022-08-02:/phpDocumentor/ReflectionDocBlock</id>
    <link href="https://github.com/phpDocumentor/ReflectionDocBlock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/phpDocumentor/ReflectionDocBlock/workflows/Qa%20workflow/badge.svg?sanitize=true&#34; alt=&#34;Qa workflow&#34;&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/phpDocumentor/ReflectionDocBlock/?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/coverage/g/phpDocumentor/ReflectionDocBlock.svg?sanitize=true&#34; alt=&#34;Scrutinizer Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/phpDocumentor/ReflectionDocBlock/?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/g/phpDocumentor/ReflectionDocBlock.svg?sanitize=true&#34; alt=&#34;Scrutinizer Code Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpdocumentor/reflection-docblock&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/phpdocumentor/reflection-docblock.svg?sanitize=true&#34; alt=&#34;Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpdocumentor/reflection-docblock&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/vpre/phpdocumentor/reflection-docblock.svg?sanitize=true&#34; alt=&#34;Unstable Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ReflectionDocBlock&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The ReflectionDocBlock component of phpDocumentor provides a DocBlock parser that is 100% compatible with the &lt;a href=&#34;http://phpdoc.org/docs/latest&#34;&gt;PHPDoc standard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require phpdocumentor/reflection-docblock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In order to parse the DocBlock one needs a DocBlockFactory that can be instantiated using its &lt;code&gt;createInstance&lt;/code&gt; factory method like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$factory  = \phpDocumentor\Reflection\DocBlockFactory::createInstance();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we can use the &lt;code&gt;create&lt;/code&gt; method of the factory to interpret the DocBlock. Please note that it is also possible to provide a class that has the &lt;code&gt;getDocComment()&lt;/code&gt; method, such as an object of type &lt;code&gt;ReflectionClass&lt;/code&gt;, the create method will read that if it exists.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$docComment = &amp;lt;&amp;lt;&amp;lt;DOCCOMMENT&#xA;/**&#xA; * This is an example of a summary.&#xA; *&#xA; * This is a Description. A Summary and Description are separated by either&#xA; * two subsequent newlines (thus a whiteline in between as can be seen in this&#xA; * example), or when the Summary ends with a dot (`.`) and some form of&#xA; * whitespace.&#xA; */&#xA;DOCCOMMENT;&#xA;&#xA;$docblock = $factory-&amp;gt;create($docComment);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;create&lt;/code&gt; method will yield an object of type &lt;code&gt;\phpDocumentor\Reflection\DocBlock&lt;/code&gt; whose methods can be queried:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Contains the summary for this DocBlock&#xA;$summary = $docblock-&amp;gt;getSummary();&#xA;&#xA;// Contains \phpDocumentor\Reflection\DocBlock\Description object&#xA;$description = $docblock-&amp;gt;getDescription();&#xA;&#xA;// You can either cast it to string&#xA;$description = (string) $docblock-&amp;gt;getDescription();&#xA;&#xA;// Or use the render method to get a string representation of the Description.&#xA;$description = $docblock-&amp;gt;getDescription()-&amp;gt;render();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more examples it would be best to review the scripts in the &lt;a href=&#34;https://raw.githubusercontent.com/phpDocumentor/ReflectionDocBlock/master/examples&#34;&gt;&lt;code&gt;/examples&lt;/code&gt; folder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>symfony/polyfill-intl-idn</title>
    <updated>2022-08-02T01:33:15Z</updated>
    <id>tag:github.com,2022-08-02:/symfony/polyfill-intl-idn</id>
    <link href="https://github.com/symfony/polyfill-intl-idn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This component provides a partial, native PHP implementation for the Intl extension (IDN features).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Symfony Polyfill / Intl: Idn&lt;/h1&gt; &#xA;&lt;p&gt;This component provides &lt;a href=&#34;https://php.net/idn-to-ascii&#34;&gt;&lt;code&gt;idn_to_ascii&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://php.net/idn-to-utf8&#34;&gt;&lt;code&gt;idn_to_utf8&lt;/code&gt;&lt;/a&gt; functions to users who run php versions without the &lt;a href=&#34;https://php.net/intl&#34;&gt;Intl&lt;/a&gt; extension.&lt;/p&gt; &#xA;&lt;p&gt;More information can be found in the &lt;a href=&#34;https://github.com/symfony/polyfill/raw/main/README.md&#34;&gt;main Polyfill README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This library is released under the &lt;a href=&#34;https://raw.githubusercontent.com/symfony/polyfill-intl-idn/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>