<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-02T01:35:29Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>another-library/type-guard</title>
    <updated>2024-04-02T01:35:29Z</updated>
    <id>tag:github.com,2024-04-02:/another-library/type-guard</id>
    <link href="https://github.com/another-library/type-guard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Type Guard is a lightweight PHP library that allows you to narrow down the type of an variable to a more specific type.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/another-library/type-guard/master/docs/example.jpg&#34; height=&#34;300&#34; alt=&#34;Skeleton Php&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/another-library/type-guard/actions&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://github.com/another-library/type-guard/actions/workflows/tests.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/another-library/type-guard&#34;&gt;&lt;img alt=&#34;Total Downloads&#34; src=&#34;https://img.shields.io/packagist/dt/another-library/type-guard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/another-library/type-guard&#34;&gt;&lt;img alt=&#34;Latest Version&#34; src=&#34;https://img.shields.io/packagist/v/another-library/type-guard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/another-library/type-guard&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/packagist/l/another-library/type-guard&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This library is a &lt;strong&gt;work in progress&lt;/strong&gt;. Please, do not use it in production.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Type Guard module is part of the &lt;a href=&#34;https://github.com/another-library&#34;&gt;Another Library&lt;/a&gt;, and allows you to &lt;strong&gt;narrow down the type&lt;/strong&gt; of a variable to a more specific type. Using the &lt;code&gt;type&lt;/code&gt; function, you can perform specific checks to determine the type of an object and then use that object in a way that is &lt;strong&gt;type-safe&lt;/strong&gt; according to the &lt;a href=&#34;https://phpstan.org/&#34;&gt;PHPStan&lt;/a&gt; and &lt;a href=&#34;https://psalm.dev/&#34;&gt;Psalm&lt;/a&gt; static analyzers.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example, where we use the &lt;code&gt;type&lt;/code&gt; function to narrow down the type of a variable that previously had a &lt;code&gt;mixed&lt;/code&gt; type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function config(): mixed;&#xA;&#xA;// At compile time, the type of $apiKey is `mixed`:&#xA;$apiKey = config(&#39;api_key&#39;);&#xA;&#xA;// We instruct the static analyzer that $apiKey is a `string`:&#xA;$apiKey = type($apiKey)-&amp;gt;asString();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is another example, where we use the &lt;code&gt;type&lt;/code&gt; function to narrow down the type of a variable that previously could be &lt;code&gt;null&lt;/code&gt;. In the process, zero type information is lost:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/** @var array&amp;lt;int, User&amp;gt;|null $users */&#xA;$users = getUsers();&#xA;&#xA;// Narrows down the type to `array&amp;lt;int, User&amp;gt;`&#xA;$users = type($users)-&amp;gt;not()-&amp;gt;null();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And one more example, where we narrow down the type of a variable to a Collection without losing the type information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/** @var Collection&amp;lt;int, User&amp;gt;|null $users */&#xA;$users = getUsers();&#xA;&#xA;// Narrows down the type to `Collection&amp;lt;int, User&amp;gt;`&#xA;$users = type($users)-&amp;gt;as(Collection::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Requires &lt;a href=&#34;https://php.net/releases/&#34;&gt;PHP 8.2+&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You may use &lt;a href=&#34;https://getcomposer.org&#34;&gt;Composer&lt;/a&gt; to install Type Guard into your PHP project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require another-library/type-guard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/another-library/type-guard/main/#as&#34;&gt;&lt;code&gt;as&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/another-library/type-guard/main/#asint&#34;&gt;&lt;code&gt;asInt()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/another-library/type-guard/main/#asfloat&#34;&gt;&lt;code&gt;asFloat()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/another-library/type-guard/main/#asstring&#34;&gt;&lt;code&gt;asString()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/another-library/type-guard/main/#asbool&#34;&gt;&lt;code&gt;asBool()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/another-library/type-guard/main/#asnull&#34;&gt;&lt;code&gt;asNull()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/another-library/type-guard/main/#ascallable&#34;&gt;&lt;code&gt;asCallable()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/another-library/type-guard/main/#notnull&#34;&gt;&lt;code&gt;not()-&amp;gt;null()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/another-library/type-guard/main/#asarray&#34;&gt;&lt;code&gt;asArray()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;as&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Asserts and narrows down the type of the given variable to a more specific type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$variable = type($variable)-&amp;gt;as(User::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;asInt()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Asserts and narrows down the type of the given variable to an integer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$variable = type($variable)-&amp;gt;asInt();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;asFloat()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Asserts and narrows down the type of the given variable to a float.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$variable = type($variable)-&amp;gt;asFloat();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;asString()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Asserts and narrows down the type of the given variable to a string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$variable = type($variable)-&amp;gt;asString();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;asBool()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Asserts and narrows down the type of the given variable to a boolean.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$variable = type($variable)-&amp;gt;asBool();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;asNull()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Asserts and narrows down the type of the given variable to a null.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$variable = type($variable)-&amp;gt;asNull();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;asCallable()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Asserts and narrows down the type of the given variable to a callable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$variable = type($variable)-&amp;gt;asCallable();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;not()-&amp;gt;null()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Asserts and narrows down the type of the given variable to a non-null value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$variable = type($variable)-&amp;gt;not()-&amp;gt;null();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;asArray()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Asserts and narrows down the type of the given variable to an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$variable = type($variable)-&amp;gt;asArray();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type Guard&lt;/strong&gt; is part of the &lt;a href=&#34;https://github.com/another-library&#34;&gt;Another Library&lt;/a&gt; project. It was created by &lt;strong&gt;&lt;a href=&#34;https://twitter.com/enunomaduro&#34;&gt;Nuno Maduro&lt;/a&gt;&lt;/strong&gt; and open-sourced under the &lt;strong&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT license&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>