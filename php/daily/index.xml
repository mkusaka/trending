<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-13T01:42:49Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>clickbar/laravel-magellan</title>
    <updated>2023-01-13T01:42:49Z</updated>
    <id>tag:github.com,2023-01-13:/clickbar/laravel-magellan</id>
    <link href="https://github.com/clickbar/laravel-magellan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern PostGIS toolbox for Laravel&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;art/logo_dark.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;art/logo_light.svg&#34;&gt; &#xA;  &lt;img width=&#34;60%&#34; alt=&#34;The logo for laravel-magellan, which shows a small blue paper ship with the package name right beside it.&#34; src=&#34;https://raw.githubusercontent.com/clickbar/laravel-magellan/main/art/logo_light.png&#34;&gt; &#xA; &lt;/picture&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;p style=&#34;font-size: 1.75rem;&#34;&gt;A modern PostGIS toolbox for Laravel&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/clickbar/laravel-magellan&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/clickbar/laravel-magellan.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/clickbar/laravel-magellan&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/clickbar/laravel-magellan.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/clickbar/laravel-magellan/actions/workflows/run-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/clickbar/laravel-magellan/actions/workflows/run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Tests Action Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/clickbar/laravel-magellan/actions/workflows/fix-styling.yml&#34;&gt;&lt;img src=&#34;https://github.com/clickbar/laravel-magellan/actions/workflows/fix-styling.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Code Style Action Status&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üì£ Upcoming Meetup: Introduction to Laravel-Magellan&lt;/h2&gt; &#xA;&lt;p&gt;On &lt;strong&gt;07.02.2023 at 20:00 CET&lt;/strong&gt; we organize a hybrid meetup, to talk about our new package, its functionality and some background knowledge.&lt;br&gt; You can find more information &lt;a href=&#34;https://www.meetup.com/de-DE/clickbar-fullstack-talks/events/290735121/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Every sailor needs a nice ship to travel the seven seas ‚õµÔ∏è&lt;/p&gt; &#xA;&lt;p&gt;This package will have you prepared for accessing &lt;a href=&#34;https://postgis.net&#34;&gt;PostGIS&lt;/a&gt; related functionality within Laravel. It was heavily inspired by &lt;a href=&#34;https://github.com/mstaack/laravel-postgis&#34;&gt;mstaack/laravel-postgis&lt;/a&gt;, but has evolved into much more since. Other than some slight changes, you should be familiar with Magellan very quickly.&lt;/p&gt; &#xA;&lt;p&gt;Magellan comes with paddles included and also provides parsers/generators for GeoJson, WKB &amp;amp; WKT out of the box. Easily use all PostGIS datatypes in your migrations and avoid raw SQL to access PostGIS functions by using our Builder functions.&lt;/p&gt; &#xA;&lt;p&gt;Additionally &lt;code&gt;laravel-magellan&lt;/code&gt; provides extensions to the Schema, Query Builder and Postgres Grammar for easy access of PostGIS database functions like &lt;code&gt;ST_EXTENT&lt;/code&gt;. It does all this without breaking compatibility to other packages, like &lt;a href=&#34;https://github.com/tpetry/laravel-postgresql-enhanced&#34;&gt;tpetry/laravel-postgresql-enhanced&lt;/a&gt;, which has to extend the Grammar and Connection.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require clickbar/laravel-magellan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can publish and run the migrations with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=&#34;magellan-migrations&#34;&#xA;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can publish the config file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=&#34;magellan-config&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may find the contents of the published config file here: &lt;a href=&#34;https://raw.githubusercontent.com/clickbar/laravel-magellan/main/config/magellan.php&#34;&gt;config/magellan.php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s included&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Migration Schema Blueprints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Geometry Data Classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; WKT Generator &amp;amp; Parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; WKB Generator &amp;amp; Parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GeoJson Generator &amp;amp; Parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Eloquent Model Trait&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Command to automatically add the PostGIS trait to models&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Auto transform on insert with different projection&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GeoJson Request Validation Rule&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Transforms Geometry for Form Requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Exposes nearly all PostGIS functions as typed functions that can be used in select, where, orderBy, groupBy, having, from&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Geometry and BBox Cast classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Auto Cast when using functions that return geometry or bbox&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Empty Geometry Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Custom update Builder method for conversion safety&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Automatic PostGIS Function Doc Generator&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; BBox support within $postgisColumns &amp;amp; trait (currently with cast only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Custom Geometry Factories &amp;amp; Models&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More tests&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Before you start&lt;/h2&gt; &#xA;&lt;p&gt;We highly recommend using the &lt;a href=&#34;https://github.com/barryvdh/laravel-ide-helper&#34;&gt;laravel-ide-helper&lt;/a&gt; from barryvdh to be able to see everything included in the IDEs auto completion.&lt;/p&gt; &#xA;&lt;h2&gt;Creating Tables with PostGIS Columns&lt;/h2&gt; &#xA;&lt;p&gt;Laravel-magellan extends the default Schema Blueprint with all PostGIS functions. Since Laravel has introduced basic geometry support, all methods are prefixed with &lt;code&gt;magellan&lt;/code&gt;. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$table-&amp;gt;magellanPoint(&#39;location&#39;, 4326);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/clickbar/laravel-magellan/main/art/magellan_schema.png&#34; alt=&#34;List of all schema methods&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Preparing the Model&lt;/h2&gt; &#xA;&lt;p&gt;In order to properly integrate everything with the model you need to to perform the following 2 steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;HasPostgisColumns&lt;/code&gt; trait to your model&lt;/li&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;$postgisColumns&lt;/code&gt; array to the model&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected array $postgisColumns = [&#xA;        &#39;location&#39; =&amp;gt; [&#xA;            &#39;type&#39; =&amp;gt; &#39;geometry&#39;,&#xA;            &#39;srid&#39; =&amp;gt; 4326,&#xA;        ],&#xA;    ];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both steps can be automated by using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan magellan:update-postgis-columns&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command automatically scans the database and adds the trait and the array as well.&lt;/p&gt; &#xA;&lt;h2&gt;Using the geometry data classes&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve included data classes for the following common geometries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Point&lt;/li&gt; &#xA; &lt;li&gt;LineString&lt;/li&gt; &#xA; &lt;li&gt;Polygon&lt;/li&gt; &#xA; &lt;li&gt;MultiPoint&lt;/li&gt; &#xA; &lt;li&gt;MultiLineString&lt;/li&gt; &#xA; &lt;li&gt;MultiPolygon&lt;/li&gt; &#xA; &lt;li&gt;GeometryCollection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To create a geometry object manually, use the suited &lt;code&gt;&amp;lt;GeometryClass&amp;gt;::make&lt;/code&gt; method. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$point = Point::make(51.087, 8.76);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will notice that there are 3 different make methods for the Point class with different parameters:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;make(...)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;makeGeodectic(...)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;makeEmpty(...)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Let&#39;s take a closer look to the first two:&lt;/p&gt; &#xA;&lt;p&gt;This is the default factory method that can be used to fill all possible values. This method is considered the &#34;plain&#34; way. You should consider using this method when you use a different projection than WGS84 (srid=4326).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function make(float $x, float $y, ?float $z = null, ?float $m = null, ?int $srid = null): self&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of the common web use cases use the WGS84 projection. Therefore, most of the time the terms that are used will be latitude, longitute and altitude instead of x, y and z. To provide more comfort we have included a factory method that accepts those terms and automatically sets the srid to 4326.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function makeGeodetic(float $latitude, float $longitude, ?float $altitude = null, ?float $m = null): self&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using a Point class that uses the WGS84 projection, you can access the latitude, longitude and altitude with properly named getters and setters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;function getLatitude(): float&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;function setLatitude(float $latitude): void&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;function getLongitude(): float&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;function setLongitude(float $longitude): void&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;function getAltitude(): ?float&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;function setAltitude(float $altitude): void&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An exception will be thrown if you try to use this functions on a Point without srid=4326. Use the default x, y, z, m getters and setters instead.&lt;/p&gt; &#xA;&lt;h2&gt;Generators &amp;amp; Parsers&lt;/h2&gt; &#xA;&lt;p&gt;We currently provide parsers &amp;amp; generators for the following formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EWKB&lt;/li&gt; &#xA; &lt;li&gt;EWKT&lt;/li&gt; &#xA; &lt;li&gt;GeoJson&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are also used to format our data classes to strings, convert the return value from the database (which comes in EWKB format) and output our data to the frontend as GeoJson for example.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; In the following we will use EWKB &amp;amp; WBK or EWKT &amp;amp; WKT interchangeably, even though we always use the extended version of each.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The config file allows you to customize which representation you would like to be used eg. when JSON serialization is done for our data classes, where GeoJson is otherwise the default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$point = Point::makeGeodetic(51.087, 8.76);&#xA;&#xA;json_encode($point); // returns GeoJson&#xA;// &#34;{&#34;type&#34;:&#34;Point&#34;,&#34;coordinates&#34;:[8.76,51.087]}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can always use instances of each parser / generator and parse / generate on your own behalf.&lt;br&gt; While Generators have to be created on demand, Parsers are already instanciated in the app container as singletons and you can use them as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$parser = app(WKTParser::class);&#xA;&#xA;$point = $parser-&amp;gt;parse(&#39;SRID=4326;POINT (2, 2)&#39;);&#xA;&#xA;$generator = new WKBGenerator();&#xA;&#xA;$generator-&amp;gt;generate($point);&#xA;// &#34;0101000020E610000000000000000000400000000000000040&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example we obtain an instance of the &lt;code&gt;WKTParser&lt;/code&gt; and convert the string to one of our data classes. &lt;code&gt;$point&lt;/code&gt; is then a valid &lt;code&gt;Point&lt;/code&gt; instance and we can use any other generator eg. the &lt;code&gt;WKBGenerator&lt;/code&gt; to output the &lt;code&gt;$point&lt;/code&gt; in hexadecimal WKB format.&lt;/p&gt; &#xA;&lt;h2&gt;Request Validation and Transformation&lt;/h2&gt; &#xA;&lt;p&gt;When a form request contains a geometry in Geojson format, you can use the &lt;code&gt;GeometryGeojsonRule&lt;/code&gt; for validation. You can even limit the types of allowed geometries by passing an array with the classes.&lt;/p&gt; &#xA;&lt;p&gt;In order to properly continue working with the received geometry you can use the &lt;code&gt;TransformsGeojsonGeometry&lt;/code&gt; trait to use automatic transformation of the geojson to the proper geometry object. Therefore, return the keys in the &lt;code&gt;geometries(): array&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Currently we only support simple field transformation. Arrays &amp;amp; wildcard notation support will follow.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class StorePortRequest extends FormRequest&#xA;{&#xA;    use TransformsGeojsonGeometry;&#xA;&#xA;    public function rules(): array&#xA;    {&#xA;        return [&#xA;            &#39;name&#39; =&amp;gt; [&#39;required&#39;, &#39;string&#39;],&#xA;            &#39;country&#39; =&amp;gt; [&#39;required&#39;, &#39;string&#39;],&#xA;            &#39;location&#39; =&amp;gt; [&#39;required&#39;, new GeometryGeojsonRule([Point::class])],&#xA;        ];&#xA;    }&#xA;&#xA;    public function geometries(): array&#xA;    {&#xA;        return [&#39;location&#39;];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interaction with the database&lt;/h2&gt; &#xA;&lt;h3&gt;Example Setup&lt;/h3&gt; &#xA;&lt;p&gt;For demo purpose we consider the following fictional scenario:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We are a sails person with a lovely boat and a database of several ports all over the world.&lt;br&gt; For each port we store the name, the country and the location.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is the migration we use to create the ports table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Schema::create(&#39;ports&#39;, function (Blueprint $table) {&#xA;    $table-&amp;gt;id();&#xA;    $table-&amp;gt;string(&#39;name&#39;);&#xA;    $table-&amp;gt;string(&#39;country&#39;);&#xA;    $table-&amp;gt;magellanPoint(&#39;location&#39;);&#xA;    $table-&amp;gt;timestamps();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the model implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Port extends Model&#xA;{&#xA;    use HasFactory;&#xA;    use HasPostgisColumns;&#xA;&#xA;    protected $guarded = [];&#xA;&#xA;    protected array $postgisColumns = [&#xA;        &#39;location&#39; =&amp;gt; [&#xA;            &#39;type&#39; =&amp;gt; &#39;geometry&#39;,&#xA;            &#39;srid&#39; =&amp;gt; 4326,&#xA;        ],&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Insert/Update&lt;/h3&gt; &#xA;&lt;p&gt;Magellan geometry objects can be inserted directly as long as they are specified in the &lt;code&gt;$postgisColumns&lt;/code&gt; of the affected model. In our case, we can insert a new Port like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Port::create([&#xA;    &#39;name&#39; =&amp;gt; &#39;Magellan Home Port&#39;,&#xA;    &#39;country&#39; =&amp;gt; &#39;Germany&#39;,&#xA;    &#39;location&#39; =&amp;gt; Point::makeGeodetic(49.87108851299202, 8.625026485851762),&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to update a geometry you can either assign the new location to the model and call &lt;code&gt;save()&lt;/code&gt; or use the &lt;code&gt;update()&lt;/code&gt; method on the query builder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$port-&amp;gt;location = Point::makeGeodetic(55, 11);&#xA;$port-&amp;gt;save();&#xA;&#xA;// -- or --&#xA;&#xA;Port::where(&#39;name&#39;, &#39;Magellan Home Port&#39;)&#xA;    -&amp;gt;update([&#39;location&#39; =&amp;gt; Point::makeGeodetic(55, 11)]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Insert/Update with different SRID&lt;/h3&gt; &#xA;&lt;p&gt;When getting Geometries from external systems you might receive them in another projection than the one in the database. Consider we want to insert or update a geometry with a different SRID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Port::create([&#xA;    &#39;name&#39; =&amp;gt; &#39;Magellan Home Port&#39;,&#xA;    &#39;country&#39; =&amp;gt; &#39;Germany&#39;,&#xA;    &#39;location&#39; =&amp;gt; Point::make(473054.9891044726, 5524365.310057224, srid: 25832),&#xA;]);&#xA;&#xA;// -- or --&#xA;&#xA;$port = Port::find(1);&#xA;$port-&amp;gt;location = Point::make(473054.9891044726, 5524365.310057224, srid: 25832);&#xA;$port-&amp;gt;save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since our port table uses a point with SRID=4326, Magellan will raise an error:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;SRID mismatch: database has SRID 4326, geometry has SRID 25832. Consider enabling &lt;code&gt;magellan.eloquent.transform_to_database_projection&lt;/code&gt; in order to apply automatic transformation&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We included an auto transform option that directly applies &lt;code&gt;ST_Transform(geometry, databaseSRID)&lt;/code&gt; for you.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt; This option will only be applied when inserting/updating directly on an eloquent model.&lt;br&gt; This option will not be applied on geography columns.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Select&lt;/h3&gt; &#xA;&lt;p&gt;When selecting data from a model that uses the &lt;code&gt;HasPostgisColumns&lt;/code&gt; trait, all attributes will directly be parsed to the internal data classes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$port = Port::first();&#xA;dd($port-&amp;gt;location);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Clickbar\Magellan\Data\Geometries\Point {#1732&#xA;  #srid: 4326&#xA;  #dimension: Clickbar\Magellan\Data\Geometries\Dimension {#740&#xA;    +name: &#34;DIMENSION_2D&#34;&#xA;    +value: &#34;2D&#34;&#xA;  }&#xA;  #x: 8.6250264858452&#xA;  #y: 49.87108851299&#xA;  #z: null&#xA;  #m: null&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There might be cases where you also want to use box2d or box3d as column types. Currently, we don&#39;t support boxes within the &lt;code&gt;$postgisColumns&lt;/code&gt;. Please use the &lt;code&gt;BBoxCast&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;Using PostGIS functions in queries&lt;/h3&gt; &#xA;&lt;p&gt;A big part of laravel-magallan is its extensive query building feature. To provide a seamless and easy use of PostGIS functions, we have included a wide scope of the typically ST-prefixed functions that can directly be used with Laravel&#39;s query builder.&lt;/p&gt; &#xA;&lt;p&gt;Whenever you want to use a PostGIS function on a query builder, you have to use one of our builder methods. All of them are prefixed with &lt;code&gt;st&lt;/code&gt;.&lt;br&gt; We currently provide the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;stSelect&lt;/li&gt; &#xA; &lt;li&gt;stWhere&lt;/li&gt; &#xA; &lt;li&gt;stOrWhere&lt;/li&gt; &#xA; &lt;li&gt;stOrderBy&lt;/li&gt; &#xA; &lt;li&gt;stGroupBy&lt;/li&gt; &#xA; &lt;li&gt;stHaving&lt;/li&gt; &#xA; &lt;li&gt;stFrom&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each of those builder methods expect to receive a &lt;em&gt;MagellanExpression&lt;/em&gt;.&lt;br&gt; A &lt;em&gt;MagellanExpression&lt;/em&gt; is a wrapper around a &lt;code&gt;ST&lt;/code&gt;-prefixed function from PostGIS. When sailing with Magellan, you should never have to write &lt;code&gt;ST_xxx&lt;/code&gt; in raw SQL for yourself. Therefore, we have included some paddles.&lt;/p&gt; &#xA;&lt;p&gt;Most of the &lt;code&gt;ST&lt;/code&gt;-prefixed functions can be accessed using the static functions on the &lt;code&gt;ST&lt;/code&gt; class. But enough talk, let&#39;s start sailing (with some examples):&lt;/p&gt; &#xA;&lt;p&gt;Assuming we have our ships current position and want to query all ports with their distance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$currentShipPosition = Point::makeGeodetic(50.107471773560114, 8.679861151457937);&#xA;$portsWithDistance = Port::select()&#xA;    -&amp;gt;stSelect(ST::distanceSphere($currentShipPosition, &#39;location&#39;), &#39;distance_to_ship&#39;)&#xA;    -&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since we cannot sail over the whole world, let&#39;s limit the distance to max. 50.000 meters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$currentShipPosition = Point::makeGeodetic(50.107471773560114, 8.679861151457937);&#xA;$portsWithDistance = Port::select()&#xA;    -&amp;gt;stSelect(ST::distanceSphere($currentShipPosition, &#39;location&#39;), &#39;distance_to_ship&#39;)&#xA;    -&amp;gt;stWhere(ST::distanceSphere($currentShipPosition, &#39;location&#39;), &#39;&amp;lt;=&#39;, 50000)&#xA;    -&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now let us order them based on the distance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$currentShipPosition = Point::makeGeodetic(50.107471773560114, 8.679861151457937);&#xA;$portsWithDistance = Port::select()&#xA;    -&amp;gt;stSelect(ST::distanceSphere($currentShipPosition, &#39;location&#39;), as: &#39;distance_to_ship&#39;)&#xA;    -&amp;gt;stWhere(ST::distanceSphere($currentShipPosition, &#39;location&#39;), &#39;&amp;lt;=&#39;, 50000)&#xA;    -&amp;gt;stOrderBy(ST::distanceSphere($currentShipPosition, &#39;location&#39;))&#xA;    -&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, using the &lt;code&gt;st&lt;/code&gt;-Builder functions is as easy as using the default Laravel ones. But what about more complex queries? What about the convex hull of all ports grouped by the country including the area of the hull? No problem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$hullsWithArea = Port::select(&#39;country&#39;)&#xA;    -&amp;gt;stSelect(ST::convexHull(ST::collect(&#39;location&#39;)), &#39;hull&#39;)&#xA;    -&amp;gt;stSelect(ST::area(ST::convexHull(ST::collect(&#39;location&#39;))))&#xA;    -&amp;gt;groupBy(&#39;country&#39;)&#xA;    -&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Autocast for bbox or geometries&lt;/h3&gt; &#xA;&lt;p&gt;In the previous section we used some PostGIS functions. In the first examples, the return types only consist out of scalar values. But in the more complex example we received a geometry as return value.&lt;/p&gt; &#xA;&lt;p&gt;Since &#34;hull&#34; is not present in our &lt;code&gt;$postgisColumns&lt;/code&gt; array, we might intentionally add a cast to the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$hullWithArea = Port::select(&#39;country&#39;)&#xA;    -&amp;gt;stSelect(ST::convexHull(ST::collect(&#39;location&#39;)), &#39;hull&#39;)&#xA;    -&amp;gt;stSelect(ST::area(ST::convexHull(ST::collect(&#39;location&#39;))))&#xA;    -&amp;gt;groupBy(&#39;country&#39;)&#xA;    -&amp;gt;withCasts([&#39;hull&#39; =&amp;gt; GeometryWKBCast::class]) /* &amp;lt;======= */&#xA;    -&amp;gt;first();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But that&#39;s &lt;strong&gt;not necessary!&lt;/strong&gt;&lt;br&gt; Magellan will automatically add the cast for all functions that return geometry, box2d or box3d.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/clickbar/laravel-magellan/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information on what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/clickbar/laravel-magellan/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/clickbar/laravel-magellan/main/SECURITY.md&#34;&gt;SECURITY&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/geo-io&#34;&gt;geo-io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mstaack/laravel-postgis&#34;&gt;mstaack/laravel-postgis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmikola/geojson&#34;&gt;jmikola/geojson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jsor/doctrine-postgis&#34;&gt;jsor/doctrine-postgis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ahawlitschek&#34;&gt;Adrian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saibotk&#34;&gt;saibotk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/clickbar/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/clickbar/laravel-magellan/main/LICENSE.md&#34;&gt;License file&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>octobercms/october</title>
    <updated>2023-01-13T01:42:49Z</updated>
    <id>tag:github.com,2023-01-13:/octobercms/october</id>
    <link href="https://github.com/octobercms/october" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Self-hosted CMS platform based on the Laravel PHP Framework.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/octobercms/october/raw/develop/themes/demo/assets/images/october.png?raw=true&#34; alt=&#34;October&#34; width=&#34;25%&#34; height=&#34;25%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://octobercms.com&#34;&gt;October&lt;/a&gt; is a Content Management System (CMS) and web platform whose sole purpose is to make your development workflow simple again. It was born out of frustration with existing systems. We feel building websites has become a convoluted and confusing process that leaves developers unsatisfied. We want to turn you around to the simpler side and get back to basics.&lt;/p&gt; &#xA;&lt;p&gt;October&#39;s mission is to show the world that web development is not rocket science.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/octobercms/october&#34;&gt;&lt;img src=&#34;https://travis-ci.org/octobercms/october.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/octobercms/october/3.x/LICENSE.md&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/october/october/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Please note&lt;/em&gt;: October is open source but it is not free software. A license with a small fee is required for each website you build with October CMS.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installing October&lt;/h2&gt; &#xA;&lt;p&gt;Instructions on how to install October can be found at the &lt;a href=&#34;https://octobercms.com/docs/setup/installation&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Start Installation&lt;/h3&gt; &#xA;&lt;p&gt;If you have composer installed, run this in your terminal to install October CMS from command line. This will place the files in a directory named &lt;strong&gt;myoctober&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer create-project october/october myoctober&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you plan on using a database, run this command inside the application directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan october:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Learning October&lt;/h2&gt; &#xA;&lt;p&gt;The best place to learn October CMS is by &lt;a href=&#34;https://octobercms.com/docs&#34;&gt;reading the documentation&lt;/a&gt; or &lt;a href=&#34;https://octobercms.com/support/articles/tutorials&#34;&gt;following some tutorials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also watch this &lt;a href=&#34;https://www.youtube.com/watch?v=yLZTOeOS7wI&#34;&gt;introductory video&lt;/a&gt;. Make sure to check out our &lt;a href=&#34;https://www.youtube.com/c/OctoberCMSOfficial&#34;&gt;official YouTube channel&lt;/a&gt;. There is also the excellent video series by &lt;a href=&#34;https://watch-learn.com/series/making-websites-with-october-cms&#34;&gt;Watch &amp;amp; Learn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For code examples of building with October CMS, visit the &lt;a href=&#34;https://github.com/rainlab&#34;&gt;RainLab Plugin Suite&lt;/a&gt; or the &lt;a href=&#34;https://github.com/octoberdemos&#34;&gt;October Demos Repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Coding Standards&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the following guides and code standards:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/php-fig/fig-standards/raw/master/accepted/PSR-4-autoloader.md&#34;&gt;PSR 4 Coding Standards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/php-fig/fig-standards/raw/master/accepted/PSR-2-coding-style-guide.md&#34;&gt;PSR 2 Coding Style Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/php-fig/fig-standards/raw/master/accepted/PSR-1-basic-coding-standard.md&#34;&gt;PSR 1 Coding Standards&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://github.com/octobercms/october/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Development Team&lt;/h2&gt; &#xA;&lt;p&gt;October CMS was created by &lt;a href=&#34;https://www.linkedin.com/in/alexey-bobkov-232ba02b/&#34;&gt;Alexey Bobkov&lt;/a&gt; and &lt;a href=&#34;https://www.linkedin.com/in/samuel-georges-0a964131/&#34;&gt;Samuel Georges&lt;/a&gt;, who both continue to develop the platform.&lt;/p&gt; &#xA;&lt;h2&gt;Foundation library&lt;/h2&gt; &#xA;&lt;p&gt;The CMS uses &lt;a href=&#34;https://laravel.com&#34;&gt;Laravel&lt;/a&gt; as a foundation PHP framework.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;For announcements and updates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://octoberdev.test/contact&#34;&gt;Contact Us Page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/octobercms&#34;&gt;Follow us on Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://facebook.com/octobercms&#34;&gt;Like us on Facebook&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To chat or hang out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://octobercms.slack.com&#34;&gt;Join us on Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/gEKgwSZ&#34;&gt;Join us on Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/octoberchat&#34;&gt;Join us on Telegram&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The October CMS platform is licensed software, see &lt;a href=&#34;https://raw.githubusercontent.com/octobercms/october/3.x/LICENSE.md&#34;&gt;End User License Agreement&lt;/a&gt; (EULA) for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rap2hpoutre/fast-excel</title>
    <updated>2023-01-13T01:42:49Z</updated>
    <id>tag:github.com,2023-01-13:/rap2hpoutre/fast-excel</id>
    <link href="https://github.com/rap2hpoutre/fast-excel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü¶â Fast Excel import/export for Laravel&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/36028424/40173202-9a03d68a-5a03-11e8-9968-6b7e3b4f8a1b.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/rap2hpoutre/fast-excel&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/rap2hpoutre/fast-excel/version?format=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/rap2hpoutre/fast-excel&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/rap2hpoutre/fast-excel/license?format=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.styleci.io/repos/128174809?branch=master&#34;&gt;&lt;img src=&#34;https://github.styleci.io/repos/128174809/shield?branch=master&#34; alt=&#34;StyleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rap2hpoutre/fast-excel/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/rap2hpoutre/fast-excel/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/rap2hpoutre/fast-excel&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/rap2hpoutre/fast-excel/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fast Excel import/export for Laravel, thanks to &lt;a href=&#34;https://github.com/box/spout&#34;&gt;Spout&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/rap2hpoutre/fast-excel/master/#benchmarks&#34;&gt;benchmarks&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Install via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require rap2hpoutre/fast-excel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export a Model to &lt;code&gt;.xlsx&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Rap2hpoutre\FastExcel\FastExcel;&#xA;use App\User;&#xA;&#xA;// Load users&#xA;$users = User::all();&#xA;&#xA;// Export all users&#xA;(new FastExcel($users))-&amp;gt;export(&#39;file.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Export&lt;/h2&gt; &#xA;&lt;p&gt;Export a Model or a &lt;strong&gt;Collection&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$list = collect([&#xA;    [ &#39;id&#39; =&amp;gt; 1, &#39;name&#39; =&amp;gt; &#39;Jane&#39; ],&#xA;    [ &#39;id&#39; =&amp;gt; 2, &#39;name&#39; =&amp;gt; &#39;John&#39; ],&#xA;]);&#xA;&#xA;(new FastExcel($list))-&amp;gt;export(&#39;file.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export &lt;code&gt;xlsx&lt;/code&gt;, &lt;code&gt;ods&lt;/code&gt; and &lt;code&gt;csv&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$invoices = App\Invoice::orderBy(&#39;created_at&#39;, &#39;DESC&#39;)-&amp;gt;get();&#xA;(new FastExcel($invoices))-&amp;gt;export(&#39;invoices.csv&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export only some attributes specifying columns names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;(new FastExcel(User::all()))-&amp;gt;export(&#39;users.csv&#39;, function ($user) {&#xA;    return [&#xA;        &#39;Email&#39; =&amp;gt; $user-&amp;gt;email,&#xA;        &#39;First Name&#39; =&amp;gt; $user-&amp;gt;firstname,&#xA;        &#39;Last Name&#39; =&amp;gt; strtoupper($user-&amp;gt;lastname),&#xA;    ];&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download (from a controller method):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return (new FastExcel(User::all()))-&amp;gt;download(&#39;file.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Import&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;import&lt;/code&gt; returns a Collection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$collection = (new FastExcel)-&amp;gt;import(&#39;file.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import a &lt;code&gt;csv&lt;/code&gt; with specific delimiter, enclosure characters and &#34;gbk&#34; encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$collection = (new FastExcel)-&amp;gt;configureCsv(&#39;;&#39;, &#39;#&#39;, &#39;gbk&#39;)-&amp;gt;import(&#39;file.csv&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import and insert to database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = (new FastExcel)-&amp;gt;import(&#39;file.xlsx&#39;, function ($line) {&#xA;    return User::create([&#xA;        &#39;name&#39; =&amp;gt; $line[&#39;Name&#39;],&#xA;        &#39;email&#39; =&amp;gt; $line[&#39;Email&#39;]&#xA;    ]);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Facades&lt;/h2&gt; &#xA;&lt;p&gt;You may use FastExcel with the optional Facade. Add the following line to &lt;code&gt;config/app.php&lt;/code&gt; under the &lt;code&gt;aliases&lt;/code&gt; key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;FastExcel&#39; =&amp;gt; Rap2hpoutre\FastExcel\Facades\FastExcel::class,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the Facade, you will not have access to the constructor. You may set your export data using the &lt;code&gt;data&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$list = collect([&#xA;    [ &#39;id&#39; =&amp;gt; 1, &#39;name&#39; =&amp;gt; &#39;Jane&#39; ],&#xA;    [ &#39;id&#39; =&amp;gt; 2, &#39;name&#39; =&amp;gt; &#39;John&#39; ],&#xA;]);&#xA;&#xA;FastExcel::data($list)-&amp;gt;export(&#39;file.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Global helper&lt;/h2&gt; &#xA;&lt;p&gt;FastExcel provides a convenient global helper to quickly instantiate the FastExcel class anywhere in a Laravel application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$collection = fastexcel()-&amp;gt;import(&#39;file.xlsx&#39;);&#xA;fastexcel($collection)-&amp;gt;export(&#39;file.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;h3&gt;Export multiple sheets&lt;/h3&gt; &#xA;&lt;p&gt;Export multiple sheets by creating a &lt;code&gt;SheetCollection&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sheets = new SheetCollection([&#xA;    User::all(),&#xA;    Project::all()&#xA;]);&#xA;(new FastExcel($sheets))-&amp;gt;export(&#39;file.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use index to specify sheet name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sheets = new SheetCollection([&#xA;    &#39;Users&#39; =&amp;gt; User::all(),&#xA;    &#39;Second sheet&#39; =&amp;gt; Project::all()&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Import multiple sheets&lt;/h3&gt; &#xA;&lt;p&gt;Import multiple sheets by using &lt;code&gt;importSheets&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sheets = (new FastExcel)-&amp;gt;importSheets(&#39;file.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also import a specific sheet by its number:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$users = (new FastExcel)-&amp;gt;sheet(3)-&amp;gt;import(&#39;file.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import multiple sheets with sheets names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sheets = (new FastExcel)-&amp;gt;withSheetsNames()-&amp;gt;importSheets(&#39;file.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Export large collections with chunk&lt;/h3&gt; &#xA;&lt;p&gt;Export rows one by one to avoid &lt;code&gt;memory_limit&lt;/code&gt; issues &lt;a href=&#34;https://www.php.net/manual/en/language.generators.syntax.php&#34;&gt;using &lt;code&gt;yield&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function usersGenerator() {&#xA;    foreach (User::cursor() as $user) {&#xA;        yield $user;&#xA;    }&#xA;}&#xA;&#xA;// Export consumes only a few MB, even with 10M+ rows.&#xA;(new FastExcel(usersGenerator()))-&amp;gt;export(&#39;test.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add header and rows style&lt;/h3&gt; &#xA;&lt;p&gt;Add header and rows style with &lt;code&gt;headerStyle&lt;/code&gt; and &lt;code&gt;rowsStyle&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$header_style = (new StyleBuilder())-&amp;gt;setFontBold()-&amp;gt;build();&#xA;&#xA;$rows_style = (new StyleBuilder())&#xA;    -&amp;gt;setFontSize(15)&#xA;    -&amp;gt;setShouldWrapText()&#xA;    -&amp;gt;setBackgroundColor(&#34;EDEDED&#34;)&#xA;    -&amp;gt;build();&#xA;&#xA;return (new FastExcel($list))&#xA;    -&amp;gt;headerStyle($header_style)&#xA;    -&amp;gt;rowsStyle($rows_style)&#xA;    -&amp;gt;download(&#39;file.xlsx&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;FastExcel is intended at being Laravel-flavoured &lt;a href=&#34;https://github.com/box/spout&#34;&gt;Spout&lt;/a&gt;: a simple, but elegant wrapper around &lt;a href=&#34;https://github.com/box/spout&#34;&gt;Spout&lt;/a&gt; with the goal of simplifying &lt;strong&gt;imports and exports&lt;/strong&gt;. It could be considered as a faster (and memory friendly) alternative to &lt;a href=&#34;https://laravel-excel.com/&#34;&gt;Laravel Excel&lt;/a&gt;, with less features. Use it only for simple tasks.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tested on a MacBook Pro 2015 2,7 GHz Intel Core i5 16 Go 1867 MHz DDR3. Testing a XLSX export for 10000 lines, 20 columns with random data, 10 iterations, 2018-04-05. &lt;strong&gt;Don&#39;t trust benchmarks.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Average memory peak usage&lt;/th&gt; &#xA;   &lt;th&gt;Execution time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Laravel Excel&lt;/td&gt; &#xA;   &lt;td&gt;123.56 M&lt;/td&gt; &#xA;   &lt;td&gt;11.56 s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FastExcel&lt;/td&gt; &#xA;   &lt;td&gt;2.09 M&lt;/td&gt; &#xA;   &lt;td&gt;2.76 s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Still, remember that &lt;a href=&#34;https://laravel-excel.com/&#34;&gt;Laravel Excel&lt;/a&gt; &lt;strong&gt;has many more features.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>