<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-28T01:42:03Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vyuldashev/laravel-queue-rabbitmq</title>
    <updated>2023-01-28T01:42:03Z</updated>
    <id>tag:github.com,2023-01-28:/vyuldashev/laravel-queue-rabbitmq</id>
    <link href="https://github.com/vyuldashev/laravel-queue-rabbitmq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RabbitMQ driver for Laravel Queue. Supports Laravel Horizon.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RabbitMQ Queue driver for Laravel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/vladimir-yuldashev/laravel-queue-rabbitmq&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/vladimir-yuldashev/laravel-queue-rabbitmq/v/stable?format=flat-square&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vyuldashev/laravel-queue-rabbitmq/actions&#34;&gt;&lt;img src=&#34;https://github.com/vyuldashev/laravel-queue-rabbitmq/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/vladimir-yuldashev/laravel-queue-rabbitmq&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/vladimir-yuldashev/laravel-queue-rabbitmq/downloads?format=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://styleci.io/repos/14976752&#34;&gt;&lt;img src=&#34;https://styleci.io/repos/14976752/shield&#34; alt=&#34;StyleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/vladimir-yuldashev/laravel-queue-rabbitmq&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/vladimir-yuldashev/laravel-queue-rabbitmq/license?format=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support Policy&lt;/h2&gt; &#xA;&lt;p&gt;Only the latest version will get new features. Bug fixes will be provided using the following scheme:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Version&lt;/th&gt; &#xA;   &lt;th&gt;Laravel Version&lt;/th&gt; &#xA;   &lt;th&gt;Bug Fixes Until&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;August 8th, 2023&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vyuldashev/laravel-queue-rabbitmq/raw/master/README.md&#34;&gt;Documentation&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install this package via composer using this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require vladimir-yuldashev/laravel-queue-rabbitmq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The package will automatically register itself.&lt;/p&gt; &#xA;&lt;p&gt;Add connection to &lt;code&gt;config/queue.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;connections&#39; =&amp;gt; [&#xA;    // ...&#xA;&#xA;    &#39;rabbitmq&#39; =&amp;gt; [&#xA;    &#xA;       &#39;driver&#39; =&amp;gt; &#39;rabbitmq&#39;,&#xA;       &#39;queue&#39; =&amp;gt; env(&#39;RABBITMQ_QUEUE&#39;, &#39;default&#39;),&#xA;       &#39;connection&#39; =&amp;gt; PhpAmqpLib\Connection\AMQPLazyConnection::class,&#xA;   &#xA;       &#39;hosts&#39; =&amp;gt; [&#xA;           [&#xA;               &#39;host&#39; =&amp;gt; env(&#39;RABBITMQ_HOST&#39;, &#39;127.0.0.1&#39;),&#xA;               &#39;port&#39; =&amp;gt; env(&#39;RABBITMQ_PORT&#39;, 5672),&#xA;               &#39;user&#39; =&amp;gt; env(&#39;RABBITMQ_USER&#39;, &#39;guest&#39;),&#xA;               &#39;password&#39; =&amp;gt; env(&#39;RABBITMQ_PASSWORD&#39;, &#39;guest&#39;),&#xA;               &#39;vhost&#39; =&amp;gt; env(&#39;RABBITMQ_VHOST&#39;, &#39;/&#39;),&#xA;           ],&#xA;       ],&#xA;   &#xA;       &#39;options&#39; =&amp;gt; [&#xA;           &#39;ssl_options&#39; =&amp;gt; [&#xA;               &#39;cafile&#39; =&amp;gt; env(&#39;RABBITMQ_SSL_CAFILE&#39;, null),&#xA;               &#39;local_cert&#39; =&amp;gt; env(&#39;RABBITMQ_SSL_LOCALCERT&#39;, null),&#xA;               &#39;local_key&#39; =&amp;gt; env(&#39;RABBITMQ_SSL_LOCALKEY&#39;, null),&#xA;               &#39;verify_peer&#39; =&amp;gt; env(&#39;RABBITMQ_SSL_VERIFY_PEER&#39;, true),&#xA;               &#39;passphrase&#39; =&amp;gt; env(&#39;RABBITMQ_SSL_PASSPHRASE&#39;, null),&#xA;           ],&#xA;           &#39;queue&#39; =&amp;gt; [&#xA;               &#39;job&#39; =&amp;gt; VladimirYuldashev\LaravelQueueRabbitMQ\Queue\Jobs\RabbitMQJob::class,&#xA;           ],&#xA;       ],&#xA;   &#xA;       /*&#xA;        * Set to &#34;horizon&#34; if you wish to use Laravel Horizon.&#xA;        */&#xA;       &#39;worker&#39; =&amp;gt; env(&#39;RABBITMQ_WORKER&#39;, &#39;default&#39;),&#xA;       &#39;after_commit&#39; =&amp;gt; false,&#xA;    ],&#xA;&#xA;    // ...    &#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional Config&lt;/h3&gt; &#xA;&lt;p&gt;Optionally add queue options to the config of a connection. Every queue created for this connection, gets the properties.&lt;/p&gt; &#xA;&lt;p&gt;When you want to prioritize messages when they were delayed, then this is possible by adding extra options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When max-priority is omitted, the max priority is set with 2 when used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;connections&#39; =&amp;gt; [&#xA;    // ...&#xA;&#xA;    &#39;rabbitmq&#39; =&amp;gt; [&#xA;        // ...&#xA;&#xA;        &#39;options&#39; =&amp;gt; [&#xA;            &#39;queue&#39; =&amp;gt; [&#xA;                // ...&#xA;&#xA;                &#39;prioritize_delayed&#39; =&amp;gt;  false,&#xA;                &#39;queue_max_priority&#39; =&amp;gt; 10,&#xA;            ],&#xA;        ],&#xA;    ],&#xA;&#xA;    // ...    &#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to publish messages against an exchange with routing-keys, then this is possible by adding extra options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the exchange is omitted, RabbitMQ will use the &lt;code&gt;amq.direct&lt;/code&gt; exchange for the routing-key&lt;/li&gt; &#xA; &lt;li&gt;When routing-key is omitted the routing-key by default is the &lt;code&gt;queue&lt;/code&gt; name.&lt;/li&gt; &#xA; &lt;li&gt;When using &lt;code&gt;%s&lt;/code&gt; in the routing-key the queue_name will be substituted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: when using an exchange with routing-key, you probably create your queues with bindings yourself.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;connections&#39; =&amp;gt; [&#xA;    // ...&#xA;&#xA;    &#39;rabbitmq&#39; =&amp;gt; [&#xA;        // ...&#xA;&#xA;        &#39;options&#39; =&amp;gt; [&#xA;            &#39;queue&#39; =&amp;gt; [&#xA;                // ...&#xA;&#xA;                &#39;exchange&#39; =&amp;gt; &#39;application-x&#39;,&#xA;                &#39;exchange_type&#39; =&amp;gt; &#39;topic&#39;,&#xA;                &#39;exchange_routing_key&#39; =&amp;gt; &#39;&#39;,&#xA;            ],&#xA;        ],&#xA;    ],&#xA;&#xA;    // ...    &#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Laravel failed jobs are stored into the database. But maybe you want to instruct some other process to also do something with the message. When you want to instruct RabbitMQ to reroute failed messages to a exchange or a specific queue, then this is possible by adding extra options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the exchange is omitted, RabbitMQ will use the &lt;code&gt;amq.direct&lt;/code&gt; exchange for the routing-key&lt;/li&gt; &#xA; &lt;li&gt;When routing-key is omitted, the routing-key by default the &lt;code&gt;queue&lt;/code&gt; name is substituted with &lt;code&gt;&#39;.failed&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When using &lt;code&gt;%s&lt;/code&gt; in the routing-key the queue_name will be substituted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: When using failed_job exchange with routing-key, you probably need to create your exchange/queue with bindings yourself.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;connections&#39; =&amp;gt; [&#xA;    // ...&#xA;&#xA;    &#39;rabbitmq&#39; =&amp;gt; [&#xA;        // ...&#xA;&#xA;        &#39;options&#39; =&amp;gt; [&#xA;            &#39;queue&#39; =&amp;gt; [&#xA;                // ...&#xA;&#xA;                &#39;reroute_failed&#39; =&amp;gt; true,&#xA;                &#39;failed_exchange&#39; =&amp;gt; &#39;failed-exchange&#39;,&#xA;                &#39;failed_routing_key&#39; =&amp;gt; &#39;application-x.%s&#39;,&#xA;            ],&#xA;        ],&#xA;    ],&#xA;&#xA;    // ...    &#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use your own RabbitMQJob class&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you have to work with messages published by another application.&lt;br&gt; Those messages probably won&#39;t respect Laravel&#39;s job payload schema. The problem with these messages is that, Laravel workers won&#39;t be able to determine the actual job or class to execute.&lt;/p&gt; &#xA;&lt;p&gt;You can extend the build-in &lt;code&gt;RabbitMQJob::class&lt;/code&gt; and within the queue connection config, you can define your own class. When you specify a &lt;code&gt;job&lt;/code&gt; key in the config, with your own class name, every message retrieved from the broker will get wrapped by your own class.&lt;/p&gt; &#xA;&lt;p&gt;An example for the config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;connections&#39; =&amp;gt; [&#xA;    // ...&#xA;&#xA;    &#39;rabbitmq&#39; =&amp;gt; [&#xA;        // ...&#xA;&#xA;        &#39;options&#39; =&amp;gt; [&#xA;            &#39;queue&#39; =&amp;gt; [&#xA;                // ...&#xA;&#xA;                &#39;job&#39; =&amp;gt; \App\Queue\Jobs\RabbitMQJob::class,&#xA;            ],&#xA;        ],&#xA;    ],&#xA;&#xA;    // ...    &#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An example of your own job class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Queue\Jobs;&#xA;&#xA;use VladimirYuldashev\LaravelQueueRabbitMQ\Queue\Jobs\RabbitMQJob as BaseJob;&#xA;&#xA;class RabbitMQJob extends BaseJob&#xA;{&#xA;&#xA;    /**&#xA;     * Fire the job.&#xA;     *&#xA;     * @return void&#xA;     */&#xA;    public function fire()&#xA;    {&#xA;        $payload = $this-&amp;gt;payload();&#xA;&#xA;        $class = WhatheverClassNameToExecute::class;&#xA;        $method = &#39;handle&#39;;&#xA;&#xA;        ($this-&amp;gt;instance = $this-&amp;gt;resolve($class))-&amp;gt;{$method}($this, $payload);&#xA;&#xA;        $this-&amp;gt;delete();&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or maybe you want to add extra properties to the payload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;namespace App\Queue\Jobs;&#xA;&#xA;use VladimirYuldashev\LaravelQueueRabbitMQ\Queue\Jobs\RabbitMQJob as BaseJob;&#xA;&#xA;class RabbitMQJob extends BaseJob&#xA;{&#xA;   /**&#xA;     * Get the decoded body of the job.&#xA;     *&#xA;     * @return array&#xA;     */&#xA;    public function payload()&#xA;    {&#xA;        return [&#xA;            &#39;job&#39;  =&amp;gt; &#39;WhatheverFullyQualifiedClassNameToExecute@handle&#39;,&#xA;            &#39;data&#39; =&amp;gt; json_decode($this-&amp;gt;getRawBody(), true)&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Laravel Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you completed the configuration you can use the Laravel Queue API. If you used other queue drivers you do not need to change anything else. If you do not know how to use the Queue API, please refer to the official Laravel documentation: &lt;a href=&#34;http://laravel.com/docs/queues&#34;&gt;http://laravel.com/docs/queues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Laravel Horizon Usage&lt;/h2&gt; &#xA;&lt;p&gt;Starting with 8.0, this package supports &lt;a href=&#34;http://horizon.laravel.com&#34;&gt;Laravel Horizon&lt;/a&gt; out of the box. Firstly, install Horizon and then set &lt;code&gt;RABBITMQ_WORKER&lt;/code&gt; to &lt;code&gt;horizon&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Lumen Usage&lt;/h2&gt; &#xA;&lt;p&gt;For Lumen usage the service provider should be registered manually as follow in &lt;code&gt;bootstrap/app.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$app-&amp;gt;register(VladimirYuldashev\LaravelQueueRabbitMQ\LaravelQueueRabbitMQServiceProvider::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Consuming Messages&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways of consuming messages.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;queue:work&lt;/code&gt; command which is Laravel&#39;s built-in command. This command utilizes &lt;code&gt;basic_get&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rabbitmq:consume&lt;/code&gt; command which is provided by this package. This command utilizes &lt;code&gt;basic_consume&lt;/code&gt; and is more performant than &lt;code&gt;basic_get&lt;/code&gt; by ~2x.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Setup RabbitMQ using &lt;code&gt;docker-compose&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d rabbitmq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the test suite you can use the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# To run both style and unit tests.&#xA;composer test&#xA;&#xA;# To run only style tests.&#xA;composer test:style&#xA;&#xA;# To run only unit tests.&#xA;composer test:unit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you receive any errors from the style tests, you can automatically fix most, if not all of the issues with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer fix:style&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;You can contribute to this package by discovering bugs and opening issues. Please, add to which version of package you create pull request or issue. (e.g. [5.2] Fatal error on delayed job)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>laravel/valet</title>
    <updated>2023-01-28T01:42:03Z</updated>
    <id>tag:github.com,2023-01-28:/laravel/valet</id>
    <link href="https://github.com/laravel/valet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A more enjoyable local development experience for Mac.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/laravel/valet/master/art/logo.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/laravel/valet/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/laravel/valet/workflows/Tests/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/valet&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/laravel/valet/d/total.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/valet&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/laravel/valet/v/stable.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/valet&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/laravel/valet/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Valet is a Laravel development environment for Mac minimalists. No Vagrant, no &lt;code&gt;/etc/hosts&lt;/code&gt; file. You can even share your sites publicly using local tunnels. &lt;em&gt;Yeah, we like it too.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Laravel Valet configures your Mac to always run Nginx in the background when your machine starts. Then, using &lt;a href=&#34;https://en.wikipedia.org/wiki/Dnsmasq&#34;&gt;DnsMasq&lt;/a&gt;, Valet proxies all requests on the &lt;code&gt;*.test&lt;/code&gt; domain to point to sites installed on your local machine.&lt;/p&gt; &#xA;&lt;p&gt;In other words, a blazing fast Laravel development environment that uses roughly 7mb of RAM. Valet isn&#39;t a complete replacement for Vagrant or Homestead, but provides a great alternative if you want flexible basics, prefer extreme speed, or are working on a machine with a limited amount of RAM.&lt;/p&gt; &#xA;&lt;h2&gt;Official Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for Valet can be found on the &lt;a href=&#34;https://laravel.com/docs/valet&#34;&gt;Laravel website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to Valet! You can read the contribution guide &lt;a href=&#34;https://raw.githubusercontent.com/laravel/valet/master/.github/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;In order to ensure that the Laravel community is welcoming to all, please review and abide by the &lt;a href=&#34;https://laravel.com/docs/contributions#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://github.com/laravel/valet/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Valet is open-sourced software licensed under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aschmelyun/fleet</title>
    <updated>2023-01-28T01:42:03Z</updated>
    <id>tag:github.com,2023-01-28:/aschmelyun/fleet</id>
    <link href="https://github.com/aschmelyun/fleet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run multiple Laravel Sail websites locally with custom domain names&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fleet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/aschmelyun/fleet&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/aschmelyun/fleet.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/aschmelyun/fleet&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/aschmelyun/fleet.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Easily run multiple Laravel Sail applications at the same time locally with custom domain names.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: This is still new and may contain bugs, if you see something weird please &lt;a href=&#34;https://github.com/aschmelyun/fleet/issues/new&#34;&gt;create an issue&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require aschmelyun/fleet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Navigate to the root directory of your Laravel application, and stop any Sail instance if it&#39;s running. Then, use the following command to add Fleet support to your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan fleet:add&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During setup you&#39;ll be prompted to enter in a domain name. Alternatively, you can pass it in through the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan fleet:add my-app.localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the setup finishes, you can start up Sail just like normal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/sail up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And your site will be available at the domain you provided!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you chose a domain that doesn&#39;t end in &lt;code&gt;.localhost&lt;/code&gt;, you will need to add an entry to your hosts file to direct traffic to 127.0.0.1&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Additional Usage&lt;/h2&gt; &#xA;&lt;p&gt;By default, whenever you use &lt;code&gt;fleet:add&lt;/code&gt;, a Docker network and container are both started to handle the traffic from your local domain name(s).&lt;/p&gt; &#xA;&lt;p&gt;You can start this manually by using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan fleet:start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to remove Fleet support from an application and return it back to the default Docker setup, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan fleet:remove&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To stop and remove all Fleet containers and networks that are currently running on your system, you can use the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan fleet:stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why use this?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://laravel.com/docs/sail&#34;&gt;Laravel Sail&lt;/a&gt; uses Docker and Docker Compose to spin up containers that create a local development environment for your application.&lt;/p&gt; &#xA;&lt;p&gt;By default, the containers are bound to the &lt;code&gt;:80&lt;/code&gt; port of your local machine. Spinning up a second application results in a failure due to port conflicts, but you can always adjust it so that the second app is available at something like &lt;code&gt;:8081&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This can have some unintended consequences though, and can get messy juggling communication between two different applications using port numbers.&lt;/p&gt; &#xA;&lt;p&gt;Instead, Fleet provides a small set of commands that alter your &lt;code&gt;docker-compose.yml&lt;/code&gt; file to provide support for &lt;a href=&#34;https://hub.docker.com/_/traefik&#34;&gt;Traefik&lt;/a&gt;, a reverse proxy that runs on a Docker container.&lt;/p&gt; &#xA;&lt;p&gt;When you add a site to Fleet, a network and a few labels are added to the Docker Compose entry for your application, and a main Traefik container is spun up to handle all local web traffic incoming to the &lt;code&gt;:80&lt;/code&gt; port.&lt;/p&gt; &#xA;&lt;p&gt;This configuration allows two or more Laravel Sail applications configured to different domains to resolve to their respective running containers.&lt;/p&gt; &#xA;&lt;p&gt;For a more in-depth look at how this all ties together, check out &lt;a href=&#34;https://www.youtube.com/watch?v=mZbLvGQqEvY&#34;&gt;this video&lt;/a&gt; that I published on using Traefik with Docker Compose.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/aschmelyun/fleet/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information on what&#39;s recently changed.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/aschmelyun/fleet/main/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>