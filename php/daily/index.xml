<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-07T01:40:51Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DirectoryTree/Bartender</title>
    <updated>2024-04-07T01:40:51Z</updated>
    <id>tag:github.com,2024-04-07:/DirectoryTree/Bartender</id>
    <link href="https://github.com/DirectoryTree/Bartender" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An opinionated way to authenticate users using Laravel Socialite.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/DirectoryTree/Bartender/raw/master/art/logo.svg?sanitize=true&#34; width=&#34;250&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; An opinionated way to authenticate users using Laravel Socialite. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/directorytree/bartender/actions&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/directorytree/bartender/run-tests.yml?branch=master&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/directorytree/bartender&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/directorytree/bartender.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/directorytree/bartender&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/directorytree/bartender.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/directorytree/bartender&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/l/directorytree/bartender.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Bartender serves you a controller, routes, and a default implementation for handling authentication with Laravel Socialite providers.&lt;/p&gt; &#xA;&lt;p&gt;Almost everything in Bartender can be customized.&lt;/p&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Bartender/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Bartender/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Bartender/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Bartender/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Bartender/master/#extending--customizing&#34;&gt;Extending &amp;amp; Customizing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP &amp;gt;= 8.0&lt;/li&gt; &#xA; &lt;li&gt;Laravel &amp;gt;= 9.0&lt;/li&gt; &#xA; &lt;li&gt;Laravel Socialite &amp;gt;= 5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require directorytree/bartender&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, publish the migration:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Creates the &lt;code&gt;provider_id&lt;/code&gt; and &lt;code&gt;provider_name&lt;/code&gt; column on the &lt;code&gt;users&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --provider=&#34;DirectoryTree\Bartender\BartenderServiceProvider&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, run the migration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Register the authentication routes using &lt;code&gt;Bartender::routes()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This will register the &lt;code&gt;/auth/{driver}/redirect&lt;/code&gt; and &lt;code&gt;/auth/{driver}/callback&lt;/code&gt; routes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// routes/web.php&#xA;&#xA;use DirectoryTree\Bartender\Facades\Bartender;&#xA;&#xA;Bartender::routes();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set up any &lt;a href=&#34;https://socialiteproviders.com&#34;&gt;Socialite Providers&lt;/a&gt; you need, and update your &lt;code&gt;services.php&lt;/code&gt; configuration file with the &lt;code&gt;redirect&lt;/code&gt; URL for each provider:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!important] Remember to fully complete the installation steps for each Socialite Provider you wish to use.&lt;/p&gt; &#xA; &lt;p&gt;If you receive a &lt;code&gt;Driver [X] not supported&lt;/code&gt; exception, you have not completed the installation steps for the provider.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// config/services.php&#xA;&#xA;return [&#xA;    // ...&#xA;&#xA;    &#39;google&#39; =&amp;gt; [&#xA;        // ...&#xA;        &#39;redirect&#39; =&amp;gt; &#39;/auth/google/callback&#39;,&#xA;    ],&#xA;    &#xA;    &#39;microsoft&#39; =&amp;gt; [&#xA;        // ...&#xA;        &#39;redirect&#39; =&amp;gt; &#39;/auth/microsoft/callback&#39;,&#xA;    ],&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, register the Socialite Provider in your &lt;code&gt;AuthServiceProvider&lt;/code&gt; using &lt;code&gt;Bartender::serve()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// app/Providers/AuthServiceProvider.php&#xA;&#xA;use DirectoryTree\Bartender\Facades\Bartender;&#xA;&#xA;class AuthServiceProvider extends ServiceProvider&#xA;{&#xA;    // ...&#xA;&#xA;    public function boot(): void&#xA;    {&#xA;        Bartender::serve(&#39;google&#39;);&#xA;        Bartender::serve(&#39;microsoft&#39;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your application uses a &lt;code&gt;User&lt;/code&gt; model outside the default &lt;code&gt;App\Models&lt;/code&gt; namespace, you can set it using the &lt;code&gt;Bartender&lt;/code&gt; facade.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If your application uses the default Laravel &lt;code&gt;User&lt;/code&gt; model in the &lt;code&gt;App\Models&lt;/code&gt; namespace, skip this step.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// app/Providers/AuthServiceProvider.php&#xA;&#xA;use App\User;&#xA;use DirectoryTree\Bartender\Facades\Bartender;&#xA;&#xA;class AuthServiceProvider extends ServiceProvider&#xA;{&#xA;    // ...&#xA;&#xA;    public function boot()&#xA;    {&#xA;        Bartender::setUserModel(User::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Direct your user to the &lt;code&gt;/auth/{driver}/redirect&lt;/code&gt; route to authenticate with the given driver:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;&amp;lt;a href=&#34;{{ route(&#39;auth.driver.redirect&#39;, &#39;google&#39;) }}&#34;&amp;gt;&#xA;    Login with Google&#xA;&amp;lt;/a&amp;gt;&#xA;&#xA;&amp;lt;a href=&#34;{{ route(&#39;auth.driver.redirect&#39;, &#39;microsoft&#39;) }}&#34;&amp;gt;&#xA;    Login with Microsoft&#xA;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the user successfully authenticates, they will be redirected to the &lt;code&gt;/auth/{driver}/callback&lt;/code&gt; route, which will automatically create or update their application user account.&lt;/p&gt; &#xA;&lt;h3&gt;Soft Deletes&lt;/h3&gt; &#xA;&lt;p&gt;With the default &lt;code&gt;UserProviderRepository&lt;/code&gt;, users will be restored if they are soft-deleted and the login with their provider.&lt;/p&gt; &#xA;&lt;p&gt;To change this behaviour, &lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Bartender/master/#user-creation--updating&#34;&gt;swap out the repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Email Verification&lt;/h3&gt; &#xA;&lt;p&gt;With the default &lt;code&gt;UserProviderRepository&lt;/code&gt;, users will emails will be automatically verified (via the &lt;code&gt;email_verified_at&lt;/code&gt; column) if it is not already set.&lt;/p&gt; &#xA;&lt;p&gt;To change this behaviour, &lt;a href=&#34;https://raw.githubusercontent.com/DirectoryTree/Bartender/master/#user-creation--updating&#34;&gt;swap out the repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Extending &amp;amp; Customizing&lt;/h2&gt; &#xA;&lt;p&gt;Almost everything can be swapped out in Bartender.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to handle everything yourself for OAuth redirects and callbacks, you may create your own &lt;code&gt;ProviderHandler&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// app/Socialite/UserProviderHandler.php&#xA;&#xA;namespace App\Socialite;&#xA;&#xA;use Illuminate\Http\Request;&#xA;use Laravel\Socialite\Contracts\Provider;&#xA;use DirectoryTree\Bartender\ProviderHandler;&#xA;&#xA;class UserProviderHandler implements ProviderHandler&#xA;{&#xA;    /**&#xA;     * Constructor.&#xA;     */&#xA;    public function __construct(&#xA;        protected Request $request&#xA;    ) {&#xA;    }&#xA;&#xA;    /**&#xA;     * Handle redirecting the user to the OAuth provider.&#xA;     */&#xA;    public function redirect(Provider $provider, string $driver): RedirectResponse&#xA;    {&#xA;        // Perform additional logic here...&#xA;    &#xA;        return $provider-&amp;gt;redirect();&#xA;    }&#xA;&#xA;    /**&#xA;     * Handle an OAuth response from the provider.&#xA;     */&#xA;    public function callback(Provider $provider, string $driver): RedirectResponse&#xA;    {&#xA;        // Authenticate the user your own way...&#xA;    &#xA;        return redirect()-&amp;gt;route(&#39;dashboard&#39;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, provide it into the second argument in the &lt;code&gt;Bartender::serve&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// app/Providers/AuthServiceProvider.php&#xA;&#xA;namespace App\Providers;&#xA;&#xA;use App\Socialite\UserProviderHandler;&#xA;use DirectoryTree\Bartender\Facades\Bartender;&#xA;&#xA;class AuthServiceProvider extends ServiceProvider&#xA;{&#xA;    // ...&#xA;&#xA;    public function boot(): void&#xA;    {&#xA;        Bartender::serve(&#39;google&#39;, UserProviderHandler::class);&#xA;        Bartender::serve(&#39;microsoft&#39;, UserProviderHandler::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;User Creation &amp;amp; Updating&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to customize the creation of the user in the default handler, you may create your own &lt;code&gt;ProviderRepository&lt;/code&gt; implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// app/Socialite/UserProviderRepository.php&#xA;&#xA;namespace App\Socialite;&#xA;&#xA;use App\Models\User;&#xA;use Illuminate\Contracts\Auth\Authenticatable;&#xA;use DirectoryTree\Bartender\ProviderRepository;&#xA;use Laravel\Socialite\Two\User as SocialiteUser;&#xA;&#xA;class UserProviderRepository implements ProviderRepository&#xA;{&#xA;    /**&#xA;     * Determine if the user already exists under a different provider.&#xA;     */&#xA;    public function exists(string $driver, SocialiteUser $user): bool&#xA;    {&#xA;        return User::withTrashed()-&amp;gt;where(&#39;...&#39;)-&amp;gt;exists();&#xA;    }&#xA;&#xA;    /**&#xA;     * Update or create the socialite user.&#xA;     */&#xA;    public function updateOrCreate(string $driver, SocialiteUser $user): Authenticatable&#xA;    {&#xA;        $user = User::withTrashed()-&amp;gt;firstOrNew([&#xA;            // ...&#xA;        ]);&#xA;        &#xA;        return $user;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, bind your implementation in the service container in your &lt;code&gt;AppServiceProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// app/Providers/AppServiceProvider.php&#xA;&#xA;namespace App\Providers;&#xA;&#xA;use App\Socialite\UserProviderRepository;&#xA;use DirectoryTree\Bartender\ProviderRepository;&#xA;&#xA;class AppServiceProvider extends ServiceProvider&#xA;{&#xA;    // ...&#xA;&#xA;    public function register(): void&#xA;    {&#xA;        $this-&amp;gt;app-&amp;gt;bind(ProviderRepository::class, UserProviderRepository::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;User Redirects &amp;amp; Flash Messaging&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to customize the behavior of the redirects of the default redirector and flash messages depending on the outcome of a OAuth callback, you can create your own &lt;code&gt;ProviderRedirector&lt;/code&gt; implementation:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It&#39;s recommended to regenerate the session after authentication to prevent users from exploiting a &lt;a href=&#34;https://laravel.com/docs/11.x/session#regenerating-the-session-id&#34;&gt;session fixation attack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// app/Socialite/UserProviderRedirector.php&#xA;&#xA;namespace App\Socialite;&#xA;&#xA;use Illuminate\Support\Facades\Auth;&#xA;use Illuminate\Support\Facades\Session;&#xA;&#xA;class UserProviderRedirector implements ProviderRedirector&#xA;{&#xA;    /**&#xA;     * Redirect when unable to authenticate the user.&#xA;     */&#xA;    public function unableToAuthenticateUser(Exception $e, string $driver): RedirectResponse&#xA;    {&#xA;        report($e);&#xA;&#xA;        return redirect()-&amp;gt;route(&#39;login&#39;)-&amp;gt;with(&#39;error&#39;, &#39;Unable to authenticate user.&#39;);&#xA;    }&#xA;&#xA;    /**&#xA;     * Redirect when the user already exists.&#xA;     */&#xA;    public function userAlreadyExists(SocialiteUser $user, string $driver): RedirectResponse&#xA;    {&#xA;        return redirect()-&amp;gt;route(&#39;login&#39;)-&amp;gt;with(&#39;error&#39;, &#39;User already exists.&#39;);&#xA;    }&#xA;&#xA;    /**&#xA;     * Redirect when unable to create the user.&#xA;     */&#xA;    public function unableToCreateUser(Exception $e, SocialiteUser $user, string $driver): RedirectResponse&#xA;    {&#xA;        report($e);&#xA;&#xA;        return redirect()-&amp;gt;route(&#39;login&#39;)-&amp;gt;with(&#39;error&#39;, &#39;Unable to create user.&#39;);&#xA;    }&#xA;&#xA;    /**&#xA;     * Handle when the user has been successfully authenticated.&#xA;     */&#xA;    public function userAuthenticated(Authenticatable $user, SocialiteUser $socialite, string $driver): RedirectResponse&#xA;    {&#xA;        Auth::login($user);&#xA;        &#xA;        Session::regenerate();&#xA;    &#xA;        return redirect()-&amp;gt;route(&#39;dashboard&#39;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, bind your implementation in the service container in your &lt;code&gt;AppServiceProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// app/Providers/AppServiceProvider.php&#xA;&#xA;namespace App\Providers;&#xA;&#xA;use App\Socialite\UserProviderRedirector;&#xA;&#xA;class AppServiceProvider extends ServiceProvider&#xA;{&#xA;    // ...&#xA;&#xA;    public function register(): void&#xA;    {&#xA;        $this-&amp;gt;app-&amp;gt;bind(ProviderRedirector::class, UserProviderRedirector::class);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>