<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-16T01:33:02Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RSS-Bridge/rss-bridge</title>
    <updated>2022-08-16T01:33:02Z</updated>
    <id>tag:github.com,2022-08-16:/RSS-Bridge/rss-bridge</id>
    <link href="https://github.com/RSS-Bridge/rss-bridge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The RSS feed for websites missing it&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RSS-Bridge&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RSS-Bridge/rss-bridge/master/static/logo_600px.png&#34; alt=&#34;RSS-Bridge&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;RSS-Bridge is a PHP project capable of generating RSS and Atom feeds for websites that don&#39;t have one.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RSS-Bridge/rss-bridge/master/UNLICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-UNLICENSE-blue.svg?sanitize=true&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rss-bridge/rss-bridge/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/rss-bridge/rss-bridge.svg?logo=github&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/#rssbridge&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/irc.libera.chat-%23rssbridge-blue.svg?sanitize=true&#34; alt=&#34;irc.libera.chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#rssbridge:libera.chat&#34;&gt;&lt;img src=&#34;https://matrix.to/img/matrix-badge.svg?sanitize=true&#34; alt=&#34;Chat on Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RSS-Bridge/rss-bridge/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/RSS-Bridge/rss-bridge/Tests/master?label=GitHub%20Actions&amp;amp;logo=github&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Screenshot of the Twitter bridge configuration:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RSS-Bridge/rss-bridge/master/static/twitter-form.png?raw=true&#34; alt=&#34;Screenshot #1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Screenshot of the Twitter bridge for Rasmus Lerdorf:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RSS-Bridge/rss-bridge/master/static/twitter-rasmus.png?raw=true&#34; alt=&#34;Screenshot #2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rss-bridge.github.io/rss-bridge/index.html&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out RSS-Bridge right now on &lt;a href=&#34;https://rss-bridge.org/bridge01&#34;&gt;https://rss-bridge.org/bridge01&lt;/a&gt; or find another &lt;a href=&#34;https://rss-bridge.github.io/rss-bridge/General/Public_Hosts.html&#34;&gt;public instance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;h3&gt;Install with git:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /var/www&#xA;git clone https://github.com/RSS-Bridge/rss-bridge.git&#xA;&#xA;# Give the http user write permission to the cache folder&#xA;chown www-data:www-data /var/www/rss-bridge/cache&#xA;&#xA;# Optionally copy over the default config file&#xA;cp config.default.ini.php config.ini.php&#xA;&#xA;# Optionally copy over the default whitelist file&#xA;cp whitelist.default.txt whitelist.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example config for nginx:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;# /etc/nginx/sites-enabled/rssbridge&#xA;server {&#xA;    listen 80;&#xA;    # server_name example.com;&#xA;    root /var/www/rss-bridge;&#xA;    index index.php;&#xA;&#xA;    location ~ \.php$ {&#xA;        include snippets/fastcgi-php.conf;&#xA;        fastcgi_pass unix:/run/php/php-fpm.sock;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install with Docker:&lt;/h3&gt; &#xA;&lt;p&gt;Install by using docker image from Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create container&#xA;docker create --name=rss-bridge --publish 3000:80 rssbridge/rss-bridge&#xA;&#xA;# Start container&#xA;docker start rss-bridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Browse &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install by locally building the image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build image from Dockerfile&#xA;docker build -t rss-bridge .&#xA;&#xA;# Create container&#xA;docker create --name rss-bridge --publish 3000:80 rss-bridge&#xA;&#xA;# Start the container&#xA;docker start rss-bridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Browse &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Alternative installation methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://my.scalingo.com/deploy?source=https://github.com/sebsauvage/rss-bridge&#34;&gt;&lt;img src=&#34;https://cdn.scalingo.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy on Scalingo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://heroku.com/deploy&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Heroku&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.cloudron.io/store/com.rssbridgeapp.cloudronapp.html&#34;&gt;&lt;img src=&#34;https://cloudron.io/img/button.svg?sanitize=true&#34; alt=&#34;Deploy to Cloudron&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Heroku quick deploy currently does not work. It might possibly work if you fork this repo and modify the &lt;code&gt;repository&lt;/code&gt; in &lt;code&gt;scalingo.json&lt;/code&gt;. See &lt;a href=&#34;https://github.com/RSS-Bridge/rss-bridge/issues/2688&#34;&gt;https://github.com/RSS-Bridge/rss-bridge/issues/2688&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Learn more in &lt;a href=&#34;https://rss-bridge.github.io/rss-bridge/For_Hosts/Installation.html&#34;&gt;Installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Create a bridge&lt;/h3&gt; &#xA;&lt;p&gt;Create the new bridge in &lt;code&gt;bridges/ExecuteBridge.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;class ExecuteBridge extends BridgeAbstract&#xA;{&#xA;    const NAME = &#39;Execute Program Blog&#39;;&#xA;&#xA;    public function collectData()&#xA;    {&#xA;        $url = &#39;https://www.executeprogram.com/api/pages/blog&#39;;&#xA;        $data = json_decode(getContents($url));&#xA;&#xA;        foreach ($data-&amp;gt;posts as $post) {&#xA;            $this-&amp;gt;items[] = [&#xA;                &#39;uri&#39;       =&amp;gt; sprintf(&#39;https://www.executeprogram.com/blog/%s&#39;, $post-&amp;gt;slug),&#xA;                &#39;title&#39;     =&amp;gt; $post-&amp;gt;title,&#xA;                &#39;content&#39;   =&amp;gt; $post-&amp;gt;body,&#xA;            ];&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more in &lt;a href=&#34;https://rss-bridge.github.io/rss-bridge/Bridge_API/index.html&#34;&gt;bridge api&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How-to&lt;/h2&gt; &#xA;&lt;h3&gt;How to enable all bridges&lt;/h3&gt; &#xA;&lt;p&gt;Write an asterisks in &lt;code&gt;whitelist.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#39;*&#39; &amp;gt; whitelist.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more in &lt;a href=&#34;https://rss-bridge.github.io/rss-bridge/For_Hosts/Whitelisting.html&#34;&gt;enabling briges&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to enable a bridge&lt;/h3&gt; &#xA;&lt;p&gt;Add the bridge name to &lt;code&gt;whitelist.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#39;FirefoxAddonsBridge&#39; &amp;gt;&amp;gt; whitelist.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to enable debug mode&lt;/h3&gt; &#xA;&lt;p&gt;Create a file named &lt;code&gt;DEBUG&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;touch DEBUG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more in &lt;a href=&#34;https://rss-bridge.github.io/rss-bridge/For_Developers/Debug_mode.html&#34;&gt;debug mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to create a new output format&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rss-bridge.github.io/rss-bridge/Format_API/index.html&#34;&gt;Create a new format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Explanation&lt;/h2&gt; &#xA;&lt;p&gt;We are RSS-Bridge community, a group of developers continuing the project initiated by sebsauvage, webmaster of &lt;a href=&#34;https://sebsauvage.net&#34;&gt;sebsauvage.net&lt;/a&gt;, author of &lt;a href=&#34;https://sebsauvage.net/wiki/doku.php?id=php:shaarli&#34;&gt;Shaarli&lt;/a&gt; and &lt;a href=&#34;https://sebsauvage.net/wiki/doku.php?id=php:zerobin&#34;&gt;ZeroBin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/RSS-Bridge/rss-bridge/master/CONTRIBUTORS.md&#34;&gt;CONTRIBUTORS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;RSS-Bridge uses caching to prevent services from banning your server for repeatedly updating feeds. The specific cache duration can be different between bridges. Cached files are deleted automatically after 24 hours.&lt;/p&gt; &#xA;&lt;p&gt;RSS-Bridge allows you to take full control over which bridges are displayed to the user. That way you can host your own RSS-Bridge service with your favorite collection of bridges!&lt;/p&gt; &#xA;&lt;p&gt;Supported output formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Atom&lt;/code&gt; : Atom feed, for use in feed readers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Html&lt;/code&gt; : Simple HTML page&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Json&lt;/code&gt; : JSON, for consumption by other applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Mrss&lt;/code&gt; : MRSS feed, for use in feed readers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plaintext&lt;/code&gt; : Raw text, for consumption by other applications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h3&gt;A selection of bridges&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Bandcamp&lt;/code&gt; : Returns last release from &lt;a href=&#34;https://bandcamp.com/&#34;&gt;bandcamp&lt;/a&gt; for a tag&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Cryptome&lt;/code&gt; : Returns the most recent documents from &lt;a href=&#34;https://cryptome.org/&#34;&gt;Cryptome.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DansTonChat&lt;/code&gt;: Most recent quotes from &lt;a href=&#34;https://danstonchat.com/&#34;&gt;danstonchat.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DuckDuckGo&lt;/code&gt;: Most recent results from &lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Facebook&lt;/code&gt; : Returns the latest posts on a page or profile on &lt;a href=&#34;https://facebook.com/&#34;&gt;Facebook&lt;/a&gt; (There is an &lt;a href=&#34;https://github.com/RSS-Bridge/rss-bridge/issues/2047&#34;&gt;issue&lt;/a&gt; for public instances)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlickrExplore&lt;/code&gt; : &lt;a href=&#34;https://www.flickr.com/explore&#34;&gt;Latest interesting images&lt;/a&gt; from Flickr&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GoogleSearch&lt;/code&gt; : Most recent results from Google Search&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Identi.ca&lt;/code&gt; : Identica user timeline (Should be compatible with other Pump.io instances)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Instagram&lt;/code&gt;: Most recent photos from an Instagram user (It is recommended to &lt;a href=&#34;https://rss-bridge.github.io/rss-bridge/Bridge_Specific/Instagram.html&#34;&gt;configure&lt;/a&gt; this bridge to work)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OpenClassrooms&lt;/code&gt;: Lastest tutorials from &lt;a href=&#34;https://openclassrooms.com/&#34;&gt;openclassrooms.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pinterest&lt;/code&gt;: Most recent photos from user or search&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScmbBridge&lt;/code&gt;: Newest stories from &lt;a href=&#34;https://secouchermoinsbete.fr/&#34;&gt;secouchermoinsbete.fr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ThePirateBay&lt;/code&gt; : Returns the newest indexed torrents from &lt;a href=&#34;https://thepiratebay.se/&#34;&gt;The Pirate Bay&lt;/a&gt; with keywords&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Twitter&lt;/code&gt; : Return keyword/hashtag search or user timeline&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Wikipedia&lt;/code&gt;: highlighted articles from &lt;a href=&#34;https://wikipedia.org/&#34;&gt;Wikipedia&lt;/a&gt; in English, German, French or Esperanto&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;YouTube&lt;/code&gt; : YouTube user channel, playlist or search&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And &lt;a href=&#34;https://raw.githubusercontent.com/RSS-Bridge/rss-bridge/master/bridges/&#34;&gt;many more&lt;/a&gt;, thanks to the community!&lt;/p&gt; &#xA;&lt;h3&gt;Licenses&lt;/h3&gt; &#xA;&lt;p&gt;The source code for RSS-Bridge is &lt;a href=&#34;https://raw.githubusercontent.com/RSS-Bridge/rss-bridge/master/UNLICENSE&#34;&gt;Public Domain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;RSS-Bridge uses third party libraries with their own license:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/erusev/parsedown&#34;&gt;&lt;code&gt;Parsedown&lt;/code&gt;&lt;/a&gt; licensed under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://simplehtmldom.sourceforge.io/docs/1.9/index.html&#34;&gt;&lt;code&gt;PHP Simple HTML DOM Parser&lt;/code&gt;&lt;/a&gt; licensed under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fluffy-critter/php-urljoin&#34;&gt;&lt;code&gt;php-urljoin&lt;/code&gt;&lt;/a&gt; licensed under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/laravel/framework/&#34;&gt;&lt;code&gt;Laravel framework&lt;/code&gt;&lt;/a&gt; licensed under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rant&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Dear so-called &#34;social&#34; websites.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Your catchword is &#34;share&#34;, but you don&#39;t want us to share. You want to keep us within your walled gardens. That&#39;s why you&#39;ve been removing RSS links from webpages, hiding them deep on your website, or removed feeds entirely, replacing it with crippled or demented proprietary API. &lt;strong&gt;FUCK YOU.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re not social when you hamper sharing by removing feeds. You&#39;re happy to have customers creating content for your ecosystem, but you don&#39;t want this content out - a content you do not even own. Google Takeout is just a gimmick. We want our data to flow, we want RSS or Atom feeds.&lt;/p&gt; &#xA;&lt;p&gt;We want to share with friends, using open protocols: RSS, Atom, XMPP, whatever. Because no one wants to have &lt;em&gt;your&lt;/em&gt; service with &lt;em&gt;your&lt;/em&gt; applications using &lt;em&gt;your&lt;/em&gt; API force-feeding them. Friends must be free to choose whatever software and service they want.&lt;/p&gt; &#xA;&lt;p&gt;We are rebuilding bridges you have willfully destroyed.&lt;/p&gt; &#xA;&lt;p&gt;Get your shit together: Put RSS/Atom back in.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ralouphie/getallheaders</title>
    <updated>2022-08-16T01:33:02Z</updated>
    <id>tag:github.com,2022-08-16:/ralouphie/getallheaders</id>
    <link href="https://github.com/ralouphie/getallheaders" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP getallheaders polyfill&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;getallheaders&lt;/h1&gt; &#xA;&lt;p&gt;PHP &lt;code&gt;getallheaders()&lt;/code&gt; polyfill. Compatible with PHP &amp;gt;= 5.3.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/ralouphie/getallheaders&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ralouphie/getallheaders.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/ralouphie/getallheaders?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/ralouphie/getallheaders/badge.png?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/ralouphie/getallheaders&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/ralouphie/getallheaders/v/stable.png&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/ralouphie/getallheaders&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/ralouphie/getallheaders/v/unstable.png&#34; alt=&#34;Latest Unstable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/ralouphie/getallheaders&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/ralouphie/getallheaders/license.png&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a simple polyfill for &lt;a href=&#34;http://www.php.net/manual/en/function.getallheaders.php&#34;&gt;&lt;code&gt;getallheaders()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;For PHP version &lt;strong&gt;&lt;code&gt;&amp;gt;= 5.6&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require ralouphie/getallheaders&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For PHP version &lt;strong&gt;&lt;code&gt;&amp;lt; 5.6&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require ralouphie/getallheaders &#34;^2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>timacdonald/json-api</title>
    <updated>2022-08-16T01:33:02Z</updated>
    <id>tag:github.com,2022-08-16:/timacdonald/json-api</id>
    <link href="https://github.com/timacdonald/json-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A JSON:API Resource for Laravel&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/timacdonald/json-api/main/art/header.png&#34; alt=&#34;JSON:API Resource: a Laravel package by Tim MacDonald&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;JSON:API Resource for Laravel&lt;/h1&gt; &#xA;&lt;p&gt;A lightweight JSON Resource for Laravel that helps you adhere to the JSON:API standard and also implements features such as sparse fieldsets and compound documents.&lt;/p&gt; &#xA;&lt;p&gt;These docs are not designed to introduce you to the JSON:API spec and the associated concepts, instead you should &lt;a href=&#34;https:/jsonapi.org&#34;&gt;head over and read the spec&lt;/a&gt; if you are not familiar with it. The documentation that follows only contains information on &lt;em&gt;how&lt;/em&gt; to implement the specification via the package.&lt;/p&gt; &#xA;&lt;h1&gt;Version support&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PHP&lt;/strong&gt;: 7.4, 8.0, 8.1&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Laravel&lt;/strong&gt;: 8.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install using &lt;a href=&#34;https://getcomposer.org/&#34;&gt;composer&lt;/a&gt; from &lt;a href=&#34;https://packagist.org/packages/timacdonald/json-api&#34;&gt;Packagist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer require timacdonald/json-api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Basic usage&lt;/h1&gt; &#xA;&lt;p&gt;This package is an specialisation of Laravel&#39;s &lt;code&gt;JsonResource&lt;/code&gt; class. All the underlying API&#39;s are still there, thus in your controller you can still interact with &lt;code&gt;JsonApiResource&lt;/code&gt; classes as you would with the base &lt;code&gt;JsonResource&lt;/code&gt; class, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;class UserController&#xA;{&#xA;    public function index()&#xA;    {&#xA;        return UserResource::collection(User::paginate());&#xA;    }&#xA;&#xA;    public function show(User $user)&#xA;    {&#xA;        return UserResource::make($user);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The internal developer facing API however has changed in that you no longer interact with the &lt;code&gt;toArray($request)&lt;/code&gt; method, instead this package exposes some new methods to interact with. More on those shortly.&lt;/p&gt; &#xA;&lt;h2&gt;Resource Identification&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsonapi.org/format/#document-resource-object-identification&#34;&gt;JSON:API docs: Identification&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We have defined a sensible default for you so you can hit the ground running without having to fiddle with the small stuff.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;&#34;id&#34;&lt;/code&gt; and &lt;code&gt;&#34;type&#34;&lt;/code&gt; of a resource is automatically resolved for you under-the-hood if you are using resources solely with Eloquent models.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&#34;id&#34;&lt;/code&gt; is resolved by calling the &lt;code&gt;$model-&amp;gt;getKey()&lt;/code&gt; method and the &lt;code&gt;&#34;type&#34;&lt;/code&gt; is resolved by using a camel case of the model&#39;s table name, e.g. &lt;code&gt;blog_posts&lt;/code&gt; becomes &lt;code&gt;blogPosts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can customise how this works to support other types of objects and behaviours, but that will follow in the &lt;a href=&#34;https://raw.githubusercontent.com/timacdonald/json-api/main/#advanced-usage&#34;&gt;advanced usage&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;Nice. Well that was easy, so let&#39;s move onto...&lt;/p&gt; &#xA;&lt;h2&gt;Resource Attributes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsonapi.org/format/#document-resource-object-attributes&#34;&gt;JSON:API docs: Attributes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To provide a set of attributes for a resource, you can implement the &lt;code&gt;toAttributes(Request $request)&lt;/code&gt; method...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;class UserResource extends JsonApiResource&#xA;{&#xA;    protected function toAttributes(Request $request): array&#xA;    {&#xA;        return [&#xA;            &#39;name&#39; =&amp;gt; $this-&amp;gt;name,&#xA;            &#39;email&#39; =&amp;gt; $this-&amp;gt;email,&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/timacdonald/json-api/main/#advanced-usage&#34;&gt;advanced usage&lt;/a&gt; section covers &lt;a href=&#34;https://raw.githubusercontent.com/timacdonald/json-api/main/#sparse-fieldsets&#34;&gt;sparse fieldsets and handling expensive attribute calculation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/timacdonald/json-api/main/#minimal-attributes&#34;&gt;minimal attribute&lt;/a&gt; payloads, but you can ignore those advanced features for now and continue on with...&lt;/p&gt; &#xA;&lt;h2&gt;Resource Relationships&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsonapi.org/format/#document-resource-object-relationships&#34;&gt;JSON:API docs: Relationships&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just like we saw with attributes above, we can specify relationships that should be available on the resource by using the &lt;code&gt;toRelationships(Request $request)&lt;/code&gt; method, however with relationships you should &lt;em&gt;always&lt;/em&gt; wrap the values in a &lt;code&gt;Closure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;class UserResource extends JsonApiResource&#xA;{&#xA;    protected function toRelationships(Request $request): array&#xA;    {&#xA;        return [&#xA;            &#39;posts&#39; =&amp;gt; fn () =&amp;gt; PostResource::collection($this-&amp;gt;posts),&#xA;            &#39;subscription&#39; =&amp;gt; fn () =&amp;gt; SubscriptionResource::make($this-&amp;gt;subscription),&#xA;            &#39;profileImage&#39; =&amp;gt; fn () =&amp;gt; optional($this-&amp;gt;profileImage, fn (ProfileImage $profileImage) =&amp;gt; ProfileImageResource::make($profileImage)),&#xA;            // if the relationship has been loaded and is null, can we not just return the resource still and have a nice default? That way you never have to handle any of this &#xA;            // optional noise?&#xA;            // also is there a usecase for returning a resource linkage right from here and not a full resource?&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: &#34;links&#34; and &#34;meta&#34; are not yet supported for relationships, but they are WIP. Resource linkage &#34;meta&#34; is not yet implemented. Let me know if you have a use-case you&#39;d like to use it for!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Each &lt;code&gt;Closure&lt;/code&gt; is only resolved when the relationship has been included by the client...&lt;/p&gt; &#xA;&lt;h3&gt;Including relationships&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsonapi.org/format/#fetching-includes&#34;&gt;JSON:API docs: Inclusion of Related Resources&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As previously mentioned, relationships are not included in the response unless the calling client requests them. To do this, the calling client needs to &#34;include&#34; them by utilising the &lt;code&gt;include&lt;/code&gt; query parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Include the posts...&#xA;/api/users/8?include=posts&#xA;&#xA;# Include the subscription...&#xA;/api/users/8?include=subscription&#xA;&#xA;# Include both...&#xA;/api/users/8?include=posts,subscription&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resource Links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsonapi.org/format/#document-resource-object-links&#34;&gt;JSON:API docs: Links&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To provide links for a resource, you can implement the &lt;code&gt;toLinks(Request $request)&lt;/code&gt; method...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use TiMacDonald\JsonApi\Link;&#xA;&#xA;class UserResource extends JsonApiResource&#xA;{&#xA;    protected function toLinks(Request $request): array&#xA;    {&#xA;        return [&#xA;            Link::self(route(&#39;users.show&#39;, $this-&amp;gt;resource)),&#xA;            &#39;related&#39; =&amp;gt; &#39;https://example.com/related&#39;&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resource Meta&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsonapi.org/format/#document-meta&#34;&gt;JSON:API docs: Meta&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To provide meta information for a resource, you can implement the &lt;code&gt;toMeta(Request $request)&lt;/code&gt; method...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;class UserResource extends JsonApiResource&#xA;{&#xA;    protected function toMeta(Request $request): array&#xA;    {&#xA;        return [&#xA;            &#39;resourceDeprecated&#39; =&amp;gt; true,&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Refactoring to the JSON:API standard&lt;/h2&gt; &#xA;&lt;p&gt;If you have an existing API that utilises Laravel&#39;s &lt;code&gt;JsonApiResource&lt;/code&gt; or other values that you would like to migrate over to the JSON:API standard via this package, it might be a big job. For this reason, we&#39;ve enabled you to migrate piece by piece so you can slowly refactor your API.&lt;/p&gt; &#xA;&lt;p&gt;From a relationship &lt;code&gt;Closure&lt;/code&gt; you can return anything. If what you return is not a &lt;code&gt;JsonApiResource&lt;/code&gt; or &lt;code&gt;JsonApiResourceCollection&lt;/code&gt;, then the value will be &#34;inlined&#34; in the relationships object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;class UserResource extends JsonApiResource&#xA;{&#xA;    protected function toRelationships(Request $request): array&#xA;    {&#xA;        return [&#xA;            &#39;nonJsonApiResource&#39; =&amp;gt; fn (): JsonResource =&amp;gt; LicenseResource::make($this-&amp;gt;license),&#xA;        ];&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is what that response might look like. Notice that the resource is &#34;inlined&#34; and is not moved out to the &#34;included&#34; section of the payload.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;data&#34;: {&#xA;        &#34;id&#34;: &#34;1&#34;,&#xA;        &#34;type&#34;: &#34;users&#34;,&#xA;        &#34;attributes&#34;: {},&#xA;        &#34;relationships&#34;: {&#xA;            &#34;nonJsonApiResource&#34;: {&#xA;                &#34;id&#34;: &#34;5&#34;, &#xA;                &#34;key&#34;: &#34;4h29kaKlWja)99ja72kafj&amp;amp;&amp;amp;jalkfh&#34;,&#xA;                &#34;created_at&#34;: &#34;2020-01-04 12:44:12&#34;&#xA;            }&#xA;        },&#xA;        &#34;meta&#34;: {},&#xA;        &#34;links&#34;: {}&#xA;    },&#xA;    &#34;included&#34;: []&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rationale behind inclusion of all top level object keys&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;// TODO&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Advanced usage&lt;/h1&gt; &#xA;&lt;h2&gt;Resource Identification&lt;/h2&gt; &#xA;&lt;h3&gt;Customising the resource &lt;code&gt;&#34;id&#34;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can customise the resolution of the &lt;code&gt;id&lt;/code&gt; by specifying an id resolver in your service provider.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;class AppServiceProvider extends ServiceProvider&#xA;{&#xA;    public function boot()&#xA;    {&#xA;        JsonApiResource::resolveIdUsing(function (mixed $resource, Request $request): string {&#xA;            // your custom resolution logic...&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although it is not recommended, you can also override the &lt;code&gt;toId(Request $request): string&lt;/code&gt; method on a resource by resource basis.&lt;/p&gt; &#xA;&lt;h3&gt;Customising the resource &lt;code&gt;&#34;type&#34;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can customise the resolution of the &lt;code&gt;type&lt;/code&gt; by specifying a type resolver in your service provider.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;class AppServiceProvider extends ServiceProvider&#xA;{&#xA;    public function boot()&#xA;    {&#xA;        JsonApiResource::resolveTypeUsing(function (mixed $resource, Request $request): string {&#xA;            // your custom resolution logic...&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although it is not recommended, you can also override the &lt;code&gt;toType(Request $request): string&lt;/code&gt; method on a resource by resource basis.&lt;/p&gt; &#xA;&lt;h2&gt;Resource Attributes&lt;/h2&gt; &#xA;&lt;h3&gt;Sparse fieldsets&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsonapi.org/format/#fetching-sparse-fieldsets&#34;&gt;JSON:API docs: Sparse fieldsets&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Without any work, your response supports sparse fieldsets. If you are utilising sparse fieldsets and have some attributes that are expensive to create, it is a good idea to wrap them in a &lt;code&gt;Closure&lt;/code&gt;. Under the hood, we only resolve the &lt;code&gt;Closure&lt;/code&gt; if the attribute is to be included in the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;class UserResource extends JsonResource&#xA;{&#xA;    protected function toAttributes(Request $request): array&#xA;    {&#xA;        return [&#xA;            &#39;name&#39; =&amp;gt; $this-&amp;gt;name,&#xA;            &#39;email&#39; =&amp;gt; $this-&amp;gt;email,&#xA;            &#39;profile_image&#39; =&amp;gt; fn () =&amp;gt; base64_encode(&#xA;                // don&#39;t really download a file like this. It&#39;s just an example of a slow operation...&#xA;                file_get_contents(&#39;https://www.gravatar.com/avatar/&#39;.md5($this-&amp;gt;email)),&#xA;            ),&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Closure&lt;/code&gt; is only resolved when the attribute is going to be included in the response, which can improve performance of requests that don&#39;t require the returned value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# The Closure is not resolved...&#xA;/api/users/8?fields[users]=name,email&#xA;&#xA;# The Closure is resolved...&#xA;/api/users/8?fields[users]=name,profile_image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Minimal Resource Attributes&lt;/h3&gt; &#xA;&lt;p&gt;Out of the box the resource provides a maximal attribute payload when sparse fieldsets are not used i.e. all declared attributes in the resource are returned. If you prefer to instead make it that spare fieldsets are required in order to retrieve any attributes, you can specify the use of minimal attributes in your applications service provider.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;class AppServiceProvider extends ServiceProvider&#xA;{&#xA;    public function boot()&#xA;    {&#xA;        JsonApiResource::minimalAttributes();&#xA;&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resource Relationships&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsonapi.org/format/#fetching-includes&#34;&gt;JSON:API docs: Inclusion of Related Resources&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Relationships can be resolved deeply and also multiple relationship paths can be included. Of course you should be careful about n+1 issues, which is why we recommend using this package in conjunction with &lt;a href=&#34;https://github.com/spatie/laravel-query-builder/&#34;&gt;Spatie&#39;s Query Builder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Including deeply nested relationships&#xA;/api/posts/8?include=author.comments&#xA;&#xA;# Including multiple relationship paths&#xA;/api/posts/8?include=comments,author.comments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We do not promise named parameter support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timacdonald&#34;&gt;Tim MacDonald&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jessarcher&#34;&gt;Jess Archer&lt;/a&gt; for co-creating our initial in-house version and the brainstorming&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timacdonald/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And a special (vegi) thanks to &lt;a href=&#34;https://twitter.com/caneco&#34;&gt;Caneco&lt;/a&gt; for the logo ✨&lt;/p&gt;</summary>
  </entry>
</feed>