<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-10T01:32:08Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yiisoft/yii2</title>
    <updated>2022-06-10T01:32:08Z</updated>
    <id>tag:github.com,2022-06-10:/yiisoft/yii2</id>
    <link href="https://github.com/yiisoft/yii2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yii 2: The Fast, Secure and Professional PHP Framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.yiiframework.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://www.yiiframework.com/image/yii_logo_light.svg?sanitize=true&#34; width=&#34;400&#34; alt=&#34;Yii Framework&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Yii 2 is a modern framework designed to be a solid foundation for your PHP application.&lt;/p&gt; &#xA;&lt;p&gt;It is fast, secure and efficient and works right out of the box pre-configured with reasonable defaults. The framework is easy to adjust to meet your needs, because Yii has been designed to be flexible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/yiisoft/yii2&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/yiisoft/yii2.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/yiisoft/yii2&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/yiisoft/yii2.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yiisoft/yii2/actions&#34;&gt;&lt;img src=&#34;https://github.com/yiisoft/yii2/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/yiisoft/yii2/&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/yiisoft/yii2/badges/coverage.png?s=31d80f1036099e9d6a3e4d7738f6b000b3c3d10e&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/yiisoft/yii2/&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/yiisoft/yii2/badges/quality-score.png?s=b1074a1ff6d0b214d54fa5ab7abbb90fc092471d&#34; alt=&#34;Scrutinizer Quality Score&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The minimum required PHP version of Yii is PHP 5.4.&lt;/li&gt; &#xA; &lt;li&gt;It works best with PHP 8.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yiiframework.com/doc-2.0/guide-start-installation.html&#34;&gt;Follow the Definitive Guide&lt;/a&gt; in order to get step by step instructions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.yiiframework.com/doc/guide/2.0&#34;&gt;Definitive Guide&lt;/a&gt; and a &lt;a href=&#34;https://www.yiiframework.com/doc/api/2.0&#34;&gt;Class Reference&lt;/a&gt; cover every detail of the framework.&lt;/li&gt; &#xA; &lt;li&gt;There is a &lt;a href=&#34;https://www.yiiframework.com/doc/download/yii-guide-2.0-en.pdf&#34;&gt;PDF version&lt;/a&gt; of the Definitive Guide and a &lt;a href=&#34;http://stuff.cebe.cc/yii2docs/&#34;&gt;Definitive Guide Mirror&lt;/a&gt; which is updated every 15 minutes.&lt;/li&gt; &#xA; &lt;li&gt;For Yii 1.1 users, there is &lt;a href=&#34;https://www.yiiframework.com/doc/guide/2.0/en/intro-upgrade-from-v1&#34;&gt;Upgrading from Yii 1.1&lt;/a&gt; to get an idea of what has changed in 2.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Participate in &lt;a href=&#34;https://www.yiiframework.com/forum/&#34;&gt;discussions at forums&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/yii/shared_invite/MjIxMjMxMTk5MTU1LTE1MDE3MDAwMzMtM2VkMTMyMjY1Ng&#34;&gt;Community Slack&lt;/a&gt; and &lt;a href=&#34;https://www.yiiframework.com/chat/&#34;&gt;Chat in IRC&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow us on &lt;a href=&#34;https://www.facebook.com/groups/yiitalk/&#34;&gt;Facebook&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/yiiframework&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://github.com/yiisoft/yii2&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://github.com/yiisoft/yii2/wiki/communities&#34;&gt;other communities&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The framework is &lt;a href=&#34;https://raw.githubusercontent.com/yiisoft/yii2/master/LICENSE.md&#34;&gt;Open Source&lt;/a&gt; powered by &lt;a href=&#34;https://github.com/yiisoft/yii2/graphs/contributors&#34;&gt;an excellent community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may join us and:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yiisoft/yii2/master/docs/internals/report-an-issue.md&#34;&gt;Report an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yiisoft/yii2/master/docs/internals/translation-workflow.md&#34;&gt;Translate documentation or messages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yiiframework.com/forum/index.php/forum/42-general-discussions-for-yii-20/&#34;&gt;Give us feedback or start a design discussion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yiisoft/yii2/master/docs/internals/git-workflow.md&#34;&gt;Contribute to the core code or fix bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yiisoft/yii2/master/#sponsoring&#34;&gt;Become a sponsor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reporting Security issues&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to a &lt;a href=&#34;https://www.yiiframework.com/security/&#34;&gt;special page at the website&lt;/a&gt; describing proper workflow for security issue reports.&lt;/p&gt; &#xA;&lt;h3&gt;Directory Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/               internally used build tools&#xA;docs/                documentation&#xA;framework/           core framework code&#xA;tests/               tests of the core framework code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spreading the Word&lt;/h3&gt; &#xA;&lt;p&gt;Acknowledging or citing Yii 2 is as important as direct contributions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;In presentations&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are giving a presentation or talk featuring work that makes use of Yii 2 and would like to acknowledge it, we suggest using &lt;a href=&#34;https://www.yiiframework.com/logo/&#34;&gt;our logo&lt;/a&gt; on your title slide.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;In projects&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are using Yii 2 as part of an OpenSource project, a way to acknowledge it is to &lt;a href=&#34;https://img.shields.io/badge/Powered_by-Yii_Framework-green.svg?style=flat&#34;&gt;use a special badge&lt;/a&gt; in your README:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Powered_by-Yii_Framework-green.svg?style=flat&#34; alt=&#34;Yii2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your code is hosted at GitHub, you can place the following in your README.md file to get the badge:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[![Yii2](https://img.shields.io/badge/Powered_by-Yii_Framework-green.svg?style=flat)](https://www.yiiframework.com/)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sponsoring&lt;/h3&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor or a backer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/yiisoft&#34;&gt;&lt;img src=&#34;https://opencollective.com/yiisoft/sponsors/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/yiisoft&#34;&gt;&lt;img src=&#34;https://opencollective.com/yiisoft/backers/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective backers&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PHPOffice/PHPWord</title>
    <updated>2022-06-10T01:32:08Z</updated>
    <id>tag:github.com,2022-06-10:/PHPOffice/PHPWord</id>
    <link href="https://github.com/PHPOffice/PHPWord" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A pure PHP library for reading and writing word processing documents&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://rawgit.com/PHPOffice/PHPWord/develop/docs/images/phpword.svg?sanitize=true&#34; alt=&#34;PHPWord&#34; title=&#34;PHPWord&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Master: &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpword&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpoffice/phpword/v/stable.png&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/PHPOffice/PHPWord&#34;&gt;&lt;img src=&#34;https://travis-ci.org/PHPOffice/PHPWord.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/PHPOffice/PHPWord/&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/PHPOffice/PHPWord/badges/quality-score.png?b=master&#34; alt=&#34;Code Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/PHPOffice/PHPWord?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/PHPOffice/PHPWord/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpword&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpoffice/phpword/downloads.png&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpword&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpoffice/phpword/license.png&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/PHPOffice/PHPWord&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GITTER-join%20chat-green.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/PHPOffice/PHPWord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Develop: &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpword#dev-develop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/unstable-dev--develop-orange.svg?sanitize=true&#34; alt=&#34;Latest Development Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/PHPOffice/PHPWord/branches&#34;&gt;&lt;img src=&#34;https://travis-ci.org/PHPOffice/PHPWord.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/PHPOffice/PHPWord/?branch=develop&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/PHPOffice/PHPWord/badges/quality-score.png?b=develop&#34; alt=&#34;Code Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/PHPOffice/PHPWord?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/PHPOffice/PHPWord/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PHPWord is a library written in pure PHP that provides a set of classes to write to and read from different document file formats. The current version of PHPWord supports Microsoft &lt;a href=&#34;http://en.wikipedia.org/wiki/Office_Open_XML&#34;&gt;Office Open XML&lt;/a&gt; (OOXML or OpenXML), OASIS &lt;a href=&#34;http://en.wikipedia.org/wiki/OpenDocument&#34;&gt;Open Document Format for Office Applications&lt;/a&gt; (OpenDocument or ODF), &lt;a href=&#34;http://en.wikipedia.org/wiki/Rich_Text_Format&#34;&gt;Rich Text Format&lt;/a&gt; (RTF), HTML, and PDF.&lt;/p&gt; &#xA;&lt;p&gt;PHPWord is an open source project licensed under the terms of &lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/COPYING.LESSER&#34;&gt;LGPL version 3&lt;/a&gt;. PHPWord is aimed to be a high quality software product by incorporating &lt;a href=&#34;https://travis-ci.org/PHPOffice/PHPWord&#34;&gt;continuous integration&lt;/a&gt; and &lt;a href=&#34;http://phpoffice.github.io/PHPWord/coverage/develop/&#34;&gt;unit testing&lt;/a&gt;. You can learn more about PHPWord by reading the &lt;a href=&#34;http://phpword.readthedocs.org/&#34;&gt;Developers&#39; Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, please ask on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/phpword&#34;&gt;StackOverFlow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read more about PHPWord:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://phpword.readthedocs.org/&#34;&gt;Developers&#39; Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;With PHPWord, you can create OOXML, ODF, or RTF documents dynamically using your PHP 5.3.3+ scripts. Below are some of the things that you can do with PHPWord library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set document properties, e.g. title, subject, and creator.&lt;/li&gt; &#xA; &lt;li&gt;Create document sections with different settings, e.g. portrait/landscape, page size, and page numbering&lt;/li&gt; &#xA; &lt;li&gt;Create header and footer for each sections&lt;/li&gt; &#xA; &lt;li&gt;Set default font type, font size, and paragraph style&lt;/li&gt; &#xA; &lt;li&gt;Use UTF-8 and East Asia fonts/characters&lt;/li&gt; &#xA; &lt;li&gt;Define custom font styles (e.g. bold, italic, color) and paragraph styles (e.g. centered, multicolumns, spacing) either as named style or inline in text&lt;/li&gt; &#xA; &lt;li&gt;Insert paragraphs, either as a simple text or complex one (a text run) that contains other elements&lt;/li&gt; &#xA; &lt;li&gt;Insert titles (headers) and table of contents&lt;/li&gt; &#xA; &lt;li&gt;Insert text breaks and page breaks&lt;/li&gt; &#xA; &lt;li&gt;Insert and format images, either local, remote, or as page watermarks&lt;/li&gt; &#xA; &lt;li&gt;Insert binary OLE Objects such as Excel or Visio&lt;/li&gt; &#xA; &lt;li&gt;Insert and format table with customized properties for each rows (e.g. repeat as header row) and cells (e.g. background color, rowspan, colspan)&lt;/li&gt; &#xA; &lt;li&gt;Insert list items as bulleted, numbered, or multilevel&lt;/li&gt; &#xA; &lt;li&gt;Insert hyperlinks&lt;/li&gt; &#xA; &lt;li&gt;Insert footnotes and endnotes&lt;/li&gt; &#xA; &lt;li&gt;Insert drawing shapes (arc, curve, line, polyline, rect, oval)&lt;/li&gt; &#xA; &lt;li&gt;Insert charts (pie, doughnut, bar, line, area, scatter, radar)&lt;/li&gt; &#xA; &lt;li&gt;Insert form fields (textinput, checkbox, and dropdown)&lt;/li&gt; &#xA; &lt;li&gt;Create document from templates&lt;/li&gt; &#xA; &lt;li&gt;Use XSL 1.0 style sheets to transform headers, main document part, and footers of an OOXML template&lt;/li&gt; &#xA; &lt;li&gt;... and many more features on progress&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;PHPWord requires the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 5.3.3+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.php.net/manual/en/xml.installation.php&#34;&gt;XML Parser extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.laminas.dev/laminas-escaper/intro/&#34;&gt;Laminas Escaper component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.zip.php&#34;&gt;Zip extension&lt;/a&gt; (optional, used to write OOXML and ODF)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.image.php&#34;&gt;GD extension&lt;/a&gt; (optional, used to add images)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.xmlwriter.php&#34;&gt;XMLWriter extension&lt;/a&gt; (optional, used to write OOXML and ODF)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.xsl.php&#34;&gt;XSL extension&lt;/a&gt; (optional, used to apply XSL style sheet to template )&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dompdf/dompdf&#34;&gt;dompdf library&lt;/a&gt; (optional, used to write PDF)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;PHPWord is installed via &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;. To &lt;a href=&#34;https://getcomposer.org/doc/04-schema.md#package-links&#34;&gt;add a dependency&lt;/a&gt; to PHPWord in your project, either&lt;/p&gt; &#xA;&lt;p&gt;Run the following to use the latest stable version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    composer require phpoffice/phpword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you want the latest master version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    composer require phpoffice/phpword:dev-master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can of course also manually edit your composer.json file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;require&#34;: {&#xA;       &#34;phpoffice/phpword&#34;: &#34;v0.18.*&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The following is a basic usage example of the PHPWord library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;require_once &#39;bootstrap.php&#39;;&#xA;&#xA;// Creating the new document...&#xA;$phpWord = new \PhpOffice\PhpWord\PhpWord();&#xA;&#xA;/* Note: any element you append to a document must reside inside of a Section. */&#xA;&#xA;// Adding an empty Section to the document...&#xA;$section = $phpWord-&amp;gt;addSection();&#xA;// Adding Text element to the Section having font styled by default...&#xA;$section-&amp;gt;addText(&#xA;    &#39;&#34;Learn from yesterday, live for today, hope for tomorrow. &#39;&#xA;        . &#39;The important thing is not to stop questioning.&#34; &#39;&#xA;        . &#39;(Albert Einstein)&#39;&#xA;);&#xA;&#xA;/*&#xA; * Note: it&#39;s possible to customize font style of the Text element you add in three ways:&#xA; * - inline;&#xA; * - using named font style (new font style object will be implicitly created);&#xA; * - using explicitly created font style object.&#xA; */&#xA;&#xA;// Adding Text element with font customized inline...&#xA;$section-&amp;gt;addText(&#xA;    &#39;&#34;Great achievement is usually born of great sacrifice, &#39;&#xA;        . &#39;and is never the result of selfishness.&#34; &#39;&#xA;        . &#39;(Napoleon Hill)&#39;,&#xA;    array(&#39;name&#39; =&amp;gt; &#39;Tahoma&#39;, &#39;size&#39; =&amp;gt; 10)&#xA;);&#xA;&#xA;// Adding Text element with font customized using named font style...&#xA;$fontStyleName = &#39;oneUserDefinedStyle&#39;;&#xA;$phpWord-&amp;gt;addFontStyle(&#xA;    $fontStyleName,&#xA;    array(&#39;name&#39; =&amp;gt; &#39;Tahoma&#39;, &#39;size&#39; =&amp;gt; 10, &#39;color&#39; =&amp;gt; &#39;1B2232&#39;, &#39;bold&#39; =&amp;gt; true)&#xA;);&#xA;$section-&amp;gt;addText(&#xA;    &#39;&#34;The greatest accomplishment is not in never falling, &#39;&#xA;        . &#39;but in rising again after you fall.&#34; &#39;&#xA;        . &#39;(Vince Lombardi)&#39;,&#xA;    $fontStyleName&#xA;);&#xA;&#xA;// Adding Text element with font customized using explicitly created font style object...&#xA;$fontStyle = new \PhpOffice\PhpWord\Style\Font();&#xA;$fontStyle-&amp;gt;setBold(true);&#xA;$fontStyle-&amp;gt;setName(&#39;Tahoma&#39;);&#xA;$fontStyle-&amp;gt;setSize(13);&#xA;$myTextElement = $section-&amp;gt;addText(&#39;&#34;Believe you can and you\&#39;re halfway there.&#34; (Theodor Roosevelt)&#39;);&#xA;$myTextElement-&amp;gt;setFontStyle($fontStyle);&#xA;&#xA;// Saving the document as OOXML file...&#xA;$objWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, &#39;Word2007&#39;);&#xA;$objWriter-&amp;gt;save(&#39;helloWorld.docx&#39;);&#xA;&#xA;// Saving the document as ODF file...&#xA;$objWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, &#39;ODText&#39;);&#xA;$objWriter-&amp;gt;save(&#39;helloWorld.odt&#39;);&#xA;&#xA;// Saving the document as HTML file...&#xA;$objWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, &#39;HTML&#39;);&#xA;$objWriter-&amp;gt;save(&#39;helloWorld.html&#39;);&#xA;&#xA;/* Note: we skip RTF, because it&#39;s not XML-based and requires a different example. */&#xA;/* Note: we skip PDF, because &#34;HTML-to-PDF&#34; approach is used to create PDF documents. */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples are provided in the &lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/samples/&#34;&gt;samples folder&lt;/a&gt;. For an easy access to those samples launch &lt;code&gt;php -S localhost:8000&lt;/code&gt; in the samples directory then browse to &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt; to view the samples. You can also read the &lt;a href=&#34;http://phpword.readthedocs.org/&#34;&gt;Developers&#39; Documentation&lt;/a&gt; for more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome everyone to contribute to PHPWord. Below are some of the things that you can do to contribute.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PHPWord/develop/CONTRIBUTING.md&#34;&gt;our contributing guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PHPOffice/PHPWord/fork&#34;&gt;Fork us&lt;/a&gt; and &lt;a href=&#34;https://github.com/PHPOffice/PHPWord/pulls&#34;&gt;request a pull&lt;/a&gt; to the &lt;a href=&#34;https://github.com/PHPOffice/PHPWord/tree/develop&#34;&gt;develop&lt;/a&gt; branch.&lt;/li&gt; &#xA; &lt;li&gt;Submit &lt;a href=&#34;https://github.com/PHPOffice/PHPWord/issues&#34;&gt;bug reports or feature requests&lt;/a&gt; to GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/PHPWord&#34;&gt;@PHPWord&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/PHPOffice&#34;&gt;@PHPOffice&lt;/a&gt; on Twitter.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>googleapis/google-api-php-client</title>
    <updated>2022-06-10T01:32:08Z</updated>
    <id>tag:github.com,2022-06-10:/googleapis/google-api-php-client</id>
    <link href="https://github.com/googleapis/google-api-php-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PHP client library for accessing Google APIs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/googleapis/google-api-php-client/workflows/.github/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Google APIs Client Library for PHP&lt;/h1&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  Reference Docs&#xA; &lt;/dt&gt;&#xA; &lt;dd&gt;&#xA;  &lt;a href=&#34;https://googleapis.github.io/google-api-php-client/main/&#34;&gt;https://googleapis.github.io/google-api-php-client/main/&lt;/a&gt;&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  License&#xA; &lt;/dt&gt;&#xA; &lt;dd&gt;&#xA;  Apache 2.0&#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;p&gt;The Google API Client Library enables you to work with Google APIs such as Gmail, Drive or YouTube on your server.&lt;/p&gt; &#xA;&lt;p&gt;These client libraries are officially supported by Google. However, the libraries are considered complete and are in maintenance mode. This means that we will address critical bugs and security issues but will not add any new features.&lt;/p&gt; &#xA;&lt;h2&gt;Google Cloud Platform&lt;/h2&gt; &#xA;&lt;p&gt;For Google Cloud Platform APIs such as &lt;a href=&#34;https://github.com/googleapis/google-cloud-php-datastore&#34;&gt;Datastore&lt;/a&gt;, &lt;a href=&#34;https://github.com/googleapis/google-cloud-php-storage&#34;&gt;Cloud Storage&lt;/a&gt;, &lt;a href=&#34;https://github.com/googleapis/google-cloud-php-pubsub&#34;&gt;Pub/Sub&lt;/a&gt;, and &lt;a href=&#34;https://github.com/googleapis/google-cloud-php-compute&#34;&gt;Compute Engine&lt;/a&gt;, we recommend using the Google Cloud client libraries. For a complete list of supported Google Cloud client libraries, see &lt;a href=&#34;https://github.com/googleapis/google-cloud-php&#34;&gt;googleapis/google-cloud-php&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.php.net/&#34;&gt;PHP 5.6.0 or higher&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/docs/&#34;&gt;docs folder&lt;/a&gt; provides detailed guides for using this library.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;strong&gt;Composer&lt;/strong&gt; or simply &lt;strong&gt;Download the Release&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Composer&lt;/h3&gt; &#xA;&lt;p&gt;The preferred method is via &lt;a href=&#34;https://getcomposer.org/&#34;&gt;composer&lt;/a&gt;. Follow the &lt;a href=&#34;https://getcomposer.org/doc/00-intro.md&#34;&gt;installation instructions&lt;/a&gt; if you do not already have composer installed.&lt;/p&gt; &#xA;&lt;p&gt;Once composer is installed, execute the following command in your project root to install this library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer require google/apiclient:^2.12.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, be sure to include the autoloader:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once &#39;/path/to/your-project/vendor/autoload.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This library relies on &lt;code&gt;google/apiclient-services&lt;/code&gt;. That library provides up-to-date API wrappers for a large number of Google APIs. In order that users may make use of the latest API clients, this library does not pin to a specific version of &lt;code&gt;google/apiclient-services&lt;/code&gt;. &lt;strong&gt;In order to prevent the accidental installation of API wrappers with breaking changes&lt;/strong&gt;, it is highly recommended that you pin to the &lt;a href=&#34;https://github.com/googleapis/google-api-php-client-services/releases&#34;&gt;latest version&lt;/a&gt; yourself prior to using this library in production.&lt;/p&gt; &#xA;&lt;h4&gt;Cleaning up unused services&lt;/h4&gt; &#xA;&lt;p&gt;There are over 200 Google API services. The chances are good that you will not want them all. In order to avoid shipping these dependencies with your code, you can run the &lt;code&gt;Google\Task\Composer::cleanup&lt;/code&gt; task and specify the services you want to keep in &lt;code&gt;composer.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;require&#34;: {&#xA;        &#34;google/apiclient&#34;: &#34;^2.12.1&#34;&#xA;    },&#xA;    &#34;scripts&#34;: {&#xA;        &#34;pre-autoload-dump&#34;: &#34;Google\\Task\\Composer::cleanup&#34;&#xA;    },&#xA;    &#34;extra&#34;: {&#xA;        &#34;google/apiclient-services&#34;: [&#xA;            &#34;Drive&#34;,&#xA;            &#34;YouTube&#34;&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example will remove all services other than &#34;Drive&#34; and &#34;YouTube&#34; when &lt;code&gt;composer update&lt;/code&gt; or a fresh &lt;code&gt;composer install&lt;/code&gt; is run.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: If you add any services back in &lt;code&gt;composer.json&lt;/code&gt;, you will need to remove the &lt;code&gt;vendor/google/apiclient-services&lt;/code&gt; directory explicitly for the change you made to have effect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -r vendor/google/apiclient-services&#xA;composer update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This command performs an exact match on the service name, so to keep &lt;code&gt;YouTubeReporting&lt;/code&gt; and &lt;code&gt;YouTubeAnalytics&lt;/code&gt; as well, you&#39;d need to add each of them explicitly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;extra&#34;: {&#xA;        &#34;google/apiclient-services&#34;: [&#xA;            &#34;Drive&#34;,&#xA;            &#34;YouTube&#34;,&#xA;            &#34;YouTubeAnalytics&#34;,&#xA;            &#34;YouTubeReporting&#34;&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download the Release&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer not to use composer, you can download the package in its entirety. The &lt;a href=&#34;https://github.com/googleapis/google-api-php-client/releases&#34;&gt;Releases&lt;/a&gt; page lists all stable versions. Download any file with the name &lt;code&gt;google-api-php-client-[RELEASE_NAME].zip&lt;/code&gt; for a package including this library and its dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Uncompress the zip file you download, and include the autoloader in your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once &#39;/path/to/google-api-php-client/vendor/autoload.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional installation and setup instructions, see &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/docs/&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/examples&#34;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; directory for examples of the key client features. You can view them in your browser by running the php built-in web server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ php -S localhost:8000 -t examples/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then browsing to the host and port you specified (in the above example, &lt;code&gt;http://localhost:8000&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Basic Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// include your composer dependencies&#xA;require_once &#39;vendor/autoload.php&#39;;&#xA;&#xA;$client = new Google\Client();&#xA;$client-&amp;gt;setApplicationName(&#34;Client_Library_Examples&#34;);&#xA;$client-&amp;gt;setDeveloperKey(&#34;YOUR_APP_KEY&#34;);&#xA;&#xA;$service = new Google\Service\Books($client);&#xA;$query = &#39;Henry David Thoreau&#39;;&#xA;$optParams = [&#xA;  &#39;filter&#39; =&amp;gt; &#39;free-ebooks&#39;,&#xA;];&#xA;$results = $service-&amp;gt;volumes-&amp;gt;listVolumes($query, $optParams);&#xA;&#xA;foreach ($results-&amp;gt;getItems() as $item) {&#xA;  echo $item[&#39;volumeInfo&#39;][&#39;title&#39;], &#34;&amp;lt;br /&amp;gt; \n&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authentication with OAuth&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An example of this can be seen in &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/examples/simple-file-upload.php&#34;&gt;&lt;code&gt;examples/simple-file-upload.php&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the instructions to &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/docs/oauth-web.md#create-authorization-credentials&#34;&gt;Create Web Application Credentials&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the JSON credentials&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the path to these credentials using &lt;code&gt;Google\Client::setAuthConfig&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Google\Client();&#xA;$client-&amp;gt;setAuthConfig(&#39;/path/to/client_credentials.json&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the scopes required for the API you are going to call&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client-&amp;gt;addScope(Google\Service\Drive::DRIVE);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set your application&#39;s redirect URI&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Your redirect URI can be any registered URI, but in this example&#xA;// we redirect back to this same page&#xA;$redirect_uri = &#39;http://&#39; . $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&#39;PHP_SELF&#39;];&#xA;$client-&amp;gt;setRedirectUri($redirect_uri);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the script handling the redirect URI, exchange the authorization code for an access token:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if (isset($_GET[&#39;code&#39;])) {&#xA;    $token = $client-&amp;gt;fetchAccessTokenWithAuthCode($_GET[&#39;code&#39;]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Authentication with Service Accounts&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An example of this can be seen in &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/examples/service-account.php&#34;&gt;&lt;code&gt;examples/service-account.php&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some APIs (such as the &lt;a href=&#34;https://developers.google.com/youtube/v3/&#34;&gt;YouTube Data API&lt;/a&gt;) do not support service accounts. Check with the specific API documentation if API calls return unexpected 401 or 403 errors.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the instructions to &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/docs/oauth-server.md#creating-a-service-account&#34;&gt;Create a Service Account&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the JSON credentials&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the path to these credentials using the &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt; environment variable:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;putenv(&#39;GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tell the Google client to use your service account credentials to authenticate:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Google\Client();&#xA;$client-&amp;gt;useApplicationDefaultCredentials();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the scopes required for the API you are going to call&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client-&amp;gt;addScope(Google\Service\Drive::DRIVE);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have delegated domain-wide access to the service account and you want to impersonate a user account, specify the email address of the user account using the method setSubject:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client-&amp;gt;setSubject($user_to_impersonate);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;How to use a specific JSON key&lt;/h4&gt; &#xA;&lt;p&gt;If you want to a specific JSON key instead of using &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt; environment variable, you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$jsonKey = [&#xA;   &#39;type&#39; =&amp;gt; &#39;service_account&#39;,&#xA;   // ...&#xA;];&#xA;$client = new Google\Client();&#xA;$client-&amp;gt;setAuthConfig($jsonKey);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making Requests&lt;/h3&gt; &#xA;&lt;p&gt;The classes used to call the API in &lt;a href=&#34;https://github.com/googleapis/google-api-php-client-services&#34;&gt;google-api-php-client-services&lt;/a&gt; are autogenerated. They map directly to the JSON requests and responses found in the &lt;a href=&#34;https://developers.google.com/apis-explorer/#p/&#34;&gt;APIs Explorer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A JSON request to the &lt;a href=&#34;https://developers.google.com/apis-explorer/#p/datastore/v1beta3/datastore.projects.runQuery&#34;&gt;Datastore API&lt;/a&gt; would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;POST https://datastore.googleapis.com/v1beta3/projects/YOUR_PROJECT_ID:runQuery?key=YOUR_API_KEY&#xA;&#xA;{&#xA;    &#34;query&#34;: {&#xA;        &#34;kind&#34;: [{&#xA;            &#34;name&#34;: &#34;Book&#34;&#xA;        }],&#xA;        &#34;order&#34;: [{&#xA;            &#34;property&#34;: {&#xA;                &#34;name&#34;: &#34;title&#34;&#xA;            },&#xA;            &#34;direction&#34;: &#34;descending&#34;&#xA;        }],&#xA;        &#34;limit&#34;: 10&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using this library, the same call would look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// create the datastore service class&#xA;$datastore = new Google\Service\Datastore($client);&#xA;&#xA;// build the query - this maps directly to the JSON&#xA;$query = new Google\Service\Datastore\Query([&#xA;    &#39;kind&#39; =&amp;gt; [&#xA;        [&#xA;            &#39;name&#39; =&amp;gt; &#39;Book&#39;,&#xA;        ],&#xA;    ],&#xA;    &#39;order&#39; =&amp;gt; [&#xA;        &#39;property&#39; =&amp;gt; [&#xA;            &#39;name&#39; =&amp;gt; &#39;title&#39;,&#xA;        ],&#xA;        &#39;direction&#39; =&amp;gt; &#39;descending&#39;,&#xA;    ],&#xA;    &#39;limit&#39; =&amp;gt; 10,&#xA;]);&#xA;&#xA;// build the request and response&#xA;$request = new Google\Service\Datastore\RunQueryRequest([&#39;query&#39; =&amp;gt; $query]);&#xA;$response = $datastore-&amp;gt;projects-&amp;gt;runQuery(&#39;YOUR_DATASET_ID&#39;, $request);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, as each property of the JSON API has a corresponding generated class, the above code could also be written like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// create the datastore service class&#xA;$datastore = new Google\Service\Datastore($client);&#xA;&#xA;// build the query&#xA;$request = new Google\Service\Datastore_RunQueryRequest();&#xA;$query = new Google\Service\Datastore\Query();&#xA;//   - set the order&#xA;$order = new Google\Service\Datastore_PropertyOrder();&#xA;$order-&amp;gt;setDirection(&#39;descending&#39;);&#xA;$property = new Google\Service\Datastore\PropertyReference();&#xA;$property-&amp;gt;setName(&#39;title&#39;);&#xA;$order-&amp;gt;setProperty($property);&#xA;$query-&amp;gt;setOrder([$order]);&#xA;//   - set the kinds&#xA;$kind = new Google\Service\Datastore\KindExpression();&#xA;$kind-&amp;gt;setName(&#39;Book&#39;);&#xA;$query-&amp;gt;setKinds([$kind]);&#xA;//   - set the limit&#xA;$query-&amp;gt;setLimit(10);&#xA;&#xA;// add the query to the request and make the request&#xA;$request-&amp;gt;setQuery($query);&#xA;$response = $datastore-&amp;gt;projects-&amp;gt;runQuery(&#39;YOUR_DATASET_ID&#39;, $request);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The method used is a matter of preference, but &lt;em&gt;it will be very difficult to use this library without first understanding the JSON syntax for the API&lt;/em&gt;, so it is recommended to look at the &lt;a href=&#34;https://developers.google.com/apis-explorer/#p/&#34;&gt;APIs Explorer&lt;/a&gt; before using any of the services here.&lt;/p&gt; &#xA;&lt;h3&gt;Making HTTP Requests Directly&lt;/h3&gt; &#xA;&lt;p&gt;If Google Authentication is desired for external applications, or a Google API is not available yet in this library, HTTP requests can be made directly.&lt;/p&gt; &#xA;&lt;p&gt;If you are installing this client only to authenticate your own HTTP client requests, you should use &lt;a href=&#34;https://github.com/googleapis/google-auth-library-php#call-the-apis&#34;&gt;&lt;code&gt;google/auth&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;authorize&lt;/code&gt; method returns an authorized &lt;a href=&#34;http://docs.guzzlephp.org/&#34;&gt;Guzzle Client&lt;/a&gt;, so any request made using the client will contain the corresponding authorization.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// create the Google client&#xA;$client = new Google\Client();&#xA;&#xA;/**&#xA; * Set your method for authentication. Depending on the API, This could be&#xA; * directly with an access token, API key, or (recommended) using&#xA; * Application Default Credentials.&#xA; */&#xA;$client-&amp;gt;useApplicationDefaultCredentials();&#xA;$client-&amp;gt;addScope(Google\Service\Plus::PLUS_ME);&#xA;&#xA;// returns a Guzzle HTTP Client&#xA;$httpClient = $client-&amp;gt;authorize();&#xA;&#xA;// make an HTTP request&#xA;$response = $httpClient-&amp;gt;get(&#39;https://www.googleapis.com/plus/v1/people/me&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caching&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to use another caching library to improve performance. This can be done by passing a &lt;a href=&#34;https://www.php-fig.org/psr/psr-6/&#34;&gt;PSR-6&lt;/a&gt; compatible library to the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use League\Flysystem\Adapter\Local;&#xA;use League\Flysystem\Filesystem;&#xA;use Cache\Adapter\Filesystem\FilesystemCachePool;&#xA;&#xA;$filesystemAdapter = new Local(__DIR__.&#39;/&#39;);&#xA;$filesystem        = new Filesystem($filesystemAdapter);&#xA;&#xA;$cache = new FilesystemCachePool($filesystem);&#xA;$client-&amp;gt;setCache($cache);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example we use &lt;a href=&#34;http://www.php-cache.com/&#34;&gt;PHP Cache&lt;/a&gt;. Add this to your project with composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require cache/filesystem-adapter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating Tokens&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://developers.google.com/identity/protocols/OAuth2InstalledApp#offline&#34;&gt;Refresh Tokens&lt;/a&gt; or &lt;a href=&#34;https://developers.google.com/identity/protocols/OAuth2ServiceAccount#overview&#34;&gt;Service Account Credentials&lt;/a&gt;, it may be useful to perform some action when a new access token is granted. To do this, pass a callable to the &lt;code&gt;setTokenCallback&lt;/code&gt; method on the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$logger = new Monolog\Logger();&#xA;$tokenCallback = function ($cacheKey, $accessToken) use ($logger) {&#xA;  $logger-&amp;gt;debug(sprintf(&#39;new access token received at cache key %s&#39;, $cacheKey));&#xA;};&#xA;$client-&amp;gt;setTokenCallback($tokenCallback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging Your HTTP Request using Charles&lt;/h3&gt; &#xA;&lt;p&gt;It is often very useful to debug your API calls by viewing the raw HTTP request. This library supports the use of &lt;a href=&#34;https://www.charlesproxy.com/documentation/getting-started/&#34;&gt;Charles Web Proxy&lt;/a&gt;. Download and run Charles, and then capture all HTTP traffic through Charles with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// FOR DEBUGGING ONLY&#xA;$httpClient = new GuzzleHttp\Client([&#xA;    &#39;proxy&#39; =&amp;gt; &#39;localhost:8888&#39;, // by default, Charles runs on localhost port 8888&#xA;    &#39;verify&#39; =&amp;gt; false, // otherwise HTTPS requests will fail.&#xA;]);&#xA;&#xA;$client = new Google\Client();&#xA;$client-&amp;gt;setHttpClient($httpClient);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now all calls made by this library will appear in the Charles UI.&lt;/p&gt; &#xA;&lt;p&gt;One additional step is required in Charles to view SSL requests. Go to &lt;strong&gt;Charles &amp;gt; Proxy &amp;gt; SSL Proxying Settings&lt;/strong&gt; and add the domain you&#39;d like captured. In the case of the Google APIs, this is usually &lt;code&gt;*.googleapis.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Controlling HTTP Client Configuration Directly&lt;/h3&gt; &#xA;&lt;p&gt;Google API Client uses &lt;a href=&#34;http://docs.guzzlephp.org/&#34;&gt;Guzzle&lt;/a&gt; as its default HTTP client. That means that you can control your HTTP requests in the same manner you would for any application using Guzzle.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say, for instance, we wished to apply a referrer to each request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GuzzleHttp\Client;&#xA;&#xA;$httpClient = new Client([&#xA;    &#39;headers&#39; =&amp;gt; [&#xA;        &#39;referer&#39; =&amp;gt; &#39;mysite.com&#39;&#xA;    ]&#xA;]);&#xA;&#xA;$client = new Google\Client();&#xA;$client-&amp;gt;setHttpClient($httpClient);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other Guzzle features such as &lt;a href=&#34;http://docs.guzzlephp.org/en/stable/handlers-and-middleware.html&#34;&gt;Handlers and Middleware&lt;/a&gt; offer even more control.&lt;/p&gt; &#xA;&lt;h3&gt;Service Specific Examples&lt;/h3&gt; &#xA;&lt;p&gt;YouTube: &lt;a href=&#34;https://github.com/youtube/api-samples/tree/master/php&#34;&gt;https://github.com/youtube/api-samples/tree/master/php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How Do I Contribute?&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-php-client/main/.github/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; page for more information. In particular, we love pull requests - but please make sure to sign the contributor license agreement.&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h3&gt;What do I do if something isn&#39;t working?&lt;/h3&gt; &#xA;&lt;p&gt;For support with the library the best place to ask is via the google-api-php-client tag on StackOverflow: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/google-api-php-client&#34;&gt;https://stackoverflow.com/questions/tagged/google-api-php-client&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If there is a specific bug with the library, please &lt;a href=&#34;https://github.com/googleapis/google-api-php-client/issues&#34;&gt;file an issue&lt;/a&gt; in the GitHub issues tracker, including an example of the failing code and any specific errors retrieved. Feature requests can also be filed, as long as they are core library requests, and not-API specific: for those, refer to the documentation for the individual APIs for the best place to file requests. Please try to provide a clear statement of the problem that the feature would address.&lt;/p&gt; &#xA;&lt;h3&gt;I want an example of X!&lt;/h3&gt; &#xA;&lt;p&gt;If X is a feature of the library, file away! If X is an example of using a specific service, the best place to go is to the teams for those specific APIs - our preference is to link to their examples rather than add them to the library, as they can then pin to specific versions of the library. If you have any examples for other APIs, let us know and we will happily add a link to the README above!&lt;/p&gt; &#xA;&lt;h3&gt;Why do some Google\Service classes have weird names?&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;Google\Service&lt;/em&gt; classes are generally automatically generated from the API discovery documents: &lt;a href=&#34;https://developers.google.com/discovery/&#34;&gt;https://developers.google.com/discovery/&lt;/a&gt;. Sometimes new features are added to APIs with unusual names, which can cause some unexpected or non-standard style naming in the PHP classes.&lt;/p&gt; &#xA;&lt;h3&gt;How do I deal with non-JSON response types?&lt;/h3&gt; &#xA;&lt;p&gt;Some services return XML or similar by default, rather than JSON, which is what the library supports. You can request a JSON response by adding an &#39;alt&#39; argument to optional params that is normally the last argument to a method call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$opt_params = array(&#xA;  &#39;alt&#39; =&amp;gt; &#34;json&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I set a field to null?&lt;/h3&gt; &#xA;&lt;p&gt;The library strips out nulls from the objects sent to the Google APIs as it is the default value of all of the uninitialized properties. To work around this, set the field you want to null to &lt;code&gt;Google\Model::NULL_VALUE&lt;/code&gt;. This is a placeholder that will be replaced with a true null when sent over the wire.&lt;/p&gt; &#xA;&lt;h2&gt;Code Quality&lt;/h2&gt; &#xA;&lt;p&gt;Run the PHPUnit tests with PHPUnit. You can configure an API key and token in BaseTest.php to run all calls, but this will require some setup on the Google Developer Console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;phpunit tests/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Coding Style&lt;/h3&gt; &#xA;&lt;p&gt;To check for coding style violations, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vendor/bin/phpcs src --standard=style/ruleset.xml -np&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To automatically fix (fixable) coding style violations, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vendor/bin/phpcbf src --standard=style/ruleset.xml&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>