<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-07T01:37:09Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kishan0725/Hospital-Management-System</title>
    <updated>2023-11-07T01:37:09Z</updated>
    <id>tag:github.com,2023-11-07:/kishan0725/Hospital-Management-System</id>
    <link href="https://github.com/kishan0725/Hospital-Management-System" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hospital Management System using php and mysql&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hospital Management System&lt;/h1&gt; &#xA;&lt;p&gt;Hospital Management System using MySQL, Php and Bootstrap&lt;/p&gt; &#xA;&lt;p&gt;Video Demo : &lt;a href=&#34;https://www.youtube.com/watch?v=W2XGSM5i9P8&#34;&gt;Hospital Management System - Youtube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Live Demo : &lt;a href=&#34;https://kishan0725.000webhostapp.com&#34;&gt;Hospital Management System - 000webhost by Kishan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Need to work on:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ability to accept the appointment by the doctor to acknowledge the patient that their appointment has been approved.&lt;/li&gt; &#xA; &lt;li&gt;User should not be allowed to register if he/she tries to provide the already registered email ID.&lt;/li&gt; &#xA; &lt;li&gt;The password should be encrypted and the password field shouldn&#39;t be displayed in the admin panel.&lt;/li&gt; &#xA; &lt;li&gt;Implementation of pagination for all the list view across the application.&lt;/li&gt; &#xA; &lt;li&gt;Bug fix - Bill payment receipt contains multiple record if the patient has associated with the same doctor multiple times.&lt;/li&gt; &#xA; &lt;li&gt;Addition of more fields in the prescription statement to make it more specific one.&lt;/li&gt; &#xA; &lt;li&gt;Addition of more details on payment - such as date of the payment made, amount paid, etc.&lt;/li&gt; &#xA; &lt;li&gt;Implementation of export button in admin module to export all details to an excel sheet.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install XAMPP web server&lt;/li&gt; &#xA; &lt;li&gt;Any Editor (Preferably VS Code or Sublime Text)&lt;/li&gt; &#xA; &lt;li&gt;Any web browser with latest version&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Languages and Technologies used&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;HTML5/CSS3&lt;/li&gt; &#xA; &lt;li&gt;JavaScript (to create dynamically updating content)&lt;/li&gt; &#xA; &lt;li&gt;Bootstrap (An HTML, CSS, and JS library)&lt;/li&gt; &#xA; &lt;li&gt;XAMPP (A web server by Apache Friends)&lt;/li&gt; &#xA; &lt;li&gt;Php&lt;/li&gt; &#xA; &lt;li&gt;MySQL (An RDBMS that uses SQL)&lt;/li&gt; &#xA; &lt;li&gt;TCPDF (to generate PDFs)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Steps to run the project in your machine&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and install XAMPP in your machine&lt;/li&gt; &#xA; &lt;li&gt;Clone or download the repository&lt;/li&gt; &#xA; &lt;li&gt;Extract all the files and move it to the &#39;htdocs&#39; folder of your XAMPP directory.&lt;/li&gt; &#xA; &lt;li&gt;Start the Apache and Mysql in your XAMPP control panel.&lt;/li&gt; &#xA; &lt;li&gt;Open your web browser and type &#39;localhost/phpmyadmin&#39;&lt;/li&gt; &#xA; &lt;li&gt;In phpmyadmin page, create a new database from the left panel and name it as &#39;myhmsdb&#39;&lt;/li&gt; &#xA; &lt;li&gt;Import the file &#39;myhmsdb.sql&#39; inside your newly created database and click ok.&lt;/li&gt; &#xA; &lt;li&gt;Open a new tab and type &#39;localhost/foldername&#39; in the url of your browser&lt;/li&gt; &#xA; &lt;li&gt;Hurray! That&#39;s it!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;SOFTWARES USED&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;XAMPP was installed on the Ubuntu 19.04 machine and APACHE2 Server and MySQL were initialized. And, files were built inside opt/lampp/htdocs/myhmsp&lt;/li&gt; &#xA; &lt;li&gt;Sublime Text 3.2 was used as a text editor.&lt;/li&gt; &#xA; &lt;li&gt;Google Chrome Version 77.0.3865.90 was used to run the project (localhost/myhmsp was used as the url).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Starting Apache And MySQL in XAMPP:&lt;/h3&gt; &#xA;&lt;p&gt;The XAMPP Control Panel allows you to manually start and stop Apache and MySQL. To start Apache or MySQL manually, click the ‘Start’ button under ‘Actions’.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/59350977-fcc68900-8d3a-11e9-9450-e5c478497caa.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GETTING INTO THE PROJECT:&lt;/h2&gt; &#xA;&lt;p&gt;Hospital Management System in php and mysql. This system has a ‘Home’ page from where the patient, doctor &amp;amp; administrator can login into their accounts by toggling the tabs accordingly. Fig 1.1 shows the ‘Home’ page of our project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66569676-ad2d8800-eb89-11e9-94e5-ea407622a1fe.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#39;About Us&#39; page (Fig 1.2) allows us to get some more information about the quality and the services of the hospital.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66569816-f4b41400-eb89-11e9-9377-d9ce53ded088.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;‘Contact’ page allows users to provide feedback or queries about the services of the hospital. Fig 1.3 shows the ‘Contact’ page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66569890-157c6980-eb8a-11e9-9b2f-c0e8a6ef702e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The ‘Home’ page consists of 3 modules:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Patient Module&lt;/li&gt; &#xA; &lt;li&gt;Doctor Module&lt;/li&gt; &#xA; &lt;li&gt;Admin Module&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Patient Module:&lt;/h3&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; This module allows patients to create their account, book an appointment to see a doctor and see their appointment history. The registration page(in the home page itself) asks patients to enter their First Name, Last Name, Email ID, Contact Number, Password and radio buttons to select their gender.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66570027-5b393200-eb8a-11e9-9e97-088630b5e583.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once the patient has created his/her own account after clicking the ‘Register’ button, then he will be redirected to his/her Dashboard(Fig 1.5).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66570123-8c196700-eb8a-11e9-845f-ea02013f1d5c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Dashboard page allows patients to perform two operations:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Book his/her appointment:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Here, the patients can able to book their appointments to see a doctor. The appointment form(Fig 1.6) requires patients to select the doctor that they want to see, Date and Time that they want to meet with the doctor. The consultancy fee will be shown accordingly to the patient as it was already determined by the doctor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66570202-c256e680-eb8a-11e9-8839-6c7fef68ac4c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After clicking on the ‘Create new entry’ button, the patient will receive an alert that acknowledges the successful appointment of the patient.(See Fig 1.7)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66570280-ec100d80-eb8a-11e9-96c2-08e5441954d0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. View patients’ Appointment History:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Here, the patient can see their appointment history which contains Doctor Name, Consultancy Fee, Appointment Date and Time.(See Fig 1.8).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66570349-0ea22680-eb8b-11e9-94fe-22a86070a274.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once the patient has logged out of his account, if he wants to go into his account again, he can login his account, instead of register his account again. Fig 1.9 shows the login page. Clicking on ‘Login’ button will redirect the patient to his dashboard page which we have seen earlier (Fig 1.5)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66570502-588b0c80-eb8b-11e9-88e3-5294ae896ace.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is how the patient module works. On the whole, this module allows patients to register their account or login their account(if he/she has one), book an appointment and view his/her appointment history.&lt;/p&gt; &#xA;&lt;h3&gt;Doctor Module:&lt;/h3&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; The doctors can login into their account which can be done by toggling the tab from ‘Patient’ to ‘Doctor’. Fig 1.10 shows the login form for a doctor. Registration of a doctor account can be done only by admin. We will discuss more about this in Admin Module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66570609-8bcd9b80-eb8b-11e9-8099-9f285aa7fe0f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once the doctor clicking the ‘Login’ button, they will be redirected to their own dashboard which is shown in Fig 1.11&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66570642-a0119880-eb8b-11e9-8d23-be898e1bfa29.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this page, doctor can able to see their appointments which has been booked by the patients. Fig 1.12 shows the appointment of the doctor ‘Ganesh’ which has been booked by the patient ‘Kenny Sebastian’ (Fig 1.6). This means that the doctor ‘Ganesh’ will have an appointment with the patient ‘Kenny Sebastian’ on 10-10-2019 10AM.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66570704-be779400-eb8b-11e9-92ae-21d8e0e4aba4.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In real-time, the doctors will have thousands of appointments. It will be easier for a doctor to search for appointment in the case of more appointments. To make it easier, I have a ‘Search’ box in the navigation bar (See Fig 1.12) which allows doctors to search for a patient by their contact number. &amp;nbsp; &amp;nbsp; &amp;nbsp; Once everything is done, the doctor can logout of their account. Thus, in general, a doctor can login into his/her account, view their appointments and search for a patient. This is all about Doctor Module.&lt;/p&gt; &#xA;&lt;h3&gt;Admin Module:&lt;/h3&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; This module is the heart of our project where an admin can see the list of all patients. Doctors and appointments and the feedback/queries received from the ‘Contact’ page. Also admin can add doctor too. &amp;nbsp; &amp;nbsp; &amp;nbsp; Login into admin account can be done by toggling into admin tab of the Home page. Fig 1.13 shows the login page for admin. &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;code&gt;username&lt;/code&gt;: admin, &lt;code&gt;password&lt;/code&gt;: admin123&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66570795-e961e800-eb8b-11e9-94e2-79940ff1d45e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;On clicking the ‘Login’ button, the admin will be redirected to his/her dashboard as shown in Fig 1.14.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66570841-03032f80-eb8c-11e9-9cfc-62b6b869c918.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This module allows admin to perform five major operations:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. View the list of all patients registered:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Admin can able to view all the patients registered. This includes the patients’ First Name, Last Name, Email ID, Contact Number and Password. (See Fig 1.15).As like in doctor module, admin can also search for a patient by their contact number in the search box.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66571179-83c22b80-eb8c-11e9-8819-008cdd2b0c2e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. View the list of all doctors registered:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Details of the doctors can also be viewed by the admin. This details include the Name of the doctor, Password, Email and Consultancy fees, shown in Fig 1.16. Searching for a doctor can be done by using the doctor’s Email ID in the search box.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66571329-a5bbae00-eb8c-11e9-89be-ce1a9c73e01b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. View the Appointment lists:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Admin can also able to see the entire details of the appointment that shows the appointment details of the patients with their respective doctors. This includes the First Name, Last Name, Email and Contact Number of patients, doctor’s name, Appointment Date, Time and the Consultancy Fees. (See Fig 1.17).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66571377-c3891300-eb8c-11e9-92d2-6755204564c7.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Add Doctor:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Admin alone can add a new doctor since anyone can register as a doctor if we put this section on the home page. This form asks Doctor’s Name, Email ID, Password and his/her Consultancy Fees.(See Fig 1.18)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66571687-55911b80-eb8d-11e9-9859-54e15d4ad8a0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After adding a new doctor, if we check the doctor’s list, we will see the details of new doctor is added to the list as shown in the Fig 1.19&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66571496-03e89100-eb8d-11e9-954e-7e3704bd0ca3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. View User’s feedback/Queries:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Admin is allowed to view the feedback/Query that has been given by the user in the ‘Contact’ page (Refer Fig 1.3). This includes User’s Name, Email Id, Contact Number and the message(Feedback/ Query) as shown in the Fig 1.20.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/66571573-27134080-eb8d-11e9-8c1f-191a9f491872.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Taking everything into consideration, admin can able to view the details of patients and doctors, appointment details, Feedback by the user and can add a new doctor. Once everything is done, the admin can logout from his account.&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;h3&gt;1. Cancel Appointments&lt;/h3&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Patients and doctors can able to delete their appointments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/75169587-d0c72880-574e-11ea-9a9e-ba098c04e594.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the patient deletes the last record (for doctor Ganesh), then a label &#34;deleted by you&#34; will be displayed in the column &#39;Current Status&#39; and the action will change to cancel state.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/75169873-47642600-574f-11ea-8ca4-420b0dfd20c3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now if we login to the doctor Ganesh&#39;s account and view his appointment details, then it will look like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/75170076-9316cf80-574f-11ea-84ff-6a5976ce8179.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similarly doctors can also delete their appointments and patients can view their updated appointment details.&lt;/p&gt; &#xA;&lt;h3&gt;2. Remove Doctors by Admin&lt;/h3&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Admin can also delete the doctors from the system. This let admin to have more control over the system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36665975/75170650-6d3dfa80-5750-11ea-8f05-455c7d704217.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>saloonphp/xml-wrangler</title>
    <updated>2023-11-07T01:37:09Z</updated>
    <id>tag:github.com,2023-11-07:/saloonphp/xml-wrangler</id>
    <link href="https://github.com/saloonphp/xml-wrangler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌵 XML Wrangler - Easily Read &amp; Write XML in PHP&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h2&gt;🌵 XML Wrangler - Easily Read &amp;amp; Write XML in PHP&lt;/h2&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;XML Wrangler is a simplistic PHP library designed to make reading and writing XML easy. XML Wrangler has been built with developer experience in mind - you can read any type of XML file, even with complex namespaces and even large XML files. It will also throw exceptions if the XML is invalid!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;XML Wrangler is installed via Composer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require saloonphp/xml-wrangler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Requires PHP 8.1+&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Reading XML&lt;/h2&gt; &#xA;&lt;p&gt;Reading XML can be done by passing the XML string or file into the XML reader and using one of the many methods to search and find a specific element or value. You can also convert every element into an easily traversable array if you prefer. If you need to access attributes on an element you can use the &lt;code&gt;Element&lt;/code&gt; DTO which is a simple class to access the content and attributes. XML Wrangler provides methods to iterate through multiple elements while only keeping one element in memory at a time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;breakfast_menu&amp;gt;&#xA;  &amp;lt;food soldOut=&#34;false&#34; bestSeller=&#34;true&#34;&amp;gt;&#xA;    &amp;lt;name&amp;gt;Belgian Waffles&amp;lt;/name&amp;gt;&#xA;    &amp;lt;price&amp;gt;$5.95&amp;lt;/price&amp;gt;&#xA;    &amp;lt;description&amp;gt;Two of our famous Belgian Waffles with plenty of real maple syrup&amp;lt;/description&amp;gt;&#xA;    &amp;lt;calories&amp;gt;650&amp;lt;/calories&amp;gt;&#xA;  &amp;lt;/food&amp;gt;&#xA;  &amp;lt;food soldOut=&#34;false&#34; bestSeller=&#34;false&#34;&amp;gt;&#xA;    &amp;lt;name&amp;gt;Strawberry Belgian Waffles&amp;lt;/name&amp;gt;&#xA;    &amp;lt;price&amp;gt;$7.95&amp;lt;/price&amp;gt;&#xA;    &amp;lt;description&amp;gt;Light Belgian waffles covered with strawberries and whipped cream&amp;lt;/description&amp;gt;&#xA;    &amp;lt;calories&amp;gt;900&amp;lt;/calories&amp;gt;&#xA;  &amp;lt;/food&amp;gt;&#xA;  &amp;lt;food soldOut=&#34;false&#34; bestSeller=&#34;true&#34;&amp;gt;&#xA;    &amp;lt;name&amp;gt;Berry-Berry Belgian Waffles&amp;lt;/name&amp;gt;&#xA;    &amp;lt;price&amp;gt;$8.95&amp;lt;/price&amp;gt;&#xA;    &amp;lt;description&amp;gt;Light Belgian waffles covered with an assortment of fresh berries and whipped cream&amp;lt;/description&amp;gt;&#xA;    &amp;lt;calories&amp;gt;900&amp;lt;/calories&amp;gt;&#xA;  &amp;lt;/food&amp;gt;&#xA;&amp;lt;/breakfast_menu&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Saloon\XmlWrangler\XmlReader;&#xA;&#xA;$reader = XmlReader::fromString($xml);&#xA;&#xA;// Retrieve all values as one simple array&#xA;&#xA;$reader-&amp;gt;values(); // [&#39;breakfast_menu&#39; =&amp;gt; [[&#39;name&#39; =&amp;gt; &#39;...&#39;], [&#39;name&#39; =&amp;gt; &#39;...&#39;], [&#39;name&#39; =&amp;gt; &#39;...&#39;]]&#xA;&#xA;// Use dot-notation to find a specific element&#xA;&#xA;$reader-&amp;gt;value(&#39;food.0&#39;)-&amp;gt;sole(); // [&#39;name&#39; =&amp;gt; &#39;Belgian Waffles&#39;, &#39;price&#39; =&amp;gt; &#39;$5.95&#39;, ...]&#xA;&#xA;// Use the element method to get a simple Element DTO containing attributes and content&#xA;&#xA;$reader-&amp;gt;element(&#39;food.0&#39;)-&amp;gt;sole(); // Element::class&#xA;&#xA;// Use XPath to query the XML&#xA;&#xA;$reader-&amp;gt;xpathValue(&#39;//food[@bestSeller=&#34;true&#34;]/name&#39;)-&amp;gt;get(); // [&#39;Belgian Waffles&#39;, &#39;Berry-Berry Belgian Waffles&#39;]&#xA;&#xA;// Use getAttributes() to get the attributes on the elements&#xA;$reader-&amp;gt;element(&#39;food.0&#39;)-&amp;gt;sole()-&amp;gt;getAttributes(); // [&#39;soldOut&#39; =&amp;gt; false, &#39;bestSeller&#39; =&amp;gt; true]&#xA;&#xA;// Use getContent() to get the contents of the elements &#xA;$reader-&amp;gt;element(&#39;food.0&#39;)-&amp;gt;sole()-&amp;gt;getContent(); // [&#39;name&#39; =&amp;gt; &#39;Belgian Waffles&#39;, &#39;price&#39; =&amp;gt; &#39;$5.95&#39;, ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Writing XML&lt;/h2&gt; &#xA;&lt;p&gt;Writing XML is as simple as defining a PHP array and using keys and values to define elements. When you need to define elements with a few more characteristics like attributes or namespaces you can use the &lt;code&gt;Element&lt;/code&gt; DTO to define more advanced elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Saloon\XmlWrangler\Data\Element;&#xA;use Saloon\XmlWrangler\XmlWriter;&#xA;&#xA;$writer = new XmlWriter;&#xA;&#xA;$xml = $writer-&amp;gt;write(&#39;breakfast_menu&#39;, [&#xA;    &#39;food&#39; =&amp;gt; [&#xA;        [&#xA;            &#39;name&#39; =&amp;gt; &#39;Belgian Waffles&#39;,&#xA;            &#39;price&#39; =&amp;gt; &#39;$5.95&#39;,&#xA;            &#39;description&#39; =&amp;gt; &#39;Two of our famous Belgian Waffles with plenty of real maple syrup&#39;,&#xA;            &#39;calories&#39; =&amp;gt; &#39;650&#39;,&#xA;        ],&#xA;        [&#xA;            &#39;name&#39; =&amp;gt; &#39;Strawberry Belgian Waffles&#39;,&#xA;            &#39;price&#39; =&amp;gt; &#39;$7.95&#39;,&#xA;            &#39;description&#39; =&amp;gt; &#39;Light Belgian waffles covered with strawberries and whipped cream&#39;,&#xA;            &#39;calories&#39; =&amp;gt; &#39;900&#39;,&#xA;        ],&#xA;        &#xA;        // You can also use the Element class if you need to define elements with&#xA;        // namespaces or with attributes.&#xA;        &#xA;        Element::make([&#xA;            &#39;name&#39; =&amp;gt; &#39;Berry-Berry Belgian Waffles&#39;,&#xA;            &#39;price&#39; =&amp;gt; &#39;$8.95&#39;,&#xA;            &#39;description&#39; =&amp;gt; &#39;Light Belgian waffles covered with an assortment of fresh berries and whipped cream&#39;,&#xA;            &#39;calories&#39; =&amp;gt; &#39;900&#39;,&#xA;        ])-&amp;gt;setAttributes([&#39;bestSeller&#39; =&amp;gt; &#39;true&#39;]),&#xA;    ],&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above code will create the following XML&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;breakfast_menu&amp;gt;&#xA;  &amp;lt;food&amp;gt;&#xA;    &amp;lt;name&amp;gt;Belgian Waffles&amp;lt;/name&amp;gt;&#xA;    &amp;lt;price&amp;gt;$5.95&amp;lt;/price&amp;gt;&#xA;    &amp;lt;description&amp;gt;Two of our famous Belgian Waffles with plenty of real maple syrup&amp;lt;/description&amp;gt;&#xA;    &amp;lt;calories&amp;gt;650&amp;lt;/calories&amp;gt;&#xA;  &amp;lt;/food&amp;gt;&#xA;  &amp;lt;food&amp;gt;&#xA;    &amp;lt;name&amp;gt;Strawberry Belgian Waffles&amp;lt;/name&amp;gt;&#xA;    &amp;lt;price&amp;gt;$7.95&amp;lt;/price&amp;gt;&#xA;    &amp;lt;description&amp;gt;Light Belgian waffles covered with strawberries and whipped cream&amp;lt;/description&amp;gt;&#xA;    &amp;lt;calories&amp;gt;900&amp;lt;/calories&amp;gt;&#xA;  &amp;lt;/food&amp;gt;&#xA;  &amp;lt;food bestSeller=&#34;true&#34;&amp;gt;&#xA;    &amp;lt;name&amp;gt;Berry-Berry Belgian Waffles&amp;lt;/name&amp;gt;&#xA;    &amp;lt;price&amp;gt;$8.95&amp;lt;/price&amp;gt;&#xA;    &amp;lt;description&amp;gt;Light Belgian waffles covered with an assortment of fresh berries and whipped cream&amp;lt;/description&amp;gt;&#xA;    &amp;lt;calories&amp;gt;900&amp;lt;/calories&amp;gt;&#xA;  &amp;lt;/food&amp;gt;&#xA;&amp;lt;/breakfast_menu&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Reading XML&lt;/h3&gt; &#xA;&lt;p&gt;This section on the documentation is for using the XML reader.&lt;/p&gt; &#xA;&lt;h4&gt;Various Input Types Supported&lt;/h4&gt; &#xA;&lt;p&gt;The XML reader can accept a variety of input types. You can use an XML string, file, or provide a resource. You can also read the XML directly from a PSR response (like from &lt;a href=&#34;https://github.com/guzzle/guzzle&#34;&gt;Guzzle&lt;/a&gt;) or a &lt;a href=&#34;https://github.com/saloonphp/saloon&#34;&gt;Saloon&lt;/a&gt; response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Saloon\XmlWrangler\XmlReader;&#xA;&#xA;$reader = XmlReader::fromString(&#39;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&amp;lt;breakfast_menu&amp;gt;...&#39;);&#xA;$reader = XmlReader::fromFile(&#39;path/to/file.xml&#39;);&#xA;$reader = XmlReader::fromStream(fopen(&#39;path/to/file.xml&#39;, &#39;rb&#39;);&#xA;$reader = XmlReader::fromPsrResponse($response);&#xA;$reader = XmlReader::fromSaloonResponse($response);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Due to limitations of the underlying PHP XMLReader class, the &lt;code&gt;fromStream&lt;/code&gt;, &lt;code&gt;fromPsrResponse&lt;/code&gt; and &lt;code&gt;fromSaloon&lt;/code&gt; methods will create a temporary file on your machine/server to read from which will be automatically removed when the reader is destructed. You will need to ensure that you have enough storage on your machine to use this method.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Converting Everything Into An Array&lt;/h4&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;elements&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; methods to convert the whole XML document into an array. If you would like an array of values, use the &lt;code&gt;values&lt;/code&gt; method - but if you need to access attributes on the elements, the &lt;code&gt;elements&lt;/code&gt; method will return an array of &lt;code&gt;Element&lt;/code&gt; DTOs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$reader = XmlReader::fromString(...);&#xA;&#xA;$elements = $reader-&amp;gt;elements(); // Array of `Element::class` DTOs&#xA;&#xA;$values = $reader-&amp;gt;values(); // Array of values.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If you are reading a large XML file, you should use the &lt;code&gt;element&lt;/code&gt; or &lt;code&gt;value&lt;/code&gt; methods instead. These methods can iterate through large XML files without running out of memory.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Reading Specific Values&lt;/h4&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;value&lt;/code&gt; method to get a specific element&#39;s value. You can use dot-notation to search for child elements. You can also use whole numbers to find specific positions of multiple elements. This method searches through the whole XML body in a memory-efficient way.&lt;/p&gt; &#xA;&lt;p&gt;This method will return a &lt;code&gt;LazyQuery&lt;/code&gt; class which has different methods on to retrieve the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$reader = XmlReader::fromString(&#39;&#xA;    &amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;    &amp;lt;person&amp;gt;&#xA;        &amp;lt;name&amp;gt;Sammyjo20&amp;lt;/name&amp;gt;&#xA;        &amp;lt;favourite-songs&amp;gt;&#xA;            &amp;lt;song&amp;gt;Luke Combs - When It Rains It Pours&amp;lt;/song&amp;gt;&#xA;            &amp;lt;song&amp;gt;Sam Ryder - SPACE MAN&amp;lt;/song&amp;gt;&#xA;            &amp;lt;song&amp;gt;London Symfony Orchestra - Starfield Suite&amp;lt;/song&amp;gt;&#xA;        &amp;lt;/favourite-songs&amp;gt;&#xA;    &amp;lt;/person&amp;gt;&#xA;&#39;);&#xA;&#xA;$reader-&amp;gt;value(&#39;person.name&#39;)-&amp;gt;sole() // &#39;Sammyjo20&#39;&#xA;&#xA;$reader-&amp;gt;value(&#39;song&#39;)-&amp;gt;get(); // [&#39;Luke Combs - When It Rains It Pours&#39;, &#39;Sam Ryder - SPACE MAN&#39;, ...]&#xA;&#xA;$reader-&amp;gt;value(&#39;song.2&#39;)-&amp;gt;sole(); // &#39;London Symfony Orchestra - Starfield Suite&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Reading Specific Elements&lt;/h4&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;element&lt;/code&gt; method to search for a specific element. This method will provide an &lt;code&gt;Element&lt;/code&gt; class which contains the value and attributes. You can use dot-notation to search for child elements. You can also use whole numbers to find specific positions of multiple elements. This method searches through the whole XML body in a memory efficient way.&lt;/p&gt; &#xA;&lt;p&gt;This method will return a &lt;code&gt;LazyQuery&lt;/code&gt; class which has different methods to retrieve the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$reader = XmlReader::fromString(&#39;&#xA;    &amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;    &amp;lt;person&amp;gt;&#xA;        &amp;lt;name&amp;gt;Sammyjo20&amp;lt;/name&amp;gt;&#xA;        &amp;lt;favourite-songs&amp;gt;&#xA;            &amp;lt;song&amp;gt;Luke Combs - When It Rains It Pours&amp;lt;/song&amp;gt;&#xA;            &amp;lt;song&amp;gt;Sam Ryder - SPACE MAN&amp;lt;/song&amp;gt;&#xA;            &amp;lt;song&amp;gt;London Symfony Orchestra - Starfield Suite&amp;lt;/song&amp;gt;&#xA;        &amp;lt;/favourite-songs&amp;gt;&#xA;    &amp;lt;/person&amp;gt;&#xA;&#39;);&#xA;&#xA;$reader-&amp;gt;element(&#39;name&#39;)-&amp;gt;sole(); // Element(&#39;Sammyjo20&#39;)&#xA;&#xA;$reader-&amp;gt;element(&#39;song&#39;)-&amp;gt;get(); // [Element(&#39;Luke Combs - When It Rains It Pours&#39;), Element(&#39;Sam Ryder - SPACE MAN&#39;), ...]&#xA;&#xA;$reader-&amp;gt;element(&#39;song.2&#39;)-&amp;gt;sole(); // Element(&#39;London Symfony Orchestra - Starfield Suite&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Lazily Iterating&lt;/h4&gt; &#xA;&lt;p&gt;When searching a large file, you can use the &lt;code&gt;lazy&lt;/code&gt; or &lt;code&gt;collectLazy&lt;/code&gt; methods which will return a generator of results only keeping one item in memory at a time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$names = $reader-&amp;gt;element(&#39;name&#39;)-&amp;gt;lazy();&#xA;&#xA;foreach ($names as $name) {&#xA;    //&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Laravel Collections&lt;/h4&gt; &#xA;&lt;p&gt;If you are using Laravel, you can use the &lt;code&gt;collect&lt;/code&gt; and &lt;code&gt;collectLazy&lt;/code&gt; methods which will convert the elements into a Laravel Collection/Lazy Collection. If you are not using Laravel, you can install the &lt;code&gt;illuminate/collections&lt;/code&gt; package via Composer to add this functionality.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$names = $reader-&amp;gt;value(&#39;name&#39;)-&amp;gt;collect();&#xA;&#xA;$names = $reader-&amp;gt;value(&#39;name&#39;)-&amp;gt;collectLazy();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Searching by specific attributes&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes you might want to search for a specific element or value where the element contains a specific attribute. You can do this by providing a second argument to the &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;element&lt;/code&gt; method. This will search the last element for the attributes and will return if they match.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$reader = XmlReader::fromString(&#39;&#xA;    &amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;    &amp;lt;person&amp;gt;&#xA;        &amp;lt;name&amp;gt;Sammyjo20&amp;lt;/name&amp;gt;&#xA;        &amp;lt;favourite-songs&amp;gt;&#xA;            &amp;lt;song&amp;gt;Luke Combs - When It Rains It Pours&amp;lt;/song&amp;gt;&#xA;            &amp;lt;song&amp;gt;Sam Ryder - SPACE MAN&amp;lt;/song&amp;gt;&#xA;            &amp;lt;song recent=&#34;true&#34;&amp;gt;London Symfony Orchestra - Starfield Suite&amp;lt;/song&amp;gt;&#xA;        &amp;lt;/favourite-songs&amp;gt;&#xA;    &amp;lt;/person&amp;gt;&#xA;&#39;);&#xA;&#xA;$reader-&amp;gt;element(&#39;song&#39;, [&#39;recent&#39; =&amp;gt; &#39;true&#39;])-&amp;gt;sole(); // Element(&#39;London Symfony Orchestra - Starfield Suite&#39;)&#xA;&#xA;$reader-&amp;gt;value(&#39;song&#39;, [&#39;recent&#39; =&amp;gt; &#39;true&#39;])-&amp;gt;sole(); // &#39;London Symfony Orchestra - Starfield Suite&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reading with XPath&lt;/h3&gt; &#xA;&lt;p&gt;XPath is a fantastic way to search through XML. With one string, you can search for a specific element, with specific attributes or indexes. If you are interested in learning XPath, you can &lt;a href=&#34;https://devhints.io/xpath&#34;&gt;click here for a useful cheatsheet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Reading Specific Values via XPath&lt;/h4&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;xpathValue&lt;/code&gt; method to find a specific element&#39;s value with an XPath query. This method will return a &lt;code&gt;Query&lt;/code&gt; class which has different methods to retrieve the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;$reader = XmlReader::fromString(...);&#xA;&#xA;$reader-&amp;gt;xpathValue(&#39;//person/favourite-songs/song[3]&#39;)-&amp;gt;sole(); //  &#39;London Symfony Orchestra - Starfield Suite&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Reading Specific Elements via XPath&lt;/h4&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;xpathElement&lt;/code&gt; method to find a specific element with an XPath query. This method will return a &lt;code&gt;Query&lt;/code&gt; class which has different methods to retrieve the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;$reader = XmlReader::fromString(...);&#xA;&#xA;$reader-&amp;gt;xpathElement(&#39;//person/favourite-songs/song[3]&#39;)-&amp;gt;sole(); //  Element(&#39;London Symfony Orchestra - Starfield Suite&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Due to limitations with XPath - the above methods used to query with XPath are not memory safe and may not be suitable for large XML documents.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;XPath and un-prefixed namespaces&lt;/h4&gt; &#xA;&lt;p&gt;You might found yourself with an XML document that contains an un-prefixed &lt;code&gt;xmlns&lt;/code&gt; attribute - like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;container xmlns=&#34;http://example.com/xml-wrangler/person&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When this happens, XML Wrangler will automatically remove these un-prefixed namespaces to improve compatability. If you would like to keep these namespaces, you can use &lt;code&gt;setXpathNamespaceMap&lt;/code&gt; to map each un-prefixed XML namespace.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$reader = XmlReader::fromString(...);&#xA;$reader-&amp;gt;setXpathNamespaceMap([&#xA;    &#39;root&#39; =&amp;gt; &#39;http://example.com/xml-wrangler/person&#39;,&#xA;]);&#xA;&#xA;$reader-&amp;gt;xpathValue(&#39;//root:person/root:favourite-songs/root:song[3]&#39;)-&amp;gt;sole();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Writing XML&lt;/h3&gt; &#xA;&lt;p&gt;This section on the documentation is for using the XML writer.&lt;/p&gt; &#xA;&lt;h4&gt;Basic Usage&lt;/h4&gt; &#xA;&lt;p&gt;The most basic usage of the reader is to use string keys for the element names and values for the values of the element. The writer accepts infinitely nested arrays for nested elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Saloon\XmlWrangler\XmlWriter;&#xA;&#xA;$xml = XmlWriter::make()-&amp;gt;write(&#39;root&#39;, [&#xA;    &#39;name&#39; =&amp;gt; &#39;Sam&#39;,&#xA;    &#39;twitter&#39; =&amp;gt; &#39;@carre_sam&#39;,&#xA;    &#39;facts&#39; =&amp;gt; [&#xA;        &#39;favourite-song&#39; =&amp;gt; &#39;Luke Combs - When It Rains It Pours&#39;&#xA;    ],&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above code will be converted into the following XML&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;root&amp;gt;&#xA;  &amp;lt;name&amp;gt;Sam&amp;lt;/name&amp;gt;&#xA;  &amp;lt;twitter&amp;gt;@carre_sam&amp;lt;/twitter&amp;gt;&#xA;  &amp;lt;facts&amp;gt;&#xA;    &amp;lt;favourite-song&amp;gt;Luke Combs - When It Rains It Pours&amp;lt;/favourite-song&amp;gt;&#xA;  &amp;lt;/facts&amp;gt;&#xA;&amp;lt;/root&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using the Element DTO&lt;/h4&gt; &#xA;&lt;p&gt;When writing XML, you will often need to define attributes and namespaces on your elements. You can use the &lt;code&gt;Element&lt;/code&gt; class in the array of XML to add an element with an attribute or namespace. You can mix the &lt;code&gt;Element&lt;/code&gt; class with other arrays and string values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Saloon\XmlWrangler\XmlWriter;&#xA;use Saloon\XmlWrangler\Data\Element;&#xA;&#xA;$xml = XmlWriter::make()-&amp;gt;write(&#39;root&#39;, [&#xA;    &#39;name&#39; =&amp;gt; &#39;Sam&#39;,&#xA;    &#39;twitter&#39; =&amp;gt; Element::make(&#39;@carre_sam&#39;)-&amp;gt;addAttribute(&#39;url&#39;, &#39;https://twitter.com/@carre_sam&#39;),&#xA;    &#39;facts&#39; =&amp;gt; [&#xA;        &#39;favourite-song&#39; =&amp;gt; &#39;Luke Combs - When It Rains It Pours&#39;&#xA;    ],&#xA;    &#39;soap:custom-namespace&#39; =&amp;gt; Element::make()-&amp;gt;addNamespace(&#39;soap&#39;, &#39;http://www.w3.org/2003/05/soap-envelope&#39;),&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will result in the following XML&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;root&amp;gt;&#xA;  &amp;lt;name&amp;gt;Sam&amp;lt;/name&amp;gt;&#xA;  &amp;lt;twitter url=&#34;https://twitter.com/@carre_sam&#34;&amp;gt;@carre_sam&amp;lt;/twitter&amp;gt;&#xA;  &amp;lt;facts&amp;gt;&#xA;    &amp;lt;favourite-song&amp;gt;Luke Combs - When It Rains It Pours&amp;lt;/favourite-song&amp;gt;&#xA;  &amp;lt;/facts&amp;gt;&#xA;  &amp;lt;soap:custom-namespace xmlns:soap=&#34;http://www.w3.org/2003/05/soap-envelope&#34;/&amp;gt;&#xA;&amp;lt;/root&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arrays Of Values&lt;/h4&gt; &#xA;&lt;p&gt;You will often need to define an array of elements. You can do this by simply providing an array of values or element classes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Saloon\XmlWrangler\XmlWriter;&#xA;use Saloon\XmlWrangler\Data\Element;&#xA;&#xA;$xml = XmlWriter::make()-&amp;gt;write(&#39;root&#39;, [&#xA;    &#39;name&#39; =&amp;gt; &#39;Luke Combs&#39;,&#xA;    &#39;songs&#39; =&amp;gt; [&#xA;        &#39;song&#39; =&amp;gt; [&#xA;            &#39;Fast Car&#39;,&#xA;            &#39;The Kind Of Love We Make&#39;,&#xA;            &#39;Beautiful Crazy&#39;,&#xA;            Element::make(&#39;She Got The Best Of Me&#39;)-&amp;gt;addAttribute(&#39;hit&#39;, &#39;true&#39;),&#xA;        ],&#xA;    ],&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will result in the following XML&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;root&amp;gt;&#xA;  &amp;lt;name&amp;gt;Luke Combs&amp;lt;/name&amp;gt;&#xA;  &amp;lt;songs&amp;gt;&#xA;    &amp;lt;song&amp;gt;Fast Car&amp;lt;/song&amp;gt;&#xA;    &amp;lt;song&amp;gt;The Kind Of Love We Make&amp;lt;/song&amp;gt;&#xA;    &amp;lt;song&amp;gt;Beautiful Crazy&amp;lt;/song&amp;gt;&#xA;    &amp;lt;song hit=&#34;true&#34;&amp;gt;She Got The Best Of Me&amp;lt;/song&amp;gt;&#xA;  &amp;lt;/songs&amp;gt;&#xA;&amp;lt;/root&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customising the root element&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes you may need to change the name of the root element. This can be customised as the first argument of the &lt;code&gt;write&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$xml = XmlWriter::make()-&amp;gt;write(&#39;custom-root&#39;, [...])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to add attributes and namespaces to the root element you can use a &lt;code&gt;RootElement&lt;/code&gt; class here too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Saloon\XmlWrangler\Data\RootElement;&#xA;&#xA;$rootElement = RootElement::make(&#39;root&#39;)-&amp;gt;addNamespace(&#39;soap&#39;, &#39;http://www.w3.org/2003/05/soap-envelope&#39;);&#xA;&#xA;$xml = XmlWriter::make()-&amp;gt;write($rootElement, [...])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CDATA Element&lt;/h4&gt; &#xA;&lt;p&gt;If you need to add a CDATA tag you can use the &lt;code&gt;CDATA&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Saloon\XmlWrangler\Data\CDATA;use Saloon\XmlWrangler\XmlWriter;&#xA;use Saloon\XmlWrangler\Data\Element;&#xA;&#xA;$xml = XmlWriter::make()-&amp;gt;write(&#39;root&#39;, [&#xA;    &#39;name&#39; =&amp;gt; &#39;Sam&#39;,&#xA;    &#39;custom&#39; =&amp;gt; CDATA::make(&#39;Here is some CDATA content!&#39;),&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will result in the following XML&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;root&amp;gt;&#xA;  &amp;lt;name&amp;gt;Sam&amp;lt;/name&amp;gt;&#xA;  &amp;lt;custom&amp;gt;&amp;lt;![CDATA[Here is some CDATA content!]]&amp;gt;&amp;lt;/custom&amp;gt;&#xA;&amp;lt;/root&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Composable Elements&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes you might have a part of XML that you will reuse across multiple XML requests in your application. With XML Wrangler, you can create &#34;composable&#34; elements where you can define your XML content in a class which you can re-use across your application. Extend the &lt;code&gt;Element&lt;/code&gt; class and use the protected static &lt;code&gt;compose&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Saloon\XmlWrangler\XmlWriter;&#xA;use Saloon\XmlWrangler\Data\Element;&#xA;&#xA;class BelgianWafflesElement extends Element&#xA;{&#xA;    protected function compose(): void&#xA;    {&#xA;        $this&#xA;            -&amp;gt;setAttributes([&#xA;                &#39;soldOut&#39; =&amp;gt; &#39;false&#39;,&#xA;                &#39;bestSeller&#39; =&amp;gt; &#39;true&#39;,&#xA;            ])&#xA;            -&amp;gt;setContent([&#xA;                &#39;name&#39; =&amp;gt; &#39;Belgian Waffles&#39;,&#xA;                &#39;price&#39; =&amp;gt; &#39;$5.95&#39;,&#xA;                &#39;description&#39; =&amp;gt; &#39;Two of our famous Belgian Waffles with plenty of real maple syrup&#39;,&#xA;                &#39;calories&#39; =&amp;gt; &#39;650&#39;,&#xA;            ]);&#xA;    }&#xA;}&#xA;&#xA;$writer = XmlWriter::make()-&amp;gt;write(&#39;root&#39;, [&#xA;    &#39;food&#39; =&amp;gt; new BelgianWafflesElement,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will result in XML like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;breakfast_menu&amp;gt;&#xA;    &amp;lt;food soldOut=&#34;false&#34; bestSeller=&#34;true&#34;&amp;gt;&#xA;        &amp;lt;name&amp;gt;Belgian Waffles&amp;lt;/name&amp;gt;&#xA;        &amp;lt;price&amp;gt;$5.95&amp;lt;/price&amp;gt;&#xA;        &amp;lt;description&amp;gt;Two of our famous Belgian Waffles with plenty of real maple syrup&amp;lt;/description&amp;gt;&#xA;        &amp;lt;calories&amp;gt;650&amp;lt;/calories&amp;gt;&#xA;    &amp;lt;/food&amp;gt;&#xA;&amp;lt;/breakfast_menu&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customising XML encoding and version&lt;/h4&gt; &#xA;&lt;p&gt;The default XML encoding is &lt;code&gt;UTF-8&lt;/code&gt; and the default version of XML is &lt;code&gt;1.0&lt;/code&gt; if you would like to customise this you can with the &lt;code&gt;setXmlEncoding&lt;/code&gt; and &lt;code&gt;setXmlVersion&lt;/code&gt; methods on the writer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Saloon\XmlWrangler\XmlWriter;&#xA;&#xA;$writer = new XmlWriter();&#xA;&#xA;$writer-&amp;gt;setXmlEncoding(&#39;ISO-8859-1&#39;);&#xA;$writer-&amp;gt;setXmlVersion(&#39;2.0&#39;);&#xA;&#xA;// $writer-&amp;gt;write(...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adding custom &#34;Processing Instructions&#34; to the XML&lt;/h4&gt; &#xA;&lt;p&gt;You can add a custom &#34;Processing Instruction&#34; to the XML by using the &lt;code&gt;addProcessingInstruction&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Saloon\XmlWrangler\XmlWriter;&#xA;&#xA;$writer = new XmlWriter();&#xA;$writer-&amp;gt;addProcessingInstruction(&#39;xml-stylesheet&#39;, &#39;type=&#34;text/xsl&#34; href=&#34;base.xsl&#34;&#39;);&#xA;&#xA;$xml = $writer-&amp;gt;write(&#39;root&#39;, [&#39;name&#39; =&amp;gt; &#39;Sam&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will result in the following XML&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;base.xsl&#34;?&amp;gt;&#xA;&amp;lt;root&amp;gt;&#xA;  &amp;lt;name&amp;gt;Sam&amp;lt;/name&amp;gt;&#xA;&amp;lt;/root&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Minification&lt;/h4&gt; &#xA;&lt;p&gt;By default the XML written is not minified. You can provide the third argument to the &lt;code&gt;write&lt;/code&gt; method to minify the XML.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Saloon\XmlWrangler\XmlWriter;&#xA;&#xA;$xml = XmlWriter::make()-&amp;gt;write(&#39;root&#39;, [...], minified: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;XML Wrangler is a simple wrapper around two really powerful libraries which do a lot of the legwork. Both of libraries are fantastic and deserve a star!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/veewee/xml&#34;&gt;veewee/xml&lt;/a&gt; - Used for reading and decoding XML, but has a powerful writing engine of its own.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spatie/array-to-xml&#34;&gt;spatie/array-to-xml&lt;/a&gt; - A brilliant library to convert an array into XML&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Credits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sammyjo20&#34;&gt;Sam Carré&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/veewee&#34;&gt;Toon Verwerft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spatie&#34;&gt;Spatie&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>MrAminiNezhad/Raccoon</title>
    <updated>2023-11-07T01:37:09Z</updated>
    <id>tag:github.com,2023-11-07:/MrAminiNezhad/Raccoon</id>
    <link href="https://github.com/MrAminiNezhad/Raccoon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Raccoon is a web-based PHP script to display V2ray configuration specifications and complete service information.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/MrAminiNezhad/Raccoon/main/demo/logo.png&#34; width=&#34;350&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  برای توضیحات &#xA; &lt;a href=&#34;https://github.com/MrAminiNezhad/Raccoon/raw/main/README-fa.md&#34;&gt; فارسی اینجا بزنید &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h1&gt;What is Raccoon Script?&lt;/h1&gt; &#xA;&lt;p&gt;Raccoon is a web-based script that can be installed on various PHP hosting platforms. Using the Raccoon script, you can create an online website to display the details of a service and its remaining balance. This allows your users to easily view their service details by entering their configuration name in a complete and online format.&lt;/p&gt; &#xA;&lt;h1&gt;Features of Raccoon&lt;/h1&gt; &#xA;&lt;p&gt;1- Ability to connect to Alireza and Sanaei panels (without version limitations) &lt;br&gt; 2- Display download and upload amounts &lt;br&gt; 3- Display total consumption &lt;br&gt; 4- Display the service expiration date &lt;br&gt; 5- Display the active or inactive status of the service &lt;br&gt; 6- Display the remaining days &lt;br&gt; 7- Display remaining traffic &lt;br&gt; 8- Support for multiple languages &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation Guide&lt;/h1&gt; &#xA;&lt;p&gt;To install, simply download the project files and transfer them to your hosting. Then, put your panel information in the info.php file. &lt;br&gt; Supported types: sanaei, alireza &lt;br&gt; Then, to activate the online chat, enter the crisp.chat site and become a member. After going through the membership process and entering the first page, click on the bottom gear and then select the first account option and then enter the Website Settings section in this front section. Click the name of your site on settings and click Setup instructions and copy the Website ID and enter it in the info.php file instead of Your ID.&lt;/p&gt; &#xA;&lt;h1&gt;Preview&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/MrAminiNezhad/Raccoon/main/demo/Raccoon_demo (1).png&#34; width=&#34;700&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/MrAminiNezhad/Raccoon/main/demo/Raccoon_demo (2).png&#34; width=&#34;700&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Thanks To&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ILYAGVC&#34;&gt; ILYAGVC &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/alirezax5&#34;&gt; alirezax5 &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Donation&lt;/h1&gt; &#xA;&lt;p&gt;Trx Wallet: TQhwK6q94GgpUZSsHBjiUWc6xAHz5Df9mW&lt;/p&gt;</summary>
  </entry>
</feed>