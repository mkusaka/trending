<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-18T01:38:43Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Bubka/2FAuth</title>
    <updated>2023-11-18T01:38:43Z</updated>
    <id>tag:github.com,2023-11-18:/Bubka/2FAuth</id>
    <link href="https://github.com/Bubka/2FAuth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Web app to manage your Two-Factor Authentication (2FA) accounts and generate their security codes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;2FAuth&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/bubka/2fauth/ci-docker-test.yml?branch=master&amp;amp;style=flat-square&#34; alt=&#34;Docker build status&#34;&gt; &lt;img src=&#34;https://img.shields.io/codecov/c/github/Bubka/2FAuth?style=flat-square&#34; alt=&#34;https://codecov.io/gh/Bubka/2FAuth&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/Bubka/2FAuth.svg?style=flat-square&#34; alt=&#34;https://github.com/Bubka/2FAuth/blob/master/LICENSE&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A web app to manage your Two-Factor Authentication (2FA) accounts and generate their security codes&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/858858/100485897-18c21400-3102-11eb-9c72-ea0b1b46ef2e.png&#34; alt=&#34;screens&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://demo.2fauth.app/&#34;&gt;&lt;strong&gt;2FAuth Demo&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; Credentials (login - password) : &lt;em&gt;&lt;a href=&#34;mailto:demo@2fauth.app&#34;&gt;demo@2fauth.app&lt;/a&gt;&lt;/em&gt; - &lt;em&gt;demo&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;2FAuth is a web based self-hosted alternative to One Time Passcode (OTP) generators like Google Authenticator, designed for both mobile and desktop.&lt;/p&gt; &#xA;&lt;p&gt;It aims to ease you perform your 2FA authentication steps whatever the device you handle, with a clean and suitable interface.&lt;/p&gt; &#xA;&lt;p&gt;I created it because :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Most of the UIs for this kind of apps show tokens for all accounts in the same time with stressful countdowns (in my opinion)&lt;/li&gt; &#xA; &lt;li&gt;I wanted my 2FA accounts to be stored in a standalone database I can easily backup and restore (did you already encountered a smartphone loss with all your 2FA accounts in Google Auth? I did...)&lt;/li&gt; &#xA; &lt;li&gt;I hate taking out my smartphone to get an OTP when I use a desktop computer&lt;/li&gt; &#xA; &lt;li&gt;I love coding and I love self-hosted solutions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manage your 2FA accounts and organize them using Groups&lt;/li&gt; &#xA; &lt;li&gt;Scan and decode any QR code to add account in no time&lt;/li&gt; &#xA; &lt;li&gt;Add custom account without QR code thanks to an advanced form&lt;/li&gt; &#xA; &lt;li&gt;Edit accounts, even the imported ones&lt;/li&gt; &#xA; &lt;li&gt;Generate TOTP and HOTP security codes and Steam Guard codes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2FAuth is currently fully localized in English and French. See &lt;a href=&#34;https://raw.githubusercontent.com/Bubka/2FAuth/master/#contributing&#34;&gt;Contributing&lt;/a&gt; if you want to help on adding more languages.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;2FAuth provides several security mechanisms to protect your 2FA data as best as possible.&lt;/p&gt; &#xA;&lt;h3&gt;Single user app&lt;/h3&gt; &#xA;&lt;p&gt;You have to create a user account and authenticate yourself to use the app. It is not possible to create more than one user account, the app is thought for personal use.&lt;/p&gt; &#xA;&lt;h3&gt;Modern authentication&lt;/h3&gt; &#xA;&lt;p&gt;You can sign in 2FAuth using a security key like a Yubikey or a Titan key and disable the traditional login form.&lt;/p&gt; &#xA;&lt;h3&gt;Data encryption&lt;/h3&gt; &#xA;&lt;p&gt;Sensitive data stored in the database can be encrypted to protect them against db compromise. Encryption is provided as an option which is disabled by default. It is strongly recommanded to backup the APP_KEY value of your .env file (or the whole file) when encryption is On.&lt;/p&gt; &#xA;&lt;h3&gt;Auto logout&lt;/h3&gt; &#xA;&lt;p&gt;2FAuth automatically log you out after an inactivity period to prevent long life session. The auto logout can be deactivated or triggered when a security code is copied.&lt;/p&gt; &#xA;&lt;h3&gt;RFC compliance&lt;/h3&gt; &#xA;&lt;p&gt;2FAuth generates OTP according to RFC 4226 (HOTP Algorithm) and RFC 6238 (TOTP Algorithm) thanks to &lt;a href=&#34;https://github.com/Spomky-Labs/otphp&#34;&gt;Spomky-Labs/OTPHP&lt;/a&gt; php library.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://secure.php.net/downloads.php&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/php-%5E8.1-red.svg?style=flat-square&#34; alt=&#34;Requires PHP8&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://laravel.com/docs/7.x/installation#server-requirements&#34;&gt;Laravel server requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any database &lt;a href=&#34;https://laravel.com/docs/7.x/database&#34;&gt;supported by Laravel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.2fauth.app/getting-started/installation/self-hosted-server/&#34;&gt;Self-hosted server&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.2fauth.app/getting-started/installation/docker/docker-cli/&#34;&gt;Docker (cli)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.2fauth.app/getting-started/installation/docker/docker-compose/&#34;&gt;Docker (compose)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.2fauth.app/getting-started/installation/heroku/&#34;&gt;Heroku&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.2fauth.app/getting-started/upgrade/&#34;&gt;Upgrade guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Migration&lt;/h2&gt; &#xA;&lt;p&gt;2FAuth supports importing from the following formats: 2FAuth (JSON), Google Auth (QR code), Aegis Auth (JSON, plain text), 2FAS Auth (JSON)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.2fauth.app/getting-started/usage/import/&#34;&gt;Import guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You can contribute to 2FAuth in many ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By &lt;a href=&#34;https://github.com/Bubka/2FAuth/issues/new?template=bug_report.md&#34;&gt;reporting bugs&lt;/a&gt;, or even better, by submitting a fix with a pull request on the &lt;em&gt;dev&lt;/em&gt; branch.&lt;/li&gt; &#xA; &lt;li&gt;By &lt;a href=&#34;https://github.com/Bubka/2FAuth/issues/new?template=feature_request.md&#34;&gt;suggesting enhancement or new feature&lt;/a&gt;. Please have a look to the &lt;a href=&#34;https://github.com/users/Bubka/projects/1&#34;&gt;2FAuth development project&lt;/a&gt;, maybe your idea is already there.&lt;/li&gt; &#xA; &lt;li&gt;By correcting or completing translations in a language you speak, using the &lt;a href=&#34;https://crowdin.com/project/2fauth&#34;&gt;Crowdin platform&lt;/a&gt;. Ask for your language if this one is lacking.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.html&#34;&gt;AGPL-3.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cedar2025/Xboard</title>
    <updated>2023-11-18T01:38:43Z</updated>
    <id>tag:github.com,2023-11-18:/cedar2025/Xboard</id>
    <link href="https://github.com/cedar2025/Xboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于V2board二次开发支持新协议新特性的面板&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;关于Xboard&lt;/h1&gt; &#xA;&lt;p&gt;Xborad是基于V2board二次开发，在性能上和功能上都有大部分增强的**面板&lt;/p&gt; &#xA;&lt;h1&gt;免责声明&lt;/h1&gt; &#xA;&lt;p&gt;本项目只是本人个人开发维护，本人不保证任何可用性，也不对使用本软件造成的任何后果负责。&lt;/p&gt; &#xA;&lt;h1&gt;捐赠&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果本项目帮助到了你，你可以对作者进行捐赠，感谢你的支持&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Tron： TLypStEWsVrj6Wz9mCxbXffqgt5yz3Y4XB&lt;/p&gt; &#xA;&lt;h1&gt;Xborad 特点&lt;/h1&gt; &#xA;&lt;p&gt;基于V2board 二次开发，增加了以下特性&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;升级Laravel10&lt;/li&gt; &#xA; &lt;li&gt;适配Laravels （提升至10+倍并发）&lt;/li&gt; &#xA; &lt;li&gt;适配Webman （比laravels快50%左右）&lt;/li&gt; &#xA; &lt;li&gt;修改配置从数据库中获取&lt;/li&gt; &#xA; &lt;li&gt;支持Docker部署、分布式部署&lt;/li&gt; &#xA; &lt;li&gt;支持根据用户IP归属地来下发订阅&lt;/li&gt; &#xA; &lt;li&gt;增加Hy2支持&lt;/li&gt; &#xA; &lt;li&gt;增加sing-box下发&lt;/li&gt; &#xA; &lt;li&gt;支持直接从cloudflare获取访问者真实IP&lt;/li&gt; &#xA; &lt;li&gt;支持根据客户端版本自动下发新协议&lt;/li&gt; &#xA; &lt;li&gt;支持线路筛选（订阅地址后面增加 &amp;amp;filter=香港｜美国）&lt;/li&gt; &#xA; &lt;li&gt;使用Vue3 + TypeScript + NaiveUI + Unocss + Pinia重构用户前端&lt;/li&gt; &#xA; &lt;li&gt;修复大量BUG&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;strong&gt;系统架构&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP8.1+&lt;/li&gt; &#xA; &lt;li&gt;Composer&lt;/li&gt; &#xA; &lt;li&gt;MySQL5.7+&lt;/li&gt; &#xA; &lt;li&gt;Redis&lt;/li&gt; &#xA; &lt;li&gt;Laravel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;安装 / 更新 / 回滚&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这里将给你介绍不同方式的 安装、更新、回滚步骤&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;安装前准备&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装前你需要自行安装好Mysql数据库（用户量小的可以忽略，使用Sqlite）&lt;/li&gt; &#xA; &lt;li&gt;安装前你需要自行安装好redis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker Compose 方式（推荐）&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;strong&gt;安装部署&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装docker&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSL https://get.docker.com | bash&#xA;systemctl enable docker&#xA;systemctl start docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;获取Docker compose 文件&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone -b  docker-compose --depth 1 https://github.com/cedar2025/Xboard&#xA;cd Xboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;执行数据库安装命令&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose run -it --rm xboard php artisan xboard:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;执行这条命令之后，会返回你的后台地址和管理员账号密码（你需要记录下来）&lt;br&gt; 你需要执行下面的 ‘&lt;strong&gt;启动xborad&lt;/strong&gt;’ 之后才能访问后台&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;启动xboard&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;安装完成之后即可访问你的站点&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;配置nginx代理&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;启动之后网站端口为7001, 你可以配置nginx分流使用80端口&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;location ~ .* {&#xA;    proxy_pass http://127.0.0.1:7001;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;strong&gt;更新&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;1、 修改版本&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd Xboard&#xA;vi docker-compose.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;修改docker-compose.yaml 当中image后面的版本号为你需要的版本&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;2、 更新数据库（可以执行多次都是安全的）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose down&#xA;docker compose run -it --rm xboard php artisan xboard:update&#xA;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;即可更新成功&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;strong&gt;回滚&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;需要回滚旧的版本时 1、回滚数据库(不可回滚多次，每一次指定都会回滚到上一个版本)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose down&#xA;docker compose run -it --rm xboard php artisan xboard:rollback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2、回退版本&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vi docker-compose.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;修改docker-compose.yaml 当中image后面的版本号为更新前的版本号 3、启动&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;dockcer compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;从其他版本迁移&lt;/h3&gt; &#xA;&lt;h4&gt;config/v2board.php 迁移&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;xboard将配置储存到数据库了， 不再使用file进行储存，你需要对配置文件进行迁移。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;将旧的 config/v2board.php 文件复制到 xboard的 config/v2board.php下&lt;/li&gt; &#xA; &lt;li&gt;执行下面的命令，即可完成迁移&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan migrateFromV2b config &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果你迁移到docker compose&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在xboard 目录下创建 config文件夹&lt;/li&gt; &#xA; &lt;li&gt;复制旧项目的 v2board.php 到config目录&lt;/li&gt; &#xA; &lt;li&gt;修改docker-compose.yaml 取消下面代码的注释（删除 &#34;#&#34;）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;  # - ./config/v2board.php:/www/config/v2board.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;执行下面的命令&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose down&#xA;docker compose run -it --rm php artisan migrateFromV2b config &#xA;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;即可完成迁移&lt;/p&gt; &#xA;&lt;h4&gt;数据库迁移&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果你需要从其他版本迁移过来，你需要手动配置好 .env之后按照以下引导操作&lt;br&gt; 目前支持迁移的版本&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v2board dev 23/10/27的版本 &lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/v2b_dev%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97.md&#34;&gt;点击跳转迁移引导&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;v2board 1.7.4 &lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/v2b_1.7.4%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97.md&#34;&gt;点击跳转迁移引导&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;v2board 1.7.3 &lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/v2b_1.7.3%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97.md&#34;&gt;点击跳转迁移引导&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;v2board wyx2685 &lt;a href=&#34;https://raw.githubusercontent.com/cedar2025/Xboard/dev/v2b_wyx2685%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97.md&#34;&gt;点击跳转迁移引导&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;宝塔方式(aaPanel) （不推荐，太麻烦了）&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装aaPanel&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;如果是Centos系统&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yum install -y wget &amp;amp;&amp;amp; wget -O install.sh http://www.aapanel.com/script/install_6.0_en.sh &amp;amp;&amp;amp; bash install.sh aapanel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果是Ubuntu/Deepin系统&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh &amp;amp;&amp;amp; sudo bash install.sh aapanel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果是Debian 系统&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh &amp;amp;&amp;amp; bash install.sh aapanel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装完成后我们登陆 aaPanel 进行环境的安装。 2. 选择使用LNMP的环境安装方式勾选如下信息&lt;br&gt; ☑️ Nginx 任意版本&lt;br&gt; ☑️ MySQL 5.7&lt;br&gt; ☑️ PHP 8.1&lt;br&gt; 选择 Fast 快速编译后进行安装。&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;安装扩展&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;aaPanel 面板 &amp;gt; App Store &amp;gt; 找到PHP 8.1点击Setting &amp;gt; Install extentions选择以下扩展进行安装&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;redis&lt;/li&gt; &#xA; &lt;li&gt;fileinfo&lt;/li&gt; &#xA; &lt;li&gt;swoole5&lt;/li&gt; &#xA; &lt;li&gt;readline&lt;/li&gt; &#xA; &lt;li&gt;event&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;解除被禁止函数&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;aaPanel 面板 &amp;gt; App Store &amp;gt; 找到PHP 7.4点击Setting &amp;gt; Disabled functions 将以下函数从列表中删除&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;putenv&lt;/li&gt; &#xA; &lt;li&gt;proc_open&lt;/li&gt; &#xA; &lt;li&gt;pcntl_alarm&lt;/li&gt; &#xA; &lt;li&gt;pcntl_signal&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;添加站点&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;aaPanel 面板 &amp;gt; Website &amp;gt; Add site。&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;在 Domain 填入你指向服务器的域名&lt;br&gt; 在 Database 选择MySQL&lt;br&gt; 在 PHP Verison 选择PHP-81&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;安装 Xborad&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;通过SSH登录到服务器后访问站点路径如：/www/wwwroot/你的站点域名。 以下命令都需要在站点目录进行执行。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 删除目录下文件&#xA;chattr -i .user.ini&#xA;rm -rf .htaccess 404.html index.html .user.ini&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;执行命令从 Github 克隆到当前目录。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/cedar2025/Xboard.git ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;执行命令安装依赖包以及V2board&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh init.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;根据提示完成安装&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;配置站点目录及伪静态&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;添加完成后编辑添加的站点 &amp;gt; Site directory &amp;gt; Running directory 选择 /public 保存。&lt;br&gt; 添加完成后编辑添加的站点 &amp;gt; URL rewrite 填入伪静态信息。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;location /downloads {&#xA;}&#xA;&#xA;location / {  &#xA;    try_files $uri $uri/ /index.php$is_args$query_string;  &#xA;}&#xA;&#xA;location ~ .*\.(js|css)?$&#xA;{&#xA;    expires      1h;&#xA;    error_log off;&#xA;    access_log /dev/null; &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;配置守护进程&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;V2board的系统强依赖队列服务，正常使用V2Board必须启动队列服务。下面以aaPanel中supervisor服务来守护队列服务作为演示。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;aaPanel 面板 &amp;gt; App Store &amp;gt; Tools&lt;/li&gt; &#xA; &lt;li&gt;找到Supervisor进行安装，安装完成后点击设置 &amp;gt; Add Daemon按照如下填写&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在 Name 填写 Xboard&lt;/li&gt; &#xA; &lt;li&gt;在 Run User 选择 www&lt;/li&gt; &#xA; &lt;li&gt;在 Run Dir 选择 站点目录 在 Start Command 填写 php artisan horizon 在 Processes 填写 1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;填写后点击Confirm添加即可运行。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;配置定时任务# aaPanel 面板 &amp;gt; Cron。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在 Type of Task 选择 Shell Script&lt;/li&gt; &#xA; &lt;li&gt;在 Name of Task 填写 v2board&lt;/li&gt; &#xA; &lt;li&gt;在 Period 选择 N Minutes 1 Minute&lt;/li&gt; &#xA; &lt;li&gt;在 Script content 填写 php /www/wwwroot/路径/artisan schedule:run&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;根据上述信息添加每1分钟执行一次的定时任务。&lt;/p&gt;</summary>
  </entry>
</feed>