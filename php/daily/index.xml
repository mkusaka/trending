<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-02T01:35:57Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>giggsey/libphonenumber-for-php</title>
    <updated>2022-09-02T01:35:57Z</updated>
    <id>tag:github.com,2022-09-02:/giggsey/libphonenumber-for-php</id>
    <link href="https://github.com/giggsey/libphonenumber-for-php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP version of Google&#39;s phone number handling library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libphonenumber for PHP &lt;a href=&#34;https://github.com/giggsey/libphonenumber-for-php/actions?query=workflow%3A%22Continuous+Integration%22&#34;&gt;&lt;img src=&#34;https://github.com/giggsey/libphonenumber-for-php/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/giggsey/libphonenumber-for-php?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/giggsey/libphonenumber-for-php.svg?style=flat-square&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/giggsey/libphonenumber-for-php&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/giggsey/libphonenumber-for-php/downloads?format=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/giggsey/libphonenumber-for-php&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dm/giggsey/libphonenumber-for-php.svg?style=flat-square&#34; alt=&#34;Downloads per month&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/giggsey/libphonenumber-for-php&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/giggsey/libphonenumber-for-php.svg?style=flat-square&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/giggsey/libphonenumber-for-php&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202.0-red.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;A PHP library for parsing, formatting, storing and validating international phone numbers. This library is based on Google&#39;s &lt;a href=&#34;https://github.com/google/libphonenumber&#34;&gt;libphonenumber&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#online-demo&#34;&gt;Online Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#highlights-of-functionality&#34;&gt;Highlights of functionality&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#quick-examples&#34;&gt;Quick Examples&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#geocoder&#34;&gt;Geocoder&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#shortnumberinfo&#34;&gt;ShortNumberInfo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#mapping-phone-numbers-to-carrier&#34;&gt;Mapping Phone Numbers to carrier&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#mapping-phone-numbers-to-timezones&#34;&gt;Mapping Phone Numbers to TimeZones&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#problems-with-invalid-numbers&#34;&gt;Problems with Invalid Numbers?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#generating-data&#34;&gt;Generating data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/#integration-with-frameworks&#34;&gt;Integration with frameworks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;PHP versions 5.3 up to PHP 8.1 are currently supported.&lt;/p&gt; &#xA;&lt;p&gt;The PECL &lt;a href=&#34;http://php.net/mbstring&#34;&gt;mbstring&lt;/a&gt; extension is required.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to use &lt;a href=&#34;https://getcomposer.org&#34;&gt;composer&lt;/a&gt; to install the library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require giggsey/libphonenumber-for-php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use any other &lt;a href=&#34;http://www.php-fig.org/psr/psr-4/&#34;&gt;PSR-4&lt;/a&gt; compliant autoloader.&lt;/p&gt; &#xA;&lt;p&gt;If you do not use composer, ensure that you also load any dependencies that this project has, such as &lt;a href=&#34;https://github.com/giggsey/Locale&#34;&gt;giggsey/locale&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/docs/PhoneNumberUtil.md&#34;&gt;PhoneNumber Util&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/docs/ShortNumberInfo.md&#34;&gt;ShortNumber Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/docs/PhoneNumberOfflineGeocoder.md&#34;&gt;Phone Number Geolocation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/docs/PhoneNumberToCarrierMapper.md&#34;&gt;Phone Number to Carrier Mapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/docs/PhoneNumberToTimeZonesMapper.md&#34;&gt;Phone Number to Timezone Mapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/docs/PhoneNumberMatcher.md&#34;&gt;Phone Number Matcher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/docs/AsYouTypeFormatter.md&#34;&gt;As You Type Formatter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Online Demo&lt;/h2&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;http://giggsey.com/libphonenumber/&#34;&gt;online demo&lt;/a&gt; is available, and the source can be found at &lt;a href=&#34;https://github.com/giggsey/libphonenumber-example&#34;&gt;giggsey/libphonenumber-example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Highlights of functionality&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parsing/formatting/validating phone numbers for all countries/regions of the world.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getNumberType&lt;/code&gt; - gets the type of the number based on the number itself; able to distinguish Fixed-line, Mobile, Toll-free, Premium Rate, Shared Cost, VoIP and Personal Numbers (whenever feasible).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isNumberMatch&lt;/code&gt; - gets a confidence level on whether two numbers could be the same.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getExampleNumber&lt;/code&gt;/&lt;code&gt;getExampleNumberByType&lt;/code&gt; - provides valid example numbers for all countries/regions, with the option of specifying which type of example phone number is needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isValidNumber&lt;/code&gt; - full validation of a phone number for a region using length and prefix information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PhoneNumberOfflineGeocoder&lt;/code&gt; - provides geographical information related to a phone number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PhoneNumberToTimeZonesMapper&lt;/code&gt; - provides timezone information related to a phone number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PhoneNumberToCarrierMapper&lt;/code&gt; - provides carrier information related to a phone number.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;This library will try to follow the same version numbers as Google. There could be additional releases where needed to fix critical issues that can not wait until the next release from Google.&lt;/p&gt; &#xA;&lt;p&gt;This does mean that this project may not follow &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;, but instead Google&#39;s version policy. As a result, jumps in major versions may not actually contain any backwards incompatible changes. Please read the release notes for such releases.&lt;/p&gt; &#xA;&lt;p&gt;Google try to release their versions according to Semantic Versioning, as laid out of in their &lt;a href=&#34;https://github.com/google/libphonenumber#versioning-and-announcements&#34;&gt;Versioning Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Examples&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s say you have a string representing a phone number from Switzerland. This is how you parse/normalize it into a PhoneNumber object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$swissNumberStr = &#34;044 668 18 00&#34;;&#xA;$phoneUtil = \libphonenumber\PhoneNumberUtil::getInstance();&#xA;try {&#xA;    $swissNumberProto = $phoneUtil-&amp;gt;parse($swissNumberStr, &#34;CH&#34;);&#xA;    var_dump($swissNumberProto);&#xA;} catch (\libphonenumber\NumberParseException $e) {&#xA;    var_dump($e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, swissNumberProto contains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class libphonenumber\PhoneNumber#9 (7) {&#xA; private $countryCode =&amp;gt;&#xA;  int(41)&#xA; private $nationalNumber =&amp;gt;&#xA;  double(446681800)&#xA; private $extension =&amp;gt;&#xA;  NULL&#xA; private $italianLeadingZero =&amp;gt;&#xA;  NULL&#xA; private $rawInput =&amp;gt;&#xA;  NULL&#xA; private $countryCodeSource =&amp;gt;&#xA;  NULL&#xA; private $preferredDomesticCarrierCode =&amp;gt;&#xA;  NULL&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now let us validate whether the number is valid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$isValid = $phoneUtil-&amp;gt;isValidNumber($swissNumberProto);&#xA;var_dump($isValid); // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a few formats supported by the formatting method, as illustrated below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Produces &#34;+41446681800&#34;&#xA;echo $phoneUtil-&amp;gt;format($swissNumberProto, \libphonenumber\PhoneNumberFormat::E164);&#xA;&#xA;// Produces &#34;044 668 18 00&#34;&#xA;echo $phoneUtil-&amp;gt;format($swissNumberProto, \libphonenumber\PhoneNumberFormat::NATIONAL);&#xA;&#xA;// Produces &#34;+41 44 668 18 00&#34;&#xA;echo $phoneUtil-&amp;gt;format($swissNumberProto, \libphonenumber\PhoneNumberFormat::INTERNATIONAL);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could also choose to format the number in the way it is dialled from another country:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Produces &#34;011 41 44 668 1800&#34;, the number when it is dialled in the United States.&#xA;echo $phoneUtil-&amp;gt;formatOutOfCountryCallingNumber($swissNumberProto, &#34;US&#34;);&#xA;&#xA;// Produces &#34;00 41 44 668 18 00&#34;, the number when it is dialled in Great Britain.&#xA;echo $phoneUtil-&amp;gt;formatOutOfCountryCallingNumber($swissNumberProto, &#34;GB&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Geocoder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$phoneUtil = \libphonenumber\PhoneNumberUtil::getInstance();&#xA;&#xA;$swissNumberProto = $phoneUtil-&amp;gt;parse(&#34;044 668 18 00&#34;, &#34;CH&#34;);&#xA;$usNumberProto = $phoneUtil-&amp;gt;parse(&#34;+1 650 253 0000&#34;, &#34;US&#34;);&#xA;$gbNumberProto = $phoneUtil-&amp;gt;parse(&#34;0161 496 0000&#34;, &#34;GB&#34;);&#xA;&#xA;$geocoder = \libphonenumber\geocoding\PhoneNumberOfflineGeocoder::getInstance();&#xA;&#xA;// Outputs &#34;Zurich&#34;&#xA;echo $geocoder-&amp;gt;getDescriptionForNumber($swissNumberProto, &#34;en_US&#34;);&#xA;&#xA;// Outputs &#34;Zürich&#34;&#xA;echo $geocoder-&amp;gt;getDescriptionForNumber($swissNumberProto, &#34;de_DE&#34;);&#xA;&#xA;// Outputs &#34;Zurigo&#34;&#xA;echo $geocoder-&amp;gt;getDescriptionForNumber($swissNumberProto, &#34;it_IT&#34;);&#xA;&#xA;// Outputs &#34;Mountain View, CA&#34;&#xA;echo $geocoder-&amp;gt;getDescriptionForNumber($usNumberProto, &#34;en_US&#34;);&#xA;&#xA;// Outputs &#34;Mountain View, CA&#34;&#xA;echo $geocoder-&amp;gt;getDescriptionForNumber($usNumberProto, &#34;de_DE&#34;);&#xA;&#xA;// Outputs &#34;미국&#34; (Korean for United States)&#xA;echo $geocoder-&amp;gt;getDescriptionForNumber($usNumberProto, &#34;ko-KR&#34;);&#xA;&#xA;// Outputs &#34;Manchester&#34;&#xA;echo $geocoder-&amp;gt;getDescriptionForNumber($gbNumberProto, &#34;en_GB&#34;);&#xA;&#xA;// Outputs &#34;영국&#34; (Korean for United Kingdom)&#xA;echo $geocoder-&amp;gt;getDescriptionForNumber($gbNumberProto, &#34;ko-KR&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ShortNumberInfo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$shortNumberInfo = \libphonenumber\ShortNumberInfo::getInstance();&#xA;&#xA;// true&#xA;var_dump($shortNumberInfo-&amp;gt;isEmergencyNumber(&#34;999&#34;, &#34;GB&#34;));&#xA;&#xA;// true&#xA;var_dump($shortNumberInfo-&amp;gt;connectsToEmergencyNumber(&#34;999&#34;, &#34;GB&#34;));&#xA;&#xA;// false&#xA;var_dump($shortNumberInfo-&amp;gt;connectsToEmergencyNumber(&#34;911&#34;, &#34;GB&#34;));&#xA;&#xA;// true&#xA;var_dump($shortNumberInfo-&amp;gt;isEmergencyNumber(&#34;911&#34;, &#34;US&#34;));&#xA;&#xA;// true&#xA;var_dump($shortNumberInfo-&amp;gt;connectsToEmergencyNumber(&#34;911&#34;, &#34;US&#34;));&#xA;&#xA;// false&#xA;var_dump($shortNumberInfo-&amp;gt;isEmergencyNumber(&#34;911123&#34;, &#34;US&#34;));&#xA;&#xA;// true&#xA;var_dump($shortNumberInfo-&amp;gt;connectsToEmergencyNumber(&#34;911123&#34;, &#34;US&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mapping Phone Numbers to carrier&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$phoneUtil = \libphonenumber\PhoneNumberUtil::getInstance();&#xA;$swissNumberProto = $phoneUtil-&amp;gt;parse(&#34;798765432&#34;, &#34;CH&#34;);&#xA;&#xA;$carrierMapper = \libphonenumber\PhoneNumberToCarrierMapper::getInstance();&#xA;// Outputs &#34;Swisscom&#34;&#xA;echo $carrierMapper-&amp;gt;getNameForNumber($swissNumberProto, &#34;en&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mapping Phone Numbers to TimeZones&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$phoneUtil = \libphonenumber\PhoneNumberUtil::getInstance();&#xA;$swissNumberProto = $phoneUtil-&amp;gt;parse(&#34;798765432&#34;, &#34;CH&#34;);&#xA;&#xA;$timeZoneMapper = \libphonenumber\PhoneNumberToTimeZonesMapper::getInstance();&#xA;// returns array(&#34;Europe/Zurich&#34;)&#xA;$timeZones = $timeZoneMapper-&amp;gt;getTimeZonesForNumber($swissNumberProto);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;Problems with Invalid Numbers?&lt;/h4&gt; &#xA;&lt;p&gt;This library uses phone number metadata from Google&#39;s &lt;a href=&#34;https://github.com/google/libphonenumber&#34;&gt;libphonenumber&lt;/a&gt;. If this library is working as intended, it should provide the same result as the Java version of Google&#39;s project.&lt;/p&gt; &#xA;&lt;p&gt;If you believe that a phone number is returning an incorrect result, first test it with &lt;a href=&#34;https://github.com/google/libphonenumber&#34;&gt;libphonenumber&lt;/a&gt; via their &lt;a href=&#34;https://libphonenumber.appspot.com/&#34;&gt;Online Demo&lt;/a&gt;. If that returns the same result as this project, and you feel it is in error, raise it as an Issue with the libphonenumber project.&lt;/p&gt; &#xA;&lt;p&gt;If Google&#39;s &lt;a href=&#34;https://libphonenumber.appspot.com/&#34;&gt;Online Demo&lt;/a&gt; gives a different result to the &lt;a href=&#34;http://giggsey.com/libphonenumber/&#34;&gt;libphonenumber-for-php demo&lt;/a&gt;, then please raise an Issue here.&lt;/p&gt; &#xA;&lt;h2&gt;Generating data&lt;/h2&gt; &#xA;&lt;p&gt;Generating the data is not normally needed, as this repository will generally always have the up to data metadata.&lt;/p&gt; &#xA;&lt;p&gt;If you do need to generate the data, the commands are provided by &lt;a href=&#34;https://www.phing.info&#34;&gt;Phing&lt;/a&gt;. Ensure you have all the dev composer dependencies installed, then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vendor/bin/phing compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This compile process clones the &lt;a href=&#34;https://github.com/google/libphonenumber&#34;&gt;libphonenumber&lt;/a&gt; project at the version specified in &lt;a href=&#34;https://raw.githubusercontent.com/giggsey/libphonenumber-for-php/master/METADATA-VERSION.txt&#34;&gt;METADATA-VERSION.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://symfony.com/doc/current/components/phpunit_bridge.html&#34;&gt;PHPUnit Bridge&lt;/a&gt; to maintain compatibility for the supported PHP versions.&lt;/p&gt; &#xA;&lt;p&gt;To run the tests locally, run the &lt;code&gt;./phpunit&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Integration with frameworks&lt;/h2&gt; &#xA;&lt;p&gt;Other packages exist that integrate libphonenumber-for-php into frameworks.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Framework&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Packages&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Symfony&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/odolbeau/phone-number-bundle&#34;&gt;PhoneNumberBundle&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Laravel&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Propaganistas/Laravel-Phone&#34;&gt;Laravel Phone&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yii2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Borales/yii2-phone-input&#34;&gt;PhoneInput&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kohana&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/softmediadev/kohana-phonenumber&#34;&gt;PhoneNumber&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TYPO3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/simonschaufi/typo3-phone&#34;&gt;TYPO3 Phone Extension&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These packages are supplied by third parties, and their quality can not be guaranteed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>annexus254/mysqli-safe</title>
    <updated>2022-09-02T01:35:57Z</updated>
    <id>tag:github.com,2022-09-02:/annexus254/mysqli-safe</id>
    <link href="https://github.com/annexus254/mysqli-safe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Mysqli-Safe &lt;/h1&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;&lt;i&gt; A simple, easy-to-use and secure way of accessing a Mysql database from within your PHP programs &lt;/i&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/joemccann/dillinger&#34;&gt;&lt;img src=&#34;https://travis-ci.org/joemccann/dillinger.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mysqli-safe is a wrapper around the mysqli extension in PHP that bundles together the extension itself and Mysql prepared statements into one neat and succint API that&#39;s very easy to use.&lt;/p&gt; &#xA;&lt;p&gt;In fact, you can perform an initial database query in just three easy steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open a database connection by creating a mysqli_safe object.&lt;/li&gt; &#xA; &lt;li&gt;Set the query and its parameters by calling the set method of the created object.&lt;/li&gt; &#xA; &lt;li&gt;Perform the query!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;$db = new mysqli_safe(&#39;localhost&#39; , &#39;username&#39; , &#39;password&#39; , &#39;database&#39;);&lt;/p&gt; &#xA; &lt;p&gt;$res = $db-&amp;gt;set(&#34;SELECT * FROM table WHERE id = ? AND name = ?&#34; , $id , $name);&lt;/p&gt; &#xA; &lt;p&gt;$result = $db-&amp;gt;query();&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;In addition to providing a short and concise API, the mysqli_safe class also offers the following features:&lt;/p&gt; &#xA;&lt;h3&gt;1.Object Re-use&lt;/h3&gt; &#xA;&lt;p&gt;With mysqli_safe, you do not really need to create a new object in order to connect to a new database.Instead, just call the connect method and pass in the details of the new database, and the class will handle the rest for you. ( Including closing any previously opened db connection)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;$res = $db-&amp;gt;connect(&#39;localhost&#39; , &#39;new_username&#39; , &#39;password&#39; , &#39;new_database&#39;);&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2.Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Mysqli_safe is also backwards compatible with any existing programs that use the mysqli extension. To migrate to using this wrapper class, just add a set method and pass in the existing query and its parameters and then call the query method. The rest of the program should continue working without altering anything else.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;before&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;...&lt;/p&gt; &#xA; &lt;p&gt;$result = $db-&amp;gt;query(&#34;SELECT * FROM table WHERE id = &#39;$id&#39; AND name = &#39;$name&#39;);&lt;/p&gt; &#xA; &lt;p&gt;...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;after&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;...&lt;/p&gt; &#xA; &lt;p&gt;$setresult = $db-&amp;gt;set(&#34;SELECT * FROM table WHERE id = ? AND name = ? , $id , $name);&lt;/p&gt; &#xA; &lt;p&gt;$result = $db-&amp;gt;query();&lt;/p&gt; &#xA; &lt;p&gt;...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;3.Type Deduction&lt;/h3&gt; &#xA;&lt;p&gt;With mysqli_safe you do not have to worry about passing the correct type string like in the traditional way of creating prepared statements. The class will deduce the types for you and create the correct string when you call the set method. However, if you do not want this behaviour, you can always turn this feature off by calling the setopt method and passing your own type string.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;$res = $db-&amp;gt;setopt(DEDUCE_TYPE , false , &#34;is&#34;);&lt;/p&gt; &#xA; &lt;p&gt;$setresult = $db-&amp;gt;set(&#34;SELECT * FROM table WHERE id = ? AND name = ? , $id , $name);&lt;/p&gt; &#xA; &lt;p&gt;$result = $db-&amp;gt;query();&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;4.Query Statement Re-use&lt;/h3&gt; &#xA;&lt;p&gt;Mysqli_safe also allows you to re-use the same query statement and parameters across mutiple databases, if they have the same structure. All you have to to is to enable the REUSE_STMT option and the class will do the rest for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;$setresult = $db-&amp;gt;set(&#34;SELECT * FROM table WHERE id = ? AND name = ? , $id , $name);&lt;/p&gt; &#xA; &lt;p&gt;$result = $db-&amp;gt;query();&lt;/p&gt; &#xA; &lt;p&gt;$res = $db-&amp;gt;setopt(REUSE_STMT , true);&lt;/p&gt; &#xA; &lt;p&gt;$res = $db-&amp;gt;connect(&#39;localhost&#39; , &#39;new_username&#39; , &#39;password&#39; , &#39;new_database&#39;);&lt;/p&gt; &#xA; &lt;p&gt;$res = $db-&amp;gt;query();&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;5.Built-in Protection Against Some Common Web Attacks&lt;/h3&gt; &#xA;&lt;p&gt;Mysqli_safe uses Mysql&#39;s prepared statements and PHP&#39;s built-in htmlspecialchars function to guarantee protection against SQL injection and XSS attacks respectively, when reading from or writing to your database. This ensures that each and every one of your database accesses is secure with the programmer having to think much about it, allowing him/her to focus on the core logic of his/her application.&lt;/p&gt;</summary>
  </entry>
</feed>