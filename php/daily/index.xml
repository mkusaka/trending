<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-23T01:41:20Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tectalichq/public-openai-client-php</title>
    <updated>2023-03-23T01:41:20Z</updated>
    <id>tag:github.com,2023-03-23:/tectalichq/public-openai-client-php</id>
    <link href="https://github.com/tectalichq/public-openai-client-php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAI API Client for PHP. Includes all endpoints and models (DTOs) for all requests and responses.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tectalic OpenAI REST API Client&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Tectalic OpenAI REST API Client&lt;/strong&gt; is a package that provides a convenient and straightforward way to interact with the &lt;strong&gt;OpenAI API&lt;/strong&gt; from your PHP application.&lt;/p&gt; &#xA;&lt;p&gt;Supports &lt;strong&gt;ChatGPT&lt;/strong&gt;, &lt;strong&gt;GPT-4&lt;/strong&gt;, &lt;strong&gt;GPT-3.5&lt;/strong&gt;, &lt;strong&gt;GPT-3&lt;/strong&gt;, &lt;strong&gt;Codex&lt;/strong&gt;, &lt;strong&gt;DALL·E&lt;/strong&gt;, &lt;strong&gt;Whisper&lt;/strong&gt;, &lt;strong&gt;Embeddings&lt;/strong&gt; and &lt;strong&gt;Moderation&lt;/strong&gt; models, with fully typed Data Transfer Objects (DTOs) for all requests and responses and IDE autocomplete support.&lt;/p&gt; &#xA;&lt;p&gt;More information is available from &lt;a href=&#34;https://tectalic.com/apis/openai&#34;&gt;https://tectalic.com/apis/openai&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is an unofficial package and has no affiliations with OpenAI.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Integrating OpenAI into your application is now as simple as a few lines of code.&lt;/p&gt; &#xA;&lt;h3&gt;Chat Completion using ChatGPT (GPT-3.5 &amp;amp; GPT-4)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openaiClient = \Tectalic\OpenAi\Manager::build(&#xA;    new \GuzzleHttp\Client(),&#xA;    new \Tectalic\OpenAi\Authentication(getenv(&#39;OPENAI_API_KEY&#39;))&#xA;);&#xA;&#xA;/** @var \Tectalic\OpenAi\Models\ChatCompletions\CreateResponse $response */&#xA;$response = $openaiClient-&amp;gt;chatCompletions()-&amp;gt;create(&#xA;    new \Tectalic\OpenAi\Models\ChatCompletions\CreateRequest([&#xA;        &#39;model&#39; =&amp;gt; &#39;gpt-4&#39;,&#xA;        &#39;messages&#39; =&amp;gt; [&#xA;            [&#xA;                &#39;role&#39; =&amp;gt; &#39;user&#39;,&#xA;                &#39;content&#39; =&amp;gt; &#39;Will using a well designed and supported third party package save time?&#39;&#xA;            ],&#xA;        ],&#xA;    ])&#xA;)-&amp;gt;toModel();&#xA;&#xA;echo $response-&amp;gt;choices[0]-&amp;gt;message-&amp;gt;content;&#xA;&#xA;// Yes, using a well-designed and supported third-party package can save time during software development.&#xA;// It allows you to focus on the core functionality of your application without having to reinvent the wheel or spend resources developing the same functionality from scratch.&#xA;// A good third-party package can provide reliability, efficiency, and continued support with updates and bug fixes, which in turn facilitates faster development and a more stable final product.&#xA;// Additionally, using widely adopted packages can also increase the chances of compatibility with other software components and make it easier for other developers to understand and work with your code.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/chat&#34;&gt;Learn more about chat completion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This handler supports both the &lt;em&gt;GPT-3.5&lt;/em&gt; and &lt;em&gt;GPT-4&lt;/em&gt; models:&lt;/p&gt; &#xA;&lt;h4&gt;GPT-3.5&lt;/h4&gt; &#xA;&lt;p&gt;Supported &lt;a href=&#34;https://platform.openai.com/docs/models/gpt-3-5&#34;&gt;GPT-3.5 models&lt;/a&gt; include &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;, &lt;code&gt;text-davinci-003&lt;/code&gt;, &lt;code&gt;text-davinci-002&lt;/code&gt; and more.&lt;/p&gt; &#xA;&lt;h4&gt;GPT-4&lt;/h4&gt; &#xA;&lt;p&gt;Supported &lt;a href=&#34;https://platform.openai.com/docs/models/gpt-4&#34;&gt;GPT-4 models&lt;/a&gt; include &lt;code&gt;gpt-4&lt;/code&gt; and more.&lt;/p&gt; &#xA;&lt;p&gt;Note: GPT-4 is currently in a limited beta and is only accessible to those who have been granted access. &lt;a href=&#34;https://platform.openai.com/docs/models/gpt-4&#34;&gt;Please see here&lt;/a&gt; for details and instructions on how to join the waitlist.&lt;/p&gt; &#xA;&lt;p&gt;If you receive a 404 error when attempting to use GPT-4, then your OpenAI account has not been granted access.&lt;/p&gt; &#xA;&lt;h3&gt;Text Completion (GPT-3)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openaiClient = \Tectalic\OpenAi\Manager::build(new \GuzzleHttp\Client(), new \Tectalic\OpenAi\Authentication(getenv(&#39;OPENAI_API_KEY&#39;)));&#xA;&#xA;/** @var \Tectalic\OpenAi\Models\Completions\CreateResponse $response */&#xA;$response = $openaiClient-&amp;gt;completions()-&amp;gt;create(&#xA;    new \Tectalic\OpenAi\Models\Completions\CreateRequest([&#xA;        &#39;model&#39;  =&amp;gt; &#39;text-davinci-003&#39;,&#xA;        &#39;prompt&#39; =&amp;gt; &#39;Will using a third party package save time?&#39;,&#xA;    ])&#xA;)-&amp;gt;toModel();&#xA;&#xA;echo $response-&amp;gt;choices[0]-&amp;gt;text;&#xA;// Using a third party package can save time because you don&#39;t have to write the code yourself.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This handler supports all &lt;a href=&#34;https://platform.openai.com/docs/models/gpt-3&#34;&gt;GPT-3 models&lt;/a&gt;, including &lt;code&gt;text-davinci-003&lt;/code&gt;, &lt;code&gt;text-davinci-002&lt;/code&gt; and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/completion&#34;&gt;Learn more about text completion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Code Completion (Codex)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openaiClient = \Tectalic\OpenAi\Manager::build(new \GuzzleHttp\Client(), new \Tectalic\OpenAi\Authentication(getenv(&#39;OPENAI_API_KEY&#39;)));&#xA;&#xA;/** @var \Tectalic\OpenAi\Models\Completions\CreateResponse $response */&#xA;$response = $openaiClient-&amp;gt;completions()-&amp;gt;create(&#xA;    new \Tectalic\OpenAi\Models\Completions\CreateRequest([&#xA;        &#39;model&#39;  =&amp;gt; &#39;code-davinci-002&#39;,&#xA;        &#39;prompt&#39; =&amp;gt; &#34;// PHP 8\n// A variable that saves the current date and time&#34;,&#xA;        &#39;max_tokens&#39; =&amp;gt; 256,&#xA;        &#39;stop&#39; =&amp;gt; &#34;;&#34;,&#xA;    ])&#xA;)-&amp;gt;toModel();&#xA;&#xA;echo $response-&amp;gt;choices[0]-&amp;gt;text;&#xA;// $now = date(&#34;Y-m-d G:i:s&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported &lt;a href=&#34;https://platform.openai.com/docs/models/codex&#34;&gt;Codex models&lt;/a&gt; include &lt;code&gt;code-davinci-002&lt;/code&gt; and &lt;code&gt;code-cushman-001&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/code&#34;&gt;Learn more about code completion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image Generation (DALL·E)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openaiClient = \Tectalic\OpenAi\Manager::build(new \GuzzleHttp\Client(), new \Tectalic\OpenAi\Authentication(getenv(&#39;OPENAI_API_KEY&#39;)));&#xA;&#xA;/** @var \Tectalic\OpenAi\Models\ImagesGenerations\CreateResponse $response */&#xA;$response = $openaiClient-&amp;gt;imagesGenerations()-&amp;gt;create(&#xA;    new \Tectalic\OpenAi\Models\ImagesGenerations\CreateRequest([&#xA;        &#39;prompt&#39; =&amp;gt; &#39;A cute baby sea otter wearing a hat&#39;,&#xA;        &#39;size&#39; =&amp;gt; &#39;256x256&#39;,&#xA;        &#39;n&#39; =&amp;gt; 5&#xA;    ])&#xA;)-&amp;gt;toModel();&#xA;&#xA;foreach ($response-&amp;gt;data as $item) {&#xA;    var_dump($item-&amp;gt;url);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/images&#34;&gt;Learn more about image generation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Speech to Text Audio Transcription (Whisper)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openaiClient = \Tectalic\OpenAi\Manager::build(new \GuzzleHttp\Client(), new \Tectalic\OpenAi\Authentication(getenv(&#39;OPENAI_API_KEY&#39;)));&#xA;&#xA;/** @var \Tectalic\OpenAi\Models\AudioTranscriptions\CreateResponse $response */&#xA;$response = $openaiClient-&amp;gt;audioTranscriptions()-&amp;gt;create(&#xA;    new \Tectalic\OpenAi\Models\AudioTranscriptions\CreateRequest([&#xA;        &#39;file&#39; =&amp;gt; &#39;/full/path/to/audio/file.mp3&#39;,&#xA;        &#39;model&#39; =&amp;gt; &#39;whisper-1&#39;,&#xA;    ])&#xA;)-&amp;gt;toModel();&#xA;&#xA;echo $response-&amp;gt;text;&#xA;// Your audio transcript in your source language...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported &lt;a href=&#34;https://platform.openai.com/docs/models/whisper&#34;&gt;Whisper models&lt;/a&gt; include &lt;code&gt;whisper-1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/speech-to-text&#34;&gt;Learn more about speech to text&lt;/a&gt;, including the &lt;a href=&#34;https://platform.openai.com/docs/guides/speech-to-text/supported-languages&#34;&gt;50+ supported languages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Speech to Text Audio Translation (Whisper)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openaiClient = \Tectalic\OpenAi\Manager::build(new \GuzzleHttp\Client(), new \Tectalic\OpenAi\Authentication(getenv(&#39;OPENAI_API_KEY&#39;)));&#xA;&#xA;/** @var \Tectalic\OpenAi\Models\AudioTranslations\CreateResponse $response */&#xA;$response = $openaiClient-&amp;gt;audioTranslations()-&amp;gt;create(&#xA;    new \Tectalic\OpenAi\Models\AudioTranslations\CreateRequest([&#xA;        &#39;file&#39; =&amp;gt; &#39;/full/path/to/audio/file.mp3&#39;,&#xA;        &#39;model&#39; =&amp;gt; &#39;whisper-1&#39;,&#xA;    ])&#xA;)-&amp;gt;toModel();&#xA;&#xA;echo $response-&amp;gt;text;&#xA;// Your audio transcript in English...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported &lt;a href=&#34;https://platform.openai.com/docs/models/whisper&#34;&gt;Whisper models&lt;/a&gt; include &lt;code&gt;whisper-1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/speech-to-text&#34;&gt;Learn more about speech to text&lt;/a&gt;, including the &lt;a href=&#34;https://platform.openai.com/docs/guides/speech-to-text/supported-languages&#34;&gt;50+ supported languages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Need help getting started? See our guide: &lt;a href=&#34;https://tectalic.com/blog/build-an-app-using-openai-api&#34;&gt;how to build an app using the OpenAI API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;System Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP version 7.2.5 or newer (including PHP 8.0 and 8.1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.php.net/manual/en/json.installation.php&#34;&gt;PHP JSON extension&lt;/a&gt; installed if using PHP 7.x. As of PHP 8.0, this extension became a core PHP extension so is always enabled.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.php-fig.org/psr/psr-18/&#34;&gt;PSR-18&lt;/a&gt; compatible HTTP client such as &#39;Guzzle&#39; or the &#39;Symfony HTTP Client&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Composer Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install the package into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer require tectalic/openai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After installing the &lt;strong&gt;Tectalic OpenAI REST API Client&lt;/strong&gt; package into your project, ensure you also have a &lt;a href=&#34;https://packagist.org/providers/psr/http-client-implementation&#34;&gt;compatible PSR-18 HTTP client&lt;/a&gt; such as &#39;Guzzle&#39; or the Symfony &#39;HTTP Client&#39;.&lt;/p&gt; &#xA;&lt;p&gt;You can use the following code sample and customize it to suit your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Load your project&#39;s composer autoloader (if you aren&#39;t already doing so).&#xA;require_once(__DIR__ . &#39;/vendor/autoload.php&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Symfony\Component\HttpClient\Psr18Client;&#xA;use Tectalic\OpenAi\Authentication;&#xA;use Tectalic\OpenAi\Client;&#xA;use Tectalic\OpenAi\Manager;&#xA;&#xA;// Build a Tectalic OpenAI REST API Client globally.&#xA;$auth = new Authentication(getenv(&#39;OPENAI_API_KEY&#39;));&#xA;$httpClient = new Psr18Client();&#xA;Manager::build($httpClient, $auth);&#xA;&#xA;// or&#xA;&#xA;// Build a Tectalic OpenAI REST API Client manually.&#xA;$auth = new Authentication(getenv(&#39;OPENAI_API_KEY&#39;));&#xA;$httpClient = new Psr18Client();&#xA;$client = new Client($httpClient, $auth, Manager::BASE_URI);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authentication&lt;/h3&gt; &#xA;&lt;p&gt;To authenticate your API requests, you will need to provide an &lt;code&gt;Authentication&lt;/code&gt; (&lt;code&gt;$auth&lt;/code&gt;) object when calling &lt;code&gt;Manager::build()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Authentication to the &lt;strong&gt;OpenAI API&lt;/strong&gt; is by HTTP Bearer authentication.&lt;/p&gt; &#xA;&lt;p&gt;Please see the OpenAI API documentation for more details on obtaining your authentication credentials.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;strong&gt;Usage&lt;/strong&gt; code above, customize the &lt;code&gt;Authentication&lt;/code&gt; constructor to your needs. For example, will likely need to add a &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable to your system.&lt;/p&gt; &#xA;&lt;h3&gt;Client Class&lt;/h3&gt; &#xA;&lt;p&gt;The primary class you will interact with is the &lt;code&gt;Client&lt;/code&gt; class (&lt;code&gt;Tectalic\OpenAi\Client&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This &lt;code&gt;Client&lt;/code&gt; class also contains the helper methods that let you quickly access the 16 API Handlers.&lt;/p&gt; &#xA;&lt;p&gt;Please see below for a complete list of supported handlers and methods.&lt;/p&gt; &#xA;&lt;h3&gt;Supported API Handlers and Methods&lt;/h3&gt; &#xA;&lt;p&gt;This package supports 23 API Methods, which are grouped into 16 API Handlers.&lt;/p&gt; &#xA;&lt;p&gt;See the table below for a full list of API Handlers and Methods.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;API Handler Class and Method Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;API Verb and URL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AudioTranscriptions::create()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Transcribes audio into the input language.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/audio/transcriptions&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AudioTranslations::create()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Translates audio into into English.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/audio/translations&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ChatCompletions::create()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a completion for the chat message&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/chat/completions&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Completions::create()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a completion for the provided prompt and parameters&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/completions&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Edits::create()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a new edit for the provided input, instruction, and parameters.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/edits&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Embeddings::create()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates an embedding vector representing the input text.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/embeddings&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Files::list()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a list of files that belong to the user&#39;s organization.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt; &lt;code&gt;/files&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Files::create()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/files&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Files::retrieve()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns information about a specific file.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt; &lt;code&gt;/files/{file_id}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Files::delete()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete a file.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;DELETE&lt;/code&gt; &lt;code&gt;/files/{file_id}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FilesContent::download()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the contents of the specified file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt; &lt;code&gt;/files/{file_id}/content&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FineTunes::list()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List your organization&#39;s fine-tuning jobs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt; &lt;code&gt;/fine-tunes&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FineTunes::create()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a job that fine-tunes a specified model from a given dataset.&lt;br&gt;Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.&lt;br&gt;Learn more about Fine-tuning&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/fine-tunes&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FineTunes::retrieve()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Gets info about the fine-tune job.&lt;br&gt;Learn more about Fine-tuning&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt; &lt;code&gt;/fine-tunes/{fine_tune_id}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FineTunesCancel::cancelFineTune()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Immediately cancel a fine-tune job.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/fine-tunes/{fine_tune_id}/cancel&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FineTunesEvents::listFineTune()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get fine-grained status updates for a fine-tune job.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt; &lt;code&gt;/fine-tunes/{fine_tune_id}/events&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ImagesEdits::createImage()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates an edited or extended image given an original image and a prompt.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/images/edits&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ImagesGenerations::create()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates an image given a prompt.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/images/generations&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ImagesVariations::createImage()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a variation of a given image.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/images/variations&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Models::list()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists the currently available models, and provides basic information about each one such as the owner and availability.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt; &lt;code&gt;/models&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Models::retrieve()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Retrieves a model instance, providing basic information about the model such as the owner and permissioning.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt; &lt;code&gt;/models/{model}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Models::delete()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete a fine-tuned model. You must have the Owner role in your organization.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;DELETE&lt;/code&gt; &lt;code&gt;/models/{model}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Moderations::create()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Classifies if text violates OpenAI&#39;s Content Policy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/moderations&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Making a Request&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to make a request to the nominated API Handler and API Method:&lt;/p&gt; &#xA;&lt;p&gt;If you built the client to be accessible globally, you can use the relevant API Handler Class directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Tectalic\OpenAi\Handlers\AudioTranscriptions;&#xA;&#xA;(new AudioTranscriptions())-&amp;gt;create();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can access all API Handlers from the client class using the Client class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client-&amp;gt;audioTranscriptions()-&amp;gt;create();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Retrieving the Response&lt;/h3&gt; &#xA;&lt;p&gt;Once you have made a request using one of the two methods outlined above, the next step is to access the response.&lt;/p&gt; &#xA;&lt;p&gt;You can access the response in different ways. Please choose your preferred one.&lt;/p&gt; &#xA;&lt;h4&gt;Model Responses&lt;/h4&gt; &#xA;&lt;p&gt;Model responses are Data Transfer Object (DTO) style PHP classes, with public properties for each API property.&lt;/p&gt; &#xA;&lt;p&gt;They offer a structured way of retrieving the response from an API request.&lt;/p&gt; &#xA;&lt;p&gt;All Response Models are an instance of &lt;code&gt;Tectalic\OpenAi\Models\AbstractModel&lt;/code&gt; or &lt;code&gt;Tectalic\OpenAi\Models\AbstractModelCollection&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After &lt;a href=&#34;https://raw.githubusercontent.com/tectalichq/public-openai-client-php/main/#making-a-request&#34;&gt;performing the request&lt;/a&gt;, use the &lt;code&gt;-&amp;gt;toModel()&lt;/code&gt; fluent method to the API Method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Tectalic\OpenAi\Handlers\AudioTranscriptions;&#xA;&#xA;$model = (new AudioTranscriptions())-&amp;gt;create()-&amp;gt;toModel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each API Method&#39;s &lt;code&gt;toModel()&lt;/code&gt; call will return the appropriate Model class type for the API Method you have just called.&lt;/p&gt; &#xA;&lt;h4&gt;Associative Array Responses&lt;/h4&gt; &#xA;&lt;p&gt;After performing the request, use the &lt;code&gt;-&amp;gt;toArray()&lt;/code&gt; fluent method to the API Method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Tectalic\OpenAi\Handlers\AudioTranscriptions;&#xA;&#xA;$array = (new AudioTranscriptions())-&amp;gt;create()-&amp;gt;toArray();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the resulting associative array, the array keys will match the names of the public properties in the relevant Model class.&lt;/p&gt; &#xA;&lt;h4&gt;PSR 7 Response Objects&lt;/h4&gt; &#xA;&lt;p&gt;If you need to access the raw response or inspect the HTTP headers, use the &lt;code&gt;-&amp;gt;getResponse()&lt;/code&gt; fluent method to the API Method. It will return a &lt;code&gt;Psr\Http\Message\ResponseInterface&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Tectalic\OpenAi\Handlers\AudioTranscriptions;&#xA;&#xA;$response = (new AudioTranscriptions())-&amp;gt;create()-&amp;gt;getResponse();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Errors&lt;/h3&gt; &#xA;&lt;p&gt;When performing requests with &lt;strong&gt;Tectalic OpenAI REST API Client&lt;/strong&gt;, specific scenarios will cause a &lt;code&gt;Tectalic\OpenAi\Exception\ClientException&lt;/code&gt; to be thrown. Please see below for details.&lt;/p&gt; &#xA;&lt;h4&gt;Invalid Usage of the &lt;code&gt;Manager&lt;/code&gt; Class&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;code&gt;\LogicException&lt;/code&gt; will be thrown if the &lt;code&gt;Manager::build()&lt;/code&gt; function is called multiple times, or if &lt;code&gt;Manager::access()&lt;/code&gt; is called before calling &lt;code&gt;Manager::build()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Unsuccessful HTTP Response Codes&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Tectalic OpenAI REST API Client&lt;/strong&gt; depends on a PSR-18 compatible HTTP client, and that HTTP client should not throw an exception for &lt;a href=&#34;https://www.php-fig.org/psr/psr-18/#error-handling&#34;&gt;unsuccessful HTTP response codes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An unsuccessful response code is classified as one that is not in the range &lt;code&gt;200&lt;/code&gt;-&lt;code&gt;299&lt;/code&gt; (inclusive). Examples of unsuccessful response codes include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Informational responses (&lt;code&gt;100&lt;/code&gt;-&lt;code&gt;199&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Redirection responses (&lt;code&gt;300&lt;/code&gt;-&lt;code&gt;399&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Client error responses (&lt;code&gt;400&lt;/code&gt;-&lt;code&gt;499&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Server error responses (&lt;code&gt;500&lt;/code&gt;-&lt;code&gt;599&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If an unsuccessful response code does occur:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;your HTTP Client will &lt;em&gt;not&lt;/em&gt; throw an Exception.&lt;/li&gt; &#xA; &lt;li&gt;the API Handler&#39;s &lt;code&gt;toModel()&lt;/code&gt; method will throw a &lt;code&gt;ClientException&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;the API Handler&#39;s &lt;code&gt;toArray()&lt;/code&gt; method will return the response body and not throw a &lt;code&gt;ClientException&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The API Handler&#39;s &lt;code&gt;getResponse()&lt;/code&gt; method will return the raw response and not throw a &lt;code&gt;ClientException&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Below is an example of how you may wish to use a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; block when performing a request so that you can detect and handle unexpected errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Tectalic\OpenAi\Authentication;&#xA;use Tectalic\OpenAi\Client;&#xA;use Tectalic\OpenAi\ClientException;&#xA;use Tectalic\OpenAi\Manager;&#xA;&#xA;// Build a Tectalic OpenAI REST API Client globally.&#xA;$auth = new Authentication(&#39;token&#39;);&#xA;Manager::build($httpClient, $auth);&#xA;$handler = new AudioTranscriptions();&#xA;&#xA;// Perform a request&#xA;try {&#xA;    $model = $handler-&amp;gt;create()-&amp;gt;toModel();&#xA;    // Do something with the response model...&#xA;} catch (ClientException $e) {&#xA;    // Error response received. Retrieve the HTTP response code and response body.&#xA;    $responseBody = $handler-&amp;gt;toArray();&#xA;    $responseCode = $handler-&amp;gt;getResponse()-&amp;gt;getStatusCode();&#xA;    // Handle the error...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HTTP Client Exceptions&lt;/h4&gt; &#xA;&lt;p&gt;If your HTTP client of choice throws an exception other than &lt;code&gt;ClientException&lt;/code&gt;, the &lt;strong&gt;Tectalic OpenAI REST API Client&lt;/strong&gt; &lt;code&gt;Client&lt;/code&gt; and its API Handler classes will let these exceptions bubble up.&lt;/p&gt; &#xA;&lt;p&gt;Consult your HTTP client&#39;s documentation for more details on exception handling.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Tectalic OpenAI REST API Client&lt;/strong&gt; package includes several types of automated PHPUnit tests to verify the correct operation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unit Tests&lt;/li&gt; &#xA; &lt;li&gt;Integration Tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run these tests, you will need to have installed the &lt;strong&gt;Tectalic OpenAI REST API Client&lt;/strong&gt; package with its dev dependencies (i.e. not using the &lt;code&gt;--no-dev&lt;/code&gt; flag when running composer).&lt;/p&gt; &#xA;&lt;h3&gt;Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;These PHPUnit tests are designed to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;confirm that each API Method assembles a valid request that matches the OpenAI API OpenAPI specification.&lt;/li&gt; &#xA; &lt;li&gt;verify the behaviour of other parts of the package, such as the &lt;code&gt;Client&lt;/code&gt; and &lt;code&gt;Manager&lt;/code&gt; classes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The unit tests can be run using the following command, which needs to be run from this package&#39;s root directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer test:unit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unit tests do &lt;em&gt;not&lt;/em&gt; perform any real requests against the OpenAI API.&lt;/p&gt; &#xA;&lt;p&gt;Unit tests are located in the &lt;code&gt;tests/Unit&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Integration Tests&lt;/h3&gt; &#xA;&lt;p&gt;Integration tests are located in the &lt;code&gt;tests/Integration&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;These PHPUnit tests are designed to confirm that each API Method parses a valid response, according to the OpenAI API OpenAPI specification. Out of the box the integration tests are designed to work with the &lt;a href=&#34;https://meta.stoplight.io/docs/prism/&#34;&gt;Prism Mock Server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Using Prism as the Target&lt;/h4&gt; &#xA;&lt;p&gt;Make sure Prism is installed. Please see the &lt;a href=&#34;https://meta.stoplight.io/docs/prism/&#34;&gt;Prism documentation&lt;/a&gt; for details on how to install Prism.&lt;/p&gt; &#xA;&lt;p&gt;Once Prism is installed, you can run prism and the integration tests side by side in separate terminal windows, or using the following command, which need to be run from this package&#39;s root directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo &#34;&amp;gt; Starting Prism server&#34;&#xA;prism mock tests/openapi.yaml &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&#xA;PRISM_PID=$!&#xA;sleep 2&#xA;echo &#34;  =&amp;gt; Started&#34;&#xA;composer test:integration&#xA;kill $PRISM_PID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those commands will start the Prism mock server, then run the integration tests, and then stop the Prism mock server when the tests are completed.&lt;/p&gt; &#xA;&lt;p&gt;In this case the integration tests do &lt;em&gt;not&lt;/em&gt; perform any real requests against the OpenAI API.&lt;/p&gt; &#xA;&lt;h4&gt;Using a Different Target&lt;/h4&gt; &#xA;&lt;p&gt;By setting the &lt;code&gt;OPENAI_CLIENT_TEST_BASE_URI&lt;/code&gt; environment variable, you can set a different API endpoint target for the integration tests.&lt;/p&gt; &#xA;&lt;p&gt;For example, instead of using Prism, you can use a different mocking/staging/test server of your choice, or you can use the OpenAI API&#39;s live endpoints.&lt;/p&gt; &#xA;&lt;p&gt;Do not forget to set the appropriate credentials in the &lt;code&gt;OPENAI_CLIENT_TEST_AUTH_USERNAME&lt;/code&gt; &lt;code&gt;OPENAI_CLIENT_TEST_AUTH_PASSWORD&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;After your setup is complete simply run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composer test:integration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We do not recommend running integration tests against the live OpenAI API endpoints. This is because the tests will send example data to all endpoints, which can result in new data being created, or existing data being deleted.&lt;/p&gt; &#xA;&lt;h3&gt;Writing Your Own Tests&lt;/h3&gt; &#xA;&lt;p&gt;If you are writing your own tests, you will likely need to mock the responses from the &lt;strong&gt;OpenAI API&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;One way of doing this is to install the &lt;code&gt;php-http/mock-client&lt;/code&gt; package into your project, and then use the &lt;code&gt;\Http\Mock\Client&lt;/code&gt; class (instead of a real PSR-18 client) when instantiating the &lt;strong&gt;Tectalic OpenAI REST API Client&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This allows you to mock the responses from the &lt;strong&gt;OpenAI API&lt;/strong&gt;, rather than performing real requests.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://docs.php-http.org/en/latest/clients/mock-client.html#mock-client&#34;&gt;Mock Client documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions or feedback, please use the &lt;a href=&#34;https://github.com/tectalichq/public-openai-client-php/discussions&#34;&gt;discussion board&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This software is copyright (c) 2022-present &lt;a href=&#34;https://tectalic.com&#34;&gt;Tectalic&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For copyright and license information, please view the &lt;strong&gt;LICENSE&lt;/strong&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>webboy/open-ai-api-client</title>
    <updated>2023-03-23T01:41:20Z</updated>
    <id>tag:github.com,2023-03-23:/webboy/open-ai-api-client</id>
    <link href="https://github.com/webboy/open-ai-api-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP client for the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHP OpenAI API Client&lt;/h1&gt; &#xA;&lt;p&gt;A simple community-maintained PHP client library for interacting with the OpenAI API. This package provides an easy way to use OpenAI&#39;s GPT models for tasks such as text generation and completion.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this is an unofficial library.&lt;/p&gt; &#xA;&lt;p&gt;This library is handy because it returns back a raw response as array which can then be used by any kind of adapter class.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 8.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;Guzzle HTTP client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via Composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require webboy/open-ai-api-client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage examples&lt;/h2&gt; &#xA;&lt;p&gt;First, create an instance of the &lt;code&gt;Endpoint&lt;/code&gt; classes with your API key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require_once(&#39;vendor/autoload.php&#39;);&#xA;&#xA;use Dotenv\Dotenv;&#xA;use Webboy\OpenAiApiClient\Endpoints\OpenAICompletions;&#xA;use Webboy\OpenAiApiClient\Exceptions\OpenAIClientException;&#xA;&#xA;$dotenv = Dotenv::createImmutable(__DIR__);&#xA;$dotenv-&amp;gt;load();&#xA;&#xA;$apiKey = $_ENV[&#39;OPENAI_API_KEY&#39;];&#xA;&#xA;$client = new OpenAICompletions($apiKey);&#xA;&#xA;$options[&#39;model&#39;]   = &#39;text-davinci-003&#39;;&#xA;$options[&#39;prompt&#39;]  = &#39;What time is it?&#39;;&#xA;&#xA;try {&#xA;    print_r($client-&amp;gt;create($options));&#xA;} catch (OpenAIClientException $exception) {&#xA;    die(&#39;OpenAI error occured: &#39;.$exception-&amp;gt;getMessage());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above code will generate something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Array&#xA;(&#xA;    [id] =&amp;gt; cmpl-6wAQB0aPhvbxMAyIdz98z8jpPeKdq&#xA;    [object] =&amp;gt; text_completion&#xA;    [created] =&amp;gt; 1679321103&#xA;    [model] =&amp;gt; text-davinci-003&#xA;    [choices] =&amp;gt; Array&#xA;        (&#xA;            [0] =&amp;gt; Array&#xA;                (&#xA;                    [text] =&amp;gt;It is 6:25 PM.&#xA;                    [index] =&amp;gt; 0&#xA;                    [logprobs] =&amp;gt;&#xA;                    [finish_reason] =&amp;gt; stop&#xA;                )&#xA;        )&#xA;    [usage] =&amp;gt; Array&#xA;        (&#xA;            [prompt_tokens] =&amp;gt; 5&#xA;            [completion_tokens] =&amp;gt; 9&#xA;            [total_tokens] =&amp;gt; 14&#xA;        )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Endpoint classes are created to accept HTTP client as a parameter, which enables mocking tests to be performed without making real API calls. If you need to make real API calls, feel free to create a testuit. To run PHPUnit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;./vendor/bin/phpunit&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The PHP OpenAI API Client is open-sourced software licensed under the MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>