<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-25T01:37:08Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>10up/plugin-check</title>
    <updated>2023-09-25T01:37:08Z</updated>
    <id>tag:github.com,2023-09-25:/10up/plugin-check</id>
    <link href="https://github.com/10up/plugin-check" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A repository for the new Plugin Check plugin from the WordPress Performance team&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Plugin Check&lt;/h1&gt; &#xA;&lt;p&gt;This repository is for the WordPress plugin checker, a tool for plugin developers to analyze their plugin code and flag any violations or concerns around plugin development best practices, from basic requirements like correct usage of internationalization functions to accessibility, performance, and security best practices.&lt;/p&gt; &#xA;&lt;p&gt;The WordPress plugin checker was &lt;a href=&#34;https://make.wordpress.org/plugins/2022/07/05/proposal-for-a-wordpress-plugin-checker/&#34;&gt;first proposed in summer 2022&lt;/a&gt; and is now at an early MVP stage.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;For end users&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allows analyzing any installed plugin using either a WP Admin screen or a WP-CLI command.&lt;/li&gt; &#xA; &lt;li&gt;Supports two kinds of checks: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Static checks, which analyze the code, either using PHPCodeSniffer sniffs or custom logic e.g. using regular expressions.&lt;/li&gt; &#xA;   &lt;li&gt;Runtime checks, which actually execute certain parts of the code, such as running specific WordPress hooks with the plugin active.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Allows customizing which checks are run, either via a list of individual check identifiers, or specific check categories.&lt;/li&gt; &#xA; &lt;li&gt;Comes with an ever-growing list of checks for various plugin development requirements and best practices. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/10up/plugin-check/trunk/includes/Checker/Abstract_Check_Runner.php#L358&#34;&gt;&lt;code&gt;Abstract_Check_Runner::register_checks()&lt;/code&gt; method&lt;/a&gt; for a quick overview of currently available checks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For developers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Facilitates efficient yet flexible authoring of new checks, either using a base class for common check patterns, or implementing an interface for more specific checks. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Every check has to implement either the &lt;a href=&#34;https://raw.githubusercontent.com/10up/plugin-check/trunk/includes/Checker/Static_Check.php&#34;&gt;&lt;code&gt;Static_Check&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/10up/plugin-check/trunk/includes/Checker/Runtime_Check.php&#34;&gt;&lt;code&gt;Runtime_Check&lt;/code&gt;&lt;/a&gt; interface.&lt;/li&gt; &#xA;   &lt;li&gt;Most checks will benefit from extending either the &lt;a href=&#34;https://raw.githubusercontent.com/10up/plugin-check/trunk/includes/Checker/Checks/Abstract_File_Check.php&#34;&gt;&lt;code&gt;Abstract_File_Check&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&#34;https://raw.githubusercontent.com/10up/plugin-check/trunk/includes/Checker/Checks/Abstract_PHP_CodeSniffer_Check.php&#34;&gt;&lt;code&gt;Abstract_PHPCodeSniffer_Check&lt;/code&gt;&lt;/a&gt;, or the &lt;a href=&#34;https://raw.githubusercontent.com/10up/plugin-check/trunk/includes/Checker/Checks/Abstract_Runtime_Check.php&#34;&gt;&lt;code&gt;Abstract_Runtime_Check&lt;/code&gt;&lt;/a&gt; class.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Comes with comprehensive unit test coverage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;The WordPress plugin checker is a WordPress plugin itself, which can be installed on any WordPress site. While it is implemented in a way that should avoid any disruptions on the site that it is being used on, it is still &lt;strong&gt;advised not to use the plugin checker in a production environment&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the only way to install the plugin checker is to download it from this GitHub repository. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/10up/plugin-check/trunk/#contributing&#34;&gt;contributing section below&lt;/a&gt; for further instructions. Once a first beta version is available, it will be distributed in a standalone ZIP file, e.g. via the wordpress.org plugin repository.&lt;/p&gt; &#xA;&lt;p&gt;After having the plugin activated, you can analyze any other plugin installed on the same site, either using the WP Admin user interface or WP-CLI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To check a plugin using WP Admin, please navigate to the &lt;em&gt;Tools &amp;gt; Plugin Check&lt;/em&gt; menu. You need to be able to manage plugins on your site in order to access that screen.&lt;/li&gt; &#xA; &lt;li&gt;To check a plugin using WP-CLI, please use the &lt;code&gt;wp plugin check&lt;/code&gt; command. For example, to check the &#34;Hello Dolly&#34; plugin: &lt;code&gt;wp plugin check hello.php&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that by default when using WP-CLI, only static checks can be executed. In order to also include runtime checks, a workaround is currently necessary using the &lt;code&gt;--require&lt;/code&gt; argument of WP-CLI, to manually load the &lt;code&gt;cli.php&lt;/code&gt; file within the plugin checker directory before WordPress is loaded. For example: &lt;code&gt;wp plugin check hello.php --require=./wp-content/plugins/plugin-check/cli.php&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img alt=&#34;WordPress plugin checker UI in WP Admin&#34; src=&#34;https://github.com/10up/plugin-check/assets/3531426/19d0c1ce-8c37-4efd-b8c6-d252e6ce29c9&#34;&gt; &#xA;&lt;em&gt;Screenshot of the plugin checker&#39;s UI in WP Admin&lt;/em&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To set up the repository locally, you will need to clone this GitHub repository (or a fork of it) and then install the relevant dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/10up/plugin-check.git wp-content/plugins/plugin-check&#xA;cd wp-content/plugins/plugin-check&#xA;composer install&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Built-in development environment (optional)&lt;/h3&gt; &#xA;&lt;p&gt;With the above commands, you can use the plugin in any development environment as you like. The recommended way is to use the built-in development environment, which is based on the &lt;a href=&#34;https://www.npmjs.com/package/@wordpress/env&#34;&gt;&lt;code&gt;@wordpress/env&lt;/code&gt; package&lt;/a&gt;, as that will allow you to use the preconfigured commands to e.g. run unit tests, linting etc. You will need to have Docker installed to use this environment.&lt;/p&gt; &#xA;&lt;p&gt;You can start the built-in environment as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run wp-env start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to stop the environment again, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run wp-env stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further information on contributing, please see the &lt;a href=&#34;https://raw.githubusercontent.com/10up/plugin-check/trunk/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Technical documentation&lt;/h3&gt; &#xA;&lt;p&gt;To learn more about the functionality and technical details of the WordPress plugin checker, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/10up/plugin-check/trunk/docs/README.md&#34;&gt;technical documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The WordPress plugin checker is free software, and is released under the terms of the GNU General Public License version 2 or (at your option) any later version. See &lt;a href=&#34;https://raw.githubusercontent.com/10up/plugin-check/trunk/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for complete license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cjmellor/browser-sessions</title>
    <updated>2023-09-25T01:37:08Z</updated>
    <id>tag:github.com,2023-09-25:/cjmellor/browser-sessions</id>
    <link href="https://github.com/cjmellor/browser-sessions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Laravel package to enable users to manage and monitor their active browser sessions. Allows users to view devices where they are logged in and provides options to terminate unrecognized or all sessions, enhancing account security&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/cjmellor/browser-sessions&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/cjmellor/browser-sessions?color=rgb%2856%20189%20248%29&amp;amp;label=release&amp;amp;style=for-the-badge&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/cjmellor/browser-sessions&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/cjmellor/browser-sessions.svg?color=rgb%28249%20115%2022%29&amp;amp;style=for-the-badge&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/packagist/dependency-v/cjmellor/browser-sessions/php?color=rgb%28165%20180%20252%29&amp;amp;logo=php&amp;amp;logoColor=rgb%28165%20180%20252%29&amp;amp;style=for-the-badge&#34; alt=&#34;Packagist PHP Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/laravel-%5E10-rgb(235%2068%2050)?style=for-the-badge&amp;amp;logo=laravel&#34; alt=&#34;Laravel Version&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This package can only be used with the &lt;code&gt;database&lt;/code&gt; driver for the Sessions. This is how it is done in Jetstream, so keep this in mind as it may turn you off knowing you need to manage sessions in the database.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Logout Other Browser Sessions&lt;/h1&gt; &#xA;&lt;p&gt;This package allows you to log out sessions that are active on other devices.&lt;/p&gt; &#xA;&lt;p&gt;You may find this useful if you have logged in on a different device, or you have let someone else use your account, or you have forgotten to log out of a public computer. It can especially be useful if you see suspicious device activity on your account.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This code has been extracted from &lt;a href=&#34;https://jetstream.laravel.com&#34;&gt;Laravel Jetstream&lt;/a&gt; and cannot be used outside a Laravel application.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via Composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require cjmellor/browser-sessions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Retrieving A User&#39;s Current Sessions&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;BrowserSessions&lt;/code&gt; facade to retrieve all the current user&#39;s sessions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;BrowserSessions::sessions();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will return an object with some information about each session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;[&#xA;  {&#xA;    &#34;device&#34;: {&#xA;      &#34;browser&#34;: &#34;Safari&#34;,&#xA;      &#34;desktop&#34;: true,&#xA;      &#34;mobile&#34;: false,&#xA;      &#34;platform&#34;: &#34;OS X&#34;&#xA;    },&#xA;    &#34;ip_address&#34;: &#34;127.0.0.1&#34;,&#xA;    &#34;is_current_device&#34;: true,&#xA;    &#34;last_active&#34;: &#34;1 second ago&#34;&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logging Out Other Browser Sessions&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;BrowserSessions&lt;/code&gt; facade to log out all the user&#39;s other browser sessions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;BrowserSessions::logoutOtherBrowserSessions();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;A &lt;code&gt;password&lt;/code&gt; must be sent along to the method to confirm the user&#39;s identity. Only then will the sessions be removed. See below on how you would implement this.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Views&lt;/h3&gt; &#xA;&lt;p&gt;The package does not come with any pre-defined views to use. Here is an example though on how this could be implemented&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;code&gt;routes/web.php&lt;/code&gt; file add the following route:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::delete(&#39;logout-browser-sessions&#39;, function () {&#xA;    BrowserSessions::logoutOtherBrowserSessions();&#xA;&#xA;    return back()-&amp;gt;with(&#39;status&#39;, &#39;Logged out of other browser sessions.&#39;);&#xA;})-&amp;gt;name(&#39;logout-browser-sessions&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in your view, you can add a form to submit a &lt;code&gt;DELETE&lt;/code&gt; request to the above route:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form method=&#34;POST&#34; action=&#34;{{ route(&#39;logout-browser-sessions&#39;) }}&#34;&amp;gt;&#xA;    @csrf&#xA;    @method(&#39;DELETE&#39;)&#xA;    &#xA;    &amp;lt;x-text-input label=&#34;Password&#34; name=&#34;password&#34; placeholder=&#34;Enter password&#34; type=&#34;password&#34; /&amp;gt;&#xA;    &#xA;    &amp;lt;button type=&#34;submit&#34;&amp;gt;Logout Other Sessions&amp;lt;/button&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Retrieve the Users&#39; Last Activity&lt;/h2&gt; &#xA;&lt;p&gt;Get the users&#39; last activity by using the &lt;code&gt;getUserLastActivity&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;BrowserSessions::getUserLastActivity();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also view the date in a human-readable format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;BrowserSessions::getUserLastActivity(human: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cjmellor&#34;&gt;Chris Mellor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT Licence (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/cjmellor/browser-sessions/main/LICENSE&#34;&gt;Licence File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>phpDocumentor/ReflectionCommon</title>
    <updated>2023-09-25T01:37:08Z</updated>
    <id>tag:github.com,2023-09-25:/phpDocumentor/ReflectionCommon</id>
    <link href="https://github.com/phpDocumentor/ReflectionCommon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/phpDocumentor/ReflectionCommon/workflows/Qa%20workflow/badge.svg?sanitize=true&#34; alt=&#34;Qa workflow&#34;&gt; &lt;a href=&#34;https://coveralls.io/github/phpDocumentor/ReflectionCommon?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/github/phpDocumentor/ReflectionCommon.svg?sanitize=true&#34; alt=&#34;Coveralls Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/phpDocumentor/ReflectionCommon/?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/coverage/g/phpDocumentor/ReflectionCommon.svg?sanitize=true&#34; alt=&#34;Scrutinizer Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/phpDocumentor/ReflectionCommon/?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/g/phpDocumentor/ReflectionCommon.svg?sanitize=true&#34; alt=&#34;Scrutinizer Code Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpDocumentor/Reflection-Common&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/phpDocumentor/Reflection-Common.svg?sanitize=true&#34; alt=&#34;Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpDocumentor/Reflection-Common&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/vpre/phpDocumentor/Reflection-Common.svg?sanitize=true&#34; alt=&#34;Unstable Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ReflectionCommon&lt;/h1&gt;</summary>
  </entry>
</feed>